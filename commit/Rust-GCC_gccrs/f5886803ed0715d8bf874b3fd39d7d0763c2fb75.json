{"sha": "f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU4ODY4MDNlZDA3MTVkOGJmODc0YjNmZDM5ZDdkMDc2M2MyZmI3NQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "francois.cppdevs@free.fr", "date": "2011-05-07T13:45:24Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2011-05-07T13:45:24Z"}, "message": "macro.h (_GLIBCXX_DEBUG_VERIFY_AT): New.\n\n2011-05-07  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n\n\t* include/debug/macro.h (_GLIBCXX_DEBUG_VERIFY_AT): New.\n\t(_GLICXX_DEBUG_VERIFY): Use latter.\n\t* include/ext/pb_ds/detail/resize_policy/\n\thash_load_check_resize_trigger_imp.hpp: Emit assertion on the line\n\tcontaining the original assert call.\n\t* include/ext/pb_ds/detail/binomial_heap_base_/erase_fn_imps.hpp,\n\tfind_fn_imps.hpp, insert_fn_imps.hpp, binomial_heap_base_.hpp,\n\tconstructors_destructor_fn_imps.hpp, debug_fn_imps.hpp,\n\tsplit_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n\terase_store_hash_fn_imps.hpp, insert_no_store_hash_fn_imps.hpp,\n\tfind_fn_imps.hpp, insert_store_hash_fn_imps.hpp, debug_fn_imps.hpp,\n\tdebug_no_store_hash_fn_imps.hpp, cc_ht_map_.hpp, resize_fn_imps.hpp,\n\tconstructor_destructor_fn_imps.hpp, debug_store_hash_fn_imps.hpp,\n\terase_no_store_hash_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp,\n\tinsert_join_fn_imps.hpp, pat_trie_/head.hpp, debug_fn_imps.hpp,\n\tconstructors_destructor_fn_imps.hpp, pat_trie_.hpp, split_fn_imps.hpp,\n\tleaf.hpp, erase_fn_imps.hpp, node_base.hpp, internal_node.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/bin_search_tree_/find_fn_imps.hpp,\n\tr_erase_fn_imps.hpp, constructors_destructor_fn_imps.hpp,\n\tdebug_fn_imps.hpp, rotate_fn_imps.hpp, erase_fn_imps.hpp,\n\tbin_search_tree_.hpp, insert_fn_imps.hpp, split_join_fn_imps.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n\terase_store_hash_fn_imps.hpp, insert_no_store_hash_fn_imps.hpp,\n\tfind_fn_imps.hpp, gp_ht_map_.hpp, insert_store_hash_fn_imps.hpp,\n\tdebug_fn_imps.hpp, erase_fn_imps.hpp, debug_no_store_hash_fn_imps.hpp,\n\tresize_fn_imps.hpp, constructor_destructor_fn_imps.hpp,\n\tdebug_store_hash_fn_imps.hpp, erase_no_store_hash_fn_imps.hpp:\n\tLikewise.\n\t* include/ext/pb_ds/detail/binary_heap_/find_fn_imps.hpp,\n\tconstructors_destructor_fn_imps.hpp, debug_fn_imps.hpp,\n\terase_fn_imps.hpp, insert_fn_imps.hpp, binary_heap_.hpp,\n\tresize_policy.hpp, split_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/pairing_heap_/erase_fn_imps.hpp,\n\tfind_fn_imps.hpp, insert_fn_imps.hpp,\n\tconstructors_destructor_fn_imps.hpp, debug_fn_imps.hpp,\n\tpairing_heap_.hpp, split_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/binomial_heap_/\n\tconstructors_destructor_fn_imps.hpp, debug_fn_imps.hpp,\n\tbinomial_heap_.hpp: Likewise.\n\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n\terase_fn_imps.hpp, left_child_next_sibling_heap_.hpp,\n\tconstructors_destructor_fn_imps.hpp, debug_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/thin_heap_/erase_fn_imps.hpp,\n\tfind_fn_imps.hpp, thin_heap_.hpp, insert_fn_imps.hpp,\n\tconstructors_destructor_fn_imps.hpp, debug_fn_imps.hpp,\n\tsplit_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp,\n\tov_tree_map_.hpp, constructors_destructor_fn_imps.hpp,\n\tdebug_fn_imps.hpp, split_join_fn_imps.hpp, info_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/debug_map_base.hpp: Likewise.\n\t* include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp,\n\tfind_fn_imps.hpp, insert_fn_imps.hpp,\n\tconstructors_destructor_fn_imps.hpp, debug_fn_imps.hpp,\n\tsplay_fn_imps.hpp, split_join_fn_imps.hpp, splay_tree_.hpp: Likewise.\n\t* include/ext/pb_ds/detail/list_update_map_/erase_fn_imps.hpp,\n\tfind_fn_imps.hpp, lu_map_.hpp, constructor_destructor_fn_imps.hpp,\n\tinsert_fn_imps.hpp, debug_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/rc_binomial_heap_/erase_fn_imps.hpp,\n\trc_binomial_heap_.hpp, insert_fn_imps.hpp,\n\tconstructors_destructor_fn_imps.hpp, debug_fn_imps.hpp, rc.hpp,\n\tsplit_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp,\n\tinsert_fn_imps.hpp, constructors_destructor_fn_imps.hpp,\n\tdebug_fn_imps.hpp, rb_tree_.hpp, split_join_fn_imps.hpp: Likewise.\n\t* include/ext/pb_ds/hash_policy.hpp: Likewise.\n\nFrom-SVN: r173529", "tree": {"sha": "f99e9ee2432838fa7b4ac3795fc7f757801483ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f99e9ee2432838fa7b4ac3795fc7f757801483ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/comments", "author": null, "committer": null, "parents": [{"sha": "6f4d39bb3f20a2bdf5e8767596557030241f9219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4d39bb3f20a2bdf5e8767596557030241f9219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f4d39bb3f20a2bdf5e8767596557030241f9219"}], "stats": {"total": 3118, "additions": 1766, "deletions": 1352}, "files": [{"sha": "af2f9b9a4108ba8d5d95ef9f623d4eaaa8f18c6e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,3 +1,75 @@\n+2011-05-07  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n+\n+\t* include/debug/macro.h (_GLIBCXX_DEBUG_VERIFY_AT): New.\n+\t(_GLICXX_DEBUG_VERIFY): Use latter.\n+\t* include/ext/pb_ds/detail/resize_policy/\n+\thash_load_check_resize_trigger_imp.hpp: Emit assertion on the line\n+\tcontaining the original assert call.\n+\t* include/ext/pb_ds/detail/binomial_heap_base_/erase_fn_imps.hpp,\n+\tfind_fn_imps.hpp, insert_fn_imps.hpp, binomial_heap_base_.hpp,\n+\tconstructors_destructor_fn_imps.hpp, debug_fn_imps.hpp,\n+\tsplit_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/cc_hash_table_map_/\n+\terase_store_hash_fn_imps.hpp, insert_no_store_hash_fn_imps.hpp,\n+\tfind_fn_imps.hpp, insert_store_hash_fn_imps.hpp, debug_fn_imps.hpp,\n+\tdebug_no_store_hash_fn_imps.hpp, cc_ht_map_.hpp, resize_fn_imps.hpp,\n+\tconstructor_destructor_fn_imps.hpp, debug_store_hash_fn_imps.hpp,\n+\terase_no_store_hash_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp,\n+\tinsert_join_fn_imps.hpp, pat_trie_/head.hpp, debug_fn_imps.hpp,\n+\tconstructors_destructor_fn_imps.hpp, pat_trie_.hpp, split_fn_imps.hpp,\n+\tleaf.hpp, erase_fn_imps.hpp, node_base.hpp, internal_node.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/bin_search_tree_/find_fn_imps.hpp,\n+\tr_erase_fn_imps.hpp, constructors_destructor_fn_imps.hpp,\n+\tdebug_fn_imps.hpp, rotate_fn_imps.hpp, erase_fn_imps.hpp,\n+\tbin_search_tree_.hpp, insert_fn_imps.hpp, split_join_fn_imps.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/gp_hash_table_map_/\n+\terase_store_hash_fn_imps.hpp, insert_no_store_hash_fn_imps.hpp,\n+\tfind_fn_imps.hpp, gp_ht_map_.hpp, insert_store_hash_fn_imps.hpp,\n+\tdebug_fn_imps.hpp, erase_fn_imps.hpp, debug_no_store_hash_fn_imps.hpp,\n+\tresize_fn_imps.hpp, constructor_destructor_fn_imps.hpp,\n+\tdebug_store_hash_fn_imps.hpp, erase_no_store_hash_fn_imps.hpp:\n+\tLikewise.\n+\t* include/ext/pb_ds/detail/binary_heap_/find_fn_imps.hpp,\n+\tconstructors_destructor_fn_imps.hpp, debug_fn_imps.hpp,\n+\terase_fn_imps.hpp, insert_fn_imps.hpp, binary_heap_.hpp,\n+\tresize_policy.hpp, split_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/pairing_heap_/erase_fn_imps.hpp,\n+\tfind_fn_imps.hpp, insert_fn_imps.hpp,\n+\tconstructors_destructor_fn_imps.hpp, debug_fn_imps.hpp,\n+\tpairing_heap_.hpp, split_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/binomial_heap_/\n+\tconstructors_destructor_fn_imps.hpp, debug_fn_imps.hpp,\n+\tbinomial_heap_.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/left_child_next_sibling_heap_/\n+\terase_fn_imps.hpp, left_child_next_sibling_heap_.hpp,\n+\tconstructors_destructor_fn_imps.hpp, debug_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/thin_heap_/erase_fn_imps.hpp,\n+\tfind_fn_imps.hpp, thin_heap_.hpp, insert_fn_imps.hpp,\n+\tconstructors_destructor_fn_imps.hpp, debug_fn_imps.hpp,\n+\tsplit_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp,\n+\tov_tree_map_.hpp, constructors_destructor_fn_imps.hpp,\n+\tdebug_fn_imps.hpp, split_join_fn_imps.hpp, info_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/debug_map_base.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp,\n+\tfind_fn_imps.hpp, insert_fn_imps.hpp,\n+\tconstructors_destructor_fn_imps.hpp, debug_fn_imps.hpp,\n+\tsplay_fn_imps.hpp, split_join_fn_imps.hpp, splay_tree_.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/list_update_map_/erase_fn_imps.hpp,\n+\tfind_fn_imps.hpp, lu_map_.hpp, constructor_destructor_fn_imps.hpp,\n+\tinsert_fn_imps.hpp, debug_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/rc_binomial_heap_/erase_fn_imps.hpp,\n+\trc_binomial_heap_.hpp, insert_fn_imps.hpp,\n+\tconstructors_destructor_fn_imps.hpp, debug_fn_imps.hpp, rc.hpp,\n+\tsplit_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp,\n+\tinsert_fn_imps.hpp, constructors_destructor_fn_imps.hpp,\n+\tdebug_fn_imps.hpp, rb_tree_.hpp, split_join_fn_imps.hpp: Likewise.\n+\t* include/ext/pb_ds/hash_policy.hpp: Likewise.\n+\n 2011-05-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/22_locale/messages_byname/named_equivalence.cc: Fix."}, {"sha": "391839bcad8a0e2454af8037628a6a7c8c2c7296", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // Debugging support implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -39,14 +39,17 @@\n  * the user error and where the error is reported.\n  *\n  */\n-#define _GLIBCXX_DEBUG_VERIFY(_Condition,_ErrorMessage)\t\t        \\\n-  do \t\t\t\t\t\t\t\t\t\\\n+#define _GLIBCXX_DEBUG_VERIFY_AT(_Condition,_ErrorMessage,_File,_Line)\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     if (! (_Condition))\t\t\t\t\t\t\t\\\n-      __gnu_debug::_Error_formatter::_M_at(__FILE__, __LINE__)\t        \\\n+      __gnu_debug::_Error_formatter::_M_at(_File, _Line)\t\t\\\n \t  ._ErrorMessage._M_error();\t\t\t\t\t\\\n   } while (false)\n \n+#define _GLIBCXX_DEBUG_VERIFY(_Condition,_ErrorMessage)\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Condition,_ErrorMessage,__FILE__,__LINE__)\n+\n // Verify that [_First, _Last) forms a valid iterator range.\n #define __glibcxx_check_valid_range(_First,_Last)\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(__gnu_debug::__valid_range(_First, _Last),\t\\"}, {"sha": "8be0f80c5b2c6229a936b8f632e9caf21376f9ca", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/bin_search_tree_.hpp", "status": "modified", "additions": 50, "deletions": 19, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fbin_search_tree_.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -403,51 +403,58 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n \n       void\n-      structure_only_assert_valid() const;\n+      structure_only_assert_valid(const char* file, int line) const;\n \n       void\n-      assert_node_consistent(const node_pointer p_nd) const;\n+      assert_node_consistent(const node_pointer p_nd,\n+\t\t\t     const char* file, int line) const;\n #endif \n \n     private:\n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_iterators() const;\n+      assert_iterators(const char* file, int line) const;\n \n       void\n-      assert_consistent_with_debug_base() const;\n+      assert_consistent_with_debug_base(const char* file, int line) const;\n \n       void\n-      assert_node_consistent_with_left(const node_pointer p_nd) const;\n+      assert_node_consistent_with_left(const node_pointer p_nd,\n+\t\t\t\t       const char* file, int line) const;\n \n       void\n-      assert_node_consistent_with_right(const node_pointer p_nd) const;\n+      assert_node_consistent_with_right(const node_pointer p_nd,\n+\t\t\t\t\tconst char* file, int line) const;\n \n       void\n-      assert_consistent_with_debug_base(const node_pointer p_nd) const;\n+      assert_consistent_with_debug_base(const node_pointer p_nd,\n+\t\t\t\t\tconst char* file, int line) const;\n \n       void\n-      assert_min() const;\n+      assert_min(const char* file, int line) const;\n \n       void\n-      assert_min_imp(const node_pointer p_nd) const;\n+      assert_min_imp(const node_pointer p_nd,\n+\t\t     const char* file, int line) const;\n \n       void\n-      assert_max() const;\n+      assert_max(const char* file, int line) const;\n \n       void\n-      assert_max_imp(const node_pointer p_nd) const;\n+      assert_max_imp(const node_pointer p_nd,\n+\t\t     const char* file, int line) const;\n \n       void\n-      assert_size() const;\n+      assert_size(const char* file, int line) const;\n \n       typedef std::pair< const_pointer, const_pointer> node_consistent_t;\n \n       node_consistent_t\n-      assert_node_consistent_(const node_pointer p_nd) const;\n+      assert_node_consistent_(const node_pointer p_nd,\n+\t\t\t      const char* file, int line) const;\n #endif \n \n       void\n@@ -464,6 +471,28 @@ namespace __gnu_pbds\n       static node_allocator s_node_allocator;\n     };\n \n+#define PB_DS_ASSERT_VALID(X)\t\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_STRUCT_ONLY_ASSERT_VALID(X)\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.structure_only_assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_ASSERT_NODE_CONSISTENT(_Node)\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(_Node, __FILE__, __LINE__);)\n+\n+#define PB_DS_CHECK_KEY_EXISTS(_Key)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(_Key, __FILE__, __LINE__);)\n+\n+#define PB_DS_CHECK_KEY_DOES_NOT_EXIST(_Key)\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(_Key,\t\\\n+\t\t\t\t\t\t\t   __FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n #include <ext/pb_ds/detail/bin_search_tree_/constructors_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/bin_search_tree_/iterators_fn_imps.hpp>\n #include <ext/pb_ds/detail/bin_search_tree_/debug_fn_imps.hpp>\n@@ -475,14 +504,16 @@ namespace __gnu_pbds\n #include <ext/pb_ds/detail/bin_search_tree_/rotate_fn_imps.hpp>\n #include <ext/pb_ds/detail/bin_search_tree_/policy_access_fn_imps.hpp>\n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_CHECK_KEY_DOES_NOT_EXIST\n+#undef PB_DS_CHECK_KEY_EXISTS\n+#undef PB_DS_ASSERT_NODE_CONSISTENT\n+#undef PB_DS_STRUCT_ONLY_ASSERT_VALID\n+#undef PB_DS_ASSERT_VALID\n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_CLASS_NAME\n-\n #undef PB_DS_TYPES_TRAITS_C_DEC\n-\n #undef PB_DS_DEBUG_MAP_BASE_C_DEC\n \n #ifdef PB_DS_TREE_TRACE"}, {"sha": "d7b5985cc6d97014cdd38282804461cae44279f5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fconstructors_destructor_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -48,7 +48,7 @@ PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME() : m_p_head(s_node_allocator.allocate(1)), m_size(0)\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -57,7 +57,7 @@ PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn) :\n   Cmp_Fn(r_cmp_fn), m_p_head(s_node_allocator.allocate(1)), m_size(0)\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -69,7 +69,7 @@ PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_update) :\n   m_size(0)\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -88,7 +88,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n {\n   initialize();\n   m_size = other.m_size;\n-  _GLIBCXX_DEBUG_ONLY(other.structure_only_assert_valid();)\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID(other)\n \n     __try\n       {\n@@ -104,20 +104,20 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n \ts_node_allocator.deallocate(m_p_head, 1);\n         __throw_exception_again;\n       }\n-  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.structure_only_assert_valid();)\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID(other)\n   value_swap(other);\n   std::swap((Cmp_Fn& )(*this), (Cmp_Fn& )other);\n-  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.structure_only_assert_valid();)\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID(other)\n }\n \n PB_DS_CLASS_T_DEC\n@@ -187,7 +187,7 @@ recursive_copy_node(const node_pointer p_nd)\n   if (p_ret->m_p_right != 0)\n     p_ret->m_p_right->m_p_parent = p_ret;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_ret);)\n+  PB_DS_ASSERT_NODE_CONSISTENT(p_ret)\n   return p_ret;\n }\n "}, {"sha": "86d5c2e87f7a91cddb03ade1dbd510a3cb3e8dbc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/debug_fn_imps.hpp", "status": "modified", "additions": 77, "deletions": 70, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fdebug_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,230 +43,237 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_valid() const\n+assert_valid(const char* __file, int __line) const\n {\n-  structure_only_assert_valid();\n-  assert_consistent_with_debug_base();\n-  assert_size();\n-  assert_iterators();\n+  structure_only_assert_valid(__file, __line);\n+  assert_consistent_with_debug_base(__file, __line);\n+  assert_size(__file, __line);\n+  assert_iterators(__file, __line);\n   if (m_p_head->m_p_parent == 0)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(m_size == 0);\n+      PB_DS_DEBUG_VERIFY(m_size == 0);\n     }\n   else\n     {\n-      _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n+      PB_DS_DEBUG_VERIFY(m_size > 0);\n     }\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-structure_only_assert_valid() const\n+structure_only_assert_valid(const char* __file, int __line) const\n {\n-  _GLIBCXX_DEBUG_ASSERT(m_p_head != 0);\n+  PB_DS_DEBUG_VERIFY(m_p_head != 0);\n   if (m_p_head->m_p_parent == 0)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_left == m_p_head);\n-      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_right == m_p_head);\n+      PB_DS_DEBUG_VERIFY(m_p_head->m_p_left == m_p_head);\n+      PB_DS_DEBUG_VERIFY(m_p_head->m_p_right == m_p_head);\n     }\n   else\n     {\n-      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_parent->m_p_parent == m_p_head);\n-      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_left != m_p_head);\n-      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_right != m_p_head);\n+      PB_DS_DEBUG_VERIFY(m_p_head->m_p_parent->m_p_parent == m_p_head);\n+      PB_DS_DEBUG_VERIFY(m_p_head->m_p_left != m_p_head);\n+      PB_DS_DEBUG_VERIFY(m_p_head->m_p_right != m_p_head);\n     }\n \n   if (m_p_head->m_p_parent != 0)\n-    assert_node_consistent(m_p_head->m_p_parent);\n-  assert_min();\n-  assert_max();\n+    assert_node_consistent(m_p_head->m_p_parent, __file, __line);\n+  assert_min(__file, __line);\n+  assert_max(__file, __line);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_node_consistent(const node_pointer p_nd) const\n+assert_node_consistent(const node_pointer p_nd,\n+\t\t       const char* __file, int __line) const\n {\n-  assert_node_consistent_(p_nd);\n+  assert_node_consistent_(p_nd, __file, __line);\n }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::node_consistent_t\n PB_DS_CLASS_C_DEC::\n-assert_node_consistent_(const node_pointer p_nd) const\n+assert_node_consistent_(const node_pointer p_nd,\n+\t\t\tconst char* __file, int __line) const\n {\n   if (p_nd == 0)\n     return (std::make_pair((const_pointer)0,(const_pointer)0));\n \n-  assert_node_consistent_with_left(p_nd);\n-  assert_node_consistent_with_right(p_nd);\n+  assert_node_consistent_with_left(p_nd, __file, __line);\n+  assert_node_consistent_with_right(p_nd, __file, __line);\n \n   const std::pair<const_pointer, const_pointer>\n-    l_range = assert_node_consistent_(p_nd->m_p_left);\n+    l_range = assert_node_consistent_(p_nd->m_p_left, __file, __line);\n \n   if (l_range.second != 0)\n-    _GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(PB_DS_V2F(*l_range.second),\n-\t\t\t\t\t     PB_DS_V2F(p_nd->m_value)));\n+    PB_DS_DEBUG_VERIFY(Cmp_Fn::operator()(PB_DS_V2F(*l_range.second),\n+\t\t\t\t\t  PB_DS_V2F(p_nd->m_value)));\n \n   const std::pair<const_pointer, const_pointer>\n-    r_range = assert_node_consistent_(p_nd->m_p_right);\n+    r_range = assert_node_consistent_(p_nd->m_p_right, __file, __line);\n \n   if (r_range.first != 0)\n-    _GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value),\n+    PB_DS_DEBUG_VERIFY(Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value),\n \t\t\t\t\t     PB_DS_V2F(*r_range.first)));\n \n-  return (std::make_pair((l_range.first != 0)? l_range.first :& p_nd->m_value,(r_range.second != 0)? r_range.second :& p_nd->m_value));\n+  return std::make_pair((l_range.first != 0) ? l_range.first : &p_nd->m_value,\n+\t\t\t(r_range.second != 0)? r_range.second : &p_nd->m_value);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_node_consistent_with_left(const node_pointer p_nd) const\n+assert_node_consistent_with_left(const node_pointer p_nd,\n+\t\t\t\t const char* __file, int __line) const\n {\n   if (p_nd->m_p_left == 0)\n     return;\n-  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_left->m_p_parent == p_nd);\n-  _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value),\n-\t\t\t\t\t    PB_DS_V2F(p_nd->m_p_left->m_value)));\n+  PB_DS_DEBUG_VERIFY(p_nd->m_p_left->m_p_parent == p_nd);\n+  PB_DS_DEBUG_VERIFY(!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value),\n+\t\t\t\t\t PB_DS_V2F(p_nd->m_p_left->m_value)));\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_node_consistent_with_right(const node_pointer p_nd) const\n+assert_node_consistent_with_right(const node_pointer p_nd,\n+\t\t\t\t  const char* __file, int __line) const\n {\n   if (p_nd->m_p_right == 0)\n     return;\n-  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_right->m_p_parent == p_nd);\n-  _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_p_right->m_value),\n-\t\t\t\t       PB_DS_V2F(p_nd->m_value)));\n+  PB_DS_DEBUG_VERIFY(p_nd->m_p_right->m_p_parent == p_nd);\n+  PB_DS_DEBUG_VERIFY(!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_p_right->m_value),\n+\t\t\t\t\t PB_DS_V2F(p_nd->m_value)));\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_min() const\n+assert_min(const char* __file, int __line) const\n {\n-  assert_min_imp(m_p_head->m_p_parent);\n+  assert_min_imp(m_p_head->m_p_parent, __file, __line);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_min_imp(const node_pointer p_nd) const\n+assert_min_imp(const node_pointer p_nd, const char* __file, int __line) const\n {\n   if (p_nd == 0)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_left == m_p_head);\n+      PB_DS_DEBUG_VERIFY(m_p_head->m_p_left == m_p_head);\n       return;\n     }\n \n   if (p_nd->m_p_left == 0)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(p_nd == m_p_head->m_p_left);\n+      PB_DS_DEBUG_VERIFY(p_nd == m_p_head->m_p_left);\n       return;\n     }\n-  assert_min_imp(p_nd->m_p_left);\n+  assert_min_imp(p_nd->m_p_left, __file, __line);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_max() const\n+assert_max(const char* __file, int __line) const\n {\n-  assert_max_imp(m_p_head->m_p_parent);\n+  assert_max_imp(m_p_head->m_p_parent, __file, __line);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_max_imp(const node_pointer p_nd) const\n+assert_max_imp(const node_pointer p_nd,\n+\t       const char* __file, int __line) const\n {\n   if (p_nd == 0)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_right == m_p_head);\n+      PB_DS_DEBUG_VERIFY(m_p_head->m_p_right == m_p_head);\n       return;\n     }\n \n   if (p_nd->m_p_right == 0)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(p_nd == m_p_head->m_p_right);\n+      PB_DS_DEBUG_VERIFY(p_nd == m_p_head->m_p_right);\n       return;\n     }\n \n-  assert_max_imp(p_nd->m_p_right);\n+  assert_max_imp(p_nd->m_p_right, __file, __line);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_iterators() const\n+assert_iterators(const char* __file, int __line) const\n {\n   size_type iterated_num = 0;\n   const_iterator prev_it = end();\n   for (const_iterator it = begin(); it != end(); ++it)\n     {\n       ++iterated_num;\n-      _GLIBCXX_DEBUG_ASSERT(lower_bound(PB_DS_V2F(*it)).m_p_nd == it.m_p_nd);\n+      PB_DS_DEBUG_VERIFY(lower_bound(PB_DS_V2F(*it)).m_p_nd == it.m_p_nd);\n       const_iterator upper_bound_it = upper_bound(PB_DS_V2F(*it));\n       --upper_bound_it;\n-      _GLIBCXX_DEBUG_ASSERT(upper_bound_it.m_p_nd == it.m_p_nd);\n+      PB_DS_DEBUG_VERIFY(upper_bound_it.m_p_nd == it.m_p_nd);\n \n       if (prev_it != end())\n-\t_GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(PB_DS_V2F(*prev_it),\n-\t\t\t\t\t\t PB_DS_V2F(*it)));\n+\tPB_DS_DEBUG_VERIFY(Cmp_Fn::operator()(PB_DS_V2F(*prev_it),\n+\t\t\t\t\t      PB_DS_V2F(*it)));\n       prev_it = it;\n     }\n \n-  _GLIBCXX_DEBUG_ASSERT(iterated_num == m_size);\n+  PB_DS_DEBUG_VERIFY(iterated_num == m_size);\n   size_type reverse_iterated_num = 0;\n   const_reverse_iterator reverse_prev_it = rend();\n   for (const_reverse_iterator reverse_it = rbegin(); reverse_it != rend();\n        ++reverse_it)\n     {\n       ++reverse_iterated_num;\n-      _GLIBCXX_DEBUG_ASSERT(lower_bound(\n+      PB_DS_DEBUG_VERIFY(lower_bound(\n \t\t\t\t   PB_DS_V2F(*reverse_it)).m_p_nd == reverse_it.m_p_nd);\n \n       const_iterator upper_bound_it = upper_bound(PB_DS_V2F(*reverse_it));\n       --upper_bound_it;\n-      _GLIBCXX_DEBUG_ASSERT(upper_bound_it.m_p_nd == reverse_it.m_p_nd);\n+      PB_DS_DEBUG_VERIFY(upper_bound_it.m_p_nd == reverse_it.m_p_nd);\n       if (reverse_prev_it != rend())\n-\t_GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(PB_DS_V2F(*reverse_prev_it),\n-\t\t\t\t\t\t  PB_DS_V2F(*reverse_it)));\n+\tPB_DS_DEBUG_VERIFY(!Cmp_Fn::operator()(PB_DS_V2F(*reverse_prev_it),\n+\t\t\t\t\t       PB_DS_V2F(*reverse_it)));\n       reverse_prev_it = reverse_it;\n     }\n-  _GLIBCXX_DEBUG_ASSERT(reverse_iterated_num == m_size);\n+  PB_DS_DEBUG_VERIFY(reverse_iterated_num == m_size);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_consistent_with_debug_base() const\n+assert_consistent_with_debug_base(const char* __file, int __line) const\n {\n-  debug_base::check_size(m_size);\n-  assert_consistent_with_debug_base(m_p_head->m_p_parent);\n+  debug_base::check_size(m_size, __file, __line);\n+  assert_consistent_with_debug_base(m_p_head->m_p_parent, __file, __line);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_consistent_with_debug_base(const node_pointer p_nd) const\n+assert_consistent_with_debug_base(const node_pointer p_nd,\n+\t\t\t\t  const char* __file, int __line) const\n {\n   if (p_nd == 0)\n     return;\n-  debug_base::check_key_exists(PB_DS_V2F(p_nd->m_value));\n-  assert_consistent_with_debug_base(p_nd->m_p_left);\n-  assert_consistent_with_debug_base(p_nd->m_p_right);\n+  debug_base::check_key_exists(PB_DS_V2F(p_nd->m_value), __file, __line);\n+  assert_consistent_with_debug_base(p_nd->m_p_left, __file, __line);\n+  assert_consistent_with_debug_base(p_nd->m_p_right, __file, __line);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_size() const\n+assert_size(const char* __file, int __line) const\n {\n-  _GLIBCXX_DEBUG_ASSERT(recursive_count(m_p_head->m_p_parent) == m_size);\n+  PB_DS_DEBUG_VERIFY(recursive_count(m_p_head->m_p_parent) == m_size);\n }\n \n-#endif \n+#endif"}, {"sha": "60a54903458f710a616eed0d56fb656a95237c54", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/erase_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ferase_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -46,7 +46,7 @@ actual_erase_node(node_pointer p_z)\n   _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n \n-  _GLIBCXX_DEBUG_ONLY(erase_existing(PB_DS_V2F(p_z->m_value)));\n+  _GLIBCXX_DEBUG_ONLY(erase_existing(PB_DS_V2F(p_z->m_value));)\n \n   p_z->~node();\n \n@@ -88,18 +88,18 @@ void\n PB_DS_CLASS_C_DEC::\n clear()\n {\n-  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n \n-    clear_imp(m_p_head->m_p_parent);\n+  clear_imp(m_p_head->m_p_parent);\n \n   m_size = 0;\n \n   initialize();\n \n   _GLIBCXX_DEBUG_ONLY(debug_base::clear();)\n \n-    _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n-    }\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n+}\n \n PB_DS_CLASS_T_DEC\n void"}, {"sha": "6b50dc8c594d16b64bcfb58987d882c2e15406cb", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/find_fn_imps.hpp", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Ffind_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -133,9 +133,9 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key)\n {\n-  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n \n-    node_pointer p_pot = m_p_head;\n+  node_pointer p_pot = m_p_head;\n   node_pointer p_nd = m_p_head->m_p_parent;\n \n   while (p_nd != 0)\n@@ -148,20 +148,20 @@ find(const_key_reference r_key)\n     else\n       p_nd = p_nd->m_p_right;\n \n-  return point_iterator((p_pot != m_p_head&&  Cmp_Fn::operator()(\n-\t\t\t\t\t\t\t\t r_key,\n-\t\t\t\t\t\t\t\t PB_DS_V2F(p_pot->m_value)))?\n-\t\t\tm_p_head : p_pot);\n+  return point_iterator((p_pot != m_p_head\n+\t\t\t && Cmp_Fn::operator()(r_key,\n+\t\t\t\t\t       PB_DS_V2F(p_pot->m_value)))\n+\t\t\t\t? m_p_head : p_pot);\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key) const\n {\n-  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n \n-    node_pointer p_pot = m_p_head;\n+  node_pointer p_pot = m_p_head;\n   node_pointer p_nd = m_p_head->m_p_parent;\n \n   while (p_nd != 0)\n@@ -174,9 +174,9 @@ find(const_key_reference r_key) const\n     else\n       p_nd = p_nd->m_p_right;\n \n-  return const_point_iterator((p_pot != m_p_head&&  Cmp_Fn::operator()(\n-\t\t\t\t\t\t\t\t       r_key,\n-\t\t\t\t\t\t\t\t       PB_DS_V2F(p_pot->m_value)))?\n-\t\t\t      m_p_head : p_pot);\n+  return const_point_iterator((p_pot != m_p_head\n+\t\t\t       && Cmp_Fn::operator()(r_key,\n+\t\t\t\t\t\t     PB_DS_V2F(p_pot->m_value)))\n+\t\t\t\t\t? m_p_head : p_pot);\n }\n "}, {"sha": "eb0f76d0ea26f8dd013e21e2cd560adeb6cb6ec0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/insert_fn_imps.hpp", "status": "modified", "additions": 30, "deletions": 43, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Finsert_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,19 +43,17 @@ inline std::pair<typename PB_DS_CLASS_C_DEC::point_iterator, bool>\n PB_DS_CLASS_C_DEC::\n insert_leaf(const_reference r_value)\n {\n-  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n \n-    if (m_size == 0)\n-      return (std::make_pair(\n-\t\t\t     insert_imp_empty(r_value),\n-\t\t\t     true));\n+  if (m_size == 0)\n+    return std::make_pair(insert_imp_empty(r_value),\n+\t\t\t  true);\n \n   node_pointer p_nd = m_p_head->m_p_parent;\n   node_pointer p_pot = m_p_head;\n \n   while (p_nd != 0)\n-    if (!Cmp_Fn::operator()(\n-\t\t\t    PB_DS_V2F(p_nd->m_value),\n+    if (!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value),\n \t\t\t    PB_DS_V2F(r_value)))\n       {\n \tp_pot = p_nd;\n@@ -66,37 +64,29 @@ insert_leaf(const_reference r_value)\n       p_nd = p_nd->m_p_right;\n \n   if (p_pot == m_p_head)\n-    return (std::make_pair(\n-\t\t\t   insert_leaf_new(r_value,  m_p_head->m_p_right, false),\n-\t\t\t   true));\n+    return std::make_pair(insert_leaf_new(r_value, m_p_head->m_p_right, false),\n+\t\t\t  true);\n \n-  if (!Cmp_Fn::operator()(\n-\t\t\t  PB_DS_V2F(r_value),\n+  if (!Cmp_Fn::operator()(PB_DS_V2F(r_value),\n \t\t\t  PB_DS_V2F(p_pot->m_value)))\n     {\n-      _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n-\n-        _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(\n-\t\t\t\t\t\t\tPB_DS_V2F(r_value)));\n-\n-      return (std::make_pair(p_pot, false));\n+      PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n+      PB_DS_CHECK_KEY_EXISTS(PB_DS_V2F(r_value))\n+      return std::make_pair(p_pot, false);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(\n-\t\t\t\t\t\t\t  PB_DS_V2F(r_value)));\n+  PB_DS_CHECK_KEY_DOES_NOT_EXIST(PB_DS_V2F(r_value))\n \n   p_nd = p_pot->m_p_left;\n   if (p_nd == 0)\n-    return (std::make_pair(\n-\t\t\t   insert_leaf_new(r_value, p_pot, true),\n-\t\t\t   true));\n+    return std::make_pair(insert_leaf_new(r_value, p_pot, true),\n+\t\t\t  true);\n \n   while (p_nd->m_p_right != 0)\n     p_nd = p_nd->m_p_right;\n \n-  return (std::make_pair(\n-\t\t\t insert_leaf_new(r_value, p_nd, false),\n-\t\t\t true));\n+  return std::make_pair(insert_leaf_new(r_value, p_nd, false),\n+\t\t\ttrue);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -105,7 +95,8 @@ PB_DS_CLASS_C_DEC::\n insert_leaf_new(const_reference r_value, node_pointer p_nd, bool left_nd)\n {\n   node_pointer p_new_nd =\n-    get_new_node_for_leaf_insert(            r_value, traits_base::m_no_throw_copies_indicator);\n+    get_new_node_for_leaf_insert(r_value,\n+\t\t\t\t traits_base::m_no_throw_copies_indicator);\n \n   if (left_nd)\n     {\n@@ -136,14 +127,13 @@ insert_leaf_new(const_reference r_value, node_pointer p_nd, bool left_nd)\n \n   p_new_nd->m_p_left = p_new_nd->m_p_right = 0;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_nd));\n+  PB_DS_ASSERT_NODE_CONSISTENT(p_nd)\n \n   update_to_top(p_new_nd, (node_update* )this);\n \n-  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(\n-\t\t\t\t\t    PB_DS_V2F(r_value)));\n+  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(r_value));)\n \n-  return (iterator(p_new_nd));\n+  return iterator(p_new_nd);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -152,7 +142,7 @@ PB_DS_CLASS_C_DEC::\n insert_imp_empty(const_reference r_value)\n {\n   node_pointer p_new_node =\n-    get_new_node_for_leaf_insert(        r_value, traits_base::m_no_throw_copies_indicator);\n+    get_new_node_for_leaf_insert(r_value, traits_base::m_no_throw_copies_indicator);\n \n   m_p_head->m_p_left = m_p_head->m_p_right =\n     m_p_head->m_p_parent = p_new_node;\n@@ -161,12 +151,11 @@ insert_imp_empty(const_reference r_value)\n \n   p_new_node->m_p_left = p_new_node->m_p_right = 0;\n \n-  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(\n-\t\t\t\t\t    PB_DS_V2F(r_value)));\n+  _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(r_value));)\n \n-  update_to_top(m_p_head->m_p_parent, (node_update* )this);\n+  update_to_top(m_p_head->m_p_parent, (node_update*)this);\n \n-  return (iterator(p_new_node));\n+  return iterator(p_new_node);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -178,8 +167,7 @@ get_new_node_for_leaf_insert(const_reference r_val, false_type)\n \n   cond_dealtor_t cond(p_new_nd);\n \n-  new (const_cast<void* >(\n-\t\t\t  static_cast<const void* >(&p_new_nd->m_value)))\n+  new (const_cast<void* >(static_cast<const void* >(&p_new_nd->m_value)))\n     typename node::value_type(r_val);\n \n   cond.set_no_action();\n@@ -188,7 +176,7 @@ get_new_node_for_leaf_insert(const_reference r_val, false_type)\n \n   ++m_size;\n \n-  return (p_new_nd);\n+  return p_new_nd;\n }\n \n PB_DS_CLASS_T_DEC\n@@ -198,14 +186,13 @@ get_new_node_for_leaf_insert(const_reference r_val, true_type)\n {\n   node_pointer p_new_nd = s_node_allocator.allocate(1);\n \n-  new (const_cast<void* >(\n-\t\t\t  static_cast<const void* >(&p_new_nd->m_value)))\n+  new (const_cast<void* >(static_cast<const void* >(&p_new_nd->m_value)))\n     typename node::value_type(r_val);\n \n   p_new_nd->m_p_left = p_new_nd->m_p_right = 0;\n \n   ++m_size;\n \n-  return (p_new_nd);\n+  return p_new_nd;\n }\n "}, {"sha": "bcf3ce6321f4e256c9717c642b2380f08c60fc0e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/r_erase_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fr_erase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fr_erase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fr_erase_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -46,7 +46,7 @@ actual_erase_node(node_pointer p_z)\n   _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n \n-  _GLIBCXX_DEBUG_ONLY(erase_existing(PB_DS_V2F(p_z->m_value)));\n+  _GLIBCXX_DEBUG_ONLY(erase_existing(PB_DS_V2F(p_z->m_value));)\n \n   p_z->~node();\n \n@@ -88,7 +88,7 @@ void\n PB_DS_CLASS_C_DEC::\n clear()\n {\n-  _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n \n     clear_imp(m_p_head->m_p_parent);\n \n@@ -98,8 +98,8 @@ clear()\n \n   _GLIBCXX_DEBUG_ONLY(debug_base::clear();)\n \n-    _GLIBCXX_DEBUG_ONLY(structure_only_assert_valid();)\n-    }\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n+}\n \n PB_DS_CLASS_T_DEC\n void"}, {"sha": "c2090a1784201462966e930bddcc72b27b3be251", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/rotate_fn_imps.hpp", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Frotate_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Frotate_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Frotate_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -62,10 +62,10 @@ rotate_left(node_pointer p_x)\n   p_y->m_p_left = p_x;\n   p_x->m_p_parent = p_y;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_x);)\n-    _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y);)\n+  PB_DS_ASSERT_NODE_CONSISTENT(p_x)\n+  PB_DS_ASSERT_NODE_CONSISTENT(p_y)\n \n-    apply_update(p_x, (node_update* )this);\n+  apply_update(p_x, (node_update* )this);\n   apply_update(p_x->m_p_parent, (node_update* )this);\n }\n \n@@ -93,10 +93,10 @@ rotate_right(node_pointer p_x)\n   p_y->m_p_right = p_x;\n   p_x->m_p_parent = p_y;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_x);)\n-    _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y);)\n+  PB_DS_ASSERT_NODE_CONSISTENT(p_x)\n+  PB_DS_ASSERT_NODE_CONSISTENT(p_y)\n \n-    apply_update(p_x, (node_update* )this);\n+  apply_update(p_x, (node_update* )this);\n   apply_update(p_x->m_p_parent, (node_update* )this);\n }\n \n@@ -129,9 +129,8 @@ inline void\n PB_DS_CLASS_C_DEC::\n apply_update(node_pointer p_nd, Node_Update_*  /*p_update*/)\n {\n-  node_update::operator()(\n-\t\t\t   node_iterator(p_nd),\n-\t\t\t   const_node_iterator(static_cast<node_pointer>(0)));\n+  node_update::operator()(node_iterator(p_nd),\n+\t\t\t  const_node_iterator(static_cast<node_pointer>(0)));\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "00fbdf4261262106703e686ec6333ee5906a17fe", "filename": "libstdc++-v3/include/ext/pb_ds/detail/bin_search_tree_/split_join_fn_imps.hpp", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbin_search_tree_%2Fsplit_join_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,8 +43,8 @@ bool\n PB_DS_CLASS_C_DEC::\n join_prep(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n   if (other.m_size == 0)\n     return false;\n \n@@ -54,9 +54,13 @@ join_prep(PB_DS_CLASS_C_DEC& other)\n       return false;\n     }\n \n-  const bool greater = Cmp_Fn::operator()(PB_DS_V2F(m_p_head->m_p_right->m_value), PB_DS_V2F(other.m_p_head->m_p_left->m_value));\n+  const bool greater =\n+    Cmp_Fn::operator()(PB_DS_V2F(m_p_head->m_p_right->m_value),\n+\t\t       PB_DS_V2F(other.m_p_head->m_p_left->m_value));\n \n-  const bool lesser = Cmp_Fn::operator()(PB_DS_V2F(other.m_p_head->m_p_right->m_value), PB_DS_V2F(m_p_head->m_p_left->m_value));\n+  const bool lesser =\n+    Cmp_Fn::operator()(PB_DS_V2F(other.m_p_head->m_p_right->m_value),\n+\t\t       PB_DS_V2F(m_p_head->m_p_left->m_value));\n \n   if (!greater && !lesser)\n     __throw_join_error();\n@@ -83,37 +87,37 @@ bool\n PB_DS_CLASS_C_DEC::\n split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n   other.clear();\n \n   if (m_size == 0)\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n       return false;\n     }\n \n   if (Cmp_Fn::operator()(r_key, PB_DS_V2F(m_p_head->m_p_left->m_value)))\n     {\n       value_swap(other);\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n       return false;\n     }\n \n   if (!Cmp_Fn::operator()(r_key, PB_DS_V2F(m_p_head->m_p_right->m_value)))\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n       return false;\n     }\n \n   if (m_size == 1)\n     {\n       value_swap(other);\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n       return false;\n     }\n \n@@ -130,8 +134,8 @@ split_finish(PB_DS_CLASS_C_DEC& other)\n   other.m_size = std::distance(other.begin(), other.end());\n   m_size -= other.m_size;\n   initialize_min_max();\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "e728e20c6c13fd36d0860f46682d2844bb1aaddc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/binary_heap_.hpp", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fbinary_heap_.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -310,7 +310,7 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n #endif \n \n #ifdef PB_DS_BINARY_HEAP_TRACE_\n@@ -335,6 +335,15 @@ namespace __gnu_pbds\n       entry_pointer m_a_entries;\n     };\n \n+#define PB_DS_ASSERT_VALID(X) \\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n #include <ext/pb_ds/detail/binary_heap_/insert_fn_imps.hpp>\n #include <ext/pb_ds/detail/binary_heap_/constructors_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/binary_heap_/iterators_fn_imps.hpp>\n@@ -346,6 +355,8 @@ namespace __gnu_pbds\n #include <ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp>\n #include <ext/pb_ds/detail/binary_heap_/policy_access_fn_imps.hpp>\n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_ASSERT_VALID\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_ENTRY_CMP_DEC"}, {"sha": "bdaa7ff78064112f92fa64f45a3a26677b97162b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2011\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -64,7 +65,7 @@ copy_from_range(It first_it, It last_it)\n \n   std::make_heap(m_a_entries, m_a_entries + m_size, static_cast<entry_cmp& >(*this));\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -74,7 +75,7 @@ binary_heap_() :\n   m_actual_size(resize_policy::min_size),\n   m_a_entries(s_entry_allocator.allocate(m_actual_size))\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -85,7 +86,7 @@ binary_heap_(const Cmp_Fn& r_cmp_fn) :\n   m_actual_size(resize_policy::min_size),\n   m_a_entries(s_entry_allocator.allocate(m_actual_size))\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -97,7 +98,7 @@ binary_heap_(const PB_DS_CLASS_C_DEC& other) :\n   m_actual_size(other.m_actual_size),\n   m_a_entries(s_entry_allocator.allocate(m_actual_size))\n {\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID(other)\n   _GLIBCXX_DEBUG_ASSERT(m_a_entries != other.m_a_entries);\n \n   const_iterator first_it = other.begin();\n@@ -119,22 +120,22 @@ binary_heap_(const PB_DS_CLASS_C_DEC& other) :\n       s_entry_allocator.deallocate(m_a_entries, m_actual_size);\n       __throw_exception_again;\n     }\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n   _GLIBCXX_DEBUG_ASSERT(m_a_entries != other.m_a_entries);\n \n   value_swap(other);\n   std::swap((entry_cmp& )(*this), (entry_cmp& )other);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "a2c6f307f178dab697e4502f9e73f26fa57e5565", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fdebug_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,29 +43,29 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_valid() const\n+assert_valid(const char* __file, int __line) const\n {\n #ifdef PB_DS_REGRESSION\n   s_entry_allocator.check_allocated(m_a_entries, m_actual_size);\n #endif \n \n-  resize_policy::assert_valid();\n-  _GLIBCXX_DEBUG_ASSERT(m_size <= m_actual_size);\n+  resize_policy::assert_valid(__file, __line);\n+  PB_DS_DEBUG_VERIFY(m_size <= m_actual_size);\n   for (size_type i = 0; i < m_size; ++i)\n     {\n #ifdef PB_DS_REGRESSION\n       s_value_allocator.check_allocated(m_a_entries[i], 1);\n #endif \n \n       if (left_child(i) < m_size)\n-\t_GLIBCXX_DEBUG_ASSERT(!entry_cmp::operator()(m_a_entries[i], m_a_entries[left_child(i)]));\n+\tPB_DS_DEBUG_VERIFY(!entry_cmp::operator()(m_a_entries[i], m_a_entries[left_child(i)]));\n \n-      _GLIBCXX_DEBUG_ASSERT(parent(left_child(i)) == i);\n+      PB_DS_DEBUG_VERIFY(parent(left_child(i)) == i);\n \n       if (right_child(i) < m_size)\n-\t_GLIBCXX_DEBUG_ASSERT(!entry_cmp::operator()(m_a_entries[i], m_a_entries[right_child(i)]));\n+\tPB_DS_DEBUG_VERIFY(!entry_cmp::operator()(m_a_entries[i], m_a_entries[right_child(i)]));\n \n-      _GLIBCXX_DEBUG_ASSERT(parent(right_child(i)) == i);\n+      PB_DS_DEBUG_VERIFY(parent(right_child(i)) == i);\n     }\n }\n "}, {"sha": "2b6c9b79849eec32fa249bad781b3d4c9d813add", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ferase_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -66,7 +66,7 @@ clear()\n \n   m_size = 0;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -89,7 +89,7 @@ inline void\n PB_DS_CLASS_C_DEC::\n pop()\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   _GLIBCXX_DEBUG_ASSERT(!empty());\n \n   erase_at(m_a_entries, 0, s_no_throw_copies_ind);\n@@ -102,7 +102,7 @@ pop()\n   _GLIBCXX_DEBUG_ASSERT(m_size > 0);\n   --m_size;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -111,7 +111,7 @@ typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n   typedef typename entry_pred<value_type, Pred, simple_value, Allocator>::type\n     pred_t;\n@@ -148,7 +148,7 @@ erase_if(Pred pred)\n   std::make_heap(m_a_entries, m_a_entries + m_size,\n \t\t static_cast<entry_cmp& >(*this));\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n   return ersd;\n }\n@@ -158,7 +158,7 @@ inline void\n PB_DS_CLASS_C_DEC::\n erase(point_iterator it)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   _GLIBCXX_DEBUG_ASSERT(!empty());\n \n   const size_type fix_pos = it.m_p_e - m_a_entries;\n@@ -177,7 +177,7 @@ erase(point_iterator it)\n   if (fix_pos != m_size)\n     fix(m_a_entries + fix_pos);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "116e9bcddaac7921472bb56afd372e1a83e7c9d3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/find_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Ffind_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,8 +43,8 @@ inline typename PB_DS_CLASS_C_DEC::const_reference\n PB_DS_CLASS_C_DEC::\n top() const\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ASSERT(!empty());\n+  PB_DS_ASSERT_VALID((*this))\n+  _GLIBCXX_DEBUG_ASSERT(!empty());\n \n   return top_imp(s_no_throw_copies_ind);\n }"}, {"sha": "c6c41e572645d8d1e8ba0d3adb6f23ade3b83475", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Finsert_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,11 +43,11 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n push(const_reference r_val)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   insert_value(r_val, s_no_throw_copies_ind);\n   std::push_heap(m_a_entries, m_a_entries + m_size, \n \t\t static_cast<entry_cmp&>(*this));\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return point_iterator(m_a_entries);\n }\n \n@@ -108,10 +108,10 @@ void\n PB_DS_CLASS_C_DEC::\n modify(point_iterator it, const_reference r_new_val)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   swap_value_imp(it.m_p_e, r_new_val, s_no_throw_copies_ind);\n   fix(it.m_p_e);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -131,7 +131,7 @@ fix(entry_pointer p_e)\n \t  parent_i = parent(i);\n         }\n \n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n       return;\n     }\n "}, {"sha": "e1961272f732f03aa49155f80165f9a0bb1d82b8", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/resize_policy.hpp", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fresize_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fresize_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fresize_policy.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -52,6 +52,15 @@ namespace __gnu_pbds\n \n #define PB_DS_CLASS_C_DEC resize_policy<Size_Type>\n \n+#define PB_DS_ASSERT_VALID(X)\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n     template<typename Size_Type>\n     class resize_policy\n     {\n@@ -102,7 +111,7 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n #endif \n \n #ifdef PB_DS_BINARY_HEAP_TRACE_\n@@ -128,7 +137,7 @@ namespace __gnu_pbds\n     resize_policy() :\n       m_next_shrink_size(0),\n       m_next_grow_size(min_size)\n-    { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+    { PB_DS_ASSERT_VALID((*this)) }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n@@ -188,26 +197,26 @@ namespace __gnu_pbds\n     PB_DS_CLASS_C_DEC::\n     notify_grow_resize()\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n       _GLIBCXX_DEBUG_ASSERT(m_next_grow_size >= min_size);\n       m_next_grow_size *= factor;\n       m_next_shrink_size = m_next_grow_size / ratio;\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n     }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     notify_shrink_resize()\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n       m_next_shrink_size /= factor;\n       if (m_next_shrink_size == 1)\n \tm_next_shrink_size = 0;\n \n       m_next_grow_size =\n \tstd::max(m_next_grow_size / factor, static_cast<size_type>(min_size));\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n     }\n \n     PB_DS_CLASS_T_DEC\n@@ -217,19 +226,19 @@ namespace __gnu_pbds\n     {\n       m_next_grow_size = actual_size;\n       m_next_shrink_size = m_next_grow_size / ratio;\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n     }\n \n #ifdef _GLIBCXX_DEBUG\n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n-    assert_valid() const\n+    assert_valid(const char* __file, int __line) const\n     {\n-      _GLIBCXX_DEBUG_ASSERT(m_next_shrink_size == 0 ||\n+      PB_DS_DEBUG_VERIFY(m_next_shrink_size == 0 ||\n \t\t       m_next_shrink_size*  ratio == m_next_grow_size);\n \n-      _GLIBCXX_DEBUG_ASSERT(m_next_grow_size >= min_size);\n+      PB_DS_DEBUG_VERIFY(m_next_grow_size >= min_size);\n     }\n #endif \n \n@@ -244,6 +253,8 @@ namespace __gnu_pbds\n     }\n #endif \n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_ASSERT_VALID\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n "}, {"sha": "675b4ec40dbd9af8660624c260c2688388efe0f5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binary_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinary_heap_%2Fsplit_join_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -45,9 +45,9 @@ void\n PB_DS_CLASS_C_DEC::\n split(Pred pred, PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n-    typedef\n+  typedef\n     typename entry_pred<\n     value_type,\n     Pred,\n@@ -114,17 +114,17 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n   resize_policy::notify_arbitrary(m_actual_size);\n   other.notify_arbitrary(other.m_actual_size);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n+}\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n \n   const size_type len = m_size + other.m_size;\n   const size_type actual_size = resize_policy::get_new_size_for_arbitrary(len);\n@@ -167,7 +167,7 @@ join(PB_DS_CLASS_C_DEC& other)\n \n   other.notify_arbitrary(resize_policy::min_size);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n }\n "}, {"sha": "c618a555afebb7a61c3adf6d97831cc16cfc47d3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_/binomial_heap_.hpp", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fbinomial_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fbinomial_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fbinomial_heap_.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -100,13 +100,17 @@ namespace __gnu_pbds\n     protected:\n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n #endif \n     };\n \n+#define PB_DS_ASSERT_VALID(X)\t\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n #include <ext/pb_ds/detail/binomial_heap_/constructors_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/binomial_heap_/debug_fn_imps.hpp>\n \n+#undef PB_DS_ASSERT_VALID\n #undef PB_DS_CLASS_C_DEC\n \n #undef PB_DS_CLASS_T_DEC"}, {"sha": "ebe1f2e9ea8102be6c02f24de22653a09d810672", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -41,19 +41,19 @@\n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n binomial_heap_()\n-{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n binomial_heap_(const Cmp_Fn& r_cmp_fn) :\n   PB_DS_BASE_C_DEC(r_cmp_fn)\n-{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n binomial_heap_(const PB_DS_CLASS_C_DEC& other) :\n   PB_DS_BASE_C_DEC(other)\n-{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::"}, {"sha": "80c0b048632e2aad693f2cc393e70c79620aefcc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_%2Fdebug_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,7 +43,7 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_valid() const\n-{ base_type::assert_valid(true); }\n+assert_valid(const char* __file, int __line) const\n+{ base_type::assert_valid(true, __file, __line); }\n \n #endif "}, {"sha": "0a1af721e10730def3fed66aff9e8310e1f2b3a1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/binomial_heap_base_.hpp", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fbinomial_heap_base_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fbinomial_heap_base_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fbinomial_heap_base_.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -187,10 +187,10 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid(bool strictly_binomial) const;\n+      assert_valid(bool strictly_binomial, const char* file, int line) const;\n \n       void\n-      assert_max() const;\n+      assert_max(const char* file, int line) const;\n #endif \n \n     private:\n@@ -209,20 +209,37 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_node_consistent(const_node_pointer, bool, bool) const;\n+      assert_node_consistent(const_node_pointer, bool, bool,\n+\t\t\t     const char*, int) const;\n #endif\n \n     protected:\n       node_pointer m_p_max;\n     };\n \n+#define PB_DS_ASSERT_VALID(X, _StrictlyBinomial)\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(_StrictlyBinomial,__FILE__, __LINE__);)\n+\n+#define PB_DS_ASSERT_BASE_NODE_CONSISTENT(_Node, _Bool)\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(_Node, _Bool,\t\\\n+\t\t\t\t\t\t\t__FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n #include <ext/pb_ds/detail/binomial_heap_base_/constructors_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/binomial_heap_base_/debug_fn_imps.hpp>\n #include <ext/pb_ds/detail/binomial_heap_base_/find_fn_imps.hpp>\n #include <ext/pb_ds/detail/binomial_heap_base_/insert_fn_imps.hpp>\n #include <ext/pb_ds/detail/binomial_heap_base_/erase_fn_imps.hpp>\n #include <ext/pb_ds/detail/binomial_heap_base_/split_join_fn_imps.hpp>\n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_ASSERT_BASE_NODE_CONSISTENT\n+#undef PB_DS_ASSERT_VALID\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_BASE_C_DEC"}, {"sha": "3e6df18ddcaca6c14c3e8ae270c12fe3d1b9e35f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fconstructors_destructor_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -47,48 +47,48 @@ copy_from_range(It first_it, It last_it)\n   while (first_it != last_it)\n     push(*(first_it++));\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n-    }\n+  PB_DS_ASSERT_VALID((*this),false)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n binomial_heap_base_() :\n   m_p_max(0)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n-    }\n+  PB_DS_ASSERT_VALID((*this),false)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n binomial_heap_base_(const Cmp_Fn& r_cmp_fn) :\n   PB_DS_BASE_C_DEC(r_cmp_fn),\n   m_p_max(0)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n-    }\n+  PB_DS_ASSERT_VALID((*this),false)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n binomial_heap_base_(const PB_DS_CLASS_C_DEC& other) :\n   PB_DS_BASE_C_DEC(other),\n   m_p_max(0)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n-    }\n+  PB_DS_ASSERT_VALID((*this),false)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n+  PB_DS_ASSERT_VALID((*this),false)\n \n-    base_type::swap(other);\n+  base_type::swap(other);\n \n   std::swap(m_p_max, other.m_p_max);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n-    }\n+  PB_DS_ASSERT_VALID((*this),false)\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::"}, {"sha": "6f2aa2a798376140e3a8662df5d558a2b5c43a50", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/debug_fn_imps.hpp", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fdebug_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -44,54 +44,56 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_valid(bool strictly_binomial) const\n+assert_valid(bool strictly_binomial, const char* __file, int __line) const\n {\n-  base_type::assert_valid();\n-  assert_node_consistent(base_type::m_p_root, strictly_binomial, true);\n-  assert_max();\n+  base_type::assert_valid(__file, __line);\n+  assert_node_consistent(base_type::m_p_root, strictly_binomial, true,\n+\t\t\t __file, __line);\n+  assert_max(__file, __line);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_max() const\n+assert_max(const char* __file, int __line) const\n {\n   if (m_p_max == 0)\n     return;\n-  _GLIBCXX_DEBUG_ASSERT(base_type::parent(m_p_max) == 0);\n+  PB_DS_DEBUG_VERIFY(base_type::parent(m_p_max) == 0);\n   for (const_iterator it = base_type::begin(); it != base_type::end(); ++it)\n-    _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(m_p_max->m_value,\n-\t\t\t\t\t      it.m_p_nd->m_value));\n+    PB_DS_DEBUG_VERIFY(!Cmp_Fn::operator()(m_p_max->m_value,\n+\t\t\t\t\t   it.m_p_nd->m_value));\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n assert_node_consistent(const_node_pointer p_nd, bool strictly_binomial,\n-\t\t       bool increasing) const\n+\t\t       bool increasing, const char* __file, int __line) const\n {\n-  _GLIBCXX_DEBUG_ASSERT(increasing || strictly_binomial);\n-  base_type::assert_node_consistent(p_nd, false);\n+  PB_DS_DEBUG_VERIFY(increasing || strictly_binomial);\n+  base_type::assert_node_consistent(p_nd, false, __file, __line);\n   if (p_nd == 0)\n     return;\n-  _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata == base_type::degree(p_nd));\n-  _GLIBCXX_DEBUG_ASSERT(base_type::size_under_node(p_nd) ==\n+  PB_DS_DEBUG_VERIFY(p_nd->m_metadata == base_type::degree(p_nd));\n+  PB_DS_DEBUG_VERIFY(base_type::size_under_node(p_nd) ==\n \t\t   static_cast<size_type>(1 << p_nd->m_metadata));\n-  assert_node_consistent(p_nd->m_p_next_sibling, strictly_binomial, increasing);\n-  assert_node_consistent(p_nd->m_p_l_child, true, false);\n+  assert_node_consistent(p_nd->m_p_next_sibling, strictly_binomial, increasing,\n+\t\t\t __file, __line);\n+  assert_node_consistent(p_nd->m_p_l_child, true, false, __file, __line);\n   if (p_nd->m_p_next_sibling != 0)\n     {\n       if (increasing)\n \t{\n \t  if (strictly_binomial)\n-\t    _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata\n+\t    PB_DS_DEBUG_VERIFY(p_nd->m_metadata\n \t\t\t\t  < p_nd->m_p_next_sibling->m_metadata);\n \t  else\n-\t    _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata\n+\t    PB_DS_DEBUG_VERIFY(p_nd->m_metadata\n \t\t\t\t  <= p_nd->m_p_next_sibling->m_metadata);\n \t}\n       else\n-\t_GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata\n+\tPB_DS_DEBUG_VERIFY(p_nd->m_metadata\n \t\t\t      > p_nd->m_p_next_sibling->m_metadata);\n     }\n }"}, {"sha": "05c8e075b17bc27f5a688df56337f08bacb89ba5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/erase_fn_imps.hpp", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ferase_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,8 +43,8 @@ void\n PB_DS_CLASS_C_DEC::\n pop()\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n-    _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n+  PB_DS_ASSERT_VALID((*this),true)\n+  _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n   if (m_p_max == 0)\n     find_max();\n@@ -59,8 +59,8 @@ pop()\n \n   m_p_max = 0;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n-    }\n+  PB_DS_ASSERT_VALID((*this),true)\n+}\n \n PB_DS_CLASS_T_DEC\n void\n@@ -113,8 +113,8 @@ void\n PB_DS_CLASS_C_DEC::\n erase(point_iterator it)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n-    _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n+  PB_DS_ASSERT_VALID((*this),true)\n+  _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n   base_type::bubble_to_top(it.m_p_nd);\n \n@@ -124,23 +124,23 @@ erase(point_iterator it)\n \n   m_p_max = 0;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n-    }\n+  PB_DS_ASSERT_VALID((*this),true)\n+}\n \n PB_DS_CLASS_T_DEC\n template<typename Pred>\n typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n+  PB_DS_ASSERT_VALID((*this),true)\n \n-    if (base_type::empty())\n-      {\n-        _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n+  if (base_type::empty())\n+    {\n+      PB_DS_ASSERT_VALID((*this),true)\n \n-\t  return 0;\n-      }\n+      return 0;\n+    }\n \n   base_type::to_linked_list();\n \n@@ -185,8 +185,8 @@ erase_if(Pred pred)\n \n   m_p_max = 0;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n+  PB_DS_ASSERT_VALID((*this),true)\n \n-    return ersd;\n+  return ersd;\n }\n "}, {"sha": "3f300dca290d9991e8af38cafd15b380c47b0f05", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/find_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Ffind_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,8 +43,8 @@ inline typename PB_DS_CLASS_C_DEC::const_reference\n PB_DS_CLASS_C_DEC::\n top() const\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(false);)\n-    _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n+  PB_DS_ASSERT_VALID((*this),false)\n+  _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n   if (m_p_max == 0)\n     const_cast<PB_DS_CLASS_C_DEC* >(this)->find_max();"}, {"sha": "2d40cd4fd154bd94269a8cb897b8ac7790ed2a1f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/insert_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Finsert_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,17 +43,17 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n push(const_reference r_val)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n+  PB_DS_ASSERT_VALID((*this),true)\n \n-    node_pointer p_nd = base_type::get_new_node_for_insert(r_val);\n+  node_pointer p_nd = base_type::get_new_node_for_insert(r_val);\n \n   insert_node(p_nd);\n \n   m_p_max = 0;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n+  PB_DS_ASSERT_VALID((*this),true)\n \n-    return point_iterator(p_nd);\n+  return point_iterator(p_nd);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -171,13 +171,13 @@ void\n PB_DS_CLASS_C_DEC::\n modify(point_iterator it, const_reference r_new_val)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n-    node_pointer p_nd = it.m_p_nd;\n+  PB_DS_ASSERT_VALID((*this),true)\n+  node_pointer p_nd = it.m_p_nd;\n \n   _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n-  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd, false);)\n+  PB_DS_ASSERT_BASE_NODE_CONSISTENT(p_nd, false)\n \n-    const bool bubble_up = Cmp_Fn::operator()(p_nd->m_value, r_new_val);\n+  const bool bubble_up = Cmp_Fn::operator()(p_nd->m_value, r_new_val);\n \n   p_nd->m_value = r_new_val;\n \n@@ -198,7 +198,7 @@ modify(point_iterator it, const_reference r_new_val)\n \n       m_p_max = 0;\n \n-      _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n+      PB_DS_ASSERT_VALID((*this),true)\n \n         return;\n     }\n@@ -211,6 +211,6 @@ modify(point_iterator it, const_reference r_new_val)\n \n   m_p_max = 0;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n-    }\n+  PB_DS_ASSERT_VALID((*this),true)\n+}\n "}, {"sha": "405e59385ddd4d3d9d21f5acd5d10e18ce2c4621", "filename": "libstdc++-v3/include/ext/pb_ds/detail/binomial_heap_base_/split_join_fn_imps.hpp", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fbinomial_heap_base_%2Fsplit_join_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -44,17 +44,17 @@ void\n PB_DS_CLASS_C_DEC::\n split(Pred pred, PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid(true);)\n+  PB_DS_ASSERT_VALID((*this),true)\n+  PB_DS_ASSERT_VALID(other,true)\n \n-    other.clear();\n+  other.clear();\n \n   if (base_type::empty())\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n-        _GLIBCXX_DEBUG_ONLY(other.assert_valid(true);)\n+      PB_DS_ASSERT_VALID((*this),true)\n+      PB_DS_ASSERT_VALID(other,true)\n \n-        return;\n+      return;\n     }\n \n   base_type::to_linked_list();\n@@ -86,9 +86,9 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n       p_out = p_next;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid(true);)\n+  PB_DS_ASSERT_VALID(other,true)\n \n-    node_pointer p_cur = base_type::m_p_root;\n+  node_pointer p_cur = base_type::m_p_root;\n \n   base_type::m_p_root = 0;\n \n@@ -114,19 +114,19 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n \n   m_p_max = 0;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid(true);)\n-    }\n+  PB_DS_ASSERT_VALID((*this),true)\n+  PB_DS_ASSERT_VALID(other,true)\n+}\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid(true);)\n+  PB_DS_ASSERT_VALID((*this),true)\n+  PB_DS_ASSERT_VALID(other,true)\n \n-    node_pointer p_other = other.m_p_root;\n+  node_pointer p_other = other.m_p_root;\n \n   if (p_other != 0)\n     do\n@@ -147,9 +147,9 @@ join(PB_DS_CLASS_C_DEC& other)\n   other.m_size = 0;\n   other.m_p_max = 0;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid(true);)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid(true);)\n-    }\n+  PB_DS_ASSERT_VALID((*this),true)\n+  PB_DS_ASSERT_VALID(other,true)\n+}\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::node_pointer"}, {"sha": "47abe51350823af12987a73231cdb2b9f5df907f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/cc_ht_map_.hpp", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fcc_ht_map_.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2009, 2010, 2011\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -98,7 +99,15 @@ namespace __gnu_pbds\n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #define PB_DS_V2F(X) (X)\n #define PB_DS_V2S(X) Mapped_Data()\n-#endif \n+#endif\n+\n+#define PB_DS_CHECK_KEY_EXISTS(_Key)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(_Key, __FILE__, __LINE__);)\n+\n+#define PB_DS_CHECK_KEY_DOES_NOT_EXIST(_Key)\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(_Key,\t\\\n+\t\t\t\t\t\t\t   __FILE__, __LINE__);)\n+\n \n     // <011i$i0|\\|-<|-|4i|\\|i|\\|g |-|4$|-| 74813.\n     template<typename Key,\n@@ -320,7 +329,7 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n #endif \n \n #ifdef PB_DS_HT_MAP_TRACE_\n@@ -369,7 +378,7 @@ namespace __gnu_pbds\n       inline mapped_reference\n       subscript_imp(const_key_reference r_key, false_type)\n       {\n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n         const size_type pos = ranged_hash_fn_base::operator()(r_key);\n \tentry_pointer p_e = m_entries[pos];\n \tresize_base::notify_insert_search_start();\n@@ -384,18 +393,18 @@ namespace __gnu_pbds\n \tresize_base::notify_insert_search_end();\n \tif (p_e != 0)\n \t  {\n-\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n+\t    PB_DS_CHECK_KEY_EXISTS(r_key)\n \t    return (p_e->m_value.second);\n \t  }\n \n-\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n+\tPB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n \treturn insert_new_imp(value_type(r_key, mapped_type()), pos)->second;\n       }\n \n       inline mapped_reference\n       subscript_imp(const_key_reference r_key, true_type)\n       {\n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \tcomp_hash pos_hash_pair = ranged_hash_fn_base::operator()(r_key);\n \tentry_pointer p_e = m_entries[pos_hash_pair.first];\n \tresize_base::notify_insert_search_start();\n@@ -409,11 +418,11 @@ namespace __gnu_pbds\n \tresize_base::notify_insert_search_end();\n \tif (p_e != 0)\n \t  {\n-\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n+\t    PB_DS_CHECK_KEY_EXISTS(r_key)\n \t    return p_e->m_value.second;\n \t  }\n \n-\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n+\tPB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n \treturn insert_new_imp(value_type(r_key, mapped_type()), \n \t\t\t      pos_hash_pair)->second;\n       }\n@@ -440,7 +449,7 @@ namespace __gnu_pbds\n \tresize_base::notify_inserted(++m_num_used_e);\n \n \t_GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(r_val));)\n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \treturn &p_e->m_value;\n       }\n \n@@ -459,7 +468,7 @@ namespace __gnu_pbds\n \tm_entries[r_pos_hash_pair.first] = p_e;\n \tresize_base::notify_inserted(++m_num_used_e);\n \t_GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(r_val));)\n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \treturn &p_e->m_value;\n       }\n \n@@ -479,9 +488,9 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n \tif (p_e == 0)\n-\t  debug_base::check_key_does_not_exist(r_key);\n+\t  PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n \telse\n-\t  debug_base::check_key_exists(r_key);\n+\t  PB_DS_CHECK_KEY_EXISTS(r_key)\n #endif \n \treturn &p_e->m_value;\n       }\n@@ -505,9 +514,9 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n \tif (p_e == 0)\n-\t  debug_base::check_key_does_not_exist(r_key);\n+\t  PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n \telse\n-\t  debug_base::check_key_exists(r_key);\n+\t  PB_DS_CHECK_KEY_EXISTS(r_key)\n #endif \n \treturn &p_e->m_value;\n       }\n@@ -568,13 +577,16 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_entry_pointer_array_valid(const entry_pointer_array) const;\n+      assert_entry_pointer_array_valid(const entry_pointer_array,\n+\t\t\t\t       const char* file, int line) const;\n \n       void\n-      assert_entry_pointer_valid(const entry_pointer, true_type) const;\n+      assert_entry_pointer_valid(const entry_pointer, true_type,\n+\t\t\t\t const char* file, int line) const;\n \n       void\n-      assert_entry_pointer_valid(const entry_pointer, false_type) const;\n+      assert_entry_pointer_valid(const entry_pointer, false_type,\n+\t\t\t\t const char* file, int line) const;\n #endif \n \n #ifdef PB_DS_HT_MAP_TRACE_\n@@ -609,6 +621,15 @@ namespace __gnu_pbds\n       PB_DS_STATIC_ASSERT(sth, store_hash_ok);\n     };\n \n+#define PB_DS_ASSERT_VALID(X)\t\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n #include <ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/cc_hash_table_map_/entry_list_fn_imps.hpp>\n #include <ext/pb_ds/detail/cc_hash_table_map_/find_fn_imps.hpp>\n@@ -621,6 +642,10 @@ namespace __gnu_pbds\n #include <ext/pb_ds/detail/cc_hash_table_map_/insert_fn_imps.hpp>\n #include <ext/pb_ds/detail/cc_hash_table_map_/trace_fn_imps.hpp>\n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_ASSERT_VALID\n+#undef PB_DS_CHECK_KEY_DOES_NOT_EXIST\n+#undef PB_DS_CHECK_KEY_EXISTS\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_HASH_EQ_FN_C_DEC"}, {"sha": "8278fd7e662bf738de55a89e476b0dca4cc2284f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -66,7 +66,7 @@ PB_DS_CLASS_NAME() :\n   m_entries(s_entry_pointer_allocator.allocate(m_num_e))\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -77,7 +77,7 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn) :\n   m_entries(s_entry_pointer_allocator.allocate(m_num_e))\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -91,7 +91,7 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn) :\n   std::fill(m_entries, m_entries + m_num_e, (entry_pointer)0);\n   Resize_Policy::notify_cleared();\n   ranged_hash_fn_base::notify_resized(m_num_e);\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -104,7 +104,7 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Hash\n   m_entries(s_entry_pointer_allocator.allocate(m_num_e))\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -118,22 +118,19 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn, const Comb_Hash\n   m_entries(s_entry_pointer_allocator.allocate(m_num_e))\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n-#ifdef _GLIBCXX_DEBUG\n-  debug_base(other),\n-#endif \n   PB_DS_HASH_EQ_FN_C_DEC(other),\n   resize_base(other), ranged_hash_fn_base(other),\n   m_num_e(resize_base::get_nearest_larger_size(1)), m_num_used_e(0),\n   m_entries(s_entry_pointer_allocator.allocate(m_num_e))\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n     __try\n       {\n         copy_from_range(other.begin(), other.end());\n@@ -143,7 +140,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n         deallocate_all();\n         __throw_exception_again;\n       }\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -156,8 +153,8 @@ void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n \n   std::swap(m_entries, other.m_entries);\n   std::swap(m_num_e, other.m_num_e);\n@@ -167,8 +164,8 @@ swap(PB_DS_CLASS_C_DEC& other)\n   resize_base::swap(other);\n \n   _GLIBCXX_DEBUG_ONLY(debug_base::swap(other));\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "d10ff7862ccaabbac723f145378babe6c8c5f9e2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/debug_fn_imps.hpp", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,16 +43,17 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_valid() const\n+assert_valid(const char* __file, int __line) const\n {\n-  debug_base::check_size(m_num_used_e);\n-  assert_entry_pointer_array_valid(m_entries);\n+  debug_base::check_size(m_num_used_e, __file, __line);\n+  assert_entry_pointer_array_valid(m_entries, __file, __line);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_entry_pointer_array_valid(const entry_pointer_array a_p_entries) const\n+assert_entry_pointer_array_valid(const entry_pointer_array a_p_entries,\n+\t\t\t\t const char* __file, int __line) const\n {\n   size_type iterated_num_used_e = 0;\n   for (size_type pos = 0; pos < m_num_e; ++pos)\n@@ -61,11 +62,12 @@ assert_entry_pointer_array_valid(const entry_pointer_array a_p_entries) const\n       while (p_e != 0)\n         {\n \t  ++iterated_num_used_e;\n-\t  assert_entry_pointer_valid(p_e, traits_base::m_store_extra_indicator);\n+\t  assert_entry_pointer_valid(p_e, traits_base::m_store_extra_indicator,\n+\t\t\t\t     __file, __line);\n \t  p_e = p_e->m_p_next;\n         }\n     }\n-  _GLIBCXX_DEBUG_ASSERT(iterated_num_used_e == m_num_used_e);\n+  PB_DS_DEBUG_VERIFY(iterated_num_used_e == m_num_used_e);\n }\n \n #include <ext/pb_ds/detail/cc_hash_table_map_/debug_store_hash_fn_imps.hpp>"}, {"sha": "4a02bbfcc5df6bd4cfe09122b12baf7c5669840d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/debug_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,7 +43,8 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_entry_pointer_valid(const entry_pointer p, false_type) const\n-{ debug_base::check_key_exists(PB_DS_V2F(p->m_value)); }\n+assert_entry_pointer_valid(const entry_pointer p, false_type,\n+\t\t\t   const char* __file, int __line) const\n+{ debug_base::check_key_exists(PB_DS_V2F(p->m_value), __file, __line); }\n \n #endif "}, {"sha": "07f2998bceca5d8bbcec0ad1a8576a1c4c1411ab", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/debug_store_hash_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,11 +43,12 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_entry_pointer_valid(const entry_pointer p_e, true_type) const\n+assert_entry_pointer_valid(const entry_pointer p_e, true_type,\n+\t\t\t   const char* __file, int __line) const\n {\n-  debug_base::check_key_exists(PB_DS_V2F(p_e->m_value));\n+  debug_base::check_key_exists(PB_DS_V2F(p_e->m_value), __file, __line);\n   comp_hash pos_hash_pair = ranged_hash_fn_base::operator()(PB_DS_V2F(p_e->m_value));\n-  _GLIBCXX_DEBUG_ASSERT(p_e->m_hash == pos_hash_pair.second);\n+  PB_DS_DEBUG_VERIFY(p_e->m_hash == pos_hash_pair.second);\n }\n \n #endif "}, {"sha": "ffe32103cbea7d236e18d7a934dee7b3eb1e1e0b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -44,7 +44,7 @@ inline bool\n PB_DS_CLASS_C_DEC::\n erase(const_key_reference r_key)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return erase_in_pos_imp(r_key, ranged_hash_fn_base::operator()(r_key));\n }\n \n@@ -53,24 +53,24 @@ inline bool\n PB_DS_CLASS_C_DEC::\n erase_in_pos_imp(const_key_reference r_key, size_type pos)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   entry_pointer p_e = m_entries[pos];\n   resize_base::notify_erase_search_start();\n   if (p_e == 0)\n     {\n       resize_base::notify_erase_search_end();\n-      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n+      PB_DS_ASSERT_VALID((*this))\n       return false;\n     }\n \n   if (hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), r_key))\n     {\n       resize_base::notify_erase_search_end();\n-      _GLIBCXX_DEBUG_ONLY(debug_base:: check_key_exists(r_key);)\n+      PB_DS_CHECK_KEY_EXISTS(r_key)\n       erase_entry_pointer(m_entries[pos]);\n       do_resize_if_needed_no_throw();\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n       return true;\n     }\n \n@@ -80,18 +80,18 @@ erase_in_pos_imp(const_key_reference r_key, size_type pos)\n       if (p_next_e == 0)\n         {\n \t  resize_base::notify_erase_search_end();\n-\t  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n-          _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t  PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n+          PB_DS_ASSERT_VALID((*this))\n           return false;\n         }\n \n       if (hash_eq_fn_base::operator()(PB_DS_V2F(p_next_e->m_value), r_key))\n         {\n \t  resize_base::notify_erase_search_end();\n-\t  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n+\t  PB_DS_CHECK_KEY_EXISTS(r_key)\n           erase_entry_pointer(p_e->m_p_next);\n \t  do_resize_if_needed_no_throw();\n-\t  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t  PB_DS_ASSERT_VALID((*this))\n           return true;\n         }\n       resize_base::notify_erase_search_collision();"}, {"sha": "09d34f2c0b1ac4d86f913979fefe76c3c6c66a8f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/erase_store_hash_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ferase_store_hash_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -44,25 +44,25 @@ inline bool\n PB_DS_CLASS_C_DEC::\n erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   entry_pointer p_e = m_entries[r_pos_hash_pair.first];\n   resize_base::notify_erase_search_start();\n   if (p_e == 0)\n     {\n       resize_base::notify_erase_search_end();\n-      _GLIBCXX_DEBUG_ONLY(debug_base:: check_key_does_not_exist(r_key);)\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n+      PB_DS_ASSERT_VALID((*this))\n       return false;\n     }\n \n   if (hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), p_e->m_hash,\n \t\t\t\t  r_key, r_pos_hash_pair.second))\n     {\n       resize_base::notify_erase_search_end();\n-      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n+      PB_DS_CHECK_KEY_EXISTS(r_key)\n       erase_entry_pointer(m_entries[r_pos_hash_pair.first]);\n       do_resize_if_needed_no_throw();\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n       return true;\n     }\n \n@@ -72,8 +72,8 @@ erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n       if (p_next_e == 0)\n         {\n \t  resize_base::notify_erase_search_end();\n-\t  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n-          _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t  PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n+          PB_DS_ASSERT_VALID((*this))\n           return false;\n         }\n \n@@ -82,10 +82,10 @@ erase_in_pos_imp(const_key_reference r_key, const comp_hash& r_pos_hash_pair)\n \t\t\t\t      r_pos_hash_pair.second))\n         {\n \t  resize_base::notify_erase_search_end();\n-\t  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n+\t  PB_DS_CHECK_KEY_EXISTS(r_key)\n           erase_entry_pointer(p_e->m_p_next);\n \t  do_resize_if_needed_no_throw();\n-\t  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t  PB_DS_ASSERT_VALID((*this))\n           return true;\n         }\n       resize_base::notify_erase_search_collision();"}, {"sha": "32ca47d6e3f7a59f5a321b7949020f4e09a0e9e2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/find_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Ffind_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,7 +43,7 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return find_key_pointer(r_key, traits_base::m_store_extra_indicator);\n }\n \n@@ -52,7 +52,7 @@ inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key) const\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return const_cast<PB_DS_CLASS_C_DEC& >(*this).find_key_pointer(r_key, \n \t\t\t\t\ttraits_base::m_store_extra_indicator);\n }"}, {"sha": "acbd8a78d0789ea6690c997f8258ba707991591c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/insert_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -44,7 +44,7 @@ inline std::pair<typename PB_DS_CLASS_C_DEC::point_iterator, bool>\n PB_DS_CLASS_C_DEC::\n insert_imp(const_reference r_val, false_type)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   const_key_reference r_key = PB_DS_V2F(r_val);\n   const size_type pos = ranged_hash_fn_base::operator()(r_key);\n   entry_pointer p_e = m_entries[pos];\n@@ -60,11 +60,11 @@ insert_imp(const_reference r_val, false_type)\n   resize_base::notify_insert_search_end();\n   if (p_e != 0)\n     {\n-      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n+      PB_DS_CHECK_KEY_EXISTS(r_key)\n       return std::make_pair(&p_e->m_value, false);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n+  PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n   return std::make_pair(insert_new_imp(r_val, pos), true);\n }\n "}, {"sha": "1224880ecc9408a3338f99ffbb007cd8eb2da815", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/insert_store_hash_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Finsert_store_hash_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -44,7 +44,7 @@ inline std::pair<typename PB_DS_CLASS_C_DEC::point_iterator, bool>\n PB_DS_CLASS_C_DEC::\n insert_imp(const_reference r_val, true_type)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   const_key_reference key = PB_DS_V2F(r_val);\n   comp_hash pos_hash_pair = ranged_hash_fn_base::operator()(key);\n   entry_pointer p_e = m_entries[pos_hash_pair.first];\n@@ -61,11 +61,11 @@ insert_imp(const_reference r_val, true_type)\n   resize_base::notify_insert_search_end();\n   if (p_e != 0)\n     {\n-      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(key);)\n+      PB_DS_CHECK_KEY_EXISTS(key)\n       return std::make_pair(&p_e->m_value, false);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(key);)\n+  PB_DS_CHECK_KEY_DOES_NOT_EXIST(key)\n   return std::make_pair(insert_new_imp(r_val, pos_hash_pair), true);\n }\n "}, {"sha": "4e3f48dd12d99fc5eb68dd20666cd23c94dbb17b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/cc_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fcc_hash_table_map_%2Fresize_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -71,15 +71,15 @@ do_resize_if_needed_no_throw()\n   __catch(...)\n     { }\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n resize_imp(size_type new_size)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   if (new_size == m_num_e)\n     return;\n \n@@ -104,7 +104,7 @@ resize_imp(size_type new_size)\n   // At this point no exceptions can be thrown.\n   resize_imp_no_exceptions(new_size, a_p_entries_resized, old_size);\n   Resize_Policy::notify_resized(new_size);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -123,10 +123,11 @@ resize_imp_no_exceptions(size_type new_size, entry_pointer_array a_p_entries_res\n     }\n \n   m_num_e = new_size;\n-  _GLIBCXX_DEBUG_ONLY(assert_entry_pointer_array_valid(a_p_entries_resized);)\n+  _GLIBCXX_DEBUG_ONLY(assert_entry_pointer_array_valid(a_p_entries_resized,\n+\t\t\t\t\t\t       __FILE__, __LINE__);)\n   s_entry_pointer_allocator.deallocate(m_entries, old_size);\n   m_entries = a_p_entries_resized;\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n #include <ext/pb_ds/detail/cc_hash_table_map_/resize_no_store_hash_fn_imps.hpp>"}, {"sha": "1ade7957b66cc03f879ad3ff65d470f596dd67c0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/debug_map_base.hpp", "status": "modified", "additions": 56, "deletions": 38, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fdebug_map_base.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -51,6 +51,15 @@\n #include <ext/throw_allocator.h>\n #include <debug/debug.h>\n \n+#define PB_DS_ASSERT_VALID(X) \\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n namespace __gnu_pbds\n {\n   namespace detail\n@@ -98,13 +107,15 @@ namespace __gnu_pbds\n       clear();\n \n       inline void\n-      check_key_exists(const_key_reference r_key) const;\n+      check_key_exists(const_key_reference r_key,\n+\t\t       const char* file, int line) const;\n \n       inline void\n-      check_key_does_not_exist(const_key_reference r_key) const;\n+      check_key_does_not_exist(const_key_reference r_key,\n+\t\t\t       const char* file, int line) const;\n \n       inline void\n-      check_size(size_type size) const;\n+      check_size(size_type size, const char* file, int line) const;\n \n       void\n       swap(PB_DS_CLASS_C_DEC& other);\n@@ -114,11 +125,11 @@ namespace __gnu_pbds\n       split(const_key_reference, Cmp_Fn, PB_DS_CLASS_C_DEC&);\n \n       void\n-      join(PB_DS_CLASS_C_DEC& other);\n+      join(PB_DS_CLASS_C_DEC& other, bool with_cleanup = true);\n \n     private:\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n \n       const_key_set_iterator\n       find(const_key_reference r_key) const;\n@@ -133,24 +144,24 @@ namespace __gnu_pbds\n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     debug_map_base()\n-    { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+    { PB_DS_ASSERT_VALID((*this)) }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     debug_map_base(const PB_DS_CLASS_C_DEC& other) : m_key_set(other.m_key_set)\n-    { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+    { PB_DS_ASSERT_VALID((*this)) }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ~debug_map_base()\n-    { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+    { PB_DS_ASSERT_VALID((*this)) }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     insert_new(const_key_reference r_key)\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n \n       if (find(r_key) != m_key_set.end())\n \t{\n@@ -169,96 +180,98 @@ namespace __gnu_pbds\n \t  std::abort();\n \t}\n \n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n     }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     erase_existing(const_key_reference r_key)\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n       key_set_iterator it = find(r_key);\n       if (it == m_key_set.end())\n \t{\n \t  std::cerr << \"erase_existing\" << r_key << std::endl;\n \t  std::abort();\n \t}\n       m_key_set.erase(it);\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n     }\n \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     clear()\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n       m_key_set.clear();\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n     }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n-    check_key_exists(const_key_reference r_key) const\n+    check_key_exists(const_key_reference r_key,\n+\t\t     const char* __file, int __line) const\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      assert_valid(__file, __line);\n       if (find(r_key) == m_key_set.end())\n \t{\n-\t  std::cerr << \"check_key_exists \" << r_key << std::endl;\n+\t  std::cerr << __file << ':' << __line << \": check_key_exists \"\n+\t\t    << r_key << std::endl;\n \t  std::abort();\n \t}\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n     }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n-    check_key_does_not_exist(const_key_reference r_key) const\n+    check_key_does_not_exist(const_key_reference r_key,\n+\t\t\t     const char* __file, int __line) const\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      assert_valid(__file, __line);\n       if (find(r_key) != m_key_set.end())\n \t{\n \t  using std::cerr;\n \t  using std::endl;\n-\t  cerr << \"check_key_does_not_exist \" << r_key << endl;\n+\t  cerr << __file << ':' << __line << \": check_key_does_not_exist \"\n+\t       << r_key << endl;\n \t  std::abort();\n \t}\n     }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n-    check_size(size_type size) const\n+    check_size(size_type size, const char* __file, int __line) const\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      assert_valid(__file, __line);\n       const size_type key_set_size = m_key_set.size();\n       if (size != key_set_size)\n \t{\n-\t  std::cerr << \"check_size \" << size\n-\t\t    << \" \" << key_set_size << std::endl;\n+\t  std::cerr << __file << ':' << __line << \": check_size \" << size\n+\t\t    << \" != \" << key_set_size << std::endl;\n \t  std::abort();\n \t}\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n      }\n \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n     swap(PB_DS_CLASS_C_DEC& other)\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n       m_key_set.swap(other.m_key_set);\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n     }\n \n     PB_DS_CLASS_T_DEC\n     typename PB_DS_CLASS_C_DEC::const_key_set_iterator\n     PB_DS_CLASS_C_DEC::\n     find(const_key_reference r_key) const\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n       typedef const_key_set_iterator iterator_type;\n       for (iterator_type it = m_key_set.begin(); it != m_key_set.end(); ++it)\n \tif (m_eq(*it, r_key))\n@@ -271,7 +284,7 @@ namespace __gnu_pbds\n     PB_DS_CLASS_C_DEC::\n     find(const_key_reference r_key)\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n       key_set_iterator it = m_key_set.begin();\n       while (it != m_key_set.end())\n \t{\n@@ -280,13 +293,12 @@ namespace __gnu_pbds\n \t  ++it;\n \t}\n       return it;\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n      }\n \n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n-    assert_valid() const\n+    assert_valid(const char* __file, int __line) const\n     {\n       const_key_set_iterator prime_it = m_key_set.begin();\n       while (prime_it != m_key_set.end())\n@@ -295,8 +307,8 @@ namespace __gnu_pbds\n \t  ++sec_it;\n \t  while (sec_it != m_key_set.end())\n \t    {\n-\t      _GLIBCXX_DEBUG_ASSERT(!m_eq(*sec_it, *prime_it));\n-\t      _GLIBCXX_DEBUG_ASSERT(!m_eq(*prime_it, *sec_it));\n+\t      PB_DS_DEBUG_VERIFY(!m_eq(*sec_it, *prime_it));\n+\t      PB_DS_DEBUG_VERIFY(!m_eq(*prime_it, *sec_it));\n \t      ++sec_it;\n \t    }\n \t  ++prime_it;\n@@ -324,15 +336,18 @@ namespace __gnu_pbds\n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n-    join(PB_DS_CLASS_C_DEC& other)\n+    join(PB_DS_CLASS_C_DEC& other, bool with_cleanup)\n     {\n       key_set_iterator it = other.m_key_set.begin();\n       while (it != other.m_key_set.end())\n \t{\n \t  insert_new(*it);\n-\t  it = other.m_key_set.erase(it);\n+\t  if (with_cleanup)\n+\t    it = other.m_key_set.erase(it);\n+\t  else\n+\t    ++it;\n \t}\n-      _GLIBCXX_DEBUG_ASSERT(other.m_key_set.empty());\n+      _GLIBCXX_DEBUG_ASSERT(!with_cleanup || other.m_key_set.empty());\n     }\n \n #undef PB_DS_CLASS_T_DEC\n@@ -341,6 +356,9 @@ namespace __gnu_pbds\n } // namespace detail\n } // namespace __gnu_pbds\n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_ASSERT_VALID\n+\n #endif\n \n #endif"}, {"sha": "90f17094a0f1fd42fa8e27582f80e6cc89427b80", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fconstructor_destructor_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2011\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -61,7 +62,7 @@ PB_DS_CLASS_NAME()\n   m_entries(s_entry_allocator.allocate(m_num_e))\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -72,7 +73,7 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn)\n   m_entries(s_entry_allocator.allocate(m_num_e))\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -84,7 +85,7 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn)\n   m_entries(s_entry_allocator.allocate(m_num_e))\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -98,7 +99,7 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn,\n   m_entries(s_entry_allocator.allocate(m_num_e))\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -112,7 +113,7 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn,\n   m_entries(s_entry_allocator.allocate(m_num_e))\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -127,7 +128,7 @@ PB_DS_CLASS_NAME(const Hash_Fn& r_hash_fn, const Eq_Fn& r_eq_fn,\n   m_entries(s_entry_allocator.allocate(m_num_e))\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -160,7 +161,7 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n       deallocate_all();\n       __throw_exception_again;\n     }\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -173,17 +174,17 @@ void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n   std::swap(m_num_e, other.m_num_e);\n   std::swap(m_num_used_e, other.m_num_used_e);\n   std::swap(m_entries, other.m_entries);\n   ranged_probe_fn_base::swap(other);\n   hash_eq_fn_base::swap(other);\n   resize_base::swap(other);\n   _GLIBCXX_DEBUG_ONLY(debug_base::swap(other));\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "eca853a2092c8ae9252b1d4fdafdfe98b73b0699", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/debug_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,10 +43,11 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_valid() const\n+assert_valid(const char* __file, int __line) const\n {\n-  debug_base::check_size(m_num_used_e);\n-  assert_entry_array_valid(m_entries, traits_base::m_store_extra_indicator);\n+  debug_base::check_size(m_num_used_e, __file, __line);\n+  assert_entry_array_valid(m_entries, traits_base::m_store_extra_indicator,\n+\t\t\t   __file, __line);\n }\n \n #include <ext/pb_ds/detail/gp_hash_table_map_/debug_no_store_hash_fn_imps.hpp>"}, {"sha": "ba8f54e5dea1c347cb0c170f4ef11b8aacbb2ce0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/debug_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_no_store_hash_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,7 +43,8 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_entry_array_valid(const entry_array a_entries, false_type) const\n+assert_entry_array_valid(const entry_array a_entries, false_type,\n+\t\t\t const char* __file, int __line) const\n {\n   size_type iterated_num_used_e = 0;\n   for (size_type pos = 0; pos < m_num_e; ++pos)\n@@ -57,15 +58,15 @@ assert_entry_array_valid(const entry_array a_entries, false_type) const\n         case valid_entry_status:\n \t  {\n \t    const_key_reference r_key = PB_DS_V2F(p_e->m_value);\n-\t    debug_base::check_key_exists(r_key);\n+\t    debug_base::check_key_exists(r_key, __file, __line);\n \t    ++iterated_num_used_e;\n \t    break;\n \t  }\n         default:\n-\t  _GLIBCXX_DEBUG_ASSERT(0);\n+\t  PB_DS_DEBUG_VERIFY(0);\n         };\n     }\n-  _GLIBCXX_DEBUG_ASSERT(iterated_num_used_e == m_num_used_e);\n+  PB_DS_DEBUG_VERIFY(iterated_num_used_e == m_num_used_e);\n }\n \n #endif "}, {"sha": "2c2833eacbf51c0c810387198aeec5fa838df632", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/debug_store_hash_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fdebug_store_hash_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,7 +43,8 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_entry_array_valid(const entry_array a_entries, true_type) const\n+assert_entry_array_valid(const entry_array a_entries, true_type,\n+\t\t\t const char* __file, int __line) const\n {\n   size_type iterated_num_used_e = 0;\n \n@@ -58,20 +59,20 @@ assert_entry_array_valid(const entry_array a_entries, true_type) const\n         case valid_entry_status:\n \t  {\n \t    const_key_reference r_key = PB_DS_V2F(p_e->m_value);\n-\t    debug_base::check_key_exists(r_key);\n+\t    debug_base::check_key_exists(r_key, __file, __line);\n \n \t    const comp_hash pos_hash_pair = ranged_probe_fn_base::operator()(r_key);\n \n-\t    _GLIBCXX_DEBUG_ASSERT(p_e->m_hash == pos_hash_pair.second);\n+\t    PB_DS_DEBUG_VERIFY(p_e->m_hash == pos_hash_pair.second);\n \t    ++iterated_num_used_e;\n \t    break;\n \t  }\n         default:\n-\t  _GLIBCXX_DEBUG_ASSERT(0);\n+\t  PB_DS_DEBUG_VERIFY(0);\n         };\n     }\n \n-  _GLIBCXX_DEBUG_ASSERT(iterated_num_used_e == m_num_used_e);\n+  PB_DS_DEBUG_VERIFY(iterated_num_used_e == m_num_used_e);\n }\n \n #endif "}, {"sha": "e57d5cc7f2d8d16c3af1f3a5da764d53c5354f2b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -72,7 +72,7 @@ inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   size_type num_ersd = 0;\n   for (size_type pos = 0; pos < m_num_e; ++pos)\n     {\n@@ -86,7 +86,7 @@ erase_if(Pred pred)\n     }\n \n   do_resize_if_needed_no_throw();\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return num_ersd;\n }\n "}, {"sha": "67e64e91ab6ceae02e9b2e9c8e5c44c6ad4a74b3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_no_store_hash_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -44,7 +44,7 @@ inline bool\n PB_DS_CLASS_C_DEC::\n erase_imp(const_key_reference r_key,  false_type)\n {\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   size_type hash = ranged_probe_fn_base::operator()(r_key);\n   size_type i;\n   resize_base::notify_erase_search_start();\n@@ -58,8 +58,7 @@ erase_imp(const_key_reference r_key,  false_type)\n         case empty_entry_status:\n \t  {\n \t    resize_base::notify_erase_search_end();\n-\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(\n-\t\t\t\t\t\t\t\t    r_key));\n+\t    PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n \t    return false;\n \t  }\n \t  break;"}, {"sha": "02dc63ea5bb8ec52f3d9ccff743b0feaf69e52c0", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/erase_store_hash_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ferase_store_hash_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -57,8 +57,7 @@ erase_imp(const_key_reference r_key, true_type)\n         case empty_entry_status:\n \t  {\n \t    resize_base::notify_erase_search_end();\n-\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(\n-\t\t\t\t\t\t\t\t    r_key));\n+\t    PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n \t    return false;\n \t  }\n \t  break;"}, {"sha": "d8b32fe171916e1253037c558a481730540d2573", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/find_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Ffind_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,16 +43,16 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-   return find_key_pointer(r_key, traits_base::m_store_extra_indicator);\n+  PB_DS_ASSERT_VALID((*this))\n+  return find_key_pointer(r_key, traits_base::m_store_extra_indicator);\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key) const\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return const_cast<PB_DS_CLASS_C_DEC&>(*this).find_key_pointer(r_key, traits_base::m_store_extra_indicator);\n }\n "}, {"sha": "ef3be7bd05491658a2d1fe3fd0d9a0a80f9452df", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/gp_ht_map_.hpp", "status": "modified", "additions": 42, "deletions": 22, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fgp_ht_map_.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2009, 2010, 2011\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -95,7 +96,14 @@ namespace __gnu_pbds\n #ifdef PB_DS_DATA_FALSE_INDICATOR\n #define PB_DS_V2F(X) (X)\n #define PB_DS_V2S(X) Mapped()\n-#endif \n+#endif\n+\n+#define PB_DS_CHECK_KEY_EXISTS(_Key)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(_Key, __FILE__, __LINE__);)\n+\n+#define PB_DS_CHECK_KEY_DOES_NOT_EXIST(_Key)\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(_Key,\t\\\n+\t\t\t\t\t\t\t   __FILE__, __LINE__);)\n \n     template<typename Key,\n \t     typename Mapped,\n@@ -280,7 +288,7 @@ namespace __gnu_pbds\n       inline std::pair<point_iterator, bool>\n       insert(const_reference r_val)\n       {\n-\t_GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid(__FILE__, __LINE__);)\n         return insert_imp(r_val, traits_base::m_store_extra_indicator);\n       }\n \n@@ -331,7 +339,7 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n #endif \n \n #ifdef PB_DS_HT_MAP_TRACE_\n@@ -406,7 +414,7 @@ namespace __gnu_pbds\n \n \t_GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(p_e->m_value));)\n \n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \treturn &p_e->m_value;\n       }\n \n@@ -432,15 +440,15 @@ namespace __gnu_pbds\n \n \t_GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(p_e->m_value));)\n \n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \treturn &p_e->m_value;\n       }\n \n #ifdef PB_DS_DATA_TRUE_INDICATOR\n       inline mapped_reference\n       subscript_imp(const_key_reference key, false_type)\n       {\n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \n \tconst size_type pos = find_ins_pos(key, \n \t\t\t\t\t traits_base::m_store_extra_indicator);\n@@ -449,14 +457,14 @@ namespace __gnu_pbds\n \tif (p_e->m_stat != valid_entry_status)\n \t  return insert_new_imp(value_type(key, mapped_type()), pos)->second;\n \n-\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(key);)\t  \n+\tPB_DS_CHECK_KEY_EXISTS(key)\n \treturn p_e->m_value.second;\n       }\n \n       inline mapped_reference\n       subscript_imp(const_key_reference key, true_type)\n       {\n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \n \tcomp_hash pos_hash_pair =\n \t  find_ins_pos(key, traits_base::m_store_extra_indicator);\n@@ -465,7 +473,7 @@ namespace __gnu_pbds\n \t  return insert_new_imp(value_type(key, mapped_type()),\n \t\t\t\t pos_hash_pair)->second;\n \n-\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(key));\n+\tPB_DS_CHECK_KEY_EXISTS(key)\n \treturn (m_entries + pos_hash_pair.first)->m_value.second;\n       }\n #endif\n@@ -488,17 +496,15 @@ namespace __gnu_pbds\n \t      case empty_entry_status:\n \t\t{\n \t\t  resize_base::notify_find_search_end();\n-\t\t  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(key);)\n-\n-\t\t    return 0;\n+\t\t  PB_DS_CHECK_KEY_DOES_NOT_EXIST(key)\n+\t\t  return 0;\n \t\t}\n \t\tbreak;\n \t      case valid_entry_status:\n \t\tif (hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), key))\n \t\t  {\n \t\t    resize_base::notify_find_search_end();\n-\t\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(key);)\n-\n+\t\t    PB_DS_CHECK_KEY_EXISTS(key)\n \t\t    return pointer(&p_e->m_value);\n \t\t  }\n \t\tbreak;\n@@ -511,7 +517,7 @@ namespace __gnu_pbds\n \t    resize_base::notify_find_search_collision();\n \t  }\n \n-\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(key);)\n+\tPB_DS_CHECK_KEY_DOES_NOT_EXIST(key)\n \tresize_base::notify_find_search_end();\n \treturn 0;\n       }\n@@ -536,8 +542,7 @@ namespace __gnu_pbds\n \t      case empty_entry_status:\n \t\t{\n \t\t  resize_base::notify_find_search_end();\n-\t\t  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(key);)\n-\n+\t\t  PB_DS_CHECK_KEY_DOES_NOT_EXIST(key)\n \t\t  return 0;\n \t\t}\n \t\tbreak;\n@@ -547,7 +552,7 @@ namespace __gnu_pbds\n \t\t\t\t\t\tkey, pos_hash_pair.second))\n \t\t  {\n \t\t    resize_base::notify_find_search_end();\n-\t\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(key);)\n+\t\t    PB_DS_CHECK_KEY_EXISTS(key)\n \t\t    return pointer(&p_e->m_value);\n \t\t  }\n \t\tbreak;\n@@ -560,7 +565,7 @@ namespace __gnu_pbds\n \t    resize_base::notify_find_search_collision();\n \t  }\n \n-\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(key);)\n+\tPB_DS_CHECK_KEY_DOES_NOT_EXIST(key)\n \tresize_base::notify_find_search_end();\n \treturn 0;\n       }\n@@ -628,10 +633,12 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_entry_array_valid(const entry_array, false_type) const;\n+      assert_entry_array_valid(const entry_array, false_type,\n+\t\t\t       const char* file, int line) const;\n \n       void\n-      assert_entry_array_valid(const entry_array, true_type) const;\n+      assert_entry_array_valid(const entry_array, true_type,\n+\t\t\t       const char* file, int line) const;\n #endif \n \n       static entry_allocator \ts_entry_allocator;\n@@ -651,6 +658,15 @@ namespace __gnu_pbds\n       PB_DS_STATIC_ASSERT(sth, store_hash_ok);\n     };\n \n+#define PB_DS_ASSERT_VALID(X)\t\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n #include <ext/pb_ds/detail/gp_hash_table_map_/constructor_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/gp_hash_table_map_/find_fn_imps.hpp>\n #include <ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp>\n@@ -662,6 +678,10 @@ namespace __gnu_pbds\n #include <ext/pb_ds/detail/gp_hash_table_map_/insert_fn_imps.hpp>\n #include <ext/pb_ds/detail/gp_hash_table_map_/trace_fn_imps.hpp>\n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_ASSERT_VALID\n+#undef PB_DS_CHECK_KEY_DOES_NOT_EXIST\n+#undef PB_DS_CHECK_KEY_EXISTS\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_HASH_EQ_FN_C_DEC"}, {"sha": "95c9054f3b7dfa632c2110f12f012e20f86db19c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/insert_no_store_hash_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_no_store_hash_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -62,7 +62,7 @@ find_ins_pos(const_key_reference r_key, false_type)\n         case empty_entry_status:\n \t  {\n             resize_base::notify_insert_search_end();\n-            _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n+\t    PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n \t    return (ins_pos == m_num_e) ? pos : ins_pos;\n \t  }\n \t  break;\n@@ -74,7 +74,7 @@ find_ins_pos(const_key_reference r_key, false_type)\n \t  if (hash_eq_fn_base::operator()(PB_DS_V2F(p_e->m_value), r_key))\n             {\n \t      resize_base::notify_insert_search_end();\n-\t      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n+\t      PB_DS_CHECK_KEY_EXISTS(r_key)\n                 return pos;\n             }\n \t  break;\n@@ -101,11 +101,11 @@ insert_imp(const_reference r_val, false_type)\n \n   if (m_entries[pos].m_stat == valid_entry_status)\n     {\n-      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n+      PB_DS_CHECK_KEY_EXISTS(r_key)\n       return std::make_pair(&(m_entries + pos)->m_value, false);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key));\n+  PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n   return std::make_pair(insert_new_imp(r_val, pos), true);\n }\n "}, {"sha": "a27d9d202c9f0bdda43c77fa1dac6f716f4c9900", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/insert_store_hash_fn_imps.hpp", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Finsert_store_hash_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -44,7 +44,7 @@ inline typename PB_DS_CLASS_C_DEC::comp_hash\n PB_DS_CLASS_C_DEC::\n find_ins_pos(const_key_reference r_key, true_type)\n {\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   comp_hash pos_hash_pair = ranged_probe_fn_base::operator()(r_key);\n \n   size_type i;\n@@ -64,7 +64,7 @@ find_ins_pos(const_key_reference r_key, true_type)\n         case empty_entry_status:\n \t  {\n             resize_base::notify_insert_search_end();\n-            _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n+\t    PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n \n \t    return ((ins_pos == m_num_e) ?\n \t\t     std::make_pair(pos, pos_hash_pair.second) :\n@@ -80,7 +80,7 @@ find_ins_pos(const_key_reference r_key, true_type)\n \t\t\t\t\t  r_key, pos_hash_pair.second))\n             {\n \t      resize_base::notify_insert_search_end();\n-\t      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n+\t      PB_DS_CHECK_KEY_EXISTS(r_key)\n               return std::make_pair(pos, pos_hash_pair.second);\n             }\n \t  break;\n@@ -108,11 +108,11 @@ insert_imp(const_reference r_val, true_type)\n   entry_pointer p_e =& m_entries[pos_hash_pair.first];\n   if (p_e->m_stat == valid_entry_status)\n     {\n-      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key));\n+      PB_DS_CHECK_KEY_EXISTS(r_key)\n       return std::make_pair(&p_e->m_value, false);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key));\n+  PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n   return std::make_pair(insert_new_imp(r_val, pos_hash_pair), true);\n }\n "}, {"sha": "70381f10602bbe104924b8e083f8f47a1791496e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/gp_hash_table_map_/resize_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fgp_hash_table_map_%2Fresize_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -71,7 +71,7 @@ do_resize_if_needed_no_throw()\n   __catch(...)\n     { }\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -86,7 +86,7 @@ resize_imp(size_type new_size)\n   if (new_size == m_num_e)\n     return;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   const size_type old_size = m_num_e;\n   entry_array a_entries_resized = 0;\n \n@@ -113,13 +113,15 @@ resize_imp(size_type new_size)\n     }\n \n   // At this point no exceptions can be thrown.\n-  _GLIBCXX_DEBUG_ONLY(assert_entry_array_valid(a_entries_resized, traits_base::m_store_extra_indicator);)\n+  _GLIBCXX_DEBUG_ONLY(assert_entry_array_valid(a_entries_resized,\n+\t\t\t\t\t       traits_base::m_store_extra_indicator,\n+\t\t\t\t\t       __FILE__, __LINE__);)\n \n   Resize_Policy::notify_resized(new_size);\n   erase_all_valid_entries(m_entries, old_size);\n   s_entry_allocator.deallocate(m_entries, old_size);\n   m_entries = a_entries_resized;\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "5bec709fb50bc07a72040137d55df49ff98f711a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -53,7 +53,7 @@ left_child_next_sibling_heap_() :\n   m_p_root(0),\n   m_size(0)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -63,7 +63,7 @@ left_child_next_sibling_heap_(const Cmp_Fn& r_cmp_fn) :\n   m_p_root(0),\n   m_size(0)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -72,23 +72,23 @@ left_child_next_sibling_heap_(const PB_DS_CLASS_C_DEC& other)\n : Cmp_Fn(other), m_p_root(0), m_size(0)\n {\n   m_size = other.m_size;\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID(other)\n   m_p_root = recursive_copy_node(other.m_p_root);\n   m_size = other.m_size;\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n   value_swap(other);\n   std::swap((Cmp_Fn& )(*this), (Cmp_Fn& )other);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "77c23c1eb36d987c8356e79bdf255881e06f86ce", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fdebug_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,31 +43,32 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_valid() const\n+assert_valid(const char* __file, int __line) const\n {\n-  _GLIBCXX_DEBUG_ASSERT(m_p_root == 0 || m_p_root->m_p_prev_or_parent == 0);\n+  PB_DS_DEBUG_VERIFY(m_p_root == 0 || m_p_root->m_p_prev_or_parent == 0);\n \n   if (m_p_root != 0)\n-    assert_node_consistent(m_p_root, Single_Link_Roots);\n-  assert_size();\n-  assert_iterators();\n+    assert_node_consistent(m_p_root, Single_Link_Roots, __file, __line);\n+  assert_size(__file, __line);\n+  assert_iterators(__file, __line);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_node_consistent(const_node_pointer p_nd, bool single_link) const\n+assert_node_consistent(const_node_pointer p_nd, bool single_link,\n+\t\t       const char* __file, int __line) const\n {\n   if (p_nd == 0)\n     return;\n \n-  assert_node_consistent(p_nd->m_p_l_child, false);\n-  assert_node_consistent(p_nd->m_p_next_sibling, single_link);\n+  assert_node_consistent(p_nd->m_p_l_child, false, __file, __line);\n+  assert_node_consistent(p_nd->m_p_next_sibling, single_link, __file, __line);\n \n   if (single_link)\n-    _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_prev_or_parent == 0);\n+    PB_DS_DEBUG_VERIFY(p_nd->m_p_prev_or_parent == 0);\n   else if (p_nd->m_p_next_sibling != 0)\n-    _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_next_sibling->m_p_prev_or_parent == p_nd);\n+    PB_DS_DEBUG_VERIFY(p_nd->m_p_next_sibling->m_p_prev_or_parent == p_nd);\n \n   if (p_nd->m_p_l_child == 0)\n     return;\n@@ -76,31 +77,26 @@ assert_node_consistent(const_node_pointer p_nd, bool single_link) const\n   while (p_child != 0)\n     {\n       const_node_pointer p_next_child = p_child->m_p_next_sibling;\n-      _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(p_nd->m_value, p_child->m_value));\n+      PB_DS_DEBUG_VERIFY(!Cmp_Fn::operator()(p_nd->m_value, p_child->m_value));\n       p_child = p_next_child;\n     }\n-  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_l_child->m_p_prev_or_parent == p_nd);\n+  PB_DS_DEBUG_VERIFY(p_nd->m_p_l_child->m_p_prev_or_parent == p_nd);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_iterators() const\n+assert_iterators(const char* __file, int __line) const\n {\n-  const size_type calc_size = std::distance(begin(), end());\n-  if (calc_size == size())\n-    return;\n-  _GLIBCXX_DEBUG_ASSERT(0);\n+  PB_DS_DEBUG_VERIFY(std::distance(begin(), end()) == size());\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_size() const\n+assert_size(const char* __file, int __line) const\n {\n-  if (size_from_node(m_p_root) == m_size)\n-    return;\n-  _GLIBCXX_DEBUG_ASSERT(0);\n+  PB_DS_DEBUG_VERIFY(size_from_node(m_p_root) == m_size);\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "056cc38fc94216bb322959dad8cded1ed92deb9b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Ferase_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -78,7 +78,7 @@ void\n PB_DS_CLASS_C_DEC::\n to_linked_list()\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   node_pointer p_cur = m_p_root;\n   while (p_cur != 0)\n     if (p_cur->m_p_l_child != 0)"}, {"sha": "b433f359209a0ca857fbf781109a5dde7172c459", "filename": "libstdc++-v3/include/ext/pb_ds/detail/left_child_next_sibling_heap_/left_child_next_sibling_heap_.hpp", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fleft_child_next_sibling_heap_%2Fleft_child_next_sibling_heap_.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -273,10 +273,11 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n \n       void\n-      assert_node_consistent(const_node_pointer p_nd, bool single_link) const;\n+      assert_node_consistent(const_node_pointer p_nd, bool single_link,\n+\t\t\t     const char* file, int line) const;\n \n       static size_type\n       size_under_node(const_node_pointer p_nd);\n@@ -298,10 +299,10 @@ namespace __gnu_pbds\n     private:\n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_iterators() const;\n+      assert_iterators(const char* file, int line) const;\n \n       void\n-      assert_size() const;\n+      assert_size(const char* file, int line) const;\n \n       static size_type\n       size_from_node(const_node_pointer p_nd);\n@@ -331,6 +332,15 @@ namespace __gnu_pbds\n       static no_throw_copies_t s_no_throw_copies_ind;\n     };\n \n+#define PB_DS_ASSERT_VALID(X) \\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/constructors_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/iterators_fn_imps.hpp>\n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/debug_fn_imps.hpp>\n@@ -340,6 +350,8 @@ namespace __gnu_pbds\n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/info_fn_imps.hpp>\n #include <ext/pb_ds/detail/left_child_next_sibling_heap_/policy_access_fn_imps.hpp>\n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_ASSERT_VALID\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_CLASS_T_DEC\n "}, {"sha": "17ddaaf3e691dd92492882495cf31115baef8500", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/constructor_destructor_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fconstructor_destructor_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -69,23 +69,20 @@ copy_from_range(It first_it, It last_it)\n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME() : m_p_l(0)\n-{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n template<typename It>\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(It first_it, It last_it) : m_p_l(0)\n {\n   copy_from_range(first_it, last_it);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(););\n+  PB_DS_ASSERT_VALID((*this));\n }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) : \n-#ifdef _GLIBCXX_DEBUG\n-  debug_base(),\n-#endif\n m_p_l(0)\n {\n   __try\n@@ -104,20 +101,20 @@ m_p_l(0)\n       deallocate_all();\n       __throw_exception_again;\n     }\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n   _GLIBCXX_DEBUG_ONLY(debug_base::swap(other);)\n   std::swap(m_p_l, other.m_p_l);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "98391802945add4bfaf3b4d8ea54f2990eb6cb6c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/debug_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Fdebug_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,15 +43,15 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_valid() const\n+assert_valid(const char* __file, int __line) const\n {\n   size_type calc_size = 0;\n   for (const_iterator it = begin(); it != end(); ++it)\n     {\n-      debug_base::check_key_exists(PB_DS_V2F(*it));\n+      debug_base::check_key_exists(PB_DS_V2F(*it), __file, __line);\n       ++calc_size;\n     }\n-  debug_base::check_size(calc_size);\n+  debug_base::check_size(calc_size, __file, __line);\n }\n \n #endif "}, {"sha": "dd60ea6cdce05f866ac93bf3569b3f6978a07f2d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/erase_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ferase_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,7 +43,7 @@ inline bool\n PB_DS_CLASS_C_DEC::\n erase(const_key_reference r_key)\n {\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   if (m_p_l == 0)\n     return false;\n \n@@ -81,7 +81,7 @@ inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   size_type num_ersd = 0;\n   while (m_p_l != 0 && pred(m_p_l->m_value))\n     {\n@@ -106,7 +106,7 @@ erase_if(Pred pred)\n \tp_l = p_l->m_p_next;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return num_ersd;\n }\n \n@@ -116,7 +116,6 @@ PB_DS_CLASS_C_DEC::\n erase_next(entry_pointer p_l)\n {\n   _GLIBCXX_DEBUG_ASSERT(p_l != 0);\n-  _GLIBCXX_DEBUG_ASSERT(p_l != m_p_l);\n   _GLIBCXX_DEBUG_ASSERT(p_l->m_p_next != 0);\n   entry_pointer p_next_l = p_l->m_p_next->m_p_next;\n   actual_erase_entry(p_l->m_p_next);"}, {"sha": "9164b92255e1acd1f0d5ebab59d907df45f63863", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/find_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Ffind_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -48,7 +48,7 @@ find_imp(const_key_reference r_key) const\n   if (s_eq_fn(r_key, PB_DS_V2F(m_p_l->m_value)))\n     {\n       apply_update(m_p_l, s_metadata_type_indicator);\n-      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key);)\n+      PB_DS_CHECK_KEY_EXISTS(r_key)\n       return m_p_l;\n     }\n \n@@ -71,7 +71,7 @@ find_imp(const_key_reference r_key) const\n \tp_l = p_next;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n+  PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n   return 0;\n }\n "}, {"sha": "2677683f8dfde933a6d7a268e94902c46aa34d4f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/insert_fn_imps.hpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Finsert_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -45,21 +45,21 @@ inline std::pair<\n PB_DS_CLASS_C_DEC::\n insert(const_reference r_val)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   entry_pointer p_l = find_imp(PB_DS_V2F(r_val));\n \n   if (p_l != 0)\n     {\n-      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(PB_DS_V2F(r_val));)\n+      PB_DS_CHECK_KEY_EXISTS(PB_DS_V2F(r_val))\n       return std::make_pair(point_iterator(&p_l->m_value), false);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(PB_DS_V2F(r_val));)\n+  PB_DS_CHECK_KEY_DOES_NOT_EXIST(PB_DS_V2F(r_val))\n \n   p_l = allocate_new_entry(r_val, traits_base::m_no_throw_copies_indicator);\n   p_l->m_p_next = m_p_l;\n   m_p_l = p_l;\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return std::make_pair(point_iterator(&p_l->m_value), true);\n }\n "}, {"sha": "2e2f6a20d51cb0eabbec2801536726aa27d4fa36", "filename": "libstdc++-v3/include/ext/pb_ds/detail/list_update_map_/lu_map_.hpp", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Flist_update_map_%2Flu_map_.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -217,7 +217,7 @@ namespace __gnu_pbds\n       operator[](const_key_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \treturn insert(std::make_pair(r_key, mapped_type())).first->second;\n #else \n \tinsert(r_key);\n@@ -231,15 +231,15 @@ namespace __gnu_pbds\n       inline point_iterator\n       find(const_key_reference r_key)\n       {\n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \tentry_pointer p_e = find_imp(r_key);\n \treturn point_iterator(p_e == 0 ? 0: &p_e->m_value);\n       }\n \n       inline const_point_iterator\n       find(const_key_reference r_key) const\n       {\n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \tentry_pointer p_e = find_imp(r_key);\n \treturn const_point_iterator(p_e == 0 ? 0: &p_e->m_value);\n       }\n@@ -268,7 +268,7 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n #endif \n \n #ifdef PB_DS_LU_MAP_TRACE_\n@@ -337,6 +337,22 @@ namespace __gnu_pbds\n       mutable entry_pointer m_p_l;\n     };\n \n+#define PB_DS_ASSERT_VALID(X)\t\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_CHECK_KEY_EXISTS(_Key)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(_Key, __FILE__, __LINE__);)\n+\n+#define PB_DS_CHECK_KEY_DOES_NOT_EXIST(_Key)\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(_Key,\t\\\n+\t\t\t\t\t\t\t   __FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n #include <ext/pb_ds/detail/list_update_map_/constructor_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/list_update_map_/info_fn_imps.hpp>\n #include <ext/pb_ds/detail/list_update_map_/debug_fn_imps.hpp>\n@@ -346,6 +362,10 @@ namespace __gnu_pbds\n #include <ext/pb_ds/detail/list_update_map_/insert_fn_imps.hpp>\n #include <ext/pb_ds/detail/list_update_map_/trace_fn_imps.hpp>\n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_CHECK_KEY_DOES_NOT_EXIST\n+#undef PB_DS_CHECK_KEY_EXISTS\n+#undef PB_DS_ASSERT_VALID\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n #undef  PB_DS_TYPES_TRAITS_C_DEC"}, {"sha": "1c3b9dd6e47a187181232c127058d00c371d17af", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fconstructors_destructor_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -53,7 +53,7 @@ PB_DS_OV_TREE_CLASS_NAME() :\n   m_a_metadata(0),\n   m_end_it(0),\n   m_size(0)\n-{ _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -63,7 +63,7 @@ PB_DS_OV_TREE_CLASS_NAME(const Cmp_Fn& r_cmp_fn) :\n   m_a_metadata(0),\n   m_end_it(0),\n   m_size(0)\n-{ _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -74,14 +74,11 @@ PB_DS_OV_TREE_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_updat\n   m_a_metadata(0),\n   m_end_it(0),\n   m_size(0)\n-{ _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n PB_DS_OV_TREE_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n-#ifdef _GLIBCXX_DEBUG\n-  debug_base(other),\n-#endif \n #ifdef PB_DS_TREE_TRACE\n   PB_DS_TREE_TRACE_BASE_C_DEC(other),\n #endif \n@@ -93,7 +90,7 @@ PB_DS_OV_TREE_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n   m_size(0)\n {\n   copy_from_ordered_range(other.begin(), other.end());\n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -123,6 +120,7 @@ copy_from_range(It first_it, It last_it)\n \n   map_type m(first_it, last_it);\n   copy_from_ordered_range(m.begin(), m.end());\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -157,14 +155,11 @@ copy_from_ordered_range(It first_it, It last_it)\n   update(PB_DS_node_begin_imp(), (node_update* )this);\n \n #ifdef _GLIBCXX_DEBUG\n-  const_iterator dbg_it = m_a_values;\n-  while (dbg_it != m_end_it)\n+  for (const_iterator dbg_it = m_a_values; dbg_it != m_end_it; ++dbg_it)\n     {\n       debug_base::insert_new(PB_DS_V2F(*dbg_it));\n-      dbg_it++;\n     }\n-  PB_DS_CLASS_C_DEC::assert_valid();\n-#endif \n+#endif\n }\n \n PB_DS_CLASS_T_DEC\n@@ -210,25 +205,24 @@ copy_from_ordered_range(It first_it, It last_it, It other_first_it,\n   update(PB_DS_node_begin_imp(), (node_update* )this);\n \n #ifdef _GLIBCXX_DEBUG\n-  const_iterator dbg_it = m_a_values;\n-  while (dbg_it != m_end_it)\n+  for (const_iterator dbg_it = m_a_values; dbg_it != m_end_it; ++dbg_it)\n     {\n       debug_base::insert_new(PB_DS_V2F(*dbg_it));\n-      dbg_it++;\n     }\n-  PB_DS_CLASS_C_DEC::assert_valid();\n-#endif \n+#endif\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n   value_swap(other);\n   std::swap((Cmp_Fn& )(*this), (Cmp_Fn& )other);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID(other)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -247,9 +241,9 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n ~PB_DS_OV_TREE_CLASS_NAME()\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  //PB_DS_ASSERT_VALID((*this))\n   cond_dtor<size_type> cd(m_a_values, m_end_it, m_size);\n-  reallocate_metadata((node_update* )this, 0);\n+  reallocate_metadata((node_update*)this, 0);\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "1ba96d8edbba1ae40dff87e2f0218d5ef7cc521a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fdebug_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -43,40 +43,37 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_valid() const\n+assert_valid(const char* __file, int __line) const\n {\n-  std::cout << \"av1\" << std::endl;\n   if (m_a_values == 0 || m_end_it == 0 || m_size == 0)\n-    _GLIBCXX_DEBUG_ASSERT(m_a_values == 0 &&  m_end_it == 0 && m_size == 0);\n+    PB_DS_DEBUG_VERIFY(m_a_values == 0 &&  m_end_it == 0 && m_size == 0);\n \n-  std::cout << \"av2\" << std::endl;\n-  assert_iterators();\n-  std::cout << \"av3\" << std::endl;\n+  assert_iterators(__file, __line);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_iterators() const\n+assert_iterators(const char* __file, int __line) const\n {\n-  debug_base::check_size(m_size);\n+  debug_base::check_size(m_size, __file, __line);\n   size_type iterated_num = 0;\n   const_iterator prev_it = end();\n-  _GLIBCXX_DEBUG_ASSERT(m_end_it == m_a_values + m_size);\n+  PB_DS_DEBUG_VERIFY(m_end_it == m_a_values + m_size);\n   for (const_iterator it = begin(); it != end(); ++it)\n     {\n       ++iterated_num;\n-      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(PB_DS_V2F(*it));)\n-      _GLIBCXX_DEBUG_ASSERT(lower_bound(PB_DS_V2F(*it)) == it);\n+      debug_base::check_key_exists(PB_DS_V2F(*it), __file, __line);\n+      PB_DS_DEBUG_VERIFY(lower_bound(PB_DS_V2F(*it)) == it);\n       const_iterator upper_bound_it = upper_bound(PB_DS_V2F(*it));\n       --upper_bound_it;\n-      _GLIBCXX_DEBUG_ASSERT(upper_bound_it == it);\n+      PB_DS_DEBUG_VERIFY(upper_bound_it == it);\n       if (prev_it != end())\n-\t_GLIBCXX_DEBUG_ASSERT(Cmp_Fn::operator()(PB_DS_V2F(*prev_it),\n-\t\t\t\t\t\t PB_DS_V2F(*it)));\n+\tPB_DS_DEBUG_VERIFY(Cmp_Fn::operator()(PB_DS_V2F(*prev_it),\n+\t\t\t\t\t      PB_DS_V2F(*it)));\n       prev_it = it;\n     }\n-  _GLIBCXX_DEBUG_ASSERT(iterated_num == m_size);\n+  PB_DS_DEBUG_VERIFY(iterated_num == m_size);\n }\n \n #endif "}, {"sha": "a9bfab64e12efbb7d39abc87e313e639c533447f", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/erase_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Ferase_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,10 +43,9 @@ void\n PB_DS_CLASS_C_DEC::\n clear()\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   if (m_size == 0)\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n       return;\n     }\n   else\n@@ -59,7 +58,7 @@ clear()\n   m_a_values = 0;\n   m_size = 0;\n   m_end_it = m_a_values;\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -68,16 +67,15 @@ inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n #ifdef PB_DS_REGRESSION\n     typename Allocator::group_adjustor adjust(m_size);\n #endif \n \n   size_type new_size = 0;\n   size_type num_val_ersd = 0;\n-  iterator source_it = m_a_values;\n-  for (source_it = begin(); source_it != m_end_it; ++source_it)\n+  for (iterator source_it = begin(); source_it != m_end_it; ++source_it)\n     if (!pred(*source_it))\n       ++new_size;\n     else\n@@ -93,7 +91,7 @@ erase_if(Pred pred)\n   iterator target_it = a_new_values;\n   cond_dtor<size_type> cd(a_new_values, target_it, new_size);\n   _GLIBCXX_DEBUG_ONLY(debug_base::clear());\n-  for (source_it = begin(); source_it != m_end_it; ++source_it)\n+  for (iterator source_it = begin(); source_it != m_end_it; ++source_it)\n     {\n       if (!pred(*source_it))\n         {\n@@ -116,7 +114,7 @@ erase_if(Pred pred)\n   m_size = new_size;\n   m_end_it = target_it;\n   update(node_begin(), (node_update* )this);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return num_val_ersd;\n }\n \n@@ -126,11 +124,11 @@ It\n PB_DS_CLASS_C_DEC::\n erase_imp(It it)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   if (it == end())\n     return end();\n \n-  _GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::check_key_exists(PB_DS_V2F(*it));)\n+  PB_DS_CHECK_KEY_EXISTS(PB_DS_V2F(*it))\n \n #ifdef PB_DS_REGRESSION\n     typename Allocator::group_adjustor adjust(m_size);\n@@ -175,7 +173,7 @@ erase_imp(It it)\n   --m_size;\n   m_end_it = m_a_values + m_size;\n   update(node_begin(), (node_update* )this);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return It(ret_it);\n }\n "}, {"sha": "7eeb85b7c197524ec33742662667f02e95cf137a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/info_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finfo_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finfo_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Finfo_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,7 +43,7 @@ inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n size() const\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return m_size;\n }\n "}, {"sha": "d6ba00b88565eb75c201a85e34dea89fe3b90c34", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/ov_tree_map_.hpp", "status": "modified", "additions": 39, "deletions": 22, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fov_tree_map_.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -102,10 +102,20 @@ namespace __gnu_pbds\n \n #ifdef PB_DS_TREE_TRACE\n #define PB_DS_TREE_TRACE_BASE_C_DEC \\\n-    tree_trace_base<typename Node_And_It_Traits::const_node_iterator, \\\n-\t\t    typename Node_And_It_Traits::node_iterator, \\\n+    tree_trace_base<typename Node_And_It_Traits::const_node_iterator,\t\\\n+\t\t    typename Node_And_It_Traits::node_iterator,\t\t\\\n \t\t    Cmp_Fn, false, Allocator>\n-#endif \n+#endif\n+\n+#define PB_DS_ASSERT_VALID(X)\t\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_CHECK_KEY_EXISTS(_Key)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(_Key, __FILE__, __LINE__);)\n+\n+#define PB_DS_CHECK_KEY_DOES_NOT_EXIST(_Key)\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(_Key,\t\\\n+\t\t\t\t\t\t\t   __FILE__, __LINE__);)\n \n     // Ordered-vector tree associative-container.\n     template<typename Key, typename Mapped, class Cmp_Fn,\n@@ -234,16 +244,15 @@ namespace __gnu_pbds\n       operator[](const_key_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\tPB_DS_ASSERT_VALID((*this))\n \tpoint_iterator it = lower_bound(r_key);\n \tif (it != end() && !Cmp_Fn::operator()(r_key, PB_DS_V2F(*it)))\n \t  {\n-\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key));\n-\t    _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t    PB_DS_CHECK_KEY_EXISTS(r_key)\n+\t    PB_DS_ASSERT_VALID((*this))\n \t     return it->second;\n \t  }\n \n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n \treturn (insert_new_val(it, std::make_pair(r_key, mapped_type()))->second);\n #else \n \tinsert(r_key);\n@@ -254,18 +263,17 @@ namespace __gnu_pbds\n       inline std::pair<point_iterator, bool>\n       insert(const_reference r_value)\n       {\n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\tPB_DS_ASSERT_VALID((*this))\n \tconst_key_reference r_key = PB_DS_V2F(r_value);\n \tpoint_iterator it = lower_bound(r_key);\n \n \tif (it != end()&&  !Cmp_Fn::operator()(r_key, PB_DS_V2F(*it)))\n \t  {\n-\t    _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key));\n+\t    PB_DS_ASSERT_VALID((*this))\n+\t    PB_DS_CHECK_KEY_EXISTS(r_key)\n \t    return std::make_pair(it, false);\n \t  }\n \n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n \treturn std::make_pair(insert_new_val(it, r_value), true);\n       }\n \n@@ -295,11 +303,11 @@ namespace __gnu_pbds\n \titerator pot_it = lower_bound(r_key);\n \tif (pot_it != end()&&  !Cmp_Fn::operator()(r_key, PB_DS_V2F(*pot_it)))\n \t  {\n-\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key));\n+\t    PB_DS_CHECK_KEY_EXISTS(r_key)\n \t    return ++pot_it;\n \t  }\n \n-\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key));\n+\tPB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n \treturn pot_it;\n       }\n \n@@ -310,15 +318,15 @@ namespace __gnu_pbds\n       inline point_iterator\n       find(const_key_reference r_key)\n       {\n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\tPB_DS_ASSERT_VALID((*this))\n \titerator pot_it = lower_bound(r_key);\n \tif (pot_it != end() && !Cmp_Fn::operator()(r_key, PB_DS_V2F(*pot_it)))\n \t  {\n-\t    _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key));\n+\t    PB_DS_CHECK_KEY_EXISTS(r_key)\n \t    return pot_it;\n \t  }\n \n-\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key));\n+\tPB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n \treturn end();\n       }\n \n@@ -412,12 +420,11 @@ namespace __gnu_pbds\n       inline iterator\n       insert_new_val(iterator it, const_reference r_value)\n       {\n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n #ifdef PB_DS_REGRESSION\n \t  typename Allocator::group_adjustor adjust(m_size);\n #endif \n \n-\t_GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(PB_DS_V2F(r_value)));\n+\tPB_DS_CHECK_KEY_DOES_NOT_EXIST(PB_DS_V2F(r_value))\n \n \tvalue_vector a_values = s_value_alloc.allocate(m_size + 1);\n \n@@ -457,16 +464,16 @@ namespace __gnu_pbds\n \tm_end_it = m_a_values + m_size;\n \t_GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(r_value)));\n \tupdate(node_begin(), (node_update* )this);\n-\t_GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+\tPB_DS_ASSERT_VALID((*this))\n \treturn ret_it;\n       }\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n \n       void\n-      assert_iterators() const;\n+      assert_iterators(const char* file, int line) const;\n #endif \n \n       template<typename It>\n@@ -495,6 +502,12 @@ namespace __gnu_pbds\n       size_type m_size;\n     };\n \n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n #include <ext/pb_ds/detail/ov_tree_map_/constructors_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/ov_tree_map_/iterators_fn_imps.hpp>\n #include <ext/pb_ds/detail/ov_tree_map_/debug_fn_imps.hpp>\n@@ -504,6 +517,10 @@ namespace __gnu_pbds\n #include <ext/pb_ds/detail/ov_tree_map_/split_join_fn_imps.hpp>\n #include <ext/pb_ds/detail/bin_search_tree_/policy_access_fn_imps.hpp>\n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_CHECK_KEY_DOES_NOT_EXIST\n+#undef PB_DS_CHECK_KEY_EXISTS\n+#undef PB_DS_ASSERT_VALID\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_OV_TREE_CLASS_NAME"}, {"sha": "567a52e0218585249995c94aaffdd65ddea92f8d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/ov_tree_map_/split_join_fn_imps.hpp", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fov_tree_map_%2Fsplit_join_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,37 +43,33 @@ void\n PB_DS_CLASS_C_DEC::\n split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n \n   if (m_size == 0)\n     {\n       other.clear();\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n       return;\n     }\n \n   if (Cmp_Fn::operator()(r_key, PB_DS_V2F(*begin())))\n     {\n       value_swap(other);\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n       return;\n     }\n \n   if (!Cmp_Fn::operator()(r_key, PB_DS_V2F(*(end() - 1))))\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n       return;\n     }\n \n   if (m_size == 1)\n     {\n       value_swap(other);\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n       return;\n     }\n \n@@ -90,23 +86,25 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n   update(node_begin(), (node_update* )this);\n   other.value_swap(new_other);\n   value_swap(new_this);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n   if (other.m_size == 0)\n     return;\n \n   if (m_size == 0)\n     {\n       value_swap(other);\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n       return;\n     }\n \n@@ -129,9 +127,9 @@ join(PB_DS_CLASS_C_DEC& other)\n \t\t\t\t     begin(), end());\n \n   // No exceptions from this point.\n-  _GLIBCXX_DEBUG_ONLY(debug_base::join(other);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::join(other, false);)\n   value_swap(new_this);\n   other.clear();\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n }"}, {"sha": "6a70ea47601bd0a078dc1eafa5d3b59607c48577", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -47,43 +47,43 @@ copy_from_range(It first_it, It last_it)\n   while (first_it != last_it)\n     push(*(first_it++));\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n pairing_heap_()\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n pairing_heap_(const Cmp_Fn& r_cmp_fn) :\n   PB_DS_BASE_C_DEC(r_cmp_fn)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n pairing_heap_(const PB_DS_CLASS_C_DEC& other) :\n   PB_DS_BASE_C_DEC(other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+}\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n-    PB_DS_BASE_C_DEC::swap(other);\n+  PB_DS_BASE_C_DEC::swap(other);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::"}, {"sha": "7212db2c539ca73f2795bc649b01a0b8fa9ac971", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fdebug_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,11 +43,11 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_valid() const\n+assert_valid(const char* __file, int __line) const\n {\n-  _GLIBCXX_DEBUG_ASSERT(base_type::m_p_root == 0 \n+  PB_DS_DEBUG_VERIFY(base_type::m_p_root == 0 \n \t\t        || base_type::m_p_root->m_p_next_sibling == 0);\n-  base_type::assert_valid();\n+  base_type::assert_valid(__file, __line);\n }\n \n #endif "}, {"sha": "be3a41c782748b5ef2833ed01715d1e77ced1155", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ferase_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,51 +43,48 @@ void\n PB_DS_CLASS_C_DEC::\n pop()\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n   node_pointer p_new_root = join_node_children(base_type::m_p_root);\n-  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_new_root, false);)\n+  PB_DS_ASSERT_NODE_CONSISTENT(p_new_root, false)\n   if (p_new_root != 0)\n     p_new_root->m_p_prev_or_parent = 0;\n \n   base_type::actual_erase_node(base_type::m_p_root);\n   base_type::m_p_root = p_new_root;\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n erase(point_iterator it)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n   remove_node(it.m_p_nd);\n   base_type::actual_erase_node(it.m_p_nd);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n remove_node(node_pointer p_nd)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n   node_pointer p_new_child = join_node_children(p_nd);\n \n-#ifdef _GLIBCXX_DEBUG\n-  if (p_new_child != 0)\n-    base_type::assert_node_consistent(p_new_child, false);\n-#endif \n+  PB_DS_ASSERT_NODE_CONSISTENT(p_new_child, false)\n \n   if (p_nd == base_type::m_p_root)\n     {\n       if (p_new_child != 0)\n \tp_new_child->m_p_prev_or_parent = 0;\n       base_type::m_p_root = p_new_child;\n-      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(base_type::m_p_root, false);)\n+      PB_DS_ASSERT_NODE_CONSISTENT(base_type::m_p_root, false)\n       return;\n     }\n \n@@ -101,14 +98,14 @@ remove_node(node_pointer p_nd)\n \t  if (p_new_child->m_p_next_sibling != 0)\n \t    p_new_child->m_p_next_sibling->m_p_prev_or_parent = p_new_child;\n \t  p_nd->m_p_prev_or_parent->m_p_l_child = p_new_child;\n-\t  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd->m_p_prev_or_parent, false);)\n+\t  PB_DS_ASSERT_NODE_CONSISTENT(p_nd->m_p_prev_or_parent, false)\n           return;\n         }\n \n       p_nd->m_p_prev_or_parent->m_p_l_child = p_nd->m_p_next_sibling;\n       if (p_nd->m_p_next_sibling != 0)\n \tp_nd->m_p_next_sibling->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n-      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd->m_p_prev_or_parent, false);)\n+      PB_DS_ASSERT_NODE_CONSISTENT(p_nd->m_p_prev_or_parent, false)\n       return;\n     }\n \n@@ -119,14 +116,14 @@ remove_node(node_pointer p_nd)\n       if (p_new_child->m_p_next_sibling != 0)\n \tp_new_child->m_p_next_sibling->m_p_prev_or_parent = p_new_child;\n       p_new_child->m_p_prev_or_parent->m_p_next_sibling = p_new_child;\n-      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd->m_p_prev_or_parent, false);)\n+      PB_DS_ASSERT_NODE_CONSISTENT(p_nd->m_p_prev_or_parent, false)\n       return;\n     }\n \n   p_nd->m_p_prev_or_parent->m_p_next_sibling = p_nd->m_p_next_sibling;\n   if (p_nd->m_p_next_sibling != 0)\n     p_nd->m_p_next_sibling->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n-  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd->m_p_prev_or_parent, false);)\n+  PB_DS_ASSERT_NODE_CONSISTENT(p_nd->m_p_prev_or_parent, false)\n }\n \n PB_DS_CLASS_T_DEC\n@@ -142,7 +139,7 @@ join_node_children(node_pointer p_nd)\n     p_ret = forward_join(p_ret, p_ret->m_p_next_sibling);\n   while (p_ret->m_p_prev_or_parent != p_nd)\n     p_ret = back_join(p_ret->m_p_prev_or_parent, p_ret);\n-  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_ret, false);)\n+  PB_DS_ASSERT_NODE_CONSISTENT(p_ret, false)\n   return p_ret;\n }\n \n@@ -171,7 +168,7 @@ forward_join(node_pointer p_nd, node_pointer p_next)\n \n   p_nd->m_p_next_sibling = 0;\n   base_type::make_child_of(p_next, p_nd);\n-  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd, false));\n+  PB_DS_ASSERT_NODE_CONSISTENT(p_nd, false)\n   return p_nd;\n }\n \n@@ -187,13 +184,13 @@ back_join(node_pointer p_nd, node_pointer p_next)\n     {\n       p_next->m_p_prev_or_parent = p_nd->m_p_prev_or_parent;\n       base_type::make_child_of(p_nd, p_next);\n-      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_next, false));\n+      PB_DS_ASSERT_NODE_CONSISTENT(p_next, false)\n       return p_next;\n     }\n \n   p_nd->m_p_next_sibling = 0;\n   base_type::make_child_of(p_next, p_nd);\n-  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd, false));\n+  PB_DS_ASSERT_NODE_CONSISTENT(p_nd, false)\n   return p_nd;\n }\n \n@@ -203,10 +200,10 @@ typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n     if (base_type::empty())\n       {\n-        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+        PB_DS_ASSERT_VALID((*this))\n \treturn 0;\n       }\n   base_type::to_linked_list();\n@@ -230,7 +227,7 @@ erase_if(Pred pred)\n       push_imp(p_cur);\n       p_cur = p_next;\n     }\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return ersd;\n }\n "}, {"sha": "c02373b2f3a9287d2545f17eceec3029351f5600", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/find_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Ffind_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,8 +43,8 @@ inline typename PB_DS_CLASS_C_DEC::const_reference\n PB_DS_CLASS_C_DEC::\n top() const\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n+  PB_DS_ASSERT_VALID((*this))\n+  _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n   return base_type::m_p_root->m_value;\n }"}, {"sha": "07e6b00cb83faf80abb646ac36e4d6202dccdfad", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Finsert_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,15 +43,15 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n push(const_reference r_val)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n-    node_pointer p_new_nd = base_type::get_new_node_for_insert(r_val);\n+  node_pointer p_new_nd = base_type::get_new_node_for_insert(r_val);\n \n   push_imp(p_new_nd);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n-    return point_iterator(p_new_nd);\n+  return point_iterator(p_new_nd);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -72,14 +72,14 @@ push_imp(node_pointer p_nd)\n       p_nd->m_p_next_sibling = p_nd->m_p_prev_or_parent = 0;\n \n       base_type::make_child_of(base_type::m_p_root, p_nd);\n-      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd, false));\n+      PB_DS_ASSERT_NODE_CONSISTENT(p_nd, false)\n \n       base_type::m_p_root = p_nd;\n     }\n   else\n     {\n       base_type::make_child_of(p_nd, base_type::m_p_root);\n-      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(base_type::m_p_root, false));\n+      PB_DS_ASSERT_NODE_CONSISTENT(base_type::m_p_root, false)\n     }\n }\n \n@@ -88,14 +88,14 @@ void\n PB_DS_CLASS_C_DEC::\n modify(point_iterator it, const_reference r_new_val)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n-    remove_node(it.m_p_nd);\n+  remove_node(it.m_p_nd);\n \n   it.m_p_nd->m_value = r_new_val;\n \n   push_imp(it.m_p_nd);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+}\n "}, {"sha": "6677cc0fb24d5232b411357507d64d67baac8943", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/pairing_heap_.hpp", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fpairing_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fpairing_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fpairing_heap_.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -57,26 +57,24 @@ namespace __gnu_pbds\n   {\n \n #define PB_DS_CLASS_T_DEC \\\n-    template<typename Value_Type, class Cmp_Fn, class Allocator>\n+  template<typename Value_Type, class Cmp_Fn, class Allocator>\n \n #define PB_DS_CLASS_C_DEC \\\n-    pairing_heap_<Value_Type, Cmp_Fn, Allocator>\n+  pairing_heap_<Value_Type, Cmp_Fn, Allocator>\n \n #ifdef _GLIBCXX_DEBUG\n #define PB_DS_BASE_C_DEC \\\n-    left_child_next_sibling_heap_<\t\t\t\\\n-\t\t\t\t\t\t\t\t\tValue_Type, \\\n-\t\t\t\t\t\t\t\t\tCmp_Fn,\t\\\n-\t\t\t\t\t\t\t\t\tnull_left_child_next_sibling_heap_node_metadata, \\\n-\t\t\t\t\t\t\t\t\tAllocator, \\\n-\t\t\t\t\t\t\t\t\tfalse>\n+  left_child_next_sibling_heap_<Value_Type, \\\n+\t\t\t\tCmp_Fn,\t\\\n+\t\t\t\tnull_left_child_next_sibling_heap_node_metadata, \\\n+\t\t\t\tAllocator, \\\n+\t\t\t\tfalse>\n #else \n #define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n-    left_child_next_sibling_heap_<\t\t\t\\\n-\t\t\t\t\t\t\t\t\tValue_Type, \\\n-\t\t\t\t\t\t\t\t\tCmp_Fn,\t\\\n-\t\t\t\t\t\t\t\t\tnull_left_child_next_sibling_heap_node_metadata, \\\n-\t\t\t\t\t\t\t\t\tAllocator>\n+  left_child_next_sibling_heap_<Value_Type, \\\n+\t\t\t\tCmp_Fn,\t\\\n+\t\t\t\tnull_left_child_next_sibling_heap_node_metadata, \\\n+\t\t\t\tAllocator>\n #endif \n \n     /**\n@@ -179,7 +177,7 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n #endif\n \n     private:\n@@ -198,16 +196,31 @@ namespace __gnu_pbds\n \n       void\n       remove_node(node_pointer p_nd);\n-\n     };\n \n+#define PB_DS_ASSERT_VALID(X)\t\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_ASSERT_NODE_CONSISTENT(_Node, _Bool)\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(_Node, _Bool,\t\t\\\n+\t\t\t\t\t     __FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n #include <ext/pb_ds/detail/pairing_heap_/constructors_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/pairing_heap_/debug_fn_imps.hpp>\n #include <ext/pb_ds/detail/pairing_heap_/find_fn_imps.hpp>\n #include <ext/pb_ds/detail/pairing_heap_/insert_fn_imps.hpp>\n #include <ext/pb_ds/detail/pairing_heap_/erase_fn_imps.hpp>\n #include <ext/pb_ds/detail/pairing_heap_/split_join_fn_imps.hpp>\n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_ASSERT_NODE_CONSISTENT\n+#undef PB_DS_ASSERT_VALID\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_BASE_C_DEC"}, {"sha": "e5469b9b99bae4bdb4497c60cb7f6db6df6c03fc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pairing_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpairing_heap_%2Fsplit_join_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -44,17 +44,17 @@ void\n PB_DS_CLASS_C_DEC::\n split(Pred pred, PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n \n-    other.clear();\n+  other.clear();\n \n   if (base_type::empty())\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n \n-        return;\n+      return;\n     }\n \n   base_type::to_linked_list();\n@@ -77,9 +77,9 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n       p_out = p_next;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID(other)\n \n-    node_pointer p_cur = base_type::m_p_root;\n+  node_pointer p_cur = base_type::m_p_root;\n \n   base_type::m_p_root = 0;\n \n@@ -94,47 +94,47 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n       p_cur = p_next;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n+}\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n \n-    if (other.m_p_root == 0)\n-      {\n-        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-\t  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  if (other.m_p_root == 0)\n+    {\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n \n-\t  return;\n-      }\n+      return;\n+    }\n \n   if (base_type::m_p_root == 0)\n     base_type::m_p_root = other.m_p_root;\n   else if (Cmp_Fn::operator()(base_type::m_p_root->m_value, other.m_p_root->m_value))\n     {\n       base_type::make_child_of(base_type::m_p_root, other.m_p_root);\n-      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(other.m_p_root, false));\n+      PB_DS_ASSERT_NODE_CONSISTENT(other.m_p_root, false)\n \n       base_type::m_p_root = other.m_p_root;\n     }\n   else\n     {\n       base_type::make_child_of(other.m_p_root, base_type::m_p_root);\n-      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(base_type::m_p_root, false));\n+      PB_DS_ASSERT_NODE_CONSISTENT(base_type::m_p_root, false)\n     }\n \n   base_type::m_size += other.m_size;\n \n   other.m_p_root = 0;\n   other.m_size = 0;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n+}\n "}, {"sha": "6201b1d8525a8ecb84fc1b5cb853a643fe7c76b1", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fconstructors_destructor_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010\n+// Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -58,7 +58,7 @@ PB_DS_CLASS_NAME() :\n   m_size(0)\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -69,7 +69,7 @@ PB_DS_CLASS_NAME(const e_access_traits& r_e_access_traits) :\n   m_size(0)\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -85,10 +85,10 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n {\n   initialize();\n   m_size = other.m_size;\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID(other)\n     if (other.m_p_head->m_p_parent == 0)\n       {\n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\tPB_DS_ASSERT_VALID((*this))\n \treturn;\n       }\n   __try\n@@ -104,20 +104,20 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n   m_p_head->m_p_min = leftmost_descendant(m_p_head->m_p_parent);\n   m_p_head->m_p_max = rightmost_descendant(m_p_head->m_p_parent);\n   m_p_head->m_p_parent->m_p_parent = m_p_head;\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n   value_swap(other);\n   std::swap((e_access_traits& )(*this), (e_access_traits& )other);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "1beceb568efabc582cded1acd28078d8d085c77e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/debug_fn_imps.hpp", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fdebug_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,73 +43,74 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_valid() const\n+assert_valid(const char* __file, int __line) const\n {\n   if (m_p_head->m_p_parent != 0)\n-    m_p_head->m_p_parent->assert_valid(this);\n-  assert_iterators();\n-  assert_reverse_iterators();\n+    m_p_head->m_p_parent->assert_valid(this, __file, __line);\n+  assert_iterators(__file, __line);\n+  assert_reverse_iterators(__file, __line);\n   if (m_p_head->m_p_parent == 0)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_min == m_p_head);\n-      _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_max == m_p_head);\n-      _GLIBCXX_DEBUG_ASSERT(empty());\n+      PB_DS_DEBUG_VERIFY(m_p_head->m_p_min == m_p_head);\n+      PB_DS_DEBUG_VERIFY(m_p_head->m_p_max == m_p_head);\n+      PB_DS_DEBUG_VERIFY(empty());\n       return;\n     }\n \n-  _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_min->m_type == pat_trie_leaf_node_type);\n-  _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_max->m_type == pat_trie_leaf_node_type);\n-  _GLIBCXX_DEBUG_ASSERT(!empty());\n+  PB_DS_DEBUG_VERIFY(m_p_head->m_p_min->m_type == pat_trie_leaf_node_type);\n+  PB_DS_DEBUG_VERIFY(m_p_head->m_p_max->m_type == pat_trie_leaf_node_type);\n+  PB_DS_DEBUG_VERIFY(!empty());\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_iterators() const\n+assert_iterators(const char* __file, int __line) const\n {\n   size_type calc_size = 0;\n   for (const_iterator it = begin(); it != end(); ++it)\n     {\n       ++calc_size;\n-      debug_base::check_key_exists(PB_DS_V2F(*it));\n-      _GLIBCXX_DEBUG_ASSERT(lower_bound(PB_DS_V2F(*it)) == it);\n-      _GLIBCXX_DEBUG_ASSERT(--upper_bound(PB_DS_V2F(*it)) == it);\n+      debug_base::check_key_exists(PB_DS_V2F(*it), __file, __line);\n+      PB_DS_DEBUG_VERIFY(lower_bound(PB_DS_V2F(*it)) == it);\n+      PB_DS_DEBUG_VERIFY(--upper_bound(PB_DS_V2F(*it)) == it);\n     }\n-  _GLIBCXX_DEBUG_ASSERT(calc_size == m_size);\n+  PB_DS_DEBUG_VERIFY(calc_size == m_size);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_reverse_iterators() const\n+assert_reverse_iterators(const char* __file, int __line) const\n {\n   size_type calc_size = 0;\n   for (const_reverse_iterator it = rbegin(); it != rend(); ++it)\n     {\n       ++calc_size;\n       const_node_pointer p_nd =\n \tconst_cast<PB_DS_CLASS_C_DEC* >(this)->find_imp(PB_DS_V2F(*it));\n-      _GLIBCXX_DEBUG_ASSERT(p_nd == it.m_p_nd);\n+      PB_DS_DEBUG_VERIFY(p_nd == it.m_p_nd);\n     }\n-  _GLIBCXX_DEBUG_ASSERT(calc_size == m_size);\n+  PB_DS_DEBUG_VERIFY(calc_size == m_size);\n }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n-recursive_count_leafs(const_node_pointer p_nd)\n+recursive_count_leafs(const_node_pointer p_nd,\n+\t\t      const char* __file, int __line)\n {\n   if (p_nd == 0)\n     return (0);\n   if (p_nd->m_type == pat_trie_leaf_node_type)\n     return (1);\n-  _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_internal_node_type);\n+  PB_DS_DEBUG_VERIFY(p_nd->m_type == pat_trie_internal_node_type);\n   size_type ret = 0;\n   for (typename internal_node::const_iterator it =\n \t static_cast<const_internal_node_pointer>(p_nd)->begin();\n        it != static_cast<const_internal_node_pointer>(p_nd)->end();\n        ++it)\n-    ret += recursive_count_leafs(*it);\n+    ret += recursive_count_leafs(*it, __file, __line);\n   return ret;\n }\n "}, {"sha": "cbf1b417098d47db1929414d4d94c9659db94149", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/erase_fn_imps.hpp", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ferase_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -46,20 +46,20 @@ erase(const_key_reference r_key)\n   node_pointer p_nd = find_imp(r_key);\n   if (p_nd == 0 || p_nd->m_type == pat_trie_internal_node_type)\n     {\n-      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key));\n+      PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n       return false;\n     }\n \n   _GLIBCXX_DEBUG_ASSERT(p_nd->m_type == pat_trie_leaf_node_type);\n   if (!synth_e_access_traits::equal_keys(PB_DS_V2F(reinterpret_cast<leaf_pointer>(p_nd)->value()), r_key))\n     {\n-      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key));\n+      PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n       return false;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key));\n+  PB_DS_CHECK_KEY_EXISTS(r_key)\n   erase_leaf(static_cast<leaf_pointer>(p_nd));\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return true;\n }\n \n@@ -100,7 +100,7 @@ erase_fixup(internal_node_pointer p_nd)\n       _GLIBCXX_DEBUG_ASSERT(std::distance(p_nd->begin(), p_nd->end()) > 1);\n       p_nd->update_prefixes(this);\n       apply_update(p_nd, (node_update* )this);\n-      _GLIBCXX_DEBUG_ONLY(p_nd->assert_valid(this);)\n+      PB_DS_ASSERT_NODE_VALID(p_nd)\n       if (p_nd->m_p_parent->m_type == pat_trie_head_node_type)\n         return;\n \n@@ -128,15 +128,15 @@ void\n PB_DS_CLASS_C_DEC::\n clear()\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   if (empty())\n     return;\n \n   clear_imp(m_p_head->m_p_parent);\n   m_size = 0;\n   initialize();\n   _GLIBCXX_DEBUG_ONLY(debug_base::clear();)\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -169,7 +169,7 @@ inline typename PB_DS_CLASS_C_DEC::const_iterator\n PB_DS_CLASS_C_DEC::\n erase(const_iterator it)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n \n   if (it == end())\n     return it;\n@@ -178,7 +178,7 @@ erase(const_iterator it)\n   ++ret_it;\n   _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n   erase_leaf(static_cast<leaf_pointer>(it.m_p_nd));\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n   return ret_it;\n }\n \n@@ -188,15 +188,15 @@ inline typename PB_DS_CLASS_C_DEC::iterator\n PB_DS_CLASS_C_DEC::\n erase(iterator it)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n \n   if (it == end())\n     return it;\n   iterator ret_it = it;\n   ++ret_it;\n   _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n   erase_leaf(static_cast<leaf_pointer>(it.m_p_nd));\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n   return ret_it;\n }\n #endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n@@ -206,7 +206,7 @@ inline typename PB_DS_CLASS_C_DEC::const_reverse_iterator\n PB_DS_CLASS_C_DEC::\n erase(const_reverse_iterator it)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n \n   if (it.m_p_nd == m_p_head)\n     return it;\n@@ -215,7 +215,7 @@ erase(const_reverse_iterator it)\n \n   _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n   erase_leaf(static_cast<leaf_pointer>(it.m_p_nd));\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n   return ret_it;\n }\n \n@@ -225,7 +225,7 @@ inline typename PB_DS_CLASS_C_DEC::reverse_iterator\n PB_DS_CLASS_C_DEC::\n erase(reverse_iterator it)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n \n   if (it.m_p_nd == m_p_head)\n     return it;\n@@ -234,7 +234,7 @@ erase(reverse_iterator it)\n \n   _GLIBCXX_DEBUG_ASSERT(it.m_p_nd->m_type == pat_trie_leaf_node_type);\n   erase_leaf(static_cast<leaf_pointer>(it.m_p_nd));\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n   return ret_it;\n }\n #endif // #ifdef PB_DS_DATA_TRUE_INDICATOR\n@@ -246,22 +246,22 @@ PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n   size_type num_ersd = 0;\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n   iterator it = begin();\n   while (it != end())\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-        if (pred(*it))\n-\t  {\n-            ++num_ersd;\n-            it = erase(it);\n-\t  }\n-        else\n-\t  ++it;\n+      PB_DS_ASSERT_VALID((*this))\n+      if (pred(*it))\n+\t{\n+          ++num_ersd;\n+          it = erase(it);\n+\t}\n+      else\n+\t++it;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return num_ersd;\n }\n "}, {"sha": "e2e20f186d77be2fedd24db9acc1f5c0622b047d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/find_fn_imps.hpp", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Ffind_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,22 +43,22 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   node_pointer p_nd = find_imp(r_key);\n \n   if (p_nd == 0 || p_nd->m_type != pat_trie_leaf_node_type)\n     {\n-      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n+      PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n       return end();\n     }\n \n   if (synth_e_access_traits::equal_keys(PB_DS_V2F(static_cast<leaf_pointer>(p_nd)->value()), r_key))\n     {\n-      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key));\n+      PB_DS_CHECK_KEY_EXISTS(r_key)\n       return iterator(p_nd);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n+  PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n   return end();\n }\n \n@@ -67,23 +67,23 @@ inline typename PB_DS_CLASS_C_DEC::const_point_iterator\n PB_DS_CLASS_C_DEC::\n find(const_key_reference r_key) const\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n   const_node_pointer p_nd = const_cast<PB_DS_CLASS_C_DEC* >(this)->find_imp(r_key);\n \n   if (p_nd == 0 || p_nd->m_type != pat_trie_leaf_node_type)\n     {\n-      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n+      PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n       return end();\n     }\n \n   if (synth_e_access_traits::equal_keys(PB_DS_V2F(static_cast<const_leaf_pointer>(p_nd)->value()), r_key))\n     {\n-      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(r_key));\n+      PB_DS_CHECK_KEY_EXISTS(r_key)\n       return const_iterator(const_cast<node_pointer>(p_nd));\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(r_key);)\n+  PB_DS_CHECK_KEY_DOES_NOT_EXIST(r_key)\n   return end();\n }\n "}, {"sha": "bca847db7847b24c35169762f81bce0ca25bc8f5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/head.hpp", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fhead.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fhead.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fhead.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -88,7 +88,8 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       virtual subtree_debug_info\n-      assert_valid_imp(const_e_access_traits_pointer p_traits) const;\n+      assert_valid_imp(const_e_access_traits_pointer p_traits,\n+\t\t       const char* file, int line) const;\n #endif \n \n     public:\n@@ -106,9 +107,13 @@ namespace __gnu_pbds\n     PB_DS_CLASS_T_DEC\n     typename PB_DS_CLASS_C_DEC::subtree_debug_info\n     PB_DS_CLASS_C_DEC::\n-    assert_valid_imp(const_e_access_traits_pointer /*p_traits*/) const\n+    assert_valid_imp(const_e_access_traits_pointer /*p_traits*/,\n+\t\t     const char* __file, int __line) const\n     {\n-      _GLIBCXX_DEBUG_ASSERT(false);\n+      _GLIBCXX_DEBUG_VERIFY_AT(false,\n+\t\t\t       _M_message(\"Assertion from %1;:%2;\")\n+\t\t\t       ._M_string(__FILE__)._M_integer(__LINE__),\n+\t\t\t       __file, __line);\n       return subtree_debug_info();\n     }\n #endif "}, {"sha": "9afce8b0945d69a04cb806e0c4114a5c1d5a7c69", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/insert_join_fn_imps.hpp", "status": "modified", "additions": 44, "deletions": 40, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finsert_join_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,13 +43,13 @@ void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(););\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n   split_join_branch_bag bag;\n   if (!join_prep(other, bag))\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid(););\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n       return;\n     }\n \n@@ -59,19 +59,19 @@ join(PB_DS_CLASS_C_DEC& other)\n   m_p_head->m_p_parent->m_p_parent = m_p_head;\n   m_size += other.m_size;\n   other.initialize();\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n+  PB_DS_ASSERT_VALID(other)\n   m_p_head->m_p_min = leftmost_descendant(m_p_head->m_p_parent);\n   m_p_head->m_p_max = rightmost_descendant(m_p_head->m_p_parent);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(););\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n bool\n PB_DS_CLASS_C_DEC::\n join_prep(PB_DS_CLASS_C_DEC& other, split_join_branch_bag& r_bag)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n   if (other.m_size == 0)\n     return false;\n \n@@ -81,18 +81,19 @@ join_prep(PB_DS_CLASS_C_DEC& other, split_join_branch_bag& r_bag)\n       return false;\n     }\n \n-  const bool greater = synth_e_access_traits::cmp_keys(PB_DS_V2F(static_cast<const_leaf_pointer>(\n-\t\t\t\t\t\t\t\t\t\t\t\t m_p_head->m_p_max)->value()),PB_DS_V2F(static_cast<const_leaf_pointer>(\n-\t\t\t\t\t\t\t\t\t\t\t\t other.m_p_head->m_p_min)->value()));\n+  const bool greater =\n+    synth_e_access_traits::cmp_keys(PB_DS_V2F(static_cast<const_leaf_pointer>(m_p_head->m_p_max)->value()),\n+\t\t\t\t    PB_DS_V2F(static_cast<const_leaf_pointer>(other.m_p_head->m_p_min)->value()));\n \n-  const bool lesser = synth_e_access_traits::cmp_keys(PB_DS_V2F(static_cast<const_leaf_pointer>(\n-\t\t\t\t\t\t\t\t\t\t\t\tother.m_p_head->m_p_max)->value()),PB_DS_V2F(static_cast<const_leaf_pointer>(m_p_head->m_p_min)->value()));\n+  const bool lesser =\n+    synth_e_access_traits::cmp_keys(PB_DS_V2F(static_cast<const_leaf_pointer>(other.m_p_head->m_p_max)->value()),\n+\t\t\t\t    PB_DS_V2F(static_cast<const_leaf_pointer>(m_p_head->m_p_min)->value()));\n \n   if (!greater && !lesser)\n     __throw_join_error();\n \n   rec_join_prep(m_p_head->m_p_parent, other.m_p_head->m_p_parent, r_bag);\n-  _GLIBCXX_DEBUG_ONLY(debug_base::join(other);)\n+  _GLIBCXX_DEBUG_ONLY(debug_base::join(other, false);)\n   return true;\n }\n \n@@ -249,7 +250,7 @@ rec_join(leaf_pointer p_l, leaf_pointer p_r, split_join_branch_bag& r_bag)\n   if (p_l == 0)\n     return (p_r);\n   node_pointer p_ret = insert_branch(p_l, p_r, r_bag);\n-  _GLIBCXX_DEBUG_ASSERT(recursive_count_leafs(p_ret) == 2);\n+  _GLIBCXX_DEBUG_ASSERT(PB_DS_RECURSIVE_COUNT_LEAFS(p_ret) == 2);\n   return p_ret;\n }\n \n@@ -260,13 +261,13 @@ rec_join(leaf_pointer p_l, internal_node_pointer p_r, size_type checked_ind,\n \t split_join_branch_bag& r_bag)\n {\n #ifdef _GLIBCXX_DEBUG\n-  const size_type lhs_leafs = recursive_count_leafs(p_l);\n-  const size_type rhs_leafs = recursive_count_leafs(p_r);\n+  const size_type lhs_leafs = PB_DS_RECURSIVE_COUNT_LEAFS(p_l);\n+  const size_type rhs_leafs = PB_DS_RECURSIVE_COUNT_LEAFS(p_r);\n #endif \n \n   _GLIBCXX_DEBUG_ASSERT(p_r != 0);\n   node_pointer p_ret = rec_join(p_r, p_l, checked_ind, r_bag);\n-  _GLIBCXX_DEBUG_ASSERT(recursive_count_leafs(p_ret) == lhs_leafs + rhs_leafs);\n+  _GLIBCXX_DEBUG_ASSERT(PB_DS_RECURSIVE_COUNT_LEAFS(p_ret) == lhs_leafs + rhs_leafs);\n   return p_ret;\n }\n \n@@ -279,15 +280,15 @@ rec_join(internal_node_pointer p_l, leaf_pointer p_r, size_type checked_ind, spl\n   _GLIBCXX_DEBUG_ASSERT(p_r != 0);\n \n #ifdef _GLIBCXX_DEBUG\n-  const size_type lhs_leafs = recursive_count_leafs(p_l);\n-  const size_type rhs_leafs = recursive_count_leafs(p_r);\n+  const size_type lhs_leafs = PB_DS_RECURSIVE_COUNT_LEAFS(p_l);\n+  const size_type rhs_leafs = PB_DS_RECURSIVE_COUNT_LEAFS(p_r);\n #endif \n \n   if (!p_l->should_be_mine(pref_begin(p_r), pref_end(p_r), checked_ind, this))\n     {\n       node_pointer p_ret = insert_branch(p_l, p_r, r_bag);\n-      _GLIBCXX_DEBUG_ONLY(p_ret->assert_valid(this);)\n-      _GLIBCXX_DEBUG_ASSERT(recursive_count_leafs(p_ret) ==\n+      PB_DS_ASSERT_NODE_VALID(p_ret)\n+      _GLIBCXX_DEBUG_ASSERT(PB_DS_RECURSIVE_COUNT_LEAFS(p_ret) ==\n        \t\t            lhs_leafs + rhs_leafs);\n       return p_ret;\n     }\n@@ -303,8 +304,8 @@ rec_join(internal_node_pointer p_l, leaf_pointer p_r, size_type checked_ind, spl\n \t\t\t pref_end(p_new_child), this);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(p_l->assert_valid(this));\n-  _GLIBCXX_DEBUG_ASSERT(recursive_count_leafs(p_l) == lhs_leafs + rhs_leafs);\n+  PB_DS_ASSERT_NODE_VALID(p_l)\n+  _GLIBCXX_DEBUG_ASSERT(PB_DS_RECURSIVE_COUNT_LEAFS(p_l) == lhs_leafs + rhs_leafs);\n   return p_l;\n }\n \n@@ -317,8 +318,8 @@ rec_join(internal_node_pointer p_l, internal_node_pointer p_r, split_join_branch\n   _GLIBCXX_DEBUG_ASSERT(p_r != 0);\n \n #ifdef _GLIBCXX_DEBUG\n-  const size_type lhs_leafs = recursive_count_leafs(p_l);\n-  const size_type rhs_leafs = recursive_count_leafs(p_r);\n+  const size_type lhs_leafs = PB_DS_RECURSIVE_COUNT_LEAFS(p_l);\n+  const size_type rhs_leafs = PB_DS_RECURSIVE_COUNT_LEAFS(p_r);\n #endif \n \n   if (p_l->get_e_ind() == p_r->get_e_ind() && \n@@ -336,8 +337,8 @@ rec_join(internal_node_pointer p_l, internal_node_pointer p_r, split_join_branch\n \n       p_r->~internal_node();\n       s_internal_node_allocator.deallocate(p_r, 1);\n-      _GLIBCXX_DEBUG_ONLY(p_l->assert_valid(this);)\n-      _GLIBCXX_DEBUG_ASSERT(recursive_count_leafs(p_l) == lhs_leafs + rhs_leafs);\n+      PB_DS_ASSERT_NODE_VALID(p_l)\n+      _GLIBCXX_DEBUG_ASSERT(PB_DS_RECURSIVE_COUNT_LEAFS(p_l) == lhs_leafs + rhs_leafs);\n       return p_l;\n     }\n \n@@ -348,7 +349,7 @@ rec_join(internal_node_pointer p_l, internal_node_pointer p_r, split_join_branch\n \t\t\t\t\t  p_r, 0, r_bag);\n       p_l->replace_child(p_new_child, pref_begin(p_new_child),\n \t\t\t pref_end(p_new_child), this);\n-      _GLIBCXX_DEBUG_ONLY(p_l->assert_valid(this);)\n+      PB_DS_ASSERT_NODE_VALID(p_l)\n       return p_l;\n     }\n \n@@ -361,14 +362,14 @@ rec_join(internal_node_pointer p_l, internal_node_pointer p_r, split_join_branch\n       p_r->replace_child(p_new_child, pref_begin(p_new_child), \n \t\t\t pref_end(p_new_child), this);\n \n-      _GLIBCXX_DEBUG_ONLY(p_r->assert_valid(this);)\n-      _GLIBCXX_DEBUG_ASSERT(recursive_count_leafs(p_r) == lhs_leafs + rhs_leafs);\n+      PB_DS_ASSERT_NODE_VALID(p_r)\n+      _GLIBCXX_DEBUG_ASSERT(PB_DS_RECURSIVE_COUNT_LEAFS(p_r) == lhs_leafs + rhs_leafs);\n       return p_r;\n     }\n \n   node_pointer p_ret = insert_branch(p_l, p_r, r_bag);\n-  _GLIBCXX_DEBUG_ONLY(p_ret->assert_valid(this);)\n-  _GLIBCXX_DEBUG_ASSERT(recursive_count_leafs(p_ret) == lhs_leafs + rhs_leafs);\n+  PB_DS_ASSERT_NODE_VALID(p_ret)\n+  _GLIBCXX_DEBUG_ASSERT(PB_DS_RECURSIVE_COUNT_LEAFS(p_ret) == lhs_leafs + rhs_leafs);\n   return p_ret;\n }\n \n@@ -381,12 +382,12 @@ insert(const_reference r_val)\n   if (p_lf != 0 && p_lf->m_type == pat_trie_leaf_node_type && \n       synth_e_access_traits::equal_keys(PB_DS_V2F(static_cast<leaf_pointer>(p_lf)->value()), PB_DS_V2F(r_val)))\n     {\n-      _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(PB_DS_V2F(r_val)));\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_CHECK_KEY_EXISTS(PB_DS_V2F(r_val))\n+      PB_DS_ASSERT_VALID((*this))\n       return std::make_pair(iterator(p_lf), false);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(PB_DS_V2F(r_val)));\n+  PB_DS_CHECK_KEY_DOES_NOT_EXIST(PB_DS_V2F(r_val))\n \n   leaf_pointer p_new_lf = s_leaf_allocator.allocate(1);\n   cond_dealtor cond(p_new_lf);\n@@ -402,14 +403,17 @@ insert(const_reference r_val)\n   ++m_size;\n   update_min_max_for_inserted_leaf(p_new_lf);\n   _GLIBCXX_DEBUG_ONLY(debug_base::insert_new(PB_DS_V2F(r_val));)   \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return std::make_pair(point_iterator(p_new_lf), true);\n }\n \n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n-keys_diff_ind(typename e_access_traits::const_iterator b_l, typename e_access_traits::const_iterator e_l, typename e_access_traits::const_iterator b_r, typename e_access_traits::const_iterator e_r)\n+keys_diff_ind(typename e_access_traits::const_iterator b_l,\n+\t      typename e_access_traits::const_iterator e_l,\n+\t      typename e_access_traits::const_iterator b_r,\n+\t      typename e_access_traits::const_iterator e_r)\n {\n   size_type diff_pos = 0;\n   while (b_l != e_l)\n@@ -445,7 +449,7 @@ insert_branch(node_pointer p_l, node_pointer p_r, split_join_branch_bag& r_bag)\n   p_new_nd->add_child(p_r, right_b_it, right_e_it, this);\n   p_l->m_p_parent = p_new_nd;\n   p_r->m_p_parent = p_new_nd;\n-  _GLIBCXX_DEBUG_ONLY(p_new_nd->assert_valid(this);)\n+  PB_DS_ASSERT_NODE_VALID(p_new_nd)\n   return (p_new_nd);\n }\n "}, {"sha": "9e30e65cd12505a8e98e49c46ae8237e0cc31ef3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/internal_node.hpp", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finternal_node.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finternal_node.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Finternal_node.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2009, 2010, 2011\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -94,7 +95,8 @@ namespace __gnu_pbds\n       typedef typename base_type::subtree_debug_info subtree_debug_info;\n \n       virtual subtree_debug_info\n-      assert_valid_imp(const_e_access_traits_pointer) const;\n+      assert_valid_imp(const_e_access_traits_pointer,\n+\t\t       const char* file, int line) const;\n #endif \n \n       inline size_type\n@@ -564,28 +566,37 @@ namespace __gnu_pbds\n     }\n \n #ifdef _GLIBCXX_DEBUG\n+# define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n     PB_DS_CLASS_T_DEC\n     typename PB_DS_CLASS_C_DEC::subtree_debug_info\n     PB_DS_CLASS_C_DEC::\n-    assert_valid_imp(const_e_access_traits_pointer p_traits) const\n+    assert_valid_imp(const_e_access_traits_pointer p_traits,\n+\t\t     const char* __file, int __line) const\n     {\n-      _GLIBCXX_DEBUG_ASSERT(base_type::m_type == pat_trie_internal_node_type);\n-      _GLIBCXX_DEBUG_ASSERT(static_cast<size_type>(std::distance(pref_b_it(), pref_e_it())) == m_e_ind);\n-      _GLIBCXX_DEBUG_ASSERT(std::distance(begin(), end()) >= 2);\n+      PB_DS_DEBUG_VERIFY(base_type::m_type == pat_trie_internal_node_type);\n+      PB_DS_DEBUG_VERIFY(static_cast<size_type>(std::distance(pref_b_it(), pref_e_it())) == m_e_ind);\n+      PB_DS_DEBUG_VERIFY(std::distance(begin(), end()) >= 2);\n \n       for (typename pat_trie_internal_node::const_iterator it = begin();\n \t   it != end(); ++it)\n \t{\n \t  const_node_pointer p_nd =* it;\n-\t  _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_parent == this);\n-\t  subtree_debug_info child_ret = p_nd->assert_valid_imp(p_traits);\n+\t  PB_DS_DEBUG_VERIFY(p_nd->m_p_parent == this);\n+\t  subtree_debug_info child_ret =\n+\t    p_nd->assert_valid_imp(p_traits, __file, __line);\n \n-\t  _GLIBCXX_DEBUG_ASSERT(static_cast<size_type>(std::distance(child_ret.first, child_ret.second)) >= m_e_ind);\n-\t  _GLIBCXX_DEBUG_ASSERT(should_be_mine(child_ret.first, child_ret.second, 0, p_traits));\n-\t  _GLIBCXX_DEBUG_ASSERT(get_pref_pos(child_ret.first, child_ret.second, p_traits) == static_cast<size_type>(it.m_p_p_cur - m_a_p_children));\n+\t  PB_DS_DEBUG_VERIFY(static_cast<size_type>(std::distance(child_ret.first, child_ret.second)) >= m_e_ind);\n+\t  PB_DS_DEBUG_VERIFY(should_be_mine(child_ret.first, child_ret.second, 0, p_traits));\n+\t  PB_DS_DEBUG_VERIFY(get_pref_pos(child_ret.first, child_ret.second, p_traits) == static_cast<size_type>(it.m_p_p_cur - m_a_p_children));\n \t}\n       return std::make_pair(pref_b_it(), pref_e_it());\n     }\n+# undef PB_DS_DEBUG_VERIFY\n #endif \n \n #undef PB_DS_CLASS_T_DEC"}, {"sha": "ba320434ca30fa9629aa58620270f714b52bae07", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/leaf.hpp", "status": "modified", "additions": 30, "deletions": 25, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fleaf.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fleaf.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fleaf.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -49,31 +49,27 @@ namespace __gnu_pbds\n   {\n \n #define PB_DS_CLASS_T_DEC\t\t\t\t\t\t\\\n-    template<\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\tclass Type_Traits,\t\\\n-\t\t\t\t\t\tclass E_Access_Traits,\t\\\n-\t\t\t\t\t\tclass Metadata,\t\t\\\n-\t\t\t\t\t\tclass Allocator>\n+    template<class Type_Traits,\t\t\t\t\t\t\\\n+\t     class E_Access_Traits,\t\t\t\t\t\\\n+\t     class Metadata,\t\t\t\t\t\t\\\n+\t     class Allocator>\n \n #define PB_DS_CLASS_C_DEC\t\t\t\t\t\t\\\n-    pat_trie_leaf<\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\tType_Traits,\t\t\\\n-\t\t\t\t\t\tE_Access_Traits,\t\\\n-\t\t\t\t\t\tMetadata,\t\t\\\n-\t\t\t\t\t\tAllocator>\n-\n-#define PB_DS_BASE_C_DEC\t\t\t\t\t\\\n-    pat_trie_node_base<\t\t\t\t\t\t\\\n-\t\t\t\t\tType_Traits,\t\t\\\n-\t\t\t\t\tE_Access_Traits,\t\\\n-\t\t\t\t\tMetadata,\t\t\\\n-\t\t\t\t\tAllocator>\n+    pat_trie_leaf<Type_Traits,\t\t\t\t\t\t\\\n+\t\t  E_Access_Traits,\t\t\t\t\t\\\n+\t\t  Metadata,\t\t\t\t\t\t\\\n+\t\t  Allocator>\n+\n+#define PB_DS_BASE_C_DEC\t\t\t\t\t\t\\\n+    pat_trie_node_base<Type_Traits,\t\t\t\t\t\\\n+\t\t       E_Access_Traits,\t\t\t\t\t\\\n+\t\t       Metadata,\t\t\t\t\t\\\n+\t\t       Allocator>\n \n #define PB_DS_PAT_TRIE_SUBTREE_DEBUG_INFO_C_DEC\t\t\t\t\\\n-    pat_trie_subtree_debug_info<\t\t\t\t\t\\\n-\t\t\t\t\t\t\tType_Traits,\t\\\n-\t\t\t\t\t\t\tE_Access_Traits, \\\n-\t\t\t\t\t\t\tAllocator>\n+    pat_trie_subtree_debug_info<Type_Traits,\t\t\t\t\\\n+\t\t\t\tE_Access_Traits,\t\t\t\\\n+\t\t\t\tAllocator>\n \n     template<typename Type_Traits,\n \t     class E_Access_Traits,\n@@ -112,7 +108,8 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       virtual subtree_debug_info\n-      assert_valid_imp(const_e_access_traits_pointer p_traits) const;\n+      assert_valid_imp(const_e_access_traits_pointer p_traits,\n+\t\t       const char* file, int line) const;\n \n       virtual\n       ~pat_trie_leaf();\n@@ -143,12 +140,19 @@ namespace __gnu_pbds\n     { return m_value; }\n \n #ifdef _GLIBCXX_DEBUG\n+# define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n     PB_DS_CLASS_T_DEC\n     typename PB_DS_CLASS_C_DEC::subtree_debug_info\n     PB_DS_CLASS_C_DEC::\n-    assert_valid_imp(const_e_access_traits_pointer p_traits) const\n+    assert_valid_imp(const_e_access_traits_pointer p_traits,\n+\t\t     const char* __file, int __line) const\n     {\n-      _GLIBCXX_DEBUG_ASSERT(base_type::m_type == pat_trie_leaf_node_type);\n+      PB_DS_DEBUG_VERIFY(base_type::m_type == pat_trie_leaf_node_type);\n       subtree_debug_info ret;\n       const_reference r_val = value();\n       return std::make_pair(p_traits->begin(p_traits->extract_key(r_val)),\n@@ -158,6 +162,7 @@ namespace __gnu_pbds\n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     ~pat_trie_leaf() { }\n+# undef PB_DS_DEBUG_VERIFY\n #endif \n \n #undef PB_DS_CLASS_T_DEC"}, {"sha": "6e131e4074cc26f51e7d97af256ad2d4ef924d31", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/node_base.hpp", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_base.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_base.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fnode_base.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -95,10 +95,12 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid(const_e_access_traits_pointer p_traits) const;\n+      assert_valid(const_e_access_traits_pointer p_traits,\n+\t\t   const char* file, int line) const;\n \n       virtual subtree_debug_info\n-      assert_valid_imp(const_e_access_traits_pointer p_traits) const = 0;\n+      assert_valid_imp(const_e_access_traits_pointer p_traits,\n+\t\t       const char* file, int line) const = 0;\n #endif \n \n       node_pointer m_p_parent;\n@@ -114,8 +116,9 @@ namespace __gnu_pbds\n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n-    assert_valid(const_e_access_traits_pointer p_traits) const\n-    { assert_valid_imp(p_traits); }\n+    assert_valid(const_e_access_traits_pointer p_traits,\n+\t\t const char* __file, int __line) const\n+    { assert_valid_imp(p_traits, __file, __line); }\n #endif \n \n #undef PB_DS_CLASS_T_DEC"}, {"sha": "738420f13f93abcb867f4a961ee4343e830533cd", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/pat_trie_.hpp", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fpat_trie_.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,7 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2007, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007, 2009, 2010, 2011\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -393,7 +394,10 @@ namespace __gnu_pbds\n \t       split_join_branch_bag&);\n \n       size_type\n-      keys_diff_ind(typename e_access_traits::const_iterator, typename e_access_traits::const_iterator, typename e_access_traits::const_iterator, typename e_access_traits::const_iterator);\n+      keys_diff_ind(typename e_access_traits::const_iterator,\n+\t\t    typename e_access_traits::const_iterator,\n+\t\t    typename e_access_traits::const_iterator,\n+\t\t    typename e_access_traits::const_iterator);\n \n       internal_node_pointer\n       insert_branch(node_pointer, node_pointer, split_join_branch_bag&);\n@@ -445,16 +449,17 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n \n       void\n-      assert_iterators() const;\n+      assert_iterators(const char* file, int line) const;\n \n       void\n-      assert_reverse_iterators() const;\n+      assert_reverse_iterators(const char* file, int line) const;\n \n       static size_type\n-      recursive_count_leafs(const_node_pointer);\n+      recursive_count_leafs(const_node_pointer,\n+\t\t\t    const char* file, int line);\n #endif \n \n #ifdef PB_DS_PAT_TRIE_TRACE_\n@@ -490,6 +495,28 @@ namespace __gnu_pbds\n       size_type m_size;\n     };\n \n+#define PB_DS_ASSERT_VALID(X)\t\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_ASSERT_NODE_VALID(X)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X->assert_valid(this, __FILE__, __LINE__);)\n+\n+#define PB_DS_RECURSIVE_COUNT_LEAFS(X)\t\t\t\t\t\\\n+  recursive_count_leafs(X, __FILE__, __LINE__)\n+\n+#define PB_DS_CHECK_KEY_EXISTS(_Key)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_exists(_Key, __FILE__, __LINE__);)\n+\n+#define PB_DS_CHECK_KEY_DOES_NOT_EXIST(_Key)\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(debug_base::check_key_does_not_exist(_Key,\t\\\n+\t\t\t\t\t\t\t   __FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n #include <ext/pb_ds/detail/pat_trie_/constructors_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/pat_trie_/iterators_fn_imps.hpp>\n #include <ext/pb_ds/detail/pat_trie_/insert_join_fn_imps.hpp>\n@@ -502,6 +529,12 @@ namespace __gnu_pbds\n #include <ext/pb_ds/detail/pat_trie_/trace_fn_imps.hpp>\n #include <ext/pb_ds/detail/pat_trie_/update_fn_imps.hpp>\n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_CHECK_KEY_DOES_NOT_EXIST\n+#undef PB_DS_CHECK_KEY_EXISTS\n+#undef PB_DS_RECURSIVE_COUNT_LEAFS\n+#undef PB_DS_ASSERT_NODE_VALID\n+#undef PB_DS_ASSERT_VALID\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_NAME"}, {"sha": "06add93c1a9d76b4a098212c8d014a3345ab2d5d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/pat_trie_/split_fn_imps.hpp", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fpat_trie_%2Fsplit_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,15 +43,15 @@ void\n PB_DS_CLASS_C_DEC::\n split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(););\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n   split_join_branch_bag bag;\n   leaf_pointer p_split_lf = split_prep(r_key, other, bag);\n   if (p_split_lf == 0)\n     {\n       _GLIBCXX_DEBUG_ASSERT(bag.empty());\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n       return;\n     }\n \n@@ -73,8 +73,8 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n   other.m_size = std::distance(other.PB_DS_CLASS_C_DEC::begin(),\n \t\t\t       other.PB_DS_CLASS_C_DEC::end());\n   m_size -= other.m_size;\n-  _GLIBCXX_DEBUG_ONLY(assert_valid(););\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n }\n \n PB_DS_CLASS_T_DEC\n@@ -86,8 +86,8 @@ split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other, split_join_branc\n   if (m_size == 0)\n     {\n       other.clear();\n-      _GLIBCXX_DEBUG_ONLY(assert_valid(););\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n       return (0);\n     }\n \n@@ -96,16 +96,16 @@ split_prep(const_key_reference r_key, PB_DS_CLASS_C_DEC& other, split_join_branc\n     {\n       other.clear();\n       value_swap(other);\n-      _GLIBCXX_DEBUG_ONLY(assert_valid(););\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n       return (0);\n     }\n \n   if (!synth_e_access_traits::cmp_keys(r_key,\n \t\t\t\t       PB_DS_V2F(static_cast<const_leaf_pointer>(m_p_head->m_p_max)->value())))\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid(););\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid(););\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n       return (0);\n     }\n \n@@ -143,7 +143,7 @@ rec_split(node_pointer p_nd, const_e_iterator b_it, const_e_iterator e_it, PB_DS\n \n   node_pointer p_child_ret = rec_split(p_internal_nd->get_child_node(b_it, e_it, this), b_it, e_it, other, r_bag);\n \n-  _GLIBCXX_DEBUG_ONLY(p_child_ret->assert_valid(this);)\n+  PB_DS_ASSERT_NODE_VALID(p_child_ret)\n   p_internal_nd->replace_child(p_child_ret, b_it, e_it, this);\n   apply_update(p_internal_nd, (node_update* )this);\n \n@@ -184,7 +184,7 @@ rec_split(node_pointer p_nd, const_e_iterator b_it, const_e_iterator e_it, PB_DS\n   if (std::distance(p_internal_nd->begin(), p_internal_nd->end()) > 1)\n     {\n       p_internal_nd->update_prefixes(this);\n-      _GLIBCXX_DEBUG_ONLY(p_internal_nd->assert_valid(this);)\n+      PB_DS_ASSERT_NODE_VALID(p_internal_nd)\n       apply_update(p_internal_nd, (node_update* )this);\n       return (p_internal_nd);\n     }\n@@ -203,7 +203,7 @@ split_insert_branch(size_type e_ind, const_e_iterator b_it, typename internal_no\n {\n #ifdef _GLIBCXX_DEBUG\n   if (m_p_head->m_p_parent != 0)\n-    m_p_head->m_p_parent->assert_valid(this);\n+    PB_DS_ASSERT_NODE_VALID(m_p_head->m_p_parent)\n #endif \n \n   const size_type total_num_children =((m_p_head->m_p_parent == 0)? 0 : 1) + num_children;\n@@ -218,15 +218,15 @@ split_insert_branch(size_type e_ind, const_e_iterator b_it, typename internal_no\n     {\n       if (m_p_head->m_p_parent != 0)\n         {\n-\t  _GLIBCXX_DEBUG_ONLY(m_p_head->m_p_parent->assert_valid(this);)\n+\t  PB_DS_ASSERT_NODE_VALID(m_p_head->m_p_parent)\n           return;\n         }\n \n       _GLIBCXX_DEBUG_ASSERT(m_p_head->m_p_parent == 0);\n       m_p_head->m_p_parent =* child_b_it;\n       m_p_head->m_p_parent->m_p_parent = m_p_head;\n       apply_update(m_p_head->m_p_parent, (node_update* )this);\n-      _GLIBCXX_DEBUG_ONLY(m_p_head->m_p_parent->assert_valid(this);)\n+      PB_DS_ASSERT_NODE_VALID(m_p_head->m_p_parent)\n       return;\n     }\n \n@@ -236,7 +236,7 @@ split_insert_branch(size_type e_ind, const_e_iterator b_it, typename internal_no\n   size_type num_inserted = 0;\n   while (num_inserted++ < num_children)\n     {\n-      _GLIBCXX_DEBUG_ONLY((*child_b_it)->assert_valid(this);)\n+      PB_DS_ASSERT_NODE_VALID((*child_b_it))\n         p_new_root->add_child(*child_b_it, pref_begin(*child_b_it),\n \t\t\t      pref_end(*child_b_it), this);\n       ++child_b_it;\n@@ -250,5 +250,5 @@ split_insert_branch(size_type e_ind, const_e_iterator b_it, typename internal_no\n   m_p_head->m_p_parent = p_new_root;\n   p_new_root->m_p_parent = m_p_head;\n   apply_update(m_p_head->m_p_parent, (node_update* )this);\n-  _GLIBCXX_DEBUG_ONLY(m_p_head->m_p_parent->assert_valid(this);)\n+  PB_DS_ASSERT_NODE_VALID(m_p_head->m_p_parent)\n }"}, {"sha": "19adc8edaadb914c2d2965f9ba0f0fa36a133aa5", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fconstructors_destructor_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -53,7 +53,7 @@ PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME()\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -62,7 +62,7 @@ PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn) :\n   base_type(r_cmp_fn)\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -71,7 +71,7 @@ PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_update) :\n   base_type(r_cmp_fn, r_node_update)\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -80,17 +80,17 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n   base_type(other)\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   base_type::swap(other);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "fe90b0a6a3f076b61faeae6182d2a8f936cf5a7b", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/debug_fn_imps.hpp", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fdebug_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,34 +43,37 @@\n PB_DS_CLASS_T_DEC\n typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n-assert_node_consistent(const node_pointer p_nd) const\n+assert_node_consistent(const node_pointer p_nd, const char* __file,\n+\t\t\t\t\t\tint __line) const\n {\n   if (p_nd == 0)\n     return 1;\n \n-  const size_type l_height = assert_node_consistent(p_nd->m_p_left);\n-  const size_type r_height = assert_node_consistent(p_nd->m_p_right);\n+  const size_type l_height =\n+    assert_node_consistent(p_nd->m_p_left, __file, __line);\n+  const size_type r_height =\n+    assert_node_consistent(p_nd->m_p_right, __file, __line);\n   if (p_nd->m_red)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(is_effectively_black(p_nd->m_p_left));\n-      _GLIBCXX_DEBUG_ASSERT(is_effectively_black(p_nd->m_p_right));\n+      PB_DS_DEBUG_VERIFY(is_effectively_black(p_nd->m_p_left));\n+      PB_DS_DEBUG_VERIFY(is_effectively_black(p_nd->m_p_right));\n     }\n-  _GLIBCXX_DEBUG_ASSERT(l_height == r_height);\n+  PB_DS_DEBUG_VERIFY(l_height == r_height);\n   return (p_nd->m_red ? 0 : 1) + l_height;\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_valid() const\n+assert_valid(const char* __file, int __line) const\n {\n-  base_type::assert_valid();\n+  base_type::assert_valid(__file, __line);\n   const node_pointer p_head = base_type::m_p_head;\n-  _GLIBCXX_DEBUG_ASSERT(p_head->m_red);\n+  PB_DS_DEBUG_VERIFY(p_head->m_red);\n   if (p_head->m_p_parent != 0)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(!p_head->m_p_parent->m_red);\n-      assert_node_consistent(p_head->m_p_parent);\n+      PB_DS_DEBUG_VERIFY(!p_head->m_p_parent->m_red);\n+      assert_node_consistent(p_head->m_p_parent, __file, __line);\n     }\n }\n "}, {"sha": "5a335a6dd475cbdbe9b67dd60537819caabc60fc", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Ferase_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -55,14 +55,14 @@ inline typename PB_DS_CLASS_C_DEC::iterator\n PB_DS_CLASS_C_DEC::\n erase(iterator it)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n   if (it == base_type::end())\n     return it;\n \n   iterator ret_it = it;\n   ++ret_it;\n   erase_node(it.m_p_nd);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n   return ret_it;\n }\n \n@@ -71,14 +71,14 @@ inline typename PB_DS_CLASS_C_DEC::reverse_iterator\n PB_DS_CLASS_C_DEC::\n erase(reverse_iterator it)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n   if (it.m_p_nd == base_type::m_p_head)\n     return it;\n \n   reverse_iterator ret_it = it;\n   ++ret_it;\n   erase_node(it.m_p_nd);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n   return ret_it;\n }\n \n@@ -88,7 +88,7 @@ inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   size_type num_ersd = 0;\n   iterator it = base_type::begin();\n   while (it != base_type::end())\n@@ -102,7 +102,7 @@ erase_if(Pred pred)\n \t++it;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return num_ersd;\n }\n \n@@ -113,7 +113,7 @@ erase_node(node_pointer p_nd)\n {\n   remove_node(p_nd);\n   base_type::actual_erase_node(p_nd);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "55bd4ed1f0dc3638ecfb87919bf4d107eb1c1901", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/insert_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Finsert_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,16 +43,16 @@ inline std::pair<typename PB_DS_CLASS_C_DEC::point_iterator, bool>\n PB_DS_CLASS_C_DEC::\n insert(const_reference r_value)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   std::pair<point_iterator, bool> ins_pair = base_type::insert_leaf(r_value);\n   if (ins_pair.second == true)\n     {\n       ins_pair.first.m_p_nd->m_red = true;\n-      _GLIBCXX_DEBUG_ONLY(this->structure_only_assert_valid();)\n+      PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n       insert_fixup(ins_pair.first.m_p_nd);\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return ins_pair;\n }\n "}, {"sha": "92ea7d65a758b8094d629b21b24b04816b9a85c6", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/rb_tree_.hpp", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Frb_tree_.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -167,17 +167,17 @@ namespace __gnu_pbds\n       operator[](const_key_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \tstd::pair<point_iterator, bool> ins_pair =\n \tbase_type::insert_leaf(value_type(r_key, mapped_type()));\n \n \tif (ins_pair.second == true)\n \t  {\n \t    ins_pair.first.m_p_nd->m_red = true;\n-\t    _GLIBCXX_DEBUG_ONLY(this->structure_only_assert_valid();)\n+\t    _GLIBCXX_DEBUG_ONLY(this->structure_only_assert_valid(__FILE__, __LINE__);)\n \t    insert_fixup(ins_pair.first.m_p_nd);\n \t  }\n-\t_GLIBCXX_DEBUG_ONLY(assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \treturn ins_pair.first.m_p_nd->m_value.second;\n #else \n \tinsert(r_key);\n@@ -210,10 +210,11 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n \n       size_type\n-      assert_node_consistent(const node_pointer) const;\n+      assert_node_consistent(const node_pointer, const char* file,\n+\t\t\t\t\t\t int line) const;\n #endif \n \n       inline static bool\n@@ -259,13 +260,28 @@ namespace __gnu_pbds\n       split_at_node(node_pointer, PB_DS_CLASS_C_DEC&);\n     };\n \n+#define PB_DS_ASSERT_VALID(X)\t\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_STRUCT_ONLY_ASSERT_VALID(X)\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.structure_only_assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n #include <ext/pb_ds/detail/rb_tree_map_/constructors_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/rb_tree_map_/insert_fn_imps.hpp>\n #include <ext/pb_ds/detail/rb_tree_map_/erase_fn_imps.hpp>\n #include <ext/pb_ds/detail/rb_tree_map_/debug_fn_imps.hpp>\n #include <ext/pb_ds/detail/rb_tree_map_/split_join_fn_imps.hpp>\n #include <ext/pb_ds/detail/rb_tree_map_/info_fn_imps.hpp>\n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_STRUCT_ONLY_ASSERT_VALID\n+#undef PB_DS_ASSERT_VALID\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_CLASS_NAME"}, {"sha": "a0d079b142f35f8cf75c615ca4571df90e1cb57a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rb_tree_map_/split_join_fn_imps.hpp", "status": "modified", "additions": 24, "deletions": 31, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frb_tree_map_%2Fsplit_join_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,23 +43,20 @@ inline void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.base_type::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n   if (base_type::join_prep(other) == false)\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n       return;\n     }\n \n   const node_pointer p_x = other.split_min();\n   join_imp(p_x, other.m_p_head->m_p_parent);\n   base_type::join_finish(other);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(base_type::assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.base_type::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n  }\n \n PB_DS_CLASS_T_DEC\n@@ -122,10 +119,10 @@ join_imp(node_pointer p_x, node_pointer p_r)\n   p_x->m_red = true;\n \n   base_type::initialize_min_max();\n-  _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid();)\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n   base_type::update_to_top(p_x, (node_update* )this);\n   insert_fixup(p_x);\n-  _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid());\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -237,37 +234,33 @@ void\n PB_DS_CLASS_C_DEC::\n split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n-  _GLIBCXX_DEBUG_ONLY(base_type::assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n \n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n-  _GLIBCXX_DEBUG_ONLY(other.base_type::assert_valid();)\n-\n-    if (base_type::split_prep(r_key, other) == false)\n-      {\n-        _GLIBCXX_DEBUG_ONLY(assert_valid());\n-        _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n-        return;\n-      }\n+  if (base_type::split_prep(r_key, other) == false)\n+    {\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n+      return;\n+    }\n \n-  _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.base_type::structure_only_assert_valid();)\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID(other)\n   node_pointer p_nd = upper_bound(r_key).m_p_nd;\n   do\n     {\n       node_pointer p_next_nd = p_nd->m_p_parent;\n       if (Cmp_Fn::operator()(r_key, PB_DS_V2F(p_nd->m_value)))\n \tsplit_at_node(p_nd, other);\n \n-      _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid();)\n-      _GLIBCXX_DEBUG_ONLY(other.base_type::structure_only_assert_valid();)\n+      PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n+      PB_DS_STRUCT_ONLY_ASSERT_VALID(other)\n       p_nd = p_next_nd;\n     }\n   while (p_nd != base_type::m_p_head);\n \n   base_type::split_finish(other);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -307,7 +300,7 @@ split_at_node(node_pointer p_nd, PB_DS_CLASS_C_DEC& other)\n \n   base_type::initialize_min_max();\n   other.join_imp(p_nd, p_r);\n-  _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid());\n-  _GLIBCXX_DEBUG_ONLY(other.base_type::structure_only_assert_valid());\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID((*this))\n+  PB_DS_STRUCT_ONLY_ASSERT_VALID(other)\n }\n "}, {"sha": "35acb8f6bcdca3d4409dcdacba39a7702068f1a2", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -42,16 +42,16 @@ PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n rc_binomial_heap_()\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n rc_binomial_heap_(const Cmp_Fn& r_cmp_fn) :\n   PB_DS_BASE_C_DEC(r_cmp_fn)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -62,8 +62,8 @@ rc_binomial_heap_(const PB_DS_CLASS_C_DEC& other) :\n \n   base_type::find_max();\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+}\n \n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n@@ -75,14 +75,13 @@ void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n \n-    base_type::swap(other);\n+  base_type::swap(other);\n \n   m_rc.swap(other.m_rc);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    }\n-\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n+}"}, {"sha": "638810bfb44670d6bea534b8f4391820b058b868", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fdebug_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,21 +43,21 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_valid() const\n+assert_valid(const char* __file, int __line) const\n {\n-  base_type::assert_valid(false);\n+  base_type::assert_valid(false, __file, __line);\n   if (!base_type::empty())\n     {\n-      _GLIBCXX_DEBUG_ASSERT(base_type::m_p_max != 0);\n-      base_type::assert_max();\n+      PB_DS_DEBUG_VERIFY(base_type::m_p_max != 0);\n+      base_type::assert_max(__file, __line);\n     }\n \n-  m_rc.assert_valid();\n+  m_rc.assert_valid(__file, __line);\n \n   if (m_rc.empty())\n     {\n-      base_type::assert_valid(true);\n-      _GLIBCXX_DEBUG_ASSERT(next_2_pointer(base_type::m_p_root) == 0);\n+      base_type::assert_valid(true, __file, __line);\n+      PB_DS_DEBUG_VERIFY(next_2_pointer(base_type::m_p_root) == 0);\n       return;\n     }\n \n@@ -67,17 +67,17 @@ assert_valid() const\n \n   while (p_nd != 0)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(*it == p_nd);\n+      PB_DS_DEBUG_VERIFY(*it == p_nd);\n       const_node_pointer p_next = p_nd->m_p_next_sibling;\n-      _GLIBCXX_DEBUG_ASSERT(p_next != 0);\n-      _GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata == p_next->m_metadata);\n-      _GLIBCXX_DEBUG_ASSERT(p_next->m_p_next_sibling == 0 ||\n+      PB_DS_DEBUG_VERIFY(p_next != 0);\n+      PB_DS_DEBUG_VERIFY(p_nd->m_metadata == p_next->m_metadata);\n+      PB_DS_DEBUG_VERIFY(p_next->m_p_next_sibling == 0 ||\n \t\t       p_next->m_metadata < p_next->m_p_next_sibling->m_metadata);\n \n       --it;\n       p_nd = next_2_pointer(next_after_0_pointer(p_nd));\n     }\n-  _GLIBCXX_DEBUG_ASSERT(it + 1 == m_rc.begin());\n+  PB_DS_DEBUG_VERIFY(it + 1 == m_rc.begin());\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "bf000625009f9ebf40c69356410f9dff40449732", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Ferase_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -91,7 +91,7 @@ erase_if(Pred pred)\n   make_binomial_heap();\n   const size_type ersd = base_type::erase_if(pred);\n   base_type::find_max();\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return ersd;\n }\n "}, {"sha": "c252b49ad8af59e03afba8754f3121da7ce8cfa3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Finsert_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,13 +43,13 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n push(const_reference r_val)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n-    make_0_exposed();\n+  make_0_exposed();\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n-    node_pointer p_nd = base_type::get_new_node_for_insert(r_val);\n+  node_pointer p_nd = base_type::get_new_node_for_insert(r_val);\n \n   p_nd->m_p_l_child = p_nd->m_p_prev_or_parent = 0;\n   p_nd->m_metadata = 0;\n@@ -67,26 +67,26 @@ push(const_reference r_val)\n   if (p_nd->m_p_next_sibling != 0&&  p_nd->m_p_next_sibling->m_metadata == 0)\n     m_rc.push(p_nd);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n-    return point_iterator(p_nd);\n+  return point_iterator(p_nd);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n modify(point_iterator it, const_reference r_new_val)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n-    make_binomial_heap();\n+  make_binomial_heap();\n \n   base_type::modify(it, r_new_val);\n \n   base_type::find_max();\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+}\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::node_pointer"}, {"sha": "d1942b99b17f98c5a290b396db13ef11c1eb1c12", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/rc.hpp", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -41,6 +41,15 @@\n #ifndef PB_DS_RC_HPP\n #define PB_DS_RC_HPP\n \n+#define PB_DS_ASSERT_VALID(X)\t\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n namespace __gnu_pbds\n {\n   namespace detail\n@@ -121,7 +130,7 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n #endif \n \n #ifdef PB_DS_RC_BINOMIAL_HEAP_TRACE_\n@@ -138,59 +147,59 @@ namespace __gnu_pbds\n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     rc() : m_over_top(0)\n-    { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+    { PB_DS_ASSERT_VALID((*this)) }\n \n     PB_DS_CLASS_T_DEC\n     PB_DS_CLASS_C_DEC::\n     rc(const PB_DS_CLASS_C_DEC& other) : m_over_top(0)\n-    { _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+    { PB_DS_ASSERT_VALID((*this)) }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     swap(PB_DS_CLASS_C_DEC& other)\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n \n       const size_type over_top = std::max(m_over_top, other.m_over_top);\n \n       for (size_type i = 0; i < over_top; ++i)\n \tstd::swap(m_a_entries[i], other.m_a_entries[i]);\n \n       std::swap(m_over_top, other.m_over_top);\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n      }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     push(entry p_nd)\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n       _GLIBCXX_DEBUG_ASSERT(m_over_top < max_entries);\n       m_a_entries[m_over_top++] = p_nd;\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n     }\n \n     PB_DS_CLASS_T_DEC\n     inline void\n     PB_DS_CLASS_C_DEC::\n     pop()\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n       _GLIBCXX_DEBUG_ASSERT(!empty());\n       --m_over_top;\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n     }\n \n     PB_DS_CLASS_T_DEC\n     inline typename PB_DS_CLASS_C_DEC::node_pointer\n     PB_DS_CLASS_C_DEC::\n     top() const\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n       _GLIBCXX_DEBUG_ASSERT(!empty());\n       return *(m_a_entries + m_over_top - 1);\n     }\n@@ -200,7 +209,7 @@ namespace __gnu_pbds\n     PB_DS_CLASS_C_DEC::\n     empty() const\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n       return m_over_top == 0;\n     }\n \n@@ -215,9 +224,9 @@ namespace __gnu_pbds\n     PB_DS_CLASS_C_DEC::\n     clear()\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n       m_over_top = 0;\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n     }\n \n     PB_DS_CLASS_T_DEC\n@@ -236,8 +245,8 @@ namespace __gnu_pbds\n     PB_DS_CLASS_T_DEC\n     void\n     PB_DS_CLASS_C_DEC::\n-    assert_valid() const\n-    { _GLIBCXX_DEBUG_ASSERT(m_over_top < max_entries); }\n+    assert_valid(const char* __file, int __line) const\n+    { PB_DS_DEBUG_VERIFY(m_over_top < max_entries); }\n #endif \n \n #ifdef PB_DS_RC_BINOMIAL_HEAP_TRACE_\n@@ -259,4 +268,6 @@ namespace __gnu_pbds\n } // namespace detail\n } // namespace __gnu_pbds\n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_ASSERT_VALID\n #endif "}, {"sha": "0bf8e4fd2794e7f6c67485dde9cadf86276615b7", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/rc_binomial_heap_.hpp", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc_binomial_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc_binomial_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Frc_binomial_heap_.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -149,7 +149,7 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n #endif \n \n #ifdef PB_DS_RC_BINOMIAL_HEAP_TRACE_\n@@ -180,19 +180,27 @@ namespace __gnu_pbds\n       rc_t m_rc;\n     };\n \n+#define PB_DS_ASSERT_VALID(X)\t\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n #include <ext/pb_ds/detail/rc_binomial_heap_/constructors_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/rc_binomial_heap_/debug_fn_imps.hpp>\n #include <ext/pb_ds/detail/rc_binomial_heap_/erase_fn_imps.hpp>\n #include <ext/pb_ds/detail/rc_binomial_heap_/trace_fn_imps.hpp>\n #include <ext/pb_ds/detail/rc_binomial_heap_/insert_fn_imps.hpp>\n #include <ext/pb_ds/detail/rc_binomial_heap_/split_join_fn_imps.hpp>\n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_ASSERT_VALID\n #undef PB_DS_CLASS_C_DEC\n-\n #undef PB_DS_CLASS_T_DEC\n-\n #undef PB_DS_BASE_C_DEC\n-\n #undef PB_DS_RC_C_DEC\n   } // namespace detail\n } // namespace __gnu_pbds"}, {"sha": "09d637c7d584d0f9e02b6e929569255d9fb0c6e3", "filename": "libstdc++-v3/include/ext/pb_ds/detail/rc_binomial_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Frc_binomial_heap_%2Fsplit_join_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -44,8 +44,8 @@ void\n PB_DS_CLASS_C_DEC::\n split(Pred pred, PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n \n     make_binomial_heap();\n   other.make_binomial_heap();\n@@ -55,27 +55,27 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n   base_type::find_max();\n   other.find_max();\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n+}\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n \n-    make_binomial_heap();\n+  make_binomial_heap();\n   other.make_binomial_heap();\n \n   base_type::join(other);\n \n   base_type::find_max();\n   other.find_max();\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n+}\n "}, {"sha": "3d1b3996991b7212ee2b42c4fb1e2d72fbb7c91d", "filename": "libstdc++-v3/include/ext/pb_ds/detail/resize_policy/hash_load_check_resize_trigger_imp.hpp", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fresize_policy%2Fhash_load_check_resize_trigger_imp.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -39,66 +39,69 @@\n  * Contains a resize trigger implementation.\n  */\n \n+#define PB_DS_ASSERT_VALID(X)\t\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n PB_DS_CLASS_T_DEC\n PB_DS_CLASS_C_DEC::\n hash_load_check_resize_trigger(float load_min, float load_max)\n : m_load_min(load_min), m_load_max(load_max), m_next_shrink_size(0),\n   m_next_grow_size(0), m_resize_needed(false)\n-{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_find_search_start()\n-{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_find_search_collision()\n-{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_find_search_end()\n-{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_insert_search_start()\n-{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_insert_search_collision()\n-{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_insert_search_end()\n-{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_erase_search_start()\n-{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_erase_search_collision()\n-{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n notify_erase_search_end()\n-{ _GLIBCXX_DEBUG_ONLY(assert_valid();) }\n+{ PB_DS_ASSERT_VALID((*this)) }\n \n PB_DS_CLASS_T_DEC\n inline void\n@@ -107,7 +110,7 @@ notify_inserted(size_type num_entries)\n {\n   m_resize_needed = (num_entries >= m_next_grow_size);\n   size_base::set_size(num_entries);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -117,15 +120,15 @@ notify_erased(size_type num_entries)\n {\n   size_base::set_size(num_entries);\n   m_resize_needed = num_entries <= m_next_shrink_size;\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n inline bool\n PB_DS_CLASS_C_DEC::\n is_resize_needed() const\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return m_resize_needed;\n }\n \n@@ -160,7 +163,7 @@ notify_resized(size_type new_size)\n \t    << \"5 \" << m_next_grow_size << std::endl;\n #endif\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -194,27 +197,27 @@ notify_externally_resized(size_type new_size)\n       m_next_shrink_size = new_shrink_size;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n notify_cleared()\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   size_base::set_size(0);\n   m_resize_needed = (0 < m_next_shrink_size);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n \n   size_base::swap(other);\n   std::swap(m_load_min, other.m_load_min);\n@@ -223,8 +226,8 @@ swap(PB_DS_CLASS_C_DEC& other)\n   std::swap(m_next_grow_size, other.m_next_grow_size);\n   std::swap(m_next_shrink_size, other.m_next_shrink_size);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n }\n \n PB_DS_CLASS_T_DEC\n@@ -272,12 +275,20 @@ do_resize(size_type)\n { std::abort(); }\n \n #ifdef _GLIBCXX_DEBUG\n+# define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_valid() const\n+assert_valid(const char* __file, int __line) const\n {\n   _GLIBCXX_DEBUG_ASSERT(m_load_max > m_load_min);\n   _GLIBCXX_DEBUG_ASSERT(m_next_grow_size >= m_next_shrink_size);\n }\n+# undef PB_DS_DEBUG_VERIFY\n #endif\n+#undef PB_DS_ASSERT_VALID"}, {"sha": "dea307c2bdc589b6eb77bfadff860133e73bb500", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fconstructors_destructor_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -53,7 +53,7 @@ PB_DS_CLASS_C_DEC::\n PB_DS_CLASS_NAME()\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -62,7 +62,7 @@ PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn) :\n   base_type(r_cmp_fn)\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -71,7 +71,7 @@ PB_DS_CLASS_NAME(const Cmp_Fn& r_cmp_fn, const node_update& r_node_update) :\n   base_type(r_cmp_fn, r_node_update)\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -80,19 +80,19 @@ PB_DS_CLASS_NAME(const PB_DS_CLASS_C_DEC& other) :\n   base_type(other)\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n   base_type::swap(other);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "453567a0632e1dd1327f691b6ef2a8e5526e6748", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/debug_fn_imps.hpp", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fdebug_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,31 +43,32 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_valid() const\n+assert_valid(const char* __file, int __line) const\n {\n-  base_type::assert_valid();\n+  base_type::assert_valid(__file, __line);\n   const node_pointer p_head = base_type::m_p_head;\n-  assert_special_imp(p_head);\n+  assert_special_imp(p_head, __file, __line);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_special_imp(const node_pointer p_nd) const\n+assert_special_imp(const node_pointer p_nd,\n+\t\t   const char* __file, int __line) const\n {\n   if (p_nd == 0)\n     return;\n \n   if (p_nd == base_type::m_p_head)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(p_nd->m_special);\n-      assert_special_imp(p_nd->m_p_parent);\n+      PB_DS_DEBUG_VERIFY(p_nd->m_special);\n+      assert_special_imp(p_nd->m_p_parent, __file, __line);\n       return;\n     }\n \n-  _GLIBCXX_DEBUG_ASSERT(!p_nd->m_special);\n-  assert_special_imp(p_nd->m_p_left);\n-  assert_special_imp(p_nd->m_p_right);\n+  PB_DS_DEBUG_VERIFY(!p_nd->m_special);\n+  assert_special_imp(p_nd->m_p_left, __file, __line);\n+  assert_special_imp(p_nd->m_p_right, __file, __line);\n }\n \n #endif "}, {"sha": "207577cf492ba9650339070833f010256decb526", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/erase_fn_imps.hpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ferase_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -55,13 +55,13 @@ inline typename PB_DS_CLASS_C_DEC::iterator\n PB_DS_CLASS_C_DEC::\n erase(iterator it)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n   if (it == base_type::end())\n     return it;\n   iterator ret_it = it;\n   ++ret_it;\n   erase_node(it.m_p_nd);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n   return ret_it;\n }\n \n@@ -70,13 +70,13 @@ inline typename PB_DS_CLASS_C_DEC::reverse_iterator\n PB_DS_CLASS_C_DEC::\n erase(reverse_iterator it)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n   if (it.m_p_nd == base_type::m_p_head)\n     return (it);\n   reverse_iterator ret_it = it;\n   ++ret_it;\n   erase_node(it.m_p_nd);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n   return ret_it;\n }\n \n@@ -86,7 +86,7 @@ inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   size_type num_ersd = 0;\n   iterator it = base_type::begin();\n   while (it != base_type::end())\n@@ -99,7 +99,7 @@ erase_if(Pred pred)\n       else\n \t++it;\n     }\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   return num_ersd;\n }\n \n@@ -111,7 +111,7 @@ erase_node(node_pointer p_nd)\n   _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n   splay(p_nd);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   _GLIBCXX_DEBUG_ASSERT(p_nd == this->m_p_head->m_p_parent);\n \n   node_pointer p_l = p_nd->m_p_left;\n@@ -124,7 +124,7 @@ erase_node(node_pointer p_nd)\n       base_type::m_p_head->m_p_parent = p_l;\n       if (p_l != 0)\n \tp_l->m_p_parent = base_type::m_p_head;\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n       return;\n     }\n \n@@ -141,7 +141,7 @@ erase_node(node_pointer p_nd)\n   p_target_r->m_p_left = p_l;\n   if (p_l != 0)\n     p_l->m_p_parent = p_target_r;\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   apply_update(p_target_r, (node_update* )this);\n }\n "}, {"sha": "9dfa926f402005acc38e17527edfd8ee6ba08ded", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/find_fn_imps.hpp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Ffind_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -65,7 +65,8 @@ inline typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n find_imp(const_key_reference r_key)\n {\n-  _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid(__FILE__,\n+\t\t\t\t\t\t\t     __LINE__);)\n   node_pointer p_nd = base_type::m_p_head->m_p_parent;\n   while (p_nd != 0)\n     if (!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value), r_key))\n@@ -84,7 +85,7 @@ inline const typename PB_DS_CLASS_C_DEC::node_pointer\n PB_DS_CLASS_C_DEC::\n find_imp(const_key_reference r_key) const\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   node_pointer p_nd = base_type::m_p_head->m_p_parent;\n   while (p_nd != 0)\n     if (!Cmp_Fn::operator()(PB_DS_V2F(p_nd->m_value), r_key))"}, {"sha": "97441c9df46853045596405b1a182319e93b2118", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Finsert_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010i, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,12 +43,12 @@ inline std::pair<typename PB_DS_CLASS_C_DEC::point_iterator, bool>\n PB_DS_CLASS_C_DEC::\n insert(const_reference r_value)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   std::pair<point_iterator, bool> ins_pair = insert_leaf_imp(r_value);\n   ins_pair.first.m_p_nd->m_special = false;\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n   splay(ins_pair.first.m_p_nd);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n   return ins_pair;\n }\n \n@@ -57,7 +57,8 @@ inline std::pair<typename PB_DS_CLASS_C_DEC::point_iterator, bool>\n PB_DS_CLASS_C_DEC::\n insert_leaf_imp(const_reference r_value)\n {\n-  _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid();)\n+  _GLIBCXX_DEBUG_ONLY(base_type::structure_only_assert_valid(__FILE__,\n+\t\t\t\t\t\t\t     __LINE__);)\n   if (base_type::m_size == 0)\n     return std::make_pair(base_type::insert_imp_empty(r_value), true);\n \n@@ -80,7 +81,7 @@ insert_leaf_imp(const_reference r_value)\n   if (p_pot == base_type::m_p_head)\n     return std::make_pair(base_type::insert_leaf_new(r_value, base_type::m_p_head->m_p_right, false), true);\n \n-  _GLIBCXX_DEBUG_ONLY(base_type::check_key_does_not_exist(PB_DS_V2F(r_value)));\n+  PB_DS_CHECK_KEY_DOES_NOT_EXIST(PB_DS_V2F(r_value))\n \n   p_nd = p_pot->m_p_left;\n   if (p_nd == 0)"}, {"sha": "ec38cf813140d4a2de40ed04ed544bbf3f7d1650", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -48,44 +48,44 @@ splay(node_pointer p_nd)\n #ifdef _GLIBCXX_DEBUG\n       {\n \tnode_pointer p_head = base_type::m_p_head;\n-\tassert_special_imp(p_head);\n+\tassert_special_imp(p_head, __FILE__, __LINE__);\n       }\n #endif\n \n-      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd);)\n+      PB_DS_ASSERT_BASE_NODE_CONSISTENT(p_nd)\n \n-        if (p_nd->m_p_parent->m_p_parent == base_type::m_p_head)\n-\t  {\n-            base_type::rotate_parent(p_nd);\n-            _GLIBCXX_DEBUG_ASSERT(p_nd == this->m_p_head->m_p_parent);\n-\t  }\n-        else\n-\t  {\n-            const node_pointer p_parent = p_nd->m_p_parent;\n-            const node_pointer p_grandparent = p_parent->m_p_parent;\n+      if (p_nd->m_p_parent->m_p_parent == base_type::m_p_head)\n+\t{\n+          base_type::rotate_parent(p_nd);\n+          _GLIBCXX_DEBUG_ASSERT(p_nd == this->m_p_head->m_p_parent);\n+\t}\n+      else\n+\t{\n+          const node_pointer p_parent = p_nd->m_p_parent;\n+          const node_pointer p_grandparent = p_parent->m_p_parent;\n \n #ifdef _GLIBCXX_DEBUG\n-            const size_type total =\n-\t      base_type::recursive_count(p_grandparent);\n-            _GLIBCXX_DEBUG_ASSERT(total >= 3);\n+          const size_type total =\n+\t    base_type::recursive_count(p_grandparent);\n+          _GLIBCXX_DEBUG_ASSERT(total >= 3);\n #endif \n \n-            if (p_parent->m_p_left == p_nd && \n-\t\tp_grandparent->m_p_right == p_parent)\n-\t      splay_zig_zag_left(p_nd, p_parent, p_grandparent);\n-            else if (p_parent->m_p_right == p_nd && \n-\t\t     p_grandparent->m_p_left == p_parent)\n-\t      splay_zig_zag_right(p_nd, p_parent, p_grandparent);\n-            else if (p_parent->m_p_left == p_nd && \n-\t\t     p_grandparent->m_p_left == p_parent)\n-\t      splay_zig_zig_left(p_nd, p_parent, p_grandparent);\n-            else\n-\t      splay_zig_zig_right(p_nd, p_parent, p_grandparent);\n-            _GLIBCXX_DEBUG_ASSERT(total ==this->recursive_count(p_nd));\n-\t  }\n-\n-      _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd);)\n-  }\n+          if (p_parent->m_p_left == p_nd && \n+\t      p_grandparent->m_p_right == p_parent)\n+\t    splay_zig_zag_left(p_nd, p_parent, p_grandparent);\n+          else if (p_parent->m_p_right == p_nd && \n+\t\t   p_grandparent->m_p_left == p_parent)\n+\t    splay_zig_zag_right(p_nd, p_parent, p_grandparent);\n+          else if (p_parent->m_p_left == p_nd && \n+\t\t   p_grandparent->m_p_left == p_parent)\n+\t    splay_zig_zig_left(p_nd, p_parent, p_grandparent);\n+          else\n+\t    splay_zig_zig_right(p_nd, p_parent, p_grandparent);\n+          _GLIBCXX_DEBUG_ASSERT(total ==this->recursive_count(p_nd));\n+\t}\n+\n+      PB_DS_ASSERT_BASE_NODE_CONSISTENT(p_nd)\n+    }\n }\n \n PB_DS_CLASS_T_DEC\n@@ -97,7 +97,7 @@ splay_zig_zag_left(node_pointer p_nd, node_pointer p_parent,\n   _GLIBCXX_DEBUG_ASSERT(p_parent == p_nd->m_p_parent);\n   _GLIBCXX_DEBUG_ASSERT(p_grandparent == p_parent->m_p_parent);\n \n-  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_grandparent);)\n+  PB_DS_ASSERT_BASE_NODE_CONSISTENT(p_grandparent)\n \n   _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_left == p_nd && \n \t\t        p_grandparent->m_p_right == p_parent);\n@@ -133,7 +133,7 @@ splay_zig_zag_right(node_pointer p_nd, node_pointer p_parent,\n   _GLIBCXX_DEBUG_ASSERT(p_parent == p_nd->m_p_parent);\n   _GLIBCXX_DEBUG_ASSERT(p_grandparent == p_parent->m_p_parent);\n \n-  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_grandparent);)\n+  PB_DS_ASSERT_BASE_NODE_CONSISTENT(p_grandparent)\n \n   _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_right == p_nd && \n \t  \t        p_grandparent->m_p_left == p_parent);\n@@ -169,7 +169,7 @@ splay_zig_zig_left(node_pointer p_nd, node_pointer p_parent,\n   _GLIBCXX_DEBUG_ASSERT(p_parent == p_nd->m_p_parent);\n   _GLIBCXX_DEBUG_ASSERT(p_grandparent == p_parent->m_p_parent);\n \n-  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_grandparent);)\n+  PB_DS_ASSERT_BASE_NODE_CONSISTENT(p_grandparent)\n \n   _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_left == p_nd && \n \t\t     p_nd->m_p_parent->m_p_parent->m_p_left == p_nd->m_p_parent);\n@@ -204,7 +204,7 @@ splay_zig_zig_right(node_pointer p_nd, node_pointer p_parent,\n {\n   _GLIBCXX_DEBUG_ASSERT(p_parent == p_nd->m_p_parent);\n   _GLIBCXX_DEBUG_ASSERT(p_grandparent == p_parent->m_p_parent);\n-  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_grandparent);)\n+  PB_DS_ASSERT_BASE_NODE_CONSISTENT(p_grandparent)\n   _GLIBCXX_DEBUG_ASSERT(p_parent->m_p_right == p_nd && \n \t          p_nd->m_p_parent->m_p_parent->m_p_right == p_nd->m_p_parent);\n \n@@ -278,6 +278,6 @@ splay_zz_end(node_pointer p_nd, node_pointer p_parent,\n   apply_update(p_parent, (node_update* )this);\n   apply_update(p_nd, (node_update* )this);\n \n-  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(p_nd);)\n+  PB_DS_ASSERT_BASE_NODE_CONSISTENT(p_nd)\n }\n "}, {"sha": "7c91b77f792e19908a504a831777e38b84834e4c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/splay_tree_.hpp", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplay_tree_.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -191,14 +191,14 @@ namespace __gnu_pbds\n       operator[](const_key_reference r_key)\n       {\n #ifdef PB_DS_DATA_TRUE_INDICATOR\n-\t_GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \tstd::pair<point_iterator, bool> ins_pair =\n \t  insert_leaf_imp(value_type(r_key, mapped_type()));\n \n \tins_pair.first.m_p_nd->m_special = false;\n-\t_GLIBCXX_DEBUG_ONLY(base_type::assert_valid());\n+\t_GLIBCXX_DEBUG_ONLY(base_type::assert_valid(__FILE__, __LINE__));\n \tsplay(ins_pair.first.m_p_nd);\n-\t_GLIBCXX_DEBUG_ONLY(PB_DS_CLASS_C_DEC::assert_valid();)\n+\t_GLIBCXX_DEBUG_ONLY(assert_valid(__FILE__, __LINE__);)\n \treturn ins_pair.first.m_p_nd->m_value.second;\n #else \n \tinsert(r_key);\n@@ -243,10 +243,10 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n \n       void\n-      assert_special_imp(const node_pointer) const;\n+      assert_special_imp(const node_pointer, const char* file, int line) const;\n #endif \n \n       void\n@@ -277,6 +277,23 @@ namespace __gnu_pbds\n       erase_node(node_pointer);\n     };\n \n+#define PB_DS_ASSERT_VALID(X)\t\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_ASSERT_BASE_NODE_CONSISTENT(_Node)\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(base_type::assert_node_consistent(_Node,\t\t\\\n+\t\t\t\t\t\t\t__FILE__, __LINE__);)\n+\n+#define PB_DS_CHECK_KEY_DOES_NOT_EXIST(_Key)\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(base_type::check_key_does_not_exist(_Key,\t\\\n+\t\t\t\t\t\t\t   __FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n #include <ext/pb_ds/detail/splay_tree_/constructors_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/splay_tree_/insert_fn_imps.hpp>\n #include <ext/pb_ds/detail/splay_tree_/splay_fn_imps.hpp>\n@@ -285,6 +302,10 @@ namespace __gnu_pbds\n #include <ext/pb_ds/detail/splay_tree_/debug_fn_imps.hpp>\n #include <ext/pb_ds/detail/splay_tree_/split_join_fn_imps.hpp>\n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_CHECK_KEY_DOES_NOT_EXIST\n+#undef PB_DS_ASSERT_BASE_NODE_CONSISTENT\n+#undef PB_DS_ASSERT_VALID\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_CLASS_NAME"}, {"sha": "cb04d656933210c5b95525f70ae056242436b545", "filename": "libstdc++-v3/include/ext/pb_ds/detail/splay_tree_/split_join_fn_imps.hpp", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fsplay_tree_%2Fsplit_join_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,12 +43,12 @@ inline void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n   if (base_type::join_prep(other) == false)\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n       return;\n     }\n \n@@ -70,22 +70,22 @@ join(PB_DS_CLASS_C_DEC& other)\n \n   base_type::join_finish(other);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n \n   if (base_type::split_prep(r_key, other) == false)\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid());\n-      _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n       return;\n     }\n \n@@ -106,7 +106,7 @@ split(const_key_reference r_key, PB_DS_CLASS_C_DEC& other)\n   apply_update(p_upper_bound, (node_update* )this);\n   base_type::split_finish(other);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid());\n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid());\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n }\n "}, {"sha": "e6780516517344afb9ab93be9f62fefda0261ff7", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/constructors_destructor_fn_imps.hpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fconstructors_destructor_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fconstructors_destructor_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fconstructors_destructor_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -46,7 +46,7 @@ copy_from_range(It first_it, It last_it)\n {\n   while (first_it != last_it)\n     push(*(first_it++));\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -55,7 +55,7 @@ thin_heap_() :\n   m_p_max(0)\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -65,7 +65,7 @@ thin_heap_(const Cmp_Fn& r_cmp_fn) :\n   m_p_max(0)\n {\n   initialize();\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n@@ -79,18 +79,18 @@ thin_heap_(const PB_DS_CLASS_C_DEC& other) :\n     if (Cmp_Fn::operator()(m_p_max->m_value, p_nd->m_value))\n       m_p_max = p_nd;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n swap(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n   base_type::swap(other);\n   std::swap(m_p_max, other.m_p_max);\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n }\n \n PB_DS_CLASS_T_DEC"}, {"sha": "0673675a63ed99bc1e36a50b4cf92a6fc7c0524a", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/debug_fn_imps.hpp", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fdebug_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fdebug_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fdebug_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,70 +43,77 @@\n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_valid() const\n+assert_valid(const char* __file, int __line) const\n {\n-  base_type::assert_valid();\n-  assert_node_consistent(base_type::m_p_root, true);\n-  assert_max();\n-  assert_aux_null();\n+  base_type::assert_valid(__file, __line);\n+  assert_node_consistent(base_type::m_p_root, true, __file, __line);\n+  assert_max(__file, __line);\n+  assert_aux_null(__file, __line);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_aux_null() const\n+assert_aux_null(const char* __file, int __line) const\n {\n   for (size_type i = 0; i < max_rank; ++i)\n-    _GLIBCXX_DEBUG_ASSERT(m_a_aux[i] == 0);\n+    PB_DS_DEBUG_VERIFY(m_a_aux[i] == 0);\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_max() const\n+assert_max(const char* __file, int __line) const\n {\n   if (m_p_max == 0)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(base_type::empty());\n+      PB_DS_DEBUG_VERIFY(base_type::empty());\n       return;\n     }\n \n-  _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n-  _GLIBCXX_DEBUG_ASSERT(base_type::parent(m_p_max) == 0);\n-  _GLIBCXX_DEBUG_ASSERT(m_p_max->m_p_prev_or_parent == 0);\n+  PB_DS_DEBUG_VERIFY(!base_type::empty());\n+  PB_DS_DEBUG_VERIFY(base_type::parent(m_p_max) == 0);\n+  PB_DS_DEBUG_VERIFY(m_p_max->m_p_prev_or_parent == 0);\n   for (const_iterator it = base_type::begin(); it != base_type::end(); ++it)\n-    _GLIBCXX_DEBUG_ASSERT(!Cmp_Fn::operator()(m_p_max->m_value, it.m_p_nd->m_value));\n+    PB_DS_DEBUG_VERIFY(!Cmp_Fn::operator()(m_p_max->m_value, it.m_p_nd->m_value));\n }\n \n PB_DS_CLASS_T_DEC\n void\n PB_DS_CLASS_C_DEC::\n-assert_node_consistent(const_node_pointer p_nd, bool root) const\n+assert_node_consistent(const_node_pointer p_nd, bool root,\n+\t\t       const char* __file, int __line) const\n {\n-  base_type::assert_node_consistent(p_nd, root);\n+  base_type::assert_node_consistent(p_nd, root, __file, __line);\n   if (p_nd == 0)\n     return;\n \n-  assert_node_consistent(p_nd->m_p_next_sibling, root);\n-  assert_node_consistent(p_nd->m_p_l_child, false);\n+  assert_node_consistent(p_nd->m_p_next_sibling, root, __file, __line);\n+  assert_node_consistent(p_nd->m_p_l_child, false, __file, __line);\n   if (!root)\n     {\n       if (p_nd->m_metadata == 0)\n-\t_GLIBCXX_DEBUG_ASSERT(p_nd->m_p_next_sibling == 0);\n+\tPB_DS_DEBUG_VERIFY(p_nd->m_p_next_sibling == 0);\n       else\n-\t_GLIBCXX_DEBUG_ASSERT(p_nd->m_metadata == p_nd->m_p_next_sibling->m_metadata + 1);\n+\tPB_DS_DEBUG_VERIFY(p_nd->m_metadata == p_nd->m_p_next_sibling->m_metadata + 1);\n     }\n \n   if (p_nd->m_p_l_child != 0)\n-    _GLIBCXX_DEBUG_ASSERT(p_nd->m_p_l_child->m_metadata + 1 == base_type::degree(p_nd));\n+    PB_DS_DEBUG_VERIFY(p_nd->m_p_l_child->m_metadata + 1 == base_type::degree(p_nd));\n \n-  const bool unmarked_valid =(p_nd->m_p_l_child == 0&&  p_nd->m_metadata == 0) ||(p_nd->m_p_l_child != 0&&  p_nd->m_metadata == p_nd->m_p_l_child->m_metadata + 1);\n+  const bool unmarked_valid =\n+    (p_nd->m_p_l_child == 0 && p_nd->m_metadata == 0)\n+    || (p_nd->m_p_l_child != 0\n+\t && p_nd->m_metadata == p_nd->m_p_l_child->m_metadata + 1);\n \n-  const bool marked_valid =(p_nd->m_p_l_child == 0&&  p_nd->m_metadata == 1) ||(p_nd->m_p_l_child != 0&&  p_nd->m_metadata == p_nd->m_p_l_child->m_metadata + 2);\n+  const bool marked_valid =\n+    (p_nd->m_p_l_child == 0 && p_nd->m_metadata == 1)\n+    || (p_nd->m_p_l_child != 0\n+\t&& p_nd->m_metadata == p_nd->m_p_l_child->m_metadata + 2);\n \n-  _GLIBCXX_DEBUG_ASSERT(unmarked_valid || marked_valid);\n+  PB_DS_DEBUG_VERIFY(unmarked_valid || marked_valid);\n   if (root)\n-    _GLIBCXX_DEBUG_ASSERT(unmarked_valid);\n+    PB_DS_DEBUG_VERIFY(unmarked_valid);\n }\n \n #endif "}, {"sha": "fec0ce4762feb2f4b7016e04b5306f6b8f3d868e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/erase_fn_imps.hpp", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ferase_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ferase_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ferase_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,8 +43,8 @@ void\n PB_DS_CLASS_C_DEC::\n pop()\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n+  PB_DS_ASSERT_VALID((*this))\n+  _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n   _GLIBCXX_DEBUG_ASSERT(m_p_max != 0);\n \n@@ -54,8 +54,8 @@ pop()\n \n   base_type::actual_erase_node(p_nd);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+}\n \n PB_DS_CLASS_T_DEC\n inline void\n@@ -177,8 +177,8 @@ make_from_aux()\n       ++i;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(assert_aux_null();)\n-    }\n+  PB_DS_ASSERT_AUX_NULL((*this))\n+}\n \n PB_DS_CLASS_T_DEC\n inline void\n@@ -218,32 +218,32 @@ void\n PB_DS_CLASS_C_DEC::\n erase(point_iterator it)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n+  PB_DS_ASSERT_VALID((*this))\n+  _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n   node_pointer p_nd = it.m_p_nd;\n \n   remove_node(p_nd);\n \n   base_type::actual_erase_node(p_nd);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+}\n \n PB_DS_CLASS_T_DEC\n template<typename Pred>\n typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n erase_if(Pred pred)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n-    if (base_type::empty())\n-      {\n-        _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  if (base_type::empty())\n+    {\n+      PB_DS_ASSERT_VALID((*this))\n \n-\t  return 0;\n-      }\n+      return 0;\n+    }\n \n   base_type::to_linked_list();\n \n@@ -275,18 +275,21 @@ erase_if(Pred pred)\n       p_cur = p_next;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n-    return ersd;\n+  return ersd;\n }\n \n PB_DS_CLASS_T_DEC\n inline typename PB_DS_CLASS_C_DEC::size_type\n PB_DS_CLASS_C_DEC::\n rank_bound()\n {\n-  const std::size_t* const p_upper =\n-    std::upper_bound(            g_a_rank_bounds, g_a_rank_bounds + num_distinct_rank_bounds, base_type::m_size);\n+  using namespace std;\n+  const size_t* const p_upper =\n+    _GLIBCXX_STD_A::upper_bound(g_a_rank_bounds,\n+\t\t\t\tg_a_rank_bounds + num_distinct_rank_bounds,\n+\t\t\t       \tbase_type::m_size);\n \n   if (p_upper == g_a_rank_bounds + num_distinct_rank_bounds)\n     return max_rank;"}, {"sha": "bbae8de91b63161c45515f82fce4643067ab62ec", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/find_fn_imps.hpp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ffind_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ffind_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Ffind_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,8 +43,8 @@ inline typename PB_DS_CLASS_C_DEC::const_reference\n PB_DS_CLASS_C_DEC::\n top() const\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n+  PB_DS_ASSERT_VALID((*this))\n+  _GLIBCXX_DEBUG_ASSERT(!base_type::empty());\n \n   _GLIBCXX_DEBUG_ASSERT(m_p_max != 0);\n   return m_p_max->m_value;"}, {"sha": "f1195bdff4d9eed2ae1bd88177e41c00cc52c31e", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/insert_fn_imps.hpp", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Finsert_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Finsert_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Finsert_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -43,9 +43,9 @@ inline typename PB_DS_CLASS_C_DEC::point_iterator\n PB_DS_CLASS_C_DEC::\n push(const_reference r_val)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n-    node_pointer p_nd = base_type::get_new_node_for_insert(r_val);\n+  node_pointer p_nd = base_type::get_new_node_for_insert(r_val);\n \n   p_nd->m_metadata = 0;\n \n@@ -57,9 +57,9 @@ push(const_reference r_val)\n \n       m_p_max = base_type::m_p_root = p_nd;\n \n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n \n-        return point_iterator(p_nd);\n+      return point_iterator(p_nd);\n     }\n \n   p_nd->m_p_next_sibling = base_type::m_p_root;\n@@ -70,9 +70,9 @@ push(const_reference r_val)\n \n   update_max(p_nd);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n \n-    return point_iterator(p_nd);\n+  return point_iterator(p_nd);\n }\n \n PB_DS_CLASS_T_DEC\n@@ -81,7 +81,7 @@ PB_DS_CLASS_C_DEC::\n make_root(node_pointer p_nd)\n {\n   p_nd->m_metadata =\n-    p_nd->m_p_l_child == 0?\n+    p_nd->m_p_l_child == 0 ?\n     0 :\n     1 + p_nd->m_p_l_child->m_metadata;\n }\n@@ -170,8 +170,8 @@ fix_root(node_pointer p_y)\n \n   make_root(p_y);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y, true);)\n-    }\n+  PB_DS_ASSERT_NODE_CONSISTENT(p_y, true)\n+}\n \n PB_DS_CLASS_T_DEC\n inline void\n@@ -181,7 +181,7 @@ fix_sibling_rank_1_unmarked(node_pointer p_y)\n   _GLIBCXX_DEBUG_ASSERT(p_y->m_p_prev_or_parent != 0);\n \n   _GLIBCXX_DEBUG_ONLY(node_pointer p_w = p_y->m_p_l_child;)\n-    _GLIBCXX_DEBUG_ASSERT(p_w != 0);\n+  _GLIBCXX_DEBUG_ASSERT(p_w != 0);\n   _GLIBCXX_DEBUG_ASSERT(p_w->m_p_next_sibling == 0);\n   _GLIBCXX_DEBUG_ASSERT(p_y->m_p_next_sibling == 0);\n \n@@ -191,8 +191,8 @@ fix_sibling_rank_1_unmarked(node_pointer p_y)\n \n   p_y->m_p_l_child = 0;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y, false);)\n-    }\n+  PB_DS_ASSERT_NODE_CONSISTENT(p_y, false)\n+}\n \n PB_DS_CLASS_T_DEC\n inline void\n@@ -204,8 +204,8 @@ fix_sibling_rank_1_marked(node_pointer p_y)\n \n   p_y->m_metadata = 0;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y, false);)\n-    }\n+  PB_DS_ASSERT_NODE_CONSISTENT(p_y, false)\n+}\n \n PB_DS_CLASS_T_DEC\n inline void\n@@ -228,8 +228,8 @@ fix_sibling_general_unmarked(node_pointer p_y)\n   p_y->m_p_next_sibling = p_w;\n   p_w->m_p_prev_or_parent = p_y;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y, false);)\n-    }\n+  PB_DS_ASSERT_NODE_CONSISTENT(p_y, false)\n+}\n \n PB_DS_CLASS_T_DEC\n inline void\n@@ -240,8 +240,8 @@ fix_sibling_general_marked(node_pointer p_y)\n \n   --p_y->m_metadata;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(p_y, false);)\n-    }\n+  PB_DS_ASSERT_NODE_CONSISTENT(p_y, false)\n+}\n \n PB_DS_CLASS_T_DEC\n inline void\n@@ -266,7 +266,7 @@ void\n PB_DS_CLASS_C_DEC::\n modify(point_iterator it, const_reference r_new_val)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n     node_pointer p_nd = it.m_p_nd;\n \n   _GLIBCXX_DEBUG_ASSERT(p_nd != 0);\n@@ -283,18 +283,18 @@ modify(point_iterator it, const_reference r_new_val)\n \n       make_root_and_link(p_nd);\n \n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n \n-        return;\n+      return;\n     }\n \n   if (p_nd->m_p_prev_or_parent == 0)\n     {\n       update_max(p_nd);\n \n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n \n-        return;\n+      return;\n     }\n \n   node_pointer p_y = p_nd->m_p_prev_or_parent;\n@@ -312,8 +312,8 @@ modify(point_iterator it, const_reference r_new_val)\n \n   make_root_and_link(p_nd);\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+}\n \n PB_DS_CLASS_T_DEC\n inline void"}, {"sha": "96bb818894bbf3af302f5590f4076254e82fdee4", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/split_join_fn_imps.hpp", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fsplit_join_fn_imps.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fsplit_join_fn_imps.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fsplit_join_fn_imps.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -44,17 +44,17 @@ void\n PB_DS_CLASS_C_DEC::\n split(Pred pred, PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n \n-    other.clear();\n+  other.clear();\n \n   if (base_type::empty())\n     {\n-      _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-        _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+      PB_DS_ASSERT_VALID((*this))\n+      PB_DS_ASSERT_VALID(other)\n \n-        return;\n+      return;\n     }\n \n   base_type::to_linked_list();\n@@ -75,9 +75,9 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n       p_out = p_next;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID(other)\n \n-    node_pointer p_cur = base_type::m_p_root;\n+  node_pointer p_cur = base_type::m_p_root;\n \n   m_p_max = 0;\n \n@@ -92,19 +92,19 @@ split(Pred pred, PB_DS_CLASS_C_DEC& other)\n       p_cur = p_next;\n     }\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n+}\n \n PB_DS_CLASS_T_DEC\n inline void\n PB_DS_CLASS_C_DEC::\n join(PB_DS_CLASS_C_DEC& other)\n {\n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n \n-    node_pointer p_other = other.m_p_root;\n+  node_pointer p_other = other.m_p_root;\n \n   while (p_other != 0)\n     {\n@@ -121,6 +121,6 @@ join(PB_DS_CLASS_C_DEC& other)\n   other.m_size = 0;\n   other.m_p_max = 0;\n \n-  _GLIBCXX_DEBUG_ONLY(assert_valid();)\n-    _GLIBCXX_DEBUG_ONLY(other.assert_valid();)\n-    }\n+  PB_DS_ASSERT_VALID((*this))\n+  PB_DS_ASSERT_VALID(other)\n+}"}, {"sha": "d5fba5f5ac61b1d6442e0cb758851d02ddeb478c", "filename": "libstdc++-v3/include/ext/pb_ds/detail/thin_heap_/thin_heap_.hpp", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fthin_heap_.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fthin_heap_.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fdetail%2Fthin_heap_%2Fthin_heap_.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -183,10 +183,10 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_valid() const;\n+      assert_valid(const char* file, int line) const;\n \n       void\n-      assert_max() const;\n+      assert_max(const char* file, int line) const;\n #endif \n \n #ifdef PB_DS_THIN_HEAP_TRACE_\n@@ -261,10 +261,11 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n       void\n-      assert_node_consistent(const_node_pointer p_nd, bool root) const;\n+      assert_node_consistent(const_node_pointer p_nd, bool root,\n+\t\t\t     const char* file, int line) const;\n \n       void\n-      assert_aux_null() const;\n+      assert_aux_null(const char* file, int line) const;\n #endif \n \n     private:\n@@ -333,6 +334,22 @@ namespace __gnu_pbds\n \t/* Pot's good, let's play */\n       };\n \n+#define PB_DS_ASSERT_VALID(X)\t\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_valid(__FILE__, __LINE__);)\n+\n+#define PB_DS_ASSERT_NODE_CONSISTENT(_Node, _Bool)\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(assert_node_consistent(_Node, _Bool,\t\t\\\n+\t\t\t\t\t     __FILE__, __LINE__);)\n+\n+#define PB_DS_ASSERT_AUX_NULL(X)\t\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_ONLY(X.assert_aux_null(__FILE__, __LINE__);)\n+\n+#define PB_DS_DEBUG_VERIFY(_Cond)\t\t\t\t\t\\\n+  _GLIBCXX_DEBUG_VERIFY_AT(_Cond,\t\t\t\t\t\\\n+\t\t\t   _M_message(#_Cond\" assertion from %1;:%2;\")\t\\\n+\t\t\t   ._M_string(__FILE__)._M_integer(__LINE__)\t\\\n+\t\t\t   ,__file,__line)\n+\n #include <ext/pb_ds/detail/thin_heap_/constructors_destructor_fn_imps.hpp>\n #include <ext/pb_ds/detail/thin_heap_/debug_fn_imps.hpp>\n #include <ext/pb_ds/detail/thin_heap_/trace_fn_imps.hpp>\n@@ -341,6 +358,10 @@ namespace __gnu_pbds\n #include <ext/pb_ds/detail/thin_heap_/erase_fn_imps.hpp>\n #include <ext/pb_ds/detail/thin_heap_/split_join_fn_imps.hpp>\n \n+#undef PB_DS_DEBUG_VERIFY\n+#undef PB_DS_ASSERT_AUX_NULL\n+#undef PB_DS_ASSERT_NODE_CONSISTENT\n+#undef PB_DS_ASSERT_VALID\n #undef PB_DS_CLASS_C_DEC\n #undef PB_DS_CLASS_T_DEC\n #undef PB_DS_BASE_C_DEC"}, {"sha": "cefa3a10c2238e0e305c374fe0847114a605c578", "filename": "libstdc++-v3/include/ext/pb_ds/hash_policy.hpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5886803ed0715d8bf874b3fd39d7d0763c2fb75/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_ds%2Fhash_policy.hpp?ref=f5886803ed0715d8bf874b3fd39d7d0763c2fb75", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2009, 2010, 2011 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -275,7 +275,7 @@ namespace __gnu_pbds\n \n #ifdef _GLIBCXX_DEBUG\n     void\n-    assert_valid() const;\n+    assert_valid(const char* file, int line) const;\n #endif \n \n     float \tm_load_min;"}]}