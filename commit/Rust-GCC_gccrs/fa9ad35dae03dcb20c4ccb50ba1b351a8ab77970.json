{"sha": "fa9ad35dae03dcb20c4ccb50ba1b351a8ab77970", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE5YWQzNWRhZTAzZGNiMjBjNGNjYjUwYmExYjM1MWE4YWI3Nzk3MA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-09-22T10:58:36Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-09-22T10:58:36Z"}, "message": "AArch64: Implement poly-type vadd intrinsics\n\nThis implements the vadd[p]_p* intrinsics.\nIn terms of functionality they are aliases of veor operations on the relevant unsigned types.\n\nBootstrapped and tested on aarch64-none-linux-gnu.\n\ngcc/\n\tPR target/71233\n\t* config/aarch64/arm_neon.h (vadd_p8, vadd_p16, vadd_p64, vaddq_p8,\n\tvaddq_p16, vaddq_p64, vaddq_p128): Define.\n\ngcc/testsuite/\n\tPR target/71233\n\t* gcc.target/aarch64/simd/vadd_poly_1.c: New test.", "tree": {"sha": "f257727dcf112d79cf7a77aece6d779d06b5d0f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f257727dcf112d79cf7a77aece6d779d06b5d0f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa9ad35dae03dcb20c4ccb50ba1b351a8ab77970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9ad35dae03dcb20c4ccb50ba1b351a8ab77970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa9ad35dae03dcb20c4ccb50ba1b351a8ab77970", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa9ad35dae03dcb20c4ccb50ba1b351a8ab77970/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ecf368f4b4223fb2df4f3887429dfbb48852e38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ecf368f4b4223fb2df4f3887429dfbb48852e38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ecf368f4b4223fb2df4f3887429dfbb48852e38"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "81cabb2cb260807dabdae96f83ea6c319cc1219c", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9ad35dae03dcb20c4ccb50ba1b351a8ab77970/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9ad35dae03dcb20c4ccb50ba1b351a8ab77970/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=fa9ad35dae03dcb20c4ccb50ba1b351a8ab77970", "patch": "@@ -35659,6 +35659,55 @@ vusmmlaq_s32 (int32x4_t __r, uint8x16_t __a, int8x16_t __b)\n \n #pragma GCC pop_options\n \n+__extension__ extern __inline poly8x8_t\n+__attribute ((__always_inline__, __gnu_inline__, __artificial__))\n+vadd_p8 (poly8x8_t __a, poly8x8_t __b)\n+{\n+  return __a ^ __b;\n+}\n+\n+__extension__ extern __inline poly16x4_t\n+__attribute ((__always_inline__, __gnu_inline__, __artificial__))\n+vadd_p16 (poly16x4_t __a, poly16x4_t __b)\n+{\n+  return __a ^ __b;\n+}\n+\n+__extension__ extern __inline poly64x1_t\n+__attribute ((__always_inline__, __gnu_inline__, __artificial__))\n+vadd_p64 (poly64x1_t __a, poly64x1_t __b)\n+{\n+  return __a ^ __b;\n+}\n+\n+__extension__ extern __inline poly8x16_t\n+__attribute ((__always_inline__, __gnu_inline__, __artificial__))\n+vaddq_p8 (poly8x16_t __a, poly8x16_t __b)\n+{\n+  return __a ^ __b;\n+}\n+\n+__extension__ extern __inline poly16x8_t\n+__attribute ((__always_inline__, __gnu_inline__, __artificial__))\n+vaddq_p16 (poly16x8_t __a, poly16x8_t __b)\n+{\n+  return __a ^__b;\n+}\n+\n+__extension__ extern __inline poly64x2_t\n+__attribute ((__always_inline__, __gnu_inline__, __artificial__))\n+vaddq_p64 (poly64x2_t __a, poly64x2_t __b)\n+{\n+  return __a ^ __b;\n+}\n+\n+__extension__ extern __inline poly128_t\n+__attribute ((__always_inline__, __gnu_inline__, __artificial__))\n+vaddq_p128 (poly128_t __a, poly128_t __b)\n+{\n+  return __a ^ __b;\n+}\n+\n #undef __aarch64_vget_lane_any\n \n #undef __aarch64_vdup_lane_any"}, {"sha": "a5cdf290b0df186ac1e11af01b6985688c1f1f93", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vadd_poly_1.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa9ad35dae03dcb20c4ccb50ba1b351a8ab77970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvadd_poly_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa9ad35dae03dcb20c4ccb50ba1b351a8ab77970/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvadd_poly_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvadd_poly_1.c?ref=fa9ad35dae03dcb20c4ccb50ba1b351a8ab77970", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+#include <arm_neon.h>\n+\n+poly8x8_t\n+foo (poly8x8_t a, poly8x8_t b)\n+{\n+  return vadd_p8 (a, b);\n+}\n+\n+poly16x4_t\n+foo16 (poly16x4_t a, poly16x4_t b)\n+{\n+  return vadd_p16 (a, b);\n+}\n+\n+poly64x1_t\n+foo64 (poly64x1_t a, poly64x1_t b)\n+{\n+  return vadd_p64 (a, b);\n+}\n+\n+poly8x16_t\n+fooq (poly8x16_t a, poly8x16_t b)\n+{\n+  return vaddq_p8 (a, b);\n+}\n+\n+poly16x8_t\n+fooq16 (poly16x8_t a, poly16x8_t b)\n+{\n+  return vaddq_p16 (a, b);\n+}\n+\n+poly64x2_t\n+fooq64 (poly64x2_t a, poly64x2_t b)\n+{\n+  return vaddq_p64 (a, b);\n+}\n+\n+poly128_t\n+fooq128 (poly128_t a, poly128_t b)\n+{\n+  return vaddq_p128 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"eor\\\\tv\\[0-9\\]+\\.8b, v\\[0-9\\]+\\.8b, v\\[0-9\\]+\\.8b\" 3 } } */\n+/* { dg-final { scan-assembler-times \"eor\\\\tv\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b, v\\[0-9\\]+\\.16b\" 3 } } */\n+/* { dg-final { scan-assembler-times \"eor\\\\tx\\[0-9\\]+, x\\[0-9\\]+, x\\[0-9\\]+\" 2 } } */"}]}