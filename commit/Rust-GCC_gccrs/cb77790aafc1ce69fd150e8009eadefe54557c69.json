{"sha": "cb77790aafc1ce69fd150e8009eadefe54557c69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I3Nzc5MGFhZmMxY2U2OWZkMTUwZTgwMDllYWRlZmU1NDU1N2M2OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-06-24T02:13:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-06-24T02:13:41Z"}, "message": "re PR c++/35255 ([DR 115] gcc does not do partial ordering on overloaded address resolution)\n\n\tPR c++/35255\n\t* pt.c (resolve_overloaded_unification): Fix DR 115 handling.\n\nFrom-SVN: r175367", "tree": {"sha": "d76dad84020f51a76d267b47520602b7603875be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d76dad84020f51a76d267b47520602b7603875be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb77790aafc1ce69fd150e8009eadefe54557c69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb77790aafc1ce69fd150e8009eadefe54557c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb77790aafc1ce69fd150e8009eadefe54557c69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb77790aafc1ce69fd150e8009eadefe54557c69/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40a812f0d735b3efd410f455721fe5000ba9abb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40a812f0d735b3efd410f455721fe5000ba9abb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40a812f0d735b3efd410f455721fe5000ba9abb0"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "e00b4001c490d6abb7b23a6887efd2ce1c2a1bd6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb77790aafc1ce69fd150e8009eadefe54557c69/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb77790aafc1ce69fd150e8009eadefe54557c69/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cb77790aafc1ce69fd150e8009eadefe54557c69", "patch": "@@ -1,3 +1,8 @@\n+2011-06-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/35255\n+\t* pt.c (resolve_overloaded_unification): Fix DR 115 handling.\n+\n 2011-06-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/44625"}, {"sha": "b3dd85f04a75f0b5dc4862e04bc6bfba3e722764", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb77790aafc1ce69fd150e8009eadefe54557c69/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb77790aafc1ce69fd150e8009eadefe54557c69/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=cb77790aafc1ce69fd150e8009eadefe54557c69", "patch": "@@ -14524,6 +14524,7 @@ resolve_overloaded_unification (tree tparms,\n \t the affected templates before we try to unify, in case the\n \t explicit args will completely resolve the templates in question.  */\n \n+      int ok = 0;\n       tree expl_subargs = TREE_OPERAND (arg, 1);\n       arg = TREE_OPERAND (arg, 0);\n \n@@ -14538,7 +14539,7 @@ resolve_overloaded_unification (tree tparms,\n \t  ++processing_template_decl;\n \t  subargs = get_bindings (fn, DECL_TEMPLATE_RESULT (fn),\n \t\t\t\t  expl_subargs, /*check_ret=*/false);\n-\t  if (subargs)\n+\t  if (subargs && !any_dependent_template_arguments_p (subargs))\n \t    {\n \t      elem = tsubst (TREE_TYPE (fn), subargs, tf_none, NULL_TREE);\n \t      if (try_one_overload (tparms, targs, tempargs, parm,\n@@ -14549,8 +14550,16 @@ resolve_overloaded_unification (tree tparms,\n \t\t  ++good;\n \t\t}\n \t    }\n+\t  else if (subargs)\n+\t    ++ok;\n \t  --processing_template_decl;\n \t}\n+      /* If no templates (or more than one) are fully resolved by the\n+\t explicit arguments, this template-id is a non-deduced context; it\n+\t could still be OK if we deduce all template arguments for the\n+\t enclosing call through other arguments.  */\n+      if (good != 1)\n+\tgood = ok;\n     }\n   else if (TREE_CODE (arg) != OVERLOAD\n \t   && TREE_CODE (arg) != FUNCTION_DECL)"}, {"sha": "bab71b3f32ad6d9ff997704b517bc3254e1c49a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb77790aafc1ce69fd150e8009eadefe54557c69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb77790aafc1ce69fd150e8009eadefe54557c69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cb77790aafc1ce69fd150e8009eadefe54557c69", "patch": "@@ -1,3 +1,9 @@\n+2011-06-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/35255\n+\t* g++.dg/template/partial10.C: New.\n+\t* g++.dg/template/partial11.C: New.\n+\n 2011-06-23  Jeff Law <law@redhat.com>\n \n \tPR middle-end/48770"}, {"sha": "53a48fbac820d251ce09b1181517c6573ecf85b5", "filename": "gcc/testsuite/g++.dg/template/partial10.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb77790aafc1ce69fd150e8009eadefe54557c69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb77790aafc1ce69fd150e8009eadefe54557c69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial10.C?ref=cb77790aafc1ce69fd150e8009eadefe54557c69", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/35255, DR 115\n+// { dg-do link }\n+\n+// 14.8.1: In contexts where deduction is done and fails, or in contexts\n+// where deduction is not done, if a template argument list is specified\n+// and it, along with any default template arguments, identifies a single\n+// function template specialization, then the template-id is an lvalue for\n+// the function template specialization.\n+\n+template <class Fn> void def(Fn fn) {}\n+\n+template <class T1, class T2> T2 fn(T1, T2);\n+template <class T1> int fn(T1) { }\n+\n+int main()\n+{\n+  def(fn<int>);\n+}"}, {"sha": "b5ceaa883f57e2855946dadb3014a09f24b70995", "filename": "gcc/testsuite/g++.dg/template/partial11.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb77790aafc1ce69fd150e8009eadefe54557c69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb77790aafc1ce69fd150e8009eadefe54557c69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial11.C?ref=cb77790aafc1ce69fd150e8009eadefe54557c69", "patch": "@@ -0,0 +1,24 @@\n+// DR 115\n+\n+// 14.8.1: In contexts where deduction is done and fails, or in contexts\n+// where deduction is not done, if a template argument list is specified\n+// and it, along with any default template arguments, identifies a single\n+// function template specialization, then the template-id is an lvalue for\n+// the function template specialization.\n+\n+// Here, deduction is not done to resolve fn<int> because the target type\n+// is a template parameter, so we resolve to the second template, and then\n+// the call to def fails because we deduce different values of Fn for the\n+// two function arguments.\n+\n+template <class Fn> void def(Fn fn, Fn fn2);\n+\n+template <class T1, class T2> T2 fn(T1, T2);\n+template <class T1> int fn(T1);\n+\n+int f(int,int);\n+\n+int main()\n+{\n+  def(fn<int>,f);\t\t// { dg-error \"\" }\n+}"}]}