{"sha": "b6c6a3d64f2e4e9347733290aca3c75898c44b2e", "node_id": "C_kwDOANBUbNoAKGI2YzZhM2Q2NGYyZTRlOTM0NzczMzI5MGFjYTNjNzU4OThjNDRiMmU", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-11-29T23:31:39Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-11-30T00:09:13Z"}, "message": "syscall, runtime: always call XSI strerror_r\n\nThis does the right thing for either glibc or musl on GNU/Linux.\n\nBased on patch by S\u00f6ren Tempel.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/454176", "tree": {"sha": "c3f37a1483d0e780eaf20715c4c565612b883ffb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3f37a1483d0e780eaf20715c4c565612b883ffb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6c6a3d64f2e4e9347733290aca3c75898c44b2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c6a3d64f2e4e9347733290aca3c75898c44b2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6c6a3d64f2e4e9347733290aca3c75898c44b2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c6a3d64f2e4e9347733290aca3c75898c44b2e/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3832c6f7e672e76bba74a508bf3a49740ea38046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3832c6f7e672e76bba74a508bf3a49740ea38046", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3832c6f7e672e76bba74a508bf3a49740ea38046"}], "stats": {"total": 102, "additions": 53, "deletions": 49}, "files": [{"sha": "984d8324004e25064f98541c2fb1cf143a4be56f", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c6a3d64f2e4e9347733290aca3c75898c44b2e/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c6a3d64f2e4e9347733290aca3c75898c44b2e/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=b6c6a3d64f2e4e9347733290aca3c75898c44b2e", "patch": "@@ -1,4 +1,4 @@\n-5e658f4659c551330ea68f5667e4f951b218f32d\n+fef6aa3c1678cdbe7dca454b2cebb369d8ba81bf\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "207d5a9812768095ee7e3cd1c4ad982a343f6858", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c6a3d64f2e4e9347733290aca3c75898c44b2e/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c6a3d64f2e4e9347733290aca3c75898c44b2e/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=b6c6a3d64f2e4e9347733290aca3c75898c44b2e", "patch": "@@ -465,6 +465,7 @@ runtime_files = \\\n \truntime/go-nanotime.c \\\n \truntime/go-now.c \\\n \truntime/go-nosys.c \\\n+\truntime/go-strerror.c \\\n \truntime/go-reflect-call.c \\\n \truntime/go-setenv.c \\\n \truntime/go-signal.c \\"}, {"sha": "0ff6ff4a5c5250f8db2a4c3d07a524f8d32a8fad", "filename": "libgo/Makefile.in", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c6a3d64f2e4e9347733290aca3c75898c44b2e/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c6a3d64f2e4e9347733290aca3c75898c44b2e/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=b6c6a3d64f2e4e9347733290aca3c75898c44b2e", "patch": "@@ -247,7 +247,7 @@ am__objects_4 = runtime/aeshash.lo runtime/go-assert.lo \\\n \truntime/go-fieldtrack.lo runtime/go-matherr.lo \\\n \truntime/go-memclr.lo runtime/go-memmove.lo \\\n \truntime/go-memequal.lo runtime/go-nanotime.lo \\\n-\truntime/go-now.lo runtime/go-nosys.lo \\\n+\truntime/go-now.lo runtime/go-nosys.lo runtime/go-strerror.lo \\\n \truntime/go-reflect-call.lo runtime/go-setenv.lo \\\n \truntime/go-signal.lo runtime/go-unsafe-pointer.lo \\\n \truntime/go-unsetenv.lo runtime/go-unwind.lo \\\n@@ -917,6 +917,7 @@ runtime_files = \\\n \truntime/go-nanotime.c \\\n \truntime/go-now.c \\\n \truntime/go-nosys.c \\\n+\truntime/go-strerror.c \\\n \truntime/go-reflect-call.c \\\n \truntime/go-setenv.c \\\n \truntime/go-signal.c \\\n@@ -1390,6 +1391,8 @@ runtime/go-now.lo: runtime/$(am__dirstamp) \\\n \truntime/$(DEPDIR)/$(am__dirstamp)\n runtime/go-nosys.lo: runtime/$(am__dirstamp) \\\n \truntime/$(DEPDIR)/$(am__dirstamp)\n+runtime/go-strerror.lo: runtime/$(am__dirstamp) \\\n+\truntime/$(DEPDIR)/$(am__dirstamp)\n runtime/go-reflect-call.lo: runtime/$(am__dirstamp) \\\n \truntime/$(DEPDIR)/$(am__dirstamp)\n runtime/go-setenv.lo: runtime/$(am__dirstamp) \\\n@@ -1457,6 +1460,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-reflect-call.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-setenv.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-signal.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-strerror.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-unsafe-pointer.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-unsetenv.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-unwind.Plo@am__quote@"}, {"sha": "9f688e2a0c7b8750a757618e5df775652b8e44e2", "filename": "libgo/go/syscall/errstr.go", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c6a3d64f2e4e9347733290aca3c75898c44b2e/libgo%2Fgo%2Fsyscall%2Ferrstr.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c6a3d64f2e4e9347733290aca3c75898c44b2e/libgo%2Fgo%2Fsyscall%2Ferrstr.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Ferrstr.go?ref=b6c6a3d64f2e4e9347733290aca3c75898c44b2e", "patch": "@@ -4,23 +4,19 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-//go:build !hurd && !linux\n-// +build !hurd,!linux\n-\n package syscall\n \n-//sysnb\tstrerror_r(errnum int, buf []byte) (err Errno)\n-//strerror_r(errnum _C_int, buf *byte, buflen Size_t) _C_int\n+import \"internal/bytealg\"\n+\n+//extern go_strerror\n+func go_strerror(_C_int, *byte, Size_t) _C_int\n \n func Errstr(errnum int) string {\n-\tfor len := 128; ; len *= 2 {\n-\t\tb := make([]byte, len)\n-\t\terrno := strerror_r(errnum, b)\n+\tfor size := 128; ; size *= 2 {\n+\t\tb := make([]byte, size)\n+\t\terrno := go_strerror(_C_int(errnum), &b[0], Size_t(len(b)))\n \t\tif errno == 0 {\n-\t\t\ti := 0\n-\t\t\tfor b[i] != 0 {\n-\t\t\t\ti++\n-\t\t\t}\n+\t\t\ti := bytealg.IndexByte(b, 0)\n \t\t\t// Lowercase first letter: Bad -> bad, but\n \t\t\t// STREAM -> STREAM.\n \t\t\tif i > 1 && 'A' <= b[0] && b[0] <= 'Z' && 'a' <= b[1] && b[1] <= 'z' {\n@@ -29,7 +25,7 @@ func Errstr(errnum int) string {\n \t\t\treturn string(b[:i])\n \t\t}\n \t\tif errno != ERANGE {\n-\t\t\treturn \"errstr failure\"\n+\t\t\treturn \"strerror_r failure\"\n \t\t}\n \t}\n }"}, {"sha": "03a327dbc909a6bc0c26156db3d3f676c0c46a80", "filename": "libgo/go/syscall/errstr_glibc.go", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3832c6f7e672e76bba74a508bf3a49740ea38046/libgo%2Fgo%2Fsyscall%2Ferrstr_glibc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3832c6f7e672e76bba74a508bf3a49740ea38046/libgo%2Fgo%2Fsyscall%2Ferrstr_glibc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Ferrstr_glibc.go?ref=3832c6f7e672e76bba74a508bf3a49740ea38046", "patch": "@@ -1,34 +0,0 @@\n-// errstr_glibc.go -- GNU/Linux and GNU/Hurd specific error strings.\n-\n-// Copyright 2010 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// We use this rather than errstr.go because on GNU/Linux sterror_r\n-// returns a pointer to the error message, and may not use buf at all.\n-\n-//go:build hurd || linux\n-// +build hurd linux\n-\n-package syscall\n-\n-import \"unsafe\"\n-\n-//sysnb\tstrerror_r(errnum int, b []byte) (errstr *byte)\n-//strerror_r(errnum _C_int, b *byte, len Size_t) *byte\n-\n-func Errstr(errnum int) string {\n-\ta := make([]byte, 128)\n-\tp := strerror_r(errnum, a)\n-\tb := (*[1000]byte)(unsafe.Pointer(p))\n-\ti := 0\n-\tfor b[i] != 0 {\n-\t\ti++\n-\t}\n-\t// Lowercase first letter: Bad -> bad, but STREAM -> STREAM.\n-\tif i > 1 && 'A' <= b[0] && b[0] <= 'Z' && 'a' <= b[1] && b[1] <= 'z' {\n-\t\tc := b[0] + 'a' - 'A'\n-\t\treturn string(c) + string(b[1:i])\n-\t}\n-\treturn string(b[:i])\n-}"}, {"sha": "13d1d91df846ca1cc4c6954f7a9c16ac07adca96", "filename": "libgo/runtime/go-strerror.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6c6a3d64f2e4e9347733290aca3c75898c44b2e/libgo%2Fruntime%2Fgo-strerror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6c6a3d64f2e4e9347733290aca3c75898c44b2e/libgo%2Fruntime%2Fgo-strerror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-strerror.c?ref=b6c6a3d64f2e4e9347733290aca3c75898c44b2e", "patch": "@@ -0,0 +1,37 @@\n+/* go-strerror.c -- wrapper around XSI-compliant strerror_r.\n+\n+   Copyright 2022 The Go Authors. All rights reserved.\n+   Use of this source code is governed by a BSD-style\n+   license that can be found in the LICENSE file.  */\n+\n+/* There are two version of strerror_r on GNU/Linux: a GNU-specific\n+   and an XSI-compliant version.  The former version is only available\n+   on glibc.  Since glibc 2.13, the XSI-compliant version is also\n+   provided by glibc if _GNU_SOURCE is not defined.  Since the\n+   entirety of gofrontend is compiled with _GNU_SOURCE, this file\n+   exists to selectively undefine it and provides an alias to the\n+   XSI-compliant version of strerror_r(3).  */\n+\n+#ifdef __linux__\n+\n+/* Force selection of XSI-compliant strerror_r by glibc.  */\n+#undef XOPEN_SOURCE\n+#define XOPEN_SOURCE 600\n+#undef _POSIX_C_SOURCE\n+#define _POSIX_C_SOURCE 200112L\n+#undef _GNU_SOURCE\n+\n+#endif /* __linux__ */\n+\n+#include <string.h>\n+\n+#ifndef HAVE_STRERROR_R\n+// Provided by go-nosys.c if not provided by libc itself.\n+extern int strerror_r (int, char *, size_t);\n+#endif\n+\n+int\n+go_strerror (int errnum, char *buf, size_t buflen)\n+{\n+  return strerror_r (errnum, buf, buflen);\n+}"}]}