{"sha": "6b192a0972e3e23144e40369933c602f476a6072", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIxOTJhMDk3MmUzZTIzMTQ0ZTQwMzY5OTMzYzYwMmY0NzZhNjA3Mg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-11-19T12:29:45Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-11-19T12:29:45Z"}, "message": "In gcc/: 2010-11-19 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/:\n2010-11-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * c-parser.c (c_parser_objc_protocol_definition): Pass attributes\n        to objc_declare_protocols.\n\nIn gcc/c-family/:\n2010-11-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * c-common.h (objc_declare_protocols): Added additional argument.\n        * stub-objc.c (objc_declare_protocol): Same change.\n        \nIn gcc/cp/:\n2010-11-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * parser.c (cp_parser_objc_protocol_declaration): Pass attributes\n        to objc_declare_protocols.\n\nIn gcc/objc/:\n2010-11-19  Nicola Pero  <nicola@nicola.brainstorm.co.uk>\n\n        * objc-act.c (lookup_protocol): Added 'warn_if_deprecated'\n        argument.  If it is 'true' and the protocol is deprecated, emit a\n        deprecation warning.\n        (objc_start_protocol): Do not warn that protocol attributes are\n        unimplemented.  Pass the attributes to start_protocol.\n        (start_protocol): Added attributes argument.  Recognize the\n        'deprecated' attribute and mark the protocols with TREE_DEPRECATED\n        if present.  Store attributes in the protocol.\n        (objc_declare_protocols): Added 'attributes' argument.  Recognize\n        the 'deprecated' attribute and mark the protocols with\n        TREE_DEPRECATED if present.  Store attributes in the protocol.\n        Updated call to lookup_protocol.\n        (objc_build_protocol_expr): Updated call to lookup_protocol.\n        (check_protocol_recursively): Same change.\n        (lookup_and_install_protocols): Same change.\n        * objc-act.h: Updated comments.\n        \nIn gcc/testsuite/:\n2010-11-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * objc.dg/attributes/proto-attribute-1.m: Updated.\n        * objc.dg/attributes/proto-attribute-2.m: New.\n        * objc.dg/attributes/proto-attribute-3.m: New.\n        * obj-c++.dg/attributes/proto-attribute-1.mm: Updated.\n        * obj-c++.dg/attributes/proto-attribute-2.mm: New.\n        * obj-c++.dg/attributes/proto-attribute-3.mm: New.\n\nFrom-SVN: r166938", "tree": {"sha": "2d50c8b8623cefaa8f652056ac3394587371943b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d50c8b8623cefaa8f652056ac3394587371943b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b192a0972e3e23144e40369933c602f476a6072", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b192a0972e3e23144e40369933c602f476a6072", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b192a0972e3e23144e40369933c602f476a6072", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b192a0972e3e23144e40369933c602f476a6072/comments", "author": null, "committer": null, "parents": [{"sha": "4144e65853590932ad57077392916203b690f8a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4144e65853590932ad57077392916203b690f8a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4144e65853590932ad57077392916203b690f8a9"}], "stats": {"total": 395, "additions": 346, "deletions": 49}, "files": [{"sha": "2ca38e4db51606405d3c2e1761c9f3999e62c65a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -1,3 +1,8 @@\n+2010-11-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* c-parser.c (c_parser_objc_protocol_definition): Pass attributes\n+\tto objc_declare_protocols.\n+\n 2010-11-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/45789"}, {"sha": "61dc8b621cf6dc8947c29442f11e4784c7eb0d0d", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -1,3 +1,8 @@\n+2010-11-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* c-common.h (objc_declare_protocols): Added additional argument.\n+\t* stub-objc.c (objc_declare_protocol): Same change.\n+\t\n 2010-11-18  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR c/33193"}, {"sha": "6c6da9d1b1d0334e8c47a0ed42b1464ad9adb860", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -996,7 +996,7 @@ extern int objc_is_public (tree, tree);\n extern tree objc_is_id (tree);\n extern void objc_declare_alias (tree, tree);\n extern void objc_declare_class (tree);\n-extern void objc_declare_protocols (tree);\n+extern void objc_declare_protocols (tree, tree);\n extern tree objc_build_message_expr (tree);\n extern tree objc_finish_message_expr (tree, tree, tree);\n extern tree objc_build_selector_expr (location_t, tree);"}, {"sha": "e1e3090f768c3ea32a31403182982a0ac2408ecc", "filename": "gcc/c-family/stub-objc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fc-family%2Fstub-objc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fc-family%2Fstub-objc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fstub-objc.c?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -126,7 +126,7 @@ objc_declare_class (tree ARG_UNUSED (list))\n }\n \n void\n-objc_declare_protocols (tree ARG_UNUSED (list))\n+objc_declare_protocols (tree ARG_UNUSED (list), tree ARG_UNUSED (attributes))\n {\n }\n "}, {"sha": "c63f001ad4d60980186d17bb890faf5d2a5e7b49", "filename": "gcc/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -7046,7 +7046,7 @@ c_parser_objc_protocol_definition (c_parser *parser, tree attributes)\n \t    break;\n \t}\n       c_parser_skip_until_found (parser, CPP_SEMICOLON, \"expected %<;%>\");\n-      objc_declare_protocols (list);\n+      objc_declare_protocols (list, attributes);\n     }\n   else\n     {"}, {"sha": "b192ed150db5c30062882ef6220ebe5885b336cf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -1,3 +1,8 @@\n+2010-11-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* parser.c (cp_parser_objc_protocol_declaration): Pass attributes\n+\tto objc_declare_protocols.\n+\n 2010-11-18  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR c/33193"}, {"sha": "c82eb036749b85bbe2e563f1b16368ecfa139698", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -22314,7 +22314,8 @@ cp_parser_objc_protocol_declaration (cp_parser* parser, tree attributes)\n   /* Try a forward declaration first.  */\n   if (tok->type == CPP_COMMA || tok->type == CPP_SEMICOLON)\n     {\n-      objc_declare_protocols (cp_parser_objc_identifier_list (parser));\n+      objc_declare_protocols (cp_parser_objc_identifier_list (parser), \n+\t\t\t      attributes);\n      finish:\n       cp_parser_consume_semicolon_at_end_of_statement (parser);\n     }"}, {"sha": "5b460a8096a87dda786c8d168000c3a1313aff6a", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -1,3 +1,22 @@\n+2010-11-19  Nicola Pero  <nicola@nicola.brainstorm.co.uk>\n+\n+\t* objc-act.c (lookup_protocol): Added 'warn_if_deprecated'\n+\targument.  If it is 'true' and the protocol is deprecated, emit a\n+\tdeprecation warning.\n+\t(objc_start_protocol): Do not warn that protocol attributes are\n+\tunimplemented.  Pass the attributes to start_protocol.\n+\t(start_protocol): Added attributes argument.  Recognize the\n+\t'deprecated' attribute and mark the protocols with TREE_DEPRECATED\n+\tif present.  Store attributes in the protocol.\n+\t(objc_declare_protocols): Added 'attributes' argument.  Recognize\n+\tthe 'deprecated' attribute and mark the protocols with\n+\tTREE_DEPRECATED if present.  Store attributes in the protocol.\n+\tUpdated call to lookup_protocol.\n+\t(objc_build_protocol_expr): Updated call to lookup_protocol.\n+\t(check_protocol_recursively): Same change.\n+\t(lookup_and_install_protocols): Same change.\n+\t* objc-act.h: Updated comments.\n+\t\n 2010-11-17  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-act.c (lookup_method_in_protocol_list): Search methods in"}, {"sha": "1f5e2b2f2e4be0f83e6561e01a55f2e7eb2a4928", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 78, "deletions": 24, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -153,7 +153,7 @@ static void objc_start_function (tree, tree, tree, tree);\n #else\n static void objc_start_function (tree, tree, tree, struct c_arg_info *);\n #endif\n-static tree start_protocol (enum tree_code, tree, tree);\n+static tree start_protocol (enum tree_code, tree, tree, tree);\n static tree build_method_decl (enum tree_code, tree, tree, tree, bool);\n static tree objc_add_method (tree, tree, int, bool);\n static tree add_instance_variable (tree, objc_ivar_visibility_kind, tree);\n@@ -234,9 +234,9 @@ enum string_section\n static tree add_objc_string (tree, enum string_section);\n static void build_selector_table_decl (void);\n \n-/* Protocol additions.  */\n+/* Protocols.  */\n \n-static tree lookup_protocol (tree);\n+static tree lookup_protocol (tree, bool);\n static tree lookup_and_install_protocols (tree);\n \n /* Type encoding.  */\n@@ -767,17 +767,11 @@ objc_start_category_interface (tree klass, tree categ,\n void\n objc_start_protocol (tree name, tree protos, tree attributes)\n {\n-  if (attributes)\n-    {\n-      if (flag_objc1_only)\n-\terror_at (input_location, \"protocol attributes are not available in Objective-C 1.0\");\t\n-      else\n-\twarning_at (input_location, OPT_Wattributes, \n-\t\t    \"protocol attributes are not available in this version\"\n-\t\t    \" of the compiler, (ignored)\");\n-    }\n+  if (flag_objc1_only && attributes)\n+    error_at (input_location, \"protocol attributes are not available in Objective-C 1.0\");\t\n+\n   objc_interface_context\n-    = start_protocol (PROTOCOL_INTERFACE_TYPE, name, protos);\n+    = start_protocol (PROTOCOL_INTERFACE_TYPE, name, protos, attributes);\n   objc_method_optional_flag = false;\n }\n \n@@ -2866,7 +2860,7 @@ check_protocol_recursively (tree proto, tree list)\n       tree pp = TREE_VALUE (p);\n \n       if (TREE_CODE (pp) == IDENTIFIER_NODE)\n-\tpp = lookup_protocol (pp);\n+\tpp = lookup_protocol (pp, /* warn if deprecated */ false);\n \n       if (pp == proto)\n \tfatal_error (\"protocol %qE has circular dependency\",\n@@ -2876,8 +2870,9 @@ check_protocol_recursively (tree proto, tree list)\n     }\n }\n \n-/* Look up PROTOCOLS, and return a list of those that are found.\n-   If none are found, return NULL.  */\n+/* Look up PROTOCOLS, and return a list of those that are found.  If\n+   none are found, return NULL.  Note that this function will emit a\n+   warning if a protocol is found and is deprecated.  */\n \n static tree\n lookup_and_install_protocols (tree protocols)\n@@ -2891,7 +2886,7 @@ lookup_and_install_protocols (tree protocols)\n   for (proto = protocols; proto; proto = TREE_CHAIN (proto))\n     {\n       tree ident = TREE_VALUE (proto);\n-      tree p = lookup_protocol (ident);\n+      tree p = lookup_protocol (ident, /* warn_if_deprecated */ true);\n \n       if (p)\n \treturn_value = chainon (return_value,\n@@ -8237,7 +8232,7 @@ tree\n objc_build_protocol_expr (tree protoname)\n {\n   tree expr;\n-  tree p = lookup_protocol (protoname);\n+  tree p = lookup_protocol (protoname, /* warn if deprecated */ true);\n \n   if (!p)\n     {\n@@ -10544,14 +10539,28 @@ add_protocol (tree protocol)\n   return protocol_chain;\n }\n \n+/* Looks up a protocol.  If 'warn_if_deprecated' is true, a warning is\n+   emitted if the protocol is deprecated.  */\n+\n static tree\n-lookup_protocol (tree ident)\n+lookup_protocol (tree ident, bool warn_if_deprecated)\n {\n   tree chain;\n \n   for (chain = protocol_chain; chain; chain = TREE_CHAIN (chain))\n     if (ident == PROTOCOL_NAME (chain))\n-      return chain;\n+      {\n+\tif (warn_if_deprecated && TREE_DEPRECATED (chain))\n+\t  {\n+\t    /* It would be nice to use warn_deprecated_use() here, but\n+\t       we are using TREE_CHAIN (which is supposed to be the\n+\t       TYPE_STUB_DECL for a TYPE) for something different.  */\n+\t    warning (OPT_Wdeprecated_declarations, \"protocol %qE is deprecated\", \n+\t\t     PROTOCOL_NAME (chain));\n+\t  }\n+\n+\treturn chain;\n+      }\n \n   return NULL_TREE;\n }\n@@ -10560,21 +10569,36 @@ lookup_protocol (tree ident)\n    they are already declared or defined, the function has no effect.  */\n \n void\n-objc_declare_protocols (tree names)\n+objc_declare_protocols (tree names, tree attributes)\n {\n   tree list;\n+  bool deprecated = false;\n \n #ifdef OBJCPLUS\n   if (current_namespace != global_namespace) {\n     error (\"Objective-C declarations may only appear in global scope\");\n   }\n #endif /* OBJCPLUS */\n \n+  /* Determine if 'deprecated', the only attribute we recognize for\n+     protocols, was used.  Ignore all other attributes.  */\n+  if (attributes)\n+    {\n+      tree attribute;\n+      for (attribute = attributes; attribute; attribute = TREE_CHAIN (attribute))\n+\t{\n+\t  tree name = TREE_PURPOSE (attribute);\n+\t  \n+\t  if (is_attribute_p  (\"deprecated\", name))\n+\t    deprecated = true;\n+\t}\n+    }\n+\n   for (list = names; list; list = TREE_CHAIN (list))\n     {\n       tree name = TREE_VALUE (list);\n \n-      if (lookup_protocol (name) == NULL_TREE)\n+      if (lookup_protocol (name, /* warn if deprecated */ false) == NULL_TREE)\n \t{\n \t  tree protocol = make_node (PROTOCOL_INTERFACE_TYPE);\n \n@@ -10585,22 +10609,44 @@ objc_declare_protocols (tree names)\n \t  add_protocol (protocol);\n \t  PROTOCOL_DEFINED (protocol) = 0;\n \t  PROTOCOL_FORWARD_DECL (protocol) = NULL_TREE;\n+\t  \n+\t  if (attributes)\n+\t    {\n+\t      TYPE_ATTRIBUTES (protocol) = attributes;\n+\t      if (deprecated)\n+\t\tTREE_DEPRECATED (protocol) = 1;\n+\t    }\n \t}\n     }\n }\n \n static tree\n-start_protocol (enum tree_code code, tree name, tree list)\n+start_protocol (enum tree_code code, tree name, tree list, tree attributes)\n {\n   tree protocol;\n+  bool deprecated = false;\n \n #ifdef OBJCPLUS\n   if (current_namespace != global_namespace) {\n     error (\"Objective-C declarations may only appear in global scope\");\n   }\n #endif /* OBJCPLUS */\n \n-  protocol = lookup_protocol (name);\n+  /* Determine if 'deprecated', the only attribute we recognize for\n+     protocols, was used.  Ignore all other attributes.  */\n+  if (attributes)\n+    {\n+      tree attribute;\n+      for (attribute = attributes; attribute; attribute = TREE_CHAIN (attribute))\n+\t{\n+\t  tree name = TREE_PURPOSE (attribute);\n+\t  \n+\t  if (is_attribute_p  (\"deprecated\", name))\n+\t    deprecated = true;\n+\t}\n+    }\n+\n+  protocol = lookup_protocol (name, /* warn_if_deprecated */ false);\n \n   if (!protocol)\n     {\n@@ -10627,6 +10673,14 @@ start_protocol (enum tree_code code, tree name, tree list)\n       warning (0, \"duplicate declaration for protocol %qE\",\n \t       name);\n     }\n+\n+  if (attributes)\n+    {\n+      TYPE_ATTRIBUTES (protocol) = attributes;\n+      if (deprecated)\n+\tTREE_DEPRECATED (protocol) = 1;\n+    }\n+\n   return protocol;\n }\n "}, {"sha": "f612e745d046dd0617c1296ff179826e09d05533", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -166,11 +166,16 @@ typedef enum objc_property_assign_semantics {\n #define PROTOCOL_OPTIONAL_CLS_METHODS(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 2)\n #define PROTOCOL_OPTIONAL_NST_METHODS(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 3)\n \n+\n /* For CATEGORY_INTERFACE_TYPE, CLASS_INTERFACE_TYPE or PROTOCOL_INTERFACE_TYPE */\n #define CLASS_PROPERTY_DECL(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 6)\n /* For CLASS_IMPLEMENTATION_TYPE or CATEGORY_IMPLEMENTATION_TYPE. */\n #define IMPL_PROPERTY_DECL(CLASS) TREE_VEC_ELT (TYPE_LANG_SLOT_1 (CLASS), 6)\n \n+/* TREE_DEPRECATED is used for a CLASS_INTERFACE_TYPE or PROTOCOL_INTERFACE_TYPE.  */\n+\n+/* TYPE_ATTRIBUTES is used for a CLASS_INTERFACE_TYPE or PROTOCOL_INTERFACE_TYPE.  */\n+\n /* ObjC-specific information pertaining to RECORD_TYPEs are stored in\n    the LANG_SPECIFIC structures, which may itself need allocating first.  */\n "}, {"sha": "2e5888491d8fe53d814d88fe2261f75667597ed9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -1,3 +1,12 @@\n+2010-11-19  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/attributes/proto-attribute-1.m: Updated.\n+\t* objc.dg/attributes/proto-attribute-2.m: New.\n+\t* objc.dg/attributes/proto-attribute-3.m: New.\n+\t* obj-c++.dg/attributes/proto-attribute-1.mm: Updated.\n+\t* obj-c++.dg/attributes/proto-attribute-2.mm: New.\n+\t* obj-c++.dg/attributes/proto-attribute-3.mm: New.\t\n+\n 2010-11-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/lto/20090210_1.c: Do not pass -fPIC on the SPARC."}, {"sha": "a852a7a6c2fd66dbdc2dc63428e39eeab4d50c40", "filename": "gcc/testsuite/obj-c++.dg/attributes/proto-attribute-1.mm", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fproto-attribute-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fproto-attribute-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fproto-attribute-1.mm?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -1,14 +1,13 @@\n /* { dg-do compile } */\n \n #include <objc/objc.h>\n-#include \"../../objc-obj-c++-shared/Object1.h\"\n \n __attribute ((deprecated)) \n-@protocol dep_proto /* { dg-warning \"protocol attributes are not available in this version\" } */\n-- (int) depprotomth; \n+@protocol dep_proto \n+- (int) depprotomth;\n @end\n \n-@interface obj : Object <dep_proto>\n+@interface obj <dep_proto> /* { dg-warning \"is deprecated\" } */\n { \n @public \n   int var; \n@@ -20,10 +19,3 @@ @implementation obj\n - (int) mth {  return var; } \n - (int) depprotomth { return var + 1; }\n @end\n-\n-int foo (void)\n-{\n-    obj *p = [obj new];\t \n-    int q = [p depprotomth];\n-    return [p mth];    \n-}"}, {"sha": "5b2eecb2f13121ac8c82fa3c772b9590341f3ea8", "filename": "gcc/testsuite/obj-c++.dg/attributes/proto-attribute-2.mm", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fproto-attribute-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fproto-attribute-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fproto-attribute-2.mm?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -0,0 +1,45 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test deprecate attribute with a forward declarations of\n+   @protocol.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+__attribute__ ((deprecated))\n+@protocol DeprecatedProtocol1;\n+\n+@protocol NonDeprecatedProtocol1;\n+\n+\n+@interface Class1 <DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n+@end\n+\n+@interface Class2 <NonDeprecatedProtocol1>\n+@end\n+\n+@interface Class3 <NonDeprecatedProtocol1, DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n+@end\n+\n+@interface Class2 (Category1) <DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n+@end\n+\n+void function1 (id <DeprecatedProtocol1> object); /* { dg-warning \"is deprecated\" } */\n+void function2 (id <NonDeprecatedProtocol1> object);\n+\n+@class Class4;\n+\n+void function3 (Class4 <DeprecatedProtocol1> *object); /* { dg-warning \"is deprecated\" } */\n+void function4 (Class4 <NonDeprecatedProtocol1> *object);\n+void function5 (Class4 <NonDeprecatedProtocol1, DeprecatedProtocol1> *object); /* { dg-warning \"is deprecated\" } */\n+\n+int function6 (void)\n+{\n+  Protocol *p1 = @protocol (DeprecatedProtocol1); /* { dg-warning \"is deprecated\" } */\n+  Protocol *p2 = @protocol (NonDeprecatedProtocol1);\n+\n+  return (p1 == p2);\n+}\n+"}, {"sha": "f509bb79198333825d73eb749e93ff97d87e4ba5", "filename": "gcc/testsuite/obj-c++.dg/attributes/proto-attribute-3.mm", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fproto-attribute-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fproto-attribute-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fproto-attribute-3.mm?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -0,0 +1,60 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test deprecate attribute with normal @protocol declarations.  */\n+\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+__attribute__ ((deprecated))\n+@protocol DeprecatedProtocol1\n+- (void) aMethod;\n+@end\n+\n+@protocol NonDeprecatedProtocol1\n+- (void) anotherMethod;\n+@end\n+\n+@protocol Protocol2 <DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n+- (void) someOtherMethod;\n+@end\n+\n+@protocol Protocol3 <NonDeprecatedProtocol1>\n+- (void) someOtherMethod2;\n+@end\n+\n+@protocol Protocol4 <NonDeprecatedProtocol1, DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n+- (void) someOtherMethod3;\n+@end\n+\n+\n+@interface Class1 <DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n+@end\n+\n+@interface Class2 <NonDeprecatedProtocol1>\n+@end\n+\n+@interface Class3 <NonDeprecatedProtocol1, DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n+@end\n+\n+@interface Class2 (Category1) <DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n+@end\n+\n+void function1 (id <DeprecatedProtocol1> object); /* { dg-warning \"is deprecated\" } */\n+void function2 (id <NonDeprecatedProtocol1> object);\n+\n+@class Class4;\n+\n+void function3 (Class4 <DeprecatedProtocol1> *object); /* { dg-warning \"is deprecated\" } */\n+void function4 (Class4 <NonDeprecatedProtocol1> *object);\n+void function5 (Class4 <NonDeprecatedProtocol1, DeprecatedProtocol1> *object); /* { dg-warning \"is deprecated\" } */\n+\n+int function6 (void)\n+{\n+  Protocol *p1 = @protocol (DeprecatedProtocol1); /* { dg-warning \"is deprecated\" } */\n+  Protocol *p2 = @protocol (NonDeprecatedProtocol1);\n+\n+  return (p1 == p2);\n+}"}, {"sha": "a852a7a6c2fd66dbdc2dc63428e39eeab4d50c40", "filename": "gcc/testsuite/objc.dg/attributes/proto-attribute-1.m", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fproto-attribute-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fproto-attribute-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fproto-attribute-1.m?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -1,14 +1,13 @@\n /* { dg-do compile } */\n \n #include <objc/objc.h>\n-#include \"../../objc-obj-c++-shared/Object1.h\"\n \n __attribute ((deprecated)) \n @protocol dep_proto \n-- (int) depprotomth; /* { dg-warning \"protocol attributes are not available in this version\" } */\n+- (int) depprotomth;\n @end\n \n-@interface obj : Object <dep_proto>\n+@interface obj <dep_proto> /* { dg-warning \"is deprecated\" } */\n { \n @public \n   int var; \n@@ -20,10 +19,3 @@ @implementation obj\n - (int) mth {  return var; } \n - (int) depprotomth { return var + 1; }\n @end\n-\n-int foo (void)\n-{\n-    obj *p = [obj new];\t \n-    int q = [p depprotomth];\n-    return [p mth];    \n-}"}, {"sha": "5b2eecb2f13121ac8c82fa3c772b9590341f3ea8", "filename": "gcc/testsuite/objc.dg/attributes/proto-attribute-2.m", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fproto-attribute-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fproto-attribute-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fproto-attribute-2.m?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -0,0 +1,45 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test deprecate attribute with a forward declarations of\n+   @protocol.  */\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+__attribute__ ((deprecated))\n+@protocol DeprecatedProtocol1;\n+\n+@protocol NonDeprecatedProtocol1;\n+\n+\n+@interface Class1 <DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n+@end\n+\n+@interface Class2 <NonDeprecatedProtocol1>\n+@end\n+\n+@interface Class3 <NonDeprecatedProtocol1, DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n+@end\n+\n+@interface Class2 (Category1) <DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n+@end\n+\n+void function1 (id <DeprecatedProtocol1> object); /* { dg-warning \"is deprecated\" } */\n+void function2 (id <NonDeprecatedProtocol1> object);\n+\n+@class Class4;\n+\n+void function3 (Class4 <DeprecatedProtocol1> *object); /* { dg-warning \"is deprecated\" } */\n+void function4 (Class4 <NonDeprecatedProtocol1> *object);\n+void function5 (Class4 <NonDeprecatedProtocol1, DeprecatedProtocol1> *object); /* { dg-warning \"is deprecated\" } */\n+\n+int function6 (void)\n+{\n+  Protocol *p1 = @protocol (DeprecatedProtocol1); /* { dg-warning \"is deprecated\" } */\n+  Protocol *p2 = @protocol (NonDeprecatedProtocol1);\n+\n+  return (p1 == p2);\n+}\n+"}, {"sha": "f509bb79198333825d73eb749e93ff97d87e4ba5", "filename": "gcc/testsuite/objc.dg/attributes/proto-attribute-3.m", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fproto-attribute-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b192a0972e3e23144e40369933c602f476a6072/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fproto-attribute-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fproto-attribute-3.m?ref=6b192a0972e3e23144e40369933c602f476a6072", "patch": "@@ -0,0 +1,60 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, November 2010.  */\n+/* { dg-do compile } */\n+\n+/* Test deprecate attribute with normal @protocol declarations.  */\n+\n+\n+#include <stdlib.h>\n+#include <objc/objc.h>\n+#include <objc/runtime.h>\n+\n+__attribute__ ((deprecated))\n+@protocol DeprecatedProtocol1\n+- (void) aMethod;\n+@end\n+\n+@protocol NonDeprecatedProtocol1\n+- (void) anotherMethod;\n+@end\n+\n+@protocol Protocol2 <DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n+- (void) someOtherMethod;\n+@end\n+\n+@protocol Protocol3 <NonDeprecatedProtocol1>\n+- (void) someOtherMethod2;\n+@end\n+\n+@protocol Protocol4 <NonDeprecatedProtocol1, DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n+- (void) someOtherMethod3;\n+@end\n+\n+\n+@interface Class1 <DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n+@end\n+\n+@interface Class2 <NonDeprecatedProtocol1>\n+@end\n+\n+@interface Class3 <NonDeprecatedProtocol1, DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n+@end\n+\n+@interface Class2 (Category1) <DeprecatedProtocol1> /* { dg-warning \"is deprecated\" } */\n+@end\n+\n+void function1 (id <DeprecatedProtocol1> object); /* { dg-warning \"is deprecated\" } */\n+void function2 (id <NonDeprecatedProtocol1> object);\n+\n+@class Class4;\n+\n+void function3 (Class4 <DeprecatedProtocol1> *object); /* { dg-warning \"is deprecated\" } */\n+void function4 (Class4 <NonDeprecatedProtocol1> *object);\n+void function5 (Class4 <NonDeprecatedProtocol1, DeprecatedProtocol1> *object); /* { dg-warning \"is deprecated\" } */\n+\n+int function6 (void)\n+{\n+  Protocol *p1 = @protocol (DeprecatedProtocol1); /* { dg-warning \"is deprecated\" } */\n+  Protocol *p2 = @protocol (NonDeprecatedProtocol1);\n+\n+  return (p1 == p2);\n+}"}]}