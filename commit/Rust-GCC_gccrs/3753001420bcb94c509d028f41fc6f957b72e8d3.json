{"sha": "3753001420bcb94c509d028f41fc6f957b72e8d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc1MzAwMTQyMGJjYjk0YzUwOWQwMjhmNDFmYzZmOTU3YjcyZThkMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-02-26T16:01:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-02-26T16:01:52Z"}, "message": "re PR tree-optimization/43186 (A loop in tree_unroll_loops_completely never ends)\n\n2010-02-26  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/43186\n\t* gimple.h (gimple_fold): Remove.\n\t* gimple.c (gimple_fold): Remove.  Inline into single user ...\n\t* tree-cfgcleanup.c (cleanup_control_expr_graph): ... here.\n\tTry harder for conditions.\n\n\t* gcc.c-torture/compile/pr43186.c: New testcase.\n\nFrom-SVN: r157093", "tree": {"sha": "5b2a9657dd7206c0286ba4768950454a5eb7b9fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b2a9657dd7206c0286ba4768950454a5eb7b9fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3753001420bcb94c509d028f41fc6f957b72e8d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3753001420bcb94c509d028f41fc6f957b72e8d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3753001420bcb94c509d028f41fc6f957b72e8d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3753001420bcb94c509d028f41fc6f957b72e8d3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "095c7b3cbd4094944097b95b4a2c00d475b47ca9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/095c7b3cbd4094944097b95b4a2c00d475b47ca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/095c7b3cbd4094944097b95b4a2c00d475b47ca9"}], "stats": {"total": 117, "additions": 67, "deletions": 50}, "files": [{"sha": "91b9555e3064d827caf512c9d341f81051466949", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3753001420bcb94c509d028f41fc6f957b72e8d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3753001420bcb94c509d028f41fc6f957b72e8d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3753001420bcb94c509d028f41fc6f957b72e8d3", "patch": "@@ -1,3 +1,11 @@\n+2010-02-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43186\n+\t* gimple.h (gimple_fold): Remove.\n+\t* gimple.c (gimple_fold): Remove.  Inline into single user ...\n+\t* tree-cfgcleanup.c (cleanup_control_expr_graph): ... here.\n+\tTry harder for conditions.\n+\n 2010-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/43190"}, {"sha": "717a020296dfb4bd60704b5a1ae0f8d3cdc7c69d", "filename": "gcc/gimple.c", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3753001420bcb94c509d028f41fc6f957b72e8d3/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3753001420bcb94c509d028f41fc6f957b72e8d3/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=3753001420bcb94c509d028f41fc6f957b72e8d3", "patch": "@@ -1835,54 +1835,6 @@ gimple_set_bb (gimple stmt, basic_block bb)\n }\n \n \n-/* Fold the expression computed by STMT.  If the expression can be\n-   folded, return the folded result, otherwise return NULL.  STMT is\n-   not modified.  */\n-\n-tree\n-gimple_fold (const_gimple stmt)\n-{\n-  location_t loc = gimple_location (stmt);\n-  switch (gimple_code (stmt))\n-    {\n-    case GIMPLE_COND:\n-      return fold_binary_loc (loc, gimple_cond_code (stmt),\n-\t\t\t  boolean_type_node,\n-\t\t\t  gimple_cond_lhs (stmt),\n-\t\t\t  gimple_cond_rhs (stmt));\n-\n-    case GIMPLE_ASSIGN:\n-      switch (get_gimple_rhs_class (gimple_assign_rhs_code (stmt)))\n-\t{\n-\tcase GIMPLE_UNARY_RHS:\n-\t  return fold_unary_loc (loc, gimple_assign_rhs_code (stmt),\n-\t\t\t     TREE_TYPE (gimple_assign_lhs (stmt)),\n-\t\t\t     gimple_assign_rhs1 (stmt));\n-\tcase GIMPLE_BINARY_RHS:\n-\t  return fold_binary_loc (loc, gimple_assign_rhs_code (stmt),\n-\t\t\t      TREE_TYPE (gimple_assign_lhs (stmt)),\n-\t\t\t      gimple_assign_rhs1 (stmt),\n-\t\t\t      gimple_assign_rhs2 (stmt));\n-\tcase GIMPLE_SINGLE_RHS:\n-\t  return fold (gimple_assign_rhs1 (stmt));\n-\tdefault:;\n-\t}\n-      break;\n-\n-    case GIMPLE_SWITCH:\n-      return gimple_switch_index (stmt);\n-\n-    case GIMPLE_CALL:\n-      return NULL_TREE;\n-\n-    default:\n-      break;\n-    }\n-\n-  gcc_unreachable ();\n-}\n-\n-\n /* Modify the RHS of the assignment pointed-to by GSI using the\n    operands in the expression tree EXPR.\n "}, {"sha": "65cb6e116409453a5bc4345a45333ae79c50d286", "filename": "gcc/gimple.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3753001420bcb94c509d028f41fc6f957b72e8d3/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3753001420bcb94c509d028f41fc6f957b72e8d3/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=3753001420bcb94c509d028f41fc6f957b72e8d3", "patch": "@@ -841,7 +841,6 @@ bool gimple_assign_ssa_name_copy_p (gimple);\n bool gimple_assign_single_p (gimple);\n bool gimple_assign_unary_nop_p (gimple);\n void gimple_set_bb (gimple, struct basic_block_def *);\n-tree gimple_fold (const_gimple);\n void gimple_assign_set_rhs_from_tree (gimple_stmt_iterator *, tree);\n void gimple_assign_set_rhs_with_ops (gimple_stmt_iterator *, enum tree_code,\n \t\t\t\t     tree, tree);"}, {"sha": "ea4404d6149c7b841ab2c63e27c2730c73060636", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3753001420bcb94c509d028f41fc6f957b72e8d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3753001420bcb94c509d028f41fc6f957b72e8d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3753001420bcb94c509d028f41fc6f957b72e8d3", "patch": "@@ -1,3 +1,8 @@\n+2010-02-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43186\n+\t* gcc.c-torture/compile/pr43186.c: New testcase.\n+\n 2010-02-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/43190"}, {"sha": "d235e9730de81d6a7cd44fb2b8ff09b11fbc8761", "filename": "gcc/testsuite/gcc.c-torture/compile/pr43186.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3753001420bcb94c509d028f41fc6f957b72e8d3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43186.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3753001420bcb94c509d028f41fc6f957b72e8d3/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43186.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr43186.c?ref=3753001420bcb94c509d028f41fc6f957b72e8d3", "patch": "@@ -0,0 +1,15 @@\n+int n;\n+\n+void foo (int i)\n+{\n+  int a, b;\n+\n+  if (!i)\n+    for (a = 1; a < 3; a++)\n+      if (a)\n+\tfor (b = 1; b < 3; b++)\n+\t  foo (b);\n+\n+  n++;\n+}\n+"}, {"sha": "68929f8de26da202d7c35fff44b96dfc84931078", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3753001420bcb94c509d028f41fc6f957b72e8d3/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3753001420bcb94c509d028f41fc6f957b72e8d3/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=3753001420bcb94c509d028f41fc6f957b72e8d3", "patch": "@@ -90,9 +90,47 @@ cleanup_control_expr_graph (basic_block bb, gimple_stmt_iterator gsi)\n       edge e;\n       edge_iterator ei;\n       bool warned;\n+      location_t loc;\n \n       fold_defer_overflow_warnings ();\n-      val = gimple_fold (stmt);\n+      loc = gimple_location (stmt);\n+      switch (gimple_code (stmt))\n+\t{\n+\tcase GIMPLE_COND:\n+\t  {\n+\t    tree lhs = gimple_cond_lhs (stmt);\n+\t    tree rhs = gimple_cond_rhs (stmt);\n+\t    /* For conditions try harder and lookup single-argument\n+\t       PHI nodes.  Only do so from the same basic-block though\n+\t       as other basic-blocks may be dead already.  */\n+\t    if (TREE_CODE (lhs) == SSA_NAME)\n+\t      {\n+\t\tgimple def_stmt = SSA_NAME_DEF_STMT (lhs);\n+\t\tif (gimple_code (def_stmt) == GIMPLE_PHI\n+\t\t    && gimple_phi_num_args (def_stmt) == 1\n+\t\t    && gimple_bb (def_stmt) == gimple_bb (stmt))\n+\t\t  lhs = PHI_ARG_DEF (def_stmt, 0);\n+\t      }\n+\t    if (TREE_CODE (rhs) == SSA_NAME)\n+\t      {\n+\t\tgimple def_stmt = SSA_NAME_DEF_STMT (rhs);\n+\t\tif (gimple_code (def_stmt) == GIMPLE_PHI\n+\t\t    && gimple_phi_num_args (def_stmt) == 1\n+\t\t    && gimple_bb (def_stmt) == gimple_bb (stmt))\n+\t\t  rhs = PHI_ARG_DEF (def_stmt, 0);\n+\t      }\n+\t    val = fold_binary_loc (loc, gimple_cond_code (stmt),\n+\t\t\t\t   boolean_type_node, lhs, rhs);\n+\t    break;\n+\t  }\n+\n+\tcase GIMPLE_SWITCH:\n+\t  val = gimple_switch_index (stmt);\n+\t  break;\n+\n+\tdefault:\n+\t  val = NULL_TREE;\n+\t}\n       taken_edge = find_taken_edge (bb, val);\n       if (!taken_edge)\n \t{"}]}