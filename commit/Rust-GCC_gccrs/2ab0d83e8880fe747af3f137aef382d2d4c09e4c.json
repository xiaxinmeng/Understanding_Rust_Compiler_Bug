{"sha": "2ab0d83e8880fe747af3f137aef382d2d4c09e4c", "node_id": "C_kwDOANBUbNoAKDJhYjBkODNlODg4MGZlNzQ3YWYzZjEzN2FlZjM4MmQyZDRjMDllNGM", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-04-14T14:31:54Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-04-14T14:31:54Z"}, "message": "libstdc++: Move down definitions of ranges::cbegin/cend/cetc\n\nThis moves down the definitions of the range const-access CPOs to after\nthe definition of input_range in preparation for implementing P2278R4\nwhich redefines these CPOs in a way that indirectly uses input_range.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_base.h (__cust_access::__as_const)\n\t(__cust_access::_CBegin, __cust::cbegin)\n\t(__cust_access::_CEnd, __cust::cend)\n\t(__cust_access::_CRBegin, __cust::crbegin)\n\t(__cust_access::_CREnd, __cust::crend)\n\t(__cust_access::_CData, __cust::cdata): Move down definitions to\n\tshortly after the definition of input_range.", "tree": {"sha": "89c3d1ac46e2f45cce36a081380071a394633006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89c3d1ac46e2f45cce36a081380071a394633006"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ab0d83e8880fe747af3f137aef382d2d4c09e4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab0d83e8880fe747af3f137aef382d2d4c09e4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ab0d83e8880fe747af3f137aef382d2d4c09e4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab0d83e8880fe747af3f137aef382d2d4c09e4c/comments", "author": null, "committer": null, "parents": [{"sha": "7639bf34fa1942b0a56a0ba441637c1ce75e1127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7639bf34fa1942b0a56a0ba441637c1ce75e1127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7639bf34fa1942b0a56a0ba441637c1ce75e1127"}], "stats": {"total": 174, "additions": 91, "deletions": 83}, "files": [{"sha": "c89cb3e976a6f10923ac697c64d2d5e6cc7bedc9", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 91, "deletions": 83, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab0d83e8880fe747af3f137aef382d2d4c09e4c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab0d83e8880fe747af3f137aef382d2d4c09e4c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=2ab0d83e8880fe747af3f137aef382d2d4c09e4c", "patch": "@@ -177,45 +177,6 @@ namespace ranges\n \t}\n     };\n \n-    // If _To is an lvalue-reference, return const _Tp&, otherwise const _Tp&&.\n-    template<typename _To, typename _Tp>\n-      constexpr decltype(auto)\n-      __as_const(_Tp& __t) noexcept\n-      {\n-\tstatic_assert(std::is_same_v<_To&, _Tp&>);\n-\n-\tif constexpr (is_lvalue_reference_v<_To>)\n-\t  return const_cast<const _Tp&>(__t);\n-\telse\n-\t  return static_cast<const _Tp&&>(__t);\n-      }\n-\n-    struct _CBegin\n-    {\n-      template<typename _Tp>\n-\t[[nodiscard]]\n-\tconstexpr auto\n-\toperator()(_Tp&& __e) const\n-\tnoexcept(noexcept(_Begin{}(__cust_access::__as_const<_Tp>(__e))))\n-\trequires requires { _Begin{}(__cust_access::__as_const<_Tp>(__e)); }\n-\t{\n-\t  return _Begin{}(__cust_access::__as_const<_Tp>(__e));\n-\t}\n-    };\n-\n-    struct _CEnd final\n-    {\n-      template<typename _Tp>\n-\t[[nodiscard]]\n-\tconstexpr auto\n-\toperator()(_Tp&& __e) const\n-\tnoexcept(noexcept(_End{}(__cust_access::__as_const<_Tp>(__e))))\n-\trequires requires { _End{}(__cust_access::__as_const<_Tp>(__e)); }\n-\t{\n-\t  return _End{}(__cust_access::__as_const<_Tp>(__e));\n-\t}\n-    };\n-\n     template<typename _Tp>\n       concept __member_rbegin = requires(_Tp& __t)\n \t{\n@@ -337,32 +298,6 @@ namespace ranges\n \t}\n     };\n \n-    struct _CRBegin\n-    {\n-      template<typename _Tp>\n-\t[[nodiscard]]\n-\tconstexpr auto\n-\toperator()(_Tp&& __e) const\n-\tnoexcept(noexcept(_RBegin{}(__cust_access::__as_const<_Tp>(__e))))\n-\trequires requires { _RBegin{}(__cust_access::__as_const<_Tp>(__e)); }\n-\t{\n-\t  return _RBegin{}(__cust_access::__as_const<_Tp>(__e));\n-\t}\n-    };\n-\n-    struct _CREnd\n-    {\n-      template<typename _Tp>\n-\t[[nodiscard]]\n-\tconstexpr auto\n-\toperator()(_Tp&& __e) const\n-\tnoexcept(noexcept(_REnd{}(__cust_access::__as_const<_Tp>(__e))))\n-\trequires requires { _REnd{}(__cust_access::__as_const<_Tp>(__e)); }\n-\t{\n-\t  return _REnd{}(__cust_access::__as_const<_Tp>(__e));\n-\t}\n-    };\n-\n     template<typename _Tp>\n       concept __member_size = !disable_sized_range<remove_cvref_t<_Tp>>\n \t&& requires(_Tp& __t)\n@@ -547,36 +482,18 @@ namespace ranges\n \t}\n     };\n \n-    struct _CData\n-    {\n-      template<typename _Tp>\n-\t[[nodiscard]]\n-\tconstexpr auto\n-\toperator()(_Tp&& __e) const\n-\tnoexcept(noexcept(_Data{}(__cust_access::__as_const<_Tp>(__e))))\n-\trequires requires { _Data{}(__cust_access::__as_const<_Tp>(__e)); }\n-\t{\n-\t  return _Data{}(__cust_access::__as_const<_Tp>(__e));\n-\t}\n-    };\n-\n   } // namespace __cust_access\n \n   inline namespace __cust\n   {\n     inline constexpr __cust_access::_Begin begin{};\n     inline constexpr __cust_access::_End end{};\n-    inline constexpr __cust_access::_CBegin cbegin{};\n-    inline constexpr __cust_access::_CEnd cend{};\n     inline constexpr __cust_access::_RBegin rbegin{};\n     inline constexpr __cust_access::_REnd rend{};\n-    inline constexpr __cust_access::_CRBegin crbegin{};\n-    inline constexpr __cust_access::_CREnd crend{};\n     inline constexpr __cust_access::_Size size{};\n     inline constexpr __cust_access::_SSize ssize{};\n     inline constexpr __cust_access::_Empty empty{};\n     inline constexpr __cust_access::_Data data{};\n-    inline constexpr __cust_access::_CData cdata{};\n   }\n \n   /// [range.range] The range concept.\n@@ -690,6 +607,97 @@ namespace ranges\n     concept common_range\n       = range<_Tp> && same_as<iterator_t<_Tp>, sentinel_t<_Tp>>;\n \n+  namespace __cust_access\n+  {\n+    // If _To is an lvalue-reference, return const _Tp&, otherwise const _Tp&&.\n+    template<typename _To, typename _Tp>\n+      constexpr decltype(auto)\n+      __as_const(_Tp& __t) noexcept\n+      {\n+\tstatic_assert(std::is_same_v<_To&, _Tp&>);\n+\n+\tif constexpr (is_lvalue_reference_v<_To>)\n+\t  return const_cast<const _Tp&>(__t);\n+\telse\n+\t  return static_cast<const _Tp&&>(__t);\n+      }\n+\n+    struct _CBegin\n+    {\n+      template<typename _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __e) const\n+\tnoexcept(noexcept(_Begin{}(__cust_access::__as_const<_Tp>(__e))))\n+\trequires requires { _Begin{}(__cust_access::__as_const<_Tp>(__e)); }\n+\t{\n+\t  return _Begin{}(__cust_access::__as_const<_Tp>(__e));\n+\t}\n+    };\n+\n+    struct _CEnd final\n+    {\n+      template<typename _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __e) const\n+\tnoexcept(noexcept(_End{}(__cust_access::__as_const<_Tp>(__e))))\n+\trequires requires { _End{}(__cust_access::__as_const<_Tp>(__e)); }\n+\t{\n+\t  return _End{}(__cust_access::__as_const<_Tp>(__e));\n+\t}\n+    };\n+\n+    struct _CRBegin\n+    {\n+      template<typename _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __e) const\n+\tnoexcept(noexcept(_RBegin{}(__cust_access::__as_const<_Tp>(__e))))\n+\trequires requires { _RBegin{}(__cust_access::__as_const<_Tp>(__e)); }\n+\t{\n+\t  return _RBegin{}(__cust_access::__as_const<_Tp>(__e));\n+\t}\n+    };\n+\n+    struct _CREnd\n+    {\n+      template<typename _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __e) const\n+\tnoexcept(noexcept(_REnd{}(__cust_access::__as_const<_Tp>(__e))))\n+\trequires requires { _REnd{}(__cust_access::__as_const<_Tp>(__e)); }\n+\t{\n+\t  return _REnd{}(__cust_access::__as_const<_Tp>(__e));\n+\t}\n+    };\n+\n+    struct _CData\n+    {\n+      template<typename _Tp>\n+\t[[nodiscard]]\n+\tconstexpr auto\n+\toperator()(_Tp&& __e) const\n+\tnoexcept(noexcept(_Data{}(__cust_access::__as_const<_Tp>(__e))))\n+\trequires requires { _Data{}(__cust_access::__as_const<_Tp>(__e)); }\n+\t{\n+\t  return _Data{}(__cust_access::__as_const<_Tp>(__e));\n+\t}\n+    };\n+\n+  } // namespace __cust_access\n+\n+  inline namespace __cust\n+  {\n+    inline constexpr __cust_access::_CBegin cbegin{};\n+    inline constexpr __cust_access::_CEnd cend{};\n+    inline constexpr __cust_access::_CRBegin crbegin{};\n+    inline constexpr __cust_access::_CREnd crend{};\n+    inline constexpr __cust_access::_CData cdata{};\n+  }\n+\n   namespace __detail\n   {\n     template<typename _Tp>"}]}