{"sha": "e44713f730a808084ead53f7d833bce8acf7eec5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ0NzEzZjczMGE4MDgwODRlYWQ1M2Y3ZDgzM2JjZThhY2Y3ZWVjNQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2001-05-14T03:40:04Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2001-05-14T03:40:04Z"}, "message": "rs6000.h (EXCEPTION_SECTION): Move to...\n\n\t* config/rs6000/rs6000.h (EXCEPTION_SECTION): Move to...\n\t* config/rs6000/aix.h (EXCEPTION_SECTION): ... here.\n\t* config/rs6000/sysv4.h (CONST_SECTION_ASM_OP): Delete.\n\t(ASM_PREFERRED_EH_DATA_FORMAT): Define.\n\t(EXCEPTION_SECTION): Define.\n\nFrom-SVN: r42058", "tree": {"sha": "3a213ddd12c942b9c9c6224a65e74efde7984e05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a213ddd12c942b9c9c6224a65e74efde7984e05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e44713f730a808084ead53f7d833bce8acf7eec5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e44713f730a808084ead53f7d833bce8acf7eec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e44713f730a808084ead53f7d833bce8acf7eec5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e44713f730a808084ead53f7d833bce8acf7eec5/comments", "author": null, "committer": null, "parents": [{"sha": "3fe68d0af3a9ad980b7989620028a4288e4d0a5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe68d0af3a9ad980b7989620028a4288e4d0a5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe68d0af3a9ad980b7989620028a4288e4d0a5c"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "a6929b444f6640685eec5a68f6afeb87c411fa35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44713f730a808084ead53f7d833bce8acf7eec5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44713f730a808084ead53f7d833bce8acf7eec5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e44713f730a808084ead53f7d833bce8acf7eec5", "patch": "@@ -1,3 +1,11 @@\n+2001-05-13  Geoff Keating  <geoffk@redhat.com>\n+\n+\t* config/rs6000/rs6000.h (EXCEPTION_SECTION): Move to...\n+\t* config/rs6000/aix.h (EXCEPTION_SECTION): ... here.\n+\t* config/rs6000/sysv4.h (CONST_SECTION_ASM_OP): Delete.\n+\t(ASM_PREFERRED_EH_DATA_FORMAT): Define.\n+\t(EXCEPTION_SECTION): Define.\n+\n 2001-05-13  Zack Weinberg  <zackw@stanford.edu>\n \n \t* libgcc2.c, libgcc2.h: Restore __eprintf.  Label as used for"}, {"sha": "4b0d28aaaf4406dfde0df6dd76bd2e21913d337b", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44713f730a808084ead53f7d833bce8acf7eec5/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44713f730a808084ead53f7d833bce8acf7eec5/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=e44713f730a808084ead53f7d833bce8acf7eec5", "patch": "@@ -594,6 +594,12 @@ toc_section ()\t\t\t\t\t\t\\\n        putc ('\\n', ASM_OUT_FILE);\t\t\t\t\\\n   } while (0)\n \n+/* Define the name of the section to use for the exception tables.\n+   TODO: test and see if we can use read_only_data_section, if so,\n+   remove this.  */\n+\n+#define EXCEPTION_SECTION data_section\n+\n /* __throw will restore its own return address to be the same as the\n    return address of the function that the throw is being made to.\n    This is unfortunate, because we want to check the original"}, {"sha": "39c79c148ad766c91ba94d05f734248787de53f7", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44713f730a808084ead53f7d833bce8acf7eec5/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44713f730a808084ead53f7d833bce8acf7eec5/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=e44713f730a808084ead53f7d833bce8acf7eec5", "patch": "@@ -2318,12 +2318,6 @@ extern int rs6000_compare_fp_p;\n \n #define TARGET_MEM_FUNCTIONS\n \n-/* Define the name of the section to use for the exception tables.\n-   TODO: test and see if we can use read_only_data_section, if so,\n-   remove this.  */\n-\n-#define EXCEPTION_SECTION data_section\n-\n /* Flag to say the TOC is initialized */\n extern int toc_initialized;\n "}, {"sha": "64d41312f1853f4cc9baad9ae07c0585a5b183d6", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e44713f730a808084ead53f7d833bce8acf7eec5/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e44713f730a808084ead53f7d833bce8acf7eec5/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=e44713f730a808084ead53f7d833bce8acf7eec5", "patch": "@@ -433,13 +433,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define\tMINIMAL_TOC_SECTION_ASM_OP \\\n   ((TARGET_RELOCATABLE || flag_pic) ? \"\\t.section\\t\\\".got2\\\",\\\"aw\\\"\" : \"\\t.section\\t\\\".got1\\\",\\\"aw\\\"\")\n \n-/* Put relocatable data in .data, not .rodata so initialized pointers can be updated.  */\n-/* Override elfos.h definition.  */\n-#undef\tCONST_SECTION_ASM_OP\n-#define\tCONST_SECTION_ASM_OP \\\n-  ((TARGET_RELOCATABLE || flag_pic) ? \"\\t.section\\t\\\".data\\\"\\t# .rodata\" : \"\\t.section\\t\\\".rodata\\\"\")\n-\n-\n #define\tSDATA_SECTION_ASM_OP \"\\t.section\\t\\\".sdata\\\",\\\"aw\\\"\"\n #define\tSDATA2_SECTION_ASM_OP \"\\t.section\\t\\\".sdata2\\\",\\\"a\\\"\"\n #define\tSBSS_SECTION_ASM_OP \\\n@@ -1602,3 +1595,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t    = init_one_libfunc (SQRTTF_LIBCALL);\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n+\n+/* Select a format to encode pointers in exception handling data.  CODE\n+   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n+   true if the symbol may be affected by dynamic relocations.  */\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)      \t\t\t     \\\n+  (flag_pic \t\t\t\t\t\t\t\t     \\\n+   ? (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel | DW_EH_PE_sdata4) \\\n+   : DW_EH_PE_absptr)\n+ \n+#define EXCEPTION_SECTION readonly_data_section"}]}