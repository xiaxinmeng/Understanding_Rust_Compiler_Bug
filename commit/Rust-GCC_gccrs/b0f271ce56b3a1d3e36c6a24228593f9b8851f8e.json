{"sha": "b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBmMjcxY2U1NmIzYTFkM2UzNmM2YTI0MjI4NTkzZjliODg1MWY4ZQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2017-05-12T09:18:34Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2017-05-12T09:18:34Z"}, "message": "[PR middle-end/69921] Use \"oacc kernels parallelized\" attribute for parallelized OpenACC kernels\n\n\tgcc/\n\tPR middle-end/69921\n\t* tree-parloops.c (create_parallel_loop): Set \"oacc kernels\n\tparallelized\" attribute for parallelized OpenACC kernels.\n\t* omp-offload.c (execute_oacc_device_lower): Use it.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/classify-kernels-unparallelized.c: Adjust.\n\t* c-c++-common/goacc/classify-kernels.c: Likewise.\n\t* c-c++-common/goacc/kernels-counter-vars-function-scope.c:\n\tLikewise.\n\t* c-c++-common/goacc/kernels-double-reduction-n.c: Likewise.\n\t* c-c++-common/goacc/kernels-double-reduction.c: Likewise.\n\t* c-c++-common/goacc/kernels-loop-2.c: Likewise.\n\t* c-c++-common/goacc/kernels-loop-3.c: Likewise.\n\t* c-c++-common/goacc/kernels-loop-g.c: Likewise.\n\t* c-c++-common/goacc/kernels-loop-mod-not-zero.c: Likewise.\n\t* c-c++-common/goacc/kernels-loop-n.c: Likewise.\n\t* c-c++-common/goacc/kernels-loop-nest.c: Likewise.\n\t* c-c++-common/goacc/kernels-loop.c: Likewise.\n\t* c-c++-common/goacc/kernels-one-counter-var.c: Likewise.\n\t* c-c++-common/goacc/kernels-reduction.c: Likewise.\n\t* gfortran.dg/goacc/classify-kernels-unparallelized.f95: Likewise.\n\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop-2.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop-data-2.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop-data-enter-exit-2.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop-data-enter-exit.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop-data-update.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop-data.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop-n.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop.f95: Likewise.\n\nFrom-SVN: r247957", "tree": {"sha": "e7a1167a4d49115dbd14d780819cc4f8823153e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7a1167a4d49115dbd14d780819cc4f8823153e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25651634436238d505c586fd308cdd5b6c5db8f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25651634436238d505c586fd308cdd5b6c5db8f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25651634436238d505c586fd308cdd5b6c5db8f9"}], "stats": {"total": 149, "additions": 89, "deletions": 60}, "files": [{"sha": "580a3db9853cfd7e3fe8921ff0ec5d1a73e4f3f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -1,5 +1,10 @@\n 2017-05-12  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR middle-end/69921\n+\t* tree-parloops.c (create_parallel_loop): Set \"oacc kernels\n+\tparallelized\" attribute for parallelized OpenACC kernels.\n+\t* omp-offload.c (execute_oacc_device_lower): Use it.\n+\n \t* omp-expand.c (expand_omp_target) <GF_OMP_TARGET_KIND_OACC_KERNELS>:\n \tSet \"oacc kernels\" attribute.\n \t* omp-general.c (oacc_set_fn_attrib): Remove is_kernel formal"}, {"sha": "9372f9e06110df2235e530413d5cc97ee52f8bb5", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -1444,6 +1444,13 @@ execute_oacc_device_lower ()\n       flag_openacc_dims = (char *)&flag_openacc_dims;\n     }\n \n+  bool is_oacc_kernels\n+    = (lookup_attribute (\"oacc kernels\",\n+\t\t\t DECL_ATTRIBUTES (current_function_decl)) != NULL);\n+  bool is_oacc_kernels_parallelized\n+    = (lookup_attribute (\"oacc kernels parallelized\",\n+\t\t\t DECL_ATTRIBUTES (current_function_decl)) != NULL);\n+\n   /* Discover, partition and process the loops.  */\n   oacc_loop *loops = oacc_loop_discovery ();\n   int fn_level = oacc_fn_attrib_level (attrs);\n@@ -1453,17 +1460,26 @@ execute_oacc_device_lower ()\n       if (fn_level >= 0)\n \tfprintf (dump_file, \"Function is OpenACC routine level %d\\n\",\n \t\t fn_level);\n-      else if (lookup_attribute (\"oacc kernels\",\n-\t\t\t\t DECL_ATTRIBUTES (current_function_decl)))\n-\tfprintf (dump_file, \"Function is OpenACC kernels offload\\n\");\n+      else if (is_oacc_kernels)\n+\tfprintf (dump_file, \"Function is %s OpenACC kernels offload\\n\",\n+\t\t (is_oacc_kernels_parallelized\n+\t\t  ? \"parallelized\" : \"unparallelized\"));\n       else\n \tfprintf (dump_file, \"Function is OpenACC parallel offload\\n\");\n     }\n \n   unsigned outer_mask = fn_level >= 0 ? GOMP_DIM_MASK (fn_level) - 1 : 0;\n   unsigned used_mask = oacc_loop_partition (loops, outer_mask);\n-  int dims[GOMP_DIM_MAX];\n+  /* OpenACC kernels constructs are special: they currently don't use the\n+     generic oacc_loop infrastructure and attribute/dimension processing.  */\n+  if (is_oacc_kernels && is_oacc_kernels_parallelized)\n+    {\n+      /* Parallelized OpenACC kernels constructs use gang parallelism.  See\n+\t also tree-parloops.c:create_parallel_loop.  */\n+      used_mask |= GOMP_DIM_MASK (GOMP_DIM_GANG);\n+    }\n \n+  int dims[GOMP_DIM_MAX];\n   oacc_validate_dims (current_function_decl, attrs, dims, fn_level, used_mask);\n \n   if (dump_file)"}, {"sha": "e1e2641d51e7ea316334bc755b7b2843b14c793b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -1,5 +1,31 @@\n 2017-05-12  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\t* c-c++-common/goacc/classify-kernels-unparallelized.c: Adjust.\n+\t* c-c++-common/goacc/classify-kernels.c: Likewise.\n+\t* c-c++-common/goacc/kernels-counter-vars-function-scope.c:\n+\tLikewise.\n+\t* c-c++-common/goacc/kernels-double-reduction-n.c: Likewise.\n+\t* c-c++-common/goacc/kernels-double-reduction.c: Likewise.\n+\t* c-c++-common/goacc/kernels-loop-2.c: Likewise.\n+\t* c-c++-common/goacc/kernels-loop-3.c: Likewise.\n+\t* c-c++-common/goacc/kernels-loop-g.c: Likewise.\n+\t* c-c++-common/goacc/kernels-loop-mod-not-zero.c: Likewise.\n+\t* c-c++-common/goacc/kernels-loop-n.c: Likewise.\n+\t* c-c++-common/goacc/kernels-loop-nest.c: Likewise.\n+\t* c-c++-common/goacc/kernels-loop.c: Likewise.\n+\t* c-c++-common/goacc/kernels-one-counter-var.c: Likewise.\n+\t* c-c++-common/goacc/kernels-reduction.c: Likewise.\n+\t* gfortran.dg/goacc/classify-kernels-unparallelized.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.\n+\t* gfortran.dg/goacc/kernels-loop-2.f95: Likewise.\n+\t* gfortran.dg/goacc/kernels-loop-data-2.f95: Likewise.\n+\t* gfortran.dg/goacc/kernels-loop-data-enter-exit-2.f95: Likewise.\n+\t* gfortran.dg/goacc/kernels-loop-data-enter-exit.f95: Likewise.\n+\t* gfortran.dg/goacc/kernels-loop-data-update.f95: Likewise.\n+\t* gfortran.dg/goacc/kernels-loop-data.f95: Likewise.\n+\t* gfortran.dg/goacc/kernels-loop-n.f95: Likewise.\n+\t* gfortran.dg/goacc/kernels-loop.f95: Likewise.\n+\n \t* c-c++-common/goacc/classify-kernels-unparallelized.c: Adjust.\n \t* c-c++-common/goacc/classify-kernels.c: Likewise.\n \t* c-c++-common/goacc/classify-parallel.c: Likewise."}, {"sha": "626f6b4fe68796d128ded25edb8764000f3a2c8a", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels-unparallelized.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -34,6 +34,6 @@ void KERNELS ()\n \n /* Check the offloaded function's classification and compute dimensions (will\n    always be 1 x 1 x 1 for non-offloading compilation).\n-   { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC kernels offload\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Function is unparallelized OpenACC kernels offload\" 1 \"oaccdevlow\" } }\n    { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n    { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */"}, {"sha": "95037e6120ea5372d56eb52738536d05ad5cefb2", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -25,11 +25,11 @@ void KERNELS ()\n /* Check that exactly one OpenACC kernels construct is analyzed, and that it\n    can be parallelized.\n    { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n    { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n \n /* Check the offloaded function's classification and compute dimensions (will\n    always be 1 x 1 x 1 for non-offloading compilation).\n-   { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC kernels offload\" 1 \"oaccdevlow\" } }\n+   { dg-final { scan-tree-dump-times \"(?n)Function is parallelized OpenACC kernels offload\" 1 \"oaccdevlow\" } }\n    { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */\n+   { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } } */"}, {"sha": "c475333f1aef13418abd810711f0add94feeaa6f", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-counter-vars-function-scope.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-counter-vars-function-scope.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-counter-vars-function-scope.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-counter-vars-function-scope.c?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -45,9 +45,8 @@ main (void)\n \n /* Check that only one loop is analyzed, and that it can be parallelized.  */\n /* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } } */\n /* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n \n /* Check that the loop has been split off into a function.  */\n /* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n-\n-/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 1 \"parloops1\" } } */"}, {"sha": "27ea2e98a32b0c8ff73ec0b8be6f5829d11e0d0b", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-double-reduction-n.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction-n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction-n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction-n.c?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -27,10 +27,9 @@ foo (unsigned int n)\n \n /* Check that only one loop is analyzed, and that it can be parallelized.  */\n /* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } } */\n /* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n /* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 1 \"parloops1\" } } */\n \n /* Check that the loop has been split off into a function.  */\n /* { dg-final { scan-tree-dump-times \"(?n);; Function .*foo.*._omp_fn.0\" 1 \"optimized\" } } */\n-\n-/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 1 \"parloops1\" } } */"}, {"sha": "0841e9049d03fff7d5942c11f22f8ac5c97e011a", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-double-reduction.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction.c?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -27,10 +27,9 @@ foo (void)\n \n /* Check that only one loop is analyzed, and that it can be parallelized.  */\n /* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } } */\n /* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n /* { dg-final { scan-tree-dump-times \"parallelizing outer loop\" 1 \"parloops1\" } } */\n \n /* Check that the loop has been split off into a function.  */\n /* { dg-final { scan-tree-dump-times \"(?n);; Function .*foo.*._omp_fn.0\" 1 \"optimized\" } } */\n-\n-/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 1 \"parloops1\" } } */"}, {"sha": "acef6a1a17936a514a29da4e45288d3a0e14166b", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-2.c?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -59,11 +59,10 @@ main (void)\n /* Check that only three loops are analyzed, and that all can be\n    parallelized.  */\n /* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 3 \"parloops1\" } } */\n /* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n \n /* Check that the loop has been split off into a function.  */\n /* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n /* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.1\" 1 \"optimized\" } } */\n /* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.2\" 1 \"optimized\" } } */\n-\n-/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 3 \"parloops1\" } } */"}, {"sha": "75e2bb78cea487a439211d9bab0404933d7efb95", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-3.c?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -39,9 +39,8 @@ main (void)\n \n /* Check that only one loop is analyzed, and that it can be parallelized.  */\n /* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } } */\n /* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n \n /* Check that the loop has been split off into a function.  */\n /* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n-\n-/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 1 \"parloops1\" } } */"}, {"sha": "73b469d70610455642a57596248e631605e76821", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-g.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-g.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-g.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-g.c?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -7,9 +7,8 @@\n \n /* Check that only one loop is analyzed, and that it can be parallelized.  */\n /* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } } */\n /* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n \n /* Check that the loop has been split off into a function.  */\n /* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n-\n-/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 1 \"parloops1\" } } */"}, {"sha": "55926230d578ad5dc906cd0876518faf0b430800", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-mod-not-zero.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-mod-not-zero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-mod-not-zero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-mod-not-zero.c?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -43,9 +43,8 @@ main (void)\n \n /* Check that only one loop is analyzed, and that it can be parallelized.  */\n /* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } } */\n /* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n \n /* Check that the loop has been split off into a function.  */\n /* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n-\n-/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 1 \"parloops1\" } } */"}, {"sha": "e86be1b1cdc06a1689a297635d2ceb0658cb83ac", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-n.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-n.c?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -46,9 +46,8 @@ foo (COUNTERTYPE n)\n \n /* Check that only one loop is analyzed, and that it can be parallelized.  */\n /* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } } */\n /* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n \n /* Check that the loop has been split off into a function.  */\n /* { dg-final { scan-tree-dump-times \"(?n);; Function .*foo.*._omp_fn.0\" 1 \"optimized\" } } */\n-\n-/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 1 \"parloops1\" } } */"}, {"sha": "2b0e186ae2970ac4faa58abb0bee652bab97c093", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop-nest.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-nest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-nest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop-nest.c?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -30,9 +30,8 @@ main (void)\n \n /* Check that only one loop is analyzed, and that it can be parallelized.  */\n /* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } } */\n /* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n \n /* Check that the loop has been split off into a function.  */\n /* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n-\n-/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 1 \"parloops1\" } } */"}, {"sha": "9619d53b43d7f9548261a215fbcc8c1d47a3ce72", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-loop.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-loop.c?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -46,9 +46,8 @@ main (void)\n \n /* Check that only one loop is analyzed, and that it can be parallelized.  */\n /* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } } */\n /* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n \n /* Check that the loop has been split off into a function.  */\n /* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n-\n-/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 1 \"parloops1\" } } */"}, {"sha": "69539b24a78da7b795916897deca077afdd619df", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-one-counter-var.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-one-counter-var.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-one-counter-var.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-one-counter-var.c?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -44,9 +44,8 @@ main (void)\n \n /* Check that only one loop is analyzed, and that it can be parallelized.  */\n /* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } } */\n /* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n \n /* Check that the loop has been split off into a function.  */\n /* { dg-final { scan-tree-dump-times \"(?n);; Function .*main._omp_fn.0\" 1 \"optimized\" } } */\n-\n-/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 1 \"parloops1\" } } */"}, {"sha": "4a18272db20e48f0333ca446ef33bb73cf68f693", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-reduction.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-reduction.c?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -26,9 +26,8 @@ foo (void)\n \n /* Check that only one loop is analyzed, and that it can be parallelized.  */\n /* { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } } */\n+/* { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } } */\n /* { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } } */\n \n /* Check that the loop has been split off into a function.  */\n /* { dg-final { scan-tree-dump-times \"(?n);; Function .*foo.*._omp_fn.0\" 1 \"optimized\" } } */\n-\n-/* { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 1 \"parloops1\" } } */"}, {"sha": "4b282cab5ae426ee04500957f09ec1286b931692", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels-unparallelized.f95", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -36,6 +36,6 @@ end program main\n \n ! Check the offloaded function's classification and compute dimensions (will\n ! always be 1 x 1 x 1 for non-offloading compilation).\n-! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC kernels offload\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Function is unparallelized OpenACC kernels offload\" 1 \"oaccdevlow\" } }\n ! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n ! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }"}, {"sha": "da025c19af87e3d6fcc0920684c904a968fb54b8", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels.f95", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -27,11 +27,11 @@ end program main\n ! Check that exactly one OpenACC kernels construct is analyzed, and that it\n ! can be parallelized.\n ! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(0, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n ! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n \n ! Check the offloaded function's classification and compute dimensions (will\n ! always be 1 x 1 x 1 for non-offloading compilation).\n-! { dg-final { scan-tree-dump-times \"(?n)Function is OpenACC kernels offload\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)Function is parallelized OpenACC kernels offload\" 1 \"oaccdevlow\" } }\n ! { dg-final { scan-tree-dump-times \"(?n)Compute dimensions \\\\\\[1, 1, 1\\\\\\]\" 1 \"oaccdevlow\" } }\n-! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc function \\\\(1, 1, 1\\\\), oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"oaccdevlow\" } }"}, {"sha": "516aedef24cf27c0a1bc73988c060c30dc3ee2aa", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop-2.f95", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-2.f95?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -34,11 +34,10 @@ end program main\n \n ! Check that only three loops are analyzed, and that all can be parallelized.\n ! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 3 \"parloops1\" } }\n ! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n \n ! Check that the loop has been split off into a function.\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.0 \" 1 \"optimized\" } }\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.1 \" 1 \"optimized\" } }\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.2 \" 1 \"optimized\" } }\n-\n-! { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 3 \"parloops1\" } }"}, {"sha": "ff3788a96e2779ecfbe088c71281ba7e1f26b573", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop-data-2.f95", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-2.f95?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -40,11 +40,10 @@ end program main\n \n ! Check that only three loops are analyzed, and that all can be parallelized.\n ! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 3 \"parloops1\" } }\n ! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n \n ! Check that the loop has been split off into a function.\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.0 \" 1 \"optimized\" } }\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.1 \" 1 \"optimized\" } }\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.2 \" 1 \"optimized\" } }\n-\n-! { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 3 \"parloops1\" } }"}, {"sha": "60a5c96dac5f79a12ed21095374d6307383f3b42", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop-data-enter-exit-2.f95", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-enter-exit-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-enter-exit-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-enter-exit-2.f95?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -40,11 +40,10 @@ end program main\n \n ! Check that only three loops are analyzed, and that all can be parallelized.\n ! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 3 \"parloops1\" } }\n ! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n \n ! Check that the loop has been split off into a function.\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.0 \" 1 \"optimized\" } }\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.1 \" 1 \"optimized\" } }\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.2 \" 1 \"optimized\" } }\n-\n-! { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 3 \"parloops1\" } }"}, {"sha": "ce04749f04a597e5ab51486a922c78180962d7b6", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop-data-enter-exit.f95", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-enter-exit.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-enter-exit.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-enter-exit.f95?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -38,11 +38,10 @@ end program main\n \n ! Check that only three loops are analyzed, and that all can be parallelized.\n ! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 3 \"parloops1\" } }\n ! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n \n ! Check that the loop has been split off into a function.\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.0 \" 1 \"optimized\" } }\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.1 \" 1 \"optimized\" } }\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.2 \" 1 \"optimized\" } }\n-\n-! { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 3 \"parloops1\" } }"}, {"sha": "d2de1389c310470e1d327f95422380559c0bf6b2", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop-data-update.f95", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-update.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-update.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data-update.f95?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -38,10 +38,9 @@ end program main\n \n ! Check that only three loops are analyzed, and that all can be parallelized.\n ! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 2 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 2 \"parloops1\" } }\n ! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n \n ! Check that the loop has been split off into a function.\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.0 \" 1 \"optimized\" } }\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.1 \" 1 \"optimized\" } }\n-\n-! { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 2 \"parloops1\" } }"}, {"sha": "92872b27ff2f9cd43f953644d7a3f999f949c93c", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop-data.f95", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-data.f95?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -38,11 +38,10 @@ end program main\n \n ! Check that only three loops are analyzed, and that all can be parallelized.\n ! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 3 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 3 \"parloops1\" } }\n ! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n \n ! Check that the loop has been split off into a function.\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.0 \" 1 \"optimized\" } }\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.1 \" 1 \"optimized\" } }\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.2 \" 1 \"optimized\" } }\n-\n-! { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 3 \"parloops1\" } }"}, {"sha": "079712f29cb9ff16426085224daf3988d360225e", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop-n.f95", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-n.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-n.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-n.f95?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -32,10 +32,9 @@ end module test\n \n ! Check that only one loop is analyzed, and that it can be parallelized.\n ! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } }\n+! TODO, PR70545.\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" { xfail *-*-* } } }\n ! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n \n ! Check that the loop has been split off into a function.\n ! { dg-final { scan-tree-dump-times \"(?n);; Function __test_MOD_foo._omp_fn.0 \" 1 \"optimized\" } }\n-\n-! TODO, PR70545.\n-! { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 1 \"parloops1\" { xfail *-*-* } } }"}, {"sha": "cc9a3a9a4bdb413b9b4d506feb7d5eae63389ed8", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop.f95", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop.f95?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -30,9 +30,8 @@ end program main\n \n ! Check that only one loop is analyzed, and that it can be parallelized.\n ! { dg-final { scan-tree-dump-times \"SUCCESS: may be parallelized\" 1 \"parloops1\" } }\n+! { dg-final { scan-tree-dump-times \"(?n)__attribute__\\\\(\\\\(oacc kernels parallelized, oacc function \\\\(, , \\\\), oacc kernels, omp target entrypoint\\\\)\\\\)\" 1 \"parloops1\" } }\n ! { dg-final { scan-tree-dump-not \"FAILED:\" \"parloops1\" } }\n \n ! Check that the loop has been split off into a function.\n ! { dg-final { scan-tree-dump-times \"(?n);; Function MAIN__._omp_fn.0 \" 1 \"optimized\" } }\n-\n-! { dg-final { scan-tree-dump-times \"(?n)oacc function \\\\(0,\" 1 \"parloops1\" } }"}, {"sha": "f8261541ca2d66ed537f53bd22a5b7a753ca7843", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f271ce56b3a1d3e36c6a24228593f9b8851f8e/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=b0f271ce56b3a1d3e36c6a24228593f9b8851f8e", "patch": "@@ -2040,19 +2040,20 @@ create_parallel_loop (struct loop *loop, tree loop_fn, tree data,\n   tree cvar, cvar_init, initvar, cvar_next, cvar_base, type;\n   edge exit, nexit, guard, end, e;\n \n-  /* Prepare the GIMPLE_OMP_PARALLEL statement.  */\n   if (oacc_kernels_p)\n     {\n       gcc_checking_assert (lookup_attribute (\"oacc kernels\",\n \t\t\t\t\t     DECL_ATTRIBUTES (cfun->decl)));\n-\n-      tree clause = build_omp_clause (loc, OMP_CLAUSE_NUM_GANGS);\n-      OMP_CLAUSE_NUM_GANGS_EXPR (clause)\n-\t= build_int_cst (integer_type_node, n_threads);\n-      oacc_set_fn_attrib (cfun->decl, clause, NULL);\n+      /* Indicate to later processing that this is a parallelized OpenACC\n+\t kernels construct.  */\n+      DECL_ATTRIBUTES (cfun->decl)\n+\t= tree_cons (get_identifier (\"oacc kernels parallelized\"),\n+\t\t     NULL_TREE, DECL_ATTRIBUTES (cfun->decl));\n     }\n   else\n     {\n+      /* Prepare the GIMPLE_OMP_PARALLEL statement.  */\n+\n       basic_block bb = loop_preheader_edge (loop)->src;\n       basic_block paral_bb = single_pred (bb);\n       gsi = gsi_last_bb (paral_bb);\n@@ -2154,7 +2155,8 @@ create_parallel_loop (struct loop *loop, tree loop_fn, tree data,\n \n   /* Emit GIMPLE_OMP_FOR.  */\n   if (oacc_kernels_p)\n-    /* In combination with the NUM_GANGS on the parallel.  */\n+    /* Parallelized OpenACC kernels constructs use gang parallelism.  See also\n+       omp-offload.c:execute_oacc_device_lower.  */\n     t = build_omp_clause (loc, OMP_CLAUSE_GANG);\n   else\n     {"}]}