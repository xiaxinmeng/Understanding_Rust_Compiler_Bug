{"sha": "d3414ccbd1d1e56b9376e1d317c223ed162c8d72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM0MTRjY2JkMWQxZTU2YjkzNzZlMWQzMTdjMjIzZWQxNjJjOGQ3Mg==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-06-30T03:10:12Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-06-30T03:10:12Z"}, "message": "entered into RCS\n\nFrom-SVN: r1356", "tree": {"sha": "8ad1158275568e8fb1ff0d18c7ce7ec3e37d9a56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ad1158275568e8fb1ff0d18c7ce7ec3e37d9a56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3414ccbd1d1e56b9376e1d317c223ed162c8d72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3414ccbd1d1e56b9376e1d317c223ed162c8d72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3414ccbd1d1e56b9376e1d317c223ed162c8d72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3414ccbd1d1e56b9376e1d317c223ed162c8d72/comments", "author": null, "committer": null, "parents": [{"sha": "d4c40650c2b74ed0bd3c17970e7d38f64c91a3cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4c40650c2b74ed0bd3c17970e7d38f64c91a3cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4c40650c2b74ed0bd3c17970e7d38f64c91a3cd"}], "stats": {"total": 172, "additions": 1, "deletions": 171}, "files": [{"sha": "d5394820d3e68c4cf038e1c768e47a68d9f2e425", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 171, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3414ccbd1d1e56b9376e1d317c223ed162c8d72/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3414ccbd1d1e56b9376e1d317c223ed162c8d72/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d3414ccbd1d1e56b9376e1d317c223ed162c8d72", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Intel 80386.\n-   Copyright (C) 1988 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1992 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1852,173 +1852,3 @@ output_fp_cc0_set (insn)\n     }\n   RET;\n }\n-\f\n-#ifdef HANDLE_PRAGMA\n-\n-/* When structure field packing is in effect, this variable is the\n-   number of bits to use as the maximum alignment.  When packing is not\n-   in effect, this is zero. */\n-\n-int maximum_field_alignment = 0;\n-\n-/* Handle a pragma directive.  HANDLE_PRAGMA conspires to parse the\n-   input following #pragma into tokens based on yylex.  TOKEN is the\n-   current token, and STRING is its printable form.  */\n-\n-void\n-handle_pragma_token (string, token)\n-     char *string;\n-     tree token;\n-{\n-  static enum pragma_state\n-    {\n-      ps_start,\n-      ps_done,\n-      ps_bad,\n-      ps_weak,\n-      ps_name,\n-      ps_equals,\n-      ps_value,\n-      ps_pack,\n-      ps_left,\n-      ps_align,\n-      ps_right\n-      } state = ps_start, type;\n-  static char *name;\n-  static char *value;\n-  static int align;\n-\n-  if (string == 0)\n-    {\n-      if (type == ps_pack)\n-\t{\n-\t  if (state == ps_right)\n-\t    maximum_field_alignment = align * 8;\n-\t  else\n-\t    warning (\"ignoring malformed #pragma pack( [ 1 | 2 | 4 ] )\");\n-\t}\n-#ifdef WEAK_ASM_OP\n-      else if (type == ps_weak)\n-\t{\n-\t  if (state == ps_name || state == ps_value)\n-\t    {\n-\t      fprintf (asm_out_file, \"\\t%s\\t\", WEAK_ASM_OP);\n-\t      ASM_OUTPUT_LABELREF (asm_out_file, name);\n-\t      fputc ('\\n', asm_out_file);\n-\t      if (state == ps_value)\n-\t\t{\n-\t\t  fprintf (asm_out_file, \"\\t%s\\t\", SET_ASM_OP);\n-\t\t  ASM_OUTPUT_LABELREF (asm_out_file, name);\n-\t\t  fputc (',', asm_out_file);\n-\t\t  ASM_OUTPUT_LABELREF (asm_out_file, value);\n-\t\t  fputc ('\\n', asm_out_file);\n-\t\t}\n-\t    }\n-\t  else if (! (state == ps_done || state == ps_start))\n-\t    warning (\"ignoring malformed #pragma weak symbol [=value]\");\n-\t}\n-#endif /* WEAK_ASM_OP */\n-\n-      type = state = ps_start;\n-      return;\n-    }\n-\n-  switch (state)\n-    {\n-    case ps_start:\n-      if (token && TREE_CODE (token) == IDENTIFIER_NODE)\n-\t{\n-\t  if (strcmp (IDENTIFIER_POINTER (token), \"pack\") == 0)\n-\t    type = state = ps_pack;\n-#ifdef WEAK_ASM_OP\n-\t  else if (strcmp (IDENTIFIER_POINTER (token), \"weak\") == 0)\n-\t    type = state = ps_weak;\n-#endif\n-\t  else\n-\t    type = state = ps_done;\n-\t}\n-      else\n-\ttype = state = ps_done;\n-      break;\n-\n-#ifdef WEAK_ASM_OP\n-    case ps_weak:\n-      if (token && TREE_CODE (token) == IDENTIFIER_NODE)\n-\t{\n-\t  name = IDENTIFIER_POINTER (token);\n-\t  state = ps_name;\n-\t}\n-      else\n-\tstate = ps_bad;\n-      break;\n-\n-    case ps_name:\n-      state = (strcmp (string, \"=\") ? ps_bad : ps_equals);\n-      break;\n-\n-    case ps_equals:\n-      if (token && TREE_CODE (token) == IDENTIFIER_NODE)\n-\t{\n-\t  value = IDENTIFIER_POINTER (token);\n-\t  state = ps_value;\n-\t}\n-      else\n-\tstate = ps_bad;\n-      break;\n-\n-    case ps_value:\n-      state = ps_bad;\n-      break;\n-#endif /* WEAK_ASM_OP */\n-\n-    case ps_pack:\n-      if (strcmp (string, \"(\") == 0)\n-\tstate = ps_left;\n-      else\n-\tstate = ps_bad;\n-      break;\n-\n-    case ps_left:\n-      if (token && TREE_CODE (token) == INTEGER_CST\n-\t  && TREE_INT_CST_HIGH (token) == 0)\n-\tswitch (TREE_INT_CST_LOW (token))\n-\t  {\n-\t  case 1:\n-\t  case 2:\n-\t  case 4:\n-\t    align = TREE_INT_CST_LOW (token);\n-\t    state = ps_align;\n-\t    break;\n-\n-\t  default:\n-\t    state = ps_bad;\n-\t  }\n-      else if (! token && strcmp (string, \")\") == 0)\n-\t{\n-\t  align = 0;\n-\t  state = ps_right;\n-\t}\n-      else\n-\tstate = ps_bad;\n-      break;\n-\n-    case ps_align:\n-      if (strcmp (string, \")\") == 0)\n-\tstate = ps_right;\n-      else\n-\tstate = ps_bad;\n-      break;\n-\n-    case ps_right:\n-      state = ps_bad;\n-      break;\n-\n-    case ps_bad:\n-    case ps_done:\n-      break;\n-\n-    default:\n-      abort ();\n-    }\n-}\n-#endif /* HANDLE_PRAGMA */"}]}