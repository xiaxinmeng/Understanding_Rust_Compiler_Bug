{"sha": "cdfdf187ac20e6ab0bcb0b0485a6a0e964bf1371", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RmZGYxODdhYzIwZTZhYjBiY2IwYjA0ODVhNmEwZTk2NGJmMTM3MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2011-11-26T10:55:09Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-26T10:55:09Z"}, "message": "sync.md (movdi_via_fpu): Add %Z insn suffixes.\n\n\t* config/i386/sync.md (movdi_via_fpu): Add %Z insn suffixes.\n\nFrom-SVN: r181739", "tree": {"sha": "68e5f5d51955cac4e90eacfe13c5d0b2739a5d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68e5f5d51955cac4e90eacfe13c5d0b2739a5d48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdfdf187ac20e6ab0bcb0b0485a6a0e964bf1371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdfdf187ac20e6ab0bcb0b0485a6a0e964bf1371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdfdf187ac20e6ab0bcb0b0485a6a0e964bf1371", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdfdf187ac20e6ab0bcb0b0485a6a0e964bf1371/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4189fb53f29a76336dec42fa20572af538aeb055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4189fb53f29a76336dec42fa20572af538aeb055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4189fb53f29a76336dec42fa20572af538aeb055"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "bb63950d69d0e1192d0268c50c11a5dc5bc50d0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdfdf187ac20e6ab0bcb0b0485a6a0e964bf1371/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdfdf187ac20e6ab0bcb0b0485a6a0e964bf1371/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdfdf187ac20e6ab0bcb0b0485a6a0e964bf1371", "patch": "@@ -1,3 +1,7 @@\n+2011-11-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sync.md (movdi_via_fpu): Add %Z insn suffixes.\n+\n 2011-11-26  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \tPR middle-end/50074"}, {"sha": "5799b0aca509a7b57a7ca93822c1e6abe4ddfe57", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdfdf187ac20e6ab0bcb0b0485a6a0e964bf1371/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdfdf187ac20e6ab0bcb0b0485a6a0e964bf1371/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=cdfdf187ac20e6ab0bcb0b0485a6a0e964bf1371", "patch": "@@ -123,7 +123,7 @@\n   DONE;\n })\n \n-;; ??? From volume 3 section 7.1.1 Guaranteed Atomic Operations,\n+;; ??? From volume 3 section 8.1.1 Guaranteed Atomic Operations,\n ;; Only beginning at Pentium family processors do we get any guarantee of\n ;; atomicity in aligned 64-bit quantities.  Beginning at P6, we get a\n ;; guarantee for 64-bit accesses that do not cross a cacheline boundary.\n@@ -281,7 +281,7 @@\n \t(unspec:DI [(match_operand:DI 1 \"memory_operand\" \"m\")] UNSPEC_MOVA))\n    (clobber (match_operand:DF 2 \"register_operand\" \"=f\"))]\n   \"TARGET_80387\"\n-  \"fild\\t%1\\;fistp\\t%0\"\n+  \"fild%Z1\\t%1\\;fistp%Z0\\t%0\"\n   [(set_attr \"type\" \"multi\")\n    ;; Worst case based on full sib+offset32 addressing modes\n    (set_attr \"length\" \"14\")])"}]}