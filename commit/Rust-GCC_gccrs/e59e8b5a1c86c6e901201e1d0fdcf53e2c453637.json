{"sha": "e59e8b5a1c86c6e901201e1d0fdcf53e2c453637", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU5ZThiNWExYzg2YzZlOTAxMjAxZTFkMGZkY2Y1M2UyYzQ1MzYzNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-06-30T15:20:55Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-06-30T15:20:55Z"}, "message": "Fix location of typeid() (PR c++/80014)\n\ngcc/cp/ChangeLog:\n\tPR c++/80014\n\t* parser.c (cp_parser_postfix_expression): Construct a location\n\tfor typeid expressions.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/80014\n\t* g++.dg/plugin/diagnostic-test-expressions-1.C (std::type_info):\n\tAdd declaration.\n\t(test_typeid): New test function.\n\nFrom-SVN: r249845", "tree": {"sha": "6c3e05190bdb092ce15fa48cc6a65a8f933716e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c3e05190bdb092ce15fa48cc6a65a8f933716e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e59e8b5a1c86c6e901201e1d0fdcf53e2c453637", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e59e8b5a1c86c6e901201e1d0fdcf53e2c453637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e59e8b5a1c86c6e901201e1d0fdcf53e2c453637", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e59e8b5a1c86c6e901201e1d0fdcf53e2c453637/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e855bdc04db3b2ff010d6d490dc9a4bee5f08b3b"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "6c230a9c4c5f7739c76514e7aff3af34e9f9c7bd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59e8b5a1c86c6e901201e1d0fdcf53e2c453637/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59e8b5a1c86c6e901201e1d0fdcf53e2c453637/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e59e8b5a1c86c6e901201e1d0fdcf53e2c453637", "patch": "@@ -1,3 +1,9 @@\n+2017-06-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/80014\n+\t* parser.c (cp_parser_postfix_expression): Construct a location\n+\tfor typeid expressions.\n+\n 2017-06-30  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (lookup_fnfields_1, class_method_index_for_fn): Don't"}, {"sha": "c6a8e374d8b78b7f9094f27613a99d06f31c3c54", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59e8b5a1c86c6e901201e1d0fdcf53e2c453637/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59e8b5a1c86c6e901201e1d0fdcf53e2c453637/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e59e8b5a1c86c6e901201e1d0fdcf53e2c453637", "patch": "@@ -6542,7 +6542,8 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t/* Look for the `)' token.  Otherwise, we can't be sure that\n \t   we're not looking at an expression: consider `typeid (int\n \t   (3))', for example.  */\n-\tcp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n+\tcp_token *close_paren = cp_parser_require (parser, CPP_CLOSE_PAREN,\n+\t\t\t\t\t\t   RT_CLOSE_PAREN);\n \t/* If all went well, simply lookup the type-id.  */\n \tif (cp_parser_parse_definitely (parser))\n \t  postfix_expression = get_typeid (type, tf_warning_or_error);\n@@ -6556,13 +6557,26 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t    /* Compute its typeid.  */\n \t    postfix_expression = build_typeid (expression, tf_warning_or_error);\n \t    /* Look for the `)' token.  */\n-\t    cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n+\t    close_paren\n+\t      = cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n \t  }\n \t/* Restore the saved message.  */\n \tparser->type_definition_forbidden_message = saved_message;\n \t/* `typeid' may not appear in an integral constant expression.  */\n \tif (cp_parser_non_integral_constant_expression (parser, NIC_TYPEID))\n \t  postfix_expression = error_mark_node;\n+\n+\t/* Construct a location e.g. :\n+\t     typeid (expr)\n+\t     ^~~~~~~~~~~~~\n+\t   ranging from the start of the \"typeid\" token to the final closing\n+\t   paren, with the caret at the start.  */\n+\tif (close_paren)\n+\t  {\n+\t    location_t typeid_loc\n+\t      = make_location (start_loc, start_loc, close_paren->location);\n+\t    postfix_expression.set_location (typeid_loc);\n+\t  }\n       }\n       break;\n "}, {"sha": "f0555b991aa958224359695637b1c6ce8d1b282e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59e8b5a1c86c6e901201e1d0fdcf53e2c453637/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59e8b5a1c86c6e901201e1d0fdcf53e2c453637/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e59e8b5a1c86c6e901201e1d0fdcf53e2c453637", "patch": "@@ -1,3 +1,10 @@\n+2017-06-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/80014\n+\t* g++.dg/plugin/diagnostic-test-expressions-1.C (std::type_info):\n+\tAdd declaration.\n+\t(test_typeid): New test function.\n+\n 2017-06-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/81225"}, {"sha": "62d3c361ab71a47b2dd960c8b395240b3fa21c8f", "filename": "gcc/testsuite/g++.dg/plugin/diagnostic-test-expressions-1.C", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e59e8b5a1c86c6e901201e1d0fdcf53e2c453637/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e59e8b5a1c86c6e901201e1d0fdcf53e2c453637/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdiagnostic-test-expressions-1.C?ref=e59e8b5a1c86c6e901201e1d0fdcf53e2c453637", "patch": "@@ -848,3 +848,35 @@ tests::test_method_calls ()\n                                ~~~~~~~~~~~~~~~~~~^~\n    { dg-end-multiline-output \"\" } */\n }\n+\n+namespace std\n+{\n+  class type_info { public: int foo; };\n+}\n+\n+void test_typeid (int i)\n+{\n+  __emit_expression_range (0, &typeid(i)); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, &typeid(i));\n+                               ^~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __emit_expression_range (0, &typeid(int)); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, &typeid(int));\n+                               ^~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __emit_expression_range (0, &typeid(i * 2)); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, &typeid(i * 2));\n+                               ^~~~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __emit_expression_range (0, typeid(int).foo); /* { dg-warning \"range\" } */\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_expression_range (0, typeid(int).foo);\n+                               ~~~~~~~~~~~~^~~\n+   { dg-end-multiline-output \"\" } */\n+}"}]}