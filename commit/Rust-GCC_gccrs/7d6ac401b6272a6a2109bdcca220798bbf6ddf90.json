{"sha": "7d6ac401b6272a6a2109bdcca220798bbf6ddf90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q2YWM0MDFiNjI3MmE2YTIxMDliZGNjYTIyMDc5OGJiZjZkZGY5MA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-12-25T14:54:50Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-12-25T14:54:50Z"}, "message": "h8300-protos.h: Add prototypes for output_plussi, compute_plussi_length, and compute_plussi_cc.\n\n\t* config/h8300/h8300-protos.h: Add prototypes for\n\toutput_plussi, compute_plussi_length, and compute_plussi_cc.\n\t* config/h8300/h8300.c (output_plussi): New.\n\t(compute_plussi_length): Likewise.\n\t(compute_plussi_cc): Likewise.\n\t* config/h8300/h8300.md (addsi_h8300h): Call\n\toutput_plussi, compute_plussi_length, and compute_plussi_cc.\n\nFrom-SVN: r60500", "tree": {"sha": "a08b54b1749e9b3bbc8bde196389a1c049a0d898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a08b54b1749e9b3bbc8bde196389a1c049a0d898"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d6ac401b6272a6a2109bdcca220798bbf6ddf90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6ac401b6272a6a2109bdcca220798bbf6ddf90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6ac401b6272a6a2109bdcca220798bbf6ddf90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6ac401b6272a6a2109bdcca220798bbf6ddf90/comments", "author": null, "committer": null, "parents": [{"sha": "b07af07e75ebc73a35d721171d7d4e37d14c24ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b07af07e75ebc73a35d721171d7d4e37d14c24ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b07af07e75ebc73a35d721171d7d4e37d14c24ee"}], "stats": {"total": 201, "additions": 191, "deletions": 10}, "files": [{"sha": "d51ea40d6cae5937322cc9ef51a099efc8d3fb3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ac401b6272a6a2109bdcca220798bbf6ddf90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ac401b6272a6a2109bdcca220798bbf6ddf90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d6ac401b6272a6a2109bdcca220798bbf6ddf90", "patch": "@@ -1,3 +1,13 @@\n+2002-12-25  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Add prototypes for\n+\toutput_plussi, compute_plussi_length, and compute_plussi_cc.\n+\t* config/h8300/h8300.c (output_plussi): New.\n+\t(compute_plussi_length): Likewise.\n+\t(compute_plussi_cc): Likewise.\n+\t* config/h8300/h8300.md (addsi_h8300h): Call\n+\toutput_plussi, compute_plussi_length, and compute_plussi_cc.\n+\n 2002-12-24  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.md (two peepholes): Use match_dup instead"}, {"sha": "990fff7b0ebd83d8e8b5efd99baa53444ef14bcb", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ac401b6272a6a2109bdcca220798bbf6ddf90/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ac401b6272a6a2109bdcca220798bbf6ddf90/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=7d6ac401b6272a6a2109bdcca220798bbf6ddf90", "patch": "@@ -26,6 +26,9 @@ Boston, MA 02111-1307, USA.  */\n \n /* Declarations for functions used in insn-output.c.  */\n #ifdef RTX_CODE\n+extern const char *output_plussi PARAMS ((rtx *));\n+extern unsigned int compute_plussi_length PARAMS ((rtx *));\n+extern enum attr_cc compute_plussi_cc PARAMS ((rtx *));\n extern const char *output_a_shift PARAMS ((rtx *));\n extern unsigned int compute_a_shift_length PARAMS ((rtx, rtx *));\n extern const char *emit_a_rotate PARAMS ((enum rtx_code, rtx *));"}, {"sha": "28405dd6f6e10c750c108ab408feac6246c96fee", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ac401b6272a6a2109bdcca220798bbf6ddf90/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ac401b6272a6a2109bdcca220798bbf6ddf90/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=7d6ac401b6272a6a2109bdcca220798bbf6ddf90", "patch": "@@ -1894,6 +1894,176 @@ bit_operator (x, mode)\n }\n \f\n const char *\n+output_plussi (operands)\n+     rtx *operands;\n+{\n+  enum machine_mode mode = GET_MODE (operands[0]);\n+\n+  if (mode != SImode)\n+    abort ();\n+\n+  if (TARGET_H8300)\n+    {\n+      /* Currently we do not support H8/300 here yet.  */\n+      abort ();\n+    }\n+  else\n+    {\n+      if (GET_CODE (operands[2]) == REG)\n+\treturn \"add.l\\t%S2,%S0\";\n+\n+      if (GET_CODE (operands[2]) == CONST_INT)\n+\t{\n+\t  HOST_WIDE_INT intval = INTVAL (operands[2]);\n+\n+\t  /* See if we can finish with 2 bytes.  */\n+\n+\t  switch (intval & 0xffffffff)\n+\t    {\n+\t    case 0x00000001:\n+\t    case 0x00000002:\n+\t    case 0x00000004:\n+\t      return \"adds\\t%2,%S0\";\n+\n+\t    case 0xffffffff:\n+\t    case 0xfffffffe:\n+\t    case 0xfffffffc:\n+\t      return \"subs\\t%G2,%S0\";\n+\n+\t    case 0x00010000:\n+\t    case 0x00020000:\n+\t      operands[2] = GEN_INT (intval >> 16);\n+\t      return \"inc.w\\t%2,%e0\";\n+\n+\t    case 0xffff0000:\n+\t    case 0xfffe0000:\n+\t      operands[2] = GEN_INT (intval >> 16);\n+\t      return \"dec.w\\t%G2,%e0\";\n+\t    }\n+\n+\t  /* See if we can finish with 4 bytes.  */\n+\t  if ((intval & 0xffff) == 0)\n+\t    {\n+\t      operands[2] = GEN_INT (intval >> 16);\n+\t      return \"add.w\\t%2,%e0\";\n+\t    }\n+\t}\n+\n+      return \"add.l\\t%S2,%S0\";\n+    }\n+}\n+\n+unsigned int\n+compute_plussi_length (operands)\n+     rtx *operands;\n+{\n+  enum machine_mode mode = GET_MODE (operands[0]);\n+\n+  if (mode != SImode)\n+    abort ();\n+\n+  if (TARGET_H8300)\n+    {\n+      /* Currently we do not support H8/300 here yet.  */\n+      abort ();\n+    }\n+  else\n+    {\n+      if (GET_CODE (operands[2]) == REG)\n+\treturn 2;\n+\n+      if (GET_CODE (operands[2]) == CONST_INT)\n+\t{\n+\t  HOST_WIDE_INT intval = INTVAL (operands[2]);\n+\n+\t  /* See if we can finish with 2 bytes.  */\n+\n+\t  switch (intval & 0xffffffff)\n+\t    {\n+\t    case 0x00000001:\n+\t    case 0x00000002:\n+\t    case 0x00000004:\n+\t      return 2;\n+\n+\t    case 0xffffffff:\n+\t    case 0xfffffffe:\n+\t    case 0xfffffffc:\n+\t      return 2;\n+\n+\t    case 0x00010000:\n+\t    case 0x00020000:\n+\t      return 2;\n+\n+\t    case 0xffff0000:\n+\t    case 0xfffe0000:\n+\t      return 2;\n+\t    }\n+\n+\t  /* See if we can finish with 4 bytes.  */\n+\t  if ((intval & 0xffff) == 0)\n+\t    return 4;\n+\t}\n+\n+      return 6;\n+    }\n+}\n+\n+enum attr_cc\n+compute_plussi_cc (operands)\n+     rtx *operands;\n+{\n+  enum machine_mode mode = GET_MODE (operands[0]);\n+\n+  if (mode != SImode)\n+    abort ();\n+\n+  if (TARGET_H8300)\n+    {\n+      /* Currently we do not support H8/300 here yet.  */\n+      abort ();\n+    }\n+  else\n+    {\n+      if (GET_CODE (operands[2]) == REG)\n+\treturn CC_SET_ZN;\n+\n+      if (GET_CODE (operands[2]) == CONST_INT)\n+\t{\n+\t  HOST_WIDE_INT intval = INTVAL (operands[2]);\n+\n+\t  /* See if we can finish with 2 bytes.  */\n+\n+\t  switch (intval & 0xffffffff)\n+\t    {\n+\t    case 0x00000001:\n+\t    case 0x00000002:\n+\t    case 0x00000004:\n+\t      return CC_NONE_0HIT;\n+\n+\t    case 0xffffffff:\n+\t    case 0xfffffffe:\n+\t    case 0xfffffffc:\n+\t      return CC_NONE_0HIT;\n+\n+\t    case 0x00010000:\n+\t    case 0x00020000:\n+\t      return CC_CLOBBER;\n+\n+\t    case 0xffff0000:\n+\t    case 0xfffe0000:\n+\t      return CC_CLOBBER;\n+\t    }\n+\n+\t  /* See if we can finish with 4 bytes.  */\n+\t  if ((intval & 0xffff) == 0)\n+\t    return CC_CLOBBER;\n+\t}\n+\n+      return CC_SET_ZN;\n+    }\n+}\n+\f\n+const char *\n output_logical_op (mode, operands)\n      enum machine_mode mode;\n      rtx *operands;"}, {"sha": "19c95fa4d9752de08208a81549056f9a775c57aa", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6ac401b6272a6a2109bdcca220798bbf6ddf90/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6ac401b6272a6a2109bdcca220798bbf6ddf90/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=7d6ac401b6272a6a2109bdcca220798bbf6ddf90", "patch": "@@ -837,17 +837,15 @@\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"addsi_h8300h\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r,r,r\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0\")\n-\t\t (match_operand:SI 2 \"nonmemory_operand\" \"L,N,i,r\")))]\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n+\t\t (match_operand:SI 2 \"nonmemory_operand\" \"i,r\")))]\n   \"TARGET_H8300H || TARGET_H8300S\"\n-  \"@\n-   adds\t%2,%S0\n-   subs\t%G2,%S0\n-   add.l\t%S2,%S0\n-   add.l\t%S2,%S0\"\n-  [(set_attr \"length\" \"2,2,6,2\")\n-   (set_attr \"cc\" \"none_0hit,none_0hit,set_zn,set_zn\")])\n+  \"* return output_plussi (operands);\"\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_plussi_length (operands)\"))\n+   (set (attr \"cc\")\n+\t(symbol_ref \"compute_plussi_cc (operands)\"))])\n \n (define_insn \"addsi3_incdec\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")"}]}