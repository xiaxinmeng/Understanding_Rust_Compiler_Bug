{"sha": "4dcfaf779cd72b5a7e3402e64c4d36c3bf6cef86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRjZmFmNzc5Y2Q3MmI1YTdlMzQwMmU2NGM0ZDM2YzNiZjZjZWY4Ng==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-04-08T06:51:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:51:54Z"}, "message": "gnatbind.adb (Restriction_Could_Be_Set): New procedure\n\n2008-04-08  Robert Dewar  <dewar@adacore.com>\n\n\t* gnatbind.adb (Restriction_Could_Be_Set): New procedure\n\t(List_Applicable_Restrictions): Do not list existing restrictions\n\nFrom-SVN: r134035", "tree": {"sha": "8010226b5ceb410b9f82dab7bed94baca7223897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8010226b5ceb410b9f82dab7bed94baca7223897"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4dcfaf779cd72b5a7e3402e64c4d36c3bf6cef86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dcfaf779cd72b5a7e3402e64c4d36c3bf6cef86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dcfaf779cd72b5a7e3402e64c4d36c3bf6cef86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dcfaf779cd72b5a7e3402e64c4d36c3bf6cef86/comments", "author": null, "committer": null, "parents": [{"sha": "8f3366c607ea6c93a075d5df16646d6e8ee48bee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f3366c607ea6c93a075d5df16646d6e8ee48bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f3366c607ea6c93a075d5df16646d6e8ee48bee"}], "stats": {"total": 112, "additions": 80, "deletions": 32}, "files": [{"sha": "48eceb0ff774d0809cff8e6a141942a98bee3493", "filename": "gcc/ada/gnatbind.adb", "status": "modified", "additions": 80, "deletions": 32, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4dcfaf779cd72b5a7e3402e64c4d36c3bf6cef86/gcc%2Fada%2Fgnatbind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4dcfaf779cd72b5a7e3402e64c4d36c3bf6cef86/gcc%2Fada%2Fgnatbind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatbind.adb?ref=4dcfaf779cd72b5a7e3402e64c4d36c3bf6cef86", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -164,48 +164,96 @@ procedure Gnatbind is\n       Additional_Restrictions_Listed : Boolean := False;\n       --  Set True if we have listed header for restrictions\n \n-   begin\n-      --  Loop through restrictions\n+      function Restriction_Could_Be_Set (R : Restriction_Id) return Boolean;\n+      --  Returns True if the given restriction can be listed as an additional\n+      --  restriction that could be set.\n \n-      for R in All_Restrictions loop\n-         if not No_Restriction_List (R) then\n+      ------------------------------\n+      -- Restriction_Could_Be_Set --\n+      ------------------------------\n \n-            --  We list a restriction if it is not violated, or if\n-            --  it is violated but the violation count is exactly known.\n+      function Restriction_Could_Be_Set (R : Restriction_Id) return Boolean is\n+         CR : Restrictions_Info renames Cumulative_Restrictions;\n \n-            if Cumulative_Restrictions.Violated (R) = False\n-              or else (R in All_Parameter_Restrictions\n-                       and then\n-                         Cumulative_Restrictions.Unknown (R) = False)\n-            then\n-               if not Additional_Restrictions_Listed then\n-                  Write_Eol;\n-                  Write_Line\n-                    (\"The following additional restrictions may be\" &\n-                     \" applied to this partition:\");\n-                  Additional_Restrictions_Listed := True;\n-               end if;\n+      begin\n+         case R is\n+\n+            --  Boolean restriction\n+\n+            when All_Boolean_Restrictions =>\n \n-               Write_Str (\"pragma Restrictions (\");\n+               --  The condition for listing a boolean restriction as an\n+               --  additional restriction that could be set is that it is\n+               --  not violated by any unit, and not already set.\n \n-               declare\n-                  S : constant String := Restriction_Id'Image (R);\n-               begin\n-                  Name_Len := S'Length;\n-                  Name_Buffer (1 .. Name_Len) := S;\n-               end;\n+               return CR.Violated (R) = False and then CR.Set (R) = False;\n \n-               Set_Casing (Mixed_Case);\n-               Write_Str (Name_Buffer (1 .. Name_Len));\n+            --  Parameter restriction\n \n-               if R in All_Parameter_Restrictions then\n-                  Write_Str (\" => \");\n-                  Write_Int (Int (Cumulative_Restrictions.Count (R)));\n+            when All_Parameter_Restrictions =>\n+\n+               --  If the restriction is violated and the level of violation is\n+               --  unknown, the restriction can definitely not be listed.\n+\n+               if CR.Violated (R) and then CR.Unknown (R) then\n+                  return False;\n+\n+               --  We can list the restriction if it is not set\n+\n+               elsif not CR.Set (R) then\n+                  return True;\n+\n+               --  We can list the restriction if is set to a greater value\n+               --  than the maximum value known for the violation.\n+\n+               else\n+                  return CR.Value (R) > CR.Count (R);\n                end if;\n \n-               Write_Str (\");\");\n+            --  No other values for R possible\n+\n+            when others =>\n+               raise Program_Error;\n+\n+         end case;\n+      end Restriction_Could_Be_Set;\n+\n+   --  Start of processing for List_Applicable_Restrictions\n+\n+   begin\n+      --  Loop through restrictions\n+\n+      for R in All_Restrictions loop\n+         if not No_Restriction_List (R)\n+            and then Restriction_Could_Be_Set (R)\n+         then\n+            if not Additional_Restrictions_Listed then\n                Write_Eol;\n+               Write_Line\n+                 (\"The following additional restrictions may be\" &\n+                  \" applied to this partition:\");\n+               Additional_Restrictions_Listed := True;\n+            end if;\n+\n+            Write_Str (\"pragma Restrictions (\");\n+\n+            declare\n+               S : constant String := Restriction_Id'Image (R);\n+            begin\n+               Name_Len := S'Length;\n+               Name_Buffer (1 .. Name_Len) := S;\n+            end;\n+\n+            Set_Casing (Mixed_Case);\n+            Write_Str (Name_Buffer (1 .. Name_Len));\n+\n+            if R in All_Parameter_Restrictions then\n+               Write_Str (\" => \");\n+               Write_Int (Int (Cumulative_Restrictions.Count (R)));\n             end if;\n+\n+            Write_Str (\");\");\n+            Write_Eol;\n          end if;\n       end loop;\n    end List_Applicable_Restrictions;"}]}