{"sha": "445d8da5fbd10e32f8ea470bd9ac02faba8fd718", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ1ZDhkYTVmYmQxMGUzMmY4ZWE0NzBiZDlhYzAyZmFiYThmZDcxOA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-06-20T13:01:21Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-06-20T15:12:32Z"}, "message": "coroutines: Update handling and failure for g-r-o-o-a-f [PR95505]\n\nThe actual issue is that (in the testcase) std::nothrow is not\navailable.  So update the handling of the get-return-on-alloc-fail\nto include the possibility that std::nothrow might not be\navailable.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95505\n\t* coroutines.cc (morph_fn_to_coro): Update handling of\n\tget-return-object-on-allocation-fail and diagnose missing\n\tstd::nothrow.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95505\n\t* g++.dg/coroutines/pr95505.C: New test.", "tree": {"sha": "9734fac4bb1b2cfac7648efd5ef69241a9d66ddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9734fac4bb1b2cfac7648efd5ef69241a9d66ddd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/445d8da5fbd10e32f8ea470bd9ac02faba8fd718", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445d8da5fbd10e32f8ea470bd9ac02faba8fd718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/445d8da5fbd10e32f8ea470bd9ac02faba8fd718", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445d8da5fbd10e32f8ea470bd9ac02faba8fd718/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57b4daf8dc4ed7b669cc70638866ddb00f5b7746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b4daf8dc4ed7b669cc70638866ddb00f5b7746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b4daf8dc4ed7b669cc70638866ddb00f5b7746"}], "stats": {"total": 77, "additions": 51, "deletions": 26}, "files": [{"sha": "3aaa3d4cd5775b381e05e34dbed85a4273e8cc0f", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8da5fbd10e32f8ea470bd9ac02faba8fd718/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8da5fbd10e32f8ea470bd9ac02faba8fd718/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=445d8da5fbd10e32f8ea470bd9ac02faba8fd718", "patch": "@@ -3913,30 +3913,25 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n   tree grooaf = NULL_TREE;\n   tree dummy_promise = build_dummy_object (get_coroutine_promise_type (orig));\n \n-  /* We don't require this, so lookup_promise_method can return NULL...  */\n+  /* We don't require this, so lookup_promise_method can return NULL,\n+     but, if the lookup succeeds, then the function must be usable.  */\n   if (grooaf_meth && BASELINK_P (grooaf_meth))\n-    {\n-      /* ... but, if the lookup succeeds, then the function must be\n-\t usable.\n-\t build_new_method_call () wants a valid pointer to (an empty)  args\n-\t list in this case.  */\n-      vec<tree, va_gc> *args = make_tree_vector ();\n-      grooaf = build_new_method_call (dummy_promise, grooaf_meth, &args,\n-\t\t\t\t      NULL_TREE, LOOKUP_NORMAL, NULL,\n-\t\t\t\t      tf_warning_or_error);\n-      release_tree_vector (args);\n-    }\n+    grooaf = build_new_method_call (dummy_promise, grooaf_meth, NULL,\n+\t\t\t\t    NULL_TREE, LOOKUP_NORMAL, NULL,\n+\t\t\t\t    tf_warning_or_error);\n \n   /* Allocate the frame, this has several possibilities:\n      [dcl.fct.def.coroutine] / 9 (part 1)\n      The allocation function\u2019s name is looked up in the scope of the promise\n      type.  It's not a failure for it to be absent see part 4, below.  */\n+\n   tree nwname = ovl_op_identifier (false, NEW_EXPR);\n-  tree fns = lookup_promise_method (orig, nwname, fn_start,\n-\t\t\t\t    /*musthave=*/false);\n   tree new_fn = NULL_TREE;\n-  if (fns && BASELINK_P (fns))\n+\n+  if (TYPE_HAS_NEW_OPERATOR (promise_type))\n     {\n+      tree fns = lookup_promise_method (orig, nwname, fn_start,\n+\t\t\t\t    /*musthave=*/true);\n       /* [dcl.fct.def.coroutine] / 9 (part 2)\n \tIf the lookup finds an allocation function in the scope of the promise\n \ttype, overload resolution is performed on a function call created by\n@@ -3966,30 +3961,29 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t    vec_safe_push (args, arg);\n \t}\n \n-      /* We might need to check that the provided function is nothrow.  */\n+      /* Note the function selected; we test to see if it's NOTHROW.  */\n       tree func;\n-      /* Failure is OK for the first attempt.  */\n+      /* Failure is not an error for this attempt.  */\n       new_fn = build_new_method_call (dummy_promise, fns, &args, NULL,\n \t\t\t\t      LOOKUP_NORMAL, &func, tf_none);\n       release_tree_vector (args);\n \n-      if (!new_fn || new_fn == error_mark_node)\n+      if (new_fn == error_mark_node)\n \t{\n \t  /* [dcl.fct.def.coroutine] / 9 (part 3)\n \t    If no viable function is found, overload resolution is performed\n \t    again on a function call created by passing just the amount of\n \t    space required as an argument of type std::size_t.  */\n-\t  args = make_tree_vector ();\n-\t  vec_safe_push (args, resizeable); /* Space needed.  */\n+\t  args = make_tree_vector_single (resizeable); /* Space needed.  */\n \t  new_fn = build_new_method_call (dummy_promise, fns, &args,\n \t\t\t\t\t  NULL_TREE, LOOKUP_NORMAL, &func,\n \t\t\t\t\t  tf_none);\n \t  release_tree_vector (args);\n \t}\n \n-     /* However, if the initial lookup succeeded, then one of these two\n-\toptions must be available.  */\n-    if (!new_fn || new_fn == error_mark_node)\n+     /* However, if the promise provides an operator new, then one of these\n+\ttwo options must be available.  */\n+    if (new_fn == error_mark_node)\n       {\n \terror_at (fn_start, \"%qE is provided by %qT but is not usable with\"\n \t\t  \" the function signature %qD\", nwname, promise_type, orig);\n@@ -3999,7 +3993,7 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n       error_at (fn_start, \"%qE is provided by %qT but %qE is not marked\"\n \t\t\" %<throw()%> or %<noexcept%>\", grooaf, promise_type, nwname);\n     }\n-  else\n+  else /* No operator new in the promise.  */\n     {\n       /* [dcl.fct.def.coroutine] / 9 (part 4)\n \t If this lookup fails, the allocation function\u2019s name is looked up in\n@@ -4009,7 +4003,6 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n       /* build_operator_new_call () will insert size needed as element 0 of\n \t this, and we might need to append the std::nothrow constant.  */\n       vec_alloc (args, 2);\n-\n       if (grooaf)\n \t{\n \t  /* [dcl.fct.def.coroutine] / 10 (part 2)\n@@ -4023,6 +4016,9 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t  tree std_nt = lookup_qualified_name (std_node,\n \t\t\t\t\t       get_identifier (\"nothrow\"),\n \t\t\t\t\t       0, /*complain=*/true, false);\n+\t  if (!std_nt || std_nt == error_mark_node)\n+\t    error_at (fn_start, \"%qE is provided by %qT but %<std::nothrow%> \"\n+\t\t      \"cannot be found\", grooaf, promise_type);\n \t  vec_safe_push (args, std_nt);\n \t}\n \n@@ -4037,7 +4033,10 @@ morph_fn_to_coro (tree orig, tree *resumer, tree *destroyer)\n \t\t\t\t\ttf_warning_or_error);\n       resizeable = build_call_expr_internal_loc\n \t(fn_start, IFN_CO_FRAME, size_type_node, 2, frame_size, coro_fp);\n-      CALL_EXPR_ARG (new_fn, 0) = resizeable;\n+      /* If the operator call fails for some reason, then don't try to\n+\t amend it.  */\n+      if (new_fn != error_mark_node)\n+\tCALL_EXPR_ARG (new_fn, 0) = resizeable;\n \n       release_tree_vector (args);\n     }"}, {"sha": "a76b827cae409315d25b268e531d24b2c2d3f217", "filename": "gcc/testsuite/g++.dg/coroutines/pr95505.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445d8da5fbd10e32f8ea470bd9ac02faba8fd718/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95505.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445d8da5fbd10e32f8ea470bd9ac02faba8fd718/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95505.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr95505.C?ref=445d8da5fbd10e32f8ea470bd9ac02faba8fd718", "patch": "@@ -0,0 +1,26 @@\n+#if __has_include (<coroutine>)\n+#include <coroutine>\n+using namespace std;\n+#elif defined (__clang__) && __has_include (<experimental/coroutine>)\n+#include <experimental/coroutine>\n+namespace std { using namespace experimental; }\n+#endif\n+\n+struct dummy\n+{\n+    struct promise_type\n+    {\n+        dummy get_return_object() const noexcept { return {}; }\n+        static dummy get_return_object_on_allocation_failure() noexcept { return {}; }\n+        std::suspend_always initial_suspend() const noexcept { return {}; }\n+        std::suspend_never final_suspend() const noexcept { return {}; }\n+        void return_void() const noexcept {}\n+        void unhandled_exception() const noexcept {}\n+    };\n+};\n+\n+dummy foo() // { dg-error {dummy::promise_type::get_return_object_on_allocation_failure.*but 'std::nothrow' cannot be found} }\n+{\n+    co_return;\n+}\n+"}]}