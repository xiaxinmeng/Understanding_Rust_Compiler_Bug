{"sha": "65ecca65ce6cc9170fb391bae7a07e82e1924440", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVlY2NhNjVjZTZjYzkxNzBmYjM5MWJhZTdhMDdlODJlMTkyNDQ0MA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@cat.daikokuya.demon.co.uk", "date": "2001-07-22T09:42:47Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-07-22T09:42:47Z"}, "message": "* dbxout.c, sdbout.c, varasm.c: Revert most recent patch.\n\nFrom-SVN: r44237", "tree": {"sha": "0d61bab33e60b3549c399f005e84779f8586b060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d61bab33e60b3549c399f005e84779f8586b060"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65ecca65ce6cc9170fb391bae7a07e82e1924440", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65ecca65ce6cc9170fb391bae7a07e82e1924440", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65ecca65ce6cc9170fb391bae7a07e82e1924440", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65ecca65ce6cc9170fb391bae7a07e82e1924440/comments", "author": null, "committer": null, "parents": [{"sha": "665e329311df8096714c918b5fe2da3d349c485f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665e329311df8096714c918b5fe2da3d349c485f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/665e329311df8096714c918b5fe2da3d349c485f"}], "stats": {"total": 181, "additions": 109, "deletions": 72}, "files": [{"sha": "52a647e0e7a7dc1fa63a53a831dd39c1f7be7b15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ecca65ce6cc9170fb391bae7a07e82e1924440/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ecca65ce6cc9170fb391bae7a07e82e1924440/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65ecca65ce6cc9170fb391bae7a07e82e1924440", "patch": "@@ -1,3 +1,7 @@\n+2001-07-22  Neil Booth  <neil@cat.daikokuya.demon.co.uk>\n+\n+\t* dbxout.c, sdbout.c, varasm.c: Revert most recent debug patch.\n+\n 2001-07-22  Richard Henderson  <rth@redhat.com>\n \n \t* regrename.c (regrename_optimize): Compute nregs for each"}, {"sha": "e7c2c546dcd6a9dbf916fab708c93b2db984dbda", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ecca65ce6cc9170fb391bae7a07e82e1924440/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ecca65ce6cc9170fb391bae7a07e82e1924440/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=65ecca65ce6cc9170fb391bae7a07e82e1924440", "patch": "@@ -313,7 +313,6 @@ static void dbxout_prepare_symbol\tPARAMS ((tree));\n static void dbxout_finish_symbol\tPARAMS ((tree));\n static void dbxout_block\t\tPARAMS ((tree, int, tree));\n static void dbxout_begin_function\tPARAMS ((tree));\n-static void dbxout_global_decl\t\tPARAMS ((tree));\n \f\n /* The debug hooks structure.  */\n #if defined (DBX_DEBUGGING_INFO)\n@@ -344,7 +343,7 @@ struct gcc_debug_hooks dbx_debug_hooks =\n #endif\n   debug_nothing_int,\t\t/* end_function */\n   dbxout_function_decl,\n-  dbxout_global_decl,\t\t/* global_decl */\n+  debug_nothing_tree,\t\t/* global_decl */\n   debug_nothing_tree,\t\t/* deferred_inline_function */\n   debug_nothing_tree,\t\t/* outlining_inline_function */\n   debug_nothing_rtx\t\t/* label */\n@@ -370,7 +369,7 @@ struct gcc_debug_hooks xcoff_debug_hooks =\n   debug_nothing_tree,\t\t/* begin_function */\n   xcoffout_end_function,\n   debug_nothing_tree,\t\t/* function_decl */\n-  dbxout_global_decl,\t\t/* global_decl */\n+  debug_nothing_tree,\t\t/* global_decl */\n   debug_nothing_tree,\t\t/* deferred_inline_function */\n   debug_nothing_tree,\t\t/* outlining_inline_function */\n   debug_nothing_rtx\t\t/* label */\n@@ -624,15 +623,6 @@ dbxout_end_block (line, n)\n   ASM_OUTPUT_INTERNAL_LABEL (asmfile, \"LBE\", n);\n }\n \n-/* Debug information for a global DECL.  Called from toplev.c after\n-   compilation proper has finished.  */\n-static void\n-dbxout_global_decl (decl)\n-     tree decl;\n-{\n-  dbxout_symbol (decl, 0);\n-} \n-\n /* Output dbx data for a function definition.\n    This includes a definition of the function name itself (a symbol),\n    definitions of the parameters (locating them in the parameter list)"}, {"sha": "accd9edb25976e44d6ee1415198ba10c179981fe", "filename": "gcc/sdbout.c", "status": "modified", "additions": 21, "deletions": 53, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ecca65ce6cc9170fb391bae7a07e82e1924440/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ecca65ce6cc9170fb391bae7a07e82e1924440/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=65ecca65ce6cc9170fb391bae7a07e82e1924440", "patch": "@@ -93,7 +93,6 @@ extern tree current_function_decl;\n #include \"sdbout.h\"\n \n static void sdbout_init\t\t\tPARAMS ((const char *));\n-static void sdbout_finish\t\tPARAMS ((const char *));\n static void sdbout_start_source_file\tPARAMS ((unsigned, const char *));\n static void sdbout_end_source_file\tPARAMS ((unsigned));\n static void sdbout_begin_block\t\tPARAMS ((unsigned, unsigned));\n@@ -125,7 +124,6 @@ static void sdbout_field_types\t\tPARAMS ((tree));\n static void sdbout_one_type\t\tPARAMS ((tree));\n static void sdbout_parms\t\tPARAMS ((tree));\n static void sdbout_reg_parms\t\tPARAMS ((tree));\n-static void sdbout_global_decl\t\tPARAMS ((tree));\n \f\n /* Random macros describing parts of SDB data.  */\n \n@@ -300,16 +298,16 @@ static struct sdb_file *current_file;\n /* The debug hooks structure.  */\n struct gcc_debug_hooks sdb_debug_hooks =\n {\n-  sdbout_init,\t\t\t/* init */\n-  sdbout_finish,\t\t/* finish */\n-  debug_nothing_int_charstar,\t/* define */\n-  debug_nothing_int_charstar,\t/* undef */\n-  sdbout_start_source_file,\t/* start_source_file */\n-  sdbout_end_source_file,\t/* end_source_file */\n-  sdbout_begin_block,\t\t/* begin_block */\n-  sdbout_end_block,\t\t/* end_block */\n+  sdbout_init,\n+  debug_nothing_charstar,\n+  debug_nothing_int_charstar,\n+  debug_nothing_int_charstar,\n+  sdbout_start_source_file,\n+  sdbout_end_source_file,\n+  sdbout_begin_block,\n+  sdbout_end_block,\n   debug_true_tree,\t\t/* ignore_block */\n-  sdbout_source_line,\t\t/* source_line */\n+  sdbout_source_line,\n #ifdef MIPS_DEBUGGING_INFO\n   /* Defer on MIPS systems so that parameter descriptions follow\n      function entry.  */\n@@ -319,11 +317,11 @@ struct gcc_debug_hooks sdb_debug_hooks =\n   sdbout_begin_prologue,\t/* begin_prologue */\n   debug_nothing_int,\t\t/* end_prologue */\n #endif\n-  sdbout_end_epilogue,\t\t/* end_epilogue */\n-  sdbout_begin_function,\t/* begin_function */\n-  sdbout_end_function,\t\t/* end_function */\n+  sdbout_end_epilogue,\n+  sdbout_begin_function,\n+  sdbout_end_function,\n   debug_nothing_tree,\t\t/* function_decl */\n-  sdbout_global_decl,\t\t/* global_decl */\n+  sdbout_global_decl,\n   debug_nothing_tree,\t\t/* deferred_inline_function */\n   debug_nothing_tree,\t\t/* outlining_inline_function */\n   sdbout_label\n@@ -1491,53 +1489,23 @@ sdbout_global_decl (decl)\n      tree decl;\n {\n   if (TREE_CODE (decl) == VAR_DECL\n-      && !DECL_EXTERNAL (decl)\n-      && DECL_RTL_SET_P (decl))\n+      && DECL_INITIAL (decl)\n+      && ! DECL_EXTERNAL (decl)\n+      && DECL_RTL (decl) != 0)\n     {\n       /* The COFF linker can move initialized global vars to the end.\n-\t And that can screw up the symbol ordering.  Defer those for\n-\t sdbout_finish ().  */\n-      if (!DECL_INITIAL (decl) || !TREE_PUBLIC (decl))\n+\t And that can screw up the symbol ordering.  By putting the\n+\t symbols in that order to begin with, we avoid a problem.\n+\t mcsun!unido!fauern!tumuc!pes@uunet.uu.net.  */\n+      if (TREE_PUBLIC (decl))\n \tsdbout_symbol (decl, 0);\n \n       /* Output COFF information for non-global file-scope initialized\n \t variables.  */\n-      if (DECL_INITIAL (decl) && GET_CODE (DECL_RTL (decl)) == MEM)\n+      if (GET_CODE (DECL_RTL (decl)) == MEM)\n \tsdbout_toplevel_data (decl);\n     }\n }\n-\n-/* Output initialized global vars at the end, in the order of\n-   definition.  See comment in sdbout_global_decl.  */\n-\n-static void\n-sdbout_finish (main_filename)\n-     const char *main_filename ATTRIBUTE_UNUSED;\n-{\n-  tree decl = getdecls ();\n-  unsigned int len = list_length (decl);\n-  tree *vec = (tree *) xmalloc (sizeof (tree) * len);\n-  unsigned int i;\n-\n-  /* Process the decls in reverse order--earliest first.  Put them\n-     into VEC from back to front, then take out from front.  */\n-\n-  for (i = 0; i < len; i++, decl = TREE_CHAIN (decl))\n-    vec[len - i - 1] = decl;\n-\n-  for (i = 0; i < len; i++)\n-    {\n-      decl = vec[i];\n-      if (TREE_CODE (decl) == VAR_DECL\n-\t  && ! DECL_EXTERNAL (decl)\n-\t  && DECL_INITIAL (decl)\n-\t  && TREE_PUBLIC (decl)\n-\t  && DECL_RTL_SET_P (decl))\n-\tsdbout_symbol (decl, 0);\n-    }\n-\n-  free (vec);\n-}\n \f\n /* Describe the beginning of an internal block within a function.\n    Also output descriptions of variables defined in this block."}, {"sha": "630dad0465449029030aa514d279cbaaccd55f7c", "filename": "gcc/varasm.c", "status": "modified", "additions": 82, "deletions": 7, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65ecca65ce6cc9170fb391bae7a07e82e1924440/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65ecca65ce6cc9170fb391bae7a07e82e1924440/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=65ecca65ce6cc9170fb391bae7a07e82e1924440", "patch": "@@ -1232,6 +1232,44 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \n   last_assemble_variable_decl = 0;\n \n+  if (DECL_RTL_SET_P (decl) && GET_CODE (DECL_RTL (decl)) == REG)\n+    {\n+      /* Do output symbol info for global register variables, but do nothing\n+\t else for them.  */\n+\n+      if (TREE_ASM_WRITTEN (decl))\n+\treturn;\n+      TREE_ASM_WRITTEN (decl) = 1;\n+\n+      /* Do no output if -fsyntax-only.  */\n+      if (flag_syntax_only)\n+\treturn;\n+\n+#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n+      /* File-scope global variables are output here.  */\n+      if ((write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n+\t   && top_level)\n+\tdbxout_symbol (decl, 0);\n+#endif\n+#ifdef SDB_DEBUGGING_INFO\n+      if (write_symbols == SDB_DEBUG && top_level\n+\t  /* Leave initialized global vars for end of compilation;\n+\t     see comment in compile_file.  */\n+\t  && (TREE_PUBLIC (decl) == 0 || DECL_INITIAL (decl) == 0))\n+\tsdbout_symbol (decl, 0);\n+#endif\n+\n+      /* Don't output any DWARF debugging information for variables here.\n+\t In the case of local variables, the information for them is output\n+\t when we do our recursive traversal of the tree representation for\n+\t the entire containing function.  In the case of file-scope variables,\n+\t we output information for all of them at the very end of compilation\n+\t while we are doing our final traversal of the chain of file-scope\n+\t declarations.  */\n+\n+      return;\n+    }\n+\n   /* Normally no need to say anything here for external references,\n      since assemble_external is called by the language-specific code\n      when a declaration is first seen.  */\n@@ -1245,13 +1283,6 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     return;\n \n-  /* Do nothing for global register variables.  */\n-  if (DECL_RTL_SET_P (decl) && GET_CODE (DECL_RTL (decl)) == REG)\n-    {\n-      TREE_ASM_WRITTEN (decl) = 1;\n-      return;\n-    }\n-\n   /* If type was incomplete when the variable was declared,\n      see if it is complete now.  */\n \n@@ -1380,6 +1411,27 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n            (decl, \"requested alignment for %s is greater than implemented alignment of %d.\",rounded);\n #endif\n        \n+#ifdef DBX_DEBUGGING_INFO\n+      /* File-scope global variables are output here.  */\n+      if (write_symbols == DBX_DEBUG && top_level)\n+\tdbxout_symbol (decl, 0);\n+#endif\n+#ifdef SDB_DEBUGGING_INFO\n+      if (write_symbols == SDB_DEBUG && top_level\n+\t  /* Leave initialized global vars for end of compilation;\n+\t     see comment in compile_file.  */\n+\t  && (TREE_PUBLIC (decl) == 0 || DECL_INITIAL (decl) == 0))\n+\tsdbout_symbol (decl, 0);\n+#endif\n+\n+      /* Don't output any DWARF debugging information for variables here.\n+\t In the case of local variables, the information for them is output\n+\t when we do our recursive traversal of the tree representation for\n+\t the entire containing function.  In the case of file-scope variables,\n+\t we output information for all of them at the very end of compilation\n+\t while we are doing our final traversal of the chain of file-scope\n+\t declarations.  */\n+\n #if 0 /* ??? We should either delete this or add a comment describing what\n \t it was intended to do and why we shouldn't delete it.  */\n       if (flag_shared_data)\n@@ -1442,6 +1494,29 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n   /* Record current section so we can restore it if dbxout.c clobbers it.  */\n   saved_in_section = in_section;\n \n+  /* Output the dbx info now that we have chosen the section.  */\n+\n+#ifdef DBX_DEBUGGING_INFO\n+  /* File-scope global variables are output here.  */\n+  if (write_symbols == DBX_DEBUG && top_level)\n+    dbxout_symbol (decl, 0);\n+#endif\n+#ifdef SDB_DEBUGGING_INFO\n+  if (write_symbols == SDB_DEBUG && top_level\n+      /* Leave initialized global vars for end of compilation;\n+\t see comment in compile_file.  */\n+      && (TREE_PUBLIC (decl) == 0 || DECL_INITIAL (decl) == 0))\n+    sdbout_symbol (decl, 0);\n+#endif\n+\n+  /* Don't output any DWARF debugging information for variables here.\n+     In the case of local variables, the information for them is output\n+     when we do our recursive traversal of the tree representation for\n+     the entire containing function.  In the case of file-scope variables,\n+     we output information for all of them at the very end of compilation\n+     while we are doing our final traversal of the chain of file-scope\n+     declarations.  */\n+\n   /* If the debugging output changed sections, reselect the section\n      that's supposed to be selected.  */\n   if (in_section != saved_in_section)"}]}