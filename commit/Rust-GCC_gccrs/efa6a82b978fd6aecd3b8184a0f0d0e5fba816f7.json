{"sha": "efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "node_id": "C_kwDOANBUbNoAKGVmYTZhODJiOTc4ZmQ2YWVjZDNiODE4NGEwZjBkMGU1ZmJhODE2Zjc", "commit": {"author": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2023-05-31T02:45:00Z"}, "committer": {"name": "Haochen Jiang", "email": "haochen.jiang@intel.com", "date": "2023-04-10T01:51:46Z"}, "message": "Support Intel AMX-COMPLEX\n\ngcc/ChangeLog:\n\n\t* common/config/i386/cpuinfo.h (get_available_features):\n\tDetect AMX-COMPLEX.\n\t* common/config/i386/i386-common.cc\n\t(OPTION_MASK_ISA2_AMX_COMPLEX_SET,\n\tOPTION_MASK_ISA2_AMX_COMPLEX_UNSET): New.\n\t(ix86_handle_option): Handle -mamx-complex.\n\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n\tAdd FEATURE_AMX_COMPLEX.\n\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY for\n\tamx-complex.\n\t* config.gcc: Add amxcomplexintrin.h.\n\t* config/i386/cpuid.h (bit_AMX_COMPLEX): New.\n\t* config/i386/i386-c.cc (ix86_target_macros_internal): Define\n\t__AMX_COMPLEX__.\n\t* config/i386/i386-isa.def (AMX_COMPLEX): Add DEF_PTA(AMX_COMPLEX).\n\t* config/i386/i386-options.cc (ix86_valid_target_attribute_inner_p):\n\tHandle amx-complex.\n\t* config/i386/i386.opt: Add option -mamx-complex.\n\t* config/i386/immintrin.h: Include amxcomplexintrin.h.\n\t* doc/extend.texi: Document amx-complex.\n\t* doc/invoke.texi: Document -mamx-complex.\n\t* doc/sourcebuild.texi: Document target amx-complex.\n\t* config/i386/amxcomplexintrin.h: New file.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/other/i386-2.C: Add -mamx-complex.\n\t* g++.dg/other/i386-3.C: Ditto.\n\t* gcc.target/i386/amx-check.h: Add cpu check for AMX-COMPLEX.\n\t* gcc.target/i386/amx-helper.h: Add amx-complex support.\n\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n\t* gcc.target/i386/sse-12.c: Add -mamx-complex.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Add amx-complex.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* lib/target-supports.exp (check_effective_target_amx_complex): New.\n\t* gcc.target/i386/amxcomplex-asmatt-1.c: New test.\n\t* gcc.target/i386/amxcomplex-asmintel-1.c: Ditto.\n\t* gcc.target/i386/amxcomplex-cmmimfp16ps-2.c: Ditto.\n\t* gcc.target/i386/amxcomplex-cmmrlfp16ps-2.c: Ditto.", "tree": {"sha": "6d64c94bd2ee20d33043cdbbe32535812885c4fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d64c94bd2ee20d33043cdbbe32535812885c4fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/comments", "author": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jianghc724", "id": 10798680, "node_id": "MDQ6VXNlcjEwNzk4Njgw", "avatar_url": "https://avatars.githubusercontent.com/u/10798680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jianghc724", "html_url": "https://github.com/jianghc724", "followers_url": "https://api.github.com/users/jianghc724/followers", "following_url": "https://api.github.com/users/jianghc724/following{/other_user}", "gists_url": "https://api.github.com/users/jianghc724/gists{/gist_id}", "starred_url": "https://api.github.com/users/jianghc724/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jianghc724/subscriptions", "organizations_url": "https://api.github.com/users/jianghc724/orgs", "repos_url": "https://api.github.com/users/jianghc724/repos", "events_url": "https://api.github.com/users/jianghc724/events{/privacy}", "received_events_url": "https://api.github.com/users/jianghc724/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14a864ae5d9e06236489a5629f4f76008630a9e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14a864ae5d9e06236489a5629f4f76008630a9e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14a864ae5d9e06236489a5629f4f76008630a9e6"}], "stats": {"total": 287, "additions": 270, "deletions": 17}, "files": [{"sha": "61559ed9de2481e0ba15e438a1ad5a7b9dae974a", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -879,6 +879,8 @@ get_available_features (struct __processor_model *cpu_model,\n \t{\n \t  if (eax & bit_AMX_FP16)\n \t    set_feature (FEATURE_AMX_FP16);\n+\t  if (edx & bit_AMX_COMPLEX)\n+\t    set_feature (FEATURE_AMX_COMPLEX);\n \t}\n     }\n "}, {"sha": "d90c558311bb4fab0821faaf07c27d21c5a7ec64", "filename": "gcc/common/config/i386/i386-common.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.cc?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -117,6 +117,8 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA2_AMX_TILE | OPTION_MASK_ISA2_AMX_FP16)\n #define OPTION_MASK_ISA2_PREFETCHI_SET OPTION_MASK_ISA2_PREFETCHI\n #define OPTION_MASK_ISA2_RAOINT_SET OPTION_MASK_ISA2_RAOINT\n+#define OPTION_MASK_ISA2_AMX_COMPLEX_SET \\\n+  (OPTION_MASK_ISA2_AMX_TILE | OPTION_MASK_ISA2_AMX_COMPLEX)\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -282,7 +284,8 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_TSXLDTRK_UNSET OPTION_MASK_ISA2_TSXLDTRK\n #define OPTION_MASK_ISA2_AMX_TILE_UNSET \\\n   (OPTION_MASK_ISA2_AMX_TILE | OPTION_MASK_ISA2_AMX_INT8_UNSET \\\n-   | OPTION_MASK_ISA2_AMX_BF16_UNSET | OPTION_MASK_ISA2_AMX_FP16_UNSET)\n+   | OPTION_MASK_ISA2_AMX_BF16_UNSET | OPTION_MASK_ISA2_AMX_FP16_UNSET \\\n+   | OPTION_MASK_ISA2_AMX_COMPLEX_UNSET)\n #define OPTION_MASK_ISA2_AMX_INT8_UNSET OPTION_MASK_ISA2_AMX_INT8\n #define OPTION_MASK_ISA2_AMX_BF16_UNSET OPTION_MASK_ISA2_AMX_BF16\n #define OPTION_MASK_ISA2_UINTR_UNSET OPTION_MASK_ISA2_UINTR\n@@ -296,6 +299,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AMX_FP16_UNSET OPTION_MASK_ISA2_AMX_FP16\n #define OPTION_MASK_ISA2_PREFETCHI_UNSET OPTION_MASK_ISA2_PREFETCHI\n #define OPTION_MASK_ISA2_RAOINT_UNSET OPTION_MASK_ISA2_RAOINT\n+#define OPTION_MASK_ISA2_AMX_COMPLEX_UNSET OPTION_MASK_ISA2_AMX_COMPLEX\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -1246,6 +1250,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mamx_complex:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AMX_COMPLEX_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AMX_COMPLEX_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AMX_COMPLEX_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AMX_COMPLEX_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mfma:\n       if (value)\n \t{"}, {"sha": "2dafbb25a49debaa511f2763a93daf0fc04d56d5", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -253,6 +253,7 @@ enum processor_features\n   FEATURE_AMX_FP16,\n   FEATURE_PREFETCHI,\n   FEATURE_RAOINT,\n+  FEATURE_AMX_COMPLEX,\n   CPU_FEATURE_MAX\n };\n "}, {"sha": "d4b0b23b417f8bf621222d5c5e92d91e43d490f9", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -184,4 +184,6 @@ ISA_NAMES_TABLE_START\n   ISA_NAMES_TABLE_ENTRY(\"amx-fp16\", FEATURE_AMX_FP16, P_NONE, \"-mamx-fp16\")\n   ISA_NAMES_TABLE_ENTRY(\"prefetchi\", FEATURE_PREFETCHI, P_NONE, \"-mprefetchi\")\n   ISA_NAMES_TABLE_ENTRY(\"raoint\", FEATURE_RAOINT, P_NONE, \"-mraoint\")\n+  ISA_NAMES_TABLE_ENTRY(\"amx-complex\", FEATURE_AMX_COMPLEX,\n+\t\t\tP_NONE, \"-mamx-complex\")\n ISA_NAMES_TABLE_END"}, {"sha": "6fd1594480a1d2054f499573b498781dfafd1d93", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -435,7 +435,7 @@ i[34567]86-*-* | x86_64-*-*)\n \t\t       mwaitintrin.h avx512fp16intrin.h avx512fp16vlintrin.h\n \t\t       avxifmaintrin.h avxvnniint8intrin.h avxneconvertintrin.h\n \t\t       cmpccxaddintrin.h amxfp16intrin.h prfchiintrin.h\n-\t\t       raointintrin.h\"\n+\t\t       raointintrin.h amxcomplexintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "6ea1eca04007d94ee54e9a28566e66e839c613e6", "filename": "gcc/config/i386/amxcomplexintrin.h", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fconfig%2Fi386%2Famxcomplexintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fconfig%2Fi386%2Famxcomplexintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Famxcomplexintrin.h?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -0,0 +1,59 @@\n+/* Copyright (C) 2023 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#if !defined _IMMINTRIN_H_INCLUDED\n+#error \"Never use <amxcomplexintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AMXCOMPLEXINTRIN_H_INCLUDED\n+#define _AMXCOMPLEXINTRIN_H_INCLUDED\n+\n+#if !defined(__AMX_COMPLEX__)\n+#pragma GCC push_options\n+#pragma GCC target(\"amx-complex\")\n+#define __DISABLE_AMX_COMPLEX__\n+#endif /* __AMX_COMPLEX__ */\n+\n+#if defined(__x86_64__)\n+#define _tile_cmmimfp16ps_internal(src1_dst,src2,src3)\t\t\t\t\\\n+  __asm__ volatile\\\n+  (\"{tcmmimfp16ps\\t%%tmm\"#src3\", %%tmm\"#src2\", %%tmm\"#src1_dst\"|tcmmimfp16ps\\t%%tmm\"#src1_dst\", %%tmm\"#src2\", %%tmm\"#src3\"}\" ::)\n+\n+#define _tile_cmmrlfp16ps_internal(src1_dst,src2,src3)\t\t\t\t\\\n+  __asm__ volatile\\\n+  (\"{tcmmrlfp16ps\\t%%tmm\"#src3\", %%tmm\"#src2\", %%tmm\"#src1_dst\"|tcmmrlfp16ps\\t%%tmm\"#src1_dst\", %%tmm\"#src2\", %%tmm\"#src3\"}\" ::)\n+\n+#define _tile_cmmimfp16ps(src1_dst,src2,src3)\t\t\t\t\t\\\n+  _tile_cmmimfp16ps_internal (src1_dst, src2, src3)\n+\n+#define _tile_cmmrlfp16ps(src1_dst,src2,src3)\t\t\t\t\t\\\n+  _tile_cmmrlfp16ps_internal (src1_dst, src2, src3)\n+\n+#endif\n+\n+#ifdef __DISABLE_AMX_COMPLEX__\n+#undef __DISABLE_AMX_COMPLEX__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AMX_COMPLEX__ */\n+\n+#endif /* _AMXCOMPLEXINTRIN_H_INCLUDED */"}, {"sha": "e1d6d2ff77c7eb62c8382ccd224d1d9623062174", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -141,6 +141,7 @@\n #define bit_AMX_BF16    (1 << 22)\n #define bit_AMX_TILE    (1 << 24)\n #define bit_AMX_INT8    (1 << 25)\n+#define bit_AMX_COMPLEX (1 << 8)\n \n /* Extended State Enumeration Sub-leaf (%eax == 0xd, %ecx == 1) */\n #define bit_XSAVEOPT\t(1 << 0)"}, {"sha": "e7bd7cc706c9e79693f956db8bceb9d8a58c998c", "filename": "gcc/config/i386/i386-c.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fconfig%2Fi386%2Fi386-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.cc?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -675,6 +675,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__PREFETCHI__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_RAOINT)\n     def_or_undef (parse_in, \"__RAOINT__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_AMX_COMPLEX)\n+    def_or_undef (parse_in, \"__AMX_COMPLEX__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "0634c6f5bac31eab051e5f4326808f5624434ac6", "filename": "gcc/config/i386/i386-isa.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-isa.def?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -116,3 +116,4 @@ DEF_PTA(CMPCCXADD)\n DEF_PTA(AMX_FP16)\n DEF_PTA(PREFETCHI)\n DEF_PTA(RAOINT)\n+DEF_PTA(AMX_COMPLEX)"}, {"sha": "2cb0bddcd35e1caf30c268483cb19543d84219a1", "filename": "gcc/config/i386/i386-options.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fconfig%2Fi386%2Fi386-options.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.cc?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -238,7 +238,8 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mcmpccxadd\",      OPTION_MASK_ISA2_CMPCCXADD },\n   { \"-mamx-fp16\",       OPTION_MASK_ISA2_AMX_FP16 },\n   { \"-mprefetchi\",      OPTION_MASK_ISA2_PREFETCHI },\n-  { \"-mraoint\", \tOPTION_MASK_ISA2_RAOINT }\n+  { \"-mraoint\", \tOPTION_MASK_ISA2_RAOINT },\n+  { \"-mamx-complex\",\tOPTION_MASK_ISA2_AMX_COMPLEX }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1089,6 +1090,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"amx-fp16\", OPT_mamx_fp16),\n     IX86_ATTR_ISA (\"prefetchi\",   OPT_mprefetchi),\n     IX86_ATTR_ISA (\"raoint\", OPT_mraoint),\n+    IX86_ATTR_ISA (\"amx-complex\", OPT_mamx_complex),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "d74f6b1f8fc3b0fcde5c93bf286088dcde2e8237", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -1274,3 +1274,7 @@ Enum(lam_type) String(u48) Value(lam_u48)\n \n EnumValue\n Enum(lam_type) String(u57) Value(lam_u57)\n+\n+mamx-complex\n+Target Mask(ISA2_AMX_COMPLEX) Var(ix86_isa_flags2) Save\n+Support AMX-COMPLEX built-in functions and code generation."}, {"sha": "b220d8719427f7760584bbe8114f2dd32ef25067", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -132,6 +132,8 @@\n \n #include <amxbf16intrin.h>\n \n+#include <amxcomplexintrin.h>\n+\n #include <prfchwintrin.h>\n \n #include <keylockerintrin.h>"}, {"sha": "b2a1643c53f6a0df71ee06d31b40eb995065de58", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -7069,6 +7069,11 @@ Enable/disable the generation of the PREFETCHI instructions.\n @itemx no-raoint\n Enable/disable the generation of the RAOINT instructions.\n \n+@cindex @code{target(\"amx-complex\")} function attribute, x86\n+@item amx-complex\n+@itemx no-amx-complex\n+Enable/disable the generation of the AMX-COMPLEX instructions.\n+\n @cindex @code{target(\"cld\")} function attribute, x86\n @item cld\n @itemx no-cld"}, {"sha": "a38547f53e53563784fb85a3aa78ae44785955c0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -1429,7 +1429,7 @@ See RS/6000 and PowerPC Options.\n -mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk\n -mamx-tile  -mamx-int8  -mamx-bf16 -muintr -mhreset -mavxvnni\n -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16\n--mprefetchi -mraoint\n+-mprefetchi -mraoint -mamx-complex\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg}\n -mkl -mwidekl\n@@ -33337,6 +33337,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @need 200\n @opindex mraoint\n @itemx -mraoint\n+@need 200\n+@opindex mamx-complex\n+@itemx -mamx-complex\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4, SSE4A, SSE4.1, SSE4.2, AVX, AVX2, AVX512F, AVX512PF,\n AVX512ER, AVX512CD, AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, SHA,\n@@ -33347,9 +33350,9 @@ XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16,\n ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE,\n UINTR, HRESET, AMXTILE, AMXINT8, AMXBF16, KL, WIDEKL, AVXVNNI, AVX512-FP16,\n-AVXIFMA, AVXVNNIINT8, AVXNECONVERT, CMPCCXADD, AMX-FP16, PREFETCHI, RAOINT or\n-CLDEMOTE extended instruction sets. Each has a corresponding @option{-mno-}\n-option to disable use of these instructions.\n+AVXIFMA, AVXVNNIINT8, AVXNECONVERT, CMPCCXADD, AMX-FP16, PREFETCHI, RAOINT,\n+AMX-COMPLEX or CLDEMOTE extended instruction sets. Each has a corresponding\n+@option{-mno-} option to disable use of these instructions.\n \n These extensions are also available as built-in functions: see\n @ref{x86 Built-in Functions}, for details of the functions enabled and"}, {"sha": "526020c751150cd74f766eb83eaf61de6f4374cf", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -2514,6 +2514,9 @@ Target supports the execution of @code{amx-int8} instructions.\n @item amx_bf16\n Target supports the execution of @code{amx-bf16} instructions.\n \n+@item amx_complex\n+Target supports the execution of @code{amx-complex} instructions.\n+\n @item amx_fp16\n Target supports the execution of @code{amx-fp16} instructions.\n "}, {"sha": "6fe07e18fc6b9ce8f49c4a085f76d3ca733a2af4", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi -mraoint\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi -mraoint -mamx-complex\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "55c8167730012fe2684cf2e0b447ab75a6d14a14", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi -mraoint\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi -mraoint -mamx-complex\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "f1a04cf1f3c64964db59b26b1db4320bde93235b", "filename": "gcc/testsuite/gcc.target/i386/amx-check.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-check.h?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -216,6 +216,9 @@ main ()\n #ifdef AMX_FP16\n       && __builtin_cpu_supports (\"amx-fp16\")\n #endif\n+#ifdef AMX_COMPLEX\n+      && __builtin_cpu_supports (\"amx-complex\")\n+#endif\n #ifdef __linux__\n       && request_perm_xtile_data ()\n #endif"}, {"sha": "6ed9f5eb30e3164c6e3c85f3d9ba1288e51adaa7", "filename": "gcc/testsuite/gcc.target/i386/amx-helper.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-helper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-helper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famx-helper.h?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -1,6 +1,6 @@\n #ifndef AMX_HELPER_H_INCLUDED\n #define AMX_HELPER_H_INCLUDED\n-#if defined(AMX_FP16)\n+#if defined(AMX_FP16) || defined(AMX_COMPLEX)\n #include <immintrin.h>\n #include <xmmintrin.h>\n #endif\n@@ -12,7 +12,7 @@ typedef union\n   uint16_t u;\n } union16f_uw;\n \n-#if defined(AMX_FP16)\n+#if defined(AMX_FP16) || defined(AMX_COMPLEX)\n /* Transformation functions between fp16/float */\n static uint16_t make_f32_fp16 (float f)\n {"}, {"sha": "b6745e34b8b8c95144d012af03d278df7eafc486", "filename": "gcc/testsuite/gcc.target/i386/amxcomplex-asmatt-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-asmatt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-asmatt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-asmatt-1.c?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mamx-complex\" } */\n+/* { dg-final { scan-assembler \"tcmmimfp16ps\\[ \\\\t]+\\[^\\n\\]*%tmm3+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm1\"  } } */\n+/* { dg-final { scan-assembler \"tcmmrlfp16ps\\[ \\\\t]+\\[^\\n\\]*%tmm3+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm1\"  } } */\n+#include <immintrin.h>\n+\n+#define TMM1 1\n+#define TMM2 2\n+#define TMM3 3\n+\n+void TEST()\n+{\n+  _tile_cmmimfp16ps (TMM1, TMM2, TMM3);\n+  _tile_cmmrlfp16ps (TMM1, TMM2, TMM3);\n+}"}, {"sha": "305465e88607a731967e99aae532e10a00144505", "filename": "gcc/testsuite/gcc.target/i386/amxcomplex-asmintel-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-asmintel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-asmintel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-asmintel-1.c?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-require-effective-target masm_intel } */\n+/* { dg-options \"-O2 -mamx-complex -masm=intel\" } */\n+/* { dg-final { scan-assembler \"tcmmimfp16ps\\[ \\\\t]+\\[^\\n\\]*%tmm1+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm3\"  } } */\n+/* { dg-final { scan-assembler \"tcmmrlfp16ps\\[ \\\\t]+\\[^\\n\\]*%tmm1+\\[^\\n\\]*%tmm2+\\[^\\n\\]*%tmm3\"  } } */\n+#include <immintrin.h>\n+\n+void TEST()\n+{\n+  _tile_cmmimfp16ps (1, 2, 3);\n+  _tile_cmmrlfp16ps (1, 2, 3);\n+}"}, {"sha": "6e3762c9f6f4059479e82fb00a88fc47a5eb8414", "filename": "gcc/testsuite/gcc.target/i386/amxcomplex-cmmimfp16ps-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-cmmimfp16ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-cmmimfp16ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-cmmimfp16ps-2.c?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-require-effective-target amx_complex } */\n+/* { dg-require-effective-target avx512fp16 } */\n+/* { dg-options \"-O2 -mamx-complex -mavx512fp16\" } */\n+#define AMX_COMPLEX\n+#define DO_TEST test_amx_complex_cmmimfp16ps\n+void test_amx_complex_cmmimfp16ps ();\n+#include \"amx-helper.h\"\n+\n+void calc_matrix_cmmimfp16ps (__tile *dst, __tile *src1, __tile *src2)\n+{\n+  uint16_t *src1_buf = (uint16_t *) src1->buf;\n+  uint16_t *src2_buf = (uint16_t *) src2->buf;\n+  float *dst_buf = (float *) dst->buf;\n+  \n+  int M = src1->rows;\n+  int N = src1->colsb / 4;\n+  int K = src2->colsb / 4;\n+  int i, j, k, t;\n+\n+  for (i = 0; i < M; i++)\n+    for (j = 0; j < N; j++)\n+      for (k = 0; k < K; k++)\n+\tfor (t = 0; t < 2; t+=2)\n+\t  dst_buf[i * N + k] +=\n+\t  (make_fp16_f32(src1_buf[i * 2 * N + 2 * j + t]) *\n+\t    make_fp16_f32(src2_buf[j * 2 * K + 2 * k + t + 1])) +\n+\t  (make_fp16_f32(src1_buf[i * 2 * N + 2 * j + t + 1]) *\n+\t    make_fp16_f32(src2_buf[j * 2 * K + 2 * k + t]));\n+}\n+\n+void test_amx_complex_cmmimfp16ps ()\n+{\n+  __tilecfg_u cfg;\n+  __tile dst, dst_ref, src1, src2;\n+  uint8_t tmp_dst_buf[1024], tmp_dst_zero_buf[1024];\n+\n+  init_fp16_max_tile_buffer (tmp_dst_buf);\n+  init_fp16_max_tile_zero_buffer (tmp_dst_zero_buf);\n+\n+  init_tile_config (&cfg);\n+  init_tile_reg_and_src_with_buffer (1, dst, tmp_dst_zero_buf);\n+  init_tile_reg_and_src_with_buffer (2, src1, tmp_dst_buf);\n+  init_tile_reg_and_src_with_buffer (3, src2, tmp_dst_buf);\n+\n+  calc_matrix_cmmimfp16ps (&dst, &src1, &src2);\n+  \n+  _tile_cmmimfp16ps (1, 2, 3);\n+  _tile_stored (1, dst_ref.buf, _STRIDE);\n+\n+  if (!check_tile_register (&dst_ref, &dst))\n+        abort ();\n+}"}, {"sha": "15940708a0288f086b81ac337bc9ea9e8a12cf69", "filename": "gcc/testsuite/gcc.target/i386/amxcomplex-cmmrlfp16ps-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-cmmrlfp16ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-cmmrlfp16ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Famxcomplex-cmmrlfp16ps-2.c?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-require-effective-target amx_complex } */\n+/* { dg-require-effective-target avx512fp16 } */\n+/* { dg-options \"-O2 -mamx-complex -mavx512fp16\" } */\n+#define AMX_COMPLEX\n+#define DO_TEST test_amx_complex_cmmrlfp16ps\n+void test_amx_complex_cmmrlfp16ps();\n+#include \"amx-helper.h\"\n+\n+void calc_matrix_cmmrlfp16ps (__tile *dst, __tile *src1, __tile *src2)\n+{\n+  uint16_t *src1_buf = (uint16_t *) src1->buf;\n+  uint16_t *src2_buf = (uint16_t *) src2->buf;\n+  float *dst_buf = (float *) dst->buf;\n+  \n+  int M = src1->rows;\n+  int N = src1->colsb / 4;\n+  int K = src2->colsb / 4;\n+  int i, j, k, t;\n+\n+  for (i = 0; i < M; i++)\n+    for (j = 0; j < N; j++)\n+      for (k = 0; k < K; k++)\n+\tfor (t = 0; t < 2; t+=2)\n+\t  dst_buf[i * N + k] += \n+\t    (make_fp16_f32 (src1_buf[i * 2 * N + 2 * j + t]) *\n+\t      make_fp16_f32 (src2_buf[j * 2 * K + 2 * k + t])) -\n+\t    (make_fp16_f32 (src1_buf[i * 2 * N + 2 * j + t + 1]) *\n+\t      make_fp16_f32 (src2_buf[j * 2 * K + 2 * k + t + 1]));\n+}\n+\n+void test_amx_complex_cmmrlfp16ps ()\n+{\n+  __tilecfg_u cfg;\n+  __tile dst, dst_ref, src1, src2;\n+  uint8_t tmp_dst_buf[1024], tmp_dst_zero_buf[1024];\n+\n+  init_fp16_max_tile_buffer (tmp_dst_buf);\n+  init_fp16_max_tile_zero_buffer (tmp_dst_zero_buf);\n+\n+  init_tile_config (&cfg);\n+  init_tile_reg_and_src_with_buffer (1, dst, tmp_dst_zero_buf);\n+  init_tile_reg_and_src_with_buffer (2, src1, tmp_dst_buf);\n+  init_tile_reg_and_src_with_buffer (3, src2, tmp_dst_buf);\n+\n+  calc_matrix_cmmrlfp16ps (&dst, &src1, &src2);\n+  \n+  _tile_cmmrlfp16ps (1, 2, 3);\n+  _tile_stored (1, dst_ref.buf, _STRIDE);\n+\n+  if (!check_tile_register (&dst_ref, &dst))\n+        abort ();\n+}"}, {"sha": "cf2899f9c32c02d3481ce5aad05d4216acaaa35a", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -87,6 +87,7 @@ extern void test_cmpccxadd (void)\t\t__attribute__((__target__(\"cmpccxadd\")));\n extern void test_amx_fp16 (void)\t\t__attribute__((__target__(\"amx-fp16\")));\n extern void test_prefetchi (void)               __attribute__((__target__(\"prefetchi\")));\n extern void test_raoint (void)                  __attribute__((__target__(\"raoint\")));\n+extern void test_amx_complex (void)\t\t__attribute__((__target__(\"amx-complex\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -175,6 +176,7 @@ extern void test_no_cmpccxadd (void)            __attribute__((__target__(\"no-cm\n extern void test_no_amx_fp16 (void)\t\t__attribute__((__target__(\"no-amx-fp16\")));\n extern void test_no_prefetchi (void)            __attribute__((__target__(\"no-prefetchi\")));\n extern void test_no_raoint (void)               __attribute__((__target__(\"no-raoint\")));\n+extern void test_no_amx_complex (void)\t\t__attribute__((__target__(\"no-amx-complex\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "ae4ffd1975f88013bc7d473e0bed4983eee07f28", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavxifma -mavxvnniint8 -mavxneconvert -mamx-fp16 -mraoint\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavxifma -mavxvnniint8 -mavxneconvert -mamx-fp16 -mraoint -mamx-complex\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "f046a68ddbb57a92d1bceb634e2fd458f7207af8", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi -mraoint\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mcmpccxadd -mamx-fp16 -mprefetchi -mraoint -mamx-complex\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "05322f7e9146ed1eb2d42bbfc9f12fbc299aa1e2", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mamx-fp16 -mraoint\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16 -mavxifma -mavxvnniint8 -mavxneconvert -mamx-fp16 -mraoint -mamx-complex\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "53c38b702416e922e547769909cfb01e8dd36a35", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -103,7 +103,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,amx-fp16,raoint\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,amx-fp16,raoint,amx-complex\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -220,7 +220,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,amx-fp16,raoint\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,amx-fp16,raoint,amx-complex\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "50bf85a33921db16132cd2f8950da3739594d362", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -847,6 +847,6 @@\n #define __builtin_ia32_cmpccxadd(A, B, C, D) __builtin_ia32_cmpccxadd(A, B, C, 1)\n #define __builtin_ia32_cmpccxadd64(A, B, C, D) __builtin_ia32_cmpccxadd64(A, B, C, 1)\n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,cmpccxadd,amx-fp16,prefetchi,raoint\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16,avxifma,avxvnniint8,avxneconvert,cmpccxadd,amx-fp16,prefetchi,raoint,amx-complex\")\n \n #include <x86intrin.h>"}, {"sha": "ad68af51f915a381092d2cabb3b13e796ad29c27", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=efa6a82b978fd6aecd3b8184a0f0d0e5fba816f7", "patch": "@@ -9750,6 +9750,17 @@ proc check_effective_target_raoint { } {\n     } \"-mraoint\" ]\n }\n \n+# Return 1 if amx-complex instructions can be compiled.\n+proc check_effective_target_amx_complex { } {\n+    return [check_no_compiler_messages amx_complex object {\n+\tvoid\n+\tfoo ()\n+\t{\n+\t  __asm__ volatile (\"tcmmimfp16ps\\t%%tmm1, %%tmm2, %%tmm3\" ::);\n+\t}\n+    } \"-mamx-complex\" ]\n+}\n+\n # Return 1 if sse instructions can be compiled.\n proc check_effective_target_sse { } {\n     return [check_no_compiler_messages sse object {"}]}