{"sha": "24d047a30a8007163d0eea43e8dd445e2b999160", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRkMDQ3YTMwYTgwMDcxNjNkMGVlYTQzZThkZDQ0NWUyYjk5OTE2MA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-06-09T02:30:30Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-06-09T02:30:30Z"}, "message": "symtab.c (dump_symtab_base): Update dumping.\n\n\t* symtab.c (dump_symtab_base): Update dumping.\n\t(symtab_make_decl_local): Clear only DECL_COMDAT.\n\t* tree-vect-data-refs.c (Check that variable is static before\n\ttampering with sections.\n\t* cgraphclones.c (duplicate_thunk_for_node): Do not clear section name.\n\t(cgraph_create_virtual_clone): Likewise.\n\t* tree.c (decl_comdat_group, decl_comdat_group_id): Constify argument.\n\t(decl_section_name, set_decl_section_name): New accessors.\n\t(find_decls_types_r): Do not walk section name\n\t* tree.h (DECL_SECTION_NAME): Implement using\n\tdecl_section_name.\n\t(decl_comdat_group, decl_comdat_group_id): Constify.\n\t(decl_section_name, set_decl_section_name): Update.\n\t* varpool.c (varpool_finalize_named_section_flags): Use\n\tget_section.\n\t* cgraph.c (cgraph_add_thunk): Reset node instead of rebuilding.\n\t(cgraph_make_node_local_1): Clear section and comdat group.\n\t* cgraph.h (set_comdat_group): Sanity check.\n\t(get_section, set_section): New.\n\t* ipa-comdats.c (ipa_comdats): Use get_section.\n\t* ipa.c (ipa_discover_readonly_nonaddressable_var): Likewise.\n\t* lto-streamer-out.c: Do not follow section names.\n\t* c-family/c-common.c (handle_section_attribute):\n\tUpdate.\n\t* lto-cgraph.c (lto_output_node): Output section.\n\t(lto_output_varpool_node): Likewise.\n\t(read_comdat_group): Rename to ...\n\t(read_identifier): ... this one.\n\t(read_string_cst): New function.\n\t(input_node, input_varpool_node): Input section names.\n\t* tree-emutls.c (get_emutls_init_templ_addr): Update.\n\t(new_emutls_decl): Update.\n\t(secname_for_decl): Check section names only of static\n\tvars.\n\t* config/mep/mep.c (mep_unique_section): Use set_decl_section_name.\n\t* config/i386/winnt.c (i386_pe_unique_section): Likewise.\n\t* config/i386/i386.c (x86_64_elf_unique_section): Likewise.\n\t* config/c6x/c6x.c (c6x_elf_unique_section): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_xcoff_unique_section): Likewise.\n\t* config/mcore/mcore.c (mcore_unique_section): Likewise.\n\t* config/mips/mips.c (mips16_build_function_stub): Likewise.\n\t* config/v850/v850.c (v850_insert_attributes): Likewise.\n\t* config/h8300/h8300.c: (h8300_handle_eightbit_data_attribute):\n\tLikewise.\n\t(h8300_handle_tiny_data_attribute): Likewise.\n\t* config/bfin/bfin.c (bfin_handle_l1_text_attribute): Likewise.\n\t(bfin_handle_l2_attribute): Likewise.\n\t* tree-streamer-in.c (lto_input_ts_decl_with_vis_tree_pointers): Do not read section name.\n\n\t* lto.c (mentions_vars_p_decl_with_vis, compare_tree_sccs_1,\n\tlto_fixup_prevailing_decls): Skip section names.\n\n\t* go-gcc.cc (global_variable_set_init): Use\n\tset_decl_section_name.\n\n\t* gcc-interface/utils.c (process_attributes): Use it.\n\n\t* c-decl.c (merge_decls): Use set_decl_section_name.\n\t(duplicate_decls): Remove node if it exists.\n\n\t* class.c (build_utf8_ref): Use set_decl_section_name.\n\t(emit_register_classes_in_jcr_section): Likewise.\n\t(emit_register_classes_in_jcr_section): Likewise.\n\n\t* method.c (use_thunk): Use set_decl_section_name.\n\t* optimize.c (maybe_clone_body): Use set_decl_section_name.\n\t* decl.c (duplicate_decls): Likewise.\n\t* vtable-class-hierarchy.c: Likewise.\n\nFrom-SVN: r211363", "tree": {"sha": "13c6fa7658c6ac240d9a498d43c0bed9ba277176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13c6fa7658c6ac240d9a498d43c0bed9ba277176"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24d047a30a8007163d0eea43e8dd445e2b999160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d047a30a8007163d0eea43e8dd445e2b999160", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d047a30a8007163d0eea43e8dd445e2b999160", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d047a30a8007163d0eea43e8dd445e2b999160/comments", "author": null, "committer": null, "parents": [{"sha": "b6def23167b87482c7425949b5f0d8ed7983f0ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6def23167b87482c7425949b5f0d8ed7983f0ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6def23167b87482c7425949b5f0d8ed7983f0ed"}], "stats": {"total": 357, "additions": 269, "deletions": 88}, "files": [{"sha": "2e6c5243103af24336b70840ab71d08384f0ec69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -1,3 +1,53 @@\n+2014-06-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* symtab.c (dump_symtab_base): Update dumping.\n+\t(symtab_make_decl_local): Clear only DECL_COMDAT.\n+\t* tree-vect-data-refs.c (Check that variable is static before\n+\ttampering with sections.\n+\t* cgraphclones.c (duplicate_thunk_for_node): Do not clear section name.\n+\t(cgraph_create_virtual_clone): Likewise.\n+\t* tree.c (decl_comdat_group, decl_comdat_group_id): Constify argument.\n+\t(decl_section_name, set_decl_section_name): New accessors.\n+\t(find_decls_types_r): Do not walk section name\n+\t* tree.h (DECL_SECTION_NAME): Implement using\n+\tdecl_section_name.\n+\t(decl_comdat_group, decl_comdat_group_id): Constify.\n+\t(decl_section_name, set_decl_section_name): Update.\n+\t* varpool.c (varpool_finalize_named_section_flags): Use\n+\tget_section.\n+\t* cgraph.c (cgraph_add_thunk): Reset node instead of rebuilding.\n+\t(cgraph_make_node_local_1): Clear section and comdat group.\n+\t* cgraph.h (set_comdat_group): Sanity check.\n+\t(get_section, set_section): New.\n+\t* ipa-comdats.c (ipa_comdats): Use get_section.\n+\t* ipa.c (ipa_discover_readonly_nonaddressable_var): Likewise.\n+\t* lto-streamer-out.c: Do not follow section names.\n+\t* c-family/c-common.c (handle_section_attribute):\n+\tUpdate.\n+\t* lto-cgraph.c (lto_output_node): Output section.\n+\t(lto_output_varpool_node): Likewise.\n+\t(read_comdat_group): Rename to ...\n+\t(read_identifier): ... this one.\n+\t(read_string_cst): New function.\n+\t(input_node, input_varpool_node): Input section names.\n+\t* tree-emutls.c (get_emutls_init_templ_addr): Update.\n+\t(new_emutls_decl): Update.\n+\t(secname_for_decl): Check section names only of static\n+\tvars.\n+\t* config/mep/mep.c (mep_unique_section): Use set_decl_section_name.\n+\t* config/i386/winnt.c (i386_pe_unique_section): Likewise.\n+\t* config/i386/i386.c (x86_64_elf_unique_section): Likewise.\n+\t* config/c6x/c6x.c (c6x_elf_unique_section): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_xcoff_unique_section): Likewise.\n+\t* config/mcore/mcore.c (mcore_unique_section): Likewise.\n+\t* config/mips/mips.c (mips16_build_function_stub): Likewise.\n+\t* config/v850/v850.c (v850_insert_attributes): Likewise.\n+\t* config/h8300/h8300.c: (h8300_handle_eightbit_data_attribute):\n+\tLikewise.\n+\t(h8300_handle_tiny_data_attribute): Likewise.\n+\t* config/bfin/bfin.c (bfin_handle_l1_text_attribute): Likewise.\n+\t(bfin_handle_l2_attribute): Likewise.\n+\n 2014-06-07  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* symtab.c (symtab_nonoverwritable_alias): Copy VIRTUAL flag;"}, {"sha": "ccc2bc2a54fb08467a1b19fdcc66addc3fb6ff9f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -1,3 +1,7 @@\n+2014-06-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc-interface/utils.c (process_attributes): Use it.\n+\n 2014-05-22  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* gcc-interface/utils.c (DEF_FUNCTION_TYPE_0, DEF_FUNCTION_TYPE_6)"}, {"sha": "71761e3515f2f7055ee573208c045fd77d1a01bf", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -2476,9 +2476,9 @@ process_attributes (tree *node, struct attrib **attr_list, bool in_place,\n       case ATTR_LINK_SECTION:\n \tif (targetm_common.have_named_sections)\n \t  {\n-\t    DECL_SECTION_NAME (*node)\n-\t      = build_string (IDENTIFIER_LENGTH (attr->name),\n-\t\t\t      IDENTIFIER_POINTER (attr->name));\n+\t    set_decl_section_name (*node,\n+\t\t\t\t   build_string (IDENTIFIER_LENGTH (attr->name),\n+\t\t\t\t\t\t IDENTIFIER_POINTER (attr->name)));\n \t    DECL_COMMON (*node) = 0;\n \t  }\n \telse"}, {"sha": "4f480b04adecf94a479add8949e0c83ee10a0cea", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -7442,7 +7442,7 @@ handle_section_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n \t      *no_add_attrs = true;\n \t    }\n \t  else\n-\t    DECL_SECTION_NAME (decl) = TREE_VALUE (args);\n+\t    set_decl_section_name (decl, TREE_VALUE (args));\n \t}\n       else\n \t{"}, {"sha": "47cf3cc309306a250fa05896fd365658da283cc1", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -1,3 +1,8 @@\n+2014-06-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* c-decl.c (merge_decls): Use set_decl_section_name.\n+\t(duplicate_decls): Remove node if it exists.\n+\n 2014-06-05  S. Gilles  <sgilles@terpmail.umd.edu>\n \n \tPR c/53119"}, {"sha": "524b0647432e82a13142e08203e4641c519492a8", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -2304,8 +2304,10 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n \t We want to issue an error if the sections conflict but that\n \t must be done later in decl_attributes since we are called\n \t before attributes are assigned.  */\n-      if (DECL_SECTION_NAME (newdecl) == NULL_TREE)\n-\tDECL_SECTION_NAME (newdecl) = DECL_SECTION_NAME (olddecl);\n+      if ((DECL_EXTERNAL (olddecl) || TREE_PUBLIC (olddecl) || TREE_STATIC (olddecl))\n+\t  && DECL_SECTION_NAME (newdecl) == NULL_TREE\n+\t  && DECL_SECTION_NAME (olddecl))\n+\tset_decl_section_name (newdecl, DECL_SECTION_NAME (olddecl));\n \n       /* Copy the assembler name.\n \t Currently, it can only be defined in the prototype.  */\n@@ -2574,6 +2576,13 @@ duplicate_decls (tree newdecl, tree olddecl)\n   merge_decls (newdecl, olddecl, newtype, oldtype);\n \n   /* The NEWDECL will no longer be needed.  */\n+  if (TREE_CODE (newdecl) == FUNCTION_DECL\n+      || TREE_CODE (newdecl) == VAR_DECL)\n+    {\n+      struct symtab_node *snode = symtab_get_node (newdecl);\n+      if (snode)\n+\tsymtab_remove_node (snode);\n+    }\n   ggc_free (newdecl);\n   return true;\n }"}, {"sha": "c3a3eefe4eca0ca095532ccf65db673e0712849d", "filename": "gcc/cgraph.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -641,14 +641,9 @@ cgraph_add_thunk (struct cgraph_node *decl_node ATTRIBUTE_UNUSED,\n \n   node = cgraph_get_node (alias);\n   if (node)\n-    {\n-      gcc_assert (node->definition);\n-      gcc_assert (!node->alias);\n-      gcc_assert (!node->thunk.thunk_p);\n-      cgraph_remove_node (node);\n-    }\n-  \n-  node = cgraph_create_node (alias);\n+    cgraph_reset_node (node);\n+  else\n+    node = cgraph_create_node (alias);\n   gcc_checking_assert (!virtual_offset\n \t\t       || wi::eq_p (virtual_offset, virtual_value));\n   node->thunk.fixed_offset = fixed_offset;\n@@ -2264,6 +2259,8 @@ cgraph_make_node_local_1 (struct cgraph_node *node, void *data ATTRIBUTE_UNUSED)\n     {\n       symtab_make_decl_local (node->decl);\n \n+      node->set_section (NULL);\n+      node->set_comdat_group (NULL);\n       node->externally_visible = false;\n       node->forced_by_abi = false;\n       node->local.local = true;"}, {"sha": "882f1e81410dd5f637fe0e3c108c6e7f80ed8ad4", "filename": "gcc/cgraph.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -157,9 +157,24 @@ class GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n   /* Set comdat group.  */\n   void set_comdat_group (tree group)\n     {\n+      gcc_checking_assert (!group || TREE_CODE (group) == IDENTIFIER_NODE\n+\t\t\t   || DECL_P (group));\n       comdat_group_ = group;\n     }\n \n+  /* Return section.  */\n+  tree get_section ()\n+    {\n+      return section_;\n+    }\n+\n+  /* Set section.  */\n+  void set_section (tree section)\n+    {\n+      gcc_checking_assert (!section || TREE_CODE (section) == STRING_CST);\n+      section_ = section;\n+    }\n+\n   /* Vectors of referring and referenced entities.  */\n   struct ipa_ref_list ref_list;\n \n@@ -175,6 +190,9 @@ class GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n \n   /* Comdat group the symbol is in.  Can be private if GGC allowed that.  */\n   tree comdat_group_;\n+\n+  /* Section name. Again can be private, if allowed.  */\n+  tree section_;\n };\n \n enum availability"}, {"sha": "6f83d74605877839d98adfae8abd170cae2c7282", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -340,7 +340,6 @@ duplicate_thunk_for_node (cgraph_node *thunk, cgraph_node *node,\n \n   DECL_NAME (new_decl) = clone_function_name (thunk->decl, \"artificial_thunk\");\n   SET_DECL_ASSEMBLER_NAME (new_decl, DECL_NAME (new_decl));\n-  DECL_SECTION_NAME (new_decl) = NULL;\n \n   new_thunk = cgraph_create_node (new_decl);\n   set_new_clone_decl_and_node_flags (new_thunk);\n@@ -557,8 +556,6 @@ cgraph_create_virtual_clone (struct cgraph_node *old_node,\n      that is not weak also.\n      ??? We cannot use COMDAT linkage because there is no\n      ABI support for this.  */\n-  if (old_node->get_comdat_group ())\n-    DECL_SECTION_NAME (new_node->decl) = NULL;\n   set_new_clone_decl_and_node_flags (new_node);\n   new_node->clone.tree_map = tree_map;\n   new_node->clone.args_to_skip = args_to_skip;"}, {"sha": "3c6ed7b9a11e1f43a030ffbace7fcf999c68dc8a", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -4769,7 +4769,7 @@ bfin_handle_l1_text_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n       *no_add_attrs = true;\n     }\n   else\n-    DECL_SECTION_NAME (decl) = build_string (9, \".l1.text\");\n+    set_decl_section_name (decl, build_string (9, \".l1.text\"));\n \n   return NULL_TREE;\n }\n@@ -4847,7 +4847,7 @@ bfin_handle_l2_attribute (tree *node, tree ARG_UNUSED (name),\n \t  *no_add_attrs = true;\n \t}\n       else\n-\tDECL_SECTION_NAME (decl) = build_string (9, \".l2.text\");\n+\tset_decl_section_name (decl, build_string (9, \".l2.text\"));\n     }\n   else if (TREE_CODE (decl) == VAR_DECL)\n     {\n@@ -4860,7 +4860,7 @@ bfin_handle_l2_attribute (tree *node, tree ARG_UNUSED (name),\n \t  *no_add_attrs = true;\n \t}\n       else\n-\tDECL_SECTION_NAME (decl) = build_string (9, \".l2.data\");\n+\tset_decl_section_name (decl, build_string (9, \".l2.data\"));\n     }\n \n   return NULL_TREE;"}, {"sha": "90a37481290e02f11aa2e2d87ae20e8c368256fb", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -1060,7 +1060,7 @@ c6x_elf_unique_section (tree decl, int reloc)\n \n       string = ACONCAT ((linkonce, prefix, \".\", name, NULL));\n \n-      DECL_SECTION_NAME (decl) = build_string (strlen (string), string);\n+      set_decl_section_name (decl, build_string (strlen (string), string));\n       return;\n     }\n   default_unique_section (decl, reloc);"}, {"sha": "3c90340aaed644de10cee5048b342656ead5abfe", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -5461,7 +5461,7 @@ h8300_handle_eightbit_data_attribute (tree *node, tree name,\n \n   if (TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n     {\n-      DECL_SECTION_NAME (decl) = build_string (7, \".eight\");\n+      set_decl_section_name (decl, build_string (7, \".eight\"));\n     }\n   else\n     {\n@@ -5485,7 +5485,7 @@ h8300_handle_tiny_data_attribute (tree *node, tree name,\n \n   if (TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n     {\n-      DECL_SECTION_NAME (decl) = build_string (6, \".tiny\");\n+      set_decl_section_name (decl, build_string (6, \".tiny\"));\n     }\n   else\n     {"}, {"sha": "2b5fbf7efbf30194504253e795bd30461cb9e025", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -5193,7 +5193,7 @@ x86_64_elf_unique_section (tree decl, int reloc)\n \n \t  string = ACONCAT ((linkonce, prefix, \".\", name, NULL));\n \n-\t  DECL_SECTION_NAME (decl) = build_string (strlen (string), string);\n+\t  set_decl_section_name (decl, build_string (strlen (string), string));\n \t  return;\n \t}\n     }"}, {"sha": "ee22375c227fe41c7ebf5c16545e2c1dfc9d1859", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -438,7 +438,7 @@ i386_pe_unique_section (tree decl, int reloc)\n   string = XALLOCAVEC (char, len + 1);\n   sprintf (string, \"%s%s\", prefix, name);\n \n-  DECL_SECTION_NAME (decl) = build_string (len, string);\n+  set_decl_section_name (decl, build_string (len, string));\n }\n \n /* Local and global relocs can be placed always into readonly memory for"}, {"sha": "f9af66b5b59cef1d0275030505caf6be5f9de45d", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -3089,7 +3089,7 @@ mcore_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED)\n   \n   sprintf (string, \"%s%s\", prefix, name);\n \n-  DECL_SECTION_NAME (decl) = build_string (len, string);\n+  set_decl_section_name (decl, build_string (len, string));\n }\n \n int"}, {"sha": "2f2d0faee272f05a43e079677ce93c71deed6a12", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -4658,7 +4658,7 @@ mep_unique_section (tree decl, int reloc)\n \n   sprintf (string, \"%s%s\", prefix, name);\n \n-  DECL_SECTION_NAME (decl) = build_string (len, string);\n+  set_decl_section_name (decl, build_string (len, string));\n }\n \n /* Given a decl, a section name, and whether the decl initializer"}, {"sha": "73b6963ba659f546aed16e081be8842a0f7520e4", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -6618,7 +6618,7 @@ mips16_build_function_stub (void)\n   stubdecl = build_decl (BUILTINS_LOCATION,\n \t\t\t FUNCTION_DECL, get_identifier (stubname),\n \t\t\t build_function_type_list (void_type_node, NULL_TREE));\n-  DECL_SECTION_NAME (stubdecl) = build_string (strlen (secname), secname);\n+  set_decl_section_name (stubdecl, build_string (strlen (secname), secname));\n   DECL_RESULT (stubdecl) = build_decl (BUILTINS_LOCATION,\n \t\t\t\t       RESULT_DECL, NULL_TREE, void_type_node);\n \n@@ -6872,7 +6872,7 @@ mips16_build_call_stub (rtx retval, rtx *fn_ptr, rtx args_size, int fp_code)\n \t\t\t     FUNCTION_DECL, stubid,\n \t\t\t     build_function_type_list (void_type_node,\n \t\t\t\t\t\t       NULL_TREE));\n-      DECL_SECTION_NAME (stubdecl) = build_string (strlen (secname), secname);\n+      set_decl_section_name (stubdecl, build_string (strlen (secname), secname));\n       DECL_RESULT (stubdecl) = build_decl (BUILTINS_LOCATION,\n \t\t\t\t\t   RESULT_DECL, NULL_TREE,\n \t\t\t\t\t   void_type_node);"}, {"sha": "3e3a48784284618392d066f80266c61936e2f925", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -29342,7 +29342,7 @@ rs6000_xcoff_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED)\n \n   name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n   name = (*targetm.strip_name_encoding) (name);\n-  DECL_SECTION_NAME (decl) = build_string (strlen (name), name);\n+  set_decl_section_name (decl, build_string (strlen (name), name));\n }\n \n /* Select section for constant in constant pool."}, {"sha": "070a5cbd7d16ee629c4858e3ea9f5cb865db23e0", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -2644,7 +2644,7 @@ v850_insert_attributes (tree decl, tree * attr_ptr ATTRIBUTE_UNUSED )\n \t  /* Only set the section name if specified by a pragma, because\n \t     otherwise it will force those variables to get allocated storage\n \t     in this module, rather than by the linker.  */\n-\t  DECL_SECTION_NAME (decl) = chosen_section;\n+\t  set_decl_section_name (decl, chosen_section);\n \t}\n     }\n }"}, {"sha": "38a348cb9976b0076ac475a37b030275435dd445", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -1,3 +1,10 @@\n+2014-06-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* method.c (use_thunk): Use set_decl_section_name.\n+\t* optimize.c (maybe_clone_body): Use set_decl_section_name.\n+\t* decl.c (duplicate_decls): Likewise.\n+\t* vtable-class-hierarchy.c: Likewise.\n+\n 2014-06-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/60184"}, {"sha": "13b5d0b34311ddb4555179835ccaa3e9df6751dc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -2019,8 +2019,10 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t We want to issue an error if the sections conflict but that must be\n \t done later in decl_attributes since we are called before attributes\n \t are assigned.  */\n-      if (DECL_SECTION_NAME (newdecl) == NULL_TREE)\n-\tDECL_SECTION_NAME (newdecl) = DECL_SECTION_NAME (olddecl);\n+      if ((DECL_EXTERNAL (olddecl) || TREE_PUBLIC (olddecl) || TREE_STATIC (olddecl))\n+\t  && DECL_SECTION_NAME (newdecl) == NULL_TREE\n+\t  && DECL_SECTION_NAME (olddecl) != NULL_TREE)\n+\tset_decl_section_name (newdecl, DECL_SECTION_NAME (olddecl));\n \n       if (TREE_CODE (newdecl) == FUNCTION_DECL)\n \t{"}, {"sha": "0ae190ab52d8b6aa87bcf3b42c6b0bb716ad4211", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -363,7 +363,7 @@ use_thunk (tree thunk_fndecl, bool emit_p)\n \t  resolve_unique_section (thunk_fndecl, 0, flag_function_sections);\n \n \t  /* Output the thunk into the same section as function.  */\n-\t  DECL_SECTION_NAME (thunk_fndecl) = DECL_SECTION_NAME (function);\n+\t  set_decl_section_name (thunk_fndecl, DECL_SECTION_NAME (function));\n \t}\n     }\n "}, {"sha": "ffa5258cba6cc1caed637df196d37ec9e6284c16", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -476,7 +476,6 @@ maybe_clone_body (tree fn)\n \t to it. By doing so, it also corrupted the comdat group. */\n       if (DECL_ONE_ONLY (fn))\n \tcgraph_get_create_node (clone)->set_comdat_group (cxx_comdat_group (clone));\n-      DECL_SECTION_NAME (clone) = DECL_SECTION_NAME (fn);\n       DECL_USE_TEMPLATE (clone) = DECL_USE_TEMPLATE (fn);\n       DECL_EXTERNAL (clone) = DECL_EXTERNAL (fn);\n       DECL_INTERFACE_KNOWN (clone) = DECL_INTERFACE_KNOWN (fn);\n@@ -487,6 +486,7 @@ maybe_clone_body (tree fn)\n       DECL_DLLIMPORT_P (clone) = DECL_DLLIMPORT_P (fn);\n       DECL_ATTRIBUTES (clone) = copy_list (DECL_ATTRIBUTES (fn));\n       DECL_DISREGARD_INLINE_LIMITS (clone) = DECL_DISREGARD_INLINE_LIMITS (fn);\n+      set_decl_section_name (clone, DECL_SECTION_NAME (fn));\n \n       /* Adjust the parameter names and locations.  */\n       parm = DECL_ARGUMENTS (fn);"}, {"sha": "3963d7338051d3c5948237eb0afe35e0e1eeeaf0", "filename": "gcc/cp/vtable-class-hierarchy.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fcp%2Fvtable-class-hierarchy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fcp%2Fvtable-class-hierarchy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fvtable-class-hierarchy.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -1247,8 +1247,8 @@ vtable_find_or_create_map_decl (tree base_type)\n       /* Put these mmap variables in thr .vtable_map_vars section, so\n          we can find and protect them.  */\n \n-      DECL_SECTION_NAME (var_decl) = build_string (strlen (\".vtable_map_vars\"),\n-                                                   \".vtable_map_vars\");\n+      set_decl_section_name (var_decl, build_string (strlen (\".vtable_map_vars\"),\n+                                                     \".vtable_map_vars\"));\n       DECL_HAS_IMPLICIT_SECTION_NAME_P (var_decl) = true;\n       DECL_INITIAL (var_decl) = initial_value;\n "}, {"sha": "b38243f91d52491a413c4f72223666d0e795ac48", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -13611,7 +13611,9 @@ secname_for_decl (const_tree decl)\n {\n   const char *secname;\n \n-  if (VAR_OR_FUNCTION_DECL_P (decl) && DECL_SECTION_NAME (decl))\n+  if (VAR_OR_FUNCTION_DECL_P (decl)\n+      && (DECL_EXTERNAL (decl) || TREE_PUBLIC (decl) || TREE_STATIC (decl))\n+      && DECL_SECTION_NAME (decl))\n     {\n       tree sectree = DECL_SECTION_NAME (decl);\n       secname = TREE_STRING_POINTER (sectree);"}, {"sha": "6d61c75f59c48c76d50c1495b8c97727e81169d6", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -1,3 +1,8 @@\n+2014-06-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* go-gcc.cc (global_variable_set_init): Use\n+\tset_decl_section_name.\n+\n 2014-06-04  Ian Lance Taylor  <iant@google.com>\n \n \t* go-gcc.cc (Gcc_backend::implicit_variable): Add is_common and"}, {"sha": "7e67eed6af6803a7cd00533e7b18825410a2d68a", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -2376,7 +2376,7 @@ Gcc_backend::global_variable_set_init(Bvariable* var, Bexpression* expr)\n   // a different one now that DECL_INITIAL is set.\n   if (DECL_HAS_IMPLICIT_SECTION_NAME_P (var_decl))\n     {\n-      DECL_SECTION_NAME (var_decl) = NULL_TREE;\n+      set_decl_section_name (var_decl, NULL);\n       resolve_unique_section (var_decl,\n \t\t\t      compute_reloc_for_constant (expr_tree),\n \t\t\t      1);"}, {"sha": "69269009ac75375b1af1c780da3f4868637d7531", "filename": "gcc/ipa-comdats.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fipa-comdats.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fipa-comdats.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-comdats.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -243,7 +243,7 @@ ipa_comdats (void)\n \t     || symbol->force_output\n \t     || symbol->used_from_other_partition\n \t     || TREE_THIS_VOLATILE (symbol->decl)\n-\t     || DECL_SECTION_NAME (symbol->decl)\n+\t     || symbol->get_section ()\n \t     || (TREE_CODE (symbol->decl) == FUNCTION_DECL\n \t\t && (DECL_STATIC_CONSTRUCTOR (symbol->decl)\n \t\t     || DECL_STATIC_DESTRUCTOR (symbol->decl))))"}, {"sha": "039b756b39a6d27b576a13a401ff4229125b83d1", "filename": "gcc/ipa-visibility.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fipa-visibility.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fipa-visibility.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-visibility.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -512,6 +512,7 @@ function_and_variable_visibility (bool whole_program)\n \t\t     next = next->same_comdat_group)\n \t\t{\n \t\t  next->set_comdat_group (NULL);\n+\t\t  next->set_section (NULL);\n \t\t  symtab_make_decl_local (next->decl);\n \t\t  next->unique_name = ((next->resolution == LDPR_PREVAILING_DEF_IRONLY\n \t\t\t\t\t|| next->unique_name\n@@ -526,6 +527,8 @@ function_and_variable_visibility (bool whole_program)\n \t    }\n \t  if (TREE_PUBLIC (node->decl))\n \t    node->set_comdat_group (NULL);\n+\t  if (DECL_COMDAT (node->decl))\n+\t    node->set_section (NULL);\n \t  symtab_make_decl_local (node->decl);\n \t}\n \n@@ -643,6 +646,7 @@ function_and_variable_visibility (bool whole_program)\n \t\t     next = next->same_comdat_group)\n \t\t{\n \t\t  next->set_comdat_group (NULL);\n+\t\t  next->set_section (NULL);\n \t\t  symtab_make_decl_local (next->decl);\n \t\t  next->unique_name = ((next->resolution == LDPR_PREVAILING_DEF_IRONLY\n \t\t\t\t\t|| next->unique_name\n@@ -653,6 +657,8 @@ function_and_variable_visibility (bool whole_program)\n \t    }\n \t  if (TREE_PUBLIC (vnode->decl))\n \t    vnode->set_comdat_group (NULL);\n+\t  if (DECL_COMDAT (vnode->decl))\n+\t    vnode->set_section (NULL);\n \t  symtab_make_decl_local (vnode->decl);\n \t  vnode->resolution = LDPR_PREVAILING_DEF_IRONLY;\n \t}"}, {"sha": "07f6c15592b97ab3d657bd98f1653cafc5933a69", "filename": "gcc/ipa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fipa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fipa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -714,7 +714,7 @@ ipa_discover_readonly_nonaddressable_vars (void)\n \t    /* Making variable in explicit section readonly can cause section\n \t       type conflict. \n \t       See e.g. gcc.c-torture/compile/pr23237.c */\n-\t    && DECL_SECTION_NAME (vnode->decl) == NULL)\n+\t    && vnode->get_section () == NULL)\n \t  {\n \t    if (!TREE_READONLY (vnode->decl) && dump_file)\n \t      fprintf (dump_file, \" %s (read-only)\", vnode->name ());"}, {"sha": "55210830645784c2b1b25e5c55dbeba6573b8446", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -1,3 +1,9 @@\n+2014-06-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* class.c (build_utf8_ref): Use set_decl_section_name.\n+\t(emit_register_classes_in_jcr_section): Likewise.\n+\t(emit_register_classes_in_jcr_section): Likewise.\n+\n 2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* class.c (add_method_1): Adjust."}, {"sha": "fb0c0d45b456b27db4112fd7aa2f27a4f77abdde", "filename": "gcc/java/class.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -991,7 +991,7 @@ build_utf8_ref (tree name)\n \t\t       | SECTION_MERGE | (SECTION_ENTSIZE & decl_size));\n \t  sprintf (buf, \".rodata.jutf8.%d\", decl_size);\n \t  switch_to_section (get_section (buf, flags, NULL));\n-\t  DECL_SECTION_NAME (decl) = build_string (strlen (buf), buf);\n+\t  set_decl_section_name (decl, build_string (strlen (buf), buf));\n \t}\n     }\n \n@@ -2805,8 +2805,6 @@ emit_register_classes_in_jcr_section (void)\n   cdecl = build_decl (UNKNOWN_LOCATION,\n \t\t      VAR_DECL, get_identifier (\"_Jv_JCR_SECTION_data\"),\n \t\t      class_array_type);\n-  DECL_SECTION_NAME (cdecl) = build_string (strlen (JCR_SECTION_NAME),\n-\t\t\t\t\t    JCR_SECTION_NAME);\n   DECL_ALIGN (cdecl) = POINTER_SIZE;\n   DECL_USER_ALIGN (cdecl) = 1;\n   DECL_INITIAL (cdecl) = build_constructor (class_array_type, init);\n@@ -2817,6 +2815,8 @@ emit_register_classes_in_jcr_section (void)\n   DECL_ARTIFICIAL (cdecl) = 1;\n   DECL_IGNORED_P (cdecl) = 1;\n   DECL_PRESERVE_P (cdecl) = 1;\n+  set_decl_section_name (cdecl, build_string (strlen (JCR_SECTION_NAME),\n+\t\t\t\t\t      JCR_SECTION_NAME));\n   pushdecl_top_level (cdecl);\n   relayout_decl (cdecl);\n   rest_of_decl_compilation (cdecl, 1, 0);"}, {"sha": "a19197ded536323062f058229da2171331a36ab2", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 55, "deletions": 7, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -396,6 +396,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n   int i;\n   bool alias_p;\n   const char *comdat;\n+  const char *section;\n   tree group;\n \n   boundary_p = !lto_symtab_encoder_in_partition_p (encoder, node);\n@@ -486,6 +487,7 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n   else\n     comdat = \"\";\n   lto_output_data_stream (ob->main_stream, comdat, strlen (comdat) + 1);\n+\n   if (group)\n     {\n       if (node->same_comdat_group && !boundary_p)\n@@ -499,6 +501,13 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n       streamer_write_hwi_stream (ob->main_stream, ref);\n     }\n \n+  group = node->get_section ();\n+  if (group)\n+    section = TREE_STRING_POINTER (group);\n+  else\n+    section = \"\";\n+  lto_output_data_stream (ob->main_stream, section, strlen (section) + 1);\n+\n   streamer_write_hwi_stream (ob->main_stream, node->tp_first_run);\n \n   bp = bitpack_create (ob->main_stream);\n@@ -563,6 +572,7 @@ lto_output_varpool_node (struct lto_simple_output_block *ob, varpool_node *node,\n   int ref;\n   bool alias_p;\n   const char *comdat;\n+  const char *section;\n   tree group;\n \n   streamer_write_enum (ob->main_stream, LTO_symtab_tags, LTO_symtab_last_tag,\n@@ -600,12 +610,14 @@ lto_output_varpool_node (struct lto_simple_output_block *ob, varpool_node *node,\n \t  /* in_other_partition.  */\n     }\n   streamer_write_bitpack (&bp);\n+\n   group = node->get_comdat_group ();\n   if (group)\n     comdat = IDENTIFIER_POINTER (group);\n   else\n     comdat = \"\";\n   lto_output_data_stream (ob->main_stream, comdat, strlen (comdat) + 1);\n+\n   if (group)\n     {\n       if (node->same_comdat_group && !boundary_p)\n@@ -618,6 +630,14 @@ lto_output_varpool_node (struct lto_simple_output_block *ob, varpool_node *node,\n \tref = LCC_NOT_FOUND;\n       streamer_write_hwi_stream (ob->main_stream, ref);\n     }\n+\n+  group = node->get_section ();\n+  if (group)\n+    section = TREE_STRING_POINTER (group);\n+  else\n+    section = \"\";\n+  lto_output_data_stream (ob->main_stream, section, strlen (section) + 1);\n+\n   streamer_write_enum (ob->main_stream, ld_plugin_symbol_resolution,\n \t\t       LDPR_NUM_KNOWN, node->resolution);\n }\n@@ -968,13 +988,33 @@ output_symtab (void)\n   output_refs (encoder);\n }\n \n-/* Return COMDAT_GROUP encoded in IB as a plain string.  */\n+/* Return identifier encoded in IB as a plain string.  */\n \n static tree\n-read_comdat_group (struct lto_input_block *ib)\n+read_identifier (struct lto_input_block *ib)\n {\n   unsigned int len = strnlen (ib->data + ib->p, ib->len - ib->p - 1);\n-  tree group;\n+  tree id;\n+\n+  if (ib->data[ib->p + len])\n+    lto_section_overrun (ib);\n+  if (!len)\n+    {\n+      ib->p++;\n+      return NULL;\n+    }\n+  id = get_identifier (ib->data + ib->p);\n+  ib->p += len + 1;\n+  return id;\n+}\n+\n+/* Return identifier encoded in IB as a plain string.  */\n+\n+static tree\n+read_string_cst (struct lto_input_block *ib)\n+{\n+  unsigned int len = strnlen (ib->data + ib->p, ib->len - ib->p - 1);\n+  tree id;\n \n   if (ib->data[ib->p + len])\n     lto_section_overrun (ib);\n@@ -983,9 +1023,9 @@ read_comdat_group (struct lto_input_block *ib)\n       ib->p++;\n       return NULL;\n     }\n-  group = get_identifier (ib->data + ib->p);\n+  id = build_string (len, ib->data + ib->p);\n   ib->p += len + 1;\n-  return group;\n+  return id;\n }\n \n /* Overwrite the information in NODE based on FILE_DATA, TAG, FLAGS,\n@@ -1077,6 +1117,7 @@ input_node (struct lto_file_decl_data *file_data,\n   int order;\n   int i, count;\n   tree group;\n+  tree section;\n \n   order = streamer_read_hwi (ib) + order_base;\n   clone_ref = streamer_read_hwi (ib);\n@@ -1122,9 +1163,10 @@ input_node (struct lto_file_decl_data *file_data,\n   if (tag == LTO_symtab_analyzed_node)\n     ref = streamer_read_hwi (ib);\n \n-  group = read_comdat_group (ib);\n+  group = read_identifier (ib);\n   if (group)\n     ref2 = streamer_read_hwi (ib);\n+  section = read_string_cst (ib);\n \n   /* Make sure that we have not read this node before.  Nodes that\n      have already been read will have their tag stored in the 'aux'\n@@ -1151,6 +1193,8 @@ input_node (struct lto_file_decl_data *file_data,\n     }\n   else\n     node->same_comdat_group = (symtab_node *) (intptr_t) LCC_NOT_FOUND;\n+  if (section)\n+    node->set_section (section);\n \n   if (node->thunk.thunk_p)\n     {\n@@ -1183,6 +1227,7 @@ input_varpool_node (struct lto_file_decl_data *file_data,\n   int ref = LCC_NOT_FOUND;\n   int order;\n   tree group;\n+  tree section;\n \n   order = streamer_read_hwi (ib) + order_base;\n   decl_index = streamer_read_uhwi (ib);\n@@ -1220,7 +1265,7 @@ input_varpool_node (struct lto_file_decl_data *file_data,\n     }\n   if (node->alias && !node->analyzed && node->weakref)\n     node->alias_target = get_alias_symbol (node->decl);\n-  group = read_comdat_group (ib);\n+  group = read_identifier (ib);\n   if (group)\n     {\n       node->set_comdat_group (group);\n@@ -1230,6 +1275,9 @@ input_varpool_node (struct lto_file_decl_data *file_data,\n     }\n   else\n     node->same_comdat_group = (symtab_node *) (intptr_t) LCC_NOT_FOUND;\n+  section = read_string_cst (ib);\n+  if (section)\n+    node->set_section (section);\n   node->resolution = streamer_read_enum (ib, ld_plugin_symbol_resolution,\n \t\t\t\t\t        LDPR_NUM_KNOWN);\n   gcc_assert (flag_ltrans"}, {"sha": "ece0d3f1458765724dcf8495796070bd83b1b72c", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -535,7 +535,6 @@ DFS_write_tree_body (struct output_block *ob,\n       /* Make sure we don't inadvertently set the assembler name.  */\n       if (DECL_ASSEMBLER_NAME_SET_P (expr))\n \tDFS_follow_tree_edge (DECL_ASSEMBLER_NAME (expr));\n-      DFS_follow_tree_edge (DECL_SECTION_NAME (expr));\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_FIELD_DECL))\n@@ -973,7 +972,6 @@ hash_tree (struct streamer_tree_cache_d *cache, tree t)\n     {\n       if (DECL_ASSEMBLER_NAME_SET_P (t))\n \tvisit (DECL_ASSEMBLER_NAME (t));\n-      visit (DECL_SECTION_NAME (t));\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_FIELD_DECL))"}, {"sha": "3edd6bab91f04e89adc14eacd6b07a9e353e507c", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -1,3 +1,8 @@\n+2014-06-07  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto.c (mentions_vars_p_decl_with_vis, compare_tree_sccs_1,\n+\tlto_fixup_prevailing_decls): Skip section names.\n+\n 2014-06-02  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* lto-symtab.c: Include builtins.h."}, {"sha": "9db7845889ed2609830ecbcd0aedeeee5ba8afa6", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -767,7 +767,6 @@ mentions_vars_p_decl_with_vis (tree t)\n \n   /* Accessor macro has side-effects, use field-name here. */\n   CHECK_NO_VAR (t->decl_with_vis.assembler_name);\n-  CHECK_NO_VAR (DECL_SECTION_NAME (t));\n   return false;\n }\n \n@@ -1529,7 +1528,6 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       if (DECL_ASSEMBLER_NAME_SET_P (t1))\n \tcompare_tree_edges (DECL_ASSEMBLER_NAME (t1),\n \t\t\t    DECL_ASSEMBLER_NAME (t2));\n-      compare_tree_edges (DECL_SECTION_NAME (t1), DECL_SECTION_NAME (t2));\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_FIELD_DECL))\n@@ -2718,7 +2716,6 @@ lto_fixup_prevailing_decls (tree t)\n       if (CODE_CONTAINS_STRUCT (code, TS_DECL_WITH_VIS))\n \t{\n \t  LTO_NO_PREVAIL (t->decl_with_vis.assembler_name);\n-\t  LTO_NO_PREVAIL (DECL_SECTION_NAME (t));\n \t}\n       if (CODE_CONTAINS_STRUCT (code, TS_DECL_NON_COMMON))\n \t{"}, {"sha": "8265b4e1eb3849d023d79952da54e79576e1de83", "filename": "gcc/symtab.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -563,9 +563,9 @@ dump_symtab_base (FILE *f, symtab_node *node)\n \t     IDENTIFIER_POINTER (node->get_comdat_group_id ()));\n   if (DECL_ONE_ONLY (node->decl))\n     fprintf (f, \" one_only\");\n-  if (DECL_SECTION_NAME (node->decl))\n-    fprintf (f, \" section_name:%s\",\n-\t     TREE_STRING_POINTER (DECL_SECTION_NAME (node->decl)));\n+  if (node->get_section ())\n+    fprintf (f, \" section:%s\",\n+\t     TREE_STRING_POINTER (node->get_section ()));\n   if (DECL_VISIBILITY_SPECIFIED (node->decl))\n     fprintf (f, \" visibility_specified\");\n   if (DECL_VISIBILITY (node->decl))\n@@ -877,11 +877,7 @@ symtab_make_decl_local (tree decl)\n     DECL_COMMON (decl) = 0;\n   else gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n \n-  if (DECL_COMDAT (decl))\n-    {\n-      DECL_SECTION_NAME (decl) = 0;\n-      DECL_COMDAT (decl) = 0;\n-    }\n+  DECL_COMDAT (decl) = 0;\n   DECL_WEAK (decl) = 0;\n   DECL_EXTERNAL (decl) = 0;\n   DECL_VISIBILITY_SPECIFIED (decl) = 0;"}, {"sha": "d7969bc266c7388e05ef1092ab347eb8b0a337f5", "filename": "gcc/tree-emutls.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Ftree-emutls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Ftree-emutls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-emutls.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -245,7 +245,6 @@ get_emutls_init_templ_addr (tree decl)\n   TREE_READONLY (to) = 1;\n   DECL_IGNORED_P (to) = 1;\n   DECL_CONTEXT (to) = DECL_CONTEXT (decl);\n-  DECL_SECTION_NAME (to) = DECL_SECTION_NAME (decl);\n   DECL_PRESERVE_P (to) = DECL_PRESERVE_P (decl);\n \n   DECL_WEAK (to) = DECL_WEAK (decl);\n@@ -265,10 +264,13 @@ get_emutls_init_templ_addr (tree decl)\n \n   if (targetm.emutls.tmpl_section)\n     {\n-      DECL_SECTION_NAME (to)\n-        = build_string (strlen (targetm.emutls.tmpl_section),\n-\t\t\ttargetm.emutls.tmpl_section);\n+      set_decl_section_name\n+\t(to,\n+         build_string (strlen (targetm.emutls.tmpl_section),\n+\t\t       targetm.emutls.tmpl_section));\n     }\n+  else\n+    set_decl_section_name (to, DECL_SECTION_NAME (decl));\n \n   /* Create varpool node for the new variable and finalize it if it is\n      not external one.  */\n@@ -323,9 +325,10 @@ new_emutls_decl (tree decl, tree alias_of)\n   /* If the target wants the control variables grouped, do so.  */\n   if (!DECL_COMMON (to) && targetm.emutls.var_section)\n     {\n-      DECL_SECTION_NAME (to)\n-        = build_string (strlen (targetm.emutls.var_section),\n-\t\t\ttargetm.emutls.var_section);\n+      set_decl_section_name \n+        (to,\n+         build_string (strlen (targetm.emutls.var_section),\n+\t\t       targetm.emutls.var_section));\n     }\n \n   /* If this variable is defined locally, then we need to initialize the"}, {"sha": "8b3adebc6f3e89ee82853b96d42f7cedd7c931ec", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -759,8 +759,6 @@ lto_input_ts_decl_with_vis_tree_pointers (struct lto_input_block *ib,\n       gcc_assert (TREE_CODE (id) == IDENTIFIER_NODE);\n       SET_DECL_ASSEMBLER_NAME (expr, id);\n     }\n-\n-  DECL_SECTION_NAME (expr) = stream_read_tree (ib, data_in);\n }\n \n "}, {"sha": "dd148fa708089a847f0f01880afa12fa24fefbfb", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -660,8 +660,6 @@ write_ts_decl_with_vis_tree_pointers (struct output_block *ob, tree expr,\n     stream_write_tree (ob, DECL_ASSEMBLER_NAME (expr), ref_p);\n   else\n     stream_write_tree (ob, NULL_TREE, false);\n-\n-  stream_write_tree (ob, DECL_SECTION_NAME (expr), ref_p);\n }\n \n "}, {"sha": "e6be42ad32e98a04220c7b818ef3b428ea971f55", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -5213,7 +5213,8 @@ vect_can_force_dr_alignment_p (const_tree decl, unsigned int alignment)\n   /* Do not override explicit alignment set by the user when an explicit\n      section name is also used.  This is a common idiom used by many\n      software projects.  */\n-  if (DECL_SECTION_NAME (decl) != NULL_TREE\n+  if (TREE_STATIC (decl) \n+      && DECL_SECTION_NAME (decl) != NULL_TREE\n       && !DECL_HAS_IMPLICIT_SECTION_NAME_P (decl))\n     return false;\n "}, {"sha": "9d8e6316c5879c0912c9ab06d095b780e0b52518", "filename": "gcc/tree.c", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -608,7 +608,7 @@ decl_assembler_name (tree decl)\n    DECL is associated with.  This can be either an IDENTIFIER_NODE or a\n    decl, in which case its DECL_ASSEMBLER_NAME identifies the group.  */\n tree\n-decl_comdat_group (tree node)\n+decl_comdat_group (const_tree node)\n {\n   struct symtab_node *snode = symtab_get_node (node);\n   if (!snode)\n@@ -618,14 +618,45 @@ decl_comdat_group (tree node)\n \n /* Likewise, but make sure it's been reduced to an IDENTIFIER_NODE.  */\n tree\n-decl_comdat_group_id (tree node)\n+decl_comdat_group_id (const_tree node)\n {\n   struct symtab_node *snode = symtab_get_node (node);\n   if (!snode)\n     return NULL;\n   return snode->get_comdat_group_id ();\n }\n \n+/* When the target supports named section, return its name as IDENTIFIER_NODE\n+   or NULL if it is in no section.  */\n+tree\n+decl_section_name (const_tree node)\n+{\n+  struct symtab_node *snode = symtab_get_node (node);\n+  if (!snode)\n+    return NULL;\n+  return snode->get_section ();\n+}\n+\n+/* Set section section name of NODE to VALUE (that is expected to\n+   be identifier node)  */\n+void\n+set_decl_section_name (tree node, tree value)\n+{\n+  struct symtab_node *snode;\n+\n+  if (value == NULL)\n+    {\n+      snode = symtab_get_node (node);\n+      if (!snode)\n+\treturn;\n+    }\n+  else if (TREE_CODE (node) == VAR_DECL)\n+    snode = varpool_node_for_decl (node);\n+  else\n+    snode = cgraph_get_create_node (node);\n+  snode->set_section (value);\n+}\n+\n /* Compute the number of bytes occupied by a tree with code CODE.\n    This function cannot be used for nodes that have variable sizes,\n    including TREE_VEC, INTEGER_CST, STRING_CST, and CALL_EXPR.  */\n@@ -5264,10 +5295,6 @@ find_decls_types_r (tree *tp, int *ws, void *data)\n \t  fld_worklist_push (DECL_FIELD_BIT_OFFSET (t), fld);\n \t  fld_worklist_push (DECL_FCONTEXT (t), fld);\n \t}\n-      else if (TREE_CODE (t) == VAR_DECL)\n-\t{\n-\t  fld_worklist_push (DECL_SECTION_NAME (t), fld);\n-\t}\n \n       if ((TREE_CODE (t) == VAR_DECL || TREE_CODE (t) == PARM_DECL)\n \t  && DECL_HAS_VALUE_EXPR_P (t))"}, {"sha": "0abf9fd116a2405c6806dbb07760bd7a4dff278f", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -2368,8 +2368,7 @@ extern void decl_value_expr_insert (tree, tree);\n \n /* Records the section name in a section attribute.  Used to pass\n    the name from decl_attributes to make_function_rtl and make_decl_rtl.  */\n-#define DECL_SECTION_NAME(NODE) \\\n-  (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.section_name)\n+#define DECL_SECTION_NAME(NODE) decl_section_name (NODE)\n \n /* Nonzero in a decl means that the gimplifier has seen (or placed)\n    this variable in a BIND_EXPR.  */\n@@ -3431,8 +3430,10 @@ tree_operand_check_code (const_tree __t, enum tree_code __code, int __i,\n    || ((NODE) && TREE_TYPE ((NODE)) == error_mark_node))\n \n extern tree decl_assembler_name (tree);\n-extern tree decl_comdat_group (tree);\n-extern tree decl_comdat_group_id (tree);\n+extern tree decl_comdat_group (const_tree);\n+extern tree decl_comdat_group_id (const_tree);\n+extern tree decl_section_name (const_tree);\n+extern void set_decl_section_name (tree, tree);\n \n /* Compute the number of bytes occupied by 'node'.  This routine only\n    looks at TREE_CODE and, if the code is TREE_VEC, TREE_VEC_LENGTH.  */"}, {"sha": "028e7409588924d8ac5501a29b5331eb29a207b3", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -1369,6 +1369,7 @@ make_decl_rtl (tree decl)\n      is called early and it needs to make DECL_RTL to get the name.\n      we take care of recomputing the DECL_RTL after visibility is changed.  */\n   if (TREE_CODE (decl) == VAR_DECL\n+      && (TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n       && DECL_SECTION_NAME (decl) != NULL_TREE\n       && DECL_INITIAL (decl) == NULL_TREE\n       && DECL_COMMON (decl))\n@@ -6460,7 +6461,7 @@ default_unique_section (tree decl, int reloc)\n \n   string = ACONCAT ((linkonce, prefix, \".\", name, NULL));\n \n-  DECL_SECTION_NAME (decl) = build_string (strlen (string), string);\n+  set_decl_section_name (decl, build_string (strlen (string), string));\n }\n \n /* Like compute_reloc_for_constant, except for an RTX.  The return value"}, {"sha": "ff6712764f116696ae3904e7fc90c870fd9bedac", "filename": "gcc/varpool.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fvarpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24d047a30a8007163d0eea43e8dd445e2b999160/gcc%2Fvarpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarpool.c?ref=24d047a30a8007163d0eea43e8dd445e2b999160", "patch": "@@ -582,7 +582,7 @@ varpool_finalize_named_section_flags (varpool_node *node)\n       && !DECL_EXTERNAL (node->decl)\n       && TREE_CODE (node->decl) == VAR_DECL\n       && !DECL_HAS_VALUE_EXPR_P (node->decl)\n-      && DECL_SECTION_NAME (node->decl))\n+      && node->get_section ())\n     get_variable_section (node->decl, false);\n }\n "}]}