{"sha": "8ec802d7d8812cdaaa7516edc624b6e66e419f94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVjODAyZDdkODgxMmNkYWFhNzUxNmVkYzYyNGI2ZTY2ZTQxOWY5NA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-10-20T11:46:08Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-10-20T11:46:08Z"}, "message": "re PR bootstrap/50709 (stage3 bootstrap comparison failure with --disable-checking config option)\n\n\n\tPR bootstrap/50709\n\t* ipa-inline.c (inline_small_functions): Fix checking code to not make\n\teffect on fibheap stability.\n\nFrom-SVN: r180247", "tree": {"sha": "f3fe8a05128f6bc4356c7cbf0d913d6c48f65c90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3fe8a05128f6bc4356c7cbf0d913d6c48f65c90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ec802d7d8812cdaaa7516edc624b6e66e419f94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec802d7d8812cdaaa7516edc624b6e66e419f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ec802d7d8812cdaaa7516edc624b6e66e419f94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec802d7d8812cdaaa7516edc624b6e66e419f94/comments", "author": null, "committer": null, "parents": [{"sha": "e45c0886d6eb063199f113c4285bbd9d8e96fce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e45c0886d6eb063199f113c4285bbd9d8e96fce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e45c0886d6eb063199f113c4285bbd9d8e96fce3"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "e7c42e5a7431cc4c92a09f84f617b1d32adceaad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec802d7d8812cdaaa7516edc624b6e66e419f94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec802d7d8812cdaaa7516edc624b6e66e419f94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ec802d7d8812cdaaa7516edc624b6e66e419f94", "patch": "@@ -1,3 +1,9 @@\n+2011-10-19  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR bootstrap/50709\n+\t* ipa-inline.c (inline_small_functions): Fix checking code to not make\n+\teffect on fibheap stability.\n+\n 2011-10-20  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* config/m68k/t-linux (M68K_MLIB_CPU): Add ColdFire CPUs."}, {"sha": "909b5ba29f3d31a5016d86d61b88542687749dda", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec802d7d8812cdaaa7516edc624b6e66e419f94/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec802d7d8812cdaaa7516edc624b6e66e419f94/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=8ec802d7d8812cdaaa7516edc624b6e66e419f94", "patch": "@@ -1384,6 +1384,7 @@ inline_small_functions (void)\n       struct cgraph_node *where, *callee;\n       int badness = fibheap_min_key (heap);\n       int current_badness;\n+      int cached_badness;\n       int growth;\n \n       edge = (struct cgraph_edge *) fibheap_extract_min (heap);\n@@ -1392,16 +1393,18 @@ inline_small_functions (void)\n       if (!edge->inline_failed)\n \tcontinue;\n \n-      /* Be sure that caches are maintained consistent.  */\n-#ifdef ENABLE_CHECKING\n+      /* Be sure that caches are maintained consistent.  \n+         We can not make this ENABLE_CHECKING only because it cause differnt\n+         updates of the fibheap queue.  */\n+      cached_badness = edge_badness (edge, false);\n       reset_edge_growth_cache (edge);\n       reset_node_growth_cache (edge->callee);\n-#endif\n \n       /* When updating the edge costs, we only decrease badness in the keys.\n \t Increases of badness are handled lazilly; when we see key with out\n \t of date value on it, we re-insert it now.  */\n       current_badness = edge_badness (edge, false);\n+      gcc_assert (cached_badness == current_badness);\n       gcc_assert (current_badness >= badness);\n       if (current_badness != badness)\n \t{"}]}