{"sha": "b21ce9ce3bc76be56a358bef9018f8a70f170450", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIxY2U5Y2UzYmM3NmJlNTZhMzU4YmVmOTAxOGY4YTcwZjE3MDQ1MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-30T11:20:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-30T11:20:21Z"}, "message": "genmatch.c (decision_tree::gen_gimple): Merge with ...\n\n2015-07-30  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c (decision_tree::gen_gimple): Merge with ...\n\t(decision_tree::gen_generic): ... this into ...\n\t(decision_tree::gen): ... this.\n\t(main): Adjust callers.\n\nFrom-SVN: r226396", "tree": {"sha": "500ab67fa4809734077301f407f1d54d97289e3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/500ab67fa4809734077301f407f1d54d97289e3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b21ce9ce3bc76be56a358bef9018f8a70f170450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21ce9ce3bc76be56a358bef9018f8a70f170450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b21ce9ce3bc76be56a358bef9018f8a70f170450", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b21ce9ce3bc76be56a358bef9018f8a70f170450/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81b7ff079a2851d5f5d3b3a01d18c3af2e165da4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81b7ff079a2851d5f5d3b3a01d18c3af2e165da4"}], "stats": {"total": 182, "additions": 70, "deletions": 112}, "files": [{"sha": "dfb8ddf66ca6609ef4264c30229b754bf93ec5f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21ce9ce3bc76be56a358bef9018f8a70f170450/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21ce9ce3bc76be56a358bef9018f8a70f170450/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b21ce9ce3bc76be56a358bef9018f8a70f170450", "patch": "@@ -1,3 +1,10 @@\n+2015-07-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (decision_tree::gen_gimple): Merge with ...\n+\t(decision_tree::gen_generic): ... this into ...\n+\t(decision_tree::gen): ... this.\n+\t(main): Adjust callers.\n+\n 2015-07-30  Richard Biener  <rguenther@suse.de>\n \n \t* genmatch.c (verbose): New global."}, {"sha": "0579449a8ea7001f241b0eeb6d75a84fe70015d6", "filename": "gcc/genmatch.c", "status": "modified", "additions": 63, "deletions": 112, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b21ce9ce3bc76be56a358bef9018f8a70f170450/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b21ce9ce3bc76be56a358bef9018f8a70f170450/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=b21ce9ce3bc76be56a358bef9018f8a70f170450", "patch": "@@ -1310,8 +1310,7 @@ struct decision_tree\n   dt_node *root;\n \n   void insert (struct simplify *, unsigned);\n-  void gen_gimple (FILE *f = stderr);\n-  void gen_generic (FILE *f = stderr);\n+  void gen (FILE *f, bool gimple);\n   void print (FILE *f = stderr);\n \n   decision_tree () { root = new dt_node (dt_node::DT_NODE); }\n@@ -2997,92 +2996,14 @@ dt_simplify::gen (FILE *f, int indent, bool gimple)\n    tree.  */\n \n void\n-decision_tree::gen_gimple (FILE *f)\n+decision_tree::gen (FILE *f, bool gimple)\n {\n   root->analyze ();\n \n-  fprintf (stderr, \"GIMPLE decision tree has %u leafs, maximum depth %u and \"\n-\t   \"a total number of %u nodes\\n\", root->num_leafs, root->max_level,\n-\t   root->total_size);\n-\n-  for (unsigned n = 1; n <= 3; ++n)\n-    {\n-      /* First generate split-out functions.  */\n-      for (unsigned i = 0; i < root->kids.length (); i++)\n-\t{\n-\t  dt_operand *dop = static_cast<dt_operand *>(root->kids[i]);\n-\t  expr *e = static_cast<expr *>(dop->op);\n-\t  if (e->ops.length () != n)\n-\t    continue;\n-\n-\t  fprintf (f, \"\\nstatic bool\\n\"\n-\t\t   \"gimple_simplify_%s (code_helper *res_code, tree *res_ops,\\n\"\n-\t\t   \"                 gimple_seq *seq, tree (*valueize)(tree) \"\n-\t\t   \"ATTRIBUTE_UNUSED,\\n\"\n-\t\t   \"                 code_helper ARG_UNUSED (code), tree \"\n-\t\t   \"ARG_UNUSED (type)\\n\",\n-\t\t   e->operation->id);\n-\t  for (unsigned i = 0; i < n; ++i)\n-\t    fprintf (f, \", tree op%d\", i);\n-\t  fprintf (f, \")\\n\");\n-\t  fprintf (f, \"{\\n\");\n-\t  dop->gen_kids (f, 2, true);\n-\t  fprintf (f, \"  return false;\\n\");\n-\t  fprintf (f, \"}\\n\");\n-\t}\n-\n-      /* Then generate the main entry with the outermost switch and\n-         tail-calls to the split-out functions.  */\n-      fprintf (f, \"\\nstatic bool\\n\"\n-\t       \"gimple_simplify (code_helper *res_code, tree *res_ops,\\n\"\n-\t       \"                 gimple_seq *seq, tree (*valueize)(tree),\\n\"\n-\t       \"                 code_helper code, tree type\");\n-      for (unsigned i = 0; i < n; ++i)\n-\tfprintf (f, \", tree op%d\", i);\n-      fprintf (f, \")\\n\");\n-      fprintf (f, \"{\\n\");\n-\n-      fprintf (f, \"  switch (code.get_rep())\\n\"\n-\t          \"    {\\n\");\n-      for (unsigned i = 0; i < root->kids.length (); i++)\n-\t{\n-\t  dt_operand *dop = static_cast<dt_operand *>(root->kids[i]);\n-\t  expr *e = static_cast<expr *>(dop->op);\n-\t  if (e->ops.length () != n)\n-\t    continue;\n-\n-\t  if (*e->operation == CONVERT_EXPR\n-\t      || *e->operation == NOP_EXPR)\n-\t    fprintf (f, \"    CASE_CONVERT:\\n\");\n-\t  else\n-\t    fprintf (f, \"    case %s%s:\\n\",\n-\t\t     is_a <fn_id *> (e->operation) ? \"-\" : \"\",\n-\t\t     e->operation->id);\n-\t  fprintf (f, \"      return gimple_simplify_%s (res_code, res_ops, \"\n-\t\t   \"seq, valueize, code, type\", e->operation->id);\n-\t  for (unsigned i = 0; i < n; ++i)\n-\t    fprintf (f, \", op%d\", i);\n-\t  fprintf (f, \");\\n\");\n-\t}\n-      fprintf (f,       \"    default:;\\n\"\n-\t                \"    }\\n\");\n-\n-      fprintf (f, \"  return false;\\n\");\n-      fprintf (f, \"}\\n\");\n-    }\n-}\n-\n-/* Main entry to generate code for matching GENERIC IL off the decision\n-   tree.  */\n-\n-void\n-decision_tree::gen_generic (FILE *f)\n-{\n-  root->analyze ();\n-\n-  fprintf (stderr, \"GENERIC decision tree has %u leafs, maximum depth %u and \"\n-\t   \"a total number of %u nodes\\n\", root->num_leafs, root->max_level,\n-\t   root->total_size);\n+  fprintf (stderr, \"%s decision tree has %u leafs, maximum depth %u and \"\n+\t   \"a total number of %u nodes\\n\",\n+\t   gimple ? \"GIMPLE\" : \"GENERIC\", \n+\t   root->num_leafs, root->max_level, root->total_size);\n \n   for (unsigned n = 1; n <= 3; ++n)\n     {\n@@ -3093,64 +3014,97 @@ decision_tree::gen_generic (FILE *f)\n \t  expr *e = static_cast<expr *>(dop->op);\n \t  if (e->ops.length () != n\n \t      /* Builtin simplifications are somewhat premature on\n-\t         GENERIC.  The following drops patterns with outermost\n+\t\t GENERIC.  The following drops patterns with outermost\n \t\t calls.  It's easy to emit overloads for function code\n \t\t though if necessary.  */\n-\t      || e->operation->kind != id_base::CODE)\n+\t      || (!gimple\n+\t\t  && e->operation->kind != id_base::CODE))\n \t    continue;\n \n-\t  fprintf (f, \"\\nstatic tree\\n\"\n-\t\t   \"generic_simplify_%s (location_t ARG_UNUSED (loc), enum \"\n-\t\t   \"tree_code ARG_UNUSED (code), tree ARG_UNUSED (type)\",\n-\t\t   e->operation->id);\n+\t  if (gimple)\n+\t    fprintf (f, \"\\nstatic bool\\n\"\n+\t\t     \"gimple_simplify_%s (code_helper *res_code, tree *res_ops,\\n\"\n+\t\t     \"                 gimple_seq *seq, tree (*valueize)(tree) \"\n+\t\t     \"ATTRIBUTE_UNUSED,\\n\"\n+\t\t     \"                 code_helper ARG_UNUSED (code), tree \"\n+\t\t     \"ARG_UNUSED (type)\\n\",\n+\t\t     e->operation->id);\n+\t  else\n+\t    fprintf (f, \"\\nstatic tree\\n\"\n+\t\t     \"generic_simplify_%s (location_t ARG_UNUSED (loc), enum \"\n+\t\t     \"tree_code ARG_UNUSED (code), tree ARG_UNUSED (type)\",\n+\t\t     e->operation->id);\n \t  for (unsigned i = 0; i < n; ++i)\n \t    fprintf (f, \", tree op%d\", i);\n \t  fprintf (f, \")\\n\");\n \t  fprintf (f, \"{\\n\");\n-\t  dop->gen_kids (f, 2, false);\n-\t  fprintf (f, \"  return NULL_TREE;\\n\");\n+\t  dop->gen_kids (f, 2, gimple);\n+\t  if (gimple)\n+\t    fprintf (f, \"  return false;\\n\");\n+\t  else\n+\t    fprintf (f, \"  return NULL_TREE;\\n\");\n \t  fprintf (f, \"}\\n\");\n \t}\n \n       /* Then generate the main entry with the outermost switch and\n          tail-calls to the split-out functions.  */\n-      fprintf (f, \"\\ntree\\n\"\n-\t       \"generic_simplify (location_t loc, enum tree_code code, \"\n-\t       \"tree type ATTRIBUTE_UNUSED\");\n+      if (gimple)\n+\tfprintf (f, \"\\nstatic bool\\n\"\n+\t\t \"gimple_simplify (code_helper *res_code, tree *res_ops,\\n\"\n+\t\t \"                 gimple_seq *seq, tree (*valueize)(tree),\\n\"\n+\t\t \"                 code_helper code, tree type\");\n+      else\n+\tfprintf (f, \"\\ntree\\n\"\n+\t\t \"generic_simplify (location_t loc, enum tree_code code, \"\n+\t\t \"tree type ATTRIBUTE_UNUSED\");\n       for (unsigned i = 0; i < n; ++i)\n \tfprintf (f, \", tree op%d\", i);\n       fprintf (f, \")\\n\");\n       fprintf (f, \"{\\n\");\n \n-      fprintf (f, \"  switch (code)\\n\"\n-\t          \"    {\\n\");\n+      if (gimple)\n+\tfprintf (f, \"  switch (code.get_rep())\\n\"\n+\t\t \"    {\\n\");\n+      else\n+\tfprintf (f, \"  switch (code)\\n\"\n+\t\t \"    {\\n\");\n       for (unsigned i = 0; i < root->kids.length (); i++)\n \t{\n \t  dt_operand *dop = static_cast<dt_operand *>(root->kids[i]);\n \t  expr *e = static_cast<expr *>(dop->op);\n \t  if (e->ops.length () != n\n \t      /* Builtin simplifications are somewhat premature on\n-\t         GENERIC.  The following drops patterns with outermost\n+\t\t GENERIC.  The following drops patterns with outermost\n \t\t calls.  It's easy to emit overloads for function code\n \t\t though if necessary.  */\n-\t      || e->operation->kind != id_base::CODE)\n+\t      || (!gimple\n+\t\t  && e->operation->kind != id_base::CODE))\n \t    continue;\n \n-\t  operator_id *op_id = static_cast <operator_id *> (e->operation);\n-\t  if (op_id->code == NOP_EXPR || op_id->code == CONVERT_EXPR)\n+\t  if (*e->operation == CONVERT_EXPR\n+\t      || *e->operation == NOP_EXPR)\n \t    fprintf (f, \"    CASE_CONVERT:\\n\");\n \t  else\n-\t    fprintf (f, \"    case %s:\\n\", e->operation->id);\n-\t  fprintf (f, \"      return generic_simplify_%s (loc, code, type\",\n-\t\t   e->operation->id);\n+\t    fprintf (f, \"    case %s%s:\\n\",\n+\t\t     is_a <fn_id *> (e->operation) ? \"-\" : \"\",\n+\t\t     e->operation->id);\n+\t  if (gimple)\n+\t    fprintf (f, \"      return gimple_simplify_%s (res_code, res_ops, \"\n+\t\t     \"seq, valueize, code, type\", e->operation->id);\n+\t  else\n+\t    fprintf (f, \"      return generic_simplify_%s (loc, code, type\",\n+\t\t     e->operation->id);\n \t  for (unsigned i = 0; i < n; ++i)\n \t    fprintf (f, \", op%d\", i);\n \t  fprintf (f, \");\\n\");\n \t}\n-      fprintf (f, \"    default:;\\n\"\n-\t          \"    }\\n\");\n+      fprintf (f,       \"    default:;\\n\"\n+\t                \"    }\\n\");\n \n-      fprintf (f, \"  return NULL_TREE;\\n\");\n+      if (gimple)\n+\tfprintf (f, \"  return false;\\n\");\n+      else\n+\tfprintf (f, \"  return NULL_TREE;\\n\");\n       fprintf (f, \"}\\n\");\n     }\n }\n@@ -4317,10 +4271,7 @@ add_operator (VIEW_CONVERT2, \"VIEW_CONVERT2\", \"tcc_unary\", 1);\n   if (verbose == 2)\n     dt.print (stderr);\n \n-  if (gimple)\n-    dt.gen_gimple (stdout);\n-  else\n-    dt.gen_generic (stdout);\n+  dt.gen (stdout, gimple);\n \n   /* Finalize.  */\n   cpp_finish (r, NULL);"}]}