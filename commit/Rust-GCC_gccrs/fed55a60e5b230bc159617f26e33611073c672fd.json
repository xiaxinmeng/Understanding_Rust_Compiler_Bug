{"sha": "fed55a60e5b230bc159617f26e33611073c672fd", "node_id": "C_kwDOANBUbNoAKGZlZDU1YTYwZTViMjMwYmMxNTk2MTdmMjZlMzM2MTEwNzNjNjcyZmQ", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-29T10:32:56Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-29T10:32:56Z"}, "message": "aarch64: Make more use of aarch64_feature_flags\n\nA previous patch added a aarch64_feature_flags typedef, to abstract\nthe representation of the feature flags.  This patch makes existing\ncode use the typedef too.  Hope I've caught them all!\n\ngcc/\n\t* common/config/aarch64/aarch64-common.cc: Use aarch64_feature_flags\n\tfor feature flags throughout.\n\t* config/aarch64/aarch64-protos.h: Likewise.\n\t* config/aarch64/aarch64-sve-builtins.h: Likewise.\n\t* config/aarch64/aarch64-sve-builtins.cc: Likewise.\n\t* config/aarch64/aarch64.cc: Likewise.\n\t* config/aarch64/aarch64.opt: Likewise.\n\t* config/aarch64/driver-aarch64.cc: Likewise.", "tree": {"sha": "971f8928b127f7a8768d3951f9a4811d7724db0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/971f8928b127f7a8768d3951f9a4811d7724db0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fed55a60e5b230bc159617f26e33611073c672fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed55a60e5b230bc159617f26e33611073c672fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fed55a60e5b230bc159617f26e33611073c672fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed55a60e5b230bc159617f26e33611073c672fd/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60dee638c8a7ae59c033868de7e7638c88b38ed2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60dee638c8a7ae59c033868de7e7638c88b38ed2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60dee638c8a7ae59c033868de7e7638c88b38ed2"}], "stats": {"total": 103, "additions": 56, "deletions": 47}, "files": [{"sha": "bebcfd4c9d3b3d5de12e8c44136eef2c83416fa8", "filename": "gcc/common/config/aarch64/aarch64-common.cc", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed55a60e5b230bc159617f26e33611073c672fd/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed55a60e5b230bc159617f26e33611073c672fd/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc?ref=fed55a60e5b230bc159617f26e33611073c672fd", "patch": "@@ -128,9 +128,9 @@ aarch64_handle_option (struct gcc_options *opts,\n struct aarch64_option_extension\n {\n   const char *name;\n-  uint64_t flag_canonical;\n-  uint64_t flags_on;\n-  uint64_t flags_off;\n+  aarch64_feature_flags flag_canonical;\n+  aarch64_feature_flags flags_on;\n+  aarch64_feature_flags flags_off;\n };\n \n /* ISA extensions in AArch64.  */\n@@ -149,14 +149,14 @@ struct processor_name_to_arch\n {\n   const char *processor_name;\n   aarch64_arch arch;\n-  uint64_t flags;\n+  aarch64_feature_flags flags;\n };\n \n struct arch_to_arch_name\n {\n   aarch64_arch arch;\n   const char *arch_name;\n-  uint64_t flags;\n+  aarch64_feature_flags flags;\n };\n \n /* Map processor names to the architecture revision they implement and\n@@ -186,7 +186,7 @@ static constexpr arch_to_arch_name all_architectures[] =\n    a copy of the string is created and stored to INVALID_EXTENSION.  */\n \n enum aarch64_parse_opt_result\n-aarch64_parse_extension (const char *str, uint64_t *isa_flags,\n+aarch64_parse_extension (const char *str, aarch64_feature_flags *isa_flags,\n \t\t\t std::string *invalid_extension)\n {\n   /* The extension string is parsed left to right.  */\n@@ -266,8 +266,9 @@ aarch64_get_all_extension_candidates (auto_vec<const char *> *candidates)\n    that all the \"+\" flags come before the \"+no\" flags.  */\n \n std::string\n-aarch64_get_extension_string_for_isa_flags (uint64_t isa_flags,\n-\t\t\t\t\t    uint64_t default_arch_flags)\n+aarch64_get_extension_string_for_isa_flags\n+  (aarch64_feature_flags isa_flags,\n+   aarch64_feature_flags default_arch_flags)\n {\n   std::string outstr = \"\";\n \n@@ -375,7 +376,7 @@ aarch64_rewrite_selected_cpu (const char *name)\n       || a_to_an->arch == aarch64_no_arch)\n     fatal_error (input_location, \"unknown value %qs for %<-mcpu%>\", name);\n \n-  uint64_t extensions = p_to_a->flags;\n+  aarch64_feature_flags extensions = p_to_a->flags;\n   aarch64_parse_extension (extension_str.c_str (), &extensions, NULL);\n \n   std::string outstr = a_to_an->arch_name"}, {"sha": "d1af307c4880a4dae4ad7c5ccc5f5b538fd444d5", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed55a60e5b230bc159617f26e33611073c672fd/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed55a60e5b230bc159617f26e33611073c672fd/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=fed55a60e5b230bc159617f26e33611073c672fd", "patch": "@@ -1034,10 +1034,11 @@ bool aarch64_handle_option (struct gcc_options *, struct gcc_options *,\n \t\t\t     const struct cl_decoded_option *, location_t);\n const char *aarch64_rewrite_selected_cpu (const char *name);\n enum aarch64_parse_opt_result aarch64_parse_extension (const char *,\n-\t\t\t\t\t\t       uint64_t *,\n+\t\t\t\t\t\t       aarch64_feature_flags *,\n \t\t\t\t\t\t       std::string *);\n void aarch64_get_all_extension_candidates (auto_vec<const char *> *candidates);\n-std::string aarch64_get_extension_string_for_isa_flags (uint64_t, uint64_t);\n+std::string aarch64_get_extension_string_for_isa_flags (aarch64_feature_flags,\n+\t\t\t\t\t\t\taarch64_feature_flags);\n \n rtl_opt_pass *make_pass_fma_steering (gcc::context *);\n rtl_opt_pass *make_pass_track_speculation (gcc::context *);"}, {"sha": "b927a886ef304a454c819018186f599ca51a9e30", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed55a60e5b230bc159617f26e33611073c672fd/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed55a60e5b230bc159617f26e33611073c672fd/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=fed55a60e5b230bc159617f26e33611073c672fd", "patch": "@@ -82,7 +82,7 @@ class GTY(()) registered_function\n \n   /* The architecture extensions that the function requires, as a set of\n      AARCH64_FL_* flags.  */\n-  uint64_t required_extensions;\n+  aarch64_feature_flags required_extensions;\n \n   /* True if the decl represents an overloaded function that needs to be\n      resolved by function_resolver.  */\n@@ -694,13 +694,16 @@ check_required_registers (location_t location, tree fndecl)\n    Report an error against LOCATION if not.  */\n static bool\n check_required_extensions (location_t location, tree fndecl,\n-\t\t\t   uint64_t required_extensions)\n+\t\t\t   aarch64_feature_flags required_extensions)\n {\n-  uint64_t missing_extensions = required_extensions & ~aarch64_isa_flags;\n+  auto missing_extensions = required_extensions & ~aarch64_isa_flags;\n   if (missing_extensions == 0)\n     return check_required_registers (location, fndecl);\n \n-  static const struct { uint64_t flag; const char *name; } extensions[] = {\n+  static const struct {\n+    aarch64_feature_flags flag;\n+    const char *name;\n+  } extensions[] = {\n #define AARCH64_OPT_EXTENSION(EXT_NAME, IDENT, C, D, E, F) \\\n     { AARCH64_FL_##IDENT, EXT_NAME },\n #include \"aarch64-option-extensions.def\"\n@@ -992,7 +995,7 @@ function_builder::get_attributes (const function_instance &instance)\n registered_function &\n function_builder::add_function (const function_instance &instance,\n \t\t\t\tconst char *name, tree fntype, tree attrs,\n-\t\t\t\tuint64_t required_extensions,\n+\t\t\t\taarch64_feature_flags required_extensions,\n \t\t\t\tbool overloaded_p,\n \t\t\t\tbool placeholder_p)\n {\n@@ -1034,11 +1037,12 @@ function_builder::add_function (const function_instance &instance,\n    one-to-one mapping between \"short\" and \"full\" names, and if standard\n    overload resolution therefore isn't necessary.  */\n void\n-function_builder::add_unique_function (const function_instance &instance,\n-\t\t\t\t       tree return_type,\n-\t\t\t\t       vec<tree> &argument_types,\n-\t\t\t\t       uint64_t required_extensions,\n-\t\t\t\t       bool force_direct_overloads)\n+function_builder::\n+add_unique_function (const function_instance &instance,\n+\t\t     tree return_type,\n+\t\t     vec<tree> &argument_types,\n+\t\t     aarch64_feature_flags required_extensions,\n+\t\t     bool force_direct_overloads)\n {\n   /* Add the function under its full (unique) name.  */\n   char *name = get_name (instance, false);\n@@ -1081,8 +1085,9 @@ function_builder::add_unique_function (const function_instance &instance,\n    features are available as part of resolving the function to the\n    relevant unique function.  */\n void\n-function_builder::add_overloaded_function (const function_instance &instance,\n-\t\t\t\t\t   uint64_t required_extensions)\n+function_builder::\n+add_overloaded_function (const function_instance &instance,\n+\t\t\t aarch64_feature_flags required_extensions)\n {\n   char *name = get_name (instance, true);\n   if (registered_function **map_value = m_overload_names.get (name))"}, {"sha": "63d1db776f7030ea650e095c92b766a20091db07", "filename": "gcc/config/aarch64/aarch64-sve-builtins.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed55a60e5b230bc159617f26e33611073c672fd/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed55a60e5b230bc159617f26e33611073c672fd/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h?ref=fed55a60e5b230bc159617f26e33611073c672fd", "patch": "@@ -263,7 +263,7 @@ struct function_group_info\n \n   /* The architecture extensions that the functions require, as a set of\n      AARCH64_FL_* flags.  */\n-  uint64_t required_extensions;\n+  aarch64_feature_flags required_extensions;\n };\n \n /* Describes a single fully-resolved function (i.e. one that has a\n@@ -321,8 +321,9 @@ class function_builder\n   ~function_builder ();\n \n   void add_unique_function (const function_instance &, tree,\n-\t\t\t    vec<tree> &, uint64_t, bool);\n-  void add_overloaded_function (const function_instance &, uint64_t);\n+\t\t\t    vec<tree> &, aarch64_feature_flags, bool);\n+  void add_overloaded_function (const function_instance &,\n+\t\t\t\taarch64_feature_flags);\n   void add_overloaded_functions (const function_group_info &,\n \t\t\t\t mode_suffix_index);\n \n@@ -338,7 +339,7 @@ class function_builder\n \n   registered_function &add_function (const function_instance &,\n \t\t\t\t     const char *, tree, tree,\n-\t\t\t\t     uint64_t, bool, bool);\n+\t\t\t\t     aarch64_feature_flags, bool, bool);\n \n   /* The function type to use for functions that are resolved by\n      function_resolver.  */"}, {"sha": "21c142e1e56a489bc368b3e13ffe1e5f80de5f06", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed55a60e5b230bc159617f26e33611073c672fd/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed55a60e5b230bc159617f26e33611073c672fd/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=fed55a60e5b230bc159617f26e33611073c672fd", "patch": "@@ -2675,7 +2675,7 @@ struct processor\n   aarch64_processor ident;\n   aarch64_processor sched_core;\n   aarch64_arch arch;\n-  uint64_t flags;\n+  aarch64_feature_flags flags;\n   const tune_params *tune;\n };\n \n@@ -17121,7 +17121,8 @@ static void initialize_aarch64_code_model (struct gcc_options *);\n \n static enum aarch64_parse_opt_result\n aarch64_parse_arch (const char *to_parse, const struct processor **res,\n-\t\t    uint64_t *isa_flags, std::string *invalid_extension)\n+\t\t    aarch64_feature_flags *isa_flags,\n+\t\t    std::string *invalid_extension)\n {\n   const char *ext;\n   const struct processor *arch;\n@@ -17144,7 +17145,7 @@ aarch64_parse_arch (const char *to_parse, const struct processor **res,\n       if (strlen (arch->name) == len\n \t  && strncmp (arch->name, to_parse, len) == 0)\n \t{\n-\t  uint64_t isa_temp = arch->flags;\n+\t  auto isa_temp = arch->flags;\n \n \t  if (ext != NULL)\n \t    {\n@@ -17176,7 +17177,8 @@ aarch64_parse_arch (const char *to_parse, const struct processor **res,\n \n static enum aarch64_parse_opt_result\n aarch64_parse_cpu (const char *to_parse, const struct processor **res,\n-\t\t   uint64_t *isa_flags, std::string *invalid_extension)\n+\t\t   aarch64_feature_flags *isa_flags,\n+\t\t   std::string *invalid_extension)\n {\n   const char *ext;\n   const struct processor *cpu;\n@@ -17198,8 +17200,7 @@ aarch64_parse_cpu (const char *to_parse, const struct processor **res,\n     {\n       if (strlen (cpu->name) == len && strncmp (cpu->name, to_parse, len) == 0)\n \t{\n-\t  uint64_t isa_temp = cpu->flags;\n-\n+\t  auto isa_temp = cpu->flags;\n \n \t  if (ext != NULL)\n \t    {\n@@ -17830,7 +17831,7 @@ aarch64_print_hint_for_extensions (const std::string &str)\n \n static bool\n aarch64_validate_mcpu (const char *str, const struct processor **res,\n-\t\t       uint64_t *isa_flags)\n+\t\t       aarch64_feature_flags *isa_flags)\n {\n   std::string invalid_extension;\n   enum aarch64_parse_opt_result parse_res\n@@ -18044,7 +18045,7 @@ aarch64_validate_mbranch_protection (const char *const_str)\n \n static bool\n aarch64_validate_march (const char *str, const struct processor **res,\n-\t\t\t uint64_t *isa_flags)\n+\t\t\taarch64_feature_flags *isa_flags)\n {\n   std::string invalid_extension;\n   enum aarch64_parse_opt_result parse_res\n@@ -18139,8 +18140,8 @@ aarch64_convert_sve_vector_bits (aarch64_sve_vector_bits_enum value)\n static void\n aarch64_override_options (void)\n {\n-  uint64_t cpu_isa = 0;\n-  uint64_t arch_isa = 0;\n+  aarch64_feature_flags cpu_isa = 0;\n+  aarch64_feature_flags arch_isa = 0;\n   aarch64_isa_flags = 0;\n \n   const struct processor *cpu = NULL;\n@@ -18588,7 +18589,7 @@ static bool\n aarch64_handle_attr_isa_flags (char *str)\n {\n   enum aarch64_parse_opt_result parse_res;\n-  uint64_t isa_flags = aarch64_isa_flags;\n+  auto isa_flags = aarch64_isa_flags;\n \n   /* We allow \"+nothing\" in the beginning to clear out all architectural\n      features if the user wants to handpick specific features.  */\n@@ -18860,7 +18861,7 @@ aarch64_process_target_attr (tree args)\n \t{\n \t  /* Check if token is possibly an arch extension without\n \t     leading '+'.  */\n-\t  uint64_t isa_temp = 0;\n+\t  aarch64_feature_flags isa_temp = 0;\n \t  auto with_plus = std::string (\"+\") + token;\n \t  enum aarch64_parse_opt_result ext_res\n \t    = aarch64_parse_extension (with_plus.c_str (), &isa_temp, nullptr);\n@@ -22476,7 +22477,7 @@ aarch64_declare_function_name (FILE *stream, const char* name,\n   const struct processor *this_arch\n     = aarch64_get_arch (targ_options->x_selected_arch);\n \n-  uint64_t isa_flags = targ_options->x_aarch64_isa_flags;\n+  auto isa_flags = targ_options->x_aarch64_isa_flags;\n   std::string extension\n     = aarch64_get_extension_string_for_isa_flags (isa_flags,\n \t\t\t\t\t\t  this_arch->flags);\n@@ -22580,7 +22581,7 @@ aarch64_start_file (void)\n \n   const struct processor *default_arch\n     = aarch64_get_arch (default_options->x_selected_arch);\n-  uint64_t default_isa_flags = default_options->x_aarch64_isa_flags;\n+  auto default_isa_flags = default_options->x_aarch64_isa_flags;\n   std::string extension\n     = aarch64_get_extension_string_for_isa_flags (default_isa_flags,\n \t\t\t\t\t\t  default_arch->flags);"}, {"sha": "f6ae4499a1695ad79af15e65e780b35e6267d3e3", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed55a60e5b230bc159617f26e33611073c672fd/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed55a60e5b230bc159617f26e33611073c672fd/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=fed55a60e5b230bc159617f26e33611073c672fd", "patch": "@@ -28,7 +28,7 @@ TargetVariable\n enum aarch64_arch selected_arch = aarch64_no_arch\n \n TargetVariable\n-uint64_t aarch64_isa_flags = 0\n+aarch64_feature_flags aarch64_isa_flags = 0\n \n TargetVariable\n unsigned aarch64_enable_bti = 2"}, {"sha": "52ff537908eac38161b11577225aa09bf2204d54", "filename": "gcc/config/aarch64/driver-aarch64.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fed55a60e5b230bc159617f26e33611073c672fd/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fed55a60e5b230bc159617f26e33611073c672fd/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.cc?ref=fed55a60e5b230bc159617f26e33611073c672fd", "patch": "@@ -31,7 +31,7 @@\n struct aarch64_arch_extension\n {\n   const char *ext;\n-  uint64_t flag;\n+  aarch64_feature_flags flag;\n   const char *feat_string;\n };\n \n@@ -50,7 +50,7 @@ struct aarch64_core_data\n   unsigned char implementer_id; /* Exactly 8 bits */\n   unsigned int part_no; /* 12 bits + 12 bits */\n   unsigned variant;\n-  uint64_t flags;\n+  aarch64_feature_flags flags;\n };\n \n #define AARCH64_BIG_LITTLE(BIG, LITTLE) \\\n@@ -75,7 +75,7 @@ struct aarch64_arch_driver_info\n {\n   const char* id;\n   const char* name;\n-  uint64_t flags;\n+  aarch64_feature_flags flags;\n };\n \n /* Skip the leading \"V\" in the architecture name.  */\n@@ -261,8 +261,8 @@ host_detect_local_cpu (int argc, const char **argv)\n   unsigned int variants[2] = { ALL_VARIANTS, ALL_VARIANTS };\n   unsigned int n_variants = 0;\n   bool processed_exts = false;\n-  uint64_t extension_flags = 0;\n-  uint64_t default_flags = 0;\n+  aarch64_feature_flags extension_flags = 0;\n+  aarch64_feature_flags default_flags = 0;\n   std::string buf;\n   size_t sep_pos = -1;\n   char *fcpu_info;"}]}