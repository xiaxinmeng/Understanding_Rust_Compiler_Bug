{"sha": "7934d78179a91cf3f2c03ce6c6b2c014ac61fdab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkzNGQ3ODE3OWE5MWNmM2YyYzAzY2U2YzZiMmMwMTRhYzYxZmRhYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-03-08T12:44:51Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-03-08T12:44:51Z"}, "message": "lang.opt (nostdlib): Move around.\n\n\t* lang.opt (nostdlib): Move around.\n\t* misc.c (gnat_handle_option): Fix formatting.\n\t(gnat_dwarf_name): Move around.\n\t* trans.c (Case_Statement_to_gnu): Fix formatting.\n\t(gnat_to_gnu): Likewise.\n\t* utils.c (aggregate_type_contains_array_p): Likewise.\n\t(create_subprog_decl): Likewise.\n\nFrom-SVN: r133035", "tree": {"sha": "2c606bc53dbf5581ce09df47cf3fcfa90384d62b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c606bc53dbf5581ce09df47cf3fcfa90384d62b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab/comments", "author": null, "committer": null, "parents": [{"sha": "904e4b8d32159b43f5edba2f4723fa2782925d0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/904e4b8d32159b43f5edba2f4723fa2782925d0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/904e4b8d32159b43f5edba2f4723fa2782925d0a"}], "stats": {"total": 135, "additions": 71, "deletions": 64}, "files": [{"sha": "75d19106dc9c57dfed524f4f79b85011dacb837c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7934d78179a91cf3f2c03ce6c6b2c014ac61fdab", "patch": "@@ -1,3 +1,13 @@\n+2008-03-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* lang.opt (nostdlib): Move around.\n+\t* misc.c (gnat_handle_option): Fix formatting.\n+\t(gnat_dwarf_name): Move around.\n+\t* trans.c (Case_Statement_to_gnu): Fix formatting.\n+\t(gnat_to_gnu): Likewise.\n+\t* utils.c (aggregate_type_contains_array_p): Likewise.\n+\t(create_subprog_decl): Likewise.\n+\n 2008-03-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* decl.c (gnat_to_gnu_entity) <E_Signed_Integer_Subtype>: Do not"}, {"sha": "0a1949f6710ce097b564bfb7a5c0560cdbd14bee", "filename": "gcc/ada/ada-tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab/gcc%2Fada%2Fada-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab/gcc%2Fada%2Fada-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fada-tree.def?ref=7934d78179a91cf3f2c03ce6c6b2c014ac61fdab", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              Specification                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2004, 2007 Free Software Foundation, Inc.    *\n+ *            Copyright (C) 1992-2007, Free Software Foundation, Inc.       *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *"}, {"sha": "5f2191fdec959d4849bfbc7d4666f03515d3c5ae", "filename": "gcc/ada/ada.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab/gcc%2Fada%2Fada.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab/gcc%2Fada%2Fada.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fada.h?ref=7934d78179a91cf3f2c03ce6c6b2c014ac61fdab", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2003 Free Software Foundation, Inc.          *\n+ *          Copyright (C) 1992-2008, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -37,7 +37,7 @@\n #define GCC_ADA_H\n \n /* Inlined functions in header are preceded by INLINE, which is normally set\n-   to extern inline for GCC, but may be set to static for use in standard \n+   to extern inline for GCC, but may be set to static for use in standard\n    ANSI-C.  */\n \n #ifndef INLINE\n@@ -58,10 +58,10 @@\n #define CAT(A,B) ECHO(A)B\n #endif\n \n-/* The following macro definition simulates the effect of a declaration of \n+/* The following macro definition simulates the effect of a declaration of\n    a subtype, where the first two parameters give the name of the type and\n    subtype, and the third and fourth parameters give the subtype range. The\n-   effect is to compile a typedef defining the subtype as a synonym for the \n+   effect is to compile a typedef defining the subtype as a synonym for the\n    type, together with two constants defining the end points.  */\n \n #define SUBTYPE(SUBTYPE,TYPE,FIRST,LAST)\t\\\n@@ -70,7 +70,7 @@\n          CAT (SUBTYPE,__Last) = LAST };\n \n /* The following definitions provide the equivalent of the Ada IN and NOT IN\n-   operators, assuming that the subtype involved has been defined using the \n+   operators, assuming that the subtype involved has been defined using the\n    SUBTYPE macro defined above.  */\n \n #define IN(VALUE,SUBTYPE) \\"}, {"sha": "0d541bf845a48c2e51d4a6cdf942c2e631a94c9f", "filename": "gcc/ada/lang.opt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab/gcc%2Fada%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab/gcc%2Fada%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flang.opt?ref=7934d78179a91cf3f2c03ce6c6b2c014ac61fdab", "patch": "@@ -69,16 +69,16 @@ nostdinc\n Ada RejectNegative\n ; Don't look for source files\n \n+nostdlib\n+Ada\n+; Don't look for object files\n+\n feliminate-unused-debug-types\n Ada\n ; Effect documented for C - intercepted for Ada to force the associated flag\n ; not to be set by default, as it currently eliminates unreferenced parallel\n ; types we need for encoding descriptions to the debugger.\n \n-nostdlib\n-Ada\n-; Don't look for object files\n-\n fRTS=\n Ada Joined RejectNegative\n ; Selects the runtime"}, {"sha": "da0f2d96a0a0ec5801fdba22cccf7e5575195368", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=7934d78179a91cf3f2c03ce6c6b2c014ac61fdab", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                           C Implementation File                          *\n  *                                                                          *\n- *          Copyright (C) 1992-2007, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2008, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -126,7 +126,7 @@ static tree gnat_type_max_size\t\t(const_tree);\n #undef  LANG_HOOKS_PUSHDECL\n #define LANG_HOOKS_PUSHDECL\t\tgnat_return_tree\n #undef  LANG_HOOKS_WRITE_GLOBALS\n-#define LANG_HOOKS_WRITE_GLOBALS      gnat_write_global_declarations\n+#define LANG_HOOKS_WRITE_GLOBALS\tgnat_write_global_declarations\n #undef  LANG_HOOKS_FINISH_INCOMPLETE_DECL\n #define LANG_HOOKS_FINISH_INCOMPLETE_DECL gnat_finish_incomplete_decl\n #undef\tLANG_HOOKS_REDUCE_BIT_FIELD_OPERATIONS\n@@ -303,9 +303,9 @@ gnat_handle_option (size_t scode, const char *arg, int value)\n \n     case OPT_feliminate_unused_debug_types:\n       /* We arrange for post_option to be able to only set the corresponding\n-         flag to 1 when explicitely requested by the user.  We expect the\n-         default flag value to be either 0 or positive, and expose a positive\n-         -f as a negative value to post_option.  */\n+\t flag to 1 when explicitely requested by the user.  We expect the\n+\t default flag value to be either 0 or positive, and expose a positive\n+\t -f as a negative value to post_option.  */\n       flag_eliminate_unused_debug_types = -value;\n       break;\n \n@@ -527,7 +527,6 @@ gnat_init_gcc_eh (void)\n      marked as \"cannot trap\" if the flag is not set (see emit_libcall_block).\n      We should not let this be since it is possible for such calls to actually\n      raise in Ada.  */\n-\n   flag_exceptions = 1;\n   flag_non_call_exceptions = 1;\n \n@@ -614,6 +613,14 @@ gnat_print_type (FILE *file, tree node, int indent)\n     }\n }\n \n+static const char *\n+gnat_dwarf_name (tree t, int verbosity ATTRIBUTE_UNUSED)\n+{\n+  gcc_assert (DECL_P (t));\n+\n+  return (const char *) IDENTIFIER_POINTER (DECL_NAME (t));\n+}\n+\n static const char *\n gnat_printable_name (tree decl, int verbosity)\n {\n@@ -631,14 +638,6 @@ gnat_printable_name (tree decl, int verbosity)\n   return (const char *) ada_name;\n }\n \n-static const char *\n-gnat_dwarf_name (tree t, int verbosity ATTRIBUTE_UNUSED)\n-{\n-  gcc_assert (DECL_P (t));\n-\n-  return (const char *) IDENTIFIER_POINTER (DECL_NAME (t));\n-}\n-\n /* Expands GNAT-specific GCC tree nodes.  The only ones we support\n    here are  and NULL_EXPR.  */\n "}, {"sha": "acf4de3793d85d0b6eb94625f8d3bc98d746ea7b", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=7934d78179a91cf3f2c03ce6c6b2c014ac61fdab", "patch": "@@ -1527,33 +1527,31 @@ Case_Statement_to_gnu (Node_Id gnat_node)\n \t      gcc_unreachable ();\n \t    }\n \n-         /* If the case value is a subtype that raises Constraint_Error at\n-             run-time because of a wrong bound, then gnu_low or gnu_high\n-             is not translated into an INTEGER_CST.  In such a case, we need\n-             to ensure that the when statement is not added in the tree,\n-             otherwise it will crash the gimplifier.  */\n-         if ((!gnu_low || TREE_CODE (gnu_low) == INTEGER_CST)\n-              && (!gnu_high || TREE_CODE (gnu_high) == INTEGER_CST))\n-          {\n-\n-             add_stmt_with_node (build3 (CASE_LABEL_EXPR, void_type_node,\n-                                         gnu_low, gnu_high,\n-                                         create_artificial_label ()),\n-                                 gnat_choice);\n-             choices_added++;\n-          }\n+\t  /* If the case value is a subtype that raises Constraint_Error at\n+\t     run-time because of a wrong bound, then gnu_low or gnu_high is\n+\t     not transtaleted into an INTEGER_CST.  In such a case, we need\n+\t     to ensure that the when statement is not added in the tree,\n+\t     otherwise it will crash the gimplifier.  */\n+\t  if ((!gnu_low || TREE_CODE (gnu_low) == INTEGER_CST)\n+\t      && (!gnu_high || TREE_CODE (gnu_high) == INTEGER_CST))\n+\t    {\n+\t      add_stmt_with_node (build3 (CASE_LABEL_EXPR, void_type_node,\n+\t\t\t\t\t  gnu_low, gnu_high,\n+\t\t\t\t\t  create_artificial_label ()),\n+\t\t\t\t  gnat_choice);\n+\t      choices_added++;\n+\t    }\n \t}\n \n-      /* Push a binding level here in case variables are declared since we want\n-         them to be local to this set of statements instead of the block\n-         containing the Case statement.  */\n-\n-       if (choices_added > 0)\n-       {\n-         add_stmt (build_stmt_group (Statements (gnat_when), true));\n-         add_stmt (build1 (GOTO_EXPR, void_type_node,\n-                           TREE_VALUE (gnu_switch_label_stack)));\n-       }\n+      /* Push a binding level here in case variables are declared as we want\n+\t them to be local to this set of statements instead of to the block\n+\t containing the Case statement.  */\n+      if (choices_added > 0)\n+\t{\n+\t  add_stmt (build_stmt_group (Statements (gnat_when), true));\n+\t  add_stmt (build1 (GOTO_EXPR, void_type_node,\n+\t\t\t    TREE_VALUE (gnu_switch_label_stack)));\n+\t}\n     }\n \n   /* Now emit a definition of the label all the cases branched to. */\n@@ -4244,7 +4242,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \n       for (gnat_temp\n \t   = First_Formal_With_Extras\n-\t       (Defining_Entity (Specification (gnat_node)));\n+\t      (Defining_Entity (Specification (gnat_node)));\n \t   Present (gnat_temp);\n \t   gnat_temp = Next_Formal_With_Extras (gnat_temp))\n \tif (Is_Itype (Etype (gnat_temp))\n@@ -6299,7 +6297,7 @@ assoc_to_constructor (Entity_Id gnat_entity, Node_Id gnat_assoc, tree gnu_type)\n   {\n     tree gnu_field;\n \n-    /* Verify every enty in GNU_LIST was used.  */\n+    /* Verify every entry in GNU_LIST was used.  */\n     for (gnu_field = gnu_list; gnu_field; gnu_field = TREE_CHAIN (gnu_field))\n       gcc_assert (TREE_ADDRESSABLE (gnu_field));\n   }"}, {"sha": "58f0b68c4fca6c766c585711061e1e0c672dead3", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7934d78179a91cf3f2c03ce6c6b2c014ac61fdab/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=7934d78179a91cf3f2c03ce6c6b2c014ac61fdab", "patch": "@@ -1554,7 +1554,7 @@ aggregate_type_contains_array_p (tree type)\n \n     case ARRAY_TYPE:\n       return true;\n-    \n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -1932,18 +1932,18 @@ create_subprog_decl (tree subprog_name, tree asm_name,\n   DECL_ARTIFICIAL (DECL_RESULT (subprog_decl)) = 1;\n   DECL_IGNORED_P (DECL_RESULT (subprog_decl)) = 1;\n \n-   /* TREE_ADDRESSABLE is set on the result type to request the use of the\n-      target by-reference return mechanism.  This is not supported all the\n-      way down to RTL expansion with GCC 4, which ICEs on temporary creation\n-      attempts with such a type and expects DECL_BY_REFERENCE to be set on\n-      the RESULT_DECL instead - see gnat_genericize for more details.  */\n-   if (TREE_ADDRESSABLE (TREE_TYPE (DECL_RESULT (subprog_decl))))\n-     {\n-       tree result_decl = DECL_RESULT (subprog_decl);\n-\n-       TREE_ADDRESSABLE (TREE_TYPE (result_decl)) = 0;\n-       DECL_BY_REFERENCE (result_decl) = 1;\n-     }\n+  /* TREE_ADDRESSABLE is set on the result type to request the use of the\n+     target by-reference return mechanism.  This is not supported all the\n+     way down to RTL expansion with GCC 4, which ICEs on temporary creation\n+     attempts with such a type and expects DECL_BY_REFERENCE to be set on\n+     the RESULT_DECL instead - see gnat_genericize for more details.  */\n+  if (TREE_ADDRESSABLE (TREE_TYPE (DECL_RESULT (subprog_decl))))\n+    {\n+      tree result_decl = DECL_RESULT (subprog_decl);\n+\n+      TREE_ADDRESSABLE (TREE_TYPE (result_decl)) = 0;\n+      DECL_BY_REFERENCE (result_decl) = 1;\n+    }\n \n   if (inline_flag)\n     DECL_DECLARED_INLINE_P (subprog_decl) = 1;"}]}