{"sha": "f1b3e3853329b58fb2e50c17487df2ecbc4a5608", "node_id": "C_kwDOANBUbNoAKGYxYjNlMzg1MzMyOWI1OGZiMmU1MGMxNzQ4N2RmMmVjYmM0YTU2MDg", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-02-23T13:53:44Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-03-04T15:06:25Z"}, "message": "LRA, rs6000, Darwin: Revise lo_sum use for forced constants [PR104117].\n\nFollow up discussion to the initial patch for this PR identified that it is\npreferable to avoid the LRA change, and arrange for the target to reject the\nhi and lo_sum selections when presented with an invalid address.\n\nWe split the Darwin high/low selectors into two:\n 1. One that handles non-PIC addresses (kernel mode, mdynamic-no-pic).\n 2. One that handles PIC addresses and rejects SYMBOL_REFs unless they are\n    suitably wrapped in the MACHOPIC_OFFSET unspec.\n\nThe second case is handled by providing a new predicate (macho_pic_address)\nthat checks the requirements.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\n\tPR target/104117\n\ngcc/ChangeLog:\n\n\t* config/rs6000/darwin.md (@machopic_high_<mode>): New.\n\t(@machopic_low_<mode>): New.\n\t* config/rs6000/predicates.md (macho_pic_address): New.\n\t* config/rs6000/rs6000.cc (rs6000_legitimize_address): Do not\n\tapply the TLS processing to Darwin.\n\t* lra-constraints.cc (process_address_1): Revert the changes\n\tin r12-7209.", "tree": {"sha": "e966287804451632fe9fe8de27277d77b02d5312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e966287804451632fe9fe8de27277d77b02d5312"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1b3e3853329b58fb2e50c17487df2ecbc4a5608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1b3e3853329b58fb2e50c17487df2ecbc4a5608", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1b3e3853329b58fb2e50c17487df2ecbc4a5608", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1b3e3853329b58fb2e50c17487df2ecbc4a5608/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "e73d59e806688ceecfef3fe386fe456b338e0166", "filename": "gcc/config/rs6000/darwin.md", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b3e3853329b58fb2e50c17487df2ecbc4a5608/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b3e3853329b58fb2e50c17487df2ecbc4a5608/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.md?ref=f1b3e3853329b58fb2e50c17487df2ecbc4a5608", "patch": "@@ -121,21 +121,32 @@ You should have received a copy of the GNU General Public License\n    stw %0,lo16(%2)(%1)\"\n   [(set_attr \"type\" \"store\")])\n \n-;; 64-bit MachO load/store support\n-\n ;; Mach-O PIC.\n \n (define_insn \"@macho_high_<mode>\"\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b*r\")\n \t(high:P (match_operand 1 \"\" \"\")))]\n-  \"TARGET_MACHO && (DEFAULT_ABI == ABI_DARWIN)\"\n+  \"TARGET_MACHO && (DEFAULT_ABI == ABI_DARWIN) && !flag_pic\"\n   \"lis %0,ha16(%1)\")\n \n (define_insn \"@macho_low_<mode>\"\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n \t(lo_sum:P (match_operand:P 1 \"gpc_reg_operand\" \"b\")\n \t\t   (match_operand 2 \"\" \"\")))]\n-   \"TARGET_MACHO && (DEFAULT_ABI == ABI_DARWIN)\"\n+   \"TARGET_MACHO && (DEFAULT_ABI == ABI_DARWIN) && !flag_pic\"\n+   \"la %0,lo16(%2)(%1)\")\n+\n+(define_insn \"@machopic_high_<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b*r\")\n+\t(high:P (match_operand 1 \"macho_pic_address\" \"\")))]\n+  \"TARGET_MACHO && flag_pic\"\n+  \"lis %0,ha16(%1)\")\n+\n+(define_insn \"@machopic_low_<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(lo_sum:P (match_operand:P 1 \"gpc_reg_operand\" \"b\")\n+\t\t   (match_operand 2 \"macho_pic_address\" \"\")))]\n+   \"TARGET_MACHO && flag_pic\"\n    \"la %0,lo16(%2)(%1)\")\n \n (define_split"}, {"sha": "28f6e9883cb74f99f6e121c6f0fb5f637a3b5146", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b3e3853329b58fb2e50c17487df2ecbc4a5608/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b3e3853329b58fb2e50c17487df2ecbc4a5608/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=f1b3e3853329b58fb2e50c17487df2ecbc4a5608", "patch": "@@ -2045,3 +2045,17 @@\n  (if_then_else (match_test \"TARGET_VSX\")\n   (match_operand 0 \"reg_or_cint_operand\")\n   (match_operand 0 \"const_int_operand\")))\n+\n+;; Return true if the operand is a valid Mach-O pic address.\n+;;\n+(define_predicate \"macho_pic_address\"\n+  (match_code \"const,unspec\")\n+{\n+  if (GET_CODE (op) == CONST)\n+    op = XEXP (op, 0);\n+\n+  if (GET_CODE (op) == UNSPEC && XINT (op, 1) == UNSPEC_MACHOPIC_OFFSET)\n+    return CONSTANT_P (XVECEXP (op, 0, 0));\n+  else\n+    return false;\n+})"}, {"sha": "2388d44c8ccc520eb6be90f623e96600146501e3", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b3e3853329b58fb2e50c17487df2ecbc4a5608/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b3e3853329b58fb2e50c17487df2ecbc4a5608/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=f1b3e3853329b58fb2e50c17487df2ecbc4a5608", "patch": "@@ -9021,7 +9021,7 @@ rs6000_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n       else\n \treturn force_reg (Pmode, x);\n     }\n-  if (SYMBOL_REF_P (x))\n+  if (SYMBOL_REF_P (x) && !TARGET_MACHO)\n     {\n       enum tls_model model = SYMBOL_REF_TLS_MODEL (x);\n       if (model != 0)"}, {"sha": "080b44ad87ab0fc2814829823be5148d0da873eb", "filename": "gcc/lra-constraints.cc", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1b3e3853329b58fb2e50c17487df2ecbc4a5608/gcc%2Flra-constraints.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1b3e3853329b58fb2e50c17487df2ecbc4a5608/gcc%2Flra-constraints.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.cc?ref=f1b3e3853329b58fb2e50c17487df2ecbc4a5608", "patch": "@@ -3625,8 +3625,21 @@ process_address_1 (int nop, bool check_only_p,\n \t\t  *ad.inner = gen_rtx_LO_SUM (Pmode, new_reg, addr);\n \t\t  if (!valid_address_p (op, &ad, cn))\n \t\t    {\n-\t\t      *ad.inner = addr; /* Punt.  */\n-\t\t      code = -1;\n+\t\t      /* Try to put lo_sum into register.  */\n+\t\t      insn = emit_insn (gen_rtx_SET\n+\t\t\t\t\t(new_reg,\n+\t\t\t\t\t gen_rtx_LO_SUM (Pmode, new_reg, addr)));\n+\t\t      code = recog_memoized (insn);\n+\t\t      if (code >= 0)\n+\t\t\t{\n+\t\t\t  *ad.inner = new_reg;\n+\t\t\t  if (!valid_address_p (op, &ad, cn))\n+\t\t\t    {\n+\t\t\t      *ad.inner = addr;\n+\t\t\t      code = -1;\n+\t\t\t    }\n+\t\t\t}\n+\n \t\t    }\n \t\t}\n \t      if (code < 0)"}]}