{"sha": "078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc4NzIxZTFhMmU2ZjM2MWY0YzdlZDZiOTAxN2I2ZmIwZDcyMTFhMQ==", "commit": {"author": {"name": "Andrew Cagney", "email": "cagney@gcc.gnu.org", "date": "2000-05-17T08:15:29Z"}, "committer": {"name": "Andrew Cagney", "email": "cagney@gcc.gnu.org", "date": "2000-05-17T08:15:29Z"}, "message": "Add options -Wunused-variable, -Wunused-function, -Wunused-label,\n\n-Wunused-parameter.  Retain existing -Wunused behavour.  Document.\n\nFrom-SVN: r33953", "tree": {"sha": "2543ce057f160b4e63e78f64be913189cbabb8e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2543ce057f160b4e63e78f64be913189cbabb8e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/comments", "author": null, "committer": null, "parents": [{"sha": "ef94b7f541f59ed3d9f5953a86e026cb217615b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef94b7f541f59ed3d9f5953a86e026cb217615b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef94b7f541f59ed3d9f5953a86e026cb217615b6"}], "stats": {"total": 257, "additions": 215, "deletions": 42}, "files": [{"sha": "425ab785599450862db564cf8b6f6a097af2653c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -1,3 +1,34 @@\n+Wed May 17 17:27:44 2000  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* flags.h (warn_unused_function, warn_unused_label,\n+ \twarn_unused_parameter, warn_unused_variable, warn_unused_value):\n+ \tReplace ``warn_unused''.\n+\t(set_Wunused): Add declaration.\n+\t* toplev.c (set_Wunused): New function.\n+\t(warn_unused_function, warn_unused_label, warn_unused_parameter,\n+ \twarn_unused_variable, warn_unused_value): New variables.\n+\t(W_options): Add -Wunused-function, -Wunused-function,\n+ \t-Wunused-label, -Wunused-parameter, -Wunused-variable and\n+ \t-Wunused-value.  Delete -Wunused.  Handled in decode_W_option.\n+\n+\t* toplev.c (decode_W_option): Update -Wunused flags by calling\n+ \tset_Wunused.\n+  \t* c-decl.c (c_decode_option): Ditto for -Wall.\n+\n+\t* stmt.c (expand_expr_stmt, expand_expr_stmt,\n+ \twarn_about_unused_variables): Replace warn_unused with more\n+ \texplicit warn_unused_value et.al.\n+\t* function.c (expand_function_end): Ditto.\n+\t* c-typeck.c (internal_build_compound_expr,\n+ \tinternal_build_compound_expr): Ditto.\n+\t* c-decl.c (poplevel, pop_label_level): Ditto.\n+\t* toplev.c (check_global_declarations): Replace warn_unused with\n+\tcheck for either warn_unused_function or warn_unused_variable.\n+\n+\t* gcc.1, invoke.texi (Warning Options): Document\n+ \t-Wunused-function, -Wunused-function, -Wunused-label,\n+ \t-Wunused-parameter, -Wunused-variable and -Wunused-value options.\n+\n 2000-05-16  Richard Henderson  <rth@cygnus.com>\n \n \t* config/ia64/crtbegin.asm (__dso_handle): Mark hidden if the"}, {"sha": "040b695f889925ad7d5e67f0061d02bed8a2fa00", "filename": "gcc/c-decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -754,7 +754,7 @@ c_decode_option (argc, argv)\n       warn_implicit_int = 1;\n       mesg_implicit_function_declaration = 1;\n       warn_return_type = 1;\n-      warn_unused = 1;\n+      set_Wunused (1);\n       warn_switch = 1;\n       warn_format = 1;\n       warn_char_subscripts = 1;\n@@ -1121,7 +1121,7 @@ poplevel (keep, reverse, functionbody)\n \t      define_label (input_filename, lineno,\n \t\t\t    DECL_NAME (label));\n \t    }\n-\t  else if (warn_unused && !TREE_USED (label))\n+\t  else if (warn_unused_label && !TREE_USED (label))\n \t    warning_with_decl (label, \"label `%s' defined but not used\");\n \t  IDENTIFIER_LABEL_VALUE (DECL_NAME (label)) = 0;\n \n@@ -1282,7 +1282,7 @@ pop_label_level ()\n \t      define_label (input_filename, lineno,\n \t\t\t    DECL_NAME (TREE_VALUE (link)));\n \t    }\n-\t  else if (warn_unused && !TREE_USED (TREE_VALUE (link)))\n+\t  else if (warn_unused_label && !TREE_USED (TREE_VALUE (link)))\n \t    warning_with_decl (TREE_VALUE (link), \n \t\t\t       \"label `%s' defined but not used\");\n \t  IDENTIFIER_LABEL_VALUE (DECL_NAME (TREE_VALUE (link))) = 0;"}, {"sha": "0f01c578d4d0d06518257603f65a731b7f1dd6e2", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -3531,7 +3531,7 @@ internal_build_compound_expr (list, first_p)\n       /* The left-hand operand of a comma expression is like an expression\n          statement: with -W or -Wunused, we should warn if it doesn't have\n \t any side-effects, unless it was explicitly cast to (void).  */\n-      if ((extra_warnings || warn_unused)\n+      if ((extra_warnings || warn_unused_value)\n            && ! (TREE_CODE (TREE_VALUE (list)) == CONVERT_EXPR\n                 && TREE_TYPE (TREE_VALUE (list)) == void_type_node))\n         warning (\"left-hand operand of comma expression has no effect\");\n@@ -3546,7 +3546,7 @@ internal_build_compound_expr (list, first_p)\n      side-effects, but computes a value which is not used.  For example, in\n      `foo() + bar(), baz()' the result of the `+' operator is not used,\n      so we should issue a warning.  */\n-  else if (warn_unused)\n+  else if (warn_unused_value)\n     warn_if_unused_value (TREE_VALUE (list));\n \n   return build (COMPOUND_EXPR, TREE_TYPE (rest), TREE_VALUE (list), rest);"}, {"sha": "a491bb376eb7f9aa057fc1c845d605fbec42fbee", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -1,3 +1,9 @@\n+Wed May 17 17:27:44 2000  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* decl.c (c_decode_option): Update -Wall unused flags by\n+ \tcalling set_Wunused.\n+\t(poplevel): Replace warn_unused with warn_unused_label.\n+\n 2000-05-09  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* ch-tree.h: Update prototypes.  Remove prototypes for"}, {"sha": "45f2656e567e4c044bb55b557874ec3040ab8000", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -799,7 +799,7 @@ c_decode_option (argc, argv)\n \twarn_uninitialized = 2;\n       warn_implicit = 1;\n       warn_return_type = 1;\n-      warn_unused = 1;\n+      set_Wunused (1);\n       warn_char_subscripts = 1;\n       warn_parentheses = 1;\n       warn_missing_braces = 1;\n@@ -2973,7 +2973,7 @@ poplevel (keep, reverse, functionbody)\n \t      define_label (input_filename, lineno,\n \t\t\t    DECL_NAME (label));\n \t    }\n-\t  else if (warn_unused && !TREE_USED (label))\n+\t  else if (warn_unused_label && !TREE_USED (label))\n \t    warning_with_decl (label, \"label `%s' defined but not used\");\n \t  IDENTIFIER_LABEL_VALUE (DECL_NAME (label)) = 0;\n "}, {"sha": "d6b8431782d8bf9847dfdeefcb8507bceaccfa90", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -1,3 +1,12 @@\n+Wed May 17 17:27:44 2000  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* decl.c (pop_label): Replace warn_unused with warn_unused_label.\n+  \t* typeck.c (build_x_compound_expr): Replace warn_unused with\n+ \twarn_unused_value.\n+\n+\t* decl2.c (lang_decode_option): Update -Wall unused flags by\n+ \tcalling set_Wunused.\n+\n 2000-05-16  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-treeh (BINFO_NEW_VTABLE_MARKED): Update documentation."}, {"sha": "6f09a7aee73a9bfc45b28d9c4317d5c97a90189c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -1194,7 +1194,7 @@ pop_label (link)\n \t  /* Avoid crashing later.  */\n \t  define_label (input_filename, 1, DECL_NAME (label));\n \t}\n-      else if (warn_unused && !TREE_USED (label))\n+      else if (warn_unused_label && !TREE_USED (label))\n \tcp_warning_at (\"label `%D' defined but not used\", label);\n     }\n "}, {"sha": "fb399dbf6e8d0e1384aa78d6e3a8f2a751195061", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -773,7 +773,7 @@ lang_decode_option (argc, argv)\n       else if (!strcmp (p, \"all\"))\n \t{\n \t  warn_return_type = setting;\n-\t  warn_unused = setting;\n+\t  set_Wunused (setting);\n \t  warn_implicit = setting;\n \t  warn_switch = setting;\n \t  warn_format = setting;"}, {"sha": "45c144530c59c769108cc8df0c58c09ed9b29edd", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -5058,13 +5058,13 @@ build_x_compound_expr (list)\n       /* the left-hand operand of a comma expression is like an expression\n          statement: we should warn if it doesn't have any side-effects,\n          unless it was explicitly cast to (void).  */\n-      if ((extra_warnings || warn_unused)\n+      if ((extra_warnings || warn_unused_value)\n            && !(TREE_CODE (TREE_VALUE(list)) == CONVERT_EXPR\n                 && TREE_TYPE (TREE_VALUE(list)) == void_type_node))\n         warning(\"left-hand operand of comma expression has no effect\");\n     }\n #if 0 /* this requires a gcc backend patch to export warn_if_unused_value */\n-  else if (warn_unused)\n+  else if (warn_unused_value)\n     warn_if_unused_value (TREE_VALUE(list));\n #endif\n "}, {"sha": "9eb3ccee06bb70827b4cd22b418cac16f507dc7a", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -1,3 +1,8 @@\n+Wed May 17 17:27:44 2000  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* top.c (ffe_decode_option): Update -Wall unused flags by calling\n+ \tset_Wunused.\n+\n 2000-05-09  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* com.c (ffecom_subscript_check_): Constify array_name"}, {"sha": "91db6d01803aa56f1ce7b1a1812c8fa0c3ab640a", "filename": "gcc/f/top.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Ff%2Ftop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Ff%2Ftop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Ftop.c?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -510,7 +510,7 @@ ffe_decode_option (argc, argv)\n \t     warning about not using it without also specifying -O.  */\n \t  if (warn_uninitialized != 1)\n \t    warn_uninitialized = 2;\n-\t  warn_unused = 1;\n+\t  set_Wunused (1);\n \t}\n       else\n \treturn 0;"}, {"sha": "3c543bc5bcd857d191b32e9135c222fddfdd14e2", "filename": "gcc/flags.h", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -71,9 +71,17 @@ extern int inhibit_warnings;\n \n extern int extra_warnings;\n \n-/* Nonzero to warn about unused local variables.  */\n+/* Nonzero to warn about unused variables, functions et.al.  Use\n+   set_Wunused() to update the -Wunused-* flags that correspond to the\n+   -Wunused option. */\n \n-extern int warn_unused;\n+extern void set_Wunused PARAMS ((int setting));\n+\n+extern int warn_unused_function;\n+extern int warn_unused_label;\n+extern int warn_unused_parameter;\n+extern int warn_unused_variable;\n+extern int warn_unused_value;\n \n /* Nonzero to warn about code which is never reached.  */\n "}, {"sha": "0f6785b9bdc284f67e2b19157fc9a1496e97139c", "filename": "gcc/function.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -6492,7 +6492,11 @@ expand_function_end (filename, line, end_bindings)\n     }\n \n   /* Warn about unused parms if extra warnings were specified.  */\n-  if (warn_unused && extra_warnings)\n+  /* Either ``-W -Wunused'' or ``-Wunused-parameter'' enables this\n+     warning.  WARN_UNUSED_PARAMETER is negative when set by\n+     -Wunused. */\n+  if (warn_unused_parameter > 0\n+      || (warn_unused_parameter < 0 && extra_warnings))\n     {\n       tree decl;\n "}, {"sha": "e1907510e397c6e4c643b7f4fa61e1d2f1318dae", "filename": "gcc/gcc.1", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fgcc.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fgcc.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.1?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -20,7 +20,7 @@\n .if n .sp\n .if t .sp 0.4\n ..\n-.Id $Id: gcc.1,v 1.13 1999/11/02 10:23:46 law Exp $\n+.Id $Id: gcc.1,v 1.14 2000/04/11 06:01:52 loewis Exp $\n .TH GCC 1 \"\\*(Dt\" \"GNU Tools\" \"GNU Tools\"\n .SH NAME\n gcc, g++ \\- GNU project C and C++ Compiler (gcc-2.96)\n@@ -206,6 +206,11 @@ in the following sections.\n \\-Wtrigraphs\n \\-Wuninitialized\n \\-Wunused\n+\\-Wunused-function\n+\\-Wunused-label\n+\\-Wunused-parameter\n+\\-Wunused-variable\n+\\-Wunused-value\n \\-Wwrite\\-strings\n .TP\n .B Debugging Options\n@@ -1694,10 +1699,50 @@ return-value in a function whose return-type is not \\c\n .B void\\c\n \\&.\n .TP\n+.B \\-Wunused\\-function\n+Warn whenever a static function is declared but not defined or a\n+non\\-inline static function is unused.\n+.TP\n+.B \\-Wunused\\-label\n+Warn whenever a label is declared but not used.\n+\n+To suppress this warning use the\n+.B unused\n+attribute.\n+.TP\n+.B \\-Wunused\\-parameter\n+Warn whenever a function parameter is unused aside from its declaration.\n+\n+To suppress this warning use the\n+.B unused\n+attribute.\n+.TP\n+.B \\-Wunused\\-variable\n+Warn whenever a local variable or non\\-constant static variable\n+is unused aside from its declaration\n+\n+To suppress this warning use the\n+.B unused\n+attribute.\n+.TP\n+.B \\-Wunused\\-value\n+Warn whenever a statement computes a result that is explicitly not used.\n+\n+To suppress this warning cast the expression to\n+.B void\\c\n+\\&.\n+.TP\n .B \\-Wunused\n-Warn whenever a local variable is unused aside from its declaration,\n-whenever a function is declared static but never defined, and whenever\n-a statement computes a result that is explicitly not used.\n+All all the above `\\|\\c\n+.B \\-Wunused\\c\n+\\&\\|' options combined.\n+\n+In order to get a warning about an unused function parameter, you must\n+either specify `\\|\\c\n+.B \\-W \\-Wunused\\c\n+\\&\\|' or separatly specify `\\|\\c\n+.B \\-Wunused\\-parameter\\c\n+\\&\\|'.\n .TP\n .B \\-Wswitch\n Warn whenever a \\c"}, {"sha": "4261cc6f22e426d79113e04e4c77222bc483880a", "filename": "gcc/invoke.texi", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -132,7 +132,8 @@ in the following sections.\n -Wparentheses -Wpointer-arith  -Wredundant-decls\n -Wreturn-type -Wshadow  -Wsign-compare -Wswitch\n -Wtrigraphs -Wundef  -Wuninitialized  -Wunknown-pragmas -Wunreachable-code \n--Wunused  -Wwrite-strings\n+-Wunused -Wunused-function -Wunused-label -Wunused-parameter\n+-Wunused-variable -Wunused-value -Wwrite-strings\n @end smallexample\n \n @item C-only Warning Options\n@@ -1538,19 +1539,41 @@ provoke warnings when this option is used.\n @item -Wtrigraphs\n Warn if any trigraphs are encountered (assuming they are enabled).\n \n-@item -Wunused\n-Warn whenever a variable is unused aside from its declaration,\n-whenever a function is declared static but never defined, whenever a\n-label is declared but not used, and whenever a statement computes a\n-result that is explicitly not used.\n+@item -Wunused-function\n+Warn whenever a static function is declared but not defined or a\n+non\\-inline static function is unused.\n \n-In order to get a warning about an unused function parameter, you must\n-specify both @samp{-W} and @samp{-Wunused}.\n+@item -Wunused-label\n+Warn whenever a label is declared but not used.\n+\n+To suppress this warning use the @samp{unused} attribute\n+(@pxref{Variable Attributes}).\n+\n+@item -Wunused-parameter\n+Warn whenever a function parameter is unused aside from its declaration.\n+\n+To suppress this warning use the @samp{unused} attribute\n+(@pxref{Variable Attributes}).\n \n-To suppress this warning for an expression, simply cast it to void.  For\n-unused variables, parameters and labels, use the @samp{unused} attribute\n+@item -Wunused-variable\n+Warn whenever a local variable or non-constant static variable is unused\n+aside from its declaration\n+\n+To suppress this warning use the @samp{unused} attribute\n (@pxref{Variable Attributes}).\n \n+@item -Wunused-value\n+Warn whenever a statement computes a result that is explicitly not used.\n+\n+To suppress this warning cast the expression to @samp{void}.\n+\n+@item -Wunused\n+All all the above @samp{-Wunused} options combined.\n+\n+In order to get a warning about an unused function parameter, you must\n+either specify @samp{-W -Wunused} or separatly specify\n+@samp{-Wunused-parameter}.\n+\n @item -Wuninitialized\n Warn if an automatic variable is used without first being initialized or\n if a variable may be clobbered by a @code{setjmp} call."}, {"sha": "f30afabbb4d0060041b2055ee2b34cf031991b2b", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -1,4 +1,10 @@\n-2000-05-09  Zack Weinberg  <zack@wolery.cumb.org>\n+Wed May 17 17:27:44 2000  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* lang.c (lang_decode_option): Update -Wunused flags by calling\n+ \tset_Wunused.\n+\t* decl.c (poplevel): Replace warn_unused with warn_unused_label.\n+\n+2000-04-19  Tom Tromey  &lt;tromey@cygnus.com&gt;\n \n \t* check_init.c (check_init): Constify local char *.\n \t* class.c (push_class): Constify local char *."}, {"sha": "a79bb9112529143cd3126d9c6ad070b831431ca0", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -1387,7 +1387,7 @@ poplevel (keep, reverse, functionbody)\n \t      define_label (input_filename, lineno,\n \t\t\t    DECL_NAME (label));\n \t    }\n-\t  else if (warn_unused && !TREE_USED (label))\n+\t  else if (warn_unused[UNUSED_LABEL] && !TREE_USED (label))\n \t    warning_with_decl (label, \"label `%s' defined but not used\");\n \t  IDENTIFIER_LABEL_VALUE (DECL_NAME (label)) = 0;\n "}, {"sha": "2a1d142ed3870d9e133d75832e7496af47303fe1", "filename": "gcc/java/lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -258,7 +258,7 @@ lang_decode_option (argc, argv)\n       flag_redundant = 1;\n       /* When -Wall given, enable -Wunused.  We do this because the C\n \t compiler does it, and people expect it.  */\n-      warn_unused = 1;\n+      set_Wunused (1);\n       return 1;\n     }\n "}, {"sha": "a3b72ea3259652da179893419a1b14f80d271b1e", "filename": "gcc/stmt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -1857,12 +1857,13 @@ expand_expr_stmt (exp)\n      except inside a ({...}) where they may be useful.  */\n   if (expr_stmts_for_value == 0 && exp != error_mark_node)\n     {\n-      if (! TREE_SIDE_EFFECTS (exp) && (extra_warnings || warn_unused)\n+      if (! TREE_SIDE_EFFECTS (exp)\n+\t  && (extra_warnings || warn_unused_value)\n \t  && !(TREE_CODE (exp) == CONVERT_EXPR\n \t       && TREE_TYPE (exp) == void_type_node))\n \twarning_with_file_and_line (emit_filename, emit_lineno,\n \t\t\t\t    \"statement with no effect\");\n-      else if (warn_unused)\n+      else if (warn_unused_value)\n \twarn_if_unused_value (exp);\n     }\n \n@@ -3575,7 +3576,7 @@ warn_about_unused_variables (vars)\n {\n   tree decl;\n \n-  if (warn_unused)\n+  if (warn_unused_variable)\n     for (decl = vars; decl; decl = TREE_CHAIN (decl))\n       if (TREE_CODE (decl) == VAR_DECL \n \t  && ! TREE_USED (decl)"}, {"sha": "470a6ab6314c68275b66cfb891e0997b9ec081c5", "filename": "gcc/toplev.c", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=078721e1a2e6f361f4c7ed6b9017b6fb0d7211a1", "patch": "@@ -1289,9 +1289,30 @@ int extra_warnings = 0;\n \n int warnings_are_errors = 0;\n \n-/* Nonzero to warn about unused local variables.  */\n+/* Nonzero to warn about unused variables, functions et.al.  */\n \n-int warn_unused;\n+int warn_unused_function;\n+int warn_unused_label;\n+int warn_unused_parameter;\n+int warn_unused_variable;\n+int warn_unused_value;\n+\n+void\n+set_Wunused (setting)\n+     int setting;\n+{\n+  warn_unused_function = setting;\n+  warn_unused_label = setting;\n+  /* Unused function parameter warnings are reported when either ``-W\n+     -Wunused'' or ``-Wunused-parameter'' is specified.  Differentiate\n+     -Wunused by setting WARN_UNUSED_PARAMETER to -1 */\n+  if (!setting)\n+    warn_unused_parameter = 0;\n+  else if (!warn_unused_parameter)\n+    warn_unused_parameter = -1;\n+  warn_unused_variable = setting;\n+  warn_unused_value = setting;\n+}\n \n /* Nonzero to warn about code which is never reached.  */\n \n@@ -1354,7 +1375,11 @@ int warn_padded;\n \n lang_independent_options W_options[] =\n {\n-  {\"unused\", &warn_unused, 1, \"Warn when a variable is unused\" },\n+  {\"unused-function\", &warn_unused_function, 1, \"Warn when a function is unused\" },\n+  {\"unused-label\", &warn_unused_label, 1, \"Warn when a label is unused\" },\n+  {\"unused-parameter\", &warn_unused_parameter, 1, \"Warn when a function parameter is unused\" },\n+  {\"unused-variable\", &warn_unused_variable, 1, \"Warn when a variable is unused\" },\n+  {\"unused-value\", &warn_unused_value, 1, \"Warn when an expression value is unused\" },\n   {\"error\", &warnings_are_errors, 1, \"\"},\n   {\"shadow\", &warn_shadow, 1, \"Warn when one local variable shadows another\" },\n   {\"switch\", &warn_switch, 1,\n@@ -1905,7 +1930,7 @@ check_global_declarations (vec, len)\n \t because many programs have static variables\n \t that exist only to get some text into the object file.  */\n       if (TREE_CODE (decl) == FUNCTION_DECL\n-\t  && (warn_unused\n+\t  && (warn_unused_function\n \t      || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n \t  && DECL_INITIAL (decl) == 0\n \t  && DECL_EXTERNAL (decl)\n@@ -1926,9 +1951,10 @@ check_global_declarations (vec, len)\n       /* Warn about static fns or vars defined but not used,\n \t but not about inline functions or static consts\n \t since defining those in header files is normal practice.  */\n-      if (warn_unused\n-\t  && ((TREE_CODE (decl) == FUNCTION_DECL && ! DECL_INLINE (decl))\n-\t      || (TREE_CODE (decl) == VAR_DECL && ! TREE_READONLY (decl)))\n+      if (((warn_unused_function\n+\t    && TREE_CODE (decl) == FUNCTION_DECL && ! DECL_INLINE (decl))\n+\t   || (warn_unused_variable\n+\t       && TREE_CODE (decl) == VAR_DECL && ! TREE_READONLY (decl)))\n \t  && ! DECL_IN_SYSTEM_HEADER (decl)\n \t  && ! DECL_EXTERNAL (decl)\n \t  && ! TREE_PUBLIC (decl)\n@@ -3685,6 +3711,7 @@ display_help ()\n \t\tW_options[i].string, description);\n     }\n   \n+  printf (\"  -Wunused                Enable unused warnings\\n\");\n   printf (\"  -Wid-clash-<num>        Warn if 2 identifiers have the same first <num> chars\\n\");\n   printf (\"  -Wlarger-than-<number>  Warn if an object is larger than <number> bytes\\n\");\n   printf (\"  -p                      Enable function profiling\\n\");\n@@ -3995,6 +4022,14 @@ decode_W_option (arg)\n       if (larger_than_size != -1)\n \twarn_larger_than = 1;\n     }\n+  else if (!strcmp (arg, \"unused\"))\n+    {\n+      set_Wunused (1);\n+    }\n+  else if (!strcmp (arg, \"no-unused\"))\n+    {\n+      set_Wunused (0);\n+    }\n   else\n     return 0;\n "}]}