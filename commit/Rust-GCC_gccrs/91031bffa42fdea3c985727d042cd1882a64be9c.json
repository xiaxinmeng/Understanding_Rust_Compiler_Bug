{"sha": "91031bffa42fdea3c985727d042cd1882a64be9c", "node_id": "C_kwDOANBUbNoAKDkxMDMxYmZmYTQyZmRlYTNjOTg1NzI3ZDA0MmNkMTg4MmE2NGJlOWM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-03T12:47:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-03T12:47:53Z"}, "message": "symtab: Fold &a == &b to 0 if folding_initializer [PR94716]\n\nOn Thu, Dec 09, 2021 at 06:09:12PM -0500, Jason Merrill wrote:\n> For the more general comparison of decls like your a != b example above I\n> think clang is in the right; in manifestly constant-evaluated context\n> (folding_initializer) we should return that they are unequal and prevent a\n> later alias declaration, like we do for comparison to 0 in\n> maybe_nonzero_address.  It's possible that this gives a wrong answer based\n> on something in another translation unit, but that's unlikely, and taking\n> that chance seems better than rejecting code that needs a constant answer.\n\nI agree.  This is an incremental patch to do that.\n\n2022-01-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/94716\ngcc/\n\t* symtab.c: Include fold-const.h.\n\t(symtab_node::equal_address_to): If folding_initializer is true,\n\thandle it like memory_accessed.  Simplify.\ngcc/testsuite/\n\t* gcc.dg/init-compare-1.c: New test.\n\t* g++.dg/cpp0x/constexpr-compare1.C: New test.\n\t* g++.dg/cpp1y/constexpr-94716.C: New test.\n\t* g++.dg/cpp1z/constexpr-compare1.C: New test.", "tree": {"sha": "77c152759b6dbb0787713ed52737e8461731a4f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77c152759b6dbb0787713ed52737e8461731a4f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91031bffa42fdea3c985727d042cd1882a64be9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91031bffa42fdea3c985727d042cd1882a64be9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91031bffa42fdea3c985727d042cd1882a64be9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91031bffa42fdea3c985727d042cd1882a64be9c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "814c221c9eb350dc636556738f37aa73ebba8fdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/814c221c9eb350dc636556738f37aa73ebba8fdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/814c221c9eb350dc636556738f37aa73ebba8fdc"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "87cd560845c48953ceaec68511fd36eca5093fbe", "filename": "gcc/symtab.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91031bffa42fdea3c985727d042cd1882a64be9c/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91031bffa42fdea3c985727d042cd1882a64be9c/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=91031bffa42fdea3c985727d042cd1882a64be9c", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"attribs.h\"\n #include \"builtins.h\"\n+#include \"fold-const.h\"\n \n static const char *ipa_ref_use_name[] = {\"read\",\"write\",\"addr\",\"alias\"};\n \n@@ -2276,10 +2277,12 @@ symtab_node::equal_address_to (symtab_node *s2, bool memory_accessed)\n       return 0;\n     }\n \n+  if (rs1 == rs2)\n+    return -1;\n+\n   /* If the FE tells us at least one of the decls will never be aliased nor\n      overlapping with other vars in some other way, return 0.  */\n   if (VAR_P (decl)\n-      && rs1 != rs2\n       && (lookup_attribute (\"non overlapping\", DECL_ATTRIBUTES (decl))\n \t  || lookup_attribute (\"non overlapping\", DECL_ATTRIBUTES (s2->decl))))\n     return 0;\n@@ -2288,9 +2291,14 @@ symtab_node::equal_address_to (symtab_node *s2, bool memory_accessed)\n      are different unless they are declared as alias of one to another while\n      the code folding comparisons doesn't.\n      We probably should be consistent and use this fact here, too, but for\n-     the moment return false only when we are called from the alias oracle.  */\n+     the moment return false only when we are called from the alias oracle.\n+     Return 0 in C constant initializers and C++ manifestly constant\n+     expressions, the likelyhood that different vars will be aliases is\n+     small and returning -1 lets us reject too many initializers.  */\n+  if (memory_accessed || folding_initializer)\n+    return 0;\n \n-  return memory_accessed && rs1 != rs2 ? 0 : -1;\n+  return -1;\n }\n \n /* Worker for call_for_symbol_and_aliases.  */"}, {"sha": "ad65019079e40911a1bd92ab4338c2789c354f2b", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-compare1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91031bffa42fdea3c985727d042cd1882a64be9c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-compare1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91031bffa42fdea3c985727d042cd1882a64be9c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-compare1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-compare1.C?ref=91031bffa42fdea3c985727d042cd1882a64be9c", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile { target c++11 } }\n+\n+extern int a, b;\n+static_assert (&a == &a, \"\");\n+static_assert (&a != &b, \"\");\n+constexpr bool c = &a == &a;\n+constexpr bool d = &a != &b;"}, {"sha": "90173f366d60a46ee0d7970abc4eb8f88520feea", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-94716.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91031bffa42fdea3c985727d042cd1882a64be9c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-94716.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91031bffa42fdea3c985727d042cd1882a64be9c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-94716.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-94716.C?ref=91031bffa42fdea3c985727d042cd1882a64be9c", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/94716\n+// { dg-do compile { target c++14 } }\n+\n+template <int> char v = 0;\n+static_assert (&v<2> == &v<2>, \"\");\n+static_assert (&v<0> != &v<1>, \"\");\n+constexpr bool a = &v<2> == &v<2>;\n+constexpr bool b = &v<0> != &v<1>;"}, {"sha": "a53c03c296807332722c475480fa71c52c326843", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-compare1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91031bffa42fdea3c985727d042cd1882a64be9c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-compare1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91031bffa42fdea3c985727d042cd1882a64be9c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-compare1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-compare1.C?ref=91031bffa42fdea3c985727d042cd1882a64be9c", "patch": "@@ -0,0 +1,8 @@\n+// { dg-do compile { target c++17 } }\n+\n+inline int a = 0;\n+inline int b = 0;\n+static_assert (&a == &a);\n+static_assert (&a != &b);\n+constexpr bool c = &a == &a;\n+constexpr bool d = &a != &b;"}, {"sha": "9208b666cff857647cfee57a64ec38338e553200", "filename": "gcc/testsuite/gcc.dg/init-compare-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91031bffa42fdea3c985727d042cd1882a64be9c/gcc%2Ftestsuite%2Fgcc.dg%2Finit-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91031bffa42fdea3c985727d042cd1882a64be9c/gcc%2Ftestsuite%2Fgcc.dg%2Finit-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finit-compare-1.c?ref=91031bffa42fdea3c985727d042cd1882a64be9c", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+\n+extern int a, b;\n+int c = &a == &a;\n+int d = &a != &b;"}]}