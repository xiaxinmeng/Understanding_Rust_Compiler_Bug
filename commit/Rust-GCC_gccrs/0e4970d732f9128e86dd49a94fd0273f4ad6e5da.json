{"sha": "0e4970d732f9128e86dd49a94fd0273f4ad6e5da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU0OTcwZDczMmY5MTI4ZTg2ZGQ0OWE5NGZkMDI3M2Y0YWQ2ZTVkYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-02-25T01:28:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-02-25T01:28:23Z"}, "message": "i386.c (ix86_set_move_mem_attrs): New function.\n\n\t* config/i386/i386.c (ix86_set_move_mem_attrs): New function.\n\t(ix86_set_move_mem_attrs_1): Likewise.\n\t* config/i386/i386-protos.h (ix86_set_move_mem_attrs): New declaration.\n\t* config/i386/i386.md (movstrsi): Call it.\n\nFrom-SVN: r40046", "tree": {"sha": "2b0b275b06929f00674510261f56680efde60513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b0b275b06929f00674510261f56680efde60513"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e4970d732f9128e86dd49a94fd0273f4ad6e5da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e4970d732f9128e86dd49a94fd0273f4ad6e5da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e4970d732f9128e86dd49a94fd0273f4ad6e5da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e4970d732f9128e86dd49a94fd0273f4ad6e5da/comments", "author": null, "committer": null, "parents": [{"sha": "a59b81bed9c8c854bed53887651605621c37bfdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59b81bed9c8c854bed53887651605621c37bfdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a59b81bed9c8c854bed53887651605621c37bfdc"}], "stats": {"total": 73, "additions": 69, "deletions": 4}, "files": [{"sha": "cd686a8414d6388a69cedf10af4cc1a8af22523b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4970d732f9128e86dd49a94fd0273f4ad6e5da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4970d732f9128e86dd49a94fd0273f4ad6e5da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e4970d732f9128e86dd49a94fd0273f4ad6e5da", "patch": "@@ -1,3 +1,10 @@\n+Sat Feb 24 20:25:29 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* config/i386/i386.c (ix86_set_move_mem_attrs): New function.\n+\t(ix86_set_move_mem_attrs_1): Likewise.\n+\t* config/i386/i386-protos.h (ix86_set_move_mem_attrs): New declaration.\n+\t* config/i386/i386.md (movstrsi): Call it.\n+\n 2001-02-24  Zack Weinberg  <zackw@stanford.edu>\n \n \t* config.gcc: Expunge references to alpha/t-pe, pa/t-openbsd,"}, {"sha": "1b24df821243bb9401293a23d822a18ab042b98c", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4970d732f9128e86dd49a94fd0273f4ad6e5da/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4970d732f9128e86dd49a94fd0273f4ad6e5da/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=0e4970d732f9128e86dd49a94fd0273f4ad6e5da", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler for IA-32.\n-   Copyright (C) 1988, 1992, 1994, 1995, 1996, 1996, 1997, 1998, 1999, 2000\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1992, 1994, 1995, 1996, 1996, 1997, 1998, 1999,\n+   2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -152,6 +152,8 @@ extern rtx ix86_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int))\n \n #endif\n \n+extern void ix86_set_move_mem_attrs PARAMS ((rtx, rtx, rtx, rtx, rtx));\n+\n #ifdef TREE_CODE\n extern int ix86_valid_decl_attribute_p PARAMS ((tree, tree, tree, tree));\n extern int ix86_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));"}, {"sha": "32ae6d4984acc061dd2dd7a803ac6d362b3b4bc3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4970d732f9128e86dd49a94fd0273f4ad6e5da/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4970d732f9128e86dd49a94fd0273f4ad6e5da/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0e4970d732f9128e86dd49a94fd0273f4ad6e5da", "patch": "@@ -507,6 +507,7 @@ static int ix86_nsaved_regs PARAMS((void));\n static void ix86_emit_save_regs PARAMS((void));\n static void ix86_emit_restore_regs_using_mov PARAMS ((rtx, int));\n static void ix86_emit_epilogue_esp_adjustment PARAMS((int));\n+static void ix86_set_move_mem_attrs_1 PARAMS ((rtx, rtx, rtx, rtx, rtx));\n static void ix86_sched_reorder_pentium PARAMS((rtx *, rtx *));\n static void ix86_sched_reorder_ppro PARAMS((rtx *, rtx *));\n static HOST_WIDE_INT ix86_GOT_alias_set PARAMS ((void));\n@@ -7363,6 +7364,52 @@ ix86_variable_issue (dump, sched_verbose, insn, can_issue_more)\n     }\n }\n \f\n+/* Walk through INSNS and look for MEM references whose address is DSTREG or\n+   SRCREG and set the memory attribute to those of DSTREF and SRCREF, as\n+   appropriate.  */\n+\n+void\n+ix86_set_move_mem_attrs (insns, dstref, srcref, dstreg, srcreg)\n+     rtx insns;\n+     rtx dstref, srcref, dstreg, srcreg;\n+{\n+  rtx insn;\n+\n+  for (insn = insns; insn != 0 ; insn = NEXT_INSN (insn))\n+    if (INSN_P (insn))\n+      ix86_set_move_mem_attrs_1 (PATTERN (insn), dstref, srcref,\n+\t\t\t\t dstreg, srcreg);\n+}\n+\n+/* Subroutine of above to actually do the updating by recursively walking\n+   the rtx.  */\n+\n+static void\n+ix86_set_move_mem_attrs_1 (x, dstref, srcref, dstreg, srcreg)\n+     rtx x;\n+     rtx dstref, srcref, dstreg, srcreg;\n+{\n+  enum rtx_code code = GET_CODE (x);\n+  const char *format_ptr = GET_RTX_FORMAT (code);\n+  int i, j;\n+\n+  if (code == MEM && XEXP (x, 0) == dstreg)\n+    MEM_COPY_ATTRIBUTES (x, dstref);\n+  else if (code == MEM && XEXP (x, 0) == srcreg)\n+    MEM_COPY_ATTRIBUTES (x, srcref);\n+\n+  for (i = 0; i < GET_RTX_LENGTH (code); i++, format_ptr++)\n+    {\n+      if (*format_ptr == 'e')\n+\tix86_set_move_mem_attrs_1 (XEXP (x, i), dstref, srcref,\n+\t\t\t\t   dstreg, srcreg);\n+      else if (*format_ptr == 'E')\n+\tfor (j = XVECLEN (x, i) - 1; j >= 0; j--)\n+\t  ix86_set_move_mem_attrs_1 (XVECEXP (x, i, j), dstref, srcreg,\n+\t\t\t\t     dstreg, srcreg);\n+    }\n+}\n+\f\n /* Compute the alignment given to a constant that is being placed in memory.\n    EXP is the constant and ALIGN is the alignment that the object would\n    ordinarily have."}, {"sha": "2fad7e137b45e90c63bfd6f9013e52f12090f9ca", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e4970d732f9128e86dd49a94fd0273f4ad6e5da/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e4970d732f9128e86dd49a94fd0273f4ad6e5da/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0e4970d732f9128e86dd49a94fd0273f4ad6e5da", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for IA-32.\n-;; Copyright (C) 1988, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n+;; Copyright (C) 1988, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n ;; Free Software Foundation, Inc.\n ;; Mostly by William Schelter.\n ;;\n@@ -11122,6 +11122,9 @@\n   rtx srcreg, destreg, countreg;\n   int align = 0;\n   int count = -1;\n+  rtx insns;\n+\n+  start_sequence ();\n \n   if (GET_CODE (operands[3]) == CONST_INT)\n     align = INTVAL (operands[3]);\n@@ -11136,7 +11139,7 @@\n   destreg = copy_to_mode_reg (Pmode, XEXP (operands[0], 0));\n   srcreg = copy_to_mode_reg (Pmode, XEXP (operands[1], 0));\n \n-  emit_insn (gen_cld());\n+  emit_insn (gen_cld ());\n \n   /* When optimizing for size emit simple rep ; movsb instruction for\n      counts not divisible by 4.  */\n@@ -11288,6 +11291,12 @@\n \t  LABEL_NUSES (label) = 1;\n \t}\n     }\n+\n+  insns = get_insns ();\n+  end_sequence ();\n+\n+  ix86_set_move_mem_attrs (insns, operands[0], operands[1], destreg, srcreg);\n+  emit_insns (insns);\n   DONE;\n }\")\n "}]}