{"sha": "3e586e100a61b0c1c9592740d5250d7604e7f685", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U1ODZlMTAwYTYxYjBjMWM5NTkyNzQwZDUyNTBkNzYwNGU3ZjY4NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-20T14:04:38Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-02-20T14:04:38Z"}, "message": "[multiple changes]\n\n2014-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* a-cborma.adb, a-cbhama.adb, a-cbdlli.adb, a-cbmutr.adb: Use pragma\n\tUnmodified rather than Warnings (Off). Make comments\n\tuniform in the four affected units.\n\n2014-02-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause, case\n\tObject_Size): For non-scalar types allow any value that is a\n\tmultiple of 8.\n\t* gnat_rm.texi: Document Object_Size for composites more clearly.\n\n2014-02-20  Yannick Moy  <moy@adacore.com>\n\n\t* sem_util.ads, sem_util.adb (Default_Initialization): Remove function.\n\n2014-02-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* stand.ads: Raise_Type: new predefined entity, used as the type\n\tof a Raise_Expression prior to resolution.\n\t* cstand.adb: Build entity for Raise_Type.\n\t* sem_ch11.adb (Analyze_Raise_Expression): use Raise_Type as the\n\tinitial type of the node.\n\t* sem_type.adb (Covers): Raise_Type is compatible with all\n\tother types.\n\t* sem_res.adb (Resolve): Remove special handling of Any_Type on\n\tRaise_Expression nodes.\n\t(Resolve_Raise_Expression): Signal ambiguity if the type of the\n\tcontext is still Raise_Type.\n\nFrom-SVN: r207950", "tree": {"sha": "de1a52fd70761d3b0bd18ba9a912bf4eaf01b22b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de1a52fd70761d3b0bd18ba9a912bf4eaf01b22b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e586e100a61b0c1c9592740d5250d7604e7f685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e586e100a61b0c1c9592740d5250d7604e7f685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e586e100a61b0c1c9592740d5250d7604e7f685", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e586e100a61b0c1c9592740d5250d7604e7f685/comments", "author": null, "committer": null, "parents": [{"sha": "7f568bfad328b73b207b06da80ccb99a4780c2ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f568bfad328b73b207b06da80ccb99a4780c2ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f568bfad328b73b207b06da80ccb99a4780c2ed"}], "stats": {"total": 336, "additions": 113, "deletions": 223}, "files": [{"sha": "20067e58e821a59fb6c451b8654d223020d196ca", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3e586e100a61b0c1c9592740d5250d7604e7f685", "patch": "@@ -1,3 +1,34 @@\n+2014-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-cborma.adb, a-cbhama.adb, a-cbdlli.adb, a-cbmutr.adb: Use pragma\n+\tUnmodified rather than Warnings (Off). Make comments\n+\tuniform in the four affected units.\n+\n+2014-02-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause, case\n+\tObject_Size): For non-scalar types allow any value that is a\n+\tmultiple of 8.\n+\t* gnat_rm.texi: Document Object_Size for composites more clearly.\n+\n+2014-02-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Default_Initialization): Remove function.\n+\n+2014-02-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* stand.ads: Raise_Type: new predefined entity, used as the type\n+\tof a Raise_Expression prior to resolution.\n+\t* cstand.adb: Build entity for Raise_Type.\n+\t* sem_ch11.adb (Analyze_Raise_Expression): use Raise_Type as the\n+\tinitial type of the node.\n+\t* sem_type.adb (Covers): Raise_Type is compatible with all\n+\tother types.\n+\t* sem_res.adb (Resolve): Remove special handling of Any_Type on\n+\tRaise_Expression nodes.\n+\t(Resolve_Raise_Expression): Signal ambiguity if the type of the\n+\tcontext is still Raise_Type.\n+\n 2014-02-20  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch12.adb (Validate_Access_Type_Instance): Add message if"}, {"sha": "993522a88beb75cd3b7b6048abeab9747e902424", "filename": "gcc/ada/a-cbdlli.adb", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbdlli.adb?ref=3e586e100a61b0c1c9592740d5250d7604e7f685", "patch": "@@ -1121,15 +1121,16 @@ package body Ada.Containers.Bounded_Doubly_Linked_Lists is\n       Position  : out Cursor;\n       Count     : Count_Type := 1)\n    is\n-      New_Item : Element_Type;  --  Default initialized.\n-      pragma Warnings (Off, New_Item);\n+      New_Item : Element_Type;\n+      pragma Unmodified (New_Item);\n+      --  OK to reference, see below\n \n    begin\n-      --  There is no explicit element provided, but in an instance the\n-      --  element type may be a scalar with a Default_Value aspect, or a\n-      --  composite type with such a scalar component, so  we insert the\n-      --  specified number of possibly initialized elements at the given\n-      --  position.\n+      --  There is no explicit element provided, but in an instance the element\n+      --  type may be a scalar with a Default_Value aspect, or a composite\n+      --  type with such a scalar component, or components with default\n+      --  initialization, so insert the specified number of possibly\n+      --  initialized elements at the given position.\n \n       Insert (Container, Before, New_Item, Position, Count);\n    end Insert;"}, {"sha": "e7e739366ba863988f12a78b52f2eb1944888eff", "filename": "gcc/ada/a-cbhama.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fa-cbhama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fa-cbhama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhama.adb?ref=3e586e100a61b0c1c9592740d5250d7604e7f685", "patch": "@@ -557,16 +557,17 @@ package body Ada.Containers.Bounded_Hashed_Maps is\n \n       procedure Assign_Key (Node : in out Node_Type) is\n          New_Item : Element_Type;\n-         pragma Warnings (Off, New_Item);\n+         pragma Unmodified (New_Item);\n          --  Default-initialized element (ok to reference, see below)\n \n       begin\n          Node.Key := Key;\n \n          --  There is no explicit element provided, but in an instance the\n-         --  element type may be a scalar with a Default_Value aspect, or\n-         --  a composite type with such a scalar component, so we insert\n-         --  a possibly initialized element under the given key.\n+         --  element type may be a scalar with a Default_Value aspect, or a\n+         --  composite type with such a scalar component, or components with\n+         --  default initialization, so insert a possibly initialized element\n+         --  under the given key.\n \n          Node.Element := New_Item;\n       end Assign_Key;"}, {"sha": "e36bca72608f67d889a809330be5b51fce086cf3", "filename": "gcc/ada/a-cbmutr.adb", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fa-cbmutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fa-cbmutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbmutr.adb?ref=3e586e100a61b0c1c9592740d5250d7604e7f685", "patch": "@@ -1585,14 +1585,9 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n       Nodes : Tree_Node_Array renames Container.Nodes;\n       Last  : Count_Type;\n \n-      Elem : Element_Type;\n-      pragma Unmodified (Elem);\n-      --  There is no explicit element provided, but in an instance the\n-      --  element type may be a scalar with a Default_Value aspect, or a\n-      --  composite type with such a scalar component, so we insert the\n-      --  specified number of possibly initialized elements at the given\n-      --  position. So we are declaring Elem just for this possible default\n-      --  initialization, which is why we need the pragma Unmodified.\n+      New_Item : Element_Type;\n+      pragma Unmodified (New_Item);\n+      --  OK to reference, see below\n \n    begin\n       if Parent = No_Element then\n@@ -1632,7 +1627,13 @@ package body Ada.Containers.Bounded_Multiway_Trees is\n          Initialize_Root (Container);\n       end if;\n \n-      Allocate_Node (Container, Elem, Position.Node);\n+      --  There is no explicit element provided, but in an instance the element\n+      --  type may be a scalar with a Default_Value aspect, or a composite\n+      --  type with such a scalar component, or components with default\n+      --  initialization, so insert the specified number of possibly\n+      --  initialized elements at the given position.\n+\n+      Allocate_Node (Container, New_Item, Position.Node);\n       Nodes (Position.Node).Parent := Parent.Node;\n \n       Last := Position.Node;"}, {"sha": "4b05726a9de7e0e23835ce818342c14355559765", "filename": "gcc/ada/a-cborma.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fa-cborma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fa-cborma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cborma.adb?ref=3e586e100a61b0c1c9592740d5250d7604e7f685", "patch": "@@ -827,16 +827,16 @@ package body Ada.Containers.Bounded_Ordered_Maps is\n \n       procedure Assign (Node : in out Node_Type) is\n          New_Item : Element_Type;\n-         pragma Warnings (Off, New_Item);\n+         pragma Unmodified (New_Item);\n          --  Default-initialized element (ok to reference, see below)\n \n       begin\n          Node.Key := Key;\n \n-         --  There is no explicit element provided, but in an instance the\n-         --  element type may be a scalar with a Default_Value aspect, or\n-         --  a composite type with such a scalar component, so we insert\n-         --  a possibly initialized element under the given key.\n+      --  There is no explicit element provided, but in an instance the element\n+      --  type may be a scalar with a Default_Value aspect, or a composite type\n+      --  with such a scalar component or with defaulted components, so insert\n+      --  possibly initialized elements at the given position.\n \n          Node.Element := New_Item;\n       end Assign;"}, {"sha": "322473e0f96ae9b25354e6980aefdf98d9003d48", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=3e586e100a61b0c1c9592740d5250d7604e7f685", "patch": "@@ -1321,6 +1321,13 @@ package body CStand is\n          Set_First_Index (Any_String, Index);\n       end;\n \n+      Raise_Type := New_Standard_Entity;\n+      Decl := New_Node (N_Full_Type_Declaration, Stloc);\n+      Set_Defining_Identifier (Decl, Raise_Type);\n+      Set_Scope (Raise_Type, Standard_Standard);\n+      Build_Signed_Integer_Type (Raise_Type, Standard_Integer_Size);\n+      Make_Name (Raise_Type, \"any type\");\n+\n       Standard_Integer_8 := New_Standard_Entity;\n       Decl := New_Node (N_Full_Type_Declaration, Stloc);\n       Set_Defining_Identifier (Decl, Standard_Integer_8);"}, {"sha": "cdd2f4e215e1cf50454b8ac7e6523ced6f3a5ec3", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=3e586e100a61b0c1c9592740d5250d7604e7f685", "patch": "@@ -8740,6 +8740,10 @@ alignment will be 4, because of the\n integer field, and so the default size of record objects for this type\n will be 64 (8 bytes).\n \n+If the alignment of the above record is specified to be 1, then the\n+object size will be 40 (5 bytes). This is true by default, and also\n+an object size of 40 can be explicitly specified in this case.\n+\n A consequence of this capability is that different object sizes can be\n given to subtypes that would otherwise be considered in Ada to be\n statically matching.  But it makes no sense to consider such subtypes"}, {"sha": "f96a91b38b51d87a01636e409940fc272e954562", "filename": "gcc/ada/sem_ch11.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fsem_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fsem_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch11.adb?ref=3e586e100a61b0c1c9592740d5250d7604e7f685", "patch": "@@ -475,9 +475,11 @@ package body Sem_Ch11 is\n \n       Kill_Current_Values (Last_Assignment_Only => True);\n \n-      --  Set type as Any_Type since we have no information at all on the type\n+      --  Raise_Type is compatible with all other types so that the raise\n+      --  expression is legal in any expression context. It will be eventually\n+      --  replaced by the concrete type imposed by the context.\n \n-      Set_Etype (N, Any_Type);\n+      Set_Etype (N, Raise_Type);\n    end Analyze_Raise_Expression;\n \n    -----------------------------"}, {"sha": "c8f9579d3d028af6f187aeaf50906b9b2fabaac5", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=3e586e100a61b0c1c9592740d5250d7604e7f685", "patch": "@@ -4413,17 +4413,17 @@ package body Sem_Ch13 is\n             else\n                Check_Size (Expr, U_Ent, Size, Biased);\n \n-               if Size /= 8\n-                    and then\n-                  Size /= 16\n-                    and then\n-                  Size /= 32\n-                    and then\n-                  UI_Mod (Size, 64) /= 0\n-               then\n-                  Error_Msg_N\n-                    (\"Object_Size must be 8, 16, 32, or multiple of 64\",\n-                     Expr);\n+               if Is_Scalar_Type (U_Ent) then\n+                  if Size /= 8 and then Size /= 16 and then Size /= 32\n+                    and then UI_Mod (Size, 64) /= 0\n+                  then\n+                     Error_Msg_N\n+                       (\"Object_Size must be 8, 16, 32, or multiple of 64\",\n+                        Expr);\n+                  end if;\n+\n+               elsif Size mod 8 /= 0 then\n+                  Error_Msg_N (\"Object_Size must be a multiple of 8\", Expr);\n                end if;\n \n                Set_Esize (U_Ent, Size);"}, {"sha": "99801627711b49b6d1a34634879e38af89349e91", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=3e586e100a61b0c1c9592740d5250d7604e7f685", "patch": "@@ -2060,17 +2060,8 @@ package body Sem_Res is\n          Analyze_Dimension (N);\n          return;\n \n-      --  A Raise_Expression takes its type from context. The Etype was set\n-      --  to Any_Type, reflecting the fact that the expression itself does\n-      --  not specify any possible interpretation. So we set the type to the\n-      --  resolution type here and now. We need to do this before Resolve sees\n-      --  the Any_Type value.\n-\n-      elsif Nkind (N) = N_Raise_Expression then\n-         Set_Etype (N, Typ);\n-\n-      --  Any other case of Any_Type as the Etype value means that we had\n-      --  a previous error.\n+      --  Any case of Any_Type as the Etype value means that we had a\n+      --  previous error.\n \n       elsif Etype (N) = Any_Type then\n          Debug_A_Exit (\"resolving  \", N, \"  (done, Etype = Any_Type)\");\n@@ -7405,6 +7396,16 @@ package body Sem_Res is\n       Check_Fully_Declared_Prefix (Typ, P);\n       P_Typ := Empty;\n \n+      --  A useful optimization:  check whether the dereference denotes an\n+      --  element of a container, and if so rewrite it as a call to the\n+      --  corresponding Element function.\n+      --  Disabled for now, on advice of ARG. A more restricted form of the\n+      --  predicate might be acceptable ???\n+\n+      --  if Is_Container_Element (N) then\n+      --     return;\n+      --  end if;\n+\n       if Is_Overloaded (P) then\n \n          --  Use the context type to select the prefix that has the correct\n@@ -8816,7 +8817,12 @@ package body Sem_Res is\n \n    procedure Resolve_Raise_Expression (N : Node_Id; Typ : Entity_Id) is\n    begin\n-      Set_Etype (N, Typ);\n+      if Typ = Raise_Type then\n+         Error_Msg_N (\"cannot find unique type for raise expression\", N);\n+         Set_Etype (N, Any_Type);\n+      else\n+         Set_Etype (N, Typ);\n+      end if;\n    end Resolve_Raise_Expression;\n \n    -------------------"}, {"sha": "446c9f4203e475c8e6755968ca0f264b3d2d148b", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=3e586e100a61b0c1c9592740d5250d7604e7f685", "patch": "@@ -1128,6 +1128,11 @@ package body Sem_Type is\n       elsif BT2 = Any_Type then\n          return True;\n \n+      --  A Raise_Expressions is legal in any expression context.\n+\n+      elsif BT2 = Raise_Type then\n+         return True;\n+\n       --  A packed array type covers its corresponding non-packed type. This is\n       --  not legitimate Ada, but allows the omission of a number of otherwise\n       --  useless unchecked conversions, and since this can only arise in"}, {"sha": "6b94f5a514e65482dc992d25cac549cfeb44ceab", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 0, "deletions": 132, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=3e586e100a61b0c1c9592740d5250d7604e7f685", "patch": "@@ -4036,138 +4036,6 @@ package body Sem_Util is\n       end if;\n    end Deepest_Type_Access_Level;\n \n-   ----------------------------\n-   -- Default_Initialization --\n-   ----------------------------\n-\n-   function Default_Initialization\n-     (Typ : Entity_Id) return Default_Initialization_Kind\n-   is\n-      Comp : Entity_Id;\n-      Init : Default_Initialization_Kind;\n-\n-      FDI : Boolean := False;\n-      NDI : Boolean := False;\n-      --  Two flags used to designate whether a record type has at least one\n-      --  fully default initialized component and/or one not fully default\n-      --  initialized component.\n-\n-   begin\n-      --  Access types are always fully default initialized\n-\n-      if Is_Access_Type (Typ) then\n-         return Full_Default_Initialization;\n-\n-      --  An array type subject to aspect/pragma Default_Component_Value is\n-      --  fully default initialized. Otherwise its initialization status is\n-      --  that of its component type.\n-\n-      elsif Is_Array_Type (Typ) then\n-         if Present (Default_Aspect_Component_Value (Base_Type (Typ))) then\n-            return Full_Default_Initialization;\n-         else\n-            return Default_Initialization (Component_Type (Typ));\n-         end if;\n-\n-      --  The initialization status of a private type depends on its full view\n-\n-      elsif Is_Private_Type (Typ) and then Present (Full_View (Typ)) then\n-         return Default_Initialization (Full_View (Typ));\n-\n-      --  Record and protected types offer several initialization options\n-      --  depending on their components (if any).\n-\n-      elsif Is_Record_Type (Typ) or else Is_Protected_Type (Typ) then\n-         Comp := First_Component (Typ);\n-\n-         --  Inspect all components\n-\n-         if Present (Comp) then\n-            while Present (Comp) loop\n-\n-               --  Do not process internally generated components except for\n-               --  _parent which represents the ancestor portion of a derived\n-               --  type.\n-\n-               if Comes_From_Source (Comp)\n-                 or else Chars (Comp) = Name_uParent\n-               then\n-                  Init := Default_Initialization (Base_Type (Etype (Comp)));\n-\n-                  --  A component with mixed initialization renders the whole\n-                  --  record/protected type mixed.\n-\n-                  if Init = Mixed_Initialization then\n-                     return Mixed_Initialization;\n-\n-                  --  The component is fully default initialized when its type\n-                  --  is fully default initialized or when the component has an\n-                  --  initialization expression. Note that this has precedence\n-                  --  given that the component type may lack initialization.\n-\n-                  elsif Init = Full_Default_Initialization\n-                    or else Present (Expression (Parent (Comp)))\n-                  then\n-                     FDI := True;\n-\n-                  --  Components with no possible initialization are ignored\n-\n-                  elsif Init = No_Possible_Initialization then\n-                     null;\n-\n-                  --  The component has no full default initialization\n-\n-                  else\n-                     NDI := True;\n-                  end if;\n-               end if;\n-\n-               Next_Component (Comp);\n-            end loop;\n-\n-            --  Detect a mixed case of initialization\n-\n-            if FDI and NDI then\n-               return Mixed_Initialization;\n-\n-            elsif FDI then\n-               return Full_Default_Initialization;\n-\n-            elsif NDI then\n-               return No_Default_Initialization;\n-\n-            --  The type either has no components or they are all internally\n-            --  generated.\n-\n-            else\n-               return No_Possible_Initialization;\n-            end if;\n-\n-         --  The record type is null, there is nothing to initialize\n-\n-         else\n-            return No_Possible_Initialization;\n-         end if;\n-\n-      --  A scalar type subject to aspect/pragma Default_Value is fully default\n-      --  initialized.\n-\n-      elsif Is_Scalar_Type (Typ)\n-        and then Present (Default_Aspect_Value (Base_Type (Typ)))\n-      then\n-         return Full_Default_Initialization;\n-\n-      --  Task types are always fully default initialized\n-\n-      elsif Is_Task_Type (Typ) then\n-         return Full_Default_Initialization;\n-      end if;\n-\n-      --  The type has no full default initialization\n-\n-      return No_Default_Initialization;\n-   end Default_Initialization;\n-\n    ---------------------\n    -- Defining_Entity --\n    ---------------------"}, {"sha": "b6e7632062ddb70a07981d9ec096f7d170da08dc", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=3e586e100a61b0c1c9592740d5250d7604e7f685", "patch": "@@ -419,39 +419,6 @@ package Sem_Util is\n    --  Current_Scope is returned. The returned value is Empty if this is called\n    --  from a library package which is not within any subprogram.\n \n-   --  The following type lists all possible forms of default initialization\n-   --  that may apply to a type.\n-\n-   type Default_Initialization_Kind is\n-     (No_Possible_Initialization,\n-      --  This value signifies that a type cannot possibly be initialized\n-      --  because it has no content, for example - a null record.\n-\n-      Full_Default_Initialization,\n-      --  This value covers the following combinations of types and content:\n-      --    * Access type\n-      --    * Array-of-scalars with specified Default_Component_Value\n-      --    * Array type with fully default initialized component type\n-      --    * Record or protected type with components that either have a\n-      --      default expression or their related types are fully default\n-      --      initialized.\n-      --    * Scalar type with specified Default_Value\n-      --    * Task type\n-      --    * Type extension of a type with full default initialization where\n-      --      the extension components are also fully default initialized.\n-\n-      Mixed_Initialization,\n-      --  This value applies to a type where some of its internals are fully\n-      --  default initialized and some are not.\n-\n-      No_Default_Initialization);\n-      --  This value reflects a type where none of its content is fully\n-      --  default initialized.\n-\n-   function Default_Initialization\n-     (Typ : Entity_Id) return Default_Initialization_Kind;\n-   --  Determine default initialization kind that applies to a particular type\n-\n    function Deepest_Type_Access_Level (Typ : Entity_Id) return Uint;\n    --  Same as Type_Access_Level, except that if the type is the type of an Ada\n    --  2012 stand-alone object of an anonymous access type, then return the"}, {"sha": "1d9c33dff68446a10cd3f0a1a73143c605fa6274", "filename": "gcc/ada/stand.ads", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fstand.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e586e100a61b0c1c9592740d5250d7604e7f685/gcc%2Fada%2Fstand.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstand.ads?ref=3e586e100a61b0c1c9592740d5250d7604e7f685", "patch": "@@ -371,14 +371,6 @@ package Stand is\n    --  candidate interpretations has been examined. If after examining all of\n    --  them the type is still Any_Type, the node has no possible interpretation\n    --  and an error can be emitted (and Any_Type will be propagated upwards).\n-   --\n-   --  There is one situation in which Any_Type is used to legitimately\n-   --  represent a case where the type is not known pre-resolution, and that\n-   --  is for the N_Raise_Expression node. In this case, the Etype being set to\n-   --  Any_Type is normal and does not represent an error. In particular, it is\n-   --  compatible with the type of any constituent of the enclosing expression,\n-   --  if any. The type is eventually replaced with the type of the context,\n-   --  which plays no role in the resolution of the Raise_Expression.\n \n    Any_Access : Entity_Id;\n    --  Used to resolve the overloaded literal NULL\n@@ -427,6 +419,11 @@ package Stand is\n    --  component type is compatible with any character type, not just\n    --  Standard_Character.\n \n+   Raise_Type : Entity_Id;\n+   --  The type Raise_Type denotes the type of a Raise_Expression. It is\n+   --  compatible with all other types, and must eventually resolve to a\n+   --  concrete type that is imposed by the context.\n+\n    Universal_Integer : Entity_Id;\n    --  Entity for universal integer type. The bounds of this type correspond\n    --  to the largest supported integer type (i.e. Long_Long_Integer). It is"}]}