{"sha": "2c5a510cb834f9d9c91d65ee40e568b2e33b6164", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM1YTUxMGNiODM0ZjlkOWM5MWQ2NWVlNDBlNTY4YjJlMzNiNjE2NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-02-02T07:50:21Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-02-02T07:50:21Z"}, "message": "i386.c (general_no_elim_operand): New.\n\n        * i386.c (general_no_elim_operand): New.\n        (nonmemory_no_elim_operand): New.\n        (ix86_expand_move): Copy eliminable operands before a push.\n        * i386-protos.h: Declare new functions.\n        * i386.h (CAN_ELIMINATE): Simplify.\n        (PREDICATE_CODES): Update.\n        * i386.md (push insns): Don't allow eliminable register operands.\n\nFrom-SVN: r31755", "tree": {"sha": "ceccc6e724603c079d5844d258770ae96c1ae2d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceccc6e724603c079d5844d258770ae96c1ae2d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c5a510cb834f9d9c91d65ee40e568b2e33b6164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5a510cb834f9d9c91d65ee40e568b2e33b6164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5a510cb834f9d9c91d65ee40e568b2e33b6164", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5a510cb834f9d9c91d65ee40e568b2e33b6164/comments", "author": null, "committer": null, "parents": [{"sha": "ea2d416aac0d9e927f567c09617bd8c417b194a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea2d416aac0d9e927f567c09617bd8c417b194a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea2d416aac0d9e927f567c09617bd8c417b194a5"}], "stats": {"total": 87, "additions": 69, "deletions": 18}, "files": [{"sha": "8af95974a392518de54458d3fea74b726dd645bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5a510cb834f9d9c91d65ee40e568b2e33b6164/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5a510cb834f9d9c91d65ee40e568b2e33b6164/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c5a510cb834f9d9c91d65ee40e568b2e33b6164", "patch": "@@ -1,3 +1,13 @@\n+2000-02-01  Richard Henderson  <rth@cygnus.com>\n+\n+\t* i386.c (general_no_elim_operand): New.\n+\t(nonmemory_no_elim_operand): New.\n+\t(ix86_expand_move): Copy eliminable operands before a push.\n+\t* i386-protos.h: Declare new functions.\n+\t* i386.h (CAN_ELIMINATE): Simplify.\n+\t(PREDICATE_CODES): Update.\n+\t* i386.md (push insns): Don't allow eliminable register operands.\n+\n 2000-02-01  Richard Henderson  <rth@cygnus.com>\n \n \t* flow.c (mark_regs_live_at_end): Follow expand_function_end and"}, {"sha": "21dc139759d6c8d7117a3cee469fd0f3b06e6b2e", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5a510cb834f9d9c91d65ee40e568b2e33b6164/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5a510cb834f9d9c91d65ee40e568b2e33b6164/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=2c5a510cb834f9d9c91d65ee40e568b2e33b6164", "patch": "@@ -50,6 +50,8 @@ extern int const1_operand PARAMS ((rtx, enum machine_mode));\n extern int const248_operand PARAMS ((rtx, enum machine_mode));\n extern int incdec_operand PARAMS ((rtx, enum machine_mode));\n extern int reg_no_sp_operand PARAMS ((rtx, enum machine_mode));\n+extern int general_no_elim_operand PARAMS ((rtx, enum machine_mode));\n+extern int nonmemory_no_elim_operand PARAMS ((rtx, enum machine_mode));\n extern int q_regs_operand PARAMS ((rtx, enum machine_mode));\n extern int non_q_regs_operand PARAMS ((rtx, enum machine_mode));\n extern int no_comparison_operator PARAMS ((rtx, enum machine_mode));"}, {"sha": "18fc2f30e4216fdc11d2b4b0092d7f94a6c3dad1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5a510cb834f9d9c91d65ee40e568b2e33b6164/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5a510cb834f9d9c91d65ee40e568b2e33b6164/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2c5a510cb834f9d9c91d65ee40e568b2e33b6164", "patch": "@@ -1168,6 +1168,44 @@ reg_no_sp_operand (op, mode)\n   return register_operand (op, mode);\n }\n \n+/* Return false if this is any eliminable register.  Otherwise\n+   general_operand.  */\n+\n+int\n+general_no_elim_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n+{\n+  rtx t = op;\n+  if (GET_CODE (t) == SUBREG)\n+    t = SUBREG_REG (t);\n+  if (t == arg_pointer_rtx || t == frame_pointer_rtx\n+      || t == virtual_incoming_args_rtx || t == virtual_stack_vars_rtx\n+      || t == virtual_stack_dynamic_rtx)\n+    return 0;\n+\n+  return general_operand (op, mode);\n+}\n+\n+/* Return false if this is any eliminable register.  Otherwise\n+   register_operand or const_int.  */\n+\n+int\n+nonmemory_no_elim_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n+{\n+  rtx t = op;\n+  if (GET_CODE (t) == SUBREG)\n+    t = SUBREG_REG (t);\n+  if (t == arg_pointer_rtx || t == frame_pointer_rtx\n+      || t == virtual_incoming_args_rtx || t == virtual_stack_vars_rtx\n+      || t == virtual_stack_dynamic_rtx)\n+    return 0;\n+\n+  return GET_CODE (op) == CONST_INT || register_operand (op, mode);\n+}\n+\n /* Return true if op is a Q_REGS class register.  */\n \n int\n@@ -3987,6 +4025,10 @@ ix86_expand_move (mode, operands)\n \t  && GET_CODE (operands[1]) == MEM)\n \toperands[1] = force_reg (mode, operands[1]);\n \n+      if (push_operand (operands[0], mode)\n+\t  && ! general_no_elim_operand (operands[1], mode))\n+\toperands[1] = copy_to_mode_reg (mode, operands[1]);\n+\n       if (FLOAT_MODE_P (mode))\n \t{\n \t  /* If we are loading a floating point constant to a register,"}, {"sha": "1302b6570f8b9a9d9d6d8d65dc35c8a7214c39fa", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5a510cb834f9d9c91d65ee40e568b2e33b6164/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5a510cb834f9d9c91d65ee40e568b2e33b6164/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=2c5a510cb834f9d9c91d65ee40e568b2e33b6164", "patch": "@@ -1411,19 +1411,13 @@ pop{l} %0\"\t\t\t\t\t\t\t\\\n  { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\\\n  { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM}}\t\\\n \n-/* Given FROM and TO register numbers, say whether this elimination is allowed.\n-   Frame pointer elimination is automatically handled.\n-\n-   For the i386, if frame pointer elimination is being done, we would like to\n-   convert ap into sp, not fp.\n+/* Given FROM and TO register numbers, say whether this elimination is\n+   allowed.  Frame pointer elimination is automatically handled.\n \n    All other eliminations are valid.  */\n \n-#define CAN_ELIMINATE(FROM, TO)\t\t\t\t\t\t\\\n- ((((FROM) == ARG_POINTER_REGNUM || (FROM) == FRAME_POINTER_REGNUM)\t\\\n-   && (TO) == STACK_POINTER_REGNUM)\t\t\t\t\t\\\n-  ? ! frame_pointer_needed\t\t\t\t\t\t\\\n-  : 1)\n+#define CAN_ELIMINATE(FROM, TO) \\\n+  ((TO) == STACK_POINTER_REGNUM ? ! frame_pointer_needed : 1)\n \n /* Define the offset between two registers, one to be eliminated, and the other\n    its replacement, at the start of a routine.  */\n@@ -2436,6 +2430,9 @@ do { long l;\t\t\t\t\t\t\\\n   {\"const248_operand\", {CONST_INT}},\t\t\t\t\t\\\n   {\"incdec_operand\", {CONST_INT}},\t\t\t\t\t\\\n   {\"reg_no_sp_operand\", {SUBREG, REG}},\t\t\t\t\t\\\n+  {\"general_no_elim_operand\", {CONST_INT, CONST_DOUBLE, CONST,\t\t\\\n+\t\t\tSYMBOL_REF, LABEL_REF, SUBREG, REG, MEM}},\t\\\n+  {\"nonmemory_no_elim_operand\", {CONST_INT, REG, SUBREG}},\t\t\\\n   {\"q_regs_operand\", {SUBREG, REG}},\t\t\t\t\t\\\n   {\"non_q_regs_operand\", {SUBREG, REG}},\t\t\t\t\\\n   {\"no_comparison_operator\", {EQ, NE, LT, GE, LTU, GTU, LEU, GEU}},\t\\"}, {"sha": "ce2ac95f9476d2984b0675933f5aaba685854be3", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5a510cb834f9d9c91d65ee40e568b2e33b6164/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5a510cb834f9d9c91d65ee40e568b2e33b6164/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2c5a510cb834f9d9c91d65ee40e568b2e33b6164", "patch": "@@ -1281,7 +1281,7 @@\n \n (define_insn \"pushsi2\"\n   [(set (match_operand:SI 0 \"push_operand\" \"=<\")\n-\t(match_operand:SI 1 \"general_operand\" \"ri*m\"))]\n+\t(match_operand:SI 1 \"general_no_elim_operand\" \"ri*m\"))]\n   \"\"\n   \"push{l}\\\\t%1\"\n   [(set_attr \"type\" \"push\")])\n@@ -1361,7 +1361,7 @@\n \n (define_insn \"pushhi2\"\n   [(set (match_operand:HI 0 \"push_operand\" \"=<,<\")\n-\t(match_operand:HI 1 \"general_operand\" \"n,r*m\"))]\n+\t(match_operand:HI 1 \"general_no_elim_operand\" \"n,r*m\"))]\n   \"\"\n   \"@\n    push{w}\\\\t{|WORD PTR }%1\n@@ -1479,7 +1479,7 @@\n \n (define_insn \"pushqi2\"\n   [(set (match_operand:QI 0 \"push_operand\" \"=<,<\")\n-\t(match_operand:QI 1 \"nonmemory_operand\" \"n,r\"))]\n+\t(match_operand:QI 1 \"nonmemory_no_elim_operand\" \"n,r\"))]\n   \"\"\n   \"@\n    push{w}\\\\t{|word ptr }%1\n@@ -1693,7 +1693,7 @@\n \n (define_insn \"*pushdi\"\n   [(set (match_operand:DI 0 \"push_operand\" \"=<\")\n-\t(match_operand:DI 1 \"general_operand\" \"riF*m\"))]\n+\t(match_operand:DI 1 \"general_no_elim_operand\" \"riF*m\"))]\n   \"\"\n   \"#\")\n \n@@ -1727,7 +1727,7 @@\n \n (define_insn \"*pushsf\"\n   [(set (match_operand:SF 0 \"push_operand\" \"=<,<\")\n-\t(match_operand:SF 1 \"general_operand\" \"f#r,rFm#f\"))]\n+\t(match_operand:SF 1 \"general_no_elim_operand\" \"f#r,rFm#f\"))]\n   \"\"\n   \"*\n {\n@@ -1861,7 +1861,7 @@\n \n (define_insn \"*pushdf\"\n   [(set (match_operand:DF 0 \"push_operand\" \"=<,<\")\n-\t(match_operand:DF 1 \"general_operand\" \"f#r,rFo#f\"))]\n+\t(match_operand:DF 1 \"general_no_elim_operand\" \"f#r,rFo#f\"))]\n   \"\"\n   \"*\n {\n@@ -2057,7 +2057,7 @@\n \n (define_insn \"*pushxf_nointeger\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<,<,<\")\n-\t(match_operand:XF 1 \"general_operand\" \"f,Fo,*r\"))]\n+\t(match_operand:XF 1 \"general_no_elim_operand\" \"f,Fo,*r\"))]\n   \"optimize_size\"\n   \"*\n {\n@@ -2085,7 +2085,7 @@\n \n (define_insn \"*pushxf_integer\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<,<\")\n-\t(match_operand:XF 1 \"general_operand\" \"f#r,rFo#f\"))]\n+\t(match_operand:XF 1 \"general_no_elim_operand\" \"f#r,rFo#f\"))]\n   \"!optimize_size\"\n   \"*\n {"}]}