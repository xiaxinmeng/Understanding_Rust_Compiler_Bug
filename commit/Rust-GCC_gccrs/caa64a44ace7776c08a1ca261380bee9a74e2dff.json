{"sha": "caa64a44ace7776c08a1ca261380bee9a74e2dff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FhNjRhNDRhY2U3Nzc2YzA4YTFjYTI2MTM4MGJlZTlhNzRlMmRmZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T12:47:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T12:47:56Z"}, "message": "[multiple changes]\n\n2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Process_Atomic_Independent_Shared_Volatile): Code\n\tcleanup. Check the original node when trying to determine the node kind\n\tof pragma Volatile's argument to account for untagged derivations\n\twhere the type is transformed into a constrained subtype.\n\n2016-04-27  Olivier Hainque  <hainque@adacore.com>\n\n\t* mkdir.c (__gnat_mkdir): Rework the vxworks section to use a\n\tconsistent posix interface on the caller side.\n\n2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch10.adb (Build_Limited_View, Decorate_Type): If this\n\tis a limited view of a type, initialize the Limited_Dependents\n\tfield to catch misuses of the type in a client unit.\n\n2016-04-27  Thomas Quinot  <quinot@adacore.com>\n\n\t* a-strunb-shared.adb (Finalize): add missing Reference call.\n\t* s-strhas.adb: minor grammar fix and extension of comment\n\t* sem_ch8.adb: minor whitespace fixes\n\n2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* lib-xref.adb (Get_Type_Reference): Handle properly the case\n\tof an object declaration whose type definition is a class-wide\n\tsubtype and whose expression is a function call that returns a\n\tclasswide type.\n\n2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_util.ads, sem_util.adb (Output_Entity): New routine.\n\t(Output_Name): New routine.\n\n2016-04-27  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch3.adb (Rewrite_As_Renaming): Disable previous change for now.\n\nFrom-SVN: r235495", "tree": {"sha": "ed96be4a8f89d8cd40880a2c31d6031a197f4197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed96be4a8f89d8cd40880a2c31d6031a197f4197"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/caa64a44ace7776c08a1ca261380bee9a74e2dff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa64a44ace7776c08a1ca261380bee9a74e2dff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caa64a44ace7776c08a1ca261380bee9a74e2dff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa64a44ace7776c08a1ca261380bee9a74e2dff/comments", "author": null, "committer": null, "parents": [{"sha": "a6ac73115af92e964988677378306f5c08dd0ddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6ac73115af92e964988677378306f5c08dd0ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6ac73115af92e964988677378306f5c08dd0ddf"}], "stats": {"total": 251, "additions": 198, "deletions": 53}, "files": [{"sha": "62f41b7c932128412943767402c89f01661edb3b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=caa64a44ace7776c08a1ca261380bee9a74e2dff", "patch": "@@ -1,3 +1,43 @@\n+2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Process_Atomic_Independent_Shared_Volatile): Code\n+\tcleanup. Check the original node when trying to determine the node kind\n+\tof pragma Volatile's argument to account for untagged derivations\n+\twhere the type is transformed into a constrained subtype.\n+\n+2016-04-27  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* mkdir.c (__gnat_mkdir): Rework the vxworks section to use a\n+\tconsistent posix interface on the caller side.\n+\n+2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch10.adb (Build_Limited_View, Decorate_Type): If this\n+\tis a limited view of a type, initialize the Limited_Dependents\n+\tfield to catch misuses of the type in a client unit.\n+\n+2016-04-27  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* a-strunb-shared.adb (Finalize): add missing Reference call.\n+\t* s-strhas.adb: minor grammar fix and extension of comment\n+\t* sem_ch8.adb: minor whitespace fixes\n+\n+2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* lib-xref.adb (Get_Type_Reference): Handle properly the case\n+\tof an object declaration whose type definition is a class-wide\n+\tsubtype and whose expression is a function call that returns a\n+\tclasswide type.\n+\n+2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Output_Entity): New routine.\n+\t(Output_Name): New routine.\n+\n+2016-04-27  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch3.adb (Rewrite_As_Renaming): Disable previous change for now.\n+\n 2016-04-27  Vincent Celier  <celier@adacore.com>\n \n \t* gnatcmd.adb: For \"gnat ls -V -P\", recognize switch"}, {"sha": "88698b0c8921f90084b3a51c6011aea6a8c9670b", "filename": "gcc/ada/a-strunb-shared.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fa-strunb-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fa-strunb-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strunb-shared.adb?ref=caa64a44ace7776c08a1ca261380bee9a74e2dff", "patch": "@@ -799,6 +799,7 @@ package body Ada.Strings.Unbounded is\n          --  effects if a program references an already-finalized object.\n \n          Object.Reference := Null_Unbounded_String.Reference;\n+         Reference (Object.Reference);\n          Unreference (SR);\n       end if;\n    end Finalize;"}, {"sha": "05f8a6c51052823e4f0e3de210408dcfa7069056", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=caa64a44ace7776c08a1ca261380bee9a74e2dff", "patch": "@@ -6351,7 +6351,10 @@ package body Exp_Ch3 is\n          --  would otherwise make two copies. The RM allows removing redunant\n          --  Adjust/Finalize calls, but does not allow insertion of extra ones.\n \n-         return (Nkind (Expr_Q) = N_Explicit_Dereference\n+         --  This part is disabled for now, because it breaks GPS builds.\n+\n+         return (False -- ???\n+             and then Nkind (Expr_Q) = N_Explicit_Dereference\n              and then not Comes_From_Source (Expr_Q)\n              and then Nkind (Original_Node (Expr_Q)) = N_Function_Call\n              and then Nkind (Object_Definition (N)) in N_Has_Entity"}, {"sha": "c3039cd7a8b53cdf9de738adda8ef0e946598b65", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=caa64a44ace7776c08a1ca261380bee9a74e2dff", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1467,17 +1467,23 @@ package body Lib.Xref is\n                --  initialized with a tag-indeterminate call gets a subtype\n                --  of the classwide type during expansion. See if the original\n                --  type in the declaration is named, and return it instead\n-               --  of going to the root type.\n+               --  of going to the root type. The expression may be a class-\n+               --  wide function call whose result is on the secondary stack,\n+               --  which forces the declaration to be rewritten as a renaming,\n+               --  so examine the source declaration.\n \n-               if Ekind (Tref) = E_Class_Wide_Subtype\n-                 and then Nkind (Parent (Ent)) = N_Object_Declaration\n-                 and then\n-                   Nkind (Original_Node (Object_Definition (Parent (Ent))))\n-                     = N_Identifier\n-               then\n-                  Tref :=\n-                    Entity\n-                      (Original_Node ((Object_Definition (Parent (Ent)))));\n+               if Ekind (Tref) = E_Class_Wide_Subtype then\n+                  declare\n+                     Decl : constant Node_Id := Original_Node (Parent (Ent));\n+                  begin\n+                     if Nkind (Decl) = N_Object_Declaration\n+                       and then Is_Entity_Name\n+                         (Original_Node ((Object_Definition (Decl))))\n+                     then\n+                        Tref :=\n+                         Entity ((Original_Node ((Object_Definition (Decl)))));\n+                     end if;\n+                  end;\n                end if;\n \n             --  For anything else, exit"}, {"sha": "9b0a9265038f9fc0e614a2676f54ed1347ff070d", "filename": "gcc/ada/mkdir.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fmkdir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fmkdir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmkdir.c?ref=caa64a44ace7776c08a1ca261380bee9a74e2dff", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *             Copyright (C) 2002-2014, Free Software Foundation, Inc.      *\n+ *             Copyright (C) 2002-2016, Free Software Foundation, Inc.      *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -60,8 +60,18 @@\n int\n __gnat_mkdir (char *dir_name, int encoding ATTRIBUTE_UNUSED)\n {\n-#if defined (__vxworks) && !(defined (__RTP__) && ((_WRS_VXWORKS_MAJOR == 7) || (_WRS_VXWORKS_MINOR != 0)))\n-  return mkdir (dir_name);\n+#if defined (__vxworks)\n+\n+  /* Pretend that the system mkdir is posix compliant even though it\n+     sometimes is not, not expecting the second argument in some\n+     configurations (e.g. vxworks 653 2.2, difference from 2.5). The\n+     second actual argument will just be ignored in this case.  */\n+\n+  typedef int posix_mkdir (const char * name, mode_t mode);\n+\n+  posix_mkdir * vxmkdir = (posix_mkdir *)&mkdir;\n+  return vxmkdir (dir_name, S_IRWXU | S_IRWXG | S_IRWXO);\n+\n #elif defined (__MINGW32__)\n   TCHAR wname [GNAT_MAX_PATH_LEN + 2];\n "}, {"sha": "9ab5b6e423b662a79c4ade5184e51c9095dcaf01", "filename": "gcc/ada/s-strhas.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fs-strhas.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fs-strhas.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-strhas.adb?ref=caa64a44ace7776c08a1ca261380bee9a74e2dff", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2009-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2009-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,8 +33,9 @@ pragma Compiler_Unit_Warning;\n \n package body System.String_Hash is\n \n-   --  Compute a hash value for a key. The approach here is follows the\n-   --  algorithm used in GNU Awk and the ndbm substitute SDBM by Ozan Yigit.\n+   --  Compute a hash value for a key. The approach here follows the algorithm\n+   --  introduced in the ndbm substitute SDBM by Ozan Yigit and then reused in\n+   --  GNU Awk (where they are implemented as a Duff's device).\n \n    ----------\n    -- Hash --"}, {"sha": "c02cd4f4e56a1e24fbb24cf607cdbe6ed91fda42", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=caa64a44ace7776c08a1ca261380bee9a74e2dff", "patch": "@@ -84,6 +84,13 @@ package body Sem_Ch10 is\n    --  required in order to avoid passing non-decorated entities to the\n    --  back-end. Implements Ada 2005 (AI-50217).\n \n+   procedure Analyze_Proper_Body (N : Node_Id; Nam : Entity_Id);\n+   --  Common processing for all stubs (subprograms, tasks, packages, and\n+   --  protected cases). N is the stub to be analyzed. Once the subunit name\n+   --  is established, load and analyze. Nam is the non-overloadable entity\n+   --  for which the proper body provides a completion. Subprogram stubs are\n+   --  handled differently because they can be declarations.\n+\n    procedure Check_Body_Needed_For_SAL (Unit_Name : Entity_Id);\n    --  Check whether the source for the body of a compilation unit must be\n    --  included in a standalone library.\n@@ -203,13 +210,6 @@ package body Sem_Ch10 is\n    procedure Unchain (E : Entity_Id);\n    --  Remove single entity from visibility list\n \n-   procedure Analyze_Proper_Body (N : Node_Id; Nam : Entity_Id);\n-   --  Common processing for all stubs (subprograms, tasks, packages, and\n-   --  protected cases). N is the stub to be analyzed. Once the subunit name\n-   --  is established, load and analyze. Nam is the non-overloadable entity\n-   --  for which the proper body provides a completion. Subprogram stubs are\n-   --  handled differently because they can be declarations.\n-\n    procedure sm;\n    --  A dummy procedure, for debugging use, called just before analyzing the\n    --  main unit (after dealing with any context clauses).\n@@ -1489,7 +1489,7 @@ package body Sem_Ch10 is\n \n                            --  Check if the named package (or some ancestor)\n                            --  leaves visible the full-view of the unit given\n-                           --  in the limited-with clause\n+                           --  in the limited-with clause.\n \n                            loop\n                               if Designate_Same_Unit (Lim_Unit_Name,\n@@ -5633,15 +5633,19 @@ package body Sem_Ch10 is\n \n       begin\n          --  An unanalyzed type or a shadow entity of a type is treated as an\n-         --  incomplete type.\n-\n-         Set_Ekind             (Ent, E_Incomplete_Type);\n-         Set_Etype             (Ent, Ent);\n-         Set_Full_View         (Ent, Empty);\n-         Set_Is_First_Subtype  (Ent);\n-         Set_Scope             (Ent, Scop);\n-         Set_Stored_Constraint (Ent, No_Elist);\n-         Init_Size_Align       (Ent);\n+         --  incomplete type, and carries the corresponding attributes.\n+\n+         Set_Ekind              (Ent, E_Incomplete_Type);\n+         Set_Etype              (Ent, Ent);\n+         Set_Full_View          (Ent, Empty);\n+         Set_Is_First_Subtype   (Ent);\n+         Set_Scope              (Ent, Scop);\n+         Set_Stored_Constraint  (Ent, No_Elist);\n+         Init_Size_Align        (Ent);\n+\n+         if From_Limited_With (Ent) then\n+            Set_Private_Dependents (Ent, New_Elmt_List);\n+         end if;\n \n          --  A tagged type and its corresponding shadow entity share one common\n          --  class-wide type. The list of primitive operations for the shadow"}, {"sha": "3f8556d4abf211d8ad72d1689491c6066bc1ac21", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=caa64a44ace7776c08a1ca261380bee9a74e2dff", "patch": "@@ -1428,15 +1428,15 @@ package body Sem_Ch8 is\n          Set_Etype (New_P, Standard_Void_Type);\n \n          if Present (Renamed_Object (Old_P)) then\n-            Set_Renamed_Object (New_P,  Renamed_Object (Old_P));\n+            Set_Renamed_Object (New_P, Renamed_Object (Old_P));\n          else\n             Set_Renamed_Object (New_P, Old_P);\n          end if;\n \n          Set_Has_Completion (New_P);\n \n-         Set_First_Entity (New_P,  First_Entity (Old_P));\n-         Set_Last_Entity  (New_P,  Last_Entity  (Old_P));\n+         Set_First_Entity (New_P, First_Entity (Old_P));\n+         Set_Last_Entity  (New_P, Last_Entity  (Old_P));\n          Set_First_Private_Entity (New_P, First_Private_Entity (Old_P));\n          Check_Library_Unit_Renaming (N, Old_P);\n          Generate_Reference (Old_P, Name (N));"}, {"sha": "613ccdb414c5ab8cc8270be1394a4c79208da6d2", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=caa64a44ace7776c08a1ca261380bee9a74e2dff", "patch": "@@ -6467,11 +6467,6 @@ package body Sem_Prag is\n       ------------------------------------------------\n \n       procedure Process_Atomic_Independent_Shared_Volatile is\n-         D    : Node_Id;\n-         E    : Entity_Id;\n-         E_Id : Node_Id;\n-         K    : Node_Kind;\n-\n          procedure Set_Atomic_VFA (E : Entity_Id);\n          --  Set given type as Is_Atomic or Is_Volatile_Full_Access. Also, if\n          --  no explicit alignment was given, set alignment to unknown, since\n@@ -6495,22 +6490,27 @@ package body Sem_Prag is\n             end if;\n          end Set_Atomic_VFA;\n \n+         --  Local variables\n+\n+         Decl  : Node_Id;\n+         E     : Entity_Id;\n+         E_Arg : Node_Id;\n+\n       --  Start of processing for Process_Atomic_Independent_Shared_Volatile\n \n       begin\n          Check_Ada_83_Warning;\n          Check_No_Identifiers;\n          Check_Arg_Count (1);\n          Check_Arg_Is_Local_Name (Arg1);\n-         E_Id := Get_Pragma_Arg (Arg1);\n+         E_Arg := Get_Pragma_Arg (Arg1);\n \n-         if Etype (E_Id) = Any_Type then\n+         if Etype (E_Arg) = Any_Type then\n             return;\n          end if;\n \n-         E := Entity (E_Id);\n-         D := Declaration_Node (E);\n-         K := Nkind (D);\n+         E    := Entity (E_Arg);\n+         Decl := Declaration_Node (E);\n \n          --  A pragma that applies to a Ghost entity becomes Ghost for the\n          --  purposes of legality checks and removal of ignored Ghost code.\n@@ -6619,8 +6619,8 @@ package body Sem_Prag is\n                Set_Treat_As_Volatile (Underlying_Type (E));\n             end if;\n \n-         elsif K = N_Object_Declaration\n-           or else (K = N_Component_Declaration\n+         elsif Nkind (Decl) = N_Object_Declaration\n+           or else (Nkind (Decl) = N_Component_Declaration\n                      and then Original_Record_Component (E) = E)\n          then\n             if Rep_Item_Too_Late (E, N) then\n@@ -6674,12 +6674,15 @@ package body Sem_Prag is\n          --  The following check is only relevant when SPARK_Mode is on as\n          --  this is not a standard Ada legality rule. Pragma Volatile can\n          --  only apply to a full type declaration or an object declaration\n-         --  (SPARK RM C.6(1)).\n+         --  (SPARK RM C.6(1)). Original_Node is necessary to account for\n+         --  untagged derived types that are rewritten as subtypes of their\n+         --  respective root types.\n \n          if SPARK_Mode = On\n            and then Prag_Id = Pragma_Volatile\n-           and then not Nkind_In (K, N_Full_Type_Declaration,\n-                                     N_Object_Declaration)\n+           and then\n+             not Nkind_In (Original_Node (Decl), N_Full_Type_Declaration,\n+                                                 N_Object_Declaration)\n          then\n             Error_Pragma_Arg\n               (\"argument of pragma % must denote a full type or object \""}, {"sha": "7f99291bdf8aac147397dbc44d7638f4f3afba60", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=caa64a44ace7776c08a1ca261380bee9a74e2dff", "patch": "@@ -17708,6 +17708,67 @@ package body Sem_Util is\n       end if;\n    end Original_Corresponding_Operation;\n \n+   -------------------\n+   -- Output_Entity --\n+   -------------------\n+\n+   procedure Output_Entity (Id : Entity_Id) is\n+      Scop : Entity_Id;\n+\n+   begin\n+      Scop := Scope (Id);\n+\n+      --  The entity may lack a scope when it is in the process of being\n+      --  analyzed. Use the current scope as an approximation.\n+\n+      if No (Scop) then\n+         Scop := Current_Scope;\n+      end if;\n+\n+      Output_Name (Chars (Id), Scop);\n+   end Output_Entity;\n+\n+   -----------------\n+   -- Output_Name --\n+   -----------------\n+\n+   procedure Output_Name (Nam : Name_Id; Scop : Entity_Id := Current_Scope) is\n+      procedure Output_Scope (S : Entity_Id);\n+      --  Add the fully qualified form of scope S to the name buffer. The\n+      --  qualification format is:\n+      --    scope1__scopeN__\n+\n+      ------------------\n+      -- Output_Scope --\n+      ------------------\n+\n+      procedure Output_Scope (S : Entity_Id) is\n+      begin\n+         if S = Empty then\n+            null;\n+\n+         elsif S = Standard_Standard then\n+            null;\n+\n+         else\n+            Output_Scope (Scope (S));\n+            Add_Str_To_Name_Buffer (Get_Name_String (Chars (S)));\n+            Add_Str_To_Name_Buffer (\"__\");\n+         end if;\n+      end Output_Scope;\n+\n+   --  Start of processing for Output_Name\n+\n+   begin\n+      Name_Len := 0;\n+      Output_Scope (Scop);\n+\n+      Add_Str_To_Name_Buffer (Get_Name_String (Nam));\n+\n+      Write_Str (Name_Buffer (1 .. Name_Len));\n+      Write_Eol;\n+   end Output_Name;\n+\n    ----------------------\n    -- Policy_In_Effect --\n    ----------------------"}, {"sha": "0845bf7be40fadae038e3c26cdc2ceb22d668579", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/caa64a44ace7776c08a1ca261380bee9a74e2dff/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=caa64a44ace7776c08a1ca261380bee9a74e2dff", "patch": "@@ -1933,6 +1933,22 @@ package Sem_Util is\n    --  corresponding operation of S is the original corresponding operation of\n    --  S2. Otherwise, it is S itself.\n \n+   procedure Output_Entity (Id : Entity_Id);\n+   --  Print entity Id to standard output. The name of the entity appears in\n+   --  fully qualified form.\n+   --\n+   --  WARNING: this routine should be used in debugging scenarios such as\n+   --  tracking down undefined symbols as it is fairly low level.\n+\n+   procedure Output_Name (Nam : Name_Id; Scop : Entity_Id := Current_Scope);\n+   --  Print name Nam to standard output. The name appears in fully qualified\n+   --  form assuming it appears in scope Scop. Note that this may not reflect\n+   --  the final qualification as the entity which carries the name may be\n+   --  relocated to a different scope.\n+   --\n+   --  WARNING: this routine should be used in debugging scenarios such as\n+   --  tracking down undefined symbols as it is fairly low level.\n+\n    function Policy_In_Effect (Policy : Name_Id) return Name_Id;\n    --  Given a policy, return the policy identifier associated with it. If no\n    --  such policy is in effect, the value returned is No_Name."}]}