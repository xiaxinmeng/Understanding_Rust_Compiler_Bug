{"sha": "b48e9677e5550d60c4f1b4ea05b88b150173ebe0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ4ZTk2NzdlNTU1MGQ2MGM0ZjFiNGVhMDViODhiMTUwMTczZWJlMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-06-03T07:27:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-06-03T07:27:13Z"}, "message": "gcc/\n\t* defaults.h (USE_MD_CONSTRAINTS, EXTRA_MEMORY_CONSTRAINT)\n\t(EXTRA_ADDRESS_CONSTRAINT, DEFAULT_CONSTRAINT_LEN, CONSTRAINT_LEN)\n\t(CONST_OK_FOR_CONSTRAINT_P, CONST_DOUBLE_OK_FOR_LETTER_P)\n\t(REG_CLASS_FROM_CONSTRAINT, EXTRA_CONSTRAINT_STR): Delete definitions\n\tin this file.\n\t(REG_CLASS_FROM_LETTER, CONST_OK_FOR_LETTER_P)\n\t(CONST_DOUBLE_OK_FOR_LETTER_P, EXTRA_CONSTRAINT): Move poising to...\n\t* system.h: ...here and make it unconditional.\n\t* target.def (conditional_register_usage): Mention\n\tdefine_register_constraint instead of old-style constraint macros.\n\t* doc/tm.texi.in: Remove documentation for old-style constraint macros.\n\t* doc/tm.texi: Regenerate.\n\t* genoutput.c: Remove USE_MD_CONSTRAINTS conditions and all code\n\tprotected by !USE_MD_CONSTRAINTS.\n\t* config/frv/frv.md: Remove quote from old version of documentation.\n\t* config/frv/frv.c (frv_conditional_register_usage): Likewise.\n\t* config/m32r/m32r.c (easy_di_const, easy_df_const): Avoid mentioning\n\tCONST_DOUBLE_OK_FOR_LETTER.\n\t* config/sh/constraints.md: Likewise EXTRA_CONSTRAINT.\n\nFrom-SVN: r211161", "tree": {"sha": "9491259b0d05c2a1d5ac9632e9d177ebbae81e81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9491259b0d05c2a1d5ac9632e9d177ebbae81e81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b48e9677e5550d60c4f1b4ea05b88b150173ebe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48e9677e5550d60c4f1b4ea05b88b150173ebe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b48e9677e5550d60c4f1b4ea05b88b150173ebe0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99d14de62fb7401b8099c42fca44413662318e40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99d14de62fb7401b8099c42fca44413662318e40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99d14de62fb7401b8099c42fca44413662318e40"}], "stats": {"total": 740, "additions": 35, "deletions": 705}, "files": [{"sha": "6d9dab74a84b7f7e2068c2d58d472d17ea182c7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b48e9677e5550d60c4f1b4ea05b88b150173ebe0", "patch": "@@ -1,3 +1,25 @@\n+2014-06-03  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* defaults.h (USE_MD_CONSTRAINTS, EXTRA_MEMORY_CONSTRAINT)\n+\t(EXTRA_ADDRESS_CONSTRAINT, DEFAULT_CONSTRAINT_LEN, CONSTRAINT_LEN)\n+\t(CONST_OK_FOR_CONSTRAINT_P, CONST_DOUBLE_OK_FOR_LETTER_P)\n+\t(REG_CLASS_FROM_CONSTRAINT, EXTRA_CONSTRAINT_STR): Delete definitions\n+\tin this file.\n+\t(REG_CLASS_FROM_LETTER, CONST_OK_FOR_LETTER_P)\n+\t(CONST_DOUBLE_OK_FOR_LETTER_P, EXTRA_CONSTRAINT): Move poising to...\n+\t* system.h: ...here and make it unconditional.\n+\t* target.def (conditional_register_usage): Mention\n+\tdefine_register_constraint instead of old-style constraint macros.\n+\t* doc/tm.texi.in: Remove documentation for old-style constraint macros.\n+\t* doc/tm.texi: Regenerate.\n+\t* genoutput.c: Remove USE_MD_CONSTRAINTS conditions and all code\n+\tprotected by !USE_MD_CONSTRAINTS.\n+\t* config/frv/frv.md: Remove quote from old version of documentation.\n+\t* config/frv/frv.c (frv_conditional_register_usage): Likewise.\n+\t* config/m32r/m32r.c (easy_di_const, easy_df_const): Avoid mentioning\n+\tCONST_DOUBLE_OK_FOR_LETTER.\n+\t* config/sh/constraints.md: Likewise EXTRA_CONSTRAINT.\n+\n 2014-06-02  Andrew Pinski  <apinski@cavium.com>\n     \n \t* config/aarch64/aarch64-linux.h (GLIBC_DYNAMIC_LINKER):"}, {"sha": "98992b29db8a18fc271b6924247842aa116a713e", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=b48e9677e5550d60c4f1b4ea05b88b150173ebe0", "patch": "@@ -782,25 +782,7 @@ frv_string_begins_with (const_tree name, const char *prefix)\n \t  && strncmp (TREE_STRING_POINTER (name), prefix, prefix_len) == 0);\n }\n \f\n-/* Zero or more C statements that may conditionally modify two variables\n-   `fixed_regs' and `call_used_regs' (both of type `char []') after they have\n-   been initialized from the two preceding macros.\n-\n-   This is necessary in case the fixed or call-clobbered registers depend on\n-   target flags.\n-\n-   You need not define this macro if it has no work to do.\n-\n-   If the usage of an entire class of registers depends on the target flags,\n-   you may indicate this to GCC by using this macro to modify `fixed_regs' and\n-   `call_used_regs' to 1 for each of the registers in the classes which should\n-   not be used by GCC.  Also define the macro `REG_CLASS_FROM_LETTER' to return\n-   `NO_REGS' if it is called with a letter for a class that shouldn't be used.\n-\n-   (However, if this class is not included in `GENERAL_REGS' and all of the\n-   insn patterns whose constraints permit this class are controlled by target\n-   switches, then GCC will automatically avoid using these registers when the\n-   target switches are opposed to them.)  */\n+/* Implement TARGET_CONDITIONAL_REGISTER_USAGE.  */\n \n static void\n frv_conditional_register_usage (void)"}, {"sha": "17fb9427248f47e63856fa833a789a0f148de436", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 0, "deletions": 249, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=b48e9677e5550d60c4f1b4ea05b88b150173ebe0", "patch": "@@ -89,255 +89,6 @@\n (define_mode_attr IMODEsuffix [(QI \"b\") (HI \"h\") (SI \"\") (DI \"d\")])\n (define_mode_attr BREADsuffix [(QI \"ub\") (HI \"uh\") (SI \"\") (DI \"d\")])\n \f\n-;; ::::::::::::::::::::\n-;; ::\n-;; :: Constraints\n-;; ::\n-;; ::::::::::::::::::::\n-\n-;; Standard Constraints\n-;;\n-;; `m' A memory operand is allowed, with any kind of address that the\n-;;     machine supports in general.\n-;;\n-;; `o' A memory operand is allowed, but only if the address is\n-;;     \"offsettable\".  This means that adding a small integer (actually, the\n-;;     width in bytes of the operand, as determined by its machine mode) may be\n-;;     added to the address and the result is also a valid memory address.\n-;;\n-;; `V' A memory operand that is not offsettable.  In other words,\n-;;     anything that would fit the `m' constraint but not the `o' constraint.\n-;;\n-;; `<' A memory operand with autodecrement addressing (either\n-;;     predecrement or postdecrement) is allowed.\n-;;\n-;; `>' A memory operand with autoincrement addressing (either\n-;;     preincrement or postincrement) is allowed.\n-;;\n-;; `r' A register operand is allowed provided that it is in a general\n-;;     register.\n-;;\n-;; `d', `a', `f', ...\n-;;     Other letters can be defined in machine-dependent fashion to stand for\n-;;     particular classes of registers.  `d', `a' and `f' are defined on the\n-;;     68000/68020 to stand for data, address and floating point registers.\n-;;\n-;; `i' An immediate integer operand (one with constant value) is allowed.\n-;;     This includes symbolic constants whose values will be known only at\n-;;     assembly time.\n-;;\n-;; `n' An immediate integer operand with a known numeric value is allowed.\n-;;     Many systems cannot support assembly-time constants for operands less\n-;;     than a word wide.  Constraints for these operands should use `n' rather\n-;;     than `i'.\n-;;\n-;; 'I' First machine-dependent integer constant (6-bit signed ints).\n-;; 'J' Second machine-dependent integer constant (10-bit signed ints).\n-;; 'K' Third machine-dependent integer constant (-2048).\n-;; 'L' Fourth machine-dependent integer constant (16-bit signed ints).\n-;; 'M' Fifth machine-dependent integer constant (16-bit unsigned ints).\n-;; 'N' Sixth machine-dependent integer constant (-2047..-1).\n-;; 'O' Seventh machine-dependent integer constant (zero).\n-;; 'P' Eighth machine-dependent integer constant (1..2047).\n-;;\n-;;     Other letters in the range `I' through `P' may be defined in a\n-;;     machine-dependent fashion to permit immediate integer operands with\n-;;     explicit integer values in specified ranges.  For example, on the 68000,\n-;;     `I' is defined to stand for the range of values 1 to 8.  This is the\n-;;     range permitted as a shift count in the shift instructions.\n-;;\n-;; `E' An immediate floating operand (expression code `const_double') is\n-;;     allowed, but only if the target floating point format is the same as\n-;;     that of the host machine (on which the compiler is running).\n-;;\n-;; `F' An immediate floating operand (expression code `const_double') is\n-;;     allowed.\n-;;\n-;; 'G' First machine-dependent const_double.\n-;; 'H' Second machine-dependent const_double.\n-;;\n-;; `s' An immediate integer operand whose value is not an explicit\n-;;     integer is allowed.\n-;;\n-;;     This might appear strange; if an insn allows a constant operand with a\n-;;     value not known at compile time, it certainly must allow any known\n-;;     value.  So why use `s' instead of `i'?  Sometimes it allows better code\n-;;     to be generated.\n-;;\n-;;     For example, on the 68000 in a fullword instruction it is possible to\n-;;     use an immediate operand; but if the immediate value is between -128 and\n-;;     127, better code results from loading the value into a register and\n-;;     using the register.  This is because the load into the register can be\n-;;     done with a `moveq' instruction.  We arrange for this to happen by\n-;;     defining the letter `K' to mean \"any integer outside the range -128 to\n-;;     127\", and then specifying `Ks' in the operand constraints.\n-;;\n-;; `g' Any register, memory or immediate integer operand is allowed,\n-;;     except for registers that are not general registers.\n-;;\n-;; `X' Any operand whatsoever is allowed, even if it does not satisfy\n-;;     `general_operand'.  This is normally used in the constraint of a\n-;;     `match_scratch' when certain alternatives will not actually require a\n-;;     scratch register.\n-;;\n-;; `0' Match operand 0.\n-;; `1' Match operand 1.\n-;; `2' Match operand 2.\n-;; `3' Match operand 3.\n-;; `4' Match operand 4.\n-;; `5' Match operand 5.\n-;; `6' Match operand 6.\n-;; `7' Match operand 7.\n-;; `8' Match operand 8.\n-;; `9' Match operand 9.\n-;;\n-;;     An operand that matches the specified operand number is allowed.  If a\n-;;     digit is used together with letters within the same alternative, the\n-;;     digit should come last.\n-;;\n-;;     This is called a \"matching constraint\" and what it really means is that\n-;;     the assembler has only a single operand that fills two roles considered\n-;;     separate in the RTL insn.  For example, an add insn has two input\n-;;     operands and one output operand in the RTL, but on most CISC machines an\n-;;     add instruction really has only two operands, one of them an\n-;;     input-output operand:\n-;;\n-;;          addl #35,r12\n-;;\n-;;     Matching constraints are used in these circumstances.  More precisely,\n-;;     the two operands that match must include one input-only operand and one\n-;;     output-only operand.  Moreover, the digit must be a smaller number than\n-;;     the number of the operand that uses it in the constraint.\n-;;\n-;;     For operands to match in a particular case usually means that they are\n-;;     identical-looking RTL expressions.  But in a few special cases specific\n-;;     kinds of dissimilarity are allowed.  For example, `*x' as an input\n-;;     operand will match `*x++' as an output operand.  For proper results in\n-;;     such cases, the output template should always use the output-operand's\n-;;     number when printing the operand.\n-;;\n-;; `p' An operand that is a valid memory address is allowed.  This is for\n-;;     \"load address\" and \"push address\" instructions.\n-;;\n-;;     `p' in the constraint must be accompanied by `address_operand' as the\n-;;     predicate in the `match_operand'.  This predicate interprets the mode\n-;;     specified in the `match_operand' as the mode of the memory reference for\n-;;     which the address would be valid.\n-;;\n-;; `Q` First non constant, non register machine-dependent insns\n-;; `R` Second non constant, non register machine-dependent insns\n-;; `S` Third non constant, non register machine-dependent insns\n-;; `T` Fourth non constant, non register machine-dependent insns\n-;; `U` Fifth non constant, non register machine-dependent insns\n-;;\n-;;     Letters in the range `Q' through `U' may be defined in a\n-;;     machine-dependent fashion to stand for arbitrary operand types.  The\n-;;     machine description macro `EXTRA_CONSTRAINT' is passed the operand as\n-;;     its first argument and the constraint letter as its second operand.\n-;;\n-;;     A typical use for this would be to distinguish certain types of memory\n-;;     references that affect other insn operands.\n-;;\n-;;     Do not define these constraint letters to accept register references\n-;;     (`reg'); the reload pass does not expect this and would not handle it\n-;;     properly.\n-\n-;; Multiple Alternative Constraints\n-;; `?' Disparage slightly the alternative that the `?' appears in, as a\n-;;     choice when no alternative applies exactly.  The compiler regards this\n-;;     alternative as one unit more costly for each `?' that appears in it.\n-;;\n-;; `!' Disparage severely the alternative that the `!' appears in.  This\n-;;     alternative can still be used if it fits without reloading, but if\n-;;     reloading is needed, some other alternative will be used.\n-\n-;; Constraint modifiers\n-;; `=' Means that this operand is write-only for this instruction: the\n-;;     previous value is discarded and replaced by output data.\n-;;\n-;; `+' Means that this operand is both read and written by the\n-;;     instruction.\n-;;\n-;;     When the compiler fixes up the operands to satisfy the constraints, it\n-;;     needs to know which operands are inputs to the instruction and which are\n-;;     outputs from it.  `=' identifies an output; `+' identifies an operand\n-;;     that is both input and output; all other operands are assumed to be\n-;;     input only.\n-;;\n-;; `&' Means (in a particular alternative) that this operand is written\n-;;     before the instruction is finished using the input operands.  Therefore,\n-;;     this operand may not lie in a register that is used as an input operand\n-;;     or as part of any memory address.\n-;;\n-;;     `&' applies only to the alternative in which it is written.  In\n-;;     constraints with multiple alternatives, sometimes one alternative\n-;;     requires `&' while others do not.\n-;;\n-;;     `&' does not obviate the need to write `='.\n-;;\n-;; `%' Declares the instruction to be commutative for this operand and the\n-;;     following operand.  This means that the compiler may interchange the two\n-;;     operands if that is the cheapest way to make all operands fit the\n-;;     constraints.  This is often used in patterns for addition instructions\n-;;     that really have only two operands: the result must go in one of the\n-;;     arguments.\n-;;\n-;; `#' Says that all following characters, up to the next comma, are to be\n-;;     ignored as a constraint.  They are significant only for choosing\n-;;     register preferences.\n-;;\n-;; `*' Says that the following character should be ignored when choosing\n-;;     register preferences.  `*' has no effect on the meaning of the\n-;;     constraint as a constraint, and no effect on reloading.\n-\n-\f\n-;; ::::::::::::::::::::\n-;; ::\n-;; :: Attributes\n-;; ::\n-;; ::::::::::::::::::::\n-\n-;; The `define_attr' expression is used to define each attribute required by\n-;; the target machine.  It looks like:\n-;;\n-;; (define_attr NAME LIST-OF-VALUES DEFAULT)\n-\n-;; NAME is a string specifying the name of the attribute being defined.\n-\n-;; LIST-OF-VALUES is either a string that specifies a comma-separated list of\n-;; values that can be assigned to the attribute, or a null string to indicate\n-;; that the attribute takes numeric values.\n-\n-;; DEFAULT is an attribute expression that gives the value of this attribute\n-;; for insns that match patterns whose definition does not include an explicit\n-;; value for this attribute.\n-\n-;; For each defined attribute, a number of definitions are written to the\n-;; `insn-attr.h' file.  For cases where an explicit set of values is specified\n-;; for an attribute, the following are defined:\n-\n-;; * A `#define' is written for the symbol `HAVE_ATTR_NAME'.\n-;;\n-;; * An enumeral class is defined for `attr_NAME' with elements of the\n-;;   form `UPPER-NAME_UPPER-VALUE' where the attribute name and value are first\n-;;   converted to upper case.\n-;;\n-;; * A function `get_attr_NAME' is defined that is passed an insn and\n-;;   returns the attribute value for that insn.\n-\n-;; For example, if the following is present in the `md' file:\n-;;\n-;; (define_attr \"type\" \"branch,fp,load,store,arith\" ...)\n-;;\n-;; the following lines will be written to the file `insn-attr.h'.\n-;;\n-;; #define HAVE_ATTR_type\n-;; enum attr_type {TYPE_BRANCH, TYPE_FP, TYPE_LOAD, TYPE_STORE, TYPE_ARITH};\n-;; extern enum attr_type get_attr_type ();\n-\n-;; If the attribute takes numeric values, no `enum' type will be defined and\n-;; the function to obtain the attribute's value will return `int'.\n-\n (define_attr \"length\" \"\" (const_int 4))\n \n ;; Processor type -- this attribute must exactly match the processor_type"}, {"sha": "2286a8574398001469558046a6539f4bdf373178", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=b48e9677e5550d60c4f1b4ea05b88b150173ebe0", "patch": "@@ -605,7 +605,7 @@ call26_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n \n /* Return 1 if OP is a DImode const we want to handle inline.\n    This must match the code in the movdi pattern.\n-   It is used by the 'G' CONST_DOUBLE_OK_FOR_LETTER.  */\n+   It is used by the 'G' constraint.  */\n \n int\n easy_di_const (rtx op)\n@@ -625,7 +625,7 @@ easy_di_const (rtx op)\n \n /* Return 1 if OP is a DFmode const we want to handle inline.\n    This must match the code in the movdf pattern.\n-   It is used by the 'H' CONST_DOUBLE_OK_FOR_LETTER.  */\n+   It is used by the 'H' constraint.  */\n \n int\n easy_df_const (rtx op)"}, {"sha": "e75acfd69000ad800d1794d2edceb1b6dde53591", "filename": "gcc/config/sh/constraints.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fconfig%2Fsh%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fconfig%2Fsh%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fconstraints.md?ref=b48e9677e5550d60c4f1b4ea05b88b150173ebe0", "patch": "@@ -55,7 +55,7 @@\n ;; Z: zero in any mode\n ;;\n ;; unused CONST_INT constraint letters: LO\n-;; unused EXTRA_CONSTRAINT letters: D T U Y\n+;; unused \"extra\" constraint letters: D T U Y\n \n ;; Register constraints\n (define_register_constraint \"a\" \"ALL_REGS\""}, {"sha": "971f373a24f7b579f76494be97b11ce892e8b088", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=b48e9677e5550d60c4f1b4ea05b88b150173ebe0", "patch": "@@ -976,74 +976,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define DEFAULT_USE_CXA_ATEXIT 0\n #endif\n \n-/* If none of these macros are defined, the port must use the new\n-   technique of defining constraints in the machine description.\n-   tm_p.h will define those macros that machine-independent code\n-   still uses.  */\n-#if  !defined CONSTRAINT_LEN\t\t\t\\\n-  && !defined REG_CLASS_FROM_LETTER\t\t\\\n-  && !defined REG_CLASS_FROM_CONSTRAINT\t\t\\\n-  && !defined CONST_OK_FOR_LETTER_P\t\t\\\n-  && !defined CONST_OK_FOR_CONSTRAINT_P\t\t\\\n-  && !defined CONST_DOUBLE_OK_FOR_LETTER_P\t\\\n-  && !defined CONST_DOUBLE_OK_FOR_CONSTRAINT_P  \\\n-  && !defined EXTRA_CONSTRAINT\t\t\t\\\n-  && !defined EXTRA_CONSTRAINT_STR\t\t\\\n-  && !defined EXTRA_MEMORY_CONSTRAINT\t\t\\\n-  && !defined EXTRA_ADDRESS_CONSTRAINT\n-\n-#define USE_MD_CONSTRAINTS\n-\n #if GCC_VERSION >= 3000 && defined IN_GCC\n /* These old constraint macros shouldn't appear anywhere in a\n    configuration using MD constraint definitions.  */\n-#pragma GCC poison REG_CLASS_FROM_LETTER CONST_OK_FOR_LETTER_P \\\n-                   CONST_DOUBLE_OK_FOR_LETTER_P EXTRA_CONSTRAINT\n-#endif\n-\n-#else /* old constraint mechanism in use */\n-\n-/* Determine whether extra constraint letter should be handled\n-   via address reload (like 'o').  */\n-#ifndef EXTRA_MEMORY_CONSTRAINT\n-#define EXTRA_MEMORY_CONSTRAINT(C,STR) 0\n-#endif\n-\n-/* Determine whether extra constraint letter should be handled\n-   as an address (like 'p').  */\n-#ifndef EXTRA_ADDRESS_CONSTRAINT\n-#define EXTRA_ADDRESS_CONSTRAINT(C,STR) 0\n-#endif\n-\n-/* When a port defines CONSTRAINT_LEN, it should use DEFAULT_CONSTRAINT_LEN\n-   for all the characters that it does not want to change, so things like the\n-  'length' of a digit in a matching constraint is an implementation detail,\n-   and not part of the interface.  */\n-#define DEFAULT_CONSTRAINT_LEN(C,STR) 1\n-\n-#ifndef CONSTRAINT_LEN\n-#define CONSTRAINT_LEN(C,STR) DEFAULT_CONSTRAINT_LEN (C, STR)\n #endif\n \n-#if defined (CONST_OK_FOR_LETTER_P) && ! defined (CONST_OK_FOR_CONSTRAINT_P)\n-#define CONST_OK_FOR_CONSTRAINT_P(VAL,C,STR) CONST_OK_FOR_LETTER_P (VAL, C)\n-#endif\n-\n-#if defined (CONST_DOUBLE_OK_FOR_LETTER_P) && ! defined (CONST_DOUBLE_OK_FOR_CONSTRAINT_P)\n-#define CONST_DOUBLE_OK_FOR_CONSTRAINT_P(OP,C,STR) \\\n-  CONST_DOUBLE_OK_FOR_LETTER_P (OP, C)\n-#endif\n-\n-#ifndef REG_CLASS_FROM_CONSTRAINT\n-#define REG_CLASS_FROM_CONSTRAINT(C,STR) REG_CLASS_FROM_LETTER (C)\n-#endif\n-\n-#if defined (EXTRA_CONSTRAINT) && ! defined (EXTRA_CONSTRAINT_STR)\n-#define EXTRA_CONSTRAINT_STR(OP, C,STR) EXTRA_CONSTRAINT (OP, C)\n-#endif\n-\n-#endif /* old constraint mechanism in use */\n-\n /* Determin whether the target runtime library is Bionic */\n #ifndef TARGET_HAS_BIONIC\n #define TARGET_HAS_BIONIC 0"}, {"sha": "c949eaf15c9ab7403a1eeb6c004dae3a3195ffeb", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 3, "deletions": 152, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b48e9677e5550d60c4f1b4ea05b88b150173ebe0", "patch": "@@ -32,7 +32,6 @@ through the macros defined in the @file{.h} file.\n * Type Layout::         Defining sizes and properties of basic user data types.\n * Registers::           Naming and describing the hardware registers.\n * Register Classes::    Defining the classes of hardware registers.\n-* Old Constraints::     The old way to define machine-specific constraints.\n * Stack and Calling::   Defining which way the stack grows and by how much.\n * Varargs::             Defining the varargs macros.\n * Trampolines::         Code set up at run time to enter a nested function.\n@@ -1962,10 +1961,9 @@ command options have been applied.\n If the usage of an entire class of registers depends on the target\n flags, you may indicate this to GCC by using this macro to modify\n @code{fixed_regs} and @code{call_used_regs} to 1 for each of the\n-registers in the classes which should not be used by GCC@.  Also define\n-the macro @code{REG_CLASS_FROM_LETTER} / @code{REG_CLASS_FROM_CONSTRAINT}\n-to return @code{NO_REGS} if it\n-is called with a letter for a class that shouldn't be used.\n+registers in the classes which should not be used by GCC@.  Also make\n+@code{define_register_constraint}s return @code{NO_REGS} for constraints\n+that shouldn't be used.\n \n (However, if this class is not included in @code{GENERAL_REGS} and all\n of the insn patterns whose constraints permit this class are\n@@ -2922,153 +2920,6 @@ This hook defines a class of registers which could be used for spilling  pseudos\n This hook defines the machine mode to use for the boolean result of  conditional store patterns.  The ICODE argument is the instruction code  for the cstore being performed.  Not definiting this hook is the same  as accepting the mode encoded into operand 0 of the cstore expander  patterns.\n @end deftypefn\n \n-@node Old Constraints\n-@section Obsolete Macros for Defining Constraints\n-@cindex defining constraints, obsolete method\n-@cindex constraints, defining, obsolete method\n-\n-Machine-specific constraints can be defined with these macros instead\n-of the machine description constructs described in @ref{Define\n-Constraints}.  This mechanism is obsolete.  New ports should not use\n-it; old ports should convert to the new mechanism.\n-\n-@defmac CONSTRAINT_LEN (@var{char}, @var{str})\n-For the constraint at the start of @var{str}, which starts with the letter\n-@var{c}, return the length.  This allows you to have register class /\n-constant / extra constraints that are longer than a single letter;\n-you don't need to define this macro if you can do with single-letter\n-constraints only.  The definition of this macro should use\n-DEFAULT_CONSTRAINT_LEN for all the characters that you don't want\n-to handle specially.\n-There are some sanity checks in genoutput.c that check the constraint lengths\n-for the md file, so you can also use this macro to help you while you are\n-transitioning from a byzantine single-letter-constraint scheme: when you\n-return a negative length for a constraint you want to re-use, genoutput\n-will complain about every instance where it is used in the md file.\n-@end defmac\n-\n-@defmac REG_CLASS_FROM_LETTER (@var{char})\n-A C expression which defines the machine-dependent operand constraint\n-letters for register classes.  If @var{char} is such a letter, the\n-value should be the register class corresponding to it.  Otherwise,\n-the value should be @code{NO_REGS}.  The register letter @samp{r},\n-corresponding to class @code{GENERAL_REGS}, will not be passed\n-to this macro; you do not need to handle it.\n-@end defmac\n-\n-@defmac REG_CLASS_FROM_CONSTRAINT (@var{char}, @var{str})\n-Like @code{REG_CLASS_FROM_LETTER}, but you also get the constraint string\n-passed in @var{str}, so that you can use suffixes to distinguish between\n-different variants.\n-@end defmac\n-\n-@defmac CONST_OK_FOR_LETTER_P (@var{value}, @var{c})\n-A C expression that defines the machine-dependent operand constraint\n-letters (@samp{I}, @samp{J}, @samp{K}, @dots{} @samp{P}) that specify\n-particular ranges of integer values.  If @var{c} is one of those\n-letters, the expression should check that @var{value}, an integer, is in\n-the appropriate range and return 1 if so, 0 otherwise.  If @var{c} is\n-not one of those letters, the value should be 0 regardless of\n-@var{value}.\n-@end defmac\n-\n-@defmac CONST_OK_FOR_CONSTRAINT_P (@var{value}, @var{c}, @var{str})\n-Like @code{CONST_OK_FOR_LETTER_P}, but you also get the constraint\n-string passed in @var{str}, so that you can use suffixes to distinguish\n-between different variants.\n-@end defmac\n-\n-@defmac CONST_DOUBLE_OK_FOR_LETTER_P (@var{value}, @var{c})\n-A C expression that defines the machine-dependent operand constraint\n-letters that specify particular ranges of @code{const_double} values\n-(@samp{G} or @samp{H}).\n-\n-If @var{c} is one of those letters, the expression should check that\n-@var{value}, an RTX of code @code{const_double}, is in the appropriate\n-range and return 1 if so, 0 otherwise.  If @var{c} is not one of those\n-letters, the value should be 0 regardless of @var{value}.\n-\n-@code{const_double} is used for all floating-point constants and for\n-@code{DImode} fixed-point constants.  A given letter can accept either\n-or both kinds of values.  It can use @code{GET_MODE} to distinguish\n-between these kinds.\n-@end defmac\n-\n-@defmac CONST_DOUBLE_OK_FOR_CONSTRAINT_P (@var{value}, @var{c}, @var{str})\n-Like @code{CONST_DOUBLE_OK_FOR_LETTER_P}, but you also get the constraint\n-string passed in @var{str}, so that you can use suffixes to distinguish\n-between different variants.\n-@end defmac\n-\n-@defmac EXTRA_CONSTRAINT (@var{value}, @var{c})\n-A C expression that defines the optional machine-dependent constraint\n-letters that can be used to segregate specific types of operands, usually\n-memory references, for the target machine.  Any letter that is not\n-elsewhere defined and not matched by @code{REG_CLASS_FROM_LETTER} /\n-@code{REG_CLASS_FROM_CONSTRAINT}\n-may be used.  Normally this macro will not be defined.\n-\n-If it is required for a particular target machine, it should return 1\n-if @var{value} corresponds to the operand type represented by the\n-constraint letter @var{c}.  If @var{c} is not defined as an extra\n-constraint, the value returned should be 0 regardless of @var{value}.\n-\n-For example, on the ROMP, load instructions cannot have their output\n-in r0 if the memory reference contains a symbolic address.  Constraint\n-letter @samp{Q} is defined as representing a memory address that does\n-@emph{not} contain a symbolic address.  An alternative is specified with\n-a @samp{Q} constraint on the input and @samp{r} on the output.  The next\n-alternative specifies @samp{m} on the input and a register class that\n-does not include r0 on the output.\n-@end defmac\n-\n-@defmac EXTRA_CONSTRAINT_STR (@var{value}, @var{c}, @var{str})\n-Like @code{EXTRA_CONSTRAINT}, but you also get the constraint string passed\n-in @var{str}, so that you can use suffixes to distinguish between different\n-variants.\n-@end defmac\n-\n-@defmac EXTRA_MEMORY_CONSTRAINT (@var{c}, @var{str})\n-A C expression that defines the optional machine-dependent constraint\n-letters, amongst those accepted by @code{EXTRA_CONSTRAINT}, that should\n-be treated like memory constraints by the reload pass.\n-\n-It should return 1 if the operand type represented by the constraint\n-at the start of @var{str}, the first letter of which is the letter @var{c},\n-comprises a subset of all memory references including\n-all those whose address is simply a base register.  This allows the reload\n-pass to reload an operand, if it does not directly correspond to the operand\n-type of @var{c}, by copying its address into a base register.\n-\n-For example, on the S/390, some instructions do not accept arbitrary\n-memory references, but only those that do not make use of an index\n-register.  The constraint letter @samp{Q} is defined via\n-@code{EXTRA_CONSTRAINT} as representing a memory address of this type.\n-If the letter @samp{Q} is marked as @code{EXTRA_MEMORY_CONSTRAINT},\n-a @samp{Q} constraint can handle any memory operand, because the\n-reload pass knows it can be reloaded by copying the memory address\n-into a base register if required.  This is analogous to the way\n-an @samp{o} constraint can handle any memory operand.\n-@end defmac\n-\n-@defmac EXTRA_ADDRESS_CONSTRAINT (@var{c}, @var{str})\n-A C expression that defines the optional machine-dependent constraint\n-letters, amongst those accepted by @code{EXTRA_CONSTRAINT} /\n-@code{EXTRA_CONSTRAINT_STR}, that should\n-be treated like address constraints by the reload pass.\n-\n-It should return 1 if the operand type represented by the constraint\n-at the start of @var{str}, which starts with the letter @var{c}, comprises\n-a subset of all memory addresses including\n-all those that consist of just a base register.  This allows the reload\n-pass to reload an operand, if it does not directly correspond to the operand\n-type of @var{str}, by copying it into a base register.\n-\n-Any constraint marked as @code{EXTRA_ADDRESS_CONSTRAINT} can only\n-be used with the @code{address_operand} predicate.  It is treated\n-analogously to the @samp{p} constraint.\n-@end defmac\n-\n @node Stack and Calling\n @section Stack Layout and Calling Conventions\n @cindex calling conventions"}, {"sha": "dcb740b232a09331eeccf340accf233a9a2c3bc8", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 148, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=b48e9677e5550d60c4f1b4ea05b88b150173ebe0", "patch": "@@ -32,7 +32,6 @@ through the macros defined in the @file{.h} file.\n * Type Layout::         Defining sizes and properties of basic user data types.\n * Registers::           Naming and describing the hardware registers.\n * Register Classes::    Defining the classes of hardware registers.\n-* Old Constraints::     The old way to define machine-specific constraints.\n * Stack and Calling::   Defining which way the stack grows and by how much.\n * Varargs::             Defining the varargs macros.\n * Trampolines::         Code set up at run time to enter a nested function.\n@@ -2551,153 +2550,6 @@ as below:\n \n @hook TARGET_CSTORE_MODE\n \n-@node Old Constraints\n-@section Obsolete Macros for Defining Constraints\n-@cindex defining constraints, obsolete method\n-@cindex constraints, defining, obsolete method\n-\n-Machine-specific constraints can be defined with these macros instead\n-of the machine description constructs described in @ref{Define\n-Constraints}.  This mechanism is obsolete.  New ports should not use\n-it; old ports should convert to the new mechanism.\n-\n-@defmac CONSTRAINT_LEN (@var{char}, @var{str})\n-For the constraint at the start of @var{str}, which starts with the letter\n-@var{c}, return the length.  This allows you to have register class /\n-constant / extra constraints that are longer than a single letter;\n-you don't need to define this macro if you can do with single-letter\n-constraints only.  The definition of this macro should use\n-DEFAULT_CONSTRAINT_LEN for all the characters that you don't want\n-to handle specially.\n-There are some sanity checks in genoutput.c that check the constraint lengths\n-for the md file, so you can also use this macro to help you while you are\n-transitioning from a byzantine single-letter-constraint scheme: when you\n-return a negative length for a constraint you want to re-use, genoutput\n-will complain about every instance where it is used in the md file.\n-@end defmac\n-\n-@defmac REG_CLASS_FROM_LETTER (@var{char})\n-A C expression which defines the machine-dependent operand constraint\n-letters for register classes.  If @var{char} is such a letter, the\n-value should be the register class corresponding to it.  Otherwise,\n-the value should be @code{NO_REGS}.  The register letter @samp{r},\n-corresponding to class @code{GENERAL_REGS}, will not be passed\n-to this macro; you do not need to handle it.\n-@end defmac\n-\n-@defmac REG_CLASS_FROM_CONSTRAINT (@var{char}, @var{str})\n-Like @code{REG_CLASS_FROM_LETTER}, but you also get the constraint string\n-passed in @var{str}, so that you can use suffixes to distinguish between\n-different variants.\n-@end defmac\n-\n-@defmac CONST_OK_FOR_LETTER_P (@var{value}, @var{c})\n-A C expression that defines the machine-dependent operand constraint\n-letters (@samp{I}, @samp{J}, @samp{K}, @dots{} @samp{P}) that specify\n-particular ranges of integer values.  If @var{c} is one of those\n-letters, the expression should check that @var{value}, an integer, is in\n-the appropriate range and return 1 if so, 0 otherwise.  If @var{c} is\n-not one of those letters, the value should be 0 regardless of\n-@var{value}.\n-@end defmac\n-\n-@defmac CONST_OK_FOR_CONSTRAINT_P (@var{value}, @var{c}, @var{str})\n-Like @code{CONST_OK_FOR_LETTER_P}, but you also get the constraint\n-string passed in @var{str}, so that you can use suffixes to distinguish\n-between different variants.\n-@end defmac\n-\n-@defmac CONST_DOUBLE_OK_FOR_LETTER_P (@var{value}, @var{c})\n-A C expression that defines the machine-dependent operand constraint\n-letters that specify particular ranges of @code{const_double} values\n-(@samp{G} or @samp{H}).\n-\n-If @var{c} is one of those letters, the expression should check that\n-@var{value}, an RTX of code @code{const_double}, is in the appropriate\n-range and return 1 if so, 0 otherwise.  If @var{c} is not one of those\n-letters, the value should be 0 regardless of @var{value}.\n-\n-@code{const_double} is used for all floating-point constants and for\n-@code{DImode} fixed-point constants.  A given letter can accept either\n-or both kinds of values.  It can use @code{GET_MODE} to distinguish\n-between these kinds.\n-@end defmac\n-\n-@defmac CONST_DOUBLE_OK_FOR_CONSTRAINT_P (@var{value}, @var{c}, @var{str})\n-Like @code{CONST_DOUBLE_OK_FOR_LETTER_P}, but you also get the constraint\n-string passed in @var{str}, so that you can use suffixes to distinguish\n-between different variants.\n-@end defmac\n-\n-@defmac EXTRA_CONSTRAINT (@var{value}, @var{c})\n-A C expression that defines the optional machine-dependent constraint\n-letters that can be used to segregate specific types of operands, usually\n-memory references, for the target machine.  Any letter that is not\n-elsewhere defined and not matched by @code{REG_CLASS_FROM_LETTER} /\n-@code{REG_CLASS_FROM_CONSTRAINT}\n-may be used.  Normally this macro will not be defined.\n-\n-If it is required for a particular target machine, it should return 1\n-if @var{value} corresponds to the operand type represented by the\n-constraint letter @var{c}.  If @var{c} is not defined as an extra\n-constraint, the value returned should be 0 regardless of @var{value}.\n-\n-For example, on the ROMP, load instructions cannot have their output\n-in r0 if the memory reference contains a symbolic address.  Constraint\n-letter @samp{Q} is defined as representing a memory address that does\n-@emph{not} contain a symbolic address.  An alternative is specified with\n-a @samp{Q} constraint on the input and @samp{r} on the output.  The next\n-alternative specifies @samp{m} on the input and a register class that\n-does not include r0 on the output.\n-@end defmac\n-\n-@defmac EXTRA_CONSTRAINT_STR (@var{value}, @var{c}, @var{str})\n-Like @code{EXTRA_CONSTRAINT}, but you also get the constraint string passed\n-in @var{str}, so that you can use suffixes to distinguish between different\n-variants.\n-@end defmac\n-\n-@defmac EXTRA_MEMORY_CONSTRAINT (@var{c}, @var{str})\n-A C expression that defines the optional machine-dependent constraint\n-letters, amongst those accepted by @code{EXTRA_CONSTRAINT}, that should\n-be treated like memory constraints by the reload pass.\n-\n-It should return 1 if the operand type represented by the constraint\n-at the start of @var{str}, the first letter of which is the letter @var{c},\n-comprises a subset of all memory references including\n-all those whose address is simply a base register.  This allows the reload\n-pass to reload an operand, if it does not directly correspond to the operand\n-type of @var{c}, by copying its address into a base register.\n-\n-For example, on the S/390, some instructions do not accept arbitrary\n-memory references, but only those that do not make use of an index\n-register.  The constraint letter @samp{Q} is defined via\n-@code{EXTRA_CONSTRAINT} as representing a memory address of this type.\n-If the letter @samp{Q} is marked as @code{EXTRA_MEMORY_CONSTRAINT},\n-a @samp{Q} constraint can handle any memory operand, because the\n-reload pass knows it can be reloaded by copying the memory address\n-into a base register if required.  This is analogous to the way\n-an @samp{o} constraint can handle any memory operand.\n-@end defmac\n-\n-@defmac EXTRA_ADDRESS_CONSTRAINT (@var{c}, @var{str})\n-A C expression that defines the optional machine-dependent constraint\n-letters, amongst those accepted by @code{EXTRA_CONSTRAINT} /\n-@code{EXTRA_CONSTRAINT_STR}, that should\n-be treated like address constraints by the reload pass.\n-\n-It should return 1 if the operand type represented by the constraint\n-at the start of @var{str}, which starts with the letter @var{c}, comprises\n-a subset of all memory addresses including\n-all those that consist of just a base register.  This allows the reload\n-pass to reload an operand, if it does not directly correspond to the operand\n-type of @var{str}, by copying it into a base register.\n-\n-Any constraint marked as @code{EXTRA_ADDRESS_CONSTRAINT} can only\n-be used with the @code{address_operand} predicate.  It is treated\n-analogously to the @samp{p} constraint.\n-@end defmac\n-\n @node Stack and Calling\n @section Stack Layout and Calling Conventions\n @cindex calling conventions"}, {"sha": "cdd722d43aaed51f1f1fd0c651e6cf081cc5a898", "filename": "gcc/genoutput.c", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=b48e9677e5550d60c4f1b4ea05b88b150173ebe0", "patch": "@@ -197,8 +197,6 @@ static void gen_peephole (rtx, int);\n static void gen_expand (rtx, int);\n static void gen_split (rtx, int);\n \n-#ifdef USE_MD_CONSTRAINTS\n-\n struct constraint_data\n {\n   struct constraint_data *next_this_letter;\n@@ -217,14 +215,6 @@ constraints_by_letter_table[1 << CHAR_BIT];\n \n static int mdep_constraint_len (const char *, int, int);\n static void note_constraint (rtx, int);\n-\n-#else  /* !USE_MD_CONSTRAINTS */\n-\n-static void check_constraint_len (void);\n-static int constraint_len (const char *, int);\n-\n-#endif /* !USE_MD_CONSTRAINTS */\n-\n \f\n static void\n output_prologue (void)\n@@ -786,7 +776,6 @@ validate_insn_alternatives (struct data *d)\n \t      error_with_line (d->lineno,\n \t\t\t       \"character '%c' can only be used at the\"\n \t\t\t       \" beginning of a constraint string\", c);\n-#ifdef USE_MD_CONSTRAINTS\n \t    if (ISSPACE (c) || strchr (indep_constraints, c))\n \t      len = 1;\n \t    else if (ISDIGIT (c))\n@@ -799,18 +788,6 @@ validate_insn_alternatives (struct data *d)\n \t      }\n \t    else\n \t      len = mdep_constraint_len (p, d->lineno, start);\n-#else\n-\t    len = CONSTRAINT_LEN (c, p);\n-\n-\t    if (len < 1 || (len > 1 && strchr (\",#*+=&%!0123456789\", c)))\n-\t      {\n-\t\terror_with_line (d->lineno,\n-\t\t\t\t \"invalid length %d for char '%c' in\"\n-\t\t\t\t \" alternative %d of operand %d\",\n-\t\t\t\t len, c, which_alternative, start);\n-\t\tlen = 1;\n-\t      }\n-#endif\n \n \t    if (c == ',')\n \t      {\n@@ -914,9 +891,6 @@ gen_insn (rtx insn, int lineno)\n   d->n_operands = stats.num_insn_operands;\n   d->n_dups = stats.num_dups;\n \n-#ifndef USE_MD_CONSTRAINTS\n-  check_constraint_len ();\n-#endif\n   validate_insn_operands (d);\n   validate_insn_alternatives (d);\n   validate_optab_operands (d);\n@@ -1106,14 +1080,12 @@ main (int argc, char **argv)\n \t  gen_split (desc, line_no);\n \t  break;\n \n-#ifdef USE_MD_CONSTRAINTS\n \tcase DEFINE_CONSTRAINT:\n \tcase DEFINE_REGISTER_CONSTRAINT:\n \tcase DEFINE_ADDRESS_CONSTRAINT:\n \tcase DEFINE_MEMORY_CONSTRAINT:\n \t  note_constraint (desc, line_no);\n \t  break;\n-#endif\n \n \tdefault:\n \t  break;\n@@ -1169,8 +1141,6 @@ strip_whitespace (const char *s)\n   return q;\n }\n \n-#ifdef USE_MD_CONSTRAINTS\n-\n /* Record just enough information about a constraint to allow checking\n    of operand constraint strings above, in validate_insn_alternatives.\n    Does not validate most properties of the constraint itself; does\n@@ -1261,39 +1231,3 @@ mdep_constraint_len (const char *s, int lineno, int opno)\n   message_with_line (lineno, \"note:  in operand %d\", opno);\n   return 1; /* safe */\n }\n-\n-#else\n-/* Verify that DEFAULT_CONSTRAINT_LEN is used properly and not\n-   tampered with.  This isn't bullet-proof, but it should catch\n-   most genuine mistakes.  */\n-static void\n-check_constraint_len (void)\n-{\n-  const char *p;\n-  int d;\n-\n-  for (p = \",#*+=&%!1234567890\"; *p; p++)\n-    for (d = -9; d < 9; d++)\n-      gcc_assert (constraint_len (p, d) == d);\n-}\n-\n-static int\n-constraint_len (const char *p, int genoutput_default_constraint_len)\n-{\n-  /* Check that we still match defaults.h .  First we do a generation-time\n-     check that fails if the value is not the expected one...  */\n-  gcc_assert (DEFAULT_CONSTRAINT_LEN (*p, p) == 1);\n-  /* And now a compile-time check that should give a diagnostic if the\n-     definition doesn't exactly match.  */\n-#define DEFAULT_CONSTRAINT_LEN(C,STR) 1\n-  /* Now re-define DEFAULT_CONSTRAINT_LEN so that we can verify it is\n-     being used.  */\n-#undef DEFAULT_CONSTRAINT_LEN\n-#define DEFAULT_CONSTRAINT_LEN(C,STR) \\\n-  ((C) != *p || STR != p ? -1 : genoutput_default_constraint_len)\n-  return CONSTRAINT_LEN (*p, p);\n-  /* And set it back.  */\n-#undef DEFAULT_CONSTRAINT_LEN\n-#define DEFAULT_CONSTRAINT_LEN(C,STR) 1\n-}\n-#endif"}, {"sha": "51b90676de37fe407dc91ec8b30ccbdf8408f521", "filename": "gcc/system.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=b48e9677e5550d60c4f1b4ea05b88b150173ebe0", "patch": "@@ -928,7 +928,9 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tUSE_COMMON_FOR_ONE_ONLY IFCVT_EXTRA_FIELDS IFCVT_INIT_EXTRA_FIELDS \\\n \tCASE_USE_BIT_TESTS FIXUNS_TRUNC_LIKE_FIX_TRUNC                     \\\n         GO_IF_MODE_DEPENDENT_ADDRESS DELAY_SLOTS_FOR_EPILOGUE              \\\n-        ELIGIBLE_FOR_EPILOGUE_DELAY TARGET_C99_FUNCTIONS TARGET_HAS_SINCOS\n+        ELIGIBLE_FOR_EPILOGUE_DELAY TARGET_C99_FUNCTIONS TARGET_HAS_SINCOS \\\n+\tREG_CLASS_FROM_LETTER CONST_OK_FOR_LETTER_P\t\t\t   \\\n+\tCONST_DOUBLE_OK_FOR_LETTER_P EXTRA_CONSTRAINT\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "e455211bac07c6882784b818c0c7765ea88da307", "filename": "gcc/target.def", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e9677e5550d60c4f1b4ea05b88b150173ebe0/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=b48e9677e5550d60c4f1b4ea05b88b150173ebe0", "patch": "@@ -4739,10 +4739,9 @@ command options have been applied.\\n\\\n If the usage of an entire class of registers depends on the target\\n\\\n flags, you may indicate this to GCC by using this macro to modify\\n\\\n @code{fixed_regs} and @code{call_used_regs} to 1 for each of the\\n\\\n-registers in the classes which should not be used by GCC@.  Also define\\n\\\n-the macro @code{REG_CLASS_FROM_LETTER} / @code{REG_CLASS_FROM_CONSTRAINT}\\n\\\n-to return @code{NO_REGS} if it\\n\\\n-is called with a letter for a class that shouldn't be used.\\n\\\n+registers in the classes which should not be used by GCC@.  Also make\\n\\\n+@code{define_register_constraint}s return @code{NO_REGS} for constraints\\n\\\n+that shouldn't be used.\\n\\\n \\n\\\n (However, if this class is not included in @code{GENERAL_REGS} and all\\n\\\n of the insn patterns whose constraints permit this class are\\n\\"}]}