{"sha": "cfd8e493bc2b7307c3d1b2d93ea08bd3c10c666c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZkOGU0OTNiYzJiNzMwN2MzZDFiMmQ5M2VhMDhiZDNjMTBjNjY2Yw==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2004-09-06T23:55:44Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2004-09-06T23:55:44Z"}, "message": "Another MIPS vector cleanup patch, fix bad type attribute for FP zero moves.\n\n* config/mips/mips.md (movsf_hardfloat, movdf_hardfloat_64bit,\nmovdf_hardfloat_32bit): Split fG into two alternatives.\n(movv2sf_hardfloat_64bit): Split fYG into two alternatives.\n\nFrom-SVN: r87132", "tree": {"sha": "fae3a9cfbcbd5a1f31c5976153f98e6ad0cfaf08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fae3a9cfbcbd5a1f31c5976153f98e6ad0cfaf08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfd8e493bc2b7307c3d1b2d93ea08bd3c10c666c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfd8e493bc2b7307c3d1b2d93ea08bd3c10c666c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfd8e493bc2b7307c3d1b2d93ea08bd3c10c666c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfd8e493bc2b7307c3d1b2d93ea08bd3c10c666c/comments", "author": null, "committer": null, "parents": [{"sha": "83f84d6c4e4f885d89afad11a01607e71d0a7d45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83f84d6c4e4f885d89afad11a01607e71d0a7d45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83f84d6c4e4f885d89afad11a01607e71d0a7d45"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "62fb710a9ad37f903ca727495614e066721a6b56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfd8e493bc2b7307c3d1b2d93ea08bd3c10c666c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfd8e493bc2b7307c3d1b2d93ea08bd3c10c666c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfd8e493bc2b7307c3d1b2d93ea08bd3c10c666c", "patch": "@@ -1,5 +1,9 @@\n 2004-09-06  James E Wilson  <wilson@specifixinc.com>\n \n+\t* config/mips/mips.md (movsf_hardfloat, movdf_hardfloat_64bit,\n+\tmovdf_hardfloat_32bit): Split fG into two alternatives.\n+\t(movv2sf_hardfloat_64bit): Split fYG into two alternatives.\n+\n \t* emit-rtl.c (try_split): Check INSN_P before may_trap_p call.\n \n 2004-09-06  Eric Botcazou  <ebotcazou@libertysurf.fr>"}, {"sha": "9390ed03b2170073bf13cebc7c7b6277b1d1ab7d", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfd8e493bc2b7307c3d1b2d93ea08bd3c10c666c/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfd8e493bc2b7307c3d1b2d93ea08bd3c10c666c/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=cfd8e493bc2b7307c3d1b2d93ea08bd3c10c666c", "patch": "@@ -3567,15 +3567,15 @@ beq\\t%2,%.,1b\\;\\\n })\n \n (define_insn \"*movsf_hardfloat\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,f,m,*f,*d,*d,*d,*m\")\n-\t(match_operand:SF 1 \"move_operand\" \"f,G,m,fG,*d,*f,*G*d,*m,*d\"))]\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,f,m,m,*f,*d,*d,*d,*m\")\n+\t(match_operand:SF 1 \"move_operand\" \"f,G,m,f,G,*d,*f,*G*d,*m,*d\"))]\n   \"TARGET_HARD_FLOAT\n    && (register_operand (operands[0], SFmode)\n        || reg_or_0_operand (operands[1], SFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"fmove,xfer,fpload,fpstore,xfer,xfer,arith,load,store\")\n+  [(set_attr \"type\"\t\"fmove,xfer,fpload,fpstore,store,xfer,xfer,arith,load,store\")\n    (set_attr \"mode\"\t\"SF\")\n-   (set_attr \"length\"\t\"4,4,*,*,4,4,4,*,*\")])\n+   (set_attr \"length\"\t\"4,4,*,*,*,4,4,4,*,*\")])\n \n (define_insn \"*movsf_softfloat\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=d,d,m\")\n@@ -3612,26 +3612,26 @@ beq\\t%2,%.,1b\\;\\\n })\n \n (define_insn \"*movdf_hardfloat_64bit\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,m,*f,*d,*d,*d,*m\")\n-\t(match_operand:DF 1 \"move_operand\" \"f,G,m,fG,*d,*f,*d*G,*m,*d\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,m,m,*f,*d,*d,*d,*m\")\n+\t(match_operand:DF 1 \"move_operand\" \"f,G,m,f,G,*d,*f,*d*G,*m,*d\"))]\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && TARGET_64BIT\n    && (register_operand (operands[0], DFmode)\n        || reg_or_0_operand (operands[1], DFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"fmove,xfer,fpload,fpstore,xfer,xfer,arith,load,store\")\n+  [(set_attr \"type\"\t\"fmove,xfer,fpload,fpstore,store,xfer,xfer,arith,load,store\")\n    (set_attr \"mode\"\t\"DF\")\n-   (set_attr \"length\"\t\"4,4,*,*,4,4,4,*,*\")])\n+   (set_attr \"length\"\t\"4,4,*,*,*,4,4,4,*,*\")])\n \n (define_insn \"*movdf_hardfloat_32bit\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,m,*f,*d,*d,*d,*m\")\n-\t(match_operand:DF 1 \"move_operand\" \"f,G,m,fG,*d,*f,*d*G,*m,*d\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,m,m,*f,*d,*d,*d,*m\")\n+\t(match_operand:DF 1 \"move_operand\" \"f,G,m,f,G,*d,*f,*d*G,*m,*d\"))]\n   \"TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT && !TARGET_64BIT\n    && (register_operand (operands[0], DFmode)\n        || reg_or_0_operand (operands[1], DFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\"\t\"fmove,xfer,fpload,fpstore,xfer,xfer,arith,load,store\")\n+  [(set_attr \"type\"\t\"fmove,xfer,fpload,fpstore,store,xfer,xfer,arith,load,store\")\n    (set_attr \"mode\"\t\"DF\")\n-   (set_attr \"length\"\t\"4,8,*,*,8,8,8,*,*\")])\n+   (set_attr \"length\"\t\"4,8,*,*,*,8,8,8,*,*\")])\n \n (define_insn \"*movdf_softfloat\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=d,d,m,d,f,f\")\n@@ -3704,16 +3704,16 @@ beq\\t%2,%.,1b\\;\\\n })\n \n (define_insn \"movv2sf_hardfloat_64bit\"\n-  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"=f,f,f,m,*f,*d,*d,*d,*m\")\n-\t(match_operand:V2SF 1 \"move_operand\" \"f,YG,m,fYG,*d,*f,*d*YG,*m,*d\"))]\n+  [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"=f,f,f,m,m,*f,*d,*d,*d,*m\")\n+\t(match_operand:V2SF 1 \"move_operand\" \"f,YG,m,f,YG,*d,*f,*d*YG,*m,*d\"))]\n   \"TARGET_PAIRED_SINGLE_FLOAT\n    && TARGET_64BIT\n    && (register_operand (operands[0], V2SFmode)\n        || reg_or_0_operand (operands[1], V2SFmode))\"\n   { return mips_output_move (operands[0], operands[1]); }\n-  [(set_attr \"type\" \"fmove,xfer,fpload,fpstore,xfer,xfer,arith,load,store\")\n+  [(set_attr \"type\" \"fmove,xfer,fpload,fpstore,store,xfer,xfer,arith,load,store\")\n    (set_attr \"mode\" \"SF\")\n-   (set_attr \"length\" \"4,4,*,*,4,4,4,*,*\")])\n+   (set_attr \"length\" \"4,4,*,*,*,4,4,4,*,*\")])\n \n ;; The HI and LO registers are not truly independent.  If we move an mthi\n ;; instruction before an mflo instruction, it will make the result of the"}]}