{"sha": "3a2794abdb6a38e8e17108ffbd326b3af910f0ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EyNzk0YWJkYjZhMzhlOGUxNzEwOGZmYmQzMjZiM2FmOTEwZjBhZQ==", "commit": {"author": {"name": "Lorenz Minder", "email": "lminder@gmx.net", "date": "2005-01-16T09:59:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-01-16T09:59:06Z"}, "message": "re PR libstdc++/19322 (std::isnan<>() is broken on FreeBSD)\n\n2005-01-16  Lorenz Minder  <lminder@gmx.net>\n\t    Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/19322\n\t* include/c_std/std_cmath.h: Define the C99 classification facilities\n\tdirectly inside namespace std:.\n\t* testsuite/26_numerics/cmath/19322.cc: New.\n\nCo-Authored-By: Paolo Carlini <pcarlini@suse.de>\n\nFrom-SVN: r93723", "tree": {"sha": "579a78f9e889c1d2e5d18bce58d218f0365f26c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/579a78f9e889c1d2e5d18bce58d218f0365f26c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a2794abdb6a38e8e17108ffbd326b3af910f0ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2794abdb6a38e8e17108ffbd326b3af910f0ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a2794abdb6a38e8e17108ffbd326b3af910f0ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2794abdb6a38e8e17108ffbd326b3af910f0ae/comments", "author": {"login": "lorinder", "id": 56462606, "node_id": "MDQ6VXNlcjU2NDYyNjA2", "avatar_url": "https://avatars.githubusercontent.com/u/56462606?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lorinder", "html_url": "https://github.com/lorinder", "followers_url": "https://api.github.com/users/lorinder/followers", "following_url": "https://api.github.com/users/lorinder/following{/other_user}", "gists_url": "https://api.github.com/users/lorinder/gists{/gist_id}", "starred_url": "https://api.github.com/users/lorinder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lorinder/subscriptions", "organizations_url": "https://api.github.com/users/lorinder/orgs", "repos_url": "https://api.github.com/users/lorinder/repos", "events_url": "https://api.github.com/users/lorinder/events{/privacy}", "received_events_url": "https://api.github.com/users/lorinder/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6435c34baf300afa9f1b13418ebbe0d3a086c404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6435c34baf300afa9f1b13418ebbe0d3a086c404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6435c34baf300afa9f1b13418ebbe0d3a086c404"}], "stats": {"total": 105, "additions": 71, "deletions": 34}, "files": [{"sha": "c19c1e61d3e8225c66f3eaf5b24caf418001162c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2794abdb6a38e8e17108ffbd326b3af910f0ae/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2794abdb6a38e8e17108ffbd326b3af910f0ae/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3a2794abdb6a38e8e17108ffbd326b3af910f0ae", "patch": "@@ -1,3 +1,11 @@\n+2005-01-16  Lorenz Minder  <lminder@gmx.net>\n+\t    Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/19322\n+\t* include/c_std/std_cmath.h: Define the C99 classification facilities\n+\tdirectly inside namespace std:.\n+\t* testsuite/26_numerics/cmath/19322.cc: New.\n+\n 2005-01-15  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/os/aix/os_defines.h (_G_USING_THUNKS): Delete."}, {"sha": "50ee582c7a3462fd29da9806bc0ba1fc4975d9b5", "filename": "libstdc++-v3/include/c_std/std_cmath.h", "status": "modified", "additions": 16, "deletions": 34, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2794abdb6a38e8e17108ffbd326b3af910f0ae/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2794abdb6a38e8e17108ffbd326b3af910f0ae/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h?ref=3a2794abdb6a38e8e17108ffbd326b3af910f0ae", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- C forwarding header.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -510,80 +510,62 @@ namespace __gnu_cxx\n #undef islessequal\n #undef islessgreater\n #undef isunordered\n-#endif /* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */\n-#endif\n \n-#if _GLIBCXX_USE_C99_MATH\n-#if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC\n-namespace __gnu_cxx\n+namespace std\n {\n   template<typename _Tp>\n     int\n-    fpclassify(_Tp __f) { return __capture_fpclassify(__f); }\n+    fpclassify(_Tp __f) { return __gnu_cxx::__capture_fpclassify(__f); }\n \n   template<typename _Tp>\n     int\n-    isfinite(_Tp __f) { return __capture_isfinite(__f); }\n+    isfinite(_Tp __f) { return __gnu_cxx::__capture_isfinite(__f); }\n \n   template<typename _Tp>\n     int\n-    isinf(_Tp __f) { return __capture_isinf(__f); }\n+    isinf(_Tp __f) { return __gnu_cxx::__capture_isinf(__f); }\n \n   template<typename _Tp>\n     int\n-    isnan(_Tp __f) { return __capture_isnan(__f); }\n+    isnan(_Tp __f) { return __gnu_cxx::__capture_isnan(__f); }\n \n   template<typename _Tp>\n     int\n-    isnormal(_Tp __f) { return __capture_isnormal(__f); }\n+    isnormal(_Tp __f) { return __gnu_cxx::__capture_isnormal(__f); }\n \n   template<typename _Tp>\n     int\n-    signbit(_Tp __f) { return __capture_signbit(__f); }\n+    signbit(_Tp __f) { return __gnu_cxx::__capture_signbit(__f); }\n \n   template<typename _Tp>\n     int\n-    isgreater(_Tp __f1, _Tp __f2) { return __capture_isgreater(__f1, __f2); }\n+    isgreater(_Tp __f1, _Tp __f2)\n+    { return __gnu_cxx::__capture_isgreater(__f1, __f2); }\n \n   template<typename _Tp>\n     int\n     isgreaterequal(_Tp __f1, _Tp __f2)\n-    { return __capture_isgreaterequal(__f1, __f2); }\n+    { return __gnu_cxx::__capture_isgreaterequal(__f1, __f2); }\n \n   template<typename _Tp>\n     int\n-    isless(_Tp __f1, _Tp __f2) { return __capture_isless(__f1, __f2); }\n+    isless(_Tp __f1, _Tp __f2)\n+    { return __gnu_cxx::__capture_isless(__f1, __f2); }\n \n   template<typename _Tp>\n     int\n     islessequal(_Tp __f1, _Tp __f2)\n-    { return __capture_islessequal(__f1, __f2); }\n+    { return __gnu_cxx::__capture_islessequal(__f1, __f2); }\n \n   template<typename _Tp>\n     int\n     islessgreater(_Tp __f1, _Tp __f2)\n-    { return __capture_islessgreater(__f1, __f2); }\n+    { return __gnu_cxx::__capture_islessgreater(__f1, __f2); }\n \n   template<typename _Tp>\n     int\n     isunordered(_Tp __f1, _Tp __f2)\n-    { return __capture_isunordered(__f1, __f2); }\n-}\n-\n-namespace std\n-{\n-  using __gnu_cxx::fpclassify;\n-  using __gnu_cxx::isfinite;\n-  using __gnu_cxx::isinf;\n-  using __gnu_cxx::isnan;\n-  using __gnu_cxx::isnormal;\n-  using __gnu_cxx::signbit;\n-  using __gnu_cxx::isgreater;\n-  using __gnu_cxx::isgreaterequal;\n-  using __gnu_cxx::isless;\n-  using __gnu_cxx::islessequal;\n-  using __gnu_cxx::islessgreater;\n-  using __gnu_cxx::isunordered;\n+    { return __gnu_cxx::__capture_isunordered(__f1, __f2); }\n }\n #endif /* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */\n #endif"}, {"sha": "1057114da4c5f200bb6eeaa7107be2abea569396", "filename": "libstdc++-v3/testsuite/26_numerics/cmath/19322.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2794abdb6a38e8e17108ffbd326b3af910f0ae/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2F19322.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2794abdb6a38e8e17108ffbd326b3af910f0ae/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2F19322.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2F19322.cc?ref=3a2794abdb6a38e8e17108ffbd326b3af910f0ae", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cmath>\n+#include <testsuite_hooks.h>\n+\n+#if _GLIBCXX_USE_C99\n+// libstdc++/19322\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  VERIFY( !std::isnan(3.0) );\n+}\n+#endif\n+\n+int main()\n+{\n+#if _GLIBCXX_USE_C99\n+  test01();\n+#endif\n+  return 0;\n+}"}]}