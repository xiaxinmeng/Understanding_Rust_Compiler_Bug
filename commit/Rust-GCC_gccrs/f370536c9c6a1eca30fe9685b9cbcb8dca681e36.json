{"sha": "f370536c9c6a1eca30fe9685b9cbcb8dca681e36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM3MDUzNmM5YzZhMWVjYTMwZmU5Njg1YjljYmNiOGRjYTY4MWUzNg==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-11-21T06:15:00Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-11-21T06:15:00Z"}, "message": "split up variables to use rtx_insn * more\n\ngcc/ChangeLog:\n\n2016-11-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* config/aarch64/aarch64.c (aarch64_emit_unlikely_jump): split\n\tup variables to make some rtx_insn *.\n\t* config/alpha/alpha.c (emit_unlikely_jump): Likewise.\n\t* config/arc/arc.c: Likewise.\n\t* config/arm/arm.c: Likewise.\n\t* config/mn10300/mn10300.c (mn10300_legitimize_pic_address):\n\tLikewise.\n\t* config/rs6000/rs6000.c (rs6000_expand_split_stack_prologue):\n\tLikewise.\n\t* config/spu/spu.c (spu_emit_branch_hint): Likewise.\n\nFrom-SVN: r242650", "tree": {"sha": "24ad242f10b1cf079626ce1eecf038554e53022c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24ad242f10b1cf079626ce1eecf038554e53022c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f370536c9c6a1eca30fe9685b9cbcb8dca681e36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f370536c9c6a1eca30fe9685b9cbcb8dca681e36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f370536c9c6a1eca30fe9685b9cbcb8dca681e36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/comments", "author": null, "committer": null, "parents": [{"sha": "d8485bdb18df66b06cfee57503cfbf35cef591e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8485bdb18df66b06cfee57503cfbf35cef591e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8485bdb18df66b06cfee57503cfbf35cef591e7"}], "stats": {"total": 63, "additions": 36, "deletions": 27}, "files": [{"sha": "b9f2dc814f8eca50190a5b5d56f743c08a928f86", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f370536c9c6a1eca30fe9685b9cbcb8dca681e36", "patch": "@@ -1,3 +1,16 @@\n+2016-11-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* config/aarch64/aarch64.c (aarch64_emit_unlikely_jump): split\n+\tup variables to make some rtx_insn *.\n+\t* config/alpha/alpha.c (emit_unlikely_jump): Likewise.\n+\t* config/arc/arc.c: Likewise.\n+\t* config/arm/arm.c: Likewise.\n+\t* config/mn10300/mn10300.c (mn10300_legitimize_pic_address):\n+\tLikewise.\n+\t* config/rs6000/rs6000.c (rs6000_expand_split_stack_prologue):\n+\tLikewise.\n+\t* config/spu/spu.c (spu_emit_branch_hint): Likewise.\n+\n 2016-11-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* config/arm/arm.c (legitimize_pic_address): Change to use"}, {"sha": "efcba836bdb8b59c2451b5f6025e6564d4df111d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f370536c9c6a1eca30fe9685b9cbcb8dca681e36", "patch": "@@ -11476,8 +11476,8 @@ aarch64_emit_unlikely_jump (rtx insn)\n {\n   int very_unlikely = REG_BR_PROB_BASE / 100 - 1;\n \n-  insn = emit_jump_insn (insn);\n-  add_int_reg_note (insn, REG_BR_PROB, very_unlikely);\n+  rtx_insn *jump = emit_jump_insn (insn);\n+  add_int_reg_note (jump, REG_BR_PROB, very_unlikely);\n }\n \n /* Expand a compare and swap pattern.  */"}, {"sha": "6c63a8f96aa46f6b1e91eb8b6f8936639cec334d", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f370536c9c6a1eca30fe9685b9cbcb8dca681e36", "patch": "@@ -4320,11 +4320,9 @@ static void\n emit_unlikely_jump (rtx cond, rtx label)\n {\n   int very_unlikely = REG_BR_PROB_BASE / 100 - 1;\n-  rtx x;\n-\n-  x = gen_rtx_IF_THEN_ELSE (VOIDmode, cond, label, pc_rtx);\n-  x = emit_jump_insn (gen_rtx_SET (pc_rtx, x));\n-  add_int_reg_note (x, REG_BR_PROB, very_unlikely);\n+  rtx x = gen_rtx_IF_THEN_ELSE (VOIDmode, cond, label, pc_rtx);\n+  rtx_insn *insn = emit_jump_insn (gen_rtx_SET (pc_rtx, x));\n+  add_int_reg_note (insn, REG_BR_PROB, very_unlikely);\n }\n \n /* A subroutine of the atomic operation splitters.  Emit a load-locked"}, {"sha": "c73668f2e34db4e0d1edb7a2dd61331061d2d9bf", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=f370536c9c6a1eca30fe9685b9cbcb8dca681e36", "patch": "@@ -9553,8 +9553,8 @@ emit_unlikely_jump (rtx insn)\n {\n   int very_unlikely = REG_BR_PROB_BASE / 100 - 1;\n \n-  insn = emit_jump_insn (insn);\n-  add_int_reg_note (insn, REG_BR_PROB, very_unlikely);\n+  rtx_insn *jump = emit_jump_insn (insn);\n+  add_int_reg_note (jump, REG_BR_PROB, very_unlikely);\n }\n \n /* Expand code to perform a 8 or 16-bit compare and swap by doing"}, {"sha": "69c4a2bba81f654911f5571c1be2477d8de92bcf", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f370536c9c6a1eca30fe9685b9cbcb8dca681e36", "patch": "@@ -26936,8 +26936,8 @@ emit_unlikely_jump (rtx insn)\n {\n   int very_unlikely = REG_BR_PROB_BASE / 100 - 1;\n \n-  insn = emit_jump_insn (insn);\n-  add_int_reg_note (insn, REG_BR_PROB, very_unlikely);\n+  rtx_insn *jump = emit_jump_insn (insn);\n+  add_int_reg_note (jump, REG_BR_PROB, very_unlikely);\n }\n \n /* Expand a compare and swap pattern.  */"}, {"sha": "cfc8604f9c83a1baf36018cb14a11c3fa706e96c", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=f370536c9c6a1eca30fe9685b9cbcb8dca681e36", "patch": "@@ -1860,6 +1860,7 @@ rtx\n mn10300_legitimize_pic_address (rtx orig, rtx reg)\n {\n   rtx x;\n+  rtx_insn *insn;\n \n   if (GET_CODE (orig) == LABEL_REF\n       || (GET_CODE (orig) == SYMBOL_REF\n@@ -1873,7 +1874,7 @@ mn10300_legitimize_pic_address (rtx orig, rtx reg)\n       x = gen_rtx_CONST (SImode, x);\n       emit_move_insn (reg, x);\n \n-      x = emit_insn (gen_addsi3 (reg, reg, pic_offset_table_rtx));\n+      insn = emit_insn (gen_addsi3 (reg, reg, pic_offset_table_rtx));\n     }\n   else if (GET_CODE (orig) == SYMBOL_REF)\n     {\n@@ -1885,12 +1886,12 @@ mn10300_legitimize_pic_address (rtx orig, rtx reg)\n       x = gen_rtx_PLUS (SImode, pic_offset_table_rtx, x);\n       x = gen_const_mem (SImode, x);\n \n-      x = emit_move_insn (reg, x);\n+      insn = emit_move_insn (reg, x);\n     }\n   else\n     return orig;\n \n-  set_unique_reg_note (x, REG_EQUAL, orig);\n+  set_unique_reg_note (insn, REG_EQUAL, orig);\n   return reg;\n }\n \n@@ -3163,7 +3164,7 @@ mn10300_bundle_liw (void)\n    Insert a SETLB insn just before LABEL.  */\n \n static void\n-mn10300_insert_setlb_lcc (rtx_insn *label, rtx branch)\n+mn10300_insert_setlb_lcc (rtx_insn *label, rtx_insn *branch)\n {\n   rtx lcc, comparison, cmp_reg;\n "}, {"sha": "fa62e2e50ea2bff96fa9cbc51ae70d8781f2627a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f370536c9c6a1eca30fe9685b9cbcb8dca681e36", "patch": "@@ -24670,11 +24670,9 @@ static void\n emit_unlikely_jump (rtx cond, rtx label)\n {\n   int very_unlikely = REG_BR_PROB_BASE / 100 - 1;\n-  rtx x;\n-\n-  x = gen_rtx_IF_THEN_ELSE (VOIDmode, cond, label, pc_rtx);\n-  x = emit_jump_insn (gen_rtx_SET (pc_rtx, x));\n-  add_int_reg_note (x, REG_BR_PROB, very_unlikely);\n+  rtx x = gen_rtx_IF_THEN_ELSE (VOIDmode, cond, label, pc_rtx);\n+  rtx_insn *insn = emit_jump_insn (gen_rtx_SET (pc_rtx, x));\n+  add_int_reg_note (insn, REG_BR_PROB, very_unlikely);\n }\n \n /* A subroutine of the atomic operation splitters.  Emit a load-locked\n@@ -30599,10 +30597,10 @@ rs6000_expand_split_stack_prologue (void)\n \t\t\t       gen_rtx_GEU (VOIDmode, compare, const0_rtx),\n \t\t\t       gen_rtx_LABEL_REF (VOIDmode, ok_label),\n \t\t\t       pc_rtx);\n-  jump = emit_jump_insn (gen_rtx_SET (pc_rtx, jump));\n-  JUMP_LABEL (jump) = ok_label;\n+  insn = emit_jump_insn (gen_rtx_SET (pc_rtx, jump));\n+  JUMP_LABEL (insn) = ok_label;\n   /* Mark the jump as very likely to be taken.  */\n-  add_int_reg_note (jump, REG_BR_PROB,\n+  add_int_reg_note (insn, REG_BR_PROB,\n \t\t    REG_BR_PROB_BASE - REG_BR_PROB_BASE / 100);\n \n   lr = gen_rtx_REG (Pmode, LR_REGNO);"}, {"sha": "e8a3ed9462bef1f721196f3618fe429611762856", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f370536c9c6a1eca30fe9685b9cbcb8dca681e36/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=f370536c9c6a1eca30fe9685b9cbcb8dca681e36", "patch": "@@ -2087,7 +2087,6 @@ static void\n spu_emit_branch_hint (rtx_insn *before, rtx_insn *branch, rtx target,\n \t\t      int distance, sbitmap blocks)\n {\n-  rtx branch_label = 0;\n   rtx_insn *hint;\n   rtx_insn *insn;\n   rtx_jump_table_data *table;\n@@ -2104,14 +2103,14 @@ spu_emit_branch_hint (rtx_insn *before, rtx_insn *branch, rtx target,\n   if (NOTE_INSN_BASIC_BLOCK_P (before))\n     before = NEXT_INSN (before);\n \n-  branch_label = gen_label_rtx ();\n+  rtx_code_label *branch_label = gen_label_rtx ();\n   LABEL_NUSES (branch_label)++;\n   LABEL_PRESERVE_P (branch_label) = 1;\n   insn = emit_label_before (branch_label, branch);\n-  branch_label = gen_rtx_LABEL_REF (VOIDmode, branch_label);\n+  rtx branch_label_ref = gen_rtx_LABEL_REF (VOIDmode, branch_label);\n   bitmap_set_bit (blocks, BLOCK_FOR_INSN (branch)->index);\n \n-  hint = emit_insn_before (gen_hbr (branch_label, target), before);\n+  hint = emit_insn_before (gen_hbr (branch_label_ref, target), before);\n   recog_memoized (hint);\n   INSN_LOCATION (hint) = INSN_LOCATION (branch);\n   HINTED_P (branch) = 1;"}]}