{"sha": "9aa9ba95ea3d4800974135da85fd4d9cd310b69e", "node_id": "C_kwDOANBUbNoAKDlhYTliYTk1ZWEzZDQ4MDA5NzQxMzVkYTg1ZmQ0ZDljZDMxMGI2OWU", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-04-12T21:34:48Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-19T14:05:33Z"}, "message": "[Ada] Avoid copy operation for returns involving function calls\n\ngcc/ada/\n\n\t* gcc-interface/decl.cc (gnat_to_gnu_entity) <E_Constant>: Deal with\n\ta constant related to a return in a function specially.\n\t* gcc-interface/trans.cc (Call_to_gnu): Use return slot optimization\n\tif the target is a return object.\n\t(gnat_to_gnu) <N_Object_Declaration>: Deal with a constant related\n\tto a return in a function specially.", "tree": {"sha": "eba33c668f8d7fc1dd87ab2a9d8e80c1c1cd40b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eba33c668f8d7fc1dd87ab2a9d8e80c1c1cd40b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9aa9ba95ea3d4800974135da85fd4d9cd310b69e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa9ba95ea3d4800974135da85fd4d9cd310b69e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aa9ba95ea3d4800974135da85fd4d9cd310b69e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aa9ba95ea3d4800974135da85fd4d9cd310b69e/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4c84b82c5f903de6911157281a837481bca780e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c84b82c5f903de6911157281a837481bca780e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4c84b82c5f903de6911157281a837481bca780e"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "50d17f755622f9866deae72939a38cff4dff3849", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa9ba95ea3d4800974135da85fd4d9cd310b69e/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa9ba95ea3d4800974135da85fd4d9cd310b69e/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=9aa9ba95ea3d4800974135da85fd4d9cd310b69e", "patch": "@@ -630,6 +630,17 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n       break;\n \n     case E_Constant:\n+      /* If this is a constant related to a return in a function returning by\n+\t invisible reference without expression, get the return object.  */\n+      if (Is_Related_To_Func_Return (gnat_entity)\n+\t  && current_function_decl\n+\t  && TREE_ADDRESSABLE (TREE_TYPE (current_function_decl))\n+\t  && !gnu_expr)\n+\t{\n+\t  gnu_decl = DECL_RESULT (current_function_decl);\n+\t  break;\n+\t}\n+\n       /* Ignore constant definitions already marked with the error node.  See\n \t the N_Object_Declaration case of gnat_to_gnu for the rationale.  */\n       if (definition"}, {"sha": "e80200ee46abb564c394a8c0483906f680cef24e", "filename": "gcc/ada/gcc-interface/trans.cc", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9aa9ba95ea3d4800974135da85fd4d9cd310b69e/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9aa9ba95ea3d4800974135da85fd4d9cd310b69e/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.cc?ref=9aa9ba95ea3d4800974135da85fd4d9cd310b69e", "patch": "@@ -5281,6 +5281,15 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t\t   && return_slot_opt_for_pure_call_p (gnu_target, gnu_call))\n \t    op_code = INIT_EXPR;\n \n+\t  /* If this is the initialization of a return object in a function\n+\t     returning by invisible reference, we can always use the return\n+\t     slot optimization.  */\n+\t  else if (TREE_CODE (gnu_target) == INDIRECT_REF\n+\t\t   && TREE_CODE (TREE_OPERAND (gnu_target, 0)) == RESULT_DECL\n+\t\t   && current_function_decl\n+\t\t   && TREE_ADDRESSABLE (TREE_TYPE (current_function_decl)))\n+\t    op_code = INIT_EXPR;\n+\n \t  else\n \t    op_code = MODIFY_EXPR;\n \n@@ -6380,6 +6389,39 @@ gnat_to_gnu (Node_Id gnat_node)\n \t      || Is_Concurrent_Type (Etype (gnat_temp))))\n \tbreak;\n \n+      /* If this is a constant related to a return initialized by a reference\n+\t to a function call in a function returning by invisible reference:\n+\n+\t   type Ann is access all Result_Type;\n+\t   Rnn : constant Ann := Func'reference;\n+\t   [...]\n+\t   return Rnn.all;\n+\n+\t then elide the temporary by forwarding the return object to Func:\n+\n+\t   *<retval> = Func (); [return slot optimization]\n+\t   [...]\n+\t   return <retval>;\n+\n+\t That's necessary if the result type needs finalization because the\n+\t temporary would never be adjusted as Expand_Simple_Function_Return\n+\t also elides the temporary in this case.  */\n+      if (Ekind (gnat_temp) == E_Constant\n+\t  && Is_Related_To_Func_Return (gnat_temp)\n+\t  && Nkind (Expression (gnat_node)) == N_Reference\n+\t  && Nkind (Prefix (Expression (gnat_node))) == N_Function_Call\n+\t  && current_function_decl\n+\t  && TREE_ADDRESSABLE (TREE_TYPE (current_function_decl)))\n+\t{\n+\t  gnu_result = gnat_to_gnu_entity (gnat_temp, NULL_TREE, true);\n+\t  gnu_result = build_unary_op (INDIRECT_REF, NULL_TREE, gnu_result);\n+\t  gnu_result\n+\t    = Call_to_gnu (Prefix (Expression (gnat_node)),\n+\t\t\t   &gnu_result_type, gnu_result,\n+\t\t\t   NOT_ATOMIC, false);\n+\t  break;\n+\t}\n+\n       if (Present (Expression (gnat_node))\n \t  && !(kind == N_Object_Declaration && No_Initialization (gnat_node))\n \t  && (!type_annotate_only"}]}