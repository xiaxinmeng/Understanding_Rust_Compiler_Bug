{"sha": "2e0f134153b4ac30da86de0a918fadcd4675a153", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUwZjEzNDE1M2I0YWMzMGRhODZkZTBhOTE4ZmFkY2Q0Njc1YTE1Mw==", "commit": {"author": {"name": "Zhenqiang Chen", "email": "zhenqiang.chen@linaro.org", "date": "2014-11-17T05:38:41Z"}, "committer": {"name": "Zhenqiang Chen", "email": "zqchen@gcc.gnu.org", "date": "2014-11-17T05:38:41Z"}, "message": "target.def (gen_ccmp_first, [...]): Add two new hooks.\n\n2014-11-17  Zhenqiang Chen  <zhenqiang.chen@linaor.org>\n\n\t* target.def (gen_ccmp_first, gen_ccmp_first): Add two new hooks.\n\t* doc/tm.texi.in (TARGET_GEN_CCMP_FIRST, TARGET_GEN_CCMP_NEXT): New.\n\t* doc/tm.texi (TARGET_GEN_CCMP_FIRST, TARGET_GEN_CCMP_NEXT): New.\n\nFrom-SVN: r217639", "tree": {"sha": "93399df0b18fa5bdd993a2d8487f3182c6dd57c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93399df0b18fa5bdd993a2d8487f3182c6dd57c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e0f134153b4ac30da86de0a918fadcd4675a153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0f134153b4ac30da86de0a918fadcd4675a153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e0f134153b4ac30da86de0a918fadcd4675a153", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e0f134153b4ac30da86de0a918fadcd4675a153/comments", "author": null, "committer": null, "parents": [{"sha": "c1c7f1fc21ff3b3ebbb8bf7eb91f68b2fec64d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1c7f1fc21ff3b3ebbb8bf7eb91f68b2fec64d60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1c7f1fc21ff3b3ebbb8bf7eb91f68b2fec64d60"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "d6423ffae16dffbfcf3f14452343fadd7eb647a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0f134153b4ac30da86de0a918fadcd4675a153/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0f134153b4ac30da86de0a918fadcd4675a153/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e0f134153b4ac30da86de0a918fadcd4675a153", "patch": "@@ -1,3 +1,9 @@\n+2014-11-17  Zhenqiang Chen  <zhenqiang.chen@linaor.org>\n+\n+\t* target.def (gen_ccmp_first, gen_ccmp_first): Add two new hooks.\n+\t* doc/tm.texi.in (TARGET_GEN_CCMP_FIRST, TARGET_GEN_CCMP_NEXT): New.\n+\t* doc/tm.texi (TARGET_GEN_CCMP_FIRST, TARGET_GEN_CCMP_NEXT): New.\n+\n 2014-11-16  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR middle-end/63790"}, {"sha": "c09c51030ef66a3b42cb446a7041ba3f69cc2596", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0f134153b4ac30da86de0a918fadcd4675a153/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0f134153b4ac30da86de0a918fadcd4675a153/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=2e0f134153b4ac30da86de0a918fadcd4675a153", "patch": "@@ -11232,6 +11232,24 @@ This target hook is required only when the target has several different\n modes and they have different conditional execution capability, such as ARM.\n @end deftypefn\n \n+@deftypefn {Target Hook} rtx TARGET_GEN_CCMP_FIRST (int @var{code}, rtx @var{op0}, rtx @var{op1})\n+This function emits a comparison insn for the first of a sequence of\n+ conditional comparisions.  It returns a comparison expression appropriate\n+ for passing to @code{gen_ccmp_next} or @code{cbranch_optab}.  @var{code} is\n+ the @code{rtx_code} of the compare for @var{op0} and @var{op1}.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} rtx TARGET_GEN_CCMP_NEXT (rtx @var{prev}, int @var{cmp_code}, rtx @var{op0}, rtx @var{op1}, int @var{bit_code})\n+This function emits a conditional comparison within a sequence of\n+ conditional comparisons.  The @var{prev} expression is the result of a\n+ prior call to @code{gen_ccmp_first} or @code{gen_ccmp_next}.  It may return\n+ @code{NULL} if the combination of @var{prev} and this comparison is\n+ not supported, otherwise the result must be appropriate for passing to\n+ @code{gen_ccmp_next} or @code{cbranch_optab}.  @var{code} is the\n+ @code{rtx_code} of the compare for @var{op0} and @var{op1}.  @var{bit_code}\n+ is @code{AND} or @code{IOR}, which is the op on the two compares.\n+@end deftypefn\n+\n @deftypefn {Target Hook} unsigned TARGET_LOOP_UNROLL_ADJUST (unsigned @var{nunroll}, struct loop *@var{loop})\n This target hook returns a new value for the number of times @var{loop}\n should be unrolled. The parameter @var{nunroll} is the number of times"}, {"sha": "8f865381f164991d3310cac9e52ffcb12145ea2d", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0f134153b4ac30da86de0a918fadcd4675a153/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0f134153b4ac30da86de0a918fadcd4675a153/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=2e0f134153b4ac30da86de0a918fadcd4675a153", "patch": "@@ -8044,6 +8044,10 @@ build_type_attribute_variant (@var{mdecl},\n \n @hook TARGET_HAVE_CONDITIONAL_EXECUTION\n \n+@hook TARGET_GEN_CCMP_FIRST\n+\n+@hook TARGET_GEN_CCMP_NEXT\n+\n @hook TARGET_LOOP_UNROLL_ADJUST\n \n @defmac POWI_MAX_MULTS"}, {"sha": "3ccb028a61e62ffd7cee87db3abef247f84ee726", "filename": "gcc/target.def", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e0f134153b4ac30da86de0a918fadcd4675a153/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e0f134153b4ac30da86de0a918fadcd4675a153/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=2e0f134153b4ac30da86de0a918fadcd4675a153", "patch": "@@ -2532,6 +2532,28 @@ modes and they have different conditional execution capability, such as ARM.\",\n  bool, (void),\n  default_have_conditional_execution)\n \n+DEFHOOK\n+(gen_ccmp_first,\n+ \"This function emits a comparison insn for the first of a sequence of\\n\\\n+ conditional comparisions.  It returns a comparison expression appropriate\\n\\\n+ for passing to @code{gen_ccmp_next} or @code{cbranch_optab}.  @var{code} is\\n\\\n+ the @code{rtx_code} of the compare for @var{op0} and @var{op1}.\",\n+ rtx, (int code, rtx op0, rtx op1),\n+ NULL)\n+\n+DEFHOOK\n+(gen_ccmp_next,\n+ \"This function emits a conditional comparison within a sequence of\\n\\\n+ conditional comparisons.  The @var{prev} expression is the result of a\\n\\\n+ prior call to @code{gen_ccmp_first} or @code{gen_ccmp_next}.  It may return\\n\\\n+ @code{NULL} if the combination of @var{prev} and this comparison is\\n\\\n+ not supported, otherwise the result must be appropriate for passing to\\n\\\n+ @code{gen_ccmp_next} or @code{cbranch_optab}.  @var{code} is the\\n\\\n+ @code{rtx_code} of the compare for @var{op0} and @var{op1}.  @var{bit_code}\\n\\\n+ is @code{AND} or @code{IOR}, which is the op on the two compares.\",\n+ rtx, (rtx prev, int cmp_code, rtx op0, rtx op1, int bit_code),\n+ NULL)\n+\n /* Return a new value for loop unroll size.  */\n DEFHOOK\n (loop_unroll_adjust,"}]}