{"sha": "ac025fd6cb720cd5f1a31cea7751f7206e9f767f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMwMjVmZDZjYjcyMGNkNWYxYTMxY2VhNzc1MWY3MjA2ZTlmNzY3Zg==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2018-05-24T08:53:39Z"}, "committer": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2018-05-24T08:53:39Z"}, "message": "PR target/83009: Relax strict address checking for store pair lanes\n\nThe operand constraint for the memory address of store/load pair lanes was\nenforcing strictly hardware registers be allowed as memory addresses.  We want\nto relax that such that these patterns can be used by combine.  During register\nallocation the register constraint will enforce the correct register is chosen.\n\ngcc\n2018-05-24  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\tPR target/83009\n\t* config/aarch64/predicates.md (aarch64_mem_pair_lanes_operand): Make\n\taddress check not strict.\n\ngcc/testsuite\n2018-05-24  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\tPR target/83009\n\t* gcc/target/aarch64/store_v2vec_lanes.c: Add extra tests.\n\nFrom-SVN: r260635", "tree": {"sha": "dbd76ddc29df4e2ed978b1568abe0eb8a84e7899", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbd76ddc29df4e2ed978b1568abe0eb8a84e7899"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac025fd6cb720cd5f1a31cea7751f7206e9f767f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac025fd6cb720cd5f1a31cea7751f7206e9f767f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac025fd6cb720cd5f1a31cea7751f7206e9f767f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac025fd6cb720cd5f1a31cea7751f7206e9f767f/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d75ad95aa808d6767afc0cdadd3b62e831c5cdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d75ad95aa808d6767afc0cdadd3b62e831c5cdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d75ad95aa808d6767afc0cdadd3b62e831c5cdf"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "9c7a3868f23bdf9e0b76d5b52e29dd44c34053df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac025fd6cb720cd5f1a31cea7751f7206e9f767f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac025fd6cb720cd5f1a31cea7751f7206e9f767f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac025fd6cb720cd5f1a31cea7751f7206e9f767f", "patch": "@@ -1,3 +1,9 @@\n+2018-05-24  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR target/83009\n+\t* config/aarch64/predicates.md (aarch64_mem_pair_lanes_operand): Make\n+\taddress check not strict.\n+\n 2018-05-24  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gimple-match.h (gimple_match_op): New class."}, {"sha": "4814b933d12d2100063f6fa930905c03c56c75a9", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac025fd6cb720cd5f1a31cea7751f7206e9f767f/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac025fd6cb720cd5f1a31cea7751f7206e9f767f/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=ac025fd6cb720cd5f1a31cea7751f7206e9f767f", "patch": "@@ -226,7 +226,7 @@\n ;; as a 128-bit vec_concat.\n (define_predicate \"aarch64_mem_pair_lanes_operand\"\n   (and (match_code \"mem\")\n-       (match_test \"aarch64_legitimate_address_p (DFmode, XEXP (op, 0), 1,\n+       (match_test \"aarch64_legitimate_address_p (DFmode, XEXP (op, 0), false,\n \t\t\t\t\t\t  ADDR_QUERY_LDP_STP)\")))\n \n (define_predicate \"aarch64_prefetch_operand\""}, {"sha": "485cee4b2131dfa076a896c263520f682987ea75", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac025fd6cb720cd5f1a31cea7751f7206e9f767f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac025fd6cb720cd5f1a31cea7751f7206e9f767f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac025fd6cb720cd5f1a31cea7751f7206e9f767f", "patch": "@@ -1,3 +1,8 @@\n+2018-05-24  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\tPR target/83009\n+\t* gcc/target/aarch64/store_v2vec_lanes.c: Add extra tests.\n+\n 2018-05-23  Jozef Lawrynowicz  <jozef.l@somniumtech.com>\n \n \tPR target/78849"}, {"sha": "3296d04da14149d26d19da785663b87bd5ad8994", "filename": "gcc/testsuite/gcc.target/aarch64/store_v2vec_lanes.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac025fd6cb720cd5f1a31cea7751f7206e9f767f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_v2vec_lanes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac025fd6cb720cd5f1a31cea7751f7206e9f767f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_v2vec_lanes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fstore_v2vec_lanes.c?ref=ac025fd6cb720cd5f1a31cea7751f7206e9f767f", "patch": "@@ -22,10 +22,32 @@ construct_lane_2 (long long *y, v2di *z)\n   z[2] = x;\n }\n \n+void\n+construct_lane_3 (double **py, v2df **pz)\n+{\n+  double *y = *py;\n+  v2df *z = *pz;\n+  double y0 = y[0] + 1;\n+  double y1 = y[1] + 2;\n+  v2df x = {y0, y1};\n+  z[2] = x;\n+}\n+\n+void\n+construct_lane_4 (long long **py, v2di **pz)\n+{\n+  long long *y = *py;\n+  v2di *z = *pz;\n+  long long y0 = y[0] + 1;\n+  long long y1 = y[1] + 2;\n+  v2di x = {y0, y1};\n+  z[2] = x;\n+}\n+\n /* We can use the load_pair_lanes<mode> pattern to vec_concat two DI/DF\n    values from consecutive memory into a 2-element vector by using\n    a Q-reg LDR.  */\n \n-/* { dg-final { scan-assembler-times \"stp\\td\\[0-9\\]+, d\\[0-9\\]+\" 1 { xfail ilp32 } } } */\n-/* { dg-final { scan-assembler-times \"stp\\tx\\[0-9\\]+, x\\[0-9\\]+\" 1 { xfail ilp32 } } } */\n-/* { dg-final { scan-assembler-not \"ins\\t\" { xfail ilp32 } } } */\n+/* { dg-final { scan-assembler-times \"stp\\td\\[0-9\\]+, d\\[0-9\\]+\" 2 } } */\n+/* { dg-final { scan-assembler-times \"stp\\tx\\[0-9\\]+, x\\[0-9\\]+\" 2 } } */\n+/* { dg-final { scan-assembler-not \"ins\\t\" } } */"}]}