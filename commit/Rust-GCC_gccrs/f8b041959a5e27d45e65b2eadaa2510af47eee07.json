{"sha": "f8b041959a5e27d45e65b2eadaa2510af47eee07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhiMDQxOTU5YTVlMjdkNDVlNjViMmVhZGFhMjUxMGFmNDdlZWUwNw==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2007-07-02T18:27:46Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2007-07-02T18:27:46Z"}, "message": "Fix PR tree-optimization/32583 Fix PR tree-optimization/32584\n\n2007-07-02  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR tree-optimization/32583\n\tFix PR tree-optimization/32584\n\t* tree-ssa-pre.c (phi_translate): Always pass seen bitmap.\n\t(phi_translate_set): Use phi_translate directly now.\n\t(make_values_for_stmt): Don't value number RHS if we already know\n\tit is constant.\n\nFrom-SVN: r126222", "tree": {"sha": "b3a17425a2046a1213abed9bb5d9a77e72977ff5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3a17425a2046a1213abed9bb5d9a77e72977ff5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8b041959a5e27d45e65b2eadaa2510af47eee07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b041959a5e27d45e65b2eadaa2510af47eee07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8b041959a5e27d45e65b2eadaa2510af47eee07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b041959a5e27d45e65b2eadaa2510af47eee07/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "943c54ce4925f9922b3e3b926c9b43a32bb16041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/943c54ce4925f9922b3e3b926c9b43a32bb16041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/943c54ce4925f9922b3e3b926c9b43a32bb16041"}], "stats": {"total": 137, "additions": 132, "deletions": 5}, "files": [{"sha": "fc2aac6029ce556622a6c4cf2e80a88099fac187", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b041959a5e27d45e65b2eadaa2510af47eee07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b041959a5e27d45e65b2eadaa2510af47eee07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8b041959a5e27d45e65b2eadaa2510af47eee07", "patch": "@@ -1,3 +1,12 @@\n+2007-07-02  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\tFix PR tree-optimization/32583\n+\tFix PR tree-optimization/32584\n+\t* tree-ssa-pre.c (phi_translate): Always pass seen bitmap.\n+\t(phi_translate_set): Use phi_translate directly now.\n+\t(make_values_for_stmt): Don't value number RHS if we already know\n+\tit is constant.\n+\n 2007-07-02  Steve Ellcey  <sje@cup.hp.com>\n \t    Jim Wilson <wilson@specifix.com>\n "}, {"sha": "9e6773cb8fd04a1c583abc11d4caa3ffda81d480", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b041959a5e27d45e65b2eadaa2510af47eee07/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b041959a5e27d45e65b2eadaa2510af47eee07/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8b041959a5e27d45e65b2eadaa2510af47eee07", "patch": "@@ -1,3 +1,8 @@\n+2007-07-02  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* gfortran.fortran-torture/compile/pr32583.f: New.\n+\t* gcc.c-torture/compile/pr32584.c: New\n+\n 2007-07-02  Ollie Wild  <aaw@google.com>\n \n \t* g++.dg/lookup/using16.C: Merge dg-errors with common line."}, {"sha": "02799fc74498bf216ecfd349bf98a7c1ad242ad9", "filename": "gcc/testsuite/gcc.c-torture/compile/pr32584.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b041959a5e27d45e65b2eadaa2510af47eee07/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr32584.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b041959a5e27d45e65b2eadaa2510af47eee07/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr32584.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr32584.c?ref=f8b041959a5e27d45e65b2eadaa2510af47eee07", "patch": "@@ -0,0 +1,71 @@\n+typedef long unsigned int size_t;\n+typedef long int __ssize_t;\n+typedef struct\n+{\n+} __mbstate_t;\n+typedef struct\n+{\n+} _G_fpos64_t;\n+enum\n+{\n+  __GCONV_INTERNAL_ERROR\n+};\n+typedef int (*__gconv_trans_fct) (struct __gconv_step *,\n+      size_t *);\n+typedef int (*__gconv_trans_context_fct) (void *, __const unsigned char *,\n+       unsigned char *, unsigned char *);\n+struct __gconv_trans_data\n+{\n+};\n+struct _IO_marker {\n+};\n+typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,\n+     size_t __n);\n+typedef struct blockbox {\n+} *BBOXPTR, BBOX ;\n+typedef struct netbox {\n+} *NBOXPTR, NBOX ;\n+typedef struct termbox {\n+    struct termbox *nextterm ;\n+} *TEBOXPTR, TEBOX ;\n+typedef struct tilebox {\n+    TEBOXPTR termsptr ;\n+}\n+*TIBOXPTR ,\n+TIBOX ;\n+typedef struct cellbox {\n+    TIBOXPTR tileptr ;\n+}\n+*CBOXPTR ,\n+CBOX ;\n+typedef struct dimbox {\n+}\n+DBOX ;\n+typedef struct rowbox {\n+} ROWBOX ;\n+typedef struct binbox {\n+}\n+CHANGRDBOX ;\n+extern int numcells ;\n+extern int numterms ;\n+sortpin()\n+{\n+int j , n , cell ;\n+CBOXPTR ptr ;\n+TIBOXPTR tile ;\n+TEBOXPTR term , *xpptr ;\n+for( cell = 1 ; cell <= numcells + numterms ; cell++ ) {\n+    if( ( tile = ptr->tileptr ) == (TIBOXPTR) ((void *)0) ) {\n+    }\n+    n = 0 ;\n+    for( term = tile->termsptr ; term != (TEBOXPTR) ((void *)0) ;\n+      term = term->nextterm ) {\n+ xpptr[ ++n ] = term ;\n+    }\n+    xpptr[ n + 1 ] = (TEBOXPTR) ((void *)0) ;\n+    ptr->tileptr->termsptr = xpptr[ 1 ] ;\n+    for( j = 1 ; j <= n ; j++ ) {\n+    }\n+}\n+}\n+"}, {"sha": "61c9d98b80bf3198ada5881d39aa8957cf26f802", "filename": "gcc/testsuite/gfortran.fortran-torture/compile/pr32583.f", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b041959a5e27d45e65b2eadaa2510af47eee07/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr32583.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b041959a5e27d45e65b2eadaa2510af47eee07/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr32583.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr32583.f?ref=f8b041959a5e27d45e65b2eadaa2510af47eee07", "patch": "@@ -0,0 +1,40 @@\n+      subroutine detune(iv,ekk,ep,beta,dtu,dtup,dfac)\n+      implicit real*8 (a-h,o-z)\n+      parameter(npart=64,nmac=1)\n+      parameter(nele=700,nblo=300,nper=16,\n+     &nelb=100,nblz=20000,nzfz=300000,mmul=11)\n+      parameter(nran=280000,ncom=100,mran=500,mpa=6,nrco=5,nema=15)\n+      parameter(mcor=10)\n+      parameter(npos=20000,nlya=10000,ninv=1000,nplo=20000)\n+      parameter(nmon1=600,ncor1=600)\n+      parameter(pieni=1d-17)\n+      parameter(zero=0.0d0,half=0.5d0,one=1.0d0)\n+      parameter(two=2.0d0,three=3.0d0,four=4.0d0)\n+      dimension dfac(10),dtu(2,5),ep(2),beta(2),dtup(2,5,0:4,0:4)\n+      save\n+      pi=four*atan(one)\n+      iv2=2*iv\n+      iv3=iv+1\n+      vtu1=-ekk*(half**iv2)*dfac(iv2)/pi\n+      dtu1=zero\n+      dtu2=zero\n+      do 10 iv4=1,iv3\n+        iv5=iv4-1\n+        iv6=iv-iv5\n+        vor=one\n+        if(mod(iv6,2).ne.0) vor=-one\n+        vtu2=vor/(dfac(iv5+1)**2)/(dfac(iv6+1)**2)*(beta(1)**iv5)* (beta\n+     +  (2)**iv6)\n+        if(iv5.ne.0) then\n+          dtu1=dtu1+vtu2*iv5*(ep(1)**(iv5-1))*(ep(2)**iv6)\n+          dtup(1,iv,iv5-1,iv6)=dtup(1,iv,iv5-1,iv6)+vtu2*iv5*vtu1\n+        endif\n+        if(iv6.ne.0) then\n+          dtu2=dtu2+vtu2*iv6*(ep(1)**iv5)*(ep(2)**(iv6-1))\n+          dtup(2,iv,iv5,iv6-1)=dtup(2,iv,iv5,iv6-1)+vtu2*iv6*vtu1\n+        endif\n+   10 continue\n+      dtu(1,iv)=dtu(1,iv)+vtu1*dtu1\n+      dtu(2,iv)=dtu(2,iv)+vtu1*dtu2\n+      return\n+      end"}, {"sha": "059a2adbbfc59b291919ed723bfe2671e80741df", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b041959a5e27d45e65b2eadaa2510af47eee07/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b041959a5e27d45e65b2eadaa2510af47eee07/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=f8b041959a5e27d45e65b2eadaa2510af47eee07", "patch": "@@ -1322,6 +1322,7 @@ phi_translate_1 (tree expr, bitmap_set_t set1, bitmap_set_t set2,\n       gcc_unreachable ();\n     }\n }\n+\n /* Translate EXPR using phis in PHIBLOCK, so that it has the values of\n    the phis in PRED. \n    Return NULL if we can't find a leader for each part of the\n@@ -1331,7 +1332,9 @@ static tree\n phi_translate (tree expr, bitmap_set_t set1, bitmap_set_t set2,\n \t       basic_block pred, basic_block phiblock)\n {\n-  return phi_translate_1 (expr, set1, set2, pred, phiblock, NULL);\n+  bitmap_clear (seen_during_translate);\n+  return phi_translate_1 (expr, set1, set2, pred, phiblock,\n+\t\t\t  seen_during_translate);\n }\n \n /* For each expression in SET, translate the value handles through phi nodes\n@@ -1356,9 +1359,7 @@ phi_translate_set (bitmap_set_t dest, bitmap_set_t set, basic_block pred,\n   for (i = 0; VEC_iterate (tree, exprs, i, expr); i++)\n     {\n       tree translated;\n-      bitmap_clear (seen_during_translate);\n-      translated = phi_translate_1 (expr, set, NULL, pred, phiblock,\n-\t\t\t\t    seen_during_translate);\n+      translated = phi_translate (expr, set, NULL, pred, phiblock);\n \n       /* Don't add constants or empty translations to the cache, since\n \t we won't look them up that way, or use the result, anyway.  */\n@@ -3404,7 +3405,8 @@ make_values_for_stmt (tree stmt, basic_block block)\n   lhsval = valvh ? valvh : get_value_handle (lhs);\n   \n   STRIP_USELESS_TYPE_CONVERSION (rhs);\n-  if (can_value_number_operation (rhs))\n+  if (can_value_number_operation (rhs)\n+      && (!lhsval || !is_gimple_min_invariant (lhsval)))\n     {\n       /* For value numberable operation, create a\n \t duplicate expression with the operands replaced"}]}