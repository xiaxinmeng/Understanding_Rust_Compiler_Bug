{"sha": "1f9017930217253ea79443d063677b0a05a2c0af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY5MDE3OTMwMjE3MjUzZWE3OTQ0M2QwNjM2NzdiMGEwNWEyYzBhZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-01-24T00:59:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-01-24T00:59:21Z"}, "message": "decl.c (start_function): Make member functions one_only on windows.\n\n\t* decl.c (start_function): Make member functions one_only on windows.\n\t* decl2.c (import_export_decl): Likewise.\n\t* decl.c (grokdeclarator): Don't complain about implicit int in\n\ta system header.  Change same-name field check to not complain in\n\ta system header instead of within extern \"C\".\n\nFrom-SVN: r24839", "tree": {"sha": "71c8c9a0d0e8ac3e0d98a799610459d390d56424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71c8c9a0d0e8ac3e0d98a799610459d390d56424"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f9017930217253ea79443d063677b0a05a2c0af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9017930217253ea79443d063677b0a05a2c0af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f9017930217253ea79443d063677b0a05a2c0af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9017930217253ea79443d063677b0a05a2c0af/comments", "author": null, "committer": null, "parents": [{"sha": "c0e228490dd9d6aadf97b70477bb559ce79809df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0e228490dd9d6aadf97b70477bb559ce79809df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0e228490dd9d6aadf97b70477bb559ce79809df"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "ab362173528c95e8768d91d9ca59f6b3317a71ed", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9017930217253ea79443d063677b0a05a2c0af/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9017930217253ea79443d063677b0a05a2c0af/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1f9017930217253ea79443d063677b0a05a2c0af", "patch": "@@ -1,3 +1,12 @@\n+1999-01-24  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (start_function): Make member functions one_only on windows.\n+\t* decl2.c (import_export_decl): Likewise.\n+\n+\t* decl.c (grokdeclarator): Don't complain about implicit int in\n+\ta system header.  Change same-name field check to not complain in\n+\ta system header instead of within extern \"C\".\n+\n 1999-01-21  Mark Mitchell  <mark@markmitchell.com>\n \n \t* cp-tree.h (PUSH_GLOBAL): New macro."}, {"sha": "e1e50f6f46e9befbf1a08881c187938b86a23c2e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9017930217253ea79443d063677b0a05a2c0af/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9017930217253ea79443d063677b0a05a2c0af/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1f9017930217253ea79443d063677b0a05a2c0af", "patch": "@@ -9384,7 +9384,9 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t\t && in_namespace == NULL_TREE\n \t\t\t && current_namespace == global_namespace);\n \n-\t  if (pedantic || ! is_main)\n+\t  if (in_system_header)\n+\t    /* Allow it, sigh.  */;\n+\t  else if (pedantic || ! is_main)\n \t    cp_pedwarn (\"ANSI C++ forbids declaration `%D' with no type\",\n \t\t\tdname);\n \t  else if (warn_return_type)\n@@ -11050,7 +11052,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t/* Divergence from the standard:  In extern \"C\", we\n \t\t   allow non-static data members here, because C does\n \t\t   and /usr/include/netinet/in.h uses that.  */\n-\t\t&& (staticp || current_lang_name != lang_name_c))\n+\t\t&& (staticp || ! in_system_header))\n \t      cp_pedwarn (\"ANSI C++ forbids data member `%D' with same name as enclosing class\",\n \t\t\t  declarator);\n \n@@ -13042,16 +13044,21 @@ start_function (declspecs, declarator, attrs, pre_parsed_p)\n     }\n   /* If this function belongs to an interface, it is public.\n      If it belongs to someone else's interface, it is also external.\n-     It doesn't matter whether it's inline or not.  */\n+     This only affects inlines and template instantiations.  */\n   else if (interface_unknown == 0\n \t   && (! DECL_TEMPLATE_INSTANTIATION (decl1)\n \t       || flag_alt_external_templates))\n     {\n       if (DECL_THIS_INLINE (decl1) || DECL_TEMPLATE_INSTANTIATION (decl1)\n \t  || processing_template_decl)\n-\tDECL_EXTERNAL (decl1)\n-\t  = (interface_only\n-\t     || (DECL_THIS_INLINE (decl1) && ! flag_implement_inlines));\n+\t{\n+\t  DECL_EXTERNAL (decl1)\n+\t    = (interface_only\n+\t       || (DECL_THIS_INLINE (decl1) && ! flag_implement_inlines));\n+\n+\t  /* For WIN32 we also want to put these in linkonce sections.  */\n+\t  maybe_make_one_only (decl1);\n+\t}\n       else\n \tDECL_EXTERNAL (decl1) = 0;\n       DECL_NOT_REALLY_EXTERN (decl1) = 0;"}, {"sha": "867cf96c653f80083194ab6eadb168c6948cf711", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9017930217253ea79443d063677b0a05a2c0af/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9017930217253ea79443d063677b0a05a2c0af/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=1f9017930217253ea79443d063677b0a05a2c0af", "patch": "@@ -2791,6 +2791,8 @@ import_export_decl (decl)\n \t  /* Always make artificials weak.  */\n \t  if (DECL_ARTIFICIAL (decl) && flag_weak)\n \t    comdat_linkage (decl);\n+\t  else\n+\t    maybe_make_one_only (decl);\n \t}\n       else\n \tcomdat_linkage (decl);"}]}