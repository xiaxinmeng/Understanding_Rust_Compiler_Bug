{"sha": "46311016894d30b5898382f1f5bada88fb00a34d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDYzMTEwMTY4OTRkMzBiNTg5ODM4MmYxZjViYWRhODhmYjAwYTM0ZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-04T01:41:24Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-04T01:41:24Z"}, "message": "compiler, reflect: Fix hash codes of named types, fix PtrTo hash.\n\nFrom-SVN: r183889", "tree": {"sha": "5f1c68fe8bf58b8564c9fcffd911fd3b50a73d9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f1c68fe8bf58b8564c9fcffd911fd3b50a73d9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46311016894d30b5898382f1f5bada88fb00a34d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46311016894d30b5898382f1f5bada88fb00a34d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46311016894d30b5898382f1f5bada88fb00a34d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46311016894d30b5898382f1f5bada88fb00a34d/comments", "author": null, "committer": null, "parents": [{"sha": "5007a7a898c918a75101461fe40897970d4dc9c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5007a7a898c918a75101461fe40897970d4dc9c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5007a7a898c918a75101461fe40897970d4dc9c0"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "41bf491dff9e7474d42341f5b80d36b78c393620", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46311016894d30b5898382f1f5bada88fb00a34d/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46311016894d30b5898382f1f5bada88fb00a34d/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=46311016894d30b5898382f1f5bada88fb00a34d", "patch": "@@ -1658,7 +1658,12 @@ Type::type_descriptor_constructor(Gogo* gogo, int runtime_type_kind,\n \n   ++p;\n   go_assert(p->is_field_name(\"hash\"));\n-  mpz_set_ui(iv, this->hash_for_method(gogo));\n+  unsigned int h;\n+  if (name != NULL)\n+    h = name->hash_for_method(gogo);\n+  else\n+    h = this->hash_for_method(gogo);\n+  mpz_set_ui(iv, h);\n   vals->push_back(Expression::make_integer(&iv, p->type(), bloc));\n \n   ++p;"}, {"sha": "11dfb3fe516d89fc90b7e96276f01186705a0b2b", "filename": "libgo/go/reflect/all_test.go", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46311016894d30b5898382f1f5bada88fb00a34d/libgo%2Fgo%2Freflect%2Fall_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46311016894d30b5898382f1f5bada88fb00a34d/libgo%2Fgo%2Freflect%2Fall_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fall_test.go?ref=46311016894d30b5898382f1f5bada88fb00a34d", "patch": "@@ -1528,6 +1528,18 @@ func TestAddr(t *testing.T) {\n \tif p.X != 4 {\n \t\tt.Errorf(\"Addr.Elem.Set valued to set value in top value\")\n \t}\n+\n+\t// Verify that taking the address of a type gives us a pointer\n+\t// which we can convert back using the usual interface\n+\t// notation.\n+\tvar s struct {\n+\t\tB *bool\n+\t}\n+\tps := ValueOf(&s).Elem().Field(0).Addr().Interface()\n+\t*(ps.(**bool)) = new(bool)\n+\tif s.B == nil {\n+\t\tt.Errorf(\"Addr.Interface direct assignment failed\")\n+\t}\n }\n \n /* gccgo does do allocations here."}, {"sha": "02855df0f390905226e88f52b28591c5ca9bdadf", "filename": "libgo/go/reflect/type.go", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46311016894d30b5898382f1f5bada88fb00a34d/libgo%2Fgo%2Freflect%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46311016894d30b5898382f1f5bada88fb00a34d/libgo%2Fgo%2Freflect%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Ftype.go?ref=46311016894d30b5898382f1f5bada88fb00a34d", "patch": "@@ -999,6 +999,17 @@ func (ct *commonType) ptrTo() *commonType {\n \t\treturn &p.commonType\n \t}\n \n+\ts := \"*\" + *ct.string\n+\n+\tcanonicalTypeLock.RLock()\n+\tr, ok := canonicalType[s]\n+\tcanonicalTypeLock.RUnlock()\n+\tif ok {\n+\t\tptrMap.m[ct] = (*ptrType)(unsafe.Pointer(r.(*commonType)))\n+\t\tptrMap.Unlock()\n+\t\treturn r.(*commonType)\n+\t}\n+\n \trp := new(runtime.PtrType)\n \n \t// initialize p using *byte's ptrType as a prototype.\n@@ -1008,20 +1019,23 @@ func (ct *commonType) ptrTo() *commonType {\n \tbp := (*ptrType)(unsafe.Pointer(unsafe.Typeof((*byte)(nil)).(*runtime.PtrType)))\n \t*p = *bp\n \n-\ts := \"*\" + *ct.string\n \tp.string = &s\n \n \t// For the type structures linked into the binary, the\n \t// compiler provides a good hash of the string.\n \t// Create a good hash for the new string by using\n \t// the FNV-1 hash's mixing function to combine the\n \t// old hash and the new \"*\".\n-\tp.hash = ct.hash*16777619 ^ '*'\n+\t// p.hash = ct.hash*16777619 ^ '*'\n+\t// This is the gccgo version.\n+\tp.hash = (ct.hash << 4) + 9\n \n \tp.uncommonType = nil\n \tp.ptrToThis = nil\n \tp.elem = (*runtime.Type)(unsafe.Pointer(ct))\n \n+\tp = canonicalize(p).(*ptrType)\n+\n \tptrMap.m[ct] = p\n \tptrMap.Unlock()\n \treturn &p.commonType"}]}