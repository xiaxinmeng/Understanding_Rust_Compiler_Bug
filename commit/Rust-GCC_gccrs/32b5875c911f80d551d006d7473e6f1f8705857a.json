{"sha": "32b5875c911f80d551d006d7473e6f1f8705857a", "node_id": "C_kwDOANBUbNoAKDMyYjU4NzVjOTExZjgwZDU1MWQwMDZkNzQ3M2U2ZjFmODcwNTg1N2E", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-18T11:40:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-18T11:40:49Z"}, "message": "reassoc: Fold some statements [PR108819]\n\nThis spot in update_ops can replace one or both of the assign operands with\nconstants, creating 1 & 1 and similar expressions which can confuse later\npasses until they are folded.  Rather than folding both constants by hand\nand also handling swapping of operands for commutative ops if the first one\nis constant and second one is not, the following patch just uses\nfold_stmt_inplace to do that.  I think we shouldn't fold more than the\nsingle statement because that could screw up the rest of the pass, we'd have\nto mark all those with uids, visited and the like.\n\n2023-02-18  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/108819\n\t* tree-ssa-reassoc.cc (update_ops): Fold new stmt in place.\n\n\t* gcc.dg/pr108819.c: New test.", "tree": {"sha": "d2ce649cc66008304d69bed821205fc4f48661ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2ce649cc66008304d69bed821205fc4f48661ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32b5875c911f80d551d006d7473e6f1f8705857a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b5875c911f80d551d006d7473e6f1f8705857a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32b5875c911f80d551d006d7473e6f1f8705857a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32b5875c911f80d551d006d7473e6f1f8705857a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c135697fd5f79db0954a79a48dcbba657e93f2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c135697fd5f79db0954a79a48dcbba657e93f2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c135697fd5f79db0954a79a48dcbba657e93f2e"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "28fa558b26024c3107d7f0b3ea4bd100c7114d62", "filename": "gcc/testsuite/gcc.dg/pr108819.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b5875c911f80d551d006d7473e6f1f8705857a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108819.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b5875c911f80d551d006d7473e6f1f8705857a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108819.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108819.c?ref=32b5875c911f80d551d006d7473e6f1f8705857a", "patch": "@@ -0,0 +1,19 @@\n+/* PR tree-optimization/108819 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fno-tree-ccp -fno-tree-forwprop\" } */\n+\n+int a, b;\n+\n+int\n+main ()\n+{\n+  int d = 1;\n+  for (; b; b++)\n+    if (a < 1)\n+      while (d <= a && a <= 0UL)\n+\t{\n+\t  int *e = &d;\n+\t  *e = 0;\n+\t}\n+  return 0;\n+}"}, {"sha": "8fd22591f557b18c71aa214efb65382bc4a1a10a", "filename": "gcc/tree-ssa-reassoc.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32b5875c911f80d551d006d7473e6f1f8705857a/gcc%2Ftree-ssa-reassoc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32b5875c911f80d551d006d7473e6f1f8705857a/gcc%2Ftree-ssa-reassoc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.cc?ref=32b5875c911f80d551d006d7473e6f1f8705857a", "patch": "@@ -4687,6 +4687,9 @@ update_ops (tree var, enum tree_code code, const vec<operand_entry *> &ops,\n       gimple_set_uid (g, gimple_uid (stmt));\n       gimple_set_visited (g, true);\n       gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n+      gimple_stmt_iterator gsi2 = gsi_for_stmt (g);\n+      if (fold_stmt_inplace (&gsi2))\n+\tupdate_stmt (g);\n     }\n   return var;\n }"}]}