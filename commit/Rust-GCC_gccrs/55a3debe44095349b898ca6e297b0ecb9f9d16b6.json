{"sha": "55a3debe44095349b898ca6e297b0ecb9f9d16b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVhM2RlYmU0NDA5NTM0OWI4OThjYTZlMjk3YjBlY2I5ZjlkMTZiNg==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2006-11-21T20:23:03Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2006-11-21T20:23:03Z"}, "message": "cp-tree.def (STATIC_ASSERT): New.\n\n2006-11-21      Douglas Gregor <doug.gregor@gmail.com>\n\n        * cp-tree.def (STATIC_ASSERT): New.  \n\t* cp-objcp-common.c (cp_tree_size): Handle STATIC_ASSERT.\n\t* error.c (dump_decl): Handle STATIC_ASSERT.\n\t* cp-tree.h (STATIC_ASSERT_CONDITION): New.\n        (STATIC_ASSERT_MESSAGE): New.\n\t(STATIC_ASSERT_SOURCE_LOCATION): New.\n\t(struct tree_static_assert): New.\n\t(enum cp_tree_node_structure_enum): Add TS_CP_STATIC_ASSERT.\n\t(union lang_tree_node): Add static_assertion.\n        (finish_static_assert): Declare.\n\t* cxx-pretty-print.c (pp_cxx_statement): Handle STATIC_ASSERT.\n\t(pp_cxx_declaration): Handle STATIC_ASSERT.\n\t* pt.c (instantiate_class_template): Handle\n\tSTATIC_ASSERT members.\n        (tsubst_expr): Handle STATIC_ASSERT statements.  \n\t* semantics.c (finish_static_assert): New.\n        * lex.c (D_CPP0X): New.\n        (reswords): Add static_assert keyword.\n        (init_reswords): If not flag_cpp0x, mask out C++0x keywords.\n        * parser.c (cp_parser_block_declaration): Parse static\n\tassertions.\n        (cp_parser_static_assert): New.\n        (cp_parser_member_declaration): Parse static assertions.\n\nFrom-SVN: r119066", "tree": {"sha": "b93947409f894b645ef269b5199ac8efb6894453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b93947409f894b645ef269b5199ac8efb6894453"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55a3debe44095349b898ca6e297b0ecb9f9d16b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a3debe44095349b898ca6e297b0ecb9f9d16b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55a3debe44095349b898ca6e297b0ecb9f9d16b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a3debe44095349b898ca6e297b0ecb9f9d16b6/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "218f00156cf583db14b1398ca52da12f59383fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/218f00156cf583db14b1398ca52da12f59383fb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/218f00156cf583db14b1398ca52da12f59383fb3"}], "stats": {"total": 256, "additions": 250, "deletions": 6}, "files": [{"sha": "af4a3fc399f32a4d264c7172abe3cff3471f8ac4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=55a3debe44095349b898ca6e297b0ecb9f9d16b6", "patch": "@@ -1,3 +1,29 @@\n+2006-11-21      Douglas Gregor <doug.gregor@gmail.com>\n+\n+        * cp-tree.def (STATIC_ASSERT): New.  \n+\t* cp-objcp-common.c (cp_tree_size): Handle STATIC_ASSERT.\n+\t* error.c (dump_decl): Handle STATIC_ASSERT.\n+\t* cp-tree.h (STATIC_ASSERT_CONDITION): New.\n+        (STATIC_ASSERT_MESSAGE): New.\n+\t(STATIC_ASSERT_SOURCE_LOCATION): New.\n+\t(struct tree_static_assert): New.\n+\t(enum cp_tree_node_structure_enum): Add TS_CP_STATIC_ASSERT.\n+\t(union lang_tree_node): Add static_assertion.\n+        (finish_static_assert): Declare.\n+\t* cxx-pretty-print.c (pp_cxx_statement): Handle STATIC_ASSERT.\n+\t(pp_cxx_declaration): Handle STATIC_ASSERT.\n+\t* pt.c (instantiate_class_template): Handle\n+\tSTATIC_ASSERT members.\n+        (tsubst_expr): Handle STATIC_ASSERT statements.  \n+\t* semantics.c (finish_static_assert): New.\n+        * lex.c (D_CPP0X): New.\n+        (reswords): Add static_assert keyword.\n+        (init_reswords): If not flag_cpp0x, mask out C++0x keywords.\n+        * parser.c (cp_parser_block_declaration): Parse static\n+\tassertions.\n+        (cp_parser_static_assert): New.\n+        (cp_parser_member_declaration): Parse static assertions.\n+\n 2006-11-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/29570"}, {"sha": "a3e19db244fc4b3d7e39364b3c1c54b55571c430", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=55a3debe44095349b898ca6e297b0ecb9f9d16b6", "patch": "@@ -123,6 +123,7 @@ cp_tree_size (enum tree_code code)\n     case TEMPLATE_PARM_INDEX:\treturn sizeof (template_parm_index);\n     case DEFAULT_ARG:\t\treturn sizeof (struct tree_default_arg);\n     case OVERLOAD:\t\treturn sizeof (struct tree_overload);\n+    case STATIC_ASSERT:         return sizeof (struct tree_static_assert);\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "090f91f40c5146937fa424206dcf7fa717acaab7", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=55a3debe44095349b898ca6e297b0ecb9f9d16b6", "patch": "@@ -342,6 +342,14 @@ DEFTREECODE (STMT_EXPR, \"stmt_expr\", tcc_expression, 1)\n    is applied.  */\n DEFTREECODE (UNARY_PLUS_EXPR, \"unary_plus_expr\", tcc_unary, 1)\n \n+/** C++0x extensions. */\n+\n+/* A static assertion.  This is a C++0x extension.\n+   STATIC_ASSERT_CONDITION contains the condition that is being\n+   checked.  STATIC_ASSERT_MESSAGE contains the message (a string\n+   literal) to be displayed if the condition fails to hold.  */\n+DEFTREECODE (STATIC_ASSERT, \"static_assert\", tcc_exceptional, 0)\n+\n /*\n Local variables:\n mode:c"}, {"sha": "0270eb3a6c2fc52ddcf1fddd4fa091e403807704", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=55a3debe44095349b898ca6e297b0ecb9f9d16b6", "patch": "@@ -446,6 +446,29 @@ struct tree_default_arg GTY (())\n   VEC(tree,gc) *instantiations;\n };\n \n+/* The condition associated with the static assertion.  This must be\n+   an integral constant expression.  */\n+#define STATIC_ASSERT_CONDITION(NODE) \\\n+  (((struct tree_static_assert *)STATIC_ASSERT_CHECK (NODE))->condition)\n+\n+/* The message associated with the static assertion.  This must be a\n+   string constant, which will be emitted as an error message when the\n+   static assert condition is false.  */\n+#define STATIC_ASSERT_MESSAGE(NODE) \\\n+  (((struct tree_static_assert *)STATIC_ASSERT_CHECK (NODE))->message)\n+\n+/* Source location information for a static assertion.  */\n+#define STATIC_ASSERT_SOURCE_LOCATION(NODE) \\\n+  (((struct tree_static_assert *)STATIC_ASSERT_CHECK (NODE))->location)\n+\n+struct tree_static_assert GTY (())\n+{\n+  struct tree_common common;\n+  tree condition;\n+  tree message;\n+  location_t location;\n+};\n+\n enum cp_tree_node_structure_enum {\n   TS_CP_GENERIC,\n   TS_CP_IDENTIFIER,\n@@ -457,6 +480,7 @@ enum cp_tree_node_structure_enum {\n   TS_CP_BASELINK,\n   TS_CP_WRAPPER,\n   TS_CP_DEFAULT_ARG,\n+  TS_CP_STATIC_ASSERT,\n   LAST_TS_CP_ENUM\n };\n \n@@ -473,6 +497,8 @@ union lang_tree_node GTY((desc (\"cp_tree_node_structure (&%h)\"),\n   struct tree_baselink GTY ((tag (\"TS_CP_BASELINK\"))) baselink;\n   struct tree_default_arg GTY ((tag (\"TS_CP_DEFAULT_ARG\"))) default_arg;\n   struct lang_identifier GTY ((tag (\"TS_CP_IDENTIFIER\"))) identifier;\n+  struct tree_static_assert GTY ((tag (\"TS_CP_STATIC_ASSERT\"))) \n+    static_assertion;\n };\n \n \f\n@@ -4326,6 +4352,8 @@ extern tree cxx_omp_clause_assign_op\t\t(tree, tree, tree);\n extern tree cxx_omp_clause_dtor\t\t\t(tree, tree);\n extern bool cxx_omp_privatize_by_reference\t(tree);\n extern tree baselink_for_fns                    (tree);\n+extern void finish_static_assert                (tree, tree, location_t,\n+                                                 bool);\n \n /* in tree.c */\n extern void lang_check_failed\t\t\t(const char *, int,"}, {"sha": "4f2bf86ed51c82b943eacd67edcef270c5d735d2", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=55a3debe44095349b898ca6e297b0ecb9f9d16b6", "patch": "@@ -1711,6 +1711,10 @@ pp_cxx_statement (cxx_pretty_printer *pp, tree t)\n       pp_newline_and_indent (pp, -2);\n       break;\n \n+    case STATIC_ASSERT:\n+      pp_cxx_declaration (pp, t);\n+      break;\n+\n     default:\n       pp_c_statement (pp_c_base (pp), t);\n       break;\n@@ -1906,11 +1910,21 @@ pp_cxx_explicit_instantiation (cxx_pretty_printer *pp, tree t)\n        asm-definition\n        namespace-alias-definition\n        using-declaration\n-       using-directive  */\n+       using-directive\n+       static_assert-declaration */\n void\n pp_cxx_declaration (cxx_pretty_printer *pp, tree t)\n {\n-  if (!DECL_LANG_SPECIFIC (t))\n+  if (TREE_CODE (t) == STATIC_ASSERT)\n+    {\n+      pp_cxx_identifier (pp, \"static_assert\");\n+      pp_cxx_left_paren (pp);\n+      pp_cxx_expression (pp, STATIC_ASSERT_CONDITION (t));\n+      pp_cxx_separate_with (pp, ',');\n+      pp_cxx_expression (pp, STATIC_ASSERT_MESSAGE (t));\n+      pp_cxx_right_paren (pp);\n+    }\n+  else if (!DECL_LANG_SPECIFIC (t))\n     pp_cxx_simple_declaration (pp, t);\n   else if (DECL_USE_TEMPLATE (t))\n     switch (DECL_USE_TEMPLATE (t))"}, {"sha": "c4f4d461c2febe29874d71b9b1b01c15fb6349f4", "filename": "gcc/cp/error.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=55a3debe44095349b898ca6e297b0ecb9f9d16b6", "patch": "@@ -886,6 +886,10 @@ dump_decl (tree t, int flags)\n       dump_decl (DECL_NAME (t), flags);\n       break;\n \n+    case STATIC_ASSERT:\n+      pp_cxx_declaration (cxx_pp, t);\n+      break;\n+\n     case BASELINK:\n       dump_decl (BASELINK_FUNCTIONS (t), flags);\n       break;"}, {"sha": "27a17c3d3feece8ea2891f4acd5c06fe116b395a", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=55a3debe44095349b898ca6e297b0ecb9f9d16b6", "patch": "@@ -176,6 +176,7 @@ struct resword\n #define D_EXT\t\t0x01\t/* GCC extension */\n #define D_ASM\t\t0x02\t/* in C99, but has a switch to turn it off */\n #define D_OBJC\t\t0x04\t/* Objective C++ only */\n+#define D_CPP0X         0x08    /* C++0x only */\n \n CONSTRAINT(ridbits_fit, RID_LAST_MODIFIER < sizeof(unsigned long) * CHAR_BIT);\n \n@@ -259,6 +260,7 @@ static const struct resword reswords[] =\n   { \"signed\",\t\tRID_SIGNED,\t0 },\n   { \"sizeof\",\t\tRID_SIZEOF,\t0 },\n   { \"static\",\t\tRID_STATIC,\t0 },\n+  { \"static_assert\",    RID_STATIC_ASSERT, D_CPP0X },\n   { \"static_cast\",\tRID_STATCAST,\t0 },\n   { \"struct\",\t\tRID_STRUCT,\t0 },\n   { \"switch\",\t\tRID_SWITCH,\t0 },\n@@ -314,7 +316,8 @@ init_reswords (void)\n   tree id;\n   int mask = ((flag_no_asm ? D_ASM : 0)\n \t      | D_OBJC\n-\t      | (flag_no_gnu_keywords ? D_EXT : 0));\n+\t      | (flag_no_gnu_keywords ? D_EXT : 0)\n+              | (flag_cpp0x ? 0 : D_CPP0X));\n \n   ridpointers = GGC_CNEWVEC (tree, (int) RID_MAX);\n   for (i = 0; i < ARRAY_SIZE (reswords); i++)"}, {"sha": "c5dfea6082537a39a3dfce16e3152df232b3f595", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 85, "deletions": 1, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=55a3debe44095349b898ca6e297b0ecb9f9d16b6", "patch": "@@ -1589,6 +1589,8 @@ static void cp_parser_asm_definition\n   (cp_parser *);\n static void cp_parser_linkage_specification\n   (cp_parser *);\n+static void cp_parser_static_assert\n+  (cp_parser *, bool);\n \n /* Declarators [gram.dcl.decl] */\n \n@@ -7211,6 +7213,11 @@ cp_parser_declaration (cp_parser* parser)\n      __extension__ block-declaration\n      label-declaration\n \n+   C++0x Extension:\n+\n+   block-declaration:\n+     static_assert-declaration\n+\n    If STATEMENT_P is TRUE, then this block-declaration is occurring as\n    part of a declaration-statement.  */\n \n@@ -7272,6 +7279,9 @@ cp_parser_block_declaration (cp_parser *parser,\n \tcp_parser_commit_to_tentative_parse (parser);\n       cp_parser_label_declaration (parser);\n     }\n+  /* If the next token is `static_assert' we have a static assertion.  */\n+  else if (token1->keyword == RID_STATIC_ASSERT)\n+    cp_parser_static_assert (parser, /*member_p=*/false);\n   /* Anything else must be a simple-declaration.  */\n   else\n     cp_parser_simple_declaration (parser, !statement_p);\n@@ -7825,6 +7835,68 @@ cp_parser_linkage_specification (cp_parser* parser)\n   pop_lang_context ();\n }\n \n+/* Parse a static_assert-declaration.\n+\n+   static_assert-declaration:\n+     static_assert ( constant-expression , string-literal ) ; \n+\n+   If MEMBER_P, this static_assert is a class member.  */\n+\n+static void \n+cp_parser_static_assert(cp_parser *parser, bool member_p)\n+{\n+  tree condition;\n+  tree message;\n+  cp_token *token;\n+  location_t saved_loc;\n+\n+  /* Peek at the `static_assert' token so we can keep track of exactly\n+     where the static assertion started.  */\n+  token = cp_lexer_peek_token (parser->lexer);\n+  saved_loc = token->location;\n+\n+  /* Look for the `static_assert' keyword.  */\n+  if (!cp_parser_require_keyword (parser, RID_STATIC_ASSERT, \n+                                  \"`static_assert'\"))\n+    return;\n+\n+  /*  We know we are in a static assertion; commit to any tentative\n+      parse.  */\n+  if (cp_parser_parsing_tentatively (parser))\n+    cp_parser_commit_to_tentative_parse (parser);\n+\n+  /* Parse the `(' starting the static assertion condition.  */\n+  cp_parser_require (parser, CPP_OPEN_PAREN, \"`('\");\n+\n+  /* Parse the constant-expression.  */\n+  condition = \n+    cp_parser_constant_expression (parser,\n+                                   /*allow_non_constant_p=*/false,\n+                                   /*non_constant_p=*/NULL);\n+\n+  /* Parse the separating `,'.  */\n+  cp_parser_require (parser, CPP_COMMA, \"`,'\");\n+\n+  /* Parse the string-literal message.  */\n+  message = cp_parser_string_literal (parser, \n+                                      /*translate=*/false,\n+                                      /*wide_ok=*/true);\n+\n+  /* A `)' completes the static assertion.  */\n+  if (!cp_parser_require (parser, CPP_CLOSE_PAREN, \"`)'\"))\n+    cp_parser_skip_to_closing_parenthesis (parser, \n+                                           /*recovering=*/true, \n+                                           /*or_comma=*/false,\n+\t\t\t\t\t   /*consume_paren=*/true);\n+\n+  /* A semicolon terminates the declaration.  */\n+  cp_parser_require (parser, CPP_SEMICOLON, \"`;'\");\n+\n+  /* Complete the static assertion, which may mean either processing \n+     the static assert now or saving it for template instantiation.  */\n+  finish_static_assert (condition, message, saved_loc, member_p);\n+}\n+\n /* Special member functions [gram.special] */\n \n /* Parse a conversion-function-id.\n@@ -13624,7 +13696,12 @@ cp_parser_member_specification_opt (cp_parser* parser)\n    member-declarator:\n      declarator attributes [opt] pure-specifier [opt]\n      declarator attributes [opt] constant-initializer [opt]\n-     identifier [opt] attributes [opt] : constant-expression  */\n+     identifier [opt] attributes [opt] : constant-expression  \n+\n+   C++0x Extensions:\n+\n+   member-declaration:\n+     static_assert-declaration  */\n \n static void\n cp_parser_member_declaration (cp_parser* parser)\n@@ -13687,6 +13764,13 @@ cp_parser_member_declaration (cp_parser* parser)\n       return;\n     }\n \n+  /* If the next token is `static_assert' we have a static assertion.  */\n+  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_STATIC_ASSERT))\n+    {\n+      cp_parser_static_assert (parser, /*member_p=*/true);\n+      return;\n+    }\n+\n   if (cp_parser_using_declaration (parser, /*access_declaration=*/true))\n     return;\n "}, {"sha": "bcaae6b3ac0a4c1168e20d17eeb002140b6e80b2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=55a3debe44095349b898ca6e297b0ecb9f9d16b6", "patch": "@@ -5886,8 +5886,18 @@ instantiate_class_template (tree type)\n \t  else\n \t    {\n \t      /* Build new TYPE_FIELDS.  */\n-\n-\t      if (TREE_CODE (t) != CONST_DECL)\n+              if (TREE_CODE (t) == STATIC_ASSERT)\n+                {\n+                  tree condition = \n+                    tsubst_expr (STATIC_ASSERT_CONDITION (t), args, \n+                                 tf_warning_or_error, NULL_TREE,\n+                                 /*integral_constant_expression_p=*/true);\n+                  finish_static_assert (condition,\n+                                        STATIC_ASSERT_MESSAGE (t), \n+                                        STATIC_ASSERT_SOURCE_LOCATION (t),\n+                                        /*member_p=*/true);\n+                }\n+\t      else if (TREE_CODE (t) != CONST_DECL)\n \t\t{\n \t\t  tree r;\n \n@@ -8716,6 +8726,20 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n       tsubst (TREE_TYPE (t), args, complain, NULL_TREE);\n       break;\n \n+    case STATIC_ASSERT:\n+      {\n+        tree condition = \n+          tsubst_expr (STATIC_ASSERT_CONDITION (t), \n+                       args,\n+                       complain, in_decl,\n+                       /*integral_constant_expression_p=*/true);\n+        finish_static_assert (condition,\n+                              STATIC_ASSERT_MESSAGE (t),\n+                              STATIC_ASSERT_SOURCE_LOCATION (t),\n+                              /*member_p=*/false);\n+      }\n+      break;\n+\n     case OMP_PARALLEL:\n       tmp = tsubst_omp_clauses (OMP_PARALLEL_CLAUSES (t),\n \t\t\t\targs, complain, in_decl);"}, {"sha": "9192aff56fc488119003b91be0f6b12694ccd459", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a3debe44095349b898ca6e297b0ecb9f9d16b6/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=55a3debe44095349b898ca6e297b0ecb9f9d16b6", "patch": "@@ -3914,5 +3914,57 @@ void\n init_cp_semantics (void)\n {\n }\n+\f\n+/* Build a STATIC_ASSERT for a static assertion with the condition\n+   CONDITION and the message text MESSAGE.  LOCATION is the location\n+   of the static assertion in the source code.  When MEMBER_P, this\n+   static assertion is a member of a class.  */\n+void \n+finish_static_assert (tree condition, tree message, location_t location, \n+                      bool member_p)\n+{\n+  if (type_dependent_expression_p (condition) \n+      || value_dependent_expression_p (condition))\n+    {\n+      /* We're in a template; build a STATIC_ASSERT and put it in\n+         the right place. */\n+      tree assertion;\n+\n+      assertion = make_node (STATIC_ASSERT);\n+      STATIC_ASSERT_CONDITION (assertion) = condition;\n+      STATIC_ASSERT_MESSAGE (assertion) = message;\n+      STATIC_ASSERT_SOURCE_LOCATION (assertion) = location;\n+\n+      if (member_p)\n+        maybe_add_class_template_decl_list (current_class_type, \n+                                            assertion,\n+                                            /*friend_p=*/0);\n+      else\n+        add_stmt (assertion);\n+\n+      return;\n+    }\n+\n+  /* Fold the expression and convert it to a boolean value. */\n+  condition = fold_non_dependent_expr (condition);\n+  condition = cp_convert (boolean_type_node, condition);\n+\n+  if (TREE_CODE (condition) == INTEGER_CST && !integer_zerop (condition))\n+    /* Do nothing; the condition is satisfied. */\n+    ;\n+  else \n+    {\n+      location_t saved_loc = input_location;\n+\n+      input_location = location;\n+      if (TREE_CODE (condition) == INTEGER_CST \n+          && integer_zerop (condition))\n+        /* Report the error. */\n+        error (\"static assertion failed: %E\", message);\n+      else if (condition && condition != error_mark_node)\n+        error (\"non-constant condition for static assertion\");\n+      input_location = saved_loc;\n+    }\n+}\n \n #include \"gt-cp-semantics.h\""}]}