{"sha": "ac9335bfed00633ad26eb0ec62bbdb54cdaf0429", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM5MzM1YmZlZDAwNjMzYWQyNmViMGVjNjJiYmRiNTRjZGFmMDQyOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-17T09:28:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-17T09:28:28Z"}, "message": "VIEW_CONVERT_EXPR slots for strict-align targets (PR 83884)\n\nThis PR is about a case in which we VIEW_CONVERT a variable-sized\nunaligned record:\n\n <record_type 0x7ffff6d92888 check_displace_generation__T245b sizes-gimplified type_7 BLK\n    size <var_decl 0x7ffff6846510 D.3499 ...>\n    unit-size <var_decl 0x7ffff68465a0 D.3500 ...>\n    align:8 ...>\n\nto an aligned 32-bit integer.  The strict-alignment handling of\nthis case creates an aligned temporary slot, moves the operand\ninto the slot in the operand's original mode, then accesses the\nslot in the more-aligned result mode.\n\nPreviously the size of the temporary slot was calculated using:\n\n                  HOST_WIDE_INT temp_size\n                    = MAX (int_size_in_bytes (inner_type),\n                           (HOST_WIDE_INT) GET_MODE_SIZE (mode));\n\nint_size_in_bytes would return -1 for the variable-length type,\nso we'd use the size of the result mode for the slot.  r256152 replaced\nint_size_in_bytes with tree_to_poly_uint64, which triggered an ICE.\n\nIf op0 has BLKmode we do a block copy of GET_MODE_SIZE (mode) bytes\nand then convert the slot to \"mode\":\n\n                  poly_uint64 mode_size = GET_MODE_SIZE (mode);\n                  ...\n                  if (GET_MODE (op0) == BLKmode)\n                    {\n                      rtx size_rtx = gen_int_mode (mode_size, Pmode);\n                      emit_block_move (new_with_op0_mode, op0, size_rtx,\n                                       (modifier == EXPAND_STACK_PARM\n                                        ? BLOCK_OP_CALL_PARM\n                                        : BLOCK_OP_NORMAL));\n                    }\n                  else\n                    ...\n\n                  op0 = new_rtx;\n                }\n            }\n\n          op0 = adjust_address (op0, mode, 0);\n\nso I think in that case just the size of \"mode\" is enough, even if op0\nis a fixed-size type.  For non-BLKmode op0 we first move in op0's mode\nand then convert the slot to \"mode\":\n\n                    emit_move_insn (new_with_op0_mode, op0);\n\n                  op0 = new_rtx;\n                }\n            }\n\n          op0 = adjust_address (op0, mode, 0);\n\nso I think we want the maximum of the two mode sizes in that case.\n\n2018-01-17  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR middle-end/83884\n\t* expr.c (expand_expr_real_1): Use the size of GET_MODE (op0)\n\trather than the size of inner_type to determine the stack slot size\n\twhen handling VIEW_CONVERT_EXPRs on strict-alignment targets.\n\nFrom-SVN: r256779", "tree": {"sha": "77e6465443a70b5a8698784acbc82b3c64b0bb33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77e6465443a70b5a8698784acbc82b3c64b0bb33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac9335bfed00633ad26eb0ec62bbdb54cdaf0429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac9335bfed00633ad26eb0ec62bbdb54cdaf0429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac9335bfed00633ad26eb0ec62bbdb54cdaf0429", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac9335bfed00633ad26eb0ec62bbdb54cdaf0429/comments", "author": null, "committer": null, "parents": [{"sha": "67f40e182c78353bfeac90e776e194833659d139", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f40e182c78353bfeac90e776e194833659d139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f40e182c78353bfeac90e776e194833659d139"}], "stats": {"total": 15, "additions": 11, "deletions": 4}, "files": [{"sha": "4c519879fcbd003f4c43ac39224011aec83cf94b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9335bfed00633ad26eb0ec62bbdb54cdaf0429/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9335bfed00633ad26eb0ec62bbdb54cdaf0429/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac9335bfed00633ad26eb0ec62bbdb54cdaf0429", "patch": "@@ -1,3 +1,10 @@\n+2018-01-17  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR middle-end/83884\n+\t* expr.c (expand_expr_real_1): Use the size of GET_MODE (op0)\n+\trather than the size of inner_type to determine the stack slot size\n+\twhen handling VIEW_CONVERT_EXPRs on strict-alignment targets.\n+\n 2018-01-16  Sebastian Peryt  <sebastian.peryt@intel.com>\n \n \tPR target/83546"}, {"sha": "36a6c722980d44417c11c27637fa88eced8d8b19", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac9335bfed00633ad26eb0ec62bbdb54cdaf0429/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac9335bfed00633ad26eb0ec62bbdb54cdaf0429/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ac9335bfed00633ad26eb0ec62bbdb54cdaf0429", "patch": "@@ -11145,11 +11145,11 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t\t}\n \t      else if (STRICT_ALIGNMENT)\n \t\t{\n-\t\t  tree inner_type = TREE_TYPE (treeop0);\n \t\t  poly_uint64 mode_size = GET_MODE_SIZE (mode);\n-\t\t  poly_uint64 op0_size\n-\t\t    = tree_to_poly_uint64 (TYPE_SIZE_UNIT (inner_type));\n-\t\t  poly_int64 temp_size = upper_bound (op0_size, mode_size);\n+\t\t  poly_uint64 temp_size = mode_size;\n+\t\t  if (GET_MODE (op0) != BLKmode)\n+\t\t    temp_size = upper_bound (temp_size,\n+\t\t\t\t\t     GET_MODE_SIZE (GET_MODE (op0)));\n \t\t  rtx new_rtx\n \t\t    = assign_stack_temp_for_type (mode, temp_size, type);\n \t\t  rtx new_with_op0_mode"}]}