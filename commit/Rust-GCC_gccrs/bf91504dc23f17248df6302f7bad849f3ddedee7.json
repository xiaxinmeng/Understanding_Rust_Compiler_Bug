{"sha": "bf91504dc23f17248df6302f7bad849f3ddedee7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY5MTUwNGRjMjNmMTcyNDhkZjYzMDJmN2JhZDg0OWYzZGRlZGVlNw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-01-16T21:46:40Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka007@gmail.com", "date": "2020-01-22T16:13:02Z"}, "message": "Fix a couple of memory leaks in the C++ frontend\n\nThe leak in get_mapped_args is due to auto_vec not properly supporting\ndestructible elements in that auto_vec's destructor doesn't call the\ndestructors of its elements.\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (get_mapped_args): Avoid using auto_vec\n\tas a vector element.  Release the vectors inside the lists\n\tvector.\n\t* parser.c (cp_literal_operator_id): Free the buffer.", "tree": {"sha": "84a2687ae29c5334be0d8a435c36b58acadcf8d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84a2687ae29c5334be0d8a435c36b58acadcf8d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf91504dc23f17248df6302f7bad849f3ddedee7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf91504dc23f17248df6302f7bad849f3ddedee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf91504dc23f17248df6302f7bad849f3ddedee7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf91504dc23f17248df6302f7bad849f3ddedee7/comments", "author": null, "committer": {"login": "pppalka", "id": 679888, "node_id": "MDQ6VXNlcjY3OTg4OA==", "avatar_url": "https://avatars.githubusercontent.com/u/679888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pppalka", "html_url": "https://github.com/pppalka", "followers_url": "https://api.github.com/users/pppalka/followers", "following_url": "https://api.github.com/users/pppalka/following{/other_user}", "gists_url": "https://api.github.com/users/pppalka/gists{/gist_id}", "starred_url": "https://api.github.com/users/pppalka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pppalka/subscriptions", "organizations_url": "https://api.github.com/users/pppalka/orgs", "repos_url": "https://api.github.com/users/pppalka/repos", "events_url": "https://api.github.com/users/pppalka/events{/privacy}", "received_events_url": "https://api.github.com/users/pppalka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c46e71d016c86971ac26c6fa38d76482859f296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c46e71d016c86971ac26c6fa38d76482859f296", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c46e71d016c86971ac26c6fa38d76482859f296"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "3d5823832279a17e75b1e324fff65d07fdb5e65f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf91504dc23f17248df6302f7bad849f3ddedee7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf91504dc23f17248df6302f7bad849f3ddedee7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bf91504dc23f17248df6302f7bad849f3ddedee7", "patch": "@@ -1,3 +1,10 @@\n+2020-01-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constraint.cc (get_mapped_args): Avoid using auto_vec\n+\tas a vector element.  Release the vectors inside the lists\n+\tvector.\n+\t* parser.c (cp_literal_operator_id): Free the buffer.\n+\n 2020-01-22  Jun Ma  <JunMa@linux.alibaba.com>\n \n \t* coroutines.cc (finish_co_await_expr): Add error check on return"}, {"sha": "823604afb89e7a06c2d04cc6da07f6af924415e3", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf91504dc23f17248df6302f7bad849f3ddedee7/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf91504dc23f17248df6302f7bad849f3ddedee7/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=bf91504dc23f17248df6302f7bad849f3ddedee7", "patch": "@@ -2431,7 +2431,7 @@ get_mapped_args (tree map)\n      list. Note that the list will be sparse (not all arguments supplied),\n      but instantiation is guaranteed to only use the parameters in the\n      mapping, so null arguments would never be used.  */\n-  auto_vec< auto_vec<tree> > lists (count);\n+  auto_vec< vec<tree> > lists (count);\n   lists.quick_grow_cleared (count);\n   for (tree p = map; p; p = TREE_CHAIN (p))\n     {\n@@ -2440,7 +2440,7 @@ get_mapped_args (tree map)\n       template_parm_level_and_index (TREE_VALUE (p), &level, &index);\n \n       /* Insert the argument into its corresponding position.  */\n-      auto_vec<tree> &list = lists[level - 1];\n+      vec<tree> &list = lists[level - 1];\n       if (index >= (int)list.length ())\n \tlist.safe_grow_cleared (index + 1);\n       list[index] = TREE_PURPOSE (p);\n@@ -2450,11 +2450,12 @@ get_mapped_args (tree map)\n   tree args = make_tree_vec (lists.length ());\n   for (unsigned i = 0; i != lists.length (); ++i)\n     {\n-      auto_vec<tree> &list = lists[i];\n+      vec<tree> &list = lists[i];\n       tree level = make_tree_vec (list.length ());\n       for (unsigned j = 0; j < list.length(); ++j)\n \tTREE_VEC_ELT (level, j) = list[j];\n       SET_TMPL_ARGS_LEVEL (args, i + 1, level);\n+      list.release ();\n     }\n   SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT (args, 0);\n "}, {"sha": "ea32df92f9c18b1e3e2bfe0b84690e01c3c4f1f8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf91504dc23f17248df6302f7bad849f3ddedee7/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf91504dc23f17248df6302f7bad849f3ddedee7/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=bf91504dc23f17248df6302f7bad849f3ddedee7", "patch": "@@ -15372,6 +15372,7 @@ cp_literal_operator_id (const char* name)\n \t\t\t      + strlen (name) + 10);\n   sprintf (buffer, UDLIT_OP_ANSI_FORMAT, name);\n   identifier = get_identifier (buffer);\n+  XDELETEVEC (buffer);\n \n   return identifier;\n }"}]}