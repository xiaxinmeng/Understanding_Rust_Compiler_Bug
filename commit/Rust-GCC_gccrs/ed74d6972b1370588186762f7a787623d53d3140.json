{"sha": "ed74d6972b1370588186762f7a787623d53d3140", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ3NGQ2OTcyYjEzNzA1ODgxODY3NjJmN2E3ODc2MjNkNTNkMzE0MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-12-03T16:41:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-12-03T16:41:23Z"}, "message": "fold-const.c (fold_unary_loc): Fold VEC_UNPACK_LO_EXPR...\n\n\t* fold-const.c (fold_unary_loc): Fold VEC_UNPACK_LO_EXPR,\n\tVEC_UNPACK_HI_EXPR, VEC_UNPACK_FLOAT_LO_EXPR and\n\tVEC_UNPACK_FLOAT_HI_EXPR with VECTOR_CST argument.\n\t(fold_binary_loc): Fold VEC_PACK_TRUNC_EXPR,\n\tVEC_PACK_FIX_TRUNC_EXPR, VEC_WIDEN_MULT_LO_EXPR\n\tand VEC_WIDEN_MULT_HI_EXPR with VECTOR_CST arguments.\n\n\t* gcc.dg/vect/vect-122.c: New test.\n\nFrom-SVN: r181972", "tree": {"sha": "101d7dce72755d652f7a8bd031b61275b10c84d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/101d7dce72755d652f7a8bd031b61275b10c84d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed74d6972b1370588186762f7a787623d53d3140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed74d6972b1370588186762f7a787623d53d3140", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed74d6972b1370588186762f7a787623d53d3140", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed74d6972b1370588186762f7a787623d53d3140/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8cca67b9c954eca6540832ad88c6ddeb30cbaeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8cca67b9c954eca6540832ad88c6ddeb30cbaeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8cca67b9c954eca6540832ad88c6ddeb30cbaeb"}], "stats": {"total": 177, "additions": 177, "deletions": 0}, "files": [{"sha": "82031fc32ab551652fb8bfcf86ab2aa29dca03b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed74d6972b1370588186762f7a787623d53d3140/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed74d6972b1370588186762f7a787623d53d3140/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed74d6972b1370588186762f7a787623d53d3140", "patch": "@@ -1,5 +1,12 @@\n 2011-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* fold-const.c (fold_unary_loc): Fold VEC_UNPACK_LO_EXPR,\n+\tVEC_UNPACK_HI_EXPR, VEC_UNPACK_FLOAT_LO_EXPR and\n+\tVEC_UNPACK_FLOAT_HI_EXPR with VECTOR_CST argument.\n+\t(fold_binary_loc): Fold VEC_PACK_TRUNC_EXPR,\n+\tVEC_PACK_FIX_TRUNC_EXPR, VEC_WIDEN_MULT_LO_EXPR\n+\tand VEC_WIDEN_MULT_HI_EXPR with VECTOR_CST arguments.\n+\n \tPR debug/50317\n \t* tree-ssa.c (target_for_debug_bind): Also allow is_gimple_reg_type\n \tvars that aren't referenced."}, {"sha": "a32ea9000e6d79a10084f1756c5d0c6ba8e310ce", "filename": "gcc/fold-const.c", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed74d6972b1370588186762f7a787623d53d3140/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed74d6972b1370588186762f7a787623d53d3140/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=ed74d6972b1370588186762f7a787623d53d3140", "patch": "@@ -7651,6 +7651,8 @@ build_fold_addr_expr_loc (location_t loc, tree t)\n   return build_fold_addr_expr_with_type_loc (loc, t, ptrtype);\n }\n \n+static bool vec_cst_ctor_to_array (tree, tree *);\n+\n /* Fold a unary expression of code CODE and type TYPE with operand\n    OP0.  Return the folded expression if folding is successful.\n    Otherwise, return NULL_TREE.  */\n@@ -8294,6 +8296,44 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \t}\n       return NULL_TREE;\n \n+    case VEC_UNPACK_LO_EXPR:\n+    case VEC_UNPACK_HI_EXPR:\n+    case VEC_UNPACK_FLOAT_LO_EXPR:\n+    case VEC_UNPACK_FLOAT_HI_EXPR:\n+      {\n+\tunsigned int nelts = TYPE_VECTOR_SUBPARTS (type), i;\n+\ttree *elts, vals = NULL_TREE;\n+\tenum tree_code subcode;\n+\n+\tgcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg0)) == nelts * 2);\n+\tif (TREE_CODE (arg0) != VECTOR_CST)\n+\t  return NULL_TREE;\n+\n+\telts = XALLOCAVEC (tree, nelts * 2);\n+\tif (!vec_cst_ctor_to_array (arg0, elts))\n+\t  return NULL_TREE;\n+\n+\tif ((!BYTES_BIG_ENDIAN) ^ (code == VEC_UNPACK_LO_EXPR\n+\t\t\t\t   || code == VEC_UNPACK_FLOAT_LO_EXPR))\n+\t  elts += nelts;\n+\n+\tif (code == VEC_UNPACK_LO_EXPR || code == VEC_UNPACK_HI_EXPR)\n+\t  subcode = NOP_EXPR;\n+\telse\n+\t  subcode = FLOAT_EXPR;\n+\n+\tfor (i = 0; i < nelts; i++)\n+\t  {\n+\t    elts[i] = fold_convert_const (subcode, TREE_TYPE (type), elts[i]);\n+\t    if (elts[i] == NULL_TREE || !CONSTANT_CLASS_P (elts[i]))\n+\t      return NULL_TREE;\n+\t  }\n+\n+\tfor (i = 0; i < nelts; i++)\n+\t  vals = tree_cons (NULL_TREE, elts[nelts - i - 1], vals);\n+\treturn build_vector (type, vals);\n+      }\n+\n     default:\n       return NULL_TREE;\n     } /* switch (code) */\n@@ -13498,6 +13538,73 @@ fold_binary_loc (location_t loc,\n \t}\n       return NULL_TREE;\n \n+    case VEC_PACK_TRUNC_EXPR:\n+    case VEC_PACK_FIX_TRUNC_EXPR:\n+      {\n+\tunsigned int nelts = TYPE_VECTOR_SUBPARTS (type), i;\n+\ttree *elts, vals = NULL_TREE;\n+\n+\tgcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg0)) == nelts / 2\n+\t\t    && TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg1)) == nelts / 2);\n+\tif (TREE_CODE (arg0) != VECTOR_CST || TREE_CODE (arg1) != VECTOR_CST)\n+\t  return NULL_TREE;\n+\n+\telts = XALLOCAVEC (tree, nelts);\n+\tif (!vec_cst_ctor_to_array (arg0, elts)\n+\t    || !vec_cst_ctor_to_array (arg1, elts + nelts / 2))\n+\t  return NULL_TREE;\n+\n+\tfor (i = 0; i < nelts; i++)\n+\t  {\n+\t    elts[i] = fold_convert_const (code == VEC_PACK_TRUNC_EXPR\n+\t\t\t\t\t  ? NOP_EXPR : FIX_TRUNC_EXPR,\n+\t\t\t\t\t  TREE_TYPE (type), elts[i]);\n+\t    if (elts[i] == NULL_TREE || !CONSTANT_CLASS_P (elts[i]))\n+\t      return NULL_TREE;\n+\t  }\n+\n+\tfor (i = 0; i < nelts; i++)\n+\t  vals = tree_cons (NULL_TREE, elts[nelts - i - 1], vals);\n+\treturn build_vector (type, vals);\n+      }\n+\n+    case VEC_WIDEN_MULT_LO_EXPR:\n+    case VEC_WIDEN_MULT_HI_EXPR:\n+      {\n+\tunsigned int nelts = TYPE_VECTOR_SUBPARTS (type), i;\n+\ttree *elts, vals = NULL_TREE;\n+\n+\tgcc_assert (TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg0)) == nelts * 2\n+\t\t    && TYPE_VECTOR_SUBPARTS (TREE_TYPE (arg1)) == nelts * 2);\n+\tif (TREE_CODE (arg0) != VECTOR_CST || TREE_CODE (arg1) != VECTOR_CST)\n+\t  return NULL_TREE;\n+\n+\telts = XALLOCAVEC (tree, nelts * 4);\n+\tif (!vec_cst_ctor_to_array (arg0, elts)\n+\t    || !vec_cst_ctor_to_array (arg1, elts + nelts * 2))\n+\t  return NULL_TREE;\n+\n+\tif ((!BYTES_BIG_ENDIAN) ^ (code == VEC_WIDEN_MULT_LO_EXPR))\n+\t  elts += nelts;\n+\n+\tfor (i = 0; i < nelts; i++)\n+\t  {\n+\t    elts[i] = fold_convert_const (NOP_EXPR, TREE_TYPE (type), elts[i]);\n+\t    elts[i + nelts * 2]\n+\t      = fold_convert_const (NOP_EXPR, TREE_TYPE (type),\n+\t\t\t\t    elts[i + nelts * 2]);\n+\t    if (elts[i] == NULL_TREE || elts[i + nelts * 2] == NULL_TREE)\n+\t      return NULL_TREE;\n+\t    elts[i] = const_binop (MULT_EXPR, elts[i], elts[i + nelts * 2]);\n+\t    if (elts[i] == NULL_TREE || !CONSTANT_CLASS_P (elts[i]))\n+\t      return NULL_TREE;\n+\t  }\n+\n+\tfor (i = 0; i < nelts; i++)\n+\t  vals = tree_cons (NULL_TREE, elts[nelts - i - 1], vals);\n+\treturn build_vector (type, vals);\n+      }\n+\n     default:\n       return NULL_TREE;\n     } /* switch (code) */"}, {"sha": "ffe51d3e9bcf94fe8698d2a5ebb3f78a66395451", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed74d6972b1370588186762f7a787623d53d3140/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed74d6972b1370588186762f7a787623d53d3140/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed74d6972b1370588186762f7a787623d53d3140", "patch": "@@ -1,3 +1,7 @@\n+2011-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/vect/vect-122.c: New test.\n+\n 2011-12-03  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/50684"}, {"sha": "4cbdd0f7221601f6cf465bbf63cdd2c6de02e181", "filename": "gcc/testsuite/gcc.dg/vect/vect-122.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed74d6972b1370588186762f7a787623d53d3140/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-122.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed74d6972b1370588186762f7a787623d53d3140/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-122.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-122.c?ref=ed74d6972b1370588186762f7a787623d53d3140", "patch": "@@ -0,0 +1,59 @@\n+#include \"tree-vect.h\"\n+\n+#ifndef N\n+#define N 64\n+#endif\n+\n+char a[N];\n+float b[N];\n+long long l[N], m[N];\n+\n+__attribute__((noinline, noclone)) int\n+f1 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    a[i] = i;\n+}\n+\n+__attribute__((noinline, noclone)) int\n+f2 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    b[i] = (double) i;\n+}\n+\n+__attribute__((noinline, noclone)) int\n+f3 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    l[i] = (long long) i * (i + 7);\n+}\n+\n+__attribute__((noinline, noclone)) int\n+f4 (void)\n+{\n+  int i;\n+  for (i = 0; i < N; i++)\n+    m[i] = (long long) i * 7;\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+\n+  check_vect ();\n+  f1 ();\n+  f2 ();\n+  f3 ();\n+  f4 ();\n+  for (i = 0; i < N; i++)\n+    if (a[i] != i || b[i] != i || l[i] != i * (i + 7LL) || m[i] != i * 7LL)\n+      abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}]}