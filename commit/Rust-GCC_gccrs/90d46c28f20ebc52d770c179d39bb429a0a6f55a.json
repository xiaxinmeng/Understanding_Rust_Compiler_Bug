{"sha": "90d46c28f20ebc52d770c179d39bb429a0a6f55a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBkNDZjMjhmMjBlYmM1MmQ3NzBjMTc5ZDM5YmI0MjlhMGE2ZjU1YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-12-12T14:06:53Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-12-12T14:06:53Z"}, "message": "re PR c++/12881 (ICE in make_thunk)\n\n\tPR c++/12881\n\t* method.c (make_thunk): Deal with thunk aliases when searching\n\tfor a thunk. Robustify assertion.\n\nFrom-SVN: r74571", "tree": {"sha": "c0cf098c7b8d4769179d7d6d52b26a631640cded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0cf098c7b8d4769179d7d6d52b26a631640cded"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90d46c28f20ebc52d770c179d39bb429a0a6f55a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d46c28f20ebc52d770c179d39bb429a0a6f55a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90d46c28f20ebc52d770c179d39bb429a0a6f55a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d46c28f20ebc52d770c179d39bb429a0a6f55a/comments", "author": null, "committer": null, "parents": [{"sha": "a7bc3cdc851b5dc5200d8faec328e57ae16f765d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7bc3cdc851b5dc5200d8faec328e57ae16f765d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7bc3cdc851b5dc5200d8faec328e57ae16f765d"}], "stats": {"total": 102, "additions": 93, "deletions": 9}, "files": [{"sha": "0e90958371070e56c677ac51d67f1d318e832846", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d46c28f20ebc52d770c179d39bb429a0a6f55a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d46c28f20ebc52d770c179d39bb429a0a6f55a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=90d46c28f20ebc52d770c179d39bb429a0a6f55a", "patch": "@@ -1,3 +1,9 @@\n+2003-12-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/12881\n+\t* method.c (make_thunk): Deal with thunk aliases when searching\n+\tfor a thunk. Robustify assertion.\n+\n 2003-12-11  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* mangle.c (conv_type_names): Holds IDENTIFIER_NODEs only."}, {"sha": "a08ae6bab913bf9394694f7406a2fdd0ce82badc", "filename": "gcc/cp/method.c", "status": "modified", "additions": 50, "deletions": 9, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d46c28f20ebc52d770c179d39bb429a0a6f55a/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d46c28f20ebc52d770c179d39bb429a0a6f55a/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=90d46c28f20ebc52d770c179d39bb429a0a6f55a", "patch": "@@ -124,20 +124,61 @@ make_thunk (tree function, bool this_adjusting,\n      thunks VIRTUAL_OFFSET will be an INTEGER_CST, for covariant thunks it\n      will be a BINFO.  */\n   for (thunk = DECL_THUNKS (function); thunk; thunk = TREE_CHAIN (thunk))\n-    if (DECL_THIS_THUNK_P (thunk) == this_adjusting\n- \t&& THUNK_FIXED_OFFSET (thunk) == d\n- \t&& (this_adjusting\n- \t    ? (!THUNK_VIRTUAL_OFFSET (thunk) == !virtual_offset\n- \t       && (!virtual_offset\n- \t\t   || tree_int_cst_equal (THUNK_VIRTUAL_OFFSET (thunk), \n- \t\t\t\t\t  virtual_offset)))\n- \t    : THUNK_VIRTUAL_OFFSET (thunk) == virtual_offset))\n-      return thunk;\n+    {\n+      if (DECL_THIS_THUNK_P (thunk) != this_adjusting\n+\t  || THUNK_FIXED_OFFSET (thunk) != d)\n+\t/*not me*/;\n+      else if (this_adjusting)\n+\t{\n+\t  if (!virtual_offset)\n+\t    {\n+\t      /* We want a non-virtual covariant thunk.  */\n+\t      if (!THUNK_VIRTUAL_OFFSET (thunk))\n+\t\treturn thunk;\n+\t    }\n+\t  else if (THUNK_VIRTUAL_OFFSET (thunk))\n+\t    {\n+\t      if (tree_int_cst_equal (THUNK_VIRTUAL_OFFSET (thunk),\n+\t\t\t\t      virtual_offset))\n+\t\treturn thunk;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  if (!virtual_offset)\n+\t    {\n+\t      /* We want a non-virtual covariant thunk.  */\n+\t      if (!THUNK_VIRTUAL_OFFSET (thunk))\n+\t\treturn thunk;\n+\t    }\n+\t  else if (!THUNK_VIRTUAL_OFFSET (thunk))\n+\t    /*not me*/;\n+\t  else if (THUNK_ALIAS_P (thunk))\n+\t    {\n+\t      /* We have already determined the thunks for FUNCTION,\n+\t         and there is a virtual covariant thunk alias.  We\n+\t         must compare the vbase offsets of the binfo we have\n+\t         been given, and the binfo of the thunk.  */\n+\t      tree binfo = THUNK_VIRTUAL_OFFSET (THUNK_ALIAS (thunk));\n+\t      \n+\t      if (tree_int_cst_equal (BINFO_VPTR_FIELD (virtual_offset),\n+\t\t\t\t      BINFO_VPTR_FIELD (binfo)))\n+\t\treturn THUNK_ALIAS (thunk);\n+\t    }\n+\t  else if (THUNK_VIRTUAL_OFFSET (thunk) == virtual_offset)\n+\t    return thunk;\n+\t}\n+    }\n   \n   /* All thunks must be created before FUNCTION is actually emitted;\n      the ABI requires that all thunks be emitted together with the\n      function to which they transfer control.  */\n   my_friendly_assert (!TREE_ASM_WRITTEN (function), 20021025);\n+  /* Likewise, we can only be adding thunks to a function declared in\n+     the class currently being laid out.  */\n+  my_friendly_assert (TYPE_SIZE (DECL_CONTEXT (function))\n+\t\t      && TYPE_BEING_DEFINED (DECL_CONTEXT (function)),\n+\t\t      20031211);\n \n   thunk = build_decl (FUNCTION_DECL, NULL_TREE, TREE_TYPE (function));\n   DECL_LANG_SPECIFIC (thunk) = DECL_LANG_SPECIFIC (function);"}, {"sha": "eee3f585f9b5f8a43b63538129ce89d1e7de8170", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d46c28f20ebc52d770c179d39bb429a0a6f55a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d46c28f20ebc52d770c179d39bb429a0a6f55a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90d46c28f20ebc52d770c179d39bb429a0a6f55a", "patch": "@@ -1,3 +1,8 @@\n+2003-12-12  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/12881\n+\t* g++.dg/abi/covariant2.C: New.\n+\n 2003-12-12  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* testsuite/gcc.dg/cpp/trad/macro.c: New tests."}, {"sha": "233c55aef70f6a72a0635c104a619e82e4f8f94f", "filename": "gcc/testsuite/g++.dg/abi/covariant2.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90d46c28f20ebc52d770c179d39bb429a0a6f55a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fcovariant2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90d46c28f20ebc52d770c179d39bb429a0a6f55a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fcovariant2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fcovariant2.C?ref=90d46c28f20ebc52d770c179d39bb429a0a6f55a", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 12 Dec 2003 <nathan@codesourcery.com>\n+// Origin: Volker Reichelt <reichelt@igpm.rwth-aachen.de>\n+\n+// PR c++/12881. ICE in thunk generation\n+\n+struct c1 {};\n+\n+struct c3 : virtual c1\n+{\n+    virtual c1* f6() {};\n+    int i;\n+};\n+\n+struct c6 : virtual c3 { };\n+\n+struct c7 : c3\n+{\n+    virtual c3* f6() {};\n+};\n+\n+struct c24 : virtual c7\n+{\n+    virtual c6* f6();\n+};\n+\n+c6* c24::f6() {  return 0; }\n+\n+struct c31 : c24 {};\n+"}]}