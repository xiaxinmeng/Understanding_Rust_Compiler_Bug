{"sha": "9f1c93df4811bcef7e852f20c902e6e72c34dec9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYxYzkzZGY0ODExYmNlZjdlODUyZjIwYzkwMmU2ZTcyYzM0ZGVjOQ==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2017-08-29T17:34:21Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2017-08-29T17:34:21Z"}, "message": "ira-costs: avoid missing base registers in record_address_regs\n\n\t* ira-costs.c (record_address_regs): Handle both operands of PLUS for\n\tMAX_REGS_PER_ADDRESS == 1.\n\nFrom-SVN: r251418", "tree": {"sha": "4aa22898903a7ae206032cb78ce114dcc40c6814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aa22898903a7ae206032cb78ce114dcc40c6814"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f1c93df4811bcef7e852f20c902e6e72c34dec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f1c93df4811bcef7e852f20c902e6e72c34dec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f1c93df4811bcef7e852f20c902e6e72c34dec9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f1c93df4811bcef7e852f20c902e6e72c34dec9/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ffc0382ff79b23a6f88113d277842934de258ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ffc0382ff79b23a6f88113d277842934de258ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ffc0382ff79b23a6f88113d277842934de258ed"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "35bd37964fccb95ce73b3cb8a6a9b483ec4fe86b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1c93df4811bcef7e852f20c902e6e72c34dec9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1c93df4811bcef7e852f20c902e6e72c34dec9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f1c93df4811bcef7e852f20c902e6e72c34dec9", "patch": "@@ -1,3 +1,8 @@\n+2017-08-29  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* ira-costs.c (record_address_regs): Handle both operands of PLUS for\n+\tMAX_REGS_PER_ADDRESS == 1.\n+\n 2017-08-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.opt (flag_fentry): Do not init to -1."}, {"sha": "1690e889471fe2186c36e94365e20619324a53b4", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f1c93df4811bcef7e852f20c902e6e72c34dec9/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f1c93df4811bcef7e852f20c902e6e72c34dec9/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=9f1c93df4811bcef7e852f20c902e6e72c34dec9", "patch": "@@ -1138,17 +1138,12 @@ record_address_regs (machine_mode mode, addr_space_t as, rtx x,\n \tif (code1 == SUBREG)\n \t  arg1 = SUBREG_REG (arg1), code1 = GET_CODE (arg1);\n \n-\t/* If this machine only allows one register per address, it\n-\t   must be in the first operand.  */\n-\tif (MAX_REGS_PER_ADDRESS == 1)\n-\t  record_address_regs (mode, as, arg0, 0, PLUS, code1, scale);\n-\n-\t/* If index and base registers are the same on this machine,\n+\t/* If index registers do not appear, or coincide with base registers,\n \t   just record registers in any non-constant operands.  We\n \t   assume here, as well as in the tests below, that all\n \t   addresses are in canonical form.  */\n-\telse if (INDEX_REG_CLASS\n-\t\t == base_reg_class (VOIDmode, as, PLUS, SCRATCH))\n+\tif (MAX_REGS_PER_ADDRESS == 1\n+\t    || INDEX_REG_CLASS == base_reg_class (VOIDmode, as, PLUS, SCRATCH))\n \t  {\n \t    record_address_regs (mode, as, arg0, context, PLUS, code1, scale);\n \t    if (! CONSTANT_P (arg1))"}]}