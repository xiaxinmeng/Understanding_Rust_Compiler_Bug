{"sha": "fba0bfd4546bb2b864a841cf1d43957dbaa38a89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJhMGJmZDQ1NDZiYjJiODY0YTg0MWNmMWQ0Mzk1N2RiYWEzOGE4OQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-08-29T20:57:11Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-08-29T20:57:11Z"}, "message": "flags.h (time_report, mem_report): New global flags.\n\n\t* flags.h (time_report, mem_report): New global flags.\n\t* toplev.c: Define time_report and mem_report.\n\t(f_options): Add -ftime-report and -fmem-report.\n\t(compile_file): Turn on time_report if quiet_flag is off.\n\tCall ggc_print_statistics at very end if mem_report is on.\n\t* timevar.c (TIMEVAR_ENABLE): Examine time_report, not quiet_flag.\n\n\t* ggc-common.c (ggc_print_statistics): Rename to\n\tggc_print_common_statistics; all callers changed.  Scale\n\tquantities above 10K to kilobytes and above 10M to megabytes.\n\t* ggc-page.c (ggc_page_print_statistics): Rename to\n\tggc_print_statistics.  Report memory consumed by internal data\n\tstructures for each allocation bucket.  Scale quantities above\n\t10K to kilobytes and above 10M to megabytes.\n\t* ggc-simple.c: Prototype debug_ggc_tree to avoid warning.\n\tCast PTR_KEY(p) to unsigned long in fprintf call to avoid warning.\n\tDefine tally_leaves always.\n\t(ggc_print_statistics): New function.\n\t* ggc.h: Adjust for renamed functions.\n\nFrom-SVN: r36049", "tree": {"sha": "467a74cb03ab3a07329d87c25f28745ba9ed5e7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/467a74cb03ab3a07329d87c25f28745ba9ed5e7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fba0bfd4546bb2b864a841cf1d43957dbaa38a89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba0bfd4546bb2b864a841cf1d43957dbaa38a89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fba0bfd4546bb2b864a841cf1d43957dbaa38a89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/comments", "author": null, "committer": null, "parents": [{"sha": "612105a61a150594ef233db883b1bf1ad6501720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/612105a61a150594ef233db883b1bf1ad6501720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/612105a61a150594ef233db883b1bf1ad6501720"}], "stats": {"total": 189, "additions": 153, "deletions": 36}, "files": [{"sha": "de89784b7a194184e6529c1ca11900165ccf99d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fba0bfd4546bb2b864a841cf1d43957dbaa38a89", "patch": "@@ -1,3 +1,25 @@\n+2000-08-29  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* flags.h (time_report, mem_report): New global flags.\n+\t* toplev.c: Define time_report and mem_report.\n+\t(f_options): Add -ftime-report and -fmem-report.\n+\t(compile_file): Turn on time_report if quiet_flag is off.\n+\tCall ggc_print_statistics at very end if mem_report is on.\n+\t* timevar.c (TIMEVAR_ENABLE): Examine time_report, not quiet_flag.\n+\n+\t* ggc-common.c (ggc_print_statistics): Rename to\n+\tggc_print_common_statistics; all callers changed.  Scale\n+\tquantities above 10K to kilobytes and above 10M to megabytes.\n+\t* ggc-page.c (ggc_page_print_statistics): Rename to\n+\tggc_print_statistics.  Report memory consumed by internal data\n+\tstructures for each allocation bucket.  Scale quantities above\n+\t10K to kilobytes and above 10M to megabytes.\n+\t* ggc-simple.c: Prototype debug_ggc_tree to avoid warning.\n+\tCast PTR_KEY(p) to unsigned long in fprintf call to avoid warning.\n+\tDefine tally_leaves always.\n+\t(ggc_print_statistics): New function.\n+\t* ggc.h: Adjust for renamed functions.\n+\n Wed Aug 30 00:11:42 2000  Denis Chertykov  <denisc@overta.ru>\n \n \t* config/avr/avr.md (\"*movsf\",\"*movsi\"): Pass NULL to"}, {"sha": "21f9237c629e87ec43f7e050dc6c45f605ef80b4", "filename": "gcc/flags.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=fba0bfd4546bb2b864a841cf1d43957dbaa38a89", "patch": "@@ -63,6 +63,15 @@ extern int optimize_size;\n \n extern int quiet_flag;\n \n+/* Print times taken by the various passes.  -ftime-report.  */\n+\n+extern int time_report;\n+\n+/* Print memory still in use at end of compilation (which may have little\n+   to do with peak memory consumption).  -fmem-report.  */\n+\n+extern int mem_report;\n+\n /* Don't print warning messages.  -w.  */\n \n extern int inhibit_warnings;"}, {"sha": "5f6f0c01fc52b562f244f1c09bc48831389a43b7", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=fba0bfd4546bb2b864a841cf1d43957dbaa38a89", "patch": "@@ -599,9 +599,15 @@ ggc_alloc_cleared (size)\n }\n \n /* Print statistics that are independent of the collector in use.  */\n+#define SCALE(x) ((unsigned long) ((x) < 1024*10 \\\n+\t\t  ? (x) \\\n+\t\t  : ((x) < 1024*1024*10 \\\n+\t\t     ? (x) / 1024 \\\n+\t\t     : (x) / (1024*1024))))\n+#define LABEL(x) ((x) < 1024*10 ? ' ' : ((x) < 1024*1024*10 ? 'k' : 'M'))\n \n void\n-ggc_print_statistics (stream, stats)\n+ggc_print_common_statistics (stream, stats)\n      FILE *stream;\n      ggc_statistics *stats;\n {\n@@ -627,43 +633,44 @@ ggc_print_statistics (stream, stats)\n     }\n \n   /* Print the statistics for trees.  */\n-  fprintf (stream, \"%-22s%-16s%-16s%-7s\\n\", \"Code\", \n+  fprintf (stream, \"\\n%-17s%10s %16s %10s\\n\", \"Tree\", \n \t   \"Number\", \"Bytes\", \"% Total\");\n   for (code = 0; code < MAX_TREE_CODES; ++code)\n     if (ggc_stats->num_trees[code]) \n       {\n-\tfprintf (stream, \"%s%*s%-15u %-15lu %7.3f\\n\", \n+\tfprintf (stream, \"%-17s%10u%16ld%c %10.3f\\n\",\n \t\t tree_code_name[code],\n-\t\t 22 - (int) strlen (tree_code_name[code]), \"\",\n \t\t ggc_stats->num_trees[code],\n-\t\t (unsigned long) ggc_stats->size_trees[code],\n+\t\t SCALE (ggc_stats->size_trees[code]),\n+\t\t LABEL (ggc_stats->size_trees[code]),\n \t\t (100 * ((double) ggc_stats->size_trees[code]) \n \t\t  / ggc_stats->total_size_trees));\n       }\n   fprintf (stream,\n-\t   \"%-22s%-15u %-15lu\\n\", \"Total\",\n+\t   \"%-17s%10u%16ld%c\\n\", \"Total\",\n \t   ggc_stats->total_num_trees,\n-\t   (unsigned long) ggc_stats->total_size_trees);\n+\t   SCALE (ggc_stats->total_size_trees),\n+\t   LABEL (ggc_stats->total_size_trees));\n \n   /* Print the statistics for RTL.  */\n-  fprintf (stream, \"\\n%-22s%-16s%-16s%-7s\\n\", \"Code\", \n+  fprintf (stream, \"\\n%-17s%10s %16s %10s\\n\", \"RTX\", \n \t   \"Number\", \"Bytes\", \"% Total\");\n   for (code = 0; code < NUM_RTX_CODE; ++code)\n     if (ggc_stats->num_rtxs[code]) \n       {\n-\tfprintf (stream, \"%s%*s%-15u %-15lu %7.3f\\n\", \n+\tfprintf (stream, \"%-17s%10u%16ld%c %10.3f\\n\",\n \t\t rtx_name[code],\n-\t\t 22 - (int) strlen (rtx_name[code]), \"\",\n \t\t ggc_stats->num_rtxs[code],\n-\t\t (unsigned long) ggc_stats->size_rtxs[code],\n+\t\t SCALE (ggc_stats->size_rtxs[code]),\n+\t\t LABEL (ggc_stats->size_rtxs[code]),\n \t\t (100 * ((double) ggc_stats->size_rtxs[code]) \n \t\t  / ggc_stats->total_size_rtxs));\n       }\n   fprintf (stream,\n-\t   \"%-22s%-15u %-15lu\\n\", \"Total\",\n+\t   \"%-17s%10u%16ld%c\\n\", \"Total\",\n \t   ggc_stats->total_num_rtxs,\n-\t   (unsigned long) ggc_stats->total_size_rtxs);\n-\n+\t   SCALE (ggc_stats->total_size_rtxs),\n+\t   LABEL (ggc_stats->total_size_rtxs));\n \n   /* Don't gather statistics any more.  */\n   ggc_stats = NULL;"}, {"sha": "8744129aaaff6712dbc140b6a839187114978918", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=fba0bfd4546bb2b864a841cf1d43957dbaa38a89", "patch": "@@ -1162,12 +1162,19 @@ ggc_collect ()\n }\n \n /* Print allocation statistics.  */\n+#define SCALE(x) ((unsigned long) ((x) < 1024*10 \\\n+\t\t  ? (x) \\\n+\t\t  : ((x) < 1024*1024*10 \\\n+\t\t     ? (x) / 1024 \\\n+\t\t     : (x) / (1024*1024))))\n+#define LABEL(x) ((x) < 1024*10 ? ' ' : ((x) < 1024*1024*10 ? 'k' : 'M'))\n \n void\n-ggc_page_print_statistics ()\n+ggc_print_statistics ()\n {\n   struct ggc_statistics stats;\n   unsigned int i;\n+  size_t total_overhead = 0;\n \n   /* Clear the statistics.  */\n   memset (&stats, 0, sizeof (stats));\n@@ -1176,42 +1183,49 @@ ggc_page_print_statistics ()\n   G.allocated_last_gc = 0;\n \n   /* Collect and print the statistics common across collectors.  */\n-  ggc_print_statistics (stderr, &stats);\n+  ggc_print_common_statistics (stderr, &stats);\n \n   /* Release free pages so that we will not count the bytes allocated\n      there as part of the total allocated memory.  */\n   release_pages ();\n \n   /* Collect some information about the various sizes of \n      allocation.  */\n-  fprintf (stderr, \"\\n%-4s%-16s%-16s\\n\", \"Log\", \"Allocated\", \"Used\");\n+  fprintf (stderr, \"\\n%-5s %10s  %10s  %10s\\n\",\n+\t   \"Log\", \"Allocated\", \"Used\", \"Overhead\");\n   for (i = 0; i < HOST_BITS_PER_PTR; ++i)\n     {\n       page_entry *p;\n       size_t allocated;\n       size_t in_use;\n+      size_t overhead;\n \n       /* Skip empty entries.  */\n       if (!G.pages[i])\n \tcontinue;\n \n-      allocated = in_use = 0;\n+      overhead = allocated = in_use = 0;\n \n       /* Figure out the total number of bytes allocated for objects of\n-\t this size, and how many of them are actually in use.  */\n+\t this size, and how many of them are actually in use.  Also figure\n+\t out how much memory the page table is using.  */\n       for (p = G.pages[i]; p; p = p->next)\n \t{\n \t  allocated += p->bytes;\n \t  in_use += \n \t    (OBJECTS_PER_PAGE (i) - p->num_free_objects) * (1 << i);\n+\n+\t  overhead += (sizeof (page_entry) - sizeof (long)\n+\t\t       + BITMAP_SIZE (OBJECTS_PER_PAGE (i) + 1));\n \t}\n-      fprintf (stderr, \"%-3d %-15lu %-15lu\\n\", i, \n-\t       (unsigned long) allocated, (unsigned long) in_use);\n+      fprintf (stderr, \"%-5d %10ld%c %10ld%c %10ld%c\\n\", i,\n+\t       SCALE (allocated), LABEL (allocated),\n+\t       SCALE (in_use), LABEL (in_use),\n+\t       SCALE (overhead), LABEL (overhead));\n+      total_overhead += overhead;\n     }\n-\n-  /* Print out some global information.  */\n-  fprintf (stderr, \"\\nTotal bytes marked: %lu\\n\", \n-\t   (unsigned long) G.allocated);\n-  fprintf (stderr, \"Total bytes mapped: %lu\\n\", \n-\t   (unsigned long) G.bytes_mapped);\n+  fprintf (stderr, \"%-5s %10ld%c %10ld%c %10ld%c\\n\", \"Total\",\n+\t   SCALE (G.bytes_mapped), LABEL (G.bytes_mapped),\n+\t   SCALE (G.allocated), LABEL(G.allocated),\n+\t   SCALE (total_overhead), LABEL (total_overhead));\n }"}, {"sha": "7822bb916f3d90875a97bef7e5603cabee9d56ff", "filename": "gcc/ggc-simple.c", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/gcc%2Fggc-simple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/gcc%2Fggc-simple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-simple.c?ref=fba0bfd4546bb2b864a841cf1d43957dbaa38a89", "patch": "@@ -137,10 +137,13 @@ static void clear_marks PARAMS ((struct ggc_mem *));\n static void sweep_objs PARAMS ((struct ggc_mem **));\n static void ggc_pop_context_1 PARAMS ((struct ggc_mem *, int));\n \n+/* For use from debugger.  */\n+extern void debug_ggc_tree PARAMS ((struct ggc_mem *, int));\n+\n #ifdef GGC_BALANCE\n extern void debug_ggc_balance PARAMS ((void));\n-static void tally_leaves PARAMS ((struct ggc_mem *, int, size_t *, size_t *));\n #endif\n+static void tally_leaves PARAMS ((struct ggc_mem *, int, size_t *, size_t *));\n \n /* Insert V into the search tree.  */\n \n@@ -434,7 +437,7 @@ debug_ggc_tree (p, indent)\n \n   for (i = 0; i < indent; ++i)\n     putc (' ', stderr);\n-  fprintf (stderr, \"%lx %p\\n\", PTR_KEY (p), p);\n+  fprintf (stderr, \"%lx %p\\n\", (unsigned long)PTR_KEY (p), p);\n  \n   if (p->sub[1])\n     debug_ggc_tree (p->sub[1], indent + 1);\n@@ -460,7 +463,9 @@ debug_ggc_balance ()\n \t   (float)sumdepth / (float)nleaf,\n \t   log ((double) G.objects) / M_LN2);\n }\n+#endif\n \n+/* Used by debug_ggc_balance, and also by ggc_print_statistics.  */\n static void\n tally_leaves (x, depth, nleaf, sumdepth)\n      struct ggc_mem *x;\n@@ -481,4 +486,45 @@ tally_leaves (x, depth, nleaf, sumdepth)\n \ttally_leaves (x->sub[1], depth + 1, nleaf, sumdepth);\n     }\n }\n-#endif\n+\n+#define SCALE(x) ((unsigned long) ((x) < 1024*10 \\\n+\t\t  ? (x) \\\n+\t\t  : ((x) < 1024*1024*10 \\\n+\t\t     ? (x) / 1024 \\\n+\t\t     : (x) / (1024*1024))))\n+#define LABEL(x) ((x) < 1024*10 ? ' ' : ((x) < 1024*1024*10 ? 'k' : 'M'))\n+\n+/* Report on GC memory usage.  */\n+void\n+ggc_print_statistics ()\n+{\n+  struct ggc_statistics stats;\n+  size_t nleaf = 0, sumdepth = 0;\n+\n+  /* Clear the statistics.  */\n+  memset (&stats, 0, sizeof (stats));\n+  \n+  /* Make sure collection will really occur.  */\n+  G.allocated_last_gc = 0;\n+\n+  /* Collect and print the statistics common across collectors.  */\n+  ggc_print_common_statistics (stderr, &stats);\n+\n+  /* Report on tree balancing.  */\n+  tally_leaves (G.root, 0, &nleaf, &sumdepth);\n+\n+  fprintf (stderr, \"\\n\\\n+Total internal data (bytes)\\t%ld%c\\n\\\n+Number of leaves in tree\\t%d\\n\\\n+Average leaf depth\\t\\t%.1f\\n\",\n+\t   SCALE(G.objects * offsetof (struct ggc_mem, u)),\n+\t   LABEL(G.objects * offsetof (struct ggc_mem, u)),\n+\t   nleaf, (double)sumdepth / (double)nleaf);\n+\n+  /* Report overall memory usage.  */\n+  fprintf (stderr, \"\\n\\\n+Total objects allocated\\t\\t%d\\n\\\n+Total memory in GC arena\\t%ld%c\\n\",\n+\t   G.objects,\n+\t   SCALE(G.allocated), LABEL(G.allocated));\n+}"}, {"sha": "8796fd1a83063513752da26753b911da07e2830b", "filename": "gcc/ggc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=fba0bfd4546bb2b864a841cf1d43957dbaa38a89", "patch": "@@ -206,7 +206,7 @@ size_t ggc_get_size PARAMS ((const void *));\n \n /* Used by the various collectors to gather and print statistics that\n    do not depend on the collector in use.  */\n-void ggc_print_statistics PARAMS ((FILE *, ggc_statistics *));\n+void ggc_print_common_statistics PARAMS ((FILE *, ggc_statistics *));\n \n /* Print allocation statistics.  */\n-extern void ggc_page_print_statistics PARAMS ((void));\n+extern void ggc_print_statistics PARAMS ((void));"}, {"sha": "5a79fa7ccabe5b2841d4f0b8dc7d3ce47738806f", "filename": "gcc/timevar.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/gcc%2Ftimevar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/gcc%2Ftimevar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.c?ref=fba0bfd4546bb2b864a841cf1d43957dbaa38a89", "patch": "@@ -40,7 +40,7 @@ extern int getrusage PARAMS ((int, struct rusage *));\n /* See timevar.h for an explanation of timing variables.  */\n \n /* This macro evaluates to non-zero if timing variables are enabled. */\n-#define TIMEVAR_ENABLE (!quiet_flag)\n+#define TIMEVAR_ENABLE (time_report)\n \n /* A timing variable.  */\n "}, {"sha": "b14a1ee42a91aeb7a182a7839bc665a748de2050", "filename": "gcc/toplev.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba0bfd4546bb2b864a841cf1d43957dbaa38a89/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=fba0bfd4546bb2b864a841cf1d43957dbaa38a89", "patch": "@@ -464,10 +464,19 @@ int pedantic = 0;\n \n int in_system_header = 0;\n \n-/* Don't print functions as they are compiled and don't print\n-   times taken by the various passes.  -quiet.  */\n+/* Don't print functions as they are compiled.  -quiet.  */\n \n int quiet_flag = 0;\n+\n+/* Print times taken by the various passes.  -ftime-report.  */\n+\n+int time_report = 0;\n+\n+/* Print memory still in use at end of compilation (which may have little\n+   to do with peak memory consumption).  -fmem-report.  */\n+\n+int mem_report = 0;\n+\n \f\n /* -f flags.  */\n \n@@ -1122,7 +1131,11 @@ lang_independent_options f_options[] =\n   {\"bounds-check\", &flag_bounds_check, 1,\n    \"Generate code to check bounds before dereferencing pointers and arrays\" },\n   {\"single-precision-constant\", &flag_single_precision_constant, 1,\n-  \"Convert floating point constant to single precision constant\"}\n+   \"Convert floating point constant to single precision constant\"},\n+  {\"time-report\", &time_report,\n+   \"Report time taken by each compiler pass at end of run\"},\n+  {\"mem-report\", &mem_report,\n+   \"Report on permanent memory allocation at end of run\"},\n };\n \n /* Table of language-specific options.  */\n@@ -2101,6 +2114,9 @@ compile_file (name)\n   if (dump_base_name == 0)\n     dump_base_name = name ? name : \"gccdump\";\n \n+  if (! quiet_flag)\n+    time_report = 1;\n+\n   /* Start timing total execution time.  */\n \n   init_timevar ();\n@@ -2464,6 +2480,9 @@ compile_file (name)\n \t  }\n     }\n \n+  if (mem_report)\n+    ggc_print_statistics ();\n+\n   /* Free up memory for the benefit of leak detectors.  */\n   free_reg_info ();\n "}]}