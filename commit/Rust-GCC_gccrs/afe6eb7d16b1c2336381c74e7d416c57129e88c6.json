{"sha": "afe6eb7d16b1c2336381c74e7d416c57129e88c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZlNmViN2QxNmIxYzIzMzYzODFjNzRlN2Q0MTZjNTcxMjllODhjNg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-07-04T21:52:33Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-07-04T21:56:21Z"}, "message": "Remove has_shebang flag from AST and HIR Crate classes\n\nThe lexer deals with the shebang and the parser cannot detect whether\nthere is or isn't a shebang line. The flag isn't relevant or useful in\nthe AST and HIR Crate classes.", "tree": {"sha": "1eb9aacb089630a5dffa973e89553c10ffee5eaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eb9aacb089630a5dffa973e89553c10ffee5eaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afe6eb7d16b1c2336381c74e7d416c57129e88c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe6eb7d16b1c2336381c74e7d416c57129e88c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afe6eb7d16b1c2336381c74e7d416c57129e88c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afe6eb7d16b1c2336381c74e7d416c57129e88c6/comments", "author": null, "committer": null, "parents": [{"sha": "ff35f162daebd1ac6538aa74c0f270f8e19902de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff35f162daebd1ac6538aa74c0f270f8e19902de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff35f162daebd1ac6538aa74c0f270f8e19902de"}], "stats": {"total": 53, "additions": 18, "deletions": 35}, "files": [{"sha": "12ef255bcbf96144269ecf01cffa2acf760702d8", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6eb7d16b1c2336381c74e7d416c57129e88c6/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6eb7d16b1c2336381c74e7d416c57129e88c6/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=afe6eb7d16b1c2336381c74e7d416c57129e88c6", "patch": "@@ -172,13 +172,10 @@ Crate::as_string () const\n   rust_debug (\"beginning crate recursive as-string\");\n \n   std::string str (\"Crate: \");\n-  // add utf8bom and shebang\n+  // add utf8bom\n   if (has_utf8bom)\n     str += \"\\n has utf8bom\";\n \n-  if (has_shebang)\n-    str += \"\\n has shebang\";\n-\n   // inner attributes\n   str += append_attributes (inner_attrs, INNER);\n "}, {"sha": "ce55e1beb5eb5c8b9c743acb1d8b3fb4d15ed9fb", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6eb7d16b1c2336381c74e7d416c57129e88c6/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6eb7d16b1c2336381c74e7d416c57129e88c6/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=afe6eb7d16b1c2336381c74e7d416c57129e88c6", "patch": "@@ -1551,7 +1551,6 @@ class MacroInvocationSemi : public MacroItem,\n struct Crate\n {\n   bool has_utf8bom;\n-  bool has_shebang;\n \n   std::vector<Attribute> inner_attrs;\n   // dodgy spacing required here\n@@ -1564,17 +1563,16 @@ struct Crate\n public:\n   // Constructor\n   Crate (std::vector<std::unique_ptr<Item> > items,\n-\t std::vector<Attribute> inner_attrs, bool has_utf8bom = false,\n-\t bool has_shebang = false)\n-    : has_utf8bom (has_utf8bom), has_shebang (has_shebang),\n-      inner_attrs (std::move (inner_attrs)), items (std::move (items)),\n+\t std::vector<Attribute> inner_attrs, bool has_utf8bom = false)\n+    : has_utf8bom (has_utf8bom), inner_attrs (std::move (inner_attrs)),\n+      items (std::move (items)),\n       node_id (Analysis::Mappings::get ()->get_next_node_id ())\n   {}\n \n   // Copy constructor with vector clone\n   Crate (Crate const &other)\n-    : has_utf8bom (other.has_utf8bom), has_shebang (other.has_shebang),\n-      inner_attrs (other.inner_attrs), node_id (other.node_id)\n+    : has_utf8bom (other.has_utf8bom), inner_attrs (other.inner_attrs),\n+      node_id (other.node_id)\n   {\n     items.reserve (other.items.size ());\n     for (const auto &e : other.items)\n@@ -1587,7 +1585,6 @@ struct Crate\n   Crate &operator= (Crate const &other)\n   {\n     inner_attrs = other.inner_attrs;\n-    has_shebang = other.has_shebang;\n     has_utf8bom = other.has_utf8bom;\n     node_id = other.node_id;\n "}, {"sha": "0f3c86dc7bf8e865b054056edfa208831397f115", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6eb7d16b1c2336381c74e7d416c57129e88c6/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6eb7d16b1c2336381c74e7d416c57129e88c6/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=afe6eb7d16b1c2336381c74e7d416c57129e88c6", "patch": "@@ -41,7 +41,6 @@ ASTLowering::go ()\n {\n   std::vector<std::unique_ptr<HIR::Item> > items;\n   bool has_utf8bom = false;\n-  bool has_shebang = false;\n \n   for (auto it = astCrate.items.begin (); it != astCrate.items.end (); it++)\n     {\n@@ -57,7 +56,7 @@ ASTLowering::go ()\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n \n   return HIR::Crate (std::move (items), astCrate.get_inner_attrs (), mapping,\n-\t\t     has_utf8bom, has_shebang);\n+\t\t     has_utf8bom);\n }\n \n // rust-ast-lower-block.h"}, {"sha": "051ba8736ad0a76433e2b2d32748a600bdf58df2", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6eb7d16b1c2336381c74e7d416c57129e88c6/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6eb7d16b1c2336381c74e7d416c57129e88c6/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=afe6eb7d16b1c2336381c74e7d416c57129e88c6", "patch": "@@ -73,15 +73,11 @@ std::string\n Crate::as_string () const\n {\n   std::string str (\"HIR::Crate: \");\n-  // add utf8bom and shebang\n+  // add utf8bom\n   if (has_utf8bom)\n     {\n       str += \"\\n has utf8bom\";\n     }\n-  if (has_shebang)\n-    {\n-      str += \"\\n has shebang\";\n-    }\n \n   // inner attributes\n   str += \"\\n inner attributes: \";"}, {"sha": "f918f2dc106796f29406eaa38ef03238124c5988", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6eb7d16b1c2336381c74e7d416c57129e88c6/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6eb7d16b1c2336381c74e7d416c57129e88c6/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=afe6eb7d16b1c2336381c74e7d416c57129e88c6", "patch": "@@ -679,7 +679,6 @@ class ImplItem\n struct Crate\n {\n   bool has_utf8bom;\n-  bool has_shebang;\n \n   AST::AttrVec inner_attrs;\n   // dodgy spacing required here\n@@ -692,17 +691,15 @@ struct Crate\n public:\n   // Constructor\n   Crate (std::vector<std::unique_ptr<Item> > items, AST::AttrVec inner_attrs,\n-\t Analysis::NodeMapping mappings, bool has_utf8bom = false,\n-\t bool has_shebang = false)\n-    : has_utf8bom (has_utf8bom), has_shebang (has_shebang),\n-      inner_attrs (std::move (inner_attrs)), items (std::move (items)),\n-      mappings (mappings)\n+\t Analysis::NodeMapping mappings, bool has_utf8bom = false)\n+    : has_utf8bom (has_utf8bom), inner_attrs (std::move (inner_attrs)),\n+      items (std::move (items)), mappings (mappings)\n   {}\n \n   // Copy constructor with vector clone\n   Crate (Crate const &other)\n-    : has_utf8bom (other.has_utf8bom), has_shebang (other.has_shebang),\n-      inner_attrs (other.inner_attrs), mappings (other.mappings)\n+    : has_utf8bom (other.has_utf8bom), inner_attrs (other.inner_attrs),\n+      mappings (other.mappings)\n   {\n     items.reserve (other.items.size ());\n     for (const auto &e : other.items)\n@@ -715,7 +712,6 @@ struct Crate\n   Crate &operator= (Crate const &other)\n   {\n     inner_attrs = other.inner_attrs;\n-    has_shebang = other.has_shebang;\n     has_utf8bom = other.has_utf8bom;\n     mappings = other.mappings;\n "}, {"sha": "136b34371f116f45f5eddf48b957daa2db243b2f", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afe6eb7d16b1c2336381c74e7d416c57129e88c6/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afe6eb7d16b1c2336381c74e7d416c57129e88c6/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=afe6eb7d16b1c2336381c74e7d416c57129e88c6", "patch": "@@ -393,12 +393,11 @@ template <typename ManagedTokenSource>\n AST::Crate\n Parser<ManagedTokenSource>::parse_crate ()\n {\n-  /* TODO: determine if has utf8bom and shebang. Currently, they are eliminated\n-   * by the lexing phase. Neither are useful for the compiler anyway, so maybe a\n+  /* TODO: determine if has utf8bom. Currently, is eliminated\n+   * by the lexing phase. Not useful for the compiler anyway, so maybe a\n    * better idea would be to eliminate\n-   * the has_utf8bom and has_shebang variables from the crate data structure. */\n+   * the has_utf8bom variable from the crate data structure. */\n   bool has_utf8bom = false;\n-  bool has_shebang = false;\n \n   // parse inner attributes\n   AST::AttrVec inner_attrs = parse_inner_attributes ();\n@@ -430,8 +429,7 @@ Parser<ManagedTokenSource>::parse_crate ()\n   for (const auto &error : error_table)\n     error.emit_error ();\n \n-  return AST::Crate (std::move (items), std::move (inner_attrs), has_utf8bom,\n-\t\t     has_shebang);\n+  return AST::Crate (std::move (items), std::move (inner_attrs), has_utf8bom);\n }\n \n // Parse a contiguous block of inner attributes.\n@@ -484,7 +482,7 @@ Parser<ManagedTokenSource>::parse_inner_attribute ()\n   if (lexer.peek_token ()->get_id () != EXCLAM)\n     {\n       Error error (lexer.peek_token ()->get_locus (),\n-\t\t   \"expected %<!%> or %<[%> for inner attribute or shebang\");\n+\t\t   \"expected %<!%> or %<[%> for inner attribute\");\n       add_error (std::move (error));\n \n       return AST::Attribute::create_empty ();"}]}