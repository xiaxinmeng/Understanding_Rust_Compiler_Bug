{"sha": "3c769e5a5bd0b684cbf3c7d115e1fe325f79e468", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M3NjllNWE1YmQwYjY4NGNiZjNjN2QxMTVlMWZlMzI1Zjc5ZTQ2OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-10-08T14:42:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-10-08T14:42:02Z"}, "message": "re PR c++/67557 (Calling copy constructor of base class in constructor of derived class produces crashing code)\n\n\tPR c++/67557\n\n\t* call.c (is_base_field_ref): New.\n\t(unsafe_copy_elision_p): New.\n\t(build_over_call): Use it.\n\nFrom-SVN: r228602", "tree": {"sha": "3070e76486ff4b40bbefeae75396bb1d09301e3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3070e76486ff4b40bbefeae75396bb1d09301e3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c769e5a5bd0b684cbf3c7d115e1fe325f79e468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c769e5a5bd0b684cbf3c7d115e1fe325f79e468", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c769e5a5bd0b684cbf3c7d115e1fe325f79e468", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c769e5a5bd0b684cbf3c7d115e1fe325f79e468/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25a2c75d49ab2bebbae48b3640c999c43c8375bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a2c75d49ab2bebbae48b3640c999c43c8375bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25a2c75d49ab2bebbae48b3640c999c43c8375bf"}], "stats": {"total": 94, "additions": 93, "deletions": 1}, "files": [{"sha": "bf9b0c299717d03ca835dc60249c7e122576fd84", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c769e5a5bd0b684cbf3c7d115e1fe325f79e468/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c769e5a5bd0b684cbf3c7d115e1fe325f79e468/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c769e5a5bd0b684cbf3c7d115e1fe325f79e468", "patch": "@@ -1,3 +1,10 @@\n+2015-10-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/67557\n+\t* call.c (is_base_field_ref): New.\n+\t(unsafe_copy_elision_p): New.\n+\t(build_over_call): Use it.\n+\n 2015-10-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/67867"}, {"sha": "f8db2df7cdd1007c25235694d52f0e0dec916ee6", "filename": "gcc/cp/call.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c769e5a5bd0b684cbf3c7d115e1fe325f79e468/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c769e5a5bd0b684cbf3c7d115e1fe325f79e468/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3c769e5a5bd0b684cbf3c7d115e1fe325f79e468", "patch": "@@ -7094,6 +7094,39 @@ call_copy_ctor (tree a, tsubst_flags_t complain)\n   return r;\n }\n \n+/* Return true iff T refers to a base field.  */\n+\n+static bool\n+is_base_field_ref (tree t)\n+{\n+  STRIP_NOPS (t);\n+  if (TREE_CODE (t) == ADDR_EXPR)\n+    t = TREE_OPERAND (t, 0);\n+  if (TREE_CODE (t) == COMPONENT_REF)\n+    t = TREE_OPERAND (t, 1);\n+  if (TREE_CODE (t) == FIELD_DECL)\n+    return DECL_FIELD_IS_BASE (t);\n+  return false;\n+}\n+\n+/* We can't elide a copy from a function returning by value to a base\n+   subobject, as the callee might clobber tail padding.  Return true iff this\n+   could be that case.  */\n+\n+static bool\n+unsafe_copy_elision_p (tree target, tree exp)\n+{\n+  tree type = TYPE_MAIN_VARIANT (TREE_TYPE (exp));\n+  if (type == CLASSTYPE_AS_BASE (type))\n+    return false;\n+  if (!is_base_field_ref (target)\n+      && resolves_to_fixed_type_p (target, NULL))\n+    return false;\n+  tree init = TARGET_EXPR_INITIAL (exp);\n+  return (TREE_CODE (init) == AGGR_INIT_EXPR\n+\t  && !AGGR_INIT_VIA_CTOR_P (init));\n+}\n+\n /* Subroutine of the various build_*_call functions.  Overload resolution\n    has chosen a winning candidate CAND; build up a CALL_EXPR accordingly.\n    ARGS is a TREE_LIST of the unconverted arguments to the call.  FLAGS is a\n@@ -7513,7 +7546,9 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t  else if (trivial)\n \t    return force_target_expr (DECL_CONTEXT (fn), arg, complain);\n \t}\n-      else if (TREE_CODE (arg) == TARGET_EXPR || trivial)\n+      else if (trivial\n+\t       || (TREE_CODE (arg) == TARGET_EXPR\n+\t\t   && !unsafe_copy_elision_p (fa, arg)))\n \t{\n \t  tree to = stabilize_reference (cp_build_indirect_ref (fa, RO_NULL,\n \t\t\t\t\t\t\t\tcomplain));"}, {"sha": "7eb0389a3f68291963396e45ab59847788035b49", "filename": "gcc/testsuite/g++.dg/init/elide3.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c769e5a5bd0b684cbf3c7d115e1fe325f79e468/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Felide3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c769e5a5bd0b684cbf3c7d115e1fe325f79e468/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Felide3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Felide3.C?ref=3c769e5a5bd0b684cbf3c7d115e1fe325f79e468", "patch": "@@ -0,0 +1,50 @@\n+// PR c++/67557\n+// { dg-do run }\n+\n+namespace std\n+{\n+  struct string\n+  {\n+    typedef unsigned long size_type;\n+    const char* _M_p;\n+    char        _M_local_buf[1];\n+\n+    string(const char* s) : _M_p(_M_local_buf)\n+    {\n+      __builtin_printf(\"%p constructed\\n\", this);\n+    }\n+\n+    string(const string& s) : _M_p(_M_local_buf)\n+    {\n+      __builtin_printf(\"%p copied from %p\\n\", this, &s);\n+    }\n+\n+    ~string()\n+    {\n+      __builtin_printf(\"%p destroyed\\n\", this);\n+      if (_M_p != _M_local_buf)\n+\t__builtin_abort();\n+    }\n+  };\n+}\n+\n+struct StartTag\n+{\n+  explicit StartTag(std::string const & tag) : tag_(tag), keepempty_(false) {}\n+  std::string tag_;\n+  bool keepempty_;\n+};\n+\n+StartTag fontToStartTag() { return StartTag(\"\"); }\n+\n+struct FontTag : public StartTag\n+{\n+  FontTag() : StartTag(fontToStartTag()) {}\n+};\n+\n+int main()\n+{\n+  FontTag x;\n+  __builtin_printf(\"%p x.tag_ in main()\\n\", &x.tag_);\n+  return 0;\n+}"}]}