{"sha": "2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE2ZmE5YWVlZGU0ZWMxZmM5NzdhY2E4ZDBkZGI4ZDhmMmY4OWFiOQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2010-10-28T10:58:48Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2010-10-28T10:58:48Z"}, "message": "configure.ac: Rewrite DGUX check to use GC_CFLAGS, and -O0 check to remove the need for MY_CFLAGS.\n\n2010-10-28  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* configure.ac: Rewrite DGUX check to use GC_CFLAGS, and -O0 check\n\tto remove the need for MY_CFLAGS.\n\t* Makefile.am: Do not use @...@ substitutions.  Use AM_CXXFLAGS,\n\tAM_CFLAGS and AM_LDFLAGS instead of redefining LTCOMPILE and LINK.\n\tUse \"override\" to disable -O2 when required.\n\t* configure: Regenerate.\n\t* Makefile.in: Regenerate.\n\t* include/Makefile.in: Regenerate.\n\nFrom-SVN: r166028", "tree": {"sha": "3843f435fe3b85fadf4335771cfd3a46e6551b0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3843f435fe3b85fadf4335771cfd3a46e6551b0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c575a65f66db572f4fbec024465544dbdd647685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c575a65f66db572f4fbec024465544dbdd647685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c575a65f66db572f4fbec024465544dbdd647685"}], "stats": {"total": 169, "additions": 66, "deletions": 103}, "files": [{"sha": "0f6452fe2f8d3f17abc36d0b71f384bf0cfcfcec", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9", "patch": "@@ -1,3 +1,14 @@\n+2010-10-28  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* configure.ac: Rewrite DGUX check to use GC_CFLAGS, and -O0 check\n+\tto remove the need for MY_CFLAGS.\n+\t* Makefile.am: Do not use @...@ substitutions.  Use AM_CXXFLAGS,\n+\tAM_CFLAGS and AM_LDFLAGS instead of redefining LTCOMPILE and LINK.\n+\tUse \"override\" to disable -O2 when required.\n+\t* configure: Regenerate.\n+\t* Makefile.in: Regenerate.\n+\t* include/Makefile.in: Regenerate.\n+\n 2010-10-11  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* dyn_load.c: Fix typo."}, {"sha": "358614f3c681a8d7963262511cfd8dd5a40fae71", "filename": "boehm-gc/Makefile.am", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9/boehm-gc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9/boehm-gc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FMakefile.am?ref=2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9", "patch": "@@ -33,20 +33,20 @@ mips_sgi_mach_dep.s mips_ultrix_mach_dep.s powerpc_darwin_mach_dep.s \\\n rs6000_mach_dep.s sparc_mach_dep.S sparc_netbsd_mach_dep.s \\\n sparc_sunos4_mach_dep.s ia64_save_regs_in_stack.s\n \n-extra_ldflags_libgc = @extra_ldflags_libgc@\n-\n # Include THREADLIBS here to ensure that the correct versions of\n # linuxthread semaphore functions get linked:\n-libgcjgc_la_LIBADD = @addobjs@ $(THREADLIBS) $(UNWINDLIBS)\n-libgcjgc_la_DEPENDENCIES = @addobjs@\n+libgcjgc_la_LIBADD = $(addobjs) $(THREADLIBS) $(UNWINDLIBS)\n+libgcjgc_la_DEPENDENCIES = $(addobjs)\n libgcjgc_la_LDFLAGS = $(extra_ldflags_libgc) -version-info 1:2:0 -rpath $(toolexeclibdir)\n libgcjgc_la_LINK = $(LINK) $(libgcjgc_la_LDFLAGS)\n \n-libgcjgc_convenience_la_LIBADD = @addobjs@\n-libgcjgc_convenience_la_DEPENDENCIES = @addobjs@\n+libgcjgc_convenience_la_LIBADD = $(addobjs)\n+libgcjgc_convenience_la_DEPENDENCIES = $(addobjs)\n \n-AM_CXXFLAGS = @GC_CFLAGS@\n-AM_CFLAGS = @GC_CFLAGS@\n+AM_CXXFLAGS = $(GC_CFLAGS)\n+AM_CFLAGS = $(GC_CFLAGS)\n+AM_LDFLAGS = $(shell $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n+override CFLAGS := $(filter-out $(O0_CFLAGS), $(CFLAGS)) $(O0_CFLAGS)\n \n test_ldadd = libgcjgc.la $(THREADLIBS) $(UNWINDLIBS) $(EXTRA_TEST_LIBS)\n \n@@ -93,15 +93,6 @@ libstaticrootslib_la_DEPENDENCIES = libgcjgc_convenience.la\n .S.lo:\n \t$(LTCOMPILE) -Wp,-P -x assembler-with-cpp -c $<\n \n-## We have our own definition of LTCOMPILE because we want to use our\n-## CFLAGS, not those passed in from the top level make.\n-LTCOMPILE = $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile \\\n-\t$(CC) $(DEFS) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n-\t$(AM_CFLAGS) $(MY_CFLAGS) $(GC_CFLAGS) \n-LTLDFLAGS = $(shell $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n-LINK = $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link \\\n-\t$(CC) $(AM_CFLAGS) $(MY_CFLAGS) $(LTLDFLAGS) -o $@\n-\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile."}, {"sha": "0d6bf5ca20d66105cc28dd584f021dddf5f4d1ae", "filename": "boehm-gc/Makefile.in", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9/boehm-gc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9/boehm-gc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FMakefile.in?ref=2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9", "patch": "@@ -108,7 +108,13 @@ depcomp =\n am__depfiles_maybe =\n COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n \t$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n+LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n CCLD = $(CC)\n+LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \\\n+\t$(LDFLAGS) -o $@\n CCASCOMPILE = $(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS)\n LTCCASCOMPILE = $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n \t--mode=compile $(CCAS) $(AM_CCASFLAGS) $(CCASFLAGS)\n@@ -188,9 +194,9 @@ LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n MKDIR_P = @MKDIR_P@\n-MY_CFLAGS = @MY_CFLAGS@\n NM = @NM@\n NMEDIT = @NMEDIT@\n+O0_CFLAGS = @O0_CFLAGS@\n OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n OTOOL = @OTOOL@\n@@ -301,14 +307,15 @@ sparc_sunos4_mach_dep.s ia64_save_regs_in_stack.s\n \n # Include THREADLIBS here to ensure that the correct versions of\n # linuxthread semaphore functions get linked:\n-libgcjgc_la_LIBADD = @addobjs@ $(THREADLIBS) $(UNWINDLIBS)\n-libgcjgc_la_DEPENDENCIES = @addobjs@\n+libgcjgc_la_LIBADD = $(addobjs) $(THREADLIBS) $(UNWINDLIBS)\n+libgcjgc_la_DEPENDENCIES = $(addobjs)\n libgcjgc_la_LDFLAGS = $(extra_ldflags_libgc) -version-info 1:2:0 -rpath $(toolexeclibdir)\n libgcjgc_la_LINK = $(LINK) $(libgcjgc_la_LDFLAGS)\n-libgcjgc_convenience_la_LIBADD = @addobjs@\n-libgcjgc_convenience_la_DEPENDENCIES = @addobjs@\n-AM_CXXFLAGS = @GC_CFLAGS@\n-AM_CFLAGS = @GC_CFLAGS@\n+libgcjgc_convenience_la_LIBADD = $(addobjs)\n+libgcjgc_convenience_la_DEPENDENCIES = $(addobjs)\n+AM_CXXFLAGS = $(GC_CFLAGS)\n+AM_CFLAGS = $(GC_CFLAGS)\n+AM_LDFLAGS = $(shell $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n test_ldadd = libgcjgc.la $(THREADLIBS) $(UNWINDLIBS) $(EXTRA_TEST_LIBS)\n gctest_SOURCES = tests/test.c\n gctest_LDADD = $(test_ldadd)\n@@ -334,14 +341,6 @@ libstaticrootslib_la_LDFLAGS = -version-info 1:2:0 -no-undefined \\\n \t\t\t\t-rpath /nowhere -shared-libgcc\n \n libstaticrootslib_la_DEPENDENCIES = libgcjgc_convenience.la\n-LTCOMPILE = $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile \\\n-\t$(CC) $(DEFS) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n-\t$(AM_CFLAGS) $(MY_CFLAGS) $(GC_CFLAGS) \n-\n-LTLDFLAGS = $(shell $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n-LINK = $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=link \\\n-\t$(CC) $(AM_CFLAGS) $(MY_CFLAGS) $(LTLDFLAGS) -o $@\n-\n \n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n@@ -886,6 +885,7 @@ uninstall-am:\n \tmostlyclean-generic mostlyclean-libtool mostlyclean-multi pdf \\\n \tpdf-am ps ps-am tags tags-recursive uninstall uninstall-am\n \n+override CFLAGS := $(filter-out $(O0_CFLAGS), $(CFLAGS)) $(O0_CFLAGS)\n \n .s.lo:\n \t$(LTCOMPILE) -Wp,-P -x assembler-with-cpp -c $<"}, {"sha": "b532cb503e9093f624624f56cc6fbce3d3f05f2d", "filename": "boehm-gc/configure", "status": "modified", "additions": 17, "deletions": 36, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9", "patch": "@@ -604,7 +604,7 @@ LTLIBOBJS\n LIBOBJS\n toolexeclibdir\n toolexecdir\n-MY_CFLAGS\n+O0_CFLAGS\n addtests\n addlibs\n addincludes\n@@ -15332,59 +15332,40 @@ addobjs=\"$addobjs $machdep\"\n #\n # Check for AViiON Machines running DGUX\n #\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking if host is AViiON running DGUX\" >&5\n-$as_echo_n \"checking if host is AViiON running DGUX... \" >&6; }\n ac_is_dgux=no\n ac_fn_c_check_header_mongrel \"$LINENO\" \"sys/dg_sys_info.h\" \"ac_cv_header_sys_dg_sys_info_h\" \"$ac_includes_default\"\n if test \"x$ac_cv_header_sys_dg_sys_info_h\" = x\"\"yes; then :\n-  ac_is_dgux=yes;\n+  ac_is_dgux=yes\n fi\n \n \n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking if host is AViiON running DGUX\" >&5\n+$as_echo_n \"checking if host is AViiON running DGUX... \" >&6; }\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_is_dgux\" >&5\n $as_echo \"$ac_is_dgux\" >&6; }\n     ## :GOTCHA: we do not check anything but sys/dg_sys_info.h\n if test $ac_is_dgux = yes; then\n     if test \"$enable_full_debug\" = \"yes\"; then\n-      CFLAGS=\"-g -mstandard -DDGUX -D_DGUX_SOURCE -Di386 -mno-legend -O2\"\n-      CXXFLAGS=\"-g -mstandard -DDGUX -D_DGUX_SOURCE -Di386 -mno-legend -O2\"\n-    else\n-      CFLAGS=\"-DDGUX -D_DGUX_SOURCE -Di386 -mno-legend -O2\"\n-      CXXFLAGS=\"-DDGUX -D_DGUX_SOURCE -Di386 -mno-legend -O2\"\n+        GC_CFLAGS=\"$GC_CFLAGS -mstandard\"\n     fi\n-\n-\n+    GC_CFLAGS=\"$GC_CFLAGS -DDGUX -D_DGUX_SOURCE -Di386 -mno-legend\"\n fi\n \n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether Solaris gcc optimization fix is necessary\" >&5\n-$as_echo_n \"checking whether Solaris gcc optimization fix is necessary... \" >&6; }\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether GCC optimization fix should be disabled\" >&5\n+$as_echo_n \"checking whether GCC optimization fix should be disabled... \" >&6; }\n+O0_CFLAGS=-mtune=generic\n case \"$host\" in\n- *aix*)\n-    if test \"$GCC\" = yes; then\n-       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n+ *aix*) test \"$GCC\" = yes && O0_CFLAGS=-O0 ;;\n+ *) ;;\n+esac\n+if test x\"$O0_CFLAGS\" != x; then\n+   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n $as_echo \"yes\" >&6; }\n-       new_CFLAGS=\n-       for i in $CFLAGS; do\n-\t  case \"$i\" in\n-\t   -O*)\n-\t      ;;\n-\t   *)\n-\t      new_CFLAGS=\"$new_CFLAGS $i\"\n-\t      ;;\n-\t  esac\n-       done\n-       CFLAGS=\"$new_CFLAGS\"\n-    else\n-       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+else\n+   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n $as_echo \"no\" >&6; }\n-    fi\n-    ;;\n- *) { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n-$as_echo \"no\" >&6; } ;;\n-esac\n-\n-MY_CFLAGS=\"$CFLAGS\"\n+fi\n \n \n "}, {"sha": "43be0b4866da402e4292394c8f727897331ef7b9", "filename": "boehm-gc/configure.ac", "status": "modified", "additions": 14, "deletions": 34, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9/boehm-gc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9/boehm-gc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure.ac?ref=2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9", "patch": "@@ -453,54 +453,34 @@ AC_SUBST(addtests)\n #\n # Check for AViiON Machines running DGUX\n #\n-AC_MSG_CHECKING(if host is AViiON running DGUX)\n ac_is_dgux=no\n-AC_CHECK_HEADER(sys/dg_sys_info.h,\n-[ac_is_dgux=yes;])\n+AC_CHECK_HEADER(sys/dg_sys_info.h, [ac_is_dgux=yes])\n \n+AC_MSG_CHECKING(if host is AViiON running DGUX)\n AC_MSG_RESULT($ac_is_dgux)\n     ## :GOTCHA: we do not check anything but sys/dg_sys_info.h\n if test $ac_is_dgux = yes; then\n     if test \"$enable_full_debug\" = \"yes\"; then\n-      CFLAGS=\"-g -mstandard -DDGUX -D_DGUX_SOURCE -Di386 -mno-legend -O2\"\n-      CXXFLAGS=\"-g -mstandard -DDGUX -D_DGUX_SOURCE -Di386 -mno-legend -O2\"\n-    else\n-      CFLAGS=\"-DDGUX -D_DGUX_SOURCE -Di386 -mno-legend -O2\"\n-      CXXFLAGS=\"-DDGUX -D_DGUX_SOURCE -Di386 -mno-legend -O2\"\n+        GC_CFLAGS=\"$GC_CFLAGS -mstandard\"\n     fi\n-    AC_SUBST(CFLAGS)\n-    AC_SUBST(CXXFLAGS)\n+    GC_CFLAGS=\"$GC_CFLAGS -DDGUX -D_DGUX_SOURCE -Di386 -mno-legend\"\n fi\n \n dnl As of 4.13a2, the collector will not properly work on Solaris when\n dnl built with gcc and -O.  So we remove -O in the appropriate case.\n dnl Not needed anymore on Solaris.\n-AC_MSG_CHECKING(whether Solaris gcc optimization fix is necessary)\n+AC_MSG_CHECKING([whether GCC optimization should be disabled])\n+O0_CFLAGS=\n case \"$host\" in\n- *aix*)\n-    if test \"$GCC\" = yes; then\n-       AC_MSG_RESULT(yes)\n-       new_CFLAGS=\n-       for i in $CFLAGS; do\n-\t  case \"$i\" in\n-\t   -O*)\n-\t      ;;\n-\t   *)\n-\t      new_CFLAGS=\"$new_CFLAGS $i\"\n-\t      ;;\n-\t  esac\n-       done\n-       CFLAGS=\"$new_CFLAGS\"\n-    else\n-       AC_MSG_RESULT(no)\n-    fi\n-    ;;\n- *) AC_MSG_RESULT(no) ;;\n+ *aix*) test \"$GCC\" = yes && O0_CFLAGS=-O0 ;;\n+ *) ;;\n esac\n-\n-dnl We need to override the top-level CFLAGS.  This is how we do it.\n-MY_CFLAGS=\"$CFLAGS\"\n-AC_SUBST(MY_CFLAGS)\n+if test x\"$O0_CFLAGS\" != x; then\n+   AC_MSG_RESULT(yes)\n+else\n+   AC_MSG_RESULT(no)\n+fi\n+AC_SUBST([O0_CFLAGS])\n \n dnl Include defines that have become de facto standard.\n dnl ALL_INTERIOR_POINTERS can be overridden in startup code."}, {"sha": "56c3dae6ff3a74632c2cb98b4b6b3e1e72a1cfd8", "filename": "boehm-gc/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9/boehm-gc%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9/boehm-gc%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2FMakefile.in?ref=2a6fa9aeede4ec1fc977aca8d0ddb8d8f2f89ab9", "patch": "@@ -110,9 +110,9 @@ LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n MKDIR_P = @MKDIR_P@\n-MY_CFLAGS = @MY_CFLAGS@\n NM = @NM@\n NMEDIT = @NMEDIT@\n+O0_CFLAGS = @O0_CFLAGS@\n OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n OTOOL = @OTOOL@"}]}