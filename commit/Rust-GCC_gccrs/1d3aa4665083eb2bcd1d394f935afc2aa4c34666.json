{"sha": "1d3aa4665083eb2bcd1d394f935afc2aa4c34666", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQzYWE0NjY1MDgzZWIyYmNkMWQzOTRmOTM1YWZjMmFhNGMzNDY2Ng==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-04-03T07:11:25Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-04-03T07:11:25Z"}, "message": "varasm.c (initializer_constant_valid_for_bitfield_p): Return true for REAL_CST as well.\n\n\t* varasm.c (initializer_constant_valid_for_bitfield_p): Return true\n\tfor REAL_CST as well.\n\t(output_constructor): Use RECORD_OR_UNION_TYPE_P predicate.\n\tIn the bitfield case, if the value is a REAL_CST, convert it first to\n\tan INTEGER_CST.\n\nFrom-SVN: r186100", "tree": {"sha": "04901eeaa9d8ac54f5ff6b1fa3f4f9265e4ff0a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04901eeaa9d8ac54f5ff6b1fa3f4f9265e4ff0a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d3aa4665083eb2bcd1d394f935afc2aa4c34666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3aa4665083eb2bcd1d394f935afc2aa4c34666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d3aa4665083eb2bcd1d394f935afc2aa4c34666", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3aa4665083eb2bcd1d394f935afc2aa4c34666/comments", "author": null, "committer": null, "parents": [{"sha": "0465e49e7e36b34213f3835a2079a195a519041c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0465e49e7e36b34213f3835a2079a195a519041c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0465e49e7e36b34213f3835a2079a195a519041c"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "96bcc5c63989ce098f506011689a93ee122eb15e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3aa4665083eb2bcd1d394f935afc2aa4c34666/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3aa4665083eb2bcd1d394f935afc2aa4c34666/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d3aa4665083eb2bcd1d394f935afc2aa4c34666", "patch": "@@ -1,3 +1,11 @@\n+2012-04-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* varasm.c (initializer_constant_valid_for_bitfield_p): Return true\n+\tfor REAL_CST as well.\n+\t(output_constructor): Use RECORD_OR_UNION_TYPE_P predicate.\n+\tIn the bitfield case, if the value is a REAL_CST, convert it first to\n+\tan INTEGER_CST.\n+\n 2012-04-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config.gcc: Use i386/biarchx32.h instead of i386/biarch64.h"}, {"sha": "5a5ee575a44c1781a076429b43f17bba628f853c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3aa4665083eb2bcd1d394f935afc2aa4c34666/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3aa4665083eb2bcd1d394f935afc2aa4c34666/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d3aa4665083eb2bcd1d394f935afc2aa4c34666", "patch": "@@ -1,3 +1,7 @@\n+2012-04-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/aggr5.ads: New test.\n+\n 2012-04-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/52756"}, {"sha": "ba1e695bca2bccab6e9c8b2696b15e422d773ecc", "filename": "gcc/testsuite/gnat.dg/specs/aggr5.ads", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3aa4665083eb2bcd1d394f935afc2aa4c34666/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faggr5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3aa4665083eb2bcd1d394f935afc2aa4c34666/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faggr5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faggr5.ads?ref=1d3aa4665083eb2bcd1d394f935afc2aa4c34666", "patch": "@@ -0,0 +1,19 @@\n+-- { dg-do compile }\n+\n+pragma Restrictions (No_Elaboration_Code);\n+\n+package Aggr5 is\n+\n+  type R is record\n+    C : Character;\n+    F : Float;\n+  end record;\n+\n+  for R use record\n+    C at 0 range 0 .. 7;\n+    F at 1 range 0 .. 31;\n+  end record;\n+\n+  My_R : R := (C => 'A', F => 1.0);\n+\n+end Aggr5;"}, {"sha": "34ed948cade7d81fb745923b1beeb006d02ef95b", "filename": "gcc/varasm.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3aa4665083eb2bcd1d394f935afc2aa4c34666/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3aa4665083eb2bcd1d394f935afc2aa4c34666/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=1d3aa4665083eb2bcd1d394f935afc2aa4c34666", "patch": "@@ -4420,6 +4420,7 @@ initializer_constant_valid_for_bitfield_p (tree value)\n       }\n \n     case INTEGER_CST:\n+    case REAL_CST:\n       return true;\n \n     case VIEW_CONVERT_EXPR:\n@@ -5075,10 +5076,7 @@ output_constructor (tree exp, unsigned HOST_WIDE_INT size,\n \n       /* The element in a union constructor specifies the proper field\n \t or index.  */\n-      if ((TREE_CODE (local.type) == RECORD_TYPE\n-\t   || TREE_CODE (local.type) == UNION_TYPE\n-\t   || TREE_CODE (local.type) == QUAL_UNION_TYPE)\n-\t  && ce->index != NULL_TREE)\n+      if (RECORD_OR_UNION_TYPE_P (local.type) && ce->index != NULL_TREE)\n \tlocal.field = ce->index;\n \n       else if (TREE_CODE (local.type) == ARRAY_TYPE)\n@@ -5110,9 +5108,18 @@ output_constructor (tree exp, unsigned HOST_WIDE_INT size,\n \t\t   || !CONSTRUCTOR_BITFIELD_P (local.field)))\n \toutput_constructor_regular_field (&local);\n \n-      /* For a true bitfield or part of an outer one.  */\n+      /* For a true bitfield or part of an outer one.  Only INTEGER_CSTs are\n+\t supported for scalar fields, so we may need to convert first.  */\n       else\n-\toutput_constructor_bitfield (&local, outer);\n+        {\n+\t  if (TREE_CODE (local.val) == REAL_CST)\n+\t    local.val\n+\t      = fold_unary (VIEW_CONVERT_EXPR,\n+\t\t\t    build_nonstandard_integer_type\n+\t\t\t    (TYPE_PRECISION (TREE_TYPE (local.val)), 0),\n+\t\t\t    local.val);\n+\t  output_constructor_bitfield (&local, outer);\n+\t}\n     }\n \n   /* If we are not at toplevel, save the pending data for our caller."}]}