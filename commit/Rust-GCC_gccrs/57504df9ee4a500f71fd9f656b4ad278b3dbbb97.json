{"sha": "57504df9ee4a500f71fd9f656b4ad278b3dbbb97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc1MDRkZjllZTRhNTAwZjcxZmQ5ZjY1NmI0YWQyNzhiM2RiYmI5Nw==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2005-06-12T19:59:17Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-06-12T19:59:17Z"}, "message": "re PR libfortran/19155 ([4.0 only] blanks not treated as zeros in 'E' format read (NIST FM110.FOR))\n\n\tPR libfortran/19155\n\t* io/read.c (read_f): Take care of spaces after initial sign.\n\t* gfortran.dg/pr19155.f: Add test.\n\nFrom-SVN: r100861", "tree": {"sha": "cc455889003257c5b45220b191017d12068eceb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc455889003257c5b45220b191017d12068eceb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57504df9ee4a500f71fd9f656b4ad278b3dbbb97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57504df9ee4a500f71fd9f656b4ad278b3dbbb97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57504df9ee4a500f71fd9f656b4ad278b3dbbb97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57504df9ee4a500f71fd9f656b4ad278b3dbbb97/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d35310e309872f99917cb3d7dc67abd63023d33c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d35310e309872f99917cb3d7dc67abd63023d33c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d35310e309872f99917cb3d7dc67abd63023d33c"}], "stats": {"total": 57, "additions": 37, "deletions": 20}, "files": [{"sha": "7278d612927406a7a1d83691b4af95a48ca289e0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57504df9ee4a500f71fd9f656b4ad278b3dbbb97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57504df9ee4a500f71fd9f656b4ad278b3dbbb97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=57504df9ee4a500f71fd9f656b4ad278b3dbbb97", "patch": "@@ -1,3 +1,8 @@\n+2005-06-12  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR libfortran/19155\n+\t* gfortran.dg/pr19155.f: Add test.\n+\n 2005-06-12  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* gfortran.dg/f2c_7.f90: New test."}, {"sha": "6387c3f9ce32a722dbff38ecccd0735d58d11261", "filename": "gcc/testsuite/gfortran.dg/pr19155.f", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57504df9ee4a500f71fd9f656b4ad278b3dbbb97/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr19155.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57504df9ee4a500f71fd9f656b4ad278b3dbbb97/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr19155.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr19155.f?ref=57504df9ee4a500f71fd9f656b4ad278b3dbbb97", "patch": "@@ -5,11 +5,16 @@\n ! but doesn't require us to issue an error. Since g77 accepts this as zero,\n ! we do the same.\n       real a\n+      character*10 c\n       a = 42\n       open (19,status='scratch')\n       write (19,'(A15)') 'E+00'\n       rewind (19)\n       read (19,'(E15.8)') a\n       if (a .ne. 0) call abort\n       close (19)\n+\n+      c = \"+         \"\n+      read (c,\"(F10.4)\") a\n+      if (a /= 0) call abort\n       end"}, {"sha": "79e09f670422390d997dde8df38bac67cc8791fe", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57504df9ee4a500f71fd9f656b4ad278b3dbbb97/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57504df9ee4a500f71fd9f656b4ad278b3dbbb97/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=57504df9ee4a500f71fd9f656b4ad278b3dbbb97", "patch": "@@ -1,3 +1,8 @@\n+2005-06-12  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR libfortran/19155\n+\t* io/read.c (read_f): Take care of spaces after initial sign.\n+\n 2005-06-09  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/21480"}, {"sha": "fbd38f13becd3624722283d8df5e8fdd9e7a012d", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57504df9ee4a500f71fd9f656b4ad278b3dbbb97/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57504df9ee4a500f71fd9f656b4ad278b3dbbb97/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=57504df9ee4a500f71fd9f656b4ad278b3dbbb97", "patch": "@@ -504,23 +504,7 @@ read_f (fnode * f, char *dest, int length)\n \n   p = eat_leading_spaces (&w, p);\n   if (w == 0)\n-    {\n-      switch (length)\n-\t{\n-\tcase 4:\n-\t  *((float *) dest) = 0.0f;\n-\t  break;\n-\n-\tcase 8:\n-\t  *((double *) dest) = 0.0;\n-\t  break;\n-\n-\tdefault:\n-\t  internal_error (\"Unsupported real kind during IO\");\n-\t}\n-\n-      return;\n-    }\n+    goto zero;\n \n   /* Optional sign */\n \n@@ -529,12 +513,13 @@ read_f (fnode * f, char *dest, int length)\n       if (*p == '-')\n         val_sign = -1;\n       p++;\n-\n-      if (--w == 0)\n-\tgoto bad_float;\n+      w--;\n     }\n \n   exponent_sign = 1;\n+  p = eat_leading_spaces (&w, p);\n+  if (w == 0)\n+    goto zero;\n \n   /* A digit, a '.' or a exponent character ('e', 'E', 'd' or 'D')\n      is required at this point */\n@@ -604,6 +589,23 @@ read_f (fnode * f, char *dest, int length)\n   generate_error (ERROR_READ_VALUE, \"Bad value during floating point read\");\n   return;\n \n+  /* The value read is zero */\n+ zero:\n+  switch (length)\n+    {\n+      case 4:\n+\t*((float *) dest) = 0.0f;\n+\tbreak;\n+\n+      case 8:\n+\t*((double *) dest) = 0.0;\n+\tbreak;\n+\n+      default:\n+\tinternal_error (\"Unsupported real kind during IO\");\n+    }\n+  return;\n+\n   /* At this point the start of an exponent has been found */\n  exp1:\n   while (w > 0 && *p == ' ')"}]}