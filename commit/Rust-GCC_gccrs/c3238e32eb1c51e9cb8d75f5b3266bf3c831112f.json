{"sha": "c3238e32eb1c51e9cb8d75f5b3266bf3c831112f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMyMzhlMzJlYjFjNTFlOWNiOGQ3NWY1YjMyNjZiZjNjODMxMTEyZg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-06-21T20:44:31Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-06-21T20:44:31Z"}, "message": "trans-expr.c (gfc_conv_missing_dummy, [...]): Replace calls to convert on constant integer nodes by build_int_cst.\n\n\t* trans-expr.c (gfc_conv_missing_dummy, gfc_conv_unary_op,\n\tgfc_conv_cst_int_power, gfc_conv_string_tmp,\n\tgfc_conv_function_call): Replace calls to convert on constant\n\tinteger nodes by build_int_cst.\n\t* trans-stmt.c (gfc_trans_do): Likewise.\n\t* trans-io.c (set_internal_unit, transfer_namelist_element):\n\tLikewise.\n\t* trans-decl.c (build_entry_thunks): Likewise.\n\nFrom-SVN: r114868", "tree": {"sha": "e33982f79b648a76777c89b878322574563b0f9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e33982f79b648a76777c89b878322574563b0f9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3238e32eb1c51e9cb8d75f5b3266bf3c831112f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3238e32eb1c51e9cb8d75f5b3266bf3c831112f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3238e32eb1c51e9cb8d75f5b3266bf3c831112f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3238e32eb1c51e9cb8d75f5b3266bf3c831112f/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27aeb9c0477061963b8e9247502afec41e1f84d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27aeb9c0477061963b8e9247502afec41e1f84d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27aeb9c0477061963b8e9247502afec41e1f84d4"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "a614f1d9f3b5c4a26835dbf19b551ec43b9ee94d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3238e32eb1c51e9cb8d75f5b3266bf3c831112f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3238e32eb1c51e9cb8d75f5b3266bf3c831112f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c3238e32eb1c51e9cb8d75f5b3266bf3c831112f", "patch": "@@ -1,3 +1,14 @@\n+2006-06-21  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* trans-expr.c (gfc_conv_missing_dummy, gfc_conv_unary_op,\n+\tgfc_conv_cst_int_power, gfc_conv_string_tmp,\n+\tgfc_conv_function_call): Replace calls to convert on constant\n+\tinteger nodes by build_int_cst.\n+\t* trans-stmt.c (gfc_trans_do): Likewise.\n+\t* trans-io.c (set_internal_unit, transfer_namelist_element):\n+\tLikewise.\n+\t* trans-decl.c (build_entry_thunks): Likewise.\n+\n 2006-06-20  Steven G. Kargl  <kargls@comcast.net>\n \n \t* simplify.c (gfc_simplify_rrspacing): Initialize and clear mpfr_t"}, {"sha": "14aee05af3971017a2ba270fc93f6a26d482b78c", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3238e32eb1c51e9cb8d75f5b3266bf3c831112f/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3238e32eb1c51e9cb8d75f5b3266bf3c831112f/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=c3238e32eb1c51e9cb8d75f5b3266bf3c831112f", "patch": "@@ -1618,7 +1618,7 @@ build_entry_thunks (gfc_namespace * ns)\n \t      args = tree_cons (NULL_TREE, null_pointer_node, args);\n \t      if (formal->sym->ts.type == BT_CHARACTER)\n \t\t{\n-\t\t  tmp = convert (gfc_charlen_type_node, integer_zero_node);\n+\t\t  tmp = build_int_cst (gfc_charlen_type_node, 0);\n \t\t  string_args = tree_cons (NULL_TREE, tmp, string_args);\n \t\t}\n \t    }"}, {"sha": "1d429c98ec34203bb152e00b5bf82c86a4588c5c", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3238e32eb1c51e9cb8d75f5b3266bf3c831112f/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3238e32eb1c51e9cb8d75f5b3266bf3c831112f/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=c3238e32eb1c51e9cb8d75f5b3266bf3c831112f", "patch": "@@ -152,12 +152,12 @@ gfc_conv_missing_dummy (gfc_se * se, gfc_expr * arg, gfc_typespec ts)\n \n   present = gfc_conv_expr_present (arg->symtree->n.sym);\n   tmp = build3 (COND_EXPR, TREE_TYPE (se->expr), present, se->expr,\n-\t\tconvert (TREE_TYPE (se->expr), integer_zero_node));\n+\t\tbuild_int_cst (TREE_TYPE (se->expr), 0));\n   tmp = gfc_evaluate_now (tmp, &se->pre);\n   se->expr = tmp;\n   if (ts.type == BT_CHARACTER)\n     {\n-      tmp = convert (gfc_charlen_type_node, integer_zero_node);\n+      tmp = build_int_cst (gfc_charlen_type_node, 0);\n       tmp = build3 (COND_EXPR, gfc_charlen_type_node, present,\n \t\t    se->string_length, tmp);\n       tmp = gfc_evaluate_now (tmp, &se->pre);\n@@ -526,7 +526,7 @@ gfc_conv_unary_op (enum tree_code code, gfc_se * se, gfc_expr * expr)\n      All other unary operators have an equivalent GIMPLE unary operator.  */\n   if (code == TRUTH_NOT_EXPR)\n     se->expr = build2 (EQ_EXPR, type, operand.expr,\n-\t\t       convert (type, integer_zero_node));\n+\t\t       build_int_cst (type, 0));\n   else\n     se->expr = build1 (code, type, operand.expr);\n \n@@ -656,28 +656,24 @@ gfc_conv_cst_int_power (gfc_se * se, tree lhs, tree rhs)\n   if ((sgn == -1) && (TREE_CODE (type) == INTEGER_TYPE))\n     {\n       tmp = build2 (EQ_EXPR, boolean_type_node, lhs,\n-\t\t    fold_convert (TREE_TYPE (lhs), integer_minus_one_node));\n+\t\t    build_int_cst (TREE_TYPE (lhs), -1));\n       cond = build2 (EQ_EXPR, boolean_type_node, lhs,\n-\t\t     convert (TREE_TYPE (lhs), integer_one_node));\n+\t\t     build_int_cst (TREE_TYPE (lhs), 1));\n \n       /* If rhs is even,\n \t result = (lhs == 1 || lhs == -1) ? 1 : 0.  */\n       if ((n & 1) == 0)\n         {\n \t  tmp = build2 (TRUTH_OR_EXPR, boolean_type_node, tmp, cond);\n-\t  se->expr = build3 (COND_EXPR, type, tmp,\n-\t\t\t     convert (type, integer_one_node),\n-\t\t\t     convert (type, integer_zero_node));\n+\t  se->expr = build3 (COND_EXPR, type, tmp, build_int_cst (type, 1),\n+\t\t\t     build_int_cst (type, 0));\n \t  return 1;\n \t}\n       /* If rhs is odd,\n \t result = (lhs == 1) ? 1 : (lhs == -1) ? -1 : 0.  */\n-      tmp = build3 (COND_EXPR, type, tmp,\n-\t\t    convert (type, integer_minus_one_node),\n-\t\t    convert (type, integer_zero_node));\n-      se->expr = build3 (COND_EXPR, type, cond,\n-\t\t\t convert (type, integer_one_node),\n-\t\t\t tmp);\n+      tmp = build3 (COND_EXPR, type, tmp, build_int_cst (type, -1),\n+\t\t    build_int_cst (type, 0));\n+      se->expr = build3 (COND_EXPR, type, cond, build_int_cst (type, 1), tmp);\n       return 1;\n     }\n \n@@ -866,7 +862,7 @@ gfc_conv_string_tmp (gfc_se * se, tree type, tree len)\n     {\n       /* Create a temporary variable to hold the result.  */\n       tmp = fold_build2 (MINUS_EXPR, gfc_charlen_type_node, len,\n-\t\t\t convert (gfc_charlen_type_node, integer_one_node));\n+\t\t\t build_int_cst (gfc_charlen_type_node, 1));\n       tmp = build_range_type (gfc_array_index_type, gfc_index_zero_node, tmp);\n       tmp = build_array_type (gfc_character1_type_node, tmp);\n       var = gfc_create_var (tmp, \"str\");\n@@ -1901,8 +1897,7 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t      gfc_init_se (&parmse, NULL);\n \t      parmse.expr = null_pointer_node;\n               if (arg->missing_arg_type == BT_CHARACTER)\n-\t\tparmse.string_length = convert (gfc_charlen_type_node,\n-\t\t\t\t\t\tinteger_zero_node);\n+\t\tparmse.string_length = build_int_cst (gfc_charlen_type_node, 0);\n \t    }\n \t}\n       else if (se->ss && se->ss->useflags)"}, {"sha": "6a0dac03ec4141172c69b604910330a423614252", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3238e32eb1c51e9cb8d75f5b3266bf3c831112f/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3238e32eb1c51e9cb8d75f5b3266bf3c831112f/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=c3238e32eb1c51e9cb8d75f5b3266bf3c831112f", "patch": "@@ -607,7 +607,7 @@ set_internal_unit (stmtblock_t * block, tree var, gfc_expr * e)\n       gfc_conv_expr (&se, e);\n       gfc_conv_string_parameter (&se);\n       tmp = se.expr;\n-      se.expr = fold_convert (pchar_type_node, integer_zero_node);\n+      se.expr = build_int_cst (pchar_type_node, 0);\n     }\n \n   /* Character array.  */\n@@ -1308,7 +1308,7 @@ transfer_namelist_element (stmtblock_t * block, const char * var_name,\n   if (ts->type == BT_CHARACTER)\n     NML_ADD_ARG (ts->cl->backend_decl);\n   else\n-    NML_ADD_ARG (convert (gfc_charlen_type_node, integer_zero_node));\n+    NML_ADD_ARG (build_int_cst (gfc_charlen_type_node, 0));\n \n   NML_ADD_ARG (dtype);\n   tmp = build_function_call_expr (iocall[IOCALL_SET_NML_VAL], args);"}, {"sha": "4e2f0fdfe2d073824d3aad584d76cddd99a622fd", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3238e32eb1c51e9cb8d75f5b3266bf3c831112f/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3238e32eb1c51e9cb8d75f5b3266bf3c831112f/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=c3238e32eb1c51e9cb8d75f5b3266bf3c831112f", "patch": "@@ -904,7 +904,7 @@ gfc_trans_do (gfc_code * code)\n     }\n   gfc_add_modify_expr (&block, count, tmp);\n \n-  count_one = convert (TREE_TYPE (count), integer_one_node);\n+  count_one = build_int_cst (TREE_TYPE (count), 1);\n \n   /* Initialize the DO variable: dovar = from.  */\n   gfc_add_modify_expr (&block, dovar, from);"}]}