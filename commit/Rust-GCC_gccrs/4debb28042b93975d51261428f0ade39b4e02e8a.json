{"sha": "4debb28042b93975d51261428f0ade39b4e02e8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRlYmIyODA0MmI5Mzk3NWQ1MTI2MTQyOGYwYWRlMzliNGUwMmU4YQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-09-16T18:52:31Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-09-16T18:52:31Z"}, "message": "Do not fold constant comparisons\n\nFrom-SVN: r2136", "tree": {"sha": "b5bef172aaa0f96032180ca095ce326c6bb3cad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5bef172aaa0f96032180ca095ce326c6bb3cad6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4debb28042b93975d51261428f0ade39b4e02e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4debb28042b93975d51261428f0ade39b4e02e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4debb28042b93975d51261428f0ade39b4e02e8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4debb28042b93975d51261428f0ade39b4e02e8a/comments", "author": null, "committer": null, "parents": [{"sha": "fcc415d4592f5ea52f5e90fc7f58557b7bd1d12a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcc415d4592f5ea52f5e90fc7f58557b7bd1d12a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcc415d4592f5ea52f5e90fc7f58557b7bd1d12a"}], "stats": {"total": 85, "additions": 1, "deletions": 84}, "files": [{"sha": "3716aec7a074fae99e7de54063b94613857a1ae3", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4debb28042b93975d51261428f0ade39b4e02e8a/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4debb28042b93975d51261428f0ade39b4e02e8a/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=4debb28042b93975d51261428f0ade39b4e02e8a", "patch": "@@ -1531,8 +1531,6 @@ map_test_to_internal_test (test_code)\n \f\n /* Generate the code to compare two integer values.  The return value is:\n    (reg:SI xx)\t\tThe pseudo register the comparison is in\n-   (const_int 0)\tThe comparison is always false\n-   (const_int 1)\tThe comparison is always true\n    (rtx)0\t       \tNo register, generate a simple branch.  */\n \n rtx\n@@ -1583,52 +1581,6 @@ gen_int_relational (test_code, result, cmp0, cmp1, p_invert)\n   p_info = &info[ (int)test ];\n   eqne_p = (p_info->test_code == XOR);\n \n-  /* See if the test is always true or false.  */\n-  if ((GET_CODE (cmp0) == REG || GET_CODE (cmp0) == SUBREG)\n-      && GET_CODE (cmp1) == CONST_INT)\n-    {\n-      HOST_WIDE_INT value = INTVAL (cmp1);\n-      rtx truth = (rtx)0;\n-\n-      if (test == ITEST_GEU && value == 0)\n-\ttruth = const1_rtx;\n-\n-      else if (test == ITEST_LTU && value == 0)\n-\ttruth = const0_rtx;\n-\n-      else if (!TARGET_INT64)\n-\t{\n-\t  if (test == ITEST_LTU && value == -1)\n-\t    truth = const1_rtx;\n-\n-\t  else if (test == ITEST_GTU && value == -1)\n-\t    truth = const0_rtx;\n-\n-\t  else if (test == ITEST_LEU && value == -1)\n-\t    truth = const1_rtx;\n-\n-\t  else if (test == ITEST_GT && value == 0x7fffffff)\n-\t    truth = const0_rtx;\n-\n-\t  else if (test == ITEST_LE && value == 0x7fffffff)\n-\t    truth = const1_rtx;\n-\n-\t  else if (test == ITEST_LT && value == 0x80000000)\n-\t    truth = const0_rtx;\n-\n-\t  else if (test == ITEST_GE && value == 0x80000000)\n-\t    truth = const1_rtx;\n-\t}\n-\n-      if (truth != (rtx)0)\n-\t{\n-\t  if (result != (rtx)0)\n-\t    emit_move_insn (result, truth);\n-\n-\t  return truth;\n-\t}\n-    }\n-\n   /* Eliminate simple branches */\n   branch_p = (result == (rtx)0);\n   if (branch_p)\n@@ -1813,41 +1765,6 @@ gen_conditional_branch (operands, test_code)\n       break;\n     }\n \n-  /* Handle always true or always false cases directly */\n-  if (GET_CODE (cmp0) == CONST_INT && GET_CODE (cmp1) == CONST_INT)\n-    {\n-      HOST_WIDE_INT sval0 = INTVAL (cmp0);\n-      HOST_WIDE_INT sval1 = INTVAL (cmp1);\n-      unsigned long uval0 = sval0;\n-      unsigned long uval1 = sval1;\n-      int truth\t\t  = 0;\n-\n-      switch (test_code)\n-\t{\n-\tdefault:\n-\t  goto fail;\n-\n-\tcase EQ:  truth = (sval0 == sval1); break;\n-\tcase NE:  truth = (sval0 != sval1); break;\n-\tcase GT:  truth = (sval0 >  sval1); break;\n-\tcase GE:  truth = (sval0 >= sval1); break;\n-\tcase LT:  truth = (sval0 <  sval1); break;\n-\tcase LE:  truth = (sval0 <= sval1); break;\n-\tcase GTU: truth = (uval0 >  uval1); break;\n-\tcase GEU: truth = (uval0 >= uval1); break;\n-\tcase LTU: truth = (uval0 <  uval1); break;\n-\tcase LEU: truth = (uval0 <= uval1); break;\n-\t}\n-\n-      if (invert)\n-\ttruth = ! truth;\n-\n-      if (truth)\n-\temit_jump_insn (gen_rtx (SET, VOIDmode, pc_rtx, label1));\n-\n-      return;\n-    }\n-\n   /* Generate the jump */\n   if (invert)\n     {"}, {"sha": "f7df3a038c17bd34f1411c6491f397338539fea0", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4debb28042b93975d51261428f0ade39b4e02e8a/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4debb28042b93975d51261428f0ade39b4e02e8a/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=4debb28042b93975d51261428f0ade39b4e02e8a", "patch": "@@ -473,7 +473,7 @@ while (0)\n \f\n /* Print subsidiary information on the compiler version in use.  */\n \n-#define MIPS_VERSION \"[AL 1.1, MM 24]\"\n+#define MIPS_VERSION \"[AL 1.1, MM 25]\"\n \n #ifndef MACHINE_TYPE\n #define MACHINE_TYPE \"BSD Mips\""}]}