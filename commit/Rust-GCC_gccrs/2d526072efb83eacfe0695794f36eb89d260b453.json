{"sha": "2d526072efb83eacfe0695794f36eb89d260b453", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ1MjYwNzJlZmI4M2VhY2ZlMDY5NTc5NGYzNmViODlkMjYwYjQ1Mw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2019-07-01T15:42:49Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2019-07-01T15:42:49Z"}, "message": "invoke.texi (Link Options): Further editorial changes to -flinker-output docs.\n\n2019-07-01  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/invoke.texi (Link Options): Further editorial changes to\n\t-flinker-output docs.\n\nFrom-SVN: r272887", "tree": {"sha": "3aa30078636192436eae1d34109d27200ec8e378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3aa30078636192436eae1d34109d27200ec8e378"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d526072efb83eacfe0695794f36eb89d260b453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d526072efb83eacfe0695794f36eb89d260b453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d526072efb83eacfe0695794f36eb89d260b453", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d526072efb83eacfe0695794f36eb89d260b453/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b94eec3beaf19d2bace6f4f2018d9e0bd1981f56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b94eec3beaf19d2bace6f4f2018d9e0bd1981f56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b94eec3beaf19d2bace6f4f2018d9e0bd1981f56"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "fdd5e714e0eb82d0a15962fe1374e645591590f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d526072efb83eacfe0695794f36eb89d260b453/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d526072efb83eacfe0695794f36eb89d260b453/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d526072efb83eacfe0695794f36eb89d260b453", "patch": "@@ -1,3 +1,8 @@\n+2019-07-01  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/invoke.texi (Link Options): Further editorial changes to\n+\t-flinker-output docs.\n+\n 2019-07-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.c (rs6000_force_indexed_or_indirect_mem):"}, {"sha": "9c6050b574b473256fbd6781b2fa5dfa6b2b2d12", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d526072efb83eacfe0695794f36eb89d260b453/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d526072efb83eacfe0695794f36eb89d260b453/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2d526072efb83eacfe0695794f36eb89d260b453", "patch": "@@ -6007,8 +6007,9 @@ Warn about types with virtual methods where code quality would be improved\n if the type were declared with the C++11 @code{final} specifier, \n or, if possible,\n declared in an anonymous namespace. This allows GCC to more aggressively\n-devirtualize the polymorphic calls. This warning is more effective with link\n-time optimization, where the information about the class hierarchy graph is\n+devirtualize the polymorphic calls. This warning is more effective with \n+link-time optimization, \n+where the information about the class hierarchy graph is\n more complete.\n \n @item -Wsuggest-final-methods\n@@ -13190,49 +13191,49 @@ Options}.\n \n @item -flinker-output=@var{type}\n @opindex flinker-output\n-This option controls code generation of the link time optimizer.  By\n+This option controls code generation of the link-time optimizer.  By\n default the linker output is automatically determined by the linker\n plugin.  For debugging the compiler and if incremental linking with a \n non-LTO object file is desired, it may be useful to control the type\n manually.\n \n-If @var{type} is @samp{exec} code generation produces a static\n+If @var{type} is @samp{exec}, code generation produces a static\n binary. In this case @option{-fpic} and @option{-fpie} are both\n disabled.\n \n-If @var{type} is @samp{dyn} code generation produces a shared\n+If @var{type} is @samp{dyn}, code generation produces a shared\n library.  In this case @option{-fpic} or @option{-fPIC} is preserved,\n but not enabled automatically.  This allows to build shared libraries\n-without position independent code on architectures where this is\n+without position-independent code on architectures where this is\n possible, i.e.@: on x86.\n \n-If @var{type} is @samp{pie} code generation produces an @option{-fpie}\n+If @var{type} is @samp{pie}, code generation produces an @option{-fpie}\n executable. This results in similar optimizations as @samp{exec}\n except that @option{-fpie} is not disabled if specified at compilation\n time.\n \n-If @var{type} is @samp{rel} the compiler assumes that incremental linking is\n+If @var{type} is @samp{rel}, the compiler assumes that incremental linking is\n done.  The sections containing intermediate code for link-time optimization are\n merged, pre-optimized, and output to the resulting object file. In addition, if\n-@option{-ffat-lto-objects} is specified the binary code is produced for future\n-non-LTO linking. The object file produced by incremental linking will be smaller\n+@option{-ffat-lto-objects} is specified, binary code is produced for future\n+non-LTO linking. The object file produced by incremental linking is smaller\n than a static library produced from the same object files.  At link time the\n-result of incremental linking will also load faster to compiler than a static\n+result of incremental linking also loads faster than a static\n library assuming that the majority of objects in the library are used.\n \n Finally @samp{nolto-rel} configures the compiler for incremental linking where\n-code generation is forced, a final binary is produced and the intermediate\n+code generation is forced, a final binary is produced, and the intermediate\n code for later link-time optimization is stripped. When multiple object files\n-are linked together the resulting code will be optimized better than with\n-link-time optimizations disabled (for example, cross-module inlining will\n-happen), most of benefits of whole program optimizations are however lost. \n+are linked together the resulting code is better optimized than with\n+link-time optimizations disabled (for example, cross-module inlining \n+happens), but most of benefits of whole program optimizations are lost. \n \n-During the incremental link (by @option{-r}) the linker plugin will default to\n+During the incremental link (by @option{-r}) the linker plugin defaults to\n @option{rel}. With current interfaces to GNU Binutils it is however not\n possible to incrementally link LTO objects and non-LTO objects into a single\n-mixed object file.  In the case any of object files in incremental link cannot\n-be used for link-time optimization the linker plugin will issue a warning and\n-use @samp{nolto-rel}. To maintain the whole program optimization it is\n+mixed object file.  If any of object files in incremental link cannot\n+be used for link-time optimization, the linker plugin issues a warning and\n+uses @samp{nolto-rel}. To maintain whole program optimization, it is\n recommended to link such objects into static library instead. Alternatively it\n is possible to use H.J. Lu's binutils with support for mixed objects.\n \n@@ -15379,8 +15380,8 @@ Disabled by default.\n \n @item -flto-report-wpa\n @opindex flto-report-wpa\n-Like @option{-flto-report}, but only print for the WPA phase of Link\n-Time Optimization.\n+Like @option{-flto-report}, but only print for the WPA phase of link-time\n+optimization.\n \n @item -fmem-report\n @opindex fmem-report"}]}