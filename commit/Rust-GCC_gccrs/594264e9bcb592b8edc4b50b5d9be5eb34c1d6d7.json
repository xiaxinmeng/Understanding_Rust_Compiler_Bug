{"sha": "594264e9bcb592b8edc4b50b5d9be5eb34c1d6d7", "node_id": "C_kwDOANBUbNoAKDU5NDI2NGU5YmNiNTkyYjhlZGM0YjUwYjVkOWJlNWViMzRjMWQ2ZDc", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-12-12T15:20:30Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-12-12T15:20:30Z"}, "message": "AArch64: Fix vector re-interpretation between partial SIMD modes\n\nWhile writing a patch series I started getting incorrect codegen out from\nVEC_PERM on partial struct types.\n\nIt turns out that this was happening because the TARGET_CAN_CHANGE_MODE_CLASS\nimplementation has a slight bug in it.  The hook only checked for SIMD to\nPartial but never Partial to SIMD.   This resulted in incorrect subregs to be\ngenerated from the fallback code in VEC_PERM_EXPR expansions.\n\nI have unfortunately not been able to trigger it using a standalone testcase as\nthe mid-end optimizes away the permute every time I try to describe a permute\nthat would result in the bug.\n\nThe patch now rejects any conversion of partial SIMD struct types, unless they\nare both partial structures of the same number of registers or one is a SIMD\ntype who's size is less than 8 bytes.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64.cc (aarch64_can_change_mode_class): Restrict\n\tconversions between partial struct types properly.", "tree": {"sha": "7578c29ad6b5c26a409c211e96ffbc00c517ca27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7578c29ad6b5c26a409c211e96ffbc00c517ca27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/594264e9bcb592b8edc4b50b5d9be5eb34c1d6d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/594264e9bcb592b8edc4b50b5d9be5eb34c1d6d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/594264e9bcb592b8edc4b50b5d9be5eb34c1d6d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/594264e9bcb592b8edc4b50b5d9be5eb34c1d6d7/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17ae956c0fa6baac3d22764019d5dd5ebf5c2b11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ae956c0fa6baac3d22764019d5dd5ebf5c2b11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17ae956c0fa6baac3d22764019d5dd5ebf5c2b11"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "523d49a1a426e0562b67e487bf2dd3b7e91cf0cc", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/594264e9bcb592b8edc4b50b5d9be5eb34c1d6d7/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/594264e9bcb592b8edc4b50b5d9be5eb34c1d6d7/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=594264e9bcb592b8edc4b50b5d9be5eb34c1d6d7", "patch": "@@ -26731,9 +26731,10 @@ aarch64_can_change_mode_class (machine_mode from,\n   bool from_pred_p = (from_flags & VEC_SVE_PRED);\n   bool to_pred_p = (to_flags & VEC_SVE_PRED);\n \n-  bool from_full_advsimd_struct_p = (from_flags == (VEC_ADVSIMD | VEC_STRUCT));\n   bool to_partial_advsimd_struct_p = (to_flags == (VEC_ADVSIMD | VEC_STRUCT\n \t\t\t\t\t\t   | VEC_PARTIAL));\n+  bool from_partial_advsimd_struct_p = (from_flags == (VEC_ADVSIMD | VEC_STRUCT\n+\t\t\t\t\t\t   | VEC_PARTIAL));\n \n   /* Don't allow changes between predicate modes and other modes.\n      Only predicate registers can hold predicate modes and only\n@@ -26755,9 +26756,10 @@ aarch64_can_change_mode_class (machine_mode from,\n \t  || GET_MODE_UNIT_SIZE (from) != GET_MODE_UNIT_SIZE (to)))\n     return false;\n \n-  /* Don't allow changes between partial and full Advanced SIMD structure\n-     modes.  */\n-  if (from_full_advsimd_struct_p && to_partial_advsimd_struct_p)\n+  /* Don't allow changes between partial and other registers only if\n+     one is a normal SIMD register, allow only if not larger than 64-bit.  */\n+  if ((to_partial_advsimd_struct_p ^ from_partial_advsimd_struct_p)\n+      && (known_gt (GET_MODE_SIZE (to), 8) || known_gt (GET_MODE_SIZE (to), 8)))\n     return false;\n \n   if (maybe_ne (BITS_PER_SVE_VECTOR, 128u))"}]}