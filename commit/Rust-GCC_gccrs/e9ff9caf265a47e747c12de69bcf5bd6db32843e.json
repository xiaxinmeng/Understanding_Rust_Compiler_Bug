{"sha": "e9ff9caf265a47e747c12de69bcf5bd6db32843e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlmZjljYWYyNjVhNDdlNzQ3YzEyZGU2OWJjZjViZDZkYjMyODQzZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-04-30T08:06:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-04-30T08:06:49Z"}, "message": "passes.c (execute_function_todo): Move TODO_verify_stmts and TODO_verify_ssa under the TODO_verify_il umbrella.\n\n2014-04-30  Richard Biener  <rguenther@suse.de>\n\n\t* passes.c (execute_function_todo): Move TODO_verify_stmts\n\tand TODO_verify_ssa under the TODO_verify_il umbrella.\n\t* tree-ssa.h (verify_ssa): Adjust prototype.\n\t* tree-ssa.c (verify_ssa): Add parameter to tell whether\n\twe should verify SSA operands.\n\t* tree-cfg.h (verify_gimple_in_cfg): Adjust prototype.\n\t* tree-cfg.c (verify_gimple_in_cfg): Add parameter to tell\n\twhether we should verify whether not throwing stmts have EH info.\n\t* graphite-scop-detection.c (create_sese_edges): Adjust.\n\t* tree-ssa-loop-manip.c (verify_loop_closed_ssa): Likewise.\n\t* tree-eh.c (lower_try_finally_switch): Do not add the\n\tdefault case label twice.\n\nFrom-SVN: r209928", "tree": {"sha": "89764a65392e04dc94709cea493bd321464376f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89764a65392e04dc94709cea493bd321464376f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9ff9caf265a47e747c12de69bcf5bd6db32843e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ff9caf265a47e747c12de69bcf5bd6db32843e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9ff9caf265a47e747c12de69bcf5bd6db32843e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ff9caf265a47e747c12de69bcf5bd6db32843e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8ed5150c3a1f821fb0cf266fc0fca76027fbef9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ed5150c3a1f821fb0cf266fc0fca76027fbef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8ed5150c3a1f821fb0cf266fc0fca76027fbef9"}], "stats": {"total": 74, "additions": 48, "deletions": 26}, "files": [{"sha": "5b771ea4fc8c0ad96fa81d7cb12f398dc7082795", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9ff9caf265a47e747c12de69bcf5bd6db32843e", "patch": "@@ -1,3 +1,18 @@\n+2014-04-30  Richard Biener  <rguenther@suse.de>\n+\n+\t* passes.c (execute_function_todo): Move TODO_verify_stmts\n+\tand TODO_verify_ssa under the TODO_verify_il umbrella.\n+\t* tree-ssa.h (verify_ssa): Adjust prototype.\n+\t* tree-ssa.c (verify_ssa): Add parameter to tell whether\n+\twe should verify SSA operands.\n+\t* tree-cfg.h (verify_gimple_in_cfg): Adjust prototype.\n+\t* tree-cfg.c (verify_gimple_in_cfg): Add parameter to tell\n+\twhether we should verify whether not throwing stmts have EH info.\n+\t* graphite-scop-detection.c (create_sese_edges): Adjust.\n+\t* tree-ssa-loop-manip.c (verify_loop_closed_ssa): Likewise.\n+\t* tree-eh.c (lower_try_finally_switch): Do not add the\n+\tdefault case label twice.\n+\n 2014-04-30  Marek Polacek  <polacek@redhat.com>\n \n \t* gcc.c (sanitize_spec_function): Handle SANITIZE_FLOAT_DIVIDE."}, {"sha": "5d1c96e353da6a433b9a936b006a090eaee5456f", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=e9ff9caf265a47e747c12de69bcf5bd6db32843e", "patch": "@@ -1056,7 +1056,7 @@ create_sese_edges (vec<sd_region> regions)\n \n #ifdef ENABLE_CHECKING\n   verify_loop_structure ();\n-  verify_ssa (false);\n+  verify_ssa (false, true);\n #endif\n }\n "}, {"sha": "dbff5875a5d90070dc6ddb253b997d47292091bc", "filename": "gcc/passes.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=e9ff9caf265a47e747c12de69bcf5bd6db32843e", "patch": "@@ -1716,6 +1716,7 @@ pass_manager::dump_profile_report () const\n static void\n execute_function_todo (function *fn, void *data)\n {\n+  bool from_ipa_pass = (cfun == NULL);\n   unsigned int flags = (size_t)data;\n   flags &= ~fn->last_verified;\n   if (!flags)\n@@ -1767,26 +1768,29 @@ execute_function_todo (function *fn, void *data)\n       dom_state pre_verify_state = dom_info_state (fn, CDI_DOMINATORS);\n       dom_state pre_verify_pstate = dom_info_state (fn, CDI_POST_DOMINATORS);\n \n-      if (flags & TODO_verify_ssa)\n+      if (flags & TODO_verify_il)\n \t{\n-\t  verify_gimple_in_cfg (cfun);\n-\t  verify_ssa (true);\n+\t  if (cfun->curr_properties & PROP_trees)\n+\t    {\n+\t      if (cfun->curr_properties & PROP_cfg)\n+\t\t/* IPA passes leave stmts to be fixed up, so make sure to\n+\t\t   not verify stmts really throw.  */\n+\t\tverify_gimple_in_cfg (cfun, !from_ipa_pass);\n+\t      else\n+\t\tverify_gimple_in_seq (gimple_body (cfun->decl));\n+\t    }\n+\t  if (cfun->curr_properties & PROP_ssa)\n+\t    /* IPA passes leave stmts to be fixed up, so make sure to\n+\t       not verify SSA operands whose verifier will choke on that.  */\n+\t    verify_ssa (true, !from_ipa_pass);\n \t}\n-      else if (flags & TODO_verify_stmts)\n-\tverify_gimple_in_cfg (cfun);\n       if (flags & TODO_verify_flow)\n \tverify_flow_info ();\n       if (flags & TODO_verify_il)\n \t{\n \t  if (current_loops\n \t      && loops_state_satisfies_p (LOOP_CLOSED_SSA))\n-\t    {\n-\t      if (!(flags & (TODO_verify_stmts|TODO_verify_ssa)))\n-\t\tverify_gimple_in_cfg (cfun);\n-\t      if (!(flags & TODO_verify_ssa))\n-\t\tverify_ssa (true);\n-\t      verify_loop_closed_ssa (false);\n-\t    }\n+\t    verify_loop_closed_ssa (false);\n \t}\n       if (flags & TODO_verify_rtl_sharing)\n \tverify_rtl_sharing ();\n@@ -1803,7 +1807,7 @@ execute_function_todo (function *fn, void *data)\n \n   /* For IPA passes make sure to release dominator info, it can be\n      computed by non-verifying TODOs.  */\n-  if (!cfun)\n+  if (from_ipa_pass)\n     {\n       free_dominance_info (fn, CDI_DOMINATORS);\n       free_dominance_info (fn, CDI_POST_DOMINATORS);"}, {"sha": "1918679f1bf2c91d26bf0691913cd44f8822a601", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=e9ff9caf265a47e747c12de69bcf5bd6db32843e", "patch": "@@ -4785,7 +4785,7 @@ collect_subblocks (pointer_set_t *blocks, tree block)\n /* Verify the GIMPLE statements in the CFG of FN.  */\n \n DEBUG_FUNCTION void\n-verify_gimple_in_cfg (struct function *fn)\n+verify_gimple_in_cfg (struct function *fn, bool verify_nothrow)\n {\n   basic_block bb;\n   bool err = false;\n@@ -4921,16 +4921,17 @@ verify_gimple_in_cfg (struct function *fn)\n \t     that they cannot throw, that we update other data structures\n \t     to match.  */\n \t  lp_nr = lookup_stmt_eh_lp (stmt);\n-\t  if (lp_nr != 0)\n+\t  if (lp_nr > 0)\n \t    {\n \t      if (!stmt_could_throw_p (stmt))\n \t\t{\n-\t\t  error (\"statement marked for throw, but doesn%'t\");\n-\t\t  err2 |= true;\n+\t\t  if (verify_nothrow)\n+\t\t    {\n+\t\t      error (\"statement marked for throw, but doesn%'t\");\n+\t\t      err2 |= true;\n+\t\t    }\n \t\t}\n-\t      else if (lp_nr > 0\n-\t\t       && !gsi_one_before_end_p (gsi)\n-\t\t       && stmt_can_throw_internal (stmt))\n+\t      else if (!gsi_one_before_end_p (gsi))\n \t\t{\n \t\t  error (\"statement marked for throw in middle of block\");\n \t\t  err2 |= true;"}, {"sha": "751d0a29e5a53211268a16ffd1822d1f162a2d38", "filename": "gcc/tree-cfg.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2Ftree-cfg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2Ftree-cfg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.h?ref=e9ff9caf265a47e747c12de69bcf5bd6db32843e", "patch": "@@ -58,7 +58,7 @@ extern gimple first_stmt (basic_block);\n extern gimple last_stmt (basic_block);\n extern gimple last_and_only_stmt (basic_block);\n extern void verify_gimple_in_seq (gimple_seq);\n-extern void verify_gimple_in_cfg (struct function *);\n+extern void verify_gimple_in_cfg (struct function *, bool);\n extern tree gimple_block_label (basic_block);\n extern void add_phi_args_after_copy_bb (basic_block);\n extern void add_phi_args_after_copy (basic_block *, unsigned, edge);"}, {"sha": "7b65319f85715e4e6f916ca174a8b01e91abc642", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=e9ff9caf265a47e747c12de69bcf5bd6db32843e", "patch": "@@ -1550,6 +1550,8 @@ lower_try_finally_switch (struct leh_state *state, struct leh_tf_state *tf)\n   /* Make sure that the last case is the default label, as one is required.\n      Then sort the labels, which is also required in GIMPLE.  */\n   CASE_LOW (last_case) = NULL;\n+  tree tem = case_label_vec.pop ();\n+  gcc_assert (tem == last_case);\n   sort_case_labels (case_label_vec);\n \n   /* Build the switch statement, setting last_case to be the default"}, {"sha": "6de2e4e40ecb3f73fc9a51f5506eca5751b1821a", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=e9ff9caf265a47e747c12de69bcf5bd6db32843e", "patch": "@@ -598,7 +598,7 @@ verify_loop_closed_ssa (bool verify_ssa_p)\n     return;\n \n   if (verify_ssa_p)\n-    verify_ssa (false);\n+    verify_ssa (false, true);\n \n   timevar_push (TV_VERIFY_LOOP_CLOSED);\n "}, {"sha": "8101ac717fb1fdfbfe1f66af26e37a80575d4d05", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=e9ff9caf265a47e747c12de69bcf5bd6db32843e", "patch": "@@ -959,7 +959,7 @@ verify_phi_args (gimple phi, basic_block bb, basic_block *definition_block)\n    TODO: verify the variable annotations.  */\n \n DEBUG_FUNCTION void\n-verify_ssa (bool check_modified_stmt)\n+verify_ssa (bool check_modified_stmt, bool check_ssa_operands)\n {\n   size_t i;\n   basic_block bb;\n@@ -1042,7 +1042,7 @@ verify_ssa (bool check_modified_stmt)\n \t      goto err;\n \t    }\n \n-\t  if (verify_ssa_operands (cfun, stmt))\n+\t  if (check_ssa_operands && verify_ssa_operands (cfun, stmt))\n \t    {\n \t      print_gimple_stmt (stderr, stmt, 0, TDF_VOPS);\n \t      goto err;"}, {"sha": "c866206d522ef0df79cbe9badca799d5b9e8640b", "filename": "gcc/tree-ssa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2Ftree-ssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ff9caf265a47e747c12de69bcf5bd6db32843e/gcc%2Ftree-ssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.h?ref=e9ff9caf265a47e747c12de69bcf5bd6db32843e", "patch": "@@ -45,7 +45,7 @@ extern void insert_debug_temp_for_var_def (gimple_stmt_iterator *, tree);\n extern void insert_debug_temps_for_defs (gimple_stmt_iterator *);\n extern void reset_debug_uses (gimple);\n extern void release_defs_bitset (bitmap toremove);\n-extern void verify_ssa (bool);\n+extern void verify_ssa (bool, bool);\n extern void init_tree_ssa (struct function *);\n extern void delete_tree_ssa (void);\n extern bool tree_ssa_useless_type_conversion (tree);"}]}