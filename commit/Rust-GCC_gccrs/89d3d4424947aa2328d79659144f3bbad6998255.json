{"sha": "89d3d4424947aa2328d79659144f3bbad6998255", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlkM2Q0NDI0OTQ3YWEyMzI4ZDc5NjU5MTQ0ZjNiYmFkNjk5ODI1NQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@cygnus.com", "date": "1999-02-22T14:11:58Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "1999-02-22T14:11:58Z"}, "message": "loop.c (libcall_other_regs): Make extern.\n\n\t* loop.c (libcall_other_regs): Make extern.\n\t* rtl.h (find_last_value): Add parameter to prototype.\n\t(libcall_other_reg): Add extern declaration.\n\t* rtlanal.c (find_last_value): Add another parameter to allow\n\ta definition using a hardware register to be found as well.\n\nFrom-SVN: r25378", "tree": {"sha": "cf2aec9a50f27da3426d83aa75ac8d37004224c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf2aec9a50f27da3426d83aa75ac8d37004224c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89d3d4424947aa2328d79659144f3bbad6998255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d3d4424947aa2328d79659144f3bbad6998255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89d3d4424947aa2328d79659144f3bbad6998255", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d3d4424947aa2328d79659144f3bbad6998255/comments", "author": null, "committer": null, "parents": [{"sha": "a4c6502a661a4d0a6e157e118c7be4178176f743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4c6502a661a4d0a6e157e118c7be4178176f743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4c6502a661a4d0a6e157e118c7be4178176f743"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "ab0a16bfa9f257223475fb8ad67ab4d6cde2b7ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d3d4424947aa2328d79659144f3bbad6998255/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d3d4424947aa2328d79659144f3bbad6998255/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89d3d4424947aa2328d79659144f3bbad6998255", "patch": "@@ -1,3 +1,11 @@\n+Mon Feb 22 16:54:18 EST 1999  Andrew MacLeod  <amacleod@cygnus.com>\n+\n+\t* loop.c (libcall_other_regs): Make extern.\n+\t* rtl.h (find_last_value): Add parameter to prototype.\n+\t(libcall_other_reg): Add extern declaration.\n+\t* rtlanal.c (find_last_value): Add another parameter to allow\n+\ta definition using a hardware register to be found as well.\n+\n Mon Feb 22 13:33:47 1999  Mark Mitchell  <mark@markmitchell.com>\n \n \t* cse.c (dump_class): New function."}, {"sha": "cd77cddee5c95ee0c6d9a04b8e6448ac34fc9a6e", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d3d4424947aa2328d79659144f3bbad6998255/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d3d4424947aa2328d79659144f3bbad6998255/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=89d3d4424947aa2328d79659144f3bbad6998255", "patch": "@@ -291,7 +291,6 @@ static void mark_loop_jump PROTO((rtx, int));\n static void prescan_loop PROTO((rtx, rtx));\n static int reg_in_basic_block_p PROTO((rtx, rtx));\n static int consec_sets_invariant_p PROTO((rtx, int, rtx));\n-static rtx libcall_other_reg PROTO((rtx, rtx));\n static int labels_in_range_p PROTO((rtx, int));\n static void count_one_set PROTO((rtx, rtx, varray_type, rtx *));\n \n@@ -1241,7 +1240,7 @@ record_excess_regs (in_this, not_in_this, output)\n    If there are none, return 0.\n    If there are one or more, return an EXPR_LIST containing all of them.  */\n \n-static rtx\n+rtx\n libcall_other_reg (insn, equiv)\n      rtx insn, equiv;\n {"}, {"sha": "2839c88350295e9624295a595b71e268881a17b2", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d3d4424947aa2328d79659144f3bbad6998255/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d3d4424947aa2328d79659144f3bbad6998255/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=89d3d4424947aa2328d79659144f3bbad6998255", "patch": "@@ -1013,7 +1013,7 @@ extern int modified_in_p\t\tPROTO((rtx, rtx));\n extern int reg_set_p\t\t\tPROTO((rtx, rtx));\n extern rtx single_set\t\t\tPROTO((rtx));\n extern int multiple_sets\t\tPROTO((rtx));\n-extern rtx find_last_value\t\tPROTO((rtx, rtx *, rtx));\n+extern rtx find_last_value\t\tPROTO((rtx, rtx *, rtx, int));\n extern int refers_to_regno_p\t\tPROTO((int, int, rtx, rtx *));\n extern int reg_overlap_mentioned_p\tPROTO((rtx, rtx));\n extern void note_stores\t\t\tPROTO((rtx, void (*)()));\n@@ -1390,6 +1390,7 @@ extern void print_inline_rtx\t\tPROTO ((FILE *, rtx, int));\n \n /* In loop.c */\n extern void init_loop\t\t\tPROTO ((void));\n+extern rtx libcall_other_reg\t\tPROTO ((rtx, rtx));\n #ifdef BUFSIZ\n extern void loop_optimize\t\tPROTO ((rtx, FILE *, int, int));\n #endif"}, {"sha": "1dabc369c189c10531705c70247ce28e521fc928", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d3d4424947aa2328d79659144f3bbad6998255/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d3d4424947aa2328d79659144f3bbad6998255/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=89d3d4424947aa2328d79659144f3bbad6998255", "patch": "@@ -740,13 +740,15 @@ multiple_sets (insn)\n /* Return the last thing that X was assigned from before *PINSN.  Verify that\n    the object is not modified up to VALID_TO.  If it was, if we hit\n    a partial assignment to X, or hit a CODE_LABEL first, return X.  If we\n-   found an assignment, update *PINSN to point to it.  */\n+   found an assignment, update *PINSN to point to it.  \n+   ALLOW_HWREG is set to 1 if hardware registers are allowed to be the src.  */\n \n rtx\n-find_last_value (x, pinsn, valid_to)\n+find_last_value (x, pinsn, valid_to, allow_hwreg)\n      rtx x;\n      rtx *pinsn;\n      rtx valid_to;\n+     int allow_hwreg;\n {\n   rtx p;\n \n@@ -767,8 +769,8 @@ find_last_value (x, pinsn, valid_to)\n \t    if (! modified_between_p (src, PREV_INSN (p), valid_to)\n \t\t/* Reject hard registers because we don't usually want\n \t\t   to use them; we'd rather use a pseudo.  */\n-\t\t&& ! (GET_CODE (src) == REG\n-\t\t      && REGNO (src) < FIRST_PSEUDO_REGISTER))\n+\t\t&& (! (GET_CODE (src) == REG\n+\t\t      && REGNO (src) < FIRST_PSEUDO_REGISTER) || allow_hwreg))\n \t      {\n \t\t*pinsn = p;\n \t\treturn src;"}]}