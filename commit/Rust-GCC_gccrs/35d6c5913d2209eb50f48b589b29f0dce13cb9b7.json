{"sha": "35d6c5913d2209eb50f48b589b29f0dce13cb9b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVkNmM1OTEzZDIyMDllYjUwZjQ4YjU4OWIyOWYwZGNlMTNjYjliNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T08:08:08Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T08:08:08Z"}, "message": "[AArch64] Don't rely on REG_EQUAL notes to combine SVE BIC\n\nThis patch generalises the SVE BIC pattern so that it doesn't\nrely on REG_EQUAL notes.  The danger with relying on the notes\nis that an optimisation could for example replace the original\n(not ...) note with an (unspec ... UNSPEC_MERGE_PTRUE) in which\nthe predicate is a constant.  That's a legitimate change and\ncould even be useful in some situations.\n\nThe patch also makes the operand order match the SVE operand order in\nboth the vector and predicate BIC patterns, which makes things easier\nfor the ACLE.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (bic<mode>3): Rename to...\n\t(*bic<SVE_I:mode>3): ...this.  Match the form that an SVE inverse\n\tactually has, rather than relying on REG_EQUAL notes.\n\tMake the insn operand order match the SVE operand order.\n\t(*<nlogical><PRED_ALL:mode>3): Make the insn operand order match\n\tthe SVE operand order.\n\nCo-Authored-By: Kugan Vivekanandarajah <kuganv@linaro.org>\n\nFrom-SVN: r274416", "tree": {"sha": "fde3eeca0e56bb43865ee03c6cf879662733add3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fde3eeca0e56bb43865ee03c6cf879662733add3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35d6c5913d2209eb50f48b589b29f0dce13cb9b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d6c5913d2209eb50f48b589b29f0dce13cb9b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35d6c5913d2209eb50f48b589b29f0dce13cb9b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d6c5913d2209eb50f48b589b29f0dce13cb9b7/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "678faefcab01f9e9eeb222852675b5a042aaf900", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/678faefcab01f9e9eeb222852675b5a042aaf900", "html_url": "https://github.com/Rust-GCC/gccrs/commit/678faefcab01f9e9eeb222852675b5a042aaf900"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "30663d07eb83016ad7b486ad1786097746886e11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d6c5913d2209eb50f48b589b29f0dce13cb9b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d6c5913d2209eb50f48b589b29f0dce13cb9b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35d6c5913d2209eb50f48b589b29f0dce13cb9b7", "patch": "@@ -1,3 +1,13 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Kugan Vivekanandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\t* config/aarch64/aarch64-sve.md (bic<mode>3): Rename to...\n+\t(*bic<SVE_I:mode>3): ...this.  Match the form that an SVE inverse\n+\tactually has, rather than relying on REG_EQUAL notes.\n+\tMake the insn operand order match the SVE operand order.\n+\t(*<nlogical><PRED_ALL:mode>3): Make the insn operand order match\n+\tthe SVE operand order.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_target_reg): New function."}, {"sha": "7b812b9f5c763b164ea436fcb998e31924301977", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d6c5913d2209eb50f48b589b29f0dce13cb9b7/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d6c5913d2209eb50f48b589b29f0dce13cb9b7/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=35d6c5913d2209eb50f48b589b29f0dce13cb9b7", "patch": "@@ -1779,15 +1779,20 @@\n ;; - BIC\n ;; -------------------------------------------------------------------------\n \n-;; REG_EQUAL notes on \"not<mode>3\" should ensure that we can generate\n-;; this pattern even though the NOT instruction itself is predicated.\n-(define_insn \"bic<mode>3\"\n+(define_insn_and_rewrite \"*bic<mode>3\"\n   [(set (match_operand:SVE_I 0 \"register_operand\" \"=w\")\n \t(and:SVE_I\n-\t  (not:SVE_I (match_operand:SVE_I 1 \"register_operand\" \"w\"))\n-\t  (match_operand:SVE_I 2 \"register_operand\" \"w\")))]\n+\t  (unspec:SVE_I\n+\t    [(match_operand 3)\n+\t     (not:SVE_I (match_operand:SVE_I 2 \"register_operand\" \"w\"))]\n+\t    UNSPEC_MERGE_PTRUE)\n+\t  (match_operand:SVE_I 1 \"register_operand\" \"w\")))]\n   \"TARGET_SVE\"\n-  \"bic\\t%0.d, %2.d, %1.d\"\n+  \"bic\\t%0.d, %1.d, %2.d\"\n+  \"&& !CONSTANT_P (operands[3])\"\n+  {\n+    operands[3] = CONSTM1_RTX (<VPRED>mode);\n+  }\n )\n \n ;; -------------------------------------------------------------------------\n@@ -2451,11 +2456,11 @@\n   [(set (match_operand:PRED_ALL 0 \"register_operand\" \"=Upa\")\n \t(and:PRED_ALL\n \t  (NLOGICAL:PRED_ALL\n-\t    (not:PRED_ALL (match_operand:PRED_ALL 2 \"register_operand\" \"Upa\"))\n-\t    (match_operand:PRED_ALL 3 \"register_operand\" \"Upa\"))\n+\t    (not:PRED_ALL (match_operand:PRED_ALL 3 \"register_operand\" \"Upa\"))\n+\t    (match_operand:PRED_ALL 2 \"register_operand\" \"Upa\"))\n \t  (match_operand:PRED_ALL 1 \"register_operand\" \"Upa\")))]\n   \"TARGET_SVE\"\n-  \"<nlogical>\\t%0.b, %1/z, %3.b, %2.b\"\n+  \"<nlogical>\\t%0.b, %1/z, %2.b, %3.b\"\n )\n \n ;; -------------------------------------------------------------------------"}]}