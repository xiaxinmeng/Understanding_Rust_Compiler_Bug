{"sha": "8056c5f22194f598f64b465121aa5906cf61fef9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA1NmM1ZjIyMTk0ZjU5OGY2NGI0NjUxMjFhYTU5MDZjZjYxZmVmOQ==", "commit": {"author": {"name": "Ian Dall", "email": "ian@sibyl.beware.dropbear.id.au", "date": "2002-12-20T18:14:18Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-12-20T18:14:18Z"}, "message": "ns32k.md (movdi): Use \"l\" instead of \"f\" to match all registers capable of holding a double float.\n\n        * config/ns32k/ns32k.md (movdi): Use \"l\" instead of \"f\" to match\n        all registers capable of holding a double float.\n        (*rcond): change name of \"reverse branch\" insns to\n        something more meaningful.\n        (*rbgt, *rblt, *rbge, *rble): Reverse branches to handle IEEE\n        comparisons properly.\n        (*ffs): Change operand 0 from write to read-modify-write.\n        (*ffsssi2): Drop constraints from define_expand.\n\n        * config/ns32k/ns32k.h (STORE_RATIO, STORE_BY_PIECES): Avoid using\n        MOVE_RATIO as default for store operations.\n\n        * config/ns32k/ns32k.h (enum reg_class, REG_CLASS_NAMES): Add\n        LONG_REGS class.\n        (CANNOT_CHANGE_MODE_CLASS): Can't subreg LONG_REGS.\n        (GO_IF_LEGITIMATE_ADDRESS): Remove spurious abort().\n        * config/ns32k/ns32k.c (regclass_map): Add LONG_REGS class.\n\n        * config/ns32k/STATUS: New File\n        * config/ns32k/NOTES: New file.\n\nFrom-SVN: r60370", "tree": {"sha": "35ec80dc8efc1b3ffc3d4f4014b5bf6d44e18edd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35ec80dc8efc1b3ffc3d4f4014b5bf6d44e18edd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8056c5f22194f598f64b465121aa5906cf61fef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8056c5f22194f598f64b465121aa5906cf61fef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8056c5f22194f598f64b465121aa5906cf61fef9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8056c5f22194f598f64b465121aa5906cf61fef9/comments", "author": null, "committer": null, "parents": [{"sha": "4639c5c62cad530089ae4f00e971f2205977766a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4639c5c62cad530089ae4f00e971f2205977766a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4639c5c62cad530089ae4f00e971f2205977766a"}], "stats": {"total": 273, "additions": 243, "deletions": 30}, "files": [{"sha": "03ec274bb7e64791c0d81ea4dec9f7de6d73c42d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8056c5f22194f598f64b465121aa5906cf61fef9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8056c5f22194f598f64b465121aa5906cf61fef9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8056c5f22194f598f64b465121aa5906cf61fef9", "patch": "@@ -1,3 +1,26 @@\n+2002-12-20  Ian Dall  <ian@sibyl.beware.dropbear.id.au>\n+\n+        * config/ns32k/ns32k.md (movdi): Use \"l\" instead of \"f\" to match\n+        all registers capable of holding a double float.\n+        (*rcond): change name of \"reverse branch\" insns to\n+        something more meaningful.\n+        (*rbgt, *rblt, *rbge, *rble): Reverse branches to handle IEEE\n+        comparisons properly.\n+        (*ffs): Change operand 0 from write to read-modify-write.\n+        (*ffsssi2): Drop constraints from define_expand.\n+\n+        * config/ns32k/ns32k.h (STORE_RATIO, STORE_BY_PIECES): Avoid using\n+        MOVE_RATIO as default for store operations.\n+\n+        * config/ns32k/ns32k.h (enum reg_class, REG_CLASS_NAMES): Add\n+        LONG_REGS class.\n+        (CANNOT_CHANGE_MODE_CLASS): Can't subreg LONG_REGS.\n+        (GO_IF_LEGITIMATE_ADDRESS): Remove spurious abort().\n+        * config/ns32k/ns32k.c (regclass_map): Add LONG_REGS class.\n+\n+        * config/ns32k/STATUS: New File\n+        * config/ns32k/NOTES: New file.\n+\n 2002-12-20  Hartmut Penner  <hpenner@de.ibm.com>\n \t\n        \t* doc/invoke.texi: Document -mzarch, -mesa, -mcpu= and -march="}, {"sha": "46882461d0292d4cbb8d0e57f8be08a864c054f7", "filename": "gcc/config/ns32k/NOTES", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8056c5f22194f598f64b465121aa5906cf61fef9/gcc%2Fconfig%2Fns32k%2FNOTES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8056c5f22194f598f64b465121aa5906cf61fef9/gcc%2Fconfig%2Fns32k%2FNOTES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2FNOTES?ref=8056c5f22194f598f64b465121aa5906cf61fef9", "patch": "@@ -0,0 +1,97 @@\n+Copyright (C) 2002\n+Free Software Foundation, Inc.\n+\n+\t\t\t Implementation Notes\n+\t\t\t ====================\n+\n+IEEE floating point comparisons\n+\n+Ian Dall <ian@beware.dropbear.id.au>\n+------------------------------------\n+\n+The ns32x81 fpu handles most operands in hardware, but traps on NaN,\n+Inf and Denormalized numbers. The correct behaviour can be handled by\n+the trap handler. This is mostly transparent to the compiler, but in\n+the case of floating point comparisions, the trap handler and the\n+compiler must co-operate.\n+\n+Comparing a Nan with anything (including another Nan) is an unordered\n+comparison and a NE test should be true and any other test should be\n+false. There is nothing the trap handler can do to the condition codes\n+to make, for example ble and bgt (the machine instructions, not the\n+gcc insn's) both fail.\n+\n+The L flag (normally used for unsigned comparisons) is cleared by a floating\n+point compare. So, it is possible for the trap handler to communicate that\n+it has seen a NaN by setting this flag.\n+\n+This can get confusing so the following documents the reasoning. There\n+are only 3 flags of significance, N, Z and L. In what follows AB is\n+the conjunction of A and B (\"and\") A+B is the disjunction of A and B\n+(\"or\"), upper case represents true and lower case represents false. So\n+\"Zl\" is \"Z AND (NOT L)\".\n+\n+Also, we can require that the trap handler clears N and Z, whenever it\n+sets L. This means that in many cases, we do not need to test if L is\n+set or clear. The operations we require are:\n+\n+\tOperator\tExpression\tCheck L\n+\tGT\t\tNl\t\tNo\n+\tLT\t\tznl\t\tYes\n+\tGE\t\t(Z+N)l\t\tNo\n+\tLE\t\tnl\t\tYes\n+\tEQ\t\tZl\t\tNo\n+\tNE\t\tz+L\t\tNo\n+\n+\n+For example, the emitted code for the case of LT is\n+\n+\t  bhi 0f\n+\t  blt %0\n+\t0:\n+\n+which is, in effect, \"branch if ordered and less than.\"\n+\n+We also need insns for the reverse branches. These have the PC and\n+the label ref opereands reversed. Thus the reverse bgt has a pattern:\n+\n+ (set (pc)\n+\t(if_then_else (gt (cc0)\n+\t\t\t  (const_int 0))\n+\t\t      (pc)\n+\t\t      (label_ref (match_operand 0 \"\" \"\"))))\n+\n+This is identical to a normal branch with the test complimented:\n+\n+ (set (pc)\n+\t(if_then_else (not (gt (cc0)\n+\t\t\t  (const_int 0)))\n+\t\t      (label_ref (match_operand 0 \"\" \"\")\n+\t\t      (pc))))\n+\n+Thus we need a family of (NOT cond) tests. For integers this is easy,\n+a reverse blt becomes bge. However, the possibility of unordered\n+comparison complicates the floating point case. So, we need to\n+compliment the above expressions, using deMorgan's theorem, for the reverse\n+branch:\n+\n+\tOperator\tExpression\tCheck L\n+\tRGT\t\tn+L\t\tYes\n+\tRLT\t\tZ+N+L\t\tYes\n+\tRGE\t\tzn+L\t\tYes\n+\tRLE\t\tN+L\t\tYes\n+\tREQ\t\tz+L\t\tNo\n+\tRNE\t\tZl\t\tNo\n+\n+For example the emitted code for the case of RLT is\n+\n+   bge %0\n+   bhi %0\n+\n+which is, in effect \"branch if not less than and not unordered.\"\n+\n+These extra comparisions are safe if the trap handler doesn't set the\n+L flag, since in that case the additional \"bhi\" instructions are never\n+taken. Also, these extra branch instructions are controlled by the\n+\"-mieee-compare\" option.\n+"}, {"sha": "2754bf1f07a34f102397a1695ae4162c1300d296", "filename": "gcc/config/ns32k/STATUS", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8056c5f22194f598f64b465121aa5906cf61fef9/gcc%2Fconfig%2Fns32k%2FSTATUS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8056c5f22194f598f64b465121aa5906cf61fef9/gcc%2Fconfig%2Fns32k%2FSTATUS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2FSTATUS?ref=8056c5f22194f598f64b465121aa5906cf61fef9", "patch": "@@ -0,0 +1,68 @@\n+NS32K Port Status\tLast updated 19 Dec 2002\n+\n+Recent development of the ns32k port has been as a cross compiler. As\n+such a native bootstrap has not been performed.  Currently the\n+compiler successfully builds a NetBSD kernel and has been tested on\n+the testsuite with \"make check\" configured to remotely execute\n+tests on a pc532-netbsd.\n+\n+There are a few remaining failures in the testsuite, none of which\n+result in incorrect code generation or unexpected ICEs.\n+\n+Here follows comments on the outstanding testsuite failures:\n+\n+gcc.c-torture/compile/20001226-1.c,  -Os\n+This typically fails due to a time out or exhausting available memory.\n+In the past it has been found to eventually compile in under 6\n+minutes, with consuming up to 90MB. The timeout in dejagnu is 5\n+minutes.\n+\n+gcc.c-torture/execute/builtin-constant.c\n+I don't understand why this fails. Looking at the generated assembler,\n+the first invocation of btest returns \"1\" and the second \"0\". Presumably\n+the flow analysis is meant to indicate this is a \"builtin constant\".\n+The documentation for __builtin_constant says it is allowed to fail if the\n+compiler can't deduce that something is a constant, so the compiler is\n+correct if not ideal.\n+\n+gcc.dg/debug/debug-1.c scan-assembler xyzzy:\n+At -O3 level of optimization, variable xyzzy gets eliminated. Isn't it\n+reasonable that the debugging info is gone too? Indeed, the\n+documentation says this is expected behaviour.\n+\n+gcc.dg/debug/debug-2.c scan-assembler xyzzy:\n+As for the above.\n+\n+gcc.dg/20010912-1.c\n+PIC is supported for the compiler, but we get a link error until we get a\n+cross linker which can handle dynamic linking.\n+\n+gcc.dg/20020304-1.c -O -fssa -fssa-ccp\n+ICE -fssa and -fssa-ccp are \"experimental\" options. Assume not a\n+backend problem.\n+\n+gcc.dg/20021014-1.c (test for excess errors)\n+This is a test of the \"-p\" option. Fails due to lack of mcrt0.o. This\n+platform support \"-pg\" but not \"-p\"\n+\n+gcc.dg/20021018-1.c (test for excess errors)\n+Fail due to lack of dynamic link support at link time.\n+\n+gcc.dg/bitfld-3.c (test for excess errors)\n+Execution passes, but compilation produces excessive warnings. These warnings\n+actually seem reasonable. The code uses __attribute__((aligned (8)), and\n+the maximum alignment which makes any sense for this architecture is 4.\n+\n+gcc.dg/duff-2.c (test for excess errors)\n+Execution passes, but compilation produces excessive warnings. Doesn't look\n+like a backend problem.\n+\n+gcc.dg/uninit-A.c -O2 -Wall -S\n+Bogus warnings, almost certainly not backend.\n+\n+gcc.dg/special/weak-1.c execution test\n+X  This fails for i386 too. I don't understand what the correct behaviour\n+for this test is.\n+\n+gcc.dg/special/gcsec-1.c (test for excess errors)\n+a.out deficiency. -ffunction-sections and -fdata-sections not supported."}, {"sha": "4e861132fcb56647d0884985407337bb354416df", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8056c5f22194f598f64b465121aa5906cf61fef9/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8056c5f22194f598f64b465121aa5906cf61fef9/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=8056c5f22194f598f64b465121aa5906cf61fef9", "patch": "@@ -57,8 +57,8 @@ const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER] =\n   GENERAL_REGS, GENERAL_REGS, GENERAL_REGS, GENERAL_REGS,\n   FLOAT_REG0, LONG_FLOAT_REG0, FLOAT_REGS, FLOAT_REGS,\n   FLOAT_REGS, FLOAT_REGS, FLOAT_REGS, FLOAT_REGS,\n-  FP_REGS, FP_REGS, FP_REGS, FP_REGS,\n-  FP_REGS, FP_REGS, FP_REGS, FP_REGS,\n+  LONG_REGS, LONG_REGS, LONG_REGS, LONG_REGS,\n+  LONG_REGS, LONG_REGS, LONG_REGS, LONG_REGS,\n   FRAME_POINTER_REG, STACK_POINTER_REG\n };\n "}, {"sha": "8e648989fb158d4cc36d7d86f1565cebb1297c73", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8056c5f22194f598f64b465121aa5906cf61fef9/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8056c5f22194f598f64b465121aa5906cf61fef9/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=8056c5f22194f598f64b465121aa5906cf61fef9", "patch": "@@ -435,17 +435,17 @@ while (0)\n \n enum reg_class\n { NO_REGS, GENERAL_REGS, FLOAT_REG0, LONG_FLOAT_REG0, FLOAT_REGS,\n-  FP_REGS, GEN_AND_FP_REGS, FRAME_POINTER_REG, STACK_POINTER_REG,\n-  GEN_AND_MEM_REGS, ALL_REGS, LIM_REG_CLASSES };\n+  LONG_REGS, FP_REGS, GEN_AND_FP_REGS, FRAME_POINTER_REG,\n+  STACK_POINTER_REG, GEN_AND_MEM_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n /* Give names of register classes as strings for dump file.   */\n \n-#define REG_CLASS_NAMES \\\n+#define REG_CLASS_NAMES\t\t\t\t\t\t\t    \\\n  {\"NO_REGS\", \"GENERAL_REGS\", \"FLOAT_REG0\", \"LONG_FLOAT_REG0\", \"FLOAT_REGS\", \\\n-  \"FP_REGS\", \"GEN_AND_FP_REGS\", \"FRAME_POINTER_REG\", \"STACK_POINTER_REG\", \\\n-  \"GEN_AND_MEM_REGS\", \"ALL_REGS\" }\n+  \"LONG_REGS\", \"FP_REGS\", \"GEN_AND_FP_REGS\", \"FRAME_POINTER_REG\", \t    \\\n+  \"STACK_POINTER_REG\", \"GEN_AND_MEM_REGS\", \"ALL_REGS\" }\n \n /* Define which registers fit in which classes.\n    This is an initializer for a vector of HARD_REG_SET\n@@ -457,6 +457,7 @@ enum reg_class\n \t {0x100},\t\t/* FLOAT_REG0 */\t\\\n \t {0x300},\t\t/* LONG_FLOAT_REG0 */\t\\\n \t {0xff00},\t\t/* FLOAT_REGS */\t\\\n+         {0xff0000},            /* LONG_REGS */         \\\n          {0xffff00},\t\t/* FP_REGS */\t\t\\\n          {0xffffff},\t\t/* GEN_AND_FP_REGS */\t\\\n          {0x1000000},\t\t/* FRAME_POINTER_REG */\t\\\n@@ -469,6 +470,13 @@ enum reg_class\n    ((ns32k_reg_class_contents[CLASS1][0]\t\t\\\n      & ~ns32k_reg_class_contents[CLASS2][0]) == 0)\n \n+\n+/* LONG_REGS are registers which can only hold double precision floats\n+ * and can only be accessable by long float instructions.\n+ */\n+#define CANNOT_CHANGE_MODE_CLASS(FROM, TO) \\\n+  (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO) ? LONG_REGS : NO_REGS)\n+\n /* The same information, inverted:\n    Return the class number of the smallest class containing\n    reg number REGNO.  This could be a conditional expression\n@@ -1052,7 +1060,6 @@ __transfer_from_trampoline ()\t\t\\\n   else if (GET_CODE (xfooy) == PRE_DEC)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (REGNO (XEXP (xfooy, 0)) == STACK_POINTER_REGNUM) goto ADDR;\t\\\n-      else abort ();\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n@@ -1123,6 +1130,11 @@ __transfer_from_trampoline ()\t\t\\\n    We have a smart movstrsi insn */\n #define MOVE_RATIO 0\n \n+#define STORE_RATIO (optimize_size ? 3 : 15)\n+#define STORE_BY_PIECES_P(SIZE, ALIGN) \\\n+  (move_by_pieces_ninsns (SIZE, ALIGN) < (unsigned int) STORE_RATIO)\n+\n+\n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS 0\n "}, {"sha": "218686117b4267826c920f2be411bc00652b93a6", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 35, "deletions": 22, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8056c5f22194f598f64b465121aa5906cf61fef9/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8056c5f22194f598f64b465121aa5906cf61fef9/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=8056c5f22194f598f64b465121aa5906cf61fef9", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for GNU compiler, ns32000 Version\n-;;  Copyright (C) 1988, 1994, 1996, 1998, 1999, 2000, 2001\n+;;  Copyright (C) 1988, 1994, 1996, 1998, 1999, 2000, 2001, 2002\n ;;  Free Software Foundation, Inc.\n ;;  Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n@@ -312,8 +312,8 @@\n   \"movmd %1,%0,4\")\n \n (define_insn \"movdi\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm<,*f,rm\")\n-\t(match_operand:DI 1 \"general_operand\" \"gF,g,*f\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=rm<,*l,rm\")\n+\t(match_operand:DI 1 \"general_operand\" \"gF,g,*l\"))]\n   \"\"\n   \"*\n {\n@@ -2378,9 +2378,9 @@\n   \"\"\n   \"bls %l0\")\n \f\n-;; \"Reversed\" jump instructions. Are these ever generated?\n+;; \"Reversed\" jump instructions.\n \n-(define_insn \"*bne\"\n+(define_insn \"*rbeq\"\n   [(set (pc)\n \t(if_then_else (eq (cc0)\n \t\t\t  (const_int 0))\n@@ -2392,10 +2392,11 @@\n     return \\\"bfs %l0\\\";\n   else if (cc_prev_status.flags & CC_Z_IN_NOT_F)\n     return \\\"bfc %l0\\\";\n-  else return \\\"bne %l0\\\";\n+  else\n+    return \\\"bne %l0\\\";\n }\")\n \n-(define_insn \"*beq\"\n+(define_insn \"*rbne\"\n   [(set (pc)\n \t(if_then_else (ne (cc0)\n \t\t\t  (const_int 0))\n@@ -2410,7 +2411,7 @@\n   else return \\\"beq %l0\\\";\n }\")\n \n-(define_insn \"*ble\"\n+(define_insn \"*rbgt\"\n   [(set (pc)\n \t(if_then_else (gt (cc0)\n \t\t\t  (const_int 0))\n@@ -2420,12 +2421,12 @@\n   \"*\n {\n     if (cc_prev_status.flags & CC_UNORD)\n-      return \\\"bhi 0f\\;ble %l0\\;0:\\\";\n+      return \\\"ble %l0\\;bhi %l0\\\";\n     else\n       return \\\"ble %l0\\\";\n }\")\n \n-(define_insn \"*bleu\"\n+(define_insn \"*rbgtu\"\n   [(set (pc)\n \t(if_then_else (gtu (cc0)\n \t\t\t   (const_int 0))\n@@ -2434,16 +2435,22 @@\n   \"\"\n   \"bls %l0\")\n \n-(define_insn \"*bge\"\n+(define_insn \"*rblt\"\n   [(set (pc)\n \t(if_then_else (lt (cc0)\n \t\t\t  (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n-  \"bge %l0\")\n+   \"*\n+{\n+    if (cc_prev_status.flags & CC_UNORD)\n+      return \\\"bge %l0\\;bhi %l0\\\";\n+    else\n+      return \\\"bge %l0\\\";\n+}\")\n \n-(define_insn \"*bgeu\"\n+(define_insn \"*rbltu\"\n   [(set (pc)\n \t(if_then_else (ltu (cc0)\n \t\t\t   (const_int 0))\n@@ -2452,7 +2459,7 @@\n   \"\"\n   \"bhs %l0\")\n \n-(define_insn \"*blt\"\n+(define_insn \"*rbge\"\n   [(set (pc)\n \t(if_then_else (ge (cc0)\n \t\t\t  (const_int 0))\n@@ -2462,12 +2469,12 @@\n   \"*\n {\n     if (cc_prev_status.flags & CC_UNORD)\n-      return \\\"bhi 0f\\;blt %l0\\;0:\\\";\n+      return \\\"blt %l0\\;bhi %l0\\\";\n     else\n       return \\\"blt %l0\\\";\n }\")\n \n-(define_insn \"*bltu\"\n+(define_insn \"*rbgeu\"\n   [(set (pc)\n \t(if_then_else (geu (cc0)\n \t\t\t   (const_int 0))\n@@ -2476,16 +2483,22 @@\n   \"\"\n   \"blo %l0\")\n \n-(define_insn \"*bgt\"\n+(define_insn \"*rble\"\n   [(set (pc)\n \t(if_then_else (le (cc0)\n \t\t\t  (const_int 0))\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))]\n   \"\"\n-  \"bgt %l0\")\n+  \"*\n+{\n+    if (cc_prev_status.flags & CC_UNORD)\n+      return \\\"bgt %l0\\;bhi %l0\\\";\n+    else\n+      return \\\"bgt %l0\\\";\n+}\")\n \n-(define_insn \"*bgtu\"\n+(define_insn \"*rbleu\"\n   [(set (pc)\n \t(if_then_else (leu (cc0)\n \t\t\t   (const_int 0))\n@@ -2918,7 +2931,7 @@\n ;; ffs instructions\n \n (define_insn \"*ffs\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=ro\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"+ro\")\n \t(minus:SI \n \t\t(plus:SI (ffs:SI (zero_extract:SI \n \t\t\t\t(match_operand:SI 1 \"general_operand\" \"g\") \n@@ -2927,10 +2940,10 @@\n \t\t\t(match_dup 0)) \n \t\t(const_int 1)))]\n   \"\"\n-  \"ffsd %1,%0; bfc 1f; addqd %$-1,%0; 1:\")\n+  \"ffsd %1,%0\\;bfc 1f\\;addqd %$-1,%0\\;1:\")\n \n (define_expand \"ffssi2\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\") (const_int 0))\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\") (const_int 0))\n    (set (match_dup 0)\n \t(minus:SI \n \t\t(plus:SI (ffs:SI (zero_extract:SI "}]}