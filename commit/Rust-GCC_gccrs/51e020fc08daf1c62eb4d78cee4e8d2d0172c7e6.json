{"sha": "51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFlMDIwZmMwOGRhZjFjNjJlYjRkNzhjZWU0ZThkMmQwMTcyYzdlNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-05-11T14:13:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-05-11T14:13:38Z"}, "message": "re PR tree-optimization/15256 ([tree-ssa] Optimize manual bitfield manipilation.)\n\n2011-05-11  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/15256\n\t* tree-ssa-forwprop.c (simplify_bitwise_binary): Canonicalize\n\t(A & B) | C, combine (A op CST1) op CST2.\n\t(tree_ssa_forward_propagate_single_use_vars): Only bother to\n\tvisit assigns that have uses.\n\n\t* gcc.dg/tree-ssa/forwprop-14.c: New testcase.\n\nFrom-SVN: r173659", "tree": {"sha": "f6fe582ca34e43fa86ffc5ab363666d20a91ea44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6fe582ca34e43fa86ffc5ab363666d20a91ea44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "515456820e0468b848ff5905d6d8439a47036fdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/515456820e0468b848ff5905d6d8439a47036fdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/515456820e0468b848ff5905d6d8439a47036fdc"}], "stats": {"total": 159, "additions": 126, "deletions": 33}, "files": [{"sha": "09654faf15d75075142d12e88a581c60b76f4755", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6", "patch": "@@ -1,3 +1,11 @@\n+2011-05-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/15256\n+\t* tree-ssa-forwprop.c (simplify_bitwise_binary): Canonicalize\n+\t(A & B) | C, combine (A op CST1) op CST2.\n+\t(tree_ssa_forward_propagate_single_use_vars): Only bother to\n+\tvisit assigns that have uses.\n+\n 2011-05-11  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* ggc-page.c (extra_order_size_table): Use struct"}, {"sha": "a7e2261fa190413013c1979540f9708f6bd12b2f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6", "patch": "@@ -1,3 +1,8 @@\n+2011-05-11  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/15256\n+\t* gcc.dg/tree-ssa/forwprop-14.c: New testcase.\n+\n 2011-05-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/48159"}, {"sha": "7432e0d540598a73b6840e5f0c66e1ee7be793b0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-14.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-14.c?ref=51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+unsigned int\n+foo (unsigned int eax)\n+{\n+  eax |= 4;\n+  eax &= 247;\n+  eax |= 16;\n+  eax &= 223;\n+  eax |= 64;\n+  eax &= 127;\n+  return eax;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \" & \" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\\\| \" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "605547081e4f06a352bf34c327e50a899be61630", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 95, "deletions": 33, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=51e020fc08daf1c62eb4d78cee4e8d2d0172c7e6", "patch": "@@ -1623,6 +1623,9 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n   tree arg2 = gimple_assign_rhs2 (stmt);\n   enum tree_code code = gimple_assign_rhs_code (stmt);\n   tree res;\n+  gimple def1 = NULL, def2 = NULL;\n+  tree def1_arg1, def2_arg1;\n+  enum tree_code def1_code, def2_code;\n \n   /* If the first argument is an SSA name that is itself a result of a\n      typecast of an ADDR_EXPR to an integer, feed the ADDR_EXPR to the\n@@ -1655,44 +1658,102 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n \t}\n     }\n \n+  def1_code = TREE_CODE (arg1);\n+  def1_arg1 = arg1;\n+  if (TREE_CODE (arg1) == SSA_NAME)\n+    {\n+      def1 = SSA_NAME_DEF_STMT (arg1);\n+      if (is_gimple_assign (def1))\n+\t{\n+\t  def1_code = gimple_assign_rhs_code (def1);\n+\t  def1_arg1 = gimple_assign_rhs1 (def1);\n+\t}\n+    }\n+\n+  def2_code = TREE_CODE (arg2);\n+  def2_arg1 = arg2;\n+  if (TREE_CODE (arg2) == SSA_NAME)\n+    {\n+      def2 = SSA_NAME_DEF_STMT (arg2);\n+      if (is_gimple_assign (def2))\n+\t{\n+\t  def2_code = gimple_assign_rhs_code (def2);\n+\t  def2_arg1 = gimple_assign_rhs1 (def2);\n+\t}\n+    }\n+\n   /* For bitwise binary operations apply operand conversions to the\n      binary operation result instead of to the operands.  This allows\n      to combine successive conversions and bitwise binary operations.  */\n-  if (TREE_CODE (arg1) == SSA_NAME\n-      && TREE_CODE (arg2) == SSA_NAME)\n+  if (CONVERT_EXPR_CODE_P (def1_code)\n+      && CONVERT_EXPR_CODE_P (def2_code)\n+      && types_compatible_p (TREE_TYPE (def1_arg1), TREE_TYPE (def2_arg1))\n+      /* Make sure that the conversion widens the operands or that it\n+\t changes the operation to a bitfield precision.  */\n+      && ((TYPE_PRECISION (TREE_TYPE (def1_arg1))\n+\t   < TYPE_PRECISION (TREE_TYPE (arg1)))\n+\t  || (GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (arg1)))\n+\t      != MODE_INT)\n+\t  || (TYPE_PRECISION (TREE_TYPE (arg1))\n+\t      != GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (arg1))))))\n     {\n-      gimple def_stmt1 = SSA_NAME_DEF_STMT (arg1);\n-      gimple def_stmt2 = SSA_NAME_DEF_STMT (arg2);\n-      if (is_gimple_assign (def_stmt1)\n-\t  && is_gimple_assign (def_stmt2)\n-\t  && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt1))\n-\t  && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt2)))\n+      gimple newop;\n+      tree tem = create_tmp_reg (TREE_TYPE (def1_arg1),\n+\t\t\t\t NULL);\n+      newop = gimple_build_assign_with_ops (code, tem, def1_arg1, def2_arg1);\n+      tem = make_ssa_name (tem, newop);\n+      gimple_assign_set_lhs (newop, tem);\n+      gsi_insert_before (gsi, newop, GSI_SAME_STMT);\n+      gimple_assign_set_rhs_with_ops_1 (gsi, NOP_EXPR,\n+\t\t\t\t\ttem, NULL_TREE, NULL_TREE);\n+      update_stmt (gsi_stmt (*gsi));\n+      return true;\n+    }\n+\n+  /* (a | CST1) & CST2  ->  (a & CST2) | (CST1 & CST2).  */\n+  if (code == BIT_AND_EXPR\n+      && def1_code == BIT_IOR_EXPR\n+      && TREE_CODE (arg2) == INTEGER_CST\n+      && TREE_CODE (gimple_assign_rhs2 (def1)) == INTEGER_CST)\n+    {\n+      tree cst = fold_build2 (BIT_AND_EXPR, TREE_TYPE (arg2),\n+\t\t\t      arg2, gimple_assign_rhs2 (def1));\n+      tree tem;\n+      gimple newop;\n+      if (integer_zerop (cst))\n \t{\n-\t  tree darg1 = gimple_assign_rhs1 (def_stmt1);\n-\t  tree darg2 = gimple_assign_rhs1 (def_stmt2);\n-\t  /* Make sure that the conversion widens the operands or that it\n-\t     changes the operation to a bitfield precision.  */\n-\t  if (types_compatible_p (TREE_TYPE (darg1), TREE_TYPE (darg2))\n-\t      && ((TYPE_PRECISION (TREE_TYPE (darg1))\n-\t\t   < TYPE_PRECISION (TREE_TYPE (arg1)))\n-\t\t  || (GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (arg1)))\n-\t\t      != MODE_INT)\n-\t\t  || (TYPE_PRECISION (TREE_TYPE (arg1))\n-\t\t      != GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (arg1))))))\n-\t    {\n-\t      gimple newop;\n-\t      tree tem = create_tmp_reg (TREE_TYPE (darg1),\n-\t\t\t\t\t NULL);\n-\t      newop = gimple_build_assign_with_ops (code, tem, darg1, darg2);\n-\t      tem = make_ssa_name (tem, newop);\n-\t      gimple_assign_set_lhs (newop, tem);\n-\t      gsi_insert_before (gsi, newop, GSI_SAME_STMT);\n-\t      gimple_assign_set_rhs_with_ops_1 (gsi, NOP_EXPR,\n-\t\t\t\t\t\ttem, NULL_TREE, NULL_TREE);\n-\t      update_stmt (gsi_stmt (*gsi));\n-\t      return true;\n-\t    }\n+\t  gimple_assign_set_rhs1 (stmt, def1_arg1);\n+\t  update_stmt (stmt);\n+\t  return true;\n \t}\n+      tem = create_tmp_reg (TREE_TYPE (arg2), NULL);\n+      newop = gimple_build_assign_with_ops (BIT_AND_EXPR,\n+\t\t\t\t\t    tem, def1_arg1, arg2);\n+      tem = make_ssa_name (tem, newop);\n+      gimple_assign_set_lhs (newop, tem);\n+      /* Make sure to re-process the new stmt as it's walking upwards.  */\n+      gsi_insert_before (gsi, newop, GSI_NEW_STMT);\n+      gimple_assign_set_rhs1 (stmt, tem);\n+      gimple_assign_set_rhs2 (stmt, cst);\n+      gimple_assign_set_rhs_code (stmt, BIT_IOR_EXPR);\n+      update_stmt (stmt);\n+      return true;\n+    }\n+\n+  /* Combine successive equal operations with constants.  */\n+  if ((code == BIT_AND_EXPR\n+       || code == BIT_IOR_EXPR\n+       || code == BIT_XOR_EXPR)\n+      && def1_code == code \n+      && TREE_CODE (arg2) == INTEGER_CST\n+      && TREE_CODE (gimple_assign_rhs2 (def1)) == INTEGER_CST)\n+    {\n+      tree cst = fold_build2 (code, TREE_TYPE (arg2),\n+\t\t\t      arg2, gimple_assign_rhs2 (def1));\n+      gimple_assign_set_rhs1 (stmt, def1_arg1);\n+      gimple_assign_set_rhs2 (stmt, cst);\n+      update_stmt (stmt);\n+      return true;\n     }\n \n   return false;\n@@ -2171,7 +2232,8 @@ tree_ssa_forward_propagate_single_use_vars (void)\n \t      tree rhs = gimple_assign_rhs1 (stmt);\n \t      enum tree_code code = gimple_assign_rhs_code (stmt);\n \n-\t      if (TREE_CODE (lhs) != SSA_NAME)\n+\t      if (TREE_CODE (lhs) != SSA_NAME\n+\t\t  || has_zero_uses (lhs))\n \t\t{\n \t\t  gsi_next (&gsi);\n \t\t  continue;"}]}