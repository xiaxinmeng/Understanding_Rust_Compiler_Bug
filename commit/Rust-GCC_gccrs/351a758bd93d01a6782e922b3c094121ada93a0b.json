{"sha": "351a758bd93d01a6782e922b3c094121ada93a0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUxYTc1OGJkOTNkMDFhNjc4MmU5MjJiM2MwOTQxMjFhZGE5M2EwYg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-26T15:32:42Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-26T15:32:42Z"}, "message": "ia64-protos.h: Remove the prototype for ia64_setup_incoming_varargs and ia64_return_in_memory.\n\n\t* config/ia64/ia64-protos.h: Remove the prototype for\n\tia64_setup_incoming_varargs and ia64_return_in_memory.\n\t* config/ia64/ia64.c (TARGET_STRUCT_VALUE_RTX): New.\n\t(TARGET_RETURN_IN_MEMORY): Likewise.\n\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n\t(TARGET_STRICT_ARGUMENT_NAMING): Likewise.\n\t(ia64_setup_incoming_varargs): Adjust the arguments to meet\n\tthe requirement of TARGET_SETUP_INCOMING_VARARGS.\n\t(ia64_return_in_memory): Make it static.  Change the return\n\ttype to bool from int.  Add an argument.\n\t(ia64_struct_value_rtx): New.\n\t* config/ia64/ia64.h: Remove commented-out definitions of\n\tPROMOTE_FUNCTION_ARGS, PROMOTE_FUNCTION_RETURN, and\n\tPROMOTE_PROTOTYPES.\n\t(RETURN_IN_MEMORY): Remove.\n\t(STRUCT_VALUE_REGNUM): Likewise.\n\t(STRICT_ARGUMENT_NAMING): Likewise.\n\nFrom-SVN: r76635", "tree": {"sha": "77ea786667d21beed217b66f970e3935d885b66c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77ea786667d21beed217b66f970e3935d885b66c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/351a758bd93d01a6782e922b3c094121ada93a0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/351a758bd93d01a6782e922b3c094121ada93a0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/351a758bd93d01a6782e922b3c094121ada93a0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/351a758bd93d01a6782e922b3c094121ada93a0b/comments", "author": null, "committer": null, "parents": [{"sha": "26fd4eae69871cb45835bea5c0ce35657415cf15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26fd4eae69871cb45835bea5c0ce35657415cf15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26fd4eae69871cb45835bea5c0ce35657415cf15"}], "stats": {"total": 139, "additions": 81, "deletions": 58}, "files": [{"sha": "757afc59cdf7042de46f577f2f4bc9af12f4629d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351a758bd93d01a6782e922b3c094121ada93a0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351a758bd93d01a6782e922b3c094121ada93a0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=351a758bd93d01a6782e922b3c094121ada93a0b", "patch": "@@ -1,3 +1,23 @@\n+2004-01-26  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/ia64/ia64-protos.h: Remove the prototype for\n+\tia64_setup_incoming_varargs and ia64_return_in_memory.\n+\t* config/ia64/ia64.c (TARGET_STRUCT_VALUE_RTX): New.\n+\t(TARGET_RETURN_IN_MEMORY): Likewise.\n+\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n+\t(TARGET_STRICT_ARGUMENT_NAMING): Likewise.\n+\t(ia64_setup_incoming_varargs): Adjust the arguments to meet\n+\tthe requirement of TARGET_SETUP_INCOMING_VARARGS.\n+\t(ia64_return_in_memory): Make it static.  Change the return\n+\ttype to bool from int.  Add an argument.\n+\t(ia64_struct_value_rtx): New.\n+\t* config/ia64/ia64.h: Remove commented-out definitions of\n+\tPROMOTE_FUNCTION_ARGS, PROMOTE_FUNCTION_RETURN, and\n+\tPROMOTE_PROTOTYPES.\n+\t(RETURN_IN_MEMORY): Remove.\n+\t(STRUCT_VALUE_REGNUM): Likewise.\n+\t(STRICT_ARGUMENT_NAMING): Likewise.\n+\n 2004-01-26  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR target/13666"}, {"sha": "50456a61e5e0a88ba15dcf8a77e4560619a006f2", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351a758bd93d01a6782e922b3c094121ada93a0b/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351a758bd93d01a6782e922b3c094121ada93a0b/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=351a758bd93d01a6782e922b3c094121ada93a0b", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler for IA-64.\n-   Copyright (C) 1999, 2000, 2002, 2003\n+   Copyright (C) 1999, 2000, 2002, 2003, 2004\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -114,15 +114,12 @@ extern rtx ia64_va_arg (tree, tree);\n extern rtx ia64_function_value (tree, tree);\n #endif /* RTX_CODE */\n \n-extern void ia64_setup_incoming_varargs (CUMULATIVE_ARGS, int, tree,\n-\t\t\t\t\t int *, int);\n extern int ia64_function_arg_partial_nregs (CUMULATIVE_ARGS *,\n \t\t\t\t\t    enum machine_mode, tree, int);\n extern void ia64_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       tree, int);\n extern int ia64_function_arg_pass_by_reference (CUMULATIVE_ARGS *,\n \t\t\t\t\t\tenum machine_mode, tree, int);\n-extern int ia64_return_in_memory (tree);\n extern void ia64_asm_output_external (FILE *, tree, const char *);\n #endif /* TREE_CODE */\n "}, {"sha": "b97dcd2bc38506e09e1f30ebe9e650a9ab7b26c1", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 58, "deletions": 14, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351a758bd93d01a6782e922b3c094121ada93a0b/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351a758bd93d01a6782e922b3c094121ada93a0b/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=351a758bd93d01a6782e922b3c094121ada93a0b", "patch": "@@ -1,5 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n    Contributed by James E. Wilson <wilson@cygnus.com> and\n \t\t  David Mosberger <davidm@hpl.hp.com>.\n \n@@ -182,7 +183,10 @@ static rtx gen_fr_spill_x (rtx, rtx, rtx);\n static rtx gen_fr_restore_x (rtx, rtx, rtx);\n \n static enum machine_mode hfa_element_mode (tree, int);\n+static void ia64_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t\t tree, int *, int);\n static bool ia64_function_ok_for_sibcall (tree, tree);\n+static bool ia64_return_in_memory (tree, tree);\n static bool ia64_rtx_costs (rtx, int, int, int *);\n static void fix_range (const char *);\n static struct machine_function * ia64_init_machine_status (void);\n@@ -260,6 +264,7 @@ static void ia64_vms_init_libfuncs (void)\n \n static tree ia64_handle_model_attribute (tree *, tree, tree, int, bool *);\n static void ia64_encode_section_info (tree, rtx, int);\n+static rtx ia64_struct_value_rtx (tree, int);\n \n \f\n /* Table of valid machine attributes.  */\n@@ -366,6 +371,34 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO ia64_encode_section_info\n \n+/* ??? ABI doesn't allow us to define this.  */\n+#if 0\n+#undef TARGET_PROMOTE_FUNCTION_ARGS\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#endif\n+\n+/* ??? ABI doesn't allow us to define this.  */\n+#if 0\n+#undef TARGET_PROMOTE_FUNCTION_RETURN\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n+#endif\n+\n+/* ??? Investigate.  */\n+#if 0\n+#undef TARGET_PROMOTE_PROTOTYPES\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+#endif\n+\n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX ia64_struct_value_rtx\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY ia64_return_in_memory\n+\n+#undef TARGET_SETUP_INCOMING_VARARGS\n+#define TARGET_SETUP_INCOMING_VARARGS ia64_setup_incoming_varargs\n+#undef TARGET_STRICT_ARGUMENT_NAMING\n+#define TARGET_STRICT_ARGUMENT_NAMING hook_bool_CUMULATIVE_ARGS_true\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return 1 if OP is a valid operand for the MEM of a CALL insn.  */\n@@ -3375,17 +3408,19 @@ ia64_initialize_trampoline (rtx addr, rtx fnaddr, rtx static_chain)\n \n    We generate the actual spill instructions during prologue generation.  */\n \n-void\n-ia64_setup_incoming_varargs (CUMULATIVE_ARGS cum, int int_mode, tree type,\n-\t\t\t     int * pretend_size,\n+static void\n+ia64_setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t     tree type, int * pretend_size,\n \t\t\t     int second_time ATTRIBUTE_UNUSED)\n {\n+  CUMULATIVE_ARGS next_cum = *cum;\n+\n   /* Skip the current argument.  */\n-  ia64_function_arg_advance (&cum, int_mode, type, 1);\n+  ia64_function_arg_advance (&next_cum, mode, type, 1);\n \n-  if (cum.words < MAX_ARGUMENT_SLOTS)\n+  if (next_cum.words < MAX_ARGUMENT_SLOTS)\n     {\n-      int n = MAX_ARGUMENT_SLOTS - cum.words;\n+      int n = MAX_ARGUMENT_SLOTS - next_cum.words;\n       *pretend_size = n * UNITS_PER_WORD;\n       cfun->machine->n_varargs = n;\n     }\n@@ -3846,8 +3881,8 @@ ia64_va_arg (tree valist, tree type)\n /* Return 1 if function return value returned in memory.  Return 0 if it is\n    in a register.  */\n \n-int\n-ia64_return_in_memory (tree valtype)\n+static bool\n+ia64_return_in_memory (tree valtype, tree fntype ATTRIBUTE_UNUSED)\n {\n   enum machine_mode mode;\n   enum machine_mode hfa_mode;\n@@ -3859,7 +3894,7 @@ ia64_return_in_memory (tree valtype)\n     {\n       byte_size = int_size_in_bytes (valtype);\n       if (byte_size < 0)\n-\treturn 1;\n+\treturn true;\n     }\n \n   /* Hfa's with up to 8 elements are returned in the FP argument registers.  */\n@@ -3870,14 +3905,14 @@ ia64_return_in_memory (tree valtype)\n       int hfa_size = GET_MODE_SIZE (hfa_mode);\n \n       if (byte_size / hfa_size > MAX_ARGUMENT_SLOTS)\n-\treturn 1;\n+\treturn true;\n       else\n-\treturn 0;\n+\treturn false;\n     }\n   else if (byte_size > UNITS_PER_WORD * MAX_INT_RETURN_SLOTS)\n-    return 1;\n+    return true;\n   else\n-    return 0;\n+    return false;\n }\n \n /* Return rtx for register that holds the function return value.  */\n@@ -8803,4 +8838,13 @@ ia64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n   no_new_pseudos = 0;\n }\n \n+/* Worker function for TARGET_STRUCT_VALUE_RTX.  */\n+\n+static rtx\n+ia64_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n+\t\t       int incoming ATTRIBUTE_UNUSED)\n+{\n+  return gen_rtx_REG (Pmode, GR_REG (8));\n+}\n+\n #include \"gt-ia64.h\""}, {"sha": "e9fd52a1452a55291bd6daea36d3357337cc70bd", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/351a758bd93d01a6782e922b3c094121ada93a0b/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/351a758bd93d01a6782e922b3c094121ada93a0b/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=351a758bd93d01a6782e922b3c094121ada93a0b", "patch": "@@ -1,5 +1,6 @@\n /* Definitions of target machine GNU compiler.  IA-64 version.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+   Free Software Foundation, Inc.\n    Contributed by James E. Wilson <wilson@cygnus.com> and\n    \t\t  David Mosberger <davidm@hpl.hp.com>.\n \n@@ -344,12 +345,6 @@ do\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n \n-/* ??? ABI doesn't allow us to define this.  */\n-/* #define PROMOTE_FUNCTION_ARGS */\n-\n-/* ??? ABI doesn't allow us to define this.  */\n-/* #define PROMOTE_FUNCTION_RETURN */\n-\n #define PARM_BOUNDARY 64\n \n /* Define this macro if you wish to preserve a certain alignment for the stack\n@@ -1267,13 +1262,6 @@ enum reg_class\n \f\n /* Passing Function Arguments on the Stack */\n \n-/* Define this macro if an argument declared in a prototype as an integral type\n-   smaller than `int' should actually be passed as an `int'.  In addition to\n-   avoiding errors in certain cases of mismatch, it also makes for better code\n-   on certain machines.  */\n-/* ??? Investigate.  */\n-/* #define PROMOTE_PROTOTYPES */\n-\n /* If defined, the maximum amount of space required for outgoing arguments will\n    be computed and placed into the variable\n    `current_function_outgoing_args_size'.  */\n@@ -1434,22 +1422,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* How Large Values are Returned */\n \n-/* A nonzero value says to return the function value in memory, just as large\n-   structures are always returned.  */\n-\n-#define RETURN_IN_MEMORY(TYPE) \\\n-  ia64_return_in_memory (TYPE)\n-\n /* If you define this macro to be 0, then the conventions used for structure\n    and union return values are decided by the `RETURN_IN_MEMORY' macro.  */\n \n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n-/* If the structure value address is passed in a register, then\n-   `STRUCT_VALUE_REGNUM' should be the number of that register.  */\n-\n-#define STRUCT_VALUE_REGNUM GR_REG (8)\n-\n \f\n /* Caller-Saves Register Allocation */\n \n@@ -1523,21 +1500,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   fputs (\"\\tmov out2 = b0\\n\", FILE);\t\t\t\t\t\\\n   fputs (\"\\tbr.call.sptk.many b0 = _mcount;;\\n\", FILE);\t\t\t\\\n } while (0)\n-\f\n-/* Implementing the Varargs Macros.  */\n-\n-/* Define this macro to store the anonymous register arguments into the stack\n-   so that all the arguments appear to have been passed consecutively on the\n-   stack.  */\n-\n-#define SETUP_INCOMING_VARARGS(ARGS_SO_FAR, MODE, TYPE, PRETEND_ARGS_SIZE, SECOND_TIME) \\\n-    ia64_setup_incoming_varargs (ARGS_SO_FAR, MODE, TYPE, & PRETEND_ARGS_SIZE, SECOND_TIME)\n-\n-/* Define this macro if the location where a function argument is passed\n-   depends on whether or not it is a named argument.  */\n-\n-#define STRICT_ARGUMENT_NAMING  1\n-\n \f\n /* Trampolines for Nested Functions.  */\n "}]}