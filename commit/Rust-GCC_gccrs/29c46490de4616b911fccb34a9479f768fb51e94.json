{"sha": "29c46490de4616b911fccb34a9479f768fb51e94", "node_id": "C_kwDOANBUbNoAKDI5YzQ2NDkwZGU0NjE2YjkxMWZjY2IzNGE5NDc5Zjc2OGZiNTFlOTQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-13T13:44:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-13T13:44:51Z"}, "message": "tree.cc: Use useless_type_conversion_p in tree_builtin_call_types_compatible_p while in gimple form [PR105253]\n\ntree_builtin_call_types_compatible_p uses TYPE_MAIN_VARIANT comparisons\nor tree_nop_conversion_p to ensure a builtin has correct GENERIC arguments.\nUnfortunately this regressed when get_call_combined_fn is called during\nGIMPLE optimizations.  E.g. when number_of_iterations_popcount is called,\nit doesn't ensure TYPE_MAIN_VARIABLE compatible argument type, it picks\n__builtin_popcount{,l,ll} based just on types' precision and doesn't\nfold_convert the arg to the right type.  We are in GIMPLE, such conversions\nare useless...\nSo, either we'd need to fix number_of_iterations_popcount to add casts\nand inspect anything else that creates CALL_EXPRs late, or we can\nin tree_builtin_call_types_compatible_p just use the GIMPLE type\ncomparisons (useless_type_conversion_p) when we are in GIMPLE form and\nthe TYPE_MAIN_VARIANT comparison or tree_nop_conversion_p test otherwise.\n\nI think especially this late in stage4 the latter seems safer to me.\n\n2022-04-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/105253\n\t* tree.cc (tree_builtin_call_types_compatible_p): If PROP_gimple,\n\tuse useless_type_conversion_p checks instead of TYPE_MAIN_VARIANT\n\tcomparisons or tree_nop_conversion_p checks.\n\n\t* gcc.target/i386/pr105253.c: New test.", "tree": {"sha": "a28137a8e84551c38dd7507cea5e5b1e202c9600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a28137a8e84551c38dd7507cea5e5b1e202c9600"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29c46490de4616b911fccb34a9479f768fb51e94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c46490de4616b911fccb34a9479f768fb51e94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29c46490de4616b911fccb34a9479f768fb51e94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c46490de4616b911fccb34a9479f768fb51e94/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13c32c1984f5857ccce2aeb00ce34343e5a26954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c32c1984f5857ccce2aeb00ce34343e5a26954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13c32c1984f5857ccce2aeb00ce34343e5a26954"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "79444e5b28b0e9a6142e1dcf5d58135cd0009f75", "filename": "gcc/testsuite/gcc.target/i386/pr105253.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c46490de4616b911fccb34a9479f768fb51e94/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105253.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c46490de4616b911fccb34a9479f768fb51e94/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105253.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105253.c?ref=29c46490de4616b911fccb34a9479f768fb51e94", "patch": "@@ -0,0 +1,17 @@\n+/* PR middle-end/105253 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-popcnt\" } */\n+/* { dg-final { scan-assembler-not \"__popcount\\[sd]i2\" } } */\n+\n+int\n+foo (unsigned long long *p)\n+{\n+  int i, cnt = 0;\n+  unsigned long long elem;\n+  for (i = 0; i < 4; i++)\n+    {\n+      for (elem = p[i]; elem; cnt++)\n+\telem &= elem - 1;\n+    }\n+  return cnt;\n+}"}, {"sha": "3c39be4f5010137ece2952bb3f0fff4c83254338", "filename": "gcc/tree.cc", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29c46490de4616b911fccb34a9479f768fb51e94/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29c46490de4616b911fccb34a9479f768fb51e94/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=29c46490de4616b911fccb34a9479f768fb51e94", "patch": "@@ -8427,8 +8427,12 @@ tree_builtin_call_types_compatible_p (const_tree call, tree fndecl)\n     if (tree decl = builtin_decl_explicit (DECL_FUNCTION_CODE (fndecl)))\n       fndecl = decl;\n \n-  if (TYPE_MAIN_VARIANT (TREE_TYPE (call))\n-      != TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (fndecl))))\n+  bool gimple_form = (cfun && (cfun->curr_properties & PROP_gimple)) != 0;\n+  if (gimple_form\n+      ? !useless_type_conversion_p (TREE_TYPE (call),\n+\t\t\t\t    TREE_TYPE (TREE_TYPE (fndecl)))\n+      : (TYPE_MAIN_VARIANT (TREE_TYPE (call))\n+\t != TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (fndecl)))))\n     return false;\n \n   tree targs = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n@@ -8440,12 +8444,15 @@ tree_builtin_call_types_compatible_p (const_tree call, tree fndecl)\n \treturn true;\n       tree arg = CALL_EXPR_ARG (call, i);\n       tree type = TREE_VALUE (targs);\n-      if (TYPE_MAIN_VARIANT (type) != TYPE_MAIN_VARIANT (TREE_TYPE (arg)))\n+      if (gimple_form\n+\t  ? !useless_type_conversion_p (type, TREE_TYPE (arg))\n+\t  : TYPE_MAIN_VARIANT (type) != TYPE_MAIN_VARIANT (TREE_TYPE (arg)))\n \t{\n \t  /* For pointer arguments be more forgiving, e.g. due to\n \t     FILE * vs. fileptr_type_node, or say char * vs. const char *\n \t     differences etc.  */\n-\t  if (POINTER_TYPE_P (type)\n+\t  if (!gimple_form\n+\t      && POINTER_TYPE_P (type)\n \t      && POINTER_TYPE_P (TREE_TYPE (arg))\n \t      && tree_nop_conversion_p (type, TREE_TYPE (arg)))\n \t    continue;\n@@ -8457,8 +8464,11 @@ tree_builtin_call_types_compatible_p (const_tree call, tree fndecl)\n \t      && INTEGRAL_TYPE_P (TREE_TYPE (arg))\n \t      && !TYPE_UNSIGNED (TREE_TYPE (arg))\n \t      && targetm.calls.promote_prototypes (TREE_TYPE (fndecl))\n-\t      && tree_nop_conversion_p (integer_type_node,\n-\t\t\t\t\tTREE_TYPE (arg)))\n+\t      && (gimple_form\n+\t\t  ? useless_type_conversion_p (integer_type_node,\n+\t\t\t\t\t       TREE_TYPE (arg))\n+\t\t  : tree_nop_conversion_p (integer_type_node,\n+\t\t\t\t\t   TREE_TYPE (arg))))\n \t    continue;\n \t  return false;\n \t}"}]}