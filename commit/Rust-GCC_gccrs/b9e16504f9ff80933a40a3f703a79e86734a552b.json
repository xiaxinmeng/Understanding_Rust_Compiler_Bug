{"sha": "b9e16504f9ff80933a40a3f703a79e86734a552b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjllMTY1MDRmOWZmODA5MzNhNDBhM2Y3MDNhNzllODY3MzRhNTUyYg==", "commit": {"author": {"name": "Raif S. Naffah", "email": "raif@fl.net.au", "date": "2003-02-17T23:18:39Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-02-17T23:18:39Z"}, "message": "BigInteger.java (euclidInv): Return array of `BigInteger's.\n\n2003-02-17  Raif S. Naffah <raif@fl.net.au>\n\n\t* java/math/BigInteger.java (euclidInv): Return array of\n\t`BigInteger's.  Changed all callers.\n\nFrom-SVN: r63014", "tree": {"sha": "ed14f9d46bd2f90bac0eac6fbcba29d95eebb8fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed14f9d46bd2f90bac0eac6fbcba29d95eebb8fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9e16504f9ff80933a40a3f703a79e86734a552b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e16504f9ff80933a40a3f703a79e86734a552b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9e16504f9ff80933a40a3f703a79e86734a552b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e16504f9ff80933a40a3f703a79e86734a552b/comments", "author": null, "committer": null, "parents": [{"sha": "9b0c0e9fb2deb5094b634412826958fe1155f0ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b0c0e9fb2deb5094b634412826958fe1155f0ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b0c0e9fb2deb5094b634412826958fe1155f0ea"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "c8c62cbbb3544bb248f1e7347ca98fe1fcbeb3c1", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e16504f9ff80933a40a3f703a79e86734a552b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e16504f9ff80933a40a3f703a79e86734a552b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b9e16504f9ff80933a40a3f703a79e86734a552b", "patch": "@@ -1,3 +1,8 @@\n+2003-02-17  Raif S. Naffah <raif@fl.net.au>\n+\n+\t* java/math/BigInteger.java (euclidInv): Return array of\n+\t`BigInteger's.  Changed all callers.\n+\n 2003-02-17  Ranjit Mathew  <rmathew@hotmail.com>\n \n \t* java/util/Properties.java (store): Move the code formerly in"}, {"sha": "6a17cf3b75c5a671d88e8c80c6a849da07386ae4", "filename": "libjava/java/math/BigInteger.java", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e16504f9ff80933a40a3f703a79e86734a552b/libjava%2Fjava%2Fmath%2FBigInteger.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e16504f9ff80933a40a3f703a79e86734a552b/libjava%2Fjava%2Fmath%2FBigInteger.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fmath%2FBigInteger.java?ref=b9e16504f9ff80933a40a3f703a79e86734a552b", "patch": "@@ -1017,9 +1017,8 @@ private static final int[] euclidInv(int a, int b, int prevDiv)\n     return xy;\n   }\n \n-  private static final void euclidInv(BigInteger a, BigInteger b,\n-                                      BigInteger prevDiv, BigInteger xy0,\n-                                      BigInteger xy1, BigInteger xy2)\n+  private static final BigInteger[] euclidInv(BigInteger a, BigInteger b,\n+\t\t\t\t\t      BigInteger prevDiv)\n   {\n     if (b.isZero())\n       throw new ArithmeticException(\"not invertible\");\n@@ -1028,20 +1027,20 @@ private static final void euclidInv(BigInteger a, BigInteger b,\n       {\n \t// Success:  values are indeed invertible!\n \t// Bottom of the recursion reached; start unwinding.\n-        // WARNING: xy1 is, and xy0 may be, a shared BI!\n-\txy0 = neg(prevDiv);\n-\txy1 = ONE;\n-\treturn;\n+\treturn new BigInteger[] { neg(prevDiv), ONE };\n       }\n \n+    BigInteger[] result;\n     // Recursion happens in the following conditional!\n \n     // If a just contains an int, then use integer math for the rest.\n     if (a.words == null)\n       {\n         int[] xyInt = euclidInv(b.ival, a.ival % b.ival, a.ival / b.ival);\n-\txy0 = new BigInteger(xyInt[0]); // non-shared BI\n-\txy1 = new BigInteger(xyInt[1]); // non-shared BI\n+\tresult = new BigInteger[] { // non-shared BI\n+\t  new BigInteger(xyInt[0]),\n+\t  new BigInteger(xyInt[1])\n+\t};\n       }\n     else\n       {\n@@ -1051,15 +1050,13 @@ private static final void euclidInv(BigInteger a, BigInteger b,\n         // quot and rem may not be in canonical form. ensure\n         rem.canonicalize();\n         quot.canonicalize();\n-        euclidInv(b, rem, quot, xy0, xy1, xy2);\n+\tresult = euclidInv(b, rem, quot);\n       }\n \n-    // xy2 is just temp storage for intermediate results in the following\n-    // calculation.  This saves us a bit of space over having a BigInteger\n-    // allocated at every level of this recursive method.\n-    xy2 = xy0;\n-    xy0 = add(xy1, times(xy2, prevDiv), -1);\n-    xy1 = xy2;\n+    BigInteger t = result[0];\n+    result[0] = add(result[1], times(t, prevDiv), -1);\n+    result[1] = t;\n+    return result;\n   }\n \n   public BigInteger modInverse(BigInteger y)\n@@ -1129,8 +1126,8 @@ public BigInteger modInverse(BigInteger y)\n         quot.canonicalize();\n         BigInteger xy0 = new BigInteger();\n         BigInteger xy1 = new BigInteger();\n-        euclidInv(y, rem, quot, xy0, xy1, result);\n-\tresult = swapped ? xy0 : xy1;\n+\tBigInteger[] xy = euclidInv(y, rem, quot);\n+\tresult = swapped ? xy[0] : xy[1];\n \n \t// Result can't be negative, so make it positive by adding the\n \t// original modulus, y (which is now x if they were swapped)."}]}