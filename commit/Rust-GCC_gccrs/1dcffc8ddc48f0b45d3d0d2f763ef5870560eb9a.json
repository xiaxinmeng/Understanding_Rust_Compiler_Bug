{"sha": "1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRjZmZjOGRkYzQ4ZjBiNDVkM2QwZDJmNzYzZWY1ODcwNTYwZWI5YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-31T09:06:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-31T09:06:43Z"}, "message": "fold-const: Fix division folding with vector operands [PR94412]\n\nThe following testcase is miscompiled since 4.9, we treat unsigned\nvector types as if they were signed and \"optimize\" negations across it.\n\n2020-03-31  Marc Glisse  <marc.glisse@inria.fr>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/94412\n\t* fold-const.c (fold_binary_loc) <case TRUNC_DIV_EXPR>: Use\n\tANY_INTEGRAL_TYPE_P instead of INTEGRAL_TYPE_P.\n\n\t* gcc.c-torture/execute/pr94412.c: New test.\n\nCo-authored-by: Marc Glisse <marc.glisse@inria.fr>", "tree": {"sha": "b000d2ce959c64e6d7afc16c63c7c9a73d918008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b000d2ce959c64e6d7afc16c63c7c9a73d918008"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ea39b2412269d208bb6ebd78303815957bd4f70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea39b2412269d208bb6ebd78303815957bd4f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ea39b2412269d208bb6ebd78303815957bd4f70"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "4686c59f90c2198cc78f1c1a33eef3b160476c9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a", "patch": "@@ -1,3 +1,10 @@\n+2020-03-31  Marc Glisse  <marc.glisse@inria.fr>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/94412\n+\t* fold-const.c (fold_binary_loc) <case TRUNC_DIV_EXPR>: Use\n+\tANY_INTEGRAL_TYPE_P instead of INTEGRAL_TYPE_P.\n+\n 2020-03-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/94403"}, {"sha": "b79d059d7418c909db47f2d0976a89369c5536df", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a", "patch": "@@ -11148,11 +11148,11 @@ fold_binary_loc (location_t loc, enum tree_code code, tree type,\n \n       /* Convert -A / -B to A / B when the type is signed and overflow is\n \t undefined.  */\n-      if ((!INTEGRAL_TYPE_P (type) || TYPE_OVERFLOW_UNDEFINED (type))\n+      if ((!ANY_INTEGRAL_TYPE_P (type) || TYPE_OVERFLOW_UNDEFINED (type))\n \t  && TREE_CODE (op0) == NEGATE_EXPR\n \t  && negate_expr_p (op1))\n \t{\n-\t  if (INTEGRAL_TYPE_P (type))\n+\t  if (ANY_INTEGRAL_TYPE_P (type))\n \t    fold_overflow_warning ((\"assuming signed overflow does not occur \"\n \t\t\t\t    \"when distributing negation across \"\n \t\t\t\t    \"division\"),\n@@ -11162,11 +11162,11 @@ fold_binary_loc (location_t loc, enum tree_code code, tree type,\n \t\t\t\t\t\t    TREE_OPERAND (arg0, 0)),\n \t\t\t\t  negate_expr (op1));\n \t}\n-      if ((!INTEGRAL_TYPE_P (type) || TYPE_OVERFLOW_UNDEFINED (type))\n+      if ((!ANY_INTEGRAL_TYPE_P (type) || TYPE_OVERFLOW_UNDEFINED (type))\n \t  && TREE_CODE (arg1) == NEGATE_EXPR\n \t  && negate_expr_p (op0))\n \t{\n-\t  if (INTEGRAL_TYPE_P (type))\n+\t  if (ANY_INTEGRAL_TYPE_P (type))\n \t    fold_overflow_warning ((\"assuming signed overflow does not occur \"\n \t\t\t\t    \"when distributing negation across \"\n \t\t\t\t    \"division\"),"}, {"sha": "32d5309882efb3664d006010d86c6c45f0f3cb87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a", "patch": "@@ -1,5 +1,8 @@\n 2020-03-31  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/94412\n+\t* gcc.c-torture/execute/pr94412.c: New test.\n+\n \tPR tree-optimization/94403\n \t* g++.dg/tree-ssa/pr94403.C: New test.\n "}, {"sha": "6c806bbd90ce7f861fbd15f2a56a1243a696cf82", "filename": "gcc/testsuite/gcc.c-torture/execute/pr94412.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94412.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94412.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr94412.c?ref=1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a", "patch": "@@ -0,0 +1,28 @@\n+/* PR middle-end/94412 */\n+\n+typedef unsigned V __attribute__ ((__vector_size__ (sizeof (unsigned) * 2)));\n+\n+void\n+foo (V *v, V *w)\n+{\n+  *w = -*v / 11;\n+}\n+\n+void\n+bar (V *v, V *w)\n+{\n+  *w = -18 / -*v;\n+}\n+\n+int\n+main ()\n+{\n+  V a = (V) { 1, 0 };\n+  V b = (V) { 3, __INT_MAX__ };\n+  V c, d;\n+  foo (&a, &c);\n+  bar (&b, &d);\n+  if (c[0] != -1U / 11 || c[1] != 0 || d[0] != 0 || d[1] != -18U / -__INT_MAX__)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}