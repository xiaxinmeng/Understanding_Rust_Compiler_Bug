{"sha": "2d14d64bf2d42a87ec58dd3760be12aeaa4a4279", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQxNGQ2NGJmMmQ0MmE4N2VjNThkZDM3NjBiZTEyYWVhYTRhNDI3OQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-18T00:16:48Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-18T00:16:48Z"}, "message": "Daily bump.", "tree": {"sha": "ac65007c11cfcf87ca19945fc83ebd448f366ae7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac65007c11cfcf87ca19945fc83ebd448f366ae7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/comments", "author": null, "committer": null, "parents": [{"sha": "4759e1e0453bef163d8dbeebbb96dc40b049c117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4759e1e0453bef163d8dbeebbb96dc40b049c117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4759e1e0453bef163d8dbeebbb96dc40b049c117"}], "stats": {"total": 665, "additions": 664, "deletions": 1}, "files": [{"sha": "b26f25637ed146fd49cee960eb751df954e9ae27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 374, "deletions": 0, "changes": 374, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d14d64bf2d42a87ec58dd3760be12aeaa4a4279", "patch": "@@ -1,3 +1,377 @@\n+2021-08-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-gori.cc (gori_compute::gori_compute): Enable tracing.\n+\t(gori_compute::compute_operand_range): Add tracing.\n+\t(gori_compute::logical_combine): Ditto.\n+\t(gori_compute::compute_logical_operands): Ditto.\n+\t(gori_compute::compute_operand1_range): Ditto.\n+\t(gori_compute::compute_operand2_range): Ditto.\n+\t(gori_compute::outgoing_edge_range_p): Ditto.\n+\t* gimple-range-gori.h (class gori_compute): Add range_tracer.\n+\n+2021-08-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* flag-types.h (enum evrp_mode): Adjust evrp-mode values.\n+\t* gimple-range-cache.cc (DEBUG_RANGE_CACHE): Relocate from.\n+\t* gimple-range-trace.h (DEBUG_RANGE_CACHE): Here.\n+\t* params.opt (--param=evrp-mode): Adjust options.\n+\n+2021-08-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add gimple-range-trace.o.\n+\t* gimple-range-cache.h (enable_new_values): Remove unused prototype.\n+\t* gimple-range-fold.cc: Adjust headers.\n+\t* gimple-range-trace.cc: New.\n+\t* gimple-range-trace.h: New.\n+\t* gimple-range.cc (gimple_ranger::gimple_ranger): Enable tracer.\n+\t(gimple_ranger::range_of_expr): Add tracing.\n+\t(gimple_ranger::range_on_entry): Ditto.\n+\t(gimple_ranger::range_on_exit): Ditto.\n+\t(gimple_ranger::range_on_edge): Ditto.\n+\t(gimple_ranger::fold_range_internal): Ditto.\n+\t(gimple_ranger::dump_bb): Do not calculate edge range twice.\n+\t(trace_ranger::*): Remove.\n+\t(enable_ranger): Never create a trace_ranger.\n+\t(debug_seed_ranger): Move to gimple-range-trace.cc.\n+\t(dump_ranger): Ditto.\n+\t(debug_ranger): Ditto.\n+\t* gimple-range.h: Include gimple-range-trace.h.\n+\t(range_on_entry, range_on_exit): No longer virtual.\n+\t(class trace_ranger): Remove.\n+\t(DEBUG_RANGE_CACHE): Move to gimple-range-trace.h.\n+\n+2021-08-17  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101854\n+\t* builtins.c (expand_builtin_alloca): Move warning code to check_alloca\n+\tin gimple-ssa-warn-access.cc.\n+\t* calls.c (alloc_max_size): Move code to check_alloca.\n+\t(get_size_range): Move to pointer-query.cc.\n+\t(maybe_warn_alloc_args_overflow): Move to gimple-ssa-warn-access.cc.\n+\t(get_attr_nonstring_decl): Move to tree.c.\n+\t(fntype_argno_type): Move to gimple-ssa-warn-access.cc.\n+\t(append_attrname): Same.\n+\t(maybe_warn_rdwr_sizes): Same.\n+\t(initialize_argument_information): Move code to\n+\tgimple-ssa-warn-access.cc.\n+\t* calls.h (maybe_warn_alloc_args_overflow): Move to\n+\tgimple-ssa-warn-access.h.\n+\t(get_attr_nonstring_decl): Move to tree.h.\n+\t(maybe_warn_nonstring_arg):  Move to gimple-ssa-warn-access.h.\n+\t(enum size_range_flags): Move to pointer-query.h.\n+\t(get_size_range): Same.\n+\t* gimple-ssa-warn-access.cc (has_location): Remove unused overload\n+\tto avoid Clang -Wunused-function.\n+\t(get_size_range): Declare static.\n+\t(maybe_emit_free_warning): Rename...\n+\t(maybe_check_dealloc_call): ...to this for consistency.\n+\t(class pass_waccess): Add members.\n+\t(pass_waccess::~pass_waccess): Defined.\n+\t(alloc_max_size): Move here from calls.c.\n+\t(maybe_warn_alloc_args_overflow): Same.\n+\t(check_alloca): New function.\n+\t(check_alloc_size_call): New function.\n+\t(check_strncat): Handle another warning flag.\n+\t(pass_waccess::check_builtin): Handle alloca.\n+\t(fntype_argno_type): Move here from calls.c.\n+\t(append_attrname): Same.\n+\t(maybe_warn_rdwr_sizes): Same.\n+\t(pass_waccess::check_call): Define.\n+\t(check_nonstring_args): New function.\n+\t(pass_waccess::check): Call new member functions.\n+\t(pass_waccess::execute): Enable ranger.\n+\t* gimple-ssa-warn-access.h (get_size_range): Move here from calls.h.\n+\t(maybe_warn_nonstring_arg): Same.\n+\t* gimple-ssa-warn-restrict.c: Remove #include.\n+\t* pointer-query.cc (get_size_range): Move here from calls.c.\n+\t* pointer-query.h (enum size_range_flags): Same.\n+\t(get_size_range): Same.\n+\t* tree.c (get_attr_nonstring_decl): Move here from calls.c.\n+\t* tree.h (get_attr_nonstring_decl): Move here from calls.h.\n+\n+2021-08-17  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* ggc.h (ggc_collect): Add 'force_collect' parameter.\n+\t* ggc-page.c (ggc_collect): Use that one instead of global\n+\t'ggc_force_collect'.  Adjust all users.\n+\t* doc/gty.texi (Invoking the garbage collector): Update.\n+\t* ggc-internal.h (ggc_force_collect): Remove.\n+\t* ggc-common.c (ggc_force_collect): Likewise.\n+\t* selftest.h (forcibly_ggc_collect): Remove.\n+\t* ggc-tests.c (selftest::forcibly_ggc_collect): Likewise.\n+\t* read-rtl-function.c (test_loading_labels): Adjust.\n+\t* selftest-run-tests.c (run_tests): Likewise.\n+\n+2021-08-17  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* config/darwin.c (darwin_file_end): Reset and reclaim the\n+\tsection names table at the end of compile.\n+\n+2021-08-17  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR target/100340\n+\t* config.in: Regenerate.\n+\t* config/i386/darwin.h (EXTRA_ASM_OPTS): New\n+\t(ASM_SPEC): Pass options to disable branch shortening where\n+\tneeded.\n+\t* configure: Regenerate.\n+\t* configure.ac: Detect versions of 'as' that support the\n+\toptimisation which has the bug.\n+\n+2021-08-17  Richard Biener  <rguenther@suse.de>\n+\n+\t* optabs-query.c (supports_vec_gather_load_p): Also check\n+\tfor masked optabs.\n+\t(supports_vec_scatter_store_p): Likewise.\n+\t* tree-vect-data-refs.c (vect_gather_scatter_fn_p): Fall\n+\tback to masked variants if non-masked are not supported.\n+\t* tree-vect-patterns.c (vect_recog_gather_scatter_pattern):\n+\tWhen we need to use masked gather/scatter but do not have\n+\ta mask set up a constant true one.\n+\t* tree-vect-stmts.c (vect_check_scalar_mask): Also allow\n+\tnon-SSA_NAME masks.\n+\n+2021-08-17  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* tree-ssa-ccp.c (bit_value_binop) [MINUS_EXPR]: Use same\n+\talgorithm as PLUS_EXPR to improve subtraction bit bounds.\n+\t[POINTER_DIFF_EXPR]: Treat as synonymous with MINUS_EXPR.\n+\n+2021-08-17  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* tree-ssa-ccp.c (bit_value_mult_const): New helper function to\n+\tcalculate the mask-value pair result of a multiplication by an\n+\tunsigned constant.\n+\t(bit_value_binop) [MULT_EXPR]:  Call it from here for\n+\tmultiplications by (sparse) non-negative constants.\n+\n+2021-08-17  Christophe Lyon  <christophe.lyon@foss.st.com>\n+\n+\tPR target/100896\n+\t* config.gcc (gcc_cv_initfini_array): Leave undefined for\n+\tuclinuxfdpiceabi targets.\n+\n+2021-08-17  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* tree-inline.c (maybe_move_debug_stmts_to_successors): Don't\n+\treverse debug stmts.\n+\n+2021-08-17  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* tree-cfg.c (dump_function_to_file): Use fun, not cfun.\n+\n+2021-08-17  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (__LD4_LANE_FUNC): Delete.\n+\t(__LD4Q_LANE_FUNC): Likewise.\n+\t(vld4_lane_u8): Define without macro.\n+\t(vld4_lane_u16): Likewise.\n+\t(vld4_lane_u32): Likewise.\n+\t(vld4_lane_u64): Likewise.\n+\t(vld4_lane_s8): Likewise.\n+\t(vld4_lane_s16): Likewise.\n+\t(vld4_lane_s32): Likewise.\n+\t(vld4_lane_s64): Likewise.\n+\t(vld4_lane_f16): Likewise.\n+\t(vld4_lane_f32): Likewise.\n+\t(vld4_lane_f64): Likewise.\n+\t(vld4_lane_p8): Likewise.\n+\t(vld4_lane_p16): Likewise.\n+\t(vld4_lane_p64): Likewise.\n+\t(vld4q_lane_u8): Likewise.\n+\t(vld4q_lane_u16): Likewise.\n+\t(vld4q_lane_u32): Likewise.\n+\t(vld4q_lane_u64): Likewise.\n+\t(vld4q_lane_s8): Likewise.\n+\t(vld4q_lane_s16): Likewise.\n+\t(vld4q_lane_s32): Likewise.\n+\t(vld4q_lane_s64): Likewise.\n+\t(vld4q_lane_f16): Likewise.\n+\t(vld4q_lane_f32): Likewise.\n+\t(vld4q_lane_f64): Likewise.\n+\t(vld4q_lane_p8): Likewise.\n+\t(vld4q_lane_p16): Likewise.\n+\t(vld4q_lane_p64): Likewise.\n+\t(vld4_lane_bf16): Likewise.\n+\t(vld4q_lane_bf16): Likewise.\n+\n+2021-08-17  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (__LD3_LANE_FUNC): Delete.\n+\t(__LD3Q_LANE_FUNC): Delete.\n+\t(vld3_lane_u8): Define without macro.\n+\t(vld3_lane_u16): Likewise.\n+\t(vld3_lane_u32): Likewise.\n+\t(vld3_lane_u64): Likewise.\n+\t(vld3_lane_s8): Likewise.\n+\t(vld3_lane_s16): Likewise.\n+\t(vld3_lane_s32): Likewise.\n+\t(vld3_lane_s64): Likewise.\n+\t(vld3_lane_f16): Likewise.\n+\t(vld3_lane_f32): Likewise.\n+\t(vld3_lane_f64): Likewise.\n+\t(vld3_lane_p8): Likewise.\n+\t(vld3_lane_p16): Likewise.\n+\t(vld3_lane_p64): Likewise.\n+\t(vld3q_lane_u8): Likewise.\n+\t(vld3q_lane_u16): Likewise.\n+\t(vld3q_lane_u32): Likewise.\n+\t(vld3q_lane_u64): Likewise.\n+\t(vld3q_lane_s8): Likewise.\n+\t(vld3q_lane_s16): Likewise.\n+\t(vld3q_lane_s32): Likewise.\n+\t(vld3q_lane_s64): Likewise.\n+\t(vld3q_lane_f16): Likewise.\n+\t(vld3q_lane_f32): Likewise.\n+\t(vld3q_lane_f64): Likewise.\n+\t(vld3q_lane_p8): Likewise.\n+\t(vld3q_lane_p16): Likewise.\n+\t(vld3q_lane_p64): Likewise.\n+\t(vld3_lane_bf16): Likewise.\n+\t(vld3q_lane_bf16): Likewise.\n+\n+2021-08-17  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (__LD2_LANE_FUNC): Delete.\n+\t(__LD2Q_LANE_FUNC): Likewise.\n+\t(vld2_lane_u8): Define without macro.\n+\t(vld2_lane_u16): Likewise.\n+\t(vld2_lane_u32): Likewise.\n+\t(vld2_lane_u64): Likewise.\n+\t(vld2_lane_s8): Likewise.\n+\t(vld2_lane_s16): Likewise.\n+\t(vld2_lane_s32): Likewise.\n+\t(vld2_lane_s64): Likewise.\n+\t(vld2_lane_f16): Likewise.\n+\t(vld2_lane_f32): Likewise.\n+\t(vld2_lane_f64): Likewise.\n+\t(vld2_lane_p8): Likewise.\n+\t(vld2_lane_p16): Likewise.\n+\t(vld2_lane_p64): Likewise.\n+\t(vld2q_lane_u8): Likewise.\n+\t(vld2q_lane_u16): Likewise.\n+\t(vld2q_lane_u32): Likewise.\n+\t(vld2q_lane_u64): Likewise.\n+\t(vld2q_lane_s8): Likewise.\n+\t(vld2q_lane_s16): Likewise.\n+\t(vld2q_lane_s32): Likewise.\n+\t(vld2q_lane_s64): Likewise.\n+\t(vld2q_lane_f16): Likewise.\n+\t(vld2q_lane_f32): Likewise.\n+\t(vld2q_lane_f64): Likewise.\n+\t(vld2q_lane_p8): Likewise.\n+\t(vld2q_lane_p16): Likewise.\n+\t(vld2q_lane_p64): Likewise.\n+\t(vld2_lane_bf16): Likewise.\n+\t(vld2q_lane_bf16): Likewise.\n+\n+2021-08-17  Maxim Kuvyrkov  <maxim.kuvyrkov@linaro.org>\n+\n+\t* haifa-sched.c (advance_one_cycle): Output more context-synchronization\n+\tlines for diff.\n+\n+2021-08-17  Maxim Kuvyrkov  <maxim.kuvyrkov@linaro.org>\n+\n+\t* haifa-sched.c (enum rfs_decision, rfs_str): Add RFS_AUTOPREF.\n+\t(rank_for_schedule): Use it.\n+\n+2021-08-17  Maxim Kuvyrkov  <maxim.kuvyrkov@linaro.org>\n+\n+\tPR rtl-optimization/91598\n+\t* haifa-sched.c (autopref_rank_for_schedule): Prioritize \"irrelevant\"\n+\tinsns after memory reads and before memory writes.\n+\n+2021-08-17  Alistair_Lee  <alistair.lee@arm.com>\n+\n+\t* rtl.h (CONST_VECTOR_P): New macro.\n+\t* config/aarch64/aarch64.c (aarch64_get_sve_pred_bits): Use RTL\n+\tcode testing macros.\n+\t(aarch64_ptrue_all_mode): Likewise.\n+\t(aarch64_expand_mov_immediate): Likewise.\n+\t(aarch64_const_vec_all_in_range_p): Likewise.\n+\t(aarch64_rtx_costs): Likewise.\n+\t(aarch64_legitimate_constant_p): Likewise.\n+\t(aarch64_simd_valid_immediate): Likewise.\n+\t(aarch64_simd_make_constant): Likewise.\n+\t(aarch64_convert_mult_to_shift): Likewise.\n+\t(aarch64_expand_sve_vec_perm): Likewise.\n+\t(aarch64_vec_fpconst_pow_of_2): Likewise.\n+\n+2021-08-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/101938\n+\t* range-op.cc (operator_abs::op1_range): Special case\n+\t-TYPE_MIN_VALUE for flag_wrapv.\n+\n+2021-08-17  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* tree-vect-slp.c (vectorizable_bb_reduc_epilogue): Add the cost for\n+\tvalue extraction.\n+\n+2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.def (OMP_SCOPE): New tree code.\n+\t* tree.h (OMP_SCOPE_BODY, OMP_SCOPE_CLAUSES): Define.\n+\t* tree-nested.c (convert_nonlocal_reference_stmt,\n+\tconvert_local_reference_stmt, convert_gimple_call): Handle\n+\tGIMPLE_OMP_SCOPE.\n+\t* tree-pretty-print.c (dump_generic_node): Handle OMP_SCOPE.\n+\t* gimple.def (GIMPLE_OMP_SCOPE): New gimple code.\n+\t* gimple.c (gimple_build_omp_scope): New function.\n+\t(gimple_copy): Handle GIMPLE_OMP_SCOPE.\n+\t* gimple.h (gimple_build_omp_scope): Declare.\n+\t(gimple_has_substatements): Handle GIMPLE_OMP_SCOPE.\n+\t(gimple_omp_scope_clauses, gimple_omp_scope_clauses_ptr,\n+\tgimple_omp_scope_set_clauses): New inline functions.\n+\t(CASE_GIMPLE_OMP): Add GIMPLE_OMP_SCOPE.\n+\t* gimple-pretty-print.c (dump_gimple_omp_scope): New function.\n+\t(pp_gimple_stmt_1): Handle GIMPLE_OMP_SCOPE.\n+\t* gimple-walk.c (walk_gimple_stmt): Likewise.\n+\t* gimple-low.c (lower_stmt): Likewise.\n+\t* gimplify.c (is_gimple_stmt): Handle OMP_MASTER.\n+\t(gimplify_scan_omp_clauses): For task reductions, handle OMP_SCOPE\n+\tlike ORT_WORKSHARE constructs.  Adjust diagnostics for %<scope%>\n+\tallowing task reductions.  Reject inscan reductions on scope.\n+\t(omp_find_stores_stmt): Handle GIMPLE_OMP_SCOPE.\n+\t(gimplify_omp_workshare, gimplify_expr): Handle OMP_SCOPE.\n+\t* tree-inline.c (remap_gimple_stmt): Handle GIMPLE_OMP_SCOPE.\n+\t(estimate_num_insns): Likewise.\n+\t* omp-low.c (build_outer_var_ref): Look through GIMPLE_OMP_SCOPE\n+\tcontexts if var isn't privatized there.\n+\t(check_omp_nesting_restrictions): Handle GIMPLE_OMP_SCOPE.\n+\t(scan_omp_1_stmt): Likewise.\n+\t(maybe_add_implicit_barrier_cancel): Look through outer\n+\tscope constructs.\n+\t(lower_omp_scope): New function.\n+\t(lower_omp_task_reductions): Handle OMP_SCOPE.\n+\t(lower_omp_1): Handle GIMPLE_OMP_SCOPE.\n+\t(diagnose_sb_1, diagnose_sb_2): Likewise.\n+\t* omp-expand.c (expand_omp_single): Support also GIMPLE_OMP_SCOPE.\n+\t(expand_omp): Handle GIMPLE_OMP_SCOPE.\n+\t(omp_make_gimple_edges): Likewise.\n+\t* omp-builtins.def (BUILT_IN_GOMP_SCOPE_START): New built-in.\n+\n+2021-08-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101925\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Set\n+\treverse on COMPONENT_REF and ARRAY_REF according to\n+\twhat reverse_storage_order_for_component_p does.\n+\t(vn_reference_eq): Compare reversed on reference ops.\n+\t(reverse_storage_order_for_component_p): New overload.\n+\t(vn_reference_lookup_3): Check reverse_storage_order_for_component_p\n+\ton the reference looked up.\n+\n+2021-08-17  Jeff Law  <jlaw@localhost.localdomain>\n+\n+\t* config/h8300/h8300.c (shift_alg_si): Avoid loops for most SImode\n+\tshifts on the H8/S.\n+\t(h8300_option_override): Use loops on H8/S more often when optimizing\n+\tfor size.\n+\t(get_shift_alg): Handle new \"special\" cases on H8/S.  Simplify\n+\taccordingly.  Handle various arithmetic right shifts with special\n+\tsequences that we couldn't handle before.\n+\n 2021-08-16  Jeff Law  <jlaw@localhost.localdomain>\n \n \t* config.gcc (rl78-*-elf*): Do not include dbxelf.h."}, {"sha": "70b09db5ed78cd71fca723380a26b36f69af6212", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2d14d64bf2d42a87ec58dd3760be12aeaa4a4279", "patch": "@@ -1 +1 @@\n-20210817\n+20210818"}, {"sha": "55959948ac7488dd81b55419f569f9641c657ae6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2d14d64bf2d42a87ec58dd3760be12aeaa4a4279", "patch": "@@ -1,3 +1,20 @@\n+2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101539\n+\t* c-common.h (enum rid): Add RID_IS_LAYOUT_COMPATIBLE.\n+\t* c-common.c (c_common_reswords): Add __is_layout_compatible.\n+\n+2021-08-17  Matt Jacobson  <mhjacobson@me.com>\n+\n+\t* c-opts.c (c_common_post_options): Default to\n+\tflag_objc_sjlj_exceptions = 1 only when flag_objc_abi < 2.\n+\n+2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-pragma.h (enum pragma_kind): Add PRAGMA_OMP_SCOPE.\n+\t* c-pragma.c (omp_pragmas): Add scope construct.\n+\t* c-omp.c (omp_directives): Uncomment scope directive entry.\n+\n 2021-08-16  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* c-cppbuiltin.c (c_cpp_builtins): Define"}, {"sha": "caeac5b2c314ef6273624d3d73bde9224ec4fcb1", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=2d14d64bf2d42a87ec58dd3760be12aeaa4a4279", "patch": "@@ -1,3 +1,9 @@\n+2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (OMP_SCOPE_CLAUSE_MASK): Define.\n+\t(c_parser_omp_scope): New function.\n+\t(c_parser_omp_construct): Handle PRAGMA_OMP_SCOPE.\n+\n 2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_omp_clause_name): Parse filter clause name."}, {"sha": "a2d47b38256cf43be495cfc8a8c2e003638ed7c2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2d14d64bf2d42a87ec58dd3760be12aeaa4a4279", "patch": "@@ -1,3 +1,44 @@\n+2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101539\n+\t* cp-tree.h (enum cp_trait_kind): Add CPTK_IS_LAYOUT_COMPATIBLE.\n+\t(enum cp_built_in_function): Add CP_BUILT_IN_IS_CORRESPONDING_MEMBER.\n+\t(fold_builtin_is_corresponding_member, next_common_initial_seqence,\n+\tlayout_compatible_type_p): Declare.\n+\t* parser.c (cp_parser_primary_expression): Handle\n+\tRID_IS_LAYOUT_COMPATIBLE.\n+\t(cp_parser_trait_expr): Likewise.\n+\t* cp-objcp-common.c (names_builtin_p): Likewise.\n+\t* constraint.cc (diagnose_trait_expr): Handle\n+\tCPTK_IS_LAYOUT_COMPATIBLE.\n+\t* decl.c (cxx_init_decl_processing): Register\n+\t__builtin_is_corresponding_member builtin.\n+\t* constexpr.c (cxx_eval_builtin_function_call): Handle\n+\tCP_BUILT_IN_IS_CORRESPONDING_MEMBER builtin.\n+\t* semantics.c (is_corresponding_member_union,\n+\tis_corresponding_member_aggr, fold_builtin_is_corresponding_member):\n+\tNew functions.\n+\t(trait_expr_value): Handle CPTK_IS_LAYOUT_COMPATIBLE.\n+\t(finish_trait_expr): Likewise.\n+\t* typeck.c (next_common_initial_seqence, layout_compatible_type_p):\n+\tNew functions.\n+\t* cp-gimplify.c (cp_gimplify_expr): Fold\n+\tCP_BUILT_IN_IS_CORRESPONDING_MEMBER.\n+\t(cp_fold): Likewise.\n+\t* tree.c (builtin_valid_in_constant_expr_p): Handle\n+\tCP_BUILT_IN_IS_CORRESPONDING_MEMBER.\n+\t* cxx-pretty-print.c (pp_cxx_trait_expression): Handle\n+\tCPTK_IS_LAYOUT_COMPATIBLE.\n+\t* class.c (remove_zero_width_bit_fields): Remove.\n+\t(layout_class_type): Don't call it.\n+\n+2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (OMP_SCOPE_CLAUSE_MASK): Define.\n+\t(cp_parser_omp_scope): New function.\n+\t(cp_parser_omp_construct, cp_parser_pragma): Handle PRAGMA_OMP_SCOPE.\n+\t* pt.c (tsubst_expr): Handle OMP_SCOPE.\n+\n 2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.c (cp_parser_omp_clause_name): Parse filter clause name."}, {"sha": "86a2bdae6eefdf7bccbeb765bedd57f92372e342", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2d14d64bf2d42a87ec58dd3760be12aeaa4a4279", "patch": "@@ -1,3 +1,25 @@\n+2021-08-17  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* dump-parse-tree.c (show_omp_node, show_code_node): Handle\n+\tEXEC_OMP_SCOPE.\n+\t* gfortran.h (enum gfc_statement): Add ST_OMP_(END_)SCOPE.\n+\t(enum gfc_exec_op): Add EXEC_OMP_SCOPE.\n+\t* match.h (gfc_match_omp_scope): New.\n+\t* openmp.c (OMP_SCOPE_CLAUSES): Define\n+\t(gfc_match_omp_scope): New.\n+\t(gfc_match_omp_cancellation_point, gfc_match_omp_end_nowait):\n+\tImprove error diagnostic.\n+\t(omp_code_to_statement): Handle ST_OMP_SCOPE.\n+\t(gfc_resolve_omp_directive): Handle EXEC_OMP_SCOPE.\n+\t* parse.c (decode_omp_directive, next_statement,\n+\tgfc_ascii_statement, parse_omp_structured_block,\n+\tparse_executable): Handle OpenMP's scope construct.\n+\t* resolve.c (gfc_resolve_blocks): Likewise\n+\t* st.c (gfc_free_statement): Likewise\n+\t* trans-openmp.c (gfc_trans_omp_scope): New.\n+\t(gfc_trans_omp_directive): Call it.\n+\t* trans.c (trans_code): handle EXEC_OMP_SCOPE.\n+\n 2021-08-16  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* dump-parse-tree.c (show_omp_clauses): Handle 'filter' clause."}, {"sha": "8adde0d2ad5e39b49ad841c42b9a2ba7b87df252", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=2d14d64bf2d42a87ec58dd3760be12aeaa4a4279", "patch": "@@ -1,3 +1,11 @@\n+2021-08-17  Matt Jacobson  <mhjacobson@me.com>\n+\n+\t* objc-next-runtime-abi-02.c\n+\t(objc_next_runtime_abi_02_init): Warn about and reset\n+\tflag_objc_sjlj_exceptions regardless of flag_objc_exceptions.\n+\t(next_runtime_02_initialize): Use a checking assert that\n+\tflag_objc_sjlj_exceptions is off.\n+\n 2021-06-28  Martin Sebor  <msebor@redhat.com>\n \n \t* objc-act.c (objc_maybe_build_modify_expr): Replace direct uses"}, {"sha": "e5dcd4a0172f486dabb0dd4840a17b717172d40f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d14d64bf2d42a87ec58dd3760be12aeaa4a4279", "patch": "@@ -1,3 +1,103 @@\n+2021-08-17  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101854\n+\t* gcc.dg/attr-alloc_size-5.c: Adjust optimization to -O1.\n+\t* gcc.dg/attr-alloc_size-7.c: Use #pragmas to adjust optimization.\n+\t* gcc.dg/attr-alloc_size-8.c: Adjust optimization to -O1.\n+\t* gcc.dg/Wstringop-overflow-72.c: New test.\n+\n+2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/101539\n+\t* g++.dg/cpp2a/is-corresponding-member1.C: New test.\n+\t* g++.dg/cpp2a/is-corresponding-member2.C: New test.\n+\t* g++.dg/cpp2a/is-corresponding-member3.C: New test.\n+\t* g++.dg/cpp2a/is-corresponding-member4.C: New test.\n+\t* g++.dg/cpp2a/is-corresponding-member5.C: New test.\n+\t* g++.dg/cpp2a/is-corresponding-member6.C: New test.\n+\t* g++.dg/cpp2a/is-corresponding-member7.C: New test.\n+\t* g++.dg/cpp2a/is-corresponding-member8.C: New test.\n+\t* g++.dg/cpp2a/is-layout-compatible1.C: New test.\n+\t* g++.dg/cpp2a/is-layout-compatible2.C: New test.\n+\t* g++.dg/cpp2a/is-layout-compatible3.C: New test.\n+\n+2021-08-17  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gcc.dg/pr78213.c: Restore testing.\n+\n+2021-08-17  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.dg/tree-ssa/ssa-ccp-40.c: New test case.\n+\n+2021-08-17  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.dg/fold-ior-5.c: New test case.\n+\n+2021-08-17  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/scan-1.f90:\n+\t* gfortran.dg/gomp/cancel-1.f90: New test.\n+\t* gfortran.dg/gomp/cancel-4.f90: New test.\n+\t* gfortran.dg/gomp/loop-4.f90: New test.\n+\t* gfortran.dg/gomp/nesting-1.f90: New test.\n+\t* gfortran.dg/gomp/nesting-2.f90: New test.\n+\t* gfortran.dg/gomp/nesting-3.f90: New test.\n+\t* gfortran.dg/gomp/nowait-1.f90: New test.\n+\t* gfortran.dg/gomp/reduction-task-1.f90: New test.\n+\t* gfortran.dg/gomp/reduction-task-2.f90: New test.\n+\t* gfortran.dg/gomp/reduction-task-2a.f90: New test.\n+\t* gfortran.dg/gomp/reduction-task-3.f90: New test.\n+\t* gfortran.dg/gomp/scope-1.f90: New test.\n+\t* gfortran.dg/gomp/scope-2.f90: New test.\n+\n+2021-08-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/101938\n+\t* gcc.dg/pr101938.c: New test.\n+\n+2021-08-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101868\n+\t* gcc.dg/lto/pr101868_0.c: New testcase.\n+\t* gcc.dg/lto/pr101868_1.c: Likewise.\n+\t* gcc.dg/lto/pr101868_2.c: Likewise.\n+\t* gcc.dg/lto/pr101868_3.c: Likewise.\n+\n+2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/nesting-2.c (foo): Add scope and masked\n+\tconstruct tests.\n+\t* c-c++-common/gomp/scan-1.c (f3): Add scope construct test..\n+\t* c-c++-common/gomp/cancel-1.c (f2): Add scope and masked\n+\tconstruct tests.\n+\t* c-c++-common/gomp/reduction-task-2.c (bar): Add scope construct\n+\ttest.  Adjust diagnostics for the addition of scope.\n+\t* c-c++-common/gomp/loop-1.c (f5): Add master, masked and scope\n+\tconstruct tests.\n+\t* c-c++-common/gomp/clause-dups-1.c (f1): Add scope construct test.\n+\t* gcc.dg/gomp/nesting-1.c (f1, f2, f3): Add scope construct tests.\n+\t* c-c++-common/gomp/scope-1.c: New test.\n+\t* c-c++-common/gomp/scope-2.c: New test.\n+\t* g++.dg/gomp/attrs-1.C (bar): Add scope construct tests.\n+\t* g++.dg/gomp/attrs-2.C (bar): Likewise.\n+\t* gfortran.dg/gomp/reduction4.f90: Adjust expected diagnostics.\n+\t* gfortran.dg/gomp/reduction7.f90: Likewise.\n+\n+2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/cpp/va-opt-5.c: New test.\n+\t* c-c++-common/cpp/va-opt-6.c: New test.\n+\n+2021-08-17  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101925\n+\t* gcc.dg/sso-16.c: New testcase.\n+\n+2021-08-17  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr82460-2.c: Adjust testcase by adding\n+\t--param=vect-epilogues-nomask=0\n+\n 2021-08-16  liuhongt  <hongtao.liu@intel.com>\n \n \tPR target/101930"}, {"sha": "f500fdbdd1a1f5f6ce3d15e14a973949e5bc965d", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=2d14d64bf2d42a87ec58dd3760be12aeaa4a4279", "patch": "@@ -1,3 +1,8 @@\n+2021-08-17  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* Makefile.am: Switch mdynamic-no-pic to fPIC.\n+\t* Makefile.in: Regenerated.\n+\n 2021-06-28  Martin Sebor  <msebor@redhat.com>\n \n \t* libcp1plugin.cc (record_decl_address): Replace a direct use"}, {"sha": "688cad248614792cf127c8c8c9ee82cb0b915cc7", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=2d14d64bf2d42a87ec58dd3760be12aeaa4a4279", "patch": "@@ -1,3 +1,20 @@\n+2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* macro.c (vaopt_state): Add m_stringify member.\n+\t(vaopt_state::vaopt_state): Initialize it.\n+\t(vaopt_state::update): Overwrite it.\n+\t(vaopt_state::stringify): New method.\n+\t(stringify_arg): Replace arg argument with first, count arguments\n+\tand add va_opt argument.  Use first instead of arg->first and\n+\tcount instead of arg->count, for va_opt add paste_tokens handling.\n+\t(paste_tokens): Fix up len calculation.  Don't spell rhs twice,\n+\tinstead use %.*s to supply lhs and rhs spelling lengths.  Don't call\n+\t_cpp_backup_tokens here.\n+\t(paste_all_tokens): Call it here instead.\n+\t(replace_args): Adjust stringify_arg caller.  For vaopt_state::END\n+\tif stringify is true handle __VA_OPT__ stringification.\n+\t(create_iso_definition): Handle # __VA_OPT__ similarly to # macro_arg.\n+\n 2021-08-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/101638"}, {"sha": "df8323c377452759a9de06fca4d4a73ddd282904", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2d14d64bf2d42a87ec58dd3760be12aeaa4a4279", "patch": "@@ -1,3 +1,18 @@\n+2021-08-17  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.fortran/scope-1.f90: New test.\n+\t* testsuite/libgomp.fortran/task-reduction-16.f90: New test.\n+\n+2021-08-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Makefile.am (libgomp_la_SOURCES): Add scope.c\n+\t* Makefile.in: Regenerated.\n+\t* libgomp_g.h (GOMP_scope_start): Declare.\n+\t* libgomp.map: Add GOMP_scope_start@@GOMP_5.1.\n+\t* scope.c: New file.\n+\t* testsuite/libgomp.c-c++-common/scope-1.c: New test.\n+\t* testsuite/libgomp.c-c++-common/task-reduction-16.c: New test.\n+\n 2021-08-16  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/mode-transitions.c: Address"}, {"sha": "8f01da838010663fa810bc757a80693cd7b04e16", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d14d64bf2d42a87ec58dd3760be12aeaa4a4279/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2d14d64bf2d42a87ec58dd3760be12aeaa4a4279", "patch": "@@ -1,3 +1,61 @@\n+2021-08-17  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* testsuite/lib/libstdc++.exp: Avoid illegal argument to verbose,\n+\tcontinued.\n+\n+2021-08-17  Luc Michel  <lmichel@kalray.eu>\n+\t    Marc Poulhies  <mpoulhies@kalrayinc.com>\n+\n+\t* testsuite/lib/gdb-test.exp (gdb_version_check)\n+\t(gdb_version_check_xmethods): Only check the GDB version for\n+\tlocal native targets.\n+\n+2021-08-17  Antony Polukhin  <antoshkka@gmail.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/random.tcc (seed_seq::seed_seq): Reserve capacity\n+\tif distance is O(1).\n+\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error\n+\tline number.\n+\n+2021-08-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/26_numerics/random/seed_seq/cons/range.cc: Check\n+\tconstruction from input iterators.\n+\n+2021-08-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* python/libstdcxx/v6/printers.py (StdErrorCatPrinter): Remove.\n+\n+2021-08-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101923\n+\t* include/bits/std_function.h (function(function&&)): Check for\n+\tnon-empty parameter before doing any work.\n+\n+2021-08-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/cow_string.h (basic_string::contains): Do not\n+\tdefine for -std=gnu++20.\n+\n+2021-08-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ranges_util.h (__not_same_as): Rename to\n+\t__different_from.\n+\t* include/std/ranges (__not_same_as): Likewise.\n+\n+2021-08-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/utility (exchange): Add noexcept-specifier.\n+\t* testsuite/20_util/exchange/noexcept.cc: New test.\n+\n+2021-08-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* python/libstdcxx/v6/printers.py (StdErrorCodePrinter): Define.\n+\t(build_libstdcxx_dictionary): Register printer for\n+\tstd::error_code and std::error_condition.\n+\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Test it.\n+\n 2021-08-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/101937"}]}