{"sha": "0cff9154ece79cb537b4bc5fa22975cf2ac9c11e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNmZjkxNTRlY2U3OWNiNTM3YjRiYzVmYTIyOTc1Y2YyYWM5YzExZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-08-14T11:15:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-08-14T11:15:41Z"}, "message": "tree.c (type_hash_lookup, [...]): Merge into ...\n\n2014-08-14  Richard Biener  <rguenther@suse.de>\n\n\t* tree.c (type_hash_lookup, type_hash_add): Merge into ...\n\t(type_hash_canon): ... this and avoid 2nd lookup for the add.\n\nFrom-SVN: r213956", "tree": {"sha": "f2d11a37a8f173a882973bd9860242d744ab1da2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2d11a37a8f173a882973bd9860242d744ab1da2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cff9154ece79cb537b4bc5fa22975cf2ac9c11e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cff9154ece79cb537b4bc5fa22975cf2ac9c11e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cff9154ece79cb537b4bc5fa22975cf2ac9c11e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cff9154ece79cb537b4bc5fa22975cf2ac9c11e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "215acd2bae70e5ae9cbe68bdaa150a9215722310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/215acd2bae70e5ae9cbe68bdaa150a9215722310", "html_url": "https://github.com/Rust-GCC/gccrs/commit/215acd2bae70e5ae9cbe68bdaa150a9215722310"}], "stats": {"total": 72, "additions": 28, "deletions": 44}, "files": [{"sha": "fe1412905f70c0b1805925223933ef939c657e3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cff9154ece79cb537b4bc5fa22975cf2ac9c11e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cff9154ece79cb537b4bc5fa22975cf2ac9c11e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cff9154ece79cb537b4bc5fa22975cf2ac9c11e", "patch": "@@ -1,3 +1,8 @@\n+2014-08-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree.c (type_hash_lookup, type_hash_add): Merge into ...\n+\t(type_hash_canon): ... this and avoid 2nd lookup for the add.\n+\n 2014-08-14  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/62090"}, {"sha": "ec65fa8c0b5268b09912244a433786518041539c", "filename": "gcc/tree.c", "status": "modified", "additions": 23, "deletions": 44, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cff9154ece79cb537b4bc5fa22975cf2ac9c11e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cff9154ece79cb537b4bc5fa22975cf2ac9c11e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=0cff9154ece79cb537b4bc5fa22975cf2ac9c11e", "patch": "@@ -6763,44 +6763,6 @@ type_hash_hash (const void *item)\n   return ((const struct type_hash *) item)->hash;\n }\n \n-/* Look in the type hash table for a type isomorphic to TYPE.\n-   If one is found, return it.  Otherwise return 0.  */\n-\n-static tree\n-type_hash_lookup (hashval_t hashcode, tree type)\n-{\n-  struct type_hash *h, in;\n-\n-  /* The TYPE_ALIGN field of a type is set by layout_type(), so we\n-     must call that routine before comparing TYPE_ALIGNs.  */\n-  layout_type (type);\n-\n-  in.hash = hashcode;\n-  in.type = type;\n-\n-  h = (struct type_hash *) htab_find_with_hash (type_hash_table, &in,\n-\t\t\t\t\t\thashcode);\n-  if (h)\n-    return h->type;\n-  return NULL_TREE;\n-}\n-\n-/* Add an entry to the type-hash-table\n-   for a type TYPE whose hash code is HASHCODE.  */\n-\n-static void\n-type_hash_add (hashval_t hashcode, tree type)\n-{\n-  struct type_hash *h;\n-  void **loc;\n-\n-  h = ggc_alloc<type_hash> ();\n-  h->hash = hashcode;\n-  h->type = type;\n-  loc = htab_find_slot_with_hash (type_hash_table, h, hashcode, INSERT);\n-  *loc = (void *)h;\n-}\n-\n /* Given TYPE, and HASHCODE its hash code, return the canonical\n    object for an identical type if one already exists.\n    Otherwise, return TYPE, and record it as the canonical object.\n@@ -6813,17 +6775,28 @@ type_hash_add (hashval_t hashcode, tree type)\n tree\n type_hash_canon (unsigned int hashcode, tree type)\n {\n-  tree t1;\n+  type_hash in;\n+  void **loc;\n \n   /* The hash table only contains main variants, so ensure that's what we're\n      being passed.  */\n   gcc_assert (TYPE_MAIN_VARIANT (type) == type);\n \n-  /* See if the type is in the hash table already.  If so, return it.\n-     Otherwise, add the type.  */\n-  t1 = type_hash_lookup (hashcode, type);\n-  if (t1 != 0)\n+  /* The TYPE_ALIGN field of a type is set by layout_type(), so we\n+     must call that routine before comparing TYPE_ALIGNs.  */\n+  layout_type (type);\n+\n+  in.hash = hashcode;\n+  in.type = type;\n+\n+  loc = htab_find_slot_with_hash (type_hash_table, &in, hashcode, INSERT);\n+  if (*loc)\n     {\n+      tree t1 = ((type_hash *) *loc)->type;\n+      /* ???  We'd like to assert here that the hashtable only contains\n+         main variants but the C++ frontend breaks this by modifying\n+\t types already in the hashtable in build_cplus_array_type.  */\n+      /* gcc_assert (TYPE_MAIN_VARIANT (t1) == t1); */\n       if (GATHER_STATISTICS)\n \t{\n \t  tree_code_counts[(int) TREE_CODE (type)]--;\n@@ -6834,7 +6807,13 @@ type_hash_canon (unsigned int hashcode, tree type)\n     }\n   else\n     {\n-      type_hash_add (hashcode, type);\n+      struct type_hash *h;\n+\n+      h = ggc_alloc<type_hash> ();\n+      h->hash = hashcode;\n+      h->type = type;\n+      *loc = (void *)h;\n+\n       return type;\n     }\n }"}]}