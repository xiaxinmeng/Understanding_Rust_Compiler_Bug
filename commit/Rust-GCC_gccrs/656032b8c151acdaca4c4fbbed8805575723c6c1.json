{"sha": "656032b8c151acdaca4c4fbbed8805575723c6c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU2MDMyYjhjMTUxYWNkYWNhNGM0ZmJiZWQ4ODA1NTc1NzIzYzZjMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-01-18T11:22:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-01-18T11:22:10Z"}, "message": "[multiple changes]\n\n2006-01-18  Perry Smith  <pedz@easesoftware.net>\n\n\tPR libstdc++/25823\n\tPR libstdc++/25824\n\t* libsupc++/eh_alloc.cc: Fix return type of memset declaration.\n\t* libsupc++/eh_globals.cc: If !_GLIBCXX_HOSTED declare malloc and free.\n\n2006-01-18  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/pb_assoc/detail/value_type_adapter/\n\tvalue_type_adapter.hpp: Include <tr1/type_traits>.\n\t* include/ext/pb_assoc/detail/value_type_adapter/\n\tit_value_type_traits.hpp (it_value_type_traits_<>::value_type_holder):\n\tUse tr1::aligned_storage and tr1::alignment_of.\n\t(it_value_type_traits_<>::buf_t): Remove.\n\t(it_value_type_traits_<>::make_valid, recast): Adjust.\n\nFrom-SVN: r109883", "tree": {"sha": "f5eeca6e0ce57ed0dbc5bf6b1f539db803ed664c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5eeca6e0ce57ed0dbc5bf6b1f539db803ed664c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/656032b8c151acdaca4c4fbbed8805575723c6c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/656032b8c151acdaca4c4fbbed8805575723c6c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/656032b8c151acdaca4c4fbbed8805575723c6c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/656032b8c151acdaca4c4fbbed8805575723c6c1/comments", "author": null, "committer": null, "parents": [{"sha": "b2f39494f9f2f15d096d8119066b1f2631cdafc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2f39494f9f2f15d096d8119066b1f2631cdafc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2f39494f9f2f15d096d8119066b1f2631cdafc1"}], "stats": {"total": 78, "additions": 51, "deletions": 27}, "files": [{"sha": "fdc3375003c55a1965d0e7915e3dc0567bc8209b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656032b8c151acdaca4c4fbbed8805575723c6c1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656032b8c151acdaca4c4fbbed8805575723c6c1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=656032b8c151acdaca4c4fbbed8805575723c6c1", "patch": "@@ -1,3 +1,20 @@\n+2006-01-18  Perry Smith  <pedz@easesoftware.net>\n+\n+\tPR libstdc++/25823\n+\tPR libstdc++/25824\n+\t* libsupc++/eh_alloc.cc: Fix return type of memset declaration.\n+\t* libsupc++/eh_globals.cc: If !_GLIBCXX_HOSTED declare malloc and free.\n+\n+2006-01-18  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/pb_assoc/detail/value_type_adapter/\n+\tvalue_type_adapter.hpp: Include <tr1/type_traits>.\n+\t* include/ext/pb_assoc/detail/value_type_adapter/\n+\tit_value_type_traits.hpp (it_value_type_traits_<>::value_type_holder):\n+\tUse tr1::aligned_storage and tr1::alignment_of.\n+\t(it_value_type_traits_<>::buf_t): Remove.\n+\t(it_value_type_traits_<>::make_valid, recast): Adjust.\n+\n 2006-01-16  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/25797"}, {"sha": "4be113d8ecd6e02682bc8685ff01e433dd839203", "filename": "libstdc++-v3/include/ext/pb_assoc/detail/value_type_adapter/it_value_type_traits.hpp", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656032b8c151acdaca4c4fbbed8805575723c6c1/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_assoc%2Fdetail%2Fvalue_type_adapter%2Fit_value_type_traits.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656032b8c151acdaca4c4fbbed8805575723c6c1/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_assoc%2Fdetail%2Fvalue_type_adapter%2Fit_value_type_traits.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_assoc%2Fdetail%2Fvalue_type_adapter%2Fit_value_type_traits.hpp?ref=656032b8c151acdaca4c4fbbed8805575723c6c1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -94,16 +94,13 @@ struct it_value_type_traits_\n     value_type>::other::const_pointer\n   const_pointer;\n \n-  typedef\n-  typename Allocator_::template rebind<\n-    int* >::other::value_type\n-  buf_t;\n-\n   struct value_type_holder\n   {\n-    buf_t m_a_key_buf[sizeof(key_ref_pair) / sizeof(buf_t) + 1];\n+    typename std::tr1::aligned_storage<sizeof(key_ref_pair),\n+      std::tr1::alignment_of<key_ref_pair>::value>::type  m_a_key_buf;\n \n-    buf_t m_a_value_buf[sizeof(value_type) / sizeof(buf_t) + 1];\n+    typename std::tr1::aligned_storage<sizeof(value_type),\n+      std::tr1::alignment_of<value_type>::value>::type  m_a_value_buf;\n   };\n \n   typedef\n@@ -114,7 +111,7 @@ struct it_value_type_traits_\n   inline static pointer\n   recast(value_type_hoder_valerence r_holder)\n   {\n-    return reinterpret_cast<pointer>(r_holder.m_a_value_buf);\n+    return reinterpret_cast<pointer>(&r_holder.m_a_value_buf);\n   }\n \n   inline static void\n@@ -125,7 +122,7 @@ struct it_value_type_traits_\n       void* >::other::value_type\n       void_pointer;\n \n-    void_pointer p_target = r_holder.m_a_key_buf;\n+    void_pointer p_target = &r_holder.m_a_key_buf;\n \n     new (p_target) key_ref_pair(r_bk, r_val.first);\n \n@@ -135,9 +132,9 @@ struct it_value_type_traits_\n       key_ref_pair_pointer;\n \n     key_ref_pair_pointer p_key =\n-      reinterpret_cast<key_ref_pair_pointer>(r_holder.m_a_key_buf);\n+      reinterpret_cast<key_ref_pair_pointer>(&r_holder.m_a_key_buf);\n \n-    p_target = r_holder.m_a_value_buf;\n+    p_target = &r_holder.m_a_value_buf;\n \n     new (p_target) value_type(*p_key, r_val.second);\n   }\n@@ -185,16 +182,13 @@ struct it_value_type_traits_<\n     value_type>::other::const_pointer\n   const_pointer;\n \n-  typedef\n-  typename Allocator_::template rebind<\n-    int* >::other::value_type\n-  buf_t;\n-\n   struct value_type_holder\n   {\n-    buf_t m_a_key_buf[sizeof(key_ref_pair) / sizeof(buf_t) + 1];\n+    typename std::tr1::aligned_storage<sizeof(key_ref_pair),\n+      std::tr1::alignment_of<key_ref_pair>::value>::type  m_a_key_buf;\n \n-    buf_t m_a_value_buf[sizeof(value_type) / sizeof(buf_t) + 1];\n+    typename std::tr1::aligned_storage<sizeof(value_type),\n+      std::tr1::alignment_of<value_type>::value>::type  m_a_value_buf;\n   };\n \n   typedef\n@@ -205,7 +199,7 @@ struct it_value_type_traits_<\n   inline static pointer\n   recast(value_type_hoder_valerence r_holder)\n   {\n-    return reinterpret_cast<pointer>(r_holder.m_a_value_buf);\n+    return reinterpret_cast<pointer>(&r_holder.m_a_value_buf);\n   }\n \n   inline static void\n@@ -216,7 +210,7 @@ struct it_value_type_traits_<\n       void* >::other::value_type\n       void_pointer;\n \n-    void_pointer p_target = r_holder.m_a_value_buf;\n+    void_pointer p_target = &r_holder.m_a_value_buf;\n \n     new (p_target) key_ref_pair(r_bk, r_val.first);\n   }"}, {"sha": "9f2dfb2fb6ae3cd5848080e705b8a32eb181921e", "filename": "libstdc++-v3/include/ext/pb_assoc/detail/value_type_adapter/value_type_adapter.hpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656032b8c151acdaca4c4fbbed8805575723c6c1/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_assoc%2Fdetail%2Fvalue_type_adapter%2Fvalue_type_adapter.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656032b8c151acdaca4c4fbbed8805575723c6c1/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_assoc%2Fdetail%2Fvalue_type_adapter%2Fvalue_type_adapter.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_assoc%2Fdetail%2Fvalue_type_adapter%2Fvalue_type_adapter.hpp?ref=656032b8c151acdaca4c4fbbed8805575723c6c1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -51,6 +51,7 @@\n #include <ext/pb_assoc/detail/type_utils.hpp>\n #include <utility>\n #include <algorithm>\n+#include <tr1/type_traits>  // for aligned_storage/alignment_of\n \n namespace pb_assoc\n {"}, {"sha": "9a922af9c2a8833735851159e7e9c48e3fdd8e59", "filename": "libstdc++-v3/libsupc++/eh_alloc.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656032b8c151acdaca4c4fbbed8805575723c6c1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656032b8c151acdaca4c4fbbed8805575723c6c1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_alloc.cc?ref=656032b8c151acdaca4c4fbbed8805575723c6c1", "patch": "@@ -1,5 +1,6 @@\n // -*- C++ -*- Allocate exception objects.\n-// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -49,7 +50,7 @@ using std::memcpy;\n // -- but for now, we assume that they are.\n extern \"C\" void *malloc (std::size_t);\n extern \"C\" void free(void *);\n-extern \"C\" int memset (void *, int, std::size_t);\n+extern \"C\" void *memset (void *, int, std::size_t);\n #endif\n \n using namespace __cxxabiv1;"}, {"sha": "5f44e13a7a1ce3a38c6dea5fe662797ca70a4930", "filename": "libstdc++-v3/libsupc++/eh_globals.cc", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/656032b8c151acdaca4c4fbbed8805575723c6c1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/656032b8c151acdaca4c4fbbed8805575723c6c1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_globals.cc?ref=656032b8c151acdaca4c4fbbed8805575723c6c1", "patch": "@@ -1,5 +1,6 @@\n // -*- C++ -*- Manage the thread-local exception globals.\n-// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n //\n // This file is part of GCC.\n //\n@@ -34,6 +35,16 @@\n #include \"unwind-cxx.h\"\n #include \"bits/gthr.h\"\n \n+#if _GLIBCXX_HOSTED\n+using std::free;\n+using std::malloc;\n+#else\n+// In a freestanding environment, these functions may not be\n+// available -- but for now, we assume that they are.\n+extern \"C\" void *malloc (std::size_t);\n+extern \"C\" void free(void *);\n+#endif\n+\n using namespace __cxxabiv1;\n \n #if _GLIBCXX_HAVE_TLS\n@@ -81,7 +92,7 @@ eh_globals_dtor(void* ptr)\n \t  _Unwind_DeleteException(&exn->unwindHeader);\n \t  exn = next;\n \t}\n-      std::free(ptr);\n+      free(ptr);\n     }\n }\n \n@@ -125,7 +136,7 @@ __cxxabiv1::__cxa_get_globals() throw()\n       g = static_cast<__cxa_eh_globals*>(__gthread_getspecific(init._M_key));\n       if (!g)\n \t{\n-\t  void* v = std::malloc(sizeof(__cxa_eh_globals));\n+\t  void* v = malloc(sizeof(__cxa_eh_globals));\n \t  if (v == 0 || __gthread_setspecific(init._M_key, v) != 0)\n \t    std::terminate();\n \t  g = static_cast<__cxa_eh_globals*>(v);"}]}