{"sha": "f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkwYWE0NmMwZjk3YmI2OWE0ZDYwMDRmNzRmNmZiY2I3ODE4NDMxZA==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2016-08-20T05:43:01Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-08-20T05:43:01Z"}, "message": "Makefile.in: Add tree-vrp.h to GTFILES.\n\ngcc/ChangeLog:\n\n2016-08-20  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* Makefile.in: Add tree-vrp.h to GTFILES.\n\t* gengtype.c (open_base_files): Add tree-vrp.h.\n\t* asan.c: Add tree-vrp.h which now has the definition value_range_type.\n\t* builtins.c: Likewise.\n\t* fold-const.c: Likewise.\n\t* gimple-builder.c: Likewise.\n\t* gimple-laddress.c: Likewise.\n\t* hsa-gen.c: Likewise.\n\t* internal-fn.c: Likewise.\n\t* ssa.h: Likewise.\n\t* targhooks.c: Liewise,\n\t* tree-ssa-address.c: Likewise.\n\t* tree-ssanames.h (value_range_type: Move to tree-vrp.h.\n\t* tree-vrp.c (struct value_range): Move to tree-vrp.h\n\t* tree-vrp.h: New file.\n\nFrom-SVN: r239638", "tree": {"sha": "ffa4f0660d39dd743fde68d482a8ea68cda36054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffa4f0660d39dd743fde68d482a8ea68cda36054"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/comments", "author": null, "committer": null, "parents": [{"sha": "22d12455eaf2e4c64ef8c778358087d999d2ccd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22d12455eaf2e4c64ef8c778358087d999d2ccd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22d12455eaf2e4c64ef8c778358087d999d2ccd8"}], "stats": {"total": 130, "additions": 90, "deletions": 40}, "files": [{"sha": "1929ba8d000bae16f9cc1739218876f414fcc225", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "patch": "@@ -1,3 +1,21 @@\n+2016-08-20  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* Makefile.in: Add tree-vrp.h to GTFILES.\n+\t* gengtype.c (open_base_files): Add tree-vrp.h.\n+\t* asan.c: Add tree-vrp.h which now has the definition value_range_type.\n+\t* builtins.c: Likewise.\n+\t* fold-const.c: Likewise.\n+\t* gimple-builder.c: Likewise.\n+\t* gimple-laddress.c: Likewise.\n+\t* hsa-gen.c: Likewise.\n+\t* internal-fn.c: Likewise.\n+\t* ssa.h: Likewise.\n+\t* targhooks.c: Liewise,\n+\t* tree-ssa-address.c: Likewise.\n+\t* tree-ssanames.h (value_range_type: Move to tree-vrp.h.\n+\t* tree-vrp.c (struct value_range): Move to tree-vrp.h\n+\t* tree-vrp.h: New file.\n+\n 2016-08-20  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \tPR tree-optimization/61839"}, {"sha": "8d7cc51940ba58f5901cf5bba08fc2bff99cf9a5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "patch": "@@ -2456,6 +2456,7 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/tree-phinodes.c \\\n   $(srcdir)/tree-ssa-alias.h \\\n   $(srcdir)/tree-ssanames.h \\\n+  $(srcdir)/tree-vrp.h \\\n   $(srcdir)/ipa-prop.h \\\n   $(srcdir)/trans-mem.c \\\n   $(srcdir)/lto-streamer.h \\"}, {"sha": "4fe2447fe7f012294486ee881878ef03e8a3da9f", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n #include \"optabs.h\"\n #include \"emit-rtl.h\""}, {"sha": "abc934b408a3cb2a6f236dc22bf5de0414d0a031", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"predict.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n #include \"expmed.h\"\n #include \"optabs.h\""}, {"sha": "103ed2d3ba09b19df6af1457ba1ee261007886fc", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "patch": "@@ -75,6 +75,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"md5.h\"\n #include \"case-cfn-macros.h\"\n #include \"stringpool.h\"\n+#include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n #include \"selftest.h\"\n "}, {"sha": "cecd552f7147dd92f823bd8369a92a8969029e35", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "patch": "@@ -1713,7 +1713,7 @@ open_base_files (void)\n       \"explow.h\", \"calls.h\", \"cilk.h\", \"emit-rtl.h\", \"varasm.h\", \"stmt.h\",\n       \"expr.h\", \"alloc-pool.h\", \"cselib.h\", \"insn-addr.h\", \"optabs.h\",\n       \"libfuncs.h\", \"debug.h\", \"internal-fn.h\", \"gimple-fold.h\", \"tree-eh.h\",\n-      \"gimple-iterator.h\", \"gimple-ssa.h\", \"tree-cfg.h\",\n+      \"gimple-iterator.h\", \"gimple-ssa.h\", \"tree-cfg.h\", \"tree-vrp.h\",\n       \"tree-phinodes.h\", \"ssa-iterators.h\", \"stringpool.h\", \"tree-ssanames.h\",\n       \"tree-ssa-loop.h\", \"tree-ssa-loop-ivopts.h\", \"tree-ssa-loop-manip.h\",\n       \"tree-ssa-loop-niter.h\", \"tree-into-ssa.h\", \"tree-dfa.h\", "}, {"sha": "4fb21e4da00e8f6d12228afee79c2c8cb143e323", "filename": "gcc/gimple-builder.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Fgimple-builder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Fgimple-builder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-builder.c?ref=f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"gimple.h\"\n #include \"stringpool.h\"\n+#include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n \n "}, {"sha": "1a3c8e15a0d4e4416ac352c10367b184e1c80322", "filename": "gcc/gimple-laddress.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Fgimple-laddress.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Fgimple-laddress.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-laddress.c?ref=f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"symtab.h\"\n #include \"tree.h\"\n #include \"stringpool.h\"\n+#include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n #include \"fold-const.h\"\n #include \"gimple-expr.h\""}, {"sha": "314bb5b231cab56287a3f4fec614cc2bd1c318ee", "filename": "gcc/hsa-gen.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Fhsa-gen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Fhsa-gen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhsa-gen.c?ref=f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-ssa.h\"\n #include \"tree-phinodes.h\"\n #include \"stringpool.h\"\n+#include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n #include \"tree-dfa.h\"\n #include \"ssa-iterators.h\""}, {"sha": "cd4b6254c81eaaddf08f784f811d0a79272689b0", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"predict.h\"\n #include \"stringpool.h\"\n+#include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n #include \"expmed.h\"\n #include \"optabs.h\""}, {"sha": "0ec1bf07817a9190c2ff3da7e74b05a16ad560b7", "filename": "gcc/ssa.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Fssa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Fssa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa.h?ref=f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"stringpool.h\"\n #include \"gimple-ssa.h\"\n+#include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\" "}, {"sha": "97856face380f586ba7a248c372e1b684035af20", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "patch": "@@ -57,6 +57,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-expr.h\"\n #include \"tm_p.h\"\n #include \"stringpool.h\"\n+#include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n #include \"optabs.h\"\n #include \"regs.h\""}, {"sha": "30f0c325ae27de4b209d4dd2eecebf5310ab5fd1", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"gimple.h\"\n #include \"stringpool.h\"\n+#include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n #include \"expmed.h\"\n #include \"insn-config.h\""}, {"sha": "8e66ce6f3cebdc4a15f0a8b8902601abd717f86d", "filename": "gcc/tree-ssanames.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Ftree-ssanames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Ftree-ssanames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.h?ref=f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "patch": "@@ -62,11 +62,6 @@ struct GTY ((variable_size)) range_info_def {\n #define num_ssa_names (vec_safe_length (cfun->gimple_df->ssa_names))\n #define ssa_name(i) ((*cfun->gimple_df->ssa_names)[(i)])\n \n-\n-/* Type of value ranges.  See value_range_d In tree-vrp.c for a\n-   description of these types.  */\n-enum value_range_type { VR_UNDEFINED, VR_RANGE, VR_ANTI_RANGE, VR_VARYING };\n-\n /* Sets the value range to SSA.  */\n extern void set_range_info (tree, enum value_range_type, const wide_int_ref &,\n \t\t\t    const wide_int_ref &);"}, {"sha": "192dbbdf845198a0c18a16fa5869bee271659ed0", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 6, "deletions": 34, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "patch": "@@ -61,32 +61,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"alloc-pool.h\"\n \n-/* Range of values that can be associated with an SSA_NAME after VRP\n-   has executed.  */\n-struct value_range\n-{\n-  /* Lattice value represented by this range.  */\n-  enum value_range_type type;\n-\n-  /* Minimum and maximum values represented by this range.  These\n-     values should be interpreted as follows:\n-\n-\t- If TYPE is VR_UNDEFINED or VR_VARYING then MIN and MAX must\n-\t  be NULL.\n-\n-\t- If TYPE == VR_RANGE then MIN holds the minimum value and\n-\t  MAX holds the maximum value of the range [MIN, MAX].\n-\n-\t- If TYPE == ANTI_RANGE the variable is known to NOT\n-\t  take any values in the range [MIN, MAX].  */\n-  tree min;\n-  tree max;\n-\n-  /* Set of SSA names whose value ranges are equivalent to this one.\n-     This set is only valid when TYPE is VR_RANGE or VR_ANTI_RANGE.  */\n-  bitmap equiv;\n-};\n-\n #define VR_INITIALIZER { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL }\n \n /* Allocation pools for tree-vrp allocations.  */\n@@ -109,8 +83,6 @@ live_on_edge (edge e, tree name)\n /* Local functions.  */\n static int compare_values (tree val1, tree val2);\n static int compare_values_warnv (tree val1, tree val2, bool *);\n-static void vrp_meet (value_range *, value_range *);\n-static void vrp_intersect_ranges (value_range *, value_range *);\n static tree vrp_evaluate_conditional_warnv_with_ops (enum tree_code,\n \t\t\t\t\t\t     tree, tree, bool, bool *,\n \t\t\t\t\t\t     bool *);\n@@ -4648,7 +4620,7 @@ compare_range_with_value (enum tree_code comp, value_range *vr, tree val,\n \n /* Debugging dumps.  */\n \n-void dump_value_range (FILE *, value_range *);\n+void dump_value_range (FILE *, const value_range *);\n void debug_value_range (value_range *);\n void dump_all_value_ranges (FILE *);\n void debug_all_value_ranges (void);\n@@ -4659,7 +4631,7 @@ void debug_vr_equiv (bitmap);\n /* Dump value range VR to FILE.  */\n \n void\n-dump_value_range (FILE *file, value_range *vr)\n+dump_value_range (FILE *file, const value_range *vr)\n {\n   if (vr == NULL)\n     fprintf (file, \"[]\");\n@@ -8600,7 +8572,7 @@ vrp_intersect_ranges_1 (value_range *vr0, value_range *vr1)\n     bitmap_copy (vr0->equiv, vr1->equiv);\n }\n \n-static void\n+void\n vrp_intersect_ranges (value_range *vr0, value_range *vr1)\n {\n   if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -8625,7 +8597,7 @@ vrp_intersect_ranges (value_range *vr0, value_range *vr1)\n    may not be the smallest possible such range.  */\n \n static void\n-vrp_meet_1 (value_range *vr0, value_range *vr1)\n+vrp_meet_1 (value_range *vr0, const value_range *vr1)\n {\n   value_range saved;\n \n@@ -8697,8 +8669,8 @@ vrp_meet_1 (value_range *vr0, value_range *vr1)\n     bitmap_clear (vr0->equiv);\n }\n \n-static void\n-vrp_meet (value_range *vr0, value_range *vr1)\n+void\n+vrp_meet (value_range *vr0, const value_range *vr1)\n {\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {"}, {"sha": "7ffb7e76a13de43d2e3bc0379e077b9b3c9d2669", "filename": "gcc/tree-vrp.h", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Ftree-vrp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90aa46c0f97bb69a4d6004f74f6fbcb7818431d/gcc%2Ftree-vrp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.h?ref=f90aa46c0f97bb69a4d6004f74f6fbcb7818431d", "patch": "@@ -0,0 +1,54 @@\n+/* Support routines for Value Range Propagation (VRP).\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Type of value ranges.  See value_range_d In tree-vrp.c for a\n+   description of these types.  */\n+enum value_range_type { VR_UNDEFINED, VR_RANGE,\n+\t\t\tVR_ANTI_RANGE, VR_VARYING, VR_LAST };\n+\n+/* Range of values that can be associated with an SSA_NAME after VRP\n+   has executed.  */\n+struct GTY(()) value_range\n+{\n+  /* Lattice value represented by this range.  */\n+  enum value_range_type type;\n+\n+  /* Minimum and maximum values represented by this range.  These\n+     values should be interpreted as follows:\n+\n+\t- If TYPE is VR_UNDEFINED or VR_VARYING then MIN and MAX must\n+\t  be NULL.\n+\n+\t- If TYPE == VR_RANGE then MIN holds the minimum value and\n+\t  MAX holds the maximum value of the range [MIN, MAX].\n+\n+\t- If TYPE == ANTI_RANGE the variable is known to NOT\n+\t  take any values in the range [MIN, MAX].  */\n+  tree min;\n+  tree max;\n+\n+  /* Set of SSA names whose value ranges are equivalent to this one.\n+     This set is only valid when TYPE is VR_RANGE or VR_ANTI_RANGE.  */\n+  bitmap equiv;\n+};\n+\n+extern void vrp_intersect_ranges (value_range *vr0, value_range *vr1);\n+extern void vrp_meet (value_range *vr0, const value_range *vr1);\n+extern void dump_value_range (FILE *, const value_range *);\n+"}]}