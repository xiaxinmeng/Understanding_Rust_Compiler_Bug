{"sha": "aadce58599c613a7f23ec9e250497a6540cf64da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFkY2U1ODU5OWM2MTNhN2YyM2VjOWUyNTA0OTdhNjU0MGNmNjRkYQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2013-11-18T16:21:42Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2013-11-18T16:21:42Z"}, "message": "lex.c (search_line_fast): Correct for little endian.\n\n2013-11-18  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* lex.c (search_line_fast): Correct for little endian.\n\nFrom-SVN: r204970", "tree": {"sha": "2f0370e9e7b2d836fa9bd4cb064d46a8d6846278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f0370e9e7b2d836fa9bd4cb064d46a8d6846278"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aadce58599c613a7f23ec9e250497a6540cf64da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aadce58599c613a7f23ec9e250497a6540cf64da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aadce58599c613a7f23ec9e250497a6540cf64da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aadce58599c613a7f23ec9e250497a6540cf64da/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ddf05af2ff25c6e199b05c8676d0509260d0b400", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf05af2ff25c6e199b05c8676d0509260d0b400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddf05af2ff25c6e199b05c8676d0509260d0b400"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "c3391b4959d66f56b25d60eb2e480a1c747067b9", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aadce58599c613a7f23ec9e250497a6540cf64da/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aadce58599c613a7f23ec9e250497a6540cf64da/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=aadce58599c613a7f23ec9e250497a6540cf64da", "patch": "@@ -1,3 +1,7 @@\n+2013-11-18  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* lex.c (search_line_fast): Correct for little endian.\n+\n 2013-11-15  Joseph Myers  <joseph@codesourcery.com>\n \n \t* ucnid.tab: Add C11 and C11NOSTART data."}, {"sha": "80829d69b98d2c4726c587e69050055f62b19781", "filename": "libcpp/lex.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aadce58599c613a7f23ec9e250497a6540cf64da/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aadce58599c613a7f23ec9e250497a6540cf64da/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=aadce58599c613a7f23ec9e250497a6540cf64da", "patch": "@@ -559,8 +559,13 @@ search_line_fast (const uchar *s, const uchar *end ATTRIBUTE_UNUSED)\n      beginning with all ones and shifting in zeros according to the\n      mis-alignment.  The LVSR instruction pulls the exact shift we\n      want from the address.  */\n+#ifdef __BIG_ENDIAN__\n   mask = __builtin_vec_lvsr(0, s);\n   mask = __builtin_vec_perm(zero, ones, mask);\n+#else\n+  mask = __builtin_vec_lvsl(0, s);\n+  mask = __builtin_vec_perm(ones, zero, mask);\n+#endif\n   data &= mask;\n \n   /* While altivec loads mask addresses, we still need to align S so\n@@ -624,7 +629,11 @@ search_line_fast (const uchar *s, const uchar *end ATTRIBUTE_UNUSED)\n     /* L now contains 0xff in bytes for which we matched one of the\n        relevant characters.  We can find the byte index by finding\n        its bit index and dividing by 8.  */\n+#ifdef __BIG_ENDIAN__\n     l = __builtin_clzl(l) >> 3;\n+#else\n+    l = __builtin_ctzl(l) >> 3;\n+#endif\n     return s + l;\n \n #undef N"}]}