{"sha": "aaae719df3df968a3a5cf5a03a8fb9d1889f1a50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFhZTcxOWRmM2RmOTY4YTNhNWNmNWEwM2E4ZmI5ZDE4ODlmMWE1MA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-06-04T19:44:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-06-04T19:44:51Z"}, "message": "attr-alias.c: New testcase.\n\n\t* gcc.dg/tree-ssa/attr-alias.c: New testcase.\n\n\t* ipa-inline.c (update_caller_keys): Fix availability test.\n\t(update_callee_keys): Likewise.\n\t* symtab.c (symtab_alias_ultimate_target): Make availaiblity logic\n\tto follow ELF standard.\n\nFrom-SVN: r199670", "tree": {"sha": "ad227d417e6731c387197201d9fbbd5439ef5d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad227d417e6731c387197201d9fbbd5439ef5d3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaae719df3df968a3a5cf5a03a8fb9d1889f1a50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaae719df3df968a3a5cf5a03a8fb9d1889f1a50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaae719df3df968a3a5cf5a03a8fb9d1889f1a50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaae719df3df968a3a5cf5a03a8fb9d1889f1a50/comments", "author": null, "committer": null, "parents": [{"sha": "107eea2ca48ec70e64787340d3e07c8b59ab0e79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107eea2ca48ec70e64787340d3e07c8b59ab0e79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/107eea2ca48ec70e64787340d3e07c8b59ab0e79"}], "stats": {"total": 123, "additions": 118, "deletions": 5}, "files": [{"sha": "690c9680e613018092054d2bbfbd06cfd0f54848", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaae719df3df968a3a5cf5a03a8fb9d1889f1a50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaae719df3df968a3a5cf5a03a8fb9d1889f1a50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaae719df3df968a3a5cf5a03a8fb9d1889f1a50", "patch": "@@ -1,3 +1,10 @@\n+2013-06-04  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-inline.c (update_caller_keys): Fix availability test.\n+\t(update_callee_keys): Likewise.\n+\t* symtab.c (symtab_alias_ultimate_target): Make availaiblity logic\n+\tto follow ELF standard.\n+\n 2013-06-04  J\u00fcrgen Urban  <JuergenUrban@gmx.de>\n \n \t* config.gcc (mipsr5900-*-elf*, mipsr5900el-*-elf*, mips64r5900-*-elf*)"}, {"sha": "283e517c6dc3f0c2b4ee1c5c5b3bf6d26ba28f90", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaae719df3df968a3a5cf5a03a8fb9d1889f1a50/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaae719df3df968a3a5cf5a03a8fb9d1889f1a50/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=aaae719df3df968a3a5cf5a03a8fb9d1889f1a50", "patch": "@@ -1101,7 +1101,6 @@ update_caller_keys (fibheap_t heap, struct cgraph_node *node,\n   struct ipa_ref *ref;\n \n   if ((!node->symbol.alias && !inline_summary (node)->inlinable)\n-      || cgraph_function_body_availability (node) <= AVAIL_OVERWRITABLE\n       || node->global.inlined_to)\n     return;\n   if (!bitmap_set_bit (updated_nodes, node->uid))\n@@ -1162,7 +1161,7 @@ update_callee_keys (fibheap_t heap, struct cgraph_node *node,\n \tif (e->inline_failed\n \t    && (callee = cgraph_function_or_thunk_node (e->callee, &avail))\n \t    && inline_summary (callee)->inlinable\n-\t    && cgraph_function_body_availability (callee) >= AVAIL_AVAILABLE\n+\t    && avail >= AVAIL_AVAILABLE\n \t    && !bitmap_bit_p (updated_nodes, callee->uid))\n \t  {\n \t    if (can_inline_edge_p (e, false)"}, {"sha": "02d3da170ab22e267a1addaf05a3002758ed664d", "filename": "gcc/symtab.c", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaae719df3df968a3a5cf5a03a8fb9d1889f1a50/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaae719df3df968a3a5cf5a03a8fb9d1889f1a50/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=aaae719df3df968a3a5cf5a03a8fb9d1889f1a50", "patch": "@@ -834,19 +834,64 @@ symtab_node_availability (symtab_node node)\n symtab_node\n symtab_alias_ultimate_target (symtab_node node, enum availability *availability)\n {\n+  bool weakref_p = false;\n+\n+  if (!node->symbol.alias)\n+    {\n+      if (availability)\n+        *availability = symtab_node_availability (node);\n+      return node;\n+    }\n+\n+  /* To determine visibility of the target, we follow ELF semantic of aliases.\n+     Here alias is an alternative assembler name of a given definition. Its\n+     availablity prevails the availablity of its target (i.e. static alias of\n+     weak definition is available.\n+\n+     Weakref is a different animal (and not part of ELF per se). It is just\n+     alternative name of a given symbol used within one complation unit\n+     and is translated prior hitting the object file.  It inherits the\n+     visibility of its target (i.e. weakref of non-overwritable definition\n+     is non-overwritable, while weakref of weak definition is weak).\n+\n+     If we ever get into supporting targets with different semantics, a target\n+     hook will be needed here.  */\n+\n   if (availability)\n-    *availability = symtab_node_availability (node);\n+    {\n+      weakref_p = DECL_EXTERNAL (node->symbol.decl) && node->symbol.alias;\n+      if (!weakref_p)\n+        *availability = symtab_node_availability (node);\n+      else\n+\t*availability = AVAIL_LOCAL;\n+    }\n   while (node)\n     {\n       if (node->symbol.alias && node->symbol.analyzed)\n \tnode = symtab_alias_target (node);\n       else\n-\treturn node;\n-      if (node && availability)\n+\t{\n+\t  if (!availability)\n+\t    ;\n+\t  else if (node->symbol.analyzed)\n+\t    {\n+\t      if (weakref_p)\n+\t\t{\n+\t\t  enum availability a = symtab_node_availability (node);\n+\t\t  if (a < *availability)\n+\t\t    *availability = a;\n+\t\t}\n+\t    }\n+\t  else\n+\t    *availability = AVAIL_NOT_AVAILABLE;\n+\t  return node;\n+\t}\n+      if (node && availability && weakref_p)\n \t{\n \t  enum availability a = symtab_node_availability (node);\n \t  if (a < *availability)\n \t    *availability = a;\n+          weakref_p = DECL_EXTERNAL (node->symbol.decl) && node->symbol.alias;\n \t}\n     }\n   if (availability)"}, {"sha": "399d85eb7ddac1a3c17da404328a32b551ee9eb9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaae719df3df968a3a5cf5a03a8fb9d1889f1a50/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaae719df3df968a3a5cf5a03a8fb9d1889f1a50/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aaae719df3df968a3a5cf5a03a8fb9d1889f1a50", "patch": "@@ -1,3 +1,7 @@\n+2013-06-04  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/attr-alias.c: New testcase.\n+\n 2013-06-04  Balaji V. Iyer  <balaji.v.iyer@intel.com>\n \n \t* c-c++-common/cilk-plus/AN/array_test1.c (main): Replaced argc, argv"}, {"sha": "a9b1d073d05b48e36295a83b3692284c79ef61b4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/attr-alias.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaae719df3df968a3a5cf5a03a8fb9d1889f1a50/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fattr-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaae719df3df968a3a5cf5a03a8fb9d1889f1a50/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fattr-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fattr-alias.c?ref=aaae719df3df968a3a5cf5a03a8fb9d1889f1a50", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-require-alias \"\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+void abort (void);\n+__attribute__ ((weak))\n+int test() \n+{\n+   return 0;\n+}\n+static int test2() __attribute__ ((alias(\"test\")));\n+static int test3() __attribute__ ((weakref)) __attribute__ ((alias(\"test2\")));\n+static int test4() __attribute__ ((weakref)) __attribute__ ((alias(\"test\")));\n+main()\n+{\n+  test();\n+  test2();\n+  test3();\n+  test4();\n+}\n+\n+/* calls to test1 and test2 can be inlined and optmized away. Calls\n+   to test and test4 are overwritable.  */\n+\n+/* { dg-final { scan-tree-dump-times \"test (\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"test4 (\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"test1 (\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"test2 (\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+\n+/* { dg-do compile } */\n+/* { dg-require-alias \"\" } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+void abort (void);\n+__attribute__ ((weak))\n+int test() \n+{\n+   return 0;\n+}\n+static int test2() __attribute__ ((alias(\"test\")));\n+static int test3() __attribute__ ((weakref)) __attribute__ ((alias(\"test2\")));\n+static int test4() __attribute__ ((weakref)) __attribute__ ((alias(\"test\")));\n+main()\n+{\n+  test();\n+  test2();\n+  test3();\n+  test4();\n+}\n+\n+/* calls to test1 and test2 can be inlined and optmized away. Calls\n+   to test and test4 are overwritable.  */\n+\n+/* { dg-final { scan-tree-dump-times \"test (\" 2 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"test4 (\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"test1 (\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"test2 (\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+"}]}