{"sha": "bfc61b40d43b722b8a57868ae2df92c345684ec9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZjNjFiNDBkNDNiNzIyYjhhNTc4NjhhZTJkZjkyYzM0NTY4NGVjOQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2012-10-05T11:43:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-10-05T11:43:38Z"}, "message": "re PR c/33763 (Bogus inlining failed in call to `xxx': redefined extern inline functions are not considered for inlining)\n\n\tPR tree-optimization/33763\n\t* tree-inline.c (expand_call_inline): Silently ignore always_inline\n\tattribute for redefined extern inline functions.\n\n\t* c-c++-common/pr33763.c: New test.\n\nFrom-SVN: r192119", "tree": {"sha": "997232f16181a9510cc7119f7063bd84d3333404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/997232f16181a9510cc7119f7063bd84d3333404"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfc61b40d43b722b8a57868ae2df92c345684ec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc61b40d43b722b8a57868ae2df92c345684ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfc61b40d43b722b8a57868ae2df92c345684ec9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfc61b40d43b722b8a57868ae2df92c345684ec9/comments", "author": null, "committer": null, "parents": [{"sha": "9ed313cc23232a8e8f16a5b1e94fc93b1a38e0f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ed313cc23232a8e8f16a5b1e94fc93b1a38e0f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ed313cc23232a8e8f16a5b1e94fc93b1a38e0f7"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "93a143e1b9cf9ff1f3c9f279801b219f655e8b69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc61b40d43b722b8a57868ae2df92c345684ec9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc61b40d43b722b8a57868ae2df92c345684ec9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bfc61b40d43b722b8a57868ae2df92c345684ec9", "patch": "@@ -1,3 +1,10 @@\n+2012-10-05  Jan Hubicka  <jh@suse.cz>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/33763\n+\t* tree-inline.c (expand_call_inline): Silently ignore always_inline\n+\tattribute for redefined extern inline functions.\n+\n 2012-10-04  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-vectorizer.h (vect_estimate_min_profitable_iters): Remove."}, {"sha": "2ee908b708694be80150264de4fe4d573ebb9564", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc61b40d43b722b8a57868ae2df92c345684ec9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc61b40d43b722b8a57868ae2df92c345684ec9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bfc61b40d43b722b8a57868ae2df92c345684ec9", "patch": "@@ -1,5 +1,8 @@\n 2012-10-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/33763\n+\t* c-c++-common/pr33763.c: New test.\n+\n \tPR tree-optimization/54810\n \t* gcc.dg/tree-ssa/vrp85.c: New test.\n "}, {"sha": "dbdfa77fc3d0c8131594cb1d8b1de191ba91e324", "filename": "gcc/testsuite/c-c++-common/pr33763.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc61b40d43b722b8a57868ae2df92c345684ec9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr33763.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc61b40d43b722b8a57868ae2df92c345684ec9/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr33763.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr33763.c?ref=bfc61b40d43b722b8a57868ae2df92c345684ec9", "patch": "@@ -0,0 +1,60 @@\n+/* PR tree-optimization/33763 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef struct\n+{\n+  void *a;\n+  void *b;\n+} T;\n+extern void *foo (const char *, const char *);\n+extern void *bar (void *, const char *, T);\n+extern int baz (const char *, int);\n+\n+extern inline __attribute__ ((always_inline, gnu_inline)) int\n+baz (const char *x, int y)\n+{\n+  return 2;\n+}\n+\n+int\n+baz (const char *x, int y)\n+{\n+  return 1;\n+}\n+\n+int xa, xb;\n+\n+static void *\n+inl (const char *x, const char *y)\n+{\n+  T t = { &xa, &xb };\n+  int *f = (int *) __builtin_malloc (sizeof (int));\n+  const char *z;\n+  int o = 0;\n+  void *r = 0;\n+\n+  for (z = y; *z; z++)\n+    {\n+      if (*z == 'r')\n+\to |= 1;\n+      if (*z == 'w')\n+\to |= 2;\n+    }\n+  if (o == 1)\n+    *f = baz (x, 0);\n+  if (o == 2)\n+    *f = baz (x, 1);\n+  if (o == 3)\n+    *f = baz (x, 2);\n+\n+  if (o && *f > 0)\n+    r = bar (f, \"w\", t);\n+  return r;\n+}\n+\n+void *\n+foo (const char *x, const char *y)\n+{\n+  return inl (x, y);\n+}"}, {"sha": "d6fbf50dae962ebecbca63cb40a9092613c3a88e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfc61b40d43b722b8a57868ae2df92c345684ec9/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfc61b40d43b722b8a57868ae2df92c345684ec9/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=bfc61b40d43b722b8a57868ae2df92c345684ec9", "patch": "@@ -3814,6 +3814,12 @@ expand_call_inline (basic_block bb, gimple stmt, copy_body_data *id)\n \tgoto egress;\n \n       if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn))\n+          /* For extern inline functions that get redefined we always\n+\t     silently ignored always_inline flag. Better behaviour would\n+\t     be to be able to keep both bodies and use extern inline body\n+\t     for inlining, but we can't do that because frontends overwrite\n+\t     the body.  */\n+\t  && !cg_edge->callee->local.redefined_extern_inline\n \t  /* Avoid warnings during early inline pass. */\n \t  && cgraph_global_info_ready\n \t  /* PR 20090218-1_0.c. Body can be provided by another module. */"}]}