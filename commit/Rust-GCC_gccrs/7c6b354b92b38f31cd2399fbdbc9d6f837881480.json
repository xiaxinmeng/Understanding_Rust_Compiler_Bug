{"sha": "7c6b354b92b38f31cd2399fbdbc9d6f837881480", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M2YjM1NGI5MmIzOGYzMWNkMjM5OWZiZGJjOWQ2ZjgzNzg4MTQ4MA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-06-28T23:18:06Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-06-28T23:18:06Z"}, "message": "analyzer: introduce byte_range and use to simplify dumps\n\ngcc/analyzer/ChangeLog:\n\t* analyzer.h (byte_offset_t): New typedef.\n\t* store.cc (bit_range::dump_to_pp): Dump as a byte range if\n\tpossible.\n\t(bit_range::as_byte_range): New.\n\t(byte_range::dump_to_pp): New.\n\t* store.h (class byte_range): New forward decl.\n\t(struct bit_range): Add comment.\n\t(bit_range::as_byte_range): New decl.\n\t(struct byte_range): New.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "7341fcbb487ebc635454396d8b06bc145a6b378a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7341fcbb487ebc635454396d8b06bc145a6b378a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c6b354b92b38f31cd2399fbdbc9d6f837881480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6b354b92b38f31cd2399fbdbc9d6f837881480", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c6b354b92b38f31cd2399fbdbc9d6f837881480", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6b354b92b38f31cd2399fbdbc9d6f837881480/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40c64c9ea565230817f08b5e66a30a1c94ec880c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c64c9ea565230817f08b5e66a30a1c94ec880c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40c64c9ea565230817f08b5e66a30a1c94ec880c"}], "stats": {"total": 80, "additions": 74, "deletions": 6}, "files": [{"sha": "f06b68c1814f4a55c3359c2acae3295eb493e74d", "filename": "gcc/analyzer/analyzer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c6b354b92b38f31cd2399fbdbc9d6f837881480/gcc%2Fanalyzer%2Fanalyzer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c6b354b92b38f31cd2399fbdbc9d6f837881480/gcc%2Fanalyzer%2Fanalyzer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.h?ref=7c6b354b92b38f31cd2399fbdbc9d6f837881480", "patch": "@@ -142,6 +142,7 @@ class path_var\n \n typedef offset_int bit_offset_t;\n typedef offset_int bit_size_t;\n+typedef offset_int byte_offset_t;\n typedef offset_int byte_size_t;\n \n extern bool int_size_in_bits (const_tree type, bit_size_t *out);"}, {"sha": "d5f879835a037cf73d3553745a4a780fd294b09a", "filename": "gcc/analyzer/store.cc", "status": "modified", "additions": 48, "deletions": 6, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c6b354b92b38f31cd2399fbdbc9d6f837881480/gcc%2Fanalyzer%2Fstore.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c6b354b92b38f31cd2399fbdbc9d6f837881480/gcc%2Fanalyzer%2Fstore.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.cc?ref=7c6b354b92b38f31cd2399fbdbc9d6f837881480", "patch": "@@ -241,12 +241,18 @@ binding_key::cmp (const binding_key *k1, const binding_key *k2)\n void\n bit_range::dump_to_pp (pretty_printer *pp) const\n {\n-  pp_string (pp, \"start: \");\n-  pp_wide_int (pp, m_start_bit_offset, SIGNED);\n-  pp_string (pp, \", size: \");\n-  pp_wide_int (pp, m_size_in_bits, SIGNED);\n-  pp_string (pp, \", next: \");\n-  pp_wide_int (pp, get_next_bit_offset (), SIGNED);\n+  byte_range bytes (0, 0);\n+  if (as_byte_range (&bytes))\n+    bytes.dump_to_pp (pp);\n+  else\n+    {\n+      pp_string (pp, \"start: \");\n+      pp_wide_int (pp, m_start_bit_offset, SIGNED);\n+      pp_string (pp, \", size: \");\n+      pp_wide_int (pp, m_size_in_bits, SIGNED);\n+      pp_string (pp, \", next: \");\n+      pp_wide_int (pp, get_next_bit_offset (), SIGNED);\n+    }\n }\n \n /* Dump this object to stderr.  */\n@@ -329,6 +335,42 @@ bit_range::from_mask (unsigned HOST_WIDE_INT mask, bit_range *out)\n   return true;\n }\n \n+/* Attempt to convert this bit_range to a byte_range.\n+   Return true if it is possible, writing the result to *OUT.\n+   Otherwise return false.  */\n+\n+bool\n+bit_range::as_byte_range (byte_range *out) const\n+{\n+  if (m_start_bit_offset % BITS_PER_UNIT == 0\n+      && m_size_in_bits % BITS_PER_UNIT == 0)\n+    {\n+      out->m_start_byte_offset = m_start_bit_offset / BITS_PER_UNIT;\n+      out->m_size_in_bytes = m_size_in_bits / BITS_PER_UNIT;\n+      return true;\n+    }\n+  return false;\n+}\n+\n+/* Dump this object to PP.  */\n+\n+void\n+byte_range::dump_to_pp (pretty_printer *pp) const\n+{\n+  if (m_size_in_bytes == 1)\n+    {\n+      pp_string (pp, \"byte \");\n+      pp_wide_int (pp, m_start_byte_offset, SIGNED);\n+    }\n+  else\n+    {\n+      pp_string (pp, \"bytes \");\n+      pp_wide_int (pp, m_start_byte_offset, SIGNED);\n+      pp_string (pp, \"-\");\n+      pp_wide_int (pp, get_last_byte_offset (), SIGNED);\n+    }\n+}\n+\n /* class concrete_binding : public binding_key.  */\n \n /* Implementation of binding_key::dump_to_pp vfunc for concrete_binding.  */"}, {"sha": "e0c60e128fad7a916f7c46b50f79037747c341b6", "filename": "gcc/analyzer/store.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c6b354b92b38f31cd2399fbdbc9d6f837881480/gcc%2Fanalyzer%2Fstore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c6b354b92b38f31cd2399fbdbc9d6f837881480/gcc%2Fanalyzer%2Fstore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fstore.h?ref=7c6b354b92b38f31cd2399fbdbc9d6f837881480", "patch": "@@ -196,6 +196,7 @@ class uncertainty_t\n   hash_set<const svalue *> m_mutable_at_unknown_call_svals;\n };\n \n+class byte_range;\n class concrete_binding;\n \n /* An enum for discriminating between \"direct\" vs \"default\" levels of\n@@ -267,6 +268,8 @@ class binding_key\n   enum binding_kind m_kind;\n };\n \n+/* A concrete range of bits.  */\n+\n struct bit_range\n {\n   bit_range (bit_offset_t start_bit_offset, bit_size_t size_in_bits)\n@@ -308,10 +311,32 @@ struct bit_range\n \n   static bool from_mask (unsigned HOST_WIDE_INT mask, bit_range *out);\n \n+  bool as_byte_range (byte_range *out) const;\n+\n   bit_offset_t m_start_bit_offset;\n   bit_size_t m_size_in_bits;\n };\n \n+/* A concrete range of bytes.  */\n+\n+struct byte_range\n+{\n+  byte_range (byte_offset_t start_byte_offset, byte_size_t size_in_bytes)\n+  : m_start_byte_offset (start_byte_offset),\n+    m_size_in_bytes (size_in_bytes)\n+  {}\n+\n+  void dump_to_pp (pretty_printer *pp) const;\n+\n+  byte_offset_t get_last_byte_offset () const\n+  {\n+    return m_start_byte_offset + m_size_in_bytes - 1;\n+  }\n+\n+  byte_offset_t m_start_byte_offset;\n+  byte_size_t m_size_in_bytes;\n+};\n+\n /* Concrete subclass of binding_key, for describing a concrete range of\n    bits within the binding_map (e.g. \"bits 8-15\").  */\n "}]}