{"sha": "4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc", "node_id": "C_kwDOANBUbNoAKDRlMWUwZDc5ZWNiZTg3MjdjYjY5ZDRjZDk3YjIwYzcxY2FhZWZhZmM", "commit": {"author": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2021-09-01T16:28:47Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-10-25T09:10:02Z"}, "message": "RISC-V: Implement instruction patterns for ZBS extension.\n\n2021-10-25  Jim Wilson  <jimw@sifive.com>\n\t    Kito Cheng  <kito.cheng@sifive.com>\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md (shiftm1): New.\n\t(*bset<mode>): Ditto.\n\t(*bset<mode>_mask): Ditto.\n\t(*bset<mode>_1): Ditto.\n\t(*bset<mode>_1_mask): Ditto.\n\t(*bseti<mode>): Ditto.\n\t(*bclr<mode>): Ditto.\n\t(*bclri<mode>): Ditto.\n\t(*binv<mode>): Ditto.\n\t(*binvi<mode>): Ditto.\n\t(*bext<mode>): Ditto.\n\t(*bexti): Ditto.\n\t* config/riscv/predicates.md (splittable_const_int_operand):\n\tHandle bseti.\n\t(single_bit_mask_operand): New.\n\t(not_single_bit_mask_operand): Ditto.\n\t(const31_operand): Ditto.\n\t(const63_operand): Ditto.\n\t* config/riscv/riscv.c (riscv_build_integer_1): Handle bseti.\n\t(riscv_output_move): Ditto.\n\t(riscv_print_operand): Handle new operand type: T and S.\n\t* config/riscv/riscv.h (SINGLE_BIT_MASK_OPERAND): New.\n\n2021-10-25  Jia-Wei Chen  <jiawei@iscas.ac.cn>\n\t    Shi-Hua Liao  <shihua@iscas.ac.cn>\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zba-slliuw.c: Apply zbs to this testcase.\n\t* gcc.target/riscv/zbs-bclr.c: New.\n\t* gcc.target/riscv/zbs-bext.c: Ditto.\n\t* gcc.target/riscv/zbs-binv.c: Ditto.\n\t* gcc.target/riscv/zbs-bset.c: Ditto.\n\nCo-authored-by: Kito Cheng <kito.cheng@sifive.com>\nCo-authored-by: Jia-Wei Chen <jiawei@iscas.ac.cn>\nCo-authored-by: Shi-Hua Liao <shihua@iscas.ac.cn>", "tree": {"sha": "0f9b7cfd844b35eaad60a3d4f16fa99f81941296", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f9b7cfd844b35eaad60a3d4f16fa99f81941296"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/comments", "author": null, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26d2818bb73a09622f87df53d6280d18b229bcbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d2818bb73a09622f87df53d6280d18b229bcbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d2818bb73a09622f87df53d6280d18b229bcbc"}], "stats": {"total": 272, "additions": 268, "deletions": 4}, "files": [{"sha": "59779b48f27c97546cc94c6a7445de562a034493", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc", "patch": "@@ -40,6 +40,7 @@\n \t\t\t\t (ctz \"ctz\")\n \t\t\t\t (popcount \"cpop\")])\n \n+(define_mode_attr shiftm1 [(SI \"const31_operand\") (DI \"const63_operand\")])\n \n ;; ZBA extension.\n \n@@ -238,3 +239,104 @@\n   \"TARGET_ZBB\"\n   \"<bitmanip_insn>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"bitmanip\")])\n+\n+;; ZBS extension.\n+\n+(define_insn \"*bset<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(ior:X (ashift:X (const_int 1)\n+\t\t\t (match_operand:QI 2 \"register_operand\" \"r\"))\n+\t       (match_operand:X 1 \"register_operand\" \"r\")))]\n+  \"TARGET_ZBS\"\n+  \"bset\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"*bset<mode>_mask\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(ior:X (ashift:X (const_int 1)\n+\t\t\t (subreg:QI\n+\t\t\t  (and:X (match_operand:X 2 \"register_operand\" \"r\")\n+\t\t\t\t (match_operand 3 \"<X:shiftm1>\" \"i\")) 0))\n+\t       (match_operand:X 1 \"register_operand\" \"r\")))]\n+  \"TARGET_ZBS\"\n+  \"bset\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"*bset<mode>_1\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(ashift:X (const_int 1)\n+\t\t  (match_operand:QI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_ZBS\"\n+  \"bset\\t%0,x0,%1\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"*bset<mode>_1_mask\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(ashift:X (const_int 1)\n+\t\t  (subreg:QI\n+\t\t   (and:X (match_operand:X 1 \"register_operand\" \"r\")\n+\t\t\t  (match_operand 2 \"<X:shiftm1>\" \"i\")) 0)))]\n+  \"TARGET_ZBS\"\n+  \"bset\\t%0,x0,%1\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"*bseti<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(ior:X (match_operand:X 1 \"register_operand\" \"r\")\n+\t       (match_operand 2 \"single_bit_mask_operand\" \"i\")))]\n+  \"TARGET_ZBS\"\n+  \"bseti\\t%0,%1,%S2\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"*bclr<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(and:X (rotate:X (const_int -2)\n+\t\t\t (match_operand:QI 2 \"register_operand\" \"r\"))\n+\t       (match_operand:X 1 \"register_operand\" \"r\")))]\n+  \"TARGET_ZBS\"\n+  \"bclr\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"*bclri<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(and:X (match_operand:X 1 \"register_operand\" \"r\")\n+\t       (match_operand 2 \"not_single_bit_mask_operand\" \"i\")))]\n+  \"TARGET_ZBS\"\n+  \"bclri\\t%0,%1,%T2\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"*binv<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(xor:X (ashift:X (const_int 1)\n+\t\t\t (match_operand:QI 2 \"register_operand\" \"r\"))\n+\t       (match_operand:X 1 \"register_operand\" \"r\")))]\n+  \"TARGET_ZBS\"\n+  \"binv\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"*binvi<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(xor:X (match_operand:X 1 \"register_operand\" \"r\")\n+\t       (match_operand 2 \"single_bit_mask_operand\" \"i\")))]\n+  \"TARGET_ZBS\"\n+  \"binvi\\t%0,%1,%S2\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"*bext<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(zero_extract:X (match_operand:X 1 \"register_operand\" \"r\")\n+\t\t\t(const_int 1)\n+\t\t\t(zero_extend:X\n+\t\t\t (match_operand:QI 2 \"register_operand\" \"r\"))))]\n+  \"TARGET_ZBS\"\n+  \"bext\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"bitmanip\")])\n+\n+(define_insn \"*bexti\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(zero_extract:X (match_operand:X 1 \"register_operand\" \"r\")\n+\t\t\t(const_int 1)\n+\t\t\t(match_operand 2 \"immediate_operand\" \"i\")))]\n+  \"TARGET_ZBS\"\n+  \"bexti\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"bitmanip\")])"}, {"sha": "3da6fd4c0491cf5af505d828b3fc8a4da3d72ce6", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc", "patch": "@@ -74,6 +74,11 @@\n   if (GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n     return false;\n \n+  /* Check whether the constant can be loaded in a single\n+     instruction with zbs extensions.  */\n+  if (TARGET_64BIT && TARGET_ZBS && SINGLE_BIT_MASK_OPERAND (INTVAL (op)))\n+    return false;\n+\n   /* Otherwise check whether the constant can be loaded in a single\n      instruction.  */\n   return !LUI_OPERAND (INTVAL (op)) && !SMALL_OPERAND (INTVAL (op));\n@@ -217,3 +222,20 @@\n {\n   return riscv_gpr_save_operation_p (op);\n })\n+\n+;; Predicates for the ZBS extension.\n+(define_predicate \"single_bit_mask_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"pow2p_hwi (INTVAL (op))\")))\n+\n+(define_predicate \"not_single_bit_mask_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"pow2p_hwi (~INTVAL (op))\")))\n+\n+(define_predicate \"const31_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"INTVAL (op) == 31\")))\n+\n+(define_predicate \"const63_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"INTVAL (op) == 63\")))"}, {"sha": "3943eb4636d9c1d9c6c1cc20139580ca1b290515", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc", "patch": "@@ -410,6 +410,13 @@ riscv_build_integer_1 (struct riscv_integer_op codes[RISCV_MAX_INTEGER_OPS],\n       codes[0].value = value;\n       return 1;\n     }\n+  if (TARGET_ZBS && SINGLE_BIT_MASK_OPERAND (value))\n+    {\n+      /* Simply BSETI.  */\n+      codes[0].code = UNKNOWN;\n+      codes[0].value = value;\n+      return 1;\n+    }\n \n   /* End with ADDI.  When constructing HImode constants, do not generate any\n      intermediate value that is not itself a valid HImode constant.  The\n@@ -2220,7 +2227,17 @@ riscv_output_move (rtx dest, rtx src)\n \t  }\n \n       if (src_code == CONST_INT)\n-\treturn \"li\\t%0,%1\";\n+\t{\n+\t  if (SMALL_OPERAND (INTVAL (src)) || LUI_OPERAND (INTVAL (src)))\n+\t    return \"li\\t%0,%1\";\n+\n+\t  if (TARGET_ZBS\n+\t      && SINGLE_BIT_MASK_OPERAND (INTVAL (src)))\n+\t    return \"bseti\\t%0,zero,%S1\";\n+\n+\t  /* Should never reach here.  */\n+\t  abort ();\n+\t}\n \n       if (src_code == HIGH)\n \treturn \"lui\\t%0,%h1\";\n@@ -3561,7 +3578,9 @@ riscv_memmodel_needs_release_fence (enum memmodel model)\n    'A'\tPrint the atomic operation suffix for memory model OP.\n    'F'\tPrint a FENCE if the memory model requires a release.\n    'z'\tPrint x0 if OP is zero, otherwise print OP normally.\n-   'i'\tPrint i if the operand is not a register.  */\n+   'i'\tPrint i if the operand is not a register.\n+   'S'\tPrint shift-index of single-bit mask OP.\n+   'T'\tPrint shift-index of inverted single-bit mask OP.  */\n \n static void\n riscv_print_operand (FILE *file, rtx op, int letter)\n@@ -3601,6 +3620,18 @@ riscv_print_operand (FILE *file, rtx op, int letter)\n         fputs (\"i\", file);\n       break;\n \n+    case 'S':\n+      {\n+\trtx newop = GEN_INT (ctz_hwi (INTVAL (op)));\n+\toutput_addr_const (file, newop);\n+\tbreak;\n+      }\n+    case 'T':\n+      {\n+\trtx newop = GEN_INT (ctz_hwi (~INTVAL (op)));\n+\toutput_addr_const (file, newop);\n+\tbreak;\n+      }\n     default:\n       switch (code)\n \t{"}, {"sha": "6428712473560d4b9b19ba766237c86a425576d2", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc", "patch": "@@ -526,6 +526,14 @@ enum reg_class\n   (((VALUE) | ((1UL<<31) - IMM_REACH)) == ((1UL<<31) - IMM_REACH)\t\\\n    || ((VALUE) | ((1UL<<31) - IMM_REACH)) + IMM_REACH == 0)\n \n+/* If this is a single bit mask, then we can load it with bseti.  But this\n+   is not useful for any of the low 31 bits because we can use addi or lui\n+   to load them.  It is wrong for loading SImode 0x80000000 on rv64 because it\n+   needs to be sign-extended.  So we restrict this to the upper 32-bits\n+   only.  */\n+#define SINGLE_BIT_MASK_OPERAND(VALUE) \\\n+  (pow2p_hwi (VALUE) && (ctz_hwi (VALUE) >= 32))\n+\n /* Stack layout; function entry, exit and calling.  */\n \n #define STACK_GROWS_DOWNWARD 1"}, {"sha": "a7a3dc77d535dd592bbfff06a3c0aed5dedf085b", "filename": "gcc/testsuite/gcc.target/riscv/zba-slliuw.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-slliuw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-slliuw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-slliuw.c?ref=4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=rv64gc_zba -mabi=lp64 -O2\" } */\n+/* { dg-options \"-march=rv64gc_zba_zbs -mabi=lp64 -O2\" } */\n \n long\n foo (long i)\n@@ -8,4 +8,4 @@ foo (long i)\n }\n /* XXX: This pattern need combine improvement or intermediate instruction\n  *      from zbs.   */\n-/* { dg-final { scan-assembler-not \"slli.uw\" } } */\n+/* { dg-final { scan-assembler \"slli.uw\" } } */"}, {"sha": "4a3c2f1cdaf0b4ce2eaf4cae455bfea90f5af527", "filename": "gcc/testsuite/gcc.target/riscv/zbs-bclr.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bclr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bclr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bclr.c?ref=4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbs -mabi=lp64 -O2\" } */\n+\n+/* bclr */\n+long\n+foo0 (long i, long j)\n+{\n+  return i & ~(1L << j);\n+}\n+\n+/* bclri */\n+long\n+foo1 (long i)\n+{\n+  return i & ~(1L << 20);\n+}\n+\n+/* { dg-final { scan-assembler-times \"bclr\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bclri\\t\" 1 } } */\n+/* { dg-final { scan-assembler-not \"andi\" } } */"}, {"sha": "a093cdc8d1e16e5391b1603a2df95e0f7d5c5da8", "filename": "gcc/testsuite/gcc.target/riscv/zbs-bext.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bext.c?ref=4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbs -mabi=lp64 -O2\" } */\n+\n+/* bext */\n+long\n+foo0 (long i, long j)\n+{\n+  return 1L & (i >> j);\n+}\n+\n+/* bexti */\n+long\n+foo1 (long i)\n+{\n+  return 1L & (i >> 20);\n+}\n+\n+/* { dg-final { scan-assembler-times \"bexti\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"bext\\t\" 1 } } */\n+/* { dg-final { scan-assembler-not \"andi\" } } */"}, {"sha": "e4e48b9cdfd20f42a49772fff1178d464eb8298e", "filename": "gcc/testsuite/gcc.target/riscv/zbs-binv.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-binv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-binv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-binv.c?ref=4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbs -mabi=lp64 -O2\" } */\n+\n+/* binv */\n+long\n+foo0 (long i, long j)\n+{\n+  return i ^ (1L << j);\n+}\n+\n+/* binvi */\n+long\n+foo1 (long i)\n+{\n+  return i ^ (1L << 20);\n+}\n+\n+/* { dg-final { scan-assembler-times \"binv\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"binvi\\t\" 1 } } */\n+/* { dg-final { scan-assembler-not \"andi\" } } */"}, {"sha": "733d4279d3aa12266969ffe43b82b9f28ec84c5f", "filename": "gcc/testsuite/gcc.target/riscv/zbs-bset.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzbs-bset.c?ref=4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zbs -mabi=lp64 -O2\" } */\n+\n+/* bset */\n+long\n+sub0 (long i, long j)\n+{\n+  return i | (1L << j);\n+}\n+\n+/* bset_mask */\n+long\n+sub1 (long i, long j)\n+{\n+  return i | (1L << (j & 0x3f));\n+}\n+\n+/* bset_1 */\n+long\n+sub2 (long i)\n+{\n+  return 1L << i;\n+}\n+\n+/* bset_1_mask */\n+long\n+sub3 (long i)\n+{\n+  return 1L << (i & 0x3f);\n+}\n+\n+/* bseti */\n+long\n+sub4 (long i)\n+{\n+  return i | (1L << 20);\n+}\n+\n+/* { dg-final { scan-assembler-times \"bset\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"bseti\\t\" 1 } } */\n+/* { dg-final { scan-assembler-not \"andi\" } } */"}]}