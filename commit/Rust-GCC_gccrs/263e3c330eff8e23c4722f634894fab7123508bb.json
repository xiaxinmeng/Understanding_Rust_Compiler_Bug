{"sha": "263e3c330eff8e23c4722f634894fab7123508bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYzZTNjMzMwZWZmOGUyM2M0NzIyZjYzNDg5NGZhYjcxMjM1MDhiYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-01-29T18:34:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-01-29T18:34:46Z"}, "message": "stl_uninitialized.h (uninitialized_copy(const char*, const char*, char*), [...]): Remove, just forward to std::copy.\n\n2007-01-29  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_uninitialized.h (uninitialized_copy(const char*,\n\tconst char*, char*), uninitialized_copy(const wchar_t*, const wchar_t*,\n\twchar_t*)): Remove, just forward to std::copy.\n\nFrom-SVN: r121300", "tree": {"sha": "c1be8405bcd3a48ea358a73c946f6034c75f4611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1be8405bcd3a48ea358a73c946f6034c75f4611"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/263e3c330eff8e23c4722f634894fab7123508bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/263e3c330eff8e23c4722f634894fab7123508bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/263e3c330eff8e23c4722f634894fab7123508bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/263e3c330eff8e23c4722f634894fab7123508bb/comments", "author": null, "committer": null, "parents": [{"sha": "acb966f2c31b8b8d95275be6cc674577bf288100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb966f2c31b8b8d95275be6cc674577bf288100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb966f2c31b8b8d95275be6cc674577bf288100"}], "stats": {"total": 25, "additions": 7, "deletions": 18}, "files": [{"sha": "215dfc824131c0f13916221955fb3c073a60c3dc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263e3c330eff8e23c4722f634894fab7123508bb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263e3c330eff8e23c4722f634894fab7123508bb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=263e3c330eff8e23c4722f634894fab7123508bb", "patch": "@@ -1,3 +1,9 @@\n+2007-01-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_uninitialized.h (uninitialized_copy(const char*,\n+\tconst char*, char*), uninitialized_copy(const wchar_t*, const wchar_t*,\n+\twchar_t*)): Remove, just forward to std::copy.\n+\n 2007-01-29  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/ext/enc_filebuf.h: Resurrect, update."}, {"sha": "a8dbb01ff6b5a7c3b742fcd37e64b6ac2c39140a", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/263e3c330eff8e23c4722f634894fab7123508bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/263e3c330eff8e23c4722f634894fab7123508bb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=263e3c330eff8e23c4722f634894fab7123508bb", "patch": "@@ -1,6 +1,6 @@\n // Raw memory manipulators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -62,8 +62,6 @@\n #ifndef _STL_UNINITIALIZED_H\n #define _STL_UNINITIALIZED_H 1\n \n-#include <cstring>\n-\n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // uninitialized_copy\n@@ -114,21 +112,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t   _Is_POD());\n     }\n \n-  inline char*\n-  uninitialized_copy(const char* __first, const char* __last, char* __result)\n-  {\n-    std::memmove(__result, __first, __last - __first);\n-    return __result + (__last - __first);\n-  }\n-\n-  inline wchar_t*\n-  uninitialized_copy(const wchar_t* __first, const wchar_t* __last,\n-\t\t     wchar_t* __result)\n-  {\n-    std::memmove(__result, __first, sizeof(wchar_t) * (__last - __first));\n-    return __result + (__last - __first);\n-  }\n-\n   // Valid if copy construction is equivalent to assignment, and if the\n   // destructor is trivial.\n   template<typename _ForwardIterator, typename _Tp>"}]}