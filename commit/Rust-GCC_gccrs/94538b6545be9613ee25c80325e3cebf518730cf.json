{"sha": "94538b6545be9613ee25c80325e3cebf518730cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ1MzhiNjU0NWJlOTYxM2VlMjVjODAzMjVlM2NlYmY1MTg3MzBjZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-08-16T14:28:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-08-16T14:28:12Z"}, "message": "mmx.md (mmxdoublemode): New mode attribute.\n\n\t* config/i386/mmx.md (mmxdoublemode): New mode attribute.\n\t(mmx_uavg<mode>3): Macroize expaner from mmx_uavgv8qi3 and\n\tmmx_uavgv4hi3 using MMXMODE12 mode iterator.\n\t(uavg<mode>3_ceil): New expander.\n\t* config/i386/sse.md (uavg<mode>3_ceil): Use ssedoublemode\n\tmode iterator when creating CONST1_RTX.\n\t(<sse2_avx2>_uavg<mode>3<mask_name>): Ditto.\n\t(*<sse2_avx2>_uavg<mode>3<mask_name>): Use ssedoublemode\n\tmode iterator for const1_operand predicate.\n\nFrom-SVN: r274572", "tree": {"sha": "ecf011a473639c197d87e5ee1a6fa908622a001a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ecf011a473639c197d87e5ee1a6fa908622a001a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94538b6545be9613ee25c80325e3cebf518730cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94538b6545be9613ee25c80325e3cebf518730cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94538b6545be9613ee25c80325e3cebf518730cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94538b6545be9613ee25c80325e3cebf518730cf/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ac1403ca2c65ba4f28cf051b5326617fa9298d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ac1403ca2c65ba4f28cf051b5326617fa9298d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ac1403ca2c65ba4f28cf051b5326617fa9298d1"}], "stats": {"total": 90, "additions": 53, "deletions": 37}, "files": [{"sha": "36e62908096931113730c79d2821134720aa3363", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94538b6545be9613ee25c80325e3cebf518730cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94538b6545be9613ee25c80325e3cebf518730cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94538b6545be9613ee25c80325e3cebf518730cf", "patch": "@@ -1,3 +1,15 @@\n+2019-08-16  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/mmx.md (mmxdoublemode): New mode attribute.\n+\t(mmx_uavg<mode>3): Macroize expaner from mmx_uavgv8qi3 and\n+\tmmx_uavgv4hi3 using MMXMODE12 mode iterator.\n+\t(uavg<mode>3_ceil): New expander.\n+\t* config/i386/sse.md (uavg<mode>3_ceil): Use ssedoublemode\n+\tmode iterator when creating CONST1_RTX.\n+\t(<sse2_avx2>_uavg<mode>3<mask_name>): Ditto.\n+\t(*<sse2_avx2>_uavg<mode>3<mask_name>): Use ssedoublemode\n+\tmode iterator for const1_operand predicate.\n+\n 2019-08-16  Richard Biener  <rguenther@suse.de>\n \n \t* tree-scalar-evolution.c (follow_ssa_edge_expr): Declare."}, {"sha": "c9cad04d6e928c8c9b86b397a5a0af69c3019627", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94538b6545be9613ee25c80325e3cebf518730cf/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94538b6545be9613ee25c80325e3cebf518730cf/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=94538b6545be9613ee25c80325e3cebf518730cf", "patch": "@@ -58,6 +58,9 @@\n ;; Mapping from integer vector mode to mnemonic suffix\n (define_mode_attr mmxvecsize [(V8QI \"b\") (V4HI \"w\") (V2SI \"d\") (V1DI \"q\")])\n \n+(define_mode_attr mmxdoublemode\n+  [(V8QI \"V8HI\") (V4HI \"V4SI\")])\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Move patterns\n@@ -1948,24 +1951,24 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_expand \"mmx_uavgv8qi3\"\n-  [(set (match_operand:V8QI 0 \"register_operand\")\n-\t(truncate:V8QI\n-\t  (lshiftrt:V8HI\n-\t    (plus:V8HI\n-\t      (plus:V8HI\n-\t\t(zero_extend:V8HI\n-\t\t  (match_operand:V8QI 1 \"register_mmxmem_operand\"))\n-\t\t(zero_extend:V8HI\n-\t\t  (match_operand:V8QI 2 \"register_mmxmem_operand\")))\n-\t      (const_vector:V8HI [(const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)]))\n+(define_expand \"mmx_uavg<mode>3\"\n+  [(set (match_operand:MMXMODE12 0 \"register_operand\")\n+\t(truncate:MMXMODE12\n+\t  (lshiftrt:<mmxdoublemode>\n+\t    (plus:<mmxdoublemode>\n+\t      (plus:<mmxdoublemode>\n+\t\t(zero_extend:<mmxdoublemode>\n+\t\t  (match_operand:MMXMODE12 1 \"register_mmxmem_operand\"))\n+\t\t(zero_extend:<mmxdoublemode>\n+\t\t  (match_operand:MMXMODE12 2 \"register_mmxmem_operand\")))\n+\t      (match_dup 3))\n \t    (const_int 1))))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n    && (TARGET_SSE || TARGET_3DNOW)\"\n-  \"ix86_fixup_binary_operands_no_copy (PLUS, V8QImode, operands);\")\n+{\n+  operands[3] = CONST1_RTX(<mmxdoublemode>mode);\n+  ix86_fixup_binary_operands_no_copy (PLUS, <MODE>mode, operands);\n+})\n \n (define_insn \"*mmx_uavgv8qi3\"\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=y,x,Yv\")\n@@ -1984,7 +1987,7 @@\n \t    (const_int 1))))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n    && (TARGET_SSE || TARGET_3DNOW)\n-   && ix86_binary_operator_ok (PLUS, V8QImode, operands)\"\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n {\n   switch (which_alternative)\n     {\n@@ -2013,23 +2016,6 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n-(define_expand \"mmx_uavgv4hi3\"\n-  [(set (match_operand:V4HI 0 \"register_operand\")\n-\t(truncate:V4HI\n-\t  (lshiftrt:V4SI\n-\t    (plus:V4SI\n-\t      (plus:V4SI\n-\t\t(zero_extend:V4SI\n-\t\t  (match_operand:V4HI 1 \"register_mmxmem_operand\"))\n-\t\t(zero_extend:V4SI\n-\t\t  (match_operand:V4HI 2 \"register_mmxmem_operand\")))\n-\t      (const_vector:V4SI [(const_int 1) (const_int 1)\n-\t\t\t\t  (const_int 1) (const_int 1)]))\n-\t    (const_int 1))))]\n-  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n-   && (TARGET_SSE || TARGET_3DNOW_A)\"\n-  \"ix86_fixup_binary_operands_no_copy (PLUS, V4HImode, operands);\")\n-\n (define_insn \"*mmx_uavgv4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\" \"=y,x,Yv\")\n \t(truncate:V4HI\n@@ -2045,7 +2031,7 @@\n \t    (const_int 1))))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n    && (TARGET_SSE || TARGET_3DNOW_A)\n-   && ix86_binary_operator_ok (PLUS, V4HImode, operands)\"\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n    pavgw\\t{%2, %0|%0, %2}\n    pavgw\\t{%2, %0|%0, %2}\n@@ -2055,6 +2041,24 @@\n    (set_attr \"type\" \"mmxshft,sseiadd,sseiadd\")\n    (set_attr \"mode\" \"DI,TI,TI\")])\n \n+(define_expand \"uavg<mode>3_ceil\"\n+  [(set (match_operand:MMXMODE12 0 \"register_operand\")\n+\t(truncate:MMXMODE12\n+\t  (lshiftrt:<mmxdoublemode>\n+\t    (plus:<mmxdoublemode>\n+\t      (plus:<mmxdoublemode>\n+\t\t(zero_extend:<mmxdoublemode>\n+\t\t  (match_operand:MMXMODE12 1 \"register_operand\"))\n+\t\t(zero_extend:<mmxdoublemode>\n+\t\t  (match_operand:MMXMODE12 2 \"register_operand\")))\n+\t      (match_dup 3))\n+\t    (const_int 1))))]\n+  \"TARGET_MMX_WITH_SSE\"\n+{\n+  operands[3] = CONST1_RTX(<mmxdoublemode>mode);\n+  ix86_fixup_binary_operands_no_copy (PLUS, <MODE>mode, operands);\n+})\n+\n (define_insn \"mmx_psadbw\"\n   [(set (match_operand:V1DI 0 \"register_operand\" \"=y,x,Yv\")\n         (unspec:V1DI [(match_operand:V8QI 1 \"register_operand\" \"0,0,Yv\")"}, {"sha": "7bef93907db56f57831cd43c0a33788b4eda6449", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94538b6545be9613ee25c80325e3cebf518730cf/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94538b6545be9613ee25c80325e3cebf518730cf/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=94538b6545be9613ee25c80325e3cebf518730cf", "patch": "@@ -11900,7 +11900,7 @@\n \t    (const_int 1))))]\n   \"TARGET_SSE2\"\n {\n-  operands[3] = CONST1_RTX(<MODE>mode);\n+  operands[3] = CONST1_RTX(<ssedoublemode>mode);\n   ix86_fixup_binary_operands_no_copy (PLUS, <MODE>mode, operands);\n })\n \n@@ -15641,7 +15641,7 @@\n \t    (const_int 1))))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n {\n-  operands[<mask_expand_op3>] = CONST1_RTX(<MODE>mode);\n+  operands[<mask_expand_op3>] = CONST1_RTX(<ssedoublemode>mode);\n   ix86_fixup_binary_operands_no_copy (PLUS, <MODE>mode, operands);\n })\n \n@@ -15655,7 +15655,7 @@\n \t\t  (match_operand:VI12_AVX2 1 \"vector_operand\" \"%0,v\"))\n \t\t(zero_extend:<ssedoublemode>\n \t\t  (match_operand:VI12_AVX2 2 \"vector_operand\" \"xBm,vm\")))\n-\t      (match_operand:VI12_AVX2 <mask_expand_op3> \"const1_operand\"))\n+\t      (match_operand:<ssedoublemode> <mask_expand_op3> \"const1_operand\"))\n \t    (const_int 1))))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\n    && !(MEM_P (operands[1]) && MEM_P (operands[2]))\""}]}