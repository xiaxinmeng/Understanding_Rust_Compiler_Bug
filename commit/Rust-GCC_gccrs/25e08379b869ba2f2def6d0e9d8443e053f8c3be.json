{"sha": "25e08379b869ba2f2def6d0e9d8443e053f8c3be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVlMDgzNzliODY5YmEyZjJkZWY2ZDBlOWQ4NDQzZTA1M2Y4YzNiZQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-07-20T14:09:20Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2016-07-20T14:09:20Z"}, "message": "Build libbackend.a as a thin archive if possible\n\ngcc/ChangeLog:\n\n\t* configure.ac (thin_archive_support): New variable.  AC_SUBST it.\n\t* configure: Regenerate.\n\t* Makefile.in (THIN_ARCHIVE_SUPPORT): New variable.\n\t(USE_THIN_ARCHIVES): New variable.\n\t(libbackend.a): If USE_THIN_ARCHIVES then pass T to ar to build\n\tthis archive as a thin archive.\n\nFrom-SVN: r238524", "tree": {"sha": "e493a2b224e1d6b742eeae1b08d074cd841ea941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e493a2b224e1d6b742eeae1b08d074cd841ea941"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25e08379b869ba2f2def6d0e9d8443e053f8c3be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e08379b869ba2f2def6d0e9d8443e053f8c3be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25e08379b869ba2f2def6d0e9d8443e053f8c3be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25e08379b869ba2f2def6d0e9d8443e053f8c3be/comments", "author": null, "committer": null, "parents": [{"sha": "7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c8f7eaa75d53ca642203178fb2c6bbe800bc2ea"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "5af16ba065a03cea91185c10ce3b1ab1ead4f56d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e08379b869ba2f2def6d0e9d8443e053f8c3be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e08379b869ba2f2def6d0e9d8443e053f8c3be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25e08379b869ba2f2def6d0e9d8443e053f8c3be", "patch": "@@ -1,3 +1,12 @@\n+2016-07-20  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\t* configure.ac (thin_archive_support): New variable.  AC_SUBST it.\n+\t* configure: Regenerate.\n+\t* Makefile.in (THIN_ARCHIVE_SUPPORT): New variable.\n+\t(USE_THIN_ARCHIVES): New variable.\n+\t(libbackend.a): If USE_THIN_ARCHIVES then pass T to ar to build\n+\tthis archive as a thin archive.\n+\n 2016-07-20  David Malcolm  <dmalcolm@redhat.com>\n \n \t* diagnostic-show-locus.c (diagnostic_show_locus): If this is the"}, {"sha": "7a0160f89b61dec26fff1614a379d52bf807f938", "filename": "gcc/Makefile.in", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e08379b869ba2f2def6d0e9d8443e053f8c3be/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e08379b869ba2f2def6d0e9d8443e053f8c3be/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=25e08379b869ba2f2def6d0e9d8443e053f8c3be", "patch": "@@ -275,6 +275,17 @@ else\n LLINKER = $(LINKER)\n endif\n \n+THIN_ARCHIVE_SUPPORT = @thin_archive_support@\n+\n+USE_THIN_ARCHIVES = no\n+ifeq ($(THIN_ARCHIVE_SUPPORT),yes)\n+ifeq ($(AR_FLAGS),rc)\n+ifeq ($(RANLIB_FLAGS),)\n+USE_THIN_ARCHIVES = yes\n+endif\n+endif\n+endif\n+\n # -------------------------------------------\n # Programs which operate on the build machine\n # -------------------------------------------\n@@ -1883,8 +1894,14 @@ compilations: $(BACKEND)\n # This archive is strictly for the host.\n libbackend.a: $(OBJS)\n \t-rm -rf libbackend.a\n+\t@# Build libbackend.a as a thin archive if possible, as doing so\n+\t@# significantly reduces build times.\n+ifeq ($(USE_THIN_ARCHIVES),yes)\n+\t$(AR) $(AR_FLAGS)T libbackend.a $(OBJS)\n+else\n \t$(AR) $(AR_FLAGS) libbackend.a $(OBJS)\n \t-$(RANLIB) $(RANLIB_FLAGS) libbackend.a\n+endif\n \n libcommon-target.a: $(OBJS-libcommon-target)\n \t-rm -rf libcommon-target.a"}, {"sha": "871ed0c3d1571951fe74ba82389ccb727060269a", "filename": "gcc/configure", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e08379b869ba2f2def6d0e9d8443e053f8c3be/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e08379b869ba2f2def6d0e9d8443e053f8c3be/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=25e08379b869ba2f2def6d0e9d8443e053f8c3be", "patch": "@@ -679,6 +679,7 @@ zlibinc\n zlibdir\n HOST_LIBS\n enable_default_ssp\n+thin_archive_support\n libgcc_visibility\n gcc_cv_readelf\n gcc_cv_objdump\n@@ -18475,7 +18476,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18478 \"configure\"\n+#line 18479 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18581,7 +18582,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18584 \"configure\"\n+#line 18585 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -27846,6 +27847,21 @@ $as_echo \"#define HAVE_AS_LINE_ZERO 1\" >>confdefs.h\n \n fi\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking support for thin archives\" >&5\n+$as_echo_n \"checking support for thin archives... \" >&6; }\n+thin_archive_support=no\n+echo 'int main (void) { return 0; }' > conftest.c\n+if ($AR --version | sed 1q | grep \"GNU ar\" \\\n+    && $CC $CFLAGS -c conftest.c \\\n+    && $AR rcT conftest.a conftest.o \\\n+    && $CC $CFLAGS $LDFLAGS -o conftest conftest.a) >/dev/null 2>&1; then\n+  thin_archive_support=yes\n+fi\n+rm -f conftest.c conftest.o conftest.a conftest\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $thin_archive_support\" >&5\n+$as_echo \"$thin_archive_support\" >&6; }\n+\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker PT_GNU_EH_FRAME support\" >&5\n $as_echo_n \"checking linker PT_GNU_EH_FRAME support... \" >&6; }\n gcc_cv_ld_eh_frame_hdr=no"}, {"sha": "241e82dfc7285817bbdf8ccd8f7e9537251e8565", "filename": "gcc/configure.ac", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25e08379b869ba2f2def6d0e9d8443e053f8c3be/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25e08379b869ba2f2def6d0e9d8443e053f8c3be/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=25e08379b869ba2f2def6d0e9d8443e053f8c3be", "patch": "@@ -4899,6 +4899,19 @@ if test \"x$gcc_cv_as_line_zero\" = xyes; then\n [Define if the assembler won't complain about a line such as # 0 \"\" 2.])\n fi\n \n+AC_MSG_CHECKING(support for thin archives)\n+thin_archive_support=no\n+echo 'int main (void) { return 0; }' > conftest.c\n+if ($AR --version | sed 1q | grep \"GNU ar\" \\\n+    && $CC $CFLAGS -c conftest.c \\\n+    && $AR rcT conftest.a conftest.o \\\n+    && $CC $CFLAGS $LDFLAGS -o conftest conftest.a) >/dev/null 2>&1; then\n+  thin_archive_support=yes\n+fi\n+rm -f conftest.c conftest.o conftest.a conftest\n+AC_MSG_RESULT($thin_archive_support)\n+AC_SUBST(thin_archive_support)\n+\n AC_MSG_CHECKING(linker PT_GNU_EH_FRAME support)\n gcc_cv_ld_eh_frame_hdr=no\n if test $in_tree_ld = yes ; then"}]}