{"sha": "c2a96ec20fc81a90fc6c0cc665db721cccab304b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJhOTZlYzIwZmM4MWE5MGZjNmMwY2M2NjVkYjcyMWNjY2FiMzA0Yg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-08-03T16:26:13Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-08-03T16:26:13Z"}, "message": "re PR middle-end/66314 (ice in verify_loop_structure)\n\n\tPR middle-end/66314\n\tPR gcov-profile/66899\n\t* tree-ssa-threadupdate.c (mark_threaded_blocks): Correctly\n\titerate over the jump threading paths when an element in the\n\tjump threading paths array is eliminated.\n\n\tPR middle-end/66314\n\tPR gcov-profile/66899\n\t* gcc.dg/pr66899.c: New test.\n\t* gcc.dg/pr66314.c: New test.\n\nFrom-SVN: r226516", "tree": {"sha": "b6eda946d09f05a3bee4ad8a49842108ce1319e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6eda946d09f05a3bee4ad8a49842108ce1319e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2a96ec20fc81a90fc6c0cc665db721cccab304b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a96ec20fc81a90fc6c0cc665db721cccab304b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a96ec20fc81a90fc6c0cc665db721cccab304b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a96ec20fc81a90fc6c0cc665db721cccab304b/comments", "author": null, "committer": null, "parents": [{"sha": "93411db8c7880db31a3d6d6922845bf03cd665cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93411db8c7880db31a3d6d6922845bf03cd665cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93411db8c7880db31a3d6d6922845bf03cd665cc"}], "stats": {"total": 108, "additions": 105, "deletions": 3}, "files": [{"sha": "9abde9f912449e8b12e668ee96c155472e53b777", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a96ec20fc81a90fc6c0cc665db721cccab304b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a96ec20fc81a90fc6c0cc665db721cccab304b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2a96ec20fc81a90fc6c0cc665db721cccab304b", "patch": "@@ -1,3 +1,11 @@\n+2015-08-03  Jeff Law  <law@redhat.com>\n+\n+\tPR middle-end/66314\n+\tPR gcov-profile/66899\n+\t* tree-ssa-threadupdate.c (mark_threaded_blocks): Correctly\n+\titerate over the jump threading paths when an element in the\n+\tjump threading paths array is eliminated.\n+\n 2015-08-03  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* Makefile.in (OBJS): Put gimple-match.o and generic-match.o first."}, {"sha": "0a841b5139834963e4d89f81786995f0aefbb82e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a96ec20fc81a90fc6c0cc665db721cccab304b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a96ec20fc81a90fc6c0cc665db721cccab304b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2a96ec20fc81a90fc6c0cc665db721cccab304b", "patch": "@@ -1,3 +1,10 @@\n+2015-08-03  Jeff Law  <law@redhat.com>\n+\n+\tPR middle-end/66314\n+\tPR gcov-profile/66899\n+\t* gcc.dg/pr66899.c: New test.\n+\t* gcc.dg/pr66314.c: New test.\n+\n 2015-08-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/67088"}, {"sha": "f74ab5b73bb85cc5e1ecc10359d71903f5270547", "filename": "gcc/testsuite/gcc.dg/pr66314.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a96ec20fc81a90fc6c0cc665db721cccab304b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66314.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a96ec20fc81a90fc6c0cc665db721cccab304b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66314.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66314.c?ref=c2a96ec20fc81a90fc6c0cc665db721cccab304b", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89 -Os -fprofile-arcs -fsanitize=kernel-address\" } */\n+\n+char *a;\n+int d;\n+\n+static int\n+fn1 (int b, int c)\n+{\n+  while (a)\n+    if (*a)\n+      return -126;\n+  if (b)\n+    return -12;\n+  if (c == -12)\n+    return c;\n+}\n+\n+void\n+fn2 (int b, int c)\n+{\n+  for (;;)\n+    {\n+      d = fn1 (b, c);\n+      switch (d)\n+        {\n+        case -126:\n+          continue;\n+        default:\n+          return;\n+        }\n+    }\n+}"}, {"sha": "1fff18153aa740cfc02051e6b8d3b31c42090c17", "filename": "gcc/testsuite/gcc.dg/pr66899.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a96ec20fc81a90fc6c0cc665db721cccab304b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66899.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a96ec20fc81a90fc6c0cc665db721cccab304b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66899.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66899.c?ref=c2a96ec20fc81a90fc6c0cc665db721cccab304b", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fprofile-arcs\" } */\n+\n+struct\n+{\n+  int authority;\n+} * a, *b, c, d;\n+int e, f;\n+static int\n+fn1 ()\n+{\n+  if (a)\n+    goto verified;\n+  if (b)\n+    goto matched;\n+  return -126;\n+matched:\n+  e = 0;\n+verified:\n+  if (b)\n+    for (; &c != b; c = d)\n+      ;\n+  return 0;\n+}\n+\n+int\n+fn2 ()\n+{\n+  for (;;)\n+    {\n+      f = fn1 ();\n+      switch (f)\n+        {\n+        case -126:\n+          continue;\n+        default:\n+          return 0;\n+        }\n+    }\n+}\n+"}, {"sha": "5a5f8df172f4657f2ba368926925fe5222cd6353", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a96ec20fc81a90fc6c0cc665db721cccab304b/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a96ec20fc81a90fc6c0cc665db721cccab304b/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=c2a96ec20fc81a90fc6c0cc665db721cccab304b", "patch": "@@ -2130,7 +2130,7 @@ mark_threaded_blocks (bitmap threaded_blocks)\n      cases where the second path starts at a downstream edge on the same\n      path).  First record all joiner paths, deleting any in the unexpected\n      case where there is already a path for that incoming edge.  */\n-  for (i = 0; i < paths.length (); i++)\n+  for (i = 0; i < paths.length ();)\n     {\n       vec<jump_thread_edge *> *path = paths[i];\n \n@@ -2140,6 +2140,7 @@ mark_threaded_blocks (bitmap threaded_blocks)\n \t  if ((*path)[0]->e->aux == NULL)\n \t    {\n \t      (*path)[0]->e->aux = path;\n+\t      i++;\n \t    }\n \t  else\n \t    {\n@@ -2149,10 +2150,15 @@ mark_threaded_blocks (bitmap threaded_blocks)\n \t      delete_jump_thread_path (path);\n \t    }\n \t}\n+      else\n+\t{\n+\t  i++;\n+\t}\n     }\n+\n   /* Second, look for paths that have any other jump thread attached to\n      them, and either finish converting them or cancel them.  */\n-  for (i = 0; i < paths.length (); i++)\n+  for (i = 0; i < paths.length ();)\n     {\n       vec<jump_thread_edge *> *path = paths[i];\n       edge e = (*path)[0]->e;\n@@ -2167,7 +2173,10 @@ mark_threaded_blocks (bitmap threaded_blocks)\n \t  /* If we iterated through the entire path without exiting the loop,\n \t     then we are good to go, record it.  */\n \t  if (j == path->length ())\n-\t    bitmap_set_bit (tmp, e->dest->index);\n+\t    {\n+\t      bitmap_set_bit (tmp, e->dest->index);\n+\t      i++;\n+\t    }\n \t  else\n \t    {\n \t      e->aux = NULL;\n@@ -2177,6 +2186,10 @@ mark_threaded_blocks (bitmap threaded_blocks)\n \t      delete_jump_thread_path (path);\n \t    }\n \t}\n+      else\n+\t{\n+\t  i++;\n+\t}\n     }\n \n   /* If optimizing for size, only thread through block if we don't have"}]}