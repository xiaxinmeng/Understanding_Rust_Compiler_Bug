{"sha": "59f38935d189027f172b4813a6056addaceb7cd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlmMzg5MzVkMTg5MDI3ZjE3MmI0ODEzYTYwNTZhZGRhY2ViN2NkMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2021-08-23T07:21:36Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2021-08-23T07:22:22Z"}, "message": "Improve return slot handling in ipa-modref\n\ngcc/ChangeLog:\n\n\t* ipa-modref.c (analyze_ssa_name_flags): Improve handling of return slot.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/tree-ssa/modref-1.C: New test.", "tree": {"sha": "d73fad95ddf379719bb3a2015aba1a2ac54c3f5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d73fad95ddf379719bb3a2015aba1a2ac54c3f5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59f38935d189027f172b4813a6056addaceb7cd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f38935d189027f172b4813a6056addaceb7cd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59f38935d189027f172b4813a6056addaceb7cd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f38935d189027f172b4813a6056addaceb7cd3/comments", "author": null, "committer": null, "parents": [{"sha": "f93f0868919ab32bfbc24adb40158298031a4d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f93f0868919ab32bfbc24adb40158298031a4d58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f93f0868919ab32bfbc24adb40158298031a4d58"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "cb0a314cbeb3c6bbd5768ad1bf7d4e7a4ace1665", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f38935d189027f172b4813a6056addaceb7cd3/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f38935d189027f172b4813a6056addaceb7cd3/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=59f38935d189027f172b4813a6056addaceb7cd3", "patch": "@@ -1709,19 +1709,8 @@ analyze_ssa_name_flags (tree name, vec<modref_lattice> &lattice, int depth,\n \t  if (gimple_call_fn (use_stmt) == name)\n \t    lattice[index].merge (~EAF_NOCLOBBER);\n \n-\t  /* Return slot optimization would require bit of propagation;\n-\t     give up for now.  */\n-\t  if (gimple_call_return_slot_opt_p (call)\n-\t      && gimple_call_lhs (call) != NULL_TREE\n-\t      && TREE_ADDRESSABLE (TREE_TYPE (gimple_call_lhs (call))))\n-\t    {\n-\t      if (dump_file)\n-\t\tfprintf (dump_file, \"%*s  Unhandled return slot opt\\n\",\n-\t\t\t depth * 4, \"\");\n-\t      lattice[index].merge (0);\n-\t    }\n \t  /* Recursion would require bit of propagation; give up for now.  */\n-\t  else if (callee && !ipa && recursive_call_p (current_function_decl,\n+\t  if (callee && !ipa && recursive_call_p (current_function_decl,\n \t\t\t\t\t\t  callee))\n \t    lattice[index].merge (0);\n \t  else\n@@ -1735,7 +1724,15 @@ analyze_ssa_name_flags (tree name, vec<modref_lattice> &lattice, int depth,\n \t      /* Handle *name = func (...).  */\n \t      if (gimple_call_lhs (call)\n \t\t  && memory_access_to (gimple_call_lhs (call), name))\n-\t\tlattice[index].merge_direct_store ();\n+\t\t{\n+\t\t  lattice[index].merge_direct_store ();\n+\t\t  /* Return slot optimization passes address of\n+\t\t     LHS to callee via hidden parameter and this\n+\t\t     may make LHS to escape.  See PR 98499.  */\n+\t\t  if (gimple_call_return_slot_opt_p (call)\n+\t\t      && TREE_ADDRESSABLE (TREE_TYPE (gimple_call_lhs (call))))\n+\t\t    lattice[index].merge (EAF_NOREAD | EAF_DIRECT);\n+\t\t}\n \n \t      /* We do not track accesses to the static chain (we could)\n \t\t so give up.  */"}, {"sha": "c742dfe8b33882270850915697e1cb8c505f18f7", "filename": "gcc/testsuite/g++.dg/tree-ssa/modref-1.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f38935d189027f172b4813a6056addaceb7cd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fmodref-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f38935d189027f172b4813a6056addaceb7cd3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fmodref-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fmodref-1.C?ref=59f38935d189027f172b4813a6056addaceb7cd3", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+struct S { int a; char b[20]; S(); S(S const&); };\n+volatile int global;\n+\n+__attribute__ ((noinline,noclone))\n+struct S noescape (int *b)\n+{\n+  struct S a;\n+  a.a = b!=0;\n+  global = 1;\n+  return a;\n+}\n+\n+void escape (struct S *p);\n+\n+__attribute__ ((noinline,noclone))\n+int\n+test(int *b)\n+{\n+  struct S s = noescape (b);\n+  escape (&s);\n+  return *b;\n+}\n+int test2()\n+{\n+  int b=1234;\n+  test (&b);\n+  return b;\n+}\n+// ipa-modref should analyze parameter B of test as noescape.\n+// { dg-final { scan-tree-dump \"return 1234\" } }"}]}