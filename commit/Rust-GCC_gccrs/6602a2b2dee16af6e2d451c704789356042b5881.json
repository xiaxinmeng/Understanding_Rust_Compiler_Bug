{"sha": "6602a2b2dee16af6e2d451c704789356042b5881", "node_id": "C_kwDOANBUbNoAKDY2MDJhMmIyZGVlMTZhZjZlMmQ0NTFjNzA0Nzg5MzU2MDQyYjU4ODE", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-08-03T23:47:30Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-08-17T16:39:44Z"}, "message": "c++: Tweak for -Wpessimizing-move in templates [PR89780]\n\nIn my previous patches I've been extending our std::move warnings,\nbut this tweak actually dials it down a little bit.  As reported in\nbug 89780, it's questionable to warn about expressions in templates\nthat were type-dependent, but aren't anymore because we're instantiating\nthe template.  As in,\n\n  template <typename T>\n  Dest withMove() {\n    T x;\n    return std::move(x);\n  }\n\n  template Dest withMove<Dest>(); // #1\n  template Dest withMove<Source>(); // #2\n\nSaying that the std::move is pessimizing for #1 is not incorrect, but\nit's not useful, because removing the std::move would then pessimize #2.\nSo the user can't really win.  At the same time, disabling the warning\njust because we're in a template would be going too far, I still want to\nwarn for\n\n  template <typename>\n  Dest withMove() {\n    Dest x;\n    return std::move(x);\n  }\n\nbecause the std::move therein will be pessimizing for any instantiation.\n\nSo I'm using the suppress_warning machinery to that effect.\nProblem: I had to add a new group to nowarn_spec_t, otherwise\nsuppressing the -Wpessimizing-move warning would disable a whole bunch\nof other warnings, which we really don't want.\n\n\tPR c++/89780\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (tsubst_copy_and_build) <case CALL_EXPR>: Maybe suppress\n\t-Wpessimizing-move.\n\t* typeck.cc (maybe_warn_pessimizing_move): Don't issue warnings\n\tif they are suppressed.\n\t(check_return_expr): Disable -Wpessimizing-move when returning\n\ta dependent expression.\n\ngcc/ChangeLog:\n\n\t* diagnostic-spec.cc (nowarn_spec_t::nowarn_spec_t): Handle\n\tOPT_Wpessimizing_move and OPT_Wredundant_move.\n\t* diagnostic-spec.h (nowarn_spec_t): Add NW_REDUNDANT enumerator.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/Wpessimizing-move3.C: Remove dg-warning.\n\t* g++.dg/cpp0x/Wredundant-move2.C: Likewise.", "tree": {"sha": "413969ce72c7d74b591aa588fa5024cca4665e6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/413969ce72c7d74b591aa588fa5024cca4665e6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6602a2b2dee16af6e2d451c704789356042b5881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6602a2b2dee16af6e2d451c704789356042b5881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6602a2b2dee16af6e2d451c704789356042b5881", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6602a2b2dee16af6e2d451c704789356042b5881/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d22c7cb8b1a6f9b67c54a798dd5504244614e51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d22c7cb8b1a6f9b67c54a798dd5504244614e51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d22c7cb8b1a6f9b67c54a798dd5504244614e51"}], "stats": {"total": 122, "additions": 114, "deletions": 8}, "files": [{"sha": "fe7e809fc2dd6421ef10ff3a1c543f815a65867c", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6602a2b2dee16af6e2d451c704789356042b5881/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6602a2b2dee16af6e2d451c704789356042b5881/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=6602a2b2dee16af6e2d451c704789356042b5881", "patch": "@@ -21215,6 +21215,9 @@ tsubst_copy_and_build (tree t,\n \t\t  CALL_EXPR_ORDERED_ARGS (call) = ord;\n \t\t  CALL_EXPR_REVERSE_ARGS (call) = rev;\n \t\t}\n+\t    if (warning_suppressed_p (t, OPT_Wpessimizing_move))\n+\t      /* This also suppresses -Wredundant-move.  */\n+\t      suppress_warning (ret, OPT_Wpessimizing_move);\n \t  }\n \n \tRETURN (ret);"}, {"sha": "e95ce8fad14f17ad501cb4e474ac871c105efe6a", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6602a2b2dee16af6e2d451c704789356042b5881/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6602a2b2dee16af6e2d451c704789356042b5881/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=6602a2b2dee16af6e2d451c704789356042b5881", "patch": "@@ -10447,14 +10447,16 @@ maybe_warn_pessimizing_move (tree expr, tree type, bool return_p)\n \t  else if (can_do_nrvo_p (arg, type))\n \t    {\n \t      auto_diagnostic_group d;\n-\t      if (warning_at (loc, OPT_Wpessimizing_move,\n-\t\t\t      \"moving a local object in a return statement \"\n-\t\t\t      \"prevents copy elision\"))\n+\t      if (!warning_suppressed_p (expr, OPT_Wpessimizing_move)\n+\t\t  && warning_at (loc, OPT_Wpessimizing_move,\n+\t\t\t\t \"moving a local object in a return statement \"\n+\t\t\t\t \"prevents copy elision\"))\n \t\tinform (loc, \"remove %<std::move%> call\");\n \t    }\n \t  /* Warn if the move is redundant.  It is redundant when we would\n \t     do maybe-rvalue overload resolution even without std::move.  */\n \t  else if (warn_redundant_move\n+\t\t   && !warning_suppressed_p (expr, OPT_Wredundant_move)\n \t\t   && (moved = treat_lvalue_as_rvalue_p (arg, /*return*/true)))\n \t    {\n \t      /* Make sure that overload resolution would actually succeed\n@@ -10699,6 +10701,11 @@ check_return_expr (tree retval, bool *no_warning)\n       /* We don't know if this is an lvalue or rvalue use, but\n \t either way we can mark it as read.  */\n       mark_exp_read (retval);\n+      /* Disable our std::move warnings when we're returning\n+\t a dependent expression (c++/89780).  */\n+      if (retval && TREE_CODE (retval) == CALL_EXPR)\n+\t/* This also suppresses -Wredundant-move.  */\n+\tsuppress_warning (retval, OPT_Wpessimizing_move);\n       return retval;\n     }\n "}, {"sha": "aece89619e77cddf08ef3fd44331f264808161f4", "filename": "gcc/diagnostic-spec.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6602a2b2dee16af6e2d451c704789356042b5881/gcc%2Fdiagnostic-spec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6602a2b2dee16af6e2d451c704789356042b5881/gcc%2Fdiagnostic-spec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-spec.cc?ref=6602a2b2dee16af6e2d451c704789356042b5881", "patch": "@@ -96,7 +96,7 @@ nowarn_spec_t::nowarn_spec_t (opt_code opt)\n     case OPT_Winit_self:\n     case OPT_Wuninitialized:\n     case OPT_Wmaybe_uninitialized:\n-\tm_bits = NW_UNINIT;\n+      m_bits = NW_UNINIT;\n       break;\n \n     case OPT_Wdangling_pointer_:\n@@ -105,6 +105,11 @@ nowarn_spec_t::nowarn_spec_t (opt_code opt)\n       m_bits = NW_DANGLING;\n       break;\n \n+    case OPT_Wpessimizing_move:\n+    case OPT_Wredundant_move:\n+      m_bits = NW_REDUNDANT;\n+      break;\n+\n     default:\n       /* A catchall group for everything else.  */\n       m_bits = NW_OTHER;"}, {"sha": "e5f1c127d4fcc40c160db8d5358bd01c78c7c9bb", "filename": "gcc/diagnostic-spec.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6602a2b2dee16af6e2d451c704789356042b5881/gcc%2Fdiagnostic-spec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6602a2b2dee16af6e2d451c704789356042b5881/gcc%2Fdiagnostic-spec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-spec.h?ref=6602a2b2dee16af6e2d451c704789356042b5881", "patch": "@@ -45,9 +45,11 @@ class nowarn_spec_t\n      NW_DANGLING = 1 << 5,\n      /* All other unclassified warnings.  */\n      NW_OTHER = 1 << 6,\n+     /* Warnings about redundant calls.  */\n+     NW_REDUNDANT = 1 << 7,\n      /* All groups of warnings.  */\n      NW_ALL = (NW_ACCESS | NW_LEXICAL | NW_NONNULL\n-\t       | NW_UNINIT | NW_VFLOW | NW_DANGLING | NW_OTHER)\n+\t       | NW_UNINIT | NW_VFLOW | NW_DANGLING | NW_REDUNDANT | NW_OTHER)\n    };\n \n   nowarn_spec_t (): m_bits () { }"}, {"sha": "c81f29a4ba6f6d683e32c622a6adbd2c0601f29b", "filename": "gcc/testsuite/g++.dg/cpp0x/Wpessimizing-move3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6602a2b2dee16af6e2d451c704789356042b5881/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6602a2b2dee16af6e2d451c704789356042b5881/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move3.C?ref=6602a2b2dee16af6e2d451c704789356042b5881", "patch": "@@ -39,7 +39,7 @@ Tp1\n fn2 ()\n {\n   Tp2 t;\n-  return std::move (t); // { dg-warning \"moving a local object in a return statement prevents copy elision\" }\n+  return std::move (t);\n }\n \n template<typename Tp1, typename Tp2>"}, {"sha": "898040e6bfcf8a5261da350df95e559c7d6c8030", "filename": "gcc/testsuite/g++.dg/cpp0x/Wpessimizing-move9.C", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6602a2b2dee16af6e2d451c704789356042b5881/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6602a2b2dee16af6e2d451c704789356042b5881/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWpessimizing-move9.C?ref=6602a2b2dee16af6e2d451c704789356042b5881", "patch": "@@ -0,0 +1,89 @@\n+// PR c++/89780\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wpessimizing-move -Wredundant-move\" }\n+\n+// Define std::move.\n+namespace std {\n+  template<typename _Tp>\n+    struct remove_reference\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    struct remove_reference<_Tp&&>\n+    { typedef _Tp   type; };\n+\n+  template<typename _Tp>\n+    constexpr typename std::remove_reference<_Tp>::type&&\n+    move(_Tp&& __t) noexcept\n+    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n+}\n+\n+struct Dest {\n+    Dest() = default;\n+    Dest(Dest&&);\n+    Dest(const Dest&);\n+};\n+struct Source : Dest {};\n+\n+template <typename T>\n+Dest withMove() {\n+  T x;\n+  return std::move(x);\n+}\n+\n+template Dest withMove<Dest>();\n+template Dest withMove<Source>();\n+\n+template<typename T>\n+Dest bar () {\n+  return std::move(T()); // { dg-warning \"moving a temporary object prevents copy elision\" }\n+}\n+\n+template Dest bar<Dest>();\n+template Dest bar<Source>();\n+\n+template<typename T>\n+Dest baz (T x) {\n+  return std::move(x);\n+}\n+\n+void\n+call_baz ()\n+{\n+  Dest d;\n+  Source s;\n+  baz (d);\n+  baz (s);\n+}\n+\n+template<typename>\n+Dest foo ()\n+{\n+  Dest d;\n+  return std::move(d); // { dg-warning \"moving a local object in a return statement prevents copy elision\" }\n+}\n+\n+template Dest foo<int>();\n+\n+template<typename>\n+Dest qux () {\n+  return std::move(Dest()); // { dg-warning \"moving a temporary object prevents copy elision\" }\n+}\n+\n+template Dest qux<int>();\n+\n+template<typename>\n+Dest qui (Dest x) {\n+  return std::move(x); // { dg-warning \"redundant move in return statement\" }\n+}\n+\n+void\n+call_qui ()\n+{\n+  Dest d;\n+  qui<int> (d);\n+}"}, {"sha": "6e0aa4b02777367248a135e003e0ef021da20c07", "filename": "gcc/testsuite/g++.dg/cpp0x/Wredundant-move2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6602a2b2dee16af6e2d451c704789356042b5881/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6602a2b2dee16af6e2d451c704789356042b5881/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2FWredundant-move2.C?ref=6602a2b2dee16af6e2d451c704789356042b5881", "patch": "@@ -37,14 +37,14 @@ template<typename Tp1, typename Tp2>\n Tp1\n fn2 (Tp2 t)\n {\n-  return std::move (t); // { dg-warning \"redundant move in return statement\" }\n+  return std::move (t);\n }\n \n template<typename Tp1, typename Tp2>\n Tp1\n fn3 (Tp2 t)\n {\n-  return std::move (t); // { dg-warning \"redundant move in return statement\" }\n+  return std::move (t);\n }\n \n int"}]}