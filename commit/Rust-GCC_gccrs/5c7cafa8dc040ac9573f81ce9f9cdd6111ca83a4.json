{"sha": "5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM3Y2FmYThkYzA0MGFjOTU3M2Y4MWNlOWY5Y2RkNjExMWNhODNhNA==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2007-06-21T08:58:53Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2007-06-21T08:58:53Z"}, "message": "svn ci -m \"introduce bank[0,1] registers and fix rte delay slot scheduling\"\n\n2007-06-21  Christian Bruel  <christian.bruel@st.com>\n\n\t* config/sh/sh-protos.h (sh_loads_bankedreg_p): Declare.\n\t* config/sh/sh.c (sh_loads_bankedreg_p): New function.\n\t(push_regs): Changed saving order or banked registers.\n\t(sh_expand_epilogue): Likewise.\n\t* config/sh/sh.h (BANKED_REGISTER_P): New macro.\n\t(FIRST_BANKED_REG): Likewise.\n\t(LAST_BANKED_REG): Likewise.\n\t* config/sh/sh.md (banked) New attribute.\n\t(in_delay_slot): Check banked attribute.\n\n2007-06-21  Christian Bruel  <christian.bruel@st.com>\n\n\t* gcc.dg/attr-isr.c: Test delay slot content.\n\nFrom-SVN: r125914", "tree": {"sha": "8d7710b8980080d3eb483bf37da36f82da80d011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d7710b8980080d3eb483bf37da36f82da80d011"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4/comments", "author": null, "committer": null, "parents": [{"sha": "86488aa376bcc3c3e34acf895039236e7f107c94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86488aa376bcc3c3e34acf895039236e7f107c94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86488aa376bcc3c3e34acf895039236e7f107c94"}], "stats": {"total": 84, "additions": 78, "deletions": 6}, "files": [{"sha": "212090b9773fea1ea224a998a1762200accee3fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4", "patch": "@@ -1,3 +1,15 @@\n+2007-06-21  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* config/sh/sh-protos.h (sh_loads_bankedreg_p): Declare.\n+\t* config/sh/sh.c (sh_loads_bankedreg_p): New function.\n+\t(push_regs): Changed saving order or banked registers.\n+\t(sh_expand_epilogue): Likewise.\n+\t* config/sh/sh.h (BANKED_REGISTER_P): New macro.\n+\t(FIRST_BANKED_REG): Likewise.\n+\t(LAST_BANKED_REG): Likewise.\n+\t* config/sh/sh.md (banked) New attribute.\n+\t(in_delay_slot): Check banked attribute.\n+\t\n 2007-06-20  Sebastian Pop  <sebpop@gmail.com>\n \n \tPR tree-optimization/32075"}, {"sha": "b3c9387c284ad05d8348dab401f74a6934c91e99", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4", "patch": "@@ -168,6 +168,7 @@ extern rtx replace_n_hard_rtx (rtx, rtx *, int , int);\n extern int shmedia_cleanup_truncate (rtx *, void *);\n \n extern int sh_contains_memref_p (rtx);\n+extern int sh_loads_bankedreg_p (rtx);\n extern rtx shmedia_prepare_call_address (rtx fnaddr, int is_sibcall);\n struct secondary_reload_info;\n extern enum reg_class sh_secondary_reload (bool, rtx, enum reg_class,"}, {"sha": "0541256679f0a1da6d3285fb642e58ba11770850", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4", "patch": "@@ -5723,13 +5723,13 @@ pop (int rn)\n static void\n push_regs (HARD_REG_SET *mask, int interrupt_handler)\n {\n-  int i;\n+  int i = interrupt_handler ? LAST_BANKED_REG + 1 : 0;\n   int skip_fpscr = 0;\n \n   /* Push PR last; this gives better latencies after the prologue, and\n      candidates for the return delay slot when there are no general\n      registers pushed.  */\n-  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+  for (; i < FIRST_PSEUDO_REGISTER; i++)\n     {\n       /* If this is an interrupt handler, and the SZ bit varies,\n \t and we have to push any floating point register, we need\n@@ -5749,6 +5749,13 @@ push_regs (HARD_REG_SET *mask, int interrupt_handler)\n \t  && TEST_HARD_REG_BIT (*mask, i))\n \tpush (i);\n     }\n+\n+  /* Push banked registers last to improve delay slot opportunities.  */\n+  if (interrupt_handler)\n+    for (i = FIRST_BANKED_REG; i <= LAST_BANKED_REG; i++)\n+      if (TEST_HARD_REG_BIT (*mask, i))\n+\tpush (i);\n+\n   if (TEST_HARD_REG_BIT (*mask, PR_REG))\n     push (PR_REG);\n }\n@@ -6675,14 +6682,30 @@ sh_expand_epilogue (bool sibcall_p)\n     }\n   else /* ! TARGET_SH5 */\n     {\n+      int last_reg;\n+\n       save_size = 0;\n       if (TEST_HARD_REG_BIT (live_regs_mask, PR_REG))\n \t{\n \t  if (!frame_pointer_needed)\n \t    emit_insn (gen_blockage ());\n \t  pop (PR_REG);\n \t}\n-      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\n+      /* Banked registers are poped first to avoid being scheduled in the\n+\t delay slot. RTE switches banks before the ds instruction.  */\n+      if (current_function_interrupt)\n+\t{\n+\t  for (i = FIRST_BANKED_REG; i <= LAST_BANKED_REG; i++)\n+\t    if (TEST_HARD_REG_BIT (live_regs_mask, i)) \n+\t      pop (LAST_BANKED_REG - i);\n+\n+\t  last_reg = FIRST_PSEUDO_REGISTER - LAST_BANKED_REG - 1;\n+\t}\n+      else\n+\tlast_reg = FIRST_PSEUDO_REGISTER;\n+\n+      for (i = 0; i < last_reg; i++)\n \t{\n \t  int j = (FIRST_PSEUDO_REGISTER - 1) - i;\n \n@@ -6692,9 +6715,9 @@ sh_expand_epilogue (bool sibcall_p)\n \t    fpscr_deferred = 1;\n \t  else if (j != PR_REG && TEST_HARD_REG_BIT (live_regs_mask, j))\n \t    pop (j);\n+\n \t  if (j == FIRST_FP_REG && fpscr_deferred)\n \t    pop (FPSCR_REG);\n-\n \t}\n     }\n   if (target_flags != save_flags && ! current_function_interrupt)\n@@ -10839,6 +10862,20 @@ sh_contains_memref_p (rtx insn)\n   return for_each_rtx (&PATTERN (insn), &sh_contains_memref_p_1, NULL);\n }\n \n+/* Return nonzero iff INSN loads a banked register.  */\n+int\n+sh_loads_bankedreg_p (rtx insn)\n+{\n+  if (GET_CODE (PATTERN (insn)) == SET)\n+    {\n+      rtx op = SET_DEST (PATTERN(insn));\n+      if (REG_P (op) && BANKED_REGISTER_P (REGNO (op)))\n+\treturn 1;\n+    }\n+\n+  return 0;  \n+}\n+\n /* FNADDR is the MEM expression from a call expander.  Return an address\n    to use in an SHmedia insn pattern.  */\n rtx"}, {"sha": "4fe0de8885fe01408364dc35c603bece86ddb501", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4", "patch": "@@ -1033,6 +1033,16 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n #define FIRST_TARGET_REG TR0_REG\n #define LAST_TARGET_REG  (FIRST_TARGET_REG + (TARGET_SHMEDIA ? 7 : -1))\n \n+/* Registers that can be accessed through bank0 or bank1 depending on sr.md.  */\n+\n+#define FIRST_BANKED_REG R0_REG\n+#define LAST_BANKED_REG R7_REG\n+\n+#define BANKED_REGISTER_P(REGNO)                       \\\n+  IN_RANGE ((REGNO),                                   \\\n+\t    (unsigned HOST_WIDE_INT) FIRST_BANKED_REG, \\\n+\t    (unsigned HOST_WIDE_INT) LAST_BANKED_REG)\n+\n #define GENERAL_REGISTER_P(REGNO) \\\n   IN_RANGE ((REGNO), \\\n \t    (unsigned HOST_WIDE_INT) FIRST_GENERAL_REG, \\"}, {"sha": "be6294f4fda74d0975271e1490c19fb379ea36b0", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4", "patch": "@@ -463,6 +463,12 @@\n \n (define_attr \"needs_delay_slot\" \"yes,no\" (const_string \"no\"))\n \n+(define_attr \"banked\" \"yes,no\" \n+\t(cond [(eq (symbol_ref \"sh_loads_bankedreg_p (insn)\")\n+\t\t   (const_int 1))\n+\t       (const_string \"yes\")]\n+\t      (const_string \"no\")))\n+\n ;; ??? This should be (nil) instead of (const_int 0)\n (define_attr \"hit_stack\" \"yes,no\"\n \t(cond [(eq (symbol_ref \"find_regno_note (insn, REG_INC, SP_REG)\")\n@@ -541,8 +547,9 @@\n \t\t  (eq_attr \"type\" \"!pload,prset\"))\n \t     (and (eq_attr \"interrupt_function\" \"yes\")\n \t\t  (ior\n-\t\t   (ne (symbol_ref \"TARGET_SH3\") (const_int 0))\n-\t\t   (eq_attr \"hit_stack\" \"no\"))))) (nil) (nil)])\n+\t\t   (eq (symbol_ref \"TARGET_SH3\") (const_int 0))\n+\t\t   (eq_attr \"hit_stack\" \"no\")\n+\t\t   (eq_attr \"banked\" \"no\"))))) (nil) (nil)])\n \n ;; Since a call implicitly uses the PR register, we can't allow\n ;; a PR register store in a jsr delay slot."}, {"sha": "f38fda0ee914a85f5ae27f1f77fba011b96154fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4", "patch": "@@ -1,3 +1,7 @@\n+2007-06-21  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* gcc.dg/attr-isr.c: Test delay slot content.\n+\t\n 2007-06-20  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/32361"}, {"sha": "8292fe9e7bf3cc4edb2e202b9e3d4555ffcc1451", "filename": "gcc/testsuite/gcc.dg/attr-isr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-isr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-isr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-isr.c?ref=5c7cafa8dc040ac9573f81ce9f9cdd6111ca83a4", "patch": "@@ -16,3 +16,4 @@ void\n /* { dg-final { scan-assembler-times \"\\[^f\\]r\\[0-9\\]\\[ \\t\\]*,\" 8 } } */\n /* { dg-final { scan-assembler-not \"\\[^f\\]r1\\[0-3\\]\" } } */\n /* { dg-final { scan-assembler-times \"macl\" 2} } */\n+/* { dg-final { scan-assembler-not \"rte.*\\n.*r15\\[+\\],r\\[0-7\\]\\n\" } } */"}]}