{"sha": "7baed397dd0c220a72589c435e7db1676aced01e", "node_id": "C_kwDOANBUbNoAKDdiYWVkMzk3ZGQwYzIyMGE3MjU4OWM0MzVlN2RiMTY3NmFjZWQwMWU", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-03T08:00:20Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-08-03T08:00:20Z"}, "message": "Support logical shifts by (some) integer constants in TImode STV on x86_64.\n\nThis patch improves TImode STV by adding support for logical shifts by\ninteger constants that are multiples of 8.  For the test case:\n\nunsigned __int128 a, b;\nvoid foo() { a = b << 16; }\n\non x86_64, gcc -O2 currently generates:\n\n        movq    b(%rip), %rax\n        movq    b+8(%rip), %rdx\n        shldq   $16, %rax, %rdx\n        salq    $16, %rax\n        movq    %rax, a(%rip)\n        movq    %rdx, a+8(%rip)\n        ret\n\nwith this patch we now generate:\n\n        movdqa  b(%rip), %xmm0\n        pslldq  $2, %xmm0\n        movaps  %xmm0, a(%rip)\n        ret\n\n2022-08-03  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386-features.cc (compute_convert_gain): Add gain\n\tfor converting suitable TImode shift to a V1TImode shift.\n\t(timode_scalar_chain::convert_insn): Add support for converting\n\tsuitable ASHIFT and LSHIFTRT.\n\t(timode_scalar_to_vector_candidate_p): Consider logical shifts\n\tby integer constants that are multiples of 8 to be candidates.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/sse4_1-stv-7.c: New test case.", "tree": {"sha": "f65f86aaa4a48cdb2fb9a0eb3135b642bb4a426d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f65f86aaa4a48cdb2fb9a0eb3135b642bb4a426d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7baed397dd0c220a72589c435e7db1676aced01e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7baed397dd0c220a72589c435e7db1676aced01e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7baed397dd0c220a72589c435e7db1676aced01e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7baed397dd0c220a72589c435e7db1676aced01e/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c23a9c87cc62bd177fd0d4db6ad34b34e1b9a31f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c23a9c87cc62bd177fd0d4db6ad34b34e1b9a31f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c23a9c87cc62bd177fd0d4db6ad34b34e1b9a31f"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "5e3a7ffacb42b947231e44e528ccee8e0915fdaf", "filename": "gcc/config/i386/i386-features.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7baed397dd0c220a72589c435e7db1676aced01e/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7baed397dd0c220a72589c435e7db1676aced01e/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.cc?ref=7baed397dd0c220a72589c435e7db1676aced01e", "patch": "@@ -1221,6 +1221,13 @@ timode_scalar_chain::compute_convert_gain ()\n \t    igain = COSTS_N_INSNS (1);\n \t  break;\n \n+\tcase ASHIFT:\n+\tcase LSHIFTRT:\n+\t  /* For logical shifts by constant multiples of 8. */\n+\t  igain = optimize_insn_for_size_p () ? COSTS_N_BYTES (4)\n+\t\t\t\t\t      : COSTS_N_INSNS (1);\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}\n@@ -1469,6 +1476,12 @@ timode_scalar_chain::convert_insn (rtx_insn *insn)\n       src = convert_compare (XEXP (src, 0), XEXP (src, 1), insn);\n       break;\n \n+    case ASHIFT:\n+    case LSHIFTRT:\n+      convert_op (&XEXP (src, 0), insn);\n+      PUT_MODE (src, V1TImode);\n+      break;\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -1803,6 +1816,14 @@ timode_scalar_to_vector_candidate_p (rtx_insn *insn)\n     case NOT:\n       return REG_P (XEXP (src, 0)) || timode_mem_p (XEXP (src, 0));\n \n+    case ASHIFT:\n+    case LSHIFTRT:\n+      /* Handle logical shifts by integer constants between 0 and 120\n+\t that are multiples of 8.  */\n+      return REG_P (XEXP (src, 0))\n+\t     && CONST_INT_P (XEXP (src, 1))\n+\t     && (INTVAL (XEXP (src, 1)) & ~0x78) == 0;\n+\n     default:\n       return false;\n     }"}, {"sha": "b0d5fceb29fb6ecf8badaa209349fe4883b4719b", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-stv-7.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7baed397dd0c220a72589c435e7db1676aced01e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-stv-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7baed397dd0c220a72589c435e7db1676aced01e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-stv-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-stv-7.c?ref=7baed397dd0c220a72589c435e7db1676aced01e", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -msse4.1 -mstv -mno-stackrealign\" } */\n+\n+unsigned __int128 a;\n+unsigned __int128 b;\n+\n+void foo()\n+{\n+  a = b << 16;\n+}\n+\n+void bar()\n+{\n+  a = b >> 16;\n+}\n+\n+/* { dg-final { scan-assembler \"pslldq\" } } */\n+/* { dg-final { scan-assembler \"psrldq\" } } */"}]}