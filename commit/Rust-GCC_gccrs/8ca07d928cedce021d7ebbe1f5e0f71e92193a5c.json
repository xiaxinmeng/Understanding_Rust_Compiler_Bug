{"sha": "8ca07d928cedce021d7ebbe1f5e0f71e92193a5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNhMDdkOTI4Y2VkY2UwMjFkN2ViYmUxZjVlMGY3MWU5MjE5M2E1Yw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-01-18T16:26:14Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-01-18T16:26:14Z"}, "message": "Be clear about virtual table pointer corruptuion rather than the vtable itself.\n\nFrom-SVN: r256852", "tree": {"sha": "28096b1b975864b5369a7ae8a7780b03a4c694a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28096b1b975864b5369a7ae8a7780b03a4c694a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ca07d928cedce021d7ebbe1f5e0f71e92193a5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca07d928cedce021d7ebbe1f5e0f71e92193a5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ca07d928cedce021d7ebbe1f5e0f71e92193a5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ca07d928cedce021d7ebbe1f5e0f71e92193a5c/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00850e40bee8c0614a8220069eb23f74feebd0f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00850e40bee8c0614a8220069eb23f74feebd0f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00850e40bee8c0614a8220069eb23f74feebd0f1"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "d1679f4320bdc8b59cf4d711832eab5ec32cc5dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca07d928cedce021d7ebbe1f5e0f71e92193a5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca07d928cedce021d7ebbe1f5e0f71e92193a5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ca07d928cedce021d7ebbe1f5e0f71e92193a5c", "patch": "@@ -1,3 +1,7 @@\n+2018-01-18  Martin Sebor  <msebor@redhat.com>\n+\n+\t* doc/invoke.texi (-Wclass-memaccess): Tweak text.\n+\n 2018-01-18  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/83619"}, {"sha": "27c597492be06893c760547d48af29a7eb197bf4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ca07d928cedce021d7ebbe1f5e0f71e92193a5c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ca07d928cedce021d7ebbe1f5e0f71e92193a5c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8ca07d928cedce021d7ebbe1f5e0f71e92193a5c", "patch": "@@ -2970,11 +2970,11 @@ Warn when the destination of a call to a raw memory function such as\n @code{memset} or @code{memcpy} is an object of class type, and when writing\n into such an object might bypass the class non-trivial or deleted constructor\n or copy assignment, violate const-correctness or encapsulation, or corrupt\n-the virtual table.  Modifying the representation of such objects may violate\n-invariants maintained by member functions of the class.  For example, the call\n-to @code{memset} below is undefined because it modifies a non-trivial class\n-object and is, therefore, diagnosed.  The safe way to either initialize or\n-clear the storage of objects of such types is by using the appropriate\n+virtual table pointers.  Modifying the representation of such objects may\n+violate invariants maintained by member functions of the class.  For example,\n+the call to @code{memset} below is undefined because it modifies a non-trivial\n+class object and is, therefore, diagnosed.  The safe way to either initialize\n+or clear the storage of objects of such types is by using the appropriate\n constructor or assignment operator, if one is available.\n @smallexample\n std::string str = \"abc\";"}]}