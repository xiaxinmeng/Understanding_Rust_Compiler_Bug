{"sha": "8aceba8c95eb83e52287f1ec5ebccc505306e474", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFjZWJhOGM5NWViODNlNTIyODdmMWVjNWViY2NjNTA1MzA2ZTQ3NA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-12-23T21:54:59Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-12-23T21:54:59Z"}, "message": "common.opt (flag_force_mem): Remove.\n\n\t* common.opt (flag_force_mem): Remove.\n\t* doc/invoke.texi (-fforce-mem): Remove.\n\t* opts.c (common_handle_option): Don't handle OPT_fforce_mem.\n\nFrom-SVN: r120176", "tree": {"sha": "ab8342589ebbe3cba439c812298114d5f30f2716", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab8342589ebbe3cba439c812298114d5f30f2716"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8aceba8c95eb83e52287f1ec5ebccc505306e474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aceba8c95eb83e52287f1ec5ebccc505306e474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aceba8c95eb83e52287f1ec5ebccc505306e474", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aceba8c95eb83e52287f1ec5ebccc505306e474/comments", "author": null, "committer": null, "parents": [{"sha": "7fa982e56309e82f94e8d0559c613e7431217fdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fa982e56309e82f94e8d0559c613e7431217fdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fa982e56309e82f94e8d0559c613e7431217fdd"}], "stats": {"total": 24, "additions": 6, "deletions": 18}, "files": [{"sha": "198e877eb82e02d596dd6a041b81ae5b72a7c23a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aceba8c95eb83e52287f1ec5ebccc505306e474/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aceba8c95eb83e52287f1ec5ebccc505306e474/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8aceba8c95eb83e52287f1ec5ebccc505306e474", "patch": "@@ -1,3 +1,9 @@\n+2006-12-23  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* common.opt (flag_force_mem): Remove.\n+\t* doc/invoke.texi (-fforce-mem): Remove.\n+\t* opts.c (common_handle_option): Don't handle OPT_fforce_mem.\n+\n 2006-12-23  Marcin Dalecki  <martin@dalecki.de>\n \n \t* cgraphunit.c (cgraph_optimize): Fixed obvious thinko in memory"}, {"sha": "e237fc1fd288cbc31a9474a55ed53d4c9dae8388", "filename": "gcc/common.opt", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aceba8c95eb83e52287f1ec5ebccc505306e474/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aceba8c95eb83e52287f1ec5ebccc505306e474/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=8aceba8c95eb83e52287f1ec5ebccc505306e474", "patch": "@@ -438,12 +438,6 @@ fforce-addr\n Common Report Var(flag_force_addr)\n Copy memory address constants into registers before use\n \n-; Nonzero for -fforce-mem: load memory value into a register\n-; before arithmetic on it.  This makes better cse but slower compilation.\n-fforce-mem\n-Common Report Var(flag_force_mem)\n-Copy memory operands into registers before use\n-\n fforward-propagate\n Common Report Var(flag_forward_propagate)\n Perform a forward propagation pass on RTL"}, {"sha": "8fa9aa999f2344fcab76792be21f7aaed33a27c0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aceba8c95eb83e52287f1ec5ebccc505306e474/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aceba8c95eb83e52287f1ec5ebccc505306e474/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8aceba8c95eb83e52287f1ec5ebccc505306e474", "patch": "@@ -4654,14 +4654,6 @@ function calls and pops them all at once.\n \n Disabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n \n-@item -fforce-mem\n-@opindex fforce-mem\n-Force memory operands to be copied into registers before doing\n-arithmetic on them.  This produces better code by making all memory\n-references potential common subexpressions.  When they are not common\n-subexpressions, instruction combination should eliminate the separate\n-register-load. This option is now a nop and will be removed in 4.2.\n-\n @item -fforce-addr\n @opindex fforce-addr\n Force memory address constants to be copied into registers before"}, {"sha": "788c2cee7c6aa231929977b378cbcb821cfccd5e", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8aceba8c95eb83e52287f1ec5ebccc505306e474/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8aceba8c95eb83e52287f1ec5ebccc505306e474/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=8aceba8c95eb83e52287f1ec5ebccc505306e474", "patch": "@@ -992,10 +992,6 @@ common_handle_option (size_t scode, const char *arg, int value,\n       flag_pedantic_errors = pedantic = 1;\n       break;\n \n-    case OPT_fforce_mem:\n-      warning (0, \"-f[no-]force-mem is nop and option will be removed in 4.2\");\n-      break;\n-\n     case OPT_floop_optimize:\n     case OPT_frerun_loop_opt:\n     case OPT_fstrength_reduce:"}]}