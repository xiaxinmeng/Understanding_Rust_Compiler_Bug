{"sha": "a50cecb20a10a729b3f5f157b154d28f9937a652", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUwY2VjYjIwYTEwYTcyOWIzZjVmMTU3YjE1NGQyOGY5OTM3YTY1Mg==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-06-13T02:14:46Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-07-05T19:44:14Z"}, "message": "Try inverted comparison for match_simplify in phiopt\n\nSince match and simplify does not have all of the inverted\ncomparison patterns, it make sense to just have\nphi-opt try to do the inversion and try match and simplify again.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu.\n\nThanks,\nAndrew Pinski\n\ngcc/ChangeLog:\n\n\t* tree-ssa-phiopt.c (gimple_simplify_phiopt):\n\tIf \"A ? B : C\" fails to simplify, try \"(!A) ? C : B\".", "tree": {"sha": "1c0d92be5b25278adf2b9f15f30a4f1dd89a6ca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c0d92be5b25278adf2b9f15f30a4f1dd89a6ca6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a50cecb20a10a729b3f5f157b154d28f9937a652", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50cecb20a10a729b3f5f157b154d28f9937a652", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a50cecb20a10a729b3f5f157b154d28f9937a652", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50cecb20a10a729b3f5f157b154d28f9937a652/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd48e550d1dc58307ab1c0ab490745673f748ccc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd48e550d1dc58307ab1c0ab490745673f748ccc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd48e550d1dc58307ab1c0ab490745673f748ccc"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "f8d7ae1c69ddb8b5e28ac2b57232d45ddf53f657", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a50cecb20a10a729b3f5f157b154d28f9937a652/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a50cecb20a10a729b3f5f157b154d28f9937a652/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=a50cecb20a10a729b3f5f157b154d28f9937a652", "patch": "@@ -836,7 +836,8 @@ phiopt_early_allow (enum tree_code code)\n    with parts pushed if EARLY_P was true. Also rejects non allowed tree code\n    if EARLY_P is set.\n    Takes the comparison from COMP_STMT and two args, ARG0 and ARG1 and tries\n-   to simplify CMP ? ARG0 : ARG1.  */\n+   to simplify CMP ? ARG0 : ARG1.\n+   Also try to simplify (!CMP) ? ARG1 : ARG0 if the non-inverse failed.  */\n static tree\n gimple_simplify_phiopt (bool early_p, tree type, gimple *comp_stmt,\n \t\t\ttree arg0, tree arg1,\n@@ -869,6 +870,30 @@ gimple_simplify_phiopt (bool early_p, tree type, gimple *comp_stmt,\n \t    return result;\n \t}\n     }\n+  /* Try the inverted comparison, that is !COMP ? ARG1 : ARG0. */\n+  comp_code = invert_tree_comparison (comp_code, HONOR_NANS (cmp0));\n+\n+  if (comp_code == ERROR_MARK)\n+    return NULL;\n+\n+  cond = build2_loc (loc,\n+\t\t     comp_code, boolean_type_node,\n+\t\t     cmp0, cmp1);\n+  gimple_match_op op1 (gimple_match_cond::UNCOND,\n+\t\t       COND_EXPR, type, cond, arg1, arg0);\n+\n+  if (op1.resimplify (early_p ? NULL : seq, follow_all_ssa_edges))\n+    {\n+      /* Early we want only to allow some generated tree codes. */\n+      if (!early_p\n+\t  || op1.code.is_tree_code ()\n+\t  || phiopt_early_allow ((tree_code)op1.code))\n+\t{\n+\t  result = maybe_push_res_to_seq (&op1, seq);\n+\t  if (result)\n+\t    return result;\n+\t}\n+    }\n \n   return NULL;\n }"}]}