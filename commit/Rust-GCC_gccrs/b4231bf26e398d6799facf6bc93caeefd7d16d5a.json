{"sha": "b4231bf26e398d6799facf6bc93caeefd7d16d5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQyMzFiZjI2ZTM5OGQ2Nzk5ZmFjZjZiYzkzY2FlZWZkN2QxNmQ1YQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-04-03T17:35:14Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-04-03T17:35:14Z"}, "message": "extend.texi (Common Function Attributes): Clarify.\n\ngcc/ChangeLog:\n\n\t* doc/extend.texi (Common Function Attributes): Clarify.\n\t(const attribute): Likewise.\n\t(pure attribute): Likewise.\n\nFrom-SVN: r259041", "tree": {"sha": "03cce51da066adc346384d5c7ba897532758fa49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03cce51da066adc346384d5c7ba897532758fa49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4231bf26e398d6799facf6bc93caeefd7d16d5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4231bf26e398d6799facf6bc93caeefd7d16d5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4231bf26e398d6799facf6bc93caeefd7d16d5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4231bf26e398d6799facf6bc93caeefd7d16d5a/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92c59b7466a8caeab26f239ba4b004e68700d92e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92c59b7466a8caeab26f239ba4b004e68700d92e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92c59b7466a8caeab26f239ba4b004e68700d92e"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "82f61551f8fc565e913d7d61cdfdbf8347701257", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4231bf26e398d6799facf6bc93caeefd7d16d5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4231bf26e398d6799facf6bc93caeefd7d16d5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4231bf26e398d6799facf6bc93caeefd7d16d5a", "patch": "@@ -1,3 +1,9 @@\n+2018-04-03  Martin Sebor  <msebor@redhat.com>\n+\n+\t* doc/extend.texi (Common Function Attributes): Clarify.\n+\t(const attribute): Likewise.\n+\t(pure attribute): Likewise.\n+\n 2018-04-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/85169"}, {"sha": "62963262427367f001a8777fc7f979bacb22d37c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4231bf26e398d6799facf6bc93caeefd7d16d5a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4231bf26e398d6799facf6bc93caeefd7d16d5a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b4231bf26e398d6799facf6bc93caeefd7d16d5a", "patch": "@@ -2275,8 +2275,11 @@ on a declaration, followed by an attribute specification inside double\n parentheses.  You can specify multiple attributes in a declaration by\n separating them by commas within the double parentheses or by\n immediately following an attribute declaration with another attribute\n-declaration.  @xref{Attribute Syntax}, for the exact rules on\n-attribute syntax and placement.\n+declaration.  @xref{Attribute Syntax}, for the exact rules on attribute\n+syntax and placement.  Compatible attribute specifications on distinct\n+declarations of the same function are merged.  An attribute specification\n+that is not compatible with attributes already applied to a declaration\n+of the same function is ignored with a warning.\n \n GCC also supports attributes on\n variable declarations (@pxref{Variable Attributes}),\n@@ -2499,16 +2502,17 @@ themselves to optimization such as common subexpression elimination.\n The @code{const} attribute imposes greater restrictions on a function's\n definition than the similar @code{pure} attribute below because it prohibits\n the function from reading global variables.  Consequently, the presence of\n-the attribute on a function declarations allows GCC to emit more efficient\n+the attribute on a function declaration allows GCC to emit more efficient\n code for some calls to the function.  Decorating the same function with\n both the @code{const} and the @code{pure} attribute is diagnosed.\n \n @cindex pointer arguments\n Note that a function that has pointer arguments and examines the data\n pointed to must @emph{not} be declared @code{const}.  Likewise, a\n function that calls a non-@code{const} function usually must not be\n-@code{const}.  It does not make sense for a @code{const} function to\n-return @code{void}.\n+@code{const}.  Because a @code{const} function cannot have any side\n+effects it does not make sense for such a function to return @code{void}.\n+Declaring such a function is diagnosed.\n \n @item constructor\n @itemx destructor\n@@ -3218,6 +3222,9 @@ The @code{pure} attribute imposes similar but looser restrictions on\n a function's defintion than the @code{const} attribute: it allows the\n function to read global variables.  Decorating the same function with\n both the @code{pure} and the @code{const} attribute is diagnosed.\n+Because a @code{pure} function cannot have any side effects it does not\n+make sense for such a function to return @code{void}.  Declaring such\n+a function is diagnosed.\n \n @item returns_nonnull\n @cindex @code{returns_nonnull} function attribute"}]}