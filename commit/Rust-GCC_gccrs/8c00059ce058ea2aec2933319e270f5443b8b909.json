{"sha": "8c00059ce058ea2aec2933319e270f5443b8b909", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMwMDA1OWNlMDU4ZWEyYWVjMjkzMzMxOWUyNzBmNTQ0M2I4YjkwOQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-07-31T02:21:41Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-07-31T02:21:41Z"}, "message": "c++: decl_constant_value and unsharing [PR96197]\n\nIn the testcase from the PR we're seeing excessive memory use (> 5GB)\nduring constexpr evaluation, almost all of which is due to the call to\ndecl_constant_value in the VAR_DECL/CONST_DECL branch of\ncxx_eval_constant_expression.  We reach here every time we evaluate an\nARRAY_REF of a constexpr VAR_DECL, and from there decl_constant_value\nmakes an unshared copy of the VAR_DECL's initializer.  But unsharing\nhere is unnecessary because callers of cxx_eval_constant_expression\nalready unshare its result when necessary.\n\nTo fix this excessive unsharing, this patch adds a new defaulted\nparameter unshare_p to decl_really_constant_value and\ndecl_constant_value so that callers can control whether to unshare.\n\nAs a simplification, we can also move the call to unshare_expr in\nconstant_value_1 outside of the loop, since doing unshare_expr on a\nDECL_P is a no-op.\n\nNow that we no longer unshare the result of decl_constant_value and\ndecl_really_constant_value from cxx_eval_constant_expression, memory use\nduring constexpr evaluation for the testcase from the PR falls from ~5GB\nto 15MB according to -ftime-report.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96197\n\t* constexpr.c (cxx_eval_constant_expression) <case CONST_DECL>:\n\tPass false to decl_constant_value and decl_really_constant_value\n\tso that they don't unshare their result.\n\t* cp-tree.h (decl_constant_value): New declaration with an added\n\tbool parameter.\n\t(decl_really_constant_value): Add bool parameter defaulting to\n\ttrue to existing declaration.\n\t* init.c (constant_value_1): Add bool parameter which controls\n\twhether to unshare the initializer before returning.  Call\n\tunshare_expr at most once.\n\t(scalar_constant_value): Pass true to constant_value_1's new\n\tbool parameter.\n\t(decl_really_constant_value): Add bool parameter and forward it\n\tto constant_value_1.\n\t(decl_constant_value): Likewise, but instead define a new\n\toverload with an added bool parameter.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96197\n\t* g++.dg/cpp1y/constexpr-array8.C: New test.", "tree": {"sha": "827a56233a6a312802401b1147f254516ea35b47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/827a56233a6a312802401b1147f254516ea35b47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c00059ce058ea2aec2933319e270f5443b8b909", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c00059ce058ea2aec2933319e270f5443b8b909", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c00059ce058ea2aec2933319e270f5443b8b909", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c00059ce058ea2aec2933319e270f5443b8b909/comments", "author": null, "committer": null, "parents": [{"sha": "d48cca8f21c64bba215f163314562a81e97074e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d48cca8f21c64bba215f163314562a81e97074e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d48cca8f21c64bba215f163314562a81e97074e2"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "b1c1d249c6e86a8dc4004358ea5935a6829d0991", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c00059ce058ea2aec2933319e270f5443b8b909/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c00059ce058ea2aec2933319e270f5443b8b909/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=8c00059ce058ea2aec2933319e270f5443b8b909", "patch": "@@ -5695,9 +5695,9 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t  TREE_CONSTANT (r) = true;\n \t}\n       else if (ctx->strict)\n-\tr = decl_really_constant_value (t);\n+\tr = decl_really_constant_value (t, /*unshare_p=*/false);\n       else\n-\tr = decl_constant_value (t);\n+\tr = decl_constant_value (t, /*unshare_p=*/false);\n       if (TREE_CODE (r) == TARGET_EXPR\n \t  && TREE_CODE (TARGET_EXPR_INITIAL (r)) == CONSTRUCTOR)\n \tr = TARGET_EXPR_INITIAL (r);"}, {"sha": "1e583efd61d26257f8cbc6ca6f23844e9c149e39", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c00059ce058ea2aec2933319e270f5443b8b909/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c00059ce058ea2aec2933319e270f5443b8b909/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8c00059ce058ea2aec2933319e270f5443b8b909", "patch": "@@ -6773,7 +6773,8 @@ extern tree build_vec_delete\t\t\t(location_t, tree, tree,\n extern tree create_temporary_var\t\t(tree);\n extern void initialize_vtbl_ptrs\t\t(tree);\n extern tree scalar_constant_value\t\t(tree);\n-extern tree decl_really_constant_value\t\t(tree);\n+extern tree decl_constant_value\t\t\t(tree, bool);\n+extern tree decl_really_constant_value\t\t(tree, bool = true);\n extern int diagnose_uninitialized_cst_or_ref_member (tree, bool, bool);\n extern tree build_vtbl_address                  (tree);\n extern bool maybe_reject_flexarray_init\t\t(tree, tree);"}, {"sha": "cb9bd2dbfba164fb8afc8a5029f07dae2d2c6aae", "filename": "gcc/cp/init.c", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c00059ce058ea2aec2933319e270f5443b8b909/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c00059ce058ea2aec2933319e270f5443b8b909/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=8c00059ce058ea2aec2933319e270f5443b8b909", "patch": "@@ -2272,10 +2272,12 @@ build_offset_ref (tree type, tree member, bool address_p,\n    recursively); otherwise, return DECL.  If STRICT_P, the\n    initializer is only returned if DECL is a\n    constant-expression.  If RETURN_AGGREGATE_CST_OK_P, it is ok to\n-   return an aggregate constant.  */\n+   return an aggregate constant.  If UNSHARE_P, return an unshared\n+   copy of the initializer.  */\n \n static tree\n-constant_value_1 (tree decl, bool strict_p, bool return_aggregate_cst_ok_p)\n+constant_value_1 (tree decl, bool strict_p, bool return_aggregate_cst_ok_p,\n+\t\t  bool unshare_p)\n {\n   while (TREE_CODE (decl) == CONST_DECL\n \t || decl_constant_var_p (decl)\n@@ -2343,9 +2345,9 @@ constant_value_1 (tree decl, bool strict_p, bool return_aggregate_cst_ok_p)\n \t  && !DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl)\n \t  && DECL_NONTRIVIALLY_INITIALIZED_P (decl))\n \tbreak;\n-      decl = unshare_expr (init);\n+      decl = init;\n     }\n-  return decl;\n+  return unshare_p ? unshare_expr (decl) : decl;\n }\n \n /* If DECL is a CONST_DECL, or a constant VAR_DECL initialized by constant\n@@ -2357,26 +2359,36 @@ tree\n scalar_constant_value (tree decl)\n {\n   return constant_value_1 (decl, /*strict_p=*/true,\n-\t\t\t   /*return_aggregate_cst_ok_p=*/false);\n+\t\t\t   /*return_aggregate_cst_ok_p=*/false,\n+\t\t\t   /*unshare_p=*/true);\n }\n \n-/* Like scalar_constant_value, but can also return aggregate initializers.  */\n+/* Like scalar_constant_value, but can also return aggregate initializers.\n+   If UNSHARE_P, return an unshared copy of the initializer.  */\n \n tree\n-decl_really_constant_value (tree decl)\n+decl_really_constant_value (tree decl, bool unshare_p /*= true*/)\n {\n   return constant_value_1 (decl, /*strict_p=*/true,\n-\t\t\t   /*return_aggregate_cst_ok_p=*/true);\n+\t\t\t   /*return_aggregate_cst_ok_p=*/true,\n+\t\t\t   /*unshare_p=*/unshare_p);\n }\n \n-/* A more relaxed version of scalar_constant_value, used by the\n+/* A more relaxed version of decl_really_constant_value, used by the\n    common C/C++ code.  */\n \n tree\n-decl_constant_value (tree decl)\n+decl_constant_value (tree decl, bool unshare_p)\n {\n   return constant_value_1 (decl, /*strict_p=*/processing_template_decl,\n-\t\t\t   /*return_aggregate_cst_ok_p=*/true);\n+\t\t\t   /*return_aggregate_cst_ok_p=*/true,\n+\t\t\t   /*unshare_p=*/unshare_p);\n+}\n+\n+tree\n+decl_constant_value (tree decl)\n+{\n+  return decl_constant_value (decl, /*unshare_p=*/true);\n }\n \f\n /* Common subroutines of build_new and build_vec_delete.  */"}, {"sha": "339abb69019e1b43b720f8fa98142534f1b08219", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-array8.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c00059ce058ea2aec2933319e270f5443b8b909/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-array8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c00059ce058ea2aec2933319e270f5443b8b909/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-array8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-array8.C?ref=8c00059ce058ea2aec2933319e270f5443b8b909", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/96197\n+// { dg-do compile { target c++14 } }\n+\n+struct S {\n+  S* p = this;\n+};\n+\n+constexpr S ary[5000] = {};\n+\n+constexpr int foo() {\n+  int count = 0;\n+  for (int i = 0; i < 5000; i++)\n+    if (ary[i].p != nullptr)\n+      count++;\n+  return count;\n+}\n+\n+constexpr int bar = foo();"}]}