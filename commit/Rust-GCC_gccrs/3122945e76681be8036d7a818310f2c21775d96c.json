{"sha": "3122945e76681be8036d7a818310f2c21775d96c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEyMjk0NWU3NjY4MWJlODAzNmQ3YTgxODMxMGYyYzIxNzc1ZDk2Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-25T21:12:56Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-25T21:12:56Z"}, "message": "(fold, case *_DIV_EXPR): Correct result when product of constants\noverflows.\n\nFrom-SVN: r6900", "tree": {"sha": "c032a4ada6c674eb4ac98127471c3796a8a25ab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c032a4ada6c674eb4ac98127471c3796a8a25ab1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3122945e76681be8036d7a818310f2c21775d96c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3122945e76681be8036d7a818310f2c21775d96c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3122945e76681be8036d7a818310f2c21775d96c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3122945e76681be8036d7a818310f2c21775d96c/comments", "author": null, "committer": null, "parents": [{"sha": "0273f32645e1c69ccc7a61a5364683dcf4546c62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0273f32645e1c69ccc7a61a5364683dcf4546c62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0273f32645e1c69ccc7a61a5364683dcf4546c62"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "e2f5fc498c5df28c4432e548380cd6a8b9c8dc8c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3122945e76681be8036d7a818310f2c21775d96c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3122945e76681be8036d7a818310f2c21775d96c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3122945e76681be8036d7a818310f2c21775d96c", "patch": "@@ -4008,30 +4008,44 @@ fold (expr)\n \t  tem = const_binop (MULT_EXPR, TREE_OPERAND (arg0, 1), arg1, 0);\n \n \t  /* If it overflows, the result is +/- 1 or zero, depending on\n-\t     the signs of the two constants and the division operation.  */\n+\t     the signs of the constants and remaining operand and on which\n+\t     division operation is being performed.  */\n+\n \t  if (TREE_OVERFLOW (tem))\n \t    {\n+\t      /* 1 if C1 * C2 is negative (i.e., C1 and C2 have\n+\t\t different signs).  */\n+\t      int c_neg = ((tree_int_cst_sgn (arg1) < 0)\n+\t\t\t   == (tree_int_cst_sgn (TREE_OPERAND (arg0, 1)) < 0));\n+\n \t      switch (code)\n \t\t{\n \t\tcase EXACT_DIV_EXPR:\n+\t\t  /* If this overflowed, it couldn't have been exact.  */\n+\t\t  abort ();\n+\n \t\tcase TRUNC_DIV_EXPR:\n-\t\t  tem = integer_zero_node;\n-\t\t  break;\n+\t\t  return omit_one_operand (type, integer_zero_node,\n+\t\t\t\t\t   TREE_OPERAND (arg0, 0));\n+\n \t\tcase FLOOR_DIV_EXPR:\n-\t\t  /* -1 if signs disagree, else 0.  */\n-\t\t  tem = (((tree_int_cst_sgn (TREE_OPERAND (arg0, 1)) < 0)\n-\t\t\t  != (tree_int_cst_sgn (arg1) < 0))\n-\t\t\t ? build_int_2 (-1, -1) : integer_zero_node);\n-\t\t  break;\n+\t\t  /* -1 or zero, depending on signs of remaining\n+\t\t     operand and constants.  */\n+\t\t  tem = build (c_neg ? GE_EXPR : LE_EXPR, integer_type_node,\n+\t\t\t       TREE_OPERAND (arg0, 0),\n+\t\t\t       convert (type, integer_zero_node));\n+\t\t  return fold (build (NEGATE_EXPR, type,\n+\t\t\t\t      convert (type, fold (tem))));\n+\n \t\tcase CEIL_DIV_EXPR:\n-\t\t  /* 1 if signs agree, else 0.  */\n-\t\t  tem = (((tree_int_cst_sgn (TREE_OPERAND (arg0, 1)) < 0)\n-\t\t\t  == (tree_int_cst_sgn (arg1) < 0))\n-\t\t\t ? integer_one_node : integer_zero_node);\n-\t\t  break;\n+\t\t  /* Zero or 1, depending on signs of remaining\n+\t\t     operand and constants.  */\n+\t\t  tem = build (c_neg ? LE_EXPR : GE_EXPR, integer_type_node,\n+\t\t\t       TREE_OPERAND (arg0, 0),\n+\t\t\t       convert (type, integer_zero_node));\n+\t\t  \n+\t\t  return convert (type, fold (tem));\n \t\t}\n-\n-\t      return omit_one_operand (type, tem, TREE_OPERAND (arg0, 0));\n \t    }\n \t  else\n \t    /* If no overflow, divide by C1*C2.  */"}]}