{"sha": "5de8299cec99d5a056149ce23d09d3db5cbf0116", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRlODI5OWNlYzk5ZDVhMDU2MTQ5Y2UyM2QwOWQzZGI1Y2JmMDExNg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-09-02T11:41:22Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-09-02T11:41:22Z"}, "message": "re PR driver/44076 (-MT <target> behaves different as -MT<target> (w/o space))\n\n\tPR driver/44076\n\t* opts.h (struct cl_option): Add alias_arg, neg_alias_arg and\n\talias_target fields.\n\t* opt-functions.awk (opt_sanitized_name): Don't handle\n\tfinline-limit=, Wlarger-than= and ftemplate-depth= specially.\n\t* optc-gen.awk: Generate alias fields.\n\t* opth-gen.awk: Explicitly give values for OPT_* enum constants.\n\tDon't generate such constants for aliases.\n\t* opts-common.c (generate_canonical_option): New.\n\t(decode_cmdline_option): Handle aliases.  Use\n\tgenerate_canonical_option for known options instead of copying the\n\tinput option text.\n\t* doc/options.texi (Alias): Document.\n\t* common.opt (W, Wlarger-than-, aux-info=, finline-limit-,\n\tfstack-check, specs): Mark as aliases.\n\t* gcc.c (driver_handle_option): Canonicalize -L options to joined\n\targuments.\n\t(driver_handle_option): Don't handle OPT_specs.\n\t* opts.c (common_handle_option): Don't handle options marked as\n\taliases.\n\t(enable_warning_as_error): Handle aliases.\n\t* stor-layout.c (layout_decl): Use OPT_Wlarger_than_ instead of\n\tOPT_Wlarger_than_eq.\n\t* tree-optimize.c (tree_rest_of_compilation): Use\n\tOPT_Wlarger_than_ instead of OPT_Wlarger_than_eq.\n\nc-family:\n\t* c.opt (Wcomments, Werror-implicit-function-declaration,\n\tftemplate-depth-, std=c89, std=c9x, std=gnu89, std=gnu9x,\n\tstd=iso9899:1990, std=iso9899:1999, std=iso9899:199x): Mark as\n\taliases.\n\t* c-common.c (option_codes): Use OPT_Wcomment instead of\n\tOPT_Wcomments.\n\t* c-opts.c (warning_as_error_callback, c_common_handle_option):\n\tDon't handle options marked as aliases.\n\njava:\n\t* lang.opt (CLASSPATH, bootclasspath, classpath, encoding,\n\tfCLASSPATH=): Mark as Java options and as aliases.\n\t* jvspec.c (jvgenmain_spec): Don't handle -fCLASSPATH*.\n\t(lang_specific_driver): Don't handle options marked as aliases.\n\t* lang.c (java_handle_option): Don't handle OPT_fCLASSPATH_.\n\ntestsuite:\n\t* gcc.dg/cpp/warn-comments-3.c: New.  Based on warn-comments-2.c\n\tbut using -Werror=comment.\n\t* gcc.dg/cpp/warn-comments.c, gcc.dg/cpp/warn-comments-2.c: Adjust\n\texpected error messages.\n\nFrom-SVN: r163770", "tree": {"sha": "963a2e047cab0d224c64b2b3500d48fa1fd9039f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/963a2e047cab0d224c64b2b3500d48fa1fd9039f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5de8299cec99d5a056149ce23d09d3db5cbf0116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de8299cec99d5a056149ce23d09d3db5cbf0116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5de8299cec99d5a056149ce23d09d3db5cbf0116", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de8299cec99d5a056149ce23d09d3db5cbf0116/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7e4c09b548c7220ac3277b46478bb40438f4a44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e4c09b548c7220ac3277b46478bb40438f4a44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7e4c09b548c7220ac3277b46478bb40438f4a44"}], "stats": {"total": 422, "additions": 301, "deletions": 121}, "files": [{"sha": "3baa67ace2574569c7343b8a5b6c04b8d48c85d8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -1,3 +1,31 @@\n+2010-09-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR driver/44076\n+\t* opts.h (struct cl_option): Add alias_arg, neg_alias_arg and\n+\talias_target fields.\n+\t* opt-functions.awk (opt_sanitized_name): Don't handle\n+\tfinline-limit=, Wlarger-than= and ftemplate-depth= specially.\n+\t* optc-gen.awk: Generate alias fields.\n+\t* opth-gen.awk: Explicitly give values for OPT_* enum constants.\n+\tDon't generate such constants for aliases.\n+\t* opts-common.c (generate_canonical_option): New.\n+\t(decode_cmdline_option): Handle aliases.  Use\n+\tgenerate_canonical_option for known options instead of copying the\n+\tinput option text.\n+\t* doc/options.texi (Alias): Document.\n+\t* common.opt (W, Wlarger-than-, aux-info=, finline-limit-,\n+\tfstack-check, specs): Mark as aliases.\n+\t* gcc.c (driver_handle_option): Canonicalize -L options to joined\n+\targuments.\n+\t(driver_handle_option): Don't handle OPT_specs.\n+\t* opts.c (common_handle_option): Don't handle options marked as\n+\taliases.\n+\t(enable_warning_as_error): Handle aliases.\n+\t* stor-layout.c (layout_decl): Use OPT_Wlarger_than_ instead of\n+\tOPT_Wlarger_than_eq.\n+\t* tree-optimize.c (tree_rest_of_compilation): Use\n+\tOPT_Wlarger_than_ instead of OPT_Wlarger_than_eq.\n+\n 2010-09-02  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (nonmemory_operand): New mode attribute."}, {"sha": "dac0bf4684eca1f401a8eda649ad2e52dca8c3a3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -1,3 +1,14 @@\n+2010-09-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c.opt (Wcomments, Werror-implicit-function-declaration,\n+\tftemplate-depth-, std=c89, std=c9x, std=gnu89, std=gnu9x,\n+\tstd=iso9899:1990, std=iso9899:1999, std=iso9899:199x): Mark as\n+\taliases.\n+\t* c-common.c (option_codes): Use OPT_Wcomment instead of\n+\tOPT_Wcomments.\n+\t* c-opts.c (warning_as_error_callback, c_common_handle_option):\n+\tDon't handle options marked as aliases.\n+\n 2010-08-25  Richard Guenther  <rguenther@suse.de>\n \n \t* c-common.c (c_common_get_alias_set): Remove special"}, {"sha": "6b9a9676af037abbe72e1b2ce38c11bab07e83a2", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -8150,7 +8150,7 @@ struct reason_option_codes_t\n \n static const struct reason_option_codes_t option_codes[] = {\n   {CPP_W_DEPRECATED,\t\t\tOPT_Wdeprecated},\n-  {CPP_W_COMMENTS,\t\t\tOPT_Wcomments},\n+  {CPP_W_COMMENTS,\t\t\tOPT_Wcomment},\n   {CPP_W_TRIGRAPHS,\t\t\tOPT_Wtrigraphs},\n   {CPP_W_MULTICHAR,\t\t\tOPT_Wmultichar},\n   {CPP_W_TRADITIONAL,\t\t\tOPT_Wtraditional},"}, {"sha": "d9b212c4e2b2e0353e91c9df3a681f42da99290c", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -161,7 +161,6 @@ warning_as_error_callback (int option_index)\n \tbreak;\n \n       case OPT_Wcomment:\n-      case OPT_Wcomments:\n \tcpp_opts->warn_comments = 1;\n \tbreak;\n \n@@ -493,7 +492,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_Wcomment:\n-    case OPT_Wcomments:\n       cpp_opts->warn_comments = value;\n       break;\n \n@@ -521,13 +519,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       global_dc->warning_as_error_requested = value;\n       break;\n \n-    case OPT_Werror_implicit_function_declaration:\n-      /* For backward compatibility, this is the same as\n-\t -Werror=implicit-function-declaration.  */\n-      enable_warning_as_error (\"implicit-function-declaration\", value,\n-\t\t\t       CL_C | CL_ObjC, handlers);\n-      break;\n-\n     case OPT_Wformat:\n       set_Wformat (value);\n       break;\n@@ -752,8 +743,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_ftemplate_depth_:\n-      /* Kept for backwards compatibility.  */\n-    case OPT_ftemplate_depth_eq:\n       max_tinst_depth = value;\n       break;\n \n@@ -865,30 +854,23 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \tset_std_cxx0x (code == OPT_std_c__0x /* ISO */);\n       break;\n \n-    case OPT_std_c89:\n     case OPT_std_c90:\n-    case OPT_std_iso9899_1990:\n     case OPT_std_iso9899_199409:\n       if (!preprocessing_asm_p)\n \tset_std_c89 (code == OPT_std_iso9899_199409 /* c94 */, true /* ISO */);\n       break;\n \n-    case OPT_std_gnu89:\n     case OPT_std_gnu90:\n       if (!preprocessing_asm_p)\n \tset_std_c89 (false /* c94 */, false /* ISO */);\n       break;\n \n     case OPT_std_c99:\n-    case OPT_std_c9x:\n-    case OPT_std_iso9899_1999:\n-    case OPT_std_iso9899_199x:\n       if (!preprocessing_asm_p)\n \tset_std_c99 (true /* ISO */);\n       break;\n \n     case OPT_std_gnu99:\n-    case OPT_std_gnu9x:\n       if (!preprocessing_asm_p)\n \tset_std_c99 (false /* ISO */);\n       break;"}, {"sha": "5cba0ded57a7b74a5c73b165d7c2b5148b6c0b85", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -164,7 +164,7 @@ C ObjC C++ ObjC++ Warning\n Warn about possibly nested block comments, and C++ comments spanning more than one physical line\n \n Wcomments\n-C ObjC C++ ObjC++ Warning\n+C ObjC C++ ObjC++ Warning Alias(Wcomment)\n Synonym for -Wcomment\n \n Wconversion\n@@ -216,7 +216,7 @@ C ObjC C++ ObjC++\n ; Documented in common.opt\n \n Werror-implicit-function-declaration\n-C ObjC RejectNegative Warning\n+C ObjC RejectNegative Warning Alias(Werror=, implicit-function-declaration)\n This switch is deprecated; use -Werror=implicit-function-declaration instead\n \n Wfloat-equal\n@@ -804,7 +804,7 @@ C ObjC C++ ObjC++ Joined RejectNegative UInteger\n -ftabstop=<number>\tDistance between tab stops for column reporting\n \n ftemplate-depth-\n-C++ ObjC++ Joined RejectNegative UInteger Undocumented\n+C++ ObjC++ Joined RejectNegative Undocumented Alias(ftemplate-depth=)\n \n ftemplate-depth=\n C++ ObjC++ Joined RejectNegative UInteger\n@@ -972,7 +972,7 @@ C ObjC\n Conform to the ISO 201X C standard draft (experimental and incomplete support)\n \n std=c89\n-C ObjC\n+C ObjC Alias(std=c90)\n Conform to the ISO 1990 C standard\n \n std=c90\n@@ -984,7 +984,7 @@ C ObjC\n Conform to the ISO 1999 C standard\n \n std=c9x\n-C ObjC\n+C ObjC Alias(std=c99)\n Deprecated in favor of -std=c99\n \n std=gnu++98\n@@ -1003,7 +1003,7 @@ C ObjC\n Conform to the ISO 201X C standard draft with GNU extensions (experimental and incomplete support)\n \n std=gnu89\n-C ObjC\n+C ObjC Alias(std=gnu90)\n Conform to the ISO 1990 C standard with GNU extensions\n \n std=gnu90\n@@ -1015,23 +1015,23 @@ C ObjC\n Conform to the ISO 1999 C standard with GNU extensions\n \n std=gnu9x\n-C ObjC\n+C ObjC Alias(std=gnu99)\n Deprecated in favor of -std=gnu99\n \n std=iso9899:1990\n-C ObjC\n+C ObjC Alias(std=c90)\n Conform to the ISO 1990 C standard\n \n std=iso9899:199409\n C ObjC\n Conform to the ISO 1990 C standard as amended in 1994\n \n std=iso9899:1999\n-C ObjC\n+C ObjC Alias(std=c99)\n Conform to the ISO 1999 C standard\n \n std=iso9899:199x\n-C ObjC\n+C ObjC Alias(std=c99)\n Deprecated in favor of -std=iso9899:1999\n \n traditional-cpp"}, {"sha": "d30e41c86515e0dcad94a2b0628cd3325b358942", "filename": "gcc/common.opt", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -88,7 +88,7 @@ S\n Driver\n \n W\n-Common RejectNegative Var(extra_warnings) Warning\n+Common RejectNegative Warning Alias(Wextra)\n This switch is deprecated; use -Wextra instead\n \n Wa,\n@@ -153,7 +153,7 @@ Common Var(warn_inline) Warning\n Warn when an inlined function cannot be inlined\n \n Wlarger-than-\n-Common RejectNegative Joined UInteger Warning Undocumented\n+Common RejectNegative Joined Warning Undocumented Alias(Wlarger-than=)\n \n Wlarger-than=\n Common RejectNegative Joined UInteger Warning\n@@ -301,7 +301,7 @@ Common Separate\n -aux-info <file>\tEmit declaration information into <file>\n \n aux-info=\n-Common Joined\n+Common Joined Alias(aux-info)\n \n auxbase\n Common Separate RejectDriver\n@@ -750,7 +750,7 @@ Common Report Var(flag_inline_functions_called_once) Init(1) Optimization\n Integrate functions called once into their callers\n \n finline-limit-\n-Common RejectNegative Joined UInteger\n+Common RejectNegative Joined Alias(finline-limit=)\n \n finline-limit=\n Common RejectNegative Joined UInteger\n@@ -1259,7 +1259,7 @@ Common Report RejectNegative Joined\n -fstack-check=[no|generic|specific]\tInsert stack checking code into the program\n \n fstack-check\n-Common Report\n+Common Alias(fstack-check=, specific, no)\n Insert stack checking code into the program.  Same as -fstack-check=specific\n \n fstack-limit\n@@ -1755,7 +1755,7 @@ shared-libgcc\n Driver\n \n specs\n-Driver Separate\n+Driver Separate Alias(specs=)\n \n specs=\n Driver Joined"}, {"sha": "46610f03ad5f9b500bc632cd0e5601bb61bf2840", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -247,6 +247,32 @@ The main purpose of this property is to support synonymous options.\n The first option should use @samp{Mask(@var{name})} and the others\n should use @samp{Mask(@var{name}) MaskExists}.\n \n+@item Alias(@var{opt})\n+@itemx Alias(@var{opt}, @var{arg})\n+@itemx Alias(@var{opt}, @var{posarg}, @var{negarg})\n+The option is an alias for @option{-@var{opt}}.  In the first form,\n+any argument passed to the alias is considered to be passed to\n+@option{-@var{opt}}, and @option{-@var{opt}} is considered to be\n+negated if the alias is used in negated form.  In the second form, the\n+alias may not be negated or have an argument, and @var{posarg} is\n+considered to be passed as an argument to @option{-@var{opt}}.  In the\n+third form, the alias may not have an argument, if the alias is used\n+in the positive form then @var{posarg} is considered to be passed to\n+@option{-@var{opt}}, and if the alias is used in the negative form\n+then @var{negarg} is considered to be passed to @option{-@var{opt}}.\n+\n+Aliases should not specify @code{Var} or @code{Mask} or\n+@code{UInteger}.  Aliases should normally specify the same languages\n+as the target of the alias; the flags on the target will be used to\n+determine any diagnostic for use of an option for the wrong language,\n+while those on the alias will be used to identify what command-line\n+text is the option and what text is any argument to that option.\n+\n+When an @code{Alias} definition is used for an option, driver specs do\n+not need to handle it and no @samp{OPT_} enumeration value is defined\n+for it; only the canonical form of the option will be seen in those\n+places.\n+\n @item Report\n The state of the option should be printed by @option{-fverbose-asm}.\n "}, {"sha": "61afb74224f1bf4a1630a61211f054b85f94c06a", "filename": "gcc/gcc.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -3742,6 +3742,12 @@ driver_handle_option (const struct cl_decoded_option *decoded,\n       do_save = false;\n       break;\n \n+    case OPT_L:\n+      /* Similarly, canonicalize -L for linkers that may not accept\n+\t separate arguments.  */\n+      save_switch (concat (\"-L\", arg, NULL), 0, NULL, validated);\n+      return true;\n+\n     case OPT_save_temps:\n       save_temps_flag = SAVE_TEMPS_CWD;\n       validated = true;\n@@ -3772,7 +3778,6 @@ driver_handle_option (const struct cl_decoded_option *decoded,\n \t processing.  */\n       break;\n \n-    case OPT_specs:\n     case OPT_specs_:\n       {\n \tstruct user_specs *user = XNEW (struct user_specs);"}, {"sha": "f6022e055b379ebd5c8126bb0167706774e33f6a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -1,3 +1,11 @@\n+2010-09-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* lang.opt (CLASSPATH, bootclasspath, classpath, encoding,\n+\tfCLASSPATH=): Mark as Java options and as aliases.\n+\t* jvspec.c (jvgenmain_spec): Don't handle -fCLASSPATH*.\n+\t(lang_specific_driver): Don't handle options marked as aliases.\n+\t* lang.c (java_handle_option): Don't handle OPT_fCLASSPATH_.\n+\n 2010-08-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* Make-lang.in (jvspec.o): Update dependencies."}, {"sha": "792dda0dad5e2065fd70f00c66d55f6ffd3ea7b5", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -69,7 +69,7 @@ static const char jvgenmain_spec[] =\n \t\t   %<fuse-boehm-gc %<fhash-synchronization %<fjni\\\n \t\t   %<findirect-dispatch %<fnew-verifier\\\n \t\t   %<fno-store-check %<foutput-class-dir\\\n-\t\t   %<fclasspath* %<fCLASSPATH* %<fbootclasspath*\\\n+\t\t   %<fclasspath* %<fbootclasspath*\\\n \t\t   %<fextdirs*\\\n \t\t   %<fuse-divide-subroutine %<fno-use-divide-subroutine\\\n \t\t   %<fuse-atomic-builtins %<fno-use-atomic-builtins\\\n@@ -299,10 +299,8 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  saw_o = 1;\n \t  break;\n \n-\tcase OPT_classpath:\n-\tcase OPT_bootclasspath:\n-\tcase OPT_CLASSPATH:\n-\tcase OPT_encoding:\n+\tcase OPT_fclasspath_:\n+\tcase OPT_fbootclasspath_:\n \tcase OPT_extdirs:\n \t  added -= 1;\n \t  break;\n@@ -514,15 +512,11 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  --j;\n \t  continue;\n \n-\tcase OPT_classpath:\n-\tcase OPT_CLASSPATH:\n-\tcase OPT_fCLASSPATH_:\n \tcase OPT_fclasspath_:\n \t  jcf_path_classpath_arg (decoded_options[i].arg);\n \t  --j;\n \t  continue;\n \n-\tcase OPT_bootclasspath:\n \tcase OPT_fbootclasspath_:\n \t  jcf_path_bootclasspath_arg (decoded_options[i].arg);\n \t  --j;\n@@ -533,11 +527,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  --j;\n \t  continue;\n \n-\tcase OPT_encoding:\n-\t  generate_option (OPT_fencoding_, decoded_options[i].arg, 1,\n-\t\t\t   CL_DRIVER, &new_decoded_options[j]);\n-\t  continue;\n-\n \tcase OPT_L:\n \t  if (spec_file == NULL)\n \t    spec_file = find_spec_file (decoded_options[i].arg);"}, {"sha": "1633c02194b389cc445dc6dadf37b12a8f9a264f", "filename": "gcc/java/lang.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -261,7 +261,6 @@ java_handle_option (size_t scode, const char *arg, int value,\n \n     case OPT_faux_classpath:\n     case OPT_fclasspath_:\n-    case OPT_fCLASSPATH_:\n       jcf_path_classpath_arg (arg);\n       break;\n "}, {"sha": "af1dff1c0f46769b52a0e3ea3437544b3f2962be", "filename": "gcc/java/lang.opt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fjava%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fjava%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.opt?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -29,7 +29,7 @@ Driver\n ; Java driver option in fact distinct from C-family option with the same name.\n \n CLASSPATH\n-Driver Separate\n+Java Separate Alias(fclasspath=)\n \n D\n Driver Joined Separate\n@@ -88,19 +88,19 @@ Java Var(flag_redundant)\n Warn if modifiers are specified when not necessary\n \n bootclasspath\n-Driver Separate\n+Java Separate Alias(fbootclasspath=)\n \n classpath\n-Driver Separate\n+Java Separate Alias(fclasspath=)\n \n encoding\n-Driver Separate\n+Java Separate Alias(fencoding=)\n \n extdirs\n Driver Separate\n \n fCLASSPATH=\n-Java JoinedOrMissing RejectNegative\n+Java JoinedOrMissing RejectNegative Alias(fclasspath=)\n --CLASSPATH\tDeprecated; use --classpath instead\n \n faux-classpath"}, {"sha": "c57a7694de319828b09ffcb8eb192e1ab67a8ba6", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -201,9 +201,6 @@ function var_ref(name, flags)\n # Given the option called NAME return a sanitized version of its name.\n function opt_sanitized_name(name)\n {\n-\tif (name == \"finline-limit=\" || name == \"Wlarger-than=\" \\\n-\t    || name == \"ftemplate-depth=\")\n-\t\tname = name \"eq\"\n \tif (name == \"gdwarf+\")\n \t\tname = \"gdwarfplus\"\n \tgsub (\"[^A-Za-z0-9]\", \"_\", name)"}, {"sha": "4376d72dedd4bc1c9023c111e93f76ef634de61e", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -201,6 +201,36 @@ for (i = 0; i < n_opts; i++) {\n \telse\n \t\tmissing_arg_error = quote missing_arg_error quote\n \n+\talias_arg = opt_args(\"Alias\", flags[i])\n+\tif (alias_arg == \"\") {\n+\t\talias_data = \"NULL, NULL, N_OPTS\"\n+\t} else {\n+\t\talias_opt = nth_arg(0, alias_arg)\n+\t\talias_posarg = nth_arg(1, alias_arg)\n+\t\talias_negarg = nth_arg(2, alias_arg)\n+\n+\t\tif (var_ref(opts[i], flags[i]) != \"0\")\n+\t\t\tprint \"#error Alias setting variable\"\n+\n+\t\tif (alias_posarg != \"\" && alias_negarg == \"\") {\n+\t\t\tif (!flag_set_p(\"RejectNegative\", flags[i]) \\\n+\t\t\t    && opts[i] ~ \"^[Wfm]\")\n+\t\t\t\tprint \"#error Alias with single argument \" \\\n+\t\t\t\t\t\"allowing negative form\"\n+\t\t}\n+\n+\t\talias_opt = opt_enum(alias_opt)\n+\t\tif (alias_posarg == \"\")\n+\t\t\talias_posarg = \"NULL\"\n+\t\telse\n+\t\t\talias_posarg = quote alias_posarg quote\n+\t\tif (alias_negarg == \"\")\n+\t\t\talias_negarg = \"NULL\"\n+\t\telse\n+\t\t\talias_negarg = quote alias_negarg quote\n+\t\talias_data = alias_posarg \", \" alias_negarg \", \" alias_opt\n+\t}\n+\n \tneg = opt_args(\"Negative\", flags[i]);\n \tif (neg != \"\")\n \t\tidx = indices[neg]\n@@ -216,9 +246,9 @@ for (i = 0; i < n_opts; i++) {\n \t}\n \t# Split the printf after %u to work around an ia64-hp-hpux11.23\n \t# awk bug.\n-\tprintf(\"  { %c-%s%c,\\n    %s,\\n    %s,\\n    %s, %u,\",\n+\tprintf(\"  { %c-%s%c,\\n    %s,\\n    %s,\\n    %s, %s, %u,\",\n \t       quote, opts[i], quote, hlp, missing_arg_error,\n-\t       back_chain[i], len)\n+\t       alias_data, back_chain[i], len)\n \tprintf(\" %d,\\n\", idx)\n \tcondition = opt_args(\"Condition\", flags[i])\n \tcl_flags = switch_flags(flags[i])"}, {"sha": "cfeccfe47aad9d40061025e01fb0fe7f77713d5d", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -321,6 +321,7 @@ print \"{\"\n for (i = 0; i < n_opts; i++)\n \tback_chain[i] = \"N_OPTS\";\n \n+enum_value = 0\n for (i = 0; i < n_opts; i++) {\n \t# Combine the flags of identical switches.  Switches\n \t# appear many times if they are handled by many front\n@@ -332,6 +333,12 @@ for (i = 0; i < n_opts; i++) {\n \n \tlen = length (opts[i]);\n \tenum = opt_enum(opts[i])\n+\tenum_string = enum \" = \" enum_value \",\"\n+\n+\t# Aliases do not get enumeration names.\n+\tif (flag_set_p(\"Alias.*\", flags[i])) {\n+\t\tenum_string = \"/* \" enum_string \" */\"\n+\t}\n \n \t# If this switch takes joined arguments, back-chain all\n \t# subsequent switches to it for which it is a prefix.  If\n@@ -346,7 +353,8 @@ for (i = 0; i < n_opts; i++) {\n \t\t}\n \t}\n \n-\ts = substr(\"                                         \", length (enum))\n+\ts = substr(\"                                          \",\n+\t\t   length (enum_string))\n \tif (i + 1 == n_opts)\n \t\tcomma = \"\"\n \n@@ -355,7 +363,8 @@ for (i = 0; i < n_opts; i++) {\n \telse\n \t\thlp = \"N_(\\\"\" help[i] \"\\\")\";\n \n-\tprint \"  \" enum \",\" s \"/* -\" opts[i] \" */\"\n+\tprint \"  \" enum_string s \"/* -\" opts[i] \" */\"\n+\tenum_value++\n }\n \n print \"  N_OPTS,\""}, {"sha": "07758967e6d6e7c86ac33825cc1808685e08afdb", "filename": "gcc/opts-common.c", "status": "modified", "additions": 126, "deletions": 31, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -144,6 +144,58 @@ option_ok_for_language (const struct cl_option *option,\n   return true;\n }\n \n+\n+/* Fill in the canonical option part of *DECODED with an option\n+   described by OPT_INDEX, ARG and VALUE.  */\n+\n+static void\n+generate_canonical_option (size_t opt_index, const char *arg, int value,\n+\t\t\t   struct cl_decoded_option *decoded)\n+{\n+  const struct cl_option *option = &cl_options[opt_index];\n+  const char *opt_text = option->opt_text;\n+\n+  if (value == 0\n+      && !(option->flags & CL_REJECT_NEGATIVE)\n+      && (opt_text[1] == 'W' || opt_text[1] == 'f' || opt_text[1] == 'm'))\n+    {\n+      char *t = XNEWVEC (char, option->opt_len + 5);\n+      t[0] = '-';\n+      t[1] = opt_text[1];\n+      t[2] = 'n';\n+      t[3] = 'o';\n+      t[4] = '-';\n+      memcpy (t + 5, opt_text + 2, option->opt_len);\n+      opt_text = t;\n+    }\n+\n+  decoded->canonical_option[2] = NULL;\n+  decoded->canonical_option[3] = NULL;\n+\n+  if (arg)\n+    {\n+      if (option->flags & CL_SEPARATE)\n+\t{\n+\t  decoded->canonical_option[0] = opt_text;\n+\t  decoded->canonical_option[1] = arg;\n+\t  decoded->canonical_option_num_elements = 2;\n+\t}\n+      else\n+\t{\n+\t  gcc_assert (option->flags & CL_JOINED);\n+\t  decoded->canonical_option[0] = concat (opt_text, arg, NULL);\n+\t  decoded->canonical_option[1] = NULL;\n+\t  decoded->canonical_option_num_elements = 1;\n+\t}\n+    }\n+  else\n+    {\n+      decoded->canonical_option[0] = opt_text;\n+      decoded->canonical_option[1] = NULL;\n+      decoded->canonical_option_num_elements = 1;\n+    }\n+}\n+\n /* Decode the switch beginning at ARGV for the language indicated by\n    LANG_MASK (including CL_COMMON and CL_TARGET if applicable), into\n    the structure *DECODED.  Returns the number of switches\n@@ -245,13 +297,64 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n \tresult = 1;\n     }\n \n+  if (arg == NULL && (separate_arg_flag || joined_arg_flag))\n+    errors |= CL_ERR_MISSING_ARG;\n+\n+  /* Is this option an alias?  */\n+  if (option->alias_target != N_OPTS)\n+    {\n+      size_t new_opt_index = option->alias_target;\n+      const struct cl_option *new_option = &cl_options[new_opt_index];\n+\n+      /* The new option must not be an alias itself.  */\n+      gcc_assert (new_option->alias_target == N_OPTS);\n+\n+      if (option->neg_alias_arg)\n+\t{\n+\t  gcc_assert (option->alias_arg != NULL);\n+\t  gcc_assert (arg == NULL);\n+\t  if (value)\n+\t    arg = option->alias_arg;\n+\t  else\n+\t    arg = option->neg_alias_arg;\n+\t  value = 1;\n+\t}\n+      else if (option->alias_arg)\n+\t{\n+\t  gcc_assert (value == 1);\n+\t  gcc_assert (arg == NULL);\n+\t  arg = option->alias_arg;\n+\t}\n+\n+      opt_index = new_opt_index;\n+      option = new_option;\n+\n+      if (value == 0)\n+\tgcc_assert (!(option->flags & CL_REJECT_NEGATIVE));\n+\n+      /* Recompute what arguments are allowed.  */\n+      separate_arg_flag = ((option->flags & CL_SEPARATE)\n+\t\t\t   && !((option->flags & CL_NO_DRIVER_ARG)\n+\t\t\t\t&& (lang_mask & CL_DRIVER)));\n+      joined_arg_flag = (option->flags & CL_JOINED) != 0;\n+\n+      if (!(errors & CL_ERR_MISSING_ARG))\n+\t{\n+\t  if (separate_arg_flag || joined_arg_flag)\n+\t    gcc_assert (arg != NULL);\n+\t  else\n+\t    gcc_assert (arg == NULL);\n+\t}\n+\n+      /* Recheck for disabled options.  */\n+      if (option->flags & CL_DISABLED)\n+\terrors |= CL_ERR_DISABLED;\n+    }\n+\n   /* Check if this is a switch for a different front end.  */\n   if (!option_ok_for_language (option, lang_mask))\n     errors |= CL_ERR_WRONG_LANG;\n \n-  if (arg == NULL && (separate_arg_flag || joined_arg_flag))\n-    errors |= CL_ERR_MISSING_ARG;\n-\n   /* If the switch takes an integer, convert it.  */\n   if (arg && (option->flags & CL_UINTEGER))\n     {\n@@ -296,12 +399,17 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n     {\n       if (i < result)\n \t{\n-\t  decoded->canonical_option[i] = argv[i];\n+\t  if (opt_index == OPT_SPECIAL_unknown)\n+\t    decoded->canonical_option[i] = argv[i];\n+\t  else\n+\t    decoded->canonical_option[i] = NULL;\n \t  total_len += strlen (argv[i]) + 1;\n \t}\n       else\n \tdecoded->canonical_option[i] = NULL;\n     }\n+  if (opt_index != OPT_SPECIAL_unknown)\n+    generate_canonical_option (opt_index, arg, value, decoded);\n   decoded->orig_option_with_args_text = p = XNEWVEC (char, total_len);\n   for (i = 0; i < result; i++)\n     {\n@@ -571,39 +679,26 @@ generate_option (size_t opt_index, const char *arg, int value,\n \n   decoded->opt_index = opt_index;\n   decoded->arg = arg;\n-  decoded->canonical_option[2] = NULL;\n-  decoded->canonical_option[3] = NULL;\n   decoded->value = value;\n   decoded->errors = (option_ok_for_language (option, lang_mask)\n \t\t     ? 0\n \t\t     : CL_ERR_WRONG_LANG);\n \n-  if (arg)\n+  generate_canonical_option (opt_index, arg, value, decoded);\n+  switch (decoded->canonical_option_num_elements)\n     {\n-      if (option->flags & CL_SEPARATE)\n-\t{\n-\t  decoded->orig_option_with_args_text = concat (option->opt_text, \" \",\n-\t\t\t\t\t\t\targ, NULL);\n-\t  decoded->canonical_option[0] = option->opt_text;\n-\t  decoded->canonical_option[1] = arg;\n-\t  decoded->canonical_option_num_elements = 2;\n-\t}\n-      else\n-\t{\n-\t  gcc_assert (option->flags & CL_JOINED);\n-\t  decoded->orig_option_with_args_text = concat (option->opt_text, arg,\n-\t\t\t\t\t\t\tNULL);\n-\t  decoded->canonical_option[0] = decoded->orig_option_with_args_text;\n-\t  decoded->canonical_option[1] = NULL;\n-\t  decoded->canonical_option_num_elements = 1;\n-\t}\n-    }\n-  else\n-    {\n-      decoded->orig_option_with_args_text = option->opt_text;\n-      decoded->canonical_option[0] = option->opt_text;\n-      decoded->canonical_option[1] = NULL;\n-      decoded->canonical_option_num_elements = 1;\n+    case 1:\n+      decoded->orig_option_with_args_text = decoded->canonical_option[0];\n+      break;\n+\n+    case 2:\n+      decoded->orig_option_with_args_text\n+\t= concat (decoded->canonical_option[0], \" \",\n+\t\t  decoded->canonical_option[1], NULL);\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n     }\n }\n "}, {"sha": "ab7b45d5244183d00ccb8def02a33ae698dd7a6e", "filename": "gcc/opts.c", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -1598,11 +1598,6 @@ common_handle_option (const struct cl_decoded_option *decoded,\n       break;\n \n     case OPT_Wlarger_than_:\n-      /* This form corresponds to -Wlarger-than-.\n-\t Kept for backward compatibility.\n-\t Don't use it as the first argument of warning().  */\n-\n-    case OPT_Wlarger_than_eq:\n       larger_than_size = value;\n       warn_larger_than = value != -1;\n       break;\n@@ -1643,7 +1638,6 @@ common_handle_option (const struct cl_decoded_option *decoded,\n       break;\n \n     case OPT_aux_info:\n-    case OPT_aux_info_:\n       aux_info_file_name = arg;\n       flag_gen_aux_info = 1;\n       break;\n@@ -1754,7 +1748,6 @@ common_handle_option (const struct cl_decoded_option *decoded,\n       break;\n \n     case OPT_finline_limit_:\n-    case OPT_finline_limit_eq:\n       set_param_value (\"max-inline-insns-single\", value / 2);\n       set_param_value (\"max-inline-insns-auto\", value / 2);\n       break;\n@@ -1943,18 +1936,6 @@ common_handle_option (const struct cl_decoded_option *decoded,\n \twarning (0, \"unknown stack check parameter \\\"%s\\\"\", arg);\n       break;\n \n-    case OPT_fstack_check:\n-      /* This is the same as the \"specific\" mode above.  */\n-      if (value)\n-\tflag_stack_check = STACK_CHECK_BUILTIN\n-\t\t\t   ? FULL_BUILTIN_STACK_CHECK\n-\t\t\t   : STACK_CHECK_STATIC_BUILTIN\n-\t\t\t     ? STATIC_BUILTIN_STACK_CHECK\n-\t\t\t     : GENERIC_STACK_CHECK;\n-      else\n-\tflag_stack_check = NO_STACK_CHECK;\n-      break;\n-\n     case OPT_fstack_limit:\n       /* The real switch is -fno-stack-limit.  */\n       if (value)\n@@ -2377,8 +2358,11 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask,\n     }\n   else\n     {\n+      const struct cl_option *option = &cl_options[option_index];\n       const diagnostic_t kind = value ? DK_ERROR : DK_WARNING;\n \n+      if (option->alias_target != N_OPTS)\n+\toption_index = option->alias_target;\n       diagnostic_classify_diagnostic (global_dc, option_index, kind,\n \t\t\t\t      UNKNOWN_LOCATION);\n       if (kind == DK_ERROR)"}, {"sha": "f3e01440a08b577f700437c6ee1891ab85b9c33a", "filename": "gcc/opts.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -45,6 +45,9 @@ struct cl_option\n   const char *opt_text;\n   const char *help;\n   const char *missing_argument_error;\n+  const char *alias_arg;\n+  const char *neg_alias_arg;\n+  unsigned short alias_target;\n   unsigned short back_chain;\n   unsigned char opt_len;\n   int neg_index;"}, {"sha": "7ffef4d849199c07b31acf7851c7393cc00b9593", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -675,9 +675,9 @@ layout_decl (tree decl, unsigned int known_align)\n \t  int size_as_int = TREE_INT_CST_LOW (size);\n \n \t  if (compare_tree_int (size, size_as_int) == 0)\n-\t    warning (OPT_Wlarger_than_eq, \"size of %q+D is %d bytes\", decl, size_as_int);\n+\t    warning (OPT_Wlarger_than_, \"size of %q+D is %d bytes\", decl, size_as_int);\n \t  else\n-\t    warning (OPT_Wlarger_than_eq, \"size of %q+D is larger than %wd bytes\",\n+\t    warning (OPT_Wlarger_than_, \"size of %q+D is larger than %wd bytes\",\n                      decl, larger_than_size);\n \t}\n     }"}, {"sha": "83c17e4b56f69654b91255ae9d9a8fd42dd24368", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -1,3 +1,10 @@\n+2010-09-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/cpp/warn-comments-3.c: New.  Based on warn-comments-2.c\n+\tbut using -Werror=comment.\n+\t* gcc.dg/cpp/warn-comments.c, gcc.dg/cpp/warn-comments-2.c: Adjust\n+\texpected error messages.\n+\n 2010-09-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/stack-usage-1.c: Adjust on i386/Darwin."}, {"sha": "492b99cb956eff092c78565a1bd84f64f13a23ea", "filename": "gcc/testsuite/gcc.dg/cpp/warn-comments-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments-2.c?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -1,7 +1,7 @@\n // { dg-do preprocess }\n // { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=comments\" }\n /* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n-/* /* */  // { dg-error \"\\\"\\.\\*\\\" within comment .-Werror=comments.\" }\n+/* /* */  // { dg-error \"\\\"\\.\\*\\\" within comment .-Werror=comment.\" }\n \n // \\\n-          // { dg-error \"multi-line comment .-Werror=comments.\" \"multi-line\" { target *-*-* } 6 }\n+          // { dg-error \"multi-line comment .-Werror=comment.\" \"multi-line\" { target *-*-* } 6 }"}, {"sha": "639fa10158ca973bef6645787204b52578fd15a6", "filename": "gcc/testsuite/gcc.dg/cpp/warn-comments-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments-3.c?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=comment\" }\n+/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n+/* /* */  // { dg-error \"\\\"\\.\\*\\\" within comment .-Werror=comment.\" }\n+\n+// \\\n+          // { dg-error \"multi-line comment .-Werror=comment.\" \"multi-line\" { target *-*-* } 6 }"}, {"sha": "1cdf75cf273957896f43cb76c65241b296da28c0", "filename": "gcc/testsuite/gcc.dg/cpp/warn-comments.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments.c?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -1,7 +1,7 @@\n // { dg-do preprocess }\n // { dg-options \"-std=gnu99 -fdiagnostics-show-option -Wcomments\" }\n \n-/* /* */  // { dg-warning \"\\\"\\.\\*\\\" within comment .-Wcomments.\" }\n+/* /* */  // { dg-warning \"\\\"\\.\\*\\\" within comment .-Wcomment.\" }\n \n // \\\n-          // { dg-warning \"multi-line comment .-Wcomments.\" \"multi-line\" { target *-*-* } 6 }\n+          // { dg-warning \"multi-line comment .-Wcomment.\" \"multi-line\" { target *-*-* } 6 }"}, {"sha": "ce18d6f1febf82fb0aafa6b1ec51abd766c997e2", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5de8299cec99d5a056149ce23d09d3db5cbf0116/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=5de8299cec99d5a056149ce23d09d3db5cbf0116", "patch": "@@ -477,10 +477,10 @@ tree_rest_of_compilation (tree fndecl)\n \t    = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (ret_type));\n \n \t  if (compare_tree_int (TYPE_SIZE_UNIT (ret_type), size_as_int) == 0)\n-\t    warning (OPT_Wlarger_than_eq, \"size of return value of %q+D is %u bytes\",\n+\t    warning (OPT_Wlarger_than_, \"size of return value of %q+D is %u bytes\",\n                      fndecl, size_as_int);\n \t  else\n-\t    warning (OPT_Wlarger_than_eq, \"size of return value of %q+D is larger than %wd bytes\",\n+\t    warning (OPT_Wlarger_than_, \"size of return value of %q+D is larger than %wd bytes\",\n                      fndecl, larger_than_size);\n \t}\n     }"}]}