{"sha": "beb04ce9d4d6b30ca881ff7f5ebd143433f84722", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmViMDRjZTlkNGQ2YjMwY2E4ODFmZjdmNWViZDE0MzQzM2Y4NDcyMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-01-05T20:03:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-01-05T20:03:22Z"}, "message": "Define new filesystem::__file_clock type\n\nIn C++17 the clock used for filesystem::file_time_type is unspecified,\nallowing it to be chrono::system_clock. The C++2a draft requires it to\nbe a distinct type, with additional member functions to convert to/from\nother clocks (either the system clock or UTC). In order to avoid an ABI\nchange later, this patch defines a new distinct type now, which will be\nused for std::chrono::file_clock later.\n\n\t* include/bits/fs_fwd.h (__file_clock): Define new clock.\n\t(file_time_type): Redefine in terms of __file_clock.\n\t* src/filesystem/ops-common.h (file_time): Add FIXME comment about\n\toverflow.\n\t* src/filesystem/std-ops.cc (is_set(perm_options, perm_options)): Give\n\tinternal linkage.\n\t(internal_file_lock): New helper type for accessing __file_clock.\n\t(do_copy_file): Use internal_file_lock to convert system time to\n\tfile_time_type.\n\t(last_write_time(const path&, error_code&)): Likewise.\n\t(last_write_time(const path&, file_time_type, error_code&)): Likewise.\n\nFrom-SVN: r267602", "tree": {"sha": "8c97f8a1c134f6113986918eb2ef59b12c003aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c97f8a1c134f6113986918eb2ef59b12c003aea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/beb04ce9d4d6b30ca881ff7f5ebd143433f84722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb04ce9d4d6b30ca881ff7f5ebd143433f84722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/beb04ce9d4d6b30ca881ff7f5ebd143433f84722", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/beb04ce9d4d6b30ca881ff7f5ebd143433f84722/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d06f73a3872638cc2257743b5c947da9c9a3bfa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d06f73a3872638cc2257743b5c947da9c9a3bfa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d06f73a3872638cc2257743b5c947da9c9a3bfa4"}], "stats": {"total": 108, "additions": 102, "deletions": 6}, "files": [{"sha": "b1a05c748718f36881bd2ce2e817613186bfb8eb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb04ce9d4d6b30ca881ff7f5ebd143433f84722/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb04ce9d4d6b30ca881ff7f5ebd143433f84722/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=beb04ce9d4d6b30ca881ff7f5ebd143433f84722", "patch": "@@ -1,3 +1,17 @@\n+2019-01-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_fwd.h (__file_clock): Define new clock.\n+\t(file_time_type): Redefine in terms of __file_clock.\n+\t* src/filesystem/ops-common.h (file_time): Add FIXME comment about\n+\toverflow.\n+\t* src/filesystem/std-ops.cc (is_set(perm_options, perm_options)): Give\n+\tinternal linkage.\n+\t(internal_file_lock): New helper type for accessing __file_clock.\n+\t(do_copy_file): Use internal_file_lock to convert system time to\n+\tfile_time_type.\n+\t(last_write_time(const path&, error_code&)): Likewise.\n+\t(last_write_time(const path&, file_time_type, error_code&)): Likewise.\n+\n 2019-01-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* config/abi/pre/gnu.ver (GLIBCXX_3.4.21): Make patterns less greedy"}, {"sha": "a0e3d73e2a3694f633e3f57b95271eac3384a3d5", "filename": "libstdc++-v3/include/bits/fs_fwd.h", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb04ce9d4d6b30ca881ff7f5ebd143433f84722/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb04ce9d4d6b30ca881ff7f5ebd143433f84722/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_fwd.h?ref=beb04ce9d4d6b30ca881ff7f5ebd143433f84722", "patch": "@@ -294,7 +294,49 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   operator^=(directory_options& __x, directory_options __y) noexcept\n   { return __x = __x ^ __y; }\n \n-  using file_time_type = std::chrono::system_clock::time_point;\n+  struct __file_clock\n+  {\n+    using duration                  = chrono::nanoseconds;\n+    using rep                       = duration::rep;\n+    using period                    = duration::period;\n+    using time_point                = chrono::time_point<__file_clock>;\n+    static constexpr bool is_steady = false;\n+\n+    static time_point\n+    now() noexcept\n+    { return _S_from_sys(chrono::system_clock::now()); }\n+\n+  private:\n+    using __sys_clock = chrono::system_clock;\n+\n+    // This clock's (unspecified) epoch is 2174-01-01 00:00:00 UTC.\n+    // A signed 64-bit duration with nanosecond resolution gives roughly\n+    // +/- 292 years, which covers the 1901-2446 date range for ext4.\n+    static constexpr chrono::seconds _S_epoch_diff{6437664000};\n+\n+  protected:\n+    // For internal use only\n+    template<typename _Dur>\n+      static\n+      chrono::time_point<__file_clock, _Dur>\n+      _S_from_sys(const chrono::time_point<__sys_clock, _Dur>& __t) noexcept\n+      {\n+\tusing __file_time = chrono::time_point<__file_clock, _Dur>;\n+\treturn __file_time{__t.time_since_epoch()} - _S_epoch_diff;\n+      }\n+\n+    // For internal use only\n+    template<typename _Dur>\n+      static\n+      chrono::time_point<__sys_clock, _Dur>\n+      _S_to_sys(const chrono::time_point<__file_clock, _Dur>& __t) noexcept\n+      {\n+\tusing __sys_time = chrono::time_point<__sys_clock, _Dur>;\n+\treturn __sys_time{__t.time_since_epoch()} + _S_epoch_diff;\n+      }\n+  };\n+\n+  using file_time_type = __file_clock::time_point;\n \n   // operational functions\n "}, {"sha": "1c0d650f4440340bd1c06d634fa9f93b9c4045ce", "filename": "libstdc++-v3/src/filesystem/ops-common.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb04ce9d4d6b30ca881ff7f5ebd143433f84722/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb04ce9d4d6b30ca881ff7f5ebd143433f84722/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h?ref=beb04ce9d4d6b30ca881ff7f5ebd143433f84722", "patch": "@@ -158,6 +158,24 @@ namespace __gnu_posix\n     nanoseconds ns{};\n #endif\n \n+    // FIXME\n+    // There are possible timespec values which will overflow\n+    // chrono::system_clock::time_point but would not overflow\n+    // __file_clock::time_point, due to its different epoch.\n+    //\n+    // By checking for overflow of the intermediate system_clock::duration\n+    // type, we report an error for values which are actually representable\n+    // in the file_time_type result type.\n+    //\n+    // Howard Hinnant's solution for this problem is to use\n+    // duration<__int128>{s} + ns, which doesn't overflow.\n+    // An alternative would be to do the epoch correction on s before\n+    // the addition, and then go straight to file_time_type instead of\n+    // going via chrono::system_clock::time_point.\n+    //\n+    // (This only applies to the C++17 Filesystem library, because for the\n+    // Filesystem TS we don't have a distinct __file_clock, we just use the\n+    // system clock for file timestamps).\n     if (s >= (nanoseconds::max().count() / 1e9))\n       {\n \tec = std::make_error_code(std::errc::value_too_large); // EOVERFLOW"}, {"sha": "8c3ec1d9a9abd23f6acbf5652027eb8b102c531f", "filename": "libstdc++-v3/src/filesystem/std-ops.cc", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/beb04ce9d4d6b30ca881ff7f5ebd143433f84722/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/beb04ce9d4d6b30ca881ff7f5ebd143433f84722/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fstd-ops.cc?ref=beb04ce9d4d6b30ca881ff7f5ebd143433f84722", "patch": "@@ -268,13 +268,32 @@ fs::copy(const path& from, const path& to, copy_options options)\n namespace std::filesystem\n {\n   // Need this as there's no 'perm_options::none' enumerator.\n-  inline bool is_set(fs::perm_options obj, fs::perm_options bits)\n+  static inline bool is_set(fs::perm_options obj, fs::perm_options bits)\n   {\n     return (obj & bits) != fs::perm_options{};\n   }\n }\n \n #ifdef _GLIBCXX_HAVE_SYS_STAT_H\n+\n+namespace\n+{\n+  struct internal_file_clock : fs::__file_clock\n+  {\n+    using __file_clock::_S_to_sys;\n+    using __file_clock::_S_from_sys;\n+\n+    static fs::file_time_type\n+    from_stat(const fs::stat_type& st, std::error_code& ec) noexcept\n+    {\n+      const auto sys_time = fs::file_time(st, ec);\n+      if (sys_time == sys_time.min())\n+\treturn fs::file_time_type::min();\n+      return _S_from_sys(sys_time);\n+    }\n+  };\n+}\n+\n #ifdef NEED_DO_COPY_FILE\n bool\n fs::do_copy_file(const path::value_type* from, const path::value_type* to,\n@@ -348,10 +367,10 @@ fs::do_copy_file(const path::value_type* from, const path::value_type* to,\n \t}\n       else if (options.update)\n \t{\n-\t  const auto from_mtime = file_time(*from_st, ec);\n+\t  const auto from_mtime = internal_file_clock::from_stat(*from_st, ec);\n \t  if (ec)\n \t    return false;\n-\t  if ((from_mtime <= file_time(*to_st, ec)) || ec)\n+\t  if ((from_mtime <= internal_file_clock::from_stat(*to_st, ec)) || ec)\n \t    return false;\n \t}\n       else if (!options.overwrite)\n@@ -1122,7 +1141,10 @@ fs::last_write_time(const path& p)\n fs::file_time_type\n fs::last_write_time(const path& p, error_code& ec) noexcept\n {\n-  return do_stat(p, ec, [&ec](const auto& st) { return file_time(st, ec); },\n+  return do_stat(p, ec,\n+\t\t [&ec](const auto& st) {\n+\t\t     return internal_file_clock::from_stat(st, ec);\n+\t\t },\n \t\t file_time_type::min());\n }\n \n@@ -1139,7 +1161,7 @@ void\n fs::last_write_time(const path& p __attribute__((__unused__)),\n \t\t    file_time_type new_time, error_code& ec) noexcept\n {\n-  auto d = new_time.time_since_epoch();\n+  auto d = internal_file_clock::_S_to_sys(new_time).time_since_epoch();\n   auto s = chrono::duration_cast<chrono::seconds>(d);\n #if _GLIBCXX_USE_UTIMENSAT\n   auto ns = chrono::duration_cast<chrono::nanoseconds>(d - s);"}]}