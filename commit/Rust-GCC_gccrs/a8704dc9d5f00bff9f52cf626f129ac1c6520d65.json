{"sha": "a8704dc9d5f00bff9f52cf626f129ac1c6520d65", "node_id": "C_kwDOANBUbNoAKGE4NzA0ZGM5ZDVmMDBiZmY5ZjUyY2Y2MjZmMTI5YWMxYzY1MjBkNjU", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2022-11-29T15:45:10Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2023-01-25T13:36:28Z"}, "message": "arm: improve tests for vld2q*\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/arm/mve/intrinsics/vld2q_f16.c: Use\n\tcheck-function-bodies instead of scan-assembler checks.  Use\n\textern \"C\" for C++ testing.\n\t* gcc.target/arm/mve/intrinsics/vld2q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vld2q_u8.c: Likewise.", "tree": {"sha": "6e44058d6b4df55546c6d8bdc2aebd80be5fd367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e44058d6b4df55546c6d8bdc2aebd80be5fd367"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8704dc9d5f00bff9f52cf626f129ac1c6520d65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8704dc9d5f00bff9f52cf626f129ac1c6520d65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8704dc9d5f00bff9f52cf626f129ac1c6520d65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1563de6f9d3a9607ae2872b87d9718add3cf6e6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1563de6f9d3a9607ae2872b87d9718add3cf6e6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1563de6f9d3a9607ae2872b87d9718add3cf6e6a"}], "stats": {"total": 264, "additions": 224, "deletions": 40}, "files": [{"sha": "81690b1022ea57f018a0a63373497657711f6329", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld2q_f16.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_f16.c?ref=a8704dc9d5f00bff9f52cf626f129ac1c6520d65", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvld20.16\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+**\tvld21.16\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+*/\n float16x8x2_t\n-foo (float16_t const * addr)\n+foo (float16_t const *addr)\n {\n   return vld2q_f16 (addr);\n }\n \n-/* { dg-final { scan-assembler \"vld20.16\"  }  } */\n-/* { dg-final { scan-assembler \"vld21.16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvld20.16\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+**\tvld21.16\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+*/\n float16x8x2_t\n-foo1 (float16_t const * addr)\n+foo1 (float16_t const *addr)\n {\n   return vld2q (addr);\n }\n \n-/* { dg-final { scan-assembler \"vld20.16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "d2ae31fa9e514b285e5ba8d786fc17f01cb5fd00", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld2q_f32.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_f32.c?ref=a8704dc9d5f00bff9f52cf626f129ac1c6520d65", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n /* { dg-add-options arm_v8_1m_mve_fp } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvld20.32\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+**\tvld21.32\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+*/\n float32x4x2_t\n-foo (float32_t const * addr)\n+foo (float32_t const *addr)\n {\n   return vld2q_f32 (addr);\n }\n \n-/* { dg-final { scan-assembler \"vld20.32\"  }  } */\n-/* { dg-final { scan-assembler \"vld21.32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvld20.32\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+**\tvld21.32\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+*/\n float32x4x2_t\n-foo1 (float32_t const * addr)\n+foo1 (float32_t const *addr)\n {\n   return vld2q (addr);\n }\n \n-/* { dg-final { scan-assembler \"vld20.32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "fb4dc1b4fcfdfd48e9f9691b0e39aac6b4902b2b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld2q_s16.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s16.c?ref=a8704dc9d5f00bff9f52cf626f129ac1c6520d65", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvld20.16\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+**\tvld21.16\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+*/\n int16x8x2_t\n-foo (int16_t const * addr)\n+foo (int16_t const *addr)\n {\n   return vld2q_s16 (addr);\n }\n \n-/* { dg-final { scan-assembler \"vld20.16\"  }  } */\n-/* { dg-final { scan-assembler \"vld21.16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvld20.16\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+**\tvld21.16\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+*/\n int16x8x2_t\n-foo1 (int16_t const * addr)\n+foo1 (int16_t const *addr)\n {\n   return vld2q (addr);\n }\n \n-/* { dg-final { scan-assembler \"vld20.16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "aeb85238fd266b9fe70bd4095225db308f25811b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld2q_s32.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s32.c?ref=a8704dc9d5f00bff9f52cf626f129ac1c6520d65", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvld20.32\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+**\tvld21.32\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+*/\n int32x4x2_t\n-foo (int32_t const * addr)\n+foo (int32_t const *addr)\n {\n   return vld2q_s32 (addr);\n }\n \n-/* { dg-final { scan-assembler \"vld20.32\"  }  } */\n-/* { dg-final { scan-assembler \"vld21.32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvld20.32\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+**\tvld21.32\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+*/\n int32x4x2_t\n-foo1 (int32_t const * addr)\n+foo1 (int32_t const *addr)\n {\n   return vld2q (addr);\n }\n \n-/* { dg-final { scan-assembler \"vld20.32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "687e5ded48c3f1b1c27a3a23e789362c62567d74", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld2q_s8.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_s8.c?ref=a8704dc9d5f00bff9f52cf626f129ac1c6520d65", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvld20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+**\tvld21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+*/\n int8x16x2_t\n-foo (int8_t const * addr)\n+foo (int8_t const *addr)\n {\n   return vld2q_s8 (addr);\n }\n \n-/* { dg-final { scan-assembler \"vld20.8\"  }  } */\n-/* { dg-final { scan-assembler \"vld21.8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvld20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+**\tvld21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+*/\n int8x16x2_t\n-foo1 (int8_t const * addr)\n+foo1 (int8_t const *addr)\n {\n   return vld2q (addr);\n }\n \n-/* { dg-final { scan-assembler \"vld20.8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "281fe5eaf101c90ea046e5fb045f0dc74d33c081", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld2q_u16.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u16.c?ref=a8704dc9d5f00bff9f52cf626f129ac1c6520d65", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvld20.16\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+**\tvld21.16\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+*/\n uint16x8x2_t\n-foo (uint16_t const * addr)\n+foo (uint16_t const *addr)\n {\n   return vld2q_u16 (addr);\n }\n \n-/* { dg-final { scan-assembler \"vld20.16\"  }  } */\n-/* { dg-final { scan-assembler \"vld21.16\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvld20.16\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+**\tvld21.16\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+*/\n uint16x8x2_t\n-foo1 (uint16_t const * addr)\n+foo1 (uint16_t const *addr)\n {\n   return vld2q (addr);\n }\n \n-/* { dg-final { scan-assembler \"vld20.16\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "524afee72e9d23669e98118059c6b36abca4a2ec", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld2q_u32.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u32.c?ref=a8704dc9d5f00bff9f52cf626f129ac1c6520d65", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvld20.32\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+**\tvld21.32\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+*/\n uint32x4x2_t\n-foo (uint32_t const * addr)\n+foo (uint32_t const *addr)\n {\n   return vld2q_u32 (addr);\n }\n \n-/* { dg-final { scan-assembler \"vld20.32\"  }  } */\n-/* { dg-final { scan-assembler \"vld21.32\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvld20.32\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+**\tvld21.32\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+*/\n uint32x4x2_t\n-foo1 (uint32_t const * addr)\n+foo1 (uint32_t const *addr)\n {\n   return vld2q (addr);\n }\n \n-/* { dg-final { scan-assembler \"vld20.32\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}, {"sha": "9eebbd42719dd1535fd12793c133b7570d92f9e1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vld2q_u8.c", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8704dc9d5f00bff9f52cf626f129ac1c6520d65/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvld2q_u8.c?ref=a8704dc9d5f00bff9f52cf626f129ac1c6520d65", "patch": "@@ -1,22 +1,45 @@\n /* { dg-require-effective-target arm_v8_1m_mve_ok } */\n /* { dg-add-options arm_v8_1m_mve } */\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n \n #include \"arm_mve.h\"\n \n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**foo:\n+**\t...\n+**\tvld20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+**\tvld21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+*/\n uint8x16x2_t\n-foo (uint8_t const * addr)\n+foo (uint8_t const *addr)\n {\n   return vld2q_u8 (addr);\n }\n \n-/* { dg-final { scan-assembler \"vld20.8\"  }  } */\n-/* { dg-final { scan-assembler \"vld21.8\"  }  } */\n \n+/*\n+**foo1:\n+**\t...\n+**\tvld20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+**\tvld21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\](?:\t@.*|)\n+**\t...\n+*/\n uint8x16x2_t\n-foo1 (uint8_t const * addr)\n+foo1 (uint8_t const *addr)\n {\n   return vld2q (addr);\n }\n \n-/* { dg-final { scan-assembler \"vld20.8\"  }  } */\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}