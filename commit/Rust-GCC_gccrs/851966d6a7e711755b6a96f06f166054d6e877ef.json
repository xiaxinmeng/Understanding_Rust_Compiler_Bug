{"sha": "851966d6a7e711755b6a96f06f166054d6e877ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUxOTY2ZDZhN2U3MTE3NTViNmE5NmYwNmYxNjYwNTRkNmU4NzdlZg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2016-12-15T15:56:29Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2016-12-15T15:56:29Z"}, "message": "[arm] Initialize fpu capability bits in arm_active_target\n\nNow that we can describe the FPU with the standard ISA bits we need to\ninitialize them.  However, the FPU settings can be changed with target build\nattributes, so we also need to reset them if things change.  This requires\na bit of juggling about with the existing code to ensure that the active\ntarget is reconfigured after each change to the target options.\n\n\t* arm-protos.h: Include sbitmap.h\n\t(arm_configure_build_target): Make public.\n\t* arm.c (arm_configure_build_target): Now not static.\n\t(arm_valid_target_attribute_rec): Move internal option check to...\n\t(arm_valid_target_attribute_tree0: ... here.  Also reconfingure the\n\tactive target.\n\t(arm_override_options_after_change): Call arm_configure_build_target.\n\t(isa_all_fpubits): Renamed from isa_fpubits.\n\t(arm_option_restore): New function.\n\t(TARGET_OPTION_RESTORE): Register it.\n\t(arm_configure_build_target): Initialize the FPU capability bits in\n\tthe isa.\n\t(arm_option_override): Move the code that forces the setting of the\n\tFPU option before the call to arm_configure_build_target.\n\t* arm.opt (march): Mark as Save.\n\t(mcpu, mtune): Likewise.\n\t* arm-c.c (arm_pragma_target_parse): Reconfigure the build target\n\tafter pragmas change the target options.\n\nFrom-SVN: r243710", "tree": {"sha": "20ffa96fbfdb1de787a84904739e08d05edc5447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20ffa96fbfdb1de787a84904739e08d05edc5447"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/851966d6a7e711755b6a96f06f166054d6e877ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/851966d6a7e711755b6a96f06f166054d6e877ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/851966d6a7e711755b6a96f06f166054d6e877ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/851966d6a7e711755b6a96f06f166054d6e877ef/comments", "author": null, "committer": null, "parents": [{"sha": "066416dabcdc6da2596da2c19a9876218c634435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/066416dabcdc6da2596da2c19a9876218c634435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/066416dabcdc6da2596da2c19a9876218c634435"}], "stats": {"total": 102, "additions": 76, "deletions": 26}, "files": [{"sha": "94b3e509cfccd32bf546d546b7cbda2d3b7fab72", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/851966d6a7e711755b6a96f06f166054d6e877ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/851966d6a7e711755b6a96f06f166054d6e877ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=851966d6a7e711755b6a96f06f166054d6e877ef", "patch": "@@ -1,3 +1,24 @@\n+2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm-protos.h: Include sbitmap.h\n+\t(arm_configure_build_target): Make public.\n+\t* arm.c (arm_configure_build_target): Now not static.\n+\t(arm_valid_target_attribute_rec): Move internal option check to...\n+\t(arm_valid_target_attribute_tree0: ... here.  Also reconfingure the\n+\tactive target.\n+\t(arm_override_options_after_change): Call arm_configure_build_target.\n+\t(isa_all_fpubits): Renamed from isa_fpubits.\n+\t(arm_option_restore): New function.\n+\t(TARGET_OPTION_RESTORE): Register it.\n+\t(arm_configure_build_target): Initialize the FPU capability bits in\n+\tthe isa.\n+\t(arm_option_override): Move the code that forces the setting of the\n+\tFPU option before the call to arm_configure_build_target.\n+\t* arm.opt (march): Mark as Save.\n+\t(mcpu, mtune): Likewise.\n+\t* arm-c.c (arm_pragma_target_parse): Reconfigure the build target\n+\tafter pragmas change the target options.\n+\n 2016-12-15  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm-isa.h (isa_feature): Add bits for VFPv4, FPv5, fp16conv,"}, {"sha": "9dd9a8d59c872a28da6ff7363b5d4e3c75e42901", "filename": "gcc/config/arm/arm-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/851966d6a7e711755b6a96f06f166054d6e877ef/gcc%2Fconfig%2Farm%2Farm-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/851966d6a7e711755b6a96f06f166054d6e877ef/gcc%2Fconfig%2Farm%2Farm-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-c.c?ref=851966d6a7e711755b6a96f06f166054d6e877ef", "patch": "@@ -243,6 +243,8 @@ arm_pragma_target_parse (tree args, tree pop_target)\n       /* handle_pragma_pop_options and handle_pragma_reset_options will set\n        target_option_current_node, but not handle_pragma_target.  */\n       target_option_current_node = cur_tree;\n+      arm_configure_build_target (&arm_active_target, &global_options,\n+\t\t\t\t  &global_options_set, false);\n     }\n \n   /* Update macros if target_node changes. The global state will be restored"}, {"sha": "da3484f3294d288a6c7905f23b3b194a3061bb99", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/851966d6a7e711755b6a96f06f166054d6e877ef/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/851966d6a7e711755b6a96f06f166054d6e877ef/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=851966d6a7e711755b6a96f06f166054d6e877ef", "patch": "@@ -24,6 +24,7 @@\n \n #include \"arm-flags.h\"\n #include \"arm-isa.h\"\n+#include \"sbitmap.h\"\n \n extern enum unwind_info_type arm_except_unwind_info (struct gcc_options *);\n extern int use_return_insn (int, rtx);\n@@ -223,6 +224,9 @@ extern bool arm_change_mode_p (tree);\n \n extern tree arm_valid_target_attribute_tree (tree, struct gcc_options *,\n \t\t\t\t\t     struct gcc_options *);\n+extern void arm_configure_build_target (struct arm_build_target *,\n+\t\t\t\t\tstruct gcc_options *,\n+\t\t\t\t\tstruct gcc_options *, bool);\n extern void arm_pr_long_calls (struct cpp_reader *);\n extern void arm_pr_no_long_calls (struct cpp_reader *);\n extern void arm_pr_long_calls_off (struct cpp_reader *);"}, {"sha": "437ee2da72cf5906a992eeadda7c3c98806127f1", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 46, "deletions": 23, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/851966d6a7e711755b6a96f06f166054d6e877ef/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/851966d6a7e711755b6a96f06f166054d6e877ef/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=851966d6a7e711755b6a96f06f166054d6e877ef", "patch": "@@ -231,6 +231,8 @@ static tree arm_build_builtin_va_list (void);\n static void arm_expand_builtin_va_start (tree, rtx);\n static tree arm_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n static void arm_option_override (void);\n+static void arm_option_restore (struct gcc_options *,\n+\t\t\t\tstruct cl_target_option *);\n static void arm_override_options_after_change (void);\n static void arm_option_print (FILE *, int, struct cl_target_option *);\n static void arm_set_current_function (tree);\n@@ -408,6 +410,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE\n #define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE arm_override_options_after_change\n \n+#undef TARGET_OPTION_RESTORE\n+#define TARGET_OPTION_RESTORE arm_option_restore\n+\n #undef TARGET_OPTION_PRINT\n #define TARGET_OPTION_PRINT arm_option_print\n \n@@ -2932,9 +2937,19 @@ arm_override_options_after_change_1 (struct gcc_options *opts)\n static void\n arm_override_options_after_change (void)\n {\n+  arm_configure_build_target (&arm_active_target, &global_options,\n+\t\t\t      &global_options_set, false);\n+\n   arm_override_options_after_change_1 (&global_options);\n }\n \n+static void\n+arm_option_restore (struct gcc_options *opts, struct cl_target_option *ptr)\n+{\n+  arm_configure_build_target (&arm_active_target, opts, &global_options_set,\n+\t\t\t      false);\n+}\n+\n /* Reset options between modes that the user has specified.  */\n static void\n arm_option_override_internal (struct gcc_options *opts,\n@@ -3048,13 +3063,13 @@ arm_initialize_isa (sbitmap isa, const enum isa_feature *isa_bits)\n     bitmap_set_bit (isa, *(isa_bits++));\n }\n \n-static sbitmap isa_fpubits;\n+static sbitmap isa_all_fpubits;\n static sbitmap isa_quirkbits;\n \n /* Configure a build target TARGET from the user-specified options OPTS and\n    OPTS_SET.  If WARN_COMPATIBLE, emit a diagnostic if both the CPU and\n    architecture have been specified, but the two are not identical.  */\n-static void\n+void\n arm_configure_build_target (struct arm_build_target *target,\n \t\t\t    struct gcc_options *opts,\n \t\t\t    struct gcc_options *opts_set,\n@@ -3063,6 +3078,7 @@ arm_configure_build_target (struct arm_build_target *target,\n   const struct processors *arm_selected_tune = NULL;\n   const struct processors *arm_selected_arch = NULL;\n   const struct processors *arm_selected_cpu = NULL;\n+  const struct arm_fpu_desc *arm_selected_fpu = NULL;\n \n   bitmap_clear (target->isa);\n   target->core_name = NULL;\n@@ -3093,7 +3109,7 @@ arm_configure_build_target (struct arm_build_target *target,\n \t  /* Ignore any bits that are quirk bits.  */\n \t  bitmap_and_compl (cpu_isa, cpu_isa, isa_quirkbits);\n \t  /* Ignore (for now) any bits that might be set by -mfpu.  */\n-\t  bitmap_and_compl (cpu_isa, cpu_isa, isa_fpubits);\n+\t  bitmap_and_compl (cpu_isa, cpu_isa, isa_all_fpubits);\n \n \t  if (!bitmap_empty_p (cpu_isa))\n \t    {\n@@ -3239,6 +3255,13 @@ arm_configure_build_target (struct arm_build_target *target,\n \n   gcc_assert (arm_selected_cpu);\n \n+  arm_selected_fpu = &all_fpus[opts->x_arm_fpu_index];\n+  auto_sbitmap fpu_bits(isa_num_bits);\n+\n+  arm_initialize_isa (fpu_bits, arm_selected_fpu->isa_bits);\n+  bitmap_and_compl (target->isa, target->isa, isa_all_fpubits);\n+  bitmap_ior (target->isa, target->isa, fpu_bits);\n+\n   /* The selected cpu may be an architecture, so lookup tuning by core ID.  */\n   if (!arm_selected_tune)\n     arm_selected_tune = &all_cores[arm_selected_cpu->core];\n@@ -3263,11 +3286,27 @@ arm_option_override (void)\n   isa_quirkbits = sbitmap_alloc (isa_num_bits);\n   arm_initialize_isa (isa_quirkbits, quirk_bitlist);\n \n-  isa_fpubits = sbitmap_alloc (isa_num_bits);\n-  arm_initialize_isa (isa_fpubits, fpu_bitlist);\n+  isa_all_fpubits = sbitmap_alloc (isa_num_bits);\n+  arm_initialize_isa (isa_all_fpubits, fpu_bitlist);\n \n   arm_active_target.isa = sbitmap_alloc (isa_num_bits);\n \n+  if (!global_options_set.x_arm_fpu_index)\n+    {\n+      const char *target_fpu_name;\n+      bool ok;\n+\n+#ifdef FPUTYPE_DEFAULT\n+      target_fpu_name = FPUTYPE_DEFAULT;\n+#else\n+      target_fpu_name = \"vfp\";\n+#endif\n+\n+      ok = opt_enum_arg_to_value (OPT_mfpu_, target_fpu_name, &arm_fpu_index,\n+\t\t\t\t  CL_TARGET);\n+      gcc_assert (ok);\n+    }\n+\n   arm_configure_build_target (&arm_active_target, &global_options,\n \t\t\t      &global_options_set, true);\n \n@@ -3378,22 +3417,6 @@ arm_option_override (void)\n   if (TARGET_IWMMXT_ABI && !TARGET_IWMMXT)\n     error (\"iwmmxt abi requires an iwmmxt capable cpu\");\n \n-  if (!global_options_set.x_arm_fpu_index)\n-    {\n-      const char *target_fpu_name;\n-      bool ok;\n-\n-#ifdef FPUTYPE_DEFAULT\n-      target_fpu_name = FPUTYPE_DEFAULT;\n-#else\n-      target_fpu_name = \"vfp\";\n-#endif\n-\n-      ok = opt_enum_arg_to_value (OPT_mfpu_, target_fpu_name, &arm_fpu_index,\n-\t\t\t\t  CL_TARGET);\n-      gcc_assert (ok);\n-    }\n-\n   /* If soft-float is specified then don't use FPU.  */\n   if (TARGET_SOFT_FLOAT)\n     arm_fpu_attr = FPU_NONE;\n@@ -30293,8 +30316,6 @@ arm_valid_target_attribute_rec (tree args, struct gcc_options *opts)\n \t  error (\"attribute(target(\\\"%s\\\")) is unknown\", q);\n \t  return false;\n \t}\n-\n-      arm_option_check_internal (opts);\n     }\n \n   return true;\n@@ -30309,6 +30330,8 @@ arm_valid_target_attribute_tree (tree args, struct gcc_options *opts,\n   if (!arm_valid_target_attribute_rec (args, opts))\n     return NULL_TREE;\n \n+  arm_configure_build_target (&arm_active_target, opts, opts_set, false);\n+  arm_option_check_internal (opts);\n   /* Do any overrides, such as global options arch=xxx.  */\n   arm_option_override_internal (opts, opts_set);\n "}, {"sha": "934144de7799e91ae249d4e723ea815c75ee31ae", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/851966d6a7e711755b6a96f06f166054d6e877ef/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/851966d6a7e711755b6a96f06f166054d6e877ef/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=851966d6a7e711755b6a96f06f166054d6e877ef", "patch": "@@ -73,7 +73,7 @@ mapcs-stack-check\n Target Report Mask(APCS_STACK) Undocumented\n \n march=\n-Target RejectNegative ToLower Joined Enum(arm_arch) Var(arm_arch_option)\n+Target RejectNegative ToLower Joined Enum(arm_arch) Var(arm_arch_option) Save\n Specify the name of the target architecture.\n \n ; Other arm_arch values are loaded from arm-tables.opt\n@@ -98,7 +98,7 @@ Target Report Mask(CALLER_INTERWORKING)\n Thumb: Assume function pointers may go to non-Thumb aware code.\n \n mcpu=\n-Target RejectNegative ToLower Joined Enum(processor_type) Var(arm_cpu_option) Init(TARGET_CPU_arm_none)\n+Target RejectNegative ToLower Joined Enum(processor_type) Var(arm_cpu_option) Init(TARGET_CPU_arm_none) Save\n Specify the name of the target CPU.\n \n mfloat-abi=\n@@ -223,7 +223,7 @@ Target Report Mask(TPCS_LEAF_FRAME)\n Thumb: Generate (leaf) stack frames even if not needed.\n \n mtune=\n-Target RejectNegative ToLower Joined Enum(processor_type) Var(arm_tune_option) Init(TARGET_CPU_arm_none)\n+Target RejectNegative ToLower Joined Enum(processor_type) Var(arm_tune_option) Init(TARGET_CPU_arm_none) Save\n Tune code for the given processor.\n \n mprint-tune-info"}]}