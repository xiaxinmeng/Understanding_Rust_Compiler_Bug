{"sha": "5a6cbc3795e29d2056db40339460ef7915daed1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE2Y2JjMzc5NWUyOWQyMDU2ZGI0MDMzOTQ2MGVmNzkxNWRhZWQxYg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-21T16:34:04Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-21T16:34:04Z"}, "message": "pa.h (REG_CLASSES): Delete GENERAL_OR_FP_OR_SNAKE_FP register class, it's not needed anymore.\n\n\t* pa.h (REG_CLASSES): Delete GENERAL_OR_FP_OR_SNAKE_FP register\n\tclass, it's not needed anymore.  Delete all references.  'Z'\n\tregister class is now \"ALL_REGS\".\n\nFrom-SVN: r3297", "tree": {"sha": "b2ac86fd7a6535e21d20502e67db827ccaea7cab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2ac86fd7a6535e21d20502e67db827ccaea7cab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a6cbc3795e29d2056db40339460ef7915daed1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6cbc3795e29d2056db40339460ef7915daed1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a6cbc3795e29d2056db40339460ef7915daed1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6cbc3795e29d2056db40339460ef7915daed1b/comments", "author": null, "committer": null, "parents": [{"sha": "08a7baacfb9fbade86a4787fe00c4657e1b9cc44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08a7baacfb9fbade86a4787fe00c4657e1b9cc44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08a7baacfb9fbade86a4787fe00c4657e1b9cc44"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "444214f13ca1acb4eb10437eae1d0c5ce17a7d9f", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6cbc3795e29d2056db40339460ef7915daed1b/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6cbc3795e29d2056db40339460ef7915daed1b/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=5a6cbc3795e29d2056db40339460ef7915daed1b", "patch": "@@ -504,15 +504,11 @@ extern int leaf_function;\n      fmpyadd and fmpysub are restricted.\n \n      FP_OR_SNAKE_FP_REGS is for reload_{in,out}di only and isn't used\n-     anywhere else.\n-\n-     GENERAL_OR_FP_OR_SNAKE_FP_REGS is for reload_{in,out}si only and\n-     isn't used anywhereelse.  */\n+     anywhere else.  */\n \n enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FP_REGS, GENERAL_OR_FP_REGS,\n   HI_SNAKE_FP_REGS, SNAKE_FP_REGS, GENERAL_OR_SNAKE_FP_REGS,\n-  FP_OR_SNAKE_FP_REGS, GENERAL_OR_FP_OR_SNAKE_FP_REGS, SHIFT_REGS, \n-  ALL_REGS, LIM_REG_CLASSES}; \n+  FP_OR_SNAKE_FP_REGS, SHIFT_REGS, ALL_REGS, LIM_REG_CLASSES}; \n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n@@ -521,8 +517,7 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FP_REGS, GENERAL_OR_FP_REGS,\n #define REG_CLASS_NAMES \\\n   { \"NO_REGS\", \"R1_REGS\", \"GENERAL_REGS\", \"FP_REGS\", \"GENERAL_OR_FP_REGS\",\\\n     \"HI_SNAKE_FP_REGS\", \"SNAKE_FP_REGS\", \"GENERAL_OR_SNAKE_FP_REGS\",\\\n-    \"FP_OR_SNAKE_FP_REGS\", \"GENERAL_OR_FP_OR_SNAKE_FP_REGS\", \"SHIFT_REGS\",\\\n-    \"ALL_REGS\"}\n+    \"FP_OR_SNAKE_FP_REGS\", \"SHIFT_REGS\", \"ALL_REGS\"}\n \n /* Define which registers fit in which classes.\n    This is an initializer for a vector of HARD_REG_SET\n@@ -539,7 +534,6 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FP_REGS, GENERAL_OR_FP_REGS,\n   {0, 0xffff0000, ~0, 0xffff},\t/* SNAKE_FP_REGS */\t\\\n   {-2, 0xffff0000, ~0, 0xffff},\t/* GENERAL_OR_SNAKE_FP_REGS */\\\n   {0, ~0, ~0, 0xffff},\t\t/* FP_OR_SNAKE_FP_REGS */\\\n-  {-2, ~0, ~0, 0xffff},\t\t/* GENERAL_OR_FP_OR_SNAKE_FP_REGS */\\\n   {0, 0, 0, 0x10000},\t\t/* SHIFT_REGS */\t\\\n   {-2, ~0, ~0, 0x1ffff}}\t/* ALL_REGS */\n \n@@ -564,7 +558,9 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FP_REGS, GENERAL_OR_FP_REGS,\n #define FP_REG_CLASS_P(CLASS) \\\n   (CLASS == FP_REGS || CLASS == SNAKE_FP_REGS || CLASS == HI_SNAKE_FP_REGS)\n \n-/* Get reg_class from a letter such as appears in the machine description.  */\n+/* Get reg_class from a letter such as appears in the machine description.\n+   Note 'Z' is not the same as 'r' since SHIFT_REGS is not part of \n+   GENERAL_REGS.  */\n \n #define REG_CLASS_FROM_LETTER(C) \\\n   ((C) == 'f' ? (!TARGET_SNAKE ? FP_REGS : NO_REGS) :\t\t\\\n@@ -573,7 +569,7 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FP_REGS, GENERAL_OR_FP_REGS,\n      ((C) == 'q' ? SHIFT_REGS :\t\t\t\t\t\\\n       ((C) == 'a' ? R1_REGS :\t\t\t\t\t\\\n        ((C) == 'z' ? FP_OR_SNAKE_FP_REGS :\t\t\t\\\n-        ((C) == 'Z' ? GENERAL_OR_FP_OR_SNAKE_FP_REGS : NO_REGS)))))))\n+        ((C) == 'Z' ? ALL_REGS : NO_REGS)))))))\n \n /* The letters I, J, K, L and M in a register constraint string\n    can be used to stand for particular ranges of immediate operands."}]}