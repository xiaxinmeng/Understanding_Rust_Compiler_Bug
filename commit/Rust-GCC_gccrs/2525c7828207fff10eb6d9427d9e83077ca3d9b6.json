{"sha": "2525c7828207fff10eb6d9427d9e83077ca3d9b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUyNWM3ODI4MjA3ZmZmMTBlYjZkOTQyN2Q5ZTgzMDc3Y2EzZDliNg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-30T03:20:11Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-30T03:20:11Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r633", "tree": {"sha": "4587bec07fba399e6aed48ca6ad3ebc11c9a1f59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4587bec07fba399e6aed48ca6ad3ebc11c9a1f59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2525c7828207fff10eb6d9427d9e83077ca3d9b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2525c7828207fff10eb6d9427d9e83077ca3d9b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2525c7828207fff10eb6d9427d9e83077ca3d9b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2525c7828207fff10eb6d9427d9e83077ca3d9b6/comments", "author": null, "committer": null, "parents": [{"sha": "c4fcf531ae0b236cf8ba7b3f664da08e858bfc89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4fcf531ae0b236cf8ba7b3f664da08e858bfc89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4fcf531ae0b236cf8ba7b3f664da08e858bfc89"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "751fe33b9652982c9bd3587389e68e14d9f53ef0", "filename": "gcc/c-common.c", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2525c7828207fff10eb6d9427d9e83077ca3d9b6/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2525c7828207fff10eb6d9427d9e83077ca3d9b6/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2525c7828207fff10eb6d9427d9e83077ca3d9b6", "patch": "@@ -147,9 +147,41 @@ decl_attributes (decl, attributes)\n {\n   tree a;\n   for (a = attributes; a; a = TREE_CHAIN (a))\n-    if (TREE_VALUE (a) != 0\n+    if (TREE_VALUE (a) == get_identifier (\"packed\"))\n+      {\n+\tif (TREE_CODE (decl) == FIELD_DECL)\n+\t  DECL_PACKED (decl) = 1;\n+      }\n+    else if (TREE_VALUE (a) != 0\n \t&& TREE_CODE (TREE_VALUE (a)) == TREE_LIST\n-\t&& TREE_PURPOSE (TREE_VALUE (a)) == get_identifier (\"aligned\"))\n+\t&& TREE_PURPOSE (TREE_VALUE (a)) == get_identifier (\"mode\"))\n+      {\n+\tint i;\n+\tchar *specified_name\n+\t  = IDENTIFIER_POINTER (TREE_VALUE (TREE_VALUE (a)));\n+\n+\t/* Give this decl a type with the specified mode.  */\n+\tfor (i = 0; i < NUM_MACHINE_MODES; i++)\n+\t  if (!strcmp (specified_name, GET_MODE_NAME (i)))\n+\t    {\n+\t      tree type\n+\t\t= type_for_size (GET_MODE_BITSIZE (i),\n+\t\t\t\t TREE_UNSIGNED (TREE_TYPE (decl)));\n+\t      if (type != 0)\n+\t\t{\n+\t\t  TREE_TYPE (decl) = type;\n+\t\t  DECL_SIZE (decl) = 0;\n+\t\t  layout_decl (decl);\n+\t\t}\n+\t      else\n+\t\terror (\"no data type for mode `%s'\", specified_name);\n+\t    }\n+\tif (i == NUM_MACHINE_MODES)\n+\t  error (\"unknown machine mode `%s'\", specified_name);\n+      }\n+    else if (TREE_VALUE (a) != 0\n+\t     && TREE_CODE (TREE_VALUE (a)) == TREE_LIST\n+\t     && TREE_PURPOSE (TREE_VALUE (a)) == get_identifier (\"aligned\"))\n       {\n \tint align = TREE_INT_CST_LOW (TREE_VALUE (TREE_VALUE (a)))\n \t\t    * BITS_PER_UNIT;\n@@ -161,26 +193,12 @@ decl_attributes (decl, attributes)\n \t\t && TREE_CODE (decl) != FIELD_DECL)\n \t  warning_with_decl (decl,\n \t\t\"alignment specified for `%s' which is not a variable\");\n-\n-\t/* ??? The maximum alignment gcc can currently handle is 16 bytes!\n-\t   We should change the representation to be the log of the\n-\t   actual alignment since we only handle powers of 2 anyway.  */\n-\telse if (align > 255)\n-\t  warning_with_decl (decl,\n-\t\t\"requested alignment of `%s' exceeds compiler limits\");\n \telse\n \t  DECL_ALIGN (decl) = align;\n       }\n     else if (TREE_VALUE (a) != 0\n \t     && TREE_CODE (TREE_VALUE (a)) == TREE_LIST\n-\t     && TREE_PURPOSE (TREE_VALUE (a)) == get_identifier (\"packed\"))\n-      {\n-\tif (TREE_CODE (decl) == FIELD_DECL)\n-\t  DECL_PACKED (decl) = 1;\n-      }\n-    else if (TREE_VALUE (a) != 0\n-\t&& TREE_CODE (TREE_VALUE (a)) == TREE_LIST\n-\t&& TREE_PURPOSE (TREE_VALUE (a)) == get_identifier (\"format\"))\n+\t     && TREE_PURPOSE (TREE_VALUE (a)) == get_identifier (\"format\"))\n       {\n         tree list = TREE_VALUE (TREE_VALUE (a));\n         tree format_type = TREE_PURPOSE (list);"}]}