{"sha": "26c666565d347bd91fb86466d68ed578ac798ea6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZjNjY2NTY1ZDM0N2JkOTFmYjg2NDY2ZDY4ZWQ1NzhhYzc5OGVhNg==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2015-05-16T09:35:52Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2015-05-16T09:35:52Z"}, "message": "re PR target/65768 (sub-optimimal code for constant Uses in loop)\n\ngcc/ChangeLog:\n\n2015-05-16  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\t    Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n\n\tPR target/65768\n\t* config/arm/arm.h (DONT_EARLY_SPLIT_CONSTANT): New macro.\n\t* config/arm/arm.md (subsi3, andsi3, iorsi3, xorsi3, movsi): Keep some\n\t large constants in register instead of splitting them.\n\ngcc/testsuite/ChangeLog:\n\n2015-05-16  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\t    Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n\n\tPR target/65768\n\t* gcc.target/arm/maskdata.c: New test.\n\n\nCo-Authored-By: Zhenqiang Chen <zhenqiang.chen@linaro.org>\n\nFrom-SVN: r223235", "tree": {"sha": "1810ca7bd19bd34a16802c9d9cce41f623ef1b23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1810ca7bd19bd34a16802c9d9cce41f623ef1b23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26c666565d347bd91fb86466d68ed578ac798ea6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26c666565d347bd91fb86466d68ed578ac798ea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26c666565d347bd91fb86466d68ed578ac798ea6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26c666565d347bd91fb86466d68ed578ac798ea6/comments", "author": null, "committer": null, "parents": [{"sha": "e24ba4ab129b4506c413831c3392d47119482c22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24ba4ab129b4506c413831c3392d47119482c22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24ba4ab129b4506c413831c3392d47119482c22"}], "stats": {"total": 108, "additions": 87, "deletions": 21}, "files": [{"sha": "84e282a0e8486d3257064dd9c6224e2bad2820dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c666565d347bd91fb86466d68ed578ac798ea6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c666565d347bd91fb86466d68ed578ac798ea6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26c666565d347bd91fb86466d68ed578ac798ea6", "patch": "@@ -1,3 +1,11 @@\n+2015-05-16  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\t    Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\n+\tPR target/65768\n+\t* config/arm/arm.h (DONT_EARLY_SPLIT_CONSTANT): New macro.\n+\t* config/arm/arm.md (subsi3, andsi3, iorsi3, xorsi3, movsi): Keep some\n+\t large constants in register instead of splitting them.\n+\n 2015-05-16  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/66140"}, {"sha": "6480123985c0af98f70e42d969ffbea6aba3b983", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c666565d347bd91fb86466d68ed578ac798ea6/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c666565d347bd91fb86466d68ed578ac798ea6/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=26c666565d347bd91fb86466d68ed578ac798ea6", "patch": "@@ -396,6 +396,12 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n /* Should NEON be used for 64-bits bitops.  */\n #define TARGET_PREFER_NEON_64BITS (prefer_neon_for_64bits)\n \n+/* Should constant I be slplit for OP.  */\n+#define DONT_EARLY_SPLIT_CONSTANT(i, op) \\\n+\t\t\t\t((optimize >= 2) \\\n+\t\t\t\t && can_create_pseudo_p () \\\n+\t\t\t\t && !const_ok_for_op (i, op))\n+\n /* True iff the full BPABI is being used.  If TARGET_BPABI is true,\n    then TARGET_AAPCS_BASED must be true -- but the converse does not\n    hold.  TARGET_BPABI implies the use of the BPABI runtime library,"}, {"sha": "9a71b79fc5dcfa9ffb5f69f2cace51da71cea492", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 52, "deletions": 21, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c666565d347bd91fb86466d68ed578ac798ea6/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c666565d347bd91fb86466d68ed578ac798ea6/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=26c666565d347bd91fb86466d68ed578ac798ea6", "patch": "@@ -1168,10 +1168,16 @@\n     {\n       if (TARGET_32BIT)\n         {\n-          arm_split_constant (MINUS, SImode, NULL_RTX,\n-\t                      INTVAL (operands[1]), operands[0],\n-\t  \t\t      operands[2], optimize && can_create_pseudo_p ());\n-          DONE;\n+\t  if (DONT_EARLY_SPLIT_CONSTANT (INTVAL (operands[1]), MINUS))\n+\t    operands[1] = force_reg (SImode, operands[1]);\n+\t  else\n+\t    {\n+\t      arm_split_constant (MINUS, SImode, NULL_RTX,\n+\t\t\t\t  INTVAL (operands[1]), operands[0],\n+\t\t\t\t  operands[2],\n+\t\t\t\t  optimize && can_create_pseudo_p ());\n+\t      DONE;\n+\t    }\n \t}\n       else /* TARGET_THUMB1 */\n         operands[1] = force_reg (SImode, operands[1]);\n@@ -2082,14 +2088,19 @@\n \t      operands[1] = convert_to_mode (QImode, operands[1], 1);\n \t      emit_insn (gen_thumb2_zero_extendqisi2_v6 (operands[0],\n \t\t\t\t\t\t\t operands[1]));\n+\t      DONE;\n \t    }\n+\t  else if (DONT_EARLY_SPLIT_CONSTANT (INTVAL (operands[2]), AND))\n+\t    operands[2] = force_reg (SImode, operands[2]);\n \t  else\n-\t    arm_split_constant (AND, SImode, NULL_RTX,\n-\t\t\t\tINTVAL (operands[2]), operands[0],\n-\t\t\t\toperands[1],\n-\t\t\t\toptimize && can_create_pseudo_p ());\n+\t    {\n+\t      arm_split_constant (AND, SImode, NULL_RTX,\n+\t\t\t\t  INTVAL (operands[2]), operands[0],\n+\t\t\t\t  operands[1],\n+\t\t\t\t  optimize && can_create_pseudo_p ());\n \n-          DONE;\n+\t      DONE;\n+\t    }\n         }\n     }\n   else /* TARGET_THUMB1 */\n@@ -2888,10 +2899,16 @@\n     {\n       if (TARGET_32BIT)\n         {\n-          arm_split_constant (IOR, SImode, NULL_RTX,\n-\t                      INTVAL (operands[2]), operands[0], operands[1],\n-\t\t\t      optimize && can_create_pseudo_p ());\n-          DONE;\n+\t  if (DONT_EARLY_SPLIT_CONSTANT (INTVAL (operands[2]), IOR))\n+\t    operands[2] = force_reg (SImode, operands[2]);\n+\t  else\n+\t    {\n+\t      arm_split_constant (IOR, SImode, NULL_RTX,\n+\t\t\t\t  INTVAL (operands[2]), operands[0],\n+\t\t\t\t  operands[1],\n+\t\t\t\t  optimize && can_create_pseudo_p ());\n+\t      DONE;\n+\t    }\n \t}\n       else /* TARGET_THUMB1 */\n         {\n@@ -3058,10 +3075,16 @@\n     {\n       if (TARGET_32BIT)\n         {\n-          arm_split_constant (XOR, SImode, NULL_RTX,\n-\t                      INTVAL (operands[2]), operands[0], operands[1],\n-\t\t\t      optimize && can_create_pseudo_p ());\n-          DONE;\n+\t  if (DONT_EARLY_SPLIT_CONSTANT (INTVAL (operands[2]), XOR))\n+\t    operands[2] = force_reg (SImode, operands[2]);\n+\t  else\n+\t    {\n+\t      arm_split_constant (XOR, SImode, NULL_RTX,\n+\t\t\t\t  INTVAL (operands[2]), operands[0],\n+\t\t\t\t  operands[1],\n+\t\t\t\t  optimize && can_create_pseudo_p ());\n+\t      DONE;\n+\t    }\n \t}\n       else /* TARGET_THUMB1 */\n         {\n@@ -5548,10 +5571,18 @@\n           && !(const_ok_for_arm (INTVAL (operands[1]))\n                || const_ok_for_arm (~INTVAL (operands[1]))))\n         {\n-           arm_split_constant (SET, SImode, NULL_RTX,\n-\t                       INTVAL (operands[1]), operands[0], NULL_RTX,\n-\t\t\t       optimize && can_create_pseudo_p ());\n-          DONE;\n+\t   if (DONT_EARLY_SPLIT_CONSTANT (INTVAL (operands[1]), SET))\n+\t     {\n+\t\temit_insn (gen_rtx_SET (operands[0], operands[1]));\n+\t\tDONE;\n+\t     }\n+\t  else\n+\t     {\n+\t\tarm_split_constant (SET, SImode, NULL_RTX,\n+\t                            INTVAL (operands[1]), operands[0], NULL_RTX,\n+\t\t\t            optimize && can_create_pseudo_p ());\n+\t\tDONE;\n+\t     }\n         }\n     }\n   else /* TARGET_THUMB1...  */"}, {"sha": "430e6bd72878cd918bb4a1e1f51eca65406efc5d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c666565d347bd91fb86466d68ed578ac798ea6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c666565d347bd91fb86466d68ed578ac798ea6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26c666565d347bd91fb86466d68ed578ac798ea6", "patch": "@@ -1,3 +1,9 @@\n+2015-05-16  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\t    Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\n+\tPR target/65768\n+\t* gcc.target/arm/maskdata.c: New test.\n+\n 2015-05-16  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/65792"}, {"sha": "6d6bb39a2655de17a7b944bbf60f275e7772a4ec", "filename": "gcc/testsuite/gcc.target/arm/maskdata.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c666565d347bd91fb86466d68ed578ac798ea6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmaskdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c666565d347bd91fb86466d68ed578ac798ea6/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmaskdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmaskdata.c?ref=26c666565d347bd91fb86466d68ed578ac798ea6", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \" -O2 -fno-gcse \" }  */\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+\n+#define MASK 0xff00ff\n+void maskdata (int * data, int len)\n+{\n+   int i = len;\n+   for (; i > 0; i -= 2)\n+    {\n+      data[i] &= MASK;\n+      data[i + 1] &= MASK;\n+    }\n+}\n+/* { dg-final { scan-assembler-not \"65280\" } } */"}]}