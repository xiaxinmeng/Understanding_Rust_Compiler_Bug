{"sha": "162bc98d096a61193b3cb490a5430fb852d059eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYyYmM5OGQwOTZhNjExOTNiM2NiNDkwYTU0MzBmYjg1MmQwNTllYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-10-16T03:37:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-10-16T03:37:43Z"}, "message": "typeck.c (build_indirect_ref): Complain about a pointer to data member, too.\n\n\t* typeck.c (build_indirect_ref): Complain about a pointer to data\n\tmember, too.\n\t* typeck2.c (build_m_component_ref): Don't indirect a pointer to\n\tdata member.\n\t* init.c (resolve_offset_ref): Don't undo the above.\n\t* cp-tree.h (DECL_C_BIT_FIELD, SET_DECL_C_BIT_FIELD): New macros.\n\t(struct lang_decl_flags): Add `bitfield'.\n\t* class.c (finish_struct_1): Use DECL_C_BIT_FIELD instead of\n\tDECL_BIT_FIELD.\n\t* decl2.c (grokbitfield, grok_alignof): Likewise.\n\t* init.c (build_offset_ref): Likewise.\n\t* typeck.c (build_component_addr, expr_sizeof): Likewise.\n\t* cvt.c (build_up_reference): Don't crash if taking the address\n\treturns error_mark_node.\n\nFrom-SVN: r23124", "tree": {"sha": "bf3ac97d2f9df8fd2274f8ac3a2dd6327958d126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf3ac97d2f9df8fd2274f8ac3a2dd6327958d126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/162bc98d096a61193b3cb490a5430fb852d059eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162bc98d096a61193b3cb490a5430fb852d059eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/162bc98d096a61193b3cb490a5430fb852d059eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162bc98d096a61193b3cb490a5430fb852d059eb/comments", "author": null, "committer": null, "parents": [{"sha": "94706a5cfc9f995e52279c7594d188d826156f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94706a5cfc9f995e52279c7594d188d826156f19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94706a5cfc9f995e52279c7594d188d826156f19"}], "stats": {"total": 69, "additions": 46, "deletions": 23}, "files": [{"sha": "1b93d0206fabf983557f8c691e9ab48a7c413d94", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162bc98d096a61193b3cb490a5430fb852d059eb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162bc98d096a61193b3cb490a5430fb852d059eb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=162bc98d096a61193b3cb490a5430fb852d059eb", "patch": "@@ -1,5 +1,21 @@\n 1998-10-16  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* typeck.c (build_indirect_ref): Complain about a pointer to data\n+\tmember, too.\n+\t* typeck2.c (build_m_component_ref): Don't indirect a pointer to\n+\tdata member.\n+\t* init.c (resolve_offset_ref): Don't undo the above.\n+\n+\t* cp-tree.h (DECL_C_BIT_FIELD, SET_DECL_C_BIT_FIELD): New macros.\n+\t(struct lang_decl_flags): Add `bitfield'.\n+\t* class.c (finish_struct_1): Use DECL_C_BIT_FIELD instead of\n+\tDECL_BIT_FIELD.\n+\t* decl2.c (grokbitfield, grok_alignof): Likewise.\n+\t* init.c (build_offset_ref): Likewise.\n+\t* typeck.c (build_component_addr, expr_sizeof): Likewise.\n+\t* cvt.c (build_up_reference): Don't crash if taking the address\n+\treturns error_mark_node.\n+\n \t* decl.c (grokfndecl): Also check ctype when checking for ::main().\n \n 1998-10-15  Jason Merrill  <jason@yorick.cygnus.com>"}, {"sha": "d5032960625443ea318085506e30ff9ca31caa26", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162bc98d096a61193b3cb490a5430fb852d059eb/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162bc98d096a61193b3cb490a5430fb852d059eb/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=162bc98d096a61193b3cb490a5430fb852d059eb", "patch": "@@ -3541,12 +3541,10 @@ finish_struct_1 (t, warn_anon)\n \t    }\n \t}\n \n-      /* We set DECL_BIT_FIELD tentatively in grokbitfield.\n-\t If the type and width are valid, we'll keep it set.\n-\t Otherwise, the flag is cleared.  */\n-      if (DECL_BIT_FIELD (x))\n+      /* We set DECL_C_BIT_FIELD in grokbitfield.\n+\t If the type and width are valid, we'll also set DECL_BIT_FIELD.  */\n+      if (DECL_C_BIT_FIELD (x))\n \t{\n-\t  DECL_BIT_FIELD (x) = 0;\n \t  /* Invalid bit-field size done by grokfield.  */\n \t  /* Detect invalid bit-field type.  */\n \t  if (DECL_INITIAL (x)\n@@ -3844,13 +3842,13 @@ finish_struct_1 (t, warn_anon)\n      C++: maybe we will support default field initialization some day...  */\n \n   /* Delete all zero-width bit-fields from the front of the fieldlist */\n-  while (fields && DECL_BIT_FIELD (fields)\n+  while (fields && DECL_C_BIT_FIELD (fields)\n \t && DECL_INITIAL (fields))\n     fields = TREE_CHAIN (fields);\n   /* Delete all such fields from the rest of the fields.  */\n   for (x = fields; x;)\n     {\n-      if (TREE_CHAIN (x) && DECL_BIT_FIELD (TREE_CHAIN (x))\n+      if (TREE_CHAIN (x) && DECL_C_BIT_FIELD (TREE_CHAIN (x))\n \t  && DECL_INITIAL (TREE_CHAIN (x)))\n \tTREE_CHAIN (x) = TREE_CHAIN (TREE_CHAIN (x));\n       else"}, {"sha": "a7ab145dc3985219fe39863a03ce05dda33afe9b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162bc98d096a61193b3cb490a5430fb852d059eb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162bc98d096a61193b3cb490a5430fb852d059eb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=162bc98d096a61193b3cb490a5430fb852d059eb", "patch": "@@ -1065,7 +1065,8 @@ struct lang_decl_flags\n   unsigned not_really_extern : 1;\n   unsigned comdat : 1;\n   unsigned needs_final_overrider : 1;\n-  unsigned dummy : 3;\n+  unsigned bitfield : 1;\n+  unsigned dummy : 2;\n \n   tree access;\n   tree context;\n@@ -1398,6 +1399,12 @@ extern int flag_new_for_scope;\n /* Record whether a typedef for type `int' was actually `signed int'.  */\n #define C_TYPEDEF_EXPLICITLY_SIGNED(exp) DECL_LANG_FLAG_1 ((exp))\n \n+/* In a FIELD_DECL, nonzero if the decl was originally a bitfield.  */\n+#define DECL_C_BIT_FIELD(NODE) \\\n+  (DECL_LANG_SPECIFIC (NODE) && DECL_LANG_SPECIFIC (NODE)->decl_flags.bitfield)\n+#define SET_DECL_C_BIT_FIELD(NODE) \\\n+  (DECL_LANG_SPECIFIC (NODE)->decl_flags.bitfield = 1)\n+\n /* Nonzero if the type T promotes to itself.\n    ANSI C states explicitly the list of types that promote;\n    in particular, short promotes to int even if they have the same width.  */"}, {"sha": "a228e27216d18e6be879d4298f826fb5557dfebd", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162bc98d096a61193b3cb490a5430fb852d059eb/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162bc98d096a61193b3cb490a5430fb852d059eb/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=162bc98d096a61193b3cb490a5430fb852d059eb", "patch": "@@ -377,6 +377,9 @@ build_up_reference (type, arg, flags)\n      address, transform all occurrences of the register, into a memory\n      reference we could win better.  */\n   rval = build_unary_op (ADDR_EXPR, arg, 1);\n+  if (rval == error_mark_node)\n+    return error_mark_node;\n+\n   if ((flags & LOOKUP_PROTECT)\n       && TYPE_MAIN_VARIANT (argtype) != TYPE_MAIN_VARIANT (target_type)\n       && IS_AGGR_TYPE (argtype)"}, {"sha": "92e01fee87b7ee00420cab95286da813dcfc7c5c", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162bc98d096a61193b3cb490a5430fb852d059eb/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162bc98d096a61193b3cb490a5430fb852d059eb/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=162bc98d096a61193b3cb490a5430fb852d059eb", "patch": "@@ -1046,7 +1046,7 @@ grok_alignof (expr)\n     return build_min (ALIGNOF_EXPR, sizetype, expr);\n \n   if (TREE_CODE (expr) == COMPONENT_REF\n-      && DECL_BIT_FIELD (TREE_OPERAND (expr, 1)))\n+      && DECL_C_BIT_FIELD (TREE_OPERAND (expr, 1)))\n     error (\"`__alignof__' applied to a bit-field\");\n \n   if (TREE_CODE (expr) == INDIRECT_REF)\n@@ -1809,7 +1809,7 @@ grokbitfield (declarator, declspecs, width)\n     {\n       constant_expression_warning (width);\n       DECL_INITIAL (value) = width;\n-      DECL_BIT_FIELD (value) = 1;\n+      SET_DECL_C_BIT_FIELD (value);\n     }\n \n   DECL_IN_AGGR_P (value) = 1;"}, {"sha": "985718cb678da21f2e607509a353952d9811ae17", "filename": "gcc/cp/init.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162bc98d096a61193b3cb490a5430fb852d059eb/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162bc98d096a61193b3cb490a5430fb852d059eb/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=162bc98d096a61193b3cb490a5430fb852d059eb", "patch": "@@ -1686,7 +1686,7 @@ build_offset_ref (type, name)\n       return convert_from_reference (t);\n     }\n \n-  if (TREE_CODE (t) == FIELD_DECL && DECL_BIT_FIELD (t))\n+  if (TREE_CODE (t) == FIELD_DECL && DECL_C_BIT_FIELD (t))\n     {\n       cp_error (\"illegal pointer to bit field `%D'\", t);\n       return error_mark_node;\n@@ -1740,7 +1740,8 @@ resolve_offset_ref (exp)\n     }\n \n   if ((TREE_CODE (member) == VAR_DECL\n-       && ! TYPE_PTRMEMFUNC_P (TREE_TYPE (member)))\n+       && ! TYPE_PTRMEMFUNC_P (TREE_TYPE (member))\n+       && ! TYPE_PTRMEM_P (TREE_TYPE (member)))\n       || TREE_CODE (TREE_TYPE (member)) == FUNCTION_TYPE\n       || TREE_CODE (TREE_TYPE (member)) == METHOD_TYPE)\n     {\n@@ -1824,18 +1825,17 @@ resolve_offset_ref (exp)\n        for the dereferenced pointer-to-member construct.  */\n     addr = build_unary_op (ADDR_EXPR, base, 0);\n \n-  if (TREE_CODE (TREE_TYPE (member)) == OFFSET_TYPE)\n+  if (TYPE_PTRMEM_P (TREE_TYPE (member)))\n     {\n       if (addr == error_mark_node)\n \t{\n \t  cp_error (\"object missing in `%E'\", exp);\n \t  return error_mark_node;\n \t}\n \n-      basetype = TYPE_OFFSET_BASETYPE (TREE_TYPE (member));\n+      basetype = TYPE_OFFSET_BASETYPE (TREE_TYPE (TREE_TYPE (member)));\n       addr = convert_pointer_to (basetype, addr);\n-      member = cp_convert (ptrdiff_type_node,\n-\t\t\t   build_unary_op (ADDR_EXPR, member, 0));\n+      member = cp_convert (ptrdiff_type_node, member);\n       \n       /* Pointer to data members are offset by one, so that a null\n \t pointer with a real value of 0 is distinguishable from an"}, {"sha": "c2f6ebaa2424c62bc31fa28e98a9d9f3cf03a4f5", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162bc98d096a61193b3cb490a5430fb852d059eb/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162bc98d096a61193b3cb490a5430fb852d059eb/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=162bc98d096a61193b3cb490a5430fb852d059eb", "patch": "@@ -1538,7 +1538,7 @@ expr_sizeof (e)\n     return build_min (SIZEOF_EXPR, sizetype, e);\n \n   if (TREE_CODE (e) == COMPONENT_REF\n-      && DECL_BIT_FIELD (TREE_OPERAND (e, 1)))\n+      && DECL_C_BIT_FIELD (TREE_OPERAND (e, 1)))\n     error (\"sizeof applied to a bit-field\");\n   /* ANSI says arrays and functions are converted inside comma.\n      But we can't really convert them in build_compound_expr\n@@ -2291,7 +2291,7 @@ build_indirect_ref (ptr, errorstring)\n   if (ptr == current_class_ptr)\n     return current_class_ref;\n \n-  if (TREE_CODE (type) == POINTER_TYPE || TREE_CODE (type) == REFERENCE_TYPE)\n+  if (TYPE_PTR_P (type) || TREE_CODE (type) == REFERENCE_TYPE)\n     {\n       /* [expr.unary.op]\n \t \n@@ -2326,8 +2326,8 @@ build_indirect_ref (ptr, errorstring)\n     }\n   /* `pointer' won't be an error_mark_node if we were given a\n      pointer to member, so it's cool to check for this here.  */\n-  else if (TYPE_PTRMEMFUNC_P (type))\n-    error (\"invalid use of `%s' on pointer to member function\", errorstring);\n+  else if (TYPE_PTRMEM_P (type) || TYPE_PTRMEMFUNC_P (type))\n+    error (\"invalid use of `%s' on pointer to member\", errorstring);\n   else if (TREE_CODE (type) == RECORD_TYPE\n \t   && (IS_SIGNATURE_POINTER (type) || IS_SIGNATURE_REFERENCE (type)))\n     error (\"cannot dereference signature pointer/reference\");\n@@ -4248,7 +4248,7 @@ build_component_addr (arg, argtype, msg)\n   tree basetype = decl_type_context (field);\n   tree rval = build_unary_op (ADDR_EXPR, TREE_OPERAND (arg, 0), 0);\n \n-  if (DECL_BIT_FIELD (field))\n+  if (DECL_C_BIT_FIELD (field))\n     {\n       error (msg, IDENTIFIER_POINTER (DECL_NAME (field)));\n       return error_mark_node;"}, {"sha": "14e7ae2c07be8d82bbe9545dc4c6f176381121a7", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162bc98d096a61193b3cb490a5430fb852d059eb/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162bc98d096a61193b3cb490a5430fb852d059eb/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=162bc98d096a61193b3cb490a5430fb852d059eb", "patch": "@@ -1393,8 +1393,7 @@ build_m_component_ref (datum, component)\n     }\n   else\n     {\n-      component = build_indirect_ref (component, NULL_PTR);\n-      type = TREE_TYPE (component);\n+      type = TREE_TYPE (TREE_TYPE (component));\n       rettype = TREE_TYPE (type);\n     }\n "}]}