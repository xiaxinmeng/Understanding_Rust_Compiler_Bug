{"sha": "6b39bc38c85606f9fecf24dd63a0cea62530cf49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIzOWJjMzhjODU2MDZmOWZlY2YyNGRkNjNhMGNlYTYyNTMwY2Y0OQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2012-08-16T01:34:27Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2012-08-16T01:34:27Z"}, "message": "aix43.h (TARGET_DEFAULT): Delete MASK_NEW_MNEMONICS.\n\n2012-08-15  Segher Boessenkool  <segher@kernel.crashing.org>\n\ngcc/\n\t* config/rs6000/aix43.h (TARGET_DEFAULT): Delete MASK_NEW_MNEMONICS.\n\t(RS6000_CALL_GLUE): Adjust for single assembler syntax.\n\t* config/rs6000/aix51.h (TARGET_DEFAULT, RS6000_CALL_GLUE):\n\tDitto.\n\t* config/rs6000/aix52.h (TARGET_DEFAULT, RS6000_CALL_GLUE):\n\tDitto.\n\t* config/rs6000/aix53.h (TARGET_DEFAULT, RS6000_CALL_GLUE):\n\tDitto.\n\t* config/rs6000/aix61.h (TARGET_DEFAULT, RS6000_CALL_GLUE):\n\tDitto.\n\t* config/rs6000/darwin.h (TARGET_DEFAULT): Ditto.\n\t* config/rs6000/darwin.md (whole file): Adjust to single\n\tassembler syntax.\n\t* config/rs6000/darwin64.h (TARGET_DEFAULT): Delete\n\tMASK_NEW_MNEMONICS.\n\t* config/rs6000/default64.h (TARGET_DEFAULT): Ditto.\n\t* config/rs6000/dfp.md: (whole file): Adjust to single\n\tassembler syntax.\n\t* config/rs6000/eabi.h (TARGET_DEFAULT): Delete\n\tMASK_NEW_MNEMONICS.\n\t* config/rs6000/eabialtivec.h (TARGET_DEFAULT): Ditto.\n\t* config/rs6000/eabispe.h (TARGET_DEFAULT): Ditto.\n\t* config/rs6000/linuxaltivec.h (TARGET_DEFAULT): Ditto.\n\t* config/rs6000/linuxspe.h (TARGET_DEFAULT): Ditto.\n\t* config/rs6000/rs6000-cpus.def (whole file): Delete\n\tPOWERPC_BASE_MASK.\n\t* config/rs6000/rs6000-tables.opt: Regenerate.\n\t* config/rs6000/rs6000.c (POWERPC_BASE_MASK): Delete.\n\t(num_insns_constant_wide): Adjust comments.\n\t(whole file): Adjust to single assembler syntax.\n\t(output_cbranch): Adjust comment.\n\t* config/rs6000/rs6000.h (ASSEMBLER_DIALECT): Delete.\n\t* config/rs6000/rs6000.md: (whole file): Adjust to single\n\tassembler syntax.\n\t* config/rs6000/rs6000.opt (mnew-mnemonics): Delete.\n\t(mold-mnemonics): Delete.\n\t* config/rs6000/spe.md: (whole file): Adjust to single\n\tassembler syntax.\n\t* config/rs6000/sync.md: (whole file): Adjust to single\n\tassembler syntax.\n\t* config/rs6000/sysv4.h (TARGET_DEFAULT): Delete\n\tMASK_NEW_MNEMONICS.\n\t(ASM_OUTPUT_REG_PUSH): Adjust.\n\t(ASM_OUTPUT_REG_POP): Adjust.\n\t* config/rs6000/sysv4le.h (TARGET_DEFAULT): Delete\n\tMASK_NEW_MNEMONICS.\n\t* config/rs6000/vsx.md: (whole file): Adjust to single\n\tassembler syntax.\n\t* config/rs6000/vxworks.h (TARGET_DEFAULT): Delete\n\tMASK_NEW_MNEMONICS.\n\t* doc/invoke.texi: Adjust documentation to reflect the\n\tremoval of -mnew-mnemonics and -mold-mnemonics.\n\nlibgcc/\n\t* longlong.h: (whole file, powerpc): Adjust to single assembler syntax.\n\nFrom-SVN: r190432", "tree": {"sha": "66e8b7be0164082ae1b5869aa9daa7b20105fa1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66e8b7be0164082ae1b5869aa9daa7b20105fa1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b39bc38c85606f9fecf24dd63a0cea62530cf49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b39bc38c85606f9fecf24dd63a0cea62530cf49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b39bc38c85606f9fecf24dd63a0cea62530cf49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b39bc38c85606f9fecf24dd63a0cea62530cf49/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a441dedbc4b244b3223691a18aec8316bab940f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a441dedbc4b244b3223691a18aec8316bab940f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a441dedbc4b244b3223691a18aec8316bab940f9"}], "stats": {"total": 1100, "additions": 550, "deletions": 550}, "files": [{"sha": "d2219af1b96f7b64bbce39813e27cddd0f9198bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -1,3 +1,58 @@\n+2012-08-15  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/aix43.h (TARGET_DEFAULT): Delete MASK_NEW_MNEMONICS.\n+\t(RS6000_CALL_GLUE): Adjust for single assembler syntax.\n+\t* config/rs6000/aix51.h (TARGET_DEFAULT, RS6000_CALL_GLUE):\n+\tDitto.\n+\t* config/rs6000/aix52.h (TARGET_DEFAULT, RS6000_CALL_GLUE):\n+\tDitto.\n+\t* config/rs6000/aix53.h (TARGET_DEFAULT, RS6000_CALL_GLUE):\n+\tDitto.\n+\t* config/rs6000/aix61.h (TARGET_DEFAULT, RS6000_CALL_GLUE):\n+\tDitto.\n+\t* config/rs6000/darwin.h (TARGET_DEFAULT): Ditto.\n+\t* config/rs6000/darwin.md (whole file): Adjust to single\n+\tassembler syntax.\n+\t* config/rs6000/darwin64.h (TARGET_DEFAULT): Delete\n+\tMASK_NEW_MNEMONICS.\n+\t* config/rs6000/default64.h (TARGET_DEFAULT): Ditto.\n+\t* config/rs6000/dfp.md: (whole file): Adjust to single\n+\tassembler syntax.\n+\t* config/rs6000/eabi.h (TARGET_DEFAULT): Delete\n+\tMASK_NEW_MNEMONICS.\n+\t* config/rs6000/eabialtivec.h (TARGET_DEFAULT): Ditto.\n+\t* config/rs6000/eabispe.h (TARGET_DEFAULT): Ditto.\n+\t* config/rs6000/linuxaltivec.h (TARGET_DEFAULT): Ditto.\n+\t* config/rs6000/linuxspe.h (TARGET_DEFAULT): Ditto.\n+\t* config/rs6000/rs6000-cpus.def (whole file): Delete\n+\tPOWERPC_BASE_MASK.\n+\t* config/rs6000/rs6000-tables.opt: Regenerate.\n+\t* config/rs6000/rs6000.c (POWERPC_BASE_MASK): Delete.\n+\t(num_insns_constant_wide): Adjust comments.\n+\t(whole file): Adjust to single assembler syntax.\n+\t(output_cbranch): Adjust comment.\n+\t* config/rs6000/rs6000.h (ASSEMBLER_DIALECT): Delete.\n+\t* config/rs6000/rs6000.md: (whole file): Adjust to single\n+\tassembler syntax.\n+\t* config/rs6000/rs6000.opt (mnew-mnemonics): Delete.\n+\t(mold-mnemonics): Delete.\n+\t* config/rs6000/spe.md: (whole file): Adjust to single\n+\tassembler syntax.\n+\t* config/rs6000/sync.md: (whole file): Adjust to single\n+\tassembler syntax.\n+\t* config/rs6000/sysv4.h (TARGET_DEFAULT): Delete\n+\tMASK_NEW_MNEMONICS.\n+\t(ASM_OUTPUT_REG_PUSH): Adjust.\n+\t(ASM_OUTPUT_REG_POP): Adjust.\n+\t* config/rs6000/sysv4le.h (TARGET_DEFAULT): Delete\n+\tMASK_NEW_MNEMONICS.\n+\t* config/rs6000/vsx.md: (whole file): Adjust to single\n+\tassembler syntax.\n+\t* config/rs6000/vxworks.h (TARGET_DEFAULT): Delete\n+\tMASK_NEW_MNEMONICS.\n+\t* doc/invoke.texi: Adjust documentation to reflect the\n+\tremoval of -mnew-mnemonics and -mold-mnemonics.\n+\n 2012-08-15  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* common/config/rs6000/rs6000-common.c (rs6000_handle_option):"}, {"sha": "8465c20378c3538a8d140954de1843f28e34fba4", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -93,7 +93,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    %{pthread: -D_THREAD_SAFE}\"\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT MASK_NEW_MNEMONICS\n+#define TARGET_DEFAULT 0\n \n #undef PROCESSOR_DEFAULT\n #define PROCESSOR_DEFAULT PROCESSOR_PPC604e\n@@ -146,7 +146,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    and \"cror 31,31,31\" for POWER architecture.  */\n \n #undef RS6000_CALL_GLUE\n-#define RS6000_CALL_GLUE \"{cror 31,31,31|nop}\"\n+#define RS6000_CALL_GLUE \"nop\"\n \n /* AIX 4.2 and above provides initialization and finalization function\n    support from linker command line.  */"}, {"sha": "a140e129a3b775a5d7fb9c9cd4d2cbc4bb4ec164", "filename": "gcc/config/rs6000/aix51.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Faix51.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Faix51.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix51.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -90,7 +90,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    %{pthread: -D_THREAD_SAFE}\"\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT MASK_NEW_MNEMONICS\n+#define TARGET_DEFAULT 0\n \n #undef PROCESSOR_DEFAULT\n #define PROCESSOR_DEFAULT PROCESSOR_PPC604e\n@@ -150,7 +150,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    and \"cror 31,31,31\" for POWER architecture.  */\n \n #undef RS6000_CALL_GLUE\n-#define RS6000_CALL_GLUE \"{cror 31,31,31|nop}\"\n+#define RS6000_CALL_GLUE \"nop\"\n \n /* AIX 4.2 and above provides initialization and finalization function\n    support from linker command line.  */"}, {"sha": "1c9e77f962687d425261b4e09a4e7583f6206a5e", "filename": "gcc/config/rs6000/aix52.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Faix52.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Faix52.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix52.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -99,7 +99,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    %{pthread: -D_THREAD_SAFE}\"\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT MASK_NEW_MNEMONICS\n+#define TARGET_DEFAULT 0\n \n #undef  PROCESSOR_DEFAULT\n #define PROCESSOR_DEFAULT PROCESSOR_POWER4\n@@ -162,7 +162,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    and \"cror 31,31,31\" for POWER architecture.  */\n \n #undef RS6000_CALL_GLUE\n-#define RS6000_CALL_GLUE \"{cror 31,31,31|nop}\"\n+#define RS6000_CALL_GLUE \"nop\"\n \n /* AIX 4.2 and above provides initialization and finalization function\n    support from linker command line.  */"}, {"sha": "d1a99e9c03599d1752caab795867b54c6de7b526", "filename": "gcc/config/rs6000/aix53.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Faix53.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Faix53.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix53.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -105,7 +105,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    %{pthread: -D_THREAD_SAFE}\"\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT MASK_NEW_MNEMONICS\n+#define TARGET_DEFAULT 0\n \n #undef  PROCESSOR_DEFAULT\n #define PROCESSOR_DEFAULT PROCESSOR_POWER5\n@@ -160,7 +160,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    and \"cror 31,31,31\" for POWER architecture.  */\n \n #undef RS6000_CALL_GLUE\n-#define RS6000_CALL_GLUE \"{cror 31,31,31|nop}\"\n+#define RS6000_CALL_GLUE \"nop\"\n \n /* AIX 4.2 and above provides initialization and finalization function\n    support from linker command line.  */"}, {"sha": "663777c47cfc740dde8b94833be886e22c0e9eee", "filename": "gcc/config/rs6000/aix61.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Faix61.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Faix61.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix61.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -106,7 +106,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    %{pthread: -D_THREAD_SAFE}\"\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT MASK_NEW_MNEMONICS\n+#define TARGET_DEFAULT 0\n \n #undef  PROCESSOR_DEFAULT\n #define PROCESSOR_DEFAULT PROCESSOR_POWER7\n@@ -161,7 +161,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    and \"cror 31,31,31\" for POWER architecture.  */\n \n #undef RS6000_CALL_GLUE\n-#define RS6000_CALL_GLUE \"{cror 31,31,31|nop}\"\n+#define RS6000_CALL_GLUE \"nop\"\n \n /* AIX 4.2 and above provides initialization and finalization function\n    support from linker command line.  */"}, {"sha": "17ff675d4441f1c9d4b9c75bdd5c9681655987e6", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -280,7 +280,7 @@ extern int darwin_emit_branch_islands;\n    default as well.  */\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_MULTIPLE | MASK_NEW_MNEMONICS | MASK_PPC_GFXOPT)\n+#define TARGET_DEFAULT (MASK_MULTIPLE | MASK_PPC_GFXOPT)\n \n /* Darwin only runs on PowerPC, so short-circuit POWER patterns.  */\n #undef  TARGET_IEEEQUAD"}, {"sha": "5ecde22802fd020b61b27e66ac8f5eca226aa89d", "filename": "gcc/config/rs6000/darwin.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.md?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -1,5 +1,5 @@\n /* Machine description patterns for PowerPC running Darwin (Mac OS X).\n-   Copyright (C) 2004, 2005, 2007, 2010, 2011 Free Software Foundation, Inc.\n+   Copyright (C) 2004-2012 Free Software Foundation, Inc.\n    Contributed by Apple Computer Inc.\n \n This file is part of GCC.\n@@ -23,7 +23,7 @@ You should have received a copy of the GNU General Public License\n         (plus:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b\")\n                  (high:DI (match_operand 2 \"\" \"\"))))]\n   \"TARGET_MACHO && TARGET_64BIT\"\n-  \"{cau|addis} %0,%1,ha16(%2)\"\n+  \"addis %0,%1,ha16(%2)\"\n   [(set_attr \"length\" \"4\")])\n \n (define_insn \"movdf_low_si\"\n@@ -44,9 +44,9 @@ You should have received a copy of the GNU General Public License\n \t    return \\\"ld %0,lo16(%2)(%1)\\\";\n \t  else\n \t    {\n-\t      output_asm_insn (\\\"{cal|la} %0,lo16(%2)(%1)\\\", operands);\n-\t      output_asm_insn (\\\"{l|lwz} %L0,4(%0)\\\", operands);\n-\t      return (\\\"{l|lwz} %0,0(%0)\\\");\n+\t      output_asm_insn (\\\"la %0,lo16(%2)(%1)\\\", operands);\n+\t      output_asm_insn (\\\"lwz %L0,4(%0)\\\", operands);\n+\t      return (\\\"lwz %0,0(%0)\\\");\n \t    }\n \t}\n       default:\n@@ -102,7 +102,7 @@ You should have received a copy of the GNU General Public License\n   \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n   \"@\n    lfs %0,lo16(%2)(%1)\n-   {l|lwz} %0,lo16(%2)(%1)\"\n+   lwz %0,lo16(%2)(%1)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -113,7 +113,7 @@ You should have received a copy of the GNU General Public License\n   \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_64BIT\"\n   \"@\n    lfs %0,lo16(%2)(%1)\n-   {l|lwz} %0,lo16(%2)(%1)\"\n+   lwz %0,lo16(%2)(%1)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -124,7 +124,7 @@ You should have received a copy of the GNU General Public License\n   \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && ! TARGET_64BIT\"\n   \"@\n    stfs %0,lo16(%2)(%1)\n-   {st|stw} %0,lo16(%2)(%1)\"\n+   stw %0,lo16(%2)(%1)\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n \n@@ -135,7 +135,7 @@ You should have received a copy of the GNU General Public License\n   \"TARGET_MACHO && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_64BIT\"\n   \"@\n    stfs %0,lo16(%2)(%1)\n-   {st|stw} %0,lo16(%2)(%1)\"\n+   stw %0,lo16(%2)(%1)\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n \n@@ -146,7 +146,7 @@ You should have received a copy of the GNU General Public License\n                            (match_operand 2 \"\" \"\"))))]\n   \"TARGET_MACHO && TARGET_64BIT\"\n   \"@\n-   {l|ld} %0,lo16(%2)(%1)\n+   ld %0,lo16(%2)(%1)\n    lfd %0,lo16(%2)(%1)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n@@ -156,7 +156,7 @@ You should have received a copy of the GNU General Public License\n                            (match_operand 2 \"\" \"\")))\n \t(match_operand:SI 0 \"gpc_reg_operand\" \"r\"))]\n   \"TARGET_MACHO && ! TARGET_64BIT\"\n-  \"{st|stw} %0,lo16(%2)(%1)\"\n+  \"stw %0,lo16(%2)(%1)\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n \n@@ -166,7 +166,7 @@ You should have received a copy of the GNU General Public License\n \t(match_operand:DI 0 \"gpc_reg_operand\" \"r,*!d\"))]\n   \"TARGET_MACHO && TARGET_64BIT\"\n   \"@\n-   {st|std} %0,lo16(%2)(%1)\n+   std %0,lo16(%2)(%1)\n    stfd %0,lo16(%2)(%1)\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n@@ -189,14 +189,14 @@ You should have received a copy of the GNU General Public License\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=b*r\")\n \t(high:SI (match_operand 1 \"\" \"\")))]\n   \"TARGET_MACHO && ! TARGET_64BIT\"\n-  \"{liu|lis} %0,ha16(%1)\")\n+  \"lis %0,ha16(%1)\")\n   \n \n (define_insn \"macho_high_di\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=b*r\")\n \t(high:DI (match_operand 1 \"\" \"\")))]\n   \"TARGET_MACHO && TARGET_64BIT\"\n-  \"{liu|lis} %0,ha16(%1)\")\n+  \"lis %0,ha16(%1)\")\n \n (define_expand \"macho_low\"\n   [(set (match_operand 0 \"\" \"\")\n@@ -218,17 +218,17 @@ You should have received a copy of the GNU General Public License\n \t\t   (match_operand 2 \"\" \"\")))]\n    \"TARGET_MACHO && ! TARGET_64BIT\"\n    \"@\n-    {cal %0,%a2@l(%1)|la %0,lo16(%2)(%1)}\n-    {cal %0,%a2@l(%1)|addic %0,%1,lo16(%2)}\")\n+    la %0,lo16(%2)(%1)\n+    addic %0,%1,lo16(%2)\")\n \n (define_insn \"macho_low_di\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,!*r\")\n \t\t   (match_operand 2 \"\" \"\")))]\n    \"TARGET_MACHO && TARGET_64BIT\"\n    \"@\n-    {cal %0,%a2@l(%1)|la %0,lo16(%2)(%1)}\n-    {cal %0,%a2@l(%1)|addic %0,%1,lo16(%2)}\")\n+    la %0,lo16(%2)(%1)\n+    addic %0,%1,lo16(%2)\")\n \n (define_split\n   [(set (mem:V4SI (plus:DI (match_operand:DI 0 \"gpc_reg_operand\" \"\")"}, {"sha": "1a1fcf02e0888cfa9ac951546a9e384cefcac0de", "filename": "gcc/config/rs6000/darwin64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fdarwin64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fdarwin64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin64.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -20,7 +20,7 @@\n \n #undef  TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_POWERPC64 | MASK_64BIT \\\n-\t\t\t| MASK_MULTIPLE\t| MASK_NEW_MNEMONICS | MASK_PPC_GFXOPT)\n+\t\t\t| MASK_MULTIPLE | MASK_PPC_GFXOPT)\n \n #undef DARWIN_ARCH_SPEC\n #define DARWIN_ARCH_SPEC \"%{m32:ppc;:ppc64}\""}, {"sha": "bc336d82c696360ad13fcbd992b5b8d26fd94b37", "filename": "gcc/config/rs6000/default64.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fdefault64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fdefault64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdefault64.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -19,5 +19,4 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT \\\n-  (MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_64BIT | MASK_NEW_MNEMONICS)\n+#define TARGET_DEFAULT (MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_64BIT)"}, {"sha": "9dadf6fa4a5312934f4b9a667e1aef2d8a652aab", "filename": "gcc/config/rs6000/dfp.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fdfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fdfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdfp.md?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -68,12 +68,12 @@\n    && (TARGET_HARD_FLOAT && TARGET_FPRS)\"\n   \"@\n    mr %0,%1\n-   {l%U1%X1|lwz%U1%X1} %0,%1\n-   {st%U0%X0|stw%U0%X0} %1,%0\n+   lwz%U1%X1 %0,%1\n+   stw%U0%X0 %1,%0\n    fmr %0,%1\n    mt%0 %1\n    mf%1 %0\n-   {cror 0,0,0|nop}\n+   nop\n    #\n    #\"\n   [(set_attr \"type\" \"*,load,store,fp,mtjmpr,mfjmpr,*,*,*\")\n@@ -89,14 +89,14 @@\n    mr %0,%1\n    mt%0 %1\n    mf%1 %0\n-   {l%U1%X1|lwz%U1%X1} %0,%1\n-   {st%U0%X0|stw%U0%X0} %1,%0\n-   {lil|li} %0,%1\n-   {liu|lis} %0,%v1\n-   {cal|la} %0,%a1\n+   lwz%U1%X1 %0,%1\n+   stw%U0%X0 %1,%0\n+   li %0,%1\n+   lis %0,%v1\n+   la %0,%a1\n    #\n    #\n-   {cror 0,0,0|nop}\"\n+   nop\"\n   [(set_attr \"type\" \"*,mtjmpr,mfjmpr,load,store,*,*,*,*,*,*\")\n    (set_attr \"length\" \"4,4,4,4,4,4,4,4,4,8,4\")])\n \n@@ -335,7 +335,7 @@\n    stfd%U0%X0 %1,%0\n    mt%0 %1\n    mf%1 %0\n-   {cror 0,0,0|nop}\n+   nop\n    #\n    #\n    #\n@@ -361,7 +361,7 @@\n    stfd%U0%X0 %1,%0\n    mt%0 %1\n    mf%1 %0\n-   {cror 0,0,0|nop}\n+   nop\n    #\n    #\n    #\"\n@@ -383,7 +383,7 @@\n    #\n    #\n    #\n-   {cror 0,0,0|nop}\"\n+   nop\"\n   [(set_attr \"type\" \"load,store,*,mtjmpr,mfjmpr,*,*,*,*\")\n    (set_attr \"length\" \"4,4,4,4,4,8,12,16,4\")])\n "}, {"sha": "7318aa21423bb3b32f46315748fccb235c9317ae", "filename": "gcc/config/rs6000/eabi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Feabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Feabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -21,7 +21,7 @@\n \n /* Add -meabi to target flags.  */\n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_NEW_MNEMONICS | MASK_EABI)\n+#define TARGET_DEFAULT MASK_EABI\n \n /* Invoke an initializer function to set up the GOT.  */\n #define NAME__MAIN \"__eabi\""}, {"sha": "a52262e49c08255d189159f43ab408eaf4067136", "filename": "gcc/config/rs6000/eabialtivec.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Feabialtivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Feabialtivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabialtivec.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -21,7 +21,7 @@\n \n /* Add -meabi and -maltivec to target flags.  */\n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_NEW_MNEMONICS | MASK_EABI | MASK_ALTIVEC)\n+#define TARGET_DEFAULT (MASK_EABI | MASK_ALTIVEC)\n \n #undef  SUBSUBTARGET_OVERRIDE_OPTIONS\n #define SUBSUBTARGET_OVERRIDE_OPTIONS\trs6000_altivec_abi = 1"}, {"sha": "55b57e74ea306d3286400b95998b2de86086fbca", "filename": "gcc/config/rs6000/eabispe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Feabispe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Feabispe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabispe.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -20,7 +20,7 @@\n    <http://www.gnu.org/licenses/>.  */\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_NEW_MNEMONICS | MASK_STRICT_ALIGN | MASK_EABI)\n+#define TARGET_DEFAULT (MASK_STRICT_ALIGN | MASK_EABI)\n \n #undef  ASM_DEFAULT_SPEC\n #define\tASM_DEFAULT_SPEC \"-mppc -mspe -me500\""}, {"sha": "ef3f0ada0ee90a61ff08f405f8ddfc1967fe4356", "filename": "gcc/config/rs6000/linuxaltivec.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Flinuxaltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Flinuxaltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinuxaltivec.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -21,7 +21,7 @@\n \n /* Override rs6000.h and sysv4.h definition.  */\n #undef\tTARGET_DEFAULT\n-#define\tTARGET_DEFAULT (MASK_NEW_MNEMONICS | MASK_ALTIVEC)\n+#define\tTARGET_DEFAULT MASK_ALTIVEC\n \n #undef  SUBSUBTARGET_OVERRIDE_OPTIONS\n #define SUBSUBTARGET_OVERRIDE_OPTIONS rs6000_altivec_abi = 1"}, {"sha": "9eb7b2c7ded5f1df02d403e557e27f3f6b774209", "filename": "gcc/config/rs6000/linuxspe.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Flinuxspe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Flinuxspe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinuxspe.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -21,7 +21,7 @@\n \n /* Override rs6000.h and sysv4.h definition.  */\n #undef\tTARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_NEW_MNEMONICS | MASK_STRICT_ALIGN)\n+#define TARGET_DEFAULT MASK_STRICT_ALIGN\n \n #undef  ASM_DEFAULT_SPEC\n #define\tASM_DEFAULT_SPEC \"-mppc -mspe -me500\""}, {"sha": "cfac0e732e06a79238d61fb3826c8ea5ff95c9e6", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 49, "deletions": 72, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -32,101 +32,78 @@\n \n    where the arguments are the fields of struct rs6000_ptt.  */\n \n-RS6000_CPU (\"401\", PROCESSOR_PPC403, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n-RS6000_CPU (\"403\", PROCESSOR_PPC403,\n-\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_STRICT_ALIGN)\n-RS6000_CPU (\"405\", PROCESSOR_PPC405,\n-\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB)\n-RS6000_CPU (\"405fp\", PROCESSOR_PPC405,\n-\t    POWERPC_BASE_MASK | MASK_MULHW | MASK_DLMZB)\n-RS6000_CPU (\"440\", PROCESSOR_PPC440,\n-\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB)\n-RS6000_CPU (\"440fp\", PROCESSOR_PPC440,\n-\t    POWERPC_BASE_MASK | MASK_MULHW | MASK_DLMZB)\n-RS6000_CPU (\"464\", PROCESSOR_PPC440,\n-\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB)\n-RS6000_CPU (\"464fp\", PROCESSOR_PPC440,\n-\t    POWERPC_BASE_MASK | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"401\", PROCESSOR_PPC403, MASK_SOFT_FLOAT)\n+RS6000_CPU (\"403\", PROCESSOR_PPC403, MASK_SOFT_FLOAT | MASK_STRICT_ALIGN)\n+RS6000_CPU (\"405\", PROCESSOR_PPC405, MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"405fp\", PROCESSOR_PPC405, MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"440\", PROCESSOR_PPC440, MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"440fp\", PROCESSOR_PPC440, MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"464\", PROCESSOR_PPC440, MASK_SOFT_FLOAT | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"464fp\", PROCESSOR_PPC440, MASK_MULHW | MASK_DLMZB)\n RS6000_CPU (\"476\", PROCESSOR_PPC476,\n-\t    POWERPC_BASE_MASK | MASK_SOFT_FLOAT | MASK_PPC_GFXOPT | MASK_MFCRF\n-\t    | MASK_POPCNTB | MASK_FPRND | MASK_CMPB | MASK_MULHW | MASK_DLMZB)\n-RS6000_CPU (\"476fp\", PROCESSOR_PPC476,\n-\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB\n+\t    MASK_SOFT_FLOAT | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB\n \t    | MASK_FPRND | MASK_CMPB | MASK_MULHW | MASK_DLMZB)\n-RS6000_CPU (\"505\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK)\n-RS6000_CPU (\"601\", PROCESSOR_PPC601,\n-\t    POWERPC_BASE_MASK | MASK_MULTIPLE | MASK_STRING)\n-RS6000_CPU (\"602\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n-RS6000_CPU (\"603\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n-RS6000_CPU (\"603e\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n-RS6000_CPU (\"604\", PROCESSOR_PPC604, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n-RS6000_CPU (\"604e\", PROCESSOR_PPC604e, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n-RS6000_CPU (\"620\", PROCESSOR_PPC620,\n-\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64)\n-RS6000_CPU (\"630\", PROCESSOR_PPC630,\n-\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64)\n-RS6000_CPU (\"740\", PROCESSOR_PPC750, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n+RS6000_CPU (\"476fp\", PROCESSOR_PPC476,\n+\t    MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND\n+\t    | MASK_CMPB | MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"505\", PROCESSOR_MPCCORE, 0)\n+RS6000_CPU (\"601\", PROCESSOR_PPC601, MASK_MULTIPLE | MASK_STRING)\n+RS6000_CPU (\"602\", PROCESSOR_PPC603, MASK_PPC_GFXOPT)\n+RS6000_CPU (\"603\", PROCESSOR_PPC603, MASK_PPC_GFXOPT)\n+RS6000_CPU (\"603e\", PROCESSOR_PPC603, MASK_PPC_GFXOPT)\n+RS6000_CPU (\"604\", PROCESSOR_PPC604, MASK_PPC_GFXOPT)\n+RS6000_CPU (\"604e\", PROCESSOR_PPC604e, MASK_PPC_GFXOPT)\n+RS6000_CPU (\"620\", PROCESSOR_PPC620, MASK_PPC_GFXOPT | MASK_POWERPC64)\n+RS6000_CPU (\"630\", PROCESSOR_PPC630, MASK_PPC_GFXOPT | MASK_POWERPC64)\n+RS6000_CPU (\"740\", PROCESSOR_PPC750, MASK_PPC_GFXOPT)\n RS6000_CPU (\"7400\", PROCESSOR_PPC7400, POWERPC_7400_MASK)\n RS6000_CPU (\"7450\", PROCESSOR_PPC7450, POWERPC_7400_MASK)\n-RS6000_CPU (\"750\", PROCESSOR_PPC750, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n-RS6000_CPU (\"801\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n-RS6000_CPU (\"821\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n-RS6000_CPU (\"823\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n-RS6000_CPU (\"8540\", PROCESSOR_PPC8540, POWERPC_BASE_MASK | MASK_STRICT_ALIGN\n-\t    | MASK_ISEL)\n-RS6000_CPU (\"8548\", PROCESSOR_PPC8548, POWERPC_BASE_MASK | MASK_STRICT_ALIGN\n-\t    | MASK_ISEL)\n+RS6000_CPU (\"750\", PROCESSOR_PPC750, MASK_PPC_GFXOPT)\n+RS6000_CPU (\"801\", PROCESSOR_MPCCORE, MASK_SOFT_FLOAT)\n+RS6000_CPU (\"821\", PROCESSOR_MPCCORE, MASK_SOFT_FLOAT)\n+RS6000_CPU (\"823\", PROCESSOR_MPCCORE, MASK_SOFT_FLOAT)\n+RS6000_CPU (\"8540\", PROCESSOR_PPC8540, MASK_STRICT_ALIGN | MASK_ISEL)\n+RS6000_CPU (\"8548\", PROCESSOR_PPC8548, MASK_STRICT_ALIGN | MASK_ISEL)\n RS6000_CPU (\"a2\", PROCESSOR_PPCA2,\n-\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_POPCNTB\n-\t    | MASK_CMPB | MASK_NO_UPDATE)\n-RS6000_CPU (\"e300c2\", PROCESSOR_PPCE300C2, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n-RS6000_CPU (\"e300c3\", PROCESSOR_PPCE300C3, POWERPC_BASE_MASK)\n-RS6000_CPU (\"e500mc\", PROCESSOR_PPCE500MC, POWERPC_BASE_MASK | MASK_PPC_GFXOPT\n-\t    | MASK_ISEL)\n+\t    MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_POPCNTB | MASK_CMPB\n+\t    | MASK_NO_UPDATE)\n+RS6000_CPU (\"e300c2\", PROCESSOR_PPCE300C2, MASK_SOFT_FLOAT)\n+RS6000_CPU (\"e300c3\", PROCESSOR_PPCE300C3, 0)\n+RS6000_CPU (\"e500mc\", PROCESSOR_PPCE500MC, MASK_PPC_GFXOPT | MASK_ISEL)\n RS6000_CPU (\"e500mc64\", PROCESSOR_PPCE500MC64,\n-\t    POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GFXOPT | MASK_ISEL)\n-RS6000_CPU (\"e5500\", PROCESSOR_PPCE5500, POWERPC_BASE_MASK | MASK_POWERPC64\n-\t    | MASK_PPC_GFXOPT | MASK_ISEL)\n+\t    MASK_POWERPC64 | MASK_PPC_GFXOPT | MASK_ISEL)\n+RS6000_CPU (\"e5500\", PROCESSOR_PPCE5500,\n+\t    MASK_POWERPC64 | MASK_PPC_GFXOPT | MASK_ISEL)\n RS6000_CPU (\"e6500\", PROCESSOR_PPCE6500, POWERPC_7400_MASK | MASK_POWERPC64\n \t    | MASK_MFCRF | MASK_ISEL)\n-RS6000_CPU (\"860\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n+RS6000_CPU (\"860\", PROCESSOR_MPCCORE, MASK_SOFT_FLOAT)\n RS6000_CPU (\"970\", PROCESSOR_POWER4,\n \t    POWERPC_7400_MASK | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64)\n RS6000_CPU (\"cell\", PROCESSOR_CELL,\n \t    POWERPC_7400_MASK  | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64)\n-RS6000_CPU (\"common\", PROCESSOR_COMMON, MASK_NEW_MNEMONICS)\n-RS6000_CPU (\"ec603e\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n-RS6000_CPU (\"G3\", PROCESSOR_PPC750, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n+RS6000_CPU (\"ec603e\", PROCESSOR_PPC603, MASK_SOFT_FLOAT)\n+RS6000_CPU (\"G3\", PROCESSOR_PPC750, MASK_PPC_GFXOPT)\n RS6000_CPU (\"G4\",  PROCESSOR_PPC7450, POWERPC_7400_MASK)\n RS6000_CPU (\"G5\", PROCESSOR_POWER4,\n \t    POWERPC_7400_MASK | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64)\n-RS6000_CPU (\"titan\", PROCESSOR_TITAN,\n-\t    POWERPC_BASE_MASK | MASK_MULHW | MASK_DLMZB)\n-RS6000_CPU (\"power3\", PROCESSOR_PPC630,\n-\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64)\n-RS6000_CPU (\"power4\", PROCESSOR_POWER4,\n-\t    POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT\n+RS6000_CPU (\"titan\", PROCESSOR_TITAN, MASK_MULHW | MASK_DLMZB)\n+RS6000_CPU (\"power3\", PROCESSOR_PPC630, MASK_PPC_GFXOPT | MASK_POWERPC64)\n+RS6000_CPU (\"power4\", PROCESSOR_POWER4, MASK_POWERPC64 | MASK_PPC_GPOPT\n \t    | MASK_PPC_GFXOPT | MASK_MFCRF)\n-RS6000_CPU (\"power5\", PROCESSOR_POWER5,\n-\t    POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT\n+RS6000_CPU (\"power5\", PROCESSOR_POWER5, MASK_POWERPC64 | MASK_PPC_GPOPT\n \t    | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB)\n-RS6000_CPU (\"power5+\", PROCESSOR_POWER5,\n-\t    POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT\n+RS6000_CPU (\"power5+\", PROCESSOR_POWER5, MASK_POWERPC64 | MASK_PPC_GPOPT\n \t    | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND)\n-RS6000_CPU (\"power6\", PROCESSOR_POWER6,\n-\t    POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT\n+RS6000_CPU (\"power6\", PROCESSOR_POWER6, MASK_POWERPC64 | MASK_PPC_GPOPT\n \t    | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND\n \t    | MASK_CMPB | MASK_DFP | MASK_RECIP_PRECISION)\n-RS6000_CPU (\"power6x\", PROCESSOR_POWER6,\n-\t    POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT\n+RS6000_CPU (\"power6x\", PROCESSOR_POWER6, MASK_POWERPC64 | MASK_PPC_GPOPT\n \t    | MASK_PPC_GFXOPT | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND\n \t    | MASK_CMPB | MASK_DFP | MASK_MFPGPR | MASK_RECIP_PRECISION)\n RS6000_CPU (\"power7\", PROCESSOR_POWER7,   /* Don't add MASK_ISEL by default */\n \t    POWERPC_7400_MASK | MASK_POWERPC64 | MASK_PPC_GPOPT | MASK_MFCRF\n \t    | MASK_POPCNTB | MASK_FPRND | MASK_CMPB | MASK_DFP | MASK_POPCNTD\n \t    | MASK_VSX | MASK_RECIP_PRECISION)\n-RS6000_CPU (\"powerpc\", PROCESSOR_POWERPC, POWERPC_BASE_MASK)\n-RS6000_CPU (\"powerpc64\", PROCESSOR_POWERPC64,\n-\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64)\n-RS6000_CPU (\"rs64\", PROCESSOR_RS64A,\n-\t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64)\n+RS6000_CPU (\"powerpc\", PROCESSOR_POWERPC, 0)\n+RS6000_CPU (\"powerpc64\", PROCESSOR_POWERPC64, MASK_PPC_GFXOPT | MASK_POWERPC64)\n+RS6000_CPU (\"rs64\", PROCESSOR_RS64A, MASK_PPC_GFXOPT | MASK_POWERPC64)"}, {"sha": "f63d9c4f6cc2f17cc18f3388915603dc1d74ae7d", "filename": "gcc/config/rs6000/rs6000-tables.opt", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -141,50 +141,47 @@ EnumValue\n Enum(rs6000_cpu_opt_value) String(cell) Value(37)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(common) Value(38)\n+Enum(rs6000_cpu_opt_value) String(ec603e) Value(38)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(ec603e) Value(39)\n+Enum(rs6000_cpu_opt_value) String(G3) Value(39)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(G3) Value(40)\n+Enum(rs6000_cpu_opt_value) String(G4) Value(40)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(G4) Value(41)\n+Enum(rs6000_cpu_opt_value) String(G5) Value(41)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(G5) Value(42)\n+Enum(rs6000_cpu_opt_value) String(titan) Value(42)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(titan) Value(43)\n+Enum(rs6000_cpu_opt_value) String(power3) Value(43)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(power3) Value(44)\n+Enum(rs6000_cpu_opt_value) String(power4) Value(44)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(power4) Value(45)\n+Enum(rs6000_cpu_opt_value) String(power5) Value(45)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(power5) Value(46)\n+Enum(rs6000_cpu_opt_value) String(power5+) Value(46)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(power5+) Value(47)\n+Enum(rs6000_cpu_opt_value) String(power6) Value(47)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(power6) Value(48)\n+Enum(rs6000_cpu_opt_value) String(power6x) Value(48)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(power6x) Value(49)\n+Enum(rs6000_cpu_opt_value) String(power7) Value(49)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(power7) Value(50)\n+Enum(rs6000_cpu_opt_value) String(powerpc) Value(50)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(powerpc) Value(51)\n+Enum(rs6000_cpu_opt_value) String(powerpc64) Value(51)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(powerpc64) Value(52)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(rs64) Value(53)\n+Enum(rs6000_cpu_opt_value) String(rs64) Value(52)\n "}, {"sha": "4571c6f3d1eca109cdfc56012a724c305de40cd7", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -1457,8 +1457,7 @@ static const struct attribute_spec rs6000_attribute_table[] =\n /* Simplifications for entries below.  */\n \n enum {\n-  POWERPC_BASE_MASK = MASK_NEW_MNEMONICS,\n-  POWERPC_7400_MASK = POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_ALTIVEC\n+  POWERPC_7400_MASK = MASK_PPC_GFXOPT | MASK_ALTIVEC\n };\n \n /* Some OSs don't support saving the high part of 64-bit registers on context\n@@ -1468,7 +1467,7 @@ enum {\n    the user's specification.  */\n \n enum {\n-  POWERPC_MASKS = (POWERPC_BASE_MASK | MASK_PPC_GPOPT | MASK_STRICT_ALIGN\n+  POWERPC_MASKS = (MASK_PPC_GPOPT | MASK_STRICT_ALIGN\n \t\t   | MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_ALTIVEC\n \t\t   | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND | MASK_MULHW\n \t\t   | MASK_DLMZB | MASK_CMPB | MASK_MFPGPR | MASK_DFP\n@@ -4023,11 +4022,11 @@ direct_return (void)\n int\n num_insns_constant_wide (HOST_WIDE_INT value)\n {\n-  /* signed constant loadable with {cal|addi} */\n+  /* signed constant loadable with addi */\n   if ((unsigned HOST_WIDE_INT) (value + 0x8000) < 0x10000)\n     return 1;\n \n-  /* constant loadable with {cau|addis} */\n+  /* constant loadable with addis */\n   else if ((value & 0xffff) == 0\n \t   && (value >> 31 == -1 || value >> 31 == 0))\n     return 1;\n@@ -13027,7 +13026,7 @@ rs6000_output_load_multiple (rtx operands[3])\n   rtx xop[10];\n \n   if (XVECLEN (operands[0], 0) == 1)\n-    return \"{l|lwz} %2,0(%1)\";\n+    return \"lwz %2,0(%1)\";\n \n   for (i = 0; i < words; i++)\n     if (refers_to_regno_p (REGNO (operands[2]) + i,\n@@ -13038,15 +13037,15 @@ rs6000_output_load_multiple (rtx operands[3])\n \t    xop[0] = GEN_INT (4 * (words-1));\n \t    xop[1] = operands[1];\n \t    xop[2] = operands[2];\n-\t    output_asm_insn (\"{lsi|lswi} %2,%1,%0\\n\\t{l|lwz} %1,%0(%1)\", xop);\n+\t    output_asm_insn (\"lswi %2,%1,%0\\n\\tlwz %1,%0(%1)\", xop);\n \t    return \"\";\n \t  }\n \telse if (i == 0)\n \t  {\n \t    xop[0] = GEN_INT (4 * (words-1));\n \t    xop[1] = operands[1];\n \t    xop[2] = gen_rtx_REG (SImode, REGNO (operands[2]) + 1);\n-\t    output_asm_insn (\"{cal %1,4(%1)|addi %1,%1,4}\\n\\t{lsi|lswi} %2,%1,%0\\n\\t{l|lwz} %1,-4(%1)\", xop);\n+\t    output_asm_insn (\"addi %1,%1,4\\n\\tlswi %2,%1,%0\\n\\tlwz %1,-4(%1)\", xop);\n \t    return \"\";\n \t  }\n \telse\n@@ -13057,16 +13056,16 @@ rs6000_output_load_multiple (rtx operands[3])\n \t\t  xop[0] = GEN_INT (j * 4);\n \t\t  xop[1] = operands[1];\n \t\t  xop[2] = gen_rtx_REG (SImode, REGNO (operands[2]) + j);\n-\t\t  output_asm_insn (\"{l|lwz} %2,%0(%1)\", xop);\n+\t\t  output_asm_insn (\"lwz %2,%0(%1)\", xop);\n \t\t}\n \t    xop[0] = GEN_INT (i * 4);\n \t    xop[1] = operands[1];\n-\t    output_asm_insn (\"{l|lwz} %1,%0(%1)\", xop);\n+\t    output_asm_insn (\"lwz %1,%0(%1)\", xop);\n \t    return \"\";\n \t  }\n       }\n \n-  return \"{lsi|lswi} %2,%1,%N0\";\n+  return \"lswi %2,%1,%N0\";\n }\n \n \f\n@@ -14957,7 +14956,7 @@ print_operand (FILE *file, rtx x, int code)\n \t\t\t\t  && REGNO (x) != CTR_REGNO))\n \toutput_operand_lossage (\"invalid %%T value\");\n       else if (REGNO (x) == LR_REGNO)\n-\tfputs (TARGET_NEW_MNEMONICS ? \"lr\" : \"r\", file);\n+\tfputs (\"lr\", file);\n       else\n \tfputs (\"ctr\", file);\n       return;\n@@ -15922,8 +15921,7 @@ output_cbranch (rtx op, const char *label, int reversed, rtx insn)\n       gcc_unreachable ();\n     }\n \n-  /* Maybe we have a guess as to how likely the branch is.\n-     The old mnemonics don't have a way to specify this information.  */\n+  /* Maybe we have a guess as to how likely the branch is.  */\n   pred = \"\";\n   note = find_reg_note (insn, REG_BR_PROB, NULL_RTX);\n   if (note != NULL_RTX)\n@@ -15950,9 +15948,9 @@ output_cbranch (rtx op, const char *label, int reversed, rtx insn)\n     }\n \n   if (label == NULL)\n-    s += sprintf (s, \"{b%sr|b%slr%s} \", ccode, ccode, pred);\n+    s += sprintf (s, \"b%slr%s \", ccode, pred);\n   else\n-    s += sprintf (s, \"{b%s|b%s%s} \", ccode, ccode, pred);\n+    s += sprintf (s, \"b%s%s \", ccode, pred);\n \n   /* We need to escape any '%' characters in the reg_names string.\n      Assume they'd only be the first character....  */\n@@ -18788,21 +18786,21 @@ output_probe_stack_range (rtx reg1, rtx reg2)\n   xops[0] = reg1;\n   xops[1] = reg2;\n   if (TARGET_64BIT)\n-    output_asm_insn (\"{cmp|cmpd} 0,%0,%1\", xops);\n+    output_asm_insn (\"cmpd 0,%0,%1\", xops);\n   else\n-    output_asm_insn (\"{cmp|cmpw} 0,%0,%1\", xops);\n+    output_asm_insn (\"cmpw 0,%0,%1\", xops);\n \n   fputs (\"\\tbeq 0,\", asm_out_file);\n   assemble_name_raw (asm_out_file, end_lab);\n   fputc ('\\n', asm_out_file);\n \n   /* TEST_ADDR = TEST_ADDR + PROBE_INTERVAL.  */\n   xops[1] = GEN_INT (-PROBE_INTERVAL);\n-  output_asm_insn (\"{cal %0,%1(%0)|addi %0,%0,%1}\", xops);\n+  output_asm_insn (\"addi %0,%0,%1\", xops);\n \n   /* Probe at TEST_ADDR and branch.  */\n   xops[1] = gen_rtx_REG (Pmode, 0);\n-  output_asm_insn (\"{st|stw} %1,0(%0)\", xops);\n+  output_asm_insn (\"stw %1,0(%0)\", xops);\n   fprintf (asm_out_file, \"\\tb \");\n   assemble_name_raw (asm_out_file, loop_lab);\n   fputc ('\\n', asm_out_file);\n@@ -22351,7 +22349,7 @@ output_function_profiler (FILE *file, int labelno)\n       fprintf (file, \"\\tmflr %s\\n\", reg_names[0]);\n       if (NO_PROFILE_COUNTERS)\n \t{\n-\t  asm_fprintf (file, \"\\t{st|stw} %s,4(%s)\\n\",\n+\t  asm_fprintf (file, \"\\tstw %s,4(%s)\\n\",\n \t\t       reg_names[0], reg_names[1]);\n \t}\n       else if (TARGET_SECURE_PLT && flag_pic)\n@@ -22364,29 +22362,29 @@ output_function_profiler (FILE *file, int labelno)\n \t    }\n \t  else\n \t    asm_fprintf (file, \"\\tbcl 20,31,1f\\n1:\\n\");\n-\t  asm_fprintf (file, \"\\t{st|stw} %s,4(%s)\\n\",\n+\t  asm_fprintf (file, \"\\tstw %s,4(%s)\\n\",\n \t\t       reg_names[0], reg_names[1]);\n \t  asm_fprintf (file, \"\\tmflr %s\\n\", reg_names[12]);\n-\t  asm_fprintf (file, \"\\t{cau|addis} %s,%s,\",\n+\t  asm_fprintf (file, \"\\taddis %s,%s,\",\n \t\t       reg_names[12], reg_names[12]);\n \t  assemble_name (file, buf);\n-\t  asm_fprintf (file, \"-1b@ha\\n\\t{cal|la} %s,\", reg_names[0]);\n+\t  asm_fprintf (file, \"-1b@ha\\n\\tla %s,\", reg_names[0]);\n \t  assemble_name (file, buf);\n \t  asm_fprintf (file, \"-1b@l(%s)\\n\", reg_names[12]);\n \t}\n       else if (flag_pic == 1)\n \t{\n \t  fputs (\"\\tbl _GLOBAL_OFFSET_TABLE_@local-4\\n\", file);\n-\t  asm_fprintf (file, \"\\t{st|stw} %s,4(%s)\\n\",\n+\t  asm_fprintf (file, \"\\tstw %s,4(%s)\\n\",\n \t\t       reg_names[0], reg_names[1]);\n \t  asm_fprintf (file, \"\\tmflr %s\\n\", reg_names[12]);\n-\t  asm_fprintf (file, \"\\t{l|lwz} %s,\", reg_names[0]);\n+\t  asm_fprintf (file, \"\\tlwz %s,\", reg_names[0]);\n \t  assemble_name (file, buf);\n \t  asm_fprintf (file, \"@got(%s)\\n\", reg_names[12]);\n \t}\n       else if (flag_pic > 1)\n \t{\n-\t  asm_fprintf (file, \"\\t{st|stw} %s,4(%s)\\n\",\n+\t  asm_fprintf (file, \"\\tstw %s,4(%s)\\n\",\n \t\t       reg_names[0], reg_names[1]);\n \t  /* Now, we need to get the address of the label.  */\n \t  if (TARGET_LINK_STACK)\n@@ -22407,19 +22405,19 @@ output_function_profiler (FILE *file, int labelno)\n \t      fputs (\"-.\\n1:\", file);\n \t      asm_fprintf (file, \"\\tmflr %s\\n\", reg_names[11]);\n \t    }\n-\t  asm_fprintf (file, \"\\t{l|lwz} %s,0(%s)\\n\",\n+\t  asm_fprintf (file, \"\\tlwz %s,0(%s)\\n\",\n \t\t       reg_names[0], reg_names[11]);\n-\t  asm_fprintf (file, \"\\t{cax|add} %s,%s,%s\\n\",\n+\t  asm_fprintf (file, \"\\tadd %s,%s,%s\\n\",\n \t\t       reg_names[0], reg_names[0], reg_names[11]);\n \t}\n       else\n \t{\n-\t  asm_fprintf (file, \"\\t{liu|lis} %s,\", reg_names[12]);\n+\t  asm_fprintf (file, \"\\tlis %s,\", reg_names[12]);\n \t  assemble_name (file, buf);\n \t  fputs (\"@ha\\n\", file);\n-\t  asm_fprintf (file, \"\\t{st|stw} %s,4(%s)\\n\",\n+\t  asm_fprintf (file, \"\\tstw %s,4(%s)\\n\",\n \t\t       reg_names[0], reg_names[1]);\n-\t  asm_fprintf (file, \"\\t{cal|la} %s,\", reg_names[0]);\n+\t  asm_fprintf (file, \"\\tla %s,\", reg_names[0]);\n \t  assemble_name (file, buf);\n \t  asm_fprintf (file, \"@l(%s)\\n\", reg_names[12]);\n \t}"}, {"sha": "abafbf9002382865a87eeeb9848c5cb4f429f799", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -348,10 +348,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define PROCESSOR_DEFAULT   PROCESSOR_PPC603\n #define PROCESSOR_DEFAULT64 PROCESSOR_RS64A\n \n-/* Specify the dialect of assembler to use.  New mnemonics is dialect one\n-   and the old mnemonics are dialect zero.  */\n-#define ASSEMBLER_DIALECT (TARGET_NEW_MNEMONICS ? 1 : 0)\n-\n /* Debug support */\n #define MASK_DEBUG_STACK\t0x01\t/* debug stack applications */\n #define\tMASK_DEBUG_ARG\t\t0x02\t/* debug argument handling */"}, {"sha": "d5ffd81b068aead248cc45fcde93f92af40b6a97", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 303, "deletions": 303, "changes": 606, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -288,7 +288,7 @@\n (define_mode_attr mptrsize [(SI \"si\")\n \t\t\t    (DI \"di\")])\n \n-(define_mode_attr ptrload [(SI \"{l|lwz}\")\n+(define_mode_attr ptrload [(SI \"lwz\")\n \t\t\t   (DI \"ld\")])\n \n (define_mode_attr rreg [(SF   \"f\")\n@@ -597,7 +597,7 @@\n   \"\"\n   \"@\n    lbz%U1%X1 %0,%1\n-   {rlinm|rlwinm} %0,%1,0,0xff\"\n+   rlwinm %0,%1,0,0xff\"\n   [(set_attr \"type\" \"load,*\")])\n \n (define_insn \"\"\n@@ -607,7 +607,7 @@\n    (clobber (match_scratch:SI 2 \"=r,r\"))]\n   \"\"\n   \"@\n-   {andil.|andi.} %2,%1,0xff\n+   andi. %2,%1,0xff\n    #\"\n   [(set_attr \"type\" \"fast_compare,compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -633,7 +633,7 @@\n \t(zero_extend:SI (match_dup 1)))]\n   \"\"\n   \"@\n-   {andil.|andi.} %0,%1,0xff\n+   andi. %0,%1,0xff\n    #\"\n   [(set_attr \"type\" \"fast_compare,compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -717,7 +717,7 @@\n   \"\"\n   \"@\n    lbz%U1%X1 %0,%1\n-   {rlinm|rlwinm} %0,%1,0,0xff\"\n+   rlwinm %0,%1,0,0xff\"\n   [(set_attr \"type\" \"load,*\")])\n \n (define_insn \"\"\n@@ -727,7 +727,7 @@\n    (clobber (match_scratch:HI 2 \"=r,r\"))]\n   \"\"\n   \"@\n-   {andil.|andi.} %2,%1,0xff\n+   andi. %2,%1,0xff\n    #\"\n   [(set_attr \"type\" \"fast_compare,compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -753,7 +753,7 @@\n \t(zero_extend:HI (match_dup 1)))]\n   \"\"\n   \"@\n-   {andil.|andi.} %0,%1,0xff\n+   andi. %0,%1,0xff\n    #\"\n   [(set_attr \"type\" \"fast_compare,compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -843,7 +843,7 @@\n   \"\"\n   \"@\n    lhz%U1%X1 %0,%1\n-   {rlinm|rlwinm} %0,%1,0,0xffff\"\n+   rlwinm %0,%1,0,0xffff\"\n   [(set_attr \"type\" \"load,*\")])\n \n (define_insn \"\"\n@@ -853,7 +853,7 @@\n    (clobber (match_scratch:SI 2 \"=r,r\"))]\n   \"\"\n   \"@\n-   {andil.|andi.} %2,%1,0xffff\n+   andi. %2,%1,0xffff\n    #\"\n   [(set_attr \"type\" \"fast_compare,compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -879,7 +879,7 @@\n \t(zero_extend:SI (match_dup 1)))]\n   \"\"\n   \"@\n-   {andil.|andi.} %0,%1,0xffff\n+   andi. %0,%1,0xffff\n    #\"\n   [(set_attr \"type\" \"fast_compare,compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -910,14 +910,14 @@\n   \"rs6000_gen_cell_microcode\"\n   \"@\n    lha%U1%X1 %0,%1\n-   {exts|extsh} %0,%1\"\n+   extsh %0,%1\"\n   [(set_attr \"type\" \"load_ext,exts\")])\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n         (sign_extend:SI (match_operand:HI 1 \"gpc_reg_operand\" \"r\")))]\n   \"!rs6000_gen_cell_microcode\"\n-  \"{exts|extsh} %0,%1\"\n+  \"extsh %0,%1\"\n   [(set_attr \"type\" \"exts\")])\n \n (define_insn \"\"\n@@ -927,7 +927,7 @@\n    (clobber (match_scratch:SI 2 \"=r,r\"))]\n   \"\"\n   \"@\n-   {exts.|extsh.} %2,%1\n+   extsh. %2,%1\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -953,7 +953,7 @@\n \t(sign_extend:SI (match_dup 1)))]\n   \"\"\n   \"@\n-   {exts.|extsh.} %0,%1\n+   extsh. %0,%1\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -1547,18 +1547,18 @@\n \t\t  (match_operand:GPR 2 \"add_operand\" \"r,I,I,L\")))]\n   \"!DECIMAL_FLOAT_MODE_P (GET_MODE (operands[0])) && !DECIMAL_FLOAT_MODE_P (GET_MODE (operands[1]))\"\n   \"@\n-   {cax|add} %0,%1,%2\n-   {cal %0,%2(%1)|addi %0,%1,%2}\n-   {ai|addic} %0,%1,%2\n-   {cau|addis} %0,%1,%v2\"\n+   add %0,%1,%2\n+   addi %0,%1,%2\n+   addic %0,%1,%2\n+   addis %0,%1,%v2\"\n   [(set_attr \"length\" \"4,4,4,4\")])\n \n (define_insn \"addsi3_high\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=b\")\n         (plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n                  (high:SI (match_operand 2 \"\" \"\"))))]\n   \"TARGET_MACHO && !TARGET_64BIT\"\n-  \"{cau|addis} %0,%1,ha16(%2)\"\n+  \"addis %0,%1,ha16(%2)\"\n   [(set_attr \"length\" \"4\")])\n \n (define_insn \"*add<mode>3_internal2\"\n@@ -1569,8 +1569,8 @@\n    (clobber (match_scratch:P 3 \"=r,r,r,r\"))]\n   \"\"\n   \"@\n-   {cax.|add.} %3,%1,%2\n-   {ai.|addic.} %3,%1,%2\n+   add. %3,%1,%2\n+   addic. %3,%1,%2\n    #\n    #\"\n   [(set_attr \"type\" \"fast_compare,compare,compare,compare\")\n@@ -1601,8 +1601,8 @@\n \t\t(match_dup 2)))]\n   \"\"\n   \"@\n-   {cax.|add.} %0,%1,%2\n-   {ai.|addic.} %0,%1,%2\n+   add. %0,%1,%2\n+   addic. %0,%1,%2\n    #\n    #\"\n   [(set_attr \"type\" \"fast_compare,compare,compare,compare\")\n@@ -2012,7 +2012,7 @@\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n \t(clz:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")))]\n   \"\"\n-  \"{cntlz|cntlz<wd>} %0,%1\"\n+  \"cntlz<wd> %0,%1\"\n   [(set_attr \"type\" \"cntlz\")])\n \n (define_expand \"ctz<mode>2\"\n@@ -2181,8 +2181,8 @@\n \t (match_operand:SI 1 \"reg_or_mem_operand\" \"Z,r,r\")))]\n   \"\"\n   \"@\n-   {lbrx|lwbrx} %0,%y1\n-   {stbrx|stwbrx} %1,%y0\n+   lwbrx %0,%y1\n+   stwbrx %1,%y0\n    #\"\n   [(set_attr \"length\" \"4,4,12\")\n    (set_attr \"type\" \"load,store,*\")])\n@@ -2548,8 +2548,8 @@\n \t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))]\n   \"\"\n   \"@\n-   {muls|mullw} %0,%1,%2\n-   {muli|mulli} %0,%1,%2\"\n+   mullw %0,%1,%2\n+   mulli %0,%1,%2\"\n    [(set (attr \"type\")\n       (cond [(match_operand:SI 2 \"s8bit_cint_operand\" \"\")\n \t\t(const_string \"imul3\")\n@@ -2565,7 +2565,7 @@\n    (clobber (match_scratch:SI 3 \"=r,r\"))]\n   \"\"\n   \"@\n-   {muls.|mullw.} %3,%1,%2\n+   mullw. %3,%1,%2\n    #\"\n   [(set_attr \"type\" \"imul_compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -2593,7 +2593,7 @@\n \t(mult:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n   \"@\n-   {muls.|mullw.} %0,%1,%2\n+   mullw. %0,%1,%2\n    #\"\n   [(set_attr \"type\" \"imul_compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -2682,7 +2682,7 @@\n \t(div:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n \t\t (match_operand:GPR 2 \"exact_log2_cint_operand\" \"N\")))]\n   \"\"\n-  \"{srai|sra<wd>i} %0,%1,%p2\\;{aze|addze} %0,%0\"\n+  \"sra<wd>i %0,%1,%p2\\;addze %0,%0\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n \n@@ -2694,7 +2694,7 @@\n    (clobber (match_scratch:P 3 \"=r,r\"))]\n   \"\"\n   \"@\n-   {srai|sra<wd>i} %3,%1,%p2\\;{aze.|addze.} %3,%3\n+   sra<wd>i %3,%1,%p2\\;addze. %3,%3\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"8,12\")\n@@ -2724,7 +2724,7 @@\n \t(div:P (match_dup 1) (match_dup 2)))]\n   \"\"\n   \"@\n-   {srai|sra<wd>i} %0,%1,%p2\\;{aze.|addze.} %0,%0\n+   sra<wd>i %0,%1,%p2\\;addze. %0,%0\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"8,12\")\n@@ -2769,9 +2769,9 @@\n   \"rs6000_gen_cell_microcode\"\n   \"@\n    and %0,%1,%2\n-   {rlinm|rlwinm} %0,%1,0,%m2,%M2\n-   {andil.|andi.} %0,%1,%b2\n-   {andiu.|andis.} %0,%1,%u2\"\n+   rlwinm %0,%1,0,%m2,%M2\n+   andi. %0,%1,%b2\n+   andis. %0,%1,%u2\"\n   [(set_attr \"type\" \"*,*,fast_compare,fast_compare\")])\n \n (define_insn \"andsi3_nomc\"\n@@ -2782,7 +2782,7 @@\n   \"!rs6000_gen_cell_microcode\"\n   \"@\n    and %0,%1,%2\n-   {rlinm|rlwinm} %0,%1,0,%m2,%M2\")\n+   rlwinm %0,%1,0,%m2,%M2\")\n \n (define_insn \"andsi3_internal0_nomc\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n@@ -2791,7 +2791,7 @@\n   \"!rs6000_gen_cell_microcode\"\n   \"@\n    and %0,%1,%2\n-   {rlinm|rlwinm} %0,%1,0,%m2,%M2\")\n+   rlwinm %0,%1,0,%m2,%M2\")\n \n \n ;; Note to set cr's other than cr0 we do the and immediate and then\n@@ -2808,9 +2808,9 @@\n   \"TARGET_32BIT && rs6000_gen_cell_microcode\"\n   \"@\n    and. %3,%1,%2\n-   {andil.|andi.} %3,%1,%b2\n-   {andiu.|andis.} %3,%1,%u2\n-   {rlinm.|rlwinm.} %3,%1,0,%m2,%M2\n+   andi. %3,%1,%b2\n+   andis. %3,%1,%u2\n+   rlwinm. %3,%1,0,%m2,%M2\n    #\n    #\n    #\n@@ -2829,9 +2829,9 @@\n   \"TARGET_64BIT && rs6000_gen_cell_microcode\"\n   \"@\n    #\n-   {andil.|andi.} %3,%1,%b2\n-   {andiu.|andis.} %3,%1,%u2\n-   {rlinm.|rlwinm.} %3,%1,0,%m2,%M2\n+   andi. %3,%1,%b2\n+   andis. %3,%1,%u2\n+   rlwinm. %3,%1,0,%m2,%M2\n    #\n    #\n    #\n@@ -2889,9 +2889,9 @@\n   \"TARGET_32BIT && rs6000_gen_cell_microcode\"\n   \"@\n    and. %0,%1,%2\n-   {andil.|andi.} %0,%1,%b2\n-   {andiu.|andis.} %0,%1,%u2\n-   {rlinm.|rlwinm.} %0,%1,0,%m2,%M2\n+   andi. %0,%1,%b2\n+   andis. %0,%1,%u2\n+   rlwinm. %0,%1,0,%m2,%M2\n    #\n    #\n    #\n@@ -2912,9 +2912,9 @@\n   \"TARGET_64BIT && rs6000_gen_cell_microcode\"\n   \"@\n    #\n-   {andil.|andi.} %0,%1,%b2\n-   {andiu.|andis.} %0,%1,%u2\n-   {rlinm.|rlwinm.} %0,%1,0,%m2,%M2\n+   andi. %0,%1,%b2\n+   andis. %0,%1,%u2\n+   rlwinm. %0,%1,0,%m2,%M2\n    #\n    #\n    #\n@@ -3037,8 +3037,8 @@\n   \"\"\n   \"@\n    %q3 %0,%1,%2\n-   {%q3il|%q3i} %0,%1,%b2\n-   {%q3iu|%q3is} %0,%1,%u2\")\n+   %q3i %0,%1,%b2\n+   %q3is %0,%1,%u2\")\n \n (define_insn \"*boolsi3_internal2\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -3292,7 +3292,7 @@\n \n   operands[4] = GEN_INT (32 - start - size);\n   operands[1] = GEN_INT (start + size - 1);\n-  return \\\"{rlimi|rlwimi} %0,%3,%h4,%h2,%h1\\\";\n+  return \\\"rlwimi %0,%3,%h4,%h2,%h1\\\";\n }\"\n   [(set_attr \"type\" \"insert_word\")])\n \n@@ -3311,7 +3311,7 @@\n \n   operands[4] = GEN_INT (shift - start - size);\n   operands[1] = GEN_INT (start + size - 1);\n-  return \\\"{rlimi|rlwimi} %0,%3,%h4,%h2,%h1\\\";\n+  return \\\"rlwimi %0,%3,%h4,%h2,%h1\\\";\n }\"\n   [(set_attr \"type\" \"insert_word\")])\n \n@@ -3330,7 +3330,7 @@\n \n   operands[4] = GEN_INT (32 - shift - start - size);\n   operands[1] = GEN_INT (start + size - 1);\n-  return \\\"{rlimi|rlwimi} %0,%3,%h4,%h2,%h1\\\";\n+  return \\\"rlwimi %0,%3,%h4,%h2,%h1\\\";\n }\"\n   [(set_attr \"type\" \"insert_word\")])\n \n@@ -3349,7 +3349,7 @@\n \n   operands[4] = GEN_INT (32 - shift - start - size);\n   operands[1] = GEN_INT (start + size - 1);\n-  return \\\"{rlimi|rlwimi} %0,%3,%h4,%h2,%h1\\\";\n+  return \\\"rlwimi %0,%3,%h4,%h2,%h1\\\";\n }\"\n   [(set_attr \"type\" \"insert_word\")])\n \n@@ -3371,7 +3371,7 @@\n /* Align extract field with insert field */\n   operands[5] = GEN_INT (extract_start + extract_size - insert_start - insert_size);\n   operands[1] = GEN_INT (insert_start + insert_size - 1);\n-  return \\\"{rlimi|rlwimi} %0,%3,%h5,%h2,%h1\\\";\n+  return \\\"rlwimi %0,%3,%h5,%h2,%h1\\\";\n }\"\n   [(set_attr \"type\" \"insert_word\")])\n \n@@ -3391,7 +3391,7 @@\n  operands[4] = GEN_INT(32 - INTVAL(operands[2]));\n  operands[2] = GEN_INT(mb);\n  operands[1] = GEN_INT(me);\n- return \\\"{rlimi|rlwimi} %0,%3,%h4,%h2,%h1\\\";\n+ return \\\"rlwimi %0,%3,%h4,%h2,%h1\\\";\n }\"\n   [(set_attr \"type\" \"insert_word\")])\n \n@@ -3410,7 +3410,7 @@\n  operands[4] = GEN_INT(32 - INTVAL(operands[2]));\n  operands[2] = GEN_INT(mb);\n  operands[1] = GEN_INT(me);\n- return \\\"{rlimi|rlwimi} %0,%3,%h4,%h2,%h1\\\";\n+ return \\\"rlwimi %0,%3,%h4,%h2,%h1\\\";\n }\"\n   [(set_attr \"type\" \"insert_word\")])\n \n@@ -3507,7 +3507,7 @@\n     operands[3] = const0_rtx;\n   else\n     operands[3] = GEN_INT (start + size);\n-  return \\\"{rlinm|rlwinm} %0,%1,%3,%s2,31\\\";\n+  return \\\"rlwinm %0,%1,%3,%s2,31\\\";\n }\")\n \n (define_insn \"*extzvsi_internal1\"\n@@ -3538,16 +3538,16 @@\n       operands[3] = GEN_INT (((1 << (16 - (start & 15)))\n \t\t\t      - (1 << (16 - (start & 15) - size))));\n       if (start < 16)\n-\treturn \\\"{andiu.|andis.} %4,%1,%3\\\";\n+\treturn \\\"andis. %4,%1,%3\\\";\n       else\n-\treturn \\\"{andil.|andi.} %4,%1,%3\\\";\n+\treturn \\\"andi. %4,%1,%3\\\";\n     }\n \n   if (start + size >= 32)\n     operands[3] = const0_rtx;\n   else\n     operands[3] = GEN_INT (start + size);\n-  return \\\"{rlinm.|rlwinm.} %4,%1,%3,%s2,31\\\";\n+  return \\\"rlwinm. %4,%1,%3,%s2,31\\\";\n }\"\n   [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -3591,14 +3591,14 @@\n   if (start >= 16 && start + size == 32)\n     {\n       operands[3] = GEN_INT ((1 << size) - 1);\n-      return \\\"{andil.|andi.} %0,%1,%3\\\";\n+      return \\\"andi. %0,%1,%3\\\";\n     }\n \n   if (start + size >= 32)\n     operands[3] = const0_rtx;\n   else\n     operands[3] = GEN_INT (start + size);\n-  return \\\"{rlinm.|rlwinm.} %0,%1,%3,%s2,31\\\";\n+  return \\\"rlwinm. %0,%1,%3,%s2,31\\\";\n }\"\n   [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -3689,8 +3689,8 @@\n \t\t   (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")))]\n   \"\"\n   \"@\n-   {rlnm|rlwnm} %0,%1,%2,0xffffffff\n-   {rlinm|rlwinm} %0,%1,%h2,0xffffffff\"\n+   rlwnm %0,%1,%2,0xffffffff\n+   rlwinm %0,%1,%h2,0xffffffff\"\n   [(set_attr \"type\" \"var_shift_rotate,integer\")])\n \n (define_insn \"*rotlsi3_64\"\n@@ -3700,8 +3700,8 @@\n \t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\"))))]\n   \"TARGET_64BIT\"\n   \"@\n-   {rlnm|rlwnm} %0,%1,%2,0xffffffff\n-   {rlinm|rlwinm} %0,%1,%h2,0xffffffff\"\n+   rlwnm %0,%1,%2,0xffffffff\n+   rlwinm %0,%1,%h2,0xffffffff\"\n   [(set_attr \"type\" \"var_shift_rotate,integer\")])\n \n (define_insn \"*rotlsi3_internal2\"\n@@ -3712,8 +3712,8 @@\n    (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n   \"\"\n   \"@\n-   {rlnm.|rlwnm.} %3,%1,%2,0xffffffff\n-   {rlinm.|rlwinm.} %3,%1,%h2,0xffffffff\n+   rlwnm. %3,%1,%2,0xffffffff\n+   rlwinm. %3,%1,%h2,0xffffffff\n    #\n    #\"\n   [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n@@ -3742,8 +3742,8 @@\n \t(rotate:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n   \"@\n-   {rlnm.|rlwnm.} %0,%1,%2,0xffffffff\n-   {rlinm.|rlwinm.} %0,%1,%h2,0xffffffff\n+   rlwnm. %0,%1,%2,0xffffffff\n+   rlwinm. %0,%1,%h2,0xffffffff\n    #\n    #\"\n   [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n@@ -3771,8 +3771,8 @@\n \t\t(match_operand:SI 3 \"mask_operand\" \"n,n\")))]\n   \"\"\n   \"@\n-   {rlnm|rlwnm} %0,%1,%2,%m3,%M3\n-   {rlinm|rlwinm} %0,%1,%h2,%m3,%M3\"\n+   rlwnm %0,%1,%2,%m3,%M3\n+   rlwinm %0,%1,%h2,%m3,%M3\"\n   [(set_attr \"type\" \"var_shift_rotate,integer\")])\n \n (define_insn \"*rotlsi3_internal5\"\n@@ -3785,8 +3785,8 @@\n    (clobber (match_scratch:SI 4 \"=r,r,r,r\"))]\n   \"\"\n   \"@\n-   {rlnm.|rlwnm.} %4,%1,%2,%m3,%M3\n-   {rlinm.|rlwinm.} %4,%1,%h2,%m3,%M3\n+   rlwnm. %4,%1,%2,%m3,%M3\n+   rlwinm. %4,%1,%h2,%m3,%M3\n    #\n    #\"\n   [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n@@ -3821,8 +3821,8 @@\n \t(and:SI (rotate:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n   \"\"\n   \"@\n-   {rlnm.|rlwnm.} %0,%1,%2,%m3,%M3\n-   {rlinm.|rlwinm.} %0,%1,%h2,%m3,%M3\n+   rlwnm. %0,%1,%2,%m3,%M3\n+   rlwinm. %0,%1,%h2,%m3,%M3\n    #\n    #\"\n   [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n@@ -3852,7 +3852,7 @@\n \t  (rotate:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"ri\")) 0)))]\n   \"\"\n-  \"{rl%I2nm|rlw%I2nm} %0,%1,%h2,0xff\"\n+  \"rlw%I2nm %0,%1,%h2,0xff\"\n   [(set (attr \"cell_micro\")\n      (if_then_else (match_operand:SI 2 \"const_int_operand\" \"\")\n \t(const_string \"not\")\n@@ -3868,8 +3868,8 @@\n    (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n   \"\"\n   \"@\n-   {rlnm.|rlwnm.} %3,%1,%2,0xff\n-   {rlinm.|rlwinm.} %3,%1,%h2,0xff\n+   rlwnm. %3,%1,%2,0xff\n+   rlwinm. %3,%1,%h2,0xff\n    #\n    #\"\n   [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n@@ -3904,8 +3904,8 @@\n \t(zero_extend:SI (subreg:QI (rotate:SI (match_dup 1) (match_dup 2)) 0)))]\n   \"\"\n   \"@\n-   {rlnm.|rlwnm.} %0,%1,%2,0xff\n-   {rlinm.|rlwinm.} %0,%1,%h2,0xff\n+   rlwnm. %0,%1,%2,0xff\n+   rlwinm. %0,%1,%h2,0xff\n    #\n    #\"\n   [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n@@ -3936,8 +3936,8 @@\n \t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")) 0)))]\n   \"\"\n   \"@\n-   {rlnm|rlwnm} %0,%1,%2,0xffff\n-   {rlinm|rlwinm} %0,%1,%h2,0xffff\"\n+   rlwnm %0,%1,%2,0xffff\n+   rlwinm %0,%1,%h2,0xffff\"\n   [(set_attr \"type\" \"var_shift_rotate,integer\")])\n \n \n@@ -3951,8 +3951,8 @@\n    (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n   \"\"\n   \"@\n-   {rlnm.|rlwnm.} %3,%1,%2,0xffff\n-   {rlinm.|rlwinm.} %3,%1,%h2,0xffff\n+   rlwnm. %3,%1,%2,0xffff\n+   rlwinm. %3,%1,%h2,0xffff\n    #\n    #\"\n   [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n@@ -3987,8 +3987,8 @@\n \t(zero_extend:SI (subreg:HI (rotate:SI (match_dup 1) (match_dup 2)) 0)))]\n   \"\"\n   \"@\n-   {rlnm.|rlwnm.} %0,%1,%2,0xffff\n-   {rlinm.|rlwinm.} %0,%1,%h2,0xffff\n+   rlwnm. %0,%1,%2,0xffff\n+   rlwinm. %0,%1,%h2,0xffff\n    #\n    #\"\n   [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n@@ -4017,8 +4017,8 @@\n \t\t   (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")))]\n   \"\"\n   \"@\n-   {sl|slw} %0,%1,%2\n-   {sli|slwi} %0,%1,%h2\"\n+   slw %0,%1,%2\n+   slwi %0,%1,%h2\"\n   [(set_attr \"type\" \"var_shift_rotate,shift\")])\n \n (define_insn \"*ashlsi3_64\"\n@@ -4028,8 +4028,8 @@\n \t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\"))))]\n   \"TARGET_POWERPC64\"\n   \"@\n-   {sl|slw} %0,%1,%2\n-   {sli|slwi} %0,%1,%h2\"\n+   slw %0,%1,%2\n+   slwi %0,%1,%h2\"\n   [(set_attr \"type\" \"var_shift_rotate,shift\")])\n \n (define_insn \"\"\n@@ -4040,8 +4040,8 @@\n    (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n   \"TARGET_32BIT\"\n   \"@\n-   {sl.|slw.} %3,%1,%2\n-   {sli.|slwi.} %3,%1,%h2\n+   slw. %3,%1,%2\n+   slwi. %3,%1,%h2\n    #\n    #\"\n   [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n@@ -4070,8 +4070,8 @@\n \t(ashift:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"@\n-   {sl.|slw.} %0,%1,%2\n-   {sli.|slwi.} %0,%1,%h2\n+   slw. %0,%1,%2\n+   slwi. %0,%1,%h2\n    #\n    #\"\n   [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n@@ -4098,7 +4098,7 @@\n \t\t\t   (match_operand:SI 2 \"const_int_operand\" \"i\"))\n \t\t(match_operand:SI 3 \"mask_operand\" \"n\")))]\n   \"includes_lshift_p (operands[2], operands[3])\"\n-  \"{rlinm|rlwinm} %0,%1,%h2,%m3,%M3\")\n+  \"rlwinm %0,%1,%h2,%m3,%M3\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -4110,7 +4110,7 @@\n    (clobber (match_scratch:SI 4 \"=r,r\"))]\n   \"includes_lshift_p (operands[2], operands[3])\"\n   \"@\n-   {rlinm.|rlwinm.} %4,%1,%h2,%m3,%M3\n+   rlwinm. %4,%1,%h2,%m3,%M3\n    #\"\n   [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -4143,7 +4143,7 @@\n \t(and:SI (ashift:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n   \"includes_lshift_p (operands[2], operands[3])\"\n   \"@\n-   {rlinm.|rlwinm.} %0,%1,%h2,%m3,%M3\n+   rlwinm. %0,%1,%h2,%m3,%M3\n    #\"\n   [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -4172,8 +4172,8 @@\n   \"\"\n   \"@\n   mr %0,%1\n-  {sr|srw} %0,%1,%2\n-  {sri|srwi} %0,%1,%h2\"\n+  srw %0,%1,%2\n+  srwi %0,%1,%h2\"\n   [(set_attr \"type\" \"integer,var_shift_rotate,shift\")])\n \n (define_insn \"*lshrsi3_64\"\n@@ -4183,8 +4183,8 @@\n \t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\"))))]\n   \"TARGET_POWERPC64\"\n   \"@\n-  {sr|srw} %0,%1,%2\n-  {sri|srwi} %0,%1,%h2\"\n+  srw %0,%1,%2\n+  srwi %0,%1,%h2\"\n   [(set_attr \"type\" \"var_shift_rotate,shift\")])\n \n (define_insn \"\"\n@@ -4196,8 +4196,8 @@\n   \"TARGET_32BIT\"\n   \"@\n    mr. %1,%1\n-   {sr.|srw.} %3,%1,%2\n-   {sri.|srwi.} %3,%1,%h2\n+   srw. %3,%1,%2\n+   srwi. %3,%1,%h2\n    #\n    #\n    #\"\n@@ -4228,8 +4228,8 @@\n   \"TARGET_32BIT\"\n   \"@\n    mr. %0,%1\n-   {sr.|srw.} %0,%1,%2\n-   {sri.|srwi.} %0,%1,%h2\n+   srw. %0,%1,%2\n+   srwi. %0,%1,%h2\n    #\n    #\n    #\"\n@@ -4257,7 +4257,7 @@\n \t\t\t     (match_operand:SI 2 \"const_int_operand\" \"i\"))\n \t\t(match_operand:SI 3 \"mask_operand\" \"n\")))]\n   \"includes_rshift_p (operands[2], operands[3])\"\n-  \"{rlinm|rlwinm} %0,%1,%s2,%m3,%M3\")\n+  \"rlwinm %0,%1,%s2,%m3,%M3\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -4269,7 +4269,7 @@\n    (clobber (match_scratch:SI 4 \"=r,r\"))]\n   \"includes_rshift_p (operands[2], operands[3])\"\n   \"@\n-   {rlinm.|rlwinm.} %4,%1,%s2,%m3,%M3\n+   rlwinm. %4,%1,%s2,%m3,%M3\n    #\"\n   [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -4302,7 +4302,7 @@\n \t(and:SI (lshiftrt:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n   \"includes_rshift_p (operands[2], operands[3])\"\n   \"@\n-   {rlinm.|rlwinm.} %0,%1,%s2,%m3,%M3\n+   rlwinm. %0,%1,%s2,%m3,%M3\n    #\"\n   [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -4331,7 +4331,7 @@\n \t  (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t       (match_operand:SI 2 \"const_int_operand\" \"i\")) 0)))]\n   \"includes_rshift_p (operands[2], GEN_INT (255))\"\n-  \"{rlinm|rlwinm} %0,%1,%s2,0xff\")\n+  \"rlwinm %0,%1,%s2,0xff\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -4344,7 +4344,7 @@\n    (clobber (match_scratch:SI 3 \"=r,r\"))]\n   \"includes_rshift_p (operands[2], GEN_INT (255))\"\n   \"@\n-   {rlinm.|rlwinm.} %3,%1,%s2,0xff\n+   rlwinm. %3,%1,%s2,0xff\n    #\"\n   [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -4380,7 +4380,7 @@\n \t(zero_extend:SI (subreg:QI (lshiftrt:SI (match_dup 1) (match_dup 2)) 0)))]\n   \"includes_rshift_p (operands[2], GEN_INT (255))\"\n   \"@\n-   {rlinm.|rlwinm.} %0,%1,%s2,0xff\n+   rlwinm. %0,%1,%s2,0xff\n    #\"\n   [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -4410,7 +4410,7 @@\n \t  (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t       (match_operand:SI 2 \"const_int_operand\" \"i\")) 0)))]\n   \"includes_rshift_p (operands[2], GEN_INT (65535))\"\n-  \"{rlinm|rlwinm} %0,%1,%s2,0xffff\")\n+  \"rlwinm %0,%1,%s2,0xffff\")\n \n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n@@ -4423,7 +4423,7 @@\n    (clobber (match_scratch:SI 3 \"=r,r\"))]\n   \"includes_rshift_p (operands[2], GEN_INT (65535))\"\n   \"@\n-   {rlinm.|rlwinm.} %3,%1,%s2,0xffff\n+   rlwinm. %3,%1,%s2,0xffff\n    #\"\n   [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -4459,7 +4459,7 @@\n \t(zero_extend:SI (subreg:HI (lshiftrt:SI (match_dup 1) (match_dup 2)) 0)))]\n   \"includes_rshift_p (operands[2], GEN_INT (65535))\"\n   \"@\n-   {rlinm.|rlwinm.} %0,%1,%s2,0xffff\n+   rlwinm. %0,%1,%s2,0xffff\n    #\"\n   [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"4,8\")])\n@@ -4488,8 +4488,8 @@\n \t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")))]\n   \"\"\n   \"@\n-   {sra|sraw} %0,%1,%2\n-   {srai|srawi} %0,%1,%h2\"\n+   sraw %0,%1,%2\n+   srawi %0,%1,%h2\"\n   [(set_attr \"type\" \"var_shift_rotate,shift\")])\n \n (define_insn \"*ashrsi3_64\"\n@@ -4499,8 +4499,8 @@\n \t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\"))))]\n   \"TARGET_POWERPC64\"\n   \"@\n-   {sra|sraw} %0,%1,%2\n-   {srai|srawi} %0,%1,%h2\"\n+   sraw %0,%1,%2\n+   srawi %0,%1,%h2\"\n   [(set_attr \"type\" \"var_shift_rotate,shift\")])\n \n (define_insn \"\"\n@@ -4511,8 +4511,8 @@\n    (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n   \"\"\n   \"@\n-   {sra.|sraw.} %3,%1,%2\n-   {srai.|srawi.} %3,%1,%h2\n+   sraw. %3,%1,%2\n+   srawi. %3,%1,%h2\n    #\n    #\"\n   [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n@@ -4541,8 +4541,8 @@\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n   \"@\n-   {sra.|sraw.} %0,%1,%2\n-   {srai.|srawi.} %0,%1,%h2\n+   sraw. %0,%1,%2\n+   srawi. %0,%1,%h2\n    #\n    #\"\n   [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n@@ -5065,7 +5065,7 @@\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n    && !VECTOR_UNIT_VSX_P (DFmode)\"\n-  \"{fa|fadd} %0,%1,%2\"\n+  \"fadd %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_addsub_d\")])\n \n@@ -5082,7 +5082,7 @@\n \t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n    && !VECTOR_UNIT_VSX_P (DFmode)\"\n-  \"{fs|fsub} %0,%1,%2\"\n+  \"fsub %0,%1,%2\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_addsub_d\")])\n \n@@ -5099,7 +5099,7 @@\n \t\t (match_operand:DF 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n    && !VECTOR_UNIT_VSX_P (DFmode)\"\n-  \"{fm|fmul} %0,%1,%2\"\n+  \"fmul %0,%1,%2\"\n   [(set_attr \"type\" \"dmul\")\n    (set_attr \"fp_type\" \"fp_mul_d\")])\n \n@@ -5118,7 +5118,7 @@\n \t\t(match_operand:DF 2 \"gpc_reg_operand\" \"d\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT && !TARGET_SIMPLE_FPU\n    && !VECTOR_UNIT_VSX_P (DFmode)\"\n-  \"{fd|fdiv} %0,%1,%2\"\n+  \"fdiv %0,%1,%2\"\n   [(set_attr \"type\" \"ddiv\")])\n \n (define_insn \"*fred_fpr\"\n@@ -5144,7 +5144,7 @@\n \t\t(match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n    && VECTOR_UNIT_NONE_P (DFmode)\"\n-  \"{fma|fmadd} %0,%1,%2,%3\"\n+  \"fmadd %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n@@ -5155,7 +5155,7 @@\n \t\t(neg:DF (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n    && VECTOR_UNIT_NONE_P (DFmode)\"\n-  \"{fms|fmsub} %0,%1,%2,%3\"\n+  \"fmsub %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n@@ -5166,7 +5166,7 @@\n \t\t\t(match_operand:DF 3 \"gpc_reg_operand\" \"f\"))))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n    && VECTOR_UNIT_NONE_P (DFmode)\"\n-  \"{fnma|fnmadd} %0,%1,%2,%3\"\n+  \"fnmadd %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n@@ -5177,7 +5177,7 @@\n \t\t\t(neg:DF (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n    && VECTOR_UNIT_NONE_P (DFmode)\"\n-  \"{fnms|fnmsub} %0,%1,%2,%3\"\n+  \"fnmsub %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n@@ -5794,7 +5794,7 @@\n \t(unspec:DI [(fix:SI (match_operand:SFDF 1 \"gpc_reg_operand\" \"d\"))]\n \t\t   UNSPEC_FCTIWZ))]\n   \"TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n-  \"{fcirz|fctiwz} %0,%1\"\n+  \"fctiwz %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"fctiwuz_<mode>\"\n@@ -6211,12 +6211,12 @@\n {\n   if (WORDS_BIG_ENDIAN)\n     return (GET_CODE (operands[2])) != CONST_INT\n-\t    ? \\\"{a|addc} %L0,%L1,%L2\\;{ae|adde} %0,%1,%2\\\"\n-\t    : \\\"{ai|addic} %L0,%L1,%2\\;{a%G2e|add%G2e} %0,%1\\\";\n+\t    ? \\\"addc %L0,%L1,%L2\\;adde %0,%1,%2\\\"\n+\t    : \\\"addic %L0,%L1,%2\\;add%G2e %0,%1\\\";\n   else\n     return (GET_CODE (operands[2])) != CONST_INT\n-\t    ? \\\"{a|addc} %0,%1,%2\\;{ae|adde} %L0,%L1,%L2\\\"\n-\t    : \\\"{ai|addic} %0,%1,%2\\;{a%G2e|add%G2e} %L0,%L1\\\";\n+\t    ? \\\"addc %0,%1,%2\\;adde %L0,%L1,%L2\\\"\n+\t    : \\\"addic %0,%1,%2\\;add%G2e %L0,%L1\\\";\n }\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n@@ -6230,12 +6230,12 @@\n {\n   if (WORDS_BIG_ENDIAN)\n     return (GET_CODE (operands[1]) != CONST_INT)\n-\t    ? \\\"{sf|subfc} %L0,%L2,%L1\\;{sfe|subfe} %0,%2,%1\\\"\n-\t    : \\\"{sfi|subfic} %L0,%L2,%1\\;{sf%G1e|subf%G1e} %0,%2\\\";\n+\t    ? \\\"subfc %L0,%L2,%L1\\;subfe %0,%2,%1\\\"\n+\t    : \\\"subfic %L0,%L2,%1\\;subf%G1e %0,%2\\\";\n   else\n     return (GET_CODE (operands[1]) != CONST_INT)\n-\t    ? \\\"{sf|subfc} %0,%2,%1\\;{sfe|subfe} %L0,%L2,%L1\\\"\n-\t    : \\\"{sfi|subfic} %0,%2,%1\\;{sf%G1e|subf%G1e} %L0,%L2\\\";\n+\t    ? \\\"subfc %0,%2,%1\\;subfe %L0,%L2,%L1\\\"\n+\t    : \\\"subfic %0,%2,%1\\;subf%G1e %L0,%L2\\\";\n }\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n@@ -6247,8 +6247,8 @@\n   \"*\n {\n   return (WORDS_BIG_ENDIAN)\n-    ? \\\"{sfi|subfic} %L0,%L1,0\\;{sfze|subfze} %0,%1\\\"\n-    : \\\"{sfi|subfic} %0,%1,0\\;{sfze|subfze} %L0,%L1\\\";\n+    ? \\\"subfic %L0,%L1,0\\;subfze %0,%1\\\"\n+    : \\\"subfic %0,%1,0\\;subfze %L0,%L1\\\";\n }\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n@@ -6352,8 +6352,8 @@\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"M,i\")))]\n   \"TARGET_32BIT && !TARGET_POWERPC64 && WORDS_BIG_ENDIAN\"\n   \"@\n-   {srai|srawi} %0,%1,31\\;{srai|srawi} %L0,%1,%h2\n-   {sri|srwi} %L0,%L1,%h2\\;insrwi %L0,%1,%h2,0\\;{srai|srawi} %0,%1,%h2\"\n+   srawi %0,%1,31\\;srawi %L0,%1,%h2\n+   srwi %L0,%L1,%h2\\;insrwi %L0,%1,%h2,0\\;srawi %0,%1,%h2\"\n   [(set_attr \"type\" \"two,three\")\n    (set_attr \"length\" \"8,12\")])\n \n@@ -7869,7 +7869,7 @@\n \t\t    (match_operand:SI 2 \"gpc_reg_operand\" \"b\")]\n \t\t   UNSPEC_MOVSI_GOT))]\n   \"DEFAULT_ABI == ABI_V4 && flag_pic == 1\"\n-  \"{l|lwz} %0,%a1@got(%2)\"\n+  \"lwz %0,%a1@got(%2)\"\n   [(set_attr \"type\" \"load\")])\n \n ;; Used by sched, shorten_branches and final when the GOT pseudo reg\n@@ -7896,7 +7896,7 @@\n         (mem:SI (lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n                            (match_operand 2 \"\" \"\"))))]\n   \"TARGET_MACHO && ! TARGET_64BIT\"\n-  \"{l|lwz} %0,lo16(%2)(%1)\"\n+  \"lwz %0,lo16(%2)(%1)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"length\" \"4\")])\n \n@@ -7907,16 +7907,16 @@\n    (gpc_reg_operand (operands[0], SImode) || gpc_reg_operand (operands[1], SImode))\"\n   \"@\n    mr %0,%1\n-   {cal|la} %0,%a1\n-   {l%U1%X1|lwz%U1%X1} %0,%1\n-   {st%U0%X0|stw%U0%X0} %1,%0\n-   {lil|li} %0,%1\n-   {liu|lis} %0,%v1\n+   la %0,%a1\n+   lwz%U1%X1 %0,%1\n+   stw%U0%X0 %1,%0\n+   li %0,%1\n+   lis %0,%v1\n    #\n    mf%1 %0\n    mt%0 %1\n    mt%0 %1\n-   {cror 0,0,0|nop}\"\n+   nop\"\n   [(set_attr \"type\" \"*,*,load,store,*,*,*,mfjmpr,mtjmpr,*,*\")\n    (set_attr \"length\" \"4,4,4,4,4,4,8,4,4,4,4\")])\n \n@@ -7927,16 +7927,16 @@\n    (gpc_reg_operand (operands[0], SImode) || gpc_reg_operand (operands[1], SImode))\"\n   \"@\n    mr %0,%1\n-   {cal|la} %0,%a1\n-   {l%U1%X1|lwz%U1%X1} %0,%1\n-   {st%U0%X0|stw%U0%X0} %1,%0\n-   {lil|li} %0,%1\n-   {liu|lis} %0,%v1\n+   la %0,%a1\n+   lwz%U1%X1 %0,%1\n+   stw%U0%X0 %1,%0\n+   li %0,%1\n+   lis %0,%v1\n    #\n    mf%1 %0\n    mt%0 %1\n    mt%0 %1\n-   {cror 0,0,0|nop}\n+   nop\n    stfs%U0%X0 %1, %0\n    lfs%U1%X1 %0, %1\"\n   [(set_attr \"type\" \"*,*,load,store,*,*,*,mfjmpr,mtjmpr,*,*,*,*\")\n@@ -7971,7 +7971,7 @@\n    (set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r,r\") (match_dup 1))]\n   \"\"\n   \"@\n-   {cmpi|cmp<wd>i} %2,%0,0\n+   cmp<wd>i %2,%0,0\n    mr. %0,%1\n    #\"\n   [(set_attr \"type\" \"cmp,compare,cmp\")\n@@ -7998,10 +7998,10 @@\n    mr %0,%1\n    lhz%U1%X1 %0,%1\n    sth%U0%X0 %1,%0\n-   {lil|li} %0,%w1\n+   li %0,%w1\n    mf%1 %0\n    mt%0 %1\n-   {cror 0,0,0|nop}\"\n+   nop\"\n   [(set_attr \"type\" \"*,load,store,*,mfjmpr,mtjmpr,*\")])\n \n (define_expand \"mov<mode>\"\n@@ -8019,10 +8019,10 @@\n    mr %0,%1\n    lbz%U1%X1 %0,%1\n    stb%U0%X0 %1,%0\n-   {lil|li} %0,%1\n+   li %0,%1\n    mf%1 %0\n    mt%0 %1\n-   {cror 0,0,0|nop}\"\n+   nop\"\n   [(set_attr \"type\" \"*,load,store,*,mfjmpr,mtjmpr,*\")])\n \f\n ;; Here is how to move condition codes around.  When we store CC data in\n@@ -8042,16 +8042,16 @@\n   \"@\n    mcrf %0,%1\n    mtcrf 128,%1\n-   {rlinm|rlwinm} %1,%1,%F0,0xffffffff\\;mtcrf %R0,%1\\;{rlinm|rlwinm} %1,%1,%f0,0xffffffff\n+   rlwinm %1,%1,%F0,0xffffffff\\;mtcrf %R0,%1\\;rlwinm %1,%1,%f0,0xffffffff\n    crxor %0,%0,%0\n    mfcr %0%Q1\n-   mfcr %0%Q1\\;{rlinm|rlwinm} %0,%0,%f1,0xf0000000\n+   mfcr %0%Q1\\;rlwinm %0,%0,%f1,0xf0000000\n    mr %0,%1\n-   {lil|li} %0,%1\n+   li %0,%1\n    mf%1 %0\n    mt%0 %1\n-   {l%U1%X1|lwz%U1%X1} %0,%1\n-   {st%U0%U1|stw%U0%U1} %1,%0\"\n+   lwz%U1%X1 %0,%1\n+   stw%U0%U1 %1,%0\"\n   [(set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"0,3\")\n \t\t(const_string \"cr_logical\")\n@@ -8117,14 +8117,14 @@\n    && (TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT)\"\n   \"@\n    mr %0,%1\n-   {l%U1%X1|lwz%U1%X1} %0,%1\n-   {st%U0%X0|stw%U0%X0} %1,%0\n+   lwz%U1%X1 %0,%1\n+   stw%U0%X0 %1,%0\n    fmr %0,%1\n    lfs%U1%X1 %0,%1\n    stfs%U0%X0 %1,%0\n    mt%0 %1\n    mf%1 %0\n-   {cror 0,0,0|nop}\n+   nop\n    #\n    #\"\n   [(set_attr \"type\" \"*,load,store,fp,fpload,fpstore,mtjmpr,mfjmpr,*,*,*\")\n@@ -8140,13 +8140,13 @@\n    mr %0,%1\n    mt%0 %1\n    mf%1 %0\n-   {l%U1%X1|lwz%U1%X1} %0,%1\n-   {st%U0%X0|stw%U0%X0} %1,%0\n-   {lil|li} %0,%1\n-   {liu|lis} %0,%v1\n+   lwz%U1%X1 %0,%1\n+   stw%U0%X0 %1,%0\n+   li %0,%1\n+   lis %0,%v1\n    #\n    #\n-   {cror 0,0,0|nop}\"\n+   nop\"\n   [(set_attr \"type\" \"*,mtjmpr,mfjmpr,load,store,*,*,*,*,*\")\n    (set_attr \"length\" \"4,4,4,4,4,4,4,4,8,4\")])\n \n@@ -8344,7 +8344,7 @@\n    xxlxor %x0,%x0,%x0\n    mt%0 %1\n    mf%1 %0\n-   {cror 0,0,0|nop}\n+   nop\n    #\n    #\n    #\n@@ -8378,7 +8378,7 @@\n    xxlxor %x0,%x0,%x0\n    mt%0 %1\n    mf%1 %0\n-   {cror 0,0,0|nop}\n+   nop\n    #\n    #\n    #\"\n@@ -8400,7 +8400,7 @@\n    #\n    #\n    #\n-   {cror 0,0,0|nop}\"\n+   nop\"\n   [(set_attr \"type\" \"store,load,*,mtjmpr,mfjmpr,*,*,*,*\")\n    (set_attr \"length\" \"4,4,4,4,4,8,12,16,4\")])\n \f\n@@ -8789,7 +8789,7 @@\n    fmr %0,%1\n    mf%1 %0\n    mt%0 %1\n-   {cror 0,0,0|nop}\n+   nop\n    mftgpr %0,%1\n    mffgpr %0,%1\"\n   [(set_attr \"type\" \"store,load,*,*,*,*,fpstore,fpload,fp,mfjmpr,mtjmpr,*,mftgpr,mffgpr\")\n@@ -8813,7 +8813,7 @@\n    fmr %0,%1\n    mf%1 %0\n    mt%0 %1\n-   {cror 0,0,0|nop}\n+   nop\n    xxlxor %x0,%x0,%x0\"\n   [(set_attr \"type\" \"store,load,*,*,*,*,fpstore,fpload,fp,mfjmpr,mtjmpr,*,vecsimple\")\n    (set_attr \"length\" \"4,4,4,4,4,20,4,4,4,4,4,4,4\")])\n@@ -8895,15 +8895,15 @@\n       gcc_unreachable ();\n     case 0:\n       if (TARGET_STRING)\n-        return \\\"{stsi|stswi} %1,%P0,16\\\";\n+        return \\\"stswi %1,%P0,16\\\";\n     case 1:\n       return \\\"#\\\";\n     case 2:\n       /* If the address is not used in the output, we can use lsi.  Otherwise,\n \t fall through to generating four loads.  */\n       if (TARGET_STRING\n           && ! reg_overlap_mentioned_p (operands[0], operands[1]))\n-\treturn \\\"{lsi|lswi} %0,%P1,16\\\";\n+\treturn \\\"lswi %0,%P1,16\\\";\n       /* ... fall through ...  */\n     case 3:\n     case 4:\n@@ -9173,7 +9173,7 @@\n      (set (mem:SI (plus:SI (match_dup 1) (const_int 28)))\n \t  (match_operand:SI 10 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 9\"\n-  \"{stsi|stswi} %2,%1,%O0\"\n+  \"stswi %2,%1,%O0\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")])\n \n@@ -9195,7 +9195,7 @@\n      (set (mem:SI (plus:SI (match_dup 1) (const_int 24)))\n \t  (match_operand:SI 9 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 8\"\n-  \"{stsi|stswi} %2,%1,%O0\"\n+  \"stswi %2,%1,%O0\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")])\n \n@@ -9215,7 +9215,7 @@\n      (set (mem:SI (plus:SI (match_dup 1) (const_int 20)))\n \t  (match_operand:SI 8 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 7\"\n-  \"{stsi|stswi} %2,%1,%O0\"\n+  \"stswi %2,%1,%O0\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")])\n \n@@ -9233,7 +9233,7 @@\n      (set (mem:SI (plus:SI (match_dup 1) (const_int 16)))\n \t  (match_operand:SI 7 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 6\"\n-  \"{stsi|stswi} %2,%1,%O0\"\n+  \"stswi %2,%1,%O0\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")])\n \n@@ -9249,7 +9249,7 @@\n      (set (mem:SI (plus:SI (match_dup 1) (const_int 12)))\n \t  (match_operand:SI 6 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 5\"\n-  \"{stsi|stswi} %2,%1,%O0\"\n+  \"stswi %2,%1,%O0\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")])\n \n@@ -9263,7 +9263,7 @@\n      (set (mem:SI (plus:SI (match_dup 1) (const_int 8)))\n \t  (match_operand:SI 5 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_STRING && XVECLEN (operands[0], 0) == 4\"\n-  \"{stsi|stswi} %2,%1,%O0\"\n+  \"stswi %2,%1,%O0\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")])\n \f\n@@ -9345,7 +9345,7 @@\n    && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 12)\n    && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 12)\n    && REGNO (operands[4]) == 5\"\n-  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  \"lswi %4,%1,%2\\;stswi %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n@@ -9385,7 +9385,7 @@\n    && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 10)\n    && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 10)\n    && REGNO (operands[4]) == 5\"\n-  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  \"lswi %4,%1,%2\\;stswi %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n@@ -9421,7 +9421,7 @@\n    && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 8)\n    && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 8)\n    && REGNO (operands[4]) == 5\"\n-  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  \"lswi %4,%1,%2\\;stswi %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n@@ -9446,7 +9446,7 @@\n    (clobber (match_scratch:SI 5 \"=X\"))]\n   \"TARGET_STRING && ! TARGET_POWERPC64\n    && INTVAL (operands[2]) > 4 && INTVAL (operands[2]) <= 8\"\n-  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  \"lswi %4,%1,%2\\;stswi %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n@@ -9470,7 +9470,7 @@\n    (clobber (match_scratch:SI 4 \"=&r\"))\n    (clobber (match_scratch:SI 5 \"=X\"))]\n   \"TARGET_STRING && INTVAL (operands[2]) > 0 && INTVAL (operands[2]) <= 4\"\n-  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n+  \"lswi %4,%1,%2\\;stswi %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")\n    (set_attr \"length\" \"8\")])\n@@ -9538,8 +9538,8 @@\n    && (!avoiding_indexed_address_p (SImode)\n        || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n-   {lux|lwzux} %3,%0,%2\n-   {lu|lwzu} %3,%2(%0)\"\n+   lwzux %3,%0,%2\n+   lwzu %3,%2(%0)\"\n   [(set_attr \"type\" \"load_ux,load_u\")])\n \n (define_insn \"*movsi_update2\"\n@@ -9566,8 +9566,8 @@\n        || (REG_P (operands[0])\n \t   && REGNO (operands[0]) == STACK_POINTER_REGNUM))\"\n   \"@\n-   {stux|stwux} %3,%0,%2\n-   {stu|stwu} %3,%2(%0)\"\n+   stwux %3,%0,%2\n+   stwu %3,%2(%0)\"\n   [(set_attr \"type\" \"store_ux,store_u\")])\n \n ;; This is an unconditional pattern; needed for stack allocation, even\n@@ -9580,8 +9580,8 @@\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"\"\n   \"@\n-   {stux|stwux} %3,%0,%2\n-   {stu|stwu} %3,%2(%0)\"\n+   stwux %3,%0,%2\n+   stwu %3,%2(%0)\"\n   [(set_attr \"type\" \"store_ux,store_u\")])\n \n (define_insn \"*movhi_update1\"\n@@ -9723,8 +9723,8 @@\n    && (!avoiding_indexed_address_p (SImode)\n        || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n-   {lux|lwzux} %3,%0,%2\n-   {lu|lwzu} %3,%2(%0)\"\n+   lwzux %3,%0,%2\n+   lwzu %3,%2(%0)\"\n   [(set_attr \"type\" \"load_ux,load_u\")])\n \n (define_insn \"*movsf_update4\"\n@@ -9737,8 +9737,8 @@\n    && (!avoiding_indexed_address_p (SImode)\n        || !gpc_reg_operand (operands[2], SImode))\"\n   \"@\n-   {stux|stwux} %3,%0,%2\n-   {stu|stwu} %3,%2(%0)\"\n+   stwux %3,%0,%2\n+   stwu %3,%2(%0)\"\n   [(set_attr \"type\" \"store_ux,store_u\")])\n \n (define_insn \"*movdf_update1\"\n@@ -10382,7 +10382,7 @@\n   ASM_GENERATE_INTERNAL_LABEL (buf, \\\"LCTOC\\\", 1);\n   operands[1] = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf));\n   operands[2] = gen_rtx_REG (Pmode, 2);\n-  return \\\"{l|lwz} %0,%1(%2)\\\";\n+  return \\\"lwz %0,%1(%2)\\\";\n }\"\n   [(set_attr \"type\" \"load\")])\n \n@@ -10497,7 +10497,7 @@\n \t\t   (minus:SI (match_operand:SI 2 \"immediate_operand\" \"s\")\n \t\t\t     (match_operand:SI 3 \"immediate_operand\" \"s\")))))]\n   \"TARGET_ELF && DEFAULT_ABI != ABI_AIX && flag_pic == 2\"\n-  \"{l|lwz} %0,%2-%3(%1)\"\n+  \"lwz %0,%2-%3(%1)\"\n   [(set_attr \"type\" \"load\")])\n \n (define_insn \"load_toc_v4_PIC_3b\"\n@@ -10507,15 +10507,15 @@\n \t\t   (minus:SI (match_operand:SI 2 \"symbol_ref_operand\" \"s\")\n \t\t\t     (match_operand:SI 3 \"symbol_ref_operand\" \"s\")))))]\n   \"TARGET_ELF && TARGET_SECURE_PLT && DEFAULT_ABI != ABI_AIX && flag_pic\"\n-  \"{cau|addis} %0,%1,%2-%3@ha\")\n+  \"addis %0,%1,%2-%3@ha\")\n \n (define_insn \"load_toc_v4_PIC_3c\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\")\n \t\t   (minus:SI (match_operand:SI 2 \"symbol_ref_operand\" \"s\")\n \t\t\t     (match_operand:SI 3 \"symbol_ref_operand\" \"s\"))))]\n   \"TARGET_ELF && TARGET_SECURE_PLT && DEFAULT_ABI != ABI_AIX && flag_pic\"\n-  \"{cal %0,%2-%3@l(%1)|addi %0,%1,%2-%3@l}\")\n+  \"addi %0,%1,%2-%3@l\")\n \n ;; If the TOC is shared over a translation unit, as happens with all\n ;; the kinds of PIC that we support, we need to restore the TOC\n@@ -10560,7 +10560,7 @@\n \t\t   (match_operand:DI 2 \"gpc_reg_operand\" \"b\")]\n \t\t  UNSPEC_TOCREL)))]\n    \"TARGET_ELF && TARGET_CMODEL != CMODEL_SMALL\"\n-   \"{cau|addis} %0,%2,%1@toc@ha\")\n+   \"addis %0,%2,%1@toc@ha\")\n \n (define_insn \"*largetoc_high_plus\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=b*r\")\n@@ -10571,22 +10571,22 @@\n \t\t    UNSPEC_TOCREL)\n \t    (match_operand 3 \"const_int_operand\" \"n\"))))]\n    \"TARGET_ELF && TARGET_CMODEL != CMODEL_SMALL\"\n-   \"{cau|addis} %0,%2,%1+%3@toc@ha\")\n+   \"addis %0,%2,%1+%3@toc@ha\")\n \n (define_insn \"*largetoc_low\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n         (lo_sum:DI (match_operand:DI 1 \"gpc_reg_operand\" \"b,!*r\")\n \t           (match_operand:DI 2 \"\" \"\")))]\n    \"TARGET_ELF && TARGET_CMODEL != CMODEL_SMALL\"\n    \"@\n-    {cal %0,%2@l(%1)|addi %0,%1,%2@l}\n-    {ai|addic} %0,%1,%2@l\")\n+    addi %0,%1,%2@l\n+    addic %0,%1,%2@l\")\n \n (define_insn_and_split \"*tocref<mode>\"\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=b*r\")\n \t(match_operand:P 1 \"small_toc_ref\" \"R\"))]\n    \"TARGET_TOC\"\n-   \"{cal|la} %0,%a1\"\n+   \"la %0,%a1\"\n    \"&& TARGET_ELF && TARGET_CMODEL != CMODEL_SMALL && reload_completed\"\n   [(set (match_dup 0) (high:P (match_dup 1)))\n    (set (match_dup 0) (lo_sum:P (match_dup 0) (match_dup 1)))])\n@@ -10599,16 +10599,16 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=b*r\")\n \t(high:SI (match_operand 1 \"\" \"\")))]\n   \"TARGET_ELF && ! TARGET_64BIT\"\n-  \"{liu|lis} %0,%1@ha\")\n+  \"lis %0,%1@ha\")\n \n (define_insn \"elf_low\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(lo_sum:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b,!*r\")\n \t\t   (match_operand 2 \"\" \"\")))]\n    \"TARGET_ELF && ! TARGET_64BIT\"\n    \"@\n-    {cal|la} %0,%2@l(%1)\n-    {ai|addic} %0,%1,%K2\")\n+    la %0,%2@l(%1)\n+    addic %0,%1,%K2\")\n \f\n ;; Call and call_value insns\n (define_expand \"call\"\n@@ -11368,7 +11368,7 @@\n   \"*\n {\n   operands[1] = gen_rtx_REG (Pmode, 0);\n-  return \\\"{st%U0%X0|stw%U0%X0} %1,%0\\\";\n+  return \\\"stw%U0%X0 %1,%0\\\";\n }\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n@@ -11493,7 +11493,7 @@\n \t(unspec:SI [(match_operand:SI 1 \"memory_operand\" \"m\")] UNSPEC_SP_SET))\n    (set (match_scratch:SI 2 \"=&r\") (const_int 0))]\n   \"TARGET_32BIT\"\n-  \"{l%U1%X1|lwz%U1%X1} %2,%1\\;{st%U0%X0|stw%U0%X0} %2,%0\\;{lil|li} %2,0\"\n+  \"lwz%U1%X1 %2,%1\\;stw%U0%X0 %2,%0\\;li %2,0\"\n   [(set_attr \"type\" \"three\")\n    (set_attr \"length\" \"12\")])\n \n@@ -11502,7 +11502,7 @@\n \t(unspec:DI [(match_operand:DI 1 \"memory_operand\" \"Y\")] UNSPEC_SP_SET))\n    (set (match_scratch:DI 2 \"=&r\") (const_int 0))]\n   \"TARGET_64BIT\"\n-  \"ld%U1%X1 %2,%1\\;std%U0%X0 %2,%0\\;{lil|li} %2,0\"\n+  \"ld%U1%X1 %2,%1\\;std%U0%X0 %2,%0\\;li %2,0\"\n   [(set_attr \"type\" \"three\")\n    (set_attr \"length\" \"12\")])\n \n@@ -11534,8 +11534,8 @@\n    (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n   \"TARGET_32BIT\"\n   \"@\n-   {l%U1%X1|lwz%U1%X1} %3,%1\\;{l%U2%X2|lwz%U2%X2} %4,%2\\;xor. %3,%3,%4\\;{lil|li} %4,0\n-   {l%U1%X1|lwz%U1%X1} %3,%1\\;{l%U2%X2|lwz%U2%X2} %4,%2\\;{cmpl|cmplw} %0,%3,%4\\;{lil|li} %3,0\\;{lil|li} %4,0\"\n+   lwz%U1%X1 %3,%1\\;lwz%U2%X2 %4,%2\\;xor. %3,%3,%4\\;li %4,0\n+   lwz%U1%X1 %3,%1\\;lwz%U2%X2 %4,%2\\;cmplw %0,%3,%4\\;li %3,0\\;li %4,0\"\n   [(set_attr \"length\" \"16,20\")])\n \n (define_insn \"stack_protect_testdi\"\n@@ -11547,8 +11547,8 @@\n    (clobber (match_scratch:DI 3 \"=&r,&r\"))]\n   \"TARGET_64BIT\"\n   \"@\n-   ld%U1%X1 %3,%1\\;ld%U2%X2 %4,%2\\;xor. %3,%3,%4\\;{lil|li} %4,0\n-   ld%U1%X1 %3,%1\\;ld%U2%X2 %4,%2\\;cmpld %0,%3,%4\\;{lil|li} %3,0\\;{lil|li} %4,0\"\n+   ld%U1%X1 %3,%1\\;ld%U2%X2 %4,%2\\;xor. %3,%3,%4\\;li %4,0\n+   ld%U1%X1 %3,%1\\;ld%U2%X2 %4,%2\\;cmpld %0,%3,%4\\;li %3,0\\;li %4,0\"\n   [(set_attr \"length\" \"16,20\")])\n \n \f\n@@ -11558,7 +11558,7 @@\n \t(compare:CC (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n \t\t    (match_operand:GPR 2 \"reg_or_short_operand\" \"rI\")))]\n   \"\"\n-  \"{cmp%I2|cmp<wd>%I2} %0,%1,%2\"\n+  \"cmp<wd>%I2 %0,%1,%2\"\n   [(set_attr \"type\" \"cmp\")])\n \n ;; If we are comparing a register for equality with a large constant,\n@@ -11609,7 +11609,7 @@\n \t(compare:CCUNS (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t       (match_operand:SI 2 \"reg_or_u_short_operand\" \"rK\")))]\n   \"\"\n-  \"{cmpl%I2|cmplw%I2} %0,%1,%b2\"\n+  \"cmplw%I2 %0,%1,%b2\"\n   [(set_attr \"type\" \"cmp\")])\n \n (define_insn \"*cmpdi_internal2\"\n@@ -11767,7 +11767,7 @@\n \t\t\t   [(match_operand 2 \"cc_reg_operand\" \"y\")\n \t\t\t    (const_int 0)]))]\n   \"\"\n-  \"mfcr %0%Q2\\;{rlinm|rlwinm} %0,%0,%J1,1\"\n+  \"mfcr %0%Q2\\;rlwinm %0,%0,%J1,1\"\n   [(set (attr \"type\")\n      (cond [(match_test \"TARGET_MFCRF\")\n \t\t(const_string \"mfcrf\")\n@@ -11780,7 +11780,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(unspec:SI [(match_operand 1 \"cc_reg_operand\" \"y\")] UNSPEC_MV_CR_GT))]\n   \"TARGET_HARD_FLOAT && !TARGET_FPRS\"\n-  \"mfcr %0\\;{rlinm|rlwinm} %0,%0,%D1,31,31\"\n+  \"mfcr %0\\;rlwinm %0,%0,%D1,31,31\"\n   [(set_attr \"type\" \"mfcr\")\n    (set_attr \"length\" \"8\")])\n \n@@ -11789,7 +11789,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(unspec:SI [(match_operand 1 \"cc_reg_operand\" \"y\")] UNSPEC_MV_CR_OV))]\n   \"TARGET_ISEL\"\n-  \"mfcr %0\\;{rlinm|rlwinm} %0,%0,%t1,1\"\n+  \"mfcr %0\\;rlwinm %0,%0,%t1,1\"\n   [(set_attr \"type\" \"mfcr\")\n    (set_attr \"length\" \"8\")])\n \n@@ -11799,7 +11799,7 @@\n \t\t\t   [(match_operand 2 \"cc_reg_operand\" \"y\")\n \t\t\t    (const_int 0)]))]\n   \"TARGET_POWERPC64\"\n-  \"mfcr %0%Q2\\;{rlinm|rlwinm} %0,%0,%J1,1\"\n+  \"mfcr %0%Q2\\;rlwinm %0,%0,%J1,1\"\n   [(set (attr \"type\")\n      (cond [(match_test \"TARGET_MFCRF\")\n \t\t(const_string \"mfcrf\")\n@@ -11817,7 +11817,7 @@\n \t(match_op_dup 1 [(match_dup 2) (const_int 0)]))]\n   \"TARGET_32BIT\"\n   \"@\n-   mfcr %3%Q2\\;{rlinm.|rlwinm.} %3,%3,%J1,1\n+   mfcr %3%Q2\\;rlwinm. %3,%3,%J1,1\n    #\"\n   [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"8,16\")])\n@@ -11859,7 +11859,7 @@\n   operands[4] = GEN_INT (count);\n   operands[5] = GEN_INT (put_bit);\n \n-  return \\\"mfcr %0%Q2\\;{rlinm|rlwinm} %0,%0,%4,%5,%5\\\";\n+  return \\\"mfcr %0%Q2\\;rlwinm %0,%0,%4,%5,%5\\\";\n }\"\n   [(set (attr \"type\")\n      (cond [(match_test \"TARGET_MFCRF\")\n@@ -11898,7 +11898,7 @@\n   operands[5] = GEN_INT (count);\n   operands[6] = GEN_INT (put_bit);\n \n-  return \\\"mfcr %4%Q2\\;{rlinm.|rlwinm.} %4,%4,%5,%6,%6\\\";\n+  return \\\"mfcr %4%Q2\\;rlwinm. %4,%4,%5,%6,%6\\\";\n }\"\n   [(set_attr \"type\" \"delayed_compare\")\n    (set_attr \"length\" \"8,16\")])\n@@ -11936,7 +11936,7 @@\n \t\t\t   [(match_operand 5 \"cc_reg_operand\" \"y\")\n \t\t\t    (const_int 0)]))]\n   \"REGNO (operands[2]) != REGNO (operands[5])\"\n-  \"mfcr %3\\;{rlinm|rlwinm} %0,%3,%J1,1\\;{rlinm|rlwinm} %3,%3,%J4,1\"\n+  \"mfcr %3\\;rlwinm %0,%3,%J1,1\\;rlwinm %3,%3,%J4,1\"\n   [(set_attr \"type\" \"mfcr\")\n    (set_attr \"length\" \"12\")])\n \n@@ -11950,7 +11950,7 @@\n \t\t\t   [(match_operand 5 \"cc_reg_operand\" \"y\")\n \t\t\t    (const_int 0)]))]\n   \"TARGET_POWERPC64 && REGNO (operands[2]) != REGNO (operands[5])\"\n-  \"mfcr %3\\;{rlinm|rlwinm} %0,%3,%J1,1\\;{rlinm|rlwinm} %3,%3,%J4,1\"\n+  \"mfcr %3\\;rlwinm %0,%3,%J1,1\\;rlwinm %3,%3,%J4,1\"\n   [(set_attr \"type\" \"mfcr\")\n    (set_attr \"length\" \"12\")])\n \n@@ -12066,11 +12066,11 @@\n \t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r,r\")))]\n   \"TARGET_32BIT\"\n   \"@\n-   xor %0,%1,%2\\;{sfi|subfic} %0,%0,0\\;{aze|addze} %0,%3\n-   {sfi|subfic} %0,%1,0\\;{aze|addze} %0,%3\n-   {xoril|xori} %0,%1,%b2\\;{sfi|subfic} %0,%0,0\\;{aze|addze} %0,%3\n-   {xoriu|xoris} %0,%1,%u2\\;{sfi|subfic} %0,%0,0\\;{aze|addze} %0,%3\n-   {sfi|subfic} %0,%1,%2\\;{sfi|subfic} %0,%0,0\\;{aze|addze} %0,%3\"\n+   xor %0,%1,%2\\;subfic %0,%0,0\\;addze %0,%3\n+   subfic %0,%1,0\\;addze %0,%3\n+   xori %0,%1,%b2\\;subfic %0,%0,0\\;addze %0,%3\n+   xoris %0,%1,%u2\\;subfic %0,%0,0\\;addze %0,%3\n+   subfic %0,%1,%2\\;subfic %0,%0,0\\;addze %0,%3\"\n   [(set_attr \"type\" \"three,two,three,three,three\")\n    (set_attr \"length\" \"12,8,12,12,12\")])\n \n@@ -12085,11 +12085,11 @@\n    (clobber (match_scratch:SI 4 \"=&r,&r,&r,&r,&r,&r,&r,&r,&r,&r\"))]\n   \"TARGET_32BIT && optimize_size\"\n   \"@\n-   xor %4,%1,%2\\;{sfi|subfic} %4,%4,0\\;{aze.|addze.} %4,%3\n-   {sfi|subfic} %4,%1,0\\;{aze.|addze.} %4,%3\n-   {xoril|xori} %4,%1,%b2\\;{sfi|subfic} %4,%4,0\\;{aze.|addze.} %4,%3\n-   {xoriu|xoris} %4,%1,%u2\\;{sfi|subfic} %4,%4,0\\;{aze.|addze.} %4,%3\n-   {sfi|subfic} %4,%1,%2\\;{sfi|subfic} %4,%4,0\\;{aze.|addze.} %4,%3\n+   xor %4,%1,%2\\;subfic %4,%4,0\\;addze. %4,%3\n+   subfic %4,%1,0\\;addze. %4,%3\n+   xori %4,%1,%b2\\;subfic %4,%4,0\\;addze. %4,%3\n+   xoris %4,%1,%u2\\;subfic %4,%4,0\\;addze. %4,%3\n+   subfic %4,%1,%2\\;subfic %4,%4,0\\;addze. %4,%3\n    #\n    #\n    #\n@@ -12129,11 +12129,11 @@\n \t(plus:SI (eq:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n   \"TARGET_32BIT && optimize_size\"\n   \"@\n-   xor %0,%1,%2\\;{sfi|subfic} %0,%0,0\\;{aze.|addze.} %0,%3\n-   {sfi|subfic} %0,%1,0\\;{aze.|addze.} %0,%3\n-   {xoril|xori} %0,%1,%b2\\;{sfi|subfic} %0,%0,0\\;{aze.|addze.} %0,%3\n-   {xoriu|xoris} %0,%1,%u2\\;{sfi|subfic} %0,%0,0\\;{aze.|addze.} %0,%3\n-   {sfi|subfic} %0,%1,%2\\;{sfi|subfic} %0,%0,0\\;{aze.|addze.} %0,%3\n+   xor %0,%1,%2\\;subfic %0,%0,0\\;addze. %0,%3\n+   subfic %0,%1,0\\;addze. %0,%3\n+   xori %0,%1,%b2\\;subfic %0,%0,0\\;addze. %0,%3\n+   xoris %0,%1,%u2\\;subfic %0,%0,0\\;addze. %0,%3\n+   subfic %0,%1,%2\\;subfic %0,%0,0\\;addze. %0,%3\n    #\n    #\n    #\n@@ -12165,7 +12165,7 @@\n \t(neg:P (eq:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n \t\t     (const_int 0))))]\n   \"\"\n-  \"{ai|addic} %0,%1,-1\\;{sfe|subfe} %0,%0,%0\"\n+  \"addic %0,%1,-1\\;subfe %0,%0,%0\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n \n@@ -12205,7 +12205,7 @@\n \t\t     (const_int 31)))\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n   \"TARGET_32BIT && !TARGET_ISEL\"\n-  \"{ai|addic} %2,%1,-1\\;{sfe|subfe} %0,%2,%1\"\n+  \"addic %2,%1,-1\\;subfe %0,%2,%1\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n \n@@ -12228,7 +12228,7 @@\n \t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n    (clobber (match_scratch:SI 3 \"=&r\"))]\n   \"TARGET_32BIT\"\n-  \"{ai|addic} %3,%1,-1\\;{aze|addze} %0,%2\"\n+  \"addic %3,%1,-1\\;addze %0,%2\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n \n@@ -12256,7 +12256,7 @@\n    (clobber (match_scratch:SI 4 \"=X,&r\"))]\n   \"TARGET_32BIT\"\n   \"@\n-   {ai|addic} %3,%1,-1\\;{aze.|addze.} %3,%2\n+   addic %3,%1,-1\\;addze. %3,%2\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"8,12\")])\n@@ -12331,7 +12331,7 @@\n    (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n   \"TARGET_32BIT\"\n   \"@\n-   {ai|addic} %3,%1,-1\\;{aze.|addze.} %0,%2\n+   addic %3,%1,-1\\;addze. %0,%2\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"8,12\")])\n@@ -12404,7 +12404,7 @@\n \t(leu:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n \t       (match_operand:P 2 \"reg_or_short_operand\" \"rI\")))]\n   \"\"\n-  \"{sf%I2|subf%I2c} %0,%1,%2\\;{cal %0,0(0)|li %0,0}\\;{ae|adde} %0,%0,%0\"\n+  \"subf%I2c %0,%1,%2\\;li %0,0\\;adde %0,%0,%0\"\n   [(set_attr \"type\" \"three\")\n    (set_attr \"length\" \"12\")])\n \n@@ -12418,7 +12418,7 @@\n \t(leu:P (match_dup 1) (match_dup 2)))]\n   \"\"\n   \"@\n-   {sf%I2|subf%I2c} %0,%1,%2\\;{cal %0,0(0)|li %0,0}\\;{ae.|adde.} %0,%0,%0\n+   subf%I2c %0,%1,%2\\;li %0,0\\;adde. %0,%0,%0\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"12,16\")])\n@@ -12445,7 +12445,7 @@\n \t\t       (match_operand:P 2 \"reg_or_short_operand\" \"rI\"))\n \t\t(match_operand:P 3 \"gpc_reg_operand\" \"r\")))]\n   \"\"\n-  \"{sf%I2|subf%I2c} %0,%1,%2\\;{aze|addze} %0,%3\"\n+  \"subf%I2c %0,%1,%2\\;addze %0,%3\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n \n@@ -12459,7 +12459,7 @@\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n   \"TARGET_32BIT\"\n   \"@\n-   {sf%I2|subf%I2c} %4,%1,%2\\;{aze.|addze.} %4,%3\n+   subf%I2c %4,%1,%2\\;addze. %4,%3\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"8,12\")])\n@@ -12492,7 +12492,7 @@\n \t(plus:SI (leu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n   \"TARGET_32BIT\"\n   \"@\n-   {sf%I2|subf%I2c} %0,%1,%2\\;{aze.|addze.} %0,%3\n+   subf%I2c %0,%1,%2\\;addze. %0,%3\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"8,12\")])\n@@ -12519,7 +12519,7 @@\n \t(neg:P (leu:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n \t\t      (match_operand:P 2 \"reg_or_short_operand\" \"rI\"))))]\n   \"\"\n-  \"{sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;nand %0,%0,%0\"\n+  \"subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;nand %0,%0,%0\"\n    [(set_attr \"type\" \"three\")\n     (set_attr \"length\" \"12\")])\n \n@@ -12530,7 +12530,7 @@\n \t\t\t(match_operand:P 2 \"reg_or_short_operand\" \"rI\")))\n \t\t(match_operand:P 3 \"gpc_reg_operand\" \"r\")))]\n   \"\"\n-  \"{sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;andc %0,%3,%0\"\n+  \"subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;andc %0,%3,%0\"\n   [(set_attr \"type\" \"three\")\n    (set_attr \"length\" \"12\")])\n \n@@ -12545,7 +12545,7 @@\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n   \"TARGET_32BIT\"\n   \"@\n-   {sf%I2|subf%I2c} %4,%1,%2\\;{sfe|subfe} %4,%4,%4\\;andc. %4,%3,%4\n+   subf%I2c %4,%1,%2\\;subfe %4,%4,%4\\;andc. %4,%3,%4\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"12,16\")])\n@@ -12580,7 +12580,7 @@\n \t(and:SI (neg:SI (leu:SI (match_dup 1) (match_dup 2))) (match_dup 3)))]\n   \"TARGET_32BIT\"\n   \"@\n-   {sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;andc. %0,%3,%0\n+   subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;andc. %0,%3,%0\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"12,16\")])\n@@ -12669,8 +12669,8 @@\n \t\t      (match_operand:P 2 \"reg_or_neg_short_operand\" \"r,P\"))))]\n   \"\"\n   \"@\n-   {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\n-   {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\"\n+   subfc %0,%2,%1\\;subfe %0,%0,%0\n+   addic %0,%1,%n2\\;subfe %0,%0,%0\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n \n@@ -12680,8 +12680,8 @@\n \t       (match_operand:P 2 \"reg_or_neg_short_operand\" \"r,P\")))]\n   \"\"\n   \"@\n-   {sf|subfc} %0,%2,%1\\;{cal %0,0(0)|li %0,0}\\;{ae|adde} %0,%0,%0\n-   {ai|addic} %0,%1,%n2\\;{cal %0,0(0)|li %0,0}\\;{ae|adde} %0,%0,%0\"\n+   subfc %0,%2,%1\\;li %0,0\\;adde %0,%0,%0\n+   addic %0,%1,%n2\\;li %0,0\\;adde %0,%0,%0\"\n   [(set_attr \"type\" \"three\")\n    (set_attr \"length\" \"12\")])\n \n@@ -12695,8 +12695,8 @@\n \t(geu:P (match_dup 1) (match_dup 2)))]\n   \"\"\n   \"@\n-   {sf|subfc} %0,%2,%1\\;{cal %0,0(0)|li %0,0}\\;{ae.|adde.} %0,%0,%0\n-   {ai|addic} %0,%1,%n2\\;{cal %0,0(0)|li %0,0}\\;{ae.|adde.} %0,%0,%0\n+   subfc %0,%2,%1\\;li %0,0\\;adde. %0,%0,%0\n+   addic %0,%1,%n2\\;li %0,0\\;adde. %0,%0,%0\n    #\n    #\"\n   [(set_attr \"type\" \"compare\")\n@@ -12725,8 +12725,8 @@\n \t\t(match_operand:P 3 \"gpc_reg_operand\" \"r,r\")))]\n   \"\"\n   \"@\n-   {sf|subfc} %0,%2,%1\\;{aze|addze} %0,%3\n-   {ai|addic} %0,%1,%n2\\;{aze|addze} %0,%3\"\n+   subfc %0,%2,%1\\;addze %0,%3\n+   addic %0,%1,%n2\\;addze %0,%3\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n \n@@ -12740,8 +12740,8 @@\n    (clobber (match_scratch:SI 4 \"=&r,&r,&r,&r\"))]\n   \"TARGET_32BIT\"\n   \"@\n-   {sf|subfc} %4,%2,%1\\;{aze.|addze.} %4,%3\n-   {ai|addic} %4,%1,%n2\\;{aze.|addze.} %4,%3\n+   subfc %4,%2,%1\\;addze. %4,%3\n+   addic %4,%1,%n2\\;addze. %4,%3\n    #\n    #\"\n   [(set_attr \"type\" \"compare\")\n@@ -12775,8 +12775,8 @@\n \t(plus:SI (geu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n   \"TARGET_32BIT\"\n   \"@\n-   {sf|subfc} %0,%2,%1\\;{aze.|addze.} %0,%3\n-   {ai|addic} %0,%1,%n2\\;{aze.|addze.} %0,%3\n+   subfc %0,%2,%1\\;addze. %0,%3\n+   addic %0,%1,%n2\\;addze. %0,%3\n    #\n    #\"\n   [(set_attr \"type\" \"compare\")\n@@ -12805,8 +12805,8 @@\n \t\t      (match_operand:P 2 \"reg_or_short_operand\" \"r,I\"))))]\n   \"\"\n   \"@\n-   {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;nand %0,%0,%0\n-   {sfi|subfic} %0,%1,-1\\;{a%I2|add%I2c} %0,%0,%2\\;{sfe|subfe} %0,%0,%0\"\n+   subfc %0,%2,%1\\;subfe %0,%0,%0\\;nand %0,%0,%0\n+   subfic %0,%1,-1\\;add%I2c %0,%0,%2\\;subfe %0,%0,%0\"\n   [(set_attr \"type\" \"three\")\n    (set_attr \"length\" \"12\")])\n \n@@ -12818,8 +12818,8 @@\n \t\t(match_operand:P 3 \"gpc_reg_operand\" \"r,r\")))]\n   \"\"\n   \"@\n-   {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;andc %0,%3,%0\n-   {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;andc %0,%3,%0\"\n+   subfc %0,%2,%1\\;subfe %0,%0,%0\\;andc %0,%3,%0\n+   addic %0,%1,%n2\\;subfe %0,%0,%0\\;andc %0,%3,%0\"\n   [(set_attr \"type\" \"three\")\n    (set_attr \"length\" \"12\")])\n \n@@ -12834,8 +12834,8 @@\n    (clobber (match_scratch:SI 4 \"=&r,&r,&r,&r\"))]\n   \"TARGET_32BIT\"\n   \"@\n-   {sf|subfc} %4,%2,%1\\;{sfe|subfe} %4,%4,%4\\;andc. %4,%3,%4\n-   {ai|addic} %4,%1,%n2\\;{sfe|subfe} %4,%4,%4\\;andc. %4,%3,%4\n+   subfc %4,%2,%1\\;subfe %4,%4,%4\\;andc. %4,%3,%4\n+   addic %4,%1,%n2\\;subfe %4,%4,%4\\;andc. %4,%3,%4\n    #\n    #\"\n   [(set_attr \"type\" \"compare\")\n@@ -12871,8 +12871,8 @@\n \t(and:SI (neg:SI (geu:SI (match_dup 1) (match_dup 2))) (match_dup 3)))]\n   \"TARGET_32BIT\"\n   \"@\n-   {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;andc. %0,%3,%0\n-   {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;andc. %0,%3,%0\n+   subfc %0,%2,%1\\;subfe %0,%0,%0\\;andc. %0,%3,%0\n+   addic %0,%1,%n2\\;subfe %0,%0,%0\\;andc. %0,%3,%0\n    #\n    #\"\n   [(set_attr \"type\" \"compare\")\n@@ -12902,7 +12902,7 @@\n \t\t      (const_int 0))\n \t\t (match_operand:P 2 \"gpc_reg_operand\" \"r\")))]\n   \"\"\n-  \"{a|addc} %0,%1,%1\\;{sfe|subfe} %0,%1,%0\\;{aze|addze} %0,%2\"\n+  \"addc %0,%1,%1\\;subfe %0,%1,%0\\;addze %0,%2\"\n   [(set_attr \"type\" \"three\")\n    (set_attr \"length\" \"12\")])\n \n@@ -12916,7 +12916,7 @@\n    (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n   \"TARGET_32BIT\"\n   \"@\n-   {a|addc} %3,%1,%1\\;{sfe|subfe} %3,%1,%3\\;{aze.|addze.} %3,%2\n+   addc %3,%1,%1\\;subfe %3,%1,%3\\;addze. %3,%2\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"12,16\")])\n@@ -12981,7 +12981,7 @@\n \t(plus:SI (gt:SI (match_dup 1) (const_int 0)) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"@\n-   {a|addc} %0,%1,%1\\;{sfe|subfe} %0,%1,%0\\;{aze.|addze.} %0,%2\n+   addc %0,%1,%1\\;subfe %0,%1,%0\\;addze. %0,%2\n    #\"\n   [(set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"12,16\")])\n@@ -13100,7 +13100,7 @@\n \t(neg:P (gtu:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n \t\t      (match_operand:P 2 \"reg_or_short_operand\" \"rI\"))))]\n   \"\"\n-  \"{sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\"\n+  \"subf%I2c %0,%1,%2\\;subfe %0,%0,%0\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n \n@@ -13227,7 +13227,7 @@\n \t\t\t\t       (const_int 0)])\n \t\t      (const_int 0)))]\n   \"\"\n-  \"{crnor %E0,%j1,%j1|crnot %E0,%j1}\"\n+  \"crnot %E0,%j1\"\n   [(set_attr \"type\" \"cr_logical,delayed_cr\")])\n \n ;; If we are comparing the result of two comparisons, this can be done\n@@ -13296,7 +13296,7 @@\n (define_insn \"<return_str>return\"\n   [(any_return)]\n   \"<return_pred>\"\n-  \"{br|blr}\"\n+  \"blr\"\n   [(set_attr \"type\" \"jmpreg\")])\n \n (define_expand \"indirect_jump\"\n@@ -13307,7 +13307,7 @@\n   \"\"\n   \"@\n    bctr\n-   {br|blr}\"\n+   blr\"\n   [(set_attr \"type\" \"jmpreg\")])\n \n ;; Table jump for switch statements:\n@@ -13359,13 +13359,13 @@\n   \"\"\n   \"@\n    bctr\n-   {br|blr}\"\n+   blr\"\n   [(set_attr \"type\" \"jmpreg\")])\n \n (define_insn \"nop\"\n   [(const_int 0)]\n   \"\"\n-  \"{cror 0,0,0|nop}\")\n+  \"nop\")\n \n (define_insn \"group_ending_nop\"\n   [(unspec [(const_int 0)] UNSPEC_GRP_END_NOP)]\n@@ -13444,7 +13444,7 @@\n   if (which_alternative != 0)\n     return \\\"#\\\";\n   else if (get_attr_length (insn) == 4)\n-    return \\\"{bdn|bdnz} %l0\\\";\n+    return \\\"bdnz %l0\\\";\n   else\n     return \\\"bdz $+8\\;b %l0\\\";\n }\"\n@@ -13470,7 +13470,7 @@\n   else if (get_attr_length (insn) == 4)\n     return \\\"bdz %l0\\\";\n   else\n-    return \\\"{bdn|bdnz} $+8\\;b %l0\\\";\n+    return \\\"bdnz $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"*,12,16,16\")])\n@@ -13496,7 +13496,7 @@\n   else if (get_attr_length (insn) == 4)\n     return \\\"bdz %l0\\\";\n   else\n-    return \\\"{bdn|bdnz} $+8\\;b %l0\\\";\n+    return \\\"bdnz $+8\\;b %l0\\\";\n }\"\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"*,12,16,16\")])\n@@ -13518,7 +13518,7 @@\n   if (which_alternative != 0)\n     return \\\"#\\\";\n   else if (get_attr_length (insn) == 4)\n-    return \\\"{bdn|bdnz} %l0\\\";\n+    return \\\"bdnz %l0\\\";\n   else\n     return \\\"bdz $+8\\;b %l0\\\";\n }\"\n@@ -13584,7 +13584,7 @@\n (define_insn \"trap\"\n   [(trap_if (const_int 1) (const_int 0))]\n   \"\"\n-  \"{t 31,0,0|trap}\"\n+  \"trap\"\n   [(set_attr \"type\" \"trap\")])\n \n (define_expand \"ctrap<mode>4\"\n@@ -13601,7 +13601,7 @@\n                              (match_operand:GPR 2 \"reg_or_short_operand\" \"rI\")])\n \t    (const_int 0))]\n   \"\"\n-  \"{t|t<wd>}%V0%I2 %1,%2\"\n+  \"t<wd>%V0%I2 %1,%2\"\n   [(set_attr \"type\" \"trap\")])\n \f\n ;; Insns related to generating the function prologue and epilogue.\n@@ -13653,7 +13653,7 @@\n \t\t   [(set (match_operand:SI 1 \"memory_operand\" \"=m\")\n        \t\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))])]\n   \"TARGET_MULTIPLE\"\n-  \"{stm|stmw} %2,%1\"\n+  \"stmw %2,%1\"\n   [(set_attr \"type\" \"store_ux\")])\n \n ; The following comment applies to:\n@@ -13812,7 +13812,7 @@\n \t\t   [(set (match_operand:SI 1 \"gpc_reg_operand\" \"=r\")\n        \t\t\t (match_operand:SI 2 \"memory_operand\" \"m\"))])]\n   \"TARGET_MULTIPLE\"\n-  \"{lm|lmw} %1,%2\"\n+  \"lmw %1,%2\"\n   [(set_attr \"type\" \"load_ux\")\n    (set_attr \"cell_micro\" \"always\")])\n "}, {"sha": "878b0fb4777f5909848ef4c9739b4317732459e2", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -150,14 +150,6 @@ mstring\n Target Report Mask(STRING) Save\n Generate string instructions for block moves\n \n-mnew-mnemonics\n-Target Report RejectNegative Mask(NEW_MNEMONICS)\n-Use new mnemonics for PowerPC architecture\n-\n-mold-mnemonics\n-Target Report RejectNegative InverseMask(NEW_MNEMONICS)\n-Use old mnemonics for PowerPC architecture\n-\n msoft-float\n Target Report RejectNegative Mask(SOFT_FLOAT)\n Do not use hardware floating point"}, {"sha": "bf59b6cf5527e2baf2c3d7aaf61764b07b76268d", "filename": "gcc/config/rs6000/spe.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fspe.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fspe.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fspe.md?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -2289,9 +2289,9 @@\n \tknown to be dead.  */\n       if (refers_to_regno_p (REGNO (operands[0]), REGNO (operands[0]) + 1,\n \t\t\t     operands[1], 0))\n-\treturn \\\"{l|lwz} %L0,%L1\\;{l|lwz} %0,%1\\\";\n+\treturn \\\"lwz %L0,%L1\\;lwz %0,%1\\\";\n       else\n-        return \\\"{l%U1%X1|lwz%U1%X1} %0,%1\\;{l|lwz} %L0,%L1\\\";\n+        return \\\"lwz%U1%X1 %0,%1\\;lwz %L0,%L1\\\";\n     }\n }\"\n   [(set_attr \"length\" \"8,8\")])\n@@ -2315,9 +2315,9 @@\n \treturn \\\"evldd%X1 %Z0,%y1\\;evmergehi %Y0,%Z0,%Z0\\\";\n       if (refers_to_regno_p (REGNO (operands[0]), REGNO (operands[0]) + 1,\n \t\t\t     operands[1], 0))\n-\treturn \\\"{l|lwz} %Z0,%L1\\;{l|lwz} %Y0,%1\\\";\n+\treturn \\\"lwz %Z0,%L1\\;lwz %Y0,%1\\\";\n       else\n-        return \\\"{l%U1%X1|lwz%U1%X1} %Y0,%1\\;{l|lwz} %Z0,%L1\\\";\n+        return \\\"lwz%U1%X1 %Y0,%1\\;lwz %Z0,%L1\\\";\n     }\n }\"\n   [(set_attr \"length\" \"8,8\")])\n@@ -2336,7 +2336,7 @@\n    || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode)\"\n   \"@\n    evmergelo %0,%1,%0\n-   evmergelohi %0,%0,%0\\;{l%U1%X1|lwz%U1%X1} %0,%1\\;evmergelohi %0,%0,%0\"\n+   evmergelohi %0,%0,%0\\;lwz%U1%X1 %0,%1\\;evmergelohi %0,%0,%0\"\n   [(set_attr \"length\" \"4,12\")])\n \n (define_insn_and_split \"*mov_si<mode>_e500_subreg0_elf_low\"\n@@ -2366,7 +2366,7 @@\n    || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode)\"\n   \"@\n    evmergehi %0,%0,%1\n-   evmergelohi %1,%1,%1\\;{st%U0%X0|stw%U0%X0} %1,%0\"\n+   evmergelohi %1,%1,%1\\;stw%U0%X0 %1,%0\"\n   [(set_attr \"length\" \"4,8\")])\n \n (define_insn \"*mov_si<mode>_e500_subreg4\"\n@@ -2376,7 +2376,7 @@\n    || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode)\"\n   \"@\n    mr %0,%1\n-   {l%U1%X1|lwz%U1%X1} %0,%1\")\n+   lwz%U1%X1 %0,%1\")\n \n (define_insn \"*mov_si<mode>_e500_subreg4_elf_low\"\n   [(set (subreg:SI (match_operand:SPE64TF 0 \"register_operand\" \"+r\") 4)\n@@ -2385,7 +2385,7 @@\n   \"((TARGET_E500_DOUBLE && (<MODE>mode == DFmode || <MODE>mode == TFmode))\n     || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode))\n    && TARGET_ELF && !TARGET_64BIT\"\n-  \"{ai|addic} %0,%1,%K2\")\n+  \"addic %0,%1,%K2\")\n \n (define_insn \"*mov_si<mode>_e500_subreg4_2\"\n   [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"+r,m\")\n@@ -2394,15 +2394,15 @@\n    || (TARGET_SPE && <MODE>mode != DFmode && <MODE>mode != TFmode)\"\n   \"@\n    mr %0,%1\n-   {st%U0%X0|stw%U0%X0} %1,%0\")\n+   stw%U0%X0 %1,%0\")\n \n (define_insn \"*mov_sitf_e500_subreg8\"\n   [(set (subreg:SI (match_operand:TF 0 \"register_operand\" \"+r,&r\") 8)\n \t(match_operand:SI 1 \"input_operand\" \"r,m\"))]\n   \"TARGET_E500_DOUBLE\"\n   \"@\n    evmergelo %L0,%1,%L0\n-   evmergelohi %L0,%L0,%L0\\;{l%U1%X1|lwz%U1%X1} %L0,%1\\;evmergelohi %L0,%L0,%L0\"\n+   evmergelohi %L0,%L0,%L0\\;lwz%U1%X1 %L0,%1\\;evmergelohi %L0,%L0,%L0\"\n   [(set_attr \"length\" \"4,12\")])\n \n (define_insn \"*mov_sitf_e500_subreg8_2\"\n@@ -2411,7 +2411,7 @@\n   \"TARGET_E500_DOUBLE\"\n   \"@\n    evmergehi %0,%0,%L1\n-   evmergelohi %L1,%L1,%L1\\;{st%U0%X0|stw%U0%X0} %L1,%0\"\n+   evmergelohi %L1,%L1,%L1\\;stw%U0%X0 %L1,%0\"\n   [(set_attr \"length\" \"4,8\")])\n \n (define_insn \"*mov_sitf_e500_subreg12\"\n@@ -2420,15 +2420,15 @@\n   \"TARGET_E500_DOUBLE\"\n   \"@\n    mr %L0,%1\n-   {l%U1%X1|lwz%U1%X1} %L0,%1\")\n+   lwz%U1%X1 %L0,%1\")\n \n (define_insn \"*mov_sitf_e500_subreg12_2\"\n   [(set (match_operand:SI 0 \"rs6000_nonimmediate_operand\" \"+r,m\")\n \t(subreg:SI (match_operand:TF 1 \"register_operand\" \"r,r\") 12))]\n   \"TARGET_E500_DOUBLE\"\n   \"@\n    mr %0,%L1\n-   {st%U0%X0|stw%U0%X0} %L1,%0\")\n+   stw%U0%X0 %L1,%0\")\n \n ;; FIXME: Allow r=CONST0.\n (define_insn \"*movdf_e500_double\""}, {"sha": "ab60cbcd483dcd94e96ecc50d1238f77c4571ec6", "filename": "gcc/config/rs6000/sync.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsync.md?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -65,7 +65,7 @@\n   [(set (match_operand:BLK 0 \"\" \"\")\n \t(unspec:BLK [(match_dup 0)] UNSPEC_SYNC))]\n   \"\"\n-  \"{dcs|sync}\"\n+  \"sync\"\n   [(set_attr \"type\" \"sync\")])\n \n (define_expand \"lwsync\"\n@@ -95,7 +95,7 @@\n (define_insn \"isync\"\n   [(unspec_volatile:BLK [(const_int 0)] UNSPECV_ISYNC)]\n   \"\"\n-  \"{ics|isync}\"\n+  \"isync\"\n   [(set_attr \"type\" \"isync\")])\n \n ;; The control dependency used for load dependency described"}, {"sha": "978ba31ab6bb01a7a3fe07d11638736e9191940e", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -220,7 +220,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Override rs6000.h definition.  */\n #undef\tTARGET_DEFAULT\n-#define\tTARGET_DEFAULT MASK_NEW_MNEMONICS\n+#define\tTARGET_DEFAULT 0\n \n /* Override rs6000.h definition.  */\n #undef\tPROCESSOR_DEFAULT\n@@ -450,7 +450,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (DEFAULT_ABI == ABI_V4)\t\t\t\t\t\t\\\n     asm_fprintf (FILE,\t\t\t\t\t\t\t\\\n-\t\t \"\\t{stu|stwu} %s,-16(%s)\\n\\t{st|stw} %s,12(%s)\\n\",\t\\\n+\t\t \"\\tstwu %s,-16(%s)\\n\\tstw %s,12(%s)\\n\",\t\\\n \t\t reg_names[1], reg_names[1], reg_names[REGNO],\t\t\\\n \t\t reg_names[1]);\t\t\t\t\t\t\\\n } while (0)\n@@ -462,7 +462,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   if (DEFAULT_ABI == ABI_V4)\t\t\t\t\t\t\\\n     asm_fprintf (FILE,\t\t\t\t\t\t\t\\\n-\t\t \"\\t{l|lwz} %s,12(%s)\\n\\t{ai|addic} %s,%s,16\\n\",\t\\\n+\t\t \"\\tlwz %s,12(%s)\\n\\taddic %s,%s,16\\n\",\t\\\n \t\t reg_names[REGNO], reg_names[1], reg_names[1],\t\t\\\n \t\t reg_names[1]);\t\t\t\t\t\t\\\n } while (0)"}, {"sha": "74fb65fe991f83a1ee193b3bd07dcce0943e2700", "filename": "gcc/config/rs6000/sysv4le.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fsysv4le.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fsysv4le.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4le.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -20,7 +20,7 @@\n    <http://www.gnu.org/licenses/>.  */\n \n #undef  TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_NEW_MNEMONICS | MASK_LITTLE_ENDIAN)\n+#define TARGET_DEFAULT MASK_LITTLE_ENDIAN\n \n #undef\tCC1_ENDIAN_DEFAULT_SPEC\n #define\tCC1_ENDIAN_DEFAULT_SPEC \"%(cc1_endian_little)\""}, {"sha": "58db3cfb9bfde95db7294bb0a1d8b97b81e38877", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -545,7 +545,7 @@\n    xsmaddmdp %x0,%x1,%x3\n    xsmaddadp %x0,%x1,%x2\n    xsmaddmdp %x0,%x1,%x3\n-   {fma|fmadd} %0,%1,%2,%3\"\n+   fmadd %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n@@ -591,7 +591,7 @@\n    xsmsubmdp %x0,%x1,%x3\n    xsmsubadp %x0,%x1,%x2\n    xsmsubmdp %x0,%x1,%x3\n-   {fms|fmsub} %0,%1,%2,%3\"\n+   fmsub %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n@@ -623,7 +623,7 @@\n    xsnmaddmdp %x0,%x1,%x3\n    xsnmaddadp %x0,%x1,%x2\n    xsnmaddmdp %x0,%x1,%x3\n-   {fnma|fnmadd} %0,%1,%2,%3\"\n+   fnmadd %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_d\")])\n \n@@ -657,7 +657,7 @@\n    xsnmsubmdp %x0,%x1,%x3\n    xsnmsubadp %x0,%x1,%x2\n    xsnmsubmdp %x0,%x1,%x3\n-   {fnms|fnmsub} %0,%1,%2,%3\"\n+   fnmsub %0,%1,%2,%3\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_type\" \"fp_maddsub_d\")])\n "}, {"sha": "13bfc4a03f6572faea0ea4455239aaebe0d3dfd8", "filename": "gcc/config/rs6000/vxworks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvxworks.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -98,7 +98,7 @@ VXWORKS_ADDITIONAL_CPP_SPEC\n #undef MULTILIB_DEFAULTS\n \n #undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_NEW_MNEMONICS | MASK_EABI | MASK_STRICT_ALIGN)\n+#define TARGET_DEFAULT (MASK_EABI | MASK_STRICT_ALIGN)\n \n #undef PROCESSOR_DEFAULT\n #define PROCESSOR_DEFAULT PROCESSOR_PPC604"}, {"sha": "cf93dbff9332fb69968df0f6873cbc6f4cdddd7d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -804,7 +804,6 @@ See RS/6000 and PowerPC Options.\n -mmfcrf  -mno-mfcrf  -mpopcntb  -mno-popcntb -mpopcntd -mno-popcntd @gol\n -mfprnd  -mno-fprnd @gol\n -mcmpb -mno-cmpb -mmfpgpr -mno-mfpgpr -mhard-dfp -mno-hard-dfp @gol\n--mnew-mnemonics  -mold-mnemonics @gol\n -mfull-toc   -mminimal-toc  -mno-fp-in-toc  -mno-sum-in-toc @gol\n -m64  -m32  -mxl-compat  -mno-xl-compat  -mpe @gol\n -malign-power  -malign-natural @gol\n@@ -16640,26 +16639,9 @@ The @option{-mpowerpc64} option allows GCC to generate the additional\n and to treat GPRs as 64-bit, doubleword quantities.  GCC defaults to\n @option{-mno-powerpc64}.\n \n-@item -mnew-mnemonics\n-@itemx -mold-mnemonics\n-@opindex mnew-mnemonics\n-@opindex mold-mnemonics\n-Select which mnemonics to use in the generated assembler code.  With\n-@option{-mnew-mnemonics}, GCC uses the assembler mnemonics defined for\n-the PowerPC architecture.  With @option{-mold-mnemonics} it uses the\n-assembler mnemonics defined for the POWER architecture.  Instructions\n-defined in only one architecture have only one mnemonic; GCC uses that\n-mnemonic irrespective of which of these options is specified.\n-\n-GCC defaults to the mnemonics appropriate for the architecture in\n-use.  Specifying @option{-mcpu=@var{cpu_type}} sometimes overrides the\n-value of these option.  Unless you are building a cross-compiler, you\n-should normally not specify either @option{-mnew-mnemonics} or\n-@option{-mold-mnemonics}, but should instead accept the default.\n-\n @item -mcpu=@var{cpu_type}\n @opindex mcpu\n-Set architecture type, register usage, choice of mnemonics, and\n+Set architecture type, register usage, and\n instruction scheduling parameters for machine type @var{cpu_type}.\n Supported values for @var{cpu_type} are @samp{401}, @samp{403},\n @samp{405}, @samp{405fp}, @samp{440}, @samp{440fp}, @samp{464}, @samp{464fp},\n@@ -16686,7 +16668,7 @@ The @option{-mcpu} options automatically enable or disable the\n following options:\n \n @gccoptlist{-maltivec  -mfprnd  -mhard-float  -mmfcrf  -mmultiple @gol\n--mnew-mnemonics  -mpopcntb -mpopcntd  -mpowerpc64 @gol\n+-mpopcntb -mpopcntd  -mpowerpc64 @gol\n -mpowerpc-gpopt  -mpowerpc-gfxopt  -msingle-float -mdouble-float @gol\n -msimple-fpu -mstring  -mmulhw  -mdlmzb  -mmfpgpr -mvsx}\n \n@@ -16706,11 +16688,11 @@ environment.\n @item -mtune=@var{cpu_type}\n @opindex mtune\n Set the instruction scheduling parameters for machine type\n-@var{cpu_type}, but do not set the architecture type, register usage, or\n-choice of mnemonics, as @option{-mcpu=@var{cpu_type}} does.  The same\n+@var{cpu_type}, but do not set the architecture type or register usage,\n+as @option{-mcpu=@var{cpu_type}} does.  The same\n values for @var{cpu_type} are used for @option{-mtune} as for\n @option{-mcpu}.  If both are specified, the code generated uses the\n-architecture, registers, and mnemonics set by @option{-mcpu}, but the\n+architecture and registers set by @option{-mcpu}, but the\n scheduling parameters set by @option{-mtune}.\n \n @item -mcmodel=small"}, {"sha": "eadae3ef7f1e852e38b61aff8059dd82c7ddb345", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -1,3 +1,7 @@\n+2012-08-15  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* longlong.h: (whole file, powerpc): Adjust to single assembler syntax.\n+\n 2012-08-03  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR driver/54171"}, {"sha": "c62194ec9b09a2bbe987894210f4c5aba9dc5111", "filename": "libgcc/longlong.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b39bc38c85606f9fecf24dd63a0cea62530cf49/libgcc%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b39bc38c85606f9fecf24dd63a0cea62530cf49/libgcc%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flonglong.h?ref=6b39bc38c85606f9fecf24dd63a0cea62530cf49", "patch": "@@ -862,37 +862,37 @@ UDItype __umulsidi3 (USItype, USItype);\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (__builtin_constant_p (bh) && (bh) == 0)\t\t\t\t\\\n-      __asm__ (\"{a%I4|add%I4c} %1,%3,%4\\n\\t{aze|addze} %0,%2\"\t\t\\\n+      __asm__ (\"add%I4c %1,%3,%4\\n\\taddze %0,%2\"\t\t\\\n \t     : \"=r\" (sh), \"=&r\" (sl) : \"r\" (ah), \"%r\" (al), \"rI\" (bl));\\\n     else if (__builtin_constant_p (bh) && (bh) == ~(USItype) 0)\t\t\\\n-      __asm__ (\"{a%I4|add%I4c} %1,%3,%4\\n\\t{ame|addme} %0,%2\"\t\t\\\n+      __asm__ (\"add%I4c %1,%3,%4\\n\\taddme %0,%2\"\t\t\\\n \t     : \"=r\" (sh), \"=&r\" (sl) : \"r\" (ah), \"%r\" (al), \"rI\" (bl));\\\n     else\t\t\t\t\t\t\t\t\\\n-      __asm__ (\"{a%I5|add%I5c} %1,%4,%5\\n\\t{ae|adde} %0,%2,%3\"\t\t\\\n+      __asm__ (\"add%I5c %1,%4,%5\\n\\tadde %0,%2,%3\"\t\t\\\n \t     : \"=r\" (sh), \"=&r\" (sl)\t\t\t\t\t\\\n \t     : \"%r\" (ah), \"r\" (bh), \"%r\" (al), \"rI\" (bl));\t\t\\\n   } while (0)\n #define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (__builtin_constant_p (ah) && (ah) == 0)\t\t\t\t\\\n-      __asm__ (\"{sf%I3|subf%I3c} %1,%4,%3\\n\\t{sfze|subfze} %0,%2\"\t\\\n+      __asm__ (\"subf%I3c %1,%4,%3\\n\\tsubfze %0,%2\"\t\\\n \t       : \"=r\" (sh), \"=&r\" (sl) : \"r\" (bh), \"rI\" (al), \"r\" (bl));\\\n     else if (__builtin_constant_p (ah) && (ah) == ~(USItype) 0)\t\t\\\n-      __asm__ (\"{sf%I3|subf%I3c} %1,%4,%3\\n\\t{sfme|subfme} %0,%2\"\t\\\n+      __asm__ (\"subf%I3c %1,%4,%3\\n\\tsubfme %0,%2\"\t\\\n \t       : \"=r\" (sh), \"=&r\" (sl) : \"r\" (bh), \"rI\" (al), \"r\" (bl));\\\n     else if (__builtin_constant_p (bh) && (bh) == 0)\t\t\t\\\n-      __asm__ (\"{sf%I3|subf%I3c} %1,%4,%3\\n\\t{ame|addme} %0,%2\"\t\t\\\n+      __asm__ (\"subf%I3c %1,%4,%3\\n\\taddme %0,%2\"\t\t\\\n \t       : \"=r\" (sh), \"=&r\" (sl) : \"r\" (ah), \"rI\" (al), \"r\" (bl));\\\n     else if (__builtin_constant_p (bh) && (bh) == ~(USItype) 0)\t\t\\\n-      __asm__ (\"{sf%I3|subf%I3c} %1,%4,%3\\n\\t{aze|addze} %0,%2\"\t\t\\\n+      __asm__ (\"subf%I3c %1,%4,%3\\n\\taddze %0,%2\"\t\t\\\n \t       : \"=r\" (sh), \"=&r\" (sl) : \"r\" (ah), \"rI\" (al), \"r\" (bl));\\\n     else\t\t\t\t\t\t\t\t\\\n-      __asm__ (\"{sf%I4|subf%I4c} %1,%5,%4\\n\\t{sfe|subfe} %0,%3,%2\"\t\\\n+      __asm__ (\"subf%I4c %1,%5,%4\\n\\tsubfe %0,%3,%2\"\t\\\n \t       : \"=r\" (sh), \"=&r\" (sl)\t\t\t\t\t\\\n \t       : \"r\" (ah), \"r\" (bh), \"rI\" (al), \"r\" (bl));\t\t\\\n   } while (0)\n #define count_leading_zeros(count, x) \\\n-  __asm__ (\"{cntlz|cntlzw} %0,%1\" : \"=r\" (count) : \"r\" (x))\n+  __asm__ (\"cntlzw %0,%1\" : \"=r\" (count) : \"r\" (x))\n #define COUNT_LEADING_ZEROS_0 32\n #if defined (_ARCH_PPC) || defined (__powerpc__) || defined (__POWERPC__) \\\n   || defined (__ppc__)                                                    \\\n@@ -931,32 +931,32 @@ UDItype __umulsidi3 (USItype, USItype);\n #define add_ssaaaa(sh, sl, ah, al, bh, bl) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (__builtin_constant_p (bh) && (bh) == 0)\t\t\t\t\\\n-      __asm__ (\"{a%I4|add%I4c} %1,%3,%4\\n\\t{aze|addze} %0,%2\"\t\t\\\n+      __asm__ (\"add%I4c %1,%3,%4\\n\\taddze %0,%2\"\t\t\\\n \t     : \"=r\" (sh), \"=&r\" (sl) : \"r\" (ah), \"%r\" (al), \"rI\" (bl));\\\n     else if (__builtin_constant_p (bh) && (bh) == ~(UDItype) 0)\t\t\\\n-      __asm__ (\"{a%I4|add%I4c} %1,%3,%4\\n\\t{ame|addme} %0,%2\"\t\t\\\n+      __asm__ (\"add%I4c %1,%3,%4\\n\\taddme %0,%2\"\t\t\\\n \t     : \"=r\" (sh), \"=&r\" (sl) : \"r\" (ah), \"%r\" (al), \"rI\" (bl));\\\n     else\t\t\t\t\t\t\t\t\\\n-      __asm__ (\"{a%I5|add%I5c} %1,%4,%5\\n\\t{ae|adde} %0,%2,%3\"\t\t\\\n+      __asm__ (\"add%I5c %1,%4,%5\\n\\tadde %0,%2,%3\"\t\t\\\n \t     : \"=r\" (sh), \"=&r\" (sl)\t\t\t\t\t\\\n \t     : \"%r\" (ah), \"r\" (bh), \"%r\" (al), \"rI\" (bl));\t\t\\\n   } while (0)\n #define sub_ddmmss(sh, sl, ah, al, bh, bl) \\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (__builtin_constant_p (ah) && (ah) == 0)\t\t\t\t\\\n-      __asm__ (\"{sf%I3|subf%I3c} %1,%4,%3\\n\\t{sfze|subfze} %0,%2\"\t\\\n+      __asm__ (\"subf%I3c %1,%4,%3\\n\\tsubfze %0,%2\"\t\\\n \t       : \"=r\" (sh), \"=&r\" (sl) : \"r\" (bh), \"rI\" (al), \"r\" (bl));\\\n     else if (__builtin_constant_p (ah) && (ah) == ~(UDItype) 0)\t\t\\\n-      __asm__ (\"{sf%I3|subf%I3c} %1,%4,%3\\n\\t{sfme|subfme} %0,%2\"\t\\\n+      __asm__ (\"subf%I3c %1,%4,%3\\n\\tsubfme %0,%2\"\t\\\n \t       : \"=r\" (sh), \"=&r\" (sl) : \"r\" (bh), \"rI\" (al), \"r\" (bl));\\\n     else if (__builtin_constant_p (bh) && (bh) == 0)\t\t\t\\\n-      __asm__ (\"{sf%I3|subf%I3c} %1,%4,%3\\n\\t{ame|addme} %0,%2\"\t\t\\\n+      __asm__ (\"subf%I3c %1,%4,%3\\n\\taddme %0,%2\"\t\t\\\n \t       : \"=r\" (sh), \"=&r\" (sl) : \"r\" (ah), \"rI\" (al), \"r\" (bl));\\\n     else if (__builtin_constant_p (bh) && (bh) == ~(UDItype) 0)\t\t\\\n-      __asm__ (\"{sf%I3|subf%I3c} %1,%4,%3\\n\\t{aze|addze} %0,%2\"\t\t\\\n+      __asm__ (\"subf%I3c %1,%4,%3\\n\\taddze %0,%2\"\t\t\\\n \t       : \"=r\" (sh), \"=&r\" (sl) : \"r\" (ah), \"rI\" (al), \"r\" (bl));\\\n     else\t\t\t\t\t\t\t\t\\\n-      __asm__ (\"{sf%I4|subf%I4c} %1,%5,%4\\n\\t{sfe|subfe} %0,%3,%2\"\t\\\n+      __asm__ (\"subf%I4c %1,%5,%4\\n\\tsubfe %0,%3,%2\"\t\\\n \t       : \"=r\" (sh), \"=&r\" (sl)\t\t\t\t\t\\\n \t       : \"r\" (ah), \"r\" (bh), \"rI\" (al), \"r\" (bl));\t\t\\\n   } while (0)"}]}