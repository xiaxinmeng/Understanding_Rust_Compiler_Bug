{"sha": "df385b9c2b6e05ec699eba7fbf8fc958a17f7a03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYzODViOWMyYjZlMDVlYzY5OWViYTdmYmY4ZmM5NThhMTdmN2EwMw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-08-18T15:56:01Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-08-18T15:56:01Z"}, "message": "Change ix86_isa_flags to HOST_WIDE_INT.\n\n2011-08-18  H.J. Lu  <hongjiu.lu@intel.com>\n\t    Igor Zamyatin <igor.zamyatin@intel.com>\n\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Replace int\n\twith HOST_WIDE_INT for isa_flag.\n\t(ix86_pragma_target_parse): Replace int with HOST_WIDE_INT for\n\tisa variables.\n\n\t* config/i386/i386.c (ix86_target_string): Replace int with\n\tHOST_WIDE_INT for isa.  Use HOST_WIDE_INT_PRINT to print isa.\n\t(ix86_target_opts): Replace int with HOST_WIDE_INT on mask.\n\t(pta_flags): Removed.\n\t(PTA_XXX): Redefined as (HOST_WIDE_INT_1 << X).\n\t(pta): Use HOST_WIDE_INT on flags.\n\t(builtin_isa): Use HOST_WIDE_INT on isa.\n\t(ix86_add_new_builtins): Likewise.\n\t(def_builtin): Use HOST_WIDE_INT on mask.\n\t(def_builtin_const): Likewise.\n\t(builtin_description): Likewise.\n\n\t* config/i386/i386.opt (ix86_isa_flags): Replace int with\n\tHOST_WIDE_INT.\n\t(ix86_isa_flags_explicit): Likewise.\n\t(x_ix86_isa_flags_explicit): Likewise.\n\nCo-Authored-By: Igor Zamyatin <igor.zamyatin@intel.com>\n\nFrom-SVN: r177870", "tree": {"sha": "2fca7a80217fc916847702506c3d3984c0afa130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fca7a80217fc916847702506c3d3984c0afa130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df385b9c2b6e05ec699eba7fbf8fc958a17f7a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df385b9c2b6e05ec699eba7fbf8fc958a17f7a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df385b9c2b6e05ec699eba7fbf8fc958a17f7a03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df385b9c2b6e05ec699eba7fbf8fc958a17f7a03/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c1ffff9f2bb49e9dc27ed41c58bdf26dcda091e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1ffff9f2bb49e9dc27ed41c58bdf26dcda091e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c1ffff9f2bb49e9dc27ed41c58bdf26dcda091e"}], "stats": {"total": 135, "additions": 80, "deletions": 55}, "files": [{"sha": "e467c0c24b5760a092aa1ffffa7f787860657111", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df385b9c2b6e05ec699eba7fbf8fc958a17f7a03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df385b9c2b6e05ec699eba7fbf8fc958a17f7a03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df385b9c2b6e05ec699eba7fbf8fc958a17f7a03", "patch": "@@ -1,3 +1,28 @@\n+2011-08-18  H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Igor Zamyatin <igor.zamyatin@intel.com>\n+\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Replace int\n+\twith HOST_WIDE_INT for isa_flag.\n+\t(ix86_pragma_target_parse): Replace int with HOST_WIDE_INT for\n+\tisa variables.\n+\n+\t* config/i386/i386.c (ix86_target_string): Replace int with\n+\tHOST_WIDE_INT for isa.  Use HOST_WIDE_INT_PRINT to print isa.\n+\t(ix86_target_opts): Replace int with HOST_WIDE_INT on mask.\n+\t(pta_flags): Removed.\n+\t(PTA_XXX): Redefined as (HOST_WIDE_INT_1 << X).\n+\t(pta): Use HOST_WIDE_INT on flags.\n+\t(builtin_isa): Use HOST_WIDE_INT on isa.\n+\t(ix86_add_new_builtins): Likewise.\n+\t(def_builtin): Use HOST_WIDE_INT on mask.\n+\t(def_builtin_const): Likewise.\n+\t(builtin_description): Likewise.\n+\n+\t* config/i386/i386.opt (ix86_isa_flags): Replace int with\n+\tHOST_WIDE_INT.\n+\t(ix86_isa_flags_explicit): Likewise.\n+\t(x_ix86_isa_flags_explicit): Likewise.\n+\n 2011-08-17  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/50107"}, {"sha": "c5a770fcae77bc49320bcacd9e9cb26f568390d2", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df385b9c2b6e05ec699eba7fbf8fc958a17f7a03/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df385b9c2b6e05ec699eba7fbf8fc958a17f7a03/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=df385b9c2b6e05ec699eba7fbf8fc958a17f7a03", "patch": "@@ -34,14 +34,14 @@ along with GCC; see the file COPYING3.  If not see\n \n static bool ix86_pragma_target_parse (tree, tree);\n static void ix86_target_macros_internal\n-  (int, enum processor_type, enum processor_type, enum fpmath_unit,\n+  (HOST_WIDE_INT, enum processor_type, enum processor_type, enum fpmath_unit,\n    void (*def_or_undef) (cpp_reader *, const char *));\n \n \f\n /* Internal function to either define or undef the appropriate system\n    macros.  */\n static void\n-ix86_target_macros_internal (int isa_flag,\n+ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n \t\t\t     enum processor_type arch,\n \t\t\t     enum processor_type tune,\n \t\t\t     enum fpmath_unit fpmath,\n@@ -301,9 +301,9 @@ ix86_pragma_target_parse (tree args, tree pop_target)\n   tree cur_tree;\n   struct cl_target_option *prev_opt;\n   struct cl_target_option *cur_opt;\n-  int prev_isa;\n-  int cur_isa;\n-  int diff_isa;\n+  HOST_WIDE_INT prev_isa;\n+  HOST_WIDE_INT cur_isa;\n+  HOST_WIDE_INT diff_isa;\n   enum processor_type prev_arch;\n   enum processor_type prev_tune;\n   enum processor_type cur_arch;"}, {"sha": "58f16e79563bdc023a4c98ad79dcd6b5ab6e88ea", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 47, "deletions": 47, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df385b9c2b6e05ec699eba7fbf8fc958a17f7a03/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df385b9c2b6e05ec699eba7fbf8fc958a17f7a03/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=df385b9c2b6e05ec699eba7fbf8fc958a17f7a03", "patch": "@@ -2500,7 +2500,7 @@ static int ix86_function_regparm (const_tree, const_tree);\n static void ix86_compute_frame_layout (struct ix86_frame *);\n static bool ix86_expand_vector_init_one_nonzero (bool, enum machine_mode,\n \t\t\t\t\t\t rtx, rtx, int);\n-static void ix86_add_new_builtins (int);\n+static void ix86_add_new_builtins (HOST_WIDE_INT);\n static rtx ix86_expand_vec_perm_builtin (tree);\n static tree ix86_canonical_va_list_type (tree);\n static void predict_jump (int);\n@@ -2514,8 +2514,8 @@ enum ix86_function_specific_strings\n   IX86_FUNCTION_SPECIFIC_MAX\n };\n \n-static char *ix86_target_string (int, int, const char *, const char *,\n-\t\t\t\t enum fpmath_unit, bool);\n+static char *ix86_target_string (HOST_WIDE_INT, int, const char *,\n+\t\t\t\t const char *, enum fpmath_unit, bool);\n static void ix86_debug_options (void) ATTRIBUTE_UNUSED;\n static void ix86_function_specific_save (struct cl_target_option *);\n static void ix86_function_specific_restore (struct cl_target_option *);\n@@ -2633,13 +2633,14 @@ ix86_using_red_zone (void)\n    responsible for freeing the string.  */\n \n static char *\n-ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n-\t\t    enum fpmath_unit fpmath, bool add_nl_p)\n+ix86_target_string (HOST_WIDE_INT isa, int flags, const char *arch,\n+\t\t    const char *tune, enum fpmath_unit fpmath,\n+\t\t    bool add_nl_p)\n {\n   struct ix86_target_opts\n   {\n     const char *option;\t\t/* option string */\n-    int mask;\t\t\t/* isa mask options */\n+    HOST_WIDE_INT mask;\t\t/* isa mask options */\n   };\n \n   /* This table is ordered so that options like -msse4.2 that imply\n@@ -2747,7 +2748,8 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n   if (isa && add_nl_p)\n     {\n       opts[num++][0] = isa_other;\n-      sprintf (isa_other, \"(other isa: %#x)\", isa);\n+      sprintf (isa_other, \"(other isa: %#\" HOST_WIDE_INT_PRINT \"x)\",\n+\t       isa);\n     }\n \n   /* Add flag options.  */\n@@ -2888,47 +2890,44 @@ ix86_option_override_internal (bool main_args_p)\n   const char *suffix;\n   const char *sw;\n \n-  enum pta_flags\n-    {\n-      PTA_SSE = 1 << 0,\n-      PTA_SSE2 = 1 << 1,\n-      PTA_SSE3 = 1 << 2,\n-      PTA_MMX = 1 << 3,\n-      PTA_PREFETCH_SSE = 1 << 4,\n-      PTA_3DNOW = 1 << 5,\n-      PTA_3DNOW_A = 1 << 6,\n-      PTA_64BIT = 1 << 7,\n-      PTA_SSSE3 = 1 << 8,\n-      PTA_CX16 = 1 << 9,\n-      PTA_POPCNT = 1 << 10,\n-      PTA_ABM = 1 << 11,\n-      PTA_SSE4A = 1 << 12,\n-      PTA_NO_SAHF = 1 << 13,\n-      PTA_SSE4_1 = 1 << 14,\n-      PTA_SSE4_2 = 1 << 15,\n-      PTA_AES = 1 << 16,\n-      PTA_PCLMUL = 1 << 17,\n-      PTA_AVX = 1 << 18,\n-      PTA_FMA = 1 << 19,\n-      PTA_MOVBE = 1 << 20,\n-      PTA_FMA4 = 1 << 21,\n-      PTA_XOP = 1 << 22,\n-      PTA_LWP = 1 << 23,\n-      PTA_FSGSBASE = 1 << 24,\n-      PTA_RDRND = 1 << 25,\n-      PTA_F16C = 1 << 26,\n-      PTA_BMI = 1 << 27,\n-      PTA_TBM = 1 << 28,\n-      PTA_LZCNT = 1 << 29\n-      /* if this reaches 32, need to widen struct pta flags below */\n-    };\n+#define PTA_3DNOW\t \t(HOST_WIDE_INT_1 << 0)\n+#define PTA_3DNOW_A\t \t(HOST_WIDE_INT_1 << 1)\n+#define PTA_64BIT\t\t(HOST_WIDE_INT_1 << 2)\n+#define PTA_ABM\t\t\t(HOST_WIDE_INT_1 << 3)\n+#define PTA_AES\t\t \t(HOST_WIDE_INT_1 << 4)\n+#define PTA_AVX\t\t\t(HOST_WIDE_INT_1 << 5)\n+#define PTA_BMI\t\t \t(HOST_WIDE_INT_1 << 6)\n+#define PTA_CX16\t\t(HOST_WIDE_INT_1 << 7)\n+#define PTA_F16C\t\t(HOST_WIDE_INT_1 << 8)\n+#define PTA_FMA\t\t\t(HOST_WIDE_INT_1 << 9)\n+#define PTA_FMA4\t \t(HOST_WIDE_INT_1 << 10)\n+#define PTA_FSGSBASE\t\t(HOST_WIDE_INT_1 << 11)\n+#define PTA_LWP\t\t \t(HOST_WIDE_INT_1 << 12)\n+#define PTA_LZCNT\t \t(HOST_WIDE_INT_1 << 13)\n+#define PTA_MMX\t\t\t(HOST_WIDE_INT_1 << 14)\n+#define PTA_MOVBE\t\t(HOST_WIDE_INT_1 << 15)\n+#define PTA_NO_SAHF\t\t(HOST_WIDE_INT_1 << 16)\n+#define PTA_PCLMUL\t\t(HOST_WIDE_INT_1 << 17)\n+#define PTA_POPCNT\t\t(HOST_WIDE_INT_1 << 18)\n+#define PTA_PREFETCH_SSE\t(HOST_WIDE_INT_1 << 19)\n+#define PTA_RDRND\t \t(HOST_WIDE_INT_1 << 20)\n+#define PTA_SSE\t\t\t(HOST_WIDE_INT_1 << 21)\n+#define PTA_SSE2\t\t(HOST_WIDE_INT_1 << 22)\n+#define PTA_SSE3\t\t(HOST_WIDE_INT_1 << 23)\n+#define PTA_SSE4_1\t \t(HOST_WIDE_INT_1 << 24)\n+#define PTA_SSE4_2\t \t(HOST_WIDE_INT_1 << 25)\n+#define PTA_SSE4A\t\t(HOST_WIDE_INT_1 << 26)\n+#define PTA_SSSE3\t\t(HOST_WIDE_INT_1 << 27)\n+#define PTA_TBM\t\t \t(HOST_WIDE_INT_1 << 28)\n+#define PTA_XOP\t\t \t(HOST_WIDE_INT_1 << 29)\n+/* if this reaches 64, need to widen struct pta flags below */\n \n   static struct pta\n     {\n       const char *const name;\t\t/* processor name or nickname.  */\n       const enum processor_type processor;\n       const enum attr_cpu schedule;\n-      const unsigned /*enum pta_flags*/ flags;\n+      const unsigned HOST_WIDE_INT flags;\n     }\n   const processor_alias_table[] =\n     {\n@@ -24099,7 +24098,7 @@ static GTY(()) tree ix86_builtins[(int) IX86_BUILTIN_MAX];\n struct builtin_isa {\n   const char *name;\t\t/* function name */\n   enum ix86_builtin_func_type tcode; /* type to use in the declaration */\n-  int isa;\t\t\t/* isa_flags this builtin is defined for */\n+  HOST_WIDE_INT isa;\t\t/* isa_flags this builtin is defined for */\n   bool const_p;\t\t\t/* true if the declaration is constant */\n   bool set_and_not_built_p;\n };\n@@ -24124,7 +24123,8 @@ static struct builtin_isa ix86_builtins_isa[(int) IX86_BUILTIN_MAX];\n    errors if a builtin is added in the middle of a function scope.  */\n \n static inline tree\n-def_builtin (int mask, const char *name, enum ix86_builtin_func_type tcode,\n+def_builtin (HOST_WIDE_INT mask, const char *name,\n+\t     enum ix86_builtin_func_type tcode,\n \t     enum ix86_builtins code)\n {\n   tree decl = NULL_TREE;\n@@ -24162,7 +24162,7 @@ def_builtin (int mask, const char *name, enum ix86_builtin_func_type tcode,\n /* Like def_builtin, but also marks the function decl \"const\".  */\n \n static inline tree\n-def_builtin_const (int mask, const char *name,\n+def_builtin_const (HOST_WIDE_INT mask, const char *name,\n \t\t   enum ix86_builtin_func_type tcode, enum ix86_builtins code)\n {\n   tree decl = def_builtin (mask, name, tcode, code);\n@@ -24179,7 +24179,7 @@ def_builtin_const (int mask, const char *name,\n    declarations to the tree, even if we didn't use them.  */\n \n static void\n-ix86_add_new_builtins (int isa)\n+ix86_add_new_builtins (HOST_WIDE_INT isa)\n {\n   int i;\n \n@@ -24213,7 +24213,7 @@ ix86_add_new_builtins (int isa)\n \n struct builtin_description\n {\n-  const unsigned int mask;\n+  const HOST_WIDE_INT mask;\n   const enum insn_code icode;\n   const char *const name;\n   const enum ix86_builtins code;"}, {"sha": "654f4ebbcbd3bbfb6d20e262459ff5c30cc53534", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df385b9c2b6e05ec699eba7fbf8fc958a17f7a03/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df385b9c2b6e05ec699eba7fbf8fc958a17f7a03/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=df385b9c2b6e05ec699eba7fbf8fc958a17f7a03", "patch": "@@ -24,12 +24,12 @@ config/i386/i386-opts.h\n \n ; Bit flags that specify the ISA we are compiling for.\n Variable\n-int ix86_isa_flags = TARGET_64BIT_DEFAULT | TARGET_SUBTARGET_ISA_DEFAULT\n+HOST_WIDE_INT ix86_isa_flags = TARGET_64BIT_DEFAULT | TARGET_SUBTARGET_ISA_DEFAULT\n \n ; A mask of ix86_isa_flags that includes bit X if X was set or cleared\n ; on the command line.\n Variable\n-int ix86_isa_flags_explicit\n+HOST_WIDE_INT ix86_isa_flags_explicit\n \n ;; Definitions to add to the cl_target_option structure\n ;; -march= processor\n@@ -50,7 +50,7 @@ unsigned char branch_cost\n \n ;; which flags were passed by the user\n TargetSave\n-int x_ix86_isa_flags_explicit\n+HOST_WIDE_INT x_ix86_isa_flags_explicit\n \n ;; which flags were passed by the user\n TargetSave"}]}