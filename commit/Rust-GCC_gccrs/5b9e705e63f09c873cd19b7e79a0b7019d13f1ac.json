{"sha": "5b9e705e63f09c873cd19b7e79a0b7019d13f1ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI5ZTcwNWU2M2YwOWM4NzNjZDE5YjdlNzlhMGI3MDE5ZDEzZjFhYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-03-29T18:47:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-03-29T18:47:56Z"}, "message": "re PR c++/48319 ([C++0x] Segmentation fault in instantiation of std::is_constructible<int>)\n\n\tPR c++/48319\n\t* pt.c (value_dependent_expression_p): Handle TEMPLATE_ID_EXPR.\n\nFrom-SVN: r171689", "tree": {"sha": "db769131e5f3d8b27d7e95b19a15e83a31c602d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db769131e5f3d8b27d7e95b19a15e83a31c602d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b9e705e63f09c873cd19b7e79a0b7019d13f1ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b9e705e63f09c873cd19b7e79a0b7019d13f1ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b9e705e63f09c873cd19b7e79a0b7019d13f1ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b9e705e63f09c873cd19b7e79a0b7019d13f1ac/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "00a0d6f3590e0e9891fc01d21667de892d6a89c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a0d6f3590e0e9891fc01d21667de892d6a89c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a0d6f3590e0e9891fc01d21667de892d6a89c6"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "c4df48dd746101c03236df5be7aacdb8fea5e5df", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9e705e63f09c873cd19b7e79a0b7019d13f1ac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9e705e63f09c873cd19b7e79a0b7019d13f1ac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5b9e705e63f09c873cd19b7e79a0b7019d13f1ac", "patch": "@@ -1,5 +1,8 @@\n 2011-03-29  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48319\n+\t* pt.c (value_dependent_expression_p): Handle TEMPLATE_ID_EXPR.\n+\n \tPR c++/48089\n \t* semantics.c (potential_constant_expression_1): Change error about\n \tuse of *this in constructor into sorry."}, {"sha": "aa0901be3be8f2e8cc6796e6ecf52a298becbdce", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9e705e63f09c873cd19b7e79a0b7019d13f1ac/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9e705e63f09c873cd19b7e79a0b7019d13f1ac/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5b9e705e63f09c873cd19b7e79a0b7019d13f1ac", "patch": "@@ -18218,6 +18218,11 @@ value_dependent_expression_p (tree expression)\n \treturn false;\n       }\n \n+    case TEMPLATE_ID_EXPR:\n+      /* If a TEMPLATE_ID_EXPR involves a dependent name, it will be\n+\t type-dependent.  */\n+      return type_dependent_expression_p (expression);\n+\n     default:\n       /* A constant expression is value-dependent if any subexpression is\n \t value-dependent.  */"}, {"sha": "95157981e257cf8873788620a7deca24f7fbb671", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9e705e63f09c873cd19b7e79a0b7019d13f1ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9e705e63f09c873cd19b7e79a0b7019d13f1ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b9e705e63f09c873cd19b7e79a0b7019d13f1ac", "patch": "@@ -1,5 +1,7 @@\n 2011-03-29  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/dependent1.C: New.\n+\n \t* g++.dg/cpp0x/constexpr-48089.C: Adjust.\n \n \t* g++.dg/cpp0x/constexpr-memfn1.C: New."}, {"sha": "1ceeeafd78d9b69e8c89299d81b881271c16d546", "filename": "gcc/testsuite/g++.dg/cpp0x/dependent1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b9e705e63f09c873cd19b7e79a0b7019d13f1ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdependent1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b9e705e63f09c873cd19b7e79a0b7019d13f1ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdependent1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdependent1.C?ref=5b9e705e63f09c873cd19b7e79a0b7019d13f1ac", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/48319\n+// { dg-options -std=c++0x }\n+// We were failing to recognize declval<_Args1> as dependent.\n+\n+template<typename Tp> Tp declval() noexcept;\n+\n+template<typename _Tp>\n+class __is_constructible_helper\n+{\n+  typedef char __one;\n+  typedef struct { char __arr[2]; } __two;\n+\n+  template<typename _Tp1, typename... _Args1>\n+  static decltype(_Tp1(declval<_Args1>()...), __one()) __test(int);\n+\n+  template<typename, typename...>\n+  static __two __test(...);\n+\n+public:\n+  static const bool __value = sizeof(__test<_Tp>(0)) == 1;\n+};\n+\n+int main() {\n+  return __is_constructible_helper<int>::__value;\n+}"}]}