{"sha": "17f296378b2ed38dfd53e9b97dad214cde5bf1c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdmMjk2Mzc4YjJlZDM4ZGZkNTNlOWI5N2RhZDIxNGNkZTViZjFjMQ==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2002-07-02T15:56:01Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2002-07-02T15:56:01Z"}, "message": "re PR c++/6716 (loop and fill ram during compiling)\n\n\tPR c++/6716\n\t* pt.c (can_complete_type_without_circularity): New function.\n\t(instantiate_class_template): Use it.\n\t* typeck2.c (incomplete_type_error): Improve error message\n\tdue to incomplete fields.\n\n\t* g++.dg/template/instantiate1.C: New test.\n\nFrom-SVN: r55182", "tree": {"sha": "c34661bfb02384e9fbdc00eb55f921dfd879ef8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c34661bfb02384e9fbdc00eb55f921dfd879ef8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17f296378b2ed38dfd53e9b97dad214cde5bf1c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f296378b2ed38dfd53e9b97dad214cde5bf1c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17f296378b2ed38dfd53e9b97dad214cde5bf1c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f296378b2ed38dfd53e9b97dad214cde5bf1c1/comments", "author": null, "committer": null, "parents": [{"sha": "7c1c5ccec8c7ecb3facb308123c9d200178dacc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1c5ccec8c7ecb3facb308123c9d200178dacc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c1c5ccec8c7ecb3facb308123c9d200178dacc0"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "7382cb3dda08e77ea622afccc2267687bdd3a247", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f296378b2ed38dfd53e9b97dad214cde5bf1c1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f296378b2ed38dfd53e9b97dad214cde5bf1c1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=17f296378b2ed38dfd53e9b97dad214cde5bf1c1", "patch": "@@ -1,3 +1,11 @@\n+2002-07-02  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/6716\n+\t* pt.c (can_complete_type_without_circularity): New function.\n+\t(instantiate_class_template): Use it.\n+\t* typeck2.c (incomplete_type_error): Improve error message\n+\tdue to incomplete fields.\n+\n 2002-07-01  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/7112"}, {"sha": "68793c78427284a36a0389b88bad5e05bf08d726", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f296378b2ed38dfd53e9b97dad214cde5bf1c1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f296378b2ed38dfd53e9b97dad214cde5bf1c1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=17f296378b2ed38dfd53e9b97dad214cde5bf1c1", "patch": "@@ -135,6 +135,7 @@ static int mark_template_parm PARAMS ((tree, void *));\n static int template_parm_this_level_p PARAMS ((tree, void *));\n static tree tsubst_friend_function PARAMS ((tree, tree));\n static tree tsubst_friend_class PARAMS ((tree, tree));\n+static int can_complete_type_without_circularity PARAMS ((tree));\n static tree get_bindings_real PARAMS ((tree, tree, tree, int, int, int));\n static int template_decl_level PARAMS ((tree));\n static tree maybe_get_template_decl_from_type_decl PARAMS ((tree));\n@@ -4908,6 +4909,25 @@ tsubst_friend_class (friend_tmpl, args)\n   return friend_type;\n }\n \n+/* Returns zero if TYPE cannot be completed later due to circularity.\n+   Otherwise returns one.  */\n+\n+int\n+can_complete_type_without_circularity (type)\n+     tree type;\n+{\n+  if (type == NULL_TREE || type == error_mark_node)\n+    return 0;\n+  else if (COMPLETE_TYPE_P (type))\n+    return 1;\n+  else if (TREE_CODE (type) == ARRAY_TYPE && TYPE_DOMAIN (type))\n+    return can_complete_type_without_circularity (TREE_TYPE (type));\n+  else if (CLASS_TYPE_P (type) && TYPE_BEING_DEFINED (TYPE_MAIN_VARIANT (type)))\n+    return 0;\n+  else\n+    return 1;\n+}\n+\n tree\n instantiate_class_template (type)\n      tree type;\n@@ -5222,7 +5242,20 @@ instantiate_class_template (type)\n \t    if (DECL_INITIALIZED_IN_CLASS_P (r))\n \t      check_static_variable_definition (r, TREE_TYPE (r));\n \t  }\n-\t\n+\telse if (TREE_CODE (r) == FIELD_DECL)\n+\t  {\n+\t    /* Determine whether R has a valid type and can be\n+\t       completed later.  If R is invalid, then it is replaced\n+\t       by error_mark_node so that it will not be added to\n+\t       TYPE_FIELDS.  */\n+\t    tree rtype = TREE_TYPE (r);\n+\t    if (!can_complete_type_without_circularity (rtype))\n+\t      {\n+\t\tincomplete_type_error (r, rtype);\n+\t\tr = error_mark_node;\n+\t      }\n+\t  }\n+\n \t/* R will have a TREE_CHAIN if and only if it has already been\n \t   processed by finish_member_declaration.  This can happen\n \t   if, for example, it is a TYPE_DECL for a class-scoped\n@@ -5303,6 +5336,8 @@ instantiate_class_template (type)\n \t--processing_template_decl;\n     }\n \n+  /* Now that TYPE_FIELDS and TYPE_METHODS are set up.  We can\n+     instantiate templates used by this class.  */\n   for (t = TYPE_FIELDS (type); t; t = TREE_CHAIN (t))\n     if (TREE_CODE (t) == FIELD_DECL)\n       {"}, {"sha": "8700a4fe2876f5a8a39d87a67da8238f5d8aeec5", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f296378b2ed38dfd53e9b97dad214cde5bf1c1/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f296378b2ed38dfd53e9b97dad214cde5bf1c1/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=17f296378b2ed38dfd53e9b97dad214cde5bf1c1", "patch": "@@ -211,7 +211,8 @@ cxx_incomplete_type_diagnostic (value, type, warn_only)\n     return;\n \n   if (value != 0 && (TREE_CODE (value) == VAR_DECL\n-\t\t     || TREE_CODE (value) == PARM_DECL))\n+\t\t     || TREE_CODE (value) == PARM_DECL\n+\t\t     || TREE_CODE (value) == FIELD_DECL))\n     {\n       (*p_msg_at) (\"`%D' has incomplete type\", value);\n       decl = 1;\n@@ -226,7 +227,10 @@ cxx_incomplete_type_diagnostic (value, type, warn_only)\n     case ENUMERAL_TYPE:\n       if (!decl)\n         (*p_msg) (\"invalid use of undefined type `%#T'\", type);\n-      (*p_msg_at)  (\"forward declaration of `%#T'\", type);\n+      if (!TYPE_TEMPLATE_INFO (type))\n+\t(*p_msg_at) (\"forward declaration of `%#T'\", type);\n+      else\n+\t(*p_msg_at) (\"forward declaration of `%#T'\", type);\n       break;\n \n     case VOID_TYPE:"}, {"sha": "b25b0ef318df21fc6f961d0f6dbf71466545f22f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f296378b2ed38dfd53e9b97dad214cde5bf1c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f296378b2ed38dfd53e9b97dad214cde5bf1c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17f296378b2ed38dfd53e9b97dad214cde5bf1c1", "patch": "@@ -1,3 +1,8 @@\n+2002-07-02  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/6716\n+\t* g++.dg/template/instantiate1.C: New test.\n+\n 2002-07-01  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/7112"}, {"sha": "e96bcd283fd28837d55f2d00f4f89f5a37e8370f", "filename": "gcc/testsuite/g++.dg/template/instantiate1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17f296378b2ed38dfd53e9b97dad214cde5bf1c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17f296378b2ed38dfd53e9b97dad214cde5bf1c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Finstantiate1.C?ref=17f296378b2ed38dfd53e9b97dad214cde5bf1c1", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile }\n+// Origin:\n+\n+// PR c++/6716\n+// ICE in complex class structure when components are incomplete\n+\n+template <class T> struct X {\n+  T t;\t\t\t\t// { dg-error \"incomplete\" }\n+};\n+\n+template <class T> struct Y {\t// { dg-error \"instantiated\" }\n+  X<T> x;\n+};\n+\n+template <class T> struct Z {\t// { dg-error \"instantiated|declaration\" }\n+  Y<Z<T> > y;\n+};\n+\n+struct ZZ : Z<int>\n+{\t\t\t\t// { dg-error \"instantiated\" }\n+};"}]}