{"sha": "c022c0de2a6c9110350cd50275be97d061a19530", "node_id": "C_kwDOANBUbNoAKGMwMjJjMGRlMmE2YzkxMTAzNTBjZDUwMjc1YmU5N2QwNjFhMTk1MzA", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-29T15:04:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-29T15:04:50Z"}, "message": "libgfortran: Fix up LIBGFOR_CHECK_FLOAT128 [PR106137]\n\nMy recent gfortran + libgfortran patch apparently broke (some?) aarch64\nbuilds.  While it is desirable to use just _Float128 rather than __float128,\nwe only want to use it (and e.g. define HAVE_FLOAT128) on targets where\n_Float128 is supported and long double isn't IEEE quad precision.\nWhich is targets that support __float128 type which we have been testing\nfor before - _Float128 is supported on those targets and on targets where\nlong double is IEEE quad precision.\n\nSo, the following patch restores check for whether __float128 is supported\ninto the LIBGFOR_CHECK_FLOAT128 check which determines whether\nHAVE_FLOAT128 is defined or whether to use libquadmath, so that e.g. on\naarch64 where long double is IEEE quad we don't do that.\n\n2022-06-29  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR bootstrap/106137\n\t* acinclude.m4 (LIBGFOR_CHECK_FLOAT128): Adjust comment.\n\tAlso test for __float128.\n\t(HAVE_FLOAT128): Adjust description.\n\t* config.h.in: Regenerated.\n\t* configure: Regenerated.", "tree": {"sha": "8d3d09a2201cf1bfb6e57d08ce2219eab240d281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d3d09a2201cf1bfb6e57d08ce2219eab240d281"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c022c0de2a6c9110350cd50275be97d061a19530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c022c0de2a6c9110350cd50275be97d061a19530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c022c0de2a6c9110350cd50275be97d061a19530", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c022c0de2a6c9110350cd50275be97d061a19530/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa87b7541b4c11f59c521154513f844ea6b5c977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa87b7541b4c11f59c521154513f844ea6b5c977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa87b7541b4c11f59c521154513f844ea6b5c977"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "7585df13fd71509b31bc60b05b1c837ba0279b29", "filename": "libgfortran/acinclude.m4", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c022c0de2a6c9110350cd50275be97d061a19530/libgfortran%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c022c0de2a6c9110350cd50275be97d061a19530/libgfortran%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Facinclude.m4?ref=c022c0de2a6c9110350cd50275be97d061a19530", "patch": "@@ -261,7 +261,7 @@ __mingw_snprintf (NULL, 0, \"%d\\n\", 1);\n   fi\n ])\n \n-dnl Check whether we have a __float128 type\n+dnl Check whether we have a __float128 and _Float128 type\n AC_DEFUN([LIBGFOR_CHECK_FLOAT128], [\n   LIBQUADSPEC=\n   LIBQUADLIB=\n@@ -276,7 +276,6 @@ AC_DEFUN([LIBGFOR_CHECK_FLOAT128], [\n    GCC_TRY_COMPILE_OR_LINK([\n     _Float128 foo (_Float128 x)\n     {\n-\n      _Complex _Float128 z1, z2;\n \n      z1 = x;\n@@ -290,11 +289,18 @@ AC_DEFUN([LIBGFOR_CHECK_FLOAT128], [\n     {\n       return x * __builtin_huge_valf128 ();\n     }\n+\n+    __float128 baz (__float128 x)\n+    {\n+      return x * __builtin_huge_valf128 ();\n+    }\n   ],[\n     foo (1.2F128);\n     bar (1.2F128);\n+    baz (1.2F128);\n     foo (1.2Q);\n     bar (1.2Q);\n+    baz (1.2Q);\n   ],[\n     libgfor_cv_have_float128=yes\n   ],[\n@@ -310,7 +316,7 @@ AC_DEFUN([LIBGFOR_CHECK_FLOAT128], [\n     if test \"x$USE_IEC_60559\" = xyes; then\n       AC_DEFINE(USE_IEC_60559, 1, [Define if IEC 60559 *f128 APIs should be used for _Float128.])\n     fi\n-    AC_DEFINE(HAVE_FLOAT128, 1, [Define if have a usable _Float128 type.])\n+    AC_DEFINE(HAVE_FLOAT128, 1, [Define if target has usable _Float128 and __float128 types.])\n \n     dnl Check whether -Wl,--as-needed resp. -Wl,-zignore is supported\n     dnl "}, {"sha": "da2c44c1af1a6d56d810d7e564a2aebdaa99309e", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c022c0de2a6c9110350cd50275be97d061a19530/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c022c0de2a6c9110350cd50275be97d061a19530/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=c022c0de2a6c9110350cd50275be97d061a19530", "patch": "@@ -468,7 +468,7 @@\n /* Define to 1 if you have the <fenv.h> header file. */\n #undef HAVE_FENV_H\n \n-/* Define if have a usable _Float128 type. */\n+/* Define if target has usable _Float128 and __float128 types. */\n #undef HAVE_FLOAT128\n \n /* Define to 1 if you have the <floatingpoint.h> header file. */"}, {"sha": "c440721d1fd0d206e7129a8fd90b3c54d1158303", "filename": "libgfortran/configure", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c022c0de2a6c9110350cd50275be97d061a19530/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c022c0de2a6c9110350cd50275be97d061a19530/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=c022c0de2a6c9110350cd50275be97d061a19530", "patch": "@@ -30130,7 +30130,6 @@ else\n \n     _Float128 foo (_Float128 x)\n     {\n-\n      _Complex _Float128 z1, z2;\n \n      z1 = x;\n@@ -30145,14 +30144,21 @@ else\n       return x * __builtin_huge_valf128 ();\n     }\n \n+    __float128 baz (__float128 x)\n+    {\n+      return x * __builtin_huge_valf128 ();\n+    }\n+\n int\n main ()\n {\n \n     foo (1.2F128);\n     bar (1.2F128);\n+    baz (1.2F128);\n     foo (1.2Q);\n     bar (1.2Q);\n+    baz (1.2Q);\n \n   ;\n   return 0;\n@@ -30177,7 +30183,6 @@ cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n \n     _Float128 foo (_Float128 x)\n     {\n-\n      _Complex _Float128 z1, z2;\n \n      z1 = x;\n@@ -30192,14 +30197,21 @@ cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n       return x * __builtin_huge_valf128 ();\n     }\n \n+    __float128 baz (__float128 x)\n+    {\n+      return x * __builtin_huge_valf128 ();\n+    }\n+\n int\n main ()\n {\n \n     foo (1.2F128);\n     bar (1.2F128);\n+    baz (1.2F128);\n     foo (1.2Q);\n     bar (1.2Q);\n+    baz (1.2Q);\n \n   ;\n   return 0;"}]}