{"sha": "84de9426df87ffc1485d3514401378712e5ee938", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRkZTk0MjZkZjg3ZmZjMTQ4NWQzNTE0NDAxMzc4NzEyZTVlZTkzOA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-01-02T23:59:51Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2019-01-02T23:59:51Z"}, "message": "gimple-fold.c (strlen_range_kind): Remove SRK_LENRANGE_2.\n\n\t* gimple-fold.c (strlen_range_kind): Remove SRK_LENRANGE_2.\n\t(get_range_strlen_tree): Update appropriately.\n\t(get_range_strlen)\n\t* gimple-fold.h (get_range_strlen): Drop unused last argument.\n\nCo-Authored-By: Jeff Law <law@redhat.com>\n\nFrom-SVN: r267537", "tree": {"sha": "9536883648c6f2d15ec03388616bb0e20ef6a43f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9536883648c6f2d15ec03388616bb0e20ef6a43f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84de9426df87ffc1485d3514401378712e5ee938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84de9426df87ffc1485d3514401378712e5ee938", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84de9426df87ffc1485d3514401378712e5ee938", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84de9426df87ffc1485d3514401378712e5ee938/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbf3e66ffc72fe977d916c686bcb3a2919d83f03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf3e66ffc72fe977d916c686bcb3a2919d83f03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbf3e66ffc72fe977d916c686bcb3a2919d83f03"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "634de2b0d18cc2b5e940a0766b516c3b8eedefee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84de9426df87ffc1485d3514401378712e5ee938/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84de9426df87ffc1485d3514401378712e5ee938/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84de9426df87ffc1485d3514401378712e5ee938", "patch": "@@ -1,6 +1,10 @@\n 2019-01-02  Martin Sebor  <msebor@redhat.com>\n             Jeff Law  <law@redhat.com>\n \n+\t* gimple-fold.c (strlen_range_kind): Remove SRK_LENRANGE_2.\n+\t(get_range_strlen_tree): Update appropriately.\n+\t(get_range_strlen)\n+\t* gimple-fold.h (get_range_strlen): Drop unused last argument.\n \n \t* gimple-fold.c (gimple_fold_builtin_strlen): Use set_strlen_range\n \trather than set_range_info."}, {"sha": "529149acda3b0d88bea7be114e6c0ad9c42ca7f3", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84de9426df87ffc1485d3514401378712e5ee938/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84de9426df87ffc1485d3514401378712e5ee938/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=84de9426df87ffc1485d3514401378712e5ee938", "patch": "@@ -77,8 +77,6 @@ enum strlen_range_kind {\n      or element of.  Also determine the size of the largest character\n      array the string may refer to.  */\n   SRK_LENRANGE,\n-  /* Temporary until the rest of Martin's strlen range work is integrated.  */\n-  SRK_LENRANGE_2,\n   /* Determine the integer value of the argument (not string length).  */\n   SRK_INT_VALUE\n };\n@@ -1309,7 +1307,7 @@ get_range_strlen_tree (tree arg, bitmap *visited, strlen_range_kind rkind,\n \t\t\t\t     pdata, eltsize);\n \t}\n       else if (TREE_CODE (TREE_OPERAND (op, 0)) == COMPONENT_REF\n-\t       && (rkind == SRK_LENRANGE || rkind == SRK_LENRANGE_2))\n+\t       && rkind == SRK_LENRANGE)\n \t{\n \t  /* Fail if an array is the last member of a struct object\n \t     since it could be treated as a (fake) flexible array\n@@ -1349,7 +1347,7 @@ get_range_strlen_tree (tree arg, bitmap *visited, strlen_range_kind rkind,\n \t}\n     }\n \n-  if (!val && (rkind == SRK_LENRANGE || rkind == SRK_LENRANGE_2))\n+  if (!val && rkind == SRK_LENRANGE)\n     {\n       if (TREE_CODE (arg) == ADDR_EXPR)\n \treturn get_range_strlen (TREE_OPERAND (arg, 0), visited, rkind,\n@@ -1484,7 +1482,7 @@ get_range_strlen_tree (tree arg, bitmap *visited, strlen_range_kind rkind,\n \t on the length of the string based on the referenced object's\n \t or subobject's type.  Determine the conservative upper bound\n \t based on the enclosing object's size if possible.  */\n-      if (rkind == SRK_LENRANGE || rkind == SRK_LENRANGE_2)\n+      if (rkind == SRK_LENRANGE)\n \t{\n \t  poly_int64 offset;\n \t  tree base = get_addr_base_and_unit_offset (arg, &offset);\n@@ -1538,7 +1536,7 @@ get_range_strlen_tree (tree arg, bitmap *visited, strlen_range_kind rkind,\n     }\n \n   pdata->maxlen = val;\n-  return rkind == SRK_LENRANGE || rkind == SRK_LENRANGE_2 || !integer_all_onesp (val);\n+  return rkind == SRK_LENRANGE || !integer_all_onesp (val);\n }\n \n /* For an ARG referencing one or more strings, try to obtain the range\n@@ -1600,7 +1598,7 @@ get_range_strlen (tree arg, bitmap *visited,\n \t    for (unsigned int i = 0; i < 2; i++)\n \t      if (!get_range_strlen (ops[i], visited, rkind, pdata, eltsize))\n \t\t{\n-\t\t  if (rkind != SRK_LENRANGE_2)\n+\t\t  if (rkind != SRK_LENRANGE)\n \t\t    return false;\n \t\t  /* Set the upper bound to the maximum to prevent\n \t\t     it from being adjusted in the next iteration but\n@@ -1634,7 +1632,7 @@ get_range_strlen (tree arg, bitmap *visited,\n \n \t    if (!get_range_strlen (arg, visited, rkind, pdata, eltsize))\n \t      {\n-\t\tif (rkind != SRK_LENRANGE_2)\n+\t\tif (rkind != SRK_LENRANGE)\n \t\t  return false;\n \t\t/* Set the upper bound to the maximum to prevent\n \t\t   it from being adjusted in the next iteration but\n@@ -1680,12 +1678,11 @@ get_range_strlen (tree arg, bitmap *visited,\n    4 for wide characer strings.  ELTSIZE is by default 1.  */\n \n bool\n-get_range_strlen (tree arg, c_strlen_data *pdata, unsigned eltsize, bool strict)\n+get_range_strlen (tree arg, c_strlen_data *pdata, unsigned eltsize)\n {\n   bitmap visited = NULL;\n \n-  if (!get_range_strlen (arg, &visited, strict ? SRK_LENRANGE : SRK_LENRANGE_2,\n-\t\t\t pdata, eltsize))\n+  if (!get_range_strlen (arg, &visited, SRK_LENRANGE, pdata, eltsize))\n     {\n       /* On failure extend the length range to an impossible maximum\n \t (a valid MAXLEN must be less than PTRDIFF_MAX - 1).  Other"}, {"sha": "673d484ff526b4c3c9c7abc6564c08865c95061d", "filename": "gcc/gimple-fold.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84de9426df87ffc1485d3514401378712e5ee938/gcc%2Fgimple-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84de9426df87ffc1485d3514401378712e5ee938/gcc%2Fgimple-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.h?ref=84de9426df87ffc1485d3514401378712e5ee938", "patch": "@@ -26,7 +26,7 @@ extern tree create_tmp_reg_or_ssa_name (tree, gimple *stmt = NULL);\n extern tree canonicalize_constructor_val (tree, tree);\n extern tree get_symbol_constant_value (tree);\n struct c_strlen_data;\n-extern bool get_range_strlen (tree, c_strlen_data *, unsigned eltsize, bool = false);\n+extern bool get_range_strlen (tree, c_strlen_data *, unsigned eltsize);\n extern void gimplify_and_update_call_from_tree (gimple_stmt_iterator *, tree);\n extern bool fold_stmt (gimple_stmt_iterator *);\n extern bool fold_stmt (gimple_stmt_iterator *, tree (*) (tree));"}]}