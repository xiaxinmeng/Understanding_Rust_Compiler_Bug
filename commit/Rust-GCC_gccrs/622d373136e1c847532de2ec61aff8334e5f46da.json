{"sha": "622d373136e1c847532de2ec61aff8334e5f46da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIyZDM3MzEzNmUxYzg0NzUzMmRlMmVjNjFhZmY4MzM0ZTVmNDZkYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-07-03T02:41:34Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-07-03T02:41:34Z"}, "message": "c-parse.in (parsing_iso_function_signature): New variable.\n\ngcc:\n\t* c-parse.in (parsing_iso_function_signature): New variable.\n\t(extdef_1): New, copied from...\n\t(extdef): ... here.  Reset parsing_iso_function_signature.\n\t(old_style_parm_decls):  Reset parsing_iso_function_signature.\n\t(old_style_parm_decls_1): New, copied from old_style_parm_decls.\n\tWarn about ISO C style function definitions.\n\t(nested_function, notype_nested_function): Reset\n\tparsing_iso_function_signature.\n\t(parmlist_2): Set parsing_iso_function_signature.\n\n\t* doc/invoke.texi (-Wtraditional): Document new behavior.\n\ngcc/testsuite:\n\t* gcc.dg/cpp/tr-warn2.c: Use traditional C style function definitions.\n\t* gcc.dg/wtr-aggr-init-1.c: Likewise.\n\t* gcc.dg/wtr-conversion-1.c: Likewise.\n\t* gcc.dg/wtr-escape-1.c: Likewise.\n\t* gcc.dg/wtr-int-type-1.c: Likewise.\n\t* gcc.dg/wtr-label-1.c: Likewise.\n\t* gcc.dg/wtr-static-1.c: Likewise.\n\t* gcc.dg/wtr-strcat-1.c: Likewise.\n\t* gcc.dg/wtr-suffix-1.c: Likewise.\n\t* gcc.dg/wtr-switch-1.c: Likewise.\n\t* gcc.dg/wtr-unary-plus-1.c: Likewise.\n\t* gcc.dg/wtr-union-init-1.c: Likewise.\n\t* gcc.dg/wtr-union-init-2.c: Likewise.\n\t* gcc.dg/wtr-union-init-3.c: Likewise.\n\n\t* gcc.dg/wtr-func-def-1.c: New test.\n\nFrom-SVN: r55201", "tree": {"sha": "a69a06c021b85c28921ce3c2d3d47eedb700c92c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a69a06c021b85c28921ce3c2d3d47eedb700c92c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/622d373136e1c847532de2ec61aff8334e5f46da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/622d373136e1c847532de2ec61aff8334e5f46da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/622d373136e1c847532de2ec61aff8334e5f46da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/622d373136e1c847532de2ec61aff8334e5f46da/comments", "author": null, "committer": null, "parents": [{"sha": "9bb46191b454e5d8b7b7be1bad7403c4139b591b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bb46191b454e5d8b7b7be1bad7403c4139b591b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bb46191b454e5d8b7b7be1bad7403c4139b591b"}], "stats": {"total": 309, "additions": 290, "deletions": 19}, "files": [{"sha": "8aaa2244fceaeb9a860aa0308d9180cdabc065f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -1,3 +1,17 @@\n+2002-07-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-parse.in (parsing_iso_function_signature): New variable.\n+\t(extdef_1): New, copied from...\n+\t(extdef): ... here.  Reset parsing_iso_function_signature.\n+\t(old_style_parm_decls):  Reset parsing_iso_function_signature.\n+\t(old_style_parm_decls_1): New, copied from old_style_parm_decls.\n+\tWarn about ISO C style function definitions.\n+\t(nested_function, notype_nested_function): Reset\n+\tparsing_iso_function_signature.\n+\t(parmlist_2): Set parsing_iso_function_signature.\n+\n+\t* doc/invoke.texi (-Wtraditional): Document new behavior.\n+\n 2002-07-02  Chris Demetriou  <cgd@broadcom.com>\n \n \t* config.gcc (mips*el-*-*): Use tm_defines to set"}, {"sha": "2a948328f7341bc71d5499506d4482eacd3f740f", "filename": "gcc/c-parse.in", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -331,6 +331,8 @@ ifc\n #define OBJC_NEED_RAW_IDENTIFIER(VAL)\t/* nothing */\n end ifc\n \n+static bool parsing_iso_function_signature;\n+\n /* Tell yyparse how to print a token's value, if yydebug is set.  */\n \n #define YYPRINT(FILE,YYCHAR,YYLVAL) yyprint(FILE,YYCHAR,YYLVAL)\n@@ -382,6 +384,10 @@ extdefs:\n \t;\n \n extdef:\n+\textdef_1\n+\t{ parsing_iso_function_signature = false; } /* Reset after any external definition.  */\n+\n+extdef_1:\n \tfndef\n \t| datadef\n ifobjc\n@@ -787,7 +793,19 @@ objc_string:\n end ifobjc\n \n old_style_parm_decls:\n+\told_style_parm_decls_1\n+\t{\n+\t  parsing_iso_function_signature = false; /* Reset after decls.  */\n+\t}\n+\n+old_style_parm_decls_1:\n \t/* empty */\n+\t{\n+\t  if (warn_traditional && !in_system_header\n+\t      && parsing_iso_function_signature)\n+\t    warning (\"traditional C rejects ISO C style function definitions\");\n+\t  parsing_iso_function_signature = false; /* Reset after warning.  */\n+\t}\n \t| datadecls\n \t| datadecls ELLIPSIS\n \t\t/* ... is used here to indicate a varargs function.  */\n@@ -1586,6 +1604,7 @@ nested_function:\n \t\t      pop_function_context ();\n \t\t      YYERROR1;\n \t\t    }\n+\t\t  parsing_iso_function_signature = false; /* Don't warn about nested functions.  */\n \t\t}\n \t   old_style_parm_decls\n \t\t{ store_parm_decls (); }\n@@ -1616,6 +1635,7 @@ notype_nested_function:\n \t\t      pop_function_context ();\n \t\t      YYERROR1;\n \t\t    }\n+\t\t  parsing_iso_function_signature = false; /* Don't warn about nested functions.  */\n \t\t}\n \t  old_style_parm_decls\n \t\t{ store_parm_decls (); }\n@@ -2540,7 +2560,9 @@ parmlist_2:  /* empty */\n \t\t  error (\"ISO C requires a named argument before `...'\");\n \t\t}\n \t| parms\n-\t\t{ $$ = get_parm_info (1); }\n+\t\t{ $$ = get_parm_info (1);\n+\t\t  parsing_iso_function_signature = true;\n+\t\t}\n \t| parms ',' ELLIPSIS\n \t\t{ $$ = get_parm_info (0); }\n \t;"}, {"sha": "1bf3934653187f0913fef42b18bac05006718228", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -2410,6 +2410,15 @@ Conversions by prototypes between fixed/floating point values and vice\n versa.  The absence of these prototypes when compiling with traditional\n C would cause serious problems.  This is a subset of the possible\n conversion warnings, for the full set use @option{-Wconversion}.\n+\n+@item\n+Use of ISO C style function definitions.  This warning intentionally is\n+@emph{not} issued for prototype declarations or variadic functions\n+because these ISO C features will appear in your code when using\n+libiberty's traditional C compatibility macros, @code{PARAMS} and\n+@code{VPARAMS}.  This warning is also bypassed for nested functions\n+because that feature is already a gcc extension and thus not relevant to\n+traditional C compatibility.\n @end itemize\n \n @item -Wundef"}, {"sha": "06b43e1bc75ded753a63713503b3e648bef6d6b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -1,3 +1,22 @@\n+2002-07-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/cpp/tr-warn2.c: Use traditional C style function definitions.\n+\t* gcc.dg/wtr-aggr-init-1.c: Likewise.\n+\t* gcc.dg/wtr-conversion-1.c: Likewise.\n+\t* gcc.dg/wtr-escape-1.c: Likewise.\n+\t* gcc.dg/wtr-int-type-1.c: Likewise.\n+\t* gcc.dg/wtr-label-1.c: Likewise.\n+\t* gcc.dg/wtr-static-1.c: Likewise.\n+\t* gcc.dg/wtr-strcat-1.c: Likewise.\n+\t* gcc.dg/wtr-suffix-1.c: Likewise.\n+\t* gcc.dg/wtr-switch-1.c: Likewise.\n+\t* gcc.dg/wtr-unary-plus-1.c: Likewise.\n+\t* gcc.dg/wtr-union-init-1.c: Likewise.\n+\t* gcc.dg/wtr-union-init-2.c: Likewise.\n+\t* gcc.dg/wtr-union-init-3.c: Likewise.\n+\n+\t* gcc.dg/wtr-func-def-1.c: New test.\n+\n 2002-07-02 Devang Patel <dpatel@apple.com>\n \n \t* objc.dg/param-1.m: New test."}, {"sha": "413ac5c4e22342327860721d81d45f58a45faf75", "filename": "gcc/testsuite/gcc.dg/cpp/tr-warn2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn2.c?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -8,7 +8,7 @@ enum { SIGN_EXTEND = 23 };\n \n #define SIGN_EXTEND(v) (((v) < 0) ? -1 : 0)\n \n-int fun(void)\n+int fun()\n {\n   return SIGN_EXTEND;\t/* { dg-warning \"must be used with arguments\" } */\n }"}, {"sha": "f17531e8fb9875565c7048dd7002f738fbbd9e43", "filename": "gcc/testsuite/gcc.dg/wtr-aggr-init-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-aggr-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-aggr-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-aggr-init-1.c?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -14,7 +14,7 @@ struct foo f0 = { 0, 0 };\n static struct foo f1 = { 0, 0 };\n \n void\n-testfunc1 (void)\n+testfunc1 ()\n {\n   struct foo f3 = { 0, 0 }; /* { dg-warning \"traditional C rejects automatic\" \"automatic aggregate initialization\" } */\n   static struct foo f4 = { 0, 0 };\n@@ -39,7 +39,7 @@ struct foo f7 = { 0, 0 };\n static struct foo f8 = { 0, 0 };\n \n void\n-testfunc2 (void)\n+testfunc2 ()\n {\n   struct foo f9 = { 0, 0 };\n   static struct foo f10 = { 0, 0 };"}, {"sha": "18d26165f2a657dc857c529dff2dfbb747b2e85a", "filename": "gcc/testsuite/gcc.dg/wtr-conversion-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-conversion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-conversion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-conversion-1.c?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -15,7 +15,7 @@ extern long double ld;\n extern __complex__ double cd;\n \n void\n-testfunc1 (void)\n+testfunc1 ()\n {\n   foo_i (i);\n   foo_i (f); /* { dg-warning \"as integer rather than floating\" \"prototype conversion warning\" } */\n@@ -42,7 +42,7 @@ testfunc1 (void)\n /* We are in system headers now, no -Wtraditional warnings should issue.  */\n \n void\n-testfunc2 (void)\n+testfunc2 ()\n {\n   foo_i (i);\n   foo_i (f);"}, {"sha": "7f48de5e8c61385f3700d2c7df81076dc8520c01", "filename": "gcc/testsuite/gcc.dg/wtr-escape-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-escape-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-escape-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-escape-1.c?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -5,7 +5,7 @@\n /* { dg-options \"-Wtraditional\" } */\n \n void\n-testfunc (void)\n+testfunc ()\n {\n   char c;\n "}, {"sha": "c300d22ee3e0352eeb50d959fdf2cf552f119de8", "filename": "gcc/testsuite/gcc.dg/wtr-func-def-1.c", "status": "added", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-func-def-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-func-def-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-func-def-1.c?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -0,0 +1,204 @@\n+/* Test for -Wtraditional warnings on ISO C function definitions.\n+   Note, gcc should omit these warnings in system header files.\n+   Origin: Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 6/30/2002.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wtraditional\" } */\n+\n+/* Test some simple cases.  */\n+\n+void f_void1 (void)\n+{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+  return;\n+}\n+\n+void f_void2 ()\n+{\n+  return;\n+}\n+\n+void f_int1 (int f)\n+{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+  return;\n+}\n+\n+void f_int2 (f)\n+     int f;\n+{\n+  return;\n+}\n+\n+/* Test that we don't ever warn about nested functions.  */\n+\n+void f_int3 (int f)\n+{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+  void f3a (void) { return; }\n+  void f3b () { return; }\n+  void f3c (int f) { return; }\n+  void f3d (f) int f; { return; }\n+  void f3e (const char *f, ...) { return; }\n+  return;\n+}\n+\n+void f_int4 (int f)\n+{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+  void f4a (void) { return; }\n+  void f4b () { return; }\n+  void f4c (int f) { return; }\n+  void f4d (f) int f; { return; }\n+  void f4e (const char *f, ...) { return; }\n+  auto f4f (void) { return 0; }\n+  return;\n+}\n+\n+void f_int5 (f)\n+     int f;\n+{\n+  void f5a (void) { return; }\n+  void f5b () { return; }\n+  void f5c (int f) { return; }\n+  void f5d (f) int f; { return; }\n+  void f5e (const char *f, ...) { return; }\n+  return;\n+}\n+\n+void f_int6 (f)\n+     int f;\n+{\n+  void f6a (void) { return; }\n+  void f6b () { return; }\n+  void f6c (int f) { return; }\n+  void f6d (f) int f; { return; }\n+  void f6e (const char *f, ...) { return; }\n+  auto f6f (void) { return 0; }\n+  return;\n+}\n+\n+/* Test that prototypes are silently accepted and function definitions\n+   are still warned about.  */\n+\n+extern void f_int_p1 (int);\n+void f_int_p1 (int f)\n+{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+  return;\n+}\n+\n+extern void f_int_p2 (int f);\n+void f_int_p2 (int f)\n+{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+  return;\n+}\n+\n+extern void f_int_p3 (int);\n+void f_int_p3 (f)\n+     int f;\n+{\n+  return;\n+}\n+\n+extern void f_int_p4 (int f);\n+void f_int_p4 (f)\n+     int f;\n+{\n+  return;\n+}\n+\n+extern void f_void_p1 ();\n+void f_void_p1 (void)\n+{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+  return;\n+}\n+\n+extern void f_void_p2 (void);\n+void f_void_p2 (void)\n+{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+  return;\n+}\n+\n+extern void f_blank_p1 ();\n+void f_blank_p1 ()\n+{\n+  return;\n+}\n+\n+extern void f_blank_p2 (void);\n+void f_blank_p2 ()\n+{\n+  return;\n+}\n+\n+/* Test some implicit int functions.  */\n+\n+f_impl1()\n+{\n+  return 0;\n+}\n+\n+f_impl2(void)\n+{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+  return 0;\n+}\n+\n+f_impl3(int f)\n+{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+  return 0;\n+}\n+\n+/* Test that we don't warn about stdarg functions.  */\n+\n+f_stdarg1(const char *s, ...)\n+{\n+  return 0;\n+}\n+\n+void f_stdarg2(const char *s, ...)\n+{\n+  return;\n+}\n+\n+extern void f_stdarg3(const char *, ...);\n+void f_stdarg3(const char *s, ...)\n+{\n+  return;\n+}\n+\n+/* Test handling function pointer parameters.  */\n+\n+void f_fnptr1 (int f, int (*fp)(int));\n+void f_fnptr1 (int f, int (*fp)(int))\n+{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+  return;\n+}\n+\n+void f_fnptr2 (int f, int (*fp)(int));\n+void f_fnptr2 (f, fp)\n+     int f;\n+     int (*fp)(int);\n+{\n+  return;\n+}\n+\n+/* Test for main.  */\n+\n+int\n+main (int argc, char **argv)\n+{ /* { dg-warning \"traditional C rejects ISO C style\" } */\n+  return 0;\n+}\n+\n+# 182 \"sys-header.h\" 3\n+/* We are in system headers now, no -Wtraditional warnings should issue.  */\n+\n+void fsys1 (void)\n+{\n+  return;\n+}\n+\n+void fsys2 (int f)\n+{\n+  return;\n+}\n+\n+void fsys3 (const char *f, ...)\n+{\n+  return;\n+}"}, {"sha": "d44165d90b987ce36d189ae1bde00eda64297e3d", "filename": "gcc/testsuite/gcc.dg/wtr-int-type-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-int-type-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-int-type-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-int-type-1.c?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -5,7 +5,7 @@\n /* { dg-options \"-std=c99 -Wtraditional\" } */\n \n void\n-testfunc (void)\n+testfunc ()\n {\n   long long i;\n   "}, {"sha": "78a4d6b0a4b6934b3f920b98493a60d958ffa551", "filename": "gcc/testsuite/gcc.dg/wtr-label-1.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-label-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-label-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-label-1.c?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -11,7 +11,8 @@ int foo4;\n typedef int foo5;\n \n void\n-testfunc1 (int foo6)\n+testfunc1 (foo6)\n+     int foo6;\n {\n   int foo7;\n \n@@ -32,7 +33,8 @@ testfunc1 (int foo6)\n /* We are in system headers now, no -Wtraditional warnings should issue.  */\n \n void\n-testfunc2 (int foo6)\n+testfunc2 (foo6)\n+     int foo6;\n {\n   int foo7;\n "}, {"sha": "310c1eab925f2d9e76982a4549857d4759ac545e", "filename": "gcc/testsuite/gcc.dg/wtr-static-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-static-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-static-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-static-1.c?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -5,10 +5,10 @@\n /* { dg-options \"-Wtraditional\" } */\n \n static void testfunc1(void);\n-void testfunc1(void) {} /* { dg-warning \"non-static.*follows static\" \"non-static follows static\" } */\n+void testfunc1() {} /* { dg-warning \"non-static.*follows static\" \"non-static follows static\" } */\n \n # 11 \"sys-header.h\" 3\n /* We are in system headers now, no -Wtraditional warnings should issue.  */\n \n static void testfunc2(void);\n-void testfunc2(void) {}\n+void testfunc2() {}"}, {"sha": "b3966529ad7e13112741e26305ca6e306cdc50f6", "filename": "gcc/testsuite/gcc.dg/wtr-strcat-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-strcat-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-strcat-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-strcat-1.c?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -5,7 +5,7 @@\n /* { dg-options \"-Wtraditional\" } */\n \n void\n-testfunc (void)\n+testfunc ()\n {\n   const char *foo;\n   "}, {"sha": "ed0b40ecf301dd83bac522d2213ee0cc33b10c21", "filename": "gcc/testsuite/gcc.dg/wtr-suffix-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-suffix-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-suffix-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-suffix-1.c?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -5,7 +5,7 @@\n /* { dg-options \"-Wtraditional\" } */\n \n void\n-testfunc (void)\n+testfunc ()\n {\n   int i;\n   double f;"}, {"sha": "f0381bc5e3797fbfa701417336ea65ca1b00a131", "filename": "gcc/testsuite/gcc.dg/wtr-switch-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-switch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-switch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-switch-1.c?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -5,7 +5,8 @@\n /* { dg-options \"-Wtraditional\" } */\n \n void\n-testfunc (long l)\n+testfunc (l)\n+     long l;\n {\n   switch (l) /* { dg-warning \"switch expression\" \"switch expression\" } */\n   {"}, {"sha": "aee892c532e615b96c389e37a8dcd5d0139e9faf", "filename": "gcc/testsuite/gcc.dg/wtr-unary-plus-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-unary-plus-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-unary-plus-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-unary-plus-1.c?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -5,7 +5,7 @@\n /* { dg-options \"-Wtraditional\" } */\n \n void\n-testfunc (void)\n+testfunc ()\n {\n   int i;\n   "}, {"sha": "18869813d2812d2df497b185a875b9a1277e8e91", "filename": "gcc/testsuite/gcc.dg/wtr-union-init-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-1.c?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -11,7 +11,7 @@ union foo\n };\n \n void\n-testfunc (void)\n+testfunc ()\n {\n   /* Note we only warn for non-zero initializers.  */\n   static union foo f1 = { 0 };"}, {"sha": "3112ba277622f0b50bbd191dc30967cfdd365274", "filename": "gcc/testsuite/gcc.dg/wtr-union-init-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-2.c?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -19,7 +19,7 @@ union foo2\n };\n \n void\n-testfunc (void)\n+testfunc ()\n {\n   /* Note we only warn for non-zero initializers.  */\n   static union foo1 f1 = {0};"}, {"sha": "bb8e300289d865afa9e0ea51692d48620956b4f2", "filename": "gcc/testsuite/gcc.dg/wtr-union-init-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/622d373136e1c847532de2ec61aff8334e5f46da/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-3.c?ref=622d373136e1c847532de2ec61aff8334e5f46da", "patch": "@@ -38,7 +38,7 @@ struct baz2\n };\n \n void\n-testfunc (void)\n+testfunc ()\n {\n   /* Note we only warn for non-zero initializers.  Xfail on substructures. */\n   static union foo f1 = {{0,0}}; /* { dg-bogus \"traditional C rejects initialization of unions\" \"initialization of unions\" { xfail *-*-* } } */"}]}