{"sha": "c006d94230a09a466742fe90e2c0c58341f2da3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAwNmQ5NDIzMGEwOWE0NjY3NDJmZTkwZTJjMGM1ODM0MWYyZGEzYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-01-23T06:05:20Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-01-23T06:05:20Z"}, "message": "re PR c++/9354 ([New parser?] segfault in template definition)\n\n\tPR c++/9354\n\t* init.c (build_new): Set the type of the new-expression, even\n\twhen processing_templte_decl.\n\n\tPR c++/9216\n\t* parser.c (cp_parser_primary_expression): Improve error message\n\tfor templates used in an expression context.\n\n\tPR c++/8696\n\t* parser.c (cp_parser_decl_specifier_seq): Commit to tentative\n\tparse when encountering \"typedef\".\n\n\tPR c++/9354\n\t* g++.dg/parse/new1.C: New test.\n\n\tPR c++/9216\n\t* g++.dg/parse/template2.C: New test.\n\n\tPR c++/9354\n\t* g++.dg/parse/typedef2.C: New test.\n\nFrom-SVN: r61643", "tree": {"sha": "e16d681984f17ac9dd6b29a40c8e893f67bcbc22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e16d681984f17ac9dd6b29a40c8e893f67bcbc22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c006d94230a09a466742fe90e2c0c58341f2da3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c006d94230a09a466742fe90e2c0c58341f2da3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c006d94230a09a466742fe90e2c0c58341f2da3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c006d94230a09a466742fe90e2c0c58341f2da3c/comments", "author": null, "committer": null, "parents": [{"sha": "34ee7f8278d155d6d128f6af19b10ed35fa8f3d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34ee7f8278d155d6d128f6af19b10ed35fa8f3d5"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "be97c508b1939dbbdb20166b2cc923c4f624f357", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c006d94230a09a466742fe90e2c0c58341f2da3c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c006d94230a09a466742fe90e2c0c58341f2da3c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c006d94230a09a466742fe90e2c0c58341f2da3c", "patch": "@@ -1,3 +1,17 @@\n+2003-01-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/9354\n+\t* init.c (build_new): Set the type of the new-expression, even\n+\twhen processing_templte_decl.\n+\n+\tPR c++/9216\n+\t* parser.c (cp_parser_primary_expression): Improve error message\n+\tfor templates used in an expression context.\n+\n+\tPR c++/8696\n+\t* parser.c (cp_parser_decl_specifier_seq): Commit to tentative\n+\tparse when encountering \"typedef\".\n+\n 2003-01-22  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* class.c, parser.c: ANSIfy function definitions and declarations."}, {"sha": "493f9b8e9185a62e26c1796c5757365c2ec55764", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c006d94230a09a466742fe90e2c0c58341f2da3c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c006d94230a09a466742fe90e2c0c58341f2da3c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=c006d94230a09a466742fe90e2c0c58341f2da3c", "patch": "@@ -2024,7 +2024,8 @@ build_new (placement, decl, init, use_global_new)\n       else\n \tt = type;\n \t\n-      rval = build_min_nt (NEW_EXPR, placement, t, init);\n+      rval = build_min (NEW_EXPR, build_pointer_type (type), \n+\t\t\tplacement, t, init);\n       NEW_EXPR_USE_GLOBAL (rval) = use_global_new;\n       return rval;\n     }"}, {"sha": "4d809b810125ee1fa9554bac2759ae88582889ea", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c006d94230a09a466742fe90e2c0c58341f2da3c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c006d94230a09a466742fe90e2c0c58341f2da3c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c006d94230a09a466742fe90e2c0c58341f2da3c", "patch": "@@ -2562,10 +2562,14 @@ cp_parser_primary_expression (cp_parser *parser,\n \n \t/* If we didn't find anything, or what we found was a type,\n \t   then this wasn't really an id-expression.  */\n-\tif (TREE_CODE (decl) == TYPE_DECL\n-\t    || TREE_CODE (decl) == NAMESPACE_DECL\n-\t    || (TREE_CODE (decl) == TEMPLATE_DECL\n-\t\t&& !DECL_FUNCTION_TEMPLATE_P (decl)))\n+\tif (TREE_CODE (decl) == TEMPLATE_DECL\n+\t    && !DECL_FUNCTION_TEMPLATE_P (decl))\n+\t  {\n+\t    cp_parser_error (parser, \"missing template arguments\");\n+\t    return error_mark_node;\n+\t  }\n+\telse if (TREE_CODE (decl) == TYPE_DECL\n+\t\t || TREE_CODE (decl) == NAMESPACE_DECL)\n \t  {\n \t    cp_parser_error (parser, \n \t\t\t     \"expected primary-expression\");\n@@ -6582,6 +6586,9 @@ cp_parser_decl_specifier_seq (cp_parser* parser,\n \t  cp_lexer_consume_token (parser->lexer);\n \t  /* A constructor declarator cannot appear in a typedef.  */\n \t  constructor_possible_p = false;\n+\t  /* The \"typedef\" keyword can only occur in a declaration; we\n+\t     may as well commit at this point.  */\n+\t  cp_parser_commit_to_tentative_parse (parser);\n \t  break;\n \n \t  /* storage-class-specifier:"}, {"sha": "5dcd1d1bd60648d4990b0b10213ba06e4d858711", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c006d94230a09a466742fe90e2c0c58341f2da3c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c006d94230a09a466742fe90e2c0c58341f2da3c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c006d94230a09a466742fe90e2c0c58341f2da3c", "patch": "@@ -1,5 +1,14 @@\n 2003-01-22  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/9354\n+\t* g++.dg/parse/new1.C: New test.\n+\n+\tPR c++/9216\n+\t* g++.dg/parse/template2.C: New test.\n+\n+\tPR c++/9354\n+\t* g++.dg/parse/typedef2.C: New test.\n+\n \tPR c++/9328\n \t* g++.dg/ext/typeof3.C: New test.\n "}, {"sha": "31dad773935233e98201a1735bd71e150b44ca57", "filename": "gcc/testsuite/g++.dg/parse/new1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c006d94230a09a466742fe90e2c0c58341f2da3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnew1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c006d94230a09a466742fe90e2c0c58341f2da3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnew1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fnew1.C?ref=c006d94230a09a466742fe90e2c0c58341f2da3c", "patch": "@@ -0,0 +1,7 @@\n+struct T;\n+T* manage(T* t);\n+template <class Obj> struct ObjectSlot0_ {\n+  void create() {\n+    void* tmp = manage(new T());\n+  }\n+};"}, {"sha": "6689c8bfa1dde1c595bb0e0adaaa5fb95d239a72", "filename": "gcc/testsuite/g++.dg/parse/template2.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c006d94230a09a466742fe90e2c0c58341f2da3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c006d94230a09a466742fe90e2c0c58341f2da3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate2.C?ref=c006d94230a09a466742fe90e2c0c58341f2da3c", "patch": "@@ -0,0 +1,7 @@\n+namespace N {\n+  template < typename T > class C : T {};\n+}\n+\n+int main() {\n+  N::C(); // { dg-error \"template\" }\n+}"}, {"sha": "3ae347d75427840cd11696da9529fa1dc29466a4", "filename": "gcc/testsuite/g++.dg/parse/typedef2.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c006d94230a09a466742fe90e2c0c58341f2da3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c006d94230a09a466742fe90e2c0c58341f2da3c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef2.C?ref=c006d94230a09a466742fe90e2c0c58341f2da3c", "patch": "@@ -0,0 +1,3 @@\n+template <typename T> struct B { typedef typename T::X X; };\n+template <typename T> struct A { typedef B<T>::X::Y Z; }; // { dg-error \"\" }\n+ "}]}