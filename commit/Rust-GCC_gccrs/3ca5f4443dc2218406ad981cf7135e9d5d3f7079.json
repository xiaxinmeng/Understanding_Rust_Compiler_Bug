{"sha": "3ca5f4443dc2218406ad981cf7135e9d5d3f7079", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NhNWY0NDQzZGMyMjE4NDA2YWQ5ODFjZjcxMzVlOWQ1ZDNmNzA3OQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@redhat.com", "date": "2002-04-04T23:54:01Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2002-04-04T23:54:01Z"}, "message": "20020404-1.c: New test.\n\n2002-04-04  David S. Miller  <davem@redhat.com>\n\n\t* gcc.c-torture/execute/20020404-1.c: New test.\n\nFrom-SVN: r51889", "tree": {"sha": "c182a48f259fb43ddb27c7e574038d80f4c3bedf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c182a48f259fb43ddb27c7e574038d80f4c3bedf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ca5f4443dc2218406ad981cf7135e9d5d3f7079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ca5f4443dc2218406ad981cf7135e9d5d3f7079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ca5f4443dc2218406ad981cf7135e9d5d3f7079", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ca5f4443dc2218406ad981cf7135e9d5d3f7079/comments", "author": null, "committer": null, "parents": [{"sha": "aa7634ddf73d9f050aaf698afb90abd1d3abf34e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa7634ddf73d9f050aaf698afb90abd1d3abf34e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa7634ddf73d9f050aaf698afb90abd1d3abf34e"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "7b92bce96e6d760a1e644ea31b869367e02a9227", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca5f4443dc2218406ad981cf7135e9d5d3f7079/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca5f4443dc2218406ad981cf7135e9d5d3f7079/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ca5f4443dc2218406ad981cf7135e9d5d3f7079", "patch": "@@ -1,3 +1,7 @@\n+2002-04-04  David S. Miller  <davem@redhat.com>\n+\n+\t* gcc.c-torture/execute/20020404-1.c: New test.\n+\n 2002-04-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/6123"}, {"sha": "dc62b15bbdd8c7237fb752cef58841120dc7ac5e", "filename": "gcc/testsuite/gcc.c-torture/execute/20020404-1.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca5f4443dc2218406ad981cf7135e9d5d3f7079/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020404-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca5f4443dc2218406ad981cf7135e9d5d3f7079/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020404-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020404-1.c?ref=3ca5f4443dc2218406ad981cf7135e9d5d3f7079", "patch": "@@ -0,0 +1,102 @@\n+/* Extracted from GDB sources. */\n+\n+typedef long long bfd_signed_vma;\n+typedef bfd_signed_vma file_ptr;\n+\n+typedef enum bfd_boolean {false, true} boolean;\n+\n+typedef unsigned long long bfd_size_type;\n+\n+typedef unsigned int flagword;\n+\n+typedef unsigned long long CORE_ADDR;\n+typedef unsigned long long bfd_vma;\n+\n+struct bfd_struct {\n+\tint x;\n+};\n+\n+struct asection_struct {\n+  unsigned int user_set_vma : 1;\n+  bfd_vma vma;\n+  bfd_vma lma;\n+  unsigned int alignment_power;\n+  unsigned int entsize;\n+};\n+\n+typedef struct bfd_struct bfd;\n+typedef struct asection_struct asection;\n+\n+static bfd *\n+bfd_openw_with_cleanup (char *filename, const char *target, char *mode);\n+\n+static asection *\n+bfd_make_section_anyway (bfd *abfd, const char *name);\n+\n+static boolean\n+bfd_set_section_size (bfd *abfd, asection *sec, bfd_size_type val);\n+\n+static boolean\n+bfd_set_section_flags (bfd *abfd, asection *sec, flagword flags);\n+\n+static boolean\n+bfd_set_section_contents (bfd *abfd, asection *section, void * data, file_ptr offset, bfd_size_type count);\n+\n+static void\n+dump_bfd_file (char *filename, char *mode,\n+               char *target, CORE_ADDR vaddr,\n+               char *buf, int len)\n+{\n+  bfd *obfd;\n+  asection *osection;\n+\n+  obfd = bfd_openw_with_cleanup (filename, target, mode);\n+  osection = bfd_make_section_anyway (obfd, \".newsec\");\n+  bfd_set_section_size (obfd, osection, len);\n+  (((osection)->vma = (osection)->lma= (vaddr)), ((osection)->user_set_vma = (boolean)true), true);\n+  (((osection)->alignment_power = (0)),true);\n+  bfd_set_section_flags (obfd, osection, 0x203);\n+  osection->entsize = 0;\n+  bfd_set_section_contents (obfd, osection, buf, 0, len);\n+}\n+\n+static bfd *\n+bfd_openw_with_cleanup (char *filename, const char *target, char *mode)\n+{\n+\tstatic bfd foo_bfd = { 0 };\n+\treturn &foo_bfd;\n+}\n+\n+static asection *\n+bfd_make_section_anyway (bfd *abfd, const char *name)\n+{\n+\tstatic asection foo_section = { false, 0x0, 0x0, 0 };\n+\n+\treturn &foo_section;\n+}\n+\n+static boolean\n+bfd_set_section_size (bfd *abfd, asection *sec, bfd_size_type val)\n+{\n+\treturn true;\n+}\n+\n+static boolean\n+bfd_set_section_flags (bfd *abfd, asection *sec, flagword flags)\n+{\n+}\n+\n+static boolean\n+bfd_set_section_contents (bfd *abfd, asection *section, void * data, file_ptr offset, bfd_size_type count)\n+{\n+\tif (count != (bfd_size_type)0x1eadbeef)\n+\t\tabort();\n+}\n+\n+static char hello[] = \"hello\";\n+\n+int main(void)\n+{\n+\tdump_bfd_file(0, 0, 0, (CORE_ADDR)0xdeadbeef, hello, (int)0x1eadbeef);\n+\texit(0);\n+}"}]}