{"sha": "147e602a4ddd342523eddb419b602fdc732a3897", "node_id": "C_kwDOANBUbNoAKDE0N2U2MDJhNGRkZDM0MjUyM2VkZGI0MTliNjAyZmRjNzMyYTM4OTc", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-31T13:01:37Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-31T16:47:41Z"}, "message": "RISC-V: Add vsll.vv C++ API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vsll_vv-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsll_vv-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsll_vv-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsll_vv_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsll_vv_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsll_vv_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsll_vv_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsll_vv_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsll_vv_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsll_vv_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsll_vv_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsll_vv_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vsll_vv_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vsll_vv_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vsll_vv_tumu-3.C: New test.", "tree": {"sha": "b719299d95c21eead7672d546026b77be4d52efb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b719299d95c21eead7672d546026b77be4d52efb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/147e602a4ddd342523eddb419b602fdc732a3897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/147e602a4ddd342523eddb419b602fdc732a3897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/147e602a4ddd342523eddb419b602fdc732a3897", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/147e602a4ddd342523eddb419b602fdc732a3897/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38e152f84b0667410a298cd487c38b70f7443c01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e152f84b0667410a298cd487c38b70f7443c01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e152f84b0667410a298cd487c38b70f7443c01"}], "stats": {"total": 5238, "additions": 5238, "deletions": 0}, "files": [{"sha": "d9bf605cf95f5b01bd32aa90013033925c49beee", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsll_vv-1.C", "status": "added", "additions": 578, "deletions": 0, "changes": 578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv-1.C?ref=147e602a4ddd342523eddb419b602fdc732a3897", "patch": "@@ -0,0 +1,578 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll(vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll(vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll(vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll(vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll(vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll(vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll(vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll(vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll(vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll(vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll(vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll(vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll(vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll(vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll(vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll(vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll(vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll(vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll(vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll(vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll(vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll(vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll(vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll(vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll(vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll(vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll(vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll(vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll(vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll(vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll(vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll(vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll(vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll(vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll(vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll(vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll(vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll(vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll(vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll(vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll(vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll(vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll(vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll(vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vsll(vbool64_t mask,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll(vbool32_t mask,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll(vbool16_t mask,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll(vbool8_t mask,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll(vbool4_t mask,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll(vbool2_t mask,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll(vbool1_t mask,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll(vbool64_t mask,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll(vbool32_t mask,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll(vbool16_t mask,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll(vbool8_t mask,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll(vbool4_t mask,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll(vbool2_t mask,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll(vbool64_t mask,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll(vbool32_t mask,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll(vbool16_t mask,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll(vbool8_t mask,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll(vbool4_t mask,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll(vbool64_t mask,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll(vbool32_t mask,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll(vbool16_t mask,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll(vbool8_t mask,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll(vbool8_t mask,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll(vbool4_t mask,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll(vbool2_t mask,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll(vbool1_t mask,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll(vbool16_t mask,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll(vbool8_t mask,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll(vbool4_t mask,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll(vbool2_t mask,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll(vbool32_t mask,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll(vbool16_t mask,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll(vbool8_t mask,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll(vbool4_t mask,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll(vbool64_t mask,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll(vbool32_t mask,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll(vbool16_t mask,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll(vbool8_t mask,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "093c507c5861650b1968ab286a43c9822b76f4b4", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsll_vv-2.C", "status": "added", "additions": 578, "deletions": 0, "changes": 578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv-2.C?ref=147e602a4ddd342523eddb419b602fdc732a3897", "patch": "@@ -0,0 +1,578 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll(vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll(vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll(vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll(vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll(vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll(vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll(vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll(vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll(vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll(vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll(vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll(vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll(vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll(vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll(vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll(vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll(vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll(vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll(vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll(vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll(vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll(vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll(vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll(vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll(vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll(vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll(vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll(vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll(vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll(vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll(vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll(vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll(vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll(vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll(vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll(vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll(vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll(vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll(vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll(vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll(vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll(vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll(vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll(vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vsll(vbool64_t mask,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll(vbool32_t mask,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll(vbool16_t mask,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll(vbool8_t mask,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll(vbool4_t mask,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll(vbool2_t mask,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll(vbool1_t mask,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll(vbool64_t mask,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll(vbool32_t mask,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll(vbool16_t mask,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll(vbool8_t mask,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll(vbool4_t mask,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll(vbool2_t mask,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll(vbool64_t mask,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll(vbool32_t mask,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll(vbool16_t mask,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll(vbool8_t mask,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll(vbool4_t mask,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll(vbool64_t mask,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll(vbool32_t mask,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll(vbool16_t mask,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll(vbool8_t mask,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll(vbool8_t mask,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll(vbool4_t mask,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll(vbool2_t mask,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll(vbool1_t mask,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll(vbool16_t mask,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll(vbool8_t mask,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll(vbool4_t mask,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll(vbool2_t mask,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll(vbool32_t mask,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll(vbool16_t mask,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll(vbool8_t mask,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll(vbool4_t mask,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll(vbool64_t mask,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll(vbool32_t mask,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll(vbool16_t mask,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll(vbool8_t mask,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "16034a7d70ff836b6ffe8dfc124943fbc4cc2f9e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsll_vv-3.C", "status": "added", "additions": 578, "deletions": 0, "changes": 578, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv-3.C?ref=147e602a4ddd342523eddb419b602fdc732a3897", "patch": "@@ -0,0 +1,578 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll(vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll(vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll(vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll(vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll(vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll(vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll(vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll(vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll(vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll(vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll(vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll(vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll(vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll(vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll(vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll(vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll(vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll(vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll(vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll(vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll(vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll(vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll(vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll(vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll(vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll(vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll(vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll(vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll(vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll(vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll(vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll(vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll(vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll(vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll(vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll(vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll(vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll(vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll(vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll(vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll(vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll(vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll(vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll(vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(op1,shift,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vsll(vbool64_t mask,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll(vbool32_t mask,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll(vbool16_t mask,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll(vbool8_t mask,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll(vbool4_t mask,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll(vbool2_t mask,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll(vbool1_t mask,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll(vbool64_t mask,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll(vbool32_t mask,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll(vbool16_t mask,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll(vbool8_t mask,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll(vbool4_t mask,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll(vbool2_t mask,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll(vbool64_t mask,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll(vbool32_t mask,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll(vbool16_t mask,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll(vbool8_t mask,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll(vbool4_t mask,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll(vbool64_t mask,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll(vbool32_t mask,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll(vbool16_t mask,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll(vbool8_t mask,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll(vbool64_t mask,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll(vbool32_t mask,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll(vbool16_t mask,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll(vbool8_t mask,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll(vbool4_t mask,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll(vbool2_t mask,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll(vbool1_t mask,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll(vbool64_t mask,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll(vbool32_t mask,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll(vbool16_t mask,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll(vbool8_t mask,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll(vbool4_t mask,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll(vbool2_t mask,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll(vbool64_t mask,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll(vbool32_t mask,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll(vbool16_t mask,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll(vbool8_t mask,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll(vbool4_t mask,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll(vbool64_t mask,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll(vbool32_t mask,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll(vbool16_t mask,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll(vbool8_t mask,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll(mask,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "985b32eeff04474d01b648c4c05c3c8795feb04a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsll_vv_mu-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_mu-1.C?ref=147e602a4ddd342523eddb419b602fdc732a3897", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "b98914d670558d04ccd3e8c18ab329d8b14def9b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsll_vv_mu-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_mu-2.C?ref=147e602a4ddd342523eddb419b602fdc732a3897", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "b366021c9c6043bfaeeb77ea8a7e41ff8301ba82", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsll_vv_mu-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_mu-3.C?ref=147e602a4ddd342523eddb419b602fdc732a3897", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_mu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_mu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_mu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_mu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_mu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_mu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_mu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_mu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_mu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_mu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_mu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_mu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_mu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_mu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_mu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_mu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_mu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_mu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_mu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_mu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_mu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_mu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_mu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_mu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_mu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_mu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_mu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_mu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_mu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_mu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_mu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_mu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_mu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_mu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_mu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_mu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_mu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_mu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_mu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_mu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_mu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_mu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_mu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_mu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "f050a64151b6f787fcdef70e9710854147709c01", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsll_vv_tu-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tu-1.C?ref=147e602a4ddd342523eddb419b602fdc732a3897", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_tu(vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_tu(vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_tu(vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_tu(vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_tu(vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_tu(vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_tu(vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_tu(vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_tu(vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_tu(vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_tu(vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_tu(vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_tu(vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_tu(vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_tu(vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_tu(vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_tu(vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_tu(vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_tu(vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_tu(vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_tu(vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_tu(vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "388ed649231cea850d3729ceea06ee8b7045c32f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsll_vv_tu-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tu-2.C?ref=147e602a4ddd342523eddb419b602fdc732a3897", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_tu(vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_tu(vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_tu(vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_tu(vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_tu(vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_tu(vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_tu(vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_tu(vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_tu(vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_tu(vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_tu(vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_tu(vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_tu(vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_tu(vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_tu(vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_tu(vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_tu(vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_tu(vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_tu(vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_tu(vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_tu(vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_tu(vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "e117f63826b1798c7b05b3a95478cf58efee5640", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsll_vv_tu-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tu-3.C?ref=147e602a4ddd342523eddb419b602fdc732a3897", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_tu(vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_tu(vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_tu(vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_tu(vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_tu(vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_tu(vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_tu(vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_tu(vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_tu(vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_tu(vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_tu(vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_tu(vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_tu(vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_tu(vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_tu(vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_tu(vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_tu(vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_tu(vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_tu(vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_tu(vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_tu(vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_tu(vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_tu(vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_tu(vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_tu(vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_tu(vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_tu(vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_tu(vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_tu(vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_tu(vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_tu(vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_tu(vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_tu(vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_tu(vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_tu(vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_tu(vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_tu(vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_tu(vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_tu(vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_tu(vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_tu(vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_tu(vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_tu(vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_tu(vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tu(merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 2 } } */"}, {"sha": "1a98a98e8b99c77461ed0fba69efc46a5a72a0d0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsll_vv_tum-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tum-1.C?ref=147e602a4ddd342523eddb419b602fdc732a3897", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "ab3dfa3902cf6bf0c600fb1ef8e536b8b41f6e3f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsll_vv_tum-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tum-2.C?ref=147e602a4ddd342523eddb419b602fdc732a3897", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "db3707f374e979db6d4200db3650e3467dda8aa3", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsll_vv_tum-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tum-3.C?ref=147e602a4ddd342523eddb419b602fdc732a3897", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_tum(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_tum(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_tum(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_tum(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_tum(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_tum(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_tum(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_tum(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_tum(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_tum(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_tum(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_tum(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_tum(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_tum(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_tum(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_tum(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_tum(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_tum(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_tum(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_tum(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_tum(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_tum(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_tum(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_tum(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_tum(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_tum(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_tum(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_tum(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_tum(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_tum(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_tum(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_tum(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_tum(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_tum(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_tum(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_tum(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_tum(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_tum(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_tum(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_tum(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_tum(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_tum(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_tum(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_tum(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "58aac8088ca49189576ea7be06f5dbc799dc5a99", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsll_vv_tumu-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tumu-1.C?ref=147e602a4ddd342523eddb419b602fdc732a3897", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "164fc1ad3b6996f06132bfa415057b3e82b2ced6", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsll_vv_tumu-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tumu-2.C?ref=147e602a4ddd342523eddb419b602fdc732a3897", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "d9eed7c01ee8b2819c7e2fecf3f6a66813897054", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vsll_vv_tumu-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/147e602a4ddd342523eddb419b602fdc732a3897/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvsll_vv_tumu-3.C?ref=147e602a4ddd342523eddb419b602fdc732a3897", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vsll_tumu(vbool64_t mask,vint8mf8_t merge,vint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vsll_tumu(vbool32_t mask,vint8mf4_t merge,vint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vsll_tumu(vbool16_t mask,vint8mf2_t merge,vint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vsll_tumu(vbool8_t mask,vint8m1_t merge,vint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vsll_tumu(vbool4_t mask,vint8m2_t merge,vint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vsll_tumu(vbool2_t mask,vint8m4_t merge,vint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vsll_tumu(vbool1_t mask,vint8m8_t merge,vint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vsll_tumu(vbool64_t mask,vint16mf4_t merge,vint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vsll_tumu(vbool32_t mask,vint16mf2_t merge,vint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vsll_tumu(vbool16_t mask,vint16m1_t merge,vint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vsll_tumu(vbool8_t mask,vint16m2_t merge,vint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vsll_tumu(vbool4_t mask,vint16m4_t merge,vint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vsll_tumu(vbool2_t mask,vint16m8_t merge,vint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vsll_tumu(vbool64_t mask,vint32mf2_t merge,vint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vsll_tumu(vbool32_t mask,vint32m1_t merge,vint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vsll_tumu(vbool16_t mask,vint32m2_t merge,vint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vsll_tumu(vbool8_t mask,vint32m4_t merge,vint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vsll_tumu(vbool4_t mask,vint32m8_t merge,vint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vsll_tumu(vbool64_t mask,vint64m1_t merge,vint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vsll_tumu(vbool32_t mask,vint64m2_t merge,vint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vsll_tumu(vbool16_t mask,vint64m4_t merge,vint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vsll_tumu(vbool8_t mask,vint64m8_t merge,vint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vsll_tumu(vbool64_t mask,vuint8mf8_t merge,vuint8mf8_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vsll_tumu(vbool32_t mask,vuint8mf4_t merge,vuint8mf4_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vsll_tumu(vbool16_t mask,vuint8mf2_t merge,vuint8mf2_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vsll_tumu(vbool8_t mask,vuint8m1_t merge,vuint8m1_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vsll_tumu(vbool4_t mask,vuint8m2_t merge,vuint8m2_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vsll_tumu(vbool2_t mask,vuint8m4_t merge,vuint8m4_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vsll_tumu(vbool1_t mask,vuint8m8_t merge,vuint8m8_t op1,vuint8m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vsll_tumu(vbool64_t mask,vuint16mf4_t merge,vuint16mf4_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vsll_tumu(vbool32_t mask,vuint16mf2_t merge,vuint16mf2_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vsll_tumu(vbool16_t mask,vuint16m1_t merge,vuint16m1_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vsll_tumu(vbool8_t mask,vuint16m2_t merge,vuint16m2_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vsll_tumu(vbool4_t mask,vuint16m4_t merge,vuint16m4_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vsll_tumu(vbool2_t mask,vuint16m8_t merge,vuint16m8_t op1,vuint16m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vsll_tumu(vbool64_t mask,vuint32mf2_t merge,vuint32mf2_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vsll_tumu(vbool32_t mask,vuint32m1_t merge,vuint32m1_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vsll_tumu(vbool16_t mask,vuint32m2_t merge,vuint32m2_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vsll_tumu(vbool8_t mask,vuint32m4_t merge,vuint32m4_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vsll_tumu(vbool4_t mask,vuint32m8_t merge,vuint32m8_t op1,vuint32m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vsll_tumu(vbool64_t mask,vuint64m1_t merge,vuint64m1_t op1,vuint64m1_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vsll_tumu(vbool32_t mask,vuint64m2_t merge,vuint64m2_t op1,vuint64m2_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vsll_tumu(vbool16_t mask,vuint64m4_t merge,vuint64m4_t op1,vuint64m4_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vsll_tumu(vbool8_t mask,vuint64m8_t merge,vuint64m8_t op1,vuint64m8_t shift,size_t vl)\n+{\n+    return __riscv_vsll_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vsll\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 2 } } */"}]}