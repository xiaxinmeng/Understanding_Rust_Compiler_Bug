{"sha": "f7d6961126a7f06c8089d8a58bd21be43bc16806", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdkNjk2MTEyNmE3ZjA2YzgwODlkOGE1OGJkMjFiZTQzYmMxNjgwNg==", "commit": {"author": {"name": "Dennis Zhang", "email": "denzha01@e124712.cambridge.arm.com", "date": "2020-11-03T13:00:51Z"}, "committer": {"name": "Dennis Zhang", "email": "denzha01@e124712.cambridge.arm.com", "date": "2020-11-03T13:00:51Z"}, "message": "aarch64: ACLE intrinsics convert BF16 to Float32\n\nThis patch enables intrinsics to convert BFloat16 scalar and vector\noperands to Float32 modes. The intrinsics are implemented by shifting\neach BFloat16 item 16 bits to left using shl/shll/shll2 instructions.\n\ngcc/ChangeLog:\n\n2020-11-03  Dennis Zhang  <dennis.zhang@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def(vbfcvt): New entry.\n\t(vbfcvt_high, bfcvt): Likewise.\n\t* config/aarch64/aarch64-simd.md(aarch64_vbfcvt<mode>): New entry.\n\t(aarch64_vbfcvt_highv8bf, aarch64_bfcvtsf): Likewise.\n\t* config/aarch64/arm_bf16.h (vcvtah_f32_bf16): New intrinsic.\n\t* config/aarch64/arm_neon.h (vcvt_f32_bf16): Likewise.\n\t(vcvtq_low_f32_bf16, vcvtq_high_f32_bf16): Likewise.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.target/aarch64/advsimd-intrinsics/bfcvt-compile.c\n\t(test_vcvt_f32_bf16, test_vcvtq_low_f32_bf16): New tests.\n\t(test_vcvtq_high_f32_bf16, test_vcvth_f32_bf16): Likewise.", "tree": {"sha": "f6ca6a1732decea47982001254f5e9df3572f9ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6ca6a1732decea47982001254f5e9df3572f9ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7d6961126a7f06c8089d8a58bd21be43bc16806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d6961126a7f06c8089d8a58bd21be43bc16806", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7d6961126a7f06c8089d8a58bd21be43bc16806", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d6961126a7f06c8089d8a58bd21be43bc16806/comments", "author": null, "committer": null, "parents": [{"sha": "9d1b813d0f7c9a8d80b0aee6eb1418b0afdf0f84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d1b813d0f7c9a8d80b0aee6eb1418b0afdf0f84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d1b813d0f7c9a8d80b0aee6eb1418b0afdf0f84"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "2ff5c4e76d1fe3bd89cfebb515a37e33799b6047", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d6961126a7f06c8089d8a58bd21be43bc16806/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d6961126a7f06c8089d8a58bd21be43bc16806/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7d6961126a7f06c8089d8a58bd21be43bc16806", "patch": "@@ -1,3 +1,13 @@\n+2020-11-03  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def(vbfcvt): New entry.\n+\t(vbfcvt_high, bfcvt): Likewise.\n+\t* config/aarch64/aarch64-simd.md(aarch64_vbfcvt<mode>): New entry.\n+\t(aarch64_vbfcvt_highv8bf, aarch64_bfcvtsf): Likewise.\n+\t* config/aarch64/arm_bf16.h (vcvtah_f32_bf16): New intrinsic.\n+\t* config/aarch64/arm_neon.h (vcvt_f32_bf16): Likewise.\n+\t(vcvtq_low_f32_bf16, vcvtq_high_f32_bf16): Likewise.\n+\n 2020-11-02  Alan Modra  <amodra@gmail.com>\n \n \tPR middle-end/97267"}, {"sha": "f494b535a30563da03d3f16d7dfa3f346b3b726a", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d6961126a7f06c8089d8a58bd21be43bc16806/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d6961126a7f06c8089d8a58bd21be43bc16806/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=f7d6961126a7f06c8089d8a58bd21be43bc16806", "patch": "@@ -732,3 +732,8 @@\n   VAR1 (UNOP, bfcvtn_q, 0, FP, v8bf)\n   VAR1 (BINOP, bfcvtn2, 0, FP, v8bf)\n   VAR1 (UNOP, bfcvt, 0, FP, bf)\n+\n+  /* Implemented by aarch64_{v}bfcvt{_high}<mode>.  */\n+  VAR2 (UNOP, vbfcvt, 0, AUTO_FP, v4bf, v8bf)\n+  VAR1 (UNOP, vbfcvt_high, 0, AUTO_FP, v8bf)\n+  VAR1 (UNOP, bfcvt, 0, AUTO_FP, sf)"}, {"sha": "030a086d31c29ebbebef2b89a6430dc1547aad4b", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d6961126a7f06c8089d8a58bd21be43bc16806/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d6961126a7f06c8089d8a58bd21be43bc16806/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=f7d6961126a7f06c8089d8a58bd21be43bc16806", "patch": "@@ -7238,3 +7238,31 @@\n   \"bfcvt\\\\t%h0, %s1\"\n   [(set_attr \"type\" \"f_cvt\")]\n )\n+\n+;; Use shl/shll/shll2 to convert BF scalar/vector modes to SF modes.\n+(define_insn \"aarch64_vbfcvt<mode>\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+\t(unspec:V4SF [(match_operand:VBF 1 \"register_operand\" \"w\")]\n+\t\t      UNSPEC_BFCVTN))]\n+  \"TARGET_BF16_SIMD\"\n+  \"shll\\\\t%0.4s, %1.4h, #16\"\n+  [(set_attr \"type\" \"neon_shift_imm_long\")]\n+)\n+\n+(define_insn \"aarch64_vbfcvt_highv8bf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+\t(unspec:V4SF [(match_operand:V8BF 1 \"register_operand\" \"w\")]\n+\t\t      UNSPEC_BFCVTN2))]\n+  \"TARGET_BF16_SIMD\"\n+  \"shll2\\\\t%0.4s, %1.8h, #16\"\n+  [(set_attr \"type\" \"neon_shift_imm_long\")]\n+)\n+\n+(define_insn \"aarch64_bfcvtsf\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=w\")\n+\t(unspec:SF [(match_operand:BF 1 \"register_operand\" \"w\")]\n+\t\t    UNSPEC_BFCVT))]\n+  \"TARGET_BF16_FP\"\n+  \"shl\\\\t%d0, %d1, #16\"\n+  [(set_attr \"type\" \"neon_shift_imm\")]\n+)"}, {"sha": "881615498d3d52662d7ebb3ab1e8d52d5a40cab8", "filename": "gcc/config/aarch64/arm_bf16.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d6961126a7f06c8089d8a58bd21be43bc16806/gcc%2Fconfig%2Faarch64%2Farm_bf16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d6961126a7f06c8089d8a58bd21be43bc16806/gcc%2Fconfig%2Faarch64%2Farm_bf16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_bf16.h?ref=f7d6961126a7f06c8089d8a58bd21be43bc16806", "patch": "@@ -40,6 +40,13 @@ vcvth_bf16_f32 (float32_t __a)\n   return __builtin_aarch64_bfcvtbf (__a);\n }\n \n+__extension__ extern __inline float32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vcvtah_f32_bf16 (bfloat16_t __a)\n+{\n+  return __builtin_aarch64_bfcvtsf (__a);\n+}\n+\n #pragma GCC pop_options\n \n #endif"}, {"sha": "69cccd3278642814f3961c5bf52be5639f5ef3f3", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d6961126a7f06c8089d8a58bd21be43bc16806/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d6961126a7f06c8089d8a58bd21be43bc16806/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=f7d6961126a7f06c8089d8a58bd21be43bc16806", "patch": "@@ -35680,6 +35680,27 @@ vbfmlaltq_laneq_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x8_t __b,\n   return __builtin_aarch64_bfmlalt_lane_qv4sf (__r, __a, __b, __index);\n }\n \n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vcvt_f32_bf16 (bfloat16x4_t __a)\n+{\n+  return __builtin_aarch64_vbfcvtv4bf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vcvtq_low_f32_bf16 (bfloat16x8_t __a)\n+{\n+  return __builtin_aarch64_vbfcvtv8bf (__a);\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vcvtq_high_f32_bf16 (bfloat16x8_t __a)\n+{\n+  return __builtin_aarch64_vbfcvt_highv8bf (__a);\n+}\n+\n __extension__ extern __inline bfloat16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcvt_bf16_f32 (float32x4_t __a)"}, {"sha": "a7bbb1bd1819ccc2ab697db7d412a38968c21857", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d6961126a7f06c8089d8a58bd21be43bc16806/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d6961126a7f06c8089d8a58bd21be43bc16806/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f7d6961126a7f06c8089d8a58bd21be43bc16806", "patch": "@@ -1,3 +1,9 @@\n+2020-11-03  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/bfcvt-compile.c\n+\t(test_vcvt_f32_bf16, test_vcvtq_low_f32_bf16): New tests.\n+\t(test_vcvtq_high_f32_bf16, test_vcvth_f32_bf16): Likewise.\n+\t\n 2020-11-02  Alan Modra  <amodra@gmail.com>\n \n \tPR middle-end/97267"}, {"sha": "47af7c494d9b9d1f4b63e802efc293348a40e270", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bfcvt-compile.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d6961126a7f06c8089d8a58bd21be43bc16806/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvt-compile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d6961126a7f06c8089d8a58bd21be43bc16806/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvt-compile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbfcvt-compile.c?ref=f7d6961126a7f06c8089d8a58bd21be43bc16806", "patch": "@@ -46,3 +46,43 @@ bfloat16_t test_bfcvt (float32_t a)\n {\n   return vcvth_bf16_f32 (a);\n }\n+\n+/*\n+**test_vcvt_f32_bf16:\n+**     shll\tv0.4s, v0.4h, #16\n+**     ret\n+*/\n+float32x4_t test_vcvt_f32_bf16 (bfloat16x4_t a)\n+{\n+  return vcvt_f32_bf16 (a);\n+}\n+\n+/*\n+**test_vcvtq_low_f32_bf16:\n+**     shll\tv0.4s, v0.4h, #16\n+**     ret\n+*/\n+float32x4_t test_vcvtq_low_f32_bf16 (bfloat16x8_t a)\n+{\n+  return vcvtq_low_f32_bf16 (a);\n+}\n+\n+/*\n+**test_vcvtq_high_f32_bf16:\n+**     shll2\tv0.4s, v0.8h, #16\n+**     ret\n+*/\n+float32x4_t test_vcvtq_high_f32_bf16 (bfloat16x8_t a)\n+{\n+  return vcvtq_high_f32_bf16 (a);\n+}\n+\n+/*\n+**test_vcvtah_f32_bf16:\n+**     shl\td0, d0, #16\n+**     ret\n+*/\n+float32_t test_vcvtah_f32_bf16 (bfloat16_t a)\n+{\n+  return vcvtah_f32_bf16 (a);\n+}"}]}