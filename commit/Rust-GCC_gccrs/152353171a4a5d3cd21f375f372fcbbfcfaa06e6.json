{"sha": "152353171a4a5d3cd21f375f372fcbbfcfaa06e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUyMzUzMTcxYTRhNWQzY2QyMWYzNzVmMzcyZmNiYmZjZmFhMDZlNg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2001-01-23T02:48:27Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-01-23T02:48:27Z"}, "message": "libstdc++.exp: Improve.\n\n        * testsuite/lib/libstdc++.exp: Improve.  Add support for @xxx#\n        keyword capability.\n\n        * testsuite/README: Add comment.\n\nFrom-SVN: r39192", "tree": {"sha": "e9ff6cd5a1f39292b94508079153a266e433a8b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9ff6cd5a1f39292b94508079153a266e433a8b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/152353171a4a5d3cd21f375f372fcbbfcfaa06e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152353171a4a5d3cd21f375f372fcbbfcfaa06e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/152353171a4a5d3cd21f375f372fcbbfcfaa06e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/152353171a4a5d3cd21f375f372fcbbfcfaa06e6/comments", "author": null, "committer": null, "parents": [{"sha": "56c1d2ee9b2497144c74bfdf0e9992d08c1a1fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c1d2ee9b2497144c74bfdf0e9992d08c1a1fb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56c1d2ee9b2497144c74bfdf0e9992d08c1a1fb6"}], "stats": {"total": 115, "additions": 99, "deletions": 16}, "files": [{"sha": "8ad480a025514111cee9237e7d9eca955516105a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152353171a4a5d3cd21f375f372fcbbfcfaa06e6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152353171a4a5d3cd21f375f372fcbbfcfaa06e6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=152353171a4a5d3cd21f375f372fcbbfcfaa06e6", "patch": "@@ -1,3 +1,10 @@\n+2001-01-23  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* testsuite/lib/libstdc++.exp: Improve.  Add support for @xxx#\n+\tkeyword capability.\n+\n+\t* testsuite/README: Add comment.\n+\n 2001-01-21  Phil Edwards  <pme@sources.redhat.com>\n \n \t* docs/html/configopts.html:  Update for current status.  Fix HTML."}, {"sha": "7f32c8c59893323054c982ab3a1d109cf6f88585", "filename": "libstdc++-v3/testsuite/README", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152353171a4a5d3cd21f375f372fcbbfcfaa06e6/libstdc%2B%2B-v3%2Ftestsuite%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152353171a4a5d3cd21f375f372fcbbfcfaa06e6/libstdc%2B%2B-v3%2Ftestsuite%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FREADME?ref=152353171a4a5d3cd21f375f372fcbbfcfaa06e6", "patch": "@@ -6,4 +6,20 @@ use the new style DejaGnu framework.  Eventually, we'll abandon\n what to do and what kind of behaviour are to be expected.  New\n testsuite should be written with the new style DejaGnu framework in mind.\n \n+  The V3 testing framework supports additional keywords for the purpose\n+of easing the job of writing testcases.  All V3-keywords are of the\n+form @xxx@.  Currently supported keywords include:\n+\n+  @require@ <files>\n+      The existence of <files> is essential for the test to complete\n+      successfully.  For example, a testcase foo.C using bar.baz as\n+      input file could say\n+\t    // @require@ bar.baz\n+      The special variable % stands for the rootname, e.g. the\n+      file-name without its `.C' extension.  Example of use (taken\n+      verbatim from 27_io/filebuf.cc)\n+\t   // @require@ %-*.tst %-*.txt\n+\n+  @diff@ <first-list> <second-list>\n+\n -- Gaby"}, {"sha": "f9706ba1db332e45ddc65fa5a98592e4d0f630bf", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 76, "deletions": 16, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/152353171a4a5d3cd21f375f372fcbbfcfaa06e6/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/152353171a4a5d3cd21f375f372fcbbfcfaa06e6/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=152353171a4a5d3cd21f375f372fcbbfcfaa06e6", "patch": "@@ -32,6 +32,9 @@\n ##    lib_env(LIBTOOL):\n ##    lib_env(SRC_DIR):\n ##    lib_env(BUILD_DIR):\n+##    lib_env(static):\n+##    lib_env(shared):\n+##    lib_env(testcase_options):\n \n load_lib dg.exp\n \n@@ -52,13 +55,8 @@ proc libstdc++-dg-init { args } {\n     # Set proper environment variables for the framework.\n     libstdc++-setup-flags ${src-dir} ${build-dir}\n     \n-    # FIXME: Is this necessary?  Isn't the framework supposed to\n-    #        do this for us?\n-    file delete -force $outdir/*.exe\n-    file delete -force $outdir/*core*\n-    \n     # mkcheck.in used to output these information.  Maybe we should\n-    # abandon that practice and define proper libstdc++_version and such.\n+    # abandon that practice.\n     set output [remote_exec host $lib_env(CXX) -v]\n     if { [lindex $output 0] == 0 } {\n \tset output [lindex $output 1]\n@@ -72,12 +70,28 @@ proc libstdc++-dg-init { args } {\n }\n \n ## dg.exp callback.  Called from dg-test to run PROGRAM images.\n-## Normally, we would have left this job to ${tool}_load \n-## (from standard.exp) but because we use surrogate to run programs,\n-##  we have to do this ourseleves.\n proc libstdc++_load { prog } {\n     global lib_env\n-    return [remote_load target $lib_env(LIBTOOL) \"--mode=execute $prog\"]\n+    set opts $lib_env(testcase_options)\n+    set results [remote_load target $lib_env(LIBTOOL) \"--mode=execute $prog\"]\n+\n+    if { [lindex $results 0] == \"pass\" && [info exists opts(diff)] } {\n+\t# FIXME: We should first test for any mentioned output file here\n+\t#        before taking any other action.\n+\n+\tset firsts [glob -nocomplain [lindex $opts(diff) 0]]\n+\tset seconds [glob -nocomplain [lindex $opts(diff) 1]]\n+\tforeach f $firsts s $seconds {\n+\t    if { [diff $f $s] == 0 } {\n+\t\t# FIXME: Well we should report a message.  But for the time\n+\t\t#        being, just pretend, there is nothing much to say.\n+\t\t#        Yes, that is silly, I know.  But we need, first, to\n+\t\t#        to have a working framework.\n+\t\tbreak\n+\t    }\n+\t}\n+    }\n+    return $results\n }\n \n ## Nothing particular to do.\n@@ -108,6 +122,7 @@ proc libstdc++_runtest { testdirs } {\n     global srcdir\n     global outdir\n \n+    set top-tests-dir [pwd]\n     foreach d $testdirs {\n \tset testfiles [glob -nocomplain $d/*.C $d/*.cc]\n \tif { [llength $testfiles] == 0 } {\n@@ -118,7 +133,8 @@ proc libstdc++_runtest { testdirs } {\n \t# to keep libtool happy.\n \tset td \"$outdir/[dg-trim-dirname $srcdir $d]\"\n \tmaybe-make-directory $td\n-\tmaybe-make-directory $td/.lib\n+\tmaybe-make-directory $td/.libs\n+\tcd $td;\n \n \tforeach testfile $testfiles {\n \t    # We're not supposed to test this file, just skip it.\n@@ -130,6 +146,7 @@ proc libstdc++_runtest { testdirs } {\n \t    libstdc++_do_test $testfile static\n \t    libstdc++_do_test $testfile shared\n \t}\n+\tcd ${top-tests-dir}\n     }\n }\n \n@@ -154,7 +171,8 @@ proc libstdc++-dg-test { testfile compile_type additional-options } {\n     set lt $lib_env(LIBTOOL)\n     set lt_args \"--tag=CXX\"\n     \n-    set output_file $outdir/[dg-trim-dirname $srcdir [file rootname $testfile]]\n+    libstdc++-process-options $testfile\n+    set output_file [file rootname [file tail $testfile]]\n     switch $compile_type {\n \t\"preprocess\" {\n \t    set lt $lib_env(CXX)\n@@ -213,8 +231,8 @@ proc libstdc++-setup-flags {src-dir build-dir} {\n \tset lib_env(INCLUDES) [lindex $flags 5]\n \tset lib_env(LDFLAGS) [lindex $flags 6]\n \t\n-\t# This is really really fragile.  We should find away to\n-\t# tell which flags to use for static/libraries.\n+\t# This is really really fragile.  We should find a better away to\n+\t# tell the framework which flags to use for static/shared libraries.\n \tset lib_env(static) \"-static\"\n \tset lib_env(shared) \"\"\n \n@@ -229,12 +247,54 @@ proc libstdc++-setup-flags {src-dir build-dir} {\n \n proc maybe-make-directory {dir} {\n     if {![file isdirectory $dir]} {\n-\tverbose \"Making directory $dir\" 2\n \tfile mkdir $dir\n     }\n }\n \n proc libstdc++_do_test { testfile lib } {\n     global which_library; set which_library $lib\n-    dg-test $testfile \"\" \"\"\n+    dg-test -keep-output $testfile \"\" \"\"\n+}\n+\n+## Process @xxx@ options.\n+proc libstdc++-process-options { testfile } {\n+    global lib_env\n+\n+    array set opts { diff {} output {} require {} }\n+    set percent [file rootname [file tail $testfile]]\n+    set option-pattern \"@.*@.*\"\n+    set results [grep $testfile ${option-pattern}]\n+\n+    if ![string match \"\" $results] {\n+\tforeach o $results {\n+\t    regexp \"@(.*)@(.*)\" $o o key value\n+\t    regsub -all \"%\" $value \"$percent\" value\n+\n+\t    # Not yet supported: keep-output, output, link-against\n+\t    switch $key {\n+\t\t\"diff\" -\n+\t\t\"keep-output\" -\n+\t\t\"link-against\" -\n+\t\t\"output\" -\n+\t\t\"require\" { }\n+\t\tdefault {\n+\t\t    perror \"libstdc++: Invalid option-specification `$o'\"\n+\t\t}\n+\t    }\n+\t    set opts($key) $value \n+\t    unset key value\n+\t}\n+    }\n+    set lib_env(testcase_options) [array get opts]\n+    \n+    # copy any required data files.\n+    if ![string match \"\" $opts(require)] {\n+\tset src [file dirname $testfile]\n+\tset dst [pwd]\n+\tforeach f $opts(require) {\n+\t    foreach t [glob -nocomplain \"$src/$f\"] {\n+\t\tfile copy -force $t $dst\n+\t    }\n+\t}\n+    }\n }"}]}