{"sha": "0321d9fac6eff34ef1cd91610a59070d0e9ff54d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMyMWQ5ZmFjNmVmZjM0ZWYxY2Q5MTYxMGE1OTA3MGQwZTlmZjU0ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-10-30T14:49:43Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-10-30T14:49:43Z"}, "message": "PR libstdc++/87809 avoid invalid expressions in exception specifications\n\nIf the allocator isn't default constructible then checking if the\ndefault constructor throws in an exception specification makes the\ndeclaration invalid. Use the type trait instead.\n\n\tPR libstdc++/87809\n\t* include/bits/forward_list.h (_Fwd_list_impl::_Fwd_list_impl()): Use\n\ttrait in exception-specification instead of possibly invalid\n\texpression.\n\t* include/bits/stl_bvector.h (_Bvector_impl::_Bvector_impl()):\n\tLikewise.\n\t* include/bits/stl_list.h (_List_impl::_List_impl()): Likewise.\n\t* include/bits/stl_vector.h (_Vector_impl::_Vector_impl()): Likewise.\n\t* testsuite/23_containers/forward_list/cons/87809.cc: New test.\n\t* testsuite/23_containers/list/cons/87809.cc: New test.\n\t* testsuite/23_containers/vector/bool/cons/87809.cc: New test.\n\t* testsuite/23_containers/vector/cons/87809.cc: New test.\n\nFrom-SVN: r265626", "tree": {"sha": "d7ef8e75bc61515acd3feda3aad3d0beb6ae3d77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7ef8e75bc61515acd3feda3aad3d0beb6ae3d77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0321d9fac6eff34ef1cd91610a59070d0e9ff54d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0321d9fac6eff34ef1cd91610a59070d0e9ff54d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0321d9fac6eff34ef1cd91610a59070d0e9ff54d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c397f267f1d0e8ea286904bc5543829b558e154f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c397f267f1d0e8ea286904bc5543829b558e154f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c397f267f1d0e8ea286904bc5543829b558e154f"}], "stats": {"total": 193, "additions": 188, "deletions": 5}, "files": [{"sha": "5dc4295a1f697f563d101c17af58ff65b47cd3e9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0321d9fac6eff34ef1cd91610a59070d0e9ff54d", "patch": "@@ -1,5 +1,18 @@\n 2018-10-30  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/87809\n+\t* include/bits/forward_list.h (_Fwd_list_impl::_Fwd_list_impl()): Use\n+\ttrait in exception-specification instead of possibly invalid\n+\texpression.\n+\t* include/bits/stl_bvector.h (_Bvector_impl::_Bvector_impl()):\n+\tLikewise.\n+\t* include/bits/stl_list.h (_List_impl::_List_impl()): Likewise.\n+\t* include/bits/stl_vector.h (_Vector_impl::_Vector_impl()): Likewise.\n+\t* testsuite/23_containers/forward_list/cons/87809.cc: New test.\n+\t* testsuite/23_containers/list/cons/87809.cc: New test.\n+\t* testsuite/23_containers/vector/bool/cons/87809.cc: New test.\n+\t* testsuite/23_containers/vector/cons/87809.cc: New test.\n+\n \tPR libstdc++/87784\n \t* include/tr2/dynamic_bitset (dynamic_bitset::push_back): When there\n \tare no unused bits in the last block, append a new block with the"}, {"sha": "1d01a54721b5b794fe56c282e9c11cfc5ea401c7", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=0321d9fac6eff34ef1cd91610a59070d0e9ff54d", "patch": "@@ -293,7 +293,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t_Fwd_list_node_base _M_head;\n \n \t_Fwd_list_impl()\n-\t  noexcept( noexcept(_Node_alloc_type()) )\n+\t  noexcept(is_nothrow_default_constructible<_Node_alloc_type>::value)\n \t: _Node_alloc_type(), _M_head()\n \t{ }\n "}, {"sha": "3752897272f2e009f60c368114874b57a6a66aa9", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=0321d9fac6eff34ef1cd91610a59070d0e9ff54d", "patch": "@@ -473,8 +473,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t: public _Bit_alloc_type, public _Bvector_impl_data\n \t{\n \tpublic:\n-\t  _Bvector_impl()\n-\t    _GLIBCXX_NOEXCEPT_IF( noexcept(_Bit_alloc_type()) )\n+\t  _Bvector_impl() _GLIBCXX_NOEXCEPT_IF(\n+\t\tis_nothrow_default_constructible<_Bit_alloc_type>::value)\n \t  : _Bit_alloc_type()\n \t  { }\n "}, {"sha": "cb8aa88d5485ffb6eaf6d73289327192d525d731", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=0321d9fac6eff34ef1cd91610a59070d0e9ff54d", "patch": "@@ -372,7 +372,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       {\n \t__detail::_List_node_header _M_node;\n \n-\t_List_impl() _GLIBCXX_NOEXCEPT_IF( noexcept(_Node_alloc_type()) )\n+\t_List_impl() _GLIBCXX_NOEXCEPT_IF(\n+\t    is_nothrow_default_constructible<_Node_alloc_type>::value)\n \t: _Node_alloc_type()\n \t{ }\n "}, {"sha": "05f9b7ef6c3ace8ed20a953044f364240565cb6a", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=0321d9fac6eff34ef1cd91610a59070d0e9ff54d", "patch": "@@ -125,7 +125,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       struct _Vector_impl\n \t: public _Tp_alloc_type, public _Vector_impl_data\n       {\n-\t_Vector_impl() _GLIBCXX_NOEXCEPT_IF( noexcept(_Tp_alloc_type()) )\n+\t_Vector_impl() _GLIBCXX_NOEXCEPT_IF(\n+\t    is_nothrow_default_constructible<_Tp_alloc_type>::value)\n \t: _Tp_alloc_type()\n \t{ }\n "}, {"sha": "cde9dfff3e09ed68eeca3c318f9a95df5b1deb21", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/cons/87809.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F87809.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F87809.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fcons%2F87809.cc?ref=0321d9fac6eff34ef1cd91610a59070d0e9ff54d", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <forward_list>\n+\n+template <typename T>\n+struct Alloc\n+{\n+  using value_type = T;\n+\n+  T* allocate(unsigned n);\n+  void deallocate(T* p, unsigned n);\n+\n+  Alloc(int) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+template<typename T, typename U>\n+  bool operator==(Alloc<T>, Alloc<U>) { return true; }\n+template<typename T, typename U>\n+  bool operator!=(Alloc<T>, Alloc<U>) { return false; }\n+\n+constexpr bool b\n+  = std::is_default_constructible<std::forward_list<bool, Alloc<bool>>>::value;"}, {"sha": "d7c5256b62c71a341d8b7b9302cd438eff4bf14f", "filename": "libstdc++-v3/testsuite/23_containers/list/cons/87809.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F87809.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F87809.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fcons%2F87809.cc?ref=0321d9fac6eff34ef1cd91610a59070d0e9ff54d", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <list>\n+\n+template <typename T>\n+struct Alloc\n+{\n+  using value_type = T;\n+\n+  T* allocate(unsigned n);\n+  void deallocate(T* p, unsigned n);\n+\n+  Alloc(int) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+template<typename T, typename U>\n+  bool operator==(Alloc<T>, Alloc<U>) { return true; }\n+template<typename T, typename U>\n+  bool operator!=(Alloc<T>, Alloc<U>) { return false; }\n+\n+constexpr bool b\n+  = std::is_default_constructible<std::list<bool, Alloc<bool>>>::value;"}, {"sha": "b697abe5658ec0a1d50e442df2eddb67a99e643d", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/cons/87809.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcons%2F87809.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcons%2F87809.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Fcons%2F87809.cc?ref=0321d9fac6eff34ef1cd91610a59070d0e9ff54d", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <vector>\n+\n+template <typename T>\n+struct Alloc\n+{\n+  using value_type = T;\n+\n+  T* allocate(unsigned n);\n+  void deallocate(T* p, unsigned n);\n+\n+  Alloc(int) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+template<typename T, typename U>\n+  bool operator==(Alloc<T>, Alloc<U>) { return true; }\n+template<typename T, typename U>\n+  bool operator!=(Alloc<T>, Alloc<U>) { return false; }\n+\n+constexpr bool b\n+  = std::is_default_constructible<std::vector<bool, Alloc<bool>>>::value;"}, {"sha": "07199339b14af4cfba84aaf08a5ad764116f275b", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/87809.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F87809.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0321d9fac6eff34ef1cd91610a59070d0e9ff54d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F87809.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F87809.cc?ref=0321d9fac6eff34ef1cd91610a59070d0e9ff54d", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <vector>\n+\n+template <typename T>\n+struct Alloc\n+{\n+  using value_type = T;\n+\n+  T* allocate(unsigned n);\n+  void deallocate(T* p, unsigned n);\n+\n+  Alloc(int) { }\n+\n+  template<typename U>\n+    Alloc(const Alloc<U>&) { }\n+};\n+\n+template<typename T, typename U>\n+  bool operator==(Alloc<T>, Alloc<U>) { return true; }\n+template<typename T, typename U>\n+  bool operator!=(Alloc<T>, Alloc<U>) { return false; }\n+\n+constexpr bool b\n+  = std::is_default_constructible<std::vector<int, Alloc<int>>>::value;"}]}