{"sha": "53b10ce9218f53b3a0b139133cf95ab31c7cc344", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNiMTBjZTkyMThmNTNiM2EwYjEzOTEzM2NmOTVhYjMxYzdjYzM0NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-29T08:44:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-29T08:44:57Z"}, "message": "[multiple changes]\n\n2009-07-29  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Check_Overriding_Indicator): Handle properly overriding\n\tindicators on user-defined operators.\n\n2009-07-29  Vadim Godunko  <godunko@adacore.com>\n\n\t* g-socket.adb (Receive_Vector): Add comment.\n\nFrom-SVN: r150200", "tree": {"sha": "5132758753fbdd07c1d9fccc2491af12722a4dad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5132758753fbdd07c1d9fccc2491af12722a4dad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53b10ce9218f53b3a0b139133cf95ab31c7cc344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b10ce9218f53b3a0b139133cf95ab31c7cc344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53b10ce9218f53b3a0b139133cf95ab31c7cc344", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53b10ce9218f53b3a0b139133cf95ab31c7cc344/comments", "author": null, "committer": null, "parents": [{"sha": "d06b3b1df80df172c0887e97ca5ad53e808a99e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d06b3b1df80df172c0887e97ca5ad53e808a99e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d06b3b1df80df172c0887e97ca5ad53e808a99e1"}], "stats": {"total": 108, "additions": 69, "deletions": 39}, "files": [{"sha": "d2f86f65a96a8593fd0f8484c7ffe1086f8efa10", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b10ce9218f53b3a0b139133cf95ab31c7cc344/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b10ce9218f53b3a0b139133cf95ab31c7cc344/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=53b10ce9218f53b3a0b139133cf95ab31c7cc344", "patch": "@@ -1,3 +1,12 @@\n+2009-07-29  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Overriding_Indicator): Handle properly overriding\n+\tindicators on user-defined operators.\n+\n+2009-07-29  Vadim Godunko  <godunko@adacore.com>\n+\n+\t* g-socket.adb (Receive_Vector): Add comment.\n+\n 2009-07-29  Javier Miranda  <miranda@adacore.com>\n \n \t* frontend.adb (Frontend): Code cleanup."}, {"sha": "90d36f6dc59c22ea52c1654cca8a00ccbc5c13c7", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b10ce9218f53b3a0b139133cf95ab31c7cc344/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b10ce9218f53b3a0b139133cf95ab31c7cc344/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=53b10ce9218f53b3a0b139133cf95ab31c7cc344", "patch": "@@ -1666,6 +1666,9 @@ package body GNAT.Sockets is\n                Msg_Iov        => Vector'Address,\n                Msg_Iovlen     =>\n                  SOSC.Msg_Iovlen_T'Min (Vector'Length, SOSC.IOV_MAX),\n+               --  recvmsg(2) returns EMSGSIZE on Linux (and probably on other\n+               --  platforms) when the supplied vector is longer than IOV_MAX,\n+               --  so use minimum of the two lengths.\n                Msg_Control    => System.Null_Address,\n                Msg_Controllen => 0,\n                Msg_Flags      => 0);"}, {"sha": "c72b3137ef84d52672145c8b46fe52dbb5603957", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 57, "deletions": 39, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53b10ce9218f53b3a0b139133cf95ab31c7cc344/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53b10ce9218f53b3a0b139133cf95ab31c7cc344/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=53b10ce9218f53b3a0b139133cf95ab31c7cc344", "patch": "@@ -4375,6 +4375,13 @@ package body Sem_Ch6 is\n       elsif Ekind (Subp) = E_Entry then\n          Decl := Parent (Subp);\n \n+         --  No point in analyzing a malformed operator\n+\n+      elsif Nkind (Subp) = N_Defining_Operator_Symbol\n+        and then Error_Posted (Subp)\n+      then\n+         return;\n+\n       else\n          Decl := Unit_Declaration_Node (Subp);\n       end if;\n@@ -4476,7 +4483,8 @@ package body Sem_Ch6 is\n             Style.Missing_Overriding (Decl, Subp);\n          end if;\n \n-      --  If Subp is an operator, it may override a predefined operation.\n+      --  If Subp is an operator, it may override a predefined operation, if\n+      --  it is defined in the same scope as the type to which it applies.\n       --  In that case overridden_subp is empty because of our implicit\n       --  representation for predefined operators. We have to check whether the\n       --  signature of Subp matches that of a predefined operator. Note that\n@@ -4487,54 +4495,64 @@ package body Sem_Ch6 is\n       --  explicit overridden operation.\n \n       elsif Nkind (Subp) = N_Defining_Operator_Symbol then\n+         declare\n+            Typ          : constant Entity_Id :=\n+                             Base_Type (Etype (First_Formal (Subp)));\n+            Can_Override : constant Boolean :=\n+              Operator_Matches_Spec (Subp, Subp)\n+                and then Scope (Subp) = Scope (Typ)\n+                and then not Is_Class_Wide_Type (Typ);\n \n-         if Must_Not_Override (Spec) then\n+         begin\n+            if Must_Not_Override (Spec) then\n \n-            --  If this is not a primitive operation or protected subprogram,\n-            --  then \"not overriding\" is illegal.\n+               --  If this is not a primitive or a protected subprogram,\n+               --  then \"not overriding\" is illegal.\n \n-            if not Is_Primitive\n-              and then Ekind (Scope (Subp)) /= E_Protected_Type\n-            then\n-               Error_Msg_N\n-                 (\"overriding indicator only allowed \"\n-                    & \"if subprogram is primitive\", Subp);\n+               if not Is_Primitive\n+                 and then Ekind (Scope (Subp)) /= E_Protected_Type\n+               then\n+                  Error_Msg_N\n+                    (\"overriding indicator only allowed \"\n+                       & \"if subprogram is primitive\", Subp);\n \n-            elsif Operator_Matches_Spec (Subp, Subp) then\n-               Error_Msg_NE\n-                 (\"subprogram & overrides predefined operator \", Spec, Subp);\n-            end if;\n+               elsif Can_Override then\n+                  Error_Msg_NE\n+                    (\"subprogram & overrides predefined operator \",\n+                       Spec, Subp);\n+               end if;\n \n-         elsif Must_Override (Spec) then\n-            if Is_Overriding_Operation (Subp) then\n-               Set_Is_Overriding_Operation (Subp);\n+            elsif Must_Override (Spec) then\n+               if Is_Overriding_Operation (Subp) then\n+                  Set_Is_Overriding_Operation (Subp);\n \n-            elsif not Operator_Matches_Spec (Subp, Subp) then\n-               Error_Msg_NE (\"subprogram & is not overriding\", Spec, Subp);\n-            end if;\n+               elsif not Can_Override then\n+                  Error_Msg_NE (\"subprogram & is not overriding\", Spec, Subp);\n+               end if;\n \n-         elsif not Error_Posted (Subp)\n-           and then Style_Check\n-           and then Operator_Matches_Spec (Subp, Subp)\n-             and then\n-               not Is_Predefined_File_Name\n-                 (Unit_File_Name (Get_Source_Unit (Subp)))\n-         then\n-            Set_Is_Overriding_Operation (Subp);\n+            elsif not Error_Posted (Subp)\n+              and then Style_Check\n+              and then Can_Override\n+              and then\n+                not Is_Predefined_File_Name\n+                  (Unit_File_Name (Get_Source_Unit (Subp)))\n+            then\n+               Set_Is_Overriding_Operation (Subp);\n \n-            --  If style checks are enabled, indicate that the indicator is\n-            --  missing. However, at the point of declaration, the type of\n-            --  which this is a primitive operation may be private, in which\n-            --  case the indicator would be premature.\n+               --  If style checks are enabled, indicate that the indicator is\n+               --  missing. However, at the point of declaration, the type of\n+               --  which this is a primitive operation may be private, in which\n+               --  case the indicator would be premature.\n \n-            if Has_Private_Declaration (Etype (Subp))\n-              or else Has_Private_Declaration (Etype (First_Formal (Subp)))\n-            then\n-               null;\n-            else\n-               Style.Missing_Overriding (Decl, Subp);\n+               if Has_Private_Declaration (Etype (Subp))\n+                 or else Has_Private_Declaration (Etype (First_Formal (Subp)))\n+               then\n+                  null;\n+               else\n+                  Style.Missing_Overriding (Decl, Subp);\n+               end if;\n             end if;\n-         end if;\n+         end;\n \n       elsif Must_Override (Spec) then\n          if Ekind (Subp) = E_Entry then"}]}