{"sha": "707f5f6d4515f26085d4d5c062464a3895b05cdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA3ZjVmNmQ0NTE1ZjI2MDg1ZDRkNWMwNjI0NjRhMzg5NWIwNWNkZg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1999-09-21T23:20:43Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-09-21T23:20:43Z"}, "message": "Output_UTF8.java (write): Don't exit loop unless both `inlength' and `bytes_todo' are 0.\n\n\t* gnu/gcj/convert/Output_UTF8.java (write): Don't exit loop unless\n        both `inlength' and `bytes_todo' are 0.  Simplified 2-byte case.\n\nFrom-SVN: r29570", "tree": {"sha": "da4f43d642f9825ae706547c79efb5a1a6ed3396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da4f43d642f9825ae706547c79efb5a1a6ed3396"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/707f5f6d4515f26085d4d5c062464a3895b05cdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/707f5f6d4515f26085d4d5c062464a3895b05cdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/707f5f6d4515f26085d4d5c062464a3895b05cdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/707f5f6d4515f26085d4d5c062464a3895b05cdf/comments", "author": null, "committer": null, "parents": [{"sha": "5057b5e8d1088230c77b7305d16511497556e7b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5057b5e8d1088230c77b7305d16511497556e7b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5057b5e8d1088230c77b7305d16511497556e7b0"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "f054dbee2e129230286f7a6e5ccccf0fd76cfd21", "filename": "libjava/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707f5f6d4515f26085d4d5c062464a3895b05cdf/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707f5f6d4515f26085d4d5c062464a3895b05cdf/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=707f5f6d4515f26085d4d5c062464a3895b05cdf", "patch": "@@ -1,5 +1,8 @@\n 1999-09-21  Tom Tromey  <tromey@cygnus.com>\n \n+\t* gnu/gcj/convert/Output_UTF8.java (write): Don't exit loop unless\n+        both `inlength' and `bytes_todo' are 0.  Simplified 2-byte case.\n+\n \t* include/posix-threads.h (_Jv_MutexDestroy): Use\n \t_Jv_PthreadGetMutex.\n \t(_Jv_MutexLock): Likewise."}, {"sha": "d842f2b93f39c4eecd37484f8c81b0ab9d17bf06", "filename": "libjava/gnu/gcj/convert/Output_UTF8.java", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/707f5f6d4515f26085d4d5c062464a3895b05cdf/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_UTF8.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/707f5f6d4515f26085d4d5c062464a3895b05cdf/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_UTF8.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2Fconvert%2FOutput_UTF8.java?ref=707f5f6d4515f26085d4d5c062464a3895b05cdf", "patch": "@@ -25,7 +25,7 @@ public class Output_UTF8 extends UnicodeToBytes\n \n   // Saves the previous char if it was a high-surrogate.\n   char hi_part;\n-  // Value of imcomplete character.\n+  // Value of incomplete character.\n   int value;\n   // Number of continuation bytes still to emit.\n   int bytes_todo;\n@@ -36,9 +36,9 @@ public int write (char[] inbuffer, int inpos, int inlength)\n     int avail = buf.length - count;\n     for (;;)\n       {\n-\tif (inlength == 0 || avail == 0)\n+\tif (avail == 0 || (inlength == 0 && bytes_todo == 0))\n \t  break;\n-\t// The algororith is made more complicated because we want to write\n+\t// The algorithm is made more complicated because we want to write\n \t// at least one byte in the output buffer, if there is room for\n \t// that byte, and at least one input character is available.\n \t// This makes the code more robust, since client code will\n@@ -70,17 +70,9 @@ public int write (char[] inbuffer, int inpos, int inlength)\n \telse if (ch <= 0x07FF)\n \t  {\n \t    buf[count++] = (byte) (0xC0 | (ch >> 6));\n-\t    if (--avail > 0)\n-\t      {\n-\t\tbuf[count++] = (byte) ((ch & 0x3F) | 0x80);\n-\t\tavail--;\n-\t      }\n-\t    else\n-\t    {\n-\t      value = ch;\n-\t      bytes_todo = 1;\n-\t      break;\n-\t    }\n+\t    avail--;\n+\t    value = ch;\n+\t    bytes_todo = 1;\n \t  }\n \telse if (ch >= 0xD800 && ch <= 0xDFFF && standardUTF8)\n \t  {"}]}