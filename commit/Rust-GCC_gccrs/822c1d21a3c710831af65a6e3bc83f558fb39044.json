{"sha": "822c1d21a3c710831af65a6e3bc83f558fb39044", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIyYzFkMjFhM2M3MTA4MzFhZjY1YTZlM2JjODNmNTU4ZmIzOTA0NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-29T14:47:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-29T14:47:18Z"}, "message": "libstdc++: Allow Lemire's algorithm to be used in more cases\n\nThis extends the fast path to also work when the URBG's range of\npossible values is not the entire range of its result_type. Previously,\nthe slow path would be used for engines with a uint_fast32_t result type\nif that type is actually a typedef for uint64_t rather than uint32_t.\nAfter this change, the generator's result_type is not important, only\nthe range of possible value that generator can produce. If the\ngenerator's range is exactly UINT64_MAX then the calculation will be\ndone using 128-bit and 64-bit integers, and if the range is UINT32_MAX\nit will be done using 64-bit and 32-bit integers.\n\nIn practice, this benefits most of the engines and engine adaptors\ndefined in [rand.predef] on x86_64-linux and other 64-bit targets. This\nis because std::minstd_rand0 and std::mt19937 and others use\nuint_fast32_t, which is a typedef for uint64_t.\n\nThe code now makes use of the recently-clarified requirement that the\ngenerator's min() and max() functions are usable in constant\nexpressions (see LWG 2154).\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/uniform_int_dist.h (_Power_of_two): Add\n\tconstexpr.\n\t(uniform_int_distribution::_S_nd): Add static_assert to ensure\n\tthe wider type is twice as wide as the result type.\n\t(uniform_int_distribution::__generate_impl): Add static_assert\n\tand declare variables as constexpr where appropriate.\n\t(uniform_int_distribution:operator()): Likewise. Only consider\n\tthe uniform random bit generator's range of possible results\n\twhen deciding whether _S_nd can be used, not the __uctype type.", "tree": {"sha": "c3161acd5372b06acd519e99876ba93ce15f2c2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3161acd5372b06acd519e99876ba93ce15f2c2c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/822c1d21a3c710831af65a6e3bc83f558fb39044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822c1d21a3c710831af65a6e3bc83f558fb39044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/822c1d21a3c710831af65a6e3bc83f558fb39044", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822c1d21a3c710831af65a6e3bc83f558fb39044/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d067bd72936aaaa7e947e919fc869143539ae023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d067bd72936aaaa7e947e919fc869143539ae023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d067bd72936aaaa7e947e919fc869143539ae023"}], "stats": {"total": 52, "additions": 33, "deletions": 19}, "files": [{"sha": "524593bb9847a0900240328f6c348016c288c68b", "filename": "libstdc++-v3/include/bits/uniform_int_dist.h", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/822c1d21a3c710831af65a6e3bc83f558fb39044/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/822c1d21a3c710831af65a6e3bc83f558fb39044/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funiform_int_dist.h?ref=822c1d21a3c710831af65a6e3bc83f558fb39044", "patch": "@@ -58,7 +58,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n     /* Determine whether number is a power of 2.  */\n     template<typename _Tp>\n-      inline bool\n+      constexpr bool\n       _Power_of_2(_Tp __x)\n       {\n \treturn ((__x - 1) & __x) == 0;\n@@ -242,9 +242,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstatic _Up\n \t_S_nd(_Urbg& __g, _Up __range)\n \t{\n-\t  using __gnu_cxx::__int_traits;\n-\t  static_assert(!__int_traits<_Up>::__is_signed, \"U must be unsigned\");\n-\t  static_assert(!__int_traits<_Wp>::__is_signed, \"W must be unsigned\");\n+\t  using _Up_traits = __gnu_cxx::__int_traits<_Up>;\n+\t  using _Wp_traits = __gnu_cxx::__int_traits<_Wp>;\n+\t  static_assert(!_Up_traits::__is_signed, \"U must be unsigned\");\n+\t  static_assert(!_Wp_traits::__is_signed, \"W must be unsigned\");\n+\t  static_assert(_Wp_traits::__digits == (2 * _Up_traits::__digits),\n+\t\t\t\"W must be twice as wide as U\");\n \n \t  // reference: Fast Random Integer Generation in an Interval\n \t  // ACM Transactions on Modeling and Computer Simulation 29 (1), 2019\n@@ -260,7 +263,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t  __low = _Up(__product);\n \t\t}\n \t    }\n-\t  return __product >> __gnu_cxx::__int_traits<_Up>::__digits;\n+\t  return __product >> _Up_traits::__digits;\n \t}\n     };\n \n@@ -275,9 +278,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \ttypedef typename make_unsigned<result_type>::type __utype;\n \ttypedef typename common_type<_Gresult_type, __utype>::type __uctype;\n \n-\tconst __uctype __urngmin = __urng.min();\n-\tconst __uctype __urngmax = __urng.max();\n-\tconst __uctype __urngrange = __urngmax - __urngmin;\n+\tstatic_assert( __urng.min() < __urng.max(),\n+\t    \"Uniform random bit generator must define min() < max()\");\n+\n+\tconstexpr __uctype __urngmin = __urng.min();\n+\tconstexpr __uctype __urngmax = __urng.max();\n+\tconstexpr __uctype __urngrange = __urngmax - __urngmin;\n \tconst __uctype __urange\n \t  = __uctype(__param.b()) - __uctype(__param.a());\n \n@@ -288,21 +294,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \t    const __uctype __uerange = __urange + 1; // __urange can be zero\n \n-\t    using __gnu_cxx::__int_traits;\n+#if defined __UINT64_TYPE__ && defined __UINT32_TYPE__\n #if __SIZEOF_INT128__\n-\t    if (__int_traits<__uctype>::__digits == 64\n-\t\t&& __urngrange == __int_traits<__uctype>::__max)\n+\t    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT64_MAX__)\n \t      {\n-\t\t__ret = _S_nd<unsigned __int128>(__urng, __uerange);\n+\t\t// __urng produces values that use exactly 64-bits,\n+\t\t// so use 128-bit integers to downscale to desired range.\n+\t\t__UINT64_TYPE__ __u64erange = __uerange;\n+\t\t__ret = _S_nd<unsigned __int128>(__urng, __u64erange);\n \t      }\n \t    else\n #endif\n-\t    if (__int_traits<__uctype>::__digits == 32\n-\t\t&& __urngrange == __int_traits<__uctype>::__max)\n+\t    if _GLIBCXX17_CONSTEXPR (__urngrange == __UINT32_MAX__)\n \t      {\n-\t\t__ret = _S_nd<__UINT64_TYPE__>(__urng, __uerange);\n+\t\t// __urng produces values that use exactly 32-bits,\n+\t\t// so use 64-bit integers to downscale to desired range.\n+\t\t__UINT32_TYPE__ __u32erange = __uerange;\n+\t\t__ret = _S_nd<__UINT64_TYPE__>(__urng, __u32erange);\n \t      }\n \t    else\n+#endif\n \t      {\n \t\t// fallback case (2 divisions)\n \t\tconst __uctype __scaling = __urngrange / __uerange;\n@@ -361,9 +372,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \ttypedef typename make_unsigned<result_type>::type __utype;\n \ttypedef typename common_type<_Gresult_type, __utype>::type __uctype;\n \n-\tconst __uctype __urngmin = __urng.min();\n-\tconst __uctype __urngmax = __urng.max();\n-\tconst __uctype __urngrange = __urngmax - __urngmin;\n+\tstatic_assert( __urng.min() < __urng.max(),\n+\t    \"Uniform random bit generator must define min() < max()\");\n+\n+\tconstexpr __uctype __urngmin = __urng.min();\n+\tconstexpr __uctype __urngmax = __urng.max();\n+\tconstexpr __uctype __urngrange = __urngmax - __urngmin;\n \tconst __uctype __urange\n \t  = __uctype(__param.b()) - __uctype(__param.a());\n \n@@ -417,7 +431,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      {\n \t\tdo\n \t\t  {\n-\t\t    const __uctype __uerngrange = __urngrange + 1;\n+\t\t    constexpr __uctype __uerngrange = __urngrange + 1;\n \t\t    __tmp = (__uerngrange * operator()\n \t\t\t     (__urng, param_type(0, __urange / __uerngrange)));\n \t\t    __ret = __tmp + (__uctype(__urng()) - __urngmin);"}]}