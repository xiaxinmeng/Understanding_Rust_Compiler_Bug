{"sha": "632b09212386db8c68978befb8dc0d2745988b7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMyYjA5MjEyMzg2ZGI4YzY4OTc4YmVmYjhkYzBkMjc0NTk4OGI3Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-11-16T12:19:22Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-11-16T12:19:22Z"}, "message": "sparc.c (sparc_emit_probe_stack_range): Adjust.\n\n\t* config/sparc/sparc.c (sparc_emit_probe_stack_range): Adjust.\n\t(output_probe_stack_range): Rotate the loop and simplify.\n\nFrom-SVN: r230414", "tree": {"sha": "5cdcd3a886b94485ac908460a5e6f1b6a57fb028", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cdcd3a886b94485ac908460a5e6f1b6a57fb028"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/632b09212386db8c68978befb8dc0d2745988b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/632b09212386db8c68978befb8dc0d2745988b7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/632b09212386db8c68978befb8dc0d2745988b7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/632b09212386db8c68978befb8dc0d2745988b7c/comments", "author": null, "committer": null, "parents": [{"sha": "c0f39947f8683a23223c85277cd4766b48f0db2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f39947f8683a23223c85277cd4766b48f0db2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0f39947f8683a23223c85277cd4766b48f0db2d"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "889f434c0498da6dd29dfccf176988827216413f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632b09212386db8c68978befb8dc0d2745988b7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632b09212386db8c68978befb8dc0d2745988b7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=632b09212386db8c68978befb8dc0d2745988b7c", "patch": "@@ -1,3 +1,8 @@\n+2015-11-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.c (sparc_emit_probe_stack_range): Adjust.\n+\t(output_probe_stack_range): Rotate the loop and simplify.\n+\n 2015-11-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/rs6000/rs6000.c (rs6000_emit_probe_stack_rang): Adjust."}, {"sha": "93287235b8f5e08345a121e5e5e6b77305715d75", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/632b09212386db8c68978befb8dc0d2745988b7c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/632b09212386db8c68978befb8dc0d2745988b7c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=632b09212386db8c68978befb8dc0d2745988b7c", "patch": "@@ -5058,9 +5058,9 @@ sparc_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n       emit_stack_probe (plus_constant (Pmode, g1, -size));\n     }\n \n-  /* The run-time loop is made up of 10 insns in the generic case while the\n+  /* The run-time loop is made up of 9 insns in the generic case while the\n      compile-time loop is made up of 4+2*(n-2) insns for n # of intervals.  */\n-  else if (size <= 5 * PROBE_INTERVAL)\n+  else if (size <= 4 * PROBE_INTERVAL)\n     {\n       HOST_WIDE_INT i;\n \n@@ -5147,41 +5147,33 @@ const char *\n output_probe_stack_range (rtx reg1, rtx reg2)\n {\n   static int labelno = 0;\n-  char loop_lab[32], end_lab[32];\n+  char loop_lab[32];\n   rtx xops[2];\n \n-  ASM_GENERATE_INTERNAL_LABEL (loop_lab, \"LPSRL\", labelno);\n-  ASM_GENERATE_INTERNAL_LABEL (end_lab, \"LPSRE\", labelno++);\n+  ASM_GENERATE_INTERNAL_LABEL (loop_lab, \"LPSRL\", labelno++);\n \n+  /* Loop.  */\n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, loop_lab);\n \n-   /* Jump to END_LAB if TEST_ADDR == LAST_ADDR.  */\n+  /* TEST_ADDR = TEST_ADDR + PROBE_INTERVAL.  */\n   xops[0] = reg1;\n+  xops[1] = GEN_INT (-PROBE_INTERVAL);\n+  output_asm_insn (\"add\\t%0, %1, %0\", xops);\n+\n+  /* Test if TEST_ADDR == LAST_ADDR.  */\n   xops[1] = reg2;\n   output_asm_insn (\"cmp\\t%0, %1\", xops);\n-  if (TARGET_ARCH64)\n-    fputs (\"\\tbe,pn\\t%xcc,\", asm_out_file);\n-  else\n-    fputs (\"\\tbe\\t\", asm_out_file);\n-  assemble_name_raw (asm_out_file, end_lab);\n-  fputc ('\\n', asm_out_file);\n-\n-  /* TEST_ADDR = TEST_ADDR + PROBE_INTERVAL.  */\n-  xops[1] = GEN_INT (-PROBE_INTERVAL);\n-  output_asm_insn (\" add\\t%0, %1, %0\", xops);\n \n   /* Probe at TEST_ADDR and branch.  */\n   if (TARGET_ARCH64)\n-    fputs (\"\\tba,pt\\t%xcc,\", asm_out_file);\n+    fputs (\"\\tbne,pt\\t%xcc,\", asm_out_file);\n   else\n-    fputs (\"\\tba\\t\", asm_out_file);\n+    fputs (\"\\tbne\\t\", asm_out_file);\n   assemble_name_raw (asm_out_file, loop_lab);\n   fputc ('\\n', asm_out_file);\n   xops[1] = GEN_INT (SPARC_STACK_BIAS);\n   output_asm_insn (\" st\\t%%g0, [%0+%1]\", xops);\n \n-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, end_lab);\n-\n   return \"\";\n }\n "}]}