{"sha": "00f615afef5bed8d1ef1f9c11033b3995641fab2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBmNjE1YWZlZjViZWQ4ZDFlZjFmOWMxMTAzM2IzOTk1NjQxZmFiMg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-04-26T11:10:47Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-04-26T11:10:47Z"}, "message": "re PR tree-optimization/70771 (ICE on valid code at -O3 on x86_64-linux-gnu in operator[], at vec.h:714)\n\n\tPR tree-optimization/70771\n\tPR tree-optimization/70775\n\t* tree-if-conv.c (if_convertible_phi_p): Remove check on special\n\tvirtual PHI nodes.  Delete parameter.\n\t(if_convertible_loop_p_1): Delete argument to above function.\n\t(predicate_all_scalar_phis): Delete code handling single-argument\n\tPHIs.\n\t(tree_if_conversion): Mark and update virtual SSA.\n\n\tgcc/testsuite/ChangeLog\n\tPR tree-optimization/70771\n\tPR tree-optimization/70775\n\t* gcc.dg/pr70771.c: New test.\n\t* gcc.dg/pr70771.c: New test.\n\nFrom-SVN: r235436", "tree": {"sha": "6d0fe4cc8903ea7d313d2752f327a6164552e69d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d0fe4cc8903ea7d313d2752f327a6164552e69d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00f615afef5bed8d1ef1f9c11033b3995641fab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00f615afef5bed8d1ef1f9c11033b3995641fab2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00f615afef5bed8d1ef1f9c11033b3995641fab2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00f615afef5bed8d1ef1f9c11033b3995641fab2/comments", "author": null, "committer": null, "parents": [{"sha": "901f29c8c9a5775af65f883701ed10a19084d818", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901f29c8c9a5775af65f883701ed10a19084d818", "html_url": "https://github.com/Rust-GCC/gccrs/commit/901f29c8c9a5775af65f883701ed10a19084d818"}], "stats": {"total": 151, "additions": 88, "deletions": 63}, "files": [{"sha": "3bbdc5b69b74aea5862e961b9bd54a9f26c1ec2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f615afef5bed8d1ef1f9c11033b3995641fab2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f615afef5bed8d1ef1f9c11033b3995641fab2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00f615afef5bed8d1ef1f9c11033b3995641fab2", "patch": "@@ -1,3 +1,14 @@\n+2016-04-26  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/70771\n+\tPR tree-optimization/70775\n+\t* tree-if-conv.c (if_convertible_phi_p): Remove check on special\n+\tvirtual PHI nodes.  Delete parameter.\n+\t(if_convertible_loop_p_1): Delete argument to above function.\n+\t(predicate_all_scalar_phis): Delete code handling single-argument\n+\tPHIs.\n+\t(tree_if_conversion): Mark and update virtual SSA.\n+\n 2016-04-26  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR target/61821"}, {"sha": "da1838c10073c7fbaf75ea1e4d9062022bcb8687", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f615afef5bed8d1ef1f9c11033b3995641fab2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f615afef5bed8d1ef1f9c11033b3995641fab2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00f615afef5bed8d1ef1f9c11033b3995641fab2", "patch": "@@ -1,3 +1,10 @@\n+2016-04-26  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/70771\n+\tPR tree-optimization/70775\n+\t* gcc.dg/pr70771.c: New test.\n+\t* gcc.dg/pr70771.c: New test.\n+\n 2016-04-26  Bernd Schmidt  <bschmidt@redhat.com>\n \n \t* gcc.target/i386/lzcnt-1.c: Allow a different lzcntw output register."}, {"sha": "fea0c5ae3928771b8f77d244d90e33a03f45cc92", "filename": "gcc/testsuite/gcc.dg/pr70771.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f615afef5bed8d1ef1f9c11033b3995641fab2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70771.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f615afef5bed8d1ef1f9c11033b3995641fab2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70771.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70771.c?ref=00f615afef5bed8d1ef1f9c11033b3995641fab2", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int a, b, c, d;\n+\n+static void\n+fn1 ()\n+{\n+  for (b = 0; b < 1; b++)\n+    for (c = 0; c < 1; c++)\n+      {\n+\tif (a)\n+\t  break;\n+\tb = 1;\n+      }\n+  for (;;)\n+    ;\n+}\n+\n+int\n+main ()\n+{\n+  if (d)\n+    fn1 ();\n+  return 0;\n+}"}, {"sha": "290c8607654bcf2d6441bd92d6dfe275f80991af", "filename": "gcc/testsuite/gcc.dg/pr70775.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f615afef5bed8d1ef1f9c11033b3995641fab2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70775.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f615afef5bed8d1ef1f9c11033b3995641fab2/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70775.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70775.c?ref=00f615afef5bed8d1ef1f9c11033b3995641fab2", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+struct S\n+{\n+  int f1;\n+  int f2;\n+} a;\n+\n+int b, c, d, e;\n+short f;\n+\n+int\n+fn1 (int p1, unsigned p2)\n+{\n+  return p1 + p2;\n+}\n+\n+void\n+fn2 ()\n+{\n+  struct S g;\n+  int h;\n+  for (; c; c++)\n+    for (f = -3; f < 3; f = fn1 (f, 8))\n+      {\n+        a.f1 = e;\n+        if (b)\n+          a = g;\n+        else\n+          for (; h; h++)\n+            d = b;\n+      }\n+}"}, {"sha": "744d6f5b8ba62c672ee3c517d84c45ca9a6b0be8", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 10, "deletions": 63, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f615afef5bed8d1ef1f9c11033b3995641fab2/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f615afef5bed8d1ef1f9c11033b3995641fab2/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=00f615afef5bed8d1ef1f9c11033b3995641fab2", "patch": "@@ -640,16 +640,11 @@ phi_convertible_by_degenerating_args (gphi *phi)\n    PHI is not if-convertible if:\n    - it has more than 2 arguments.\n \n-   When we didn't see if-convertible stores, PHI is not\n-   if-convertible if:\n-   - a virtual PHI is immediately used in another PHI node,\n-   - there is a virtual PHI in a BB other than the loop->header.\n    When the aggressive_if_conv is set, PHI can have more than\n    two arguments.  */\n \n static bool\n-if_convertible_phi_p (struct loop *loop, basic_block bb, gphi *phi,\n-\t\t      bool any_mask_load_store)\n+if_convertible_phi_p (struct loop *loop, basic_block bb, gphi *phi)\n {\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -669,36 +664,6 @@ if_convertible_phi_p (struct loop *loop, basic_block bb, gphi *phi,\n         }\n     }\n \n-  if (any_mask_load_store)\n-    return true;\n-\n-  /* When there were no if-convertible stores, check\n-     that there are no memory writes in the branches of the loop to be\n-     if-converted.  */\n-  if (virtual_operand_p (gimple_phi_result (phi)))\n-    {\n-      imm_use_iterator imm_iter;\n-      use_operand_p use_p;\n-\n-      if (bb != loop->header)\n-\t{\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \"Virtual phi not on loop->header.\\n\");\n-\t  return false;\n-\t}\n-\n-      FOR_EACH_IMM_USE_FAST (use_p, imm_iter, gimple_phi_result (phi))\n-\t{\n-\t  if (gimple_code (USE_STMT (use_p)) == GIMPLE_PHI\n-\t      && USE_STMT (use_p) != phi)\n-\t    {\n-\t      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\tfprintf (dump_file, \"Difficult to handle this virtual phi.\\n\");\n-\t      return false;\n-\t    }\n-\t}\n-    }\n-\n   return true;\n }\n \n@@ -1405,8 +1370,7 @@ if_convertible_loop_p_1 (struct loop *loop,\n       gphi_iterator itr;\n \n       for (itr = gsi_start_phis (bb); !gsi_end_p (itr); gsi_next (&itr))\n-\tif (!if_convertible_phi_p (loop, bb, itr.phi (),\n-\t\t\t\t   *any_mask_load_store))\n+\tif (!if_convertible_phi_p (loop, bb, itr.phi ()))\n \t  return false;\n     }\n \n@@ -1915,27 +1879,13 @@ predicate_all_scalar_phis (struct loop *loop)\n       if (gsi_end_p (phi_gsi))\n \tcontinue;\n \n-      if (EDGE_COUNT (bb->preds) == 1)\n+      gsi = gsi_after_labels (bb);\n+      while (!gsi_end_p (phi_gsi))\n \t{\n-\t  /* Propagate degenerate PHIs.  */\n-\t  for (phi_gsi = gsi_start_phis (bb); !gsi_end_p (phi_gsi);\n-\t       gsi_next (&phi_gsi))\n-\t    {\n-\t      gphi *phi = phi_gsi.phi ();\n-\t      replace_uses_by (gimple_phi_result (phi),\n-\t\t\t       gimple_phi_arg_def (phi, 0));\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  gsi = gsi_after_labels (bb);\n-\t  while (!gsi_end_p (phi_gsi))\n-\t    {\n-\t      phi = phi_gsi.phi ();\n-\t      predicate_scalar_phi (phi, &gsi);\n-\t      release_phi_node (phi);\n-\t      gsi_next (&phi_gsi);\n-\t    }\n+\t  phi = phi_gsi.phi ();\n+\t  predicate_scalar_phi (phi, &gsi);\n+\t  release_phi_node (phi);\n+\t  gsi_next (&phi_gsi);\n \t}\n \n       set_phi_nodes (bb, NULL);\n@@ -2808,11 +2758,8 @@ tree_if_conversion (struct loop *loop)\n     }\n \n   todo |= TODO_cleanup_cfg;\n-  if (any_mask_load_store)\n-    {\n-      mark_virtual_operands_for_renaming (cfun);\n-      todo |= TODO_update_ssa_only_virtuals;\n-    }\n+  mark_virtual_operands_for_renaming (cfun);\n+  todo |= TODO_update_ssa_only_virtuals;\n \n  cleanup:\n   if (ifc_bbs)"}]}