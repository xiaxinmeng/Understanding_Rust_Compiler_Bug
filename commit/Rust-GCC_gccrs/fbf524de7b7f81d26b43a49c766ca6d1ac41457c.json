{"sha": "fbf524de7b7f81d26b43a49c766ca6d1ac41457c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJmNTI0ZGU3YjdmODFkMjZiNDNhNDljNzY2Y2E2ZDFhYzQxNDU3Yw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-03-18T10:58:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-03-18T10:58:32Z"}, "message": "re PR rtl-optimization/65078 (4.9 and 5.0 generate more spill-fill in comparison with 4.8.2)\n\n\tPR target/65078\n\t* config/i386/sse.md (movsi/movdi -> vec_extract_*_0 splitter): New.\n\n\t* gcc.target/i386/pr65078-1.c: New test.\n\t* gcc.target/i386/pr65078-2.c: New test.\n\t* gcc.target/i386/pr65078-3.c: New test.\n\t* gcc.target/i386/pr65078-4.c: New test.\n\t* gcc.target/i386/pr65078-5.c: New test.\n\t* gcc.target/i386/pr65078-6.c: New test.\n\nFrom-SVN: r221485", "tree": {"sha": "1f7b876692239f5e1cf49e21656ab640f3596c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f7b876692239f5e1cf49e21656ab640f3596c54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbf524de7b7f81d26b43a49c766ca6d1ac41457c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf524de7b7f81d26b43a49c766ca6d1ac41457c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbf524de7b7f81d26b43a49c766ca6d1ac41457c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e0216f173c1bef5bec3e709345d8170b1484d2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0216f173c1bef5bec3e709345d8170b1484d2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e0216f173c1bef5bec3e709345d8170b1484d2f"}], "stats": {"total": 272, "additions": 272, "deletions": 0}, "files": [{"sha": "77abe6739f9656dd7a484117b54b00a8340300ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbf524de7b7f81d26b43a49c766ca6d1ac41457c", "patch": "@@ -1,3 +1,8 @@\n+2015-03-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/65078\n+\t* config/i386/sse.md (movsi/movdi -> vec_extract_*_0 splitter): New.\n+\n 2015-03-16  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/65296"}, {"sha": "5800a3eebf21f5b24866a228a10bc26e8cfa98d0", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=fbf524de7b7f81d26b43a49c766ca6d1ac41457c", "patch": "@@ -12805,6 +12805,65 @@\n   operands[1] = adjust_address (operands[1], <ssescalarmode>mode, offs);\n })\n \n+;; Turn SImode or DImode extraction from arbitrary SSE/AVX/AVX512F\n+;; vector modes into vec_extract*.\n+(define_split\n+  [(set (match_operand:SWI48x 0 \"nonimmediate_operand\")\n+\t(match_operand:SWI48x 1 \"register_operand\"))]\n+  \"can_create_pseudo_p ()\n+   && GET_CODE (operands[1]) == SUBREG\n+   && REG_P (SUBREG_REG (operands[1]))\n+   && (GET_MODE_CLASS (GET_MODE (SUBREG_REG (operands[1]))) == MODE_VECTOR_INT\n+       || (GET_MODE_CLASS (GET_MODE (SUBREG_REG (operands[1])))\n+\t   == MODE_VECTOR_FLOAT))\n+   && SUBREG_BYTE (operands[1]) == 0\n+   && TARGET_SSE\n+   && (GET_MODE_SIZE (GET_MODE (SUBREG_REG (operands[1]))) == 16\n+       || (GET_MODE_SIZE (GET_MODE (SUBREG_REG (operands[1]))) == 32\n+\t   && TARGET_AVX)\n+       || (GET_MODE_SIZE (GET_MODE (SUBREG_REG (operands[1]))) == 64\n+\t   && TARGET_AVX512F))\n+   && (<MODE>mode == SImode || TARGET_64BIT || MEM_P (operands[0]))\"\n+  [(set (match_dup 0) (vec_select:SWI48x (match_dup 1)\n+\t\t\t\t\t (parallel [(const_int 0)])))]\n+{\n+  rtx tmp;\n+  operands[1] = SUBREG_REG (operands[1]);\n+  switch (GET_MODE_SIZE (GET_MODE (operands[1])))\n+    {\n+    case 64:\n+      if (<MODE>mode == SImode)\n+\t{\n+\t  tmp = gen_reg_rtx (V8SImode);\n+\t  emit_insn (gen_vec_extract_lo_v16si (tmp,\n+\t\t\t\t\t       gen_lowpart (V16SImode,\n+\t\t\t\t\t\t\t    operands[1])));\n+\t}\n+      else\n+\t{\n+\t  tmp = gen_reg_rtx (V4DImode);\n+\t  emit_insn (gen_vec_extract_lo_v8di (tmp,\n+\t\t\t\t\t      gen_lowpart (V8DImode,\n+\t\t\t\t\t\t\t   operands[1])));\n+\t}\n+      operands[1] = tmp;\n+      /* FALLTHRU */\n+    case 32:\n+      tmp = gen_reg_rtx (<ssevecmode>mode);\n+      if (<MODE>mode == SImode)\n+\temit_insn (gen_vec_extract_lo_v8si (tmp, gen_lowpart (V8SImode,\n+\t\t\t\t\t\t\t      operands[1])));\n+      else\n+\temit_insn (gen_vec_extract_lo_v4di (tmp, gen_lowpart (V4DImode,\n+\t\t\t\t\t\t\t      operands[1])));\n+      operands[1] = tmp;\n+      break;\n+    case 16:\n+      operands[1] = gen_lowpart (<ssevecmode>mode, operands[1]);\n+      break;\n+    }\n+})\n+\n (define_insn \"*vec_concatv2si_sse4_1\"\n   [(set (match_operand:V2SI 0 \"register_operand\"     \"=Yr,*x,x, Yr,*x,x, x, *y,*y\")\n \t(vec_concat:V2SI"}, {"sha": "406fec06f0ef7ed08d3dad11875ea74eceed121b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fbf524de7b7f81d26b43a49c766ca6d1ac41457c", "patch": "@@ -1,3 +1,13 @@\n+2015-03-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/65078\n+\t* gcc.target/i386/pr65078-1.c: New test.\n+\t* gcc.target/i386/pr65078-2.c: New test.\n+\t* gcc.target/i386/pr65078-3.c: New test.\n+\t* gcc.target/i386/pr65078-4.c: New test.\n+\t* gcc.target/i386/pr65078-5.c: New test.\n+\t* gcc.target/i386/pr65078-6.c: New test.\n+\n 2015-03-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/65340"}, {"sha": "d8d0d85970cbb67318c7107ca9e5ca2472c16507", "filename": "gcc/testsuite/gcc.target/i386/pr65078-1.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-1.c?ref=fbf524de7b7f81d26b43a49c766ca6d1ac41457c", "patch": "@@ -0,0 +1,61 @@\n+/* PR target/65078 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+/* { dg-additional-options \"-mregparm=2\" { target ia32 } } */\n+/* { dg-final { scan-assembler-not \"\\\\(%\\[er\\]sp\\\\)\" } } */\n+\n+typedef unsigned char V __attribute__((vector_size (16)));\n+typedef unsigned long long W __attribute__((vector_size (16)));\n+typedef unsigned int T __attribute__((vector_size (16)));\n+\n+void\n+f1 (unsigned long long *x, V y)\n+{\n+  *x = ((W)y)[0];\n+}\n+\n+#if defined(__x86_64__) || defined(ALL)\n+unsigned long long\n+f2 (V y)\n+{\n+  return ((W)y)[0];\n+}\n+#endif\n+\n+void\n+f3 (unsigned int *x, V y)\n+{\n+  *x = ((T)y)[0];\n+}\n+\n+unsigned int\n+f4 (V y)\n+{\n+  return ((T)y)[0];\n+}\n+\n+void\n+f5 (unsigned long long *x, W y)\n+{\n+  *x = ((W)y)[0];\n+}\n+\n+#if defined(__x86_64__) || defined(ALL)\n+unsigned long long\n+f6 (W y)\n+{\n+  return ((W)y)[0];\n+}\n+#endif\n+\n+void\n+f7 (unsigned int *x, T y)\n+{\n+  *x = ((T)y)[0];\n+}\n+\n+unsigned int\n+f8 (T y)\n+{\n+  return ((T)y)[0];\n+}"}, {"sha": "bf220cd56418e73e0897ac13fd7cf3e478df03fd", "filename": "gcc/testsuite/gcc.target/i386/pr65078-2.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-2.c?ref=fbf524de7b7f81d26b43a49c766ca6d1ac41457c", "patch": "@@ -0,0 +1,61 @@\n+/* PR target/65078 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-additional-options \"-mregparm=2\" { target ia32 } } */\n+/* { dg-final { scan-assembler-not \"\\\\(%\\[er\\]sp\\\\)\" } } */\n+\n+typedef unsigned char V __attribute__((vector_size (32)));\n+typedef unsigned long long W __attribute__((vector_size (32)));\n+typedef unsigned int T __attribute__((vector_size (32)));\n+\n+void\n+f1 (unsigned long long *x, V y)\n+{\n+  *x = ((W)y)[0];\n+}\n+\n+#if defined(__x86_64__) || defined(ALL)\n+unsigned long long\n+f2 (V y)\n+{\n+  return ((W)y)[0];\n+}\n+#endif\n+\n+void\n+f3 (unsigned int *x, V y)\n+{\n+  *x = ((T)y)[0];\n+}\n+\n+unsigned int\n+f4 (V y)\n+{\n+  return ((T)y)[0];\n+}\n+\n+void\n+f5 (unsigned long long *x, W y)\n+{\n+  *x = ((W)y)[0];\n+}\n+\n+#if defined(__x86_64__) || defined(ALL)\n+unsigned long long\n+f6 (W y)\n+{\n+  return ((W)y)[0];\n+}\n+#endif\n+\n+void\n+f7 (unsigned int *x, T y)\n+{\n+  *x = ((T)y)[0];\n+}\n+\n+unsigned int\n+f8 (T y)\n+{\n+  return ((T)y)[0];\n+}"}, {"sha": "d1b679f1c6352a377216128b6066d6f2b543ae4b", "filename": "gcc/testsuite/gcc.target/i386/pr65078-3.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-3.c?ref=fbf524de7b7f81d26b43a49c766ca6d1ac41457c", "patch": "@@ -0,0 +1,61 @@\n+/* PR target/65078 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-additional-options \"-mregparm=2\" { target ia32 } } */\n+/* { dg-final { scan-assembler-not \"\\\\(%\\[er\\]sp\\\\)\" } } */\n+\n+typedef unsigned char V __attribute__((vector_size (64)));\n+typedef unsigned long long W __attribute__((vector_size (64)));\n+typedef unsigned int T __attribute__((vector_size (64)));\n+\n+void\n+f1 (unsigned long long *x, V y)\n+{\n+  *x = ((W)y)[0];\n+}\n+\n+#if defined(__x86_64__) || defined(ALL)\n+unsigned long long\n+f2 (V y)\n+{\n+  return ((W)y)[0];\n+}\n+#endif\n+\n+void\n+f3 (unsigned int *x, V y)\n+{\n+  *x = ((T)y)[0];\n+}\n+\n+unsigned int\n+f4 (V y)\n+{\n+  return ((T)y)[0];\n+}\n+\n+void\n+f5 (unsigned long long *x, W y)\n+{\n+  *x = ((W)y)[0];\n+}\n+\n+#if defined(__x86_64__) || defined(ALL)\n+unsigned long long\n+f6 (W y)\n+{\n+  return ((W)y)[0];\n+}\n+#endif\n+\n+void\n+f7 (unsigned int *x, T y)\n+{\n+  *x = ((T)y)[0];\n+}\n+\n+unsigned int\n+f8 (T y)\n+{\n+  return ((T)y)[0];\n+}"}, {"sha": "d6c52240602b9a979ba34d7fbf86f6c8d3e2faeb", "filename": "gcc/testsuite/gcc.target/i386/pr65078-4.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-4.c?ref=fbf524de7b7f81d26b43a49c766ca6d1ac41457c", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/65078 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse -DALL\" } */\n+\n+#include \"pr65078-1.c\""}, {"sha": "9e787fe5f7a6069be19a8c5aff2913adb1ac9c7a", "filename": "gcc/testsuite/gcc.target/i386/pr65078-5.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-5.c?ref=fbf524de7b7f81d26b43a49c766ca6d1ac41457c", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/65078 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx -DALL\" } */\n+\n+#include \"pr65078-2.c\""}, {"sha": "3fdc9059ede35603313040a7a4118c3ec5a74263", "filename": "gcc/testsuite/gcc.target/i386/pr65078-6.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf524de7b7f81d26b43a49c766ca6d1ac41457c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65078-6.c?ref=fbf524de7b7f81d26b43a49c766ca6d1ac41457c", "patch": "@@ -0,0 +1,5 @@\n+/* PR target/65078 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -DALL\" } */\n+\n+#include \"pr65078-3.c\""}]}