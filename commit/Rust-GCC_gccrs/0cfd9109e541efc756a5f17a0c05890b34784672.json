{"sha": "0cfd9109e541efc756a5f17a0c05890b34784672", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNmZDkxMDllNTQxZWZjNzU2YTVmMTdhMGMwNTg5MGIzNDc4NDY3Mg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-06T00:16:34Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-06T00:16:34Z"}, "message": "Daily bump.", "tree": {"sha": "afe72d0d79f81226cfcfd0be5caab1099a2497b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afe72d0d79f81226cfcfd0be5caab1099a2497b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cfd9109e541efc756a5f17a0c05890b34784672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cfd9109e541efc756a5f17a0c05890b34784672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cfd9109e541efc756a5f17a0c05890b34784672", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cfd9109e541efc756a5f17a0c05890b34784672/comments", "author": null, "committer": null, "parents": [{"sha": "44e1f63e20fec07e3a10d8e75336cfda64c911bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e1f63e20fec07e3a10d8e75336cfda64c911bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e1f63e20fec07e3a10d8e75336cfda64c911bf"}], "stats": {"total": 373, "additions": 372, "deletions": 1}, "files": [{"sha": "eab26b5f3a9e4079f9027848b5ca593c8ba97987", "filename": "gcc/ChangeLog", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfd9109e541efc756a5f17a0c05890b34784672/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfd9109e541efc756a5f17a0c05890b34784672/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cfd9109e541efc756a5f17a0c05890b34784672", "patch": "@@ -1,3 +1,117 @@\n+2020-11-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97675\n+\t* doc/invoke.texi: Document -Wexceptions.\n+\n+2020-11-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/25814\n+\t* doc/invoke.texi: Document -Wvexing-parse.\n+\n+2020-11-05  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/97725\n+\t* range-op.cc (operator_equal::fold_range): Use new tmp value.\n+\t(operator_not_equal::fold_range): Ditto.\n+\t* value-query.cc (range_query::value_of_expr): Use int_range_max\n+\tnot a value_range.\n+\t(range_query::value_on_edge): Ditto.\n+\t(range_query::value_of_stmt): Ditto.\n+\n+2020-11-05  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/aarch64/aarch64-vxworks.h (TARGET_OS_USES_R18):\n+\tRemove definition.\n+\t(STATIC_CHAIN_REGNUM): Redefine to 9.\n+\n+2020-11-05  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* config/aarch64/aarch64.md: Define PROBE_STACK_FIRST_REGNUM\n+\tand PROBE_STACK_SECOND_REGNUM constants, designating r10/r11.\n+\tReplacements for the PROBE_STACK_FIRST/SECOND_REG constants in\n+\taarch64.c.\n+\t* config/aarch64/aarch64.c (PROBE_STACK_FIRST_REG): Remove.\n+\t(PROBE_STACK_SECOND_REG): Remove.\n+\t(aarch64_emit_probe_stack_range): Adjust to the _REG -> _REGNUM\n+\tsuffix update for PROBE_STACK register numbers.\n+\n+2020-11-05  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gimple.c (gimple_call_fnspec): Handle C++ new and delete.\n+\t* gimple.h (gimple_call_from_new_or_delete): Constify parameter.\n+\n+2020-11-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/97721\n+\t* gimple-range.cc (get_tree_range): Drop overflow from constants.\n+\n+2020-11-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* tree-diagnostic-path.cc (struct path_summary::event_range): Move\n+\tout of path_summary to...\n+\t(struct event_range): ...here.\n+\t(class path_summary): Convert to...\n+\t(struct path_summary): ...this.\n+\t(path_summary::m_ranges): Drop \"private\".\n+\t(path_summary::print): Convert to...\n+\t(print_path_summary_as_text): ...this, passing in the path_summary\n+\texplicitly.\n+\t(default_tree_diagnostic_path_printer): Update for above change.\n+\t(selftest::test_empty_path): Likewise.\n+\t(selftest::test_intraprocedural_path): Likewise.\n+\t(selftest::test_interprocedural_path_1): Likewise.\n+\t(selftest::test_interprocedural_path_2): Likewise.\n+\t(selftest::test_recursion): Likewise.\n+\n+2020-11-05  qing zhao  <qinzhao@gcc.gnu.org>\n+\n+\tPR target/97715\n+\t* config/i386/i386.c (zero_all_st_registers): Return\n+\tearlier when the FPU is disabled.\n+\n+2020-11-05  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-modref.c (parm_map_for_arg): Initialize parm_offset and\n+\tparm_offset_knonw.\n+\t(read_section): Set writes_errno to false.\n+\n+2020-11-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-data-refs.c (vect_slp_analyze_node_dependences):\n+\tUse the original stmts.\n+\t(vect_slp_analyze_node_alignment): Use the pattern stmt.\n+\t* tree-vect-slp.c (vect_fixup_store_groups_with_patterns):\n+\tNew function.\n+\t(vect_slp_analyze_bb_1): Call it.\n+\n+2020-11-05  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vect-slp.c (vect_slp_tree_permute_noop_p): New.\n+\t(vect_optimize_slp): Optimize permutes.\n+\t(vectorizable_slp_permutation): Fix typo.\n+\n+2020-11-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/97718\n+\t* dwarf2out.c (add_abstract_origin_attribute): Make sure to\n+\tpoint to the abstract instance.\n+\n+2020-11-05  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vect-loop.c (vect_analyze_loop_2): Check kind.\n+\t* tree-vect-slp.c (vect_build_slp_instance): New.\n+\t(enum slp_instance_kind): Move to...\n+\t* tree-vectorizer.h (enum slp_instance_kind): .. Here\n+\t(SLP_INSTANCE_KIND): New.\n+\n+2020-11-05  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/96933\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_init): Use direct move\n+\tinstructions for vector construction with char/short types.\n+\t* config/rs6000/rs6000.md (p8_mtvsrwz_v16qisi2): New define_insn.\n+\t(p8_mtvsrd_v16qidi2): Likewise.\n+\n 2020-11-04  Tamar Christina  <tamar.christina@arm.com>\n \n \t* tree-vect-slp.c (vect_analyze_slp_instance): Moved load/store lanes"}, {"sha": "7096b2dbae975b8e260fc2c316de0844b6128da1", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfd9109e541efc756a5f17a0c05890b34784672/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfd9109e541efc756a5f17a0c05890b34784672/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=0cfd9109e541efc756a5f17a0c05890b34784672", "patch": "@@ -1 +1 @@\n-20201105\n+20201106"}, {"sha": "44847ed78efac7851aa07ed05a98b7c2ef7d7595", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfd9109e541efc756a5f17a0c05890b34784672/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfd9109e541efc756a5f17a0c05890b34784672/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=0cfd9109e541efc756a5f17a0c05890b34784672", "patch": "@@ -1,3 +1,8 @@\n+2020-11-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97668\n+\t* svalue.cc (cmp_cst): Handle COMPLEX_CST.\n+\n 2020-10-29  David Malcolm  <dmalcolm@redhat.com>\n \n \t* program-state.cc (sm_state_map::on_liveness_change): Sort the"}, {"sha": "160c5ea7667f2c345a7f6d2456874f83d6fc3b09", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfd9109e541efc756a5f17a0c05890b34784672/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfd9109e541efc756a5f17a0c05890b34784672/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=0cfd9109e541efc756a5f17a0c05890b34784672", "patch": "@@ -1,3 +1,13 @@\n+2020-11-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97675\n+\t* c.opt (Wexceptions): New option.\n+\n+2020-11-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/25814\n+\t* c.opt (Wvexing-parse): New option.\n+\n 2020-11-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/97670"}, {"sha": "9046b10f38f83cf2d0c6e6f8b4ed799425fe089a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfd9109e541efc756a5f17a0c05890b34784672/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfd9109e541efc756a5f17a0c05890b34784672/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0cfd9109e541efc756a5f17a0c05890b34784672", "patch": "@@ -1,3 +1,43 @@\n+2020-11-05  Marek Polacek  <polacek@redhat.com>\n+\n+\t* except.c (check_handlers_1): Add auto_diagnostic_group.\n+\n+2020-11-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/78209\n+\t* pt.c (do_auto_deduction): If init is REFERENCE_REF_P, use its\n+\tfirst operand.\n+\n+2020-11-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97675\n+\t* except.c (check_handlers_1): Use OPT_Wexceptions for the\n+\twarning.  Use inform for the second part of the warning.\n+\n+2020-11-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/25814\n+\t* cp-tree.h (enum cp_tree_index): Add CPTI_EXPLICIT_VOID_LIST.\n+\t(explicit_void_list_node): Define.\n+\t(PARENTHESIZED_LIST_P): New macro.\n+\t(struct cp_declarator): Add function::parens_loc.\n+\t* decl.c (cxx_init_decl_processing): Initialize explicit_void_list_node.\n+\t(grokparms): Also break when explicit_void_list_node.\n+\t* parser.c (make_call_declarator): New location_t parameter.  Use it\n+\tto set declarator->u.function.parens_loc.\n+\t(cp_parser_lambda_declarator_opt): Pass UNKNOWN_LOCATION to\n+\tmake_call_declarator.\n+\t(warn_about_ambiguous_parse): New function.\n+\t(cp_parser_init_declarator): Call warn_about_ambiguous_parse.\n+\t(cp_parser_declarator): Set *parenthesized_p to false rather than to\n+\ttrue.\n+\t(cp_parser_direct_declarator): Create a location for the function's\n+\tparentheses and pass it to make_call_declarator.\n+\t(cp_parser_parameter_declaration_clause): Return explicit_void_list_node\n+\tfor (void).\n+\t(cp_parser_parameter_declaration_list): Set PARENTHESIZED_LIST_P\n+\tin the parameters tree.\n+\n 2020-11-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/97670"}, {"sha": "cb9c26bd64100cce3d3afab871e52d5c0e4992e0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfd9109e541efc756a5f17a0c05890b34784672/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfd9109e541efc756a5f17a0c05890b34784672/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0cfd9109e541efc756a5f17a0c05890b34784672", "patch": "@@ -1,3 +1,89 @@\n+2020-11-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/78209\n+\t* g++.dg/cpp1y/decltype-auto1.C: New test.\n+\n+2020-11-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/97675\n+\t* g++.old-deja/g++.eh/catch10.C: Adjust dg-warning.\n+\t* g++.dg/warn/Wexceptions1.C: New test.\n+\t* g++.dg/warn/Wexceptions2.C: New test.\n+\n+2020-11-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/25814\n+\t* g++.dg/cpp2a/fn-template16.C: Add a dg-warning.\n+\t* g++.dg/cpp2a/fn-template7.C: Likewise.\n+\t* g++.dg/lookup/pr80891-5.C: Likewise.\n+\t* g++.dg/lto/pr79050_0.C: Add extern.\n+\t* g++.dg/lto/pr84805_0.C: Likewise.\n+\t* g++.dg/parse/pr58898.C: Add a dg-warning.\n+\t* g++.dg/template/scope5.C: Likewise.\n+\t* g++.old-deja/g++.brendan/recurse.C: Likewise.\n+\t* g++.old-deja/g++.jason/template4.C: Likewise.\n+\t* g++.old-deja/g++.law/arm4.C: Likewise.\n+\t* g++.old-deja/g++.mike/for2.C: Likewise.\n+\t* g++.old-deja/g++.other/local4.C: Likewise.\n+\t* g++.old-deja/g++.pt/crash3.C: Likewise.\n+\t* g++.dg/warn/Wvexing-parse.C: New test.\n+\t* g++.dg/warn/Wvexing-parse2.C: New test.\n+\t* g++.dg/warn/Wvexing-parse3.C: New test.\n+\t* g++.dg/warn/Wvexing-parse4.C: New test.\n+\t* g++.dg/warn/Wvexing-parse5.C: New test.\n+\t* g++.dg/warn/Wvexing-parse6.C: New test.\n+\t* g++.dg/warn/Wvexing-parse7.C: New test.\n+\n+2020-11-05  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr97725.c: New.\n+\n+2020-11-05  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc.dg/sms-12.c: Add dg-require-effective-target fpic.\n+\n+2020-11-05  Jan Hubicka  <jh@suse.cz>\n+\n+\t* g++.dg/ipa/devirt-24.C: Update template.\n+\n+2020-11-05  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.dg/vect/slp-11b.c: Guard statements.\n+\n+2020-11-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/pr97721.c: New test.\n+\n+2020-11-05  qing zhao  <qinzhao@gcc.gnu.org>\n+\n+\tPR target/97715\n+\t* gcc.target/i386/zero-scratch-regs-32.c: New test.\n+\n+2020-11-05  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/97668\n+\t* gcc.dg/analyzer/pr97668.c: New test.\n+\t* gfortran.dg/analyzer/pr97668.f: New test.\n+\n+2020-11-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-69.c: New testcase.\n+\n+2020-11-05  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.dg/vect/slp-11b.c: Update testcase.\n+\t* gcc.dg/vect/slp-perm-6.c: Update target selector.\n+\n+2020-11-05  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/96933\n+\t* gcc.target/powerpc/pr96933-1.c: New test.\n+\t* gcc.target/powerpc/pr96933-2.c: New test.\n+\t* gcc.target/powerpc/pr96933-3.c: New test.\n+\t* gcc.target/powerpc/pr96933-4.c: New test.\n+\t* gcc.target/powerpc/pr96933.h: New test.\n+\t* gcc.target/powerpc/pr96933-run.h: New test.\n+\n 2020-11-04  Tamar Christina  <tamar.christina@arm.com>\n \n \t* gcc.dg/vect/slp-11b.c: Update output scan."}, {"sha": "83f4ad7d7bac2527de6d60921ac04502a772d944", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfd9109e541efc756a5f17a0c05890b34784672/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfd9109e541efc756a5f17a0c05890b34784672/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=0cfd9109e541efc756a5f17a0c05890b34784672", "patch": "@@ -1,3 +1,44 @@\n+2020-11-05  Ulrich Drepper  <drepper@redhat.com>\n+\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* Makefile.am (%.mod): Add -cpp and -fopenmp to compile flags.\n+\t* Makefile.in: Regenerate.\n+\t* fortran.c: Wrap uses of omp_set_nested and omp_get_nested with\n+\tpragmas to ignore -Wdeprecated-declarations warnings.\n+\t* icv.c: Likewise.\n+\t* omp.h.in (__GOMP_DEPRECATED_5_0): Define.\n+\tMark omp_lock_hint_* enum values, omp_lock_hint_t, omp_set_nested,\n+\tand omp_get_nested with __GOMP_DEPRECATED_5_0.\n+\t* omp_lib.f90.in: Mark omp_get_nested and omp_set_nested as\n+\tdeprecated.\n+\t* testsuite/libgomp.c++/affinity-1.C: Add -Wno-deprecated-declarations\n+\tto test options.\n+\t* testsuite/libgomp.c/affinity-1.c: Likewise.\n+\t* testsuite/libgomp.c/affinity-2.c: Likewise.\n+\t* testsuite/libgomp.c/appendix-a/a.15.1.c: Likewise.\n+\t* testsuite/libgomp.c/lib-1.c: Likewise.\n+\t* testsuite/libgomp.c/nested-1.c: Likewise.\n+\t* testsuite/libgomp.c/nested-2.c: Likewise.\n+\t* testsuite/libgomp.c/nested-3.c: Likewise.\n+\t* testsuite/libgomp.c/pr32362-1.c: Likewise.\n+\t* testsuite/libgomp.c/pr32362-2.c: Likewise.\n+\t* testsuite/libgomp.c/pr32362-3.c: Likewise.\n+\t* testsuite/libgomp.c/pr35549.c: Likewise.\n+\t* testsuite/libgomp.c/pr42942.c: Likewise.\n+\t* testsuite/libgomp.c/pr61200.c: Likewise.\n+\t* testsuite/libgomp.c/sort-1.c: Likewise.\n+\t* testsuite/libgomp.c/target-5.c: Likewise.\n+\t* testsuite/libgomp.c/target-6.c: Likewise.\n+\t* testsuite/libgomp.c/teams-1.c: Likewise.\n+\t* testsuite/libgomp.c/thread-limit-1.c: Likewise.\n+\t* testsuite/libgomp.c/thread-limit-2.c: Likewise.\n+\t* testsuite/libgomp.c/thread-limit-4.c: Likewise.\n+\t* testsuite/libgomp.fortran/affinity1.f90: Likewise.\n+\t* testsuite/libgomp.fortran/lib1.f90: Likewise.\n+\t* testsuite/libgomp.fortran/lib2.f: Likewise.\n+\t* testsuite/libgomp.fortran/nested1.f90: Likewise.\n+\t* testsuite/libgomp.fortran/teams1.f90: Likewise.\n+\n 2020-11-02  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR target/85486"}, {"sha": "89f9f6c8c38b9c8fe5c9fd131c908790b0558571", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfd9109e541efc756a5f17a0c05890b34784672/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfd9109e541efc756a5f17a0c05890b34784672/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0cfd9109e541efc756a5f17a0c05890b34784672", "patch": "@@ -1,3 +1,78 @@\n+2020-11-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/25814\n+\t* testsuite/20_util/reference_wrapper/lwg2993.cc: Add a dg-warning.\n+\t* testsuite/25_algorithms/generate_n/87982_neg.cc: Likewise.\n+\n+2020-11-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/96269\n+\t* include/std/optional (operator==, operator!=, operator<)\n+\t(operator>, operator<=, operator>=): Fix types used in\n+\tSFINAE constraints.\n+\t* testsuite/20_util/optional/relops/96269.cc: New test.\n+\n+2020-11-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97731\n+\t* src/filesystem/dir.cc (recursive_directory_iterator): Call the\n+\tright overload of _Dir::advance.\n+\t* testsuite/experimental/filesystem/iterators/97731.cc: New test.\n+\n+2020-11-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97729\n+\t* include/std/future (__basic_future::_M_get_result): Use\n+\tnullptr for null pointer constant.\n+\t* libsupc++/eh_ptr.cc (operator==, operator!=): Remove\n+\tdefinitions.\n+\t* libsupc++/exception_ptr.h (_GLIBCXX_EH_PTR_USED): Define\n+\tmacro to conditionally add __attribute__((__used__)).\n+\t(operator==, operator!=, exception_ptr::exception_ptr())\n+\t(exception_ptr::exception_ptr(const exception_ptr&))\n+\t(exception_ptr::~exception_ptr())\n+\t(exception_ptr::operator=(const exception_ptr&))\n+\t(exception_ptr::swap(exception_ptr&)): Always define as\n+\tinline. Add macro to be conditionally \"used\".\n+\n+2020-11-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97729\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.29): Add exports.\n+\t* src/c++20/sstream-inst.cc (basic_stringbuf): Instantiate\n+\tprivate constructor taking __xfer_bufptrs.\n+\n+2020-11-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/sstream (basic_stringbuf(const allocator_type&):\n+\tAdd explicit.\n+\t(basic_stringbuf(const basic_string<C,T,SA>&, openmode, const A&)):\n+\tCall _M_stringbuf_init. Construct _M_string from pointer and length\n+\tto avoid constraint checks for string view.\n+\t(basic_stringbuf::view()): Make __sv_type alias local to the\n+\tfunction.\n+\t(basic_istringstream(const basic_string<C,T,SA>&, openmode, const A&)):\n+\tPass string to _M_streambuf instead of constructing a temporary\n+\twith the wrong allocator.\n+\t(basic_ostringstream(const basic_string<C,T,SA>&, openmode, const A&)):\n+\tLikewise.\n+\t(basic_stringstream(const basic_string<C,T,SA>&, openmode, const A&)):\n+\tLikewise.\n+\t* src/c++20/sstream-inst.cc: Use string_view and wstring_view\n+\ttypedefs in explicit instantiations.\n+\t* testsuite/27_io/basic_istringstream/cons/char/1.cc: Add more\n+\ttests for constructors.\n+\t* testsuite/27_io/basic_ostringstream/cons/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/cons/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/cons/char/2.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/cons/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_stringbuf/cons/wchar_t/2.cc: Likewise.\n+\t* testsuite/27_io/basic_stringstream/cons/char/1.cc: Likewise.\n+\n+2020-11-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/sstream: Adjust whitespace.\n+\n 2020-11-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/97719"}]}