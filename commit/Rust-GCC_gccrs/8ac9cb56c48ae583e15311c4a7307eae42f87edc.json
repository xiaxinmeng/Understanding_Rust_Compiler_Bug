{"sha": "8ac9cb56c48ae583e15311c4a7307eae42f87edc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFjOWNiNTZjNDhhZTU4M2UxNTMxMWM0YTczMDdlYWU0MmY4N2VkYw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-31T05:08:49Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-31T05:08:49Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1131", "tree": {"sha": "f0fe96fcb813be075d53c5c44a270ccbe74dfa4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0fe96fcb813be075d53c5c44a270ccbe74dfa4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ac9cb56c48ae583e15311c4a7307eae42f87edc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac9cb56c48ae583e15311c4a7307eae42f87edc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ac9cb56c48ae583e15311c4a7307eae42f87edc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac9cb56c48ae583e15311c4a7307eae42f87edc/comments", "author": null, "committer": null, "parents": [{"sha": "16d907969ec0e6c45d880c053fe5973561ab3bc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16d907969ec0e6c45d880c053fe5973561ab3bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16d907969ec0e6c45d880c053fe5973561ab3bc0"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "3ab4c7a4d7a94092b3a121c8c61c097154f9c2fa", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac9cb56c48ae583e15311c4a7307eae42f87edc/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac9cb56c48ae583e15311c4a7307eae42f87edc/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=8ac9cb56c48ae583e15311c4a7307eae42f87edc", "patch": "@@ -3730,11 +3730,20 @@ output_decl (decl, containing_scope)\n      register tree decl;\n      register tree containing_scope;\n {\n+  if (TREE_CODE (decl) == ERROR_MARK)\n+    return;\n+\n+  /* If this ..._DECL node is marked to be ignored, then ignore it.\n+     But don't ignore a function definition, since that would screw\n+     up our count of blocks, and that it turn will completely screw up the\n+     the labels we will reference in subsequent AT_low_pc and AT_high_pc\n+     attributes (for subsequent blocks).  */\n+\n+  if (DECL_IGNORED_P (decl) && TREE_CODE (decl) != FUNCTION_DECL)\n+    return;\n+\n   switch (TREE_CODE (decl))\n     {\n-    case ERROR_MARK:\n-      break;\n-\n     case CONST_DECL:\n       /* The individual enumerators of an enum type get output when we\n \t output the Dwarf representation of the relevant enum type itself.  */\n@@ -4077,11 +4086,31 @@ dwarfout_file_scope_decl (decl, set_finalizing)\n      register tree decl;\n      register int set_finalizing;\n {\n+  if (TREE_CODE (decl) == ERROR_MARK)\n+    return;\n+\n+  /* If this ..._DECL node is marked to be ignored, then ignore it.  We\n+     gotta hope that the node in question doesn't represent a function\n+     definition.  If it does, then totally ignoring it is bound to screw\n+     up our count of blocks, and that it turn will completely screw up the\n+     the labels we will reference in subsequent AT_low_pc and AT_high_pc\n+     attributes (for subsequent blocks).  (It's too bad that BLOCK nodes\n+     don't carry their own sequence numbers with them!)  */\n+\n+  if (DECL_IGNORED_P (decl))\n+    {\n+      if (TREE_CODE (decl) == FUNCTION_DECL && DECL_INITIAL (decl) != NULL)\n+\tabort ();\n+      return;\n+    }\n+\n   switch (TREE_CODE (decl))\n     {\n     case FUNCTION_DECL:\n \n-      /* Ignore this FUNCTION_DECL if it refers to a builtin function.  */\n+      /* Ignore this FUNCTION_DECL if it refers to a builtin declaration of\n+\t a builtin function.  Explicit programmer-supplied declarations of\n+\t these same functions should NOT be ignored however.  */\n \n       if (TREE_EXTERNAL (decl) && DECL_FUNCTION_CODE (decl))\n         return;"}]}