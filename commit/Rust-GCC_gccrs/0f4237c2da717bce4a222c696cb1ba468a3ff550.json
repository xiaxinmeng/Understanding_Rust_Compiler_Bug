{"sha": "0f4237c2da717bce4a222c696cb1ba468a3ff550", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY0MjM3YzJkYTcxN2JjZTRhMjIyYzY5NmNiMWJhNDY4YTNmZjU1MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-03-18T14:36:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-03-18T14:36:19Z"}, "message": "re PR c++/3870 (gcc 3.0 bogus error specializing a template function)\n\n        PR c++/3870\n        * cp-tree.h (struct saved_scope): Add last_parms field.\n        * decl.c (maybe_push_to_top_level): Save last_function_parms.\n        (pop_from_top_level): Restore it.\n\nFrom-SVN: r50970", "tree": {"sha": "db5986e8ecf6cd31ae59af52d2f151e69287d828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db5986e8ecf6cd31ae59af52d2f151e69287d828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f4237c2da717bce4a222c696cb1ba468a3ff550", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f4237c2da717bce4a222c696cb1ba468a3ff550", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f4237c2da717bce4a222c696cb1ba468a3ff550", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f4237c2da717bce4a222c696cb1ba468a3ff550/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "001ad76c41fb6725f6834c063199e8ea6540a9ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/001ad76c41fb6725f6834c063199e8ea6540a9ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/001ad76c41fb6725f6834c063199e8ea6540a9ee"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "c5b30b7dd94bba7f6e8ea04d6c684126f4f3758c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4237c2da717bce4a222c696cb1ba468a3ff550/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4237c2da717bce4a222c696cb1ba468a3ff550/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0f4237c2da717bce4a222c696cb1ba468a3ff550", "patch": "@@ -1,5 +1,10 @@\n 2002-03-18  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/3870\n+\t* cp-tree.h (struct saved_scope): Add last_parms field.\n+\t* decl.c (maybe_push_to_top_level): Save last_function_parms.\n+\t(pop_from_top_level): Restore it.\n+\n \tPR c++/4377\n \t* mangle.c (write_expression): Strip NOP_EXPRs sooner.  Also strip\n \tNON_LVALUE_EXPRs."}, {"sha": "6da6811ef4504f173ee1e03d1cb06cdf4ec069e2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4237c2da717bce4a222c696cb1ba468a3ff550/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4237c2da717bce4a222c696cb1ba468a3ff550/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0f4237c2da717bce4a222c696cb1ba468a3ff550", "patch": "@@ -731,6 +731,7 @@ struct saved_scope\n   tree x_saved_tree;\n   tree incomplete;\n   tree lookups;\n+  tree last_parms;\n \n   HOST_WIDE_INT x_processing_template_decl;\n   int x_processing_specialization;"}, {"sha": "fcc87fed1ffc9359399d17c712c3149ac917102b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4237c2da717bce4a222c696cb1ba468a3ff550/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4237c2da717bce4a222c696cb1ba468a3ff550/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0f4237c2da717bce4a222c696cb1ba468a3ff550", "patch": "@@ -2501,6 +2501,7 @@ maybe_push_to_top_level (pseudo)\n   s->bindings = b;\n   s->need_pop_function_context = need_pop;\n   s->function_decl = current_function_decl;\n+  s->last_parms = last_function_parms;\n \n   scope_chain = s;\n   current_function_decl = NULL_TREE;\n@@ -2542,6 +2543,7 @@ pop_from_top_level ()\n   if (s->need_pop_function_context)\n     pop_function_context_from (NULL_TREE);\n   current_function_decl = s->function_decl;\n+  last_function_parms = s->last_parms;\n \n   free (s);\n }"}, {"sha": "d3fa401b52e57e07487b47cc25fc179c8091613e", "filename": "gcc/testsuite/g++.dg/template/spec3.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4237c2da717bce4a222c696cb1ba468a3ff550/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4237c2da717bce4a222c696cb1ba468a3ff550/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec3.C?ref=0f4237c2da717bce4a222c696cb1ba468a3ff550", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/3870\n+// Test that performing a type instantiation in order to match up a\n+// specialization doesn't clobber last_function_parms.\n+\n+template <class T>\n+struct A { typedef int I; };\n+\n+template <class T>\n+inline typename T::I\n+foo (typename T::I, const T*);\n+\n+template <>\n+int foo (int i, const A<long>*)\n+{\n+    return i + 1;\n+}"}]}