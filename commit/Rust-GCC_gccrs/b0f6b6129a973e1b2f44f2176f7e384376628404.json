{"sha": "b0f6b6129a973e1b2f44f2176f7e384376628404", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBmNmI2MTI5YTk3M2UxYjJmNDRmMjE3NmY3ZTM4NDM3NjYyODQwNA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2012-07-31T02:46:05Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2012-07-31T02:46:05Z"}, "message": "defaults.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\n\t* defaults.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* targhooks.c (default_mode_dependent_address_p): Delete code\n\tfor GO_IF_MODE_DEPENDENT_ADDRESS.\n\t* system.h (GO_IF_MODE_DEPENDENT_ADDRESS): Poison.\n\t* doc/tm.texi.in (GO_IF_MODE_DEPENDENT_ADDRESS): Delete documention.\n\t* doc/tm.texi: Regenerate.\n\t* config/alpha.h (GO_IF_MODE_DEPENDENT_ADDRESS): Move code to...\n\t* config/alpha.c (alpha_mode_dependent_address_p): ...here.  New\n\tfunction.\n\t(TARGET_MODE_DEPENDENT_ADDRESS_P): Define.\n\t* config/cr16/cr16.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/mep/mep.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/vax/vax-protos.h (vax_mode_dependent_address_p): Delete.\n\t* config/vax/vax.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n\t* config/vax/vax.c (vax_mode_dependent_address_p): Make static.\n\tTake a const_rtx.\n\t(TARGET_MODE_DEPENDENT_ADDRESS_P): Define.\n\nFrom-SVN: r189995", "tree": {"sha": "19a45d3acf3edf7784d4d84db8e42eaab0c2bf7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19a45d3acf3edf7784d4d84db8e42eaab0c2bf7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0f6b6129a973e1b2f44f2176f7e384376628404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0f6b6129a973e1b2f44f2176f7e384376628404", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0f6b6129a973e1b2f44f2176f7e384376628404", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0f6b6129a973e1b2f44f2176f7e384376628404/comments", "author": null, "committer": null, "parents": [{"sha": "2a261cd35fa089540f230ec74b380c9a3c1b2932", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a261cd35fa089540f230ec74b380c9a3c1b2932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a261cd35fa089540f230ec74b380c9a3c1b2932"}], "stats": {"total": 117, "additions": 40, "deletions": 77}, "files": [{"sha": "6dd21ec6b55337ecf0d4c19d9fad7c13a05be2fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0f6b6129a973e1b2f44f2176f7e384376628404", "patch": "@@ -1,3 +1,24 @@\n+2012-07-30  Nathan Froyd  <froydnj@gcc.gnu.org>\n+\n+\n+\t* defaults.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* targhooks.c (default_mode_dependent_address_p): Delete code\n+\tfor GO_IF_MODE_DEPENDENT_ADDRESS.\n+\t* system.h (GO_IF_MODE_DEPENDENT_ADDRESS): Poison.\n+\t* doc/tm.texi.in (GO_IF_MODE_DEPENDENT_ADDRESS): Delete documention.\n+\t* doc/tm.texi: Regenerate.\n+\t* config/alpha.h (GO_IF_MODE_DEPENDENT_ADDRESS): Move code to...\n+\t* config/alpha.c (alpha_mode_dependent_address_p): ...here.  New\n+\tfunction.\n+\t(TARGET_MODE_DEPENDENT_ADDRESS_P): Define.\n+\t* config/cr16/cr16.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/mep/mep.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/vax/vax-protos.h (vax_mode_dependent_address_p): Delete.\n+\t* config/vax/vax.h (GO_IF_MODE_DEPENDENT_ADDRESS): Delete.\n+\t* config/vax/vax.c (vax_mode_dependent_address_p): Make static.\n+\tTake a const_rtx.\n+\t(TARGET_MODE_DEPENDENT_ADDRESS_P): Define.\n+\n 2012-07-30  Nathan Froyd  <froydnj@gcc.gnu.org>\n \n \t* expmed.h (NUM_MODE_VECTOR_INT): Define."}, {"sha": "6d455eff0a41893bd4ba67204be7148e6e1076b5", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=b0f6b6129a973e1b2f44f2176f7e384376628404", "patch": "@@ -1038,6 +1038,16 @@ alpha_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n   return new_x ? new_x : x;\n }\n \n+/* Return true if ADDR has an effect that depends on the machine mode it\n+   is used for.  On the Alpha this is true only for the unaligned modes.\n+   We can simplify the test since we know that the address must be valid.  */\n+\n+static bool\n+alpha_mode_dependent_address_p (const_rtx addr)\n+{\n+  return GET_CODE (addr) == AND;\n+}\n+\n /* Primarily this is required for TLS symbols, but given that our move\n    patterns *ought* to be able to handle any symbol at any time, we\n    should never be spilling symbolic operands to the constant pool, ever.  */\n@@ -9709,6 +9719,8 @@ alpha_conditional_register_usage (void)\n \n #undef TARGET_LEGITIMIZE_ADDRESS\n #define TARGET_LEGITIMIZE_ADDRESS alpha_legitimize_address\n+#undef TARGET_MODE_DEPENDENT_ADDRESS_P\n+#define TARGET_MODE_DEPENDENT_ADDRESS_P alpha_mode_dependent_address_p\n \n #undef TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START alpha_file_start"}, {"sha": "cdb7c49b0076157b5d42edc22047e00e1c95d6c4", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=b0f6b6129a973e1b2f44f2176f7e384376628404", "patch": "@@ -851,13 +851,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n     }\t\t\t\t\t\t\t\t\t     \\\n } while (0)\n \n-/* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for.\n-   On the Alpha this is true only for the unaligned modes.   We can\n-   simplify this test since we know that the address must be valid.  */\n-\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)  \\\n-{ if (GET_CODE (ADDR) == AND) goto LABEL; }\n \f\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */"}, {"sha": "cf5bdf143caec4908cd80abb8bfb8cabde669ee5", "filename": "gcc/config/cr16/cr16.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fconfig%2Fcr16%2Fcr16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fconfig%2Fcr16%2Fcr16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.h?ref=b0f6b6129a973e1b2f44f2176f7e384376628404", "patch": "@@ -460,10 +460,6 @@ struct cumulative_args\n #define REG_OK_FOR_INDEX_P(X)   1\n #endif /* not REG_OK_STRICT.  */\n \n-/* Go to LABEL if ADDR (a legitimate address expression) has \n-   an effect that depends on the machine mode it is used for.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n-\n /* Assume best case (branch predicted).  */\n #define BRANCH_COST(speed_p, predictable_p)       2\n "}, {"sha": "920120c92b9d98511ef134869b4167e059d1ef8d", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=b0f6b6129a973e1b2f44f2176f7e384376628404", "patch": "@@ -561,8 +561,6 @@ typedef struct\n   if (mep_legitimize_reload_address (&(X), (MODE), (OPNUM), (TYPE), (IND_LEVELS))) \\\n     goto WIN\n \n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\n-\n #define SELECT_CC_MODE(OP, X, Y)  CCmode\n \f\n "}, {"sha": "5363877a36df523e5adf1763a4b3a6c4fdea9784", "filename": "gcc/config/vax/vax-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fconfig%2Fvax%2Fvax-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax-protos.h?ref=b0f6b6129a973e1b2f44f2176f7e384376628404", "patch": "@@ -19,7 +19,6 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n extern bool legitimate_constant_address_p (rtx);\n-extern bool vax_mode_dependent_address_p (rtx);\n extern void vax_expand_prologue (void);\n \n #ifdef RTX_CODE"}, {"sha": "aa848108cf7ce0234ae59b97da2fe28521d0b561", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=b0f6b6129a973e1b2f44f2176f7e384376628404", "patch": "@@ -64,6 +64,7 @@ static rtx vax_builtin_setjmp_frame_value (void);\n static void vax_asm_trampoline_template (FILE *);\n static void vax_trampoline_init (rtx, tree, rtx);\n static int vax_return_pops_args (tree, tree, int);\n+static bool vax_mode_dependent_address_p (const_rtx);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -103,6 +104,8 @@ static int vax_return_pops_args (tree, tree, int);\n \n #undef TARGET_LEGITIMATE_ADDRESS_P\n #define TARGET_LEGITIMATE_ADDRESS_P vax_legitimate_address_p\n+#undef TARGET_MODE_DEPENDENT_ADDRESS_P\n+#define TARGET_MODE_DEPENDENT_ADDRESS_P vax_mode_dependent_address_p\n \n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED hook_bool_void_true\n@@ -1833,8 +1836,8 @@ vax_legitimate_address_p (enum machine_mode mode, rtx x, bool strict)\n    increment being the length of the operand) and all indexed address depend\n    thus (because the index scale factor is the length of the operand).  */\n \n-bool\n-vax_mode_dependent_address_p (rtx x)\n+static bool\n+vax_mode_dependent_address_p (const_rtx x)\n {\n   rtx xfoo0, xfoo1;\n "}, {"sha": "35b8f8ea93a6cf7d40809a2c51bd99be75b022a6", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=b0f6b6129a973e1b2f44f2176f7e384376628404", "patch": "@@ -432,11 +432,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n #define REG_OK_FOR_BASE_P(X) REGNO_OK_FOR_BASE_P (REGNO (X))\n \n #endif\n-\n-/* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for.  */\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL) \\\n-  { if (vax_mode_dependent_address_p (ADDR)) goto LABEL; }\n \f\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */"}, {"sha": "6eead33ba6c05fb1751e834a5c4d66ff8f9bd779", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=b0f6b6129a973e1b2f44f2176f7e384376628404", "patch": "@@ -1218,13 +1218,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define ATTRIBUTE_ALIGNED_VALUE BIGGEST_ALIGNMENT\n #endif\n \n-/* Many ports have no mode-dependent addresses (except possibly autoincrement\n-   and autodecrement addresses, which are handled by target-independent code\n-   in recog.c).  */\n-#ifndef GO_IF_MODE_DEPENDENT_ADDRESS\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(X, WIN)\n-#endif\n-\n /* For most ports anything that evaluates to a constant symbolic\n    or integer value is acceptable as a constant address.  */\n #ifndef CONSTANT_ADDRESS_P"}, {"sha": "2a2d500b305ea66968b2dbe2b6a8b5021696c28b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b0f6b6129a973e1b2f44f2176f7e384376628404", "patch": "@@ -5623,24 +5623,6 @@ You may assume that @var{addr} is a valid address for the machine.\n The default version of this hook returns @code{false}.\n @end deftypefn\n \n-@defmac GO_IF_MODE_DEPENDENT_ADDRESS (@var{addr}, @var{label})\n-A C statement or compound statement with a conditional @code{goto\n-@var{label};} executed if memory address @var{x} (an RTX) can have\n-different meanings depending on the machine mode of the memory\n-reference it is used for or if the address is valid for some modes\n-but not others.\n-\n-Autoincrement and autodecrement addresses typically have mode-dependent\n-effects because the amount of the increment or decrement is the size\n-of the operand being addressed.  Some machines have other mode-dependent\n-addresses.  Many RISC machines have no mode-dependent addresses.\n-\n-You may assume that @var{addr} is a valid address for the machine.\n-\n-These are obsolete macros, replaced by the\n-@code{TARGET_MODE_DEPENDENT_ADDRESS_P} target hook.\n-@end defmac\n-\n @deftypefn {Target Hook} bool TARGET_LEGITIMATE_CONSTANT_P (enum machine_mode @var{mode}, rtx @var{x})\n This hook returns true if @var{x} is a legitimate constant for a\n @var{mode}-mode immediate operand on the target machine.  You can assume that"}, {"sha": "e7d9cecc4a5b551ac787cab29742b27727db1fca", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=b0f6b6129a973e1b2f44f2176f7e384376628404", "patch": "@@ -5547,24 +5547,6 @@ You may assume that @var{addr} is a valid address for the machine.\n The default version of this hook returns @code{false}.\n @end deftypefn\n \n-@defmac GO_IF_MODE_DEPENDENT_ADDRESS (@var{addr}, @var{label})\n-A C statement or compound statement with a conditional @code{goto\n-@var{label};} executed if memory address @var{x} (an RTX) can have\n-different meanings depending on the machine mode of the memory\n-reference it is used for or if the address is valid for some modes\n-but not others.\n-\n-Autoincrement and autodecrement addresses typically have mode-dependent\n-effects because the amount of the increment or decrement is the size\n-of the operand being addressed.  Some machines have other mode-dependent\n-addresses.  Many RISC machines have no mode-dependent addresses.\n-\n-You may assume that @var{addr} is a valid address for the machine.\n-\n-These are obsolete macros, replaced by the\n-@code{TARGET_MODE_DEPENDENT_ADDRESS_P} target hook.\n-@end defmac\n-\n @hook TARGET_LEGITIMATE_CONSTANT_P\n This hook returns true if @var{x} is a legitimate constant for a\n @var{mode}-mode immediate operand on the target machine.  You can assume that"}, {"sha": "9e7d5030465b550ac76ef0641f7b1a5586e98f05", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=b0f6b6129a973e1b2f44f2176f7e384376628404", "patch": "@@ -888,7 +888,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tIDENT_ASM_OP UNALIGNED_SHORT_ASM_OP UNALIGNED_INT_ASM_OP\t   \\\n \tUNALIGNED_LONG_ASM_OP UNALIGNED_DOUBLE_INT_ASM_OP\t\t   \\\n \tUSE_COMMON_FOR_ONE_ONLY IFCVT_EXTRA_FIELDS IFCVT_INIT_EXTRA_FIELDS \\\n-\tCASE_USE_BIT_TESTS FIXUNS_TRUNC_LIKE_FIX_TRUNC\n+\tCASE_USE_BIT_TESTS FIXUNS_TRUNC_LIKE_FIX_TRUNC                     \\\n+        GO_IF_MODE_DEPENDENT_ADDRESS\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "52a99123c8a03f0e751036b46a2e5b46ea060f52", "filename": "gcc/targhooks.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f6b6129a973e1b2f44f2176f7e384376628404/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=b0f6b6129a973e1b2f44f2176f7e384376628404", "patch": "@@ -1204,19 +1204,7 @@ default_hard_regno_scratch_ok (unsigned int regno ATTRIBUTE_UNUSED)\n bool\n default_mode_dependent_address_p (const_rtx addr ATTRIBUTE_UNUSED)\n {\n-#ifdef GO_IF_MODE_DEPENDENT_ADDRESS\n-\n-  GO_IF_MODE_DEPENDENT_ADDRESS (CONST_CAST_RTX (addr), win);\n-  return false;\n-  /* Label `win' might (not) be used via GO_IF_MODE_DEPENDENT_ADDRESS.  */\n- win: ATTRIBUTE_UNUSED_LABEL\n-  return true;\n-\n-#else\n-\n   return false;\n-\n-#endif\n }\n \n bool"}]}