{"sha": "8ff24a798e576cd22463248fb6975b5b58fd094e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZmMjRhNzk4ZTU3NmNkMjI0NjMyNDhmYjY5NzViNWI1OGZkMDk0ZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-03-22T23:11:31Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-03-22T23:11:31Z"}, "message": "extend.texi: Deprecate C++ min/max operators.\n\n\t* doc/extend.texi: Deprecate C++ min/max operators.\n\n\t* parser.c (cp_parser_warn_min_max): New function.\n\t(cp_parser_binary_expression): Use it.\n\t(cp_parser_assignment_operator_opt): Likewise.\n\t(cp_parser_operator): Likewise.\n\n\t* g++.dg/opt/max1.C: Run with -Wno-deprecated.\n\t* g++.dg/opt/pr7503-2.C: Likewise.\n\t* g++.dg/opt/pr7503-3.C: Likewise.\n\t* g++.dg/opt/pr7503-4.C: Likewise.\n\t* g++.dg/opt/pr7503-5.C: Likewise.\n\t* g++.dg/warn/minmax.C: New test.\n\nFrom-SVN: r96899", "tree": {"sha": "f55ddbeed98ae2cc0f504faf58d52b45f88cd90f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f55ddbeed98ae2cc0f504faf58d52b45f88cd90f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ff24a798e576cd22463248fb6975b5b58fd094e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff24a798e576cd22463248fb6975b5b58fd094e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ff24a798e576cd22463248fb6975b5b58fd094e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ff24a798e576cd22463248fb6975b5b58fd094e/comments", "author": null, "committer": null, "parents": [{"sha": "0dc8f32738b22686e14d8eb32ffcb05c10cb28dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dc8f32738b22686e14d8eb32ffcb05c10cb28dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dc8f32738b22686e14d8eb32ffcb05c10cb28dd"}], "stats": {"total": 115, "additions": 64, "deletions": 51}, "files": [{"sha": "2da080afb841f155712ce95708a51856b817c0dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ff24a798e576cd22463248fb6975b5b58fd094e", "patch": "@@ -1,3 +1,7 @@\n+2005-03-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* doc/extend.texi: Deprecate C++ min/max operators.\n+\n 2005-03-22  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* tree-ssa-loop-ivopts.c (determine_iv_cost): Do not try to preserve"}, {"sha": "237fe33a0189a419df05a6dee0e640fbb3659613", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8ff24a798e576cd22463248fb6975b5b58fd094e", "patch": "@@ -1,3 +1,10 @@\n+2005-03-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* parser.c (cp_parser_warn_min_max): New function.\n+\t(cp_parser_binary_expression): Use it.\n+\t(cp_parser_assignment_operator_opt): Likewise.\n+\t(cp_parser_operator): Likewise.\n+\n 2005-03-22  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/19980"}, {"sha": "d682f3a38aa366dd917c91b6deae51c6da6665c6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8ff24a798e576cd22463248fb6975b5b58fd094e", "patch": "@@ -1787,6 +1787,16 @@ cp_parser_is_keyword (cp_token* token, enum rid keyword)\n   return token->keyword == keyword;\n }\n \n+/* A minimum or maximum operator has been seen.  As these are\n+   deprecated, issue a warning.  */\n+\n+static inline void\n+cp_parser_warn_min_max (void)\n+{\n+  if (warn_deprecated && !in_system_header)\n+    warning (\"minimum/maximum operators are deprecated\");\n+}\n+\n /* If not parsing tentatively, issue a diagnostic of the form\n       FILE:LINE: MESSAGE before TOKEN\n    where TOKEN is the next token in the input stream.  MESSAGE\n@@ -5401,6 +5411,9 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p)\n     {\n       /* Get an operator token.  */\n       token = cp_lexer_peek_token (parser->lexer);\n+      if (token->type == CPP_MIN || token->type == CPP_MAX)\n+\tcp_parser_warn_min_max ();\n+\n       new_prec = TOKEN_PRECEDENCE (token);\n \n       /* Popping an entry off the stack means we completed a subexpression:\n@@ -5656,10 +5669,12 @@ cp_parser_assignment_operator_opt (cp_parser* parser)\n \n     case CPP_MIN_EQ:\n       op = MIN_EXPR;\n+      cp_parser_warn_min_max ();\n       break;\n \n     case CPP_MAX_EQ:\n       op = MAX_EXPR;\n+      cp_parser_warn_min_max ();\n       break;\n \n     default:\n@@ -8039,18 +8054,22 @@ cp_parser_operator (cp_parser* parser)\n       /* Extensions.  */\n     case CPP_MIN:\n       id = ansi_opname (MIN_EXPR);\n+      cp_parser_warn_min_max ();\n       break;\n \n     case CPP_MAX:\n       id = ansi_opname (MAX_EXPR);\n+      cp_parser_warn_min_max ();\n       break;\n \n     case CPP_MIN_EQ:\n       id = ansi_assopname (MIN_EXPR);\n+      cp_parser_warn_min_max ();\n       break;\n \n     case CPP_MAX_EQ:\n       id = ansi_assopname (MAX_EXPR);\n+      cp_parser_warn_min_max ();\n       break;\n \n     default:"}, {"sha": "f09338fbbfe32d2563b2b1830cac1b7c21235d97", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 46, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=8ff24a798e576cd22463248fb6975b5b58fd094e", "patch": "@@ -9130,7 +9130,6 @@ test specifically for GNU C++ (@pxref{Common Predefined Macros,,\n Predefined Macros,cpp,The GNU C Preprocessor}).\n \n @menu\n-* Min and Max::\t\tC++ Minimum and maximum operators.\n * Volatiles::\t\tWhat constitutes an access to a volatile object.\n * Restricted Pointers:: C99 restricted pointers and references.\n * Vague Linkage::       Where G++ puts inlines, vtables and such.\n@@ -9147,51 +9146,6 @@ Predefined Macros,cpp,The GNU C Preprocessor}).\n * Backwards Compatibility:: Compatibilities with earlier definitions of C++.\n @end menu\n \n-@node Min and Max\n-@section Minimum and Maximum Operators in C++\n-\n-It is very convenient to have operators which return the ``minimum'' or the\n-``maximum'' of two arguments.  In GNU C++ (but not in GNU C),\n-\n-@table @code\n-@item @var{a} <? @var{b}\n-@findex <?\n-@cindex minimum operator\n-is the @dfn{minimum}, returning the smaller of the numeric values\n-@var{a} and @var{b};\n-\n-@item @var{a} >? @var{b}\n-@findex >?\n-@cindex maximum operator\n-is the @dfn{maximum}, returning the larger of the numeric values @var{a}\n-and @var{b}.\n-@end table\n-\n-These operations are not primitive in ordinary C++, since you can\n-use a macro to return the minimum of two things in C++, as in the\n-following example.\n-\n-@smallexample\n-#define MIN(X,Y) ((X) < (Y) ? : (X) : (Y))\n-@end smallexample\n-\n-@noindent\n-You might then use @w{@samp{int min = MIN (i, j);}} to set @var{min} to\n-the minimum value of variables @var{i} and @var{j}.\n-\n-However, side effects in @code{X} or @code{Y} may cause unintended\n-behavior.  For example, @code{MIN (i++, j++)} will fail, incrementing\n-the smaller counter twice.  The GNU C @code{typeof} extension allows you\n-to write safe macros that avoid this kind of problem (@pxref{Typeof}).\n-However, writing @code{MIN} and @code{MAX} as macros also forces you to\n-use function-call notation for a fundamental arithmetic operation.\n-Using GNU C++ extensions, you can write @w{@samp{int min = i <? j;}}\n-instead.\n-\n-Since @code{<?} and @code{>?} are built into the compiler, they properly\n-handle expressions with side-effects;  @w{@samp{int min = i++ <? j++;}}\n-works correctly.\n-\n @node Volatiles\n @section When is a Volatile Object Accessed?\n @cindex accessing volatiles\n@@ -9838,6 +9792,11 @@ by one returning a different pointer type.  This extension to the\n covariant return type rules is now deprecated and will be removed from a\n future version.\n \n+The G++ minimum and maximum operators (@samp{<?} and @samp{>?}) and\n+their compound forms (@samp{<?=}) and @samp{>?=}) have been deprecated\n+and will be removed in a future version.  Code using these operators\n+should be modified to use @code{std::min} and @code{std::max} instead.\n+\n The named return value extension has been deprecated, and is now\n removed from G++.\n "}, {"sha": "71347381142b599f9b16fe916a94503acebcd96b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ff24a798e576cd22463248fb6975b5b58fd094e", "patch": "@@ -1,3 +1,12 @@\n+2005-03-22  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* g++.dg/opt/max1.C: Run with -Wno-deprecated.\n+\t* g++.dg/opt/pr7503-2.C: Likewise.\n+\t* g++.dg/opt/pr7503-3.C: Likewise.\n+\t* g++.dg/opt/pr7503-4.C: Likewise.\n+\t* g++.dg/opt/pr7503-5.C: Likewise.\n+\t* g++.dg/warn/minmax.C: New test.\n+\n 2005-03-22  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* g77_intrinsics_funcs.f: New test."}, {"sha": "10a6e57d92dd10ab75549a567c1da45f9b51ddff", "filename": "gcc/testsuite/g++.dg/opt/max1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmax1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmax1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmax1.C?ref=8ff24a798e576cd22463248fb6975b5b58fd094e", "patch": "@@ -1,7 +1,7 @@\n /* PR middle-end/19068 */\n /* Test case by Andrew Pinski <pinskia@physics.uc.edu> */\n /* { dg-do run } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -Wno-deprecated\" } */\n \n extern \"C\" void abort (void);\n "}, {"sha": "02ce5988d703532aeb5f194f4e960cebe3111a44", "filename": "gcc/testsuite/g++.dg/opt/pr7503-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-2.C?ref=8ff24a798e576cd22463248fb6975b5b58fd094e", "patch": "@@ -1,6 +1,6 @@\n // PR c++/7503\n // { dg-do run }\n-// { dg-options \"-O2\" }\n+// { dg-options \"-O2 -Wno-deprecated\" }\n \n extern \"C\" void abort();\n "}, {"sha": "4e8de0f207ca52ea03db03f9b9ca01adb4f44872", "filename": "gcc/testsuite/g++.dg/opt/pr7503-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-3.C?ref=8ff24a798e576cd22463248fb6975b5b58fd094e", "patch": "@@ -1,6 +1,6 @@\n // PR c++/7503\n // { dg-do compile }\n-// { dg-options \"-O2\" }\n+// { dg-options \"-O2 -Wno-deprecated\" }\n \n extern int A, B;\n "}, {"sha": "7ed70946984346e5d6c2ed0a0d3849b8d73e1e88", "filename": "gcc/testsuite/g++.dg/opt/pr7503-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-4.C?ref=8ff24a798e576cd22463248fb6975b5b58fd094e", "patch": "@@ -1,6 +1,6 @@\n // PR c++/7503\n // { dg-do run }\n-// { dg-options \"-O2\" }\n+// { dg-options \"-O2 -Wno-deprecated\" }\n \n extern \"C\" void abort();\n "}, {"sha": "236ac93aa3aece57b6a4a247739b32abf6743221", "filename": "gcc/testsuite/g++.dg/opt/pr7503-5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr7503-5.C?ref=8ff24a798e576cd22463248fb6975b5b58fd094e", "patch": "@@ -1,6 +1,6 @@\n // PR c++/7503\n // { dg-do run }\n-// { dg-options \"-O2\" }\n+// { dg-options \"-O2 -Wno-deprecated\" }\n \n extern \"C\" void abort();\n "}, {"sha": "7431bfc3c4ef954419eaa0f0b647d0e01eca2001", "filename": "gcc/testsuite/g++.dg/warn/minmax.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fminmax.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ff24a798e576cd22463248fb6975b5b58fd094e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fminmax.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fminmax.C?ref=8ff24a798e576cd22463248fb6975b5b58fd094e", "patch": "@@ -0,0 +1,15 @@\n+int i, j, k;\n+\n+void f() {\n+  i = j <? k; // { dg-warning \"deprecated\" }\n+  i = j >? k; // { dg-warning \"deprecated\" }\n+  i <?= j; // { dg-warning \"deprecated\" }\n+  i >?= j; // { dg-warning \"deprecated\" }\n+}\n+\n+struct S {\n+  void operator<?(int); // { dg-warning \"deprecated\" }\n+  void operator>?(int); // { dg-warning \"deprecated\" }\n+  void operator<?=(int); // { dg-warning \"deprecated\" }\n+  void operator>?=(int); // { dg-warning \"deprecated\" }\n+};"}]}