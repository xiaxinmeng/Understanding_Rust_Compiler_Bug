{"sha": "e9b75848c387d7c40ae8099b29f76bf473feb728", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTliNzU4NDhjMzg3ZDdjNDBhZTgwOTliMjlmNzZiZjQ3M2ZlYjcyOA==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-12-16T16:29:43Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2018-12-16T16:29:43Z"}, "message": "re PR fortran/88116 (ICE in gfc_convert_constant(): Unexpected type)\n\n2018-12-16  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/88116\n\tPR fortran/88467\n\t* array.c (gfc_match_array_constructor): Check return value of\n\tgfc_convert_type().  Skip constructor elements with BT_UNKNOWN,\n\twhich need to go through resolution.\n\t* intrinsic.c (gfc_convert_type_warn): Return early if the types\n\tmartch (i.e., no conversion is required).\n\t* simplify.c (gfc_convert_constant): Remove a gfc_internal_error,\n\tand return gfc_bad_expr.\n\n2018-12-16  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/88116\n\t* gfortran.dg/pr88116_1.f90: New test.\n\t* gfortran.dg/pr88116_2.f90: Ditto.\n\n\tPR fortran/88467\n\t* gfortran.dg/pr88467.f90: New test.\n\nFrom-SVN: r267189", "tree": {"sha": "3324a2d41b9da5469722a0846b912698fac5f58e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3324a2d41b9da5469722a0846b912698fac5f58e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9b75848c387d7c40ae8099b29f76bf473feb728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9b75848c387d7c40ae8099b29f76bf473feb728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9b75848c387d7c40ae8099b29f76bf473feb728", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9b75848c387d7c40ae8099b29f76bf473feb728/comments", "author": null, "committer": null, "parents": [{"sha": "26ca4e0587542437e2aae4682a63efe50523d738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26ca4e0587542437e2aae4682a63efe50523d738", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26ca4e0587542437e2aae4682a63efe50523d738"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "c25a45045d51ec249ce75e83588c374b10fe9728", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b75848c387d7c40ae8099b29f76bf473feb728/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b75848c387d7c40ae8099b29f76bf473feb728/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e9b75848c387d7c40ae8099b29f76bf473feb728", "patch": "@@ -1,3 +1,15 @@\n+2018-12-16  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/88116\n+\tPR fortran/88467\n+\t* array.c (gfc_match_array_constructor): Check return value of\n+\tgfc_convert_type().  Skip constructor elements with BT_UNKNOWN,\n+\twhich need to go through resolution.\n+\t* intrinsic.c (gfc_convert_type_warn): Return early if the types\n+\tmatch (i.e., no conversion is required).\n+\t* simplify.c (gfc_convert_constant): Remove a gfc_internal_error,\n+\tand return gfc_bad_expr.\n+\n 2018-12-16  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* decl.c (variable_decl): Typo fixes in comment and error messsage."}, {"sha": "1c5af7997f9716557fb298a10bce38a9d1e39358", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b75848c387d7c40ae8099b29f76bf473feb728/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b75848c387d7c40ae8099b29f76bf473feb728/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=e9b75848c387d7c40ae8099b29f76bf473feb728", "patch": "@@ -1246,7 +1246,9 @@ gfc_match_array_constructor (gfc_expr **result)\n \t{\n \t  c = gfc_constructor_first (head);\n \t  for (; c; c = gfc_constructor_next (c))\n-\t    gfc_convert_type (c->expr, &ts, 1);\n+\t    if (!gfc_convert_type (c->expr, &ts, 1)\n+\t\t&& c->expr->ts.type != BT_UNKNOWN)\n+\t      return MATCH_ERROR;\n \t}\n     }\n   else"}, {"sha": "0e0e6fe8314875e6d9e6cc63a94afd5c8b0e2ea4", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b75848c387d7c40ae8099b29f76bf473feb728/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b75848c387d7c40ae8099b29f76bf473feb728/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=e9b75848c387d7c40ae8099b29f76bf473feb728", "patch": "@@ -5030,6 +5030,13 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n   if (expr->ts.type == BT_UNKNOWN)\n     goto bad;\n \n+  /* In building an array constructor, gfortran can end up here when no\n+     conversion is required for an intrinsic type.  We need to let derived\n+     types drop through.  */\n+  if (from_ts.type != BT_DERIVED\n+      && (from_ts.type == ts->type && from_ts.kind == ts->kind))\n+    return true;\n+\n   if (expr->ts.type == BT_DERIVED && ts->type == BT_DERIVED\n       && gfc_compare_types (&expr->ts, ts))\n     return true;"}, {"sha": "4ee1f776a702f9901a8ecec6431365050d3b0078", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b75848c387d7c40ae8099b29f76bf473feb728/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b75848c387d7c40ae8099b29f76bf473feb728/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=e9b75848c387d7c40ae8099b29f76bf473feb728", "patch": "@@ -8360,7 +8360,7 @@ gfc_convert_constant (gfc_expr *e, bt type, int kind)\n \n     default:\n     oops:\n-      gfc_internal_error (\"gfc_convert_constant(): Unexpected type\");\n+      return &gfc_bad_expr;\n     }\n \n   result = NULL;"}, {"sha": "427697909302f3e118994ccb33f14d60c0535293", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b75848c387d7c40ae8099b29f76bf473feb728/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b75848c387d7c40ae8099b29f76bf473feb728/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9b75848c387d7c40ae8099b29f76bf473feb728", "patch": "@@ -1,3 +1,12 @@\n+2018-12-16  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/88116\n+\t* gfortran.dg/pr88116_1.f90: New test.\n+\t* gfortran.dg/pr88116_2.f90: Ditto.\n+\n+\tPR fortran/88467\n+\t* gfortran.dg/pr88467.f90: New test.\n+\n 2018-12-16  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* gfortran.dg/pr88138.f90: Remove extraneous 's' in comment."}, {"sha": "a64c818671ec62803997ce29339036c225a80567", "filename": "gcc/testsuite/gfortran.dg/pr88116_1.f90", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b75848c387d7c40ae8099b29f76bf473feb728/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88116_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b75848c387d7c40ae8099b29f76bf473feb728/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88116_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88116_1.f90?ref=e9b75848c387d7c40ae8099b29f76bf473feb728", "patch": "@@ -0,0 +1,4 @@\n+! { dg-do compile }\n+program p\n+   print *, [integer :: 1, [integer(8) :: 2, ['3']]] ! { dg-error \"Can't convert\" }\n+end"}, {"sha": "cb0684fd49afb17fa366b1b83009d6a5c4a76d37", "filename": "gcc/testsuite/gfortran.dg/pr88116_2.f90", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b75848c387d7c40ae8099b29f76bf473feb728/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88116_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b75848c387d7c40ae8099b29f76bf473feb728/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88116_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88116_2.f90?ref=e9b75848c387d7c40ae8099b29f76bf473feb728", "patch": "@@ -0,0 +1,7 @@\n+! { dg-do run }\n+program p\n+  real :: a(2) = [real :: 1, [integer :: (real(k), k=2,1), 2]]\n+  real :: b(1) = [real :: [integer :: (dble(k), k=1,0), 2]]\n+  if (a(1) /= 1. .or. a(2) /= 2. .or. b(1) /= 2.) stop 1\n+end\n+"}, {"sha": "6a9666284a3150204dcbeda970f97f1613feba67", "filename": "gcc/testsuite/gfortran.dg/pr88467.f90", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9b75848c387d7c40ae8099b29f76bf473feb728/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88467.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9b75848c387d7c40ae8099b29f76bf473feb728/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88467.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88467.f90?ref=e9b75848c387d7c40ae8099b29f76bf473feb728", "patch": "@@ -0,0 +1,4 @@\n+! { dg-do compile }\n+program foo\n+   print *, [integer :: 1, [integer(8) :: 2, '3']] ! { dg-error \"Can't convert\" }\n+end program foo"}]}