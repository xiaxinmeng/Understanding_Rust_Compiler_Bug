{"sha": "3a8e3f636ac1597af351f7907ab684959d41b226", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E4ZTNmNjM2YWMxNTk3YWYzNTFmNzkwN2FiNjg0OTU5ZDQxYjIyNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T10:18:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T10:18:47Z"}, "message": "[multiple changes]\n\n2013-04-11  Johannes Kanig  <kanig@adacore.com>\n\n\t* opt.ads New global boolean Frame_Condition_Mode to avoid\n\treferring to command line switch.\n\t* gnat1drv.adb (Gnat1drv) set frame condition mode when -gnatd.G\n\tis present, and disable Code generation in that case. Disable\n\tALI file generation when switch is *not* present.\n\n2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Expression_Function): Perform the\n\tpre-analysis on a copy of the expression, to prevent downstream\n\tvisbility issues involving operators and instantiations.\n\nFrom-SVN: r197758", "tree": {"sha": "cd52ccb62e4c9a9292e2d4d5c617cfbdf4bc122f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd52ccb62e4c9a9292e2d4d5c617cfbdf4bc122f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a8e3f636ac1597af351f7907ab684959d41b226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a8e3f636ac1597af351f7907ab684959d41b226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a8e3f636ac1597af351f7907ab684959d41b226", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a8e3f636ac1597af351f7907ab684959d41b226/comments", "author": null, "committer": null, "parents": [{"sha": "0213fb4e3c39b3fcb889252ea358cf5775a541dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0213fb4e3c39b3fcb889252ea358cf5775a541dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0213fb4e3c39b3fcb889252ea358cf5775a541dd"}], "stats": {"total": 56, "additions": 42, "deletions": 14}, "files": [{"sha": "098860356950fda1f0423a46c424ebbd34196695", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a8e3f636ac1597af351f7907ab684959d41b226/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a8e3f636ac1597af351f7907ab684959d41b226/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3a8e3f636ac1597af351f7907ab684959d41b226", "patch": "@@ -1,3 +1,17 @@\n+2013-04-11  Johannes Kanig  <kanig@adacore.com>\n+\n+\t* opt.ads New global boolean Frame_Condition_Mode to avoid\n+\treferring to command line switch.\n+\t* gnat1drv.adb (Gnat1drv) set frame condition mode when -gnatd.G\n+\tis present, and disable Code generation in that case. Disable\n+\tALI file generation when switch is *not* present.\n+\n+2013-04-11  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Expression_Function): Perform the\n+\tpre-analysis on a copy of the expression, to prevent downstream\n+\tvisbility issues involving operators and instantiations.\n+\n 2013-04-11  Johannes Kanig  <kanig@adacore.com>\n \n \t* debug.adb: Reservation and documentation for -gnatd.G switch."}, {"sha": "37a4fb2fcae973f03b05867ec3b8c3cb6f404b5a", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a8e3f636ac1597af351f7907ab684959d41b226/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a8e3f636ac1597af351f7907ab684959d41b226/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=3a8e3f636ac1597af351f7907ab684959d41b226", "patch": "@@ -302,6 +302,18 @@ procedure Gnat1drv is\n             Strict_Alfa_Mode := True;\n          end if;\n \n+         --  Distinguish between the two modes of gnat2why: frame condition\n+         --  generation (generation of ALI files) and translation of Why (no\n+         --  ALI files generated). This is done with the switch -gnatd.G,\n+         --  which activates frame condition mode. The other changes in\n+         --  behavior depending on this switch are done in gnat2why directly.\n+\n+         if Debug_Flag_Dot_GG then\n+            Frame_Condition_Mode := True;\n+         else\n+            Opt.Disable_ALI_File := True;\n+         end if;\n+\n          --  Turn off inlining, which would confuse formal verification output\n          --  and gain nothing.\n \n@@ -409,16 +421,6 @@ procedure Gnat1drv is\n \n          Tagged_Type_Expansion := False;\n \n-         --  Distinguish between the two modes of gnat2why: frame condition\n-         --  generation (generation of ALI files) and translation of Why (no\n-         --  ALI files generated). This is done with the switch -gnatd.G,\n-         --  which activates frame condition mode. The other changes in\n-         --  behavior depending on this switch are done in gnat2why directly.\n-\n-         if not Debug_Flag_Dot_GG then\n-            Opt.Disable_ALI_File := True;\n-         end if;\n-\n       end if;\n \n       --  Set Configurable_Run_Time mode if system.ads flag set\n@@ -1041,10 +1043,11 @@ begin\n       elsif Main_Kind in N_Generic_Renaming_Declaration then\n          Back_End_Mode := Generate_Object;\n \n-      --  It is not an error to analyze (in CodePeer or Alfa modes) a spec\n-      --  which requires a body, when the body is not available.\n+      --  It is not an error to analyze (in CodePeer mode or Alfa mode with\n+      --  generation of Why) a spec which requires a body, when the body is\n+      --  not available.\n \n-      elsif CodePeer_Mode or Alfa_Mode then\n+      elsif CodePeer_Mode or (Alfa_Mode and not Frame_Condition_Mode) then\n          Back_End_Mode := Generate_Object;\n \n       --  In all other cases (specs which have bodies, generics, and bodies"}, {"sha": "5e80dc76fe1cdea2382f26daec450469e01ed36b", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a8e3f636ac1597af351f7907ab684959d41b226/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a8e3f636ac1597af351f7907ab684959d41b226/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=3a8e3f636ac1597af351f7907ab684959d41b226", "patch": "@@ -1984,6 +1984,12 @@ package Opt is\n    --  generation of Why code for those parts of the input code that belong to\n    --  the Alfa subset of Ada. Set by debug flag -gnatd.F.\n \n+   Frame_Condition_Mode : Boolean := False;\n+   --  Specific mode to be used in combination with Alfa_Mode. If set to\n+   --  true, ALI files containing the frame conditions (global effects) are\n+   --  generated, and Why files are *not* generated. If not true, Why files\n+   --  are generated. Set by debug flag -gnatd.G.\n+\n    Strict_Alfa_Mode : Boolean := False;\n    --  Interpret compiler permissions as strictly as possible. E.g. base ranges\n    --  for integers are limited to the strict minimum with this option. Set by"}, {"sha": "707ed45f56c7a0f16081d7ed114c4e9d81108774", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a8e3f636ac1597af351f7907ab684959d41b226/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a8e3f636ac1597af351f7907ab684959d41b226/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=3a8e3f636ac1597af351f7907ab684959d41b226", "patch": "@@ -444,7 +444,12 @@ package body Sem_Ch6 is\n             Insert_After (Last (Decls), New_Body);\n             Push_Scope (Id);\n             Install_Formals (Id);\n-            Preanalyze_Spec_Expression (Expression  (Ret), Etype (Id));\n+\n+            --  Do a preanalysis of the expression on a separate copy, to\n+            --  prevent visibility issues later with operators in instances.\n+\n+            Preanalyze_Spec_Expression\n+              (New_Copy_Tree (Expression  (Ret)), Etype (Id));\n             End_Scope;\n          end;\n       end if;"}]}