{"sha": "491483b026e0191a2683574d9bc2797bdd08207f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkxNDgzYjAyNmUwMTkxYTI2ODM1NzRkOWJjMjc5N2JkZDA4MjA3Zg==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2016-11-04T12:13:43Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2016-11-04T12:13:43Z"}, "message": "[ARC] Various small miscellaneous fixes.\n\ngcc/\n2016-11-04  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.c (arc_process_double_reg_moves): Use\n\tgen_dexcl_2op call.\n\t* config/arc/arc.md (movsi_insn): Disable unsupported move\n\tinstructions for ARCv2 cores.\n\t(movdi): Use prepare_move_operands.\n\t(movsf, movdf): Use move_dest_operand predicate.\n\t* config/arc/constraints.md (Chs): Enable when barrel shifter is\n\tpresent.\n\t* config/arc/fpu.md (divsf3): Change to divsf3_fpu.\n\t* config/arc/fpx.md (dexcl_3op_peep2_insn): Dx data register is\n\talso a destination.\n\t(dexcl_3op_peep2_insn_nores): Likewise.\n\t* config/arc/arc.h (SHIFT_COUNT_TRUNCATED): Define to one.\n\t(LINK_COMMAND_SPEC): Remove.\n\nFrom-SVN: r241842", "tree": {"sha": "f45972ac80bf8ffab1dfef036c319b2131196c08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f45972ac80bf8ffab1dfef036c319b2131196c08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/491483b026e0191a2683574d9bc2797bdd08207f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/491483b026e0191a2683574d9bc2797bdd08207f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/491483b026e0191a2683574d9bc2797bdd08207f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/491483b026e0191a2683574d9bc2797bdd08207f/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "964ef24cd591632a38c3e48154de389470df13df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/964ef24cd591632a38c3e48154de389470df13df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/964ef24cd591632a38c3e48154de389470df13df"}], "stats": {"total": 119, "additions": 58, "deletions": 61}, "files": [{"sha": "64ed5f1e0b0ec5886ef2f5d80b66a2fa1410985c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491483b026e0191a2683574d9bc2797bdd08207f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491483b026e0191a2683574d9bc2797bdd08207f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=491483b026e0191a2683574d9bc2797bdd08207f", "patch": "@@ -1,3 +1,20 @@\n+2016-11-04  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_process_double_reg_moves): Use\n+\tgen_dexcl_2op call.\n+\t* config/arc/arc.md (movsi_insn): Disable unsupported move\n+\tinstructions for ARCv2 cores.\n+\t(movdi): Use prepare_move_operands.\n+\t(movsf, movdf): Use move_dest_operand predicate.\n+\t* config/arc/constraints.md (Chs): Enable when barrel shifter is\n+\tpresent.\n+\t* config/arc/fpu.md (divsf3): Change to divsf3_fpu.\n+\t* config/arc/fpx.md (dexcl_3op_peep2_insn): Dx data register is\n+\talso a destination.\n+\t(dexcl_3op_peep2_insn_nores): Likewise.\n+\t* config/arc/arc.h (SHIFT_COUNT_TRUNCATED): Define to one.\n+\t(LINK_COMMAND_SPEC): Remove.\n+\n 2016-11-04  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/78185"}, {"sha": "5ba7ccc776f6b7cab812f091bbd9108c7c992618", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491483b026e0191a2683574d9bc2797bdd08207f/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491483b026e0191a2683574d9bc2797bdd08207f/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=491483b026e0191a2683574d9bc2797bdd08207f", "patch": "@@ -9020,10 +9020,7 @@ arc_process_double_reg_moves (rtx *operands)\n       rtx srcLow  = simplify_gen_subreg (SImode, src, DFmode,\n \t\t\t\t\tTARGET_BIG_ENDIAN ? 4 : 0);\n \n-      emit_insn (gen_rtx_UNSPEC_VOLATILE (Pmode,\n-\t\t\t\t\t  gen_rtvec (3, dest, srcHigh, srcLow),\n-\t\t\t\t\t  VUNSPEC_ARC_DEXCL_NORES));\n-\n+      emit_insn (gen_dexcl_2op (dest, srcHigh, srcLow));\n     }\n   else\n     gcc_unreachable ();"}, {"sha": "a4adce0812e69f8bee8c8b62871926a8bcaa6f6f", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491483b026e0191a2683574d9bc2797bdd08207f/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491483b026e0191a2683574d9bc2797bdd08207f/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=491483b026e0191a2683574d9bc2797bdd08207f", "patch": "@@ -128,24 +128,6 @@ along with GCC; see the file COPYING3.  If not see\n \t\t   %{!marclinux*: %{pg|p|profile:-marclinux_prof;: -marclinux}} \\\n \t\t   %{!z:-z max-page-size=0x2000 -z common-page-size=0x2000} \\\n \t\t   %{shared:-shared}\"\n-/* Like the standard LINK_COMMAND_SPEC, but add %G when building\n-   a shared library with -nostdlib, so that the hidden functions of libgcc\n-   will be incorporated.\n-   N.B., we don't want a plain -lgcc, as this would lead to re-exporting\n-   non-hidden functions, so we have to consider libgcc_s.so.* first, which in\n-   turn should be wrapped with --as-needed.  */\n-#define LINK_COMMAND_SPEC \"\\\n-%{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:\\\n-    %(linker) %l \" LINK_PIE_SPEC \"%X %{o*} %{A} %{d} %{e*} %{m} %{N} %{n} %{r}\\\n-    %{s} %{t} %{u*} %{x} %{z} %{Z} %{!A:%{!nostdlib:%{!nostartfiles:%S}}}\\\n-    %{static:} %{L*} %(mfwrap) %(link_libgcc) %o\\\n-    %{fopenacc|fopenmp|%:gt(%{ftree-parallelize-loops=*:%*} 1):\\\n-\t%:include(libgomp.spec)%(link_gomp)}\\\n-    %(mflib)\\\n-    %{fprofile-arcs|fprofile-generate|coverage:-lgcov}\\\n-    %{!nostdlib:%{!nodefaultlibs:%(link_ssp) %(link_gcc_c_sequence)}}\\\n-    %{!A:%{!nostdlib:%{!nostartfiles:%E}}} %{T*} }}}}}}\"\n-\n #else\n #define LINK_SPEC \"%{mbig-endian:-EB} %{EB} %{EL}\\\n   %{pg|p:-marcelf_prof;mA7|mARC700|mcpu=arc700|mcpu=ARC700: -marcelf}\"\n@@ -1570,13 +1552,10 @@ extern int arc_return_address_regs[4];\n /* Undo the effects of the movmem pattern presence on STORE_BY_PIECES_P .  */\n #define MOVE_RATIO(SPEED) ((SPEED) ? 15 : 3)\n \n-/* Define this to be nonzero if shift instructions ignore all but the low-order\n-   few bits. Changed from 1 to 0 for rotate pattern testcases\n-   (e.g. 20020226-1.c). This change truncates the upper 27 bits of a word\n-   while rotating a word. Came to notice through a combine phase\n-   optimization viz. a << (32-b) is equivalent to a << (-b).\n+/* Define this to be nonzero if shift instructions ignore all but the\n+   low-order few bits.\n */\n-#define SHIFT_COUNT_TRUNCATED 0\n+#define SHIFT_COUNT_TRUNCATED 1\n \n /* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n    is done just by pretending it is already truncated.  */"}, {"sha": "7147fbdb244ae06118ca606f4978b6c1517bc119", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491483b026e0191a2683574d9bc2797bdd08207f/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491483b026e0191a2683574d9bc2797bdd08207f/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=491483b026e0191a2683574d9bc2797bdd08207f", "patch": "@@ -704,9 +704,9 @@\n ; the iscompact attribute allows the epilogue expander to know for which\n ; insns it should lengthen the return insn.\n ; N.B. operand 1 of alternative 7 expands into pcl,symbol@gotpc .\n-(define_insn \"*movsi_insn\"                      ;   0     1     2    3  4 5   6   7   8   9   10  11  12    13   14  15  16     17     18 19   20    21    22 23 24    25 26  27   28   29\n-  [(set (match_operand:SI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,   h, w,w,  w,  w,  w,  w,???w, ?w,  w,Rcq#q,   w,Rcq,  S,   Us<,RcqRck,!*x,  r,!*Rsd,!*Rcd,r,Ucm,  Usd,m,???m,VUsc,VUsc\")\n-\t(match_operand:SI 1 \"move_src_operand\"  \"  cL,   cP,Rcq#q,hCm1,cL,I,Crr,Clo,Chi,Cbi,?Rac,Cpc,Clb, ?Cal,?Cal,  T,Rcq,RcqRck,   Us>,Usd,Ucm,  Usd,  Ucd,m,  w,!*Rzd,c,?Rac, Cm3, C32\"))]\n+(define_insn \"*movsi_insn\"                      ;   0     1     2     3  4 5   6   7   8   9   10  11  12    13   14  15  16     17     18 19   20    21    22 23 24    25 26  27   28   29\n+  [(set (match_operand:SI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,    h, w,w,  w,  w,  w,  w,???w, ?w,  w,Rcq#q,   w,Rcq,  S,   Us<,RcqRck,!*x,  r,!*Rsd,!*Rcd,r,Ucm,  Usd,m,???m,VUsc,VUsc\")\n+\t(match_operand:SI 1 \"move_src_operand\"  \"  cL,   cP,Rcq#q,hPCm1,cL,I,Crr,Clo,Chi,Cbi,?Rac,Cpc,Clb, ?Cal,?Cal,  T,Rcq,RcqRck,   Us>,Usd,Ucm,  Usd,  Ucd,m,  w,!*Rzd,c,?Rac, Cm3, C32\"))]\n   \"register_operand (operands[0], SImode)\n    || register_operand (operands[1], SImode)\n    || (CONSTANT_P (operands[1])\n@@ -751,7 +751,7 @@\n    ; of Crr to 4.\n    (set_attr \"length\" \"*,*,*,*,4,4,4,4,4,4,4,8,8,*,8,*,*,*,*,*,4,*,4,*,*,*,*,*,4,8\")\n    (set_attr \"predicable\" \"yes,no,yes,no,yes,no,no,no,no,no,yes,no,no,yes,yes,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no\")\n-   (set_attr \"cpu_facility\" \"*,*,av1,av2,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,av2,av2,*,*,av2,*,*,av2,*\")])\n+   (set_attr \"cpu_facility\" \"av1,av1,av1,av2,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,av2,av2,*,*,av2,*,*,av2,*\")])\n \n ;; Sometimes generated by the epilogue code.  We don't want to\n ;; recognize these addresses in general, because the limm is costly,\n@@ -1088,12 +1088,9 @@\n \t(match_operand:DI 1 \"general_operand\" \"\"))]\n   \"\"\n   \"\n-{\n-  /* Everything except mem = const or mem = mem can be done easily.  */\n-\n-  if (GET_CODE (operands[0]) == MEM)\n-    operands[1] = force_reg (DImode, operands[1]);\n-}\")\n+  if (prepare_move_operands (operands, DImode))\n+    DONE;\n+  \")\n \n (define_insn_and_split \"*movdi_insn\"\n   [(set (match_operand:DI 0 \"move_dest_operand\"      \"=w, w,r,m\")\n@@ -1140,7 +1137,7 @@\n ;; Floating point move insns.\n \n (define_expand \"movsf\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"\")\n+  [(set (match_operand:SF 0 \"move_dest_operand\" \"\")\n \t(match_operand:SF 1 \"general_operand\" \"\"))]\n   \"\"\n   \"if (prepare_move_operands (operands, SFmode)) DONE;\")\n@@ -1161,7 +1158,7 @@\n    (set_attr \"iscompact\" \"true,false,false,false,false\")])\n \n (define_expand \"movdf\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n+  [(set (match_operand:DF 0 \"move_dest_operand\" \"\")\n \t(match_operand:DF 1 \"general_operand\" \"\"))]\n   \"\"\n   \"if (prepare_move_operands (operands, DFmode)) DONE;\")\n@@ -1231,12 +1228,18 @@\n     ; second time to put back the contents which the first DEXCLx\n     ; will have overwritten\n     ; dexcl2 r0, r1, r0\n-    (set (match_dup 4) ; aka r0result\n-     \t ; aka DF, r1, r0\n-\t (unspec_volatile:SI [(match_dup 1) (match_dup 5) (match_dup 4)] VUNSPEC_ARC_DEXCL ))\n+    (parallel [\n+\t       (set (match_dup 4) ; aka r0result\n+\t\t\t\t  ; aka DF, r1, r0\n+\t\t    (unspec_volatile:SI [(match_dup 5) (match_dup 4)]\n+\t\t\t\t\tVUNSPEC_ARC_DEXCL))\n+\t       (clobber (match_dup 1))\n+\t       ])\n     ; Generate the second, which makes sure operand5 and operand4 values\n     ; are put back in the Dx register properly.\n-    (unspec_volatile:SI [(match_dup 1) (match_dup 5) (match_dup 4)] VUNSPEC_ARC_DEXCL_NORES )\n+    (set (match_dup 1) (unspec_volatile:DF\n+\t\t\t[(match_dup 5) (match_dup 4)]\n+\t\t\tVUNSPEC_ARC_DEXCL_NORES))\n \n     ; Note: we cannot use a (clobber (match_scratch)) here because\n     ; the combine pass will end up replacing uses of it with 0"}, {"sha": "8eccb2fdfe378a5fb163ac32f6c3c528e513aa4a", "filename": "gcc/config/arc/constraints.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491483b026e0191a2683574d9bc2797bdd08207f/gcc%2Fconfig%2Farc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491483b026e0191a2683574d9bc2797bdd08207f/gcc%2Fconfig%2Farc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fconstraints.md?ref=491483b026e0191a2683574d9bc2797bdd08207f", "patch": "@@ -256,7 +256,8 @@\n  \"@internal\n   constant for a highpart that can be checked with a shift (asr.f 0,rn,m)\"\n   (and (match_code \"const_int\")\n-       (match_test \"IS_POWEROF2_P (-ival)\")))\n+       (match_test \"IS_POWEROF2_P (-ival)\")\n+       (match_test \"TARGET_BARREL_SHIFTER\")))\n \n (define_constraint \"Clo\"\n  \"@internal"}, {"sha": "e43047ce1d6bc9e974b9863a2cd0d12277cca024", "filename": "gcc/config/arc/fpu.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491483b026e0191a2683574d9bc2797bdd08207f/gcc%2Fconfig%2Farc%2Ffpu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491483b026e0191a2683574d9bc2797bdd08207f/gcc%2Fconfig%2Farc%2Ffpu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ffpu.md?ref=491483b026e0191a2683574d9bc2797bdd08207f", "patch": "@@ -193,11 +193,13 @@\n    (set_attr \"type\" \"fpu\")])\n \n ;; Division\n-(define_insn \"divsf3\"\n+(define_insn \"*divsf3_fpu\"\n   [(set (match_operand:SF 0 \"register_operand\"         \"=r,r,r,r,r\")\n \t(div:SF (match_operand:SF 1 \"nonmemory_operand\" \"0,r,0,r,F\")\n \t\t(match_operand:SF 2 \"nonmemory_operand\" \"r,r,F,F,r\")))]\n-  \"TARGET_FP_SP_SQRT\"\n+  \"TARGET_FP_SP_SQRT\n+   && (register_operand (operands[1], SFmode)\n+       || register_operand (operands[2], SFmode))\"\n   \"fsdiv%? %0,%1,%2\"\n   [(set_attr \"length\" \"4,4,8,8,8\")\n    (set_attr \"iscompact\" \"false\")"}, {"sha": "9ed2b7c683ab0a1f9725a4defcf21bd31882cd5b", "filename": "gcc/config/arc/fpx.md", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/491483b026e0191a2683574d9bc2797bdd08207f/gcc%2Fconfig%2Farc%2Ffpx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/491483b026e0191a2683574d9bc2797bdd08207f/gcc%2Fconfig%2Farc%2Ffpx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ffpx.md?ref=491483b026e0191a2683574d9bc2797bdd08207f", "patch": "@@ -168,28 +168,26 @@\n (set_attr \"type\" \"lr\")]\n )\n \n-\n (define_insn \"*dexcl_3op_peep2_insn\"\n   [(set (match_operand:SI 0 \"dest_reg_operand\" \"=r\") ; not register_operand, to accept SUBREG\n-\t\t   (unspec_volatile:SI [\n-\t\t   \t\t\t(match_operand:DF 1 \"arc_double_register_operand\" \"D\")\n-\t\t\t\t\t(match_operand:SI 2 \"shouldbe_register_operand\" \"r\")  ; r1\n-\t\t\t\t\t(match_operand:SI 3 \"shouldbe_register_operand\" \"r\") ; r0\n-\t\t\t\t\t] VUNSPEC_ARC_DEXCL ))\n-  ]\n+\t(unspec_volatile:SI\n+\t [(match_operand:SI 1 \"shouldbe_register_operand\" \"r\") ; r1\n+\t  (match_operand:SI 2 \"shouldbe_register_operand\" \"r\") ; r0\n+\t  ] VUNSPEC_ARC_DEXCL ))\n+   (clobber (match_operand:DF 3 \"arc_double_register_operand\" \"=&D\"))]\n   \"TARGET_DPFP\"\n-  \"dexcl%F1 %0, %2, %3\"\n+  \"dexcl%F3 %0, %1, %2\"\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"4\")]\n )\n \n ;; version which will not overwrite operand0\n-(define_insn \"*dexcl_3op_peep2_insn_nores\"\n-  [   (unspec_volatile:SI [\n-\t\t   \t\t\t(match_operand:DF 0 \"arc_double_register_operand\" \"D\")\n-\t\t\t\t\t(match_operand:SI 1 \"shouldbe_register_operand\" \"r\")  ; r1\n-\t\t\t\t\t(match_operand:SI 2 \"shouldbe_register_operand\" \"r\") ; r0\n-\t\t\t\t\t] VUNSPEC_ARC_DEXCL_NORES )\n+(define_insn \"dexcl_2op\"\n+  [(set (match_operand:DF 0 \"arc_double_register_operand\" \"=D\")\n+\t(unspec_volatile:DF\n+\t [(match_operand:SI 1 \"shouldbe_register_operand\" \"r\") ; r1\n+\t  (match_operand:SI 2 \"shouldbe_register_operand\" \"r\") ; r0\n+\t  ] VUNSPEC_ARC_DEXCL_NORES))\n   ]\n   \"TARGET_DPFP\"\n   \"dexcl%F0 0, %1, %2\""}]}