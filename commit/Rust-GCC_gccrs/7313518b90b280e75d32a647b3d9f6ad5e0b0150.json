{"sha": "7313518b90b280e75d32a647b3d9f6ad5e0b0150", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMxMzUxOGI5MGIyODBlNzVkMzJhNjQ3YjNkOWY2YWQ1ZTBiMDE1MA==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2007-07-11T13:50:13Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2007-07-11T13:50:13Z"}, "message": "params.def (PARAM_VERIFY_CANONICAL_TYPES): Remove.\n\n2007-07-11  Douglas Gregor  <doug.gregor@gmail.com>\n\n       * params.def (PARAM_VERIFY_CANONICAL_TYPES): Remove.\n       (PARAM_USE_CANONICAL_TYPES): New; decides whether to use canonical\n       types or not.\n       * params.h (VERIFY_CANONICAL_TYPES): Remove.\n       (USE_CANONICAL_TYPES): New.\n       * doc/invoke.texi (verify-canonical-types): Remove.\n       (use-canonical-types): Add.\n\n2007-07-11  Douglas Gregor  <doug.gregor@gmail.com>\n\n       * typeck.c (comptypes): When USE_CANONICAL_TYPES, use the\n       canonical types; otherwise, fall back to structural type\n       comparisons. If ENABLE_CHECKING and USE_CANONICAL_TYPES, give an\n       internal compiler error if the canonical types are wrong.\n\nFrom-SVN: r126550", "tree": {"sha": "1f482a01f0df0a7fe6691efc8bb9d3348de39c45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f482a01f0df0a7fe6691efc8bb9d3348de39c45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7313518b90b280e75d32a647b3d9f6ad5e0b0150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7313518b90b280e75d32a647b3d9f6ad5e0b0150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7313518b90b280e75d32a647b3d9f6ad5e0b0150", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7313518b90b280e75d32a647b3d9f6ad5e0b0150/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "039cb258334f8c69acd5de99c33f781cff49c535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/039cb258334f8c69acd5de99c33f781cff49c535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/039cb258334f8c69acd5de99c33f781cff49c535"}], "stats": {"total": 103, "additions": 56, "deletions": 47}, "files": [{"sha": "4a01bbe04c8083d41e7e0c0d69db187f84c628c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7313518b90b280e75d32a647b3d9f6ad5e0b0150/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7313518b90b280e75d32a647b3d9f6ad5e0b0150/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7313518b90b280e75d32a647b3d9f6ad5e0b0150", "patch": "@@ -1,3 +1,13 @@\n+2007-07-11  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\t* params.def (PARAM_VERIFY_CANONICAL_TYPES): Remove.\n+\t(PARAM_USE_CANONICAL_TYPES): New; decides whether to use canonical \n+\ttypes or not.\n+\t* params.h (VERIFY_CANONICAL_TYPES): Remove.\n+\t(USE_CANONICAL_TYPES): New.\n+\t* doc/invoke.texi (verify-canonical-types): Remove.\n+\t(use-canonical-types): Add.\n+\t\n 2007-07-11  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/spu/spu.c (spu_optimization_options): Remove setting of"}, {"sha": "8165176ae5ede5cc0420d90d07b3991b7a7eec43", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7313518b90b280e75d32a647b3d9f6ad5e0b0150/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7313518b90b280e75d32a647b3d9f6ad5e0b0150/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7313518b90b280e75d32a647b3d9f6ad5e0b0150", "patch": "@@ -1,3 +1,10 @@\n+2007-07-11  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\t* typeck.c (comptypes): When USE_CANONICAL_TYPES, use the\n+\tcanonical types; otherwise, fall back to structural type\n+\tcomparisons. If ENABLE_CHECKING and USE_CANONICAL_TYPES, give an\n+\tinternal compiler error if the canonical types are wrong.\n+\t\n 2007-07-11  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR c++/32560"}, {"sha": "4f08c8e9aa7717778f7710fa3626bbe95a92a67b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 21, "deletions": 26, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7313518b90b280e75d32a647b3d9f6ad5e0b0150/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7313518b90b280e75d32a647b3d9f6ad5e0b0150/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=7313518b90b280e75d32a647b3d9f6ad5e0b0150", "patch": "@@ -1108,8 +1108,6 @@ comptypes (tree t1, tree t2, int strict)\n {\n   if (strict == COMPARE_STRICT)\n     {\n-      bool result;\n-\n       if (t1 == t2)\n \treturn true;\n \n@@ -1121,37 +1119,34 @@ comptypes (tree t1, tree t2, int strict)\n \t   perform a deep check. */\n \treturn structural_comptypes (t1, t2, strict);\n \n-      if (VERIFY_CANONICAL_TYPES)\n+#ifdef ENABLE_CHECKING\n+      if (USE_CANONICAL_TYPES)\n \t{\n-\t  result = structural_comptypes (t1, t2, strict);\n-\n+\t  bool result = structural_comptypes (t1, t2, strict);\n+\t  \n \t  if (result && TYPE_CANONICAL (t1) != TYPE_CANONICAL (t2))\n-\t    {\n-\t      /* The two types are structurally equivalent, but their\n-\t\t canonical types were different. This is a failure of the\n-\t\t canonical type propagation code.*/\n-\t      warning(0,\n-\t\t      \"canonical types differ for identical types %T and %T\", \n-\t\t      t1, t2);\n-\t      debug_tree (t1);\n-\t      debug_tree (t2);\n-\t    }\n+\t    /* The two types are structurally equivalent, but their\n+\t       canonical types were different. This is a failure of the\n+\t       canonical type propagation code.*/\n+\t    internal_error \n+\t      (\"canonical types differ for identical types %T and %T\", \n+\t       t1, t2);\n \t  else if (!result && TYPE_CANONICAL (t1) == TYPE_CANONICAL (t2))\n-\t    {\n-\t      /* Two types are structurally different, but the canonical\n-\t\t types are the same. This means we were over-eager in\n-\t\t assigning canonical types. */\n-\t      warning (0, \n-\t\t       \"same canonical type node for different types %T and %T\",\n-\t\t       t1, t2);\n-\t      debug_tree (t1);\n-\t      debug_tree (t2);\n-\t    }\n+\t    /* Two types are structurally different, but the canonical\n+\t       types are the same. This means we were over-eager in\n+\t       assigning canonical types. */\n+\t    internal_error \n+\t      (\"same canonical type node for different types %T and %T\",\n+\t       t1, t2);\n \t  \n \t  return result;\n \t}\n-      else\n+#else\n+      if (USE_CANONICAL_TYPES)\n \treturn TYPE_CANONICAL (t1) == TYPE_CANONICAL (t2);\n+#endif\n+      else\n+\treturn structural_comptypes (t1, t2, strict);\n     }\n   else if (strict == COMPARE_STRUCTURAL)\n     return structural_comptypes (t1, t2, COMPARE_STRICT);"}, {"sha": "c954b9fe9d5d00f5f34ca93a2082a1e2fecf972f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7313518b90b280e75d32a647b3d9f6ad5e0b0150/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7313518b90b280e75d32a647b3d9f6ad5e0b0150/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7313518b90b280e75d32a647b3d9f6ad5e0b0150", "patch": "@@ -6960,12 +6960,12 @@ The size of cache line in L1 cache, in bytes.\n @item l1-cache-size\n The number of cache lines in L1 cache.\n \n-@item verify-canonical-types\n-Whether the compiler should verify the ``canonical'' types used for\n-type equality comparisons within the C++ and Objective-C++ front\n-ends. Set to 1 (the default when GCC is configured with\n---enable-checking) to enable verification, 0 to disable verification\n-(the default when GCC is configured with --disable-checking).\n+@item use-canonical-types\n+Whether the compiler should use the ``canonical'' type system.  By\n+default, this should always be 1, which uses a more efficient internal\n+mechanism for comparing types in C++ and Objective-C++.  However, if\n+bugs in the canonical type system are causing compilation failures,\n+set this value to 0 to disable canonical types.\n \n @end table\n @end table"}, {"sha": "c9d5b8084dd563ccd72637a76e85acb9ce2ddf26", "filename": "gcc/params.def", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7313518b90b280e75d32a647b3d9f6ad5e0b0150/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7313518b90b280e75d32a647b3d9f6ad5e0b0150/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=7313518b90b280e75d32a647b3d9f6ad5e0b0150", "patch": "@@ -673,19 +673,16 @@ DEFPARAM (PARAM_L1_CACHE_LINE_SIZE,\n \t  \"The size of L1 cache line\",\n \t  32, 0, 0)\n \n-#ifdef ENABLE_CHECKING\n-# define GCC_CANONICAL_TYPES_DEFAULT 1\n-#else\n-# define GCC_CANONICAL_TYPES_DEFAULT 0\n-#endif\n-\n-/* Whether we should verify that the canonical types in the system are\n-   consistent with the \"structural\" typing. */\n-\n-DEFPARAM (PARAM_VERIFY_CANONICAL_TYPES,\n-\t  \"verify-canonical-types\",\n-\t  \"Whether to verify canonical types\",\n-\t  GCC_CANONICAL_TYPES_DEFAULT, 0, 1)\n+/* Whether we should use canonical types rather than deep \"structural\"\n+   type checking.  Setting this value to 1 (the default) improves\n+   compilation performance in the C++ and Objective-C++ front end;\n+   this value should only be set to zero to work around bugs in the\n+   canonical type system by disabling it.  */\n+\n+DEFPARAM (PARAM_USE_CANONICAL_TYPES,\n+\t  \"use-canonical-types\",\n+\t  \"Whether to use canonical types\",\n+\t  1, 0, 1)\n /*\n Local variables:\n mode:c"}, {"sha": "410ae335fe492e1fb0d0fa0a5d17a6a03bc03461", "filename": "gcc/params.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7313518b90b280e75d32a647b3d9f6ad5e0b0150/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7313518b90b280e75d32a647b3d9f6ad5e0b0150/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=7313518b90b280e75d32a647b3d9f6ad5e0b0150", "patch": "@@ -168,6 +168,6 @@ typedef enum compiler_param\n   PARAM_VALUE (PARAM_L1_CACHE_SIZE)\n #define L1_CACHE_LINE_SIZE \\\n   PARAM_VALUE (PARAM_L1_CACHE_LINE_SIZE)\n-#define VERIFY_CANONICAL_TYPES \\\n-  PARAM_VALUE (PARAM_VERIFY_CANONICAL_TYPES)\n+#define USE_CANONICAL_TYPES \\\n+  PARAM_VALUE (PARAM_USE_CANONICAL_TYPES)\n #endif /* ! GCC_PARAMS_H */"}]}