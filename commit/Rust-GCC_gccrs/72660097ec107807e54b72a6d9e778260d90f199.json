{"sha": "72660097ec107807e54b72a6d9e778260d90f199", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI2NjAwOTdlYzEwNzgwN2U1NGI3MmE2ZDllNzc4MjYwZDkwZjE5OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-02-01T18:15:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-02-01T18:15:39Z"}, "message": "re PR libstdc++/46914 (std::atomic<int*>::exchange(...) doesn't store correct value.)\n\n2011-02-01  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/46914\n\t* include/bits/atomic_0.h (_ATOMIC_STORE_, _ATOMIC_MODIFY_,\n\t_ATOMIC_CMPEXCHNG_): Rename __v -> __w, and __m -> __n, to\n\tavoid name conflicts.\n\nFrom-SVN: r169494", "tree": {"sha": "de8e5656bb710a986e27874f2feb69d0320c9853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de8e5656bb710a986e27874f2feb69d0320c9853"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72660097ec107807e54b72a6d9e778260d90f199", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72660097ec107807e54b72a6d9e778260d90f199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72660097ec107807e54b72a6d9e778260d90f199", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72660097ec107807e54b72a6d9e778260d90f199/comments", "author": null, "committer": null, "parents": [{"sha": "04f089357e00b4840b8e5c1757f5c45275dd5af2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f089357e00b4840b8e5c1757f5c45275dd5af2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04f089357e00b4840b8e5c1757f5c45275dd5af2"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "d6eac2072ee20c18ce6ba17e9f5add01597b08a8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72660097ec107807e54b72a6d9e778260d90f199/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72660097ec107807e54b72a6d9e778260d90f199/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=72660097ec107807e54b72a6d9e778260d90f199", "patch": "@@ -1,3 +1,10 @@\n+2011-02-01  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/46914\n+\t* include/bits/atomic_0.h (_ATOMIC_STORE_, _ATOMIC_MODIFY_,\n+\t_ATOMIC_CMPEXCHNG_): Rename __v -> __w, and __m -> __n, to\n+\tavoid name conflicts.\n+\n 2011-02-01  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/47560"}, {"sha": "02fa9695d9577e0cd9d68ef2abdc19027cf2aa45", "filename": "libstdc++-v3/include/bits/atomic_0.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72660097ec107807e54b72a6d9e778260d90f199/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72660097ec107807e54b72a6d9e778260d90f199/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h?ref=72660097ec107807e54b72a6d9e778260d90f199", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header.\n \n-// Copyright (C) 2008, 2009, 2010\n+// Copyright (C) 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -68,41 +68,41 @@ namespace __atomic0\n     atomic_flag_clear_explicit(__g, __x);\t\t       \t\t   \\\n     __r; })\n \n-#define _ATOMIC_STORE_(__a, __m, __x)\t\t\t\t\t   \\\n+#define _ATOMIC_STORE_(__a, __n, __x)\t\t\t\t\t   \\\n   ({typedef __typeof__(_ATOMIC_MEMBER_) __i_type;                          \\\n     __i_type* __p = &_ATOMIC_MEMBER_;\t   \t\t\t\t   \\\n-    __typeof__(__m) __v = (__m);\t\t\t       \t\t   \\\n+    __typeof__(__n) __w = (__n);\t\t\t       \t\t   \\\n     __atomic_flag_base* __g = __atomic_flag_for_address(__p);\t  \t   \\\n     __atomic_flag_wait_explicit(__g, __x);\t\t\t\t   \\\n-    *__p = __v;\t\t\t\t\t\t\t\t   \\\n+    *__p = __w;\t\t\t\t\t\t\t\t   \\\n     atomic_flag_clear_explicit(__g, __x);\t\t       \t\t   \\\n-    __v; })\n+    __w; })\n \n-#define _ATOMIC_MODIFY_(__a, __o, __m, __x)\t\t\t\t   \\\n+#define _ATOMIC_MODIFY_(__a, __o, __n, __x)\t\t\t\t   \\\n   ({typedef __typeof__(_ATOMIC_MEMBER_) __i_type;                          \\\n     __i_type* __p = &_ATOMIC_MEMBER_;\t   \t\t\t\t   \\\n-    __typeof__(__m) __v = (__m);\t\t\t       \t\t   \\\n+    __typeof__(__n) __w = (__n);\t\t\t       \t\t   \\\n     __atomic_flag_base* __g = __atomic_flag_for_address(__p);\t  \t   \\\n     __atomic_flag_wait_explicit(__g, __x);\t\t\t\t   \\\n     __i_type __r = *__p;\t\t       \t\t\t\t   \\\n-    *__p __o __v;\t\t\t\t\t       \t\t   \\\n+    *__p __o __w;\t\t\t\t\t       \t\t   \\\n     atomic_flag_clear_explicit(__g, __x);\t\t       \t\t   \\\n     __r; })\n \n-#define _ATOMIC_CMPEXCHNG_(__a, __e, __m, __x)\t\t\t\t   \\\n+#define _ATOMIC_CMPEXCHNG_(__a, __e, __n, __x)\t\t\t\t   \\\n   ({typedef __typeof__(_ATOMIC_MEMBER_) __i_type;                          \\\n     __i_type* __p = &_ATOMIC_MEMBER_;\t   \t\t\t\t   \\\n     __typeof__(__e) __q = (__e);\t\t\t       \t\t   \\\n-    __typeof__(__m) __v = (__m);\t\t\t       \t\t   \\\n+    __typeof__(__n) __w = (__n);\t\t\t       \t\t   \\\n     bool __r;\t\t\t\t\t\t       \t\t   \\\n     __atomic_flag_base* __g = __atomic_flag_for_address(__p);\t   \t   \\\n     __atomic_flag_wait_explicit(__g, __x);\t\t\t\t   \\\n     __i_type __t = *__p;\t\t       \t\t\t\t   \\\n     if (*__q == __t) \t\t\t\t\t\t\t   \\\n-    {                                                                      \\\n-      *__p = (__i_type)__v;\t\t\t\t\t\t\\\n-      __r = true;                                                          \\\n-    }\t\t\t\t\t\t\t\t\t   \\\n+      {\t\t\t\t\t\t\t\t\t   \\\n+\t*__p = (__i_type)__w;\t\t\t\t\t\t   \\\n+\t__r = true;\t\t\t\t\t\t\t   \\\n+      }\t\t\t\t\t\t\t\t\t   \\\n     else { *__q = __t; __r = false; }\t\t       \t\t\t   \\\n     atomic_flag_clear_explicit(__g, __x);\t\t       \t\t   \\\n     __r; })"}]}