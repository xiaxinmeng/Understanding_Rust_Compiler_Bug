{"sha": "129bbe4330667aca34b1f15cb6db9e7615143acb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI5YmJlNDMzMDY2N2FjYTM0YjFmMTVjYjZkYjllNzYxNTE0M2FjYg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-06-13T10:26:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-06-13T10:26:34Z"}, "message": "sem_ch3.adb, [...]: Minor reformatting.\n\n2014-06-13  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, sem_ch9.adb, a-coinho.adb, a-coinho.ads: Minor\n\treformatting.\n\nFrom-SVN: r211628", "tree": {"sha": "ac067b42d0006129301b9981c84465c42a834989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac067b42d0006129301b9981c84465c42a834989"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/129bbe4330667aca34b1f15cb6db9e7615143acb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129bbe4330667aca34b1f15cb6db9e7615143acb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/129bbe4330667aca34b1f15cb6db9e7615143acb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129bbe4330667aca34b1f15cb6db9e7615143acb/comments", "author": null, "committer": null, "parents": [{"sha": "aca670a0a949d7b79bd7d70997df0e0fbbd71b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aca670a0a949d7b79bd7d70997df0e0fbbd71b5d"}], "stats": {"total": 64, "additions": 39, "deletions": 25}, "files": [{"sha": "22557b214096f4e5ee0def60fb14e6feca55c6a3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129bbe4330667aca34b1f15cb6db9e7615143acb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129bbe4330667aca34b1f15cb6db9e7615143acb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=129bbe4330667aca34b1f15cb6db9e7615143acb", "patch": "@@ -1,3 +1,8 @@\n+2014-06-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, sem_ch9.adb, a-coinho.adb, a-coinho.ads: Minor\n+\treformatting.\n+\n 2014-06-13  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_prag.adb (Analyze_Pragma): Add local"}, {"sha": "4cb717936d68702bcc7eebb1393a34474bd98c00", "filename": "gcc/ada/a-coinho.adb", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129bbe4330667aca34b1f15cb6db9e7615143acb/gcc%2Fada%2Fa-coinho.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129bbe4330667aca34b1f15cb6db9e7615143acb/gcc%2Fada%2Fa-coinho.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinho.adb?ref=129bbe4330667aca34b1f15cb6db9e7615143acb", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 2014, Free Software Foundation, Inc.           --\n+--          Copyright (C) 2012-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -65,7 +65,11 @@ package body Ada.Containers.Indefinite_Holders is\n    overriding procedure Adjust (Control : in out Reference_Control_Type) is\n    begin\n       if Control.Container /= null then\n-         Control.Container.Busy := Control.Container.Busy + 1;\n+         declare\n+            B : Natural renames Control.Container.Busy;\n+         begin\n+            B := B + 1;\n+         end;\n       end if;\n    end Adjust;\n \n@@ -109,9 +113,11 @@ package body Ada.Containers.Indefinite_Holders is\n      (Container : aliased Holder) return Constant_Reference_Type\n    is\n       Ref : constant Constant_Reference_Type :=\n-              (Element => Container.Element,\n+              (Element => Container.Element.all'Access,\n                Control => (Controlled with Container'Unrestricted_Access));\n+      B : Natural renames Ref.Control.Container.Busy;\n    begin\n+      B := B + 1;\n       return Ref;\n    end Constant_Reference;\n \n@@ -154,13 +160,16 @@ package body Ada.Containers.Indefinite_Holders is\n       Free (Container.Element);\n    end Finalize;\n \n-   overriding procedure Finalize (Control : in out Reference_Control_Type)\n-   is\n+   overriding procedure Finalize (Control : in out Reference_Control_Type) is\n    begin\n       if Control.Container /= null then\n-         Control.Container.Busy := Control.Container.Busy - 1;\n-\n+         declare\n+            B : Natural renames Control.Container.Busy;\n+         begin\n+            B := B - 1;\n+         end;\n       end if;\n+\n       Control.Container := null;\n    end Finalize;\n \n@@ -262,9 +271,10 @@ package body Ada.Containers.Indefinite_Holders is\n      (Container : aliased in out Holder) return Reference_Type\n    is\n       Ref : constant Reference_Type :=\n-              (Element => Container.Element,\n+              (Element => Container.Element.all'Access,\n                Control => (Controlled with Container'Unrestricted_Access));\n    begin\n+      Container.Busy := Container.Busy + 1;\n       return Ref;\n    end Reference;\n \n@@ -301,6 +311,7 @@ package body Ada.Containers.Indefinite_Holders is\n    ---------------\n \n    function To_Holder (New_Item : Element_Type) return Holder is\n+\n       --  The element allocator may need an accessibility check in the case the\n       --  actual type is class-wide or has access discriminants (RM 4.8(10.1)\n       --  and AI12-0035).\n@@ -354,6 +365,7 @@ package body Ada.Containers.Indefinite_Holders is\n          Element_Type'Output (Stream, Container.Element.all);\n       end if;\n    end Write;\n+\n    procedure Write\n      (Stream : not null access Root_Stream_Type'Class;\n       Item   : Reference_Type)"}, {"sha": "c5f45f5463632118025aa9a892d72a2943027d0b", "filename": "gcc/ada/a-coinho.ads", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129bbe4330667aca34b1f15cb6db9e7615143acb/gcc%2Fada%2Fa-coinho.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129bbe4330667aca34b1f15cb6db9e7615143acb/gcc%2Fada%2Fa-coinho.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinho.ads?ref=129bbe4330667aca34b1f15cb6db9e7615143acb", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---             Copyright (C) 2014, Free Software Foundation, Inc.           --\n+--          Copyright (C) 2011-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -131,8 +131,8 @@ private\n    pragma Inline (Finalize);\n \n    type Constant_Reference_Type\n-      (Element : not null access constant Element_Type)\n-   is record\n+      (Element : not null access constant Element_Type) is\n+   record\n       Control : Reference_Control_Type;\n    end record;\n \n@@ -148,9 +148,7 @@ private\n \n    for Constant_Reference_Type'Read use Read;\n \n-   type Reference_Type\n-     (Element : not null access Element_Type)\n-   is record\n+   type Reference_Type (Element : not null access Element_Type) is record\n       Control : Reference_Control_Type;\n    end record;\n "}, {"sha": "9dc8d1281d7d2851491d6236cb7daedff13b5e09", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129bbe4330667aca34b1f15cb6db9e7615143acb/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129bbe4330667aca34b1f15cb6db9e7615143acb/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=129bbe4330667aca34b1f15cb6db9e7615143acb", "patch": "@@ -15598,11 +15598,10 @@ package body Sem_Ch3 is\n                   end if;\n \n                elsif Nkind (N) = N_Full_Type_Declaration\n-                 and then\n-                   (Nkind (Type_Definition (N)) = N_Record_Definition\n-                     or else Nkind (Type_Definition (N))\n-                                 = N_Derived_Type_Definition)\n-                      and then Interface_Present (Type_Definition (N))\n+                 and then Nkind_In\n+                            (Type_Definition (N), N_Record_Definition,\n+                                                  N_Derived_Type_Definition)\n+                 and then Interface_Present (Type_Definition (N))\n                then\n                   Error_Msg_N\n                     (\"completion of private type cannot be an interface\", N);\n@@ -18309,16 +18308,16 @@ package body Sem_Ch3 is\n \n             if Present (Iface) then\n                Error_Msg_NE\n-                 (\"interface in partial view& not implemented by full type \" &\n-                  \"(RM-2005 7.3 (7.3/2))\", Full_T, Iface);\n+                 (\"interface in partial view& not implemented by full type \"\n+                  & \"(RM-2005 7.3 (7.3/2))\", Full_T, Iface);\n             end if;\n \n             Iface := Find_Hidden_Interface (Full_T_Ifaces, Priv_T_Ifaces);\n \n             if Present (Iface) then\n                Error_Msg_NE\n-                 (\"interface & not implemented by partial view \" &\n-                  \"(RM-2005 7.3 (7.3/2))\", Full_T, Iface);\n+                 (\"interface & not implemented by partial view \"\n+                  & \"(RM-2005 7.3 (7.3/2))\", Full_T, Iface);\n             end if;\n          end;\n       end if;\n@@ -18349,7 +18348,7 @@ package body Sem_Ch3 is\n          if Priv_Parent = Any_Type or else Full_Parent = Any_Type then\n             return;\n \n-         --  Ada 2005 (AI-251): Interfaces in the full-typ can be given in\n+         --  Ada 2005 (AI-251): Interfaces in the full type can be given in\n          --  any order. Therefore we don't have to check that its parent must\n          --  be a descendant of the parent of the private type declaration.\n "}, {"sha": "9dcd7de94aa562c6ffb11e49774a238db994b301", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129bbe4330667aca34b1f15cb6db9e7615143acb/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129bbe4330667aca34b1f15cb6db9e7615143acb/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=129bbe4330667aca34b1f15cb6db9e7615143acb", "patch": "@@ -3328,7 +3328,7 @@ package body Sem_Ch9 is\n                if Present (Iface) then\n                   Error_Msg_NE\n                     (\"interface in partial view& not implemented by full \"\n-                      & \"type (RM-2005 7.3 (7.3/2))\", T, Iface);\n+                     & \"type (RM-2005 7.3 (7.3/2))\", T, Iface);\n                end if;\n \n                Iface := Find_Hidden_Interface (Full_T_Ifaces, Priv_T_Ifaces);"}]}