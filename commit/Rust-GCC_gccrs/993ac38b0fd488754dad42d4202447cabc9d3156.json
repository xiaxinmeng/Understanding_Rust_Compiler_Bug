{"sha": "993ac38b0fd488754dad42d4202447cabc9d3156", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkzYWMzOGIwZmQ0ODg3NTRkYWQ0MmQ0MjAyNDQ3Y2FiYzlkMzE1Ng==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-11-14T18:03:05Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-11-14T18:03:05Z"}, "message": "re PR fortran/38033 (Bounds of  a pointer/allocatable array not stabilized)\n\n2008-10-14  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/38033\n\t* trans-array.c (gfc_trans_create_temp_array): Stabilize the\n\t'to' expression.\n\t(gfc_conv_loop_setup): Use the end expression for the loop 'to'\n\tif it is available.\n\n2008-10-14  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/38033\n\t* gfortran.dg/array_section_2.f90: New test.\n\nFrom-SVN: r141861", "tree": {"sha": "e7f8e74d03abebca3cb39d01a54bc5396022ddb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7f8e74d03abebca3cb39d01a54bc5396022ddb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/993ac38b0fd488754dad42d4202447cabc9d3156", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993ac38b0fd488754dad42d4202447cabc9d3156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/993ac38b0fd488754dad42d4202447cabc9d3156", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/993ac38b0fd488754dad42d4202447cabc9d3156/comments", "author": null, "committer": null, "parents": [{"sha": "927425dffe021ce15ded980b28a8a5f649b83934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/927425dffe021ce15ded980b28a8a5f649b83934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/927425dffe021ce15ded980b28a8a5f649b83934"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "b80aa9e7d4bacd516defca56ecb38d6ca71d4a3d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993ac38b0fd488754dad42d4202447cabc9d3156/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993ac38b0fd488754dad42d4202447cabc9d3156/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=993ac38b0fd488754dad42d4202447cabc9d3156", "patch": "@@ -1,3 +1,11 @@\n+2008-10-14  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/38033\n+\t* trans-array.c (gfc_trans_create_temp_array): Stabilize the\n+\t'to' expression.\n+\t(gfc_conv_loop_setup): Use the end expression for the loop 'to'\n+\tif it is available.\n+\n 2008-11-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/35366"}, {"sha": "9cede5cc84f3a5ca329762bfcc383214611d7284", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993ac38b0fd488754dad42d4202447cabc9d3156/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993ac38b0fd488754dad42d4202447cabc9d3156/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=993ac38b0fd488754dad42d4202447cabc9d3156", "patch": "@@ -650,8 +650,10 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n \t{\n \t  /* Callee allocated arrays may not have a known bound yet.  */\n \t  if (loop->to[n])\n-\t      loop->to[n] = fold_build2 (MINUS_EXPR, gfc_array_index_type,\n-\t\t\t\t\t loop->to[n], loop->from[n]);\n+\t    loop->to[n] =\n+\t\tgfc_evaluate_now (fold_build2 (MINUS_EXPR,\n+\t\t\t\t  gfc_array_index_type, loop->to[n],\n+\t\t\t\t  loop->from[n]), pre);\n \t  loop->from[n] = gfc_index_zero_node;\n \t}\n \n@@ -3511,8 +3513,13 @@ gfc_conv_loop_setup (gfc_loopinfo * loop, locus * where)\n \t      break;\n \n \t    case GFC_SS_SECTION:\n-\t      loop->to[n] = gfc_conv_section_upper_bound (loopspec[n], n,\n-\t\t\t\t\t\t\t  &loop->pre);\n+\t      /* Use the end expression if it exists and is not constant,\n+\t\t so that it is only evaluated once.  */\n+\t      if (info->end[n] && !INTEGER_CST_P (info->end[n]))\n+\t\tloop->to[n] = info->end[n];\n+\t      else\n+\t\tloop->to[n] = gfc_conv_section_upper_bound (loopspec[n], n,\n+\t\t\t\t\t\t\t    &loop->pre);\n \t      break;\n \n             case GFC_SS_FUNCTION:"}, {"sha": "a239488fa1ec75e696f93c766c201b469f3a8ac0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993ac38b0fd488754dad42d4202447cabc9d3156/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993ac38b0fd488754dad42d4202447cabc9d3156/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=993ac38b0fd488754dad42d4202447cabc9d3156", "patch": "@@ -1,3 +1,8 @@\n+2008-10-14  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/38033\n+\t* gfortran.dg/array_section_2.f90: New test.\n+\n 2008-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/38104"}, {"sha": "bfb4c01e6afed8feaa73770339183e97e644d1dd", "filename": "gcc/testsuite/gfortran.dg/array_section_2.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/993ac38b0fd488754dad42d4202447cabc9d3156/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_section_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/993ac38b0fd488754dad42d4202447cabc9d3156/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_section_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_section_2.f90?ref=993ac38b0fd488754dad42d4202447cabc9d3156", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR38033 - size(a) was not stabilized correctly and so the expression was\n+! evaluated twice outside the loop and then within the scalarization loops.\n+!\n+! Contributed by Thomas Bruel  <tmbdev@gmail.com>\n+!\n+program test\n+   integer, parameter :: n = 100\n+   real, pointer :: a(:),temp(:)  ! pointer or allocatable have the same effect\n+   allocate(a(n), temp(n))\n+   temp(1:size(a)) = a\n+end program\n+! { dg-final { scan-tree-dump-times \"size0\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}