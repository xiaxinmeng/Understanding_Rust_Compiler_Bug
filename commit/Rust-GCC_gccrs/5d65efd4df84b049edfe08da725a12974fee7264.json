{"sha": "5d65efd4df84b049edfe08da725a12974fee7264", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ2NWVmZDRkZjg0YjA0OWVkZmUwOGRhNzI1YTEyOTc0ZmVlNzI2NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-06-02T11:07:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-06-02T11:07:30Z"}, "message": "lwg-active.html: Update to R93.\n\n\t* doc/html/ext/lwg-active.html: Update to R93.\n\t* doc/html/ext/lwg-closed.html: Likewise.\n\t* doc/html/ext/lwg-defects.html: Likewise.\n\t* doc/html/manual/*: Regenerate.\n\t* doc/xml/manual/intro.xml: Document status of several DRs.\n\nFrom-SVN: r224023", "tree": {"sha": "43631df989fb564e985ac159c5244868bcca0c09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43631df989fb564e985ac159c5244868bcca0c09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d65efd4df84b049edfe08da725a12974fee7264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d65efd4df84b049edfe08da725a12974fee7264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d65efd4df84b049edfe08da725a12974fee7264", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d65efd4df84b049edfe08da725a12974fee7264/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a983abd29c19a3bbfa39512d1622e92797f22521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a983abd29c19a3bbfa39512d1622e92797f22521", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a983abd29c19a3bbfa39512d1622e92797f22521"}], "stats": {"total": 143113, "additions": 101499, "deletions": 41614}, "files": [{"sha": "ab90af2bf87509044b54de620a2ef3ec55a8e565", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d65efd4df84b049edfe08da725a12974fee7264/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d65efd4df84b049edfe08da725a12974fee7264/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5d65efd4df84b049edfe08da725a12974fee7264", "patch": "@@ -1,3 +1,11 @@\n+2015-06-02  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/html/ext/lwg-active.html: Update to R93.\n+\t* doc/html/ext/lwg-closed.html: Likewise.\n+\t* doc/html/ext/lwg-defects.html: Likewise.\n+\t* doc/html/manual/*: Regenerate.\n+\t* doc/xml/manual/intro.xml: Document status of several DRs.\n+\n 2015-06-02  Renlin Li  <renlin.li@arm.com>\n \n \t* testsuite/27_io/fpos/14775.cc: Add _GLIBCXX_HAVE_LIMIT_FSIZE check."}, {"sha": "7da07e683d591cfa2af1db070d7e8aca263d88a8", "filename": "libstdc++-v3/doc/html/ext/lwg-active.html", "status": "modified", "additions": 27933, "deletions": 5835, "changes": 33768, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d65efd4df84b049edfe08da725a12974fee7264/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-active.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d65efd4df84b049edfe08da725a12974fee7264/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-active.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-active.html?ref=5d65efd4df84b049edfe08da725a12974fee7264"}, {"sha": "b01c109c74486fcf26e6c74e4938f930a861ece2", "filename": "libstdc++-v3/doc/html/ext/lwg-closed.html", "status": "modified", "additions": 14372, "deletions": 22875, "changes": 37247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d65efd4df84b049edfe08da725a12974fee7264/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-closed.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d65efd4df84b049edfe08da725a12974fee7264/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-closed.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-closed.html?ref=5d65efd4df84b049edfe08da725a12974fee7264"}, {"sha": "1e78c35249ed750898f40c3b8b13ff31b3b3dd4e", "filename": "libstdc++-v3/doc/html/ext/lwg-defects.html", "status": "modified", "additions": 58901, "deletions": 12904, "changes": 71805, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d65efd4df84b049edfe08da725a12974fee7264/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-defects.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d65efd4df84b049edfe08da725a12974fee7264/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-defects.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fext%2Flwg-defects.html?ref=5d65efd4df84b049edfe08da725a12974fee7264"}, {"sha": "31201f4e7b62b9389fda0dfe30df77158a943324", "filename": "libstdc++-v3/doc/html/manual/bugs.html", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d65efd4df84b049edfe08da725a12974fee7264/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d65efd4df84b049edfe08da725a12974fee7264/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html?ref=5d65efd4df84b049edfe08da725a12974fee7264", "patch": "@@ -259,6 +259,9 @@\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#438\" target=\"_top\">438</a>:\n \t<span class=\"emphasis\"><em>Ambiguity in the \"do the right thing\" clause</em></span>\n     </span></dt><dd><p>Implement the resolution, basically cast less.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#445\" target=\"_top\">445</a>:\n+\t<span class=\"emphasis\"><em>iterator_traits::reference unspecified for some iterator categories</em></span>\n+    </span></dt><dd><p>Change <code class=\"code\">istreambuf_iterator::reference</code> in C++11 mode.\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#453\" target=\"_top\">453</a>:\n \t<span class=\"emphasis\"><em>basic_stringbuf::seekoff need not always fail for an empty stream</em></span>\n     </span></dt><dd><p>Don't fail if the next pointer is null and newoff is zero.\n@@ -269,6 +272,9 @@\n \t<span class=\"emphasis\"><em>Suggestion for new member functions in standard containers</em></span>\n     </span></dt><dd><p>Add <code class=\"code\">data()</code> to <code class=\"code\">std::vector</code> and\n \t<code class=\"code\">at(const key_type&amp;)</code> to <code class=\"code\">std::map</code>.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#467\" target=\"_top\">467</a>:\n+\t<span class=\"emphasis\"><em>char_traits::lt(), compare(), and memcmp()</em></span>\n+    </span></dt><dd><p>Change <code class=\"code\">lt</code>.\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#508\" target=\"_top\">508</a>:\n \t<span class=\"emphasis\"><em>Bad parameters for ranlux64_base_01</em></span>\n     </span></dt><dd><p>Fix the parameters.\n@@ -351,4 +357,95 @@\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2021\" target=\"_top\">2021</a>:\n        <span class=\"emphasis\"><em>Further incorrect uses of <code class=\"code\">result_of</code></em></span>\n     </span></dt><dd><p>Correctly decay types in signature of <code class=\"code\">std::async</code>.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2049\" target=\"_top\">2049</a>:\n+\t<span class=\"emphasis\"><em><code class=\"code\">is_destructible</code> underspecified</em></span>\n+    </span></dt><dd><p>Handle non-object types.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2056\" target=\"_top\">2056</a>:\n+\t<span class=\"emphasis\"><em>future_errc enums start with value 0 (invalid value for broken_promise)</em></span>\n+    </span></dt><dd><p>Reorder enumerators.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2059\" target=\"_top\">2059</a>:\n+\t<span class=\"emphasis\"><em>C++0x ambiguity problem with map::erase</em></span>\n+    </span></dt><dd><p>Add additional overloads.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2067\" target=\"_top\">2067</a>:\n+\t<span class=\"emphasis\"><em>packaged_task should have deleted copy c'tor with const parameter</em></span>\n+    </span></dt><dd><p>Fix signatures.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2101\" target=\"_top\">2101</a>:\n+\t<span class=\"emphasis\"><em>Some transformation types can produce impossible types</em></span>\n+    </span></dt><dd><p>Use the referenceable type concept.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2106\" target=\"_top\">2106</a>:\n+\t<span class=\"emphasis\"><em>move_iterator wrapping iterators returning prvalues</em></span>\n+    </span></dt><dd><p>Change the <code class=\"code\">reference</code> type.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2118\" target=\"_top\">2118</a>:\n+\t<span class=\"emphasis\"><em><code class=\"code\">unique_ptr</code> for array does not support cv qualification conversion of actual argument</em></span>\n+    </span></dt><dd><p>Adjust constraints to allow safe conversions.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2132\" target=\"_top\">2132</a>:\n+\t<span class=\"emphasis\"><em><code class=\"code\">std::function</code> ambiguity</em></span>\n+    </span></dt><dd><p>Constrain the constructor to only accept callable types.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2141\" target=\"_top\">2141</a>:\n+\t<span class=\"emphasis\"><em><code class=\"code\">common_type</code> trait produces reference types</em></span>\n+    </span></dt><dd><p>Use <code class=\"code\">decay</code> for the result type.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2144\" target=\"_top\">2144</a>:\n+\t<span class=\"emphasis\"><em>Missing <code class=\"code\">noexcept</code> specification in <code class=\"code\">type_index</code></em></span>\n+    </span></dt><dd><p>Add <code class=\"code\">noexcept</code>\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2145\" target=\"_top\">2145</a>:\n+\t<span class=\"emphasis\"><em><code class=\"code\">error_category</code> default constructor</em></span>\n+    </span></dt><dd><p>Declare a public constexpr constructor.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2162\" target=\"_top\">2162</a>:\n+\t<span class=\"emphasis\"><em><code class=\"code\">allocator_traits::max_size</code> missing <code class=\"code\">noexcept</code></em></span>\n+    </span></dt><dd><p>Add <code class=\"code\">noexcept</code>.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2187\" target=\"_top\">2187</a>:\n+\t<span class=\"emphasis\"><em><code class=\"code\">vector&lt;bool&gt;</code> is missing <code class=\"code\">emplace</code> and <code class=\"code\">emplace_back</code> member functions</em></span>\n+    </span></dt><dd><p>Add <code class=\"code\">emplace</code> and <code class=\"code\">emplace_back</code> member functions.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2196\" target=\"_top\">2196</a>:\n+\t<span class=\"emphasis\"><em>Specification of <code class=\"code\">is_*[copy/move]_[constructible/assignable]</code> unclear for non-referencable types</em></span>\n+    </span></dt><dd><p>Use the referenceable type concept.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2313\" target=\"_top\">2313</a>:\n+\t<span class=\"emphasis\"><em><code class=\"code\">tuple_size</code> should always derive from <code class=\"code\">integral_constant&lt;size_t, N&gt;</code></em></span>\n+    </span></dt><dd><p>Update definitions of the partial specializations for const and volatile types.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2329\" target=\"_top\">2329</a>:\n+       <span class=\"emphasis\"><em><code class=\"code\">regex_match()/regex_search()</code> with <code class=\"code\">match_results</code> should forbid temporary strings</em></span>\n+    </span></dt><dd><p>Add deleted overloads for rvalue strings.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2332\" target=\"_top\">2332</a>:\n+       <span class=\"emphasis\"><em><code class=\"code\">regex_iterator/regex_token_iterator</code> should forbid temporary regexes</em></span>\n+    </span></dt><dd><p>Add deleted constructors.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2399\" target=\"_top\">2399</a>:\n+\t<span class=\"emphasis\"><em><code class=\"code\">shared_ptr</code>'s constructor from <code class=\"code\">unique_ptr</code> should be constrained</em></span>\n+    </span></dt><dd><p>Constrain the constructor to require convertibility.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2400\" target=\"_top\">2400</a>:\n+\t<span class=\"emphasis\"><em><code class=\"code\">shared_ptr</code>'s <code class=\"code\">get_deleter()</code> should use <code class=\"code\">addressof()</code></em></span>\n+    </span></dt><dd><p>Use <code class=\"code\">addressof</code>.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2401\" target=\"_top\">2401</a>:\n+\t<span class=\"emphasis\"><em><code class=\"code\">std::function</code> needs more <code class=\"code\">noexcept</code></em></span>\n+    </span></dt><dd><p>Add <code class=\"code\">noexcept</code> to the assignment and comparisons.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2407\" target=\"_top\">2407</a>:\n+       <span class=\"emphasis\"><em><code class=\"code\">packaged_task(allocator_arg_t, const Allocator&amp;, F&amp;&amp;)</code>\n+                 should neither be constrained nor <code class=\"code\">explicit</code>\n+       </em></span>\n+    </span></dt><dd><p>Remove <code class=\"code\">explicit</code> from the constructor.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2415\" target=\"_top\">2415</a>:\n+       <span class=\"emphasis\"><em>Inconsistency between <code class=\"code\">unique_ptr</code> and <code class=\"code\">shared_ptr</code></em></span>\n+    </span></dt><dd><p>Create empty an <code class=\"code\">shared_ptr</code> from an empty\n+                    <code class=\"code\">unique_ptr</code>.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2418\" target=\"_top\">2418</a>:\n+       <span class=\"emphasis\"><em><code class=\"code\">apply</code> does not work with member pointers</em></span>\n+    </span></dt><dd><p>Use <code class=\"code\">mem_fn</code> for member pointers.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2440\" target=\"_top\">2440</a>:\n+       <span class=\"emphasis\"><em><code class=\"code\">seed_seq::size()</code> should be <code class=\"code\">noexcept</code></em></span>\n+    </span></dt><dd><p>Add <code class=\"code\">noexcept</code>.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2454\" target=\"_top\">2454</a>:\n+       <span class=\"emphasis\"><em>Add <code class=\"code\">raw_storage_iterator::base()</code> member\n+       </em></span>\n+    </span></dt><dd><p>Add the <code class=\"code\">base()</code> member function.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2455\" target=\"_top\">2455</a>:\n+       <span class=\"emphasis\"><em>Allocator default construction should be allowed to throw\n+       </em></span>\n+    </span></dt><dd><p>Make <code class=\"code\">noexcept</code> specifications conditional.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2459\" target=\"_top\">2459</a>:\n+       <span class=\"emphasis\"><em><code class=\"code\">std::polar</code> should require a non-negative rho\n+       </em></span>\n+    </span></dt><dd><p>Add debug mode assertion.\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2466\" target=\"_top\">2466</a>:\n+       <span class=\"emphasis\"><em><code class=\"code\">allocator_traits::max_size()</code> default behavior is incorrect\n+       </em></span>\n+    </span></dt><dd><p>Divide by the object type.\n     </p></dd></dl></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"license.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"status.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"setup.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">License\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0Chapter\u00a02.\u00a0Setup</td></tr></table></div></body></html>\n\\ No newline at end of file"}, {"sha": "e6039ebf7a69d08c65eaa0604904dfcfe3ec641f", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d65efd4df84b049edfe08da725a12974fee7264/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d65efd4df84b049edfe08da725a12974fee7264/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=5d65efd4df84b049edfe08da725a12974fee7264", "patch": "@@ -644,6 +644,12 @@ requirements of the license of GCC.\n     <listitem><para>Implement the resolution, basically cast less.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#445\">445</link>:\n+\t<emphasis>iterator_traits::reference unspecified for some iterator categories</emphasis>\n+    </term>\n+    <listitem><para>Change <code>istreambuf_iterator::reference</code> in C++11 mode.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#453\">453</link>:\n \t<emphasis>basic_stringbuf::seekoff need not always fail for an empty stream</emphasis>\n     </term>\n@@ -663,6 +669,12 @@ requirements of the license of GCC.\n \t<code>at(const key_type&amp;)</code> to <code>std::map</code>.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#467\">467</link>:\n+\t<emphasis>char_traits::lt(), compare(), and memcmp()</emphasis>\n+    </term>\n+    <listitem><para>Change <code>lt</code>.\n+    </para></listitem></varlistentry>\n+\n     <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#508\">508</link>:\n \t<emphasis>Bad parameters for ranlux64_base_01</emphasis>\n     </term>\n@@ -820,6 +832,182 @@ requirements of the license of GCC.\n     <listitem><para>Correctly decay types in signature of <code>std::async</code>.\n     </para></listitem></varlistentry>\n \n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2049\">2049</link>:\n+\t<emphasis><code>is_destructible</code> underspecified</emphasis>\n+    </term>\n+    <listitem><para>Handle non-object types.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2056\">2056</link>:\n+\t<emphasis>future_errc enums start with value 0 (invalid value for broken_promise)</emphasis>\n+    </term>\n+    <listitem><para>Reorder enumerators.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2059\">2059</link>:\n+\t<emphasis>C++0x ambiguity problem with map::erase</emphasis>\n+    </term>\n+    <listitem><para>Add additional overloads.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2067\">2067</link>:\n+\t<emphasis>packaged_task should have deleted copy c'tor with const parameter</emphasis>\n+    </term>\n+    <listitem><para>Fix signatures.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2101\">2101</link>:\n+\t<emphasis>Some transformation types can produce impossible types</emphasis>\n+    </term>\n+    <listitem><para>Use the referenceable type concept.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2106\">2106</link>:\n+\t<emphasis>move_iterator wrapping iterators returning prvalues</emphasis>\n+    </term>\n+    <listitem><para>Change the <code>reference</code> type.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2118\">2118</link>:\n+\t<emphasis><code>unique_ptr</code> for array does not support cv qualification conversion of actual argument</emphasis>\n+    </term>\n+    <listitem><para>Adjust constraints to allow safe conversions.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2132\">2132</link>:\n+\t<emphasis><code>std::function</code> ambiguity</emphasis>\n+    </term>\n+    <listitem><para>Constrain the constructor to only accept callable types.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2141\">2141</link>:\n+\t<emphasis><code>common_type</code> trait produces reference types</emphasis>\n+    </term>\n+    <listitem><para>Use <code>decay</code> for the result type.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2144\">2144</link>:\n+\t<emphasis>Missing <code>noexcept</code> specification in <code>type_index</code></emphasis>\n+    </term>\n+    <listitem><para>Add <code>noexcept</code>\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2145\">2145</link>:\n+\t<emphasis><code>error_category</code> default constructor</emphasis>\n+    </term>\n+    <listitem><para>Declare a public constexpr constructor.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2162\">2162</link>:\n+\t<emphasis><code>allocator_traits::max_size</code> missing <code>noexcept</code></emphasis>\n+    </term>\n+    <listitem><para>Add <code>noexcept</code>.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2187\">2187</link>:\n+\t<emphasis><code>vector&lt;bool&gt;</code> is missing <code>emplace</code> and <code>emplace_back</code> member functions</emphasis>\n+    </term>\n+    <listitem><para>Add <code>emplace</code> and <code>emplace_back</code> member functions.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2196\">2196</link>:\n+\t<emphasis>Specification of <code>is_*[copy/move]_[constructible/assignable]</code> unclear for non-referencable types</emphasis>\n+    </term>\n+    <listitem><para>Use the referenceable type concept.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2313\">2313</link>:\n+\t<emphasis><code>tuple_size</code> should always derive from <code>integral_constant&lt;size_t, N&gt;</code></emphasis>\n+    </term>\n+    <listitem><para>Update definitions of the partial specializations for const and volatile types.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2329\">2329</link>:\n+       <emphasis><code>regex_match()/regex_search()</code> with <code>match_results</code> should forbid temporary strings</emphasis>\n+    </term>\n+    <listitem><para>Add deleted overloads for rvalue strings.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2332\">2332</link>:\n+       <emphasis><code>regex_iterator/regex_token_iterator</code> should forbid temporary regexes</emphasis>\n+    </term>\n+    <listitem><para>Add deleted constructors.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2399\">2399</link>:\n+\t<emphasis><code>shared_ptr</code>'s constructor from <code>unique_ptr</code> should be constrained</emphasis>\n+    </term>\n+    <listitem><para>Constrain the constructor to require convertibility.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2400\">2400</link>:\n+\t<emphasis><code>shared_ptr</code>'s <code>get_deleter()</code> should use <code>addressof()</code></emphasis>\n+    </term>\n+    <listitem><para>Use <code>addressof</code>.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2401\">2401</link>:\n+\t<emphasis><code>std::function</code> needs more <code>noexcept</code></emphasis>\n+    </term>\n+    <listitem><para>Add <code>noexcept</code> to the assignment and comparisons.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2407\">2407</link>:\n+       <emphasis><code>packaged_task(allocator_arg_t, const Allocator&amp;, F&amp;&amp;)</code>\n+                 should neither be constrained nor <code>explicit</code>\n+       </emphasis>\n+    </term>\n+    <listitem><para>Remove <code>explicit</code> from the constructor.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2415\">2415</link>:\n+       <emphasis>Inconsistency between <code>unique_ptr</code> and <code>shared_ptr</code></emphasis>\n+    </term>\n+    <listitem><para>Create empty an <code>shared_ptr</code> from an empty\n+                    <code>unique_ptr</code>.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2418\">2418</link>:\n+       <emphasis><code>apply</code> does not work with member pointers</emphasis>\n+    </term>\n+    <listitem><para>Use <code>mem_fn</code> for member pointers.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2440\">2440</link>:\n+       <emphasis><code>seed_seq::size()</code> should be <code>noexcept</code></emphasis>\n+    </term>\n+    <listitem><para>Add <code>noexcept</code>.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2454\">2454</link>:\n+       <emphasis>Add <code>raw_storage_iterator::base()</code> member\n+       </emphasis>\n+    </term>\n+    <listitem><para>Add the <code>base()</code> member function.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2455\">2455</link>:\n+       <emphasis>Allocator default construction should be allowed to throw\n+       </emphasis>\n+    </term>\n+    <listitem><para>Make <code>noexcept</code> specifications conditional.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2459\">2459</link>:\n+       <emphasis><code>std::polar</code> should require a non-negative rho\n+       </emphasis>\n+    </term>\n+    <listitem><para>Add debug mode assertion.\n+    </para></listitem></varlistentry>\n+\n+    <varlistentry><term><link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"../ext/lwg-defects.html#2466\">2466</link>:\n+       <emphasis><code>allocator_traits::max_size()</code> default behavior is incorrect\n+       </emphasis>\n+    </term>\n+    <listitem><para>Divide by the object type.\n+    </para></listitem></varlistentry>\n+\n+\n   </variablelist>\n \n  </section>"}]}