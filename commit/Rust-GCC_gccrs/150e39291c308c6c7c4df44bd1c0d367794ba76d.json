{"sha": "150e39291c308c6c7c4df44bd1c0d367794ba76d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUwZTM5MjkxYzMwOGM2YzdjNGRmNDRiZDFjMGQzNjc3OTRiYTc2ZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-05-21T22:43:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-05-21T22:43:19Z"}, "message": "tree-ssa-sccvn.c (copy_reference_ops_from_ref): Record TMR_ORIGINAL.\n\n2009-05-22  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Record\n\tTMR_ORIGINAL.  Always either record TMR_SYMBOL or TMR_BASE.\n\t* tree-ssa-pre.c (create_component_ref_by_pieces_1): Handle\n\tTARGET_MEM_REF.\n\t(create_expression_by_pieces): Only convert if necessary.\n\t* gimplify.c (gimplify_expr): Handle TARGET_MEM_REF.\n\t* tree-ssa-loop-im.c (gen_lsm_tmp_name): Handle INTEGER_CST.\n\nFrom-SVN: r147779", "tree": {"sha": "e6a3b02aba6f9fa95634d6767e26861ee2e90444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6a3b02aba6f9fa95634d6767e26861ee2e90444"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/150e39291c308c6c7c4df44bd1c0d367794ba76d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/150e39291c308c6c7c4df44bd1c0d367794ba76d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/150e39291c308c6c7c4df44bd1c0d367794ba76d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/150e39291c308c6c7c4df44bd1c0d367794ba76d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a2b090ce066189030d47ece3022ed6c6d885bee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a2b090ce066189030d47ece3022ed6c6d885bee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a2b090ce066189030d47ece3022ed6c6d885bee"}], "stats": {"total": 93, "additions": 82, "deletions": 11}, "files": [{"sha": "9a4f5a944c88677848d1f08983e3e1bbe076823d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150e39291c308c6c7c4df44bd1c0d367794ba76d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150e39291c308c6c7c4df44bd1c0d367794ba76d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=150e39291c308c6c7c4df44bd1c0d367794ba76d", "patch": "@@ -1,3 +1,13 @@\n+2009-05-22  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Record\n+\tTMR_ORIGINAL.  Always either record TMR_SYMBOL or TMR_BASE.\n+\t* tree-ssa-pre.c (create_component_ref_by_pieces_1): Handle\n+\tTARGET_MEM_REF.\n+\t(create_expression_by_pieces): Only convert if necessary.\n+\t* gimplify.c (gimplify_expr): Handle TARGET_MEM_REF.\n+\t* tree-ssa-loop-im.c (gen_lsm_tmp_name): Handle INTEGER_CST.\n+\n 2009-05-21  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* config/mips/mips.md (*extzv_trunc<mode>_exts): Turn into a"}, {"sha": "d734a0fdf083d1506e36e565f14ef61d6e32c0f7", "filename": "gcc/gimplify.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150e39291c308c6c7c4df44bd1c0d367794ba76d/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150e39291c308c6c7c4df44bd1c0d367794ba76d/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=150e39291c308c6c7c4df44bd1c0d367794ba76d", "patch": "@@ -6769,6 +6769,24 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  }\n \t  break;\n \n+\tcase TARGET_MEM_REF:\n+\t  {\n+\t    enum gimplify_status r0 = GS_ALL_DONE, r1 = GS_ALL_DONE;\n+\n+\t    if (TMR_SYMBOL (*expr_p))\n+\t      r0 = gimplify_expr (&TMR_SYMBOL (*expr_p), pre_p,\n+\t\t\t\t  post_p, is_gimple_lvalue, fb_either);\n+\t    else if (TMR_BASE (*expr_p))\n+\t      r0 = gimplify_expr (&TMR_BASE (*expr_p), pre_p,\n+\t\t\t\t  post_p, is_gimple_val, fb_either);\n+\t    if (TMR_INDEX (*expr_p))\n+\t      r1 = gimplify_expr (&TMR_INDEX (*expr_p), pre_p,\n+\t\t\t\t  post_p, is_gimple_val, fb_rvalue);\n+\t    /* TMR_STEP and TMR_OFFSET are always integer constants.  */\n+\t    ret = MIN (r0, r1);\n+\t  }\n+\t  break;\n+\n \tcase NON_LVALUE_EXPR:\n \t  /* This should have been stripped above.  */\n \t  gcc_unreachable ();"}, {"sha": "3cdabd6bbc5f83c3e7b593b667d9351e60a330db", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150e39291c308c6c7c4df44bd1c0d367794ba76d/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150e39291c308c6c7c4df44bd1c0d367794ba76d/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=150e39291c308c6c7c4df44bd1c0d367794ba76d", "patch": "@@ -1794,6 +1794,10 @@ gen_lsm_tmp_name (tree ref)\n       lsm_tmp_name_add (\"R\");\n       break;\n \n+    case INTEGER_CST:\n+      /* Nothing.  */\n+      break;\n+\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "f443585c0e7ba7b1a5b8b0edecbe759e8e98a947", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150e39291c308c6c7c4df44bd1c0d367794ba76d/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150e39291c308c6c7c4df44bd1c0d367794ba76d/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=150e39291c308c6c7c4df44bd1c0d367794ba76d", "patch": "@@ -2647,6 +2647,36 @@ create_component_ref_by_pieces_1 (basic_block block, vn_reference_t ref,\n \treturn folded;\n       }\n       break;\n+    case TARGET_MEM_REF:\n+      {\n+\tvn_reference_op_t nextop = VEC_index (vn_reference_op_s, ref->operands,\n+\t\t\t\t\t      *operand);\n+\tpre_expr op0expr;\n+\ttree genop0 = NULL_TREE;\n+\ttree baseop = create_component_ref_by_pieces_1 (block, ref, operand,\n+\t\t\t\t\t\t\tstmts, domstmt);\n+\tif (!baseop)\n+\t  return NULL_TREE;\n+\tif (currop->op0)\n+\t  {\n+\t    op0expr = get_or_alloc_expr_for (currop->op0);\n+\t    genop0 = find_or_generate_expression (block, op0expr,\n+\t\t\t\t\t\t  stmts, domstmt);\n+\t    if (!genop0)\n+\t      return NULL_TREE;\n+\t  }\n+\tif (DECL_P (baseop))\n+\t  return build6 (TARGET_MEM_REF, currop->type,\n+\t\t\t baseop, NULL_TREE,\n+\t\t\t genop0, currop->op1, currop->op2,\n+\t\t\t unshare_expr (nextop->op1));\n+\telse\n+\t  return build6 (TARGET_MEM_REF, currop->type,\n+\t\t\t NULL_TREE, baseop,\n+\t\t\t genop0, currop->op1, currop->op2,\n+\t\t\t unshare_expr (nextop->op1));\n+      }\n+      break;\n     case ADDR_EXPR:\n       if (currop->op0)\n \t{\n@@ -2902,8 +2932,8 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n \t\t\t     gimple_seq *stmts, gimple domstmt, tree type)\n {\n   tree temp, name;\n-  tree folded, newexpr;\n-  gimple_seq forced_stmts;\n+  tree folded;\n+  gimple_seq forced_stmts = NULL;\n   unsigned int value_id;\n   gimple_stmt_iterator gsi;\n   tree exprtype = type ? type : get_expr_type (expr);\n@@ -2975,13 +3005,16 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n     default:\n       return NULL_TREE;\n     }\n-  folded = fold_convert (exprtype, folded);\n+\n+  if (!useless_type_conversion_p (exprtype, TREE_TYPE (folded)))\n+    folded = fold_convert (exprtype, folded);\n+\n   /* Force the generated expression to be a sequence of GIMPLE\n      statements.\n      We have to call unshare_expr because force_gimple_operand may\n      modify the tree we pass to it.  */\n-  newexpr = force_gimple_operand (unshare_expr (folded), &forced_stmts,\n-\t\t\t\t  false, NULL);\n+  folded = force_gimple_operand (unshare_expr (folded), &forced_stmts,\n+\t\t\t\t false, NULL);\n \n   /* If we have any intermediate expressions to the value sets, add them\n      to the value sets and chain them in the instruction stream.  */\n@@ -3025,7 +3058,7 @@ create_expression_by_pieces (basic_block block, pre_expr expr,\n       || TREE_CODE (exprtype) == VECTOR_TYPE)\n     DECL_GIMPLE_REG_P (temp) = 1;\n \n-  newstmt = gimple_build_assign (temp, newexpr);\n+  newstmt = gimple_build_assign (temp, folded);\n   name = make_ssa_name (temp, newstmt);\n   gimple_assign_set_lhs (newstmt, name);\n   gimple_set_plf (newstmt, NECESSARY, false);"}, {"sha": "068484ba645634a4a3dff67a8e63f042d58c0478", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150e39291c308c6c7c4df44bd1c0d367794ba76d/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150e39291c308c6c7c4df44bd1c0d367794ba76d/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=150e39291c308c6c7c4df44bd1c0d367794ba76d", "patch": "@@ -488,20 +488,26 @@ copy_reference_ops_from_ref (tree ref, VEC(vn_reference_op_s, heap) **result)\n   if (TREE_CODE (ref) == TARGET_MEM_REF)\n     {\n       vn_reference_op_s temp;\n+      tree base;\n+\n+      base = TMR_SYMBOL (ref) ? TMR_SYMBOL (ref) : TMR_BASE (ref);\n+      if (!base)\n+\tbase = build_int_cst (ptr_type_node, 0);\n \n       memset (&temp, 0, sizeof (temp));\n       /* We do not care for spurious type qualifications.  */\n       temp.type = TYPE_MAIN_VARIANT (TREE_TYPE (ref));\n       temp.opcode = TREE_CODE (ref);\n-      temp.op0 = TMR_SYMBOL (ref) ? TMR_SYMBOL (ref) : TMR_BASE (ref);\n-      temp.op1 = TMR_INDEX (ref);\n+      temp.op0 = TMR_INDEX (ref);\n+      temp.op1 = TMR_STEP (ref);\n+      temp.op2 = TMR_OFFSET (ref);\n       VEC_safe_push (vn_reference_op_s, heap, *result, &temp);\n \n       memset (&temp, 0, sizeof (temp));\n       temp.type = NULL_TREE;\n-      temp.opcode = TREE_CODE (ref);\n-      temp.op0 = TMR_STEP (ref);\n-      temp.op1 = TMR_OFFSET (ref);\n+      temp.opcode = TREE_CODE (base);\n+      temp.op0 = base;\n+      temp.op1 = TMR_ORIGINAL (ref);\n       VEC_safe_push (vn_reference_op_s, heap, *result, &temp);\n       return;\n     }"}]}