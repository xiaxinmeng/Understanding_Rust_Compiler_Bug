{"sha": "f7b675752a96c76ba7800ffeceff196af36f8fa4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdiNjc1NzUyYTk2Yzc2YmE3ODAwZmZlY2VmZjE5NmFmMzZmOGZhNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2012-02-17T21:27:48Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-02-17T21:27:48Z"}, "message": "gospec.c (lang_specific_driver): If linking, and no -o option was used, add one.\n\n\t* gospec.c (lang_specific_driver): If linking, and no -o option\n\twas used, add one.\n\nFrom-SVN: r184351", "tree": {"sha": "9f973f3feda5485a01017eef4242e7336e209c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f973f3feda5485a01017eef4242e7336e209c39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7b675752a96c76ba7800ffeceff196af36f8fa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b675752a96c76ba7800ffeceff196af36f8fa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7b675752a96c76ba7800ffeceff196af36f8fa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7b675752a96c76ba7800ffeceff196af36f8fa4/comments", "author": null, "committer": null, "parents": [{"sha": "904bfee88359ae0c15dea52e7a84f61211479b2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/904bfee88359ae0c15dea52e7a84f61211479b2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/904bfee88359ae0c15dea52e7a84f61211479b2f"}], "stats": {"total": 63, "additions": 41, "deletions": 22}, "files": [{"sha": "fe896ab2bca8a09d02f47f973739d0a193bb6cd1", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b675752a96c76ba7800ffeceff196af36f8fa4/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b675752a96c76ba7800ffeceff196af36f8fa4/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=f7b675752a96c76ba7800ffeceff196af36f8fa4", "patch": "@@ -1,3 +1,8 @@\n+2012-02-17  Ian Lance Taylor  <iant@google.com>\n+\n+\t* gospec.c (lang_specific_driver): If linking, and no -o option\n+\twas used, add one.\n+\n 2012-02-14  Ian Lance Taylor  <iant@google.com>\n \n \tPR go/48411"}, {"sha": "20372f0f47060f57678ce690ac5eb7252422e14a", "filename": "gcc/go/gospec.c", "status": "modified", "additions": 36, "deletions": 22, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7b675752a96c76ba7800ffeceff196af36f8fa4/gcc%2Fgo%2Fgospec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7b675752a96c76ba7800ffeceff196af36f8fa4/gcc%2Fgo%2Fgospec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgospec.c?ref=f7b675752a96c76ba7800ffeceff196af36f8fa4", "patch": "@@ -109,6 +109,11 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* Whether the -o option was used.  */\n   bool saw_opt_o = false;\n \n+  /* Whether the -c option was used.  Also used for -E, -fsyntax-only,\n+     in general anything which implies only compilation and not\n+     linking.  */\n+  bool saw_opt_c = false;\n+\n   /* Whether the -S option was used.  */\n   bool saw_opt_S = false;\n \n@@ -172,6 +177,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \tcase OPT_fsyntax_only:\n \t  /* Don't specify libraries if we won't link, since that would\n \t     cause a warning.  */\n+\t  saw_opt_c = true;\n \t  library = -1;\n \t  break;\n \n@@ -272,31 +278,39 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n       j++;\n     }\n \n-  /* If we are not linking, add a -o option.  This is because we need\n+  /* If we didn't see a -o option, add one.  This is because we need\n      the driver to pass all .go files to go1.  Without a -o option the\n-     driver will invoke go1 separately for each input file.  */\n-  if (library < 0 && first_go_file != NULL && !saw_opt_o)\n+     driver will invoke go1 separately for each input file.  FIXME:\n+     This should probably use some other interface to force the driver\n+     to set combine_inputs.  */\n+  if (first_go_file != NULL && !saw_opt_o)\n     {\n-      const char *base;\n-      int baselen;\n-      int alen;\n-      char *out;\n-\n-      base = lbasename (first_go_file);\n-      baselen = strlen (base) - 3;\n-      alen = baselen + 3;\n-      out = XNEWVEC (char, alen);\n-      memcpy (out, base, baselen);\n-      /* The driver will convert .o to some other suffix (e.g., .obj)\n-\t if appropriate.  */\n-      out[baselen] = '.';\n-      if (saw_opt_S)\n-\tout[baselen + 1] = 's';\n+      if (saw_opt_c || saw_opt_S)\n+\t{\n+\t  const char *base;\n+\t  int baselen;\n+\t  int alen;\n+\t  char *out;\n+\n+\t  base = lbasename (first_go_file);\n+\t  baselen = strlen (base) - 3;\n+\t  alen = baselen + 3;\n+\t  out = XNEWVEC (char, alen);\n+\t  memcpy (out, base, baselen);\n+\t  /* The driver will convert .o to some other suffix (e.g.,\n+\t     .obj) if appropriate.  */\n+\t  out[baselen] = '.';\n+\t  if (saw_opt_S)\n+\t    out[baselen + 1] = 's';\n+\t  else\n+\t    out[baselen + 1] = 'o';\n+\t  out[baselen + 2] = '\\0';\n+\t  generate_option (OPT_o, out, 1, CL_DRIVER,\n+\t\t\t   &new_decoded_options[j]);\n+\t}\n       else\n-\tout[baselen + 1] = 'o';\n-      out[baselen + 2] = '\\0';\n-      generate_option (OPT_o, out, 1, CL_DRIVER,\n-\t\t       &new_decoded_options[j]);\n+\tgenerate_option (OPT_o, \"a.out\", 1, CL_DRIVER,\n+\t\t\t &new_decoded_options[j]);\n       j++;\n     }\n "}]}