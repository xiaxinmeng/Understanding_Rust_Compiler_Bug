{"sha": "fc98d038618b792c413212759057b2125507d3ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM5OGQwMzg2MThiNzkyYzQxMzIxMjc1OTA1N2IyMTI1NTA3ZDNlZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-02-04T09:03:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-02-04T09:07:47Z"}, "message": "tree-optimization/92819 restrict new vector CTOR canonicalization\n\nThe PR shows that code generation ends up pessimized by the new\ncanonicalization rules that end up nailing do-not-care elements\nto specific values making it hard to generate good code later.\n\nThe temporary solution is to avoid this for the cases we also\nobviously know the canonicalization will create more GIMPLE stmts than\nbefore.\n\n2020-02-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92819\n\t* tree-ssa-forwprop.c (simplify_vector_constructor): Avoid\n\tgenerating more stmts than before.\n\n\t* gcc.target/i386/pr92819.c: New testcase.\n\t* gcc.target/i386/pr92803.c: Adjust.", "tree": {"sha": "5a058136f04c3653b1fa670f6650cd815995aa8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a058136f04c3653b1fa670f6650cd815995aa8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc98d038618b792c413212759057b2125507d3ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc98d038618b792c413212759057b2125507d3ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc98d038618b792c413212759057b2125507d3ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc98d038618b792c413212759057b2125507d3ef/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a4d502421c7469369d863226f03d197bfa2cb13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4d502421c7469369d863226f03d197bfa2cb13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a4d502421c7469369d863226f03d197bfa2cb13"}], "stats": {"total": 77, "additions": 73, "deletions": 4}, "files": [{"sha": "4a5dddb4ecfc16fbf1956fe044f030d497696167", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc98d038618b792c413212759057b2125507d3ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc98d038618b792c413212759057b2125507d3ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc98d038618b792c413212759057b2125507d3ef", "patch": "@@ -1,3 +1,9 @@\n+2020-02-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92819\n+\t* tree-ssa-forwprop.c (simplify_vector_constructor): Avoid\n+\tgenerating more stmts than before.\n+\n 2020-02-04  Martin Liska  <mliska@suse.cz>\n \n \t* config/arm/arm.c (arm_gen_far_branch): Move the function"}, {"sha": "1624f592ae78bde332426c91fe87f0aee82743ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc98d038618b792c413212759057b2125507d3ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc98d038618b792c413212759057b2125507d3ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc98d038618b792c413212759057b2125507d3ef", "patch": "@@ -1,3 +1,9 @@\n+2020-02-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92819\n+\t* gcc.target/i386/pr92819.c: New testcase.\n+\t* gcc.target/i386/pr92803.c: Adjust.\n+\n 2020-02-03  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/93458"}, {"sha": "6d4c07a7480ee6d9c8fd9ddb25ae221e096d1a9a", "filename": "gcc/testsuite/gcc.target/i386/pr92803.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc98d038618b792c413212759057b2125507d3ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92803.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc98d038618b792c413212759057b2125507d3ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92803.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92803.c?ref=fc98d038618b792c413212759057b2125507d3ef", "patch": "@@ -36,5 +36,6 @@ barf (v8sf x)\n /* We expect all other CTORs to turn into permutes, the FP converting ones\n    to two each with the one with constants possibly elided in the future\n    by converting 3.0f and 1.0f \"back\" to integers.  */\n-/* { dg-final { scan-tree-dump-times \"VEC_PERM_EXPR\" 4 \"forwprop1\" } } */\n-/* { dg-final { scan-tree-dump-times \"VEC_PERM_EXPR\" 3 \"forwprop1\" { xfail *-*-* } } } */\n+/* For foo we do nothing.  */\n+/* { dg-final { scan-tree-dump-times \"VEC_PERM_EXPR\" 3 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"VEC_PERM_EXPR\" 2 \"forwprop1\" { xfail *-*-* } } } */"}, {"sha": "773e3490ab3c34ad4eff4cf788bac503dd9eebfd", "filename": "gcc/testsuite/gcc.target/i386/pr92819.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc98d038618b792c413212759057b2125507d3ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92819.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc98d038618b792c413212759057b2125507d3ef/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92819.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92819.c?ref=fc98d038618b792c413212759057b2125507d3ef", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2 -fdump-tree-forwprop1\" } */\n+\n+typedef double v4df __attribute__((vector_size (32)));\n+typedef double v2df __attribute__((vector_size (16)));\n+typedef short v16hi __attribute__((vector_size (32)));\n+typedef short v8hi __attribute__((vector_size (16)));\n+\n+v2df\n+foo (v4df x, double *p)\n+{\n+  return (v2df) { x[1], *p };\n+}\n+\n+v2df\n+bar (v4df x, double *p)\n+{\n+  return (v2df) { x[0], *p }; /* BIT_INSERT_EXPR */\n+}\n+\n+v2df\n+baz (v2df x, double *p)\n+{\n+  return (v2df) { x[1], *p }; /* VEC_PERM_EXPR */\n+}\n+\n+v2df\n+qux (v2df x, double *p)\n+{\n+  return (v2df) { x[0], *p }; /* BIT_INSERT_EXPR */\n+}\n+\n+v2df\n+corge (v4df x, double *p)\n+{\n+  return (v2df) { x[3], *p };\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"BIT_INSERT_EXPR\" 2 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"VEC_PERM_EXPR\" 1 \"forwprop1\" } } */\n+/* We can't check for 1:1 assembler here so check for what we do not\n+   want to see.  */\n+/* { dg-final { scan-assembler-not { \"perm\" } } } */\n+/* { dg-final { scan-assembler-not { \"insert\" } } } */\n+/* { dg-final { scan-assembler-not { \"broadcast\" } } } */"}, {"sha": "f65216d23e92166a1ca3a1eb9a3ba7099391dc75", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc98d038618b792c413212759057b2125507d3ef/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc98d038618b792c413212759057b2125507d3ef/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=fc98d038618b792c413212759057b2125507d3ef", "patch": "@@ -2230,7 +2230,6 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n   unsigned HOST_WIDE_INT refnelts;\n   enum tree_code conv_code;\n   constructor_elt *elt;\n-  bool maybe_ident;\n \n   op = gimple_assign_rhs1 (stmt);\n   type = TREE_TYPE (op);\n@@ -2245,7 +2244,8 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n   orig[0] = NULL;\n   orig[1] = NULL;\n   conv_code = ERROR_MARK;\n-  maybe_ident = true;\n+  bool maybe_ident = true;\n+  bool maybe_blend[2] = { true, true };\n   tree one_constant = NULL_TREE;\n   tree one_nonconstant = NULL_TREE;\n   auto_vec<tree> constants;\n@@ -2290,6 +2290,8 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t      orig[j] = ref;\n \t      if (elem != i || j != 0)\n \t\tmaybe_ident = false;\n+\t      if (elem != i)\n+\t\tmaybe_blend[j] = false;\n \t      elts.safe_push (std::make_pair (j, elem));\n \t      continue;\n \t    }\n@@ -2439,6 +2441,15 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n     }\n   else\n     {\n+      /* If we combine a vector with a non-vector avoid cases where\n+\t we'll obviously end up with more GIMPLE stmts which is when\n+\t we'll later not fold this to a single insert into the vector\n+\t and we had a single extract originally.  See PR92819.  */\n+      if (nelts == 2\n+\t  && refnelts > 2\n+\t  && orig[1] == error_mark_node\n+\t  && !maybe_blend[0])\n+\treturn false;\n       tree mask_type, perm_type, conv_src_type;\n       perm_type = TREE_TYPE (orig[0]);\n       conv_src_type = (nelts == refnelts"}]}