{"sha": "29f85237429f703cba263de53a491426b1642d1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlmODUyMzc0MjlmNzAzY2JhMjYzZGU1M2E0OTE0MjZiMTY0MmQxYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-06-13T06:10:20Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2011-06-13T06:10:20Z"}, "message": "re PR tree-optimization/49352 (-fcompare-debug failure with -O2 -ftree-vectorize)\n\n\n        PR tree-optimization/49352\n        * tree-vect-loop.c (vect_is_slp_reduction): Don't count debug\n        uses at all, make sure loop_use_stmt after the loop is a def\n        stmt of a used SSA_NAME that is the only one defined inside\n        of the loop.  Don't check for COND_EXPR and GIMPLE_BINARY_RHS.\n        (vect_is_simple_reduction_1): Call vect_is_slp_reduction only\n        if check_reduction is true.\n\n\nCo-Authored-By: Ira Rosen <ira.rosen@linaro.org>\n\nFrom-SVN: r174982", "tree": {"sha": "2be3cf95d5b99d54ab9bf6b1f56768c2729e3bea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2be3cf95d5b99d54ab9bf6b1f56768c2729e3bea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29f85237429f703cba263de53a491426b1642d1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f85237429f703cba263de53a491426b1642d1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f85237429f703cba263de53a491426b1642d1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f85237429f703cba263de53a491426b1642d1c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd74d101fa67454a33ee8c5f5a0029819c03e950", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd74d101fa67454a33ee8c5f5a0029819c03e950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd74d101fa67454a33ee8c5f5a0029819c03e950"}], "stats": {"total": 198, "additions": 113, "deletions": 85}, "files": [{"sha": "f93f02037eb5cd5c1555e2630ec5a729080107b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f85237429f703cba263de53a491426b1642d1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f85237429f703cba263de53a491426b1642d1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29f85237429f703cba263de53a491426b1642d1c", "patch": "@@ -1,3 +1,14 @@\n+2011-06-13 Jakub Jelinek  <jakub@redhat.com>\n+\t   Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/49352\n+\t* tree-vect-loop.c (vect_is_slp_reduction): Don't count debug uses at\n+\tall, make sure loop_use_stmt after the loop is a def stmt of a used\n+\tSSA_NAME that is the only one defined inside of the loop.  Don't\n+\tcheck for COND_EXPR and GIMPLE_BINARY_RHS.\n+\t(vect_is_simple_reduction_1): Call vect_is_slp_reduction only if\n+\tcheck_reduction is true.\n+\n 2011-06-11  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/49373"}, {"sha": "cf6f36884ec0e350d36298a27ae60e7a3cfef580", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f85237429f703cba263de53a491426b1642d1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f85237429f703cba263de53a491426b1642d1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29f85237429f703cba263de53a491426b1642d1c", "patch": "@@ -1,3 +1,9 @@\n+2011-06-13 Jakub Jelinek  <jakub@redhat.com>\n+\t   Ira Rosen  <ira.rosen@linaro.org>\n+\n+\tPR tree-optimization/49352\n+\t* gcc.dg/vect/pr49352.c: New test.\n+\n 2011-06-12  Tobias Burnus\n \n \tPR fortran/49324"}, {"sha": "26f364b0cd461ba06840701ec21c01b21c83c180", "filename": "gcc/testsuite/gcc.dg/vect/pr49352.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f85237429f703cba263de53a491426b1642d1c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr49352.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f85237429f703cba263de53a491426b1642d1c/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr49352.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr49352.c?ref=29f85237429f703cba263de53a491426b1642d1c", "patch": "@@ -0,0 +1,14 @@\n+/* PR tree-optimization/49352 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fcompare-debug\" } */\n+\n+int\n+foo (int *x, int *y, int n)\n+{\n+  int i, j;\n+  int dot = 0;\n+  for (i = 0; i < n; i++)\n+    for (j = 0; j < 2; j++)\n+      dot += *(x++) * *(y++);\n+  return dot;\n+}"}, {"sha": "dd6cafe2e58b2fa887580ad97bcca35782bba165", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 82, "deletions": 85, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f85237429f703cba263de53a491426b1642d1c/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f85237429f703cba263de53a491426b1642d1c/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=29f85237429f703cba263de53a491426b1642d1c", "patch": "@@ -1710,12 +1710,12 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple phi, gimple first_stmt)\n   struct loop *loop = (gimple_bb (phi))->loop_father;\n   struct loop *vect_loop = LOOP_VINFO_LOOP (loop_info);\n   enum tree_code code;\n-  gimple current_stmt = NULL, use_stmt = NULL, first, next_stmt;\n+  gimple current_stmt = NULL, loop_use_stmt = NULL, first, next_stmt;\n   stmt_vec_info use_stmt_info, current_stmt_info;\n   tree lhs;\n   imm_use_iterator imm_iter;\n   use_operand_p use_p;\n-  int nloop_uses, size = 0, nuses;\n+  int nloop_uses, size = 0;\n   bool found = false;\n \n   if (loop != vect_loop)\n@@ -1726,66 +1726,68 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple phi, gimple first_stmt)\n   while (1)\n     {\n       nloop_uses = 0;\n-      nuses = 0;\n       FOR_EACH_IMM_USE_FAST (use_p, imm_iter, lhs)\n         {\n-          use_stmt = USE_STMT (use_p);\n-          nuses++;\n+\t  gimple use_stmt = USE_STMT (use_p);\n           if (is_gimple_debug (use_stmt))\n             continue;\n \n+\t  use_stmt = USE_STMT (use_p);\n+\n           /* Check if we got back to the reduction phi.  */\n-          if (gimple_code (use_stmt) == GIMPLE_PHI\n-              && use_stmt == phi)\n+\t  if (use_stmt == phi)\n             {\n+\t      loop_use_stmt = use_stmt;\n               found = true;\n               break;\n             }\n \n           if (flow_bb_inside_loop_p (loop, gimple_bb (use_stmt))\n               && vinfo_for_stmt (use_stmt)\n-              && !is_pattern_stmt_p (vinfo_for_stmt (use_stmt))\n-              && use_stmt != first_stmt)\n-            nloop_uses++;\n+\t      && !STMT_VINFO_IN_PATTERN_P (vinfo_for_stmt (use_stmt)))\n+\t    {\n+\t      loop_use_stmt = use_stmt;\n+\t      nloop_uses++;\n+\t    }\n \n           if (nloop_uses > 1)\n             return false;\n         }\n \n-      /* We reached a statement with no uses.  */\n-      if (nuses == 0)\n-\treturn false;\n-\n       if (found)\n         break;\n \n+      /* We reached a statement with no loop uses.  */\n+      if (nloop_uses == 0)\n+\treturn false;\n+\n       /* This is a loop exit phi, and we haven't reached the reduction phi.  */\n-      if (gimple_code (use_stmt) == GIMPLE_PHI)\n+      if (gimple_code (loop_use_stmt) == GIMPLE_PHI)\n         return false;\n \n-      if (!is_gimple_assign (use_stmt)\n-          || code != gimple_assign_rhs_code (use_stmt)\n-          || !flow_bb_inside_loop_p (loop, gimple_bb (use_stmt)))\n+      if (!is_gimple_assign (loop_use_stmt)\n+\t  || code != gimple_assign_rhs_code (loop_use_stmt)\n+\t  || !flow_bb_inside_loop_p (loop, gimple_bb (loop_use_stmt)))\n         return false;\n \n       /* Insert USE_STMT into reduction chain.  */\n-      use_stmt_info = vinfo_for_stmt (use_stmt);\n+      use_stmt_info = vinfo_for_stmt (loop_use_stmt);\n       if (current_stmt)\n         {\n           current_stmt_info = vinfo_for_stmt (current_stmt);\n-          GROUP_NEXT_ELEMENT (current_stmt_info) = use_stmt;\n+\t  GROUP_NEXT_ELEMENT (current_stmt_info) = loop_use_stmt;\n           GROUP_FIRST_ELEMENT (use_stmt_info)\n             = GROUP_FIRST_ELEMENT (current_stmt_info);\n         }\n       else\n-          GROUP_FIRST_ELEMENT (use_stmt_info) = use_stmt;\n+\tGROUP_FIRST_ELEMENT (use_stmt_info) = loop_use_stmt;\n \n-      lhs = gimple_assign_lhs (use_stmt);\n-      current_stmt = use_stmt;\n+      lhs = gimple_assign_lhs (loop_use_stmt);\n+      current_stmt = loop_use_stmt;\n       size++;\n    }\n \n-  if (!found || use_stmt != phi || size < 2)\n+  if (!found || loop_use_stmt != phi || size < 2)\n     return false;\n \n   /* Swap the operands, if needed, to make the reduction operand be the second\n@@ -1794,75 +1796,70 @@ vect_is_slp_reduction (loop_vec_info loop_info, gimple phi, gimple first_stmt)\n   next_stmt = GROUP_FIRST_ELEMENT (vinfo_for_stmt (current_stmt));\n   while (next_stmt)\n     {\n-      if (get_gimple_rhs_class (code) == GIMPLE_BINARY_RHS)\n+      if (gimple_assign_rhs2 (next_stmt) == lhs)\n \t{\n-          if (gimple_assign_rhs2 (next_stmt) == lhs)\n+\t  tree op = gimple_assign_rhs1 (next_stmt);\n+          gimple def_stmt = NULL;\n+\n+          if (TREE_CODE (op) == SSA_NAME)\n+            def_stmt = SSA_NAME_DEF_STMT (op);\n+\n+\t  /* Check that the other def is either defined in the loop\n+\t     (\"vect_internal_def\"), or it's an induction (defined by a\n+\t     loop-header phi-node).  */\n+          if (def_stmt\n+\t      && flow_bb_inside_loop_p (loop, gimple_bb (def_stmt))\n+              && (is_gimple_assign (def_stmt)\n+                  || is_gimple_call (def_stmt)\n+                  || STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n+                           == vect_induction_def\n+                  || (gimple_code (def_stmt) == GIMPLE_PHI\n+                      && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n+                                  == vect_internal_def\n+                      && !is_loop_header_bb_p (gimple_bb (def_stmt)))))\n \t    {\n-\t      tree op = gimple_assign_rhs1 (next_stmt);\n-              gimple def_stmt = NULL;\n-\n-              if (TREE_CODE (op) == SSA_NAME)\n-                def_stmt = SSA_NAME_DEF_STMT (op);\n-\n-\t      /* Check that the other def is either defined in the loop\n-\t\t (\"vect_internal_def\"), or it's an induction (defined by a\n-\t\t loop-header phi-node).  */\n-\t      if (code == COND_EXPR\n-                  || (def_stmt\n-\t\t      && flow_bb_inside_loop_p (loop, gimple_bb (def_stmt))\n-                      && (is_gimple_assign (def_stmt)\n-                          || is_gimple_call (def_stmt)\n-                          || STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n+\t      lhs = gimple_assign_lhs (next_stmt);\n+\t      next_stmt = GROUP_NEXT_ELEMENT (vinfo_for_stmt (next_stmt));\n+ \t      continue;\n+\t    }\n+\n+\t  return false;\n+\t}\n+      else\n+\t{\n+          tree op = gimple_assign_rhs2 (next_stmt);\n+          gimple def_stmt = NULL;\n+\n+          if (TREE_CODE (op) == SSA_NAME)\n+            def_stmt = SSA_NAME_DEF_STMT (op);\n+\n+          /* Check that the other def is either defined in the loop\n+            (\"vect_internal_def\"), or it's an induction (defined by a\n+            loop-header phi-node).  */\n+          if (def_stmt\n+\t      && flow_bb_inside_loop_p (loop, gimple_bb (def_stmt))\n+              && (is_gimple_assign (def_stmt)\n+                  || is_gimple_call (def_stmt)\n+                  || STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n                               == vect_induction_def\n-                          || (gimple_code (def_stmt) == GIMPLE_PHI\n-                              && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n+                  || (gimple_code (def_stmt) == GIMPLE_PHI\n+                      && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n                                   == vect_internal_def\n-                              && !is_loop_header_bb_p (gimple_bb (def_stmt))))))\n+                      && !is_loop_header_bb_p (gimple_bb (def_stmt)))))\n+  \t    {\n+\t      if (vect_print_dump_info (REPORT_DETAILS))\n \t\t{\n-\t\t  lhs = gimple_assign_lhs (next_stmt);\n-\t\t  next_stmt = GROUP_NEXT_ELEMENT (vinfo_for_stmt (next_stmt));\n- \t\t  continue;\n+\t\t  fprintf (vect_dump, \"swapping oprnds: \");\n+\t\t  print_gimple_stmt (vect_dump, next_stmt, 0, TDF_SLIM);\n \t\t}\n \n-\t      return false;\n+\t      swap_tree_operands (next_stmt,\n+\t \t\t          gimple_assign_rhs1_ptr (next_stmt),\n+                                  gimple_assign_rhs2_ptr (next_stmt));\n+\t      mark_symbols_for_renaming (next_stmt);\n \t    }\n \t  else\n-\t    {\n-              tree op = gimple_assign_rhs2 (next_stmt);\n-              gimple def_stmt = NULL;\n-\n-              if (TREE_CODE (op) == SSA_NAME)\n-                def_stmt = SSA_NAME_DEF_STMT (op);\n-\n-              /* Check that the other def is either defined in the loop\n-                 (\"vect_internal_def\"), or it's an induction (defined by a\n-                 loop-header phi-node).  */\n-              if (code == COND_EXPR\n-                  || (def_stmt\n-\t\t      && flow_bb_inside_loop_p (loop, gimple_bb (def_stmt))\n-                      && (is_gimple_assign (def_stmt)\n-                          || is_gimple_call (def_stmt)\n-                          || STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n-                              == vect_induction_def\n-                          || (gimple_code (def_stmt) == GIMPLE_PHI\n-                              && STMT_VINFO_DEF_TYPE (vinfo_for_stmt (def_stmt))\n-                                  == vect_internal_def\n-                              && !is_loop_header_bb_p (gimple_bb (def_stmt))))))\n-\t\t{\n-\t\t  if (vect_print_dump_info (REPORT_DETAILS))\n-\t\t    {\n-\t\t      fprintf (vect_dump, \"swapping oprnds: \");\n-\t\t      print_gimple_stmt (vect_dump, next_stmt, 0, TDF_SLIM);\n-\t\t    }\n-\n-\t\t  swap_tree_operands (next_stmt,\n-\t\t\t      gimple_assign_rhs1_ptr (next_stmt),\n-                              gimple_assign_rhs2_ptr (next_stmt));\n-\t\t  mark_symbols_for_renaming (next_stmt);\n-\t\t}\n-\t      else\n-\t\treturn false;\n-\t    }\n+\t    return false;\n         }\n \n       lhs = gimple_assign_lhs (next_stmt);\n@@ -2273,7 +2270,7 @@ vect_is_simple_reduction_1 (loop_vec_info loop_info, gimple phi,\n     }\n \n   /* Try to find SLP reduction chain.  */\n-  if (vect_is_slp_reduction (loop_info, phi, def_stmt))\n+  if (check_reduction && vect_is_slp_reduction (loop_info, phi, def_stmt))\n     {\n       if (vect_print_dump_info (REPORT_DETAILS))\n         report_vect_op (def_stmt, \"reduction: detected reduction chain: \");"}]}