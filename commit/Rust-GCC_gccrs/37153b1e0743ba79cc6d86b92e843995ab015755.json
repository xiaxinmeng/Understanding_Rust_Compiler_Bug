{"sha": "37153b1e0743ba79cc6d86b92e843995ab015755", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcxNTNiMWUwNzQzYmE3OWNjNmQ4NmI5MmU4NDM5OTVhYjAxNTc1NQ==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-29T21:52:00Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-29T21:52:00Z"}, "message": "In gcc/objc/: 2010-12-29 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/objc/:\n2010-12-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR objc/47118\n\t* objc-act.c (objc_build_synchronized): Check the argument of\n\t@synchronized and emit an appropriate error if it is not a valid\n\tObjective-C object.  Deal gracefully with that case.  Updated\n\tcomments and variable names.\n\nIn gcc/testsuite/:\n2010-12-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR objc/47118\n\t* objc.dg/sync-3.m: New.\n\t* obj-c++.dg/sync-3.mm: New.\n\nFrom-SVN: r168326", "tree": {"sha": "28dcffe9c04ce1bede7dfe150127f4b08af4251b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28dcffe9c04ce1bede7dfe150127f4b08af4251b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37153b1e0743ba79cc6d86b92e843995ab015755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37153b1e0743ba79cc6d86b92e843995ab015755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37153b1e0743ba79cc6d86b92e843995ab015755", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37153b1e0743ba79cc6d86b92e843995ab015755/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9fdc58ded7f2bdaa25e8019ea85442f58e4683ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fdc58ded7f2bdaa25e8019ea85442f58e4683ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fdc58ded7f2bdaa25e8019ea85442f58e4683ad"}], "stats": {"total": 345, "additions": 323, "deletions": 22}, "files": [{"sha": "5523829f13cff73c80ef962a6e3085d030d92d13", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37153b1e0743ba79cc6d86b92e843995ab015755/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37153b1e0743ba79cc6d86b92e843995ab015755/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=37153b1e0743ba79cc6d86b92e843995ab015755", "patch": "@@ -1,3 +1,11 @@\n+2010-12-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/47118\n+\t* objc-act.c (objc_build_synchronized): Check the argument of\n+\t@synchronized and emit an appropriate error if it is not a valid\n+\tObjective-C object.  Deal gracefully with that case.  Updated\n+\tcomments and variable names.\n+\n 2010-12-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tPR objc/47075"}, {"sha": "47f3fbc379247a41c95cf0368dc7ed6abd3696ba", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 53, "deletions": 22, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37153b1e0743ba79cc6d86b92e843995ab015755/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37153b1e0743ba79cc6d86b92e843995ab015755/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=37153b1e0743ba79cc6d86b92e843995ab015755", "patch": "@@ -5630,28 +5630,59 @@ objc_build_throw_stmt (location_t loc, tree throw_expr)\n }\n \n tree\n-objc_build_synchronized (location_t start_locus, tree mutex, tree body)\n-{\n-  tree args, call;\n-\n-  /* First lock the mutex.  */\n-  mutex = save_expr (mutex);\n-  args = tree_cons (NULL, mutex, NULL);\n-  call = build_function_call (input_location,\n-\t\t\t      objc_sync_enter_decl, args);\n-  SET_EXPR_LOCATION (call, start_locus);\n-  add_stmt (call);\n-\n-  /* Build the mutex unlock.  */\n-  args = tree_cons (NULL, mutex, NULL);\n-  call = build_function_call (input_location,\n-\t\t\t      objc_sync_exit_decl, args);\n-  SET_EXPR_LOCATION (call, input_location);\n-\n-  /* Put the that and the body in a TRY_FINALLY.  */\n-  objc_begin_try_stmt (start_locus, body);\n-  objc_build_finally_clause (input_location, call);\n-  return objc_finish_try_stmt ();\n+objc_build_synchronized (location_t start_locus, tree object_expr, tree body)\n+{\n+  /* object_expr should never be NULL; but in case it is, convert it to\n+     error_mark_node.  */\n+  if (object_expr == NULL)\n+    object_expr = error_mark_node;\n+\n+  /* Validate object_expr.  If not valid, set it to error_mark_node.  */\n+  if (object_expr != error_mark_node)\n+    {\n+      if (!objc_type_valid_for_messaging (TREE_TYPE (object_expr), true))\n+\t{\n+\t  error_at (start_locus, \"%<@synchronized%> argument is not an object\");\n+\t  object_expr = error_mark_node;\n+\t}\n+    }\n+  \n+  if (object_expr == error_mark_node)\n+    {\n+      /* If we found an error, we simply ignore the '@synchronized'.\n+\t Compile the body so we can keep going with minimal\n+\t casualties.  */\n+      return add_stmt (body);\n+    }\n+  else\n+    {\n+      tree call;\n+      tree args;\n+\n+      /* objc_sync_enter (object_expr); */      \n+      object_expr = save_expr (object_expr);\n+      args = tree_cons (NULL, object_expr, NULL);\n+      call = build_function_call (input_location,\n+\t\t\t\t  objc_sync_enter_decl, args);\n+      SET_EXPR_LOCATION (call, start_locus);\n+      add_stmt (call);\n+\n+      /* Build \"objc_sync_exit (object_expr);\" but do not add it yet;\n+\t it goes inside the @finalize() clause.  */\n+      args = tree_cons (NULL, object_expr, NULL);\n+      call = build_function_call (input_location,\n+\t\t\t\t  objc_sync_exit_decl, args);\n+      SET_EXPR_LOCATION (call, input_location);\n+\n+      /* @try { body; } */\n+      objc_begin_try_stmt (start_locus, body);\n+      \n+      /* @finally { objc_sync_exit (object_expr); } */\n+      objc_build_finally_clause (input_location, call);\n+      \n+      /* End of try statement.  */\n+      return objc_finish_try_stmt ();\n+    }\n }\n \n \f"}, {"sha": "9019f79a1883f4990fd1d72736ecfd80013a28fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37153b1e0743ba79cc6d86b92e843995ab015755/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37153b1e0743ba79cc6d86b92e843995ab015755/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37153b1e0743ba79cc6d86b92e843995ab015755", "patch": "@@ -1,3 +1,9 @@\n+2010-12-29  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/47118\n+\t* objc.dg/sync-3.m: New.\n+\t* obj-c++.dg/sync-3.mm: New.\n+\n 2010-12-29  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/46838"}, {"sha": "95def43d05db725355a2f30a8b379c6679e5b43d", "filename": "gcc/testsuite/obj-c++.dg/sync-3.mm", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37153b1e0743ba79cc6d86b92e843995ab015755/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsync-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37153b1e0743ba79cc6d86b92e843995ab015755/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsync-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsync-3.mm?ref=37153b1e0743ba79cc6d86b92e843995ab015755", "patch": "@@ -0,0 +1,128 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, December 2010.  */\n+/* { dg-options \"-fobjc-exceptions\" } */\n+/* { dg-do compile } */\n+\n+/* Test that the compiler is checking the argument of @synchronized(),\n+   and produce errors when invalid types are used.  */\n+\n+#include <objc/objc.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+@protocol MyProtocol;\n+\n+typedef MyObject MyObjectTypedef;\n+typedef MyObject *MyObjectPtrTypedef;\n+typedef int intTypedef;\n+\n+typedef struct { float x; float y; } point, *point_ptr;\n+\n+int test (id object)\n+{\n+  int dummy = 0;\n+\n+  {\n+    int x;\n+    @synchronized (x) /* { dg-error \".@synchronized. argument is not an object\" } */\n+    { dummy++; }\n+  }\n+\n+  {\n+    intTypedef x;\n+    @synchronized (x) /* { dg-error \".@synchronized. argument is not an object\" } */\n+    { dummy++; }\n+  }\n+\n+  {\n+    int *x;\n+    @synchronized (x) /* { dg-error \".@synchronized. argument is not an object\" } */\n+    { dummy++; }\n+  }\n+\n+  {\n+    point x;\n+    @synchronized (x) /* { dg-error \".@synchronized. argument is not an object\" } */\n+    { dummy++; }\n+  }\n+\n+  {\n+    point_ptr x;\n+    @synchronized (x) /* { dg-error \".@synchronized. argument is not an object\" } */\n+    { dummy++; }\n+  }\n+\n+  {\n+    id x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  {\n+    id <MyProtocol> x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  {\n+    MyObject *x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  {\n+    MyObject <MyProtocol> *x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  {\n+    static MyObject *x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  {\n+    MyObjectTypedef *x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  {\n+    MyObjectTypedef <MyProtocol> *x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  {\n+    MyObjectPtrTypedef x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  {\n+    Class x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  @synchronized (1) /* { dg-error \".@synchronized. argument is not an object\" } */\n+    { dummy++; }\n+\n+  @synchronized (\"Test\") /* { dg-error \".@synchronized. argument is not an object\" } */\n+    { dummy++; }\n+\n+  @synchronized () /* { dg-error \"expected\" } */\n+    { dummy++; }\n+\n+  @synchronized (int) /* { dg-error \"expected\" } */\n+    { dummy++; }\n+\n+  return dummy;\n+}"}, {"sha": "5cee890bba2e7db943b62cabd9412583cc0c5ecb", "filename": "gcc/testsuite/objc.dg/sync-3.m", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37153b1e0743ba79cc6d86b92e843995ab015755/gcc%2Ftestsuite%2Fobjc.dg%2Fsync-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37153b1e0743ba79cc6d86b92e843995ab015755/gcc%2Ftestsuite%2Fobjc.dg%2Fsync-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsync-3.m?ref=37153b1e0743ba79cc6d86b92e843995ab015755", "patch": "@@ -0,0 +1,128 @@\n+/* Contributed by Nicola Pero <nicola.pero@meta-innovation.com>, December 2010.  */\n+/* { dg-options \"-fobjc-exceptions\" } */\n+/* { dg-do compile } */\n+\n+/* Test that the compiler is checking the argument of @synchronized(),\n+   and produce errors when invalid types are used.  */\n+\n+#include <objc/objc.h>\n+\n+@interface MyObject\n+{\n+  Class isa;\n+}\n+@end\n+\n+@implementation MyObject\n+@end\n+\n+@protocol MyProtocol;\n+\n+typedef MyObject MyObjectTypedef;\n+typedef MyObject *MyObjectPtrTypedef;\n+typedef int intTypedef;\n+\n+typedef struct { float x; float y; } point, *point_ptr;\n+\n+int test (id object)\n+{\n+  int dummy = 0;\n+\n+  {\n+    int x;\n+    @synchronized (x) /* { dg-error \".@synchronized. argument is not an object\" } */\n+    { dummy++; }\n+  }\n+\n+  {\n+    intTypedef x;\n+    @synchronized (x) /* { dg-error \".@synchronized. argument is not an object\" } */\n+    { dummy++; }\n+  }\n+\n+  {\n+    int *x;\n+    @synchronized (x) /* { dg-error \".@synchronized. argument is not an object\" } */\n+    { dummy++; }\n+  }\n+\n+  {\n+    point x;\n+    @synchronized (x) /* { dg-error \".@synchronized. argument is not an object\" } */\n+    { dummy++; }\n+  }\n+\n+  {\n+    point_ptr x;\n+    @synchronized (x) /* { dg-error \".@synchronized. argument is not an object\" } */\n+    { dummy++; }\n+  }\n+\n+  {\n+    id x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  {\n+    id <MyProtocol> x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  {\n+    MyObject *x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  {\n+    MyObject <MyProtocol> *x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  {\n+    static MyObject *x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  {\n+    MyObjectTypedef *x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  {\n+    MyObjectTypedef <MyProtocol> *x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  {\n+    MyObjectPtrTypedef x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  {\n+    Class x;\n+    @synchronized (x) /* Ok */\n+    { dummy++; }\n+  }\n+\n+  @synchronized (1) /* { dg-error \".@synchronized. argument is not an object\" } */\n+    { dummy++; }\n+\n+  @synchronized (\"Test\") /* { dg-error \".@synchronized. argument is not an object\" } */\n+    { dummy++; }\n+\n+  @synchronized () /* { dg-error \"expected expression\" } */\n+    { dummy++; }\n+\n+  @synchronized (int) /* { dg-error \"expected expression\" } */\n+    { dummy++; }\n+\n+  return dummy;\n+}"}]}