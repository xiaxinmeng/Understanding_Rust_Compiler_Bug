{"sha": "df3fbd5957f12927a459a2686f4eee55f66ec2f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYzZmJkNTk1N2YxMjkyN2E0NTlhMjY4NmY0ZWVlNTVmNjZlYzJmNA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-06-04T17:38:26Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-06-04T18:45:01Z"}, "message": "d: Fix ICE in gimplify_var_or_parm_decl, at gimplify.c:2755 (PR100882)\n\nConstructor calls for temporaries were reusing the TARGET_EXPR_SLOT of a\nTARGET_EXPR for an assignment, which later got passed to `build_assign',\nwhich stripped away the outer TARGET_EXPR, leaving a reference to a lone\ntemporary with no declaration.\n\nThis stripping away of the TARGET_EXPR also discarded any cleanups that\nmay have been assigned to the expression as well.\n\nSo now the reuse of TARGET_EXPR_SLOT has been removed, and\n`build_assign' now constructs assignments inside the TARGET_EXPR_INITIAL\nslot.  This has also been extended to `return_expr', to deal with\npossibility of a TARGET_EXPR being returned.\n\ngcc/d/ChangeLog:\n\n\tPR d/100882\n\t* d-codegen.cc (build_assign): Construct initializations inside\n\tTARGET_EXPR_INITIAL.\n\t(compound_expr): Remove intermediate expressions that have no\n\tside-effects.\n\t(return_expr): Construct returns inside TARGET_EXPR_INITIAL.\n\t* expr.cc (ExprVisitor::visit (CallExp *)): Remove useless assignment\n\tto TARGET_EXPR_SLOT.\n\ngcc/testsuite/ChangeLog:\n\n\tPR d/100882\n\t* gdc.dg/pr100882a.d: New test.\n\t* gdc.dg/pr100882b.d: New test.\n\t* gdc.dg/pr100882c.d: New test.\n\t* gdc.dg/torture/pr100882.d: New test.", "tree": {"sha": "c9387e7a394e7e91adcaf72aa799f4a48f03e88b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9387e7a394e7e91adcaf72aa799f4a48f03e88b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df3fbd5957f12927a459a2686f4eee55f66ec2f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df3fbd5957f12927a459a2686f4eee55f66ec2f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df3fbd5957f12927a459a2686f4eee55f66ec2f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df3fbd5957f12927a459a2686f4eee55f66ec2f4/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f8c9691495ad5a307db98dc19c3296ee4e6de64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f8c9691495ad5a307db98dc19c3296ee4e6de64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f8c9691495ad5a307db98dc19c3296ee4e6de64"}], "stats": {"total": 143, "additions": 131, "deletions": 12}, "files": [{"sha": "9a9447371aa012923a6f1829d9c61855be3d4aa4", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3fbd5957f12927a459a2686f4eee55f66ec2f4/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3fbd5957f12927a459a2686f4eee55f66ec2f4/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=df3fbd5957f12927a459a2686f4eee55f66ec2f4", "patch": "@@ -1330,6 +1330,7 @@ component_ref (tree object, tree field)\n tree\n build_assign (tree_code code, tree lhs, tree rhs)\n {\n+  tree result;\n   tree init = stabilize_expr (&lhs);\n   init = compound_expr (init, stabilize_expr (&rhs));\n \n@@ -1348,22 +1349,27 @@ build_assign (tree_code code, tree lhs, tree rhs)\n   if (TREE_CODE (rhs) == TARGET_EXPR)\n     {\n       /* If CODE is not INIT_EXPR, can't initialize LHS directly,\n-\t since that would cause the LHS to be constructed twice.\n-\t So we force the TARGET_EXPR to be expanded without a target.  */\n+\t since that would cause the LHS to be constructed twice.  */\n       if (code != INIT_EXPR)\n \t{\n \t  init = compound_expr (init, rhs);\n-\t  rhs = TARGET_EXPR_SLOT (rhs);\n+\t  result = build_assign (code, lhs, TARGET_EXPR_SLOT (rhs));\n \t}\n       else\n \t{\n \t  d_mark_addressable (lhs);\n-\t  rhs = TARGET_EXPR_INITIAL (rhs);\n+\t  TARGET_EXPR_INITIAL (rhs) = build_assign (code, lhs,\n+\t\t\t\t\t\t    TARGET_EXPR_INITIAL (rhs));\n+\t  result = rhs;\n \t}\n     }\n+  else\n+    {\n+      /* Simple assignment.  */\n+      result = fold_build2_loc (input_location, code,\n+\t\t\t\tTREE_TYPE (lhs), lhs, rhs);\n+    }\n \n-  tree result = fold_build2_loc (input_location, code,\n-\t\t\t\t TREE_TYPE (lhs), lhs, rhs);\n   return compound_expr (init, result);\n }\n \n@@ -1485,6 +1491,11 @@ compound_expr (tree arg0, tree arg1)\n   if (arg0 == NULL_TREE || !TREE_SIDE_EFFECTS (arg0))\n     return arg1;\n \n+  /* Remove intermediate expressions that have no side-effects.  */\n+  while (TREE_CODE (arg0) == COMPOUND_EXPR\n+\t && !TREE_SIDE_EFFECTS (TREE_OPERAND (arg0, 1)))\n+    arg0 = TREE_OPERAND (arg0, 0);\n+\n   if (TREE_CODE (arg1) == TARGET_EXPR)\n     {\n       /* If the rhs is a TARGET_EXPR, then build the compound expression\n@@ -1505,6 +1516,19 @@ compound_expr (tree arg0, tree arg1)\n tree\n return_expr (tree ret)\n {\n+  /* Same as build_assign, the DECL_RESULT assignment replaces the temporary\n+     in TARGET_EXPR_SLOT.  */\n+  if (ret != NULL_TREE && TREE_CODE (ret) == TARGET_EXPR)\n+    {\n+      tree exp = TARGET_EXPR_INITIAL (ret);\n+      tree init = stabilize_expr (&exp);\n+\n+      exp = fold_build1_loc (input_location, RETURN_EXPR, void_type_node, exp);\n+      TARGET_EXPR_INITIAL (ret) = compound_expr (init, exp);\n+\n+      return ret;\n+    }\n+\n   return fold_build1_loc (input_location, RETURN_EXPR,\n \t\t\t  void_type_node, ret);\n }"}, {"sha": "e76cae98f7e298fd6a18206ef741b72b7f1cb5d4", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3fbd5957f12927a459a2686f4eee55f66ec2f4/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3fbd5957f12927a459a2686f4eee55f66ec2f4/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=df3fbd5957f12927a459a2686f4eee55f66ec2f4", "patch": "@@ -1894,15 +1894,10 @@ class ExprVisitor : public Visitor\n       exp = d_convert (build_ctype (e->type), exp);\n \n     /* If this call was found to be a constructor for a temporary with a\n-       cleanup, then move the call inside the TARGET_EXPR.  The original\n-       initializer is turned into an assignment, to keep its side effect.  */\n+       cleanup, then move the call inside the TARGET_EXPR.  */\n     if (cleanup != NULL_TREE)\n       {\n \ttree init = TARGET_EXPR_INITIAL (cleanup);\n-\ttree slot = TARGET_EXPR_SLOT (cleanup);\n-\td_mark_addressable (slot);\n-\tinit = build_assign (INIT_EXPR, slot, init);\n-\n \tTARGET_EXPR_INITIAL (cleanup) = compound_expr (init, exp);\n \texp = cleanup;\n       }"}, {"sha": "de92ab3bef1bc1e2f11f7d0af0f8fc3fcc6b1ffb", "filename": "gcc/testsuite/gdc.dg/pr100882a.d", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3fbd5957f12927a459a2686f4eee55f66ec2f4/gcc%2Ftestsuite%2Fgdc.dg%2Fpr100882a.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3fbd5957f12927a459a2686f4eee55f66ec2f4/gcc%2Ftestsuite%2Fgdc.dg%2Fpr100882a.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr100882a.d?ref=df3fbd5957f12927a459a2686f4eee55f66ec2f4", "patch": "@@ -0,0 +1,35 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100882\n+// { dg-do compile }\n+\n+struct AllocatorList(Factory)\n+{\n+    Factory factory;\n+    auto make(size_t n) { return factory(n); }\n+    this(Factory plant)\n+    {\n+        factory = plant;\n+    }\n+}\n+\n+struct Region\n+{\n+    ~this()\n+    {\n+    }\n+}\n+\n+auto mmapRegionList()\n+{\n+    struct Factory\n+    {\n+        this(size_t )\n+        {\n+        }\n+        auto opCall(size_t )\n+        {\n+            return Region();\n+        }\n+    }\n+    auto shop = Factory();\n+    AllocatorList!Factory(shop);\n+}"}, {"sha": "deaa4b44a168426715833512171c8410e41cdea2", "filename": "gcc/testsuite/gdc.dg/pr100882b.d", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3fbd5957f12927a459a2686f4eee55f66ec2f4/gcc%2Ftestsuite%2Fgdc.dg%2Fpr100882b.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3fbd5957f12927a459a2686f4eee55f66ec2f4/gcc%2Ftestsuite%2Fgdc.dg%2Fpr100882b.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr100882b.d?ref=df3fbd5957f12927a459a2686f4eee55f66ec2f4", "patch": "@@ -0,0 +1,19 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100882\n+// { dg-do compile }\n+\n+auto iota(int, int)\n+{\n+    struct Result\n+    {\n+        this(int)\n+        {\n+        }\n+    }\n+    return Result();\n+}\n+\n+auto iota(int end)\n+{\n+    int begin;\n+    return iota(begin, end);\n+}"}, {"sha": "f4e6e4d3651bb5fb3265773ec90ce2c169f571a3", "filename": "gcc/testsuite/gdc.dg/pr100882c.d", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3fbd5957f12927a459a2686f4eee55f66ec2f4/gcc%2Ftestsuite%2Fgdc.dg%2Fpr100882c.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3fbd5957f12927a459a2686f4eee55f66ec2f4/gcc%2Ftestsuite%2Fgdc.dg%2Fpr100882c.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr100882c.d?ref=df3fbd5957f12927a459a2686f4eee55f66ec2f4", "patch": "@@ -0,0 +1,25 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100882\n+// { dg-do compile }\n+\n+struct CowArray\n+{\n+    this(this)\n+    {\n+    }\n+}\n+\n+struct Tuple\n+{\n+    CowArray expand;\n+}\n+\n+auto tuple(CowArray)\n+{\n+    return Tuple();\n+}\n+\n+auto parseCharTerm()\n+{\n+    CowArray set;\n+    return tuple(set);\n+}"}, {"sha": "d94baff97ac7b6b8a2e639949b90260f22ad1cd2", "filename": "gcc/testsuite/gdc.dg/torture/pr100882.d", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df3fbd5957f12927a459a2686f4eee55f66ec2f4/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr100882.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df3fbd5957f12927a459a2686f4eee55f66ec2f4/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr100882.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr100882.d?ref=df3fbd5957f12927a459a2686f4eee55f66ec2f4", "patch": "@@ -0,0 +1,21 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=100882\n+// { dg-additional-options \"-fmain\" }\n+// { dg-do run }\n+\n+__gshared int counter = 0;\n+struct S100882\n+{\n+    this(int) { counter++; }\n+    ~this() { counter++; }\n+}\n+static S100882 s;\n+static this()\n+{\n+    s = cast(shared) S100882(0);\n+    assert(counter == 2);\n+}\n+\n+auto test100882()\n+{\n+    return cast(shared) S100882(0);\n+}"}]}