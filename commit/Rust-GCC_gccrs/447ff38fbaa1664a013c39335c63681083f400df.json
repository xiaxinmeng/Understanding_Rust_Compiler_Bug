{"sha": "447ff38fbaa1664a013c39335c63681083f400df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ3ZmYzOGZiYWExNjY0YTAxM2MzOTMzNWM2MzY4MTA4M2Y0MDBkZg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2003-01-28T15:48:17Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2003-01-28T15:48:17Z"}, "message": "mips.h (UNITS_PER_HWFPVALUE): Renamed from...\n\n* config/mips/mips.h (UNITS_PER_HWFPVALUE): Renamed from...\n(UNITS_PER_FPVALUE): Defined as the width of a long double, or\nzero if no hardware floating point.\n(LONG_DUBLE_TYPE_SIZE): Set to 128 on N32 and N64.\n(MAX_FIXED_MODE_SIZE): Define to LONG_DOUBLE_TYPE_SIZE.\n(LIBGCC2_LONG_DOUBLE_TYPE_SIZE): Define.\n(BIGGEST_ALIGNMENT): Same as LONG_DOUBLE_TYPE_SIZE.\n(FUNCTION_VALUE_REGNO_P): Set for FP_RETURN+2 on N32 and N64.\n* config/mips/mips.c (mips_arg_info): Pass TFmode values in\neven FP registers on N32 and N64.\n(mips_setup_incoming_varargs): Use UNITS_PER_HWFPVALUE.\n(mips_va_start): Adjust alignment of ARG_POINTER_REGNUM.\n(mips_va_arg): Use UNITS_PER_HWFPVALUE.  Impose additional\neven-register-like alignment to 128-bit arguments.\n(save_restore_insns): Use UNITS_PER_HWFPVALUE.\n(mips_function_value): Likewise.  Return TFmode in $f0 and $f2\non N32 or N64.\n* config/mips/_tilib.c (__negti2, __ashlti3, __lshrti3): New.\n* config/mips/t-iris6 (LIB2FUNCS_EXTRA): Add _tilib.c.\n(TPBIT): Set to tp-bit.c.\n(tp-bit.c): Create out of fp-bit.c.\n\nFrom-SVN: r61977", "tree": {"sha": "588134eee0a89f1566b711b97da61d6393cc52a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/588134eee0a89f1566b711b97da61d6393cc52a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/447ff38fbaa1664a013c39335c63681083f400df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/447ff38fbaa1664a013c39335c63681083f400df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/447ff38fbaa1664a013c39335c63681083f400df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/447ff38fbaa1664a013c39335c63681083f400df/comments", "author": null, "committer": null, "parents": [{"sha": "483a57092272aa47a60301105c8d8f73b9a03d85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483a57092272aa47a60301105c8d8f73b9a03d85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/483a57092272aa47a60301105c8d8f73b9a03d85"}], "stats": {"total": 162, "additions": 162, "deletions": 0}, "files": [{"sha": "0a76f8ab857f6fbc0cb90cdfae25e483ff20a79f", "filename": "gcc/config/mips/_tilib.c", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/447ff38fbaa1664a013c39335c63681083f400df/gcc%2Fconfig%2Fmips%2F_tilib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/447ff38fbaa1664a013c39335c63681083f400df/gcc%2Fconfig%2Fmips%2F_tilib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F_tilib.c?ref=447ff38fbaa1664a013c39335c63681083f400df", "patch": "@@ -0,0 +1,162 @@\n+/* A few TImode functions needed for TFmode emulated arithmetic.\n+   Copyright 2002, 2003 Free Software Foundation, Inc.\n+   Contributed by Alexandre Oliva <aoliva@redhat.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+\n+#include \"tconfig.h\"\n+#include \"tsystem.h\"\n+#include \"defaults.h\"\n+\n+#ifndef LIBGCC2_WORDS_BIG_ENDIAN\n+#define LIBGCC2_WORDS_BIG_ENDIAN WORDS_BIG_ENDIAN\n+#endif\n+\n+#if _MIPS_SIM == 2 /* N32 */ || _MIPS_SIM == 3 /* 64 */\n+\n+typedef int TItype __attribute__ ((mode (TI)));\n+typedef int DItype __attribute__ ((mode (DI)));\n+typedef int SItype __attribute__ ((mode (SI)));\n+\n+typedef unsigned int UDItype __attribute__ ((mode (DI)));\n+\n+typedef union\n+{\n+  struct TIstruct {\n+#if LIBGCC2_WORDS_BIG_ENDIAN\n+    DItype high, low;\n+#else\n+    DItype low, high;\n+#endif\n+  } s;\n+  TItype ll;\n+} TIunion;\n+\n+TItype __negti2 (TItype);\n+TItype __ashlti3 (TItype, int);\n+#if 0\n+TItype __ashrti3 (TItype, int);\n+#endif\n+TItype __lshrti3 (TItype, int);\n+\n+TItype\n+__negti2 (TItype u)\n+{\n+  TIunion w;\n+  TIunion uu;\n+\n+  uu.ll = u;\n+\n+  w.s.low = -uu.s.low;\n+  w.s.high = -uu.s.high - ((UDItype) w.s.low > 0);\n+\n+  return w.ll;\n+}\n+\n+TItype\n+__ashlti3 (TItype u, int b)\n+{\n+  TIunion w;\n+  int bm;\n+  TIunion uu;\n+\n+  if (b == 0)\n+    return u;\n+\n+  uu.ll = u;\n+\n+  bm = (sizeof (DItype) * BITS_PER_UNIT) - b;\n+  if (bm <= 0)\n+    {\n+      w.s.low = 0;\n+      w.s.high = (UDItype) uu.s.low << -bm;\n+    }\n+  else\n+    {\n+      UDItype carries = (UDItype) uu.s.low >> bm;\n+\n+      w.s.low = (UDItype) uu.s.low << b;\n+      w.s.high = ((UDItype) uu.s.high << b) | carries;\n+    }\n+\n+  return w.ll;\n+}\n+\n+#if 0\n+TItype\n+__ashrti3 (TItype u, int b)\n+{\n+  TIunion w;\n+  int bm;\n+  TIunion uu;\n+\n+  if (b == 0)\n+    return u;\n+\n+  uu.ll = u;\n+\n+  bm = (sizeof (DItype) * BITS_PER_UNIT) - b;\n+  if (bm <= 0)\n+    {\n+      /* w.s.high = 1..1 or 0..0 */\n+      w.s.high = uu.s.high >> (sizeof (DItype) * BITS_PER_UNIT - 1);\n+      w.s.low = uu.s.high >> -bm;\n+    }\n+  else\n+    {\n+      UDItype carries = (UDItype) uu.s.high << bm;\n+\n+      w.s.high = uu.s.high >> b;\n+      w.s.low = ((UDItype) uu.s.low >> b) | carries;\n+    }\n+\n+  return w.ll;\n+}\n+#endif\n+\n+TItype\n+__lshrti3 (TItype u, int b)\n+{\n+  TIunion w;\n+  int bm;\n+  TIunion uu;\n+\n+  if (b == 0)\n+    return u;\n+\n+  uu.ll = u;\n+\n+  bm = (sizeof (DItype) * BITS_PER_UNIT) - b;\n+  if (bm <= 0)\n+    {\n+      w.s.high = 0;\n+      w.s.low = (UDItype) uu.s.high >> -bm;\n+    }\n+  else\n+    {\n+      UDItype carries = (UDItype) uu.s.high << bm;\n+\n+      w.s.high = (UDItype) uu.s.high >> b;\n+      w.s.low = ((UDItype) uu.s.low >> b) | carries;\n+    }\n+\n+  return w.ll;\n+}\n+\n+#endif /* N32 or N64 */"}]}