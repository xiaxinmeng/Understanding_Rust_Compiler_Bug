{"sha": "f98251686f1e33a6698e9d118d7f1c6a600c0c23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk4MjUxNjg2ZjFlMzNhNjY5OGU5ZDExOGQ3ZjFjNmE2MDBjMGMyMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-11-27T10:55:32Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-11-27T10:55:32Z"}, "message": "cp-tree.h (binfo_from_vbase): Return the virtual base's binfo.\n\ncp:\n\t* cp-tree.h (binfo_from_vbase): Return the virtual base's binfo.\n\t* cvt.c (cp_convert_to_pointer): Add force parameter.\n\tAllow conversions via virtual base if forced.\n\t(convert_to_pointer_force): Adjust call to cp_convert_to_pointer.\n\t(ocp_convert): Likewise.\n\t* search.c (binfo_from_vbase): Return the virtual base's binfo.\n\t* typeck.c (get_delta_difference): Adjust handling of virtual\n\tbases.\ntestsuite:\n\t* g++.old-deja/g++.other/ptrmem8.C: New test.\n\nFrom-SVN: r37791", "tree": {"sha": "a663502c969fdc01fa746da34280a67ac26c0011", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a663502c969fdc01fa746da34280a67ac26c0011"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f98251686f1e33a6698e9d118d7f1c6a600c0c23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f98251686f1e33a6698e9d118d7f1c6a600c0c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f98251686f1e33a6698e9d118d7f1c6a600c0c23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f98251686f1e33a6698e9d118d7f1c6a600c0c23/comments", "author": null, "committer": null, "parents": [{"sha": "6b2adea9b7def69c83c89a2a957a68583a815728", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b2adea9b7def69c83c89a2a957a68583a815728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b2adea9b7def69c83c89a2a957a68583a815728"}], "stats": {"total": 158, "additions": 133, "deletions": 25}, "files": [{"sha": "f2b1adc92ec094d05424663f2b9c506bec03ea7d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f98251686f1e33a6698e9d118d7f1c6a600c0c23/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f98251686f1e33a6698e9d118d7f1c6a600c0c23/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f98251686f1e33a6698e9d118d7f1c6a600c0c23", "patch": "@@ -1,3 +1,14 @@\n+2000-11-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (binfo_from_vbase): Return the virtual base's binfo.\n+\t* cvt.c (cp_convert_to_pointer): Add force parameter.\n+\tAllow conversions via virtual base if forced.\n+\t(convert_to_pointer_force): Adjust call to cp_convert_to_pointer.\n+\t(ocp_convert): Likewise.\n+\t* search.c (binfo_from_vbase): Return the virtual base's binfo.\n+\t* typeck.c (get_delta_difference): Adjust handling of virtual\n+\tbases.\n+\n 2000-11-26  Mark Mitchell  <mark@codesourcery.com>\n \n \t* tree.c (struct list_hash): Remove."}, {"sha": "ab10f46c2ec714cc5f00a2d901ea153d71a284bc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f98251686f1e33a6698e9d118d7f1c6a600c0c23/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f98251686f1e33a6698e9d118d7f1c6a600c0c23/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f98251686f1e33a6698e9d118d7f1c6a600c0c23", "patch": "@@ -4265,7 +4265,7 @@ extern tree current_scope\t\t\tPARAMS ((void));\n extern int at_function_scope_p                  PARAMS ((void));\n extern tree lookup_conversions\t\t\tPARAMS ((tree));\n extern tree binfo_for_vtable\t\t\tPARAMS ((tree));\n-extern int  binfo_from_vbase\t\t\tPARAMS ((tree));\n+extern tree binfo_from_vbase\t\t\tPARAMS ((tree));\n extern tree dfs_walk                            PARAMS ((tree,\n \t\t\t\t\t\t       tree (*)(tree, void *),\n \t\t\t\t\t\t       tree (*) (tree, void *),"}, {"sha": "fe99c8f566e914ac8316cd14ae69ce4e0bf7c577", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f98251686f1e33a6698e9d118d7f1c6a600c0c23/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f98251686f1e33a6698e9d118d7f1c6a600c0c23/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=f98251686f1e33a6698e9d118d7f1c6a600c0c23", "patch": "@@ -35,7 +35,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"decl.h\"\n \n-static tree cp_convert_to_pointer PARAMS ((tree, tree));\n+static tree cp_convert_to_pointer PARAMS ((tree, tree, int));\n static tree convert_to_pointer_force PARAMS ((tree, tree));\n static tree build_up_reference PARAMS ((tree, tree, int));\n static void warn_ref_binding PARAMS ((tree, tree, tree));\n@@ -67,11 +67,14 @@ static void warn_ref_binding PARAMS ((tree, tree, tree));\n      else if dealing with method pointers, delegate\n      else convert blindly\n    else if converting class, pass off to build_type_conversion\n-   else try C-style pointer conversion  */\n+   else try C-style pointer conversion.  If FORCE is true then allow\n+   conversions via virtual bases (these are permitted by reinterpret_cast,\n+   but not static_cast).  */\n \n static tree\n-cp_convert_to_pointer (type, expr)\n+cp_convert_to_pointer (type, expr, force)\n      tree type, expr;\n+     int force;\n {\n   register tree intype = TREE_TYPE (expr);\n   register enum tree_code form;\n@@ -184,6 +187,7 @@ cp_convert_to_pointer (type, expr)\n \t  tree b1; \n \t  tree b2;\n \t  tree binfo;\n+\t  tree virt_binfo;\n \t  enum tree_code code;\n \n \t  b1 = TYPE_OFFSET_BASETYPE (TREE_TYPE (type));\n@@ -201,11 +205,21 @@ cp_convert_to_pointer (type, expr)\n \t  if (binfo == error_mark_node)\n \t    return error_mark_node;\n \n-\t  if (binfo_from_vbase (binfo))\n+          virt_binfo = binfo_from_vbase (binfo);\n+          if (virt_binfo)\n \t    {\n-\t      cp_error (\"conversion to `%T' from pointer to member of virtual base `%T'\",\n-\t\t\ttype, intype);\n-\t      return error_mark_node;\n+\t      if (force)\n+\t        cp_warning (\"pointer to member cast via virtual base `%T' of `%T' will only work for objects of dynamic type `%T'\",\n+\t                    BINFO_TYPE (virt_binfo),\n+                            BINFO_TYPE (BINFO_INHERITANCE_CHAIN (virt_binfo)),\n+                            code == MINUS_EXPR ? b2 : b1);\n+              else\n+                {\n+\t          cp_error (\"pointer to member cast via virtual base `%T' of `%T'\",\n+\t                    BINFO_TYPE (virt_binfo),\n+                            BINFO_TYPE (BINFO_INHERITANCE_CHAIN (virt_binfo)));\n+\t          return error_mark_node;\n+\t        }\n \t    }\n \t      \n \t  if (TREE_CODE (expr) == PTRMEM_CST)\n@@ -334,7 +348,7 @@ convert_to_pointer_force (type, expr)\n \t}\n     }\n \n-  return cp_convert_to_pointer (type, expr);\n+  return cp_convert_to_pointer (type, expr, 1);\n }\n \n /* We are passing something to a function which requires a reference.\n@@ -777,7 +791,7 @@ ocp_convert (type, expr, convtype, flags)\n     }\n   if (code == POINTER_TYPE || code == REFERENCE_TYPE\n       || TYPE_PTRMEMFUNC_P (type))\n-    return fold (cp_convert_to_pointer (type, e));\n+    return fold (cp_convert_to_pointer (type, e, 0));\n   if (code == REAL_TYPE || code == COMPLEX_TYPE)\n     {\n       if (IS_AGGR_TYPE (TREE_TYPE (e)))"}, {"sha": "ae1d64895ed152ad2f3518d4c7f6aaae965a583e", "filename": "gcc/cp/search.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f98251686f1e33a6698e9d118d7f1c6a600c0c23/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f98251686f1e33a6698e9d118d7f1c6a600c0c23/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=f98251686f1e33a6698e9d118d7f1c6a600c0c23", "patch": "@@ -3362,18 +3362,19 @@ binfo_for_vtable (var)\n   return binfo;\n }\n \n-/* Returns 1 iff BINFO is from a direct or indirect virtual base.  */\n+/* Returns the binfo of the first direct or indirect virtual base from\n+   which BINFO is derrived, or NULL if binfo is not via virtual.  */\n \n-int\n+tree\n binfo_from_vbase (binfo)\n      tree binfo;\n {\n   for (; binfo; binfo = BINFO_INHERITANCE_CHAIN (binfo))\n     {\n       if (TREE_VIA_VIRTUAL (binfo))\n-\treturn 1;\n+\treturn binfo;\n     }\n-  return 0;\n+  return NULL_TREE;\n }\n \n /* Returns the BINFO (if any) for the virtual baseclass T of the class"}, {"sha": "39f8b54515ee1321337d427d5df8554e07625e91", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f98251686f1e33a6698e9d118d7f1c6a600c0c23/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f98251686f1e33a6698e9d118d7f1c6a600c0c23/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f98251686f1e33a6698e9d118d7f1c6a600c0c23", "patch": "@@ -5912,6 +5912,7 @@ get_delta_difference (from, to, force)\n {\n   tree delta = integer_zero_node;\n   tree binfo;\n+  tree virt_binfo;\n   \n   if (to == from)\n     return delta;\n@@ -5937,11 +5938,12 @@ get_delta_difference (from, to, force)\n       binfo = get_binfo (to, from, 1);\n       if (binfo == 0 || binfo == error_mark_node)\n \treturn delta;\n-      if (binfo_from_vbase (binfo))\n-\t{\n-\t  binfo = binfo_for_vbase (BINFO_TYPE (binfo), from);\n-\t  cp_warning (\"pointer to member cast to virtual base `%T' will only work if you are very careful\", BINFO_TYPE (binfo));\n-\t}\n+      virt_binfo = binfo_from_vbase (binfo);\n+      \n+      if (virt_binfo)\n+        cp_warning (\"pointer to member cast via virtual base `%T' of `%T' will only work for objects of dynamic type `%T'\",\n+\t            BINFO_TYPE (virt_binfo),\n+\t            BINFO_TYPE (BINFO_INHERITANCE_CHAIN (virt_binfo)), from);\n       delta = BINFO_OFFSET (binfo);\n       delta = cp_convert (ptrdiff_type_node, delta);\n       \n@@ -5950,15 +5952,17 @@ get_delta_difference (from, to, force)\n \t\t\t\t delta);\n     }\n \n-  if (binfo_from_vbase (binfo))\n+  virt_binfo = binfo_from_vbase (binfo);\n+  if (virt_binfo)\n     {\n       if (force)\n-\t{\n-\t  cp_warning (\"pointer to member cast from virtual base `%T' will only wokr if you are very careful\", BINFO_TYPE (binfo));\n-\t}\n+        cp_warning (\"pointer to member cast via virtual base `%T' of `%T' will only work for objects of dynamic type `%T'\",\n+                    BINFO_TYPE (virt_binfo),\n+                    BINFO_TYPE (BINFO_INHERITANCE_CHAIN (virt_binfo)), to);\n       else\n-\tcp_error (\"pointer to member conversion from virtual base `%T'\",\n-\t\t  BINFO_TYPE (binfo));\n+\tcp_error (\"pointer to member conversion via virtual base `%T' of `%T'\",\n+\t\t  BINFO_TYPE (virt_binfo),\n+                  BINFO_TYPE (BINFO_INHERITANCE_CHAIN (virt_binfo)));\n     }\n \n   return BINFO_OFFSET (binfo);"}, {"sha": "1aeaf03a9dd2cbdf154477237bde4ded0a451c27", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f98251686f1e33a6698e9d118d7f1c6a600c0c23/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f98251686f1e33a6698e9d118d7f1c6a600c0c23/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f98251686f1e33a6698e9d118d7f1c6a600c0c23", "patch": "@@ -1,3 +1,7 @@\n+2000-11-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/ptrmem8.C: New test.\n+\n 2000-11-26  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.c-torture/execute/string-opt-7.c: New test."}, {"sha": "f99371a39a770438b4e4e6910cb73eb403d62d26", "filename": "gcc/testsuite/g++.old-deja/g++.other/ptrmem8.C", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f98251686f1e33a6698e9d118d7f1c6a600c0c23/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f98251686f1e33a6698e9d118d7f1c6a600c0c23/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem8.C?ref=f98251686f1e33a6698e9d118d7f1c6a600c0c23", "patch": "@@ -0,0 +1,74 @@\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 22 Nov 2000 <nathan@codesourcery.com>\n+\n+// bug 827. We died issuing warnings about dangerous pointer to member\n+// conversions.\n+\n+struct bar\n+{\n+  int barm;\n+    static void a();\n+};\n+struct filler1 {int fm;};\n+struct filler2 {int fm;};\n+struct filler3 {int fm;};\n+struct filler4 {int fm;};\n+\n+struct baz : filler1, bar, filler2\n+{\n+  int bazm;\n+};\n+\n+struct foo : filler3, virtual baz, filler4\n+{\n+    static void a();\n+    void b() {};\n+    int m;\n+};\n+\n+typedef void (bar::*barfPtr)();\n+typedef void (foo::*foofPtr)();\n+typedef int bar::*barmPtr;\n+typedef int foo::*foomPtr;\n+\n+int main ()\n+{\n+  foofPtr fp = &foo::b;\n+  barfPtr bp = (barfPtr)fp;         // WARNING - pointer to member\n+  foofPtr fp2 = (foofPtr)bp;        // WARNING - pointer to member\n+  \n+  if (fp2 != fp)\n+    return 1;\n+  \n+  foo fobj;\n+  fobj.filler1::fm = 1;\n+  fobj.filler2::fm = 2;\n+  fobj.filler3::fm = 3;\n+  fobj.filler4::fm = 4;\n+  fobj.bazm = 5;\n+  fobj.barm = 6;\n+  fobj.m = 78;\n+  \n+  foomPtr fmp = &foo::m;\n+  barmPtr bmp = (barmPtr)fmp;          // WARNING - pointer to member\n+  foomPtr fmp2 = (foomPtr)bmp;         // WARNING - pointer to member\n+  bar *bptr = &fobj;\n+  \n+  if (fmp != fmp2)\n+    return 2;\n+  \n+  if (bptr->*bmp != 78)\n+    return 3;\n+  \n+  bp = reinterpret_cast <barfPtr> (fp);\n+  fp2 = reinterpret_cast <foofPtr> (bp);\n+  if (fp2 != fp)\n+    return 4;\n+  \n+  bmp = reinterpret_cast <barmPtr> (fmp);\n+  fmp2 = reinterpret_cast <foomPtr> (bmp);\n+  if (fmp != fmp2)\n+    return 5;\n+  \n+  return 0;\n+}"}]}