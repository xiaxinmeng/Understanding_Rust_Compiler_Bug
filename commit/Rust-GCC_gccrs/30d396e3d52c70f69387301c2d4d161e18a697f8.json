{"sha": "30d396e3d52c70f69387301c2d4d161e18a697f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBkMzk2ZTNkNTJjNzBmNjkzODczMDFjMmQ0ZDE2MWUxOGE2OTdmOA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@atrey.karlin.mff.cuni.cz", "date": "2004-09-11T20:42:06Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2004-09-11T20:42:06Z"}, "message": "tree-cfg.c (set_bb_for_stmt): Use PHI_BB.\n\n\t* tree-cfg.c (set_bb_for_stmt): Use PHI_BB.\n\t* tree-dfa.c (compute_immediate_uses, add_immediate_use,\n\tredirect_immediate_use): Use PHI_DF.\n\t* tree-flow-inline.h (stmt_ann): Abort on phi nodes.\n\t(bb_for_stmt): Use PHI_BB.\n\t(get_immediate_uses): Use PHI_DF.\n\t* tree-ssa-dse.c (max_stmt_uid): New variable.\n\t(get_stmt_uid): New function.\n\t(dse_optimize_stmt, dse_record_phis, tree_ssa_dse): Do not use phi\n\tnode annotations.\n\t* tree-ssa-loop-im.c (LIM_DATA): Do not use phi statement annotations.\n\t(max_uid): Renamed to max_stmt_uid.\n\t(get_stmt_uid): New function.\n\t(maybe_queue_var, single_reachable_address, determine_lsm): Do not use\n\tphi node annotations.\n\t* tree-ssa.c (replace_immediate_uses): Do not use phi node annotations.\n\t* tree.h (PHI_BB, PHI_DF): New accessor functions.\n\t(struct tree_phi_node): Add bb and df fields.\n\nFrom-SVN: r87369", "tree": {"sha": "6e2f5dd6980def0575a618d307ba60b022d28ef0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e2f5dd6980def0575a618d307ba60b022d28ef0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30d396e3d52c70f69387301c2d4d161e18a697f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d396e3d52c70f69387301c2d4d161e18a697f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d396e3d52c70f69387301c2d4d161e18a697f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d396e3d52c70f69387301c2d4d161e18a697f8/comments", "author": null, "committer": null, "parents": [{"sha": "f4a6d54edd0ad80bcad9573d1cba9ded7f7e995c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4a6d54edd0ad80bcad9573d1cba9ded7f7e995c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4a6d54edd0ad80bcad9573d1cba9ded7f7e995c"}], "stats": {"total": 180, "additions": 129, "deletions": 51}, "files": [{"sha": "e84d9cd5f27c45de7a259e39caaec594678b6d83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d396e3d52c70f69387301c2d4d161e18a697f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d396e3d52c70f69387301c2d4d161e18a697f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30d396e3d52c70f69387301c2d4d161e18a697f8", "patch": "@@ -1,3 +1,24 @@\n+2004-09-11  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* tree-cfg.c (set_bb_for_stmt): Use PHI_BB.\n+\t* tree-dfa.c (compute_immediate_uses, add_immediate_use,\n+\tredirect_immediate_use): Use PHI_DF.\n+\t* tree-flow-inline.h (stmt_ann): Abort on phi nodes.\n+\t(bb_for_stmt): Use PHI_BB.\n+\t(get_immediate_uses): Use PHI_DF.\n+\t* tree-ssa-dse.c (max_stmt_uid): New variable.\n+\t(get_stmt_uid): New function.\n+\t(dse_optimize_stmt, dse_record_phis, tree_ssa_dse): Do not use phi\n+\tnode annotations.\n+\t* tree-ssa-loop-im.c (LIM_DATA): Do not use phi statement annotations.\n+\t(max_uid): Renamed to max_stmt_uid.\n+\t(get_stmt_uid): New function.\n+\t(maybe_queue_var, single_reachable_address, determine_lsm): Do not use\n+\tphi node annotations.\n+\t* tree-ssa.c (replace_immediate_uses): Do not use phi node annotations.\n+\t* tree.h (PHI_BB, PHI_DF): New accessor functions.\n+\t(struct tree_phi_node): Add bb and df fields.\n+\n 2004-09-11  Richard Henderson  <rth@redhat.com>\n \n \tPR middle-end/17416"}, {"sha": "8e9e5af64ac4777935ce28db6464e483120a1530", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d396e3d52c70f69387301c2d4d161e18a697f8/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d396e3d52c70f69387301c2d4d161e18a697f8/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=30d396e3d52c70f69387301c2d4d161e18a697f8", "patch": "@@ -2666,7 +2666,9 @@ last_and_only_stmt (basic_block bb)\n void\n set_bb_for_stmt (tree t, basic_block bb)\n {\n-  if (TREE_CODE (t) == STATEMENT_LIST)\n+  if (TREE_CODE (t) == PHI_NODE)\n+    PHI_BB (t) = bb;\n+  else if (TREE_CODE (t) == STATEMENT_LIST)\n     {\n       tree_stmt_iterator i;\n       for (i = tsi_start (t); !tsi_end_p (i); tsi_next (&i))"}, {"sha": "af6d9eddfc4f47e506a02834ad567d6116d2ae81", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 41, "deletions": 23, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d396e3d52c70f69387301c2d4d161e18a697f8/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d396e3d52c70f69387301c2d4d161e18a697f8/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=30d396e3d52c70f69387301c2d4d161e18a697f8", "patch": "@@ -191,19 +191,31 @@ compute_immediate_uses (int flags, bool (*calc_for)(tree))\n static void\n free_df_for_stmt (tree stmt)\n {\n-  stmt_ann_t ann = stmt_ann (stmt);\n+  dataflow_t *df;\n \n-  if (ann && ann->df)\n+  if (TREE_CODE (stmt) == PHI_NODE)\n+    df = &PHI_DF (stmt);\n+  else\n     {\n-      /* If we have a varray of immediate uses, then go ahead and release\n-\t it for re-use.  */\n-      if (ann->df->immediate_uses)\n-\tggc_free (ann->df->immediate_uses);\n-\n-      /* Similarly for the main dataflow structure.  */\n-      ggc_free (ann->df);\n-      ann->df = NULL;\n+      stmt_ann_t ann = stmt_ann (stmt);\n+\n+      if (!ann)\n+\treturn;\n+\n+      df = &ann->df;\n     }\n+\n+  if (!*df)\n+    return;\n+      \n+  /* If we have a varray of immediate uses, then go ahead and release\n+     it for re-use.  */\n+  if ((*df)->immediate_uses)\n+    ggc_free ((*df)->immediate_uses);\n+\n+  /* Similarly for the main dataflow structure.  */\n+  ggc_free (*df);\n+  *df = NULL;\n }\n \n \n@@ -302,28 +314,34 @@ compute_immediate_uses_for_stmt (tree stmt, int flags, bool (*calc_for)(tree))\n static void\n add_immediate_use (tree stmt, tree use_stmt)\n {\n-  stmt_ann_t ann = get_stmt_ann (stmt);\n-  struct dataflow_d *df;\n+  struct dataflow_d **df;\n+\n+  if (TREE_CODE (stmt) == PHI_NODE)\n+    df = &PHI_DF (stmt);\n+  else\n+    {\n+      stmt_ann_t ann = get_stmt_ann (stmt);\n+      df = &ann->df;\n+    }\n \n-  df = ann->df;\n-  if (df == NULL)\n+  if (*df == NULL)\n     {\n-      df = ann->df = ggc_alloc (sizeof (struct dataflow_d));\n-      memset ((void *) df, 0, sizeof (struct dataflow_d));\n-      df->uses[0] = use_stmt;\n+      *df = ggc_alloc (sizeof (struct dataflow_d));\n+      memset ((void *) *df, 0, sizeof (struct dataflow_d));\n+      (*df)->uses[0] = use_stmt;\n       return;\n     }\n \n-  if (!df->uses[1])\n+  if (!(*df)->uses[1])\n     {\n-      df->uses[1] = use_stmt;\n+      (*df)->uses[1] = use_stmt;\n       return;\n     }\n \n-  if (ann->df->immediate_uses == NULL)\n-    VARRAY_TREE_INIT (ann->df->immediate_uses, 4, \"immediate_uses\");\n+  if ((*df)->immediate_uses == NULL)\n+    VARRAY_TREE_INIT ((*df)->immediate_uses, 4, \"immediate_uses\");\n \n-  VARRAY_PUSH_TREE (ann->df->immediate_uses, use_stmt);\n+  VARRAY_PUSH_TREE ((*df)->immediate_uses, use_stmt);\n }\n \n \n@@ -333,7 +351,7 @@ static void\n redirect_immediate_use (tree use, tree old, tree new)\n {\n   tree imm_stmt = SSA_NAME_DEF_STMT (use);\n-  struct dataflow_d *df = get_stmt_ann (imm_stmt)->df;\n+  struct dataflow_d *df = get_immediate_uses (imm_stmt);\n   unsigned int num_uses = num_immediate_uses (df);\n   unsigned int i;\n "}, {"sha": "61ed11268f7bab5c9388584caf38e49e9c1bf682", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d396e3d52c70f69387301c2d4d161e18a697f8/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d396e3d52c70f69387301c2d4d161e18a697f8/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=30d396e3d52c70f69387301c2d4d161e18a697f8", "patch": "@@ -78,7 +78,12 @@ ann_type (tree_ann_t ann)\n static inline basic_block\n bb_for_stmt (tree t)\n {\n-  stmt_ann_t ann = stmt_ann (t);\n+  stmt_ann_t ann;\n+\n+  if (TREE_CODE (t) == PHI_NODE)\n+    return PHI_BB (t);\n+\n+  ann = stmt_ann (t);\n   return ann ? ann->bb : NULL;\n }\n \n@@ -305,7 +310,12 @@ addresses_taken (tree stmt)\n static dataflow_t\n get_immediate_uses (tree stmt)\n {\n-  stmt_ann_t ann = stmt_ann (stmt);\n+  stmt_ann_t ann;\n+\n+  if (TREE_CODE (stmt) == PHI_NODE)\n+    return PHI_DF (stmt);\n+\n+  ann = stmt_ann (stmt);\n   return ann ? ann->df : NULL;\n }\n "}, {"sha": "4cc136bf2ddc2798bc0f076fdc20851e24e59721", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d396e3d52c70f69387301c2d4d161e18a697f8/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d396e3d52c70f69387301c2d4d161e18a697f8/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=30d396e3d52c70f69387301c2d4d161e18a697f8", "patch": "@@ -98,6 +98,21 @@ static void fix_phi_uses (tree, tree);\n static void fix_stmt_v_may_defs (tree, tree);\n static void record_voperand_set (bitmap, bitmap *, unsigned int);\n \n+static unsigned max_stmt_uid;\t/* Maximal uid of a statement.  Uids to phi\n+\t\t\t\t   nodes are assigned using the versions of\n+\t\t\t\t   ssa names they define.  */\n+\n+/* Returns uid of statement STMT.  */\n+\n+static unsigned\n+get_stmt_uid (tree stmt)\n+{\n+  if (TREE_CODE (stmt) == PHI_NODE)\n+    return SSA_NAME_VERSION (PHI_RESULT (stmt)) + max_stmt_uid;\n+\n+  return stmt_ann (stmt)->uid;\n+}\n+\n /* Function indicating whether we ought to include information for 'var'\n    when calculating immediate uses.  For this pass we only want use\n    information for virtual variables.  */\n@@ -270,7 +285,7 @@ dse_optimize_stmt (struct dom_walk_data *walk_data,\n \t same block.  */\n       while (num_uses == 1\n \t     && TREE_CODE (use) == PHI_NODE\n-\t     && bitmap_bit_p (dse_gd->stores, stmt_ann (use)->uid))\n+\t     && bitmap_bit_p (dse_gd->stores, get_stmt_uid (use)))\n \t{\n \t  /* Record the first PHI we skip so that we can fix its\n \t     uses if we find that STMT is a dead store.  */\n@@ -287,7 +302,7 @@ dse_optimize_stmt (struct dom_walk_data *walk_data,\n       /* If we have precisely one immediate use at this point, then we may\n \t have found redundant store.  */\n       if (num_uses == 1\n-\t  && bitmap_bit_p (dse_gd->stores, stmt_ann (use)->uid)\n+\t  && bitmap_bit_p (dse_gd->stores, get_stmt_uid (use))\n \t  && operand_equal_p (TREE_OPERAND (stmt, 0),\n \t\t\t      TREE_OPERAND (use, 0), 0))\n \t{\n@@ -333,7 +348,7 @@ dse_record_phis (struct dom_walk_data *walk_data, basic_block bb)\n     if (need_imm_uses_for (PHI_RESULT (phi)))\n       record_voperand_set (dse_gd->stores,\n \t\t\t   &bd->stores,\n-\t\t\t   get_stmt_ann (phi)->uid);\n+\t\t\t   get_stmt_uid (phi));\n }\n \n static void\n@@ -356,21 +371,17 @@ tree_ssa_dse (void)\n {\n   struct dom_walk_data walk_data;\n   struct dse_global_data dse_gd;\n-  unsigned int uid = 0;\n   basic_block bb;\n \n   /* Create a UID for each statement in the function.  Ordering of the\n      UIDs is not important for this pass.  */\n+  max_stmt_uid = 0;\n   FOR_EACH_BB (bb)\n     {\n       block_stmt_iterator bsi;\n-      tree phi;\n \n       for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n-\tstmt_ann (bsi_stmt (bsi))->uid = uid++;\n-\n-      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n-\tstmt_ann (phi)->uid = uid++;\n+\tstmt_ann (bsi_stmt (bsi))->uid = max_stmt_uid++;\n     }\n \n   /* We might consider making this a property of each pass so that it"}, {"sha": "bc606e60a8a8f1f5921a581fc7cdd58a8a2bd878", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d396e3d52c70f69387301c2d4d161e18a697f8/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d396e3d52c70f69387301c2d4d161e18a697f8/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=30d396e3d52c70f69387301c2d4d161e18a697f8", "patch": "@@ -76,7 +76,9 @@ struct lim_aux_data\n \t\t\t\t   MAX_LOOP loop.  */\n };\n \n-#define LIM_DATA(STMT) ((struct lim_aux_data *) (stmt_ann (STMT)->common.aux))\n+#define LIM_DATA(STMT) (TREE_CODE (STMT) == PHI_NODE \\\n+\t\t\t? NULL \\\n+\t\t\t: (struct lim_aux_data *) (stmt_ann (STMT)->common.aux))\n \n /* Description of a memory reference for store motion.  */\n \n@@ -94,9 +96,20 @@ struct mem_ref\n    block will be executed.  */\n #define ALWAYS_EXECUTED_IN(BB) ((struct loop *) (BB)->aux)\n \n-/* Maximum uid in the statement in the function.  */\n+static unsigned max_stmt_uid;\t/* Maximal uid of a statement.  Uids to phi\n+\t\t\t\t   nodes are assigned using the versions of\n+\t\t\t\t   ssa names they define.  */\n \n-static unsigned max_uid;\n+/* Returns uid of statement STMT.  */\n+\n+static unsigned\n+get_stmt_uid (tree stmt)\n+{\n+  if (TREE_CODE (stmt) == PHI_NODE)\n+    return SSA_NAME_VERSION (PHI_RESULT (stmt)) + max_stmt_uid;\n+\n+  return stmt_ann (stmt)->uid;\n+}\n \n /* Calls CBCK for each index in memory reference ADDR_P.  There are two\n    kinds situations handled; in each of these cases, the memory reference\n@@ -805,10 +818,10 @@ maybe_queue_var (tree var, struct loop *loop,\n \t      \n   if (!def_bb\n       || !flow_bb_inside_loop_p (loop, def_bb)\n-      || TEST_BIT (seen, stmt_ann (stmt)->uid))\n+      || TEST_BIT (seen, get_stmt_uid (stmt)))\n     return;\n \t  \n-  SET_BIT (seen, stmt_ann (stmt)->uid);\n+  SET_BIT (seen, get_stmt_uid (stmt));\n   queue[(*in_queue)++] = stmt;\n }\n \n@@ -900,6 +913,7 @@ single_reachable_address (struct loop *loop, tree stmt,\n \t\t\t  struct mem_ref **mem_refs,\n \t\t\t  bool *seen_call_stmt)\n {\n+  unsigned max_uid = max_stmt_uid + num_ssa_names;\n   tree *queue = xmalloc (sizeof (tree) * max_uid);\n   sbitmap seen = sbitmap_alloc (max_uid);\n   unsigned in_queue = 1;\n@@ -917,7 +931,7 @@ single_reachable_address (struct loop *loop, tree stmt,\n   sra_data.common_ref = NULL_TREE;\n \n   queue[0] = stmt;\n-  SET_BIT (seen, stmt_ann (stmt)->uid);\n+  SET_BIT (seen, get_stmt_uid (stmt));\n   *seen_call_stmt = false;\n \n   while (in_queue)\n@@ -975,9 +989,9 @@ single_reachable_address (struct loop *loop, tree stmt,\n \t  if (!flow_bb_inside_loop_p (loop, bb_for_stmt (stmt)))\n \t    continue;\n \n-\t  if (TEST_BIT (seen, stmt_ann (stmt)->uid))\n+\t  if (TEST_BIT (seen, get_stmt_uid (stmt)))\n \t    continue;\n-\t  SET_BIT (seen, stmt_ann (stmt)->uid);\n+\t  SET_BIT (seen, get_stmt_uid (stmt));\n \n \t  queue[in_queue++] = stmt;\n \t}\n@@ -1230,17 +1244,13 @@ determine_lsm (struct loops *loops)\n \n   /* Create a UID for each statement in the function.  Ordering of the\n      UIDs is not important for this pass.  */\n-  max_uid = 0;\n+  max_stmt_uid = 0;\n   FOR_EACH_BB (bb)\n     {\n       block_stmt_iterator bsi;\n-      tree phi;\n \n       for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n-\tstmt_ann (bsi_stmt (bsi))->uid = max_uid++;\n-\n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n-\tstmt_ann (phi)->uid = max_uid++;\n+\tstmt_ann (bsi_stmt (bsi))->uid = max_stmt_uid++;\n     }\n \n   compute_immediate_uses (TDFA_USE_VOPS, NULL);"}, {"sha": "c8ced3632a2d7dd53fd6b89b3bf22a3e48069c53", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d396e3d52c70f69387301c2d4d161e18a697f8/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d396e3d52c70f69387301c2d4d161e18a697f8/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=30d396e3d52c70f69387301c2d4d161e18a697f8", "patch": "@@ -916,7 +916,6 @@ replace_immediate_uses (tree var, tree repl)\n   int i, j, n;\n   dataflow_t df;\n   tree stmt;\n-  stmt_ann_t ann;\n   bool mark_new_vars;\n   ssa_op_iter iter;\n   use_operand_p use_p;\n@@ -927,7 +926,6 @@ replace_immediate_uses (tree var, tree repl)\n   for (i = 0; i < n; i++)\n     {\n       stmt = immediate_use (df, i);\n-      ann = stmt_ann (stmt);\n \n       if (TREE_CODE (stmt) == PHI_NODE)\n \t{"}, {"sha": "bdd95aab2a9ec52600dd4041ed933d19646b6a05", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d396e3d52c70f69387301c2d4d161e18a697f8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d396e3d52c70f69387301c2d4d161e18a697f8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=30d396e3d52c70f69387301c2d4d161e18a697f8", "patch": "@@ -1293,6 +1293,8 @@ struct tree_ssa_name GTY(())\n #define PHI_ARG_ELT(NODE, I)\t\tPHI_NODE_ELT_CHECK (NODE, I)\n #define PHI_ARG_EDGE(NODE, I)\t\tPHI_NODE_ELT_CHECK (NODE, I).e\n #define PHI_ARG_NONZERO(NODE, I) \tPHI_NODE_ELT_CHECK (NODE, I).nonzero\n+#define PHI_BB(NODE)\t\t\tPHI_NODE_CHECK (NODE)->phi.bb\n+#define PHI_DF(NODE)\t\t\tPHI_NODE_CHECK (NODE)->phi.df\n \n struct edge_def;\n \n@@ -1314,6 +1316,12 @@ struct tree_phi_node GTY(())\n      SSA renamer.  */\n   int rewritten;\n \n+  /* Basic block to that the phi node belongs.  */\n+  struct basic_block_def *bb;\n+\n+  /* Dataflow information.  */\n+  struct dataflow_d *df;\n+\n   struct phi_arg_d GTY ((length (\"((tree)&%h)->phi.capacity\"))) a[1];\n };\n \f"}]}