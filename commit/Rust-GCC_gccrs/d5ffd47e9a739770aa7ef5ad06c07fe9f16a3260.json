{"sha": "d5ffd47e9a739770aa7ef5ad06c07fe9f16a3260", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVmZmQ0N2U5YTczOTc3MGFhN2VmNWFkMDZjMDdmZTlmMTZhMzI2MA==", "commit": {"author": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2019-12-11T10:27:30Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-12-11T10:27:30Z"}, "message": "Add ARM-specific Bfloat format support to middle-end\n\n2019-12-11  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\n\t* real.c (struct arm_bfloat_half_format,\n\tencode_arm_bfloat_half, decode_arm_bfloat_half): New.\n\t* real.h (arm_bfloat_half_format): New.\n\nFrom-SVN: r279216", "tree": {"sha": "050d28a558531ce02ebb0324e99c1aa61d15f801", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/050d28a558531ce02ebb0324e99c1aa61d15f801"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5ffd47e9a739770aa7ef5ad06c07fe9f16a3260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ffd47e9a739770aa7ef5ad06c07fe9f16a3260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5ffd47e9a739770aa7ef5ad06c07fe9f16a3260", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ffd47e9a739770aa7ef5ad06c07fe9f16a3260/comments", "author": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6c90dba73291435c244decb9a89c47019cc5a45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6c90dba73291435c244decb9a89c47019cc5a45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6c90dba73291435c244decb9a89c47019cc5a45"}], "stats": {"total": 144, "additions": 144, "deletions": 0}, "files": [{"sha": "b7375074d0a74feafbe32c83c25e6183c88e5f8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ffd47e9a739770aa7ef5ad06c07fe9f16a3260/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ffd47e9a739770aa7ef5ad06c07fe9f16a3260/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5ffd47e9a739770aa7ef5ad06c07fe9f16a3260", "patch": "@@ -1,3 +1,9 @@\n+2019-12-11  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\t* real.c (struct arm_bfloat_half_format,\n+\tencode_arm_bfloat_half, decode_arm_bfloat_half): New.\n+\t* real.h (arm_bfloat_half_format): New.\n+\n 2019-12-11  Hongtao Liu  <hongtao.liu@intel.com>\n \n \tPR target/92865"}, {"sha": "07b63b6f27e90ac518c5679c1338813b81d00fed", "filename": "gcc/real.c", "status": "modified", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ffd47e9a739770aa7ef5ad06c07fe9f16a3260/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ffd47e9a739770aa7ef5ad06c07fe9f16a3260/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=d5ffd47e9a739770aa7ef5ad06c07fe9f16a3260", "patch": "@@ -4799,6 +4799,116 @@ decode_ieee_half (const struct real_format *fmt, REAL_VALUE_TYPE *r,\n     }\n }\n \n+/* Encode arm_bfloat types.  */\n+static void\n+encode_arm_bfloat_half (const struct real_format *fmt, long *buf,\n+\t\t    const REAL_VALUE_TYPE *r)\n+{\n+  unsigned long image, sig, exp;\n+  unsigned long sign = r->sign;\n+  bool denormal = (r->sig[SIGSZ-1] & SIG_MSB) == 0;\n+\n+  image = sign << 15;\n+  sig = (r->sig[SIGSZ-1] >> (HOST_BITS_PER_LONG - 8)) & 0x7f;\n+\n+  switch (r->cl)\n+    {\n+    case rvc_zero:\n+      break;\n+\n+    case rvc_inf:\n+      if (fmt->has_inf)\n+\timage |= 255 << 7;\n+      else\n+\timage |= 0x7fff;\n+      break;\n+\n+    case rvc_nan:\n+      if (fmt->has_nans)\n+\t{\n+\t  if (r->canonical)\n+\t    sig = (fmt->canonical_nan_lsbs_set ? (1 << 6) - 1 : 0);\n+\t  if (r->signalling == fmt->qnan_msb_set)\n+\t    sig &= ~(1 << 6);\n+\t  else\n+\t    sig |= 1 << 6;\n+\t  if (sig == 0)\n+\t    sig = 1 << 5;\n+\n+\t  image |= 255 << 7;\n+\t  image |= sig;\n+\t}\n+      else\n+\timage |= 0x7fff;\n+      break;\n+\n+    case rvc_normal:\n+      if (denormal)\n+\texp = 0;\n+      else\n+      exp = REAL_EXP (r) + 127 - 1;\n+      image |= exp << 7;\n+      image |= sig;\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  buf[0] = image;\n+}\n+\n+/* Decode arm_bfloat types.  */\n+static void\n+decode_arm_bfloat_half (const struct real_format *fmt, REAL_VALUE_TYPE *r,\n+\t\t    const long *buf)\n+{\n+  unsigned long image = buf[0] & 0xffff;\n+  bool sign = (image >> 15) & 1;\n+  int exp = (image >> 7) & 0xff;\n+\n+  memset (r, 0, sizeof (*r));\n+  image <<= HOST_BITS_PER_LONG - 8;\n+  image &= ~SIG_MSB;\n+\n+  if (exp == 0)\n+    {\n+      if (image && fmt->has_denorm)\n+\t{\n+\t  r->cl = rvc_normal;\n+\t  r->sign = sign;\n+\t  SET_REAL_EXP (r, -126);\n+\t  r->sig[SIGSZ-1] = image << 1;\n+\t  normalize (r);\n+\t}\n+      else if (fmt->has_signed_zero)\n+\tr->sign = sign;\n+    }\n+  else if (exp == 255 && (fmt->has_nans || fmt->has_inf))\n+    {\n+      if (image)\n+\t{\n+\t  r->cl = rvc_nan;\n+\t  r->sign = sign;\n+\t  r->signalling = (((image >> (HOST_BITS_PER_LONG - 2)) & 1)\n+\t\t\t   ^ fmt->qnan_msb_set);\n+\t  r->sig[SIGSZ-1] = image;\n+\t}\n+      else\n+\t{\n+\t  r->cl = rvc_inf;\n+\t  r->sign = sign;\n+\t}\n+    }\n+  else\n+    {\n+      r->cl = rvc_normal;\n+      r->sign = sign;\n+      SET_REAL_EXP (r, exp - 127 + 1);\n+      r->sig[SIGSZ-1] = image | SIG_MSB;\n+    }\n+}\n+\n /* Half-precision format, as specified in IEEE 754R.  */\n const struct real_format ieee_half_format =\n   {\n@@ -4848,6 +4958,33 @@ const struct real_format arm_half_format =\n     false,\n     \"arm_half\"\n   };\n+\n+/* ARM Bfloat half-precision format.  This format resembles a truncated\n+   (16-bit) version of the 32-bit IEEE 754 single-precision floating-point\n+   format.  */\n+const struct real_format arm_bfloat_half_format =\n+  {\n+    encode_arm_bfloat_half,\n+    decode_arm_bfloat_half,\n+    2,\n+    8,\n+    8,\n+    -125,\n+    128,\n+    15,\n+    15,\n+    0,\n+    false,\n+    true,\n+    true,\n+    true,\n+    true,\n+    true,\n+    true,\n+    false,\n+    \"arm_bfloat_half\"\n+  };\n+\n \f\n /* A synthetic \"format\" for internal arithmetic.  It's the size of the\n    internal significand minus the two bits needed for proper rounding."}, {"sha": "2b337bb7f7d275270868334e28e337dc82bf5248", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5ffd47e9a739770aa7ef5ad06c07fe9f16a3260/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5ffd47e9a739770aa7ef5ad06c07fe9f16a3260/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=d5ffd47e9a739770aa7ef5ad06c07fe9f16a3260", "patch": "@@ -368,6 +368,7 @@ extern const struct real_format decimal_double_format;\n extern const struct real_format decimal_quad_format;\n extern const struct real_format ieee_half_format;\n extern const struct real_format arm_half_format;\n+extern const struct real_format arm_bfloat_half_format;\n \n \n /* ====================================================================== */"}]}