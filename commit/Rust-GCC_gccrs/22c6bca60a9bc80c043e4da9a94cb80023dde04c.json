{"sha": "22c6bca60a9bc80c043e4da9a94cb80023dde04c", "node_id": "C_kwDOANBUbNoAKDIyYzZiY2E2MGE5YmM4MGMwNDNlNGRhOWE5NGNiODAwMjNkZGUwNGM", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-24T16:59:05Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-24T16:59:56Z"}, "message": "Add support for index lang item overloads\n\nThis reuses our code to resolve operator overloads to call into the index\nlang item for the array-index-expression this serves as a basis for\nsupporting slices.\n\nFixes #975", "tree": {"sha": "188edbabfaa677bf7971b44a2450f83f4ba0cfba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/188edbabfaa677bf7971b44a2450f83f4ba0cfba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22c6bca60a9bc80c043e4da9a94cb80023dde04c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22c6bca60a9bc80c043e4da9a94cb80023dde04c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22c6bca60a9bc80c043e4da9a94cb80023dde04c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22c6bca60a9bc80c043e4da9a94cb80023dde04c/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8351d9168f92c997858fdb25942c05dc832f330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8351d9168f92c997858fdb25942c05dc832f330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8351d9168f92c997858fdb25942c05dc832f330"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "bf47661f42752d7448b3df5417422ea30218c3ab", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c6bca60a9bc80c043e4da9a94cb80023dde04c/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c6bca60a9bc80c043e4da9a94cb80023dde04c/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=22c6bca60a9bc80c043e4da9a94cb80023dde04c", "patch": "@@ -1490,6 +1490,35 @@ CompileExpr::visit (HIR::ArrayIndexExpr &expr)\n   tree array_reference = CompileExpr::Compile (expr.get_array_expr (), ctx);\n   tree index = CompileExpr::Compile (expr.get_index_expr (), ctx);\n \n+  // this might be an core::ops::index lang item situation\n+  TyTy::FnType *fntype;\n+  bool is_op_overload = ctx->get_tyctx ()->lookup_operator_overload (\n+    expr.get_mappings ().get_hirid (), &fntype);\n+  if (is_op_overload)\n+    {\n+      auto lang_item_type = Analysis::RustLangItem::ItemType::INDEX;\n+      tree operator_overload_call\n+\t= resolve_operator_overload (lang_item_type, expr, array_reference,\n+\t\t\t\t     index, expr.get_array_expr (),\n+\t\t\t\t     expr.get_index_expr ());\n+\n+      // lookup the expected type for this expression\n+      TyTy::BaseType *tyty = nullptr;\n+      bool ok\n+\t= ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n+\t\t\t\t\t  &tyty);\n+      rust_assert (ok);\n+      tree expected_type = TyTyResolveCompile::compile (ctx, tyty);\n+\n+      // rust deref always returns a reference from this overload then we can\n+      // actually do the indirection\n+      translated\n+\t= ctx->get_backend ()->indirect_expression (expected_type,\n+\t\t\t\t\t\t    operator_overload_call,\n+\t\t\t\t\t\t    true, expr.get_locus ());\n+      return;\n+    }\n+\n   // lets check if the array is a reference type then we can add an\n   // indirection if required\n   TyTy::BaseType *array_expr_ty = nullptr;"}, {"sha": "b77545a0678e219b8f8f6575e4d464b9d4fb4c1f", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c6bca60a9bc80c043e4da9a94cb80023dde04c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c6bca60a9bc80c043e4da9a94cb80023dde04c/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=22c6bca60a9bc80c043e4da9a94cb80023dde04c", "patch": "@@ -4050,6 +4050,10 @@ class OperatorExprMeta\n     : node_mappings (expr.get_mappings ()), locus (expr.get_locus ())\n   {}\n \n+  OperatorExprMeta (HIR::ArrayIndexExpr &expr)\n+    : node_mappings (expr.get_mappings ()), locus (expr.get_locus ())\n+  {}\n+\n   const Analysis::NodeMapping &get_mappings () const { return node_mappings; }\n \n   Location get_locus () const { return locus; }"}, {"sha": "539a3fee6f59418a01661cdc3f25f37f61751b04", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c6bca60a9bc80c043e4da9a94cb80023dde04c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c6bca60a9bc80c043e4da9a94cb80023dde04c/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=22c6bca60a9bc80c043e4da9a94cb80023dde04c", "patch": "@@ -255,6 +255,20 @@ TypeCheckExpr::visit (HIR::ArrayIndexExpr &expr)\n     return;\n \n   // is this a case of core::ops::index?\n+  auto lang_item_type = Analysis::RustLangItem::ItemType::INDEX;\n+  bool operator_overloaded\n+    = resolve_operator_overload (lang_item_type, expr, array_expr_ty,\n+\t\t\t\t index_expr_ty);\n+  if (operator_overloaded)\n+    {\n+      // index and index mut always return a reference to the element\n+      TyTy::BaseType *resolved = infered;\n+      rust_assert (resolved->get_kind () == TyTy::TypeKind::REF);\n+      TyTy::ReferenceType *ref = static_cast<TyTy::ReferenceType *> (resolved);\n+\n+      infered = ref->get_base ()->clone ();\n+      return;\n+    }\n \n   if (array_expr_ty->get_kind () == TyTy::TypeKind::REF)\n     {"}, {"sha": "4682978bdd0f83702276443eab5ba022e6a06928", "filename": "gcc/testsuite/rust/execute/torture/index1.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22c6bca60a9bc80c043e4da9a94cb80023dde04c/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Findex1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22c6bca60a9bc80c043e4da9a94cb80023dde04c/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Findex1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Findex1.rs?ref=22c6bca60a9bc80c043e4da9a94cb80023dde04c", "patch": "@@ -0,0 +1,28 @@\n+// { dg-additional-options \"-w\" }\n+#[lang = \"index\"]\n+trait Index<Idx> {\n+    type Output;\n+\n+    fn index(&self, index: Idx) -> &Self::Output;\n+}\n+\n+struct Foo(i32, i32);\n+impl Index<isize> for Foo {\n+    type Output = i32;\n+\n+    fn index(&self, index: isize) -> &i32 {\n+        if index == 0 {\n+            &self.0\n+        } else {\n+            &self.1\n+        }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = Foo(1, 2);\n+    let b = a[0];\n+    let c = a[1];\n+\n+    c - b - 1\n+}"}]}