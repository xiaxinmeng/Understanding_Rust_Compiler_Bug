{"sha": "531878a68e636392d594f22d0fc6e1444e82d940", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMxODc4YTY4ZTYzNjM5MmQ1OTRmMjJkMGZjNmUxNDQ0ZTgyZDk0MA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-04-08T23:24:38Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-04-08T23:24:38Z"}, "message": "builtins.c (fold_builtin): Constant fold expressions as x*0.5 instead of x/2.0.\n\n\n\t* builtins.c (fold_builtin):  Constant fold expressions as x*0.5\n\tinstead of x/2.0.  Optimize sqrt(pow(x,y)) as pow(x,y*0.5),\n\tlog(pow(x,y)) as y*log(x), pow(exp(x),y) as exp(x*y),\n\tpow(sqrt(x),y) as pow(x,y*0.5) and pow(pow(x,y),z) as pow(x,y*z).\n\tDelete function scope \"fcode\" variable to avoid shadowing.\n\n\t* gcc.dg/builtins-9.c: New test case.\n\t* gcc.dg/builtins-10.c: New test case.\n\nFrom-SVN: r65386", "tree": {"sha": "57e664d9c1807ff9f4b3bd4f3e4ddbb0c32619d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57e664d9c1807ff9f4b3bd4f3e4ddbb0c32619d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/531878a68e636392d594f22d0fc6e1444e82d940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/531878a68e636392d594f22d0fc6e1444e82d940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/531878a68e636392d594f22d0fc6e1444e82d940", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/531878a68e636392d594f22d0fc6e1444e82d940/comments", "author": null, "committer": null, "parents": [{"sha": "c583e7c354b04607db93798fc92e040f11a60a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c583e7c354b04607db93798fc92e040f11a60a54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c583e7c354b04607db93798fc92e040f11a60a54"}], "stats": {"total": 261, "additions": 253, "deletions": 8}, "files": [{"sha": "20134695c3bc54f80c92d925e7baed571b4af0b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/531878a68e636392d594f22d0fc6e1444e82d940/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/531878a68e636392d594f22d0fc6e1444e82d940/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=531878a68e636392d594f22d0fc6e1444e82d940", "patch": "@@ -1,3 +1,11 @@\n+2003-04-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (fold_builtin):  Constant fold expressions as x*0.5\n+\tinstead of x/2.0.  Optimize sqrt(pow(x,y)) as pow(x,y*0.5),\n+\tlog(pow(x,y)) as y*log(x), pow(exp(x),y) as exp(x*y),\n+\tpow(sqrt(x),y) as pow(x,y*0.5) and pow(pow(x,y),z) as pow(x,y*z).\n+\tDelete function scope \"fcode\" variable to avoid shadowing.\n+\n 2003-04-08  Kevin Buettner  <kevinb@redhat.com>\n \n \t* dwarf2out.c (DWARF_ARANGES_HEADER_SIZE, DWARF_ARANGES_PAD_SIZE):"}, {"sha": "ee2d57990d4ccf88536822dbd8bbe78fe1cef3a2", "filename": "gcc/builtins.c", "status": "modified", "additions": 83, "deletions": 8, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/531878a68e636392d594f22d0fc6e1444e82d940/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/531878a68e636392d594f22d0fc6e1444e82d940/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=531878a68e636392d594f22d0fc6e1444e82d940", "patch": "@@ -4686,12 +4686,11 @@ fold_builtin (exp)\n   tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n   tree arglist = TREE_OPERAND (exp, 1);\n   tree type = TREE_TYPE (TREE_TYPE (fndecl));\n-  enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n \n   if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n     return 0;\n \n-  switch (fcode)\n+  switch (DECL_FUNCTION_CODE (fndecl))\n     {\n     case BUILT_IN_CONSTANT_P:\n       return fold_builtin_constant_p (arglist);\n@@ -4735,20 +4734,36 @@ fold_builtin (exp)\n \t\treturn build_real (type, r);\n \t    }\n \n-\t  /* Optimize sqrt(exp(x)) = exp(x/2.0).  */\n+\t  /* Optimize sqrt(exp(x)) = exp(x*0.5).  */\n \t  fcode = builtin_mathfn_code (arg);\n \t  if (flag_unsafe_math_optimizations\n \t      && (fcode == BUILT_IN_EXP\n \t\t  || fcode == BUILT_IN_EXPF\n \t\t  || fcode == BUILT_IN_EXPL))\n \t    {\n \t      tree expfn = TREE_OPERAND (TREE_OPERAND (arg, 0), 0);\n-\t      arg = fold (build (RDIV_EXPR, type,\n+\t      arg = fold (build (MULT_EXPR, type,\n \t\t\t\t TREE_VALUE (TREE_OPERAND (arg, 1)),\n-\t\t\t\t build_real (type, dconst2)));\n+\t\t\t\t build_real (type, dconsthalf)));\n \t      arglist = build_tree_list (NULL_TREE, arg);\n \t      return build_function_call_expr (expfn, arglist);\n \t    }\n+\n+\t  /* Optimize sqrt(pow(x,y)) = pow(x,y*0.5).  */\n+\t  if (flag_unsafe_math_optimizations\n+\t      && (fcode == BUILT_IN_POW\n+\t\t  || fcode == BUILT_IN_POWF\n+\t\t  || fcode == BUILT_IN_POWL))\n+\t    {\n+\t      tree powfn = TREE_OPERAND (TREE_OPERAND (arg, 0), 0);\n+\t      tree arg0 = TREE_VALUE (TREE_OPERAND (arg, 1));\n+\t      tree arg1 = TREE_VALUE (TREE_CHAIN (TREE_OPERAND (arg, 1)));\n+\t      tree narg1 = fold (build (MULT_EXPR, type, arg1,\n+\t\t\t\t\tbuild_real (type, dconsthalf)));\n+\t      arglist = tree_cons (NULL_TREE, arg0,\n+\t\t\t\t   build_tree_list (NULL_TREE, narg1));\n+\t      return build_function_call_expr (powfn, arglist);\n+\t    }\n \t}\n       break;\n \n@@ -4820,16 +4835,31 @@ fold_builtin (exp)\n \t\t  || fcode == BUILT_IN_EXPL))\n \t    return TREE_VALUE (TREE_OPERAND (arg, 1));\n \n-\t  /* Optimize log(sqrt(x)) = log(x)/2.0.  */\n+\t  /* Optimize log(sqrt(x)) = log(x)*0.5.  */\n \t  if (flag_unsafe_math_optimizations\n \t      && (fcode == BUILT_IN_SQRT\n \t\t  || fcode == BUILT_IN_SQRTF\n \t\t  || fcode == BUILT_IN_SQRTL))\n \t    {\n \t      tree logfn = build_function_call_expr (fndecl,\n \t\t\t\t\t\t     TREE_OPERAND (arg, 1));\n-\t      return fold (build (RDIV_EXPR, type, logfn,\n-\t\t\t\t  build_real (type, dconst2)));\n+\t      return fold (build (MULT_EXPR, type, logfn,\n+\t\t\t\t  build_real (type, dconsthalf)));\n+\t    }\n+\n+\t  /* Optimize log(pow(x,y)) = y*log(x).  */\n+          if (flag_unsafe_math_optimizations\n+\t      && (fcode == BUILT_IN_POW\n+\t\t  || fcode == BUILT_IN_POWF\n+\t\t  || fcode == BUILT_IN_POWL))\n+\t    {\n+\t      tree arg0, arg1, logfn;\n+\n+\t      arg0 = TREE_VALUE (TREE_OPERAND (arg, 1));\n+\t      arg1 = TREE_VALUE (TREE_CHAIN (TREE_OPERAND (arg, 1)));\n+\t      arglist = build_tree_list (NULL_TREE, arg0);\n+\t      logfn = build_function_call_expr (fndecl, arglist);\n+\t      return fold (build (MULT_EXPR, type, arg1, logfn));\n \t    }\n \t}\n       break;\n@@ -4839,6 +4869,7 @@ fold_builtin (exp)\n     case BUILT_IN_POWL:\n       if (validate_arglist (arglist, REAL_TYPE, REAL_TYPE, VOID_TYPE))\n \t{\n+\t  enum built_in_function fcode;\n \t  tree arg0 = TREE_VALUE (arglist);\n \t  tree arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n \n@@ -4895,6 +4926,7 @@ fold_builtin (exp)\n \t\t{\n \t\t  tree sqrtfn;\n \n+\t\t  fcode = DECL_FUNCTION_CODE (fndecl);\n \t\t  if (fcode == BUILT_IN_POW)\n \t\t    sqrtfn = implicit_built_in_decls[BUILT_IN_SQRT];\n \t\t  else if (fcode == BUILT_IN_POWF)\n@@ -4911,6 +4943,49 @@ fold_builtin (exp)\n \t\t    }\n \t\t}\n \t    }\n+\n+\t  /* Optimize pow(exp(x),y) = exp(x*y).  */\n+\t  fcode = builtin_mathfn_code (arg0);\n+\t  if (flag_unsafe_math_optimizations\n+\t      && (fcode == BUILT_IN_EXP\n+\t\t  || fcode == BUILT_IN_EXPF\n+\t\t  || fcode == BUILT_IN_EXPL))\n+\t    {\n+\t      tree expfn = TREE_OPERAND (TREE_OPERAND (arg0, 0), 0);\n+\t      tree arg = TREE_VALUE (TREE_OPERAND (arg0, 1));\n+\t      arg = fold (build (MULT_EXPR, type, arg, arg1));\n+\t      arglist = build_tree_list (NULL_TREE, arg);\n+\t      return build_function_call_expr (expfn, arglist);\n+\t    }\n+\n+\t  /* Optimize pow(sqrt(x),y) = pow(x,y*0.5).  */\n+\t  if (flag_unsafe_math_optimizations\n+\t      && (fcode == BUILT_IN_SQRT\n+\t\t  || fcode == BUILT_IN_SQRTF\n+\t\t  || fcode == BUILT_IN_SQRTL))\n+\t    {\n+\t      tree narg0 = TREE_VALUE (TREE_OPERAND (arg0, 1));\n+\t      tree narg1 = fold (build (MULT_EXPR, type, arg1,\n+\t\t\t\t\tbuild_real (type, dconsthalf)));\n+\n+\t      arglist = tree_cons (NULL_TREE, narg0,\n+\t\t\t\t   build_tree_list (NULL_TREE, narg1));\n+\t      return build_function_call_expr (fndecl, arglist);\n+\t    }\n+\n+\t  /* Optimize pow(pow(x,y),z) = pow(x,y*z).  */\n+\t  if (flag_unsafe_math_optimizations\n+\t      && (fcode == BUILT_IN_POW\n+\t\t  || fcode == BUILT_IN_POWF\n+\t\t  || fcode == BUILT_IN_POWL))\n+\t    {\n+\t      tree arg00 = TREE_VALUE (TREE_OPERAND (arg0, 1));\n+\t      tree arg01 = TREE_VALUE (TREE_CHAIN (TREE_OPERAND (arg0, 1)));\n+\t      tree narg1 = fold (build (MULT_EXPR, type, arg01, arg1));\n+\t      arglist = tree_cons (NULL_TREE, arg00,\n+\t\t\t\t   build_tree_list (NULL_TREE, narg1));\n+\t      return build_function_call_expr (fndecl, arglist);\n+\t    }\n \t}\n       break;\n "}, {"sha": "09890c71bead42157d4c4134d3c4a3a5d6d1ebaf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/531878a68e636392d594f22d0fc6e1444e82d940/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/531878a68e636392d594f22d0fc6e1444e82d940/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=531878a68e636392d594f22d0fc6e1444e82d940", "patch": "@@ -1,3 +1,8 @@\n+2003-04-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/builtins-9.c: New test case.\n+\t* gcc.dg/builtins-10.c: New test case.\n+\n 2003-04-07  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* gcc.dg/noncompile/init-4.c.c: New test."}, {"sha": "9e5a4583fc3ade7e789b8b2d873edda033e71f24", "filename": "gcc/testsuite/gcc.dg/builtins-10.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/531878a68e636392d594f22d0fc6e1444e82d940/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/531878a68e636392d594f22d0fc6e1444e82d940/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-10.c?ref=531878a68e636392d594f22d0fc6e1444e82d940", "patch": "@@ -0,0 +1,54 @@\n+/* Copyright (C) 2003 Free Software Foundation.\n+\n+   Check that constant folding of built-in math functions doesn't\n+   break anything and produces the expected results.\n+\n+   Written by Roger Sayle, 2nd April 2003.  */\n+\n+/* { dg-do link } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern void link_error(void);\n+\n+extern double exp(double);\n+extern double log(double);\n+extern double sqrt(double);\n+extern double pow(double,double);\n+\n+void test(double x)\n+{\n+  if (sqrt(pow(x,4.0)) != x*x)\n+    link_error ();\n+\n+  if (pow(sqrt(x),4.0) != x*x)\n+    link_error ();\n+\n+  if (pow(pow(x,4.0),0.25) != x)\n+    link_error ();\n+}\n+\n+void test2(double x, double y, double z)\n+{\n+  if (sqrt(pow(x,y)) != pow(x,y*0.5))\n+    link_error ();\n+\n+  if (log(pow(x,y)) != y*log(x))\n+    link_error ();\n+\n+  if (pow(exp(x),y) != exp(x*y))\n+    link_error ();\n+\n+  if (pow(sqrt(x),y) != pow(x,y*0.5))\n+    link_error ();\n+\n+  if (pow(pow(x,y),z) != pow(x,y*z))\n+    link_error ();\n+}\n+\n+int main()\n+{\n+  test (2.0);\n+  test2 (2.0, 3.0, 4.0);\n+  return 0;\n+}\n+"}, {"sha": "108e0d2f11e162c13900b128e95c72ac437fb972", "filename": "gcc/testsuite/gcc.dg/builtins-9.c", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/531878a68e636392d594f22d0fc6e1444e82d940/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/531878a68e636392d594f22d0fc6e1444e82d940/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-9.c?ref=531878a68e636392d594f22d0fc6e1444e82d940", "patch": "@@ -0,0 +1,103 @@\n+/* Copyright (C) 2003 Free Software Foundation.\n+\n+   Check that constant folding of built-in math functions doesn't\n+   break anything.\n+\n+   Written by Roger Sayle, 2nd April 2003.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern double log(double);\n+extern double exp(double);\n+extern double sqrt(double);\n+extern double pow(double,double);\n+\n+extern float logf(float);\n+extern float expf(float);\n+extern float sqrtf(float);\n+extern float powf(float,float);\n+\n+extern long double logl(long double);\n+extern long double expl(long double);\n+extern long double sqrtl(long double);\n+extern long double powl(long double,long double);\n+\n+\n+double test1(double x, double y)\n+{\n+  return log(pow(x,y));\n+}\n+\n+double test2(double x, double y)\n+{\n+  return sqrt(pow(x,y));\n+}\n+\n+double test3(double x, double y)\n+{\n+  return pow(exp(x),y);\n+}\n+\n+double test4(double x, double y)\n+{\n+  return pow(sqrt(x),y);\n+}\n+\n+double test5(double x, double y, double z)\n+{\n+  return pow(pow(x,y),z);\n+}\n+\n+\n+float test1f(float x, float y)\n+{\n+  return logf(powf(x,y));\n+}\n+\n+float test2f(float x, float y)\n+{\n+  return sqrtf(powf(x,y));\n+}\n+\n+float test3f(float x, float y)\n+{\n+  return powf(expf(x),y);\n+}\n+\n+float test4f(float x, float y)\n+{\n+  return powf(sqrtf(x),y);\n+}\n+\n+float test5f(float x, float y, float z)\n+{\n+  return powf(powf(x,y),z);\n+}\n+\n+\n+long double test1l(long double x, long double y)\n+{\n+  return logl(powl(x,y));\n+}\n+\n+long double test2l(long double x, long double y)\n+{\n+  return sqrtl(powl(x,y));\n+}\n+\n+long double test3l(long double x, long double y)\n+{\n+  return powl(expl(x),y);\n+}\n+\n+long double test4l(long double x, long double y)\n+{\n+  return powl(sqrtl(x),y);\n+}\n+\n+long double test5l(long double x, long double y, long double z)\n+{\n+  return powl(powl(x,y),z);\n+}\n+"}]}