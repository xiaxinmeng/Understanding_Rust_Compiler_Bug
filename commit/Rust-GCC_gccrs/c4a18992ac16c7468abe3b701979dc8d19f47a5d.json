{"sha": "c4a18992ac16c7468abe3b701979dc8d19f47a5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRhMTg5OTJhYzE2Yzc0NjhhYmUzYjcwMTk3OWRjOGQxOWY0N2E1ZA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-07-08T23:19:51Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-07-08T23:19:51Z"}, "message": "(true_dependence, anti_dependence, output_dependence):\n\nLikewise.\n\nFrom-SVN: r12416", "tree": {"sha": "700800f70053b67eb5b32a570b0d0869b8517897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/700800f70053b67eb5b32a570b0d0869b8517897"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4a18992ac16c7468abe3b701979dc8d19f47a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4a18992ac16c7468abe3b701979dc8d19f47a5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4a18992ac16c7468abe3b701979dc8d19f47a5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4a18992ac16c7468abe3b701979dc8d19f47a5d/comments", "author": null, "committer": null, "parents": [{"sha": "20fef67b3a838159549878ac4436e748d4f446dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20fef67b3a838159549878ac4436e748d4f446dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20fef67b3a838159549878ac4436e748d4f446dc"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "82acf33277fc0940b448e22d2c0e58bb60d850d0", "filename": "gcc/sched.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4a18992ac16c7468abe3b701979dc8d19f47a5d/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4a18992ac16c7468abe3b701979dc8d19f47a5d/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=c4a18992ac16c7468abe3b701979dc8d19f47a5d", "patch": "@@ -807,11 +807,14 @@ memrefs_conflict_p (xsize, x, ysize, y, c)\n    changed.  A volatile and non-volatile reference can be interchanged\n    though. \n \n-   A MEM_IN_STRUCT reference at a non-QImode varying address can never\n+   A MEM_IN_STRUCT reference at a non-QImode non-AND varying address can never\n    conflict with a non-MEM_IN_STRUCT reference at a fixed address.   We must\n    allow QImode aliasing because the ANSI C standard allows character\n    pointers to alias anything.  We are assuming that characters are\n-   always QImode here.  */\n+   always QImode here.  We also must allow AND addresses, because they may\n+   generate accesses outside the object being referenced.  This is used to\n+   generate aligned addresses from unaligned addresses, for instance, the\n+   alpha storeqi_unaligned pattern.  */\n \n /* Read dependence: X is read after read in MEM takes place.  There can\n    only be a dependence here if both reads are volatile.  */\n@@ -848,9 +851,11 @@ true_dependence (mem, x)\n \t\t\t\t  SIZE_FOR_MODE (x), XEXP (x, 0), 0)\n \t      && ! (MEM_IN_STRUCT_P (mem) && rtx_addr_varies_p (mem)\n \t\t    && GET_MODE (mem) != QImode\n+\t\t    && GET_CODE (XEXP (mem, 0)) != AND\n \t\t    && ! MEM_IN_STRUCT_P (x) && ! rtx_addr_varies_p (x))\n \t      && ! (MEM_IN_STRUCT_P (x) && rtx_addr_varies_p (x)\n \t\t    && GET_MODE (x) != QImode\n+\t\t    && GET_CODE (XEXP (x, 0)) != AND\n \t\t    && ! MEM_IN_STRUCT_P (mem) && ! rtx_addr_varies_p (mem))));\n }\n \n@@ -874,9 +879,11 @@ anti_dependence (mem, x)\n \t\t\t\t  SIZE_FOR_MODE (x), XEXP (x, 0), 0)\n \t      && ! (MEM_IN_STRUCT_P (mem) && rtx_addr_varies_p (mem)\n \t\t    && GET_MODE (mem) != QImode\n+\t\t    && GET_CODE (XEXP (mem, 0)) != AND\n \t\t    && ! MEM_IN_STRUCT_P (x) && ! rtx_addr_varies_p (x))\n \t      && ! (MEM_IN_STRUCT_P (x) && rtx_addr_varies_p (x)\n \t\t    && GET_MODE (x) != QImode\n+\t\t    && GET_CODE (XEXP (x, 0)) != AND\n \t\t    && ! MEM_IN_STRUCT_P (mem) && ! rtx_addr_varies_p (mem))));\n }\n \n@@ -894,9 +901,11 @@ output_dependence (mem, x)\n \t\t\t\t  SIZE_FOR_MODE (x), XEXP (x, 0), 0)\n \t      && ! (MEM_IN_STRUCT_P (mem) && rtx_addr_varies_p (mem)\n \t\t    && GET_MODE (mem) != QImode\n+\t\t    && GET_CODE (XEXP (mem, 0)) != AND\n \t\t    && ! MEM_IN_STRUCT_P (x) && ! rtx_addr_varies_p (x))\n \t      && ! (MEM_IN_STRUCT_P (x) && rtx_addr_varies_p (x)\n \t\t    && GET_MODE (x) != QImode\n+\t\t    && GET_CODE (XEXP (x, 0)) != AND\n \t\t    && ! MEM_IN_STRUCT_P (mem) && ! rtx_addr_varies_p (mem))));\n }\n \f"}]}