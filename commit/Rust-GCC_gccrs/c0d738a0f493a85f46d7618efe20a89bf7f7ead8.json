{"sha": "c0d738a0f493a85f46d7618efe20a89bf7f7ead8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBkNzM4YTBmNDkzYTg1ZjQ2ZDc2MThlZmUyMGE4OWJmN2Y3ZWFkOA==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2020-06-02T20:48:01Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@linux.ibm.com", "date": "2020-06-03T21:01:27Z"}, "message": "identify lfs prefixed case PR95347\n\nThe same problem also arises for plfs where prefixed_load_p()\ndoesn't recognize it so we get just lfs in the asm output\nwith an @pcrel address.\n\n\tPR target/95347\n\t* config/rs6000/rs6000.c (is_stfs_insn): Rename to\n\tis_lfs_stfs_insn and make it recognize lfs as well.\n\t(prefixed_store_p): Use is_lfs_stfs_insn().\n\t(prefixed_load_p): Use is_lfs_stfs_insn() to recognize lfs.", "tree": {"sha": "dbca18c6d4ef373e1abffb319c2c3b9692570da4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbca18c6d4ef373e1abffb319c2c3b9692570da4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0d738a0f493a85f46d7618efe20a89bf7f7ead8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d738a0f493a85f46d7618efe20a89bf7f7ead8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0d738a0f493a85f46d7618efe20a89bf7f7ead8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d738a0f493a85f46d7618efe20a89bf7f7ead8/comments", "author": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "acsawdey", "id": 41373646, "node_id": "MDQ6VXNlcjQxMzczNjQ2", "avatar_url": "https://avatars.githubusercontent.com/u/41373646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/acsawdey", "html_url": "https://github.com/acsawdey", "followers_url": "https://api.github.com/users/acsawdey/followers", "following_url": "https://api.github.com/users/acsawdey/following{/other_user}", "gists_url": "https://api.github.com/users/acsawdey/gists{/gist_id}", "starred_url": "https://api.github.com/users/acsawdey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/acsawdey/subscriptions", "organizations_url": "https://api.github.com/users/acsawdey/orgs", "repos_url": "https://api.github.com/users/acsawdey/repos", "events_url": "https://api.github.com/users/acsawdey/events{/privacy}", "received_events_url": "https://api.github.com/users/acsawdey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c06280ac4c34b0aff8cfa2e74ae8c7afd759d52f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06280ac4c34b0aff8cfa2e74ae8c7afd759d52f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c06280ac4c34b0aff8cfa2e74ae8c7afd759d52f"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "42d517c1f65c1c78b2063b1b9c760cd1f0bb7625", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d738a0f493a85f46d7618efe20a89bf7f7ead8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d738a0f493a85f46d7618efe20a89bf7f7ead8/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c0d738a0f493a85f46d7618efe20a89bf7f7ead8", "patch": "@@ -24980,14 +24980,18 @@ address_to_insn_form (rtx addr,\n   return INSN_FORM_BAD;\n }\n \n-/* Helper function to see if we're potentially looking at stfs.\n+/* Helper function to see if we're potentially looking at lfs/stfs.\n    - PARALLEL containing a SET and a CLOBBER\n-   - SET is from UNSPEC_SI_FROM_SF to MEM:SI\n-   - CLOBBER is a V4SF\n+   - stfs:\n+    - SET is from UNSPEC_SI_FROM_SF to MEM:SI\n+    - CLOBBER is a V4SF\n+   - lfs:\n+    - SET is from UNSPEC_SF_FROM_SI to REG:SF\n+    - CLOBBER is a DI\n  */\n \n static bool\n-is_stfs_insn (rtx_insn *insn)\n+is_lfs_stfs_insn (rtx_insn *insn)\n {\n   rtx pattern = PATTERN (insn);\n   if (GET_CODE (pattern) != PARALLEL)\n@@ -25013,16 +25017,22 @@ is_stfs_insn (rtx_insn *insn)\n   rtx src = SET_SRC (set);\n   rtx scratch = SET_DEST (clobber);\n \n-  if (GET_CODE (src) != UNSPEC || XINT (src, 1) != UNSPEC_SI_FROM_SF)\n+  if (GET_CODE (src) != UNSPEC)\n     return false;\n \n-  if (GET_CODE (dest) != MEM || GET_MODE (dest) != SImode)\n-    return false;\n+  /* stfs case.  */\n+  if (XINT (src, 1) == UNSPEC_SI_FROM_SF\n+      && GET_CODE (dest) == MEM && GET_MODE (dest) == SImode\n+      && GET_CODE (scratch) == SCRATCH && GET_MODE (scratch) == V4SFmode)\n+    return true;\n \n-  if (GET_CODE (scratch) != SCRATCH || GET_MODE (scratch) != V4SFmode)\n-    return false;\n+  /* lfs case.  */\n+  if (XINT (src, 1) == UNSPEC_SF_FROM_SI\n+      && GET_CODE (dest) == REG && GET_MODE (dest) == SFmode\n+      && GET_CODE (scratch) == SCRATCH && GET_MODE (scratch) == DImode)\n+    return true;\n \n-  return true;\n+  return false;\n }\n \n /* Helper function to take a REG and a MODE and turn it into the non-prefixed\n@@ -25135,7 +25145,10 @@ prefixed_load_p (rtx_insn *insn)\n   else\n     non_prefixed = reg_to_non_prefixed (reg, mem_mode);\n \n-  return address_is_prefixed (XEXP (mem, 0), mem_mode, non_prefixed);\n+  if (non_prefixed == NON_PREFIXED_X && is_lfs_stfs_insn (insn))\n+    return address_is_prefixed (XEXP (mem, 0), mem_mode, NON_PREFIXED_DEFAULT);\n+  else\n+    return address_is_prefixed (XEXP (mem, 0), mem_mode, non_prefixed);\n }\n \n /* Whether a store instruction is a prefixed instruction.  This is called from\n@@ -25170,7 +25183,7 @@ prefixed_store_p (rtx_insn *insn)\n   /* Need to make sure we aren't looking at a stfs which doesn't look\n      like the other things reg_to_non_prefixed/address_is_prefixed\n      looks for.  */\n-  if (non_prefixed == NON_PREFIXED_X && is_stfs_insn (insn))\n+  if (non_prefixed == NON_PREFIXED_X && is_lfs_stfs_insn (insn))\n     return address_is_prefixed (addr, mem_mode, NON_PREFIXED_DEFAULT);\n   else\n     return address_is_prefixed (addr, mem_mode, non_prefixed);"}]}