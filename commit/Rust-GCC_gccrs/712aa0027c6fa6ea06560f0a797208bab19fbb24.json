{"sha": "712aa0027c6fa6ea06560f0a797208bab19fbb24", "node_id": "C_kwDOANBUbNoAKDcxMmFhMDAyN2M2ZmE2ZWEwNjU2MGYwYTc5NzIwOGJhYjE5ZmJiMjQ", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-03-10T14:31:50Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-17T10:34:36Z"}, "message": "gccrs: refactor TyTy::BaseType::is_unit to not use virtual dispatch\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-tyty.cc (BaseType::is_unit): new implementation\n\t(ErrorType::is_unit): remove\n\t(TupleType::is_unit): likewise\n\t(NeverType::is_unit): likewise\n\t(PlaceholderType::is_unit): likewise\n\t(ProjectionType::is_unit): likewise\n\t* typecheck/rust-tyty.h: update header\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "3b5a7d2722f7045a71fa1e4b05285abf6daaa33f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b5a7d2722f7045a71fa1e4b05285abf6daaa33f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/712aa0027c6fa6ea06560f0a797208bab19fbb24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712aa0027c6fa6ea06560f0a797208bab19fbb24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/712aa0027c6fa6ea06560f0a797208bab19fbb24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/712aa0027c6fa6ea06560f0a797208bab19fbb24/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75ad892c42fa5bbd6ebd4b11e910e049365694fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ad892c42fa5bbd6ebd4b11e910e049365694fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75ad892c42fa5bbd6ebd4b11e910e049365694fa"}], "stats": {"total": 115, "additions": 55, "deletions": 60}, "files": [{"sha": "dbd4b5c7ae4fcff19fc3010fc945deba43abef3a", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 50, "deletions": 31, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712aa0027c6fa6ea06560f0a797208bab19fbb24/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712aa0027c6fa6ea06560f0a797208bab19fbb24/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=712aa0027c6fa6ea06560f0a797208bab19fbb24", "patch": "@@ -188,6 +188,56 @@ BaseType::is_equal (const BaseType &other) const\n bool\n BaseType::is_unit () const\n {\n+  const TyTy::BaseType *x = destructure ();\n+  switch (x->get_kind ())\n+    {\n+    case PARAM:\n+    case PROJECTION:\n+    case PLACEHOLDER:\n+    case FNPTR:\n+    case FNDEF:\n+    case ARRAY:\n+    case SLICE:\n+    case POINTER:\n+    case REF:\n+    case CLOSURE:\n+    case INFER:\n+    case BOOL:\n+    case CHAR:\n+    case INT:\n+    case UINT:\n+    case FLOAT:\n+    case USIZE:\n+    case ISIZE:\n+\n+    case STR:\n+    case DYNAMIC:\n+    case ERROR:\n+      return false;\n+\n+      // FIXME ! is coerceable to () so we need to fix that\n+    case NEVER:\n+      return true;\n+\n+      case TUPLE: {\n+\tconst TupleType &tuple = *static_cast<const TupleType *> (x);\n+\treturn tuple.num_fields () == 0;\n+      }\n+\n+      case ADT: {\n+\tconst ADTType &adt = *static_cast<const ADTType *> (x);\n+\tif (adt.is_enum ())\n+\t  return false;\n+\n+\tfor (const auto &variant : adt.get_variants ())\n+\t  {\n+\t    if (variant->num_fields () > 0)\n+\t      return false;\n+\t  }\n+\n+\treturn true;\n+      }\n+    }\n   return false;\n }\n \n@@ -813,12 +863,6 @@ ErrorType::ErrorType (HirId ref, HirId ty_ref, std::set<HirId> refs)\n \t      {Resolver::CanonicalPath::create_empty (), Location ()}, refs)\n {}\n \n-bool\n-ErrorType::is_unit () const\n-{\n-  return true;\n-}\n-\n std::string\n ErrorType::get_name () const\n {\n@@ -1388,12 +1432,6 @@ TupleType::get_unit_type (HirId ref)\n   return new TupleType (ref, Linemap::predeclared_location ());\n }\n \n-bool\n-TupleType::is_unit () const\n-{\n-  return this->fields.empty ();\n-}\n-\n size_t\n TupleType::num_fields () const\n {\n@@ -3172,12 +3210,6 @@ NeverType::get_name () const\n   return as_string ();\n }\n \n-bool\n-NeverType::is_unit () const\n-{\n-  return true;\n-}\n-\n void\n NeverType::accept_vis (TyVisitor &vis)\n {\n@@ -3241,13 +3273,6 @@ PlaceholderType::get_name () const\n   return as_string ();\n }\n \n-bool\n-PlaceholderType::is_unit () const\n-{\n-  rust_assert (can_resolve ());\n-  return resolve ()->is_unit ();\n-}\n-\n std::string\n PlaceholderType::get_symbol () const\n {\n@@ -3371,12 +3396,6 @@ ProjectionType::ProjectionType (\n     base (base), trait (trait), item (item)\n {}\n \n-bool\n-ProjectionType::is_unit () const\n-{\n-  return false;\n-}\n-\n std::string\n ProjectionType::get_name () const\n {"}, {"sha": "47f55163277d8ab0dc62f0e6ef52d10ee4c0189d", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/712aa0027c6fa6ea06560f0a797208bab19fbb24/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/712aa0027c6fa6ea06560f0a797208bab19fbb24/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=712aa0027c6fa6ea06560f0a797208bab19fbb24", "patch": "@@ -85,19 +85,15 @@ class BaseType : public TypeBoundsMappings\n   virtual ~BaseType ();\n \n   HirId get_ref () const;\n-\n   void set_ref (HirId id);\n \n   HirId get_ty_ref () const;\n-\n   void set_ty_ref (HirId id);\n \n   virtual void accept_vis (TyVisitor &vis) = 0;\n-\n   virtual void accept_vis (TyConstVisitor &vis) const = 0;\n \n   virtual std::string as_string () const = 0;\n-\n   virtual std::string get_name () const = 0;\n \n   // similar to unify but does not actually perform type unification but\n@@ -119,19 +115,20 @@ class BaseType : public TypeBoundsMappings\n   virtual bool is_equal (const BaseType &other) const;\n \n   bool satisfies_bound (const TypeBoundPredicate &predicate) const;\n-\n   bool bounds_compatible (const BaseType &other, Location locus,\n \t\t\t  bool emit_error) const;\n-\n   void inherit_bounds (const BaseType &other);\n-\n   void inherit_bounds (\n     const std::vector<TyTy::TypeBoundPredicate> &specified_bounds);\n \n-  virtual bool is_unit () const;\n+  // is_unit returns whether this is just a unit-struct\n+  bool is_unit () const;\n \n+  // is_concrete returns true if the type is fully resolved to concrete\n+  // primitives\n   bool is_concrete () const;\n \n+  // return the type-kind\n   TypeKind get_kind () const;\n \n   /* Returns a pointer to a clone of this. The caller is responsible for\n@@ -238,8 +235,6 @@ class ErrorType : public BaseType\n   void accept_vis (TyVisitor &vis) override;\n   void accept_vis (TyConstVisitor &vis) const override;\n \n-  bool is_unit () const override;\n-\n   std::string as_string () const override;\n \n   bool can_eq (const BaseType *other, bool emit_errors) const override final;\n@@ -340,8 +335,6 @@ class TupleType : public BaseType\n   void accept_vis (TyVisitor &vis) override;\n   void accept_vis (TyConstVisitor &vis) const override;\n \n-  bool is_unit () const override;\n-\n   std::string as_string () const override;\n \n   bool can_eq (const BaseType *other, bool emit_errors) const override final;\n@@ -564,17 +557,6 @@ class ADTType : public BaseType, public SubstitutionRef\n   bool is_union () const { return adt_kind == UNION; }\n   bool is_enum () const { return adt_kind == ENUM; }\n \n-  bool is_unit () const override\n-  {\n-    if (number_of_variants () == 0)\n-      return true;\n-\n-    if (number_of_variants () == 1)\n-      return variants.at (0)->num_fields () == 0;\n-\n-    return false;\n-  }\n-\n   void accept_vis (TyVisitor &vis) override;\n   void accept_vis (TyConstVisitor &vis) const override;\n \n@@ -1297,8 +1279,6 @@ class NeverType : public BaseType\n   BaseType *monomorphized_clone () const final override;\n \n   std::string get_name () const override final;\n-\n-  bool is_unit () const override;\n };\n \n // used at the type in associated types in traits\n@@ -1323,8 +1303,6 @@ class PlaceholderType : public BaseType\n \n   std::string get_name () const override final;\n \n-  bool is_unit () const override;\n-\n   std::string get_symbol () const;\n \n   void set_associated_type (HirId ref);\n@@ -1370,8 +1348,6 @@ class ProjectionType : public BaseType, public SubstitutionRef\n \n   std::string get_name () const override final;\n \n-  bool is_unit () const override;\n-\n   bool needs_generic_substitutions () const override final;\n \n   bool supports_substitutions () const override final;"}]}