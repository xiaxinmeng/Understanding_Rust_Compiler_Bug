{"sha": "1ee77fbdea58944b047de8ff88901aea4e93ed7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVlNzdmYmRlYTU4OTQ0YjA0N2RlOGZmODg5MDFhZWE0ZTkzZWQ3ZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-09T04:35:57Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-09T04:35:57Z"}, "message": "compiler: additional lvalue/rvalue context fixes\n    \n    Fix lvalue/rvalue context mixup Set_and_use_temporary_expression's\n    do_get_backend() method. Enhance Mark_lvalue_varexprs to handle\n    conversions and temporary reference expressions, since occasionally\n    the front end emits code such as \"deref(conv(tempref)) = ...\".\n    \n    Reviewed-on: https://go-review.googlesource.com/45141\n\nFrom-SVN: r249047", "tree": {"sha": "fde3276ecdbc4adc9069be75cd0ed4b3fbe684f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fde3276ecdbc4adc9069be75cd0ed4b3fbe684f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ee77fbdea58944b047de8ff88901aea4e93ed7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ee77fbdea58944b047de8ff88901aea4e93ed7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ee77fbdea58944b047de8ff88901aea4e93ed7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ee77fbdea58944b047de8ff88901aea4e93ed7d/comments", "author": null, "committer": null, "parents": [{"sha": "120ef1d50ab7fe53a67fb2026374b2bdd67838bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/120ef1d50ab7fe53a67fb2026374b2bdd67838bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/120ef1d50ab7fe53a67fb2026374b2bdd67838bd"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "1bfac59adef5ed766ab0344ea441dfc9d029f79a", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ee77fbdea58944b047de8ff88901aea4e93ed7d/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ee77fbdea58944b047de8ff88901aea4e93ed7d/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=1ee77fbdea58944b047de8ff88901aea4e93ed7d", "patch": "@@ -1,4 +1,4 @@\n-82961ce59e8bb02598d963d2a05b3acca860d9dd\n+d4875b19266d5f726e0e32843b903075f5c50b4c\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "d6d27eea8d34e6859fb800970ad4a313dd726619", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ee77fbdea58944b047de8ff88901aea4e93ed7d/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ee77fbdea58944b047de8ff88901aea4e93ed7d/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=1ee77fbdea58944b047de8ff88901aea4e93ed7d", "patch": "@@ -962,15 +962,15 @@ Set_and_use_temporary_expression::do_get_backend(Translate_context* context)\n   Location loc = this->location();\n   Gogo* gogo = context->gogo();\n   Bvariable* bvar = this->statement_->get_backend_variable(context);\n-  Bexpression* lvar_ref = gogo->backend()->var_expression(bvar, VE_rvalue, loc);\n+  Bexpression* lvar_ref = gogo->backend()->var_expression(bvar, VE_lvalue, loc);\n \n   Named_object* fn = context->function();\n   go_assert(fn != NULL);\n   Bfunction* bfn = fn->func_value()->get_or_make_decl(gogo, fn);\n   Bexpression* bexpr = this->expr_->get_backend(context);\n   Bstatement* set = gogo->backend()->assignment_statement(bfn, lvar_ref,\n                                                           bexpr, loc);\n-  Bexpression* var_ref = gogo->backend()->var_expression(bvar, VE_lvalue, loc);\n+  Bexpression* var_ref = gogo->backend()->var_expression(bvar, VE_rvalue, loc);\n   Bexpression* ret = gogo->backend()->compound_expression(set, var_ref, loc);\n   return ret;\n }"}, {"sha": "7a448d7a60601cbde8c35835cc4634fc546104d6", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ee77fbdea58944b047de8ff88901aea4e93ed7d/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ee77fbdea58944b047de8ff88901aea4e93ed7d/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=1ee77fbdea58944b047de8ff88901aea4e93ed7d", "patch": "@@ -912,6 +912,21 @@ int Mark_lvalue_varexprs::expression(Expression** ppexpr)\n   if (ue && ue->op() == OPERATOR_MULT)\n     return TRAVERSE_CONTINUE;\n \n+  Type_conversion_expression* ce = e->conversion_expression();\n+  if (ce)\n+    return TRAVERSE_CONTINUE;\n+\n+  Temporary_reference_expression* tre =\n+      e->temporary_reference_expression();\n+  if (tre)\n+    {\n+      tre = new Temporary_reference_expression(tre->statement(),\n+                                               tre->location());\n+      *ppexpr = tre;\n+      tre->set_is_lvalue();\n+      return TRAVERSE_EXIT;\n+    }\n+\n   return TRAVERSE_EXIT;\n }\n "}]}