{"sha": "be04394b81b1ac6834f4ab94ef10058ab1ad9ee1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUwNDM5NGI4MWIxYWM2ODM0ZjRhYjk0ZWYxMDA1OGFiMWFkOWVlMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2004-02-14T19:29:39Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2004-02-14T19:29:39Z"}, "message": "i386.c (x86_four_jump_limit): New variable.\n\n\n\t* i386.c (x86_four_jump_limit): New variable.\n\t(k8_avoid_jump_misspredicts): Rename to ...\n\t(ix86_avoid_jump_misspredicts): .. this one.\n\t(ix86_pad_returns): Break out from ...\n\t(ix86_reorg): ... this one; do ix86_avoid_jump_misspredicts when asked\n\tto.\n\t* i386.h (TARGET_FOUR_JUMP_LIMIT): New macro.\n\nFrom-SVN: r77814", "tree": {"sha": "e445cfd3edf352a189d1dcf7b55361467097278f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e445cfd3edf352a189d1dcf7b55361467097278f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be04394b81b1ac6834f4ab94ef10058ab1ad9ee1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be04394b81b1ac6834f4ab94ef10058ab1ad9ee1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be04394b81b1ac6834f4ab94ef10058ab1ad9ee1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be04394b81b1ac6834f4ab94ef10058ab1ad9ee1/comments", "author": null, "committer": null, "parents": [{"sha": "ac3cadf042b9c921c8593131e43ade2e64b28720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac3cadf042b9c921c8593131e43ade2e64b28720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac3cadf042b9c921c8593131e43ade2e64b28720"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "35a77099b28ce3efa6705eab7e70a5e5bae74272", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be04394b81b1ac6834f4ab94ef10058ab1ad9ee1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be04394b81b1ac6834f4ab94ef10058ab1ad9ee1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be04394b81b1ac6834f4ab94ef10058ab1ad9ee1", "patch": "@@ -1,3 +1,13 @@\n+2004-02-14  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (x86_four_jump_limit): New variable.\n+\t(k8_avoid_jump_misspredicts): Rename to ...\n+\t(ix86_avoid_jump_misspredicts): .. this one.\n+\t(ix86_pad_returns): Break out from ...\n+\t(ix86_reorg): ... this one; do ix86_avoid_jump_misspredicts when asked\n+\tto.\n+\t* i386.h (TARGET_FOUR_JUMP_LIMIT): New macro.\n+\n 2004-02-14  Josef Zlomek  <zlomekj@suse.cz>\n \n \t* emit-rtl.c (set_decl_incoming_rtl): Check whether the 0th element of"}, {"sha": "5f4a020e6ded7a4d51025b2fdedccab0add1095b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be04394b81b1ac6834f4ab94ef10058ab1ad9ee1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be04394b81b1ac6834f4ab94ef10058ab1ad9ee1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=be04394b81b1ac6834f4ab94ef10058ab1ad9ee1", "patch": "@@ -524,6 +524,9 @@ const int x86_use_ffreep = m_ATHLON_K8;\n const int x86_rep_movl_optimal = m_386 | m_PENT | m_PPRO | m_K6;\n const int x86_inter_unit_moves = ~(m_ATHLON_K8);\n const int x86_ext_80387_constants = m_K6 | m_ATHLON | m_PENT4 | m_PPRO;\n+/* Some CPU cores are not able to predict more than 4 branch instructions in\n+   the 16 byte window.  */\n+const int x86_four_jump_limit = m_PPRO | m_ATHLON_K8 | m_PENT4;\n \n /* In case the average insn count for single function invocation is\n    lower than this constant, emit fast (but longer) prologue and\n@@ -883,7 +886,6 @@ static tree ix86_handle_struct_attribute (tree *, tree, tree, int, bool *);\n static int extended_reg_mentioned_1 (rtx *, void *);\n static bool ix86_rtx_costs (rtx, int, int, int *);\n static int min_insn_size (rtx);\n-static void k8_avoid_jump_misspredicts (void);\n \n #if defined (DO_GLOBAL_CTORS_BODY) && defined (HAS_INIT_SECTION)\n static void ix86_svr3_asm_out_constructor (rtx, int);\n@@ -15714,7 +15716,7 @@ min_insn_size (rtx insn)\n    window.  */\n \n static void\n-k8_avoid_jump_misspredicts (void)\n+ix86_avoid_jump_misspredicts (void)\n {\n   rtx insn, start = get_insns ();\n   int nbytes = 0, njumps = 0;\n@@ -15774,18 +15776,15 @@ k8_avoid_jump_misspredicts (void)\n     }\n }\n \n-/* Implement machine specific optimizations.\n-   At the moment we implement single transformation: AMD Athlon works faster\n+/* AMD Athlon works faster\n    when RET is not destination of conditional jump or directly preceded\n    by other jump instruction.  We avoid the penalty by inserting NOP just\n    before the RET instructions in such cases.  */\n static void\n-ix86_reorg (void)\n+ix86_pad_returns (void)\n {\n   edge e;\n \n-  if (!TARGET_ATHLON_K8 || !optimize || optimize_size)\n-    return;\n   for (e = EXIT_BLOCK_PTR->pred; e; e = e->pred_next)\n   {\n     basic_block bb = e->src;\n@@ -15825,7 +15824,17 @@ ix86_reorg (void)\n \tdelete_insn (ret);\n       }\n   }\n-  k8_avoid_jump_misspredicts ();\n+}\n+\n+/* Implement machine specific optimizations.  We implement padding of returns\n+   for K8 CPUs and pass to avoid 4 jumps in the single 16 byte window.  */\n+static void\n+ix86_reorg (void)\n+{\n+  if (TARGET_ATHLON_K8 && optimize && !optimize_size)\n+    ix86_pad_returns ();\n+  if (TARGET_FOUR_JUMP_LIMIT && optimize && !optimize_size)\n+    ix86_avoid_jump_misspredicts ();\n }\n \n /* Return nonzero when QImode register that must be represented via REX prefix"}, {"sha": "cacce6443cfc03a804c22eaaae9653189516d04c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be04394b81b1ac6834f4ab94ef10058ab1ad9ee1/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be04394b81b1ac6834f4ab94ef10058ab1ad9ee1/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=be04394b81b1ac6834f4ab94ef10058ab1ad9ee1", "patch": "@@ -293,6 +293,7 @@ extern int x86_prefetch_sse;\n #define TARGET_USE_FFREEP (x86_use_ffreep & TUNEMASK)\n #define TARGET_REP_MOVL_OPTIMAL (x86_rep_movl_optimal & TUNEMASK)\n #define TARGET_INTER_UNIT_MOVES (x86_inter_unit_moves & TUNEMASK)\n+#define TARGET_FOUR_JUMP_LIMIT (x86_four_jump_limit & TUNEMASK)\n \n #define TARGET_STACK_PROBE (target_flags & MASK_STACK_PROBE)\n "}]}