{"sha": "4f24fac17137ec3f98c2e84639e05bc312e6b561", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYyNGZhYzE3MTM3ZWMzZjk4YzJlODQ2MzllMDViYzMxMmU2YjU2MQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-05-19T15:43:58Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-05-19T15:43:58Z"}, "message": "vqrdmulh_lane.c: New file.\n\n2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmulh_lane.c: New file.\n\nFrom-SVN: r223375", "tree": {"sha": "8160f7d277f2d2aab0e908095605128bfd7effe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8160f7d277f2d2aab0e908095605128bfd7effe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f24fac17137ec3f98c2e84639e05bc312e6b561", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f24fac17137ec3f98c2e84639e05bc312e6b561", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f24fac17137ec3f98c2e84639e05bc312e6b561", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f24fac17137ec3f98c2e84639e05bc312e6b561/comments", "author": null, "committer": null, "parents": [{"sha": "bb16a1349ea6456bf8e2b8f9c108adc3f88194ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb16a1349ea6456bf8e2b8f9c108adc3f88194ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb16a1349ea6456bf8e2b8f9c108adc3f88194ee"}], "stats": {"total": 173, "additions": 173, "deletions": 0}, "files": [{"sha": "e8e88a55596f2119e9e567056f91fb92de8ea376", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f24fac17137ec3f98c2e84639e05bc312e6b561/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f24fac17137ec3f98c2e84639e05bc312e6b561/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4f24fac17137ec3f98c2e84639e05bc312e6b561", "patch": "@@ -1,3 +1,7 @@\n+2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqrdmulh_lane.c: New file.\n+\n 2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vqrdmulh.c: New file."}, {"sha": "2235e745dc4d4dd7a4ed7773376f424980b098cd", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrdmulh_lane.c", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f24fac17137ec3f98c2e84639e05bc312e6b561/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmulh_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f24fac17137ec3f98c2e84639e05bc312e6b561/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmulh_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrdmulh_lane.c?ref=4f24fac17137ec3f98c2e84639e05bc312e6b561", "patch": "@@ -0,0 +1,169 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected values of cumulative_saturation flag.  */\n+int VECT_VAR(expected_cumulative_sat,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x0, 0x0 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+/* Expected values of cumulative_saturation flag when multiplication\n+   saturates.  */\n+int VECT_VAR(expected_cumulative_sat_mul,int,16,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_mul,int,32,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_mul,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_mul,int,32,4) = 1;\n+\n+/* Expected results when multiplication saturates.  */\n+VECT_VAR_DECL(expected_mul,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_mul,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_mul,int,16,8) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n+\t\t\t\t\t    0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_mul,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t    0x7fffffff, 0x7fffffff };\n+\n+/* Expected values of cumulative_saturation flag when rounding\n+   should not cause saturation.  */\n+int VECT_VAR(expected_cumulative_sat_round,int,16,4) = 0;\n+int VECT_VAR(expected_cumulative_sat_round,int,32,2) = 0;\n+int VECT_VAR(expected_cumulative_sat_round,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat_round,int,32,4) = 0;\n+\n+/* Expected results when rounding should not cause saturation.  */\n+VECT_VAR_DECL(expected_round,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_round,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_round,int,16,8) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff,\n+\t\t\t\t\t      0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_round,int,32,4) [] = { 0x7fffffff, 0x7fffffff,\n+\t\t\t\t\t      0x7fffffff, 0x7fffffff };\n+\n+#define INSN vqrdmulh\n+#define TEST_MSG \"VQRDMULH_LANE\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME ## _lane (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN)\n+{\n+  /* vector_res = vqrdmulh_lane(vector,vector2,lane), then store the result.  */\n+#define TEST_VQRDMULH_LANE2(INSN, Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W, N));\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    INSN##Q##_lane_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t\t   VECT_VAR(vector2, T1, W, N2),\t\t\\\n+\t\t\t   L);\t\t\t\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\t\t\\\n+\t\t    VECT_VAR(vector_res, T1, W, N));\t\t\t\\\n+  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  /* Two auxliary macros are necessary to expand INSN */\n+#define TEST_VQRDMULH_LANE1(INSN, Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_VQRDMULH_LANE2(INSN, Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+#define TEST_VQRDMULH_LANE(Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_VQRDMULH_LANE1(INSN, Q, T1, T2, W, N, N2, L, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+\n+  DECL_VARIABLE(vector, int, 16, 4);\n+  DECL_VARIABLE(vector, int, 32, 2);\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, int, 16, 4);\n+  DECL_VARIABLE(vector_res, int, 32, 2);\n+  DECL_VARIABLE(vector_res, int, 16, 8);\n+  DECL_VARIABLE(vector_res, int, 32, 4);\n+\n+  /* vector2: vqrdmulh_lane and vqrdmulhq_lane have a 2nd argument with\n+     the same number of elements, so we need only one variable of each\n+     type.  */\n+  DECL_VARIABLE(vector2, int, 16, 4);\n+  DECL_VARIABLE(vector2, int, 32, 2);\n+\n+  clean_results ();\n+\n+  VLOAD(vector, buffer, , int, s, 16, 4);\n+  VLOAD(vector, buffer, , int, s, 32, 2);\n+\n+  VLOAD(vector, buffer, q, int, s, 16, 8);\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+\n+  /* Initialize vector2.  */\n+  VDUP(vector2, , int, s, 16, 4, 0x55);\n+  VDUP(vector2, , int, s, 32, 2, 0xBB);\n+\n+  /* Choose lane arbitrarily.  */\n+#define CMT \"\"\n+  TEST_VQRDMULH_LANE(, int, s, 16, 4, 4, 2, expected_cumulative_sat, CMT);\n+  TEST_VQRDMULH_LANE(, int, s, 32, 2, 2, 1, expected_cumulative_sat, CMT);\n+  TEST_VQRDMULH_LANE(q, int, s, 16, 8, 4, 3, expected_cumulative_sat, CMT);\n+  TEST_VQRDMULH_LANE(q, int, s, 32, 4, 2, 0, expected_cumulative_sat, CMT);\n+\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, CMT);\n+\n+  /* Now use input values such that the multiplication causes\n+     saturation.  */\n+#define TEST_MSG_MUL \" (check mul cumulative saturation)\"\n+  VDUP(vector, , int, s, 16, 4, 0x8000);\n+  VDUP(vector, , int, s, 32, 2, 0x80000000);\n+  VDUP(vector, q, int, s, 16, 8, 0x8000);\n+  VDUP(vector, q, int, s, 32, 4, 0x80000000);\n+  VDUP(vector2, , int, s, 16, 4, 0x8000);\n+  VDUP(vector2, , int, s, 32, 2, 0x80000000);\n+\n+  TEST_VQRDMULH_LANE(, int, s, 16, 4, 4, 2, expected_cumulative_sat_mul,\n+\t\t     TEST_MSG_MUL);\n+  TEST_VQRDMULH_LANE(, int, s, 32, 2, 2, 1, expected_cumulative_sat_mul,\n+\t\t     TEST_MSG_MUL);\n+  TEST_VQRDMULH_LANE(q, int, s, 16, 8, 4, 3, expected_cumulative_sat_mul,\n+\t\t     TEST_MSG_MUL);\n+  TEST_VQRDMULH_LANE(q, int, s, 32, 4, 2, 0, expected_cumulative_sat_mul,\n+\t\t     TEST_MSG_MUL);\n+\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_mul, TEST_MSG_MUL);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_mul, TEST_MSG_MUL);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_mul, TEST_MSG_MUL);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_mul, TEST_MSG_MUL);\n+\n+  VDUP(vector, , int, s, 16, 4, 0x8000);\n+  VDUP(vector, , int, s, 32, 2, 0x80000000);\n+  VDUP(vector, q, int, s, 16, 8, 0x8000);\n+  VDUP(vector, q, int, s, 32, 4, 0x80000000);\n+  VDUP(vector2, , int, s, 16, 4, 0x8001);\n+  VDUP(vector2, , int, s, 32, 2, 0x80000001);\n+\n+  /* Use input values where rounding produces a result equal to the\n+     saturation value, but does not set the saturation flag.  */\n+#define TEST_MSG_ROUND \" (check rounding)\"\n+  TEST_VQRDMULH_LANE(, int, s, 16, 4, 4, 2, expected_cumulative_sat_round,\n+\t\t     TEST_MSG_ROUND);\n+  TEST_VQRDMULH_LANE(, int, s, 32, 2, 2, 1, expected_cumulative_sat_round,\n+\t\t     TEST_MSG_ROUND);\n+  TEST_VQRDMULH_LANE(q, int, s, 16, 8, 4, 3, expected_cumulative_sat_round,\n+\t\t     TEST_MSG_ROUND);\n+  TEST_VQRDMULH_LANE(q, int, s, 32, 4, 2, 0, expected_cumulative_sat_round,\n+\t\t     TEST_MSG_ROUND);\n+\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_round, TEST_MSG_ROUND);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_round, TEST_MSG_ROUND);\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected_round, TEST_MSG_ROUND);\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected_round, TEST_MSG_ROUND);\n+}\n+\n+int main (void)\n+{\n+  exec_vqrdmulh_lane ();\n+  return 0;\n+}\n+"}]}