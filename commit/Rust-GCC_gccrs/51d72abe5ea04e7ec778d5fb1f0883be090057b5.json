{"sha": "51d72abe5ea04e7ec778d5fb1f0883be090057b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFkNzJhYmU1ZWEwNGU3ZWM3NzhkNWZiMWYwODgzYmUwOTAwNTdiNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-11-17T20:17:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-11-17T20:17:56Z"}, "message": "re PR c++/50473 ([C++0x] ICE in type_has_nontrivial_copy_init, at cp/tree.c:2574)\n\n\tPR c++/50473\n\t* decl.c (cp_finish_decl): Don't try to process a non-dependent\n\tconstant initializer for a reference.\n\t* pt.c (value_dependent_expression_p): A reference is always\n\tdependent.\n\t* call.c (extend_ref_init_temps_1): Also clear TREE_SIDE_EFFECTS\n\ton any NOP_EXPRs.\n\nFrom-SVN: r217672", "tree": {"sha": "6ba13b465e2a25a0a17dad66c10d9b9043cdfe4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ba13b465e2a25a0a17dad66c10d9b9043cdfe4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51d72abe5ea04e7ec778d5fb1f0883be090057b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d72abe5ea04e7ec778d5fb1f0883be090057b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51d72abe5ea04e7ec778d5fb1f0883be090057b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51d72abe5ea04e7ec778d5fb1f0883be090057b5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88436c83a4e5004b8b538cde59c3e9750b0bb8de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88436c83a4e5004b8b538cde59c3e9750b0bb8de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88436c83a4e5004b8b538cde59c3e9750b0bb8de"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "05ca49319106b366817c979cc3c699bb1d465b56", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51d72abe5ea04e7ec778d5fb1f0883be090057b5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51d72abe5ea04e7ec778d5fb1f0883be090057b5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=51d72abe5ea04e7ec778d5fb1f0883be090057b5", "patch": "@@ -1,5 +1,13 @@\n 2014-11-17  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/50473\n+\t* decl.c (cp_finish_decl): Don't try to process a non-dependent\n+\tconstant initializer for a reference.\n+\t* pt.c (value_dependent_expression_p): A reference is always\n+\tdependent.\n+\t* call.c (extend_ref_init_temps_1): Also clear TREE_SIDE_EFFECTS\n+\ton any NOP_EXPRs.\n+\n \tHandle C++14 constexpr flow control.\n \t* constexpr.c (cxx_eval_loop_expr, cxx_eval_switch_expr): New.\n \t(cxx_eval_statement_list): New."}, {"sha": "06162aa6286f031c0a9b55b9aa605658cad7f2a7", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51d72abe5ea04e7ec778d5fb1f0883be090057b5/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51d72abe5ea04e7ec778d5fb1f0883be090057b5/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=51d72abe5ea04e7ec778d5fb1f0883be090057b5", "patch": "@@ -9712,9 +9712,11 @@ extend_ref_init_temps_1 (tree decl, tree init, vec<tree, va_gc> **cleanups)\n     {\n       tree subinit = NULL_TREE;\n       *p = set_up_extended_ref_temp (decl, *p, cleanups, &subinit);\n+      recompute_tree_invariant_for_addr_expr (sub);\n+      if (init != sub)\n+\tinit = fold_convert (TREE_TYPE (init), sub);\n       if (subinit)\n \tinit = build2 (COMPOUND_EXPR, TREE_TYPE (init), subinit, init);\n-      recompute_tree_invariant_for_addr_expr (sub);\n     }\n   return init;\n }"}, {"sha": "e69b5217490d1d29d2af6b2e5d328dde1ee6fa83", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51d72abe5ea04e7ec778d5fb1f0883be090057b5/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51d72abe5ea04e7ec778d5fb1f0883be090057b5/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=51d72abe5ea04e7ec778d5fb1f0883be090057b5", "patch": "@@ -6419,6 +6419,7 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n       else if (init\n \t       && init_const_expr_p\n \t       && !type_dependent_p\n+\t       && TREE_CODE (type) != REFERENCE_TYPE\n \t       && decl_maybe_constant_var_p (decl)\n \t       && !type_dependent_init_p (init)\n \t       && !value_dependent_init_p (init))"}, {"sha": "c0f3b8c5f9f29112a1dc5d28893035cafc38a861", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51d72abe5ea04e7ec778d5fb1f0883be090057b5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51d72abe5ea04e7ec778d5fb1f0883be090057b5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=51d72abe5ea04e7ec778d5fb1f0883be090057b5", "patch": "@@ -20959,6 +20959,8 @@ value_dependent_expression_p (tree expression)\n       if (DECL_INITIAL (expression)\n \t  && decl_constant_var_p (expression)\n \t  && (TREE_CODE (DECL_INITIAL (expression)) == TREE_LIST\n+\t      /* cp_finish_decl doesn't fold reference initializers.  */\n+\t      || TREE_CODE (TREE_TYPE (expression)) == REFERENCE_TYPE\n \t      || value_dependent_expression_p (DECL_INITIAL (expression))))\n \treturn true;\n       return false;"}, {"sha": "c5483376c37f71bb191889c9352544bff5150a65", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ice12.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51d72abe5ea04e7ec778d5fb1f0883be090057b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51d72abe5ea04e7ec778d5fb1f0883be090057b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ice12.C?ref=51d72abe5ea04e7ec778d5fb1f0883be090057b5", "patch": "@@ -3,7 +3,7 @@\n \n struct A\n {\n-  static constexpr int&& i = 0;  // { dg-error \"initialization\" }\n+  static constexpr int&& i = 0;\n };\n \n int j = A::i;"}, {"sha": "230510c4c29f874e89652dba7cb5946fdc743e2e", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ref5.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51d72abe5ea04e7ec778d5fb1f0883be090057b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51d72abe5ea04e7ec778d5fb1f0883be090057b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ref5.C?ref=51d72abe5ea04e7ec778d5fb1f0883be090057b5", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/50473\n+// { dg-do compile { target c++11 } }\n+\n+constexpr int f() { return 1; }\n+\n+template<class T>\n+struct test\n+{\n+  static constexpr const auto& value = f();\n+  int a[value];\n+};\n+\n+test<int> t;"}]}