{"sha": "d6d9f534f9fa9f8e444906ebfe90053a24d212a5", "node_id": "C_kwDOANBUbNoAKGQ2ZDlmNTM0ZjlmYTlmOGU0NDQ5MDZlYmZlOTAwNTNhMjRkMjEyYTU", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-05-09T11:15:02Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-06-02T09:06:47Z"}, "message": "[Ada] Remove left-overs of front-end SJLJ processing\n\ngcc/ada/\n\n\t* gcc-interface/gigi.h (enum standard_datatypes): Remove values\n\tfor the SJLJ exception mechanism.\n\t(jmpbuf_type): Delete.\n\t(jmpbuf_ptr_type): Likewise.\n\t(get_jmpbuf_decl): Likewise.\n\t(set_jmpbuf_decl): Likewise.\n\t(get_excptr_decl): Likewise.\n\t(not_handled_by_others_decl): Likewise.\n\t(setjmp_decl): Likewise.\n\t(update_setjmp_buf_decl): Likewise.\n\t(raise_nodefer_decl): Likewise.\n\t(set_block_jmpbuf_decl): Likewise.\n\t(get_block_jmpbuf_decl): Likewise.\n\t* gcc-interface/trans.cc (gigi): Delete dead code.\n\t* gcc-interface/utils.cc (gnat_binding_level): Remove JMPBUF_DECL.\n\t(gnat_pushlevel): Do not clear it.\n\t(set_block_jmpbuf_decl): Delete.\n\t(get_block_jmpbuf_decl): Likewise.", "tree": {"sha": "9414c4a098e5d8c5bf4b7054a6d421b572d00cf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9414c4a098e5d8c5bf4b7054a6d421b572d00cf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6d9f534f9fa9f8e444906ebfe90053a24d212a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d9f534f9fa9f8e444906ebfe90053a24d212a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6d9f534f9fa9f8e444906ebfe90053a24d212a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d9f534f9fa9f8e444906ebfe90053a24d212a5/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "134758eed2d3cde5810a037be0f1a6744a7cfcd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/134758eed2d3cde5810a037be0f1a6744a7cfcd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/134758eed2d3cde5810a037be0f1a6744a7cfcd8"}], "stats": {"total": 121, "additions": 4, "deletions": 117}, "files": [{"sha": "52d44f0077ab61477da93056fbf5719e1f0f2217", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d9f534f9fa9f8e444906ebfe90053a24d212a5/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d9f534f9fa9f8e444906ebfe90053a24d212a5/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=d6d9f534f9fa9f8e444906ebfe90053a24d212a5", "patch": "@@ -399,18 +399,7 @@ enum standard_datatypes\n   /* Identifier for the name of the Not_Handled_By_Others field.  */\n   ADT_not_handled_by_others_name_id,\n \n-  /* Types and decls used by the SJLJ exception mechanism.  */\n-  ADT_jmpbuf_type,\n-  ADT_jmpbuf_ptr_type,\n-  ADT_get_jmpbuf_decl,\n-  ADT_set_jmpbuf_decl,\n-  ADT_get_excptr_decl,\n-  ADT_not_handled_by_others_decl,\n-  ADT_setjmp_decl,\n-  ADT_update_setjmp_buf_decl,\n-  ADT_raise_nodefer_decl,\n-\n-  /* Types and decls used by the ZCX exception mechanism.  */\n+  /* Types and decls used by the exception mechanism.  */\n   ADT_reraise_zcx_decl,\n   ADT_set_exception_parameter_decl,\n   ADT_begin_handler_decl,\n@@ -469,25 +458,15 @@ extern GTY(()) tree gnat_raise_decls_ext[(int) LAST_REASON_CODE + 1];\n #define parent_name_id gnat_std_decls[(int) ADT_parent_name_id]\n #define not_handled_by_others_name_id \\\n \t  gnat_std_decls[(int) ADT_not_handled_by_others_name_id]\n-#define jmpbuf_type gnat_std_decls[(int) ADT_jmpbuf_type]\n-#define jmpbuf_ptr_type gnat_std_decls[(int) ADT_jmpbuf_ptr_type]\n-#define get_jmpbuf_decl gnat_std_decls[(int) ADT_get_jmpbuf_decl]\n-#define set_jmpbuf_decl gnat_std_decls[(int) ADT_set_jmpbuf_decl]\n-#define get_excptr_decl gnat_std_decls[(int) ADT_get_excptr_decl]\n-#define not_handled_by_others_decl \\\n-\t  gnat_std_decls[(int) ADT_not_handled_by_others_decl]\n-#define setjmp_decl gnat_std_decls[(int) ADT_setjmp_decl]\n-#define update_setjmp_buf_decl gnat_std_decls[(int) ADT_update_setjmp_buf_decl]\n-#define raise_nodefer_decl gnat_std_decls[(int) ADT_raise_nodefer_decl]\n #define reraise_zcx_decl gnat_std_decls[(int) ADT_reraise_zcx_decl]\n #define set_exception_parameter_decl \\\n \t  gnat_std_decls[(int) ADT_set_exception_parameter_decl]\n #define begin_handler_decl gnat_std_decls[(int) ADT_begin_handler_decl]\n+#define end_handler_decl gnat_std_decls[(int) ADT_end_handler_decl]\n+#define unhandled_except_decl gnat_std_decls[(int) ADT_unhandled_except_decl]\n #define others_decl gnat_std_decls[(int) ADT_others_decl]\n #define all_others_decl gnat_std_decls[(int) ADT_all_others_decl]\n #define unhandled_others_decl gnat_std_decls[(int) ADT_unhandled_others_decl]\n-#define end_handler_decl gnat_std_decls[(int) ADT_end_handler_decl]\n-#define unhandled_except_decl gnat_std_decls[(int) ADT_unhandled_except_decl]\n \n /* Routines expected by the gcc back-end. They must have exactly the same\n    prototype and names as below.  */\n@@ -504,12 +483,6 @@ extern void gnat_zaplevel (void);\n    and point FNDECL to this BLOCK.  */\n extern void set_current_block_context (tree fndecl);\n \n-/* Set the jmpbuf_decl for the current binding level to DECL.  */\n-extern void set_block_jmpbuf_decl (tree decl);\n-\n-/* Get the setjmp_decl, if any, for the current binding level.  */\n-extern tree get_block_jmpbuf_decl (void);\n-\n /* Record DECL as belonging to the current lexical scope and use GNAT_NODE\n    for location information and flag propagation.  */\n extern void gnat_pushdecl (tree decl, Node_Id gnat_node);"}, {"sha": "f0602b824b07d5a61dc5739f39c50c10b7b13d3e", "filename": "gcc/ada/gcc-interface/trans.cc", "status": "modified", "additions": 1, "deletions": 67, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d9f534f9fa9f8e444906ebfe90053a24d212a5/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d9f534f9fa9f8e444906ebfe90053a24d212a5/gcc%2Fada%2Fgcc-interface%2Ftrans.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.cc?ref=d6d9f534f9fa9f8e444906ebfe90053a24d212a5", "patch": "@@ -467,71 +467,6 @@ gigi (Node_Id gnat_root,\n   /* Make the types and functions used for exception processing.  */\n   except_type_node = gnat_to_gnu_type (Base_Type (standard_exception_type));\n \n-  for (t = TYPE_FIELDS (except_type_node); t; t = DECL_CHAIN (t))\n-    if (DECL_NAME (t) == not_handled_by_others_name_id)\n-      {\n-\tnot_handled_by_others_decl = t;\n-\tbreak;\n-      }\n-  gcc_assert (DECL_P (not_handled_by_others_decl));\n-\n-  jmpbuf_type\n-    = build_array_type (gnat_type_for_mode (Pmode, 0),\n-\t\t\tbuild_index_type (size_int (5)));\n-  record_builtin_type (\"JMPBUF_T\", jmpbuf_type, true);\n-  jmpbuf_ptr_type = build_pointer_type (jmpbuf_type);\n-\n-  /* Functions to get and set the jumpbuf pointer for the current thread.  */\n-  get_jmpbuf_decl\n-    = create_subprog_decl\n-      (get_identifier (\"system__soft_links__get_jmpbuf_address_soft\"),\n-       NULL_TREE, build_function_type_list (jmpbuf_ptr_type, NULL_TREE),\n-       NULL_TREE, is_default, true, true, true, false, false, NULL, Empty);\n-\n-  set_jmpbuf_decl\n-    = create_subprog_decl\n-      (get_identifier (\"system__soft_links__set_jmpbuf_address_soft\"),\n-       NULL_TREE, build_function_type_list (void_type_node, jmpbuf_ptr_type,\n-\t\t\t\t\t    NULL_TREE),\n-       NULL_TREE, is_default, true, true, true, false, false, NULL, Empty);\n-\n-  get_excptr_decl\n-    = create_subprog_decl\n-      (get_identifier (\"system__soft_links__get_gnat_exception\"), NULL_TREE,\n-       build_function_type_list (build_pointer_type (except_type_node),\n-\t\t\t\t NULL_TREE),\n-       NULL_TREE, is_default, true, true, true, false, false, NULL, Empty);\n-\n-  /* setjmp returns an integer and has one operand, which is a pointer to\n-     a jmpbuf.  */\n-  setjmp_decl\n-    = create_subprog_decl\n-      (get_identifier (\"__builtin_setjmp\"), NULL_TREE,\n-       build_function_type_list (integer_type_node, jmpbuf_ptr_type,\n-\t\t\t\t NULL_TREE),\n-       NULL_TREE, is_default, true, true, true, false, false, NULL, Empty);\n-  set_decl_built_in_function (setjmp_decl, BUILT_IN_NORMAL, BUILT_IN_SETJMP);\n-\n-  /* update_setjmp_buf updates a setjmp buffer from the current stack pointer\n-     address.  */\n-  update_setjmp_buf_decl\n-    = create_subprog_decl\n-      (get_identifier (\"__builtin_update_setjmp_buf\"), NULL_TREE,\n-       build_function_type_list (void_type_node, jmpbuf_ptr_type, NULL_TREE),\n-       NULL_TREE, is_default, true, true, true, false, false, NULL, Empty);\n-  set_decl_built_in_function (update_setjmp_buf_decl, BUILT_IN_NORMAL,\n-\t\t\t      BUILT_IN_UPDATE_SETJMP_BUF);\n-\n-  /* Indicate that it never returns.  */\n-  ftype = build_function_type_list (void_type_node,\n-\t\t\t\t    build_pointer_type (except_type_node),\n-\t\t\t\t    NULL_TREE);\n-  ftype = build_qualified_type (ftype, TYPE_QUAL_VOLATILE);\n-  raise_nodefer_decl\n-    = create_subprog_decl\n-      (get_identifier (\"__gnat_raise_nodefer_with_msg\"), NULL_TREE, ftype,\n-       NULL_TREE, is_default, true, true, true, false, false, NULL, Empty);\n-\n   set_exception_parameter_decl\n     = create_subprog_decl\n       (get_identifier (\"__gnat_set_exception_parameter\"), NULL_TREE,\n@@ -600,8 +535,7 @@ gigi (Node_Id gnat_root,\n \t\t       NULL, Empty);\n \n   /* If in no exception handlers mode, all raise statements are redirected to\n-     __gnat_last_chance_handler.  No need to redefine raise_nodefer_decl since\n-     this procedure will never be called in this mode.  */\n+     __gnat_last_chance_handler.  */\n   if (No_Exception_Handlers_Set ())\n     {\n       /* Indicate that it never returns.  */"}, {"sha": "b5c2bfb8701650d4e0f053dc09a8bdd9f388dbb0", "filename": "gcc/ada/gcc-interface/utils.cc", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d9f534f9fa9f8e444906ebfe90053a24d212a5/gcc%2Fada%2Fgcc-interface%2Futils.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d9f534f9fa9f8e444906ebfe90053a24d212a5/gcc%2Fada%2Fgcc-interface%2Futils.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.cc?ref=d6d9f534f9fa9f8e444906ebfe90053a24d212a5", "patch": "@@ -264,9 +264,6 @@ struct GTY((chain_next (\"%h.chain\"))) gnat_binding_level {\n   struct gnat_binding_level *chain;\n   /* The BLOCK node for this level.  */\n   tree block;\n-  /* If nonzero, the setjmp buffer that needs to be updated for any\n-     variable-sized definition within this context.  */\n-  tree jmpbuf_decl;\n };\n \n /* The binding level currently in effect.  */\n@@ -599,7 +596,6 @@ gnat_pushlevel (void)\n \n   /* Add this level to the front of the chain (stack) of active levels.  */\n   newlevel->chain = current_binding_level;\n-  newlevel->jmpbuf_decl = NULL_TREE;\n   current_binding_level = newlevel;\n }\n \n@@ -614,22 +610,6 @@ set_current_block_context (tree fndecl)\n   set_block_for_group (current_binding_level->block);\n }\n \n-/* Set the jmpbuf_decl for the current binding level to DECL.  */\n-\n-void\n-set_block_jmpbuf_decl (tree decl)\n-{\n-  current_binding_level->jmpbuf_decl = decl;\n-}\n-\n-/* Get the jmpbuf_decl, if any, for the current binding level.  */\n-\n-tree\n-get_block_jmpbuf_decl (void)\n-{\n-  return current_binding_level->jmpbuf_decl;\n-}\n-\n /* Exit a binding level.  Set any BLOCK into the current code group.  */\n \n void"}]}