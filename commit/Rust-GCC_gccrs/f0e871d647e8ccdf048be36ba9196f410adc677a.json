{"sha": "f0e871d647e8ccdf048be36ba9196f410adc677a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBlODcxZDY0N2U4Y2NkZjA0OGJlMzZiYTkxOTZmNDEwYWRjNjc3YQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-09-10T17:21:44Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-09-10T17:21:44Z"}, "message": "re PR fortran/28947 (Double MATMUL() uses wrong array elements)\n\n2006-09-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR libfortran/28947\n\t* m4/matmul.m4: For the case where the second input argument is\n\ttransposed, ensure that the case with rank (a) == 1 is\n\tcorrectly calculated.\n\t* generated/matmul_r4.c: Regenerate.\n\t* generated/matmul_r8.c: Regenerate.\n\t* generated/matmul_r10.c: Regenerate.\n\t* generated/matmul_r16.c: Regenerate.\n\t* generated/matmul_c4.c: Regenerate.\n\t* generated/matmul_c8.c: Regenerate.\n\t* generated/matmul_c10.c: Regenerate.\n\t* generated/matmul_c16.c: Regenerate.\n\t* generated/matmul_i4.c: Regenerate.\n\t* generated/matmul_i8.c: Regenerate.\n\t* generated/matmul_i16.c: Regenerate.\n\n\n2006-09-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR libfortran/28947\n\tgfortran.dg/matmul_4.f90: New test.\n\nFrom-SVN: r116817", "tree": {"sha": "8042aa969d343b56b5ee82785eb2c28922abe06c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8042aa969d343b56b5ee82785eb2c28922abe06c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0e871d647e8ccdf048be36ba9196f410adc677a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e871d647e8ccdf048be36ba9196f410adc677a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0e871d647e8ccdf048be36ba9196f410adc677a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0e871d647e8ccdf048be36ba9196f410adc677a/comments", "author": null, "committer": null, "parents": [{"sha": "380bfbbd61795428e53826d379ce1f4bfe1768f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380bfbbd61795428e53826d379ce1f4bfe1768f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/380bfbbd61795428e53826d379ce1f4bfe1768f0"}], "stats": {"total": 213, "additions": 213, "deletions": 0}, "files": [{"sha": "327a048a180241b213780da1a24c4d5b589abd23", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e871d647e8ccdf048be36ba9196f410adc677a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e871d647e8ccdf048be36ba9196f410adc677a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f0e871d647e8ccdf048be36ba9196f410adc677a", "patch": "@@ -1,3 +1,8 @@\n+2006-09-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR libfortran/28947\n+\tgfortran.dg/matmul_4.f90: New test.\n+\n 2006-09-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/28959"}, {"sha": "8bbaef934c1d0629d05ea8f5328188afacde3b25", "filename": "gcc/testsuite/gfortran.dg/matmul_4.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e871d647e8ccdf048be36ba9196f410adc677a/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e871d647e8ccdf048be36ba9196f410adc677a/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmatmul_4.f90?ref=f0e871d647e8ccdf048be36ba9196f410adc677a", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do run }\n+! Check the fix for PR28947, in which the mechanism for dealing\n+! with matmul (a, transpose (b)) would cause wrong results for\n+! a having a rank == 1.\n+!\n+! Contributed by Harald Anlauf  <anlauf@gmx.de>\n+!   \n+program gfcbug40\n+  implicit none\n+\n+  real :: h(3,3), mat(2,3)\n+\n+  h(:,:) = - HUGE (1.0)/4       ! Preset unused elements suitably...\n+\n+  h(3,:) = 0\n+  h(3,3) = 1\n+  mat(:,:) = 1\n+  h(3,:) = h(3,:) + matmul (matmul (h(3,:), transpose (mat)), mat)\n+\n+  if (any (h(3,:) .ne. (/2.0, 2.0, 3.0/))) call abort ()\n+\n+end program gfcbug40"}, {"sha": "edba622c70bc837c2b154f32f06adb3dd8703898", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=f0e871d647e8ccdf048be36ba9196f410adc677a", "patch": "@@ -1,3 +1,21 @@\n+2006-09-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR libfortran/28947\n+\t* m4/matmul.m4: For the case where the second input argument is\n+\ttransposed, ensure that the case with rank (a) == 1 is\n+\tcorrectly calculated.\n+\t* generated/matmul_r4.c: Regenerate.\n+\t* generated/matmul_r8.c: Regenerate.\n+\t* generated/matmul_r10.c: Regenerate.\n+\t* generated/matmul_r16.c: Regenerate.\n+\t* generated/matmul_c4.c: Regenerate.\n+\t* generated/matmul_c8.c: Regenerate.\n+\t* generated/matmul_c10.c: Regenerate.\n+\t* generated/matmul_c16.c: Regenerate.\n+\t* generated/matmul_i4.c: Regenerate.\n+\t* generated/matmul_i8.c: Regenerate.\n+\t* generated/matmul_i16.c: Regenerate.\n+\n 2006-08-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/28354"}, {"sha": "df2cd93c15ff8dbaa263f3f000c24d16702a1ea6", "filename": "libgfortran/generated/matmul_c10.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c10.c?ref=f0e871d647e8ccdf048be36ba9196f410adc677a", "patch": "@@ -258,6 +258,20 @@ matmul_c10 (gfc_array_c10 * const restrict retarray,\n \t    /* dest[x,y] += a[x,n] * b[n,y] */\n \t    dest[x*rxstride + y*rystride] += abase[x*axstride + n*aystride] * bbase[n*bxstride + y*bystride];\n     }\n+  else if (GFC_DESCRIPTOR_RANK (a) == 1)\n+    {\n+      const GFC_COMPLEX_10 *restrict bbase_y;\n+      GFC_COMPLEX_10 s;\n+\n+      for (y = 0; y < ycount; y++)\n+\t{\n+\t  bbase_y = &bbase[y*bystride];\n+\t  s = (GFC_COMPLEX_10) 0;\n+\t  for (n = 0; n < count; n++)\n+\t    s += abase[n*axstride] * bbase_y[n*bxstride];\n+\t  dest[y*rxstride] = s;\n+\t}\n+    }\n   else\n     {\n       const GFC_COMPLEX_10 *restrict abase_x;"}, {"sha": "6425eb8d49d986bb64f7edec7cf7233bc82a540f", "filename": "libgfortran/generated/matmul_c16.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c16.c?ref=f0e871d647e8ccdf048be36ba9196f410adc677a", "patch": "@@ -258,6 +258,20 @@ matmul_c16 (gfc_array_c16 * const restrict retarray,\n \t    /* dest[x,y] += a[x,n] * b[n,y] */\n \t    dest[x*rxstride + y*rystride] += abase[x*axstride + n*aystride] * bbase[n*bxstride + y*bystride];\n     }\n+  else if (GFC_DESCRIPTOR_RANK (a) == 1)\n+    {\n+      const GFC_COMPLEX_16 *restrict bbase_y;\n+      GFC_COMPLEX_16 s;\n+\n+      for (y = 0; y < ycount; y++)\n+\t{\n+\t  bbase_y = &bbase[y*bystride];\n+\t  s = (GFC_COMPLEX_16) 0;\n+\t  for (n = 0; n < count; n++)\n+\t    s += abase[n*axstride] * bbase_y[n*bxstride];\n+\t  dest[y*rxstride] = s;\n+\t}\n+    }\n   else\n     {\n       const GFC_COMPLEX_16 *restrict abase_x;"}, {"sha": "2d47a1349729162628b6f582361f146d9568a61a", "filename": "libgfortran/generated/matmul_c4.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c4.c?ref=f0e871d647e8ccdf048be36ba9196f410adc677a", "patch": "@@ -258,6 +258,20 @@ matmul_c4 (gfc_array_c4 * const restrict retarray,\n \t    /* dest[x,y] += a[x,n] * b[n,y] */\n \t    dest[x*rxstride + y*rystride] += abase[x*axstride + n*aystride] * bbase[n*bxstride + y*bystride];\n     }\n+  else if (GFC_DESCRIPTOR_RANK (a) == 1)\n+    {\n+      const GFC_COMPLEX_4 *restrict bbase_y;\n+      GFC_COMPLEX_4 s;\n+\n+      for (y = 0; y < ycount; y++)\n+\t{\n+\t  bbase_y = &bbase[y*bystride];\n+\t  s = (GFC_COMPLEX_4) 0;\n+\t  for (n = 0; n < count; n++)\n+\t    s += abase[n*axstride] * bbase_y[n*bxstride];\n+\t  dest[y*rxstride] = s;\n+\t}\n+    }\n   else\n     {\n       const GFC_COMPLEX_4 *restrict abase_x;"}, {"sha": "f22719df505a38e73b45c28e42bd1506d18d1e29", "filename": "libgfortran/generated/matmul_c8.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_c8.c?ref=f0e871d647e8ccdf048be36ba9196f410adc677a", "patch": "@@ -258,6 +258,20 @@ matmul_c8 (gfc_array_c8 * const restrict retarray,\n \t    /* dest[x,y] += a[x,n] * b[n,y] */\n \t    dest[x*rxstride + y*rystride] += abase[x*axstride + n*aystride] * bbase[n*bxstride + y*bystride];\n     }\n+  else if (GFC_DESCRIPTOR_RANK (a) == 1)\n+    {\n+      const GFC_COMPLEX_8 *restrict bbase_y;\n+      GFC_COMPLEX_8 s;\n+\n+      for (y = 0; y < ycount; y++)\n+\t{\n+\t  bbase_y = &bbase[y*bystride];\n+\t  s = (GFC_COMPLEX_8) 0;\n+\t  for (n = 0; n < count; n++)\n+\t    s += abase[n*axstride] * bbase_y[n*bxstride];\n+\t  dest[y*rxstride] = s;\n+\t}\n+    }\n   else\n     {\n       const GFC_COMPLEX_8 *restrict abase_x;"}, {"sha": "73c3fbc108d6aed0600329e565aeb75b31751c57", "filename": "libgfortran/generated/matmul_i16.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i16.c?ref=f0e871d647e8ccdf048be36ba9196f410adc677a", "patch": "@@ -258,6 +258,20 @@ matmul_i16 (gfc_array_i16 * const restrict retarray,\n \t    /* dest[x,y] += a[x,n] * b[n,y] */\n \t    dest[x*rxstride + y*rystride] += abase[x*axstride + n*aystride] * bbase[n*bxstride + y*bystride];\n     }\n+  else if (GFC_DESCRIPTOR_RANK (a) == 1)\n+    {\n+      const GFC_INTEGER_16 *restrict bbase_y;\n+      GFC_INTEGER_16 s;\n+\n+      for (y = 0; y < ycount; y++)\n+\t{\n+\t  bbase_y = &bbase[y*bystride];\n+\t  s = (GFC_INTEGER_16) 0;\n+\t  for (n = 0; n < count; n++)\n+\t    s += abase[n*axstride] * bbase_y[n*bxstride];\n+\t  dest[y*rxstride] = s;\n+\t}\n+    }\n   else\n     {\n       const GFC_INTEGER_16 *restrict abase_x;"}, {"sha": "63bca0152cdd212d09d642310748d148a8b3420a", "filename": "libgfortran/generated/matmul_i4.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i4.c?ref=f0e871d647e8ccdf048be36ba9196f410adc677a", "patch": "@@ -258,6 +258,20 @@ matmul_i4 (gfc_array_i4 * const restrict retarray,\n \t    /* dest[x,y] += a[x,n] * b[n,y] */\n \t    dest[x*rxstride + y*rystride] += abase[x*axstride + n*aystride] * bbase[n*bxstride + y*bystride];\n     }\n+  else if (GFC_DESCRIPTOR_RANK (a) == 1)\n+    {\n+      const GFC_INTEGER_4 *restrict bbase_y;\n+      GFC_INTEGER_4 s;\n+\n+      for (y = 0; y < ycount; y++)\n+\t{\n+\t  bbase_y = &bbase[y*bystride];\n+\t  s = (GFC_INTEGER_4) 0;\n+\t  for (n = 0; n < count; n++)\n+\t    s += abase[n*axstride] * bbase_y[n*bxstride];\n+\t  dest[y*rxstride] = s;\n+\t}\n+    }\n   else\n     {\n       const GFC_INTEGER_4 *restrict abase_x;"}, {"sha": "caaf9e8f97631d4cb3dbe684c40fe40083424dda", "filename": "libgfortran/generated/matmul_i8.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_i8.c?ref=f0e871d647e8ccdf048be36ba9196f410adc677a", "patch": "@@ -258,6 +258,20 @@ matmul_i8 (gfc_array_i8 * const restrict retarray,\n \t    /* dest[x,y] += a[x,n] * b[n,y] */\n \t    dest[x*rxstride + y*rystride] += abase[x*axstride + n*aystride] * bbase[n*bxstride + y*bystride];\n     }\n+  else if (GFC_DESCRIPTOR_RANK (a) == 1)\n+    {\n+      const GFC_INTEGER_8 *restrict bbase_y;\n+      GFC_INTEGER_8 s;\n+\n+      for (y = 0; y < ycount; y++)\n+\t{\n+\t  bbase_y = &bbase[y*bystride];\n+\t  s = (GFC_INTEGER_8) 0;\n+\t  for (n = 0; n < count; n++)\n+\t    s += abase[n*axstride] * bbase_y[n*bxstride];\n+\t  dest[y*rxstride] = s;\n+\t}\n+    }\n   else\n     {\n       const GFC_INTEGER_8 *restrict abase_x;"}, {"sha": "8fa1d6d9e497ef1722fb27651b216de9d2351e0d", "filename": "libgfortran/generated/matmul_r10.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r10.c?ref=f0e871d647e8ccdf048be36ba9196f410adc677a", "patch": "@@ -258,6 +258,20 @@ matmul_r10 (gfc_array_r10 * const restrict retarray,\n \t    /* dest[x,y] += a[x,n] * b[n,y] */\n \t    dest[x*rxstride + y*rystride] += abase[x*axstride + n*aystride] * bbase[n*bxstride + y*bystride];\n     }\n+  else if (GFC_DESCRIPTOR_RANK (a) == 1)\n+    {\n+      const GFC_REAL_10 *restrict bbase_y;\n+      GFC_REAL_10 s;\n+\n+      for (y = 0; y < ycount; y++)\n+\t{\n+\t  bbase_y = &bbase[y*bystride];\n+\t  s = (GFC_REAL_10) 0;\n+\t  for (n = 0; n < count; n++)\n+\t    s += abase[n*axstride] * bbase_y[n*bxstride];\n+\t  dest[y*rxstride] = s;\n+\t}\n+    }\n   else\n     {\n       const GFC_REAL_10 *restrict abase_x;"}, {"sha": "0f61b03816815316ff79c7a3508b7fce9865f688", "filename": "libgfortran/generated/matmul_r16.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r16.c?ref=f0e871d647e8ccdf048be36ba9196f410adc677a", "patch": "@@ -258,6 +258,20 @@ matmul_r16 (gfc_array_r16 * const restrict retarray,\n \t    /* dest[x,y] += a[x,n] * b[n,y] */\n \t    dest[x*rxstride + y*rystride] += abase[x*axstride + n*aystride] * bbase[n*bxstride + y*bystride];\n     }\n+  else if (GFC_DESCRIPTOR_RANK (a) == 1)\n+    {\n+      const GFC_REAL_16 *restrict bbase_y;\n+      GFC_REAL_16 s;\n+\n+      for (y = 0; y < ycount; y++)\n+\t{\n+\t  bbase_y = &bbase[y*bystride];\n+\t  s = (GFC_REAL_16) 0;\n+\t  for (n = 0; n < count; n++)\n+\t    s += abase[n*axstride] * bbase_y[n*bxstride];\n+\t  dest[y*rxstride] = s;\n+\t}\n+    }\n   else\n     {\n       const GFC_REAL_16 *restrict abase_x;"}, {"sha": "d684dd2905c322463424104fe5c083fad3ebb1cf", "filename": "libgfortran/generated/matmul_r4.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r4.c?ref=f0e871d647e8ccdf048be36ba9196f410adc677a", "patch": "@@ -258,6 +258,20 @@ matmul_r4 (gfc_array_r4 * const restrict retarray,\n \t    /* dest[x,y] += a[x,n] * b[n,y] */\n \t    dest[x*rxstride + y*rystride] += abase[x*axstride + n*aystride] * bbase[n*bxstride + y*bystride];\n     }\n+  else if (GFC_DESCRIPTOR_RANK (a) == 1)\n+    {\n+      const GFC_REAL_4 *restrict bbase_y;\n+      GFC_REAL_4 s;\n+\n+      for (y = 0; y < ycount; y++)\n+\t{\n+\t  bbase_y = &bbase[y*bystride];\n+\t  s = (GFC_REAL_4) 0;\n+\t  for (n = 0; n < count; n++)\n+\t    s += abase[n*axstride] * bbase_y[n*bxstride];\n+\t  dest[y*rxstride] = s;\n+\t}\n+    }\n   else\n     {\n       const GFC_REAL_4 *restrict abase_x;"}, {"sha": "41726bce2a5840adca0acf2a3c76dddb0ae7a0ba", "filename": "libgfortran/generated/matmul_r8.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fgenerated%2Fmatmul_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmatmul_r8.c?ref=f0e871d647e8ccdf048be36ba9196f410adc677a", "patch": "@@ -258,6 +258,20 @@ matmul_r8 (gfc_array_r8 * const restrict retarray,\n \t    /* dest[x,y] += a[x,n] * b[n,y] */\n \t    dest[x*rxstride + y*rystride] += abase[x*axstride + n*aystride] * bbase[n*bxstride + y*bystride];\n     }\n+  else if (GFC_DESCRIPTOR_RANK (a) == 1)\n+    {\n+      const GFC_REAL_8 *restrict bbase_y;\n+      GFC_REAL_8 s;\n+\n+      for (y = 0; y < ycount; y++)\n+\t{\n+\t  bbase_y = &bbase[y*bystride];\n+\t  s = (GFC_REAL_8) 0;\n+\t  for (n = 0; n < count; n++)\n+\t    s += abase[n*axstride] * bbase_y[n*bxstride];\n+\t  dest[y*rxstride] = s;\n+\t}\n+    }\n   else\n     {\n       const GFC_REAL_8 *restrict abase_x;"}, {"sha": "3678c639f2a3c14ec8c42df57e0437c8ab352a12", "filename": "libgfortran/m4/matmul.m4", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fm4%2Fmatmul.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0e871d647e8ccdf048be36ba9196f410adc677a/libgfortran%2Fm4%2Fmatmul.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fmatmul.m4?ref=f0e871d647e8ccdf048be36ba9196f410adc677a", "patch": "@@ -260,6 +260,20 @@ sinclude(`matmul_asm_'rtype_code`.m4')dnl\n \t    /* dest[x,y] += a[x,n] * b[n,y] */\n \t    dest[x*rxstride + y*rystride] += abase[x*axstride + n*aystride] * bbase[n*bxstride + y*bystride];\n     }\n+  else if (GFC_DESCRIPTOR_RANK (a) == 1)\n+    {\n+      const rtype_name *restrict bbase_y;\n+      rtype_name s;\n+\n+      for (y = 0; y < ycount; y++)\n+\t{\n+\t  bbase_y = &bbase[y*bystride];\n+\t  s = (rtype_name) 0;\n+\t  for (n = 0; n < count; n++)\n+\t    s += abase[n*axstride] * bbase_y[n*bxstride];\n+\t  dest[y*rxstride] = s;\n+\t}\n+    }\n   else\n     {\n       const rtype_name *restrict abase_x;"}]}