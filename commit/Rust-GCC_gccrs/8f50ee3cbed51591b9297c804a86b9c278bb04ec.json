{"sha": "8f50ee3cbed51591b9297c804a86b9c278bb04ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY1MGVlM2NiZWQ1MTU5MWI5Mjk3YzgwNGE4NmI5YzI3OGJiMDRlYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-12-01T17:56:34Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-12-01T17:56:34Z"}, "message": "jit-playback: Move argv-creation to its own function\n\ngcc/jit/ChangeLog:\n\t* jit-playback.c (gcc::jit::playback::context::compile): Use an\n\tauto_vec<const char *> rather than a const char *[20] for the\n\ttop-level argv, and move the logic to build it to...\n\t(gcc::jit::playback::context::make_fake_args): New function.\n\t* jit-playback.h (gcc::jit::playback::context::make_fake_args):\n\tNew function.\n\nFrom-SVN: r218237", "tree": {"sha": "645b99d658ed240d20fc6eebf2a0a902f937e18b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/645b99d658ed240d20fc6eebf2a0a902f937e18b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f50ee3cbed51591b9297c804a86b9c278bb04ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f50ee3cbed51591b9297c804a86b9c278bb04ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f50ee3cbed51591b9297c804a86b9c278bb04ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f50ee3cbed51591b9297c804a86b9c278bb04ec/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "56dea35f948f84bff37051141893e1d237c3d0f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56dea35f948f84bff37051141893e1d237c3d0f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56dea35f948f84bff37051141893e1d237c3d0f9"}], "stats": {"total": 166, "additions": 95, "deletions": 71}, "files": [{"sha": "5035693e1bf19667b01831898ad8fb003da03b97", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f50ee3cbed51591b9297c804a86b9c278bb04ec/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f50ee3cbed51591b9297c804a86b9c278bb04ec/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=8f50ee3cbed51591b9297c804a86b9c278bb04ec", "patch": "@@ -1,3 +1,12 @@\n+2014-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit-playback.c (gcc::jit::playback::context::compile): Use an\n+\tauto_vec<const char *> rather than a const char *[20] for the\n+\ttop-level argv, and move the logic to build it to...\n+\t(gcc::jit::playback::context::make_fake_args): New function.\n+\t* jit-playback.h (gcc::jit::playback::context::make_fake_args):\n+\tNew function.\n+\n 2014-12-01  David Malcolm  <dmalcolm@redhat.com>\n \n \t* Make-lang.in (jit_OBJS): Add jit/jit-result.o."}, {"sha": "b12584ec7491a215158e543904b31ac01d799935", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 78, "deletions": 71, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f50ee3cbed51591b9297c804a86b9c278bb04ec/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f50ee3cbed51591b9297c804a86b9c278bb04ec/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=8f50ee3cbed51591b9297c804a86b9c278bb04ec", "patch": "@@ -1548,8 +1548,6 @@ compile ()\n   void *handle = NULL;\n   const char *ctxt_progname;\n   result *result_obj = NULL;\n-  const char *fake_args[20];\n-  unsigned int num_args;\n \n   m_path_template = make_tempdir_path_template ();\n   if (!m_path_template)\n@@ -1576,77 +1574,14 @@ compile ()\n   if (!ctxt_progname)\n     ctxt_progname = \"libgccjit.so\";\n \n-  fake_args[0] = ctxt_progname;\n-  fake_args[1] = m_path_c_file;\n-  num_args = 2;\n-\n-#define ADD_ARG(arg) \\\n-  do \\\n-    { \\\n-      gcc_assert(num_args < sizeof(fake_args)/sizeof(char*)); \\\n-      fake_args[num_args++] = arg; \\\n-    } \\\n-  while (0)\n-\n-  ADD_ARG (\"-fPIC\");\n-\n-  /* Handle int options: */\n-  switch (get_int_option (GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL))\n-    {\n-    default:\n-      add_error (NULL,\n-\t\t \"unrecognized optimization level: %i\",\n-\t\t get_int_option (GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL));\n-      return NULL;\n-\n-    case 0:\n-      ADD_ARG (\"-O0\");\n-      break;\n-\n-    case 1:\n-      ADD_ARG (\"-O1\");\n-      break;\n-\n-    case 2:\n-      ADD_ARG (\"-O2\");\n-      break;\n-\n-    case 3:\n-      ADD_ARG (\"-O3\");\n-      break;\n-    }\n-  /* What about -Os? */\n-\n-  /* Handle bool options: */\n-  if (get_bool_option (GCC_JIT_BOOL_OPTION_DEBUGINFO))\n-    ADD_ARG (\"-g\");\n-\n-  /* Suppress timing (and other) info.  */\n-  if (!get_bool_option (GCC_JIT_BOOL_OPTION_DUMP_SUMMARY))\n-    {\n-      ADD_ARG (\"-quiet\");\n-      quiet_flag = 1;\n-    }\n-\n-  /* Aggressively garbage-collect, to shake out bugs: */\n-  if (get_bool_option (GCC_JIT_BOOL_OPTION_SELFCHECK_GC))\n-    {\n-      ADD_ARG (\"--param\");\n-      ADD_ARG (\"ggc-min-expand=0\");\n-      ADD_ARG (\"--param\");\n-      ADD_ARG (\"ggc-min-heapsize=0\");\n-    }\n-\n-  if (get_bool_option (GCC_JIT_BOOL_OPTION_DUMP_EVERYTHING))\n-    {\n-      ADD_ARG (\"-fdump-tree-all\");\n-      ADD_ARG (\"-fdump-rtl-all\");\n-      ADD_ARG (\"-fdump-ipa-all\");\n-    }\n+  auto_vec <const char *> fake_args;\n+  make_fake_args (&fake_args, ctxt_progname);\n+  if (errors_occurred ())\n+    return NULL;\n \n   toplev toplev (false);\n-\n-  toplev.main (num_args, const_cast <char **> (fake_args));\n+  toplev.main (fake_args.length (),\n+\t       const_cast <char **> (fake_args.address ()));\n   toplev.finalize ();\n \n   active_playback_ctxt = NULL;\n@@ -1750,6 +1685,78 @@ compile ()\n   return result_obj;\n }\n \n+/* Helper functions for gcc::jit::playback::context::compile.  */\n+\n+/* Build a fake argv for toplev::main from the options set\n+   by the user on the context .  */\n+\n+void\n+playback::context::\n+make_fake_args (auto_vec <const char *> *argvec,\n+\t\tconst char *ctxt_progname)\n+{\n+#define ADD_ARG(arg) argvec->safe_push (arg)\n+\n+  ADD_ARG (ctxt_progname);\n+  ADD_ARG (m_path_c_file);\n+  ADD_ARG (\"-fPIC\");\n+\n+  /* Handle int options: */\n+  switch (get_int_option (GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL))\n+    {\n+    default:\n+      add_error (NULL,\n+\t\t \"unrecognized optimization level: %i\",\n+\t\t get_int_option (GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL));\n+      return;\n+\n+    case 0:\n+      ADD_ARG (\"-O0\");\n+      break;\n+\n+    case 1:\n+      ADD_ARG (\"-O1\");\n+      break;\n+\n+    case 2:\n+      ADD_ARG (\"-O2\");\n+      break;\n+\n+    case 3:\n+      ADD_ARG (\"-O3\");\n+      break;\n+    }\n+  /* What about -Os? */\n+\n+  /* Handle bool options: */\n+  if (get_bool_option (GCC_JIT_BOOL_OPTION_DEBUGINFO))\n+    ADD_ARG (\"-g\");\n+\n+  /* Suppress timing (and other) info.  */\n+  if (!get_bool_option (GCC_JIT_BOOL_OPTION_DUMP_SUMMARY))\n+    {\n+      ADD_ARG (\"-quiet\");\n+      quiet_flag = 1;\n+    }\n+\n+  /* Aggressively garbage-collect, to shake out bugs: */\n+  if (get_bool_option (GCC_JIT_BOOL_OPTION_SELFCHECK_GC))\n+    {\n+      ADD_ARG (\"--param\");\n+      ADD_ARG (\"ggc-min-expand=0\");\n+      ADD_ARG (\"--param\");\n+      ADD_ARG (\"ggc-min-heapsize=0\");\n+    }\n+\n+  if (get_bool_option (GCC_JIT_BOOL_OPTION_DUMP_EVERYTHING))\n+    {\n+      ADD_ARG (\"-fdump-tree-all\");\n+      ADD_ARG (\"-fdump-rtl-all\");\n+      ADD_ARG (\"-fdump-ipa-all\");\n+    }\n+#undef ADD_ARG\n+}\n+\n /* Top-level hook for playing back a recording context.\n \n    This plays back m_recording_ctxt, and, if no errors"}, {"sha": "5ffc8690a89cb61002d0d3a6dbe531e0039b056c", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f50ee3cbed51591b9297c804a86b9c278bb04ec/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f50ee3cbed51591b9297c804a86b9c278bb04ec/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=8f50ee3cbed51591b9297c804a86b9c278bb04ec", "patch": "@@ -226,6 +226,14 @@ class context\n \n   void handle_locations ();\n \n+private:\n+\n+  /* Functions for implementing \"compile\".  */\n+\n+  void\n+  make_fake_args (auto_vec <const char *> *argvec,\n+\t\t  const char *ctxt_progname);\n+\n private:\n   ::gcc::jit::recording::context *m_recording_ctxt;\n "}]}