{"sha": "96194a07bdbc57dd9733892a791d87dbe25f0802", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYxOTRhMDdiZGJjNTdkZDk3MzM4OTJhNzkxZDg3ZGJlMjVmMDgwMg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-08-14T19:25:41Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-08-14T19:25:41Z"}, "message": "Diagnose mismatches between array and scalar new and delete [PR101791].\n\nResolves:\nPR middle-end/101791 - missing warning on a mismatch between scalar and array forms of new and delete\n\ngcc/ChangeLog:\n\n\tPR middle-end/101791\n\t* gimple-ssa-warn-access.cc (new_delete_mismatch_p): Use new argument\n\tto valid_new_delete_pair_p.\n\t* tree.c (valid_new_delete_pair_p): Add argument.\n\t* tree.h (valid_new_delete_pair_p): Same.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/101791\n\t* g++.dg/warn/Wmismatched-new-delete-6.C: New test.\n\t* g++.dg/warn/Wmismatched-new-delete-7.C: New test.", "tree": {"sha": "c3414d3d61a97e5d4d9dc33abe0f09149245f760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3414d3d61a97e5d4d9dc33abe0f09149245f760"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96194a07bdbc57dd9733892a791d87dbe25f0802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96194a07bdbc57dd9733892a791d87dbe25f0802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96194a07bdbc57dd9733892a791d87dbe25f0802", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96194a07bdbc57dd9733892a791d87dbe25f0802/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "240f07805db27cfc746276039c5edccb4c031070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/240f07805db27cfc746276039c5edccb4c031070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/240f07805db27cfc746276039c5edccb4c031070"}], "stats": {"total": 290, "additions": 284, "deletions": 6}, "files": [{"sha": "93f43b711e2ff261df27440ede7e8d84a5989441", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96194a07bdbc57dd9733892a791d87dbe25f0802/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96194a07bdbc57dd9733892a791d87dbe25f0802/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=96194a07bdbc57dd9733892a791d87dbe25f0802", "patch": "@@ -1782,9 +1782,14 @@ new_delete_mismatch_p (tree new_decl, tree delete_decl)\n \n   /* valid_new_delete_pair_p() returns a conservative result (currently\n      it only handles global operators).  A true result is reliable but\n-     a false result doesn't necessarily mean the operators don't match.  */\n-  if (valid_new_delete_pair_p (new_name, delete_name))\n+     a false result doesn't necessarily mean the operators don't match\n+     unless CERTAIN is set.  */\n+  bool certain;\n+  if (valid_new_delete_pair_p (new_name, delete_name, &certain))\n     return false;\n+  /* CERTAIN is set when the negative result is certain.  */\n+  if (certain)\n+    return true;\n \n   /* For anything not handled by valid_new_delete_pair_p() such as member\n      operators compare the individual demangled components of the mangled"}, {"sha": "e19d00058b30e9a78931721b2587b650bb635744", "filename": "gcc/testsuite/g++.dg/warn/Wmismatched-new-delete-6.C", "status": "added", "additions": 158, "deletions": 0, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96194a07bdbc57dd9733892a791d87dbe25f0802/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-new-delete-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96194a07bdbc57dd9733892a791d87dbe25f0802/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-new-delete-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-new-delete-6.C?ref=96194a07bdbc57dd9733892a791d87dbe25f0802", "patch": "@@ -0,0 +1,158 @@\n+/* PR middle-end/101791 - missing warning on a mismatch between scalar\n+   and array forms of new and delete\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+namespace std\n+{\n+#if __cplusplus >= 201703L\n+enum class align_val_t: size_t { };\n+#else\n+enum align_val_t { };\n+#endif\n+\n+struct nothrow_t { };\n+const nothrow_t nothrow = { };\n+\n+}\n+\n+void* operator new (size_t);\n+void* operator new (size_t, std::align_val_t);\n+void* operator new (size_t, std::nothrow_t) throw ();\n+void* operator new (size_t, std::align_val_t, std::nothrow_t) throw ();\n+\n+void* operator new[] (size_t);\n+void* operator new[] (size_t, std::align_val_t);\n+void* operator new[] (size_t, std::nothrow_t) throw ();\n+void* operator new[] (size_t, std::align_val_t, std::nothrow_t) throw ();\n+\n+void operator delete (void*);\n+void operator delete (void*, size_t);\n+void operator delete (void*, std::align_val_t);\n+void operator delete (void*, size_t, std::align_val_t);\n+void operator delete (void*, std::nothrow_t) throw ();\n+void operator delete (void*, std::align_val_t, std::nothrow_t) throw ();\n+\n+void operator delete[] (void*);\n+void operator delete[] (void*, size_t);\n+void operator delete[] (void*, std::align_val_t);\n+void operator delete[] (void*, size_t, std::align_val_t);\n+void operator delete[] (void*, std::nothrow_t) throw ();\n+void operator delete[] (void*, std::align_val_t, std::nothrow_t) throw ();\n+\n+\n+void sink (void*, ...);\n+\n+\n+void nowarn_scalar_scalar ()\n+{\n+  {\n+    int *p = new int;\n+    sink (p);\n+    delete p;\n+  }\n+\n+  {\n+    int *p = new (std::align_val_t (8)) int;\n+    sink (p);\n+    delete p;\n+  }\n+\n+  {\n+    int *p = new (std::nothrow) int;\n+    sink (p);\n+    delete p;\n+  }\n+\n+  {\n+    int *p = new (std::align_val_t (8), std::nothrow) int;\n+    sink (p);\n+    delete p;\n+  }\n+}\n+\n+void nowarn_array_array ()\n+{\n+  {\n+    int *p = new int[__LINE__];\n+    sink (p);\n+    delete[] p;\n+  }\n+\n+  {\n+    int *p = new (std::align_val_t (8)) int[__LINE__];\n+    sink (p);\n+    delete[] p;\n+  }\n+\n+  {\n+    int *p = new (std::nothrow) int[__LINE__];\n+    sink (p);\n+    delete[] p;\n+  }\n+\n+  {\n+    int *p = new (std::align_val_t (8), std::nothrow) int[__LINE__];\n+    sink (p);\n+    delete[] p;\n+  }\n+}\n+\n+\n+\n+void nowarn_scalar_array ()\n+{\n+  {\n+    int *p = new int;   // { dg-message \"returned from\" }\n+    sink (p);\n+    delete[] p;         // { dg-warning \"\\\\\\[-Wmismatched-new-delete\" }\n+  }\n+\n+  {\n+    int *p = new (std::align_val_t (8)) int;\n+    sink (p);\n+    delete[] p;         // { dg-warning \"\\\\\\[-Wmismatched-new-delete\" }\n+  }\n+\n+  {\n+    int *p = new (std::nothrow) int;\n+    sink (p);\n+    delete[] p;         // { dg-warning \"\\\\\\[-Wmismatched-new-delete\" }\n+  }\n+\n+  {\n+    int *p = new (std::align_val_t (8), std::nothrow) int;\n+    sink (p);\n+    delete[] p;         // { dg-warning \"\\\\\\[-Wmismatched-new-delete\" }\n+  }\n+}\n+\n+\n+void nowarn_array_scalar ()\n+{\n+  {\n+    int *p = new int[__LINE__];\n+    sink (p);\n+    delete p;           // { dg-warning \"\\\\\\[-Wmismatched-new-delete\" }\n+  }\n+\n+  {\n+    int *p = new (std::align_val_t (8)) int[__LINE__];\n+    sink (p);\n+    delete p;           // { dg-warning \"\\\\\\[-Wmismatched-new-delete\" }\n+  }\n+\n+  {\n+    int *p = new (std::nothrow) int[__LINE__];\n+    sink (p);\n+    delete p;           // { dg-warning \"\\\\\\[-Wmismatched-new-delete\" }\n+  }\n+\n+  {\n+    int *p = new (std::align_val_t (8), std::nothrow) int[__LINE__];\n+    sink (p);\n+    delete p;           // { dg-warning \"\\\\\\[-Wmismatched-new-delete\" }\n+  }\n+}"}, {"sha": "67a5354b91d769c7cbdfa7d1fbdbe6aa172a3718", "filename": "gcc/testsuite/g++.dg/warn/Wmismatched-new-delete-7.C", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96194a07bdbc57dd9733892a791d87dbe25f0802/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-new-delete-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96194a07bdbc57dd9733892a791d87dbe25f0802/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-new-delete-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWmismatched-new-delete-7.C?ref=96194a07bdbc57dd9733892a791d87dbe25f0802", "patch": "@@ -0,0 +1,91 @@\n+/* PR middle-end/101791 - missing warning on a mismatch between scalar\n+   and array forms of new and delete\n+   Verify that likely safe calls to technically mismatched member operator\n+   new and delete are not diagnosed.  This test might need to be adjusted\n+   if it turns out the assumptions GCC makes are overly conservative.\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+namespace std\n+{\n+#if __cplusplus >= 201703L\n+enum class align_val_t: size_t { };\n+#else\n+enum align_val_t { };\n+#endif\n+\n+struct nothrow_t { };\n+const nothrow_t nothrow = { };\n+\n+}\n+\n+void sink (void*, ...);\n+\n+struct X { } x;\n+struct Y { } y;\n+\n+struct A\n+{\n+  void* operator new (size_t);\n+  void* operator new (size_t, std::align_val_t);\n+\n+  void* operator new (size_t, X);\n+  void* operator new (size_t, Y);\n+\n+  void* operator new (size_t, std::align_val_t, X);\n+  void* operator new (size_t, std::nothrow_t, Y);\n+\n+  /* A single operator delete callable on the result of calls to any\n+     of the operator new overloads above (this may be too optimistic).  */\n+  void operator delete (void*);\n+};\n+\n+A* nowarn_align ()\n+{\n+  /* The following are likely okay given A's definition above but would\n+     not be if A also defined an align_val_t overload of operator delete.  */\n+  A *p = new (std::align_val_t (8)) A;\n+  delete p;\n+\n+  return new (std::align_val_t (16)) A;\n+}\n+\n+A* nowarn_X ()\n+{\n+  /* The following are also likely okay given A's definition above but\n+     also would not be if A also defined an overload of operator delete\n+     for X.  */\n+  A *p = new (x) A;\n+  delete p;\n+  return new (x) A;\n+}\n+\n+A* nowarn_Y ()\n+{\n+  // Same as above.\n+  A *p = new (y) A;\n+  delete p;\n+  return new (y) A;\n+}\n+\n+\n+A* nowarn_align_X ()\n+{\n+  // Same as above.\n+  A *p = new (std::align_val_t (32), x) A;\n+  delete p;\n+\n+  return new (std::align_val_t (64), x) A;\n+}\n+\n+\n+A* nowarn_nothrow_Y ()\n+{\n+  // Same as above.\n+  A *p = new (std::nothrow, y) A;\n+  delete p;\n+  return new (std::nothrow, y) A;\n+}\n+"}, {"sha": "6ec8a9738c803749da84632798d73254d263e43e", "filename": "gcc/tree.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96194a07bdbc57dd9733892a791d87dbe25f0802/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96194a07bdbc57dd9733892a791d87dbe25f0802/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=96194a07bdbc57dd9733892a791d87dbe25f0802", "patch": "@@ -14314,17 +14314,28 @@ verify_type_context (location_t loc, type_context_kind context,\n \t  || targetm.verify_type_context (loc, context, type, silent_p));\n }\n \n-/* Return that NEW_ASM and DELETE_ASM name a valid pair of new and\n-   delete operators.  */\n+/* Return true if NEW_ASM and DELETE_ASM name a valid pair of new and\n+   delete operators.  Return false if they may or may not name such\n+   a pair and, when nonnull, set *PCERTAIN to true if they certainly\n+   do not.  */\n \n bool\n-valid_new_delete_pair_p (tree new_asm, tree delete_asm)\n+valid_new_delete_pair_p (tree new_asm, tree delete_asm,\n+\t\t\t bool *pcertain /* = NULL */)\n {\n+  bool certain;\n+  if (!pcertain)\n+    pcertain = &certain;\n+\n   const char *new_name = IDENTIFIER_POINTER (new_asm);\n   const char *delete_name = IDENTIFIER_POINTER (delete_asm);\n   unsigned int new_len = IDENTIFIER_LENGTH (new_asm);\n   unsigned int delete_len = IDENTIFIER_LENGTH (delete_asm);\n \n+  /* The following failures are due to invalid names so they're not\n+     considered certain mismatches.  */\n+  *pcertain = false;\n+\n   if (new_len < 5 || delete_len < 6)\n     return false;\n   if (new_name[0] == '_')\n@@ -14337,11 +14348,19 @@ valid_new_delete_pair_p (tree new_asm, tree delete_asm)\n     ++delete_name, --delete_len;\n   if (new_len < 4 || delete_len < 5)\n     return false;\n+\n+  /* The following failures are due to names of user-defined operators\n+     so they're also not considered certain mismatches.  */\n+\n   /* *_len is now just the length after initial underscores.  */\n   if (new_name[0] != 'Z' || new_name[1] != 'n')\n     return false;\n   if (delete_name[0] != 'Z' || delete_name[1] != 'd')\n     return false;\n+\n+  /* The following failures are certain mismatches.  */\n+  *pcertain = true;\n+\n   /* _Znw must match _Zdl, _Zna must match _Zda.  */\n   if ((new_name[2] != 'w' || delete_name[2] != 'l')\n       && (new_name[2] != 'a' || delete_name[2] != 'a'))\n@@ -14380,6 +14399,9 @@ valid_new_delete_pair_p (tree new_asm, tree delete_asm)\n \t  && !memcmp (delete_name + 5, \"St11align_val_tRKSt9nothrow_t\", 29))\n \treturn true;\n     }\n+\n+  /* The negative result is conservative.  */\n+  *pcertain = false;\n   return false;\n }\n "}, {"sha": "a26500dca61248d39b2abcddcf2fd53c1e3518e3", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96194a07bdbc57dd9733892a791d87dbe25f0802/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96194a07bdbc57dd9733892a791d87dbe25f0802/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=96194a07bdbc57dd9733892a791d87dbe25f0802", "patch": "@@ -5406,7 +5406,9 @@ extern bool gimple_canonical_types_compatible_p (const_tree, const_tree,\n extern bool type_with_interoperable_signedness (const_tree);\n extern bitmap get_nonnull_args (const_tree);\n extern int get_range_pos_neg (tree);\n-extern bool valid_new_delete_pair_p (tree, tree);\n+\n+/* Return true for a valid pair of new and delete operators.  */\n+extern bool valid_new_delete_pair_p (tree, tree, bool * = NULL);\n \n /* Return simplified tree code of type that is used for canonical type\n    merging.  */"}]}