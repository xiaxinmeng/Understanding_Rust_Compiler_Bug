{"sha": "625a9766c94c89603c365932fb347075fc6fd413", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI1YTk3NjZjOTRjODk2MDNjMzY1OTMyZmIzNDcwNzVmYzZmZDQxMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-10-31T16:26:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-10-31T16:26:43Z"}, "message": "builtins.c (fold_builtin_atomic_always_lock_free): Use CONVERT_EXPR_P, CONVERT_EXPR_CODE_P and CASE_CONVERT where approprate.\n\n2014-10-31  Richard Biener  <rguenther@suse.de>\n\n\t* builtins.c (fold_builtin_atomic_always_lock_free): Use\n\tCONVERT_EXPR_P, CONVERT_EXPR_CODE_P and CASE_CONVERT where\n\tapproprate.\n\t(fold_builtin_expect): Likewise.\n\t(integer_valued_real_p): Likewise.\n\t* cfgexpand.c (expand_debug_expr): Likewise.\n\t* ipa-inline-analysis.c (eliminated_by_inlining_prob): Likewise.\n\t(find_foldable_builtin_expect): Likewise.\n\t* trans-mem.c (thread_private_new_memory): Likewise.\n\t* tree-affine.c (aff_combination_expand): Likewise.\n\t* tree-data-ref.c (initialize_matrix_A): Likewise.\n\t* tree-inline.c (copy_bb): Likewise.\n\t* tree-pretty-print.c (dump_function_name): Likewise.\n\t(print_call_name): Likewise.\n\t* tree-ssa-forwprop.c (constant_pointer_difference): Likewise.\n\t* tree-ssa-math-opts.c (find_bswap_or_nop_1): Likewise.\n\t* tree-vect-generic.c (expand_vector_operations_1): Likewise.\n\t* tree-vect-patterns.c (vect_handle_widen_op_by_const): Likewise.\n\t(vect_recog_widen_mult_pattern): Likewise.\n\t(vect_operation_fits_smaller_type): Likewise.\n\t* tree-vrp.c (find_assert_locations_1): Likewise.\n\t* tree-ssa-dom.c (initialize_hash_element): Canonicalize\n\tconverts to NOP_EXPR.\n\nFrom-SVN: r216982", "tree": {"sha": "c1a8af45fc037243d4f279cb9922b38cffaae47e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1a8af45fc037243d4f279cb9922b38cffaae47e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/625a9766c94c89603c365932fb347075fc6fd413", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/625a9766c94c89603c365932fb347075fc6fd413", "html_url": "https://github.com/Rust-GCC/gccrs/commit/625a9766c94c89603c365932fb347075fc6fd413", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/625a9766c94c89603c365932fb347075fc6fd413/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5cec2fe71b243a3a4e76ef41b2ed6b36a3d543c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5cec2fe71b243a3a4e76ef41b2ed6b36a3d543c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5cec2fe71b243a3a4e76ef41b2ed6b36a3d543c"}], "stats": {"total": 72, "additions": 47, "deletions": 25}, "files": [{"sha": "2d6824d8d53eb76c28422d24e02392bee7a34465", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625a9766c94c89603c365932fb347075fc6fd413/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625a9766c94c89603c365932fb347075fc6fd413/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=625a9766c94c89603c365932fb347075fc6fd413", "patch": "@@ -1,3 +1,29 @@\n+2014-10-31  Richard Biener  <rguenther@suse.de>\n+\n+\t* builtins.c (fold_builtin_atomic_always_lock_free): Use\n+\tCONVERT_EXPR_P, CONVERT_EXPR_CODE_P and CASE_CONVERT where\n+\tapproprate.\n+\t(fold_builtin_expect): Likewise.\n+\t(integer_valued_real_p): Likewise.\n+\t* cfgexpand.c (expand_debug_expr): Likewise.\n+\t* ipa-inline-analysis.c (eliminated_by_inlining_prob): Likewise.\n+\t(find_foldable_builtin_expect): Likewise.\n+\t* trans-mem.c (thread_private_new_memory): Likewise.\n+\t* tree-affine.c (aff_combination_expand): Likewise.\n+\t* tree-data-ref.c (initialize_matrix_A): Likewise.\n+\t* tree-inline.c (copy_bb): Likewise.\n+\t* tree-pretty-print.c (dump_function_name): Likewise.\n+\t(print_call_name): Likewise.\n+\t* tree-ssa-forwprop.c (constant_pointer_difference): Likewise.\n+\t* tree-ssa-math-opts.c (find_bswap_or_nop_1): Likewise.\n+\t* tree-vect-generic.c (expand_vector_operations_1): Likewise.\n+\t* tree-vect-patterns.c (vect_handle_widen_op_by_const): Likewise.\n+\t(vect_recog_widen_mult_pattern): Likewise.\n+\t(vect_operation_fits_smaller_type): Likewise.\n+\t* tree-vrp.c (find_assert_locations_1): Likewise.\n+\t* tree-ssa-dom.c (initialize_hash_element): Canonicalize\n+\tconverts to NOP_EXPR.\n+\n 2014-10-31  Richard Biener  <rguenther@suse.de>\n \n \t* genmatch.c (expr::gen_transform): Use NOP_EXPRs instead of"}, {"sha": "ad3a84e1b762e67b6425fc0d566d7d5f559546fe", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=625a9766c94c89603c365932fb347075fc6fd413", "patch": "@@ -5551,7 +5551,7 @@ fold_builtin_atomic_always_lock_free (tree arg0, tree arg1)\n \t end before anything else has a chance to look at it.  The pointer\n \t parameter at this point is usually cast to a void *, so check for that\n \t and look past the cast.  */\n-      if (TREE_CODE (arg1) == NOP_EXPR && POINTER_TYPE_P (ttype)\n+      if (CONVERT_EXPR_P (arg1) && POINTER_TYPE_P (ttype)\n \t  && VOID_TYPE_P (TREE_TYPE (ttype)))\n \targ1 = TREE_OPERAND (arg1, 0);\n \n@@ -6989,7 +6989,7 @@ fold_builtin_expect (location_t loc, tree arg0, tree arg1, tree arg2)\n   /* Distribute the expected value over short-circuiting operators.\n      See through the cast from truthvalue_type_node to long.  */\n   inner_arg0 = arg0;\n-  while (TREE_CODE (inner_arg0) == NOP_EXPR\n+  while (CONVERT_EXPR_P (inner_arg0)\n \t && INTEGRAL_TYPE_P (TREE_TYPE (inner_arg0))\n \t && INTEGRAL_TYPE_P (TREE_TYPE (TREE_OPERAND (inner_arg0, 0))))\n     inner_arg0 = TREE_OPERAND (inner_arg0, 0);\n@@ -7155,7 +7155,7 @@ integer_valued_real_p (tree t)\n     case REAL_CST:\n       return real_isinteger (TREE_REAL_CST_PTR (t), TYPE_MODE (TREE_TYPE (t)));\n \n-    case NOP_EXPR:\n+    CASE_CONVERT:\n       {\n \ttree type = TREE_TYPE (TREE_OPERAND (t, 0));\n \tif (TREE_CODE (type) == INTEGER_TYPE)"}, {"sha": "05827690ab4b59668e4d66caef84254c12e2d98e", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=625a9766c94c89603c365932fb347075fc6fd413", "patch": "@@ -3882,8 +3882,7 @@ expand_debug_expr (tree exp)\n \n     adjust_mode:\n     case PAREN_EXPR:\n-    case NOP_EXPR:\n-    case CONVERT_EXPR:\n+    CASE_CONVERT:\n       {\n \tinner_mode = GET_MODE (op0);\n "}, {"sha": "eb1c6ec2d0def83313c10a989b5b812bcf57b5ac", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=625a9766c94c89603c365932fb347075fc6fd413", "patch": "@@ -1617,8 +1617,7 @@ eliminated_by_inlining_prob (gimple stmt)\n          and stores to return value or parameters are often free after\n          inlining dua to SRA and further combining.\n          Assume that half of statements goes away.  */\n-      if (rhs_code == CONVERT_EXPR\n-\t  || rhs_code == NOP_EXPR\n+      if (CONVERT_EXPR_CODE_P (rhs_code)\n \t  || rhs_code == VIEW_CONVERT_EXPR\n \t  || rhs_code == ADDR_EXPR\n \t  || gimple_assign_rhs_class (stmt) == GIMPLE_SINGLE_RHS)\n@@ -2377,7 +2376,7 @@ find_foldable_builtin_expect (basic_block bb)\n                     match = true;\n                     done = true;\n                     break;\n-                  case NOP_EXPR:\n+                  CASE_CONVERT:\n                     break;\n                   default:\n                     done = true;"}, {"sha": "9899e7b54a89fa6637285c6cf524c6c4a6e1b2b5", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=625a9766c94c89603c365932fb347075fc6fd413", "patch": "@@ -1415,7 +1415,7 @@ thread_private_new_memory (basic_block entry_block, tree x)\n \t  else if (code == POINTER_PLUS_EXPR)\n \t    x = gimple_assign_rhs1 (stmt);\n \t  /* x = (cast*) foo ==> foo */\n-\t  else if (code == VIEW_CONVERT_EXPR || code == NOP_EXPR)\n+\t  else if (code == VIEW_CONVERT_EXPR || CONVERT_EXPR_CODE_P (code))\n \t    x = gimple_assign_rhs1 (stmt);\n \t  /* x = c ? op1 : op2 == > op1 or op2 just like a PHI */\n \t  else if (code == COND_EXPR)"}, {"sha": "7a0b89edf71f3188a1a535ef0ef853618b6f6d88", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=625a9766c94c89603c365932fb347075fc6fd413", "patch": "@@ -648,7 +648,7 @@ aff_combination_expand (aff_tree *comb ATTRIBUTE_UNUSED,\n       type = TREE_TYPE (e);\n       name = e;\n       /* Look through some conversions.  */\n-      if (TREE_CODE (e) == NOP_EXPR\n+      if (CONVERT_EXPR_P (e)\n           && (TYPE_PRECISION (type)\n \t      >= TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (e, 0)))))\n \tname = TREE_OPERAND (e, 0);"}, {"sha": "4eac19297e5d1948ce873bae173f2bf10e3205f1", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=625a9766c94c89603c365932fb347075fc6fd413", "patch": "@@ -2100,7 +2100,7 @@ initialize_matrix_A (lambda_matrix A, tree chrec, unsigned index, int mult)\n \treturn chrec_fold_op (TREE_CODE (chrec), chrec_type (chrec), op0, op1);\n       }\n \n-    case NOP_EXPR:\n+    CASE_CONVERT:\n       {\n \ttree op = initialize_matrix_A (A, TREE_OPERAND (chrec, 0), index, mult);\n \treturn chrec_convert (chrec_type (chrec), op, NULL);"}, {"sha": "bf130d1824bcd9012c7f0215da131c155f4210b9", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=625a9766c94c89603c365932fb347075fc6fd413", "patch": "@@ -1686,7 +1686,7 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale,\n       /* With return slot optimization we can end up with\n \t non-gimple (foo *)&this->m, fix that here.  */\n       if (is_gimple_assign (stmt)\n-\t  && gimple_assign_rhs_code (stmt) == NOP_EXPR\n+\t  && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (stmt))\n \t  && !is_gimple_val (gimple_assign_rhs1 (stmt)))\n \t{\n \t  tree new_rhs;"}, {"sha": "2211309ebb7c5e094a2bfcce60ebc7f325082505", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=625a9766c94c89603c365932fb347075fc6fd413", "patch": "@@ -225,7 +225,7 @@ dump_decl_name (pretty_printer *buffer, tree node, int flags)\n static void\n dump_function_name (pretty_printer *buffer, tree node, int flags)\n {\n-  if (TREE_CODE (node) == NOP_EXPR)\n+  if (CONVERT_EXPR_P (node))\n     node = TREE_OPERAND (node, 0);\n   if (DECL_NAME (node) && (flags & TDF_ASMNAME) == 0)\n     pp_string (buffer, lang_hooks.decl_printable_name (node, 1));\n@@ -3266,7 +3266,7 @@ print_call_name (pretty_printer *buffer, tree node, int flags)\n \n     case ADDR_EXPR:\n     case INDIRECT_REF:\n-    case NOP_EXPR:\n+    CASE_CONVERT:\n       op0 = TREE_OPERAND (op0, 0);\n       goto again;\n "}, {"sha": "191d3e0c14664b6a6c2fe396fd736372775da5f4", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=625a9766c94c89603c365932fb347075fc6fd413", "patch": "@@ -306,7 +306,7 @@ initialize_hash_element (gimple stmt, tree lhs,\n \t  expr->kind = EXPR_UNARY;\n \t  expr->type = TREE_TYPE (gimple_assign_lhs (stmt));\n \t  if (CONVERT_EXPR_CODE_P (subcode))\n-\t    subcode = CONVERT_EXPR;\n+\t    subcode = NOP_EXPR;\n \t  expr->ops.unary.op = subcode;\n \t  expr->ops.unary.opnd = gimple_assign_rhs1 (stmt);\n \t  break;"}, {"sha": "3267bb9a3db03097fa179528ff3cd2556d1333f8", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=625a9766c94c89603c365932fb347075fc6fd413", "patch": "@@ -1487,7 +1487,7 @@ constant_pointer_difference (tree p1, tree p2)\n \t      off = size_binop (PLUS_EXPR, off, gimple_assign_rhs2 (stmt));\n \t      p = gimple_assign_rhs1 (stmt);\n \t    }\n-\t  else if (code == ADDR_EXPR || code == NOP_EXPR)\n+\t  else if (code == ADDR_EXPR || CONVERT_EXPR_CODE_P (code))\n \t    p = gimple_assign_rhs1 (stmt);\n \t  else\n \t    break;"}, {"sha": "295e2b5610188b1c069fd04b20e6bbdb7d18921a", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=625a9766c94c89603c365932fb347075fc6fd413", "patch": "@@ -1867,8 +1867,7 @@ find_bswap_or_nop_1 (gimple stmt, struct symbolic_number *n, int limit)\n \t  && code != RSHIFT_EXPR\n \t  && code != LROTATE_EXPR\n \t  && code != RROTATE_EXPR\n-\t  && code != NOP_EXPR\n-\t  && code != CONVERT_EXPR)\n+\t  && !CONVERT_EXPR_CODE_P (code))\n \treturn NULL;\n \n       source_stmt1 = find_bswap_or_nop_1 (rhs1_stmt, n, limit - 1);"}, {"sha": "d9445a4fb66f61c2a0254cb10f16516285c70e5e", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=625a9766c94c89603c365932fb347075fc6fd413", "patch": "@@ -1449,14 +1449,12 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n   if (TREE_CODE (type) != VECTOR_TYPE)\n     return;\n \n-  if (code == NOP_EXPR\n+  if (CONVERT_EXPR_CODE_P (code)\n       || code == FLOAT_EXPR\n       || code == FIX_TRUNC_EXPR\n       || code == VIEW_CONVERT_EXPR)\n     return;\n \n-  gcc_assert (code != CONVERT_EXPR);\n-\n   /* The signedness is determined from input argument.  */\n   if (code == VEC_UNPACK_FLOAT_HI_EXPR\n       || code == VEC_UNPACK_FLOAT_LO_EXPR)"}, {"sha": "8478dfcb7150c7e01f6879d55d699c7cc3f888bf", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=625a9766c94c89603c365932fb347075fc6fd413", "patch": "@@ -747,7 +747,7 @@ vect_handle_widen_op_by_const (gimple stmt, enum tree_code code,\n       new_stmt = STMT_VINFO_RELATED_STMT (vinfo_for_stmt (def_stmt));\n       /* Check if the already created pattern stmt is what we need.  */\n       if (!is_gimple_assign (new_stmt)\n-          || gimple_assign_rhs_code (new_stmt) != NOP_EXPR\n+          || !CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (new_stmt))\n           || TREE_TYPE (gimple_assign_lhs (new_stmt)) != new_type)\n         return false;\n \n@@ -952,7 +952,7 @@ vect_recog_widen_mult_pattern (vec<gimple> *stmts,\n \n       use_stmt = vect_single_imm_use (last_stmt);\n       if (!use_stmt || !is_gimple_assign (use_stmt)\n-\t  || gimple_assign_rhs_code (use_stmt) != NOP_EXPR)\n+\t  || !CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (use_stmt)))\n         return NULL;\n \n       use_lhs = gimple_assign_lhs (use_stmt);\n@@ -1429,7 +1429,7 @@ vect_operation_fits_smaller_type (gimple stmt, tree def, tree *new_type,\n               new_stmt = STMT_VINFO_RELATED_STMT (vinfo_for_stmt (def_stmt));\n               /* Check if the already created pattern stmt is what we need.  */\n               if (!is_gimple_assign (new_stmt)\n-                  || gimple_assign_rhs_code (new_stmt) != NOP_EXPR\n+                  || !CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (new_stmt))\n                   || TREE_TYPE (gimple_assign_lhs (new_stmt)) != interm_type)\n                 return false;\n "}, {"sha": "2264242b9ad1cdb29be5da04b431bbb1f5ee3c0a", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625a9766c94c89603c365932fb347075fc6fd413/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=625a9766c94c89603c365932fb347075fc6fd413", "patch": "@@ -6004,7 +6004,8 @@ find_assert_locations_1 (basic_block bb, sbitmap live)\n \t\t  gimple def_stmt = SSA_NAME_DEF_STMT (t);\n \n \t\t  while (is_gimple_assign (def_stmt)\n-\t\t\t && gimple_assign_rhs_code (def_stmt)  == NOP_EXPR\n+\t\t\t && CONVERT_EXPR_CODE_P\n+\t\t\t     (gimple_assign_rhs_code (def_stmt))\n \t\t\t && TREE_CODE\n \t\t\t     (gimple_assign_rhs1 (def_stmt)) == SSA_NAME\n \t\t\t && POINTER_TYPE_P"}]}