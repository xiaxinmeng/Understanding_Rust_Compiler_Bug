{"sha": "b47f0044ab61a5995966a5af9d65da24d4490627", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ3ZjAwNDRhYjYxYTU5OTU5NjZhNWFmOWQ2NWRhMjRkNDQ5MDYyNw==", "commit": {"author": {"name": "Chris Fairles", "email": "cfairles@gcc.gnu.org", "date": "2009-02-09T00:13:47Z"}, "committer": {"name": "Chris Fairles", "email": "cfairles@gcc.gnu.org", "date": "2009-02-09T00:13:47Z"}, "message": "thread (thread<>::thread(_Callable)): Explicitly use _Callable as template argument for _M_make_shared_data.\n\n2009-02-08  Chris Fairles  <cfairles@gcc.gnu.org>\n\n        * include/std/thread (thread<>::thread(_Callable)): Explicitly use\n        _Callable as template argument for _M_make_shared_data.\n        * testsuite/30_threads/thread/cons/6.cc: New.\n        * testsuite/30_threads/thread/cons/7.cc: New.\n        * testsuite/30_threads/thread/cons/8.cc: New.\n\nFrom-SVN: r144023", "tree": {"sha": "a3c8c19d13e3f5132ebff7905f0d2eaf8f965e7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3c8c19d13e3f5132ebff7905f0d2eaf8f965e7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b47f0044ab61a5995966a5af9d65da24d4490627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47f0044ab61a5995966a5af9d65da24d4490627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b47f0044ab61a5995966a5af9d65da24d4490627", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b47f0044ab61a5995966a5af9d65da24d4490627/comments", "author": null, "committer": null, "parents": [{"sha": "9a58d4d27c50e04b08d5e5d9f39da489403f0987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a58d4d27c50e04b08d5e5d9f39da489403f0987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a58d4d27c50e04b08d5e5d9f39da489403f0987"}], "stats": {"total": 240, "additions": 239, "deletions": 1}, "files": [{"sha": "d80ab82a17ae368eeba605b32877511a797b70b4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47f0044ab61a5995966a5af9d65da24d4490627/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47f0044ab61a5995966a5af9d65da24d4490627/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b47f0044ab61a5995966a5af9d65da24d4490627", "patch": "@@ -1,3 +1,11 @@\n+2009-02-08  Chris Fairles  <cfairles@gcc.gnu.org>\n+\n+\t* include/std/thread (thread<>::thread(_Callable)): Explicitly use\n+\t_Callable as template argument for _M_make_shared_data.\n+\t* testsuite/30_threads/thread/cons/6.cc: New.\n+\t* testsuite/30_threads/thread/cons/7.cc: New.\n+\t* testsuite/30_threads/thread/cons/8.cc: New.\n+\n 2009-02-07  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/30_threads/thread/member: To.."}, {"sha": "3704192913f66f59c5fa04637951035efc9d849c", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47f0044ab61a5995966a5af9d65da24d4490627/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47f0044ab61a5995966a5af9d65da24d4490627/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=b47f0044ab61a5995966a5af9d65da24d4490627", "patch": "@@ -128,7 +128,7 @@ namespace std\n \n     template<typename _Callable>\n       explicit thread(_Callable __f)\n-      : _M_data(_M_make_shared_data(__f))\n+      : _M_data(_M_make_shared_data<_Callable>(__f))\n       { _M_start_thread(); }\n \n     template<typename _Callable, typename... _Args>"}, {"sha": "0a6d7470fa966de9cad5065dbf40cf467bd6ab3d", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/6.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47f0044ab61a5995966a5af9d65da24d4490627/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47f0044ab61a5995966a5af9d65da24d4490627/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F6.cc?ref=b47f0044ab61a5995966a5af9d65da24d4490627", "patch": "@@ -0,0 +1,70 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+bool f_was_called = false;\n+\n+void f()\n+{\n+  f_was_called = true;\n+}\n+\n+void test06()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+  {\n+    std::thread t(f);\n+    t.join();\n+    VERIFY( f_was_called );\n+  }\n+  catch (const std::system_error&)\n+  {\n+    VERIFY( false );\n+  }\n+  catch (...)\n+  {\n+    VERIFY( false );\n+  }\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "fafa72ac2779d6a0a56f91fe97d0e0e203f2076a", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/7.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47f0044ab61a5995966a5af9d65da24d4490627/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47f0044ab61a5995966a5af9d65da24d4490627/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F7.cc?ref=b47f0044ab61a5995966a5af9d65da24d4490627", "patch": "@@ -0,0 +1,80 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+bool functor_was_called = false;\n+\n+struct copyable\n+{\n+  copyable() = default;\n+  ~copyable() = default;\n+  copyable(const copyable& c) = default;\n+  copyable& operator=(const copyable&) = default;\n+\n+  void operator()() const\n+  {\n+    functor_was_called = true;\n+  }\n+};\n+\n+void test07()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+    {\n+      copyable c;\n+      copyable& rc = c;\n+      std::thread t1(rc);\n+      t1.join();\n+      VERIFY( functor_was_called );\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "8c6b2e1f92132fdbc1627a692eab04a2a347f7f9", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/8.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b47f0044ab61a5995966a5af9d65da24d4490627/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b47f0044ab61a5995966a5af9d65da24d4490627/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F8.cc?ref=b47f0044ab61a5995966a5af9d65da24d4490627", "patch": "@@ -0,0 +1,80 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+bool functor_was_called = false;\n+\n+struct moveable\n+{\n+  moveable() = default;\n+  ~moveable() = default;\n+  moveable(const moveable& c) = delete;\n+  moveable& operator=(const moveable&) = delete;\n+  moveable(moveable&&) { }\n+\n+  void operator()() const\n+  {\n+    functor_was_called = true;\n+  }\n+};\n+\n+void test08()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+    {\n+      moveable m;\n+      std::thread t1(std::move(m));\n+      t1.join();\n+      VERIFY( functor_was_called );\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test08();\n+  return 0;\n+}"}]}