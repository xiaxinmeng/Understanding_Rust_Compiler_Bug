{"sha": "650fcd0729e2fcf4df28a46a6de4bc748724e2b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUwZmNkMDcyOWUyZmNmNGRmMjhhNDZhNmRlNGJjNzQ4NzI0ZTJiMQ==", "commit": {"author": {"name": "Lee Millward", "email": "lee.millward@codesourcery.com", "date": "2006-10-12T20:02:53Z"}, "committer": {"name": "Lee Millward", "email": "lmillward@gcc.gnu.org", "date": "2006-10-12T20:02:53Z"}, "message": "re PR c++/27961 (ICE on invalid template declaration)\n\n       PR c++/27961\n       * decl.c (start_decl): Return error_mark_node if a\n       function is initialized like a variable.\n       (check_var_type): If a variable of field is declared void,\n       set the type to error_mark_node.\n       (grokdeclarator): Check the return type of check_var_type.\n       * class.c (finish_struct_1): Robustify.\n\n       * g++.dg/template/crash60.C: New test.\n       * g++.dg/other/large-size-array.C: Adjust error markers.\n       * g++.dg/parse/crash27.C: Likewise.\n       * g++.dg/template/crash1.C: Likewise.\n\nFrom-SVN: r117671", "tree": {"sha": "9d618cd33c15c8d8e4b84231544bd954f4ad8229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d618cd33c15c8d8e4b84231544bd954f4ad8229"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/650fcd0729e2fcf4df28a46a6de4bc748724e2b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650fcd0729e2fcf4df28a46a6de4bc748724e2b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/650fcd0729e2fcf4df28a46a6de4bc748724e2b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650fcd0729e2fcf4df28a46a6de4bc748724e2b1/comments", "author": null, "committer": null, "parents": [{"sha": "dc0aeb60698a2ec7ece635ea3378ba4961694976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc0aeb60698a2ec7ece635ea3378ba4961694976", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc0aeb60698a2ec7ece635ea3378ba4961694976"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "4102503dea8dca52c46cd73346f66d6b54781f9b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650fcd0729e2fcf4df28a46a6de4bc748724e2b1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650fcd0729e2fcf4df28a46a6de4bc748724e2b1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=650fcd0729e2fcf4df28a46a6de4bc748724e2b1", "patch": "@@ -1,3 +1,13 @@\n+2006-10-12 Lee Millward <lee.millward@codesourcery.com>\n+\n+       PR c++/27961\n+       * decl.c (start_decl): Return error_mark_node if a\n+       function is initialized like a variable.\n+       (check_var_type): If a variable of field is declared void,\n+       set the type to error_mark_node.\n+       (grokdeclarator): Check the return type of check_var_type.\n+       * class.c (finish_struct_1): Robustify.\n+\t\n 2006-10-11  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/29175"}, {"sha": "e4bf89e3ddca4d17dfb0b4c24f60ff3f5e417c54", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650fcd0729e2fcf4df28a46a6de4bc748724e2b1/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650fcd0729e2fcf4df28a46a6de4bc748724e2b1/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=650fcd0729e2fcf4df28a46a6de4bc748724e2b1", "patch": "@@ -5062,6 +5062,7 @@ finish_struct_1 (tree t)\n      working on.  */\n   for (x = TYPE_FIELDS (t); x; x = TREE_CHAIN (x))\n     if (TREE_CODE (x) == VAR_DECL && TREE_STATIC (x)\n+        && TREE_TYPE (x) != error_mark_node\n \t&& same_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (x)), t))\n       DECL_MODE (x) = TYPE_MODE (t);\n "}, {"sha": "e814c0a4eb87680ab1ae12c385004b2698f22802", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650fcd0729e2fcf4df28a46a6de4bc748724e2b1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650fcd0729e2fcf4df28a46a6de4bc748724e2b1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=650fcd0729e2fcf4df28a46a6de4bc748724e2b1", "patch": "@@ -3854,8 +3854,7 @@ start_decl (const cp_declarator *declarator,\n \n       case FUNCTION_DECL:\n \terror (\"function %q#D is initialized like a variable\", decl);\n-\tinitialized = 0;\n-\tbreak;\n+\treturn error_mark_node;\n \n       default:\n \tbreak;\n@@ -6810,7 +6809,7 @@ check_var_type (tree identifier, tree type)\n \t}\n       else\n \terror (\"variable or field declared void\");\n-      type = integer_type_node;\n+      type = error_mark_node;\n     }\n \n   return type;\n@@ -8178,7 +8177,11 @@ grokdeclarator (const cp_declarator *declarator,\n   /* We don't check parameter types here because we can emit a better\n      error message later.  */\n   if (decl_context != PARM)\n-    type = check_var_type (unqualified_id, type);\n+    {\n+      type = check_var_type (unqualified_id, type);\n+      if (type == error_mark_node)\n+        return error_mark_node;\n+    }\n \n   /* Now create the decl, which may be a VAR_DECL, a PARM_DECL\n      or a FUNCTION_DECL, depending on DECL_CONTEXT and TYPE.  */"}, {"sha": "ce07d43a4f14d90b6b6423a46b0a90719de2faa1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650fcd0729e2fcf4df28a46a6de4bc748724e2b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650fcd0729e2fcf4df28a46a6de4bc748724e2b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=650fcd0729e2fcf4df28a46a6de4bc748724e2b1", "patch": "@@ -1,3 +1,11 @@\n+2006-10-12 Lee Millward <lee.millward@codesourcery.com>\n+\n+       PR c++/27961\n+       * g++.dg/template/crash60.C: New test.\n+       * g++.dg/other/large-size-array.C: Adjust error markers.\n+       * g++.dg/parse/crash27.C: Likewise.\n+       * g++.dg/template/crash1.C: Likewise.\n+\t\n 2006-10-12  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR testsuite/29093"}, {"sha": "1385878d0c88684f4288f8614d57114e5961fc1a", "filename": "gcc/testsuite/g++.dg/other/large-size-array.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650fcd0729e2fcf4df28a46a6de4bc748724e2b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flarge-size-array.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650fcd0729e2fcf4df28a46a6de4bc748724e2b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flarge-size-array.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flarge-size-array.C?ref=650fcd0729e2fcf4df28a46a6de4bc748724e2b1", "patch": "@@ -17,7 +17,7 @@ int\n main (void)\n {\n   int a[DIM][DIM];  /* { dg-error \"size of array 'a' is too large\" } */\n-  return sub (&a[0][0]);\n+  return sub (&a[0][0]);  /* { dg-error \"declared\" } */\n }\n \n "}, {"sha": "1a13f818f11d08e1f8f8a5b7d8276a2ea828e911", "filename": "gcc/testsuite/g++.dg/parse/crash27.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650fcd0729e2fcf4df28a46a6de4bc748724e2b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650fcd0729e2fcf4df28a46a6de4bc748724e2b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash27.C?ref=650fcd0729e2fcf4df28a46a6de4bc748724e2b1", "patch": "@@ -6,4 +6,3 @@ void Dispatcher()\n \t/* { dg-error \"expected type\" \"expected 1\" { target *-*-* } 4 } */\n \t/* { dg-error \"expected `,' before\" \"expected 2\" { target *-*-* } 4 } */\n \t/* { dg-error \"expected `\\\\\\)\" \"expected 3\" { target *-*-* } 4 } */\n-\t/* { dg-error \"expected ',' or\" \"expected 4\" { target *-*-* } 4 } */"}, {"sha": "a500da18bde830497f47afe055fc2e22451baf11", "filename": "gcc/testsuite/g++.dg/template/crash1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650fcd0729e2fcf4df28a46a6de4bc748724e2b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650fcd0729e2fcf4df28a46a6de4bc748724e2b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash1.C?ref=650fcd0729e2fcf4df28a46a6de4bc748724e2b1", "patch": "@@ -13,5 +13,5 @@ class S\n \n template <class I>\n void S::Foo(int (*f)(TYPO&o) ) // { dg-error \"Foo|f|TYPO|o\" }\n-{ // { dg-error \"expected `;'\" }\n+{ \n }"}]}