{"sha": "a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRjZjRiNjQ3Y2QyMzljYzU3ZDg4ZWQ4MmY3MjQzZTdlZmRmNDNmNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-02-07T11:29:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-02-07T11:29:06Z"}, "message": "re PR tree-optimization/79256 (FAIL: gcc.dg/vect/pr25413a.c execution test)\n\n2017-02-07  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/79256\n\tPR middle-end/79278\n\t* builtins.c (get_object_alignment_2): Use min_align_of_type\n\tto extract alignment for MEM_REFs to honor BIGGEST_FIELD_ALIGNMENT\n\tand ADJUST_FIELD_ALIGN.\n\n\t* doc/tm.texi.in (ADJUST_FIELD_ALIGN): Adjust to take additional\n\ttype parameter.\n\t* doc/tm.texi: Regenerate.\n\t* stor-layout.c (layout_decl): Adjust.\n\t(update_alignment_for_field): Likewise.\n\t(place_field): Likewise.\n\t(min_align_of_type): Likewise.\n\t* config/arc/arc.h (ADJUST_FIELD_ALIGN): Adjust.\n\t* config/epiphany/epiphany.h (ADJUST_FIELD_ALIGN): Likewise.\n\t* config/epiphany/epiphany.c (epiphany_adjust_field_align): Likewise.\n\t* config/frv/frv.h (ADJUST_FIELD_ALIGN): Likewise.\n\t* config/frv/frv.c (frv_adjust_field_align): Likewise.\n\t* config/i386/i386.h (ADJUST_FIELD_ALIGN): Likewise.\n\t* config/i386/i386.c (x86_field_alignment): Likewise.\n\t* config/rs6000/aix.h (ADJUST_FIELD_ALIGN): Likewise.\n\t* config/rs6000/darwin.h (ADJUST_FIELD_ALIGN): Likewise.\n\t* config/rs6000/freebsd64.h (ADJUST_FIELD_ALIGN): Likewise.\n\t* config/rs6000/linux64.h (ADJUST_FIELD_ALIGN): Likewise.\n\t* config/rs6000/sysv4.h (ADJUST_FIELD_ALIGN): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_special_adjust_field_align_p):\n\t Likewise.\n\n\tgo/\n\t* go-backend.c (go_field_alignment): Adjust.\n\n\tlibobjc/\n\t* encoding.c (objc_layout_structure_next_member): Adjust\n\tADJUST_FIELD_ALIGN usage.\n\n\tRevert\n\t2017-01-30  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/79256\n\t* targhooks.c (default_builtin_vector_alignment_reachable): Honor\n\tBIGGEST_FIELD_ALIGNMENT and ADJUST_FIELD_ALIGN to fix up bogus\n\talignment on TYPE.\n\nFrom-SVN: r245245", "tree": {"sha": "9fc890de85ab3e01588ab9bf2c29333aec48c2bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fc890de85ab3e01588ab9bf2c29333aec48c2bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7af4b20d83a8ce3033148f0d14c2e725791a7afd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7af4b20d83a8ce3033148f0d14c2e725791a7afd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7af4b20d83a8ce3033148f0d14c2e725791a7afd"}], "stats": {"total": 163, "additions": 105, "deletions": 58}, "files": [{"sha": "257cd21accbfad7661beace202c011d9ffa34523", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -1,3 +1,41 @@\n+2017-02-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79256\n+\tPR middle-end/79278\n+\t* builtins.c (get_object_alignment_2): Use min_align_of_type\n+\tto extract alignment for MEM_REFs to honor BIGGEST_FIELD_ALIGNMENT\n+\tand ADJUST_FIELD_ALIGN.\n+\n+\t* doc/tm.texi.in (ADJUST_FIELD_ALIGN): Adjust to take additional\n+\ttype parameter.\n+\t* doc/tm.texi: Regenerate.\n+\t* stor-layout.c (layout_decl): Adjust.\n+\t(update_alignment_for_field): Likewise.\n+\t(place_field): Likewise.\n+\t(min_align_of_type): Likewise.\n+\t* config/arc/arc.h (ADJUST_FIELD_ALIGN): Adjust.\n+\t* config/epiphany/epiphany.h (ADJUST_FIELD_ALIGN): Likewise.\n+\t* config/epiphany/epiphany.c (epiphany_adjust_field_align): Likewise.\n+\t* config/frv/frv.h (ADJUST_FIELD_ALIGN): Likewise.\n+\t* config/frv/frv.c (frv_adjust_field_align): Likewise.\n+\t* config/i386/i386.h (ADJUST_FIELD_ALIGN): Likewise.\n+\t* config/i386/i386.c (x86_field_alignment): Likewise.\n+\t* config/rs6000/aix.h (ADJUST_FIELD_ALIGN): Likewise.\n+\t* config/rs6000/darwin.h (ADJUST_FIELD_ALIGN): Likewise.\n+\t* config/rs6000/freebsd64.h (ADJUST_FIELD_ALIGN): Likewise.\n+\t* config/rs6000/linux64.h (ADJUST_FIELD_ALIGN): Likewise.\n+\t* config/rs6000/sysv4.h (ADJUST_FIELD_ALIGN): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_special_adjust_field_align_p):\n+\t Likewise.\n+\n+\tRevert\n+\t2017-01-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79256\n+\t* targhooks.c (default_builtin_vector_alignment_reachable): Honor\n+\tBIGGEST_FIELD_ALIGNMENT and ADJUST_FIELD_ALIGN to fix up bogus\n+\talignment on TYPE.\n+\n 2017-02-07  Toma Tabacu  <toma.tabacu@imgtec.com>\n \n \t* config/mips/mips.c (mips_expand_builtin_insn): Convert the QImode"}, {"sha": "f3bee5bfc1afa653fd84983e15d6cc5daee09b98", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -334,9 +334,11 @@ get_object_alignment_2 (tree exp, unsigned int *alignp,\n \t Do so only if get_pointer_alignment_1 did not reveal absolute\n \t alignment knowledge and if using that alignment would\n \t improve the situation.  */\n+      unsigned int talign;\n       if (!addr_p && !known_alignment\n-\t  && TYPE_ALIGN (TREE_TYPE (exp)) > align)\n-\talign = TYPE_ALIGN (TREE_TYPE (exp));\n+\t  && (talign = min_align_of_type (TREE_TYPE (exp)) * BITS_PER_UNIT)\n+\t  && talign > align)\n+\talign = talign;\n       else\n \t{\n \t  /* Else adjust bitpos accordingly.  */"}, {"sha": "b6464f18007f3166d2f3da6c82859dd5b9d57f3f", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -317,8 +317,8 @@ if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n    construct.\n */\n \n-#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \\\n-(TYPE_MODE (strip_array_types (TREE_TYPE (FIELD))) == DFmode \\\n+#define ADJUST_FIELD_ALIGN(FIELD, TYPE, COMPUTED) \\\n+(TYPE_MODE (strip_array_types (TYPE)) == DFmode \\\n  ? MIN ((COMPUTED), 32) : (COMPUTED))\n \n "}, {"sha": "41864f2c502d51939b891c535121b3f5f85a4565", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -2855,12 +2855,12 @@ epiphany_special_round_type_align (tree type, unsigned computed,\n    arrays-at-the-end-of-structs work, like for struct gcov_fn_info in\n    libgcov.c .  */\n unsigned\n-epiphany_adjust_field_align (tree field, unsigned computed)\n+epiphany_adjust_field_align (tree type, unsigned computed)\n {\n   if (computed == 32\n-      && TREE_CODE (TREE_TYPE (field)) == ARRAY_TYPE)\n+      && TREE_CODE (type) == ARRAY_TYPE)\n     {\n-      tree elmsz = TYPE_SIZE (TREE_TYPE (TREE_TYPE (field)));\n+      tree elmsz = TYPE_SIZE (TREE_TYPE (type));\n \n       if (!tree_fits_uhwi_p (elmsz) || tree_to_uhwi (elmsz) >= 32)\n \treturn 64;"}, {"sha": "d20d400de7cb4534799f23f7a38ed7f01eb605d7", "filename": "gcc/config/epiphany/epiphany.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.h?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -187,8 +187,8 @@ along with GCC; see the file COPYING3.  If not see\n \t\t\t\t       (SPECIFIED_ALIGN)) \\\n   : MAX ((MANGLED_ALIGN), (SPECIFIED_ALIGN)))\n \n-#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \\\n-  epiphany_adjust_field_align((FIELD), (COMPUTED))\n+#define ADJUST_FIELD_ALIGN(FIELD, TYPE, COMPUTED) \\\n+  epiphany_adjust_field_align((TYPE), (COMPUTED))\n \f\n /* Layout of source language data types.  */\n "}, {"sha": "0918b9835b94852408f873a9c14fffa4a120b026", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -6482,7 +6482,8 @@ int\n frv_adjust_field_align (tree field, int computed)\n {\n   /* Make sure that the bitfield is not wider than the type.  */\n-  if (DECL_BIT_FIELD (field)\n+  if (field\n+      && DECL_BIT_FIELD (field)\n       && !DECL_ARTIFICIAL (field))\n     {\n       tree parent = DECL_CONTEXT (field);"}, {"sha": "4acaabb1a06948a0c1e606011dd119a8a1482a0f", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -331,7 +331,7 @@\n    alignment computed in the usual way is COMPUTED.  GCC uses this\n    value instead of the value in `BIGGEST_ALIGNMENT' or\n    `BIGGEST_FIELD_ALIGNMENT', if defined, for structure fields only.  */\n-#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \t\t\t\t\\\n+#define ADJUST_FIELD_ALIGN(FIELD, TYPE, COMPUTED) \t\t\t\\\n   frv_adjust_field_align (FIELD, COMPUTED)\n #endif\n "}, {"sha": "d7dce4be97c52e4ccd0c9dbe6cdbca26a79ed3b5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -41691,10 +41691,9 @@ x86_file_start (void)\n }\n \n int\n-x86_field_alignment (tree field, int computed)\n+x86_field_alignment (tree type, int computed)\n {\n   machine_mode mode;\n-  tree type = TREE_TYPE (field);\n \n   if (TARGET_64BIT || TARGET_ALIGN_DOUBLE)\n     return computed;"}, {"sha": "f225b3eee9df90e27bf3775b53b33466f291c038", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -847,8 +847,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define BIGGEST_FIELD_ALIGNMENT 32\n #endif\n #else\n-#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \\\n-  x86_field_alignment ((FIELD), (COMPUTED))\n+#define ADJUST_FIELD_ALIGN(FIELD, TYPE, COMPUTED) \\\n+  x86_field_alignment ((TYPE), (COMPUTED))\n #endif\n \n /* If defined, a C expression to compute the alignment given to a"}, {"sha": "b90e2b065195a0ec0ade7c14ffae4709cec1e5bd", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -218,9 +218,9 @@\n \n /* This now supports a natural alignment mode.  */\n /* AIX word-aligns FP doubles but doubleword-aligns 64-bit ints.  */\n-#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \\\n+#define ADJUST_FIELD_ALIGN(FIELD, TYPE, COMPUTED) \\\n   ((TARGET_ALIGN_NATURAL == 0\t\t\t\t\t\t\\\n-    && TYPE_MODE (strip_array_types (TREE_TYPE (FIELD))) == DFmode)\t\\\n+    && TYPE_MODE (strip_array_types (TYPE)) == DFmode)\t\t\t\\\n    ? MIN ((COMPUTED), 32)\t\t\t\t\t\t\\\n    : (COMPUTED))\n "}, {"sha": "61e5e836de0044e3ac55d514ade59f681060f931", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -319,7 +319,7 @@ extern int darwin_emit_branch_islands;\n    suppressed for vector and long double items (both 128 in size).\n    There is a dummy use of the FIELD argument to avoid an unused variable\n    warning (see PR59496).  */\n-#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED)\t\t\t\\\n+#define ADJUST_FIELD_ALIGN(FIELD, TYPE, COMPUTED)\t\t\\\n   ((void) (FIELD),\t\t\t\t\t\t\\\n     (TARGET_ALIGN_NATURAL\t\t\t\t\t\\\n      ? (COMPUTED)\t\t\t\t\t\t\\"}, {"sha": "d75ac2b9a5d65be751b19fbf069e33b8cd2c3ff3", "filename": "gcc/config/rs6000/freebsd64.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -365,12 +365,12 @@ extern int dot_symbols;\n \n /* PowerPC64 Linux word-aligns FP doubles when -malign-power is given.  */\n #undef  ADJUST_FIELD_ALIGN\n-#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \\\n-  (rs6000_special_adjust_field_align_p ((FIELD), (COMPUTED))\t\t\\\n+#define ADJUST_FIELD_ALIGN(FIELD, TYPE, COMPUTED) \\\n+  (rs6000_special_adjust_field_align_p ((TYPE), (COMPUTED))\t\t\\\n    ? 128                                                                \\\n    : (TARGET_64BIT                                                      \\\n       && TARGET_ALIGN_NATURAL == 0                                      \\\n-      && TYPE_MODE (strip_array_types (TREE_TYPE (FIELD))) == DFmode)   \\\n+      && TYPE_MODE (strip_array_types (TYPE)) == DFmode)   \t\t\\\n    ? MIN ((COMPUTED), 32)                                               \\\n    : (COMPUTED))\n "}, {"sha": "71e35b709adf85456217229dc8d2d7433df9f038", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -292,12 +292,12 @@ extern int dot_symbols;\n \n /* PowerPC64 Linux word-aligns FP doubles when -malign-power is given.  */\n #undef  ADJUST_FIELD_ALIGN\n-#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED) \\\n-  (rs6000_special_adjust_field_align_p ((FIELD), (COMPUTED))\t\t\\\n+#define ADJUST_FIELD_ALIGN(FIELD, TYPE, COMPUTED) \\\n+  (rs6000_special_adjust_field_align_p ((TYPE), (COMPUTED))\t\t\\\n    ? 128\t\t\t\t\t\t\t\t\\\n    : (TARGET_64BIT\t\t\t\t\t\t\t\\\n       && TARGET_ALIGN_NATURAL == 0\t\t\t\t\t\\\n-      && TYPE_MODE (strip_array_types (TREE_TYPE (FIELD))) == DFmode)\t\\\n+      && TYPE_MODE (strip_array_types (TYPE)) == DFmode)\t\t\\\n    ? MIN ((COMPUTED), 32)\t\t\t\t\t\t\\\n    : (COMPUTED))\n "}, {"sha": "f1dec8c3644a31a6b9434e209fe7c1681df5bdb8", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -7975,9 +7975,9 @@ rs6000_data_alignment (tree type, unsigned int align, enum data_align how)\n /* Previous GCC releases forced all vector types to have 16-byte alignment.  */\n \n bool\n-rs6000_special_adjust_field_align_p (tree field, unsigned int computed)\n+rs6000_special_adjust_field_align_p (tree type, unsigned int computed)\n {\n-  if (TARGET_ALTIVEC && TREE_CODE (TREE_TYPE (field)) == VECTOR_TYPE)\n+  if (TARGET_ALTIVEC && TREE_CODE (type) == VECTOR_TYPE)\n     {\n       if (computed != 128)\n \t{"}, {"sha": "de386291a5100d1803eb32364125c9ff9c3c1cac", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -298,8 +298,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* An expression for the alignment of a structure field FIELD if the\n    alignment computed in the usual way is COMPUTED.  */\n-#define ADJUST_FIELD_ALIGN(FIELD, COMPUTED)\t\t\t\t      \\\n-\t(rs6000_special_adjust_field_align_p ((FIELD), (COMPUTED))\t      \\\n+#define ADJUST_FIELD_ALIGN(FIELD, TYPE, COMPUTED)\t\t\t      \\\n+\t(rs6000_special_adjust_field_align_p ((TYPE), (COMPUTED))\t      \\\n \t ? 128 : COMPUTED)\n \n #undef  BIGGEST_FIELD_ALIGNMENT"}, {"sha": "348fd6806bdacb7f9cb713b6907acb172214402c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -1042,13 +1042,15 @@ structure and union fields only, unless the field alignment has been set\n by the @code{__attribute__ ((aligned (@var{n})))} construct.\n @end defmac\n \n-@defmac ADJUST_FIELD_ALIGN (@var{field}, @var{computed})\n-An expression for the alignment of a structure field @var{field} if the\n-alignment computed in the usual way (including applying of\n-@code{BIGGEST_ALIGNMENT} and @code{BIGGEST_FIELD_ALIGNMENT} to the\n+@defmac ADJUST_FIELD_ALIGN (@var{field}, @var{type}, @var{computed})\n+An expression for the alignment of a structure field @var{field} of\n+type @var{type} if the alignment computed in the usual way (including\n+applying of @code{BIGGEST_ALIGNMENT} and @code{BIGGEST_FIELD_ALIGNMENT} to the\n alignment) is @var{computed}.  It overrides alignment only if the\n field alignment has not been set by the\n-@code{__attribute__ ((aligned (@var{n})))} construct.\n+@code{__attribute__ ((aligned (@var{n})))} construct.  Note that @var{field}\n+may be @code{NULL_TREE} in case we just query for the minimum alignment\n+of a field of type @var{type} in structure context.\n @end defmac\n \n @defmac MAX_STACK_ALIGNMENT"}, {"sha": "6cde83c7a21e3c1c250060797869a955024ab194", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -990,13 +990,15 @@ structure and union fields only, unless the field alignment has been set\n by the @code{__attribute__ ((aligned (@var{n})))} construct.\n @end defmac\n \n-@defmac ADJUST_FIELD_ALIGN (@var{field}, @var{computed})\n-An expression for the alignment of a structure field @var{field} if the\n-alignment computed in the usual way (including applying of\n-@code{BIGGEST_ALIGNMENT} and @code{BIGGEST_FIELD_ALIGNMENT} to the\n+@defmac ADJUST_FIELD_ALIGN (@var{field}, @var{type}, @var{computed})\n+An expression for the alignment of a structure field @var{field} of\n+type @var{type} if the alignment computed in the usual way (including\n+applying of @code{BIGGEST_ALIGNMENT} and @code{BIGGEST_FIELD_ALIGNMENT} to the\n alignment) is @var{computed}.  It overrides alignment only if the\n field alignment has not been set by the\n-@code{__attribute__ ((aligned (@var{n})))} construct.\n+@code{__attribute__ ((aligned (@var{n})))} construct.  Note that @var{field}\n+may be @code{NULL_TREE} in case we just query for the minimum alignment\n+of a field of type @var{type} in structure context.\n @end defmac\n \n @defmac MAX_STACK_ALIGNMENT"}, {"sha": "687c8d68992b966720e598d53176dd7c14d04282", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -1,3 +1,9 @@\n+2017-02-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79256\n+\tPR middle-end/79278\n+\t* go-backend.c (go_field_alignment): Adjust.\n+\n 2017-01-11  Than McIntosh  <thanm@google.com>\n \n \t* go-gcc.cc (conditional_expression): Add Bfunction parameter."}, {"sha": "d60a79e296168a7133f19be607a089a84d239426", "filename": "gcc/go/go-backend.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fgo%2Fgo-backend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fgo%2Fgo-backend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-backend.c?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -71,11 +71,7 @@ go_field_alignment (tree t)\n #endif\n \n #ifdef ADJUST_FIELD_ALIGN\n-  {\n-    tree field ATTRIBUTE_UNUSED;\n-    field = build_decl (UNKNOWN_LOCATION, FIELD_DECL, NULL, t);\n-    v = ADJUST_FIELD_ALIGN (field, v);\n-  }\n+  v = ADJUST_FIELD_ALIGN (NULL_TREE, t, v);\n #endif\n \n   return v / BITS_PER_UNIT;"}, {"sha": "d0beebf06868545442f2b6431ae034a04252db8c", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -718,7 +718,8 @@ layout_decl (tree decl, unsigned int known_align)\n \t\t\t\t     (unsigned) BIGGEST_FIELD_ALIGNMENT));\n #endif\n #ifdef ADJUST_FIELD_ALIGN\n-\t  SET_DECL_ALIGN (decl, ADJUST_FIELD_ALIGN (decl, DECL_ALIGN (decl)));\n+\t  SET_DECL_ALIGN (decl, ADJUST_FIELD_ALIGN (decl, TREE_TYPE (decl),\n+\t\t\t\t\t\t    DECL_ALIGN (decl)));\n #endif\n \t}\n \n@@ -1032,7 +1033,7 @@ update_alignment_for_field (record_layout_info rli, tree field,\n \n #ifdef ADJUST_FIELD_ALIGN\n \t  if (! TYPE_USER_ALIGN (type))\n-\t    type_align = ADJUST_FIELD_ALIGN (field, type_align);\n+\t    type_align = ADJUST_FIELD_ALIGN (field, type, type_align);\n #endif\n \n \t  /* Targets might chose to handle unnamed and hence possibly\n@@ -1260,7 +1261,7 @@ place_field (record_layout_info rli, tree field)\n \n #ifdef ADJUST_FIELD_ALIGN\n       if (! TYPE_USER_ALIGN (type))\n-\ttype_align = ADJUST_FIELD_ALIGN (field, type_align);\n+\ttype_align = ADJUST_FIELD_ALIGN (field, type, type_align);\n #endif\n \n       /* A bit field may not span more units of alignment of its type\n@@ -1303,7 +1304,7 @@ place_field (record_layout_info rli, tree field)\n \n #ifdef ADJUST_FIELD_ALIGN\n       if (! TYPE_USER_ALIGN (type))\n-\ttype_align = ADJUST_FIELD_ALIGN (field, type_align);\n+\ttype_align = ADJUST_FIELD_ALIGN (field, type, type_align);\n #endif\n \n       if (maximum_field_alignment != 0)\n@@ -2411,9 +2412,7 @@ min_align_of_type (tree type)\n #endif\n       unsigned int field_align = align;\n #ifdef ADJUST_FIELD_ALIGN\n-      tree field = build_decl (UNKNOWN_LOCATION, FIELD_DECL, NULL_TREE, type);\n-      field_align = ADJUST_FIELD_ALIGN (field, field_align);\n-      ggc_free (field);\n+      field_align = ADJUST_FIELD_ALIGN (NULL_TREE, type, field_align);\n #endif\n       align = MIN (align, field_align);\n     }"}, {"sha": "1cdec068ed87456dc636e22ab0e187cd2bd55040", "filename": "gcc/targhooks.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -1130,14 +1130,9 @@ default_vector_alignment (const_tree type)\n /* By default assume vectors of element TYPE require a multiple of the natural\n    alignment of TYPE.  TYPE is naturally aligned if IS_PACKED is false.  */\n bool\n-default_builtin_vector_alignment_reachable (const_tree type, bool is_packed)\n+default_builtin_vector_alignment_reachable (const_tree /*type*/, bool is_packed)\n {\n-  if (is_packed)\n-    return false;\n-\n-  /* If TYPE can be differently aligned in field context we have to punt\n-     as TYPE may have wrong TYPE_ALIGN here (PR79278).  */\n-  return min_align_of_type (CONST_CAST_TREE (type)) == TYPE_ALIGN_UNIT (type);\n+  return ! is_packed;\n }\n \n /* By default, assume that a target supports any factor of misalignment"}, {"sha": "f73c54747a4ad3ee2dbfbad23d26c7c80d99a67a", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -1,3 +1,10 @@\n+2017-02-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79256\n+\tPR middle-end/79278\n+\t* encoding.c (objc_layout_structure_next_member): Adjust\n+\tADJUST_FIELD_ALIGN usage.\n+\n 2017-01-18  Matthias Klose  <doko@ubuntu.com>\n \n         PR libobjc/78697"}, {"sha": "6f18d604442663c25e66443ac29f900794c84801", "filename": "libobjc/encoding.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/libobjc%2Fencoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4cf4b647cd239cc57d88ed82f7243e7efdf43f5/libobjc%2Fencoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fencoding.c?ref=a4cf4b647cd239cc57d88ed82f7243e7efdf43f5", "patch": "@@ -1159,7 +1159,7 @@ objc_layout_structure_next_member (struct objc_struct_layout *layout)\n   desired_align = MIN (desired_align, BIGGEST_FIELD_ALIGNMENT);\n #endif\n #ifdef ADJUST_FIELD_ALIGN\n-  desired_align = ADJUST_FIELD_ALIGN (type, desired_align);\n+  desired_align = ADJUST_FIELD_ALIGN (type, type, desired_align);\n #endif\n \n   /* Record must have at least as much alignment as any field."}]}