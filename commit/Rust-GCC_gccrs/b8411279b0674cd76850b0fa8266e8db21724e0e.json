{"sha": "b8411279b0674cd76850b0fa8266e8db21724e0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg0MTEyNzliMDY3NGNkNzY4NTBiMGZhODI2NmU4ZGIyMTcyNGUwZQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-09-18T08:33:27Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-18T08:33:27Z"}, "message": "[Ada] Crash on aggregate with dscriminant in if-expression as default\n\nThis patch fixes a crash on a an aggregate for a discriminated type,\nwhen a component of the aggregate is also a discriminated type\nconstrained by a discriminant of the enclosing object, and the default\nvalue for the component is a conditional expression that includes\nreferences to that outer discriminant.\n\n2019-09-18  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb (Expand_Record_Aggregate, Rewrite_Discriminant):\n\tAfter rewriting a reference to an outer discriminant as a\n\tselected component of the enclosing object, analyze the selected\n\tcomponent to ensure that the entity of the selector name is\n\tproperly set. This is necessary when the aggregate appears\n\twithin an expression that may have been analyzed already.\n\ngcc/testsuite/\n\n\t* gnat.dg/discr58.adb: New testcase.\n\nFrom-SVN: r275862", "tree": {"sha": "870d33909d2ed5dd5c09ae3ed6934a9e4fb96314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/870d33909d2ed5dd5c09ae3ed6934a9e4fb96314"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8411279b0674cd76850b0fa8266e8db21724e0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8411279b0674cd76850b0fa8266e8db21724e0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8411279b0674cd76850b0fa8266e8db21724e0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8411279b0674cd76850b0fa8266e8db21724e0e/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "483af72e4bf2499fdbbf6b6e061318eaa9ba2b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483af72e4bf2499fdbbf6b6e061318eaa9ba2b2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/483af72e4bf2499fdbbf6b6e061318eaa9ba2b2d"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "92782aab03148d07cd8835827a01d74064470168", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8411279b0674cd76850b0fa8266e8db21724e0e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8411279b0674cd76850b0fa8266e8db21724e0e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b8411279b0674cd76850b0fa8266e8db21724e0e", "patch": "@@ -1,3 +1,12 @@\n+2019-09-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_Record_Aggregate, Rewrite_Discriminant):\n+\tAfter rewriting a reference to an outer discriminant as a\n+\tselected component of the enclosing object, analyze the selected\n+\tcomponent to ensure that the entity of the selector name is\n+\tproperly set. This is necessary when the aggregate appears\n+\twithin an expression that may have been analyzed already.\n+\n 2019-09-18  Justin Squirek  <squirek@adacore.com>\n \n \t* sem_ch8.adb (Use_One_Type): Add guard to prevent warning on a"}, {"sha": "63f9d1a512a5878733847d6b5f92d676da0a8a00", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8411279b0674cd76850b0fa8266e8db21724e0e/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8411279b0674cd76850b0fa8266e8db21724e0e/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=b8411279b0674cd76850b0fa8266e8db21724e0e", "patch": "@@ -3103,6 +3103,13 @@ package body Exp_Aggr is\n               Make_Selected_Component (Loc,\n                 Prefix        => New_Copy_Tree (Lhs),\n                 Selector_Name => Make_Identifier (Loc, Chars (Expr))));\n+\n+            --  The generated code will be reanalyzed, but if the reference\n+            --  to the discriminant appears within an already analyzed\n+            --  expression (e.g. a conditional) we must set its proper entity\n+            --  now. Context is an initialization procedure.\n+\n+            Analyze (Expr);\n          end if;\n \n          return OK;"}, {"sha": "cc189697a97bfb7c3e8316bd738f8004aafef53b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8411279b0674cd76850b0fa8266e8db21724e0e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8411279b0674cd76850b0fa8266e8db21724e0e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b8411279b0674cd76850b0fa8266e8db21724e0e", "patch": "@@ -1,3 +1,7 @@\n+2019-09-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/discr58.adb: New testcase.\n+\n 2019-09-18  Justin Squirek  <squirek@adacore.com>\n \n \t* gnat.dg/warn30.adb, gnat.dg/warn30.ads: New testcase."}, {"sha": "bb6f5bfedce9a0b9d5b7df177130ca535f9396c2", "filename": "gcc/testsuite/gnat.dg/discr58.adb", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8411279b0674cd76850b0fa8266e8db21724e0e/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr58.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8411279b0674cd76850b0fa8266e8db21724e0e/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr58.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr58.adb?ref=b8411279b0674cd76850b0fa8266e8db21724e0e", "patch": "@@ -0,0 +1,33 @@\n+--  { dg-do compile }\n+\n+with Ada.Text_IO; use Ada.Text_IO;\n+\n+procedure Discr58 is\n+\n+   type Field(Flag : Boolean := True) is record\n+      case Flag is\n+         when True  => Param1 : Boolean := False;\n+         when False => Param2 : Boolean := True;\n+      end case;\n+   end record;\n+\n+   type Header(Flag : Boolean := True) is record\n+      Param3 : Integer     := 0;\n+      Params : Field(Flag) := (if Flag = True then\n+                                  (Flag => True, others => <>)\n+                               else\n+                                  (Flag => False, others => <>));\n+   end record;\n+\n+   type Message(Flag : Boolean) is record\n+\n+      -- This assignment crashes GNAT\n+      The_Header : Header(Flag) := Header'(Flag => True, others => <>);\n+   end record;\n+\n+   It : Message (True);\n+begin\n+   Put_Line(\"Hello World\");\n+   Put_Line (Boolean'Image (It.The_Header.Flag));\n+   Put_Line (Boolean'Image (It.The_Header.Params.Flag));\n+end Discr58;\n\\ No newline at end of file"}]}