{"sha": "37fe763dee6c9ea60831ac1bbfe98313899d5ffe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdmZTc2M2RlZTZjOWVhNjA4MzFhYzFiYmZlOTgzMTM4OTlkNWZmZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-12-05T14:29:49Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-12-05T14:29:49Z"}, "message": "* Remove unintended commits.\n\nFrom-SVN: r142475", "tree": {"sha": "2c138a3d34787895e706ca38077c1c6fadba4651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c138a3d34787895e706ca38077c1c6fadba4651"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37fe763dee6c9ea60831ac1bbfe98313899d5ffe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37fe763dee6c9ea60831ac1bbfe98313899d5ffe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37fe763dee6c9ea60831ac1bbfe98313899d5ffe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37fe763dee6c9ea60831ac1bbfe98313899d5ffe/comments", "author": null, "committer": null, "parents": [{"sha": "ec46190f11a7cc29f896a5f20b2ccaf2209b8382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec46190f11a7cc29f896a5f20b2ccaf2209b8382", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec46190f11a7cc29f896a5f20b2ccaf2209b8382"}], "stats": {"total": 36, "additions": 7, "deletions": 29}, "files": [{"sha": "7aea85d355df9ab0f790aeeb7aa322bf95a2a7c7", "filename": "gcc/config/i386/avxintrin.h", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fe763dee6c9ea60831ac1bbfe98313899d5ffe/gcc%2Fconfig%2Fi386%2Favxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fe763dee6c9ea60831ac1bbfe98313899d5ffe/gcc%2Fconfig%2Fi386%2Favxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxintrin.h?ref=37fe763dee6c9ea60831ac1bbfe98313899d5ffe", "patch": "@@ -27,18 +27,9 @@\n /* Implemented from the specification included in the Intel C++ Compiler\n    User Guide and Reference, version 11.0.  */\n \n-#ifndef _AVXINTRIN_H_INCLUDED\n-#define _AVXINTRIN_H_INCLUDED\n-\n-#if !defined (__AVX__)\n-# error \"AVX instruction set not enabled\"\n-#else\n-\n-/* We need definitions from the SSE4.1, SSSE3, SSE3, SSE2 and SSE\n-   header files.  */\n-#include <smmintrin.h>\n-\n-/* AVX */\n+#ifndef _IMMINTRIN_H_INCLUDED\n+# error \"Never use <avxintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n \n /* Internal data types for implementing the intrinsics.  */\n typedef double __v4df __attribute__ ((__vector_size__ (32)));\n@@ -1478,7 +1469,3 @@ _mm256_castsi128_si256 (__m128i __A)\n {\n   return (__m256i) __builtin_ia32_si256_si ((__v4si)__A);\n }\n-\n-#endif /* __AVX__ */\n-\n-#endif /* _AVXINTRIN_H_INCLUDED */"}, {"sha": "d093d6c1cc31c015219fcaa93696338a48ffb489", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fe763dee6c9ea60831ac1bbfe98313899d5ffe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fe763dee6c9ea60831ac1bbfe98313899d5ffe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=37fe763dee6c9ea60831ac1bbfe98313899d5ffe", "patch": "@@ -18,7 +18,7 @@\n #define __builtin_ia32_extrqi(X, I, L)  __builtin_ia32_extrqi(X, 1, 1)\n #define __builtin_ia32_insertqi(X, Y, I, L) __builtin_ia32_insertqi(X, Y, 1, 1)\n \n-/* avxintrin.h */\n+/* immintrin.h */\n #define __builtin_ia32_blendpd256(X, Y, M) __builtin_ia32_blendpd256(X, Y, 1)\n #define __builtin_ia32_blendps256(X, Y, M) __builtin_ia32_blendps256(X, Y, 1)\n #define __builtin_ia32_dpps256(X, Y, M) __builtin_ia32_dpps256(X, Y, 1)\n@@ -133,7 +133,7 @@\n #define __builtin_ia32_protdi(A, B) __builtin_ia32_protdi(A,1)\n #define __builtin_ia32_protqi(A, B) __builtin_ia32_protqi(A,1)\n \n-#include <avxintrin.h>\n #include <wmmintrin.h>\n #include <bmmintrin.h>\n+#include <immintrin.h>\n #include <mm3dnow.h>"}, {"sha": "62f6538bbe63583d3097f0b5a69b4dd42d6dac27", "filename": "gcc/testsuite/gcc.target/i386/avx-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37fe763dee6c9ea60831ac1bbfe98313899d5ffe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37fe763dee6c9ea60831ac1bbfe98313899d5ffe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c?ref=37fe763dee6c9ea60831ac1bbfe98313899d5ffe", "patch": "@@ -12,9 +12,9 @@\n #define extern\n #define __inline\n \n-#include <avxintrin.h>\n #include <wmmintrin.h>\n #include <bmmintrin.h>\n+#include <immintrin.h>\n #include <mm3dnow.h>\n \n #define _CONCAT(x,y) x ## y\n@@ -53,7 +53,7 @@\n test_1x (_mm_extracti_si64, __m128i, __m128i, 1, 1)\n test_2x (_mm_inserti_si64, __m128i, __m128i, __m128i, 1, 1)\n \n-/* avxintrin.h */\n+/* immintrin.h */\n test_2 (_mm256_blend_pd, __m256d, __m256d, __m256d, 1)\n test_2 (_mm256_blend_ps, __m256, __m256, __m256, 1)\n test_2 (_mm256_dp_ps, __m256, __m256, __m256, 1)"}, {"sha": "0701fa306891cd759a6e8547afb7b706e9741422", "filename": "gcc/testsuite/gcc.target/i386/intrinsics.h", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec46190f11a7cc29f896a5f20b2ccaf2209b8382/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec46190f11a7cc29f896a5f20b2ccaf2209b8382/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fintrinsics.h?ref=ec46190f11a7cc29f896a5f20b2ccaf2209b8382", "patch": "@@ -1,9 +0,0 @@\n-/* Check that all x86 intrinsics can be included together.  */\n-/* { dg-do compile } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -mavx -msse5 -maes -mpclmul\" } */\n-\n-#include <immintrin.h>\n-#include <bmmintrin.h>\n-#include <mm3dnow.h>\n-\n-int dummy;"}]}