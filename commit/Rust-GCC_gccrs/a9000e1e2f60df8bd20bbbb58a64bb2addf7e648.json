{"sha": "a9000e1e2f60df8bd20bbbb58a64bb2addf7e648", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkwMDBlMWUyZjYwZGY4YmQyMGJiYmI1OGE2NGJiMmFkZGY3ZTY0OA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-12-11T13:52:05Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-12-11T13:52:05Z"}, "message": "nvptx.h (TARGET_SUPPORTS_WIDE_INT): Define.\n\n\tgcc/\n\t* config/nvptx/nvptx.h (TARGET_SUPPORTS_WIDE_INT): Define.\n\t* config/nvptx/nvptx.c (nvptxx_assemble_integer): Return false for\n\tunrecognizable RTX.\n\n\tgcc/testsuite/\n\t* gcc.target/nvptx/ary-init.c: Repair dg_final syntax.\n\t* gcc.target/nvptx/decl-init.c: Likewise.  Add TI case.\n\nFrom-SVN: r231564", "tree": {"sha": "183c22a11fc1441e0167c8857ac487ff5de82db1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/183c22a11fc1441e0167c8857ac487ff5de82db1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9000e1e2f60df8bd20bbbb58a64bb2addf7e648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9000e1e2f60df8bd20bbbb58a64bb2addf7e648", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9000e1e2f60df8bd20bbbb58a64bb2addf7e648", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9000e1e2f60df8bd20bbbb58a64bb2addf7e648/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e3fc446b9cc1e8a168d41b14782f40031af89e57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3fc446b9cc1e8a168d41b14782f40031af89e57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3fc446b9cc1e8a168d41b14782f40031af89e57"}], "stats": {"total": 66, "additions": 46, "deletions": 20}, "files": [{"sha": "32481e879b802788a394d827c09177d272d93d0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9000e1e2f60df8bd20bbbb58a64bb2addf7e648/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9000e1e2f60df8bd20bbbb58a64bb2addf7e648/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9000e1e2f60df8bd20bbbb58a64bb2addf7e648", "patch": "@@ -1,3 +1,9 @@\n+2015-12-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx.h (TARGET_SUPPORTS_WIDE_INT): Define.\n+\t* config/nvptx/nvptx.c (nvptxx_assemble_integer): Return false for\n+\tunrecognizable RTX.\n+\n 2015-12-11  Tom de Vries  <tom@codesourcery.com>\n \n \t* passes.def: Remove unpaired TERMINATE_PASS_LIST."}, {"sha": "355c79f43aead77a75485944849ae4a6cec70551", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9000e1e2f60df8bd20bbbb58a64bb2addf7e648/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9000e1e2f60df8bd20bbbb58a64bb2addf7e648/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=a9000e1e2f60df8bd20bbbb58a64bb2addf7e648", "patch": "@@ -1570,7 +1570,9 @@ nvptx_assemble_integer (rtx x, unsigned int size, int ARG_UNUSED (aligned_p))\n   switch (GET_CODE (x))\n     {\n     default:\n-      gcc_unreachable ();\n+      /* Let the generic machinery figure it out, usually for a\n+\t CONST_WIDE_INT.  */\n+      return false;\n \n     case CONST_INT:\n       nvptx_assemble_value (INTVAL (x), size);"}, {"sha": "b6911b3b62c8a16b54342d89d3d63f5900acd548", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9000e1e2f60df8bd20bbbb58a64bb2addf7e648/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9000e1e2f60df8bd20bbbb58a64bb2addf7e648/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=a9000e1e2f60df8bd20bbbb58a64bb2addf7e648", "patch": "@@ -69,6 +69,7 @@\n #define FLOAT_TYPE_SIZE 32\n #define DOUBLE_TYPE_SIZE 64\n #define LONG_DOUBLE_TYPE_SIZE 64\n+#define TARGET_SUPPORTS_WIDE_INT 1\n \n #undef SIZE_TYPE\n #define SIZE_TYPE (TARGET_ABI64 ? \"long unsigned int\" : \"unsigned int\")"}, {"sha": "747b913c642b5f1cab9d987d73f0d3b792486054", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9000e1e2f60df8bd20bbbb58a64bb2addf7e648/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9000e1e2f60df8bd20bbbb58a64bb2addf7e648/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a9000e1e2f60df8bd20bbbb58a64bb2addf7e648", "patch": "@@ -1,3 +1,8 @@\n+2015-12-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcc.target/nvptx/ary-init.c: Repair dg_final syntax.\n+\t* gcc.target/nvptx/decl-init.c: Likewise.  Add TI case.\n+\n 2015-12-11  Martin Jambor  <mjambor@suse.cz>\n \n \tPR ipa/68064"}, {"sha": "93235fd30a2ebfed9999f12437403bd26af82676", "filename": "gcc/testsuite/gcc.target/nvptx/ary-init.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9000e1e2f60df8bd20bbbb58a64bb2addf7e648/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fary-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9000e1e2f60df8bd20bbbb58a64bb2addf7e648/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fary-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fary-init.c?ref=a9000e1e2f60df8bd20bbbb58a64bb2addf7e648", "patch": "@@ -1,21 +1,25 @@\n /* { dg-additional-options \"-Wno-long-long\" } */\n \n char ca1[2] = {'a', 'b'};\n+/* { dg-final { scan-assembler \" .align 1 .u8 ca1\\\\\\[2\\\\\\] = { 97, 98 };\" } } */\n+\n short sa1[2] = { 1, 2 };\n+/* { dg-final { scan-assembler \" .align 2 .u16 sa1\\\\\\[2\\\\\\] = { 1, 2 };\" } } */\n+\n int ia1[2] = { 3, 4 };\n+/* { dg-final { scan-assembler \" .align 4 .u32 ia1\\\\\\[2\\\\\\] = { 3, 4 };\" } } */\n+\n long long la1[2] = { 5, 6 };\n+/* { dg-final { scan-assembler \" .align 8 .u64 la1\\\\\\[2\\\\\\] = { 5, 6 };\" } } */\n \n char ca2[2][2] = {'A', 'B', 'C', 'D'};\n+/* { dg-final { scan-assembler \" .align 1 .u8 ca2\\\\\\[4\\\\\\] = { 65, 66, 67, 68 };\" } } */\n+\n short sa2[2][2] = { 7, 8, 9, 10 };\n-int ia2[2][2] = { 11, 12, 13, 14 };\n-long long la2[2][2] = { 15, 16, 17, 18 };\n+/* { dg-final { scan-assembler \" .align 2 .u16 sa2\\\\\\[4\\\\\\] = { 7, 8, 9, 10 };\" } } */\n \n-/* dg-final { scan-assembler \" .align 8 .u64 la1\\\\\\[2\\\\\\] = { 5, 6 };\" } } */\n-/* dg-final { scan-assembler \" .align 4 .u32 ia1\\\\\\[2\\\\\\] = { 3, 4 };\" } } */\n-/* dg-final { scan-assembler \" .align 2 .u16 sa1\\\\\\[2\\\\\\] = { 1, 2 };\" } } */\n-/* dg-final { scan-assembler \" .align 1 .u8 ca1\\\\\\[2\\\\\\] = { 97, 98 };\" } } */\n+int ia2[2][2] = { 11, 12, 13, 14 };\n+/* { dg-final { scan-assembler \" .align 4 .u32 ia2\\\\\\[4\\\\\\] = { 11, 12, 13, 14 };\" } } */\n \n-/* dg-final { scan-assembler \" .align 8 .u64 la2\\\\\\[4\\\\\\] = { 15, 16, 17, 18 };\" } } */\n-/* dg-final { scan-assembler \" .align 4 .u32 ia2\\\\\\[4\\\\\\] = { 11, 12, 13, 14 };\" } } */\n-/* dg-final { scan-assembler \" .align 2 .u16 sa2\\\\\\[4\\\\\\] = { 7, 8, 9, 10 };\" } } */\n-/* dg-final { scan-assembler \" .align 1 .u8 ca2\\\\\\[4\\\\\\] = { 65, 66, 67, 68 };\" } } */\n+long long la2[2][2] = { 15, 16, 17, 18 };\n+/* { dg-final { scan-assembler \" .align 8 .u64 la2\\\\\\[4\\\\\\] = { 15, 16, 17, 18 };\" } } */"}, {"sha": "e9af9075756deba8a1afbb4310efb397ed884bab", "filename": "gcc/testsuite/gcc.target/nvptx/decl-init.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9000e1e2f60df8bd20bbbb58a64bb2addf7e648/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fdecl-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9000e1e2f60df8bd20bbbb58a64bb2addf7e648/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fdecl-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fdecl-init.c?ref=a9000e1e2f60df8bd20bbbb58a64bb2addf7e648", "patch": "@@ -2,11 +2,15 @@\n /* { dg-additional-options \"-Wno-long-long\" } */\n \n __extension__ _Complex float cf = 1.0f + 2.0if;\n+/* { dg-final { scan-assembler \".align 4 .u32 cf\\\\\\[2\\\\\\] = { 1065353216, 1073741824 };\" } } */\n+\n __extension__ _Complex double cd = 3.0 + 4.0i;\n+/* { dg-final { scan-assembler \".align 8 .u64 cd\\\\\\[2\\\\\\] = { 4613937818241073152, 4616189618054758400 };\" } } */\n \n long long la[2] = \n   {0x0102030405060708ll,\n    0x1112131415161718ll};\n+/* { dg-final { scan-assembler \".align 8 .u64 la\\\\\\[2\\\\\\] = { 72623859790382856, 1230066625199609624 };\" } } */\n \n struct six \n {\n@@ -15,23 +19,27 @@ struct six\n };\n \n struct six six1 = {1, 2, 3};\n+/* { dg-final { scan-assembler \".align 2 .u16 six1\\\\\\[3\\\\\\] = { 1, 2, 3 };\" } } */\n+\n struct six six2[2] = {{4, 5, 6}, {7, 8, 9}};\n+/* { dg-final { scan-assembler \".align 2 .u16 six2\\\\\\[6\\\\\\] = { 4, 5, 6, 7, 8, 9 };\" } } */\n \n struct __attribute__((packed)) five \n {\n   char a;\n   int b;\n };\n+\n struct five five1 = {10, 11};\n+/* { dg-final { scan-assembler \".align 1 .u8 five1\\\\\\[5\\\\\\] = { 10, 11, 0, 0, 0 };\" } } */\n+\n struct five five2[2] = {{12, 13}, {14, 15}};\n+/* { dg-final { scan-assembler \".align 1 .u8 five2\\\\\\[10\\\\\\] = { 12, 13, 0, 0, 0, 14, 15, 0, 0, 0 };\" } } */\n+\n+int __attribute__((vector_size(16))) vi = {16, 17, 18, 19};\n+/* { dg-final { scan-assembler \".align 8 .u32 vi\\\\\\[4\\\\\\] = { 16, 17, 18, 19 };\" } } */\n \n-int  __attribute__((vector_size(16))) vi = {16, 17, 18, 19};\n+typedef int __attribute ((mode(TI))) ti_t;\n \n-/* dg-final { scan-assembler \".align 4 .u32 cf\\\\\\[2\\\\\\] = { 1065353216, 1073741824 };\" } } */\n-/* dg-final { scan-assembler \".align 8 .u64 df\\\\\\[2\\\\\\] = { 4613937818241073152, 4616189618054758400 };\" } } */\n-/* dg-final { scan-assembler \".align 8 .u64 la\\\\\\[2\\\\\\] = { 72623859790382856, 1230066625199609624 };\" } } */\n-/* dg-final { scan-assembler \".align 2 .u16 six1\\\\\\[3\\\\\\] = { 1, 2, 3 };\" } } */\n-/* dg-final { scan-assembler \".align 2 .u16 six2\\\\\\[6\\\\\\] = { 4, 5, 6, 7, 8, 9 };\" } } */\n-/* dg-final { scan-assembler \".align 1 .u8 five1\\\\\\[5\\\\\\] = { 10, 11, 0, 0, 0 };\" } } */\n-/* dg-final { scan-assembler \".align 1 .u8 five2\\\\\\[10\\\\\\] = { 12, 13, 0, 0, 0, 14, 15, 0, 0, 0 };\" } } */\n-/* dg-final { scan-assembler \".align 8 .u32 vi\\\\\\[4\\\\\\] = { 16, 17, 18, 19 };\" } } */\n+ti_t ti = (ti_t)0x2122232425262728ll + ((ti_t)0x3132333435363738ll << 64);\n+/* { dg-final { scan-assembler \".align 8 .u64 ti\\\\\\[2\\\\\\] = { 2387509390608836392, 3544952156018063160 };\" } } */"}]}