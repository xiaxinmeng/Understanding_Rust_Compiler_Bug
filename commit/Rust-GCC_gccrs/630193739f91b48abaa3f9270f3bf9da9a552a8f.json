{"sha": "630193739f91b48abaa3f9270f3bf9da9a552a8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjMwMTkzNzM5ZjkxYjQ4YWJhYTNmOTI3MGYzYmY5ZGE5YTU1MmE4Zg==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "2000-08-13T21:49:36Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-08-13T21:49:36Z"}, "message": "rs6000.c (rs6000_select_section): Rewrite to not put stuff in .sdata unnecessarily.\n\n* config/rs6000/rs6000.c (rs6000_select_section): Rewrite to\nnot put stuff in .sdata unnecessarily.\n(rs6000_unique_section): New function.\n* config/rs6000/rs6000-protos.h: Add rs6000_unique_section.\n* config/rs6000/sysv4.h (UNIQUE_SECTION): Define.\n\nFrom-SVN: r35667", "tree": {"sha": "720e63035709b44f430811de95fcd2e2e08e32dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/720e63035709b44f430811de95fcd2e2e08e32dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/630193739f91b48abaa3f9270f3bf9da9a552a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630193739f91b48abaa3f9270f3bf9da9a552a8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/630193739f91b48abaa3f9270f3bf9da9a552a8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/630193739f91b48abaa3f9270f3bf9da9a552a8f/comments", "author": null, "committer": null, "parents": [{"sha": "05273f087b13b503b5f951f689e37ed47fb3f8fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05273f087b13b503b5f951f689e37ed47fb3f8fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05273f087b13b503b5f951f689e37ed47fb3f8fe"}], "stats": {"total": 150, "additions": 114, "deletions": 36}, "files": [{"sha": "c8d641ae5a8ffbd6eb325168f5e521e347202876", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630193739f91b48abaa3f9270f3bf9da9a552a8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630193739f91b48abaa3f9270f3bf9da9a552a8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=630193739f91b48abaa3f9270f3bf9da9a552a8f", "patch": "@@ -1,5 +1,11 @@\n 2000-08-13  Geoff Keating  <geoffk@cygnus.com>\n \n+\t* config/rs6000/rs6000.c (rs6000_select_section): Rewrite to\n+\tnot put stuff in .sdata unnecessarily.\n+\t(rs6000_unique_section): New function.\n+\t* config/rs6000/rs6000-protos.h: Add rs6000_unique_section.\n+\t* config/rs6000/sysv4.h (UNIQUE_SECTION): Define.\n+\n \t* c-typeck.c (build_array_ref): Don't complain about non-lvalue\n \tarrays in C99.  Don't try to look at DECL_REGISTER of a\n \tCOMPONENT_REF.  Don't complain twice about the same error."}, {"sha": "7d127ce268c86931e57119c30e665f8f1b691e06", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630193739f91b48abaa3f9270f3bf9da9a552a8f/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630193739f91b48abaa3f9270f3bf9da9a552a8f/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=630193739f91b48abaa3f9270f3bf9da9a552a8f", "patch": "@@ -126,6 +126,7 @@ extern int rs6000_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n extern void rs6000_set_default_type_attributes PARAMS ((tree));\n extern void rs6000_encode_section_info PARAMS ((tree));\n extern void rs6000_select_section PARAMS ((tree, int));\n+extern void rs6000_unique_section PARAMS ((tree, int));\n #ifdef ARGS_SIZE_RTX\n /* expr.h defines ARGS_SIZE_RTX and `enum direction' */\n extern enum direction function_arg_padding PARAMS ((enum machine_mode, tree));"}, {"sha": "83b72fd765c7988e44967829afb325a15aae1a9b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 94, "deletions": 35, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630193739f91b48abaa3f9270f3bf9da9a552a8f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630193739f91b48abaa3f9270f3bf9da9a552a8f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=630193739f91b48abaa3f9270f3bf9da9a552a8f", "patch": "@@ -7355,45 +7355,104 @@ rs6000_select_section (decl, reloc)\n      int reloc;\n {\n   int size = int_size_in_bytes (TREE_TYPE (decl));\n+  int needs_sdata;\n+  int readonly;\n+  static void (* const sec_funcs[4]) PARAMS ((void)) = {\n+    &const_section,\n+    &sdata2_section,\n+    &data_section,\n+    &sdata_section\n+  };\n+  \n+  needs_sdata = (size > 0 \n+\t\t && size <= g_switch_value\n+\t\t && rs6000_sdata != SDATA_NONE\n+\t\t && (rs6000_sdata != SDATA_DATA || TREE_PUBLIC (decl)));\n \n   if (TREE_CODE (decl) == STRING_CST)\n-    {\n-      if (! flag_writable_strings)\n-\tconst_section ();\n-      else\n-\tdata_section ();\n-    }\n+    readonly = ! flag_writable_strings;\n   else if (TREE_CODE (decl) == VAR_DECL)\n-    {\n-      if ((flag_pic && reloc)\n-\t  || ! TREE_READONLY (decl)\n-\t  || TREE_SIDE_EFFECTS (decl)\n-\t  || ! DECL_INITIAL (decl)\n-\t  || (DECL_INITIAL (decl) != error_mark_node\n-\t      && ! TREE_CONSTANT (DECL_INITIAL (decl))))\n-\t{\n-\t  if (rs6000_sdata != SDATA_NONE && (size > 0)\n-\t      && (size <= g_switch_value))\n-\t    sdata_section ();\n-\t  else\n-\t    data_section ();\n-\t}\n-      else\n-\t{\n-\t  if (rs6000_sdata != SDATA_NONE && (size > 0)\n-\t      && (size <= g_switch_value))\n-\t    {\n-\t      if (rs6000_sdata == SDATA_EABI)\n-\t\tsdata2_section ();\n-\t      else\n-\t\tsdata_section ();  /* System V doesn't have .sdata2/.sbss2 */\n-\t    }\n-\t  else\n-\t    const_section ();\n-\t}\n-    }\n+    readonly = (! (flag_pic && reloc)\n+\t\t&& TREE_READONLY (decl)\n+\t\t&& ! TREE_SIDE_EFFECTS (decl)\n+\t\t&& DECL_INITIAL (decl)\n+\t\t&& DECL_INITIAL (decl) != error_mark_node\n+\t\t&& TREE_CONSTANT (DECL_INITIAL (decl)));\n   else\n-    const_section ();\n+    readonly = 1;\n+  if (needs_sdata && rs6000_sdata != SDATA_EABI)\n+    readonly = 0;\n+  \n+  (*sec_funcs[(readonly ? 0 : 2) + (needs_sdata ? 1 : 0)])();\n+}\n+\n+/* A C statement to build up a unique section name, expressed as a\n+   STRING_CST node, and assign it to DECL_SECTION_NAME (decl).\n+   RELOC indicates whether the initial value of EXP requires\n+   link-time relocations.  If you do not define this macro, GCC will use\n+   the symbol name prefixed by `.' as the section name.  Note - this\n+   macro can now be called for unitialised data items as well as\n+   initialised data and functions.  */\n+\n+void\n+rs6000_unique_section (decl, reloc)\n+     tree decl;\n+     int reloc;\n+{\n+  int size = int_size_in_bytes (TREE_TYPE (decl));\n+  int needs_sdata;\n+  int readonly;\n+  int len;\n+  int sec;\n+  const char *name;\n+  char *string;\n+  const char *prefix;\n+\n+  static const char *const prefixes[7][2] =\n+  {\n+    { \".text.\",   \".gnu.linkonce.t.\" },\n+    { \".rodata.\", \".gnu.linkonce.r.\" },\n+    { \".sdata2.\", \".gnu.linkonce.s2.\" },\n+    { \".data.\",   \".gnu.linkonce.d.\" },\n+    { \".sdata.\",  \".gnu.linkonce.s.\" },\n+    { \".bss.\",    \".gnu.linkonce.b.\" },\n+    { \".sbss.\",   \".gnu.linkonce.sb.\" }\n+  };\n+  \n+  needs_sdata = (TREE_CODE (decl) != FUNCTION_DECL\n+\t\t && size > 0 \n+\t\t && size <= g_switch_value\n+\t\t && rs6000_sdata != SDATA_NONE\n+\t\t && (rs6000_sdata != SDATA_DATA || TREE_PUBLIC (decl)));\n+\n+  if (TREE_CODE (decl) == STRING_CST)\n+    readonly = ! flag_writable_strings;\n+  else if (TREE_CODE (decl) == VAR_DECL)\n+    readonly = (! (flag_pic && reloc)\n+\t\t&& TREE_READONLY (decl)\n+\t\t&& ! TREE_SIDE_EFFECTS (decl)\n+\t\t&& DECL_INITIAL (decl)\n+\t\t&& DECL_INITIAL (decl) != error_mark_node\n+\t\t&& TREE_CONSTANT (DECL_INITIAL (decl)));\n+  else\n+    readonly = 1;\n+  if (needs_sdata && rs6000_sdata != SDATA_EABI)\n+    readonly = 0;\n+\n+  sec = ((TREE_CODE (decl) == FUNCTION_DECL ? 0 : 1)\n+\t + (readonly ? 0 : 2) \n+\t + (needs_sdata ? 1 : 0)\n+\t + (DECL_INITIAL (decl) == 0\n+\t    || DECL_INITIAL (decl) == error_mark_node) ? 4 : 0);\n+\n+  name   = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+  prefix = prefixes[sec][DECL_ONE_ONLY (decl)];\n+  len    = strlen (name) + strlen (prefix);\n+  string = alloca (len + 1);\n+  \n+  sprintf (string, \"%s%s\", prefix, name);\n+  \n+  DECL_SECTION_NAME (decl) = build_string (len, string);\n }\n \n \f"}, {"sha": "a3208ac8aa89539a068deb09ecea822e0bb10284", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/630193739f91b48abaa3f9270f3bf9da9a552a8f/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/630193739f91b48abaa3f9270f3bf9da9a552a8f/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=630193739f91b48abaa3f9270f3bf9da9a552a8f", "patch": "@@ -549,7 +549,19 @@ fini_section ()\t\t\t\t\t\t\t\t\\\n \n /* Override elfos.h definition.  */\n #undef\tSELECT_SECTION\n-#define\tSELECT_SECTION(DECL,RELOC) rs6000_select_section (DECL, RELOC)\n+#define\tSELECT_SECTION(DECL, RELOC) rs6000_select_section (DECL, RELOC)\n+\n+/* A C statement to build up a unique section name, expressed as a\n+   STRING_CST node, and assign it to DECL_SECTION_NAME (decl).\n+   RELOC indicates whether the initial value of EXP requires\n+   link-time relocations.  If you do not define this macro, GCC will use\n+   the symbol name prefixed by `.' as the section name.  Note - this\n+   macro can now be called for unitialised data items as well as\n+   initialised data and functions.  */\n+\n+/* Override elfos.h definition.  */\n+#undef\tUNIQUE_SECTION\n+#define UNIQUE_SECTION(DECL, RELOC) rs6000_unique_section (DECL, RELOC)\n \n /* Return non-zero if this entry is to be written into the constant pool\n    in a special way.  We do so if this is a SYMBOL_REF, LABEL_REF or a CONST"}]}