{"sha": "9dfcd6092ef71da399221e59d535c5b893390243", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRmY2Q2MDkyZWY3MWRhMzk5MjIxZTU5ZDUzNWM1Yjg5MzM5MDI0Mw==", "commit": {"author": {"name": "James A. Morrison", "email": "ja2morri@uwaterloo.ca", "date": "2004-01-20T01:57:58Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2004-01-20T01:57:58Z"}, "message": "treelang.exp: Fill out this file.\n\n2004-01-18  James A. Morrison  <ja2morri@uwaterloo.ca>\n\n        * lib/treelang.exp: Fill out this file.\n        * lib/treelang-dg.exp: New File.\n\ntreelang:\n2004-01-18  James A. Morrison  <ja2morri@uwaterloo.ca>\n\n        * compile/compile.exp: New File.\n        * compile/tabs.tree: Test whether the front end\n        compiles code with tabs in it.\n\nFrom-SVN: r76194", "tree": {"sha": "c69e5ea4c388fcc04fe68460bf777966befa68ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c69e5ea4c388fcc04fe68460bf777966befa68ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dfcd6092ef71da399221e59d535c5b893390243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dfcd6092ef71da399221e59d535c5b893390243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dfcd6092ef71da399221e59d535c5b893390243", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dfcd6092ef71da399221e59d535c5b893390243/comments", "author": null, "committer": null, "parents": [{"sha": "e165d61b82fb42183b8ffb819b22fedfcd30d3c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e165d61b82fb42183b8ffb819b22fedfcd30d3c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e165d61b82fb42183b8ffb819b22fedfcd30d3c3"}], "stats": {"total": 354, "additions": 353, "deletions": 1}, "files": [{"sha": "fd010153d14eb5bd4a2ad27b05ae2851ca661eb9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfcd6092ef71da399221e59d535c5b893390243/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfcd6092ef71da399221e59d535c5b893390243/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9dfcd6092ef71da399221e59d535c5b893390243", "patch": "@@ -1,3 +1,8 @@\n+2004-01-18  James A. Morrison  <ja2morri@uwaterloo.ca>\n+\n+        * lib/treelang.exp: Fill out this file.\n+        * lib/treelang-dg.exp: New File.\n+\n 2004-01-20  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* gcc.c-torture/compile/981022-1.c: Remove."}, {"sha": "1a4b4e1eac82ac02ad60f3148058933b4c4db773", "filename": "gcc/testsuite/lib/treelang-dg.exp", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfcd6092ef71da399221e59d535c5b893390243/gcc%2Ftestsuite%2Flib%2Ftreelang-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfcd6092ef71da399221e59d535c5b893390243/gcc%2Ftestsuite%2Flib%2Ftreelang-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftreelang-dg.exp?ref=9dfcd6092ef71da399221e59d535c5b893390243", "patch": "@@ -0,0 +1,36 @@\n+#   Copyright (C) 1997, 1999, 2000, 2001, 2003, 2004\n+#   Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+load_lib gcc-dg.exp\n+\n+# Define gcc callbacks for dg.exp.\n+\n+proc treelang-dg-test { prog do_what extra_tool_flags } {\n+    return [gcc-dg-test-1 treelang_target_compile $prog $do_what $extra_tool_flags]\n+}\n+\n+proc treelang-dg-prune { system text } {\n+    return [gcc-dg-prune $system $text]\n+}\n+\n+# Utility routines.\n+\n+# Modified dg-runtest that can cycle through a list of optimization options\n+# as c-torture does.\n+proc treelang-dg-runtest { testcases default-extra-flags } {\n+    return [gcc-dg-runtest $testcases ${default-extra-flags}]\n+}"}, {"sha": "1337e92888c630240893cd891456b601f7a43323", "filename": "gcc/testsuite/lib/treelang.exp", "status": "modified", "additions": 264, "deletions": 1, "changes": 265, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfcd6092ef71da399221e59d535c5b893390243/gcc%2Ftestsuite%2Flib%2Ftreelang.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfcd6092ef71da399221e59d535c5b893390243/gcc%2Ftestsuite%2Flib%2Ftreelang.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftreelang.exp?ref=9dfcd6092ef71da399221e59d535c5b893390243", "patch": "@@ -1,4 +1,5 @@\n-# Copyright (C) 1988, 90, 91, 92, 95, 96, 1997, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+# Copyright (C) 1992, 1993, 1994, 1996, 1997, 2000, 2001, 2002, 2004\n+# Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -14,7 +15,269 @@\n # along with this program; if not, write to the Free Software\n # Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n+# This file was written by Rob Savoye (rob@cygnus.com)\n+# Currently maintained by James A. Morrison (ja2morri@uwaterloo.ca)\n+\n # Having this file here magically tells dejagnu that the treelang\n # directory is worthy of testing\n \n+# This file is basically treelang.exp with treelang replaced with treelang.\n+\n+# This file is loaded by the tool init file (eg: unix.exp).  It provides\n+# default definitions for treelang_start, etc. and other supporting cast members.\n+\n+# These globals are used by treelang_start if no compiler arguments are provided.\n+# They are also used by the various testsuites to define the environment:\n+# where to find stdio.h, libc.a, etc.\n+\n+load_lib libgloss.exp\n+load_lib prune.exp\n+load_lib gcc-defs.exp\n+\n+#\n+# TREELANG_UNDER_TEST is the compiler under test.\n+#\n+\n+#\n+# default_treelang_version -- extract and print the version number of the compiler\n+#\n+\n+proc default_treelang_version { } {\n+    global TREELANG_UNDER_TEST\n+\n+    treelang_init;\n+\n+    # ignore any arguments after the command\n+    set compiler [lindex $TREELANG_UNDER_TEST 0]\n+\n+    if ![is_remote host] {\n+\tset compiler_name [which $compiler];\n+    } else {\n+\tset compiler_name $compiler;\n+    }\n+\n+    # verify that the compiler exists\n+    if { $compiler_name != 0 } then {\n+\tset tmp [remote_exec host \"$compiler -v\"]\n+\tset status [lindex $tmp 0];\n+\tset output [lindex $tmp 1];\n+\tregexp \"version\\[^\\n\\r\\]*\" $output version\n+\tif { $status == 0 && [info exists version] } then {\n+\t    clone_output \"$compiler_name $version\\n\"\n+\t} else {\n+\t    clone_output \"Couldn't determine version of $compiler_name: $output\\n\"\n+\t}\n+    } else {\n+\t# compiler does not exist (this should have already been detected)\n+\twarning \"$compiler does not exist\"\n+    }\n+}\n+\n+# treelang_init -- called at the start of each .exp script.\n+#\n+# There currently isn't much to do, but always using it allows us to\n+# make some enhancements without having to go back and rewrite the scripts.\n+#\n+\n+set treelang_initialized 0\n+\n+proc treelang_init { args } {\n+    global rootme\n+    global tmpdir\n+    global libdir\n+    global gluefile wrap_flags\n+    global treelang_initialized\n+    global TREELANG_UNDER_TEST\n+    global TOOL_EXECUTABLE\n+    global treelang_libgcc_s_path\n+\n+    if { $treelang_initialized == 1 } { return; }\n+\n+    if ![info exists TREELANG_UNDER_TEST] then {\n+\tif [info exists TOOL_EXECUTABLE] {\n+\t    set TREELANG_UNDER_TEST $TOOL_EXECUTABLE;\n+\t} else {\n+\t    set TREELANG_UNDER_TEST [find_gcc]\n+\t}\n+    }\n+\n+    if ![info exists tmpdir] then {\n+\tset tmpdir /tmp\n+    }\n+    if { [target_info needs_status_wrapper]!=\"\" && ![info exists gluefile] } {\n+\tset gluefile ${tmpdir}/treelang-testglue.o;\n+\tset result [build_wrapper $gluefile];\n+\tif { $result != \"\" } {\n+\t    set gluefile [lindex $result 0];\n+\t    set wrap_flags [lindex $result 1];\n+\t} else {\n+\t    unset gluefile\n+\t}\n+    }\n+\n+    set treelang_libgcc_s_path \"${rootme}\"\n+    set compiler [lindex $TREELANG_UNDER_TEST 0]\n+    if { [is_remote host] == 0 && [which $compiler] != 0 } {\n+\tforeach i \"[exec $compiler --print-multi-lib]\" {\n+\t    set mldir \"\"\n+\t    regexp -- \"\\[a-z0-9=/\\.-\\]*;\" $i mldir\n+\t    set mldir [string trimright $mldir \"\\;@\"]\n+\t    if { \"$mldir\" == \".\" } {\n+\t\tcontinue\n+\t    }\n+\t    if { [llength [glob -nocomplain ${rootme}/${mldir}/libgcc_s*.so.*]] == 1 } {\n+\t\tappend treelang_libgcc_s_path \":${rootme}/${mldir}\"\n+\t    }\n+\t}\n+    }\n+}\n+\n+proc treelang_target_compile { source dest type options } {\n+    global rootme;\n+    global tmpdir;\n+    global gluefile wrap_flags;\n+    global srcdir\n+    global TREELANG_UNDER_TEST\n+    global TOOL_OPTIONS\n+    global ld_library_path\n+    global treelang_libgcc_s_path\n+\n+    set ld_library_path \".:${treelang_libgcc_s_path}\"\n+    lappend options \"libs=-ltreelang\"\n+\n+    if { [target_info needs_status_wrapper]!=\"\" && [info exists gluefile] } {\n+\tlappend options \"libs=${gluefile}\"\n+\tlappend options \"ldflags=$wrap_flags\"\n+    }\n+\n+    # TOOL_OPTIONS must come first, so that it doesn't override testcase\n+    # specific options.\n+    if [info exists TOOL_OPTIONS] {\n+\tset options [concat \"additional_flags=$TOOL_OPTIONS\" $options];\n+    }\n+\n+    # If we have built libtreelang along with the compiler (which usually\n+    # _is not_ the case on Mac OS X systems), point the test harness\n+    # at it (and associated headers).\n+\n+    return [target_compile $source $dest $type $options]\n+}\n+\n+#\n+# treelang_pass -- utility to record a testcase passed\n+#\n+\n+proc treelang_pass { testcase cflags } {\n+    if { \"$cflags\" == \"\" } {\n+\tpass \"$testcase\"\n+    } else {\n+\tpass \"$testcase, $cflags\"\n+    }\n+}\n+\n+#\n+# treelang_fail -- utility to record a testcase failed\n+#\n+\n+proc treelang_fail { testcase cflags } {\n+    if { \"$cflags\" == \"\" } {\n+\tfail \"$testcase\"\n+    } else {\n+\tfail \"$testcase, $cflags\"\n+    }\n+}\n+\n+#\n+# treelang_finish -- called at the end of every .exp script that calls treelang_init\n+#\n+# The purpose of this proc is to hide all quirks of the testing environment\n+# from the testsuites.  It also exists to undo anything that treelang_init did\n+# (that needs undoing).\n+#\n+\n+proc treelang_finish { } {\n+    # The testing harness apparently requires this.\n+    global errorInfo;\n+\n+    if [info exists errorInfo] then {\n+\tunset errorInfo\n+    }\n+\n+    # Might as well reset these (keeps our caller from wondering whether\n+    # s/he has to or not).\n+    global prms_id bug_id\n+    set prms_id 0\n+    set bug_id 0\n+}\n+\n+proc treelang_exit { } {\n+    global gluefile;\n+\n+    if [info exists gluefile] {\n+\tfile_on_build delete $gluefile;\n+\tunset gluefile;\n+    }\n+}\n+    \n+# If this is an older version of dejagnu (without runtest_file_p),\n+# provide one and assume the old syntax: foo1.exp bar1.c foo2.exp bar2.c.\n+# This can be deleted after next dejagnu release.\n+\n+if { [info procs runtest_file_p] == \"\" } then {\n+    proc runtest_file_p { runtests testcase } {\n+\tif { $runtests != \"\" && [regexp \"\\[.\\]\\[cC\\]\" $runtests] } then {\n+\t    if { [lsearch $runtests [file tail $testcase]] >= 0 } then {\n+\t\treturn 1\n+\t    } else {\n+\t\treturn 0\n+\t    }\n+\t}\n+\treturn 1\n+    }\n+}\n+\n+# Provide a definition of this if missing (delete after next dejagnu release).\n+\n+if { [info procs prune_warnings] == \"\" } then {\n+    proc prune_warnings { text } {\n+\treturn $text\n+    }\n+}\n+\n+# Utility used by mike-gcc.exp and c-torture.exp.\n+# Check the compiler(/assembler/linker) output for text indicating that\n+# the testcase should be marked as \"unsupported\".\n+#\n+# When dealing with a large number of tests, it's difficult to weed out the\n+# ones that are too big for a particular cpu (eg: 16 bit with a small amount\n+# of memory).  There are various ways to deal with this.  Here's one.\n+# Fortunately, all of the cases where this is likely to happen will be using\n+# gld so we can tell what the error text will look like.\n+\n+proc ${tool}_check_unsupported_p { output } {\n+    if [regexp \"(^|\\n)\\[^\\n\\]*: region \\[^\\n\\]* is full\" $output] {\n+\treturn \"memory full\"\n+    }\n+    return \"\"\n+}\n+\n+# Prune messages from treelang that aren't useful.\n+\n+proc prune_treelang_output { text } {\n+    #send_user \"Before:$text\\n\"\n+    regsub -all \"(^|\\n)\\[^\\n\\]*: In (function|method) \\[^\\n\\]*\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*: At top level:\\[^\\n\\]*\" $text \"\" text\n+\n+    # It would be nice to avoid passing anything to treelang that would cause it to\n+    # issue these messages (since ignoring them seems like a hack on our part),\n+    # but that's too difficult in the general case.  For example, sometimes\n+    # you need to use -B to point treelang at crt0.o, but there are some targets\n+    # that don't have crt0.o.\n+    regsub -all \"(^|\\n)\\[^\\n\\]*file path prefix \\[^\\n\\]* never used\" $text \"\" text\n+    regsub -all \"(^|\\n)\\[^\\n\\]*linker input file unused since linking not done\" $text \"\" text\n+\n+    #send_user \"After:$text\\n\"\n+\n+    return $text\n+}\n "}, {"sha": "5a594a12c6de458e3d59b088c8f68261fa27a043", "filename": "gcc/testsuite/treelang/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfcd6092ef71da399221e59d535c5b893390243/gcc%2Ftestsuite%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfcd6092ef71da399221e59d535c5b893390243/gcc%2Ftestsuite%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2FChangeLog?ref=9dfcd6092ef71da399221e59d535c5b893390243", "patch": "@@ -1,3 +1,9 @@\n+2004-01-18  James A. Morrison  <ja2morri@uwaterloo.ca>\n+\n+        * compile/compile.exp: New File.\n+        * compile/tabs.tree: Test whether the front end\n+        compiles code with tabs in it.\n+\n 2003-02-25  Tim Josling  <tej@melbpc.org.au>\n \n \t* treetests.exp (run3): set options to force aggressive GC, to"}, {"sha": "836c3251099c89801b3765d904f8c1b3062c524c", "filename": "gcc/testsuite/treelang/compile/compile.exp", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfcd6092ef71da399221e59d535c5b893390243/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fcompile.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfcd6092ef71da399221e59d535c5b893390243/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fcompile.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Fcompile.exp?ref=9dfcd6092ef71da399221e59d535c5b893390243", "patch": "@@ -0,0 +1,31 @@\n+# Tests for treelang; run from gcc/treelang/Make-lang.in => gcc/Makefile\n+\n+# Copyright (C) 2004 by The Free Software Foundation\n+\n+# This program is free software; you can redistribute it and/or modify it\n+# under the terms of the GNU General Public License as published by the\n+# Free Software Foundation; either version 2, or (at your option) any\n+# later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, 59 Temple Place - Suite 330,\n+# Boston, MA 02111-1307, USA.\n+#\n+# In other words, you are welcome to use, share and improve this program.\n+# You are forbidden to forbid anyone else to use, share and improve\n+# what you give them.   Help stamp out software-hoarding!\n+\n+# Treelang tests that only need to compile.\n+\n+# Load support procs.\n+load_lib treelang-dg.exp\n+\n+dg-init\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.tree]] \"\" \"\"\n+dg-finish"}, {"sha": "6294c15c49ab565580a41b7e91f8ef993ef163d6", "filename": "gcc/testsuite/treelang/compile/tabs.tree", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dfcd6092ef71da399221e59d535c5b893390243/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Ftabs.tree", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dfcd6092ef71da399221e59d535c5b893390243/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Ftabs.tree", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Ftreelang%2Fcompile%2Ftabs.tree?ref=9dfcd6092ef71da399221e59d535c5b893390243", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile }\n+external_definition int main(int argc);\n+\n+main {\n+\tautomatic int v1;\n+\tautomatic int v2;\n+\tv1 = argc;\n+\tv2 = 3;\n+\n+        return v2;\n+}"}]}