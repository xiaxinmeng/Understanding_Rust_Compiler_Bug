{"sha": "4894d69a1f37d54b6a612e58053db477ff5ba832", "node_id": "C_kwDOANBUbNoAKDQ4OTRkNjlhMWYzN2Q1NGI2YTYxMmU1ODA1M2RiNDc3ZmY1YmE4MzI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-03-23T09:57:20Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-03-23T12:17:16Z"}, "message": "libstdc++: Add missing constraints to std::bit_cast [PR105027]\n\nOur std::bit_cast was relying on the compiler to check for errors inside\n__builtin_bit_cast, instead of checking them as constraints. That means\nstd::bit_cast was not SFINAE-friendly.\n\nThis fix uses a requires-clause, so for old versions of Clang without\nconcepts support the function will still be unconstrained. At some point\nin future we can remove the #ifdef __cpp_concepts check and rely on all\ncompilers having full concepts support in C++20 mode.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/105027\n\t* include/std/bit (bit_cast): Add constraints.\n\t* testsuite/26_numerics/bit/bit.cast/105027.cc: New test.", "tree": {"sha": "c28015e1136893a110e0ef71075f312d8957209a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c28015e1136893a110e0ef71075f312d8957209a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4894d69a1f37d54b6a612e58053db477ff5ba832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4894d69a1f37d54b6a612e58053db477ff5ba832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4894d69a1f37d54b6a612e58053db477ff5ba832", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4894d69a1f37d54b6a612e58053db477ff5ba832/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "018805e2791bafb40f8937d371d31325b037880d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/018805e2791bafb40f8937d371d31325b037880d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/018805e2791bafb40f8937d371d31325b037880d"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "a40f1ce99df45e5ccbcd6d0f187fd53189b114b7", "filename": "libstdc++-v3/include/std/bit", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4894d69a1f37d54b6a612e58053db477ff5ba832/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4894d69a1f37d54b6a612e58053db477ff5ba832/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbit?ref=4894d69a1f37d54b6a612e58053db477ff5ba832", "patch": "@@ -73,6 +73,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     [[nodiscard]]\n     constexpr _To\n     bit_cast(const _From& __from) noexcept\n+#ifdef __cpp_concepts\n+    requires (sizeof(_To) == sizeof(_From))\n+      && __is_trivially_copyable(_To) && __is_trivially_copyable(_From)\n+#endif\n     {\n       return __builtin_bit_cast(_To, __from);\n     }"}, {"sha": "301d94ec575ad075c4116933944a1884c9063135", "filename": "libstdc++-v3/testsuite/26_numerics/bit/bit.cast/105027.cc", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4894d69a1f37d54b6a612e58053db477ff5ba832/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.cast%2F105027.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4894d69a1f37d54b6a612e58053db477ff5ba832/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.cast%2F105027.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fbit%2Fbit.cast%2F105027.cc?ref=4894d69a1f37d54b6a612e58053db477ff5ba832", "patch": "@@ -0,0 +1,18 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+// PR libstdc++/105027 - Missing constraints on std::bit_cast\n+\n+#include <bit>\n+\n+template<class T, class U>\n+concept BitCastable = requires(const U& u) { std::bit_cast<T>(u); };\n+\n+static_assert(BitCastable<int, unsigned>); // OK\n+\n+static_assert(!BitCastable<int, char>); // #1: different size\n+\n+struct A { A(A const&); int i; };\n+static_assert(!BitCastable<int, A>); // #2: not trivially copyable\n+\n+static_assert(!BitCastable<long, int()>); // #3: sizeof(int()) is ill-formed"}]}