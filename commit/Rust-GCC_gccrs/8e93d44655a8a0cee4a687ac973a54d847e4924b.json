{"sha": "8e93d44655a8a0cee4a687ac973a54d847e4924b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU5M2Q0NDY1NWE4YTBjZWU0YTY4N2FjOTczYTU0ZDg0N2U0OTI0Yg==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-05-11T06:35:10Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-05-11T06:35:10Z"}, "message": "cp-tree.h (finish_label_expr, [...]): Delete.\n\n\t* cp-tree.h (finish_label_expr, lookup_label): Delete.\n\t* parse.y: Update for '&&'; don't issue warning here.\n\t* semantics.c (finish_label_expr): Delete.\n\nFrom-SVN: r41958", "tree": {"sha": "b3e6d409ceaedc5860583b41d8fdd1da198868d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3e6d409ceaedc5860583b41d8fdd1da198868d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e93d44655a8a0cee4a687ac973a54d847e4924b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e93d44655a8a0cee4a687ac973a54d847e4924b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e93d44655a8a0cee4a687ac973a54d847e4924b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e93d44655a8a0cee4a687ac973a54d847e4924b/comments", "author": null, "committer": null, "parents": [{"sha": "487dcdb055f2cfaab30e02bc0981eeade3d193d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/487dcdb055f2cfaab30e02bc0981eeade3d193d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/487dcdb055f2cfaab30e02bc0981eeade3d193d7"}], "stats": {"total": 37, "additions": 7, "deletions": 30}, "files": [{"sha": "e80ec37933fa3d8799303086e05bb1044f207222", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e93d44655a8a0cee4a687ac973a54d847e4924b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e93d44655a8a0cee4a687ac973a54d847e4924b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8e93d44655a8a0cee4a687ac973a54d847e4924b", "patch": "@@ -1,3 +1,9 @@\n+2001-05-11  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cp-tree.h (finish_label_expr, lookup_label): Delete.\n+\t* parse.y: Update for '&&'; don't issue warning here.\n+\t* semantics.c (finish_label_expr): Delete.\n+\n 2001-05-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* splay-tree.h (splay_tree_max): New function."}, {"sha": "c2ef39110d0dea1d10c6c4a17a64f224715b1c53", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e93d44655a8a0cee4a687ac973a54d847e4924b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e93d44655a8a0cee4a687ac973a54d847e4924b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8e93d44655a8a0cee4a687ac973a54d847e4924b", "patch": "@@ -3791,7 +3791,6 @@ extern tree push_using_decl                     PARAMS ((tree, tree));\n extern tree push_using_directive                PARAMS ((tree));\n extern void push_class_level_binding\t\tPARAMS ((tree, tree));\n extern tree implicitly_declare\t\t\tPARAMS ((tree));\n-extern tree lookup_label\t\t\tPARAMS ((tree));\n extern tree declare_local_label                 PARAMS ((tree));\n extern tree define_label\t\t\tPARAMS ((const char *, int, tree));\n extern void check_goto\t\t\t\tPARAMS ((tree));\n@@ -4269,7 +4268,6 @@ extern tree finish_object_call_expr             PARAMS ((tree, tree, tree));\n extern tree finish_qualified_object_call_expr   PARAMS ((tree, tree, tree));\n extern tree finish_pseudo_destructor_call_expr  PARAMS ((tree, tree, tree));\n extern tree finish_qualified_call_expr          PARAMS ((tree, tree));\n-extern tree finish_label_address_expr           PARAMS ((tree));\n extern tree finish_unary_op_expr                PARAMS ((enum tree_code, tree));\n extern tree finish_id_expr                      PARAMS ((tree));\n extern void save_type_access_control\t\tPARAMS ((tree));"}, {"sha": "70525e00fcb4112939593cdde93bffb101a77e4f", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e93d44655a8a0cee4a687ac973a54d847e4924b/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e93d44655a8a0cee4a687ac973a54d847e4924b/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=8e93d44655a8a0cee4a687ac973a54d847e4924b", "patch": "@@ -1224,9 +1224,7 @@ unary_expr:\n                 { $$ = finish_unary_op_expr ($1, $2); }\n \t/* Refer to the address of a label as a pointer.  */\n \t| ANDAND identifier\n-\t\t{ if (pedantic)\n-\t\t    pedwarn (\"ISO C++ forbids `&&'\");\n-  \t\t  $$ = finish_label_address_expr ($2); }\n+\t\t{ $$ = finish_label_address_expr ($2); }\n \t| SIZEOF unary_expr  %prec UNARY\n \t\t{ $$ = expr_sizeof ($2); }\n \t| SIZEOF '(' type_id ')'  %prec HYPERUNARY"}, {"sha": "21290fe6b6d54f1bbf365c65d3ebb04e5dd4bc3b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e93d44655a8a0cee4a687ac973a54d847e4924b/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e93d44655a8a0cee4a687ac973a54d847e4924b/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=8e93d44655a8a0cee4a687ac973a54d847e4924b", "patch": "@@ -1491,31 +1491,6 @@ finish_qualified_call_expr (fn, args)\n \t\t\t      args);\n }\n \n-/* Finish an expression taking the address of LABEL.  Returns an\n-   expression for the address.  */\n-\n-tree \n-finish_label_address_expr (label)\n-     tree label;\n-{\n-  tree result;\n-\n-  label = lookup_label (label);\n-  if (label == NULL_TREE)\n-    result = null_pointer_node;\n-  else\n-    {\n-      TREE_USED (label) = 1;\n-      result = build1 (ADDR_EXPR, ptr_type_node, label);\n-      TREE_CONSTANT (result) = 1;\n-      /* This function cannot be inlined.  All jumps to the addressed\n-\t label should wind up at the same point.  */\n-      DECL_UNINLINABLE (current_function_decl) = 1;\n-    }\n-\n-  return result;\n-}\n-\n /* Finish an expression of the form CODE EXPR.  */\n \n tree"}]}