{"sha": "3bf1e9845306fd08cab498b32efde5842a1daefb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JmMWU5ODQ1MzA2ZmQwOGNhYjQ5OGIzMmVmZGU1ODQyYTFkYWVmYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2002-03-31T19:48:22Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2002-03-31T19:48:22Z"}, "message": "emit-rtl.c (adjust_address_1, [...]): Cast value to unsigned HOST_WIDE_INT, not unsigned int.\n\n\t* emit-rtl.c (adjust_address_1, offset_address): Cast value to\n\tunsigned HOST_WIDE_INT, not unsigned int.\n\nFrom-SVN: r51670", "tree": {"sha": "c8c9924ee13212bd6f43e070459650820524b47f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8c9924ee13212bd6f43e070459650820524b47f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bf1e9845306fd08cab498b32efde5842a1daefb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bf1e9845306fd08cab498b32efde5842a1daefb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bf1e9845306fd08cab498b32efde5842a1daefb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bf1e9845306fd08cab498b32efde5842a1daefb/comments", "author": null, "committer": null, "parents": [{"sha": "0864c5260d23477b593883bf812527f1d66692ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0864c5260d23477b593883bf812527f1d66692ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0864c5260d23477b593883bf812527f1d66692ea"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "a3e1d9b6261577f7d625a0bec1e5e45406184435", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf1e9845306fd08cab498b32efde5842a1daefb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf1e9845306fd08cab498b32efde5842a1daefb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bf1e9845306fd08cab498b32efde5842a1daefb", "patch": "@@ -1,3 +1,8 @@\n+Sun Mar 31 14:43:24 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* emit-rtl.c (adjust_address_1, offset_address): Cast value to\n+\tunsigned HOST_WIDE_INT, not unsigned int.\n+\n 2002-03-31  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/6096, middle-end/6098, middle-end/6099"}, {"sha": "3fcb172186b631b53c175e23b2bd767b9369f610", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf1e9845306fd08cab498b32efde5842a1daefb/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf1e9845306fd08cab498b32efde5842a1daefb/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=3bf1e9845306fd08cab498b32efde5842a1daefb", "patch": "@@ -1866,8 +1866,9 @@ adjust_address_1 (memref, mode, offset, validate, adjust)\n      lowest-order set bit in OFFSET, but don't change the alignment if OFFSET\n      if zero.  */\n   if (offset != 0)\n-    memalign = MIN (memalign,\n-\t\t    (unsigned int) (offset & -offset) * BITS_PER_UNIT);\n+    memalign\n+      = MIN (memalign,\n+\t     (unsigned HOST_WIDE_INT) (offset & -offset) * BITS_PER_UNIT);\n \n   /* We can compute the size in a number of ways.  */\n   if (GET_MODE (new) != BLKmode)\n@@ -1937,7 +1938,7 @@ offset_address (memref, offset, pow2)\n   MEM_ATTRS (new)\n     = get_mem_attrs (MEM_ALIAS_SET (memref), MEM_EXPR (memref), 0, 0,\n \t\t     MIN (MEM_ALIGN (memref),\n-\t\t\t  (unsigned int) pow2 * BITS_PER_UNIT),\n+\t\t\t  (unsigned HOST_WIDE_INT) pow2 * BITS_PER_UNIT),\n \t\t     GET_MODE (new));\n   return new;\n }\n@@ -3250,7 +3251,7 @@ add_insn_after (insn, after)\n     }\n \n   if (basic_block_for_insn\n-      && (unsigned int)INSN_UID (after) < basic_block_for_insn->num_elements\n+      && (unsigned int) INSN_UID (after) < basic_block_for_insn->num_elements\n       && (bb = BLOCK_FOR_INSN (after)))\n     {\n       set_block_for_insn (insn, bb);\n@@ -3319,7 +3320,7 @@ add_insn_before (insn, before)\n     }\n \n   if (basic_block_for_insn\n-      && (unsigned int)INSN_UID (before) < basic_block_for_insn->num_elements\n+      && (unsigned int) INSN_UID (before) < basic_block_for_insn->num_elements\n       && (bb = BLOCK_FOR_INSN (before)))\n     {\n       set_block_for_insn (insn, bb);\n@@ -3399,15 +3400,15 @@ remove_insn (insn)\n \tabort ();\n     }\n   if (basic_block_for_insn\n-      && (unsigned int)INSN_UID (insn) < basic_block_for_insn->num_elements\n+      && (unsigned int) INSN_UID (insn) < basic_block_for_insn->num_elements\n       && (bb = BLOCK_FOR_INSN (insn)))\n     {\n       if (INSN_P (insn))\n         bb->flags |= BB_DIRTY;\n       if (bb->head == insn)\n \t{\n-\t  /* Never ever delete the basic block note without deleting whole basic\n-\t     block.  */\n+\t  /* Never ever delete the basic block note without deleting whole\n+\t     basic block.  */\n \t  if (GET_CODE (insn) == NOTE)\n \t    abort ();\n \t  bb->head = next;\n@@ -3477,14 +3478,15 @@ reorder_insns (from, to, after)\n   reorder_insns_nobb (from, to, after);\n \n   if (basic_block_for_insn\n-      && (unsigned int)INSN_UID (after) < basic_block_for_insn->num_elements\n+      && (unsigned int) INSN_UID (after) < basic_block_for_insn->num_elements\n       && (bb = BLOCK_FOR_INSN (after)))\n     {\n       rtx x;\n       bb->flags |= BB_DIRTY;\n  \n       if (basic_block_for_insn\n-\t  && (unsigned int)INSN_UID (from) < basic_block_for_insn->num_elements\n+\t  && ((unsigned int) INSN_UID (from)\n+\t      < basic_block_for_insn->num_elements)\n \t  && (bb2 = BLOCK_FOR_INSN (from)))\n \t{\n \t  if (bb2->end == to)\n@@ -4011,7 +4013,7 @@ emit_insns_after (first, after)\n     return after;\n \n   if (basic_block_for_insn\n-      && (unsigned int)INSN_UID (after) < basic_block_for_insn->num_elements\n+      && (unsigned int) INSN_UID (after) < basic_block_for_insn->num_elements\n       && (bb = BLOCK_FOR_INSN (after)))\n     {\n       bb->flags |= BB_DIRTY;"}]}