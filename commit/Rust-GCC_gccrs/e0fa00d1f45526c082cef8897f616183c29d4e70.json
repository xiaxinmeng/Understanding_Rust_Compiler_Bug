{"sha": "e0fa00d1f45526c082cef8897f616183c29d4e70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBmYTAwZDFmNDU1MjZjMDgyY2VmODg5N2Y2MTYxODNjMjlkNGU3MA==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-02-26T00:25:52Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-02-26T00:25:52Z"}, "message": "treelang.texi: Remove extra contribution notice.\n\n2005-02-25  James A. Morrrison  <phython@gcc.gnu.org>\n\n        * treelang.texi: Remove extra contribution notice.\n        Split up some run-on sentences.  Document function parameters\n        as optional.  Indicate automatic variables can now be at any scope.\n        Mention literals are only signed if they are preceded by a unary\n        plus or minus.  Clarify interoperability with C.\n\nFrom-SVN: r95569", "tree": {"sha": "bf1b5c8c18fb1351616643e1a16e53f17dbf264e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf1b5c8c18fb1351616643e1a16e53f17dbf264e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0fa00d1f45526c082cef8897f616183c29d4e70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0fa00d1f45526c082cef8897f616183c29d4e70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0fa00d1f45526c082cef8897f616183c29d4e70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0fa00d1f45526c082cef8897f616183c29d4e70/comments", "author": null, "committer": null, "parents": [{"sha": "d9771cbd4a62f2921a85e1763874bbf6f42208f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9771cbd4a62f2921a85e1763874bbf6f42208f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9771cbd4a62f2921a85e1763874bbf6f42208f8"}], "stats": {"total": 75, "additions": 39, "deletions": 36}, "files": [{"sha": "f6c2b203322bf2b64b7b6dd2497c993b25ed0dd5", "filename": "gcc/treelang/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0fa00d1f45526c082cef8897f616183c29d4e70/gcc%2Ftreelang%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0fa00d1f45526c082cef8897f616183c29d4e70/gcc%2Ftreelang%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2FChangeLog?ref=e0fa00d1f45526c082cef8897f616183c29d4e70", "patch": "@@ -1,3 +1,11 @@\n+2005-02-25  James A. Morrrison  <phython@gcc.gnu.org>\n+\n+\t* treelang.texi: Remove extra contribution notice.\n+\tSplit up some run-on sentences.  Document function parameters\n+\tas optional.  Indicate automatic variables can now be at any scope.\n+\tMention literals are only signed if they are preceded by a unary\n+\tplus or minus.  Clarify interoperability with C.\n+\n 2005-02-25  James A. Morrison  <phython@gcc.gnu.org>\n \n \t* treelang.texi: Fix whitespacing."}, {"sha": "bc6e75ba8e43055db94638a172bed8dcfd7134c9", "filename": "gcc/treelang/treelang.texi", "status": "modified", "additions": 31, "deletions": 36, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0fa00d1f45526c082cef8897f616183c29d4e70/gcc%2Ftreelang%2Ftreelang.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0fa00d1f45526c082cef8897f616183c29d4e70/gcc%2Ftreelang%2Ftreelang.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftreelang%2Ftreelang.texi?ref=e0fa00d1f45526c082cef8897f616183c29d4e70", "patch": "@@ -107,8 +107,8 @@ texts being (a) (see below), and with the Back-Cover Texts being (b)\n @ifset INTERNALS\n @ifset USING\n This file documents the use and the internals of the GNU Treelang\n-(@code{treelang}) compiler. At the moment this manual is not\n-incorporated into the main GCC manual as it is too incomplete. It\n+(@code{treelang}) compiler.  At the moment this manual is not\n+incorporated into the main GCC manual as it is incomplete.  It\n corresponds to the @value{which-treelang} version of @code{treelang}.\n @end ifset\n @end ifset\n@@ -128,12 +128,6 @@ Boston, MA 02111-1307 USA\n @insertcopying\n @end ifnottex\n \n-treelang was Contributed by Tim Josling (@email{@value{email-josling}}).\n-Inspired by and based on the 'toy' language, written by Richard Kenner.\n-\n-This document was written by Tim Josling, based on the GNU C++\n-documentation.\n-\n @setchapternewpage odd\n @c @finalout\n @titlepage\n@@ -174,23 +168,21 @@ Boston, MA 02111-1307, USA@*\n \n @ifset INTERNALS\n @ifset USING\n-This manual documents how to run, install and maintain @code{treelang},\n-as well as its new features and incompatibilities,\n-and how to report bugs.\n-It corresponds to the @value{which-treelang} version of @code{treelang}.\n+This manual documents how to run, install and maintain @code{treelang}.\n+It also documents the features and incompatibilities in the @value{which-treelang}\n+version of @code{treelang}.\n @end ifset\n @end ifset\n \n @ifclear INTERNALS\n-This manual documents how to run and install @code{treelang},\n-as well as its new features and incompatibilities, and how to report\n-bugs.\n-It corresponds to the @value{which-treelang} version of @code{treelang}.\n+This manual documents how to run and install @code{treelang}.\n+It also documents the features and incompatibilities in the @value{which-treelang}\n+version of @code{treelang}.\n @end ifclear\n @ifclear USING\n-This manual documents how to maintain @code{treelang}, as well as its\n-new features and incompatibilities, and how to report bugs.  It\n-corresponds to the @value{which-treelang} version of @code{treelang}.\n+This manual documents how to maintain @code{treelang}.\n+It also documents the features and incompatibilities in the @value{which-treelang}\n+version of @code{treelang}.\n @end ifclear\n \n @end ifnottex\n@@ -429,9 +421,9 @@ used to separate parameters in a function prototype or in a function call\n @item ;\n used to end a statement\n @item +\n-addition\n+addition, or unary plus for signed literals\n @item - \n-subtraction\n+subtraction, or unary minus for signed literals\n @item = \n assignment\n @item ==\n@@ -443,7 +435,7 @@ begin 'else' portion of IF statement\n @item static\n indicate variable is permanent, or function has file scope only\n @item automatic\n-indicate that variable is allocated for the life of the function\n+indicate that variable is allocated for the life of the current scope\n @item external_reference\n indicate that variable or function is defined in another file\n @item external_definition\n@@ -514,9 +506,9 @@ This defines the scope, duration and visibility of a function or variable\n @enumerate 1\n \n @item \n-automatic: This means a variable is allocated at start of function and\n-released when the function returns. This can only be used for variables\n-within functions. It cannot be used for functions.\n+automatic: This means a variable is allocated at start of the current scope and\n+released when the current scope is exited.  This can only be used for variables\n+within functions.  It cannot be used for functions.\n \n @item \n static: This means a variable is allocated at start of program and\n@@ -562,36 +554,38 @@ parameter_list OR parameter [, parameter]...\n @item\n parameter: variable_declaration ,\n \n-The variable declarations must not have initialisations.\n+The variable declarations must not have initializations.\n \n @item \n initial: = value\n \n @item\n value: integer_constant\n \n+Values without a unary plus or minus are considered to be unsigned.\n @smallexample\n-eg 1 +2 -3\n+e.g.@: 1 +2 -3\n @end smallexample\n \n @item\n-function_declaration: name @{variable_declarations statements @}\n+function_declaration: name @{ variable_declarations statements @}\n \n A function consists of the function name then the declarations (if any)\n and statements (if any) within one pair of braces.\n \n The details of the function arguments come from the function\n-prototype. The function prototype must precede the function declaration\n+prototype.  The function prototype must precede the function declaration\n in the file.\n \n @item\n statement: if_statement OR expression_statement OR return_statement\n \n @item\n-if_statement: if (expression) @{ statements @} else @{ statements @}\n+if_statement: if ( expression ) @{ variable_declarations statements @}\n+else @{ variable_declarations statements @}\n \n The first lot of statements is executed if the expression is\n-nonzero. Otherwise the second lot of statements is executed. Either\n+nonzero.  Otherwise the second lot of statements is executed.  Either\n list of statements may be empty, but both sets of braces and the else must be present. \n \n @smallexample\n@@ -608,7 +602,7 @@ a=b;\n @item\n expression_statement: expression;\n \n-The expression is executed and any side effects, such \n+The expression is executed, including any side effects.\n \n @item\n return_statement: return expression_opt;\n@@ -716,8 +710,9 @@ the programmer's intention.)\n @cindex warnings\n @cindex questionable instructions\n @item\n-There are no warnings in treelang. A program is either correct or in\n-error.\n+There are few warnings in treelang.  A program is either correct or in\n+error.  The only exception to this is an expression in a return statement for\n+functions that return nothing.\n @end itemize\n \n @cindex components of treelang\n@@ -919,8 +914,8 @@ and everybody else, so you should be able to freely mix treelang and C\n (and C++) code, with one proviso.\n \n C promotes small integer types to 'int' when used as function parameters and \n-return values. The treelang compiler does not do this, so if you want to interface\n-to C, you need to specify the promoted value, not the nominal value. \n+return values in non-prototyped functions.  Since treelang has no\n+non-prototyped functions, the treelang compiler does not do this.\n \n @ifset INTERNALS\n @node treelang internals, Open Questions, Other Languages, Top"}]}