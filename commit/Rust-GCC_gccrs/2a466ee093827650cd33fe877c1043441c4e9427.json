{"sha": "2a466ee093827650cd33fe877c1043441c4e9427", "node_id": "C_kwDOANBUbNoAKDJhNDY2ZWUwOTM4Mjc2NTBjZDMzZmU4NzdjMTA0MzQ0MWM0ZTk0Mjc", "commit": {"author": {"name": "Julien Bortolussi", "email": "bortolussi@adacore.com", "date": "2022-04-26T10:02:59Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-06-02T09:06:43Z"}, "message": "[Ada] Make the functional Maps and Sets unbounded\n\nBefore this patch, the Functional Sets ans Maps were bounded both from\nthe user and the implementation points of view.  To make them closer to\nmathematical Sets ans Maps, this patch removes the bounds from the\ncontracts. Note that, in practice, they are still bounded by\nCount_Type'Last, even if the user is not aware of it anymore.\n\nThis patch removed constraints on length of sets and maps from the\npreconditions of functions. The function Length and Num_Overlaps now\nreturn a Big_Natural.\n\ngcc/ada/\n\n\t* libgnat/a-cofuse.ads, libgnat/a-cofuse.adb,\n\tlibgnat/a-cofuma.ads, libgnat/a-cofuma.adb: Make Length and\n\tNum_Overlaps return Big_Natural.\n\t* libgnat/a-cforse.ads, libgnat/a-cforse.adb,\n\tlibgnat/a-cforma.adb, libgnat/a-cfhase.ads,\n\tlibgnat/a-cfhase.adb, libgnat/a-cfhama.adb,\n\tlibgnat/a-cfdlli.adb: Adapt code to handle Big_Integers instead\n\tof Count_Type.", "tree": {"sha": "61c4f0c2466e77c5a15281c1ea15b25b1acca73a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61c4f0c2466e77c5a15281c1ea15b25b1acca73a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a466ee093827650cd33fe877c1043441c4e9427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a466ee093827650cd33fe877c1043441c4e9427", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a466ee093827650cd33fe877c1043441c4e9427", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a466ee093827650cd33fe877c1043441c4e9427/comments", "author": {"login": "JulienBortolussiAda", "id": 103429088, "node_id": "U_kgDOBioz4A", "avatar_url": "https://avatars.githubusercontent.com/u/103429088?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulienBortolussiAda", "html_url": "https://github.com/JulienBortolussiAda", "followers_url": "https://api.github.com/users/JulienBortolussiAda/followers", "following_url": "https://api.github.com/users/JulienBortolussiAda/following{/other_user}", "gists_url": "https://api.github.com/users/JulienBortolussiAda/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulienBortolussiAda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulienBortolussiAda/subscriptions", "organizations_url": "https://api.github.com/users/JulienBortolussiAda/orgs", "repos_url": "https://api.github.com/users/JulienBortolussiAda/repos", "events_url": "https://api.github.com/users/JulienBortolussiAda/events{/privacy}", "received_events_url": "https://api.github.com/users/JulienBortolussiAda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c132238a51d407e1ab2388eaf8c6bce2fe5637f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c132238a51d407e1ab2388eaf8c6bce2fe5637f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c132238a51d407e1ab2388eaf8c6bce2fe5637f"}], "stats": {"total": 149, "additions": 100, "deletions": 49}, "files": [{"sha": "bbb8fd449a7b7df382e5bf036602b64c5ae4b13a", "filename": "gcc/ada/libgnat/a-cfdlli.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cfdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cfdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cfdlli.adb?ref=2a466ee093827650cd33fe877c1043441c4e9427", "patch": "@@ -29,9 +29,17 @@ with Ada.Containers.Stable_Sorting; use Ada.Containers.Stable_Sorting;\n \n with System; use type System.Address;\n \n+with Ada.Numerics.Big_Numbers.Big_Integers;\n+use Ada.Numerics.Big_Numbers.Big_Integers;\n+\n package body Ada.Containers.Formal_Doubly_Linked_Lists with\n   SPARK_Mode => Off\n is\n+   --  Convert Count_Type to Big_Interger\n+\n+   package Conversions is new Signed_Conversions (Int => Count_Type);\n+   use Conversions;\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -809,7 +817,7 @@ is\n \n          while Position /= 0 loop\n             R := P.Add (R, (Node => Position), I);\n-            pragma Assert (P.Length (R) = I);\n+            pragma Assert (P.Length (R) = To_Big_Integer (I));\n             Position := Container.Nodes (Position).Next;\n             I := I + 1;\n          end loop;"}, {"sha": "bdf2c61d61e4ea08117ec7c855d2bf8aba1cd093", "filename": "gcc/ada/libgnat/a-cfhama.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cfhama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cfhama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cfhama.adb?ref=2a466ee093827650cd33fe877c1043441c4e9427", "patch": "@@ -33,6 +33,9 @@ pragma Elaborate_All (Ada.Containers.Hash_Tables.Generic_Formal_Keys);\n \n with Ada.Containers.Prime_Numbers; use Ada.Containers.Prime_Numbers;\n \n+with Ada.Numerics.Big_Numbers.Big_Integers;\n+use Ada.Numerics.Big_Numbers.Big_Integers;\n+\n with System; use type System.Address;\n \n package body Ada.Containers.Formal_Hashed_Maps with\n@@ -71,6 +74,13 @@ is\n    function Vet (Container : Map; Position : Cursor) return Boolean\n      with Inline;\n \n+   --  Convert Count_Type to Big_Interger\n+\n+   package Conversions is new Signed_Conversions (Int => Count_Type);\n+\n+   function Big (J : Count_Type) return Big_Integer renames\n+     Conversions.To_Big_Integer;\n+\n    --------------------------\n    -- Local Instantiations --\n    --------------------------\n@@ -526,7 +536,7 @@ is\n \n          while Position /= 0 loop\n             R := P.Add (R, (Node => Position), I);\n-            pragma Assert (P.Length (R) = I);\n+            pragma Assert (P.Length (R) = Big (I));\n             Position := HT_Ops.Next (Container.Content, Position);\n             I := I + 1;\n          end loop;"}, {"sha": "34afa554c5f7068cfddb35732e5b02f8024d8c8c", "filename": "gcc/ada/libgnat/a-cfhase.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cfhase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cfhase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cfhase.adb?ref=2a466ee093827650cd33fe877c1043441c4e9427", "patch": "@@ -753,7 +753,7 @@ is\n \n          while Position /= 0 loop\n             R := P.Add (R, (Node => Position), I);\n-            pragma Assert (P.Length (R) = I);\n+            pragma Assert (P.Length (R) = Big (I));\n             Position := HT_Ops.Next (Container.Content, Position);\n             I := I + 1;\n          end loop;"}, {"sha": "80ce9485b2dc51653120823667a767f84b0e27ac", "filename": "gcc/ada/libgnat/a-cfhase.ads", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cfhase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cfhase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cfhase.ads?ref=2a466ee093827650cd33fe877c1043441c4e9427", "patch": "@@ -48,6 +48,8 @@\n with Ada.Containers.Functional_Maps;\n with Ada.Containers.Functional_Sets;\n with Ada.Containers.Functional_Vectors;\n+with Ada.Numerics.Big_Numbers.Big_Integers;\n+use Ada.Numerics.Big_Numbers.Big_Integers;\n private with Ada.Containers.Hash_Tables;\n \n generic\n@@ -70,6 +72,13 @@ is\n    pragma Assertion_Policy (Contract_Cases => Ignore);\n    pragma Annotate (CodePeer, Skip_Analysis);\n \n+   --  Convert Count_Type to Big_Interger.\n+\n+   package Conversions is new Signed_Conversions (Int => Count_Type);\n+\n+   function Big (J : Count_Type) return Big_Integer renames\n+     Conversions.To_Big_Integer;\n+\n    type Set (Capacity : Count_Type; Modulus : Hash_Type) is private with\n      Iterable => (First       => First,\n                   Next        => Next,\n@@ -261,7 +270,7 @@ is\n \n         Ghost,\n         Global => null,\n-        Post   => M.Length (Model'Result) = Length (Container);\n+        Post   => M.Length (Model'Result) = Big (Length (Container));\n \n       function Elements (Container : Set) return E.Sequence with\n       --  The Elements sequence represents the underlying list structure of\n@@ -859,9 +868,9 @@ is\n        Length (Source) - Length (Target and Source) <=\n          Target.Capacity - Length (Target),\n      Post   =>\n-       Length (Target) = Length (Target)'Old\n+       Big (Length (Target)) = Big (Length (Target)'Old)\n          - M.Num_Overlaps (Model (Target)'Old, Model (Source))\n-         + Length (Source)\n+         + Big (Length (Source))\n \n          --  Elements already in Target are still in Target\n \n@@ -907,9 +916,9 @@ is\n      Global => null,\n      Pre    => Length (Left) <= Count_Type'Last - Length (Right),\n      Post   =>\n-       Length (Union'Result) = Length (Left)\n+       Big (Length (Union'Result)) = Big (Length (Left))\n          - M.Num_Overlaps (Model (Left), Model (Right))\n-         + Length (Right)\n+         + Big (Length (Right))\n \n          --  Elements of Left and Right are in the result of Union\n \n@@ -946,7 +955,7 @@ is\n    procedure Intersection (Target : in out Set; Source : Set) with\n      Global => null,\n      Post   =>\n-       Length (Target) =\n+       Big (Length (Target)) =\n          M.Num_Overlaps (Model (Target)'Old, Model (Source))\n \n          --  Elements of Target were already in Target\n@@ -982,7 +991,7 @@ is\n    function Intersection (Left, Right : Set) return Set with\n      Global => null,\n      Post   =>\n-       Length (Intersection'Result) =\n+       Big (Length (Intersection'Result)) =\n          M.Num_Overlaps (Model (Left), Model (Right))\n \n          --  Elements in the result of Intersection are in Left and Right\n@@ -1012,7 +1021,7 @@ is\n    procedure Difference (Target : in out Set; Source : Set) with\n      Global => null,\n      Post   =>\n-       Length (Target) = Length (Target)'Old -\n+       Big (Length (Target)) = Big (Length (Target)'Old) -\n          M.Num_Overlaps (Model (Target)'Old, Model (Source))\n \n          --  Elements of Target were already in Target\n@@ -1048,7 +1057,7 @@ is\n    function Difference (Left, Right : Set) return Set with\n      Global => null,\n      Post   =>\n-       Length (Difference'Result) = Length (Left) -\n+       Big (Length (Difference'Result)) = Big (Length (Left)) -\n          M.Num_Overlaps (Model (Left), Model (Right))\n \n          --  Elements of the result of Difference are in Left\n@@ -1085,9 +1094,9 @@ is\n        Length (Source) - Length (Target and Source) <=\n          Target.Capacity - Length (Target) + Length (Target and Source),\n      Post   =>\n-       Length (Target) = Length (Target)'Old -\n+       Big (Length (Target)) = Big (Length (Target)'Old) -\n          2 * M.Num_Overlaps (Model (Target)'Old, Model (Source)) +\n-         Length (Source)\n+         Big (Length (Source))\n \n          --  Elements of the difference were not both in Source and in Target\n \n@@ -1125,9 +1134,9 @@ is\n      Global => null,\n      Pre    => Length (Left) <= Count_Type'Last - Length (Right),\n      Post   =>\n-       Length (Symmetric_Difference'Result) = Length (Left) -\n+       Big (Length (Symmetric_Difference'Result)) = Big (Length (Left)) -\n          2 * M.Num_Overlaps (Model (Left), Model (Right)) +\n-         Length (Right)\n+         Big (Length (Right))\n \n          --  Elements of the difference were not both in Left and Right\n "}, {"sha": "38d15e7bb091d78b080981028fb8534868d215a5", "filename": "gcc/ada/libgnat/a-cforma.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cforma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cforma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cforma.adb?ref=2a466ee093827650cd33fe877c1043441c4e9427", "patch": "@@ -32,12 +32,22 @@ pragma Elaborate_All\n with Ada.Containers.Red_Black_Trees.Generic_Bounded_Keys;\n pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Bounded_Keys);\n \n+with Ada.Numerics.Big_Numbers.Big_Integers;\n+use Ada.Numerics.Big_Numbers.Big_Integers;\n+\n with System; use type System.Address;\n \n package body Ada.Containers.Formal_Ordered_Maps with\n   SPARK_Mode => Off\n is\n \n+   --  Convert Count_Type to Big_Interger\n+\n+   package Conversions is new Signed_Conversions (Int => Count_Type);\n+\n+   function Big (J : Count_Type) return Big_Integer renames\n+     Conversions.To_Big_Integer;\n+\n    -----------------------------\n    -- Node Access Subprograms --\n    -----------------------------\n@@ -745,7 +755,7 @@ is\n \n          while Position /= 0 loop\n             R := P.Add (R, (Node => Position), I);\n-            pragma Assert (P.Length (R) = I);\n+            pragma Assert (P.Length (R) = Big (I));\n             Position := Tree_Operations.Next (Container.Content, Position);\n             I := I + 1;\n          end loop;"}, {"sha": "e5cddde498527a039ca006f0d8b827ba41e866a5", "filename": "gcc/ada/libgnat/a-cforse.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cforse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cforse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cforse.adb?ref=2a466ee093827650cd33fe877c1043441c4e9427", "patch": "@@ -943,7 +943,7 @@ is\n \n          while Position /= 0 loop\n             R := P.Add (R, (Node => Position), I);\n-            pragma Assert (P.Length (R) = I);\n+            pragma Assert (P.Length (R) = Big (I));\n             Position := Tree_Operations.Next (Container.Content, Position);\n             I := I + 1;\n          end loop;"}, {"sha": "f6a033f680f3c6f1a6eed64bda4c39bf17d4a595", "filename": "gcc/ada/libgnat/a-cforse.ads", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cforse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cforse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cforse.ads?ref=2a466ee093827650cd33fe877c1043441c4e9427", "patch": "@@ -49,6 +49,8 @@\n with Ada.Containers.Functional_Maps;\n with Ada.Containers.Functional_Sets;\n with Ada.Containers.Functional_Vectors;\n+with Ada.Numerics.Big_Numbers.Big_Integers;\n+use Ada.Numerics.Big_Numbers.Big_Integers;\n private with Ada.Containers.Red_Black_Trees;\n \n generic\n@@ -67,6 +69,13 @@ is\n    pragma Assertion_Policy (Contract_Cases => Ignore);\n    pragma Annotate (CodePeer, Skip_Analysis);\n \n+   --  Convert Count_Type to Big_Interger\n+\n+   package Conversions is new Signed_Conversions (Int => Count_Type);\n+\n+   function Big (J : Count_Type) return Big_Integer renames\n+     Conversions.To_Big_Integer;\n+\n    function Equivalent_Elements (Left, Right : Element_Type) return Boolean\n    with\n      Global => null,\n@@ -341,7 +350,7 @@ is\n \n         Ghost,\n         Global => null,\n-        Post   => M.Length (Model'Result) = Length (Container);\n+        Post   => M.Length (Model'Result) = Big (Length (Container));\n \n       function Elements (Container : Set) return E.Sequence with\n       --  The Elements sequence represents the underlying list structure of\n@@ -990,9 +999,9 @@ is\n        Length (Source) - Length (Target and Source) <=\n          Target.Capacity - Length (Target),\n      Post   =>\n-       Length (Target) = Length (Target)'Old\n+       Big (Length (Target)) = Big (Length (Target)'Old)\n          - M.Num_Overlaps (Model (Target)'Old, Model (Source))\n-         + Length (Source)\n+         + Big (Length (Source))\n \n          --  Elements already in Target are still in Target\n \n@@ -1038,9 +1047,9 @@ is\n      Global => null,\n      Pre    => Length (Left) <= Count_Type'Last - Length (Right),\n      Post   =>\n-       Length (Union'Result) = Length (Left)\n+       Big (Length (Union'Result)) = Big (Length (Left))\n          - M.Num_Overlaps (Model (Left), Model (Right))\n-         + Length (Right)\n+         + Big (Length (Right))\n \n          --  Elements of Left and Right are in the result of Union\n \n@@ -1076,7 +1085,7 @@ is\n    procedure Intersection (Target : in out Set; Source : Set) with\n      Global => null,\n      Post   =>\n-       Length (Target) =\n+       Big (Length (Target)) =\n          M.Num_Overlaps (Model (Target)'Old, Model (Source))\n \n          --  Elements of Target were already in Target\n@@ -1111,7 +1120,7 @@ is\n    function Intersection (Left, Right : Set) return Set with\n      Global => null,\n      Post   =>\n-       Length (Intersection'Result) =\n+       Big (Length (Intersection'Result)) =\n          M.Num_Overlaps (Model (Left), Model (Right))\n \n          --  Elements in the result of Intersection are in Left and Right\n@@ -1139,7 +1148,7 @@ is\n    procedure Difference (Target : in out Set; Source : Set) with\n      Global => null,\n      Post   =>\n-       Length (Target) = Length (Target)'Old -\n+       Big (Length (Target)) = Big (Length (Target)'Old) -\n          M.Num_Overlaps (Model (Target)'Old, Model (Source))\n \n          --  Elements of Target were already in Target\n@@ -1174,7 +1183,7 @@ is\n    function Difference (Left, Right : Set) return Set with\n      Global => null,\n      Post   =>\n-       Length (Difference'Result) = Length (Left) -\n+       Big (Length (Difference'Result)) = Big (Length (Left)) -\n          M.Num_Overlaps (Model (Left), Model (Right))\n \n          --  Elements of the result of Difference are in Left\n@@ -1209,9 +1218,9 @@ is\n        Length (Source) - Length (Target and Source) <=\n          Target.Capacity - Length (Target) + Length (Target and Source),\n      Post   =>\n-       Length (Target) = Length (Target)'Old -\n+       Big (Length (Target)) = Big (Length (Target)'Old) -\n          2 * M.Num_Overlaps (Model (Target)'Old, Model (Source)) +\n-         Length (Source)\n+         Big (Length (Source))\n \n          --  Elements of the difference were not both in Source and in Target\n \n@@ -1248,9 +1257,9 @@ is\n      Global => null,\n      Pre    => Length (Left) <= Count_Type'Last - Length (Right),\n      Post   =>\n-       Length (Symmetric_Difference'Result) = Length (Left) -\n+       Big (Length (Symmetric_Difference'Result)) = Big (Length (Left)) -\n          2 * M.Num_Overlaps (Model (Left), Model (Right)) +\n-         Length (Right)\n+         Big (Length (Right))\n \n          --  Elements of the difference were not both in Left and Right\n "}, {"sha": "f83b4d829f767f0506d0c07f98535b16e0e61bfc", "filename": "gcc/ada/libgnat/a-cofuma.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cofuma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cofuma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cofuma.adb?ref=2a466ee093827650cd33fe877c1043441c4e9427", "patch": "@@ -34,6 +34,9 @@ package body Ada.Containers.Functional_Maps with SPARK_Mode => Off is\n    use Key_Containers;\n    use Element_Containers;\n \n+   package Conversions is new Signed_Conversions (Int => Count_Type);\n+   use Conversions;\n+\n    ---------\n    -- \"=\" --\n    ---------\n@@ -245,9 +248,9 @@ package body Ada.Containers.Functional_Maps with SPARK_Mode => Off is\n    -- Length --\n    ------------\n \n-   function Length (Container : Map) return Count_Type is\n+   function Length (Container : Map) return Big_Natural is\n    begin\n-      return Length (Container.Elements);\n+      return To_Big_Integer (Length (Container.Elements));\n    end Length;\n \n    ------------"}, {"sha": "d01c4b4dd22a4a2a7a9ae1b21828ca3c07a626b4", "filename": "gcc/ada/libgnat/a-cofuma.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cofuma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cofuma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cofuma.ads?ref=2a466ee093827650cd33fe877c1043441c4e9427", "patch": "@@ -32,6 +32,9 @@\n pragma Ada_2012;\n private with Ada.Containers.Functional_Base;\n \n+with Ada.Numerics.Big_Numbers.Big_Integers;\n+use Ada.Numerics.Big_Numbers.Big_Integers;\n+\n generic\n    type Key_Type (<>) is private;\n    type Element_Type (<>)  is private;\n@@ -97,7 +100,7 @@ package Ada.Containers.Functional_Maps with SPARK_Mode is\n                   (Equivalent_Keys (K, Key) =\n                     (Witness (Container, Key) = Witness (Container, K)))));\n \n-   function Length (Container : Map) return Count_Type with\n+   function Length (Container : Map) return Big_Natural with\n      Global => null;\n    --  Return the number of mappings in Container\n \n@@ -233,9 +236,7 @@ package Ada.Containers.Functional_Maps with SPARK_Mode is\n \n    with\n      Global => null,\n-     Pre    =>\n-       not Has_Key (Container, New_Key)\n-         and Length (Container) < Count_Type'Last,\n+     Pre    => not Has_Key (Container, New_Key),\n      Post   =>\n        Length (Container) + 1 = Length (Add'Result)\n          and Has_Key (Add'Result, New_Key)"}, {"sha": "bbb3f7e96f9e6c1489e82d3be64f2bb46c295556", "filename": "gcc/ada/libgnat/a-cofuse.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cofuse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cofuse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cofuse.adb?ref=2a466ee093827650cd33fe877c1043441c4e9427", "patch": "@@ -34,6 +34,9 @@ pragma Ada_2012;\n package body Ada.Containers.Functional_Sets with SPARK_Mode => Off is\n    use Containers;\n \n+   package Conversions is new Signed_Conversions (Int => Count_Type);\n+   use Conversions;\n+\n    ---------\n    -- \"=\" --\n    ---------\n@@ -135,8 +138,8 @@ package body Ada.Containers.Functional_Sets with SPARK_Mode => Off is\n    -- Length --\n    ------------\n \n-   function Length (Container : Set) return Count_Type is\n-     (Length (Container.Content));\n+   function Length (Container : Set) return Big_Natural is\n+     (To_Big_Integer (Length (Container.Content)));\n \n    -----------------\n    -- Not_In_Both --\n@@ -161,8 +164,8 @@ package body Ada.Containers.Functional_Sets with SPARK_Mode => Off is\n    -- Num_Overlaps --\n    ------------------\n \n-   function Num_Overlaps (Left : Set; Right : Set) return Count_Type is\n-     (Num_Overlaps (Left.Content, Right.Content));\n+   function Num_Overlaps (Left : Set; Right : Set) return Big_Natural is\n+     (To_Big_Integer (Num_Overlaps (Left.Content, Right.Content)));\n \n    ------------\n    -- Remove --"}, {"sha": "29f1e9f979f4cea638768c89862dcb5c57c7269b", "filename": "gcc/ada/libgnat/a-cofuse.ads", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cofuse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a466ee093827650cd33fe877c1043441c4e9427/gcc%2Fada%2Flibgnat%2Fa-cofuse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cofuse.ads?ref=2a466ee093827650cd33fe877c1043441c4e9427", "patch": "@@ -32,6 +32,9 @@\n pragma Ada_2012;\n private with Ada.Containers.Functional_Base;\n \n+with Ada.Numerics.Big_Numbers.Big_Integers;\n+use Ada.Numerics.Big_Numbers.Big_Integers;\n+\n generic\n    type Element_Type (<>) is private;\n \n@@ -79,7 +82,7 @@ package Ada.Containers.Functional_Sets with SPARK_Mode is\n           (if (for some E of Container => Equivalent_Elements (E, Item)) then\n               Contains'Result));\n \n-   function Length (Container : Set) return Count_Type with\n+   function Length (Container : Set) return Big_Natural with\n      Global => null;\n    --  Return the number of elements in Container\n \n@@ -183,7 +186,7 @@ package Ada.Containers.Functional_Sets with SPARK_Mode is\n        No_Overlap'Result =\n          (for all Item of Left => not Contains (Right, Item));\n \n-   function Num_Overlaps (Left : Set; Right : Set) return Count_Type with\n+   function Num_Overlaps (Left : Set; Right : Set) return Big_Natural with\n    --  Number of elements that are both in Left and Right\n \n      Global => null,\n@@ -206,9 +209,7 @@ package Ada.Containers.Functional_Sets with SPARK_Mode is\n    --  Return a new set containing all the elements of Container plus E\n \n      Global => null,\n-     Pre    =>\n-       not Contains (Container, Item)\n-       and Length (Container) < Count_Type'Last,\n+     Pre    => not Contains (Container, Item),\n      Post   =>\n        Length (Add'Result) = Length (Container) + 1\n          and Contains (Add'Result, Item)\n@@ -245,9 +246,6 @@ package Ada.Containers.Functional_Sets with SPARK_Mode is\n    --  Returns the union of Left and Right\n \n      Global => null,\n-     Pre    =>\n-       Length (Left) - Num_Overlaps (Left, Right) <=\n-         Count_Type'Last - Length (Right),\n      Post   =>\n        Length (Union'Result) =\n          Length (Left) - Num_Overlaps (Left, Right) + Length (Right)"}]}