{"sha": "56a1571614ab807bfc12a7a43ae4926b2fc1f744", "node_id": "C_kwDOANBUbNoAKDU2YTE1NzE2MTRhYjgwN2JmYzEyYTdhNDNhZTQ5MjZiMmZjMWY3NDQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-16T14:34:26Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-03-16T14:34:26Z"}, "message": "Keep track of substitution mappings as part of the TraitReference\n\nThe TraitReference wrapper is a class that allows us to work with traits\nin a query manar. This patch allows us to keep track of the substitution\nmappings that are defined on the trait. This will always be non-empty\nsince traits always contain an implicit Self type parameter so there\nis special handling in how we perform monomorphization.", "tree": {"sha": "02e5bfe8e9f9c60c6ffe56b65fdfe2d1fa480fbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02e5bfe8e9f9c60c6ffe56b65fdfe2d1fa480fbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56a1571614ab807bfc12a7a43ae4926b2fc1f744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a1571614ab807bfc12a7a43ae4926b2fc1f744", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a1571614ab807bfc12a7a43ae4926b2fc1f744", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a1571614ab807bfc12a7a43ae4926b2fc1f744/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9411c061aaeae0be39c678e0885472c37b112141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9411c061aaeae0be39c678e0885472c37b112141", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9411c061aaeae0be39c678e0885472c37b112141"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "4ad0d7b67e8c803abcefd045c5ed7d6222cb279d", "filename": "gcc/rust/typecheck/rust-hir-trait-ref.h", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a1571614ab807bfc12a7a43ae4926b2fc1f744/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a1571614ab807bfc12a7a43ae4926b2fc1f744/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-ref.h?ref=56a1571614ab807bfc12a7a43ae4926b2fc1f744", "patch": "@@ -181,27 +181,48 @@ class TraitReference\n public:\n   TraitReference (const HIR::Trait *hir_trait_ref,\n \t\t  std::vector<TraitItemReference> item_refs,\n-\t\t  std::vector<const TraitReference *> super_traits)\n+\t\t  std::vector<const TraitReference *> super_traits,\n+\t\t  std::vector<TyTy::SubstitutionParamMapping> substs)\n     : hir_trait_ref (hir_trait_ref), item_refs (item_refs),\n       super_traits (super_traits)\n-  {}\n+  {\n+    trait_substs.clear ();\n+    trait_substs.reserve (substs.size ());\n+    for (const auto &p : substs)\n+      trait_substs.push_back (p.clone ());\n+  }\n \n   TraitReference (TraitReference const &other)\n-    : hir_trait_ref (other.hir_trait_ref), item_refs (other.item_refs)\n-  {}\n+    : hir_trait_ref (other.hir_trait_ref), item_refs (other.item_refs),\n+      super_traits (other.super_traits)\n+  {\n+    trait_substs.clear ();\n+    trait_substs.reserve (other.trait_substs.size ());\n+    for (const auto &p : other.trait_substs)\n+      trait_substs.push_back (p.clone ());\n+  }\n \n   TraitReference &operator= (TraitReference const &other)\n   {\n     hir_trait_ref = other.hir_trait_ref;\n     item_refs = other.item_refs;\n+    super_traits = other.super_traits;\n+\n+    trait_substs.clear ();\n+    trait_substs.reserve (other.trait_substs.size ());\n+    for (const auto &p : other.trait_substs)\n+      trait_substs.push_back (p.clone ());\n \n     return *this;\n   }\n \n   TraitReference (TraitReference &&other) = default;\n   TraitReference &operator= (TraitReference &&other) = default;\n \n-  static TraitReference error () { return TraitReference (nullptr, {}, {}); }\n+  static TraitReference error ()\n+  {\n+    return TraitReference (nullptr, {}, {}, {});\n+  }\n \n   bool is_error () const { return hir_trait_ref == nullptr; }\n \n@@ -384,10 +405,18 @@ class TraitReference\n     return is_safe;\n   }\n \n+  bool trait_has_generics () const { return !trait_substs.empty (); }\n+\n+  const std::vector<TyTy::SubstitutionParamMapping> &get_trait_substs () const\n+  {\n+    return trait_substs;\n+  }\n+\n private:\n   const HIR::Trait *hir_trait_ref;\n   std::vector<TraitItemReference> item_refs;\n   std::vector<const TraitReference *> super_traits;\n+  std::vector<TyTy::SubstitutionParamMapping> trait_substs;\n };\n \n class AssociatedImplTrait"}, {"sha": "7af353a8c2ad241c2928e78587bbf7b3ca45a4e1", "filename": "gcc/rust/typecheck/rust-hir-trait-resolve.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a1571614ab807bfc12a7a43ae4926b2fc1f744/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a1571614ab807bfc12a7a43ae4926b2fc1f744/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-trait-resolve.h?ref=56a1571614ab807bfc12a7a43ae4926b2fc1f744", "patch": "@@ -193,7 +193,8 @@ class TraitResolver : public TypeCheckBase\n       }\n \n     TraitReference trait_object (trait_reference, item_refs,\n-\t\t\t\t std::move (super_traits));\n+\t\t\t\t std::move (super_traits),\n+\t\t\t\t std::move (substitutions));\n     context->insert_trait_reference (\n       trait_reference->get_mappings ().get_defid (), std::move (trait_object));\n "}]}