{"sha": "a5eef8e9b024741b8d661c628643a9850616b813", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVlZWY4ZTliMDI0NzQxYjhkNjYxYzYyODY0M2E5ODUwNjE2YjgxMw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2015-03-27T18:11:00Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2015-03-27T18:11:00Z"}, "message": "Add default_binds_local_p_2 and use it for x86\n\nProtected data symbol means that it can't be pre-emptied.  It doesn't mean\nits address won't be external.  This is true for pointer to protected\nfunction.  With copy relocation, address of protected data defined in the\nshared library may also be external.  We only know that for sure at\nrun-time.  TARGET_BINDS_LOCAL_P should return false on protected data\nsymbol.\n\ngcc/\n\n\tPR target/65248\n\t* output.h (default_binds_local_p_2): New.\n\t* varasm.c (default_binds_local_p_2): Renamed to ...\n\t(default_binds_local_p_3): This.  Don't return true on protected\n\tdata symbol if protected data may be external.\n\t(default_binds_local_p): Use default_binds_local_p_3.\n\t(default_binds_local_p_1): Likewise.\n\t(default_binds_local_p_2): New.\n\t* config/i386/i386.c (TARGET_BINDS_LOCAL_P): Set to\n\tdefault_binds_local_p_2 if TARGET_MACHO is undefined.\n\ngcc/testsuite/\n\n\tPR target/65248\n\t* gcc.target/i386/pr65248-1.c: New file.\n\t* gcc.target/i386/pr65248-2.c: Likewise.\n\t* gcc.target/i386/pr65248-3.c: Likewise.\n\t* gcc.target/i386/pr65248-4.c: Likewise.\n\nFrom-SVN: r221742", "tree": {"sha": "6f1f7fb2c72bb99e77499fa0b962b812dcc32188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f1f7fb2c72bb99e77499fa0b962b812dcc32188"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5eef8e9b024741b8d661c628643a9850616b813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5eef8e9b024741b8d661c628643a9850616b813", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5eef8e9b024741b8d661c628643a9850616b813", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5eef8e9b024741b8d661c628643a9850616b813/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f21a589997d17031e4d5169e7ef24f10d59c9530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f21a589997d17031e4d5169e7ef24f10d59c9530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f21a589997d17031e4d5169e7ef24f10d59c9530"}], "stats": {"total": 111, "additions": 108, "deletions": 3}, "files": [{"sha": "d8221f371d9181018e5899c13f29187ee49f9f76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5eef8e9b024741b8d661c628643a9850616b813", "patch": "@@ -1,3 +1,16 @@\n+2015-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/65248\n+\t* output.h (default_binds_local_p_2): New.\n+\t* varasm.c (default_binds_local_p_2): Renamed to ...\n+\t(default_binds_local_p_3): This.  Don't return true on protected\n+\tdata symbol if protected data may be external.\n+\t(default_binds_local_p): Use default_binds_local_p_3.\n+\t(default_binds_local_p_1): Likewise.\n+\t(default_binds_local_p_2): New.\n+\t* config/i386/i386.c (TARGET_BINDS_LOCAL_P): Set to\n+\tdefault_binds_local_p_2 if TARGET_MACHO is undefined.\n+\n 2015-03-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/65593"}, {"sha": "744642c7e36ae4ae3230c3cee240c096cadcdbf2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a5eef8e9b024741b8d661c628643a9850616b813", "patch": "@@ -51900,6 +51900,9 @@ ix86_initialize_bounds (tree var, tree lb, tree ub, tree *stmts)\n #if TARGET_MACHO\n #undef TARGET_BINDS_LOCAL_P\n #define TARGET_BINDS_LOCAL_P darwin_binds_local_p\n+#else\n+#undef TARGET_BINDS_LOCAL_P\n+#define TARGET_BINDS_LOCAL_P default_binds_local_p_2\n #endif\n #if TARGET_DLLIMPORT_DECL_ATTRIBUTES\n #undef TARGET_BINDS_LOCAL_P"}, {"sha": "53e47d03b3a6f99d767717e0b29ccf0436e6889c", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=a5eef8e9b024741b8d661c628643a9850616b813", "patch": "@@ -586,6 +586,7 @@ extern void default_asm_output_anchor (rtx);\n extern bool default_use_anchors_for_symbol_p (const_rtx);\n extern bool default_binds_local_p (const_tree);\n extern bool default_binds_local_p_1 (const_tree, int);\n+extern bool default_binds_local_p_2 (const_tree);\n extern void default_globalize_label (FILE *, const char *);\n extern void default_globalize_decl_name (FILE *, tree);\n extern void default_emit_unwind_label (FILE *, tree, int, int);"}, {"sha": "de043af08ed91dc6864d6d6d2db5cacfdb45e6cb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a5eef8e9b024741b8d661c628643a9850616b813", "patch": "@@ -1,3 +1,11 @@\n+2015-03-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/65248\n+\t* gcc.target/i386/pr65248-1.c: New file.\n+\t* gcc.target/i386/pr65248-2.c: Likewise.\n+\t* gcc.target/i386/pr65248-3.c: Likewise.\n+\t* gcc.target/i386/pr65248-4.c: Likewise.\n+\n 2015-03-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/65593"}, {"sha": "735adde933775fe626e85ea0d1eb5458d78c753d", "filename": "gcc/testsuite/gcc.target/i386/pr65248-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65248-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65248-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65248-1.c?ref=a5eef8e9b024741b8d661c628643a9850616b813", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic\" } */\n+\n+/* Common symbol with -fpic.  */\n+__attribute__((visibility(\"protected\")))\n+int xxx;\n+\n+int\n+foo ()\n+{\n+  return xxx;\n+}\n+\n+/* { dg-final { scan-assembler-not \"xxx\\\\(%rip\\\\)\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOTOFF\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"xxx@GOT\\\\(\" { target ia32 } } } */"}, {"sha": "af264f36a14e5babf250d802ea268b66ef871bdf", "filename": "gcc/testsuite/gcc.target/i386/pr65248-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65248-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65248-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65248-2.c?ref=a5eef8e9b024741b8d661c628643a9850616b813", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic\" } */\n+\n+/* Weak common symbol with -fpic.  */\n+__attribute__((weak, visibility(\"protected\")))\n+int xxx;\n+\n+int\n+foo ()\n+{\n+  return xxx;\n+}\n+\n+/* { dg-final { scan-assembler-not \"xxx\\\\(%rip\\\\)\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOTOFF\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"xxx@GOT\\\\(\" { target ia32 } } } */"}, {"sha": "e7a05eac6e6e9e27a95d1d1b653eb9d62def164f", "filename": "gcc/testsuite/gcc.target/i386/pr65248-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65248-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65248-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65248-3.c?ref=a5eef8e9b024741b8d661c628643a9850616b813", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic\" } */\n+\n+/* Initialized symbol with -fpic.  */\n+__attribute__((visibility(\"protected\")))\n+int xxx = -1;\n+\n+int\n+foo ()\n+{\n+  return xxx;\n+}\n+\n+/* { dg-final { scan-assembler-not \"xxx\\\\(%rip\\\\)\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOTOFF\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"xxx@GOT\\\\(\" { target ia32 } } } */"}, {"sha": "db818fc1f780a0c068698c253b44d7a85a0e7ced", "filename": "gcc/testsuite/gcc.target/i386/pr65248-4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65248-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65248-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65248-4.c?ref=a5eef8e9b024741b8d661c628643a9850616b813", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target *-*-linux* } } */\n+/* { dg-options \"-O2 -fpic\" } */\n+\n+/* Weak initialized symbol with -fpic.  */\n+__attribute__((weak, visibility(\"protected\")))\n+int xxx = -1;\n+\n+int\n+foo ()\n+{\n+  return xxx;\n+}\n+\n+/* { dg-final { scan-assembler-not \"xxx\\\\(%rip\\\\)\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler \"xxx@GOTPCREL\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"xxx@GOTOFF\" { target ia32 } } } */\n+/* { dg-final { scan-assembler \"xxx@GOT\\\\(\" { target ia32 } } } */"}, {"sha": "537a64d347a4639f289db324dbe07ce5dc90eaad", "filename": "gcc/varasm.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5eef8e9b024741b8d661c628643a9850616b813/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a5eef8e9b024741b8d661c628643a9850616b813", "patch": "@@ -6809,7 +6809,8 @@ resolution_local_p (enum ld_plugin_symbol_resolution resolution)\n }\n \n static bool\n-default_binds_local_p_2 (const_tree exp, bool shlib, bool weak_dominate)\n+default_binds_local_p_3 (const_tree exp, bool shlib, bool weak_dominate,\n+\t\t\t bool extern_protected_data)\n {\n   /* A non-decl is an entry in the constant pool.  */\n   if (!DECL_P (exp))\n@@ -6855,6 +6856,9 @@ default_binds_local_p_2 (const_tree exp, bool shlib, bool weak_dominate)\n      or if we have a definition for the symbol.  We cannot infer visibility\n      for undefined symbols.  */\n   if (DECL_VISIBILITY (exp) != VISIBILITY_DEFAULT\n+      && (TREE_CODE (exp) == FUNCTION_DECL\n+\t  || !extern_protected_data\n+\t  || DECL_VISIBILITY (exp) != VISIBILITY_PROTECTED)\n       && (DECL_VISIBILITY_SPECIFIED (exp) || defined_locally))\n     return true;\n \n@@ -6890,13 +6894,21 @@ default_binds_local_p_2 (const_tree exp, bool shlib, bool weak_dominate)\n bool\n default_binds_local_p (const_tree exp)\n {\n-  return default_binds_local_p_2 (exp, flag_shlib != 0, true);\n+  return default_binds_local_p_3 (exp, flag_shlib != 0, true, false);\n+}\n+\n+/* Similar to default_binds_local_p, but protected data may be\n+   external.  */\n+bool\n+default_binds_local_p_2 (const_tree exp)\n+{\n+  return default_binds_local_p_3 (exp, flag_shlib != 0, true, true);\n }\n \n bool\n default_binds_local_p_1 (const_tree exp, int shlib)\n {\n-  return default_binds_local_p_2 (exp, shlib != 0, false);\n+  return default_binds_local_p_3 (exp, shlib != 0, false, false);\n }\n \n /* Return true when references to DECL must bind to current definition in"}]}