{"sha": "f5758fe5b430ef3447fbab947fcea32a1d995f36", "node_id": "C_kwDOANBUbNoAKGY1NzU4ZmU1YjQzMGVmMzQ0N2ZiYWI5NDdmY2VhMzJhMWQ5OTVmMzY", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-02T21:30:51Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-12-02T21:30:51Z"}, "message": "analyzer: fixes to region creation messages [PR107851]\n\nIn r13-2573-gc81b60b8c6ff3d I split up the analyzer's region-creation\nevents to describe the memory space and capacity of the region as two\nseparate events to avoid combinatorial explosion of message wordings.\n\nHowever I didn't take into account r13-1405-ge6c3bb379f515b which\nadded a pending_diagnostic::describe_region_creation_event vfunc which\ncould change the wording of region creation events.\n\nHence for:\n\n#include <stdlib.h>\n#include <stdint.h>\n\nvoid test ()\n{\n  int32_t *ptr = malloc (1);\n  free (ptr);\n}\n\ntrunk currently emits:\n\n  Compiler Explorer (x86_64 trunk): https://godbolt.org/z/e3Td7c9s5:\n\n<source>: In function 'test':\n<source>:6:18: warning: allocated buffer size is not a multiple of the pointee's size [CWE-131] [-Wanalyzer-allocation-size]\n    6 |   int32_t *ptr = malloc (1);\n      |                  ^~~~~~~~~~\n  'test': events 1-3\n    |\n    |    6 |   int32_t *ptr = malloc (1);\n    |      |                  ^~~~~~~~~~\n    |      |                  |\n    |      |                  (1) allocated 1 bytes here\n    |      |                  (2) allocated 1 bytes here\n    |      |                  (3) assigned to 'int32_t *' {aka 'int *'} here; 'sizeof (int32_t {aka int})' is '4'\n    |\n\nwhere events (1) and (2) are different region_creation_events that have\nhad their wording overridden (also, with a \"1 bytes\" issue).\n\nThis patch reorganizes region creation events so that each\npending_diagnostic instead creates the events that is appropriate for it,\nand the events have responsibility for their own wording.\n\nWith this patch, the above emits:\n\n<source>: In function 'test':\n<source>:6:18: warning: allocated buffer size is not a multiple of the pointee's size [CWE-131] [-Wanalyzer-allocation-size]\n    6 |   int32_t *ptr = malloc (1);\n      |                  ^~~~~~~~~~\n  'test': events 1-2\n    |\n    |    6 |   int32_t *ptr = malloc (1);\n    |      |                  ^~~~~~~~~~\n    |      |                  |\n    |      |                  (1) allocated 1 byte here\n    |      |                  (2) assigned to 'int32_t *' {aka 'int *'} here; 'sizeof (int32_t {aka int})' is '4'\n    |\n\nfixing the duplicate event, and fixing the singular/plural issue.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/107851\n\t* analyzer.cc (make_label_text_n): Convert param \"n\" from int to\n\tunsigned HOST_WIDE_INT.\n\t* analyzer.h (make_label_text_n): Likewise for decl.\n\t* bounds-checking.cc: Include \"analyzer/checker-event.h\" and\n\t\"analyzer/checker-path.h\".\n\t(out_of_bounds::add_region_creation_events): New.\n\t(concrete_past_the_end::describe_region_creation_event): Replace\n\twith...\n\t(concrete_past_the_end::add_region_creation_events): ...this.\n\t(symbolic_past_the_end::describe_region_creation_event): Delete.\n\t* checker-event.cc (region_creation_event::region_creation_event):\n\tUpdate for dropping all member data.\n\t(region_creation_event::get_desc): Delete, splitting out into\n\tregion_creation_event_memory_space::get_desc,\n\tregion_creation_event_capacity::get_desc, and\n\tregion_creation_event_debug::get_desc.\n\t(region_creation_event_memory_space::get_desc): New.\n\t(region_creation_event_capacity::get_desc): New.\n\t(region_creation_event_allocation_size::get_desc): New.\n\t(region_creation_event_debug::get_desc): New.\n\t* checker-event.h: Include \"analyzer/program-state.h\".\n\t(enum rce_kind): Delete.\n\t(class region_creation_event): Drop all member data.\n\t(region_creation_event::region_creation_event): Make protected.\n\t(region_creation_event::get_desc): Delete.\n\t(class region_creation_event_memory_space): New.\n\t(class region_creation_event_capacity): New.\n\t(class region_creation_event_allocation_size): New.\n\t(class region_creation_event_debug): New.\n\t* checker-path.cc (checker_path::add_region_creation_events): Add\n\t\"pd\" param.  Call pending_diangnostic::add_region_creation_events.\n\tUpdate for conversion of RCE_DEBUG to region_creation_event_debug.\n\t* checker-path.h (checker_path::add_region_creation_events): Add\n\t\"pd\" param.\n\t* diagnostic-manager.cc (diagnostic_manager::build_emission_path):\n\tPass pending_diagnostic to\n\temission_path::add_region_creation_events.\n\t(diagnostic_manager::build_emission_path): Pass path_builder to\n\tadd_event_on_final_node.\n\t(diagnostic_manager::add_event_on_final_node): Add \"pb\" param.\n\tPass pending_diagnostic to\n\temission_path::add_region_creation_events.\n\t(diagnostic_manager::add_events_for_eedge): Pass\n\tpending_diagnostic to emission_path::add_region_creation_events.\n\t* diagnostic-manager.h\n\t(diagnostic_manager::add_event_on_final_node): Add \"pb\" param.\n\t* pending-diagnostic.cc\n\t(pending_diagnostic::add_region_creation_events): New.\n\t* pending-diagnostic.h (struct region_creation): Delete.\n\t(pending_diagnostic::describe_region_creation_event): Delete.\n\t(pending_diagnostic::add_region_creation_events): New vfunc.\n\t* region-model.cc: Include \"analyzer/checker-event.h\" and\n\t\"analyzer/checker-path.h\".\n\t(dubious_allocation_size::dubious_allocation_size): Initialize\n\tm_has_allocation_event.\n\t(dubious_allocation_size::describe_region_creation_event): Delete.\n\t(dubious_allocation_size::describe_final_event): Update for\n\treplacement of m_allocation_event with m_has_allocation_event.\n\t(dubious_allocation_size::add_region_creation_events): New.\n\t(dubious_allocation_size::m_allocation_event): Replace with...\n\t(dubious_allocation_size::m_has_allocation_event): ...this.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/107851\n\t* gcc.dg/analyzer/allocation-size-4.c: Update expected wording.\n\t* gcc.dg/analyzer/allocation-size-multiline-1.c: New test.\n\t* gcc.dg/analyzer/allocation-size-multiline-2.c: New test.\n\t* gcc.dg/analyzer/out-of-bounds-multiline-1.c: Update expected\n\twording.\n\t* gcc.dg/analyzer/out-of-bounds-multiline-2.c: New test.\n\t* gcc.dg/analyzer/out-of-bounds-read-char-arr.c: Update expected\n\twording.\n\t* gcc.dg/analyzer/out-of-bounds-read-int-arr.c: Likewise.\n\t* gcc.dg/analyzer/out-of-bounds-write-char-arr.c: Likewise.\n\t* gcc.dg/analyzer/out-of-bounds-write-int-arr.c: Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "e09801d792bb57588af124eb1c9175b5e64d74ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e09801d792bb57588af124eb1c9175b5e64d74ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5758fe5b430ef3447fbab947fcea32a1d995f36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5758fe5b430ef3447fbab947fcea32a1d995f36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5758fe5b430ef3447fbab947fcea32a1d995f36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5758fe5b430ef3447fbab947fcea32a1d995f36/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1998db0fa1f78e373c88daea8bb339d32b41e6aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1998db0fa1f78e373c88daea8bb339d32b41e6aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1998db0fa1f78e373c88daea8bb339d32b41e6aa"}], "stats": {"total": 568, "additions": 396, "deletions": 172}, "files": [{"sha": "77d622d19e6dc0fb8156449a2c9be209aca7bef8", "filename": "gcc/analyzer/analyzer.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fanalyzer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fanalyzer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.cc?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -449,7 +449,7 @@ make_label_text (bool can_colorize, const char *fmt, ...)\n /* As above, but with singular vs plural.  */\n \n label_text\n-make_label_text_n (bool can_colorize, int n,\n+make_label_text_n (bool can_colorize, unsigned HOST_WIDE_INT n,\n \t\t   const char *singular_fmt,\n \t\t   const char *plural_fmt, ...)\n {"}, {"sha": "e0fdbad61a7027f60c2f24359295d46944905212", "filename": "gcc/analyzer/analyzer.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fanalyzer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fanalyzer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.h?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -359,7 +359,8 @@ extern const char *get_user_facing_name (const gcall *call);\n extern void register_analyzer_pass ();\n \n extern label_text make_label_text (bool can_colorize, const char *fmt, ...);\n-extern label_text make_label_text_n (bool can_colorize, int n,\n+extern label_text make_label_text_n (bool can_colorize,\n+\t\t\t\t     unsigned HOST_WIDE_INT n,\n \t\t\t\t     const char *singular_fmt,\n \t\t\t\t     const char *plural_fmt, ...);\n "}, {"sha": "17f183fea21ae81a980682bcb2776aa332f5bc5c", "filename": "gcc/analyzer/bounds-checking.cc", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fbounds-checking.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fbounds-checking.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fbounds-checking.cc?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -32,6 +32,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"analyzer/analyzer.h\"\n #include \"analyzer/analyzer-logging.h\"\n #include \"analyzer/region-model.h\"\n+#include \"analyzer/checker-event.h\"\n+#include \"analyzer/checker-path.h\"\n \n #if ENABLE_ANALYZER\n \n@@ -64,6 +66,20 @@ class out_of_bounds : public pending_diagnostic\n     interest->add_region_creation (m_reg);\n   }\n \n+  void add_region_creation_events (const region *,\n+\t\t\t\t   tree capacity,\n+\t\t\t\t   location_t loc,\n+\t\t\t\t   tree fndecl, int depth,\n+\t\t\t\t   checker_path &emission_path) override\n+  {\n+    /* The memory space is described in the diagnostic message itself,\n+       so we don't need an event for that.  */\n+    if (capacity)\n+      emission_path.add_event\n+\t(make_unique<region_creation_event_capacity> (capacity,\n+\t\t\t\t\t\t      loc, fndecl, depth));\n+  }\n+\n protected:\n   enum memory_space get_memory_space () const\n   {\n@@ -147,14 +163,16 @@ class concrete_past_the_end : public concrete_out_of_bounds\n \t\t\t\t\t\tother.m_byte_bound));\n   }\n \n-  label_text\n-  describe_region_creation_event (const evdesc::region_creation &ev) final\n-  override\n+  void add_region_creation_events (const region *,\n+\t\t\t\t   tree,\n+\t\t\t\t   location_t loc,\n+\t\t\t\t   tree fndecl, int depth,\n+\t\t\t\t   checker_path &emission_path) final override\n   {\n     if (m_byte_bound && TREE_CODE (m_byte_bound) == INTEGER_CST)\n-      return ev.formatted_print (\"capacity is %E bytes\", m_byte_bound);\n-\n-    return label_text ();\n+      emission_path.add_event\n+\t(make_unique<region_creation_event_capacity> (m_byte_bound,\n+\t\t\t\t\t\t      loc, fndecl, depth));\n   }\n \n protected:\n@@ -534,16 +552,6 @@ class symbolic_past_the_end : public out_of_bounds\n \t    && pending_diagnostic::same_tree_p (m_capacity, other.m_capacity));\n   }\n \n-  label_text\n-  describe_region_creation_event (const evdesc::region_creation &ev) final\n-  override\n-  {\n-    if (m_capacity)\n-      return ev.formatted_print (\"capacity is %qE bytes\", m_capacity);\n-\n-    return label_text ();\n-  }\n-\n protected:\n   tree m_offset;\n   tree m_num_bytes;"}, {"sha": "98f1053da8fcac42d8a47373c585af284d1cdcce", "filename": "gcc/analyzer/checker-event.cc", "status": "modified", "additions": 54, "deletions": 61, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fchecker-event.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fchecker-event.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-event.cc?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -293,84 +293,77 @@ statement_event::get_desc (bool) const\n \n /* class region_creation_event : public checker_event.  */\n \n-region_creation_event::region_creation_event (const region *reg,\n-\t\t\t\t\t      tree capacity,\n-\t\t\t\t\t      enum rce_kind kind,\n-\t\t\t\t\t      location_t loc,\n+region_creation_event::region_creation_event (location_t loc,\n \t\t\t\t\t      tree fndecl,\n \t\t\t\t\t      int depth)\n-: checker_event (EK_REGION_CREATION, loc, fndecl, depth),\n-  m_reg (reg),\n-  m_capacity (capacity),\n-  m_rce_kind (kind)\n+: checker_event (EK_REGION_CREATION, loc, fndecl, depth)\n {\n-  if (m_rce_kind == RCE_CAPACITY)\n-    gcc_assert (capacity);\n }\n \n-/* Implementation of diagnostic_event::get_desc vfunc for\n-   region_creation_event.\n-   There are effectively 3 kinds of region_region_event, to\n-   avoid combinatorial explosion by trying to convy the\n-   information in a single message.  */\n+/* The various region_creation_event subclasses' get_desc\n+   implementations.  */\n \n label_text\n-region_creation_event::get_desc (bool can_colorize) const\n+region_creation_event_memory_space::get_desc (bool) const\n {\n-  if (m_pending_diagnostic)\n+  switch (m_mem_space)\n     {\n-      label_text custom_desc\n-\t    = m_pending_diagnostic->describe_region_creation_event\n-\t\t(evdesc::region_creation (can_colorize, m_reg));\n-      if (custom_desc.get ())\n-\treturn custom_desc;\n+    default:\n+      return label_text::borrow (\"region created here\");\n+    case MEMSPACE_STACK:\n+      return label_text::borrow (\"region created on stack here\");\n+    case MEMSPACE_HEAP:\n+      return label_text::borrow (\"region created on heap here\");\n     }\n+}\n \n-  switch (m_rce_kind)\n+label_text\n+region_creation_event_capacity::get_desc (bool can_colorize) const\n+{\n+  gcc_assert (m_capacity);\n+  if (TREE_CODE (m_capacity) == INTEGER_CST)\n     {\n-    default:\n-      gcc_unreachable ();\n-\n-    case RCE_MEM_SPACE:\n-      switch (m_reg->get_memory_space ())\n-\t{\n-\tdefault:\n-\t  return label_text::borrow (\"region created here\");\n-\tcase MEMSPACE_STACK:\n-\t  return label_text::borrow (\"region created on stack here\");\n-\tcase MEMSPACE_HEAP:\n-\t  return label_text::borrow (\"region created on heap here\");\n-\t}\n-      break;\n+      unsigned HOST_WIDE_INT hwi = tree_to_uhwi (m_capacity);\n+      return make_label_text_n (can_colorize,\n+\t\t\t\thwi,\n+\t\t\t\t\"capacity: %wu byte\",\n+\t\t\t\t\"capacity: %wu bytes\",\n+\t\t\t\thwi);\n+    }\n+  else\n+    return make_label_text (can_colorize,\n+\t\t\t    \"capacity: %qE bytes\", m_capacity);\n+}\n \n-    case RCE_CAPACITY:\n-      gcc_assert (m_capacity);\n+label_text\n+region_creation_event_allocation_size::get_desc (bool can_colorize) const\n+{\n+  if (m_capacity)\n+    {\n       if (TREE_CODE (m_capacity) == INTEGER_CST)\n-\t{\n-\t  unsigned HOST_WIDE_INT hwi = tree_to_uhwi (m_capacity);\n-\t  if (hwi == 1)\n-\t    return make_label_text (can_colorize,\n-\t\t\t\t    \"capacity: %wu byte\", hwi);\n-\t  else\n-\t    return make_label_text (can_colorize,\n-\t\t\t\t    \"capacity: %wu bytes\", hwi);\n-\t}\n+\treturn make_label_text_n (can_colorize,\n+\t\t\t\t  tree_to_uhwi (m_capacity),\n+\t\t\t\t  \"allocated %E byte here\",\n+\t\t\t\t  \"allocated %E bytes here\",\n+\t\t\t\t  m_capacity);\n       else\n \treturn make_label_text (can_colorize,\n-\t\t\t\t\"capacity: %qE bytes\", m_capacity);\n-\n-    case RCE_DEBUG:\n-      {\n-\tpretty_printer pp;\n-\tpp_format_decoder (&pp) = default_tree_printer;\n-\tpp_string (&pp, \"region creation: \");\n-\tm_reg->dump_to_pp (&pp, true);\n-\tif (m_capacity)\n-\t  pp_printf (&pp, \" capacity: %qE\", m_capacity);\n-\treturn label_text::take (xstrdup (pp_formatted_text (&pp)));\n-      }\n-      break;\n+\t\t\t\t\"allocated %qE bytes here\",\n+\t\t\t\tm_capacity);\n     }\n+  return make_label_text (can_colorize, \"allocated here\");\n+}\n+\n+label_text\n+region_creation_event_debug::get_desc (bool) const\n+{\n+  pretty_printer pp;\n+  pp_format_decoder (&pp) = default_tree_printer;\n+  pp_string (&pp, \"region creation: \");\n+  m_reg->dump_to_pp (&pp, true);\n+  if (m_capacity)\n+    pp_printf (&pp, \" capacity: %qE\", m_capacity);\n+  return label_text::take (xstrdup (pp_formatted_text (&pp)));\n }\n \n /* class function_entry_event : public checker_event.  */"}, {"sha": "f9885f5cfc37dd90eded7fc73172257d17f3e88c", "filename": "gcc/analyzer/checker-event.h", "status": "modified", "additions": 82, "deletions": 19, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fchecker-event.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fchecker-event.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-event.h?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_ANALYZER_CHECKER_EVENT_H\n \n #include \"tree-logical-location.h\"\n+#include \"analyzer/program-state.h\"\n \n namespace ana {\n \n@@ -211,43 +212,105 @@ class statement_event : public checker_event\n   const program_state m_dst_state;\n };\n \n-/* There are too many combinations to express region creation in one message,\n+/* An abstract event subclass describing the creation of a region that\n+   is significant for a diagnostic.\n+\n+   There are too many combinations to express region creation in one message,\n    so we emit multiple region_creation_event instances when each pertinent\n    region is created.\n \n-   This enum distinguishes between the different messages.  */\n+   The events are created by pending_diagnostic's add_region_creation_events\n+   vfunc, which by default creates a region_creation_event_memory_space, and\n+   if a capacity is known, a region_creation_event_capacity, giving e.g.:\n+     (1) region created on stack here\n+     (2) capacity: 100 bytes\n+   but this vfunc can be overridden to create other events if other wordings\n+   are more appropriate foa a given pending_diagnostic.  */\n \n-enum rce_kind\n+class region_creation_event : public checker_event\n {\n-  /* Generate a message based on the memory space of the region\n-     e.g. \"region created on stack here\".  */\n-  RCE_MEM_SPACE,\n+protected:\n+  region_creation_event (location_t loc, tree fndecl, int depth);\n+};\n+\n+/* Concrete subclass of region_creation_event.\n+   Generates a message based on the memory space of the region\n+   e.g. \"region created on stack here\".  */\n \n-  /* Generate a message based on the capacity of the region\n-     e.g. \"capacity: 100 bytes\".  */\n-  RCE_CAPACITY,\n+class region_creation_event_memory_space : public region_creation_event\n+{\n+public:\n+  region_creation_event_memory_space (enum memory_space mem_space,\n+\t\t\t\t      location_t loc, tree fndecl, int depth)\n+  : region_creation_event (loc, fndecl, depth),\n+    m_mem_space (mem_space)\n+  {\n+  }\n \n-  /* Generate a debug message.  */\n-  RCE_DEBUG\n+  label_text get_desc (bool can_colorize) const final override;\n+\n+private:\n+  enum memory_space m_mem_space;\n };\n \n-/* A concrete event subclass describing the creation of a region that\n-   is significant for a diagnostic.  */\n+/* Concrete subclass of region_creation_event.\n+   Generates a message based on the capacity of the region\n+   e.g. \"capacity: 100 bytes\".  */\n \n-class region_creation_event : public checker_event\n+class region_creation_event_capacity : public region_creation_event\n {\n public:\n-  region_creation_event (const region *reg,\n-\t\t\t tree capacity,\n-\t\t\t enum rce_kind kind,\n-\t\t\t location_t loc, tree fndecl, int depth);\n+  region_creation_event_capacity (tree capacity,\n+\t\t\t\t  location_t loc, tree fndecl, int depth)\n+  : region_creation_event (loc, fndecl, depth),\n+    m_capacity (capacity)\n+  {\n+    gcc_assert (m_capacity);\n+  }\n+\n+  label_text get_desc (bool can_colorize) const final override;\n+\n+private:\n+  tree m_capacity;\n+};\n+\n+/* Concrete subclass of region_creation_event.\n+   Generates a message based on the capacity of the region\n+   e.g. \"allocated 100 bytes here\".  */\n+\n+class region_creation_event_allocation_size : public region_creation_event\n+{\n+public:\n+  region_creation_event_allocation_size (tree capacity,\n+\t\t\t\t\t location_t loc, tree fndecl, int depth)\n+  : region_creation_event (loc, fndecl, depth),\n+    m_capacity (capacity)\n+  {}\n+\n+  label_text get_desc (bool can_colorize) const final override;\n+\n+private:\n+  tree m_capacity;\n+};\n+\n+/* Concrete subclass of region_creation_event.\n+   Generates a debug message intended for analyzer developers.  */\n+\n+class region_creation_event_debug : public region_creation_event\n+{\n+public:\n+  region_creation_event_debug (const region *reg, tree capacity,\n+\t\t\t       location_t loc, tree fndecl, int depth)\n+  : region_creation_event (loc, fndecl, depth),\n+    m_reg (reg), m_capacity (capacity)\n+  {\n+  }\n \n   label_text get_desc (bool can_colorize) const final override;\n \n private:\n   const region *m_reg;\n   tree m_capacity;\n-  enum rce_kind m_rce_kind;\n };\n \n /* An event subclass describing the entry to a function.  */"}, {"sha": "0cc0b2bf81f4804499e365919cb2468d523243b8", "filename": "gcc/analyzer/checker-path.cc", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fchecker-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fchecker-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.cc?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -141,7 +141,8 @@ checker_path::debug () const\n    If DEBUG is true, also create an RCE_DEBUG event.  */\n \n void\n-checker_path::add_region_creation_events (const region *reg,\n+checker_path::add_region_creation_events (pending_diagnostic *pd,\n+\t\t\t\t\t  const region *reg,\n \t\t\t\t\t  const region_model *model,\n \t\t\t\t\t  location_t loc,\n \t\t\t\t\t  tree fndecl, int depth,\n@@ -152,16 +153,11 @@ checker_path::add_region_creation_events (const region *reg,\n     if (const svalue *capacity_sval = model->get_capacity (reg))\n       capacity = model->get_representative_tree (capacity_sval);\n \n-  add_event (make_unique<region_creation_event> (reg, capacity, RCE_MEM_SPACE,\n-\t\t\t\t\t\t loc, fndecl, depth));\n-\n-  if (capacity)\n-    add_event (make_unique<region_creation_event> (reg, capacity, RCE_CAPACITY,\n-\t\t\t\t\t\t   loc, fndecl, depth));\n+  pd->add_region_creation_events (reg, capacity, loc, fndecl, depth, *this);\n \n   if (debug)\n-    add_event (make_unique<region_creation_event> (reg, capacity, RCE_DEBUG,\n-\t\t\t\t\t\t   loc, fndecl, depth));\n+    add_event (make_unique<region_creation_event_debug> (reg, capacity,\n+\t\t\t\t\t\t\t loc, fndecl, depth));\n }\n \n void"}, {"sha": "ba04aed069ebd405afaeb07eb7bf6f72c8404175", "filename": "gcc/analyzer/checker-path.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fchecker-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fchecker-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fchecker-path.h?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -76,7 +76,8 @@ class checker_path : public diagnostic_path\n     m_events[idx] = new_event;\n   }\n \n-  void add_region_creation_events (const region *reg,\n+  void add_region_creation_events (pending_diagnostic *pd,\n+\t\t\t\t   const region *reg,\n \t\t\t\t   const region_model *model,\n \t\t\t\t   location_t loc,\n \t\t\t\t   tree fndecl, int depth,"}, {"sha": "0574758be5a92e6adfb7164fee790a50b98481e9", "filename": "gcc/analyzer/diagnostic-manager.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fdiagnostic-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.cc?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -1447,7 +1447,8 @@ diagnostic_manager::build_emission_path (const path_builder &pb,\n \t\t  && DECL_SOURCE_LOCATION (decl) != UNKNOWN_LOCATION)\n \t\t{\n \t\t  emission_path->add_region_creation_events\n-\t\t    (reg, NULL,\n+\t\t    (pb.get_pending_diagnostic (),\n+\t\t     reg, NULL,\n \t\t     DECL_SOURCE_LOCATION (decl),\n \t\t     NULL_TREE,\n \t\t     0,\n@@ -1463,7 +1464,8 @@ diagnostic_manager::build_emission_path (const path_builder &pb,\n       const exploded_edge *eedge = epath.m_edges[i];\n       add_events_for_eedge (pb, *eedge, emission_path, &interest);\n     }\n-  add_event_on_final_node (epath.get_final_enode (), emission_path, &interest);\n+  add_event_on_final_node (pb, epath.get_final_enode (),\n+\t\t\t   emission_path, &interest);\n }\n \n /* Emit a region_creation_event when requested on the last statement in\n@@ -1475,7 +1477,8 @@ diagnostic_manager::build_emission_path (const path_builder &pb,\n */\n \n void\n-diagnostic_manager::add_event_on_final_node (const exploded_node *final_enode,\n+diagnostic_manager::add_event_on_final_node (const path_builder &pb,\n+\t\t\t\t\t     const exploded_node *final_enode,\n \t\t\t\t\t     checker_path *emission_path,\n \t\t\t\t\t     interesting_t *interest) const\n {\n@@ -1512,7 +1515,8 @@ diagnostic_manager::add_event_on_final_node (const exploded_node *final_enode,\n \t\tcase RK_HEAP_ALLOCATED:\n \t\tcase RK_ALLOCA:\n \t\t  emission_path->add_region_creation_events\n-\t\t    (reg,\n+\t\t    (pb.get_pending_diagnostic (),\n+\t\t     reg,\n \t\t     dst_model,\n \t\t     src_point.get_location (),\n \t\t     src_point.get_fndecl (),\n@@ -1940,7 +1944,8 @@ diagnostic_manager::add_events_for_eedge (const path_builder &pb,\n \t\t\t    && DECL_SOURCE_LOCATION (decl) != UNKNOWN_LOCATION)\n \t\t\t  {\n \t\t\t    emission_path->add_region_creation_events\n-\t\t\t      (reg, dst_state.m_region_model,\n+\t\t\t      (pb.get_pending_diagnostic (),\n+\t\t\t       reg, dst_state.m_region_model,\n \t\t\t       DECL_SOURCE_LOCATION (decl),\n \t\t\t       dst_point.get_fndecl (),\n \t\t\t       dst_stack_depth,\n@@ -2036,7 +2041,8 @@ diagnostic_manager::add_events_for_eedge (const path_builder &pb,\n \t\t  case RK_HEAP_ALLOCATED:\n \t\t  case RK_ALLOCA:\n \t\t    emission_path->add_region_creation_events\n-\t\t      (reg, dst_model,\n+\t\t      (pb.get_pending_diagnostic (),\n+\t\t       reg, dst_model,\n \t\t       src_point.get_location (),\n \t\t       src_point.get_fndecl (),\n \t\t       src_stack_depth,"}, {"sha": "56a233b9fa3b30da373b5a07557726be2b591d42", "filename": "gcc/analyzer/diagnostic-manager.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fdiagnostic-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fdiagnostic-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fdiagnostic-manager.h?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -148,7 +148,8 @@ class diagnostic_manager : public log_user\n \t\t\t    const exploded_path &epath,\n \t\t\t    checker_path *emission_path) const;\n \n-  void add_event_on_final_node (const exploded_node *final_enode,\n+  void add_event_on_final_node (const path_builder &pb,\n+\t\t\t\tconst exploded_node *final_enode,\n \t\t\t\tchecker_path *emission_path,\n \t\t\t\tinteresting_t *interest) const;\n "}, {"sha": "babefc5ad4e70a2e4bd8cf4c4a951bf94856e8b5", "filename": "gcc/analyzer/pending-diagnostic.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fpending-diagnostic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fpending-diagnostic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fpending-diagnostic.cc?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -199,6 +199,26 @@ pending_diagnostic::add_call_event (const exploded_edge &eedge,\n \t\t\t      src_stack_depth));\n }\n \n+/* Base implementation of pending_diagnostic::add_region_creation_events.\n+   See the comment for class region_creation_event.  */\n+\n+void\n+pending_diagnostic::add_region_creation_events (const region *reg,\n+\t\t\t\t\t\ttree capacity,\n+\t\t\t\t\t\tlocation_t loc,\n+\t\t\t\t\t\ttree fndecl, int depth,\n+\t\t\t\t\t\tchecker_path &emission_path)\n+{\n+  emission_path.add_event\n+    (make_unique<region_creation_event_memory_space> (reg->get_memory_space (),\n+\t\t\t\t\t\t      loc, fndecl, depth));\n+\n+  if (capacity)\n+    emission_path.add_event\n+      (make_unique<region_creation_event_capacity> (capacity,\n+\t\t\t\t\t\t    loc, fndecl, depth));\n+}\n+\n /* Base implementation of pending_diagnostic::add_final_event.\n    Add a warning_event to the end of EMISSION_PATH.  */\n "}, {"sha": "4bc3080c049c33c03f4ff128497f3de7512c1d62", "filename": "gcc/analyzer/pending-diagnostic.h", "status": "modified", "additions": 9, "deletions": 28, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fpending-diagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fpending-diagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fpending-diagnostic.h?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -59,17 +59,6 @@ struct event_desc\n   bool m_colorize;\n };\n \n-/* For use by pending_diagnostic::describe_region_creation.  */\n-\n-struct region_creation : public event_desc\n-{\n-  region_creation (bool colorize, const region *reg)\n-  : event_desc (colorize), m_reg (reg)\n-  {}\n-\n-  const region *m_reg;\n-};\n-\n /* For use by pending_diagnostic::describe_state_change.  */\n \n struct state_change : public event_desc\n@@ -219,23 +208,6 @@ class pending_diagnostic\n      for the diagnostic, and FALSE for events in their paths.  */\n   virtual location_t fixup_location (location_t loc, bool primary) const;\n \n-  /* For greatest precision-of-wording, the various following \"describe_*\"\n-     virtual functions give the pending diagnostic a way to describe events\n-     in a diagnostic_path in terms that make sense for that diagnostic.\n-\n-     In each case, return a non-NULL label_text to give the event a custom\n-     description; NULL otherwise (falling back on a more generic\n-     description).  */\n-\n-  /* Precision-of-wording vfunc for describing a region creation event\n-     triggered by the mark_interesting_stuff vfunc.  */\n-  virtual label_text\n-  describe_region_creation_event (const evdesc::region_creation &)\n-  {\n-    /* Default no-op implementation.  */\n-    return label_text ();\n-  }\n-\n   /* Precision-of-wording vfunc for describing a critical state change\n      within the diagnostic_path.\n \n@@ -338,6 +310,15 @@ class pending_diagnostic\n   virtual void add_call_event (const exploded_edge &,\n \t\t\t       checker_path *);\n \n+  /* Vfunc for adding any events for the creation of regions identified\n+     by the mark_interesting_stuff vfunc.\n+     See the comment for class region_creation_event.  */\n+  virtual void add_region_creation_events (const region *reg,\n+\t\t\t\t\t   tree capacity,\n+\t\t\t\t\t   location_t loc,\n+\t\t\t\t\t   tree fndecl, int depth,\n+\t\t\t\t\t   checker_path &emission_path);\n+\n   /* Vfunc for adding the final warning_event to a checker_path, so that e.g.\n      the infinite recursion diagnostic can have its diagnostic appear at\n      the callsite, but the final event in the path be at the entrypoint"}, {"sha": "c6486f315f4c241d734a3c4652012725dafa5a5a", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -74,6 +74,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"calls.h\"\n #include \"is-a.h\"\n #include \"gcc-rich-location.h\"\n+#include \"analyzer/checker-event.h\"\n+#include \"analyzer/checker-path.h\"\n \n #if ENABLE_ANALYZER\n \n@@ -2777,12 +2779,14 @@ class dubious_allocation_size\n {\n public:\n   dubious_allocation_size (const region *lhs, const region *rhs)\n-  : m_lhs (lhs), m_rhs (rhs), m_expr (NULL_TREE)\n+  : m_lhs (lhs), m_rhs (rhs), m_expr (NULL_TREE),\n+    m_has_allocation_event (false)\n   {}\n \n   dubious_allocation_size (const region *lhs, const region *rhs,\n \t\t\t   tree expr)\n-  : m_lhs (lhs), m_rhs (rhs), m_expr (expr)\n+  : m_lhs (lhs), m_rhs (rhs), m_expr (expr),\n+    m_has_allocation_event (false)\n   {}\n \n   const char *get_kind () const final override\n@@ -2811,34 +2815,17 @@ class dubious_allocation_size\n \t\t\t \" of the pointee's size\");\n   }\n \n-  label_text\n-  describe_region_creation_event (const evdesc::region_creation &ev) final\n-  override\n-  {\n-    m_allocation_event = &ev;\n-    if (m_expr)\n-      {\n-\tif (TREE_CODE (m_expr) == INTEGER_CST)\n-\t  return ev.formatted_print (\"allocated %E bytes here\", m_expr);\n-\telse\n-\t  return ev.formatted_print (\"allocated %qE bytes here\", m_expr);\n-      }\n-\n-    return ev.formatted_print (\"allocated here\");\n-  }\n-\n   label_text describe_final_event (const evdesc::final_event &ev) final\n   override\n   {\n     tree pointee_type = TREE_TYPE (m_lhs->get_type ());\n-    if (m_allocation_event)\n-      /* Fallback: Typically, we should always\n-\t see an m_allocation_event before.  */\n+    if (m_has_allocation_event)\n       return ev.formatted_print (\"assigned to %qT here;\"\n \t\t\t\t \" %<sizeof (%T)%> is %qE\",\n \t\t\t\t m_lhs->get_type (), pointee_type,\n \t\t\t\t size_in_bytes (pointee_type));\n-\n+    /* Fallback: Typically, we should always see an allocation_event\n+       before.  */\n     if (m_expr)\n       {\n \tif (TREE_CODE (m_expr) == INTEGER_CST)\n@@ -2859,6 +2846,20 @@ class dubious_allocation_size\n \t\t\t       size_in_bytes (pointee_type));\n   }\n \n+  void\n+  add_region_creation_events (const region *,\n+\t\t\t      tree capacity,\n+\t\t\t      location_t loc,\n+\t\t\t      tree fndecl, int depth,\n+\t\t\t      checker_path &emission_path) final override\n+  {\n+    emission_path.add_event\n+      (make_unique<region_creation_event_allocation_size> (capacity,\n+\t\t\t\t\t\t\t   loc, fndecl, depth));\n+\n+    m_has_allocation_event = true;\n+  }\n+\n   void mark_interesting_stuff (interesting_t *interest) final override\n   {\n     interest->add_region_creation (m_rhs);\n@@ -2868,7 +2869,7 @@ class dubious_allocation_size\n   const region *m_lhs;\n   const region *m_rhs;\n   const tree m_expr;\n-  const evdesc::region_creation *m_allocation_event;\n+  bool m_has_allocation_event;\n };\n \n /* Return true on dubious allocation sizes for constant sizes.  */"}, {"sha": "a56b25b4374d7dec8817f68812ae91649756fd80", "filename": "gcc/testsuite/gcc.dg/analyzer/allocation-size-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-4.c?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -56,6 +56,6 @@ void test_5 (void)\n   free (ptr);\n \n   /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size \\\\\\[CWE-131\\\\\\]\" \"warning\" { target *-*-* } malloc5 } */\n-  /* { dg-message \"1 bytes\" \"note\" { target *-*-* } malloc5 } */\n+  /* { dg-message \"allocated 1 byte here\" \"note\" { target *-*-* } malloc5 } */\n   /* { dg-message \"'struct base \\\\*' here; 'sizeof \\\\(struct base\\\\)' is '\\\\d+'\" \"note\" { target *-*-* } malloc5 } */\n }"}, {"sha": "7251665105db289b224d1b1b93167bfaa6d437cc", "filename": "gcc/testsuite/gcc.dg/analyzer/allocation-size-multiline-1.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-multiline-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-multiline-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-multiline-1.c?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-additional-options \"-fdiagnostics-path-format=inline-events -fdiagnostics-show-caret\" } */\n+\n+#include <stdint.h>\n+\n+void test_constant_1 (void)\n+{\n+  int32_t *ptr = __builtin_malloc (1); /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size\" } */\n+  __builtin_free (ptr);\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+   int32_t *ptr = __builtin_malloc (1);\n+                  ^~~~~~~~~~~~~~~~~~~~\n+  'test_constant_1': events 1-2\n+    |\n+    |   int32_t *ptr = __builtin_malloc (1);\n+    |                  ^~~~~~~~~~~~~~~~~~~~\n+    |                  |\n+    |                  (1) allocated 1 byte here\n+    |                  (2) assigned to 'int32_t *'\n+    |\n+   { dg-end-multiline-output \"\" } */\n+\n+void test_constant_2 (void)\n+{\n+  int32_t *ptr = __builtin_malloc (2); /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size\" } */\n+  __builtin_free (ptr);\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+   int32_t *ptr = __builtin_malloc (2);\n+                  ^~~~~~~~~~~~~~~~~~~~\n+  'test_constant_2': events 1-2\n+    |\n+    |   int32_t *ptr = __builtin_malloc (2);\n+    |                  ^~~~~~~~~~~~~~~~~~~~\n+    |                  |\n+    |                  (1) allocated 2 bytes here\n+    |                  (2) assigned to 'int32_t *'\n+    |\n+   { dg-end-multiline-output \"\" } */\n+\n+void test_symbolic (int n)\n+{\n+  int32_t *ptr = __builtin_malloc (n * 2); /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size\" } */\n+  __builtin_free (ptr);\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+   int32_t *ptr = __builtin_malloc (n * 2);\n+                  ^~~~~~~~~~~~~~~~~~~~~~~~\n+  'test_symbolic': event 1\n+    |\n+    |   int32_t *ptr = __builtin_malloc (n * 2);\n+    |                  ^~~~~~~~~~~~~~~~~~~~~~~~\n+    |                  |\n+    |                  (1) allocated 'n * 2' bytes and assigned to 'int32_t *'\n+    |\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "7cadbb74751670d238d19454da5e9d97a3d3f103", "filename": "gcc/testsuite/gcc.dg/analyzer/allocation-size-multiline-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-multiline-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-multiline-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fallocation-size-multiline-2.c?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-additional-options \"-fdiagnostics-path-format=inline-events -fdiagnostics-show-caret -fanalyzer-fine-grained\" } */\n+/* { dg-require-effective-target alloca } */\n+\n+#include <stdint.h>\n+\n+void test_constant_1 (void)\n+{\n+  int32_t *ptr = __builtin_alloca (1); /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size\" } */\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+   int32_t *ptr = __builtin_alloca (1);\n+                  ^~~~~~~~~~~~~~~~~~~~\n+  'test_constant_1': events 1-2\n+    |\n+    |   int32_t *ptr = __builtin_alloca (1);\n+    |                  ^~~~~~~~~~~~~~~~~~~~\n+    |                  |\n+    |                  (1) allocated 1 byte here\n+    |                  (2) assigned to 'int32_t *'\n+    |\n+   { dg-end-multiline-output \"\" } */\n+\n+void test_constant_2 (void)\n+{\n+  int32_t *ptr = __builtin_alloca (2); /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size\" } */\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+   int32_t *ptr = __builtin_alloca (2);\n+                  ^~~~~~~~~~~~~~~~~~~~\n+  'test_constant_2': events 1-2\n+    |\n+    |   int32_t *ptr = __builtin_alloca (2);\n+    |                  ^~~~~~~~~~~~~~~~~~~~\n+    |                  |\n+    |                  (1) allocated 2 bytes here\n+    |                  (2) assigned to 'int32_t *'\n+    |\n+   { dg-end-multiline-output \"\" } */\n+\n+void test_symbolic (int n)\n+{\n+  int32_t *ptr = __builtin_alloca (n * 2); /* { dg-warning \"allocated buffer size is not a multiple of the pointee's size\" } */\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+   int32_t *ptr = __builtin_alloca (n * 2);\n+                  ^~~~~~~~~~~~~~~~~~~~~~~~\n+  'test_symbolic': events 1-2\n+    |\n+    |   int32_t *ptr = __builtin_alloca (n * 2);\n+    |                  ^~~~~~~~~~~~~~~~~~~~~~~~\n+    |                  |\n+    |                  (1) allocated 'n * 2' bytes here\n+    |                  (2) assigned to 'int32_t *'\n+    |\n+   { dg-end-multiline-output \"\" } */\n+\n+/* FIXME: am getting a duplicate warning here for some reason\n+   without -fanalyzer-fine-grained (PR PR analyzer/107851).  */\n+"}, {"sha": "ca5022d20cb1b9086f1eb3ce2c7917091173aa37", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-multiline-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-multiline-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-multiline-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-multiline-1.c?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -25,7 +25,7 @@ void int_arr_write_element_after_end_off_by_one(int32_t x)\n     | int32_t arr[10];\n     |         ^~~\n     |         |\n-    |         (1) capacity is 40 bytes\n+    |         (1) capacity: 40 bytes\n     |\n     +--> 'int_arr_write_element_after_end_off_by_one': event 2 (depth 1)\n            |"}, {"sha": "660901ab782d136f58a0fea25b5fc8b21de33dba", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-multiline-2.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-multiline-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-multiline-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-multiline-2.c?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -0,0 +1,32 @@\n+/* Integration test of how the execution path looks for\n+   -Wanalyzer-out-of-bounds with a symbolic size.  */\n+\n+/* { dg-additional-options \"-fdiagnostics-show-path-depths\" } */\n+/* { dg-additional-options \"-fdiagnostics-path-format=inline-events -fdiagnostics-show-caret\" } */\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+void int_vla_write_element_after_end_off_by_one(int32_t x, size_t n)\n+{\n+  int32_t arr[n];\n+\n+  arr[n] = x;  /* { dg-warning \"stack-based buffer overflow\" } */\n+}\n+\n+/* { dg-begin-multiline-output \"\" }\n+   arr[n] = x;\n+   ~~~~~~~^~~\n+  'int_vla_write_element_after_end_off_by_one': events 1-2 (depth 1)\n+    |\n+    |   int32_t arr[n];\n+    |           ^~~\n+    |           |\n+    |           (1) capacity: 'n * 4' bytes\n+    |\n+    |   arr[n] = x;\n+    |   ~~~~~~~~~~\n+    |          |\n+    |          (2) write of 4 bytes at offset 'n * 4' exceeds the buffer\n+    |\n+   { dg-end-multiline-output \"\" } */"}, {"sha": "fa4b613550da2e88393c343100a2658157878bd5", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-read-char-arr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-char-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-char-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-char-arr.c?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -1,4 +1,4 @@\n-char arr[10]; /* { dg-message \"capacity is 10 bytes\" } */\n+char arr[10]; /* { dg-message \"capacity: 10 bytes\" } */\n \n char char_arr_read_element_before_start_far(void)\n {"}, {"sha": "c04cc19df933782bd7af40284d228916d962ba79", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-read-int-arr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-int-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-int-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-read-int-arr.c?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -1,6 +1,6 @@\n #include <stdint.h>\n \n-int32_t arr[10]; /* { dg-message \"capacity is 40 bytes\" } */\n+int32_t arr[10]; /* { dg-message \"capacity: 40 bytes\" } */\n \n int32_t int_arr_read_element_before_start_far(void)\n {"}, {"sha": "2bc707c8d03127efbf11c3e7e9267b3e590326c4", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-write-char-arr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-char-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-char-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-char-arr.c?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -1,4 +1,4 @@\n-char arr[10]; /* { dg-message \"capacity is 10 bytes\" } */\n+char arr[10]; /* { dg-message \"capacity: 10 bytes\" } */\n \n void char_arr_write_element_before_start_far(char x)\n {"}, {"sha": "c6c0435cf58392170406e94a82541cce30aa6f68", "filename": "gcc/testsuite/gcc.dg/analyzer/out-of-bounds-write-int-arr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-int-arr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5758fe5b430ef3447fbab947fcea32a1d995f36/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-int-arr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fout-of-bounds-write-int-arr.c?ref=f5758fe5b430ef3447fbab947fcea32a1d995f36", "patch": "@@ -1,6 +1,6 @@\n #include <stdint.h>\n \n-int32_t arr[10]; /* { dg-message \"capacity is 40 bytes\" } */\n+int32_t arr[10]; /* { dg-message \"capacity: 40 bytes\" } */\n \n void int_arr_write_element_before_start_far(int32_t x)\n {"}]}