{"sha": "6cdcce60ff317b9a3feca930306194f110ed0171", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNkY2NlNjBmZjMxN2I5YTNmZWNhOTMwMzA2MTk0ZjExMGVkMDE3MQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-07-19T19:31:26Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-07-19T19:31:26Z"}, "message": "combine: Fix for PR81423\n\nWe here have an AND of a SUBREG of an LSHIFTRT.  If that SUBREG is\nparadoxical, the extraction we form is the length of the size of the\ninner mode, which includes some bits that should not be in the result.\nJust give up in that case.\n\n\n\tPR rtl-optimization/81423\n\t* combine.c (make_compound_operation_int): Don't try to optimize\n\tthe AND of a SUBREG of an LSHIFTRT if that SUBREG is paradoxical.\n\nFrom-SVN: r250365", "tree": {"sha": "326944f75e8ff235797295ee34a283d240afdcde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/326944f75e8ff235797295ee34a283d240afdcde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cdcce60ff317b9a3feca930306194f110ed0171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cdcce60ff317b9a3feca930306194f110ed0171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cdcce60ff317b9a3feca930306194f110ed0171", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cdcce60ff317b9a3feca930306194f110ed0171/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6722e5bf26e4b795c005f259c68714c82c2ba31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6722e5bf26e4b795c005f259c68714c82c2ba31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6722e5bf26e4b795c005f259c68714c82c2ba31"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "96c0e351624a21ae43f93f2569eb9945ef97916d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cdcce60ff317b9a3feca930306194f110ed0171/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cdcce60ff317b9a3feca930306194f110ed0171/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cdcce60ff317b9a3feca930306194f110ed0171", "patch": "@@ -1,3 +1,9 @@\n+2018-07-19  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/81423\n+\t* combine.c (make_compound_operation_int): Don't try to optimize\n+\tthe AND of a SUBREG of an LSHIFTRT if that SUBREG is paradoxical.\n+\n 2017-07-19  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/81423"}, {"sha": "8dc62b57266ba29a5e917d966a6d3166ea12f539", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cdcce60ff317b9a3feca930306194f110ed0171/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cdcce60ff317b9a3feca930306194f110ed0171/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=6cdcce60ff317b9a3feca930306194f110ed0171", "patch": "@@ -7956,18 +7956,9 @@ make_compound_operation_int (machine_mode mode, rtx *x_ptr,\n \t\t\t\t     XEXP (inner_x0, 1),\n \t\t\t\t     i, 1, 0, in_code == COMPARE);\n \n-\t  if (new_rtx)\n-\t    {\n-\t      /* If we narrowed the mode when dropping the subreg, then\n-\t\t we must zero-extend to keep the semantics of the AND.  */\n-\t      if (GET_MODE_SIZE (inner_mode) >= GET_MODE_SIZE (mode))\n-\t\t;\n-\t      else if (SCALAR_INT_MODE_P (inner_mode))\n-\t\tnew_rtx = simplify_gen_unary (ZERO_EXTEND, mode,\n-\t\t\t\t\t      new_rtx, inner_mode);\n-\t      else\n-\t\tnew_rtx = NULL;\n-\t    }\n+\t  /* If we narrowed the mode when dropping the subreg, then we lose.  */\n+\t  if (GET_MODE_SIZE (inner_mode) < GET_MODE_SIZE (mode))\n+\t    new_rtx = NULL;\n \n \t  /* If that didn't give anything, see if the AND simplifies on\n \t     its own.  */"}]}