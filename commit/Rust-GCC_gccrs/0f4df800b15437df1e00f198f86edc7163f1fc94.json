{"sha": "0f4df800b15437df1e00f198f86edc7163f1fc94", "node_id": "C_kwDOANBUbNoAKDBmNGRmODAwYjE1NDM3ZGYxZTAwZjE5OGY4NmVkYzcxNjNmMWZjOTQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-31T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-31T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "849d341963c550e1d69ac56816b5af0eb01375cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/849d341963c550e1d69ac56816b5af0eb01375cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f4df800b15437df1e00f198f86edc7163f1fc94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f4df800b15437df1e00f198f86edc7163f1fc94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f4df800b15437df1e00f198f86edc7163f1fc94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f4df800b15437df1e00f198f86edc7163f1fc94/comments", "author": null, "committer": null, "parents": [{"sha": "ff91735a5b861dd6eaf2c1e511f26a9255898e7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff91735a5b861dd6eaf2c1e511f26a9255898e7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff91735a5b861dd6eaf2c1e511f26a9255898e7d"}], "stats": {"total": 338, "additions": 337, "deletions": 1}, "files": [{"sha": "1d1cc4690de65c9914f386be9aca7df0ee6b0d76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4df800b15437df1e00f198f86edc7163f1fc94/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4df800b15437df1e00f198f86edc7163f1fc94/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f4df800b15437df1e00f198f86edc7163f1fc94", "patch": "@@ -1,3 +1,82 @@\n+2022-05-30  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386.cc (ix86_modes_tieable_p): Allow SCmode to be\n+\ttieable with DImode on TARGET_64BIT, and SCmode tieable with\n+\tV2SFmode, and DCmode with V2DFmode.\n+\n+2022-05-30  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR rtl-optimization/101617\n+\t* config/i386/i386-expand.cc (ix86_expand_int_movcc): Add a\n+\tspecial case (indicated by negate_cc_compare_p) to generate a\n+\t-1/0 mask using neg;sbb.\n+\t* config/i386/i386.md (x86_neg<mode>_ccc): New define_expand\n+\tto generate an *x86_neg<mode>_ccc instruction.\n+\t(x86_mov<mode>cc_0_m1_neg): Likewise, a new define_expand to\n+\tgenerate a *x86_mov<mode>cc_0_m1_neg instruction.\n+\n+2022-05-30  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* rtlanal.cc (rtx_cost) <MULT>: Treat FMA, SS_MULT, US_MULT,\n+\tSMUL_HIGHPART and UMUL_HIGHPART as having the same cost as MULT.\n+\t<DIV>: Likewise, SS_DIV and US_DIV have the same default as DIV.\n+\n+2022-05-30  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/70321\n+\t* config/i386/i386-expand.cc (ix86_expand_branch): Don't decompose\n+\tDI mode equality/inequality using XOR here.  Instead generate a\n+\tCOMPARE for doubleword modes (DImode on !TARGET_64BIT or TImode).\n+\t* config/i386/i386-features.cc (gen_gpr_to_xmm_move_src): Use\n+\tgen_rtx_SUBREG when NUNITS is 1, i.e. for TImode to V1TImode.\n+\t(general_scalar_chain::convert_compare): New function to convert\n+\tscalar equality/inequality comparison into vector operations.\n+\t(general_scalar_chain::convert_insn) [COMPARE]: Refactor. Call\n+\tnew convert_compare helper method.\n+\t(convertible_comparion_p): Update to match doubleword COMPARE\n+\tof two register, memory or integer constant operands.\n+\t* config/i386/i386-features.h (general_scalar_chain::convert_compare):\n+\tPrototype/declare member function here.\n+\t* config/i386/i386.md (cstore<mode>4): Change mode to SDWIM, but\n+\tonly allow new doubleword modes for EQ and NE operators.\n+\t(*cmp<dwi>_doubleword): New define_insn_and_split, to split a\n+\tdoubleword comparison into a pair of XORs followed by an IOR to\n+\tset the (zero) flags register, optimizing the XORs if possible.\n+\t* config/i386/sse.md (V_AVX): Include V1TI and V2TI in mode\n+\titerator; V_AVX is (currently) only used by ptest.\n+\t(sse4_1 mode attribute): Update to support V1TI and V2TI.\n+\n+2022-05-30  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md: Remove constraints when used with\n+\tconst_int_operand, const0_operand, const_1_operand, constm1_operand,\n+\tconst8_operand, const128_operand, const248_operand, const123_operand,\n+\tconst2367_operand, const1248_operand, const359_operand,\n+\tconst_4_or_8_to_11_operand, const48_operand, const_0_to_1_operand,\n+\tconst_0_to_3_operand, const_0_to_4_operand, const_0_to_5_operand,\n+\tconst_0_to_7_operand, const_0_to_15_operand, const_0_to_31_operand,\n+\tconst_0_to_63_operand, const_0_to_127_operand, const_0_to_255_operand,\n+\tconst_0_to_255_mul_8_operand, const_1_to_31_operand,\n+\tconst_1_to_63_operand, const_2_to_3_operand, const_4_to_5_operand,\n+\tconst_4_to_7_operand, const_6_to_7_operand, const_8_to_9_operand,\n+\tconst_8_to_11_operand, const_8_to_15_operand, const_10_to_11_operand,\n+\tconst_12_to_13_operand, const_12_to_15_operand, const_14_to_15_operand,\n+\tconst_16_to_19_operand, const_16_to_31_operand, const_20_to_23_operand,\n+\tconst_24_to_27_operand and const_28_to_31_operand.\n+\t* config/i386/mmx.md: Ditto.\n+\t* config/i386/sse.md: Ditto.\n+\t* config/i386/subst.md: Ditto.\n+\t* config/i386/sync.md: Ditto.\n+\n+2022-05-30  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/i386/i386.md (bmi2_umul<mode><dwi>3_1): Correct MEM_P()\n+\targuments.\n+\n+2022-05-30  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* config/arm/arm.cc (arm_vectorize_vec_perm_const): Adjust prototype.\n+\n 2022-05-29  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR target/105599"}, {"sha": "de050e6319cb3458444e22ced29f27119c6c2dc7", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4df800b15437df1e00f198f86edc7163f1fc94/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4df800b15437df1e00f198f86edc7163f1fc94/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=0f4df800b15437df1e00f198f86edc7163f1fc94", "patch": "@@ -1 +1 @@\n-20220530\n+20220531"}, {"sha": "ac5f8cf9ebbbcc7fd58e5eb7a38d233099a6654c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4df800b15437df1e00f198f86edc7163f1fc94/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4df800b15437df1e00f198f86edc7163f1fc94/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0f4df800b15437df1e00f198f86edc7163f1fc94", "patch": "@@ -1,3 +1,208 @@\n+2022-05-30  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* erroutc.adb (Get_Warning_Option): Don't consider `?` as a\n+\tvalid option switch.\n+\n+2022-05-30  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* erroutc.ads (Get_Warning_Option): New function returning the\n+\toption responsible for a warning if it exists.\n+\t* erroutc.adb (Get_Warning_Option): Likewise.\n+\t(Get_Warning_Tag): Rely on Get_Warning_Option when possible.\n+\t* errout.adb (Output_JSON_Message): Emit option field.\n+\n+2022-05-30  Julien Bortolussi  <bortolussi@adacore.com>\n+\n+\t* libgnat/a-cfdlli.ads (Insert): Remove the duplication.\n+\n+2022-05-30  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch6.adb (Check_Subprogram_Variant): Ignore structural\n+\tvariants.\n+\n+2022-05-30  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* osint.adb (Locate_File): Change variable to constant and\n+\tinitialize it by concatenation of directory, file name and NUL.\n+\n+2022-05-30  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_advice.rst (Packed Types): Remove\n+\tduplicated and wrongly placed paragraph.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-05-30  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* inline.adb (Check_Package_Body_For_Inlining): Add insertion\n+\tcharacter.\n+\n+2022-05-30  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* freeze.adb (Warn_Overlay): Add 'o' insertion character.\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Likewise.\n+\t* sem_util.adb (Note_Possible_Modifications): Likewise.\n+\n+2022-05-30  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Useless_Assignment): Fix insertion\n+\tcharacter.\n+\n+2022-05-30  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_disp.adb (Warn_On_Late_Primitive_After_Private_Extension):\n+\tFix insertion character.\n+\n+2022-05-30  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_elab.adb (Process_Conditional_ABE_Access_Taken): Add '.f'\n+\tinsertion characters.\n+\n+2022-05-30  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* lib-xref.ads (Deferred_Reference_Entry, Defer_Reference,\n+\tProcess_Deferred_References, Has_Deferred_Reference): Remove\n+\tclient API.\n+\t* lib-xref.adb (Deferred_References, Defer_Reference,\n+\tHas_Deferred_Reference, Process_Deferred_References): Remove\n+\timplementation.\n+\t* frontend.adb, sem_ch11.adb, sem_ch5.adb, sem_res.adb,\n+\tsem_util.adb, sem_warn.adb: Remove uses of Deferred_References.\n+\n+2022-05-30  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch7.adb (Wrap_HSS_In_Block): Do not create a new block in\n+\tthe case of function bodies. We include all subprogram bodies,\n+\tbecause it's harmless for procedures. We cannot easily avoid\n+\tcreating this block in ALL cases, because some transformations\n+\tof (e.g.) task bodies end up moving some code such that the\n+\twrong exception handlers apply to that code.\n+\t(Build_Finalizer_Call): Remove code for creating a new block.\n+\tThis was unreachable code, given that Wrap_HSS_In_Block has\n+\talready done that, but with the above change to\n+\tWrap_HSS_In_Block, this code becomes reachable, and triggers\n+\tessentially the same bug.\n+\t* exp_ch7.ads: Adjust comment.\n+\n+2022-05-30  Justin Squirek  <squirek@adacore.com>\n+\n+\t* par-ch6.adb (P_Formal_Part): Set Aspect_Specifications on all\n+\tformals instead of just the last in a formal id list.\n+\t* sem_ch6.adb (Analyze_Null_Procedure): Mark expanded null\n+\tgeneric procedures as trivial in order to avoid spurious\n+\tunreferenced warnings.\n+\n+2022-05-30  Romain Beguet  <beguet@adacore.com>\n+\n+\t* libgnat/s-dwalin.adb: Add a subtype declaration to fix the\n+\tambiguity.\n+\n+2022-05-30  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch13.adb (Is_Predicate_Static): Do not generate warnings\n+\tabout subexpressions of enclosing expressions. Generate warnings\n+\tfor predicates that are known to be always true or always false,\n+\texcept in the case where the predicate is expressed as a Boolean\n+\tliteral. Deal with non-predicate-static expressions that have\n+\tbeen transformed into predicate-static expressions.  Add missing\n+\tIs_Type_Ref call to N_Membership_Test case.\n+\n+2022-05-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_Record_Aggregate.Build_Back_End_Aggregate):\n+\tSkip the discriminants at the start of the component list before\n+\tlooking for the components inherited from the parent in the case\n+\tof a tagged extension.\n+\n+2022-05-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_disp.adb (Make_DT): Remove remaining freezing code.\n+\n+2022-05-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_attr.adb (Resolve_Attribute) <Attribute_Access>: Don't analyze\n+\tthe body of an expression function in the case of a dispatch table.\n+\n+2022-05-30  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat1drv.adb, opt.ads, sem_ch7.adb: Introduce CCG_Mode.\n+\n+2022-05-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* Makefile.rtl: Add new units.\n+\t* libgnat/s-aridou.adb (Scaled_Divide): Add ghost code for provers.\n+\t* libgnat/s-spcuop.adb: New unit for ghost cut operations.\n+\t* libgnat/s-spcuop.ads: New unit for ghost cut operations.\n+\t* libgnat/s-spark.ads: New unit.\n+\n+2022-05-30  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* doc/gnat_rm/security_hardening_features.rst: Mention\n+\tavailability in other languages when applicable.\n+\t(Stack Scrubbing): Associate the attribute with types, expand\n+\tsome comments, fix the example involving access to variables.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-05-30  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/a-cofuse.ads (Empty_Set): Fix typo in comment.\n+\n+2022-05-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch6.adb (New_Overloaded_Entity): Deal specifically with the\n+\toverriding of the \"=\" operator for tagged types.\n+\n+2022-05-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Adjust call to Make_DT.\n+\t* exp_disp.ads (Building_Static_DT): Remove pragma Inline.\n+\t(Building_Static_Secondary_DT): Likewise.\n+\t(Convert_Tag_To_Interface): Likewise.\n+\t(Make_DT): Remove second parameter.\n+\t* exp_disp.adb (Make_DT): Likewise.\n+\t(Check_Premature_Freezing): Delete.\n+\tPass Do_Freeze_Profile as False in call to Freeze_Entity.\n+\t* freeze.ads (Freezing_Library_Level_Tagged_Type): Delete.\n+\t* freeze.adb (Freeze_Profile): Remove obsolete code.\n+\t(Freeze_Entity): Tweak comment.\n+\n+2022-05-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-arit32.adb (Scaled_Divide32): Move assertion up.\n+\n+2022-05-30  Yannick Moy  <moy@adacore.com>\n+\n+\tPR ada/105303\n+\t* libgnat/s-gearop.adb: Add pragma Assertion_Policy in generic\n+\tbodies making use of additional assertions or ghost code.\n+\t* libgnat/s-gearop.ads: Remove confusing Assertion_Policy.\n+\n+2022-05-30  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_ch11.adb (Expand_N_Raise_Expression): Remove\n+\tConvert_To_Return_False test.\n+\t* gen_il-fields.ads: Remove Convert_To_Return_False field.\n+\t* gen_il-gen-gen_nodes.adb: Remove use of\n+\tConvert_To_Return_False field.\n+\t* sinfo.ads: Remove comment describing Convert_To_Return_False\n+\tflag.\n+\n+2022-05-30  Julien Bortolussi  <bortolussi@adacore.com>\n+\n+\t* libgnat/a-cofuma.ads, libgnat/a-cofuma.adb,\n+\tlibgnat/a-cofuse.ads, libgnat/a-cofuse.adb,\n+\tlibgnat/a-cofuve.ads, libgnat/a-cofuve.adb: Add empty\n+\tconstructors.\n+\n+2022-05-30  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* bindgen.adb (Gen_CUDA_Init): Remove code generating CUDA\n+\tdefinitions.\n+\t(Gen_CUDA_Defs): New function, generating definitions\n+\tinitialized by Gen_CUDA_Init.\n+\t(Gen_Output_File_Ada): Call Gen_CUDA_Defs instead of\n+\tGen_CUDA_Init.\n+\t(Gen_Adainit): Call Gen_CUDA_Init.\n+\n 2022-05-28  Alexandre Oliva  <oliva@adacore.com>\n \n \t* gcc-interface/Makefile.in (OSCONS_CC): Rename to..."}, {"sha": "5b52feaf897777d8789bacf2175d915386ac9617", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4df800b15437df1e00f198f86edc7163f1fc94/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4df800b15437df1e00f198f86edc7163f1fc94/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0f4df800b15437df1e00f198f86edc7163f1fc94", "patch": "@@ -1,3 +1,10 @@\n+2022-05-30  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/99080\n+\t* pt.cc (type_dependent_expression_p): Assert !TYPE_P.\n+\t* semantics.cc (finish_id_expression_1): Handle UNBOUND_CLASS_TEMPLATE\n+\tspecifically.\n+\n 2022-05-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.cc (handle_omp_declare_target_clause): If OMP_CLAUSE_LINK was"}, {"sha": "93eea4d4d5a9141f39a0d18a066b7eb518ce2b81", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4df800b15437df1e00f198f86edc7163f1fc94/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4df800b15437df1e00f198f86edc7163f1fc94/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0f4df800b15437df1e00f198f86edc7163f1fc94", "patch": "@@ -1,3 +1,12 @@\n+2022-05-30  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/91300\n+\t* libgfortran.h: Define new error code LIBERROR_NO_MEMORY.\n+\t* trans-stmt.cc (gfc_trans_allocate): Generate code for setting\n+\tERRMSG depending on result of STAT result of ALLOCATE.\n+\t* trans.cc (gfc_allocate_using_malloc): Use STAT value of\n+\tLIBERROR_NO_MEMORY in case of failed malloc.\n+\n 2022-05-28  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* dump-parse-tree.cc (show_omp_clauses): Handle OMP_LIST_ENTER."}, {"sha": "e7c843d8c21014b0771bb181e8e165590ea3fc64", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f4df800b15437df1e00f198f86edc7163f1fc94/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f4df800b15437df1e00f198f86edc7163f1fc94/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f4df800b15437df1e00f198f86edc7163f1fc94", "patch": "@@ -1,3 +1,39 @@\n+2022-05-30  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/91300\n+\t* gfortran.dg/allocate_alloc_opt_15.f90: New test.\n+\n+2022-05-30  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR rtl-optimization/101617\n+\t* gcc.target/i386/pr101617.c: New test case.\n+\n+2022-05-30  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/70321\n+\t* gcc.target/i386/pr70321.c: New test case.\n+\t* gcc.target/i386/sse4_1-stv-1.c: New test case.\n+\n+2022-05-30  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/pr105624.c: New test.\n+\n+2022-05-30  Vineet Gupta  <vineetg@rivosinc.com>\n+\n+\t* gcc.target/riscv/fmax.c: Add dg-require-effective-target hard_float.\n+\t* gcc.target/riscv/fmaxf.c: Ditto.\n+\t* gcc.target/riscv/fmin.c: Ditto.\n+\t* gcc.target/riscv/fminf.c: Ditto.\n+\t* gcc.target/riscv/smax-ieee.c: Ditto.\n+\t* gcc.target/riscv/smax.c: Ditto.\n+\t* gcc.target/riscv/smaxf-ieee.c: Ditto.\n+\t* gcc.target/riscv/smaxf.c: Ditto.\n+\t* gcc.target/riscv/smin-ieee.c: Ditto.\n+\t* gcc.target/riscv/smin.c: Ditto.\n+\t* gcc.target/riscv/sminf-ieee.c: Ditto.\n+\t* gcc.target/riscv/sminf.c: Ditto.\n+\t* gcc.target/riscv/pr105666.c: Ditto.\n+\n 2022-05-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/105732"}]}