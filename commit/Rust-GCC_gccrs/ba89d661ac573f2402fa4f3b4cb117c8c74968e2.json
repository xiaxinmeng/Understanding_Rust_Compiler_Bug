{"sha": "ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE4OWQ2NjFhYzU3M2YyNDAyZmE0ZjNiNGNiMTE3YzhjNzQ5NjhlMg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-08-04T01:30:06Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-08-04T01:30:06Z"}, "message": "cpplex.c (parse_name): Might have to glue a CPP_OTHER token before the name.\n\n\t* cpplex.c (parse_name): Might have to glue a CPP_OTHER token\n\tbefore the name.\n\t(lex_line): Glue @ onto the beginning of identifiers and\n\tstring constants, in Objective-C mode.\n\t(output_token, spell_token): Handle CPP_OSTRING.\n\t(can_paste, maybe_paste_with_next): Handle pasting @ onto the\n\tbeginning of a NAME or a STRING, in objc mode.\n\n\t* cpplib.c (get_define_node): Do not permit identifiers that\n\tbegin with @ to be #defined.\n\t* cppmacro.c (CAN_PASTE_AFTER): Add CPP_OTHER.\n\t* cpplib.h (TTYPE_TABLE): Add CPP_OSTRING.\n\n\t* c-lang.c, objc/objc-act.c (build_objc_string): Delete.\n\t* c-tree.h (build_objc_string): Delete prototype.\n\t* objc/objc-tree.def: Delete OBJC_STRING_CST.\n\t* c-lex.c (yylex): Use build_string for all three kinds of strings.\n\n\t* gcc.dg/cpp/20000625-2.c: Don't expect a warning on line 4.\n\nFrom-SVN: r35470", "tree": {"sha": "254d84e8b966d54bb05be43ebe0b47a16be7a4ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/254d84e8b966d54bb05be43ebe0b47a16be7a4ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/comments", "author": null, "committer": null, "parents": [{"sha": "d31772ca70b9d2a315372456bfdf343c3806a3f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d31772ca70b9d2a315372456bfdf343c3806a3f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d31772ca70b9d2a315372456bfdf343c3806a3f8"}], "stats": {"total": 246, "additions": 144, "deletions": 102}, "files": [{"sha": "237bf485eee44ba5fe6f9c5e439042b2861cf0b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 23, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "patch": "@@ -1,3 +1,25 @@\n+2000-08-03  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cpplex.c (parse_name): Might have to glue a CPP_OTHER token\n+\tbefore the name.\n+\t(lex_line): Glue @ onto the beginning of identifiers and\n+\tstring constants, in Objective-C mode.\n+\t(output_token, spell_token): Handle CPP_OSTRING.\n+\t(can_paste, maybe_paste_with_next): Handle pasting @ onto the\n+\tbeginning of a NAME or a STRING, in objc mode.\n+\n+\t* cpplib.c (get_define_node): Do not permit identifiers that\n+\tbegin with @ to be #defined.\n+\t* cppmacro.c (CAN_PASTE_AFTER): Add CPP_OTHER.\n+\t* cpplib.h (TTYPE_TABLE): Add CPP_OSTRING.\n+\n+\t* c-lang.c, objc/objc-act.c (build_objc_string): Delete.\n+\t* c-tree.h (build_objc_string): Delete prototype.\n+\t* objc/objc-tree.def: Delete OBJC_STRING_CST.\n+\t* c-lex.c (yylex): Use build_string for all three kinds of strings.\n+\n+\t* c-parse.in, objc/objc-act.c: Update commentary.\n+\n 2000-08-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* extend.texi: Fix typo in last change.\n@@ -33,8 +55,8 @@ Thu Aug  3 10:05:53 2000  Akiko Matsushita <matusita@sra.co.jp>\n \n 2000-08-03  Michael Poole  <poole@troilus.org>\n \n-        * tm.texi (Register Classes): Clarify order of sub-initializers\n-        in REG_CLASS_CONTENTS.\n+\t* tm.texi (Register Classes): Clarify order of sub-initializers\n+\tin REG_CLASS_CONTENTS.\n \n Thu Aug  3 15:53:03 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n@@ -125,7 +147,7 @@ Wed Aug  2 15:59:34 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* cppmain.c (cb_define, cb_undef): Don't generate any output\n \tif not done_initializing.\n-\t* cpplex.c (maybe_paste_with_next): When the token after a ## \n+\t* cpplex.c (maybe_paste_with_next): When the token after a ##\n \tis an omitted rest argument, only delete the token before it\n \tif that token is a comma.  Do not warn about bogus token\n \tpastes for , ## rest_arg.\n@@ -141,7 +163,7 @@ Wed Aug  2 15:59:34 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n \t* config/i386/beos-elf.h (INCLUDE_DEFAULTS): Add additional\n \tBe directories to search path.\n-\t\n+\n \tRemove support for __declspec(dllimport) and __declspec(dllexport).\n \tThis is leftover cruft from the earlier BeOS gcc port when BeOS\n \tused Microsoft's PE object file format.\n@@ -159,15 +181,15 @@ Wed Aug  2 15:59:34 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t(ASM_OUTPUT_ALIGNED_DECL_COMMON): Remove.\n \t(ASM_OUTPUT_ALIGNED_LOCAL): Remove.\n \t(STRIP_NAME_ENCODING): Remove.\n-\t\n+\n \tRemove support for obsolete version of BeOS that is no longer\n \tsupported by Be.\n \t* configure.in (i*86-*-beospe*): Remove.\n \t* config/i386/beos-pe.h: Remove.\n-\t\n+\n 2000-08-01  Jeffrey Oldham  <oldham@codesourcery.com>\n-            Mark Mitchell <mark@codesourcery.com>\n-\t\n+\t    Mark Mitchell <mark@codesourcery.com>\n+\n \t* Makefile.in (OBJS): Added dce.o.\n \t(ssa.o): Updated target to include ssa.h.\n \t(flow.o): Likewise.\n@@ -176,7 +198,7 @@ Wed Aug  2 15:59:34 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t* basic-block.h: Added comments.\n \t(INVALID_BLOCK): Added definition.\n \t(connect_infinite_loops_to_exit): Added declaration.\n-\tMoved SSA declarations to ssa.h.\t\n+\tMoved SSA declarations to ssa.h.\n \t* flow.c: Added inclusion of ssa.h.\n \t(struct depth_first_search_dsS, depth_first_search_ds):\n \tAdded definitions.\n@@ -205,9 +227,9 @@ Wed Aug  2 15:59:34 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \tDefined flag_ssa.\n \t(f_options): Added dce entry.\n \t* invoke.texi: Document -fdce.  Emphasize experimental status of\n-\t-fssa. \n+\t-fssa.\n \t* dce: New file.\n-\t\n+\n 2000-08-01  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpperror.c (v_message): Split into _cpp_begin_message and\n@@ -619,7 +641,7 @@ Sun Jul 30 20:27:36 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n Sun Jul 30 20:25:21 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n-\t* function.c (assign_stack_local_1, assign_stack_temp_for_type): \n+\t* function.c (assign_stack_local_1, assign_stack_temp_for_type):\n \tDo not call gen_mode_alignment when mode is BLKmode.\n \n Sun Jul 30 20:21:54 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n@@ -655,7 +677,7 @@ Sun Jul 30 20:08:37 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t(c4x_valid_type_attribute_p): Likewise.\n \t* config/c4x/c4x.h (FUNCTION_PROLOGUE, FUNCTION_EPILOGUE): Delete.\n \t(FUNCTION_BLOCK_PROFILER_EXIT): Convert to emit RTL.\n-\t\n+\n 2000-07-30  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.c (c4x_emit_move_sequence): Use loadqi_big_constant\n@@ -672,7 +694,7 @@ Sun Jul 30 20:08:37 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t* config/c4x/c4x.h (ASM_FORMAT_PRIVATE_NAME): Output $ in label.\n \n 2000-07-30  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n-\t\n+\n \t* config/c4x/c4x.h (IS_XXX_REGNO): Rewrite to avoid unsigned warnings.\n \n 2000-07-30  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n@@ -699,7 +721,7 @@ Sun Jul 30 20:08:37 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t(make_equivalent_phi_alternatives_equivalent): Likewise.\n \t(for_each_successor_phi): Likewise.\n \t(convert_from_ssa): Modify phi-node deletion algorithm.\n-\t\n+\n 2000-07-29  Andreas Jaeger  <aj@suse.de>\n \n \t* configure.in (mips*-*-linux*): Use mips*el to check for little\n@@ -771,7 +793,7 @@ Sun Jul 30 20:08:37 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t(__do_global_ctors): Prototype.\n \n \t* gcse.c (record_one_set, pre_delete): Remove unused variables.\n-\t\n+\n \t* rs6000.c (rs6000_maybe_dead): Delete unused prototype.\n \t(print_operand): Initialize variable `t'.\n \n@@ -791,7 +813,7 @@ Sun Jul 30 20:08:37 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t(--with-included-gettext): Likewise.\n \t(--enable-maintainer-mode): New description added.\n \t* extend.texi (-fstrict-prototype): Add missing '.'.\n-\t\n+\n 2000-07-27  Jim Wilson  <wilson@cygnus.com>\n \n \t* dwarf2out.c (gen_decl_die): Don't call gen_abstract_function if\n@@ -860,7 +882,7 @@ Thu Jul 27 09:25:17 2000  Akiko Matsushita  <matusita@sra.co.jp>\n \n \t* pa/x-pa-hpux: Add -D_HIUX_SOURCE to FIXPROTO_DEFINES\n \tfor HI-UX/WE2 systems.\n-\t\n+\n 2000-07-24  Bruce Korb  <bkorb@gnu.org>\n \n \t* fixincl/fixfixes.c(emit_gnu_type): rewrote to *rely* on GCC\n@@ -873,9 +895,9 @@ Thu Jul 27 11:54:17 2000  Andrew Cagney  <cagney@b1.cygnus.com>\n \n \t* cpp.texi: Append a trailing full-stop to xrefs where needed.\n \n-2000-07-26  Dave Pitts  <dpitts@cozx.com>\t\n+2000-07-26  Dave Pitts  <dpitts@cozx.com>\n \n-\t* i370.c: Remove LONGEXTERNAL ifdef from alias_number. Added hash \n+\t* i370.c: Remove LONGEXTERNAL ifdef from alias_number. Added hash\n \troutine constants.\n \t(mvs_hash_alias): New function.\n \t(mvs_add_alias): Change argument spacing.\n@@ -1037,7 +1059,7 @@ Tue Jul 25 23:08:33 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \tUNALIGNED_INT_ASM_OP.\n \t(def_cfa_1): Don't emit def_cfa_register or def_cfa_offset to adjust\n \ta location expression.\n-\t(dwarf2out_frame_debug_expr): Lose cfa_old_reg stuff.  Don't \n+\t(dwarf2out_frame_debug_expr): Lose cfa_old_reg stuff.  Don't\n \tassume indirect access if we're saving the CFA address exactly.\n \n \t* Makefile.in (bootstrap): Move -BstageN/ to the end.\n@@ -1074,9 +1096,9 @@ Mon Jul 24 02:04:52 2000  Jeffrey A Law  (law@cygnus.com)\n \t* c-semantics.c (make_rtl_for_local_static): Use TREE_ASM_WRITTEN\n \tto figure out whether or not a variable has already been emitted.\n \n-Sun Jul 23 14:49:12 2000  Jason Eckhardt  <jle@cygnus.com> \n+Sun Jul 23 14:49:12 2000  Jason Eckhardt  <jle@cygnus.com>\n \n-\t* config/i860/i860.md (untyped_call expander): Use GEN_CALL \n+\t* config/i860/i860.md (untyped_call expander): Use GEN_CALL\n \tinstead of gen_call.\n \n Sun Jul 23 11:52:03 2000  George Helffrich (george@gly.bris.ac.uk)"}, {"sha": "504f342c70f536233cd2f69160d66d0694928c7a", "filename": "gcc/c-lang.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "patch": "@@ -171,15 +171,6 @@ recognize_objc_keyword ()\n   return 0;\n }\n \n-tree\n-build_objc_string (len, str)\n-    int len ATTRIBUTE_UNUSED;\n-    const char *str ATTRIBUTE_UNUSED;\n-{\n-  abort ();\n-  return NULL_TREE;\n-}\n-\n /* Used by c-typeck.c (build_external_ref), but only for objc.  */\n \n tree"}, {"sha": "616ecbe2080491e97c9e2b59d31cd529d2e2698c", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "patch": "@@ -2268,25 +2268,19 @@ yylex ()\n \t/* We have read the entire constant.\n \t   Construct a STRING_CST for the result.  */\n \n+\tyylval.ttype = build_string (p - (token_buffer + 1), token_buffer + 1);\n \tif (wide_flag)\n \t  {\n-\t    yylval.ttype = build_string (p - (token_buffer + 1),\n-\t\t\t\t\t token_buffer + 1);\n \t    TREE_TYPE (yylval.ttype) = wchar_array_type_node;\n \t    value = STRING;\n \t  }\n \telse if (objc_flag)\n \t  {\n-\t    /* Return an Objective-C @\"...\" constant string object.  */\n-\t    yylval.ttype = build_objc_string (p - (token_buffer + 1),\n-\t\t\t\t\t      token_buffer + 1);\n \t    TREE_TYPE (yylval.ttype) = char_array_type_node;\n \t    value = OBJC_STRING;\n \t  }\n \telse\n \t  {\n-\t    yylval.ttype = build_string (p - (token_buffer + 1),\n-\t\t\t\t\t token_buffer + 1);\n \t    TREE_TYPE (yylval.ttype) = char_array_type_node;\n \t    value = STRING;\n \t  }"}, {"sha": "c58402f41882c6b4b0759ee37e3b2d6f940ab73e", "filename": "gcc/c-parse.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "patch": "@@ -150,7 +150,7 @@ end ifc\n %token CLASSNAME PUBLIC PRIVATE PROTECTED PROTOCOL OBJECTNAME CLASS ALIAS\n \n /* Objective-C string constants in raw form.\n-   yylval is an OBJC_STRING_CST node.  */\n+   yylval is an STRING_CST node.  */\n %token OBJC_STRING\n \n \n@@ -753,8 +753,8 @@ end ifc\n \t;\n \n ifobjc\n-/* Produces an OBJC_STRING_CST with perhaps more OBJC_STRING_CSTs chained\n-   onto it.  */\n+/* Produces an STRING_CST with perhaps more STRING_CSTs chained\n+   onto it, which is to be read as an ObjC string object.  */\n objc_string:\n \t  OBJC_STRING\n \t| objc_string OBJC_STRING"}, {"sha": "3af50a4295d80a14a9679bdb01663946a243c1f1", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "patch": "@@ -142,7 +142,6 @@ extern int maybe_objc_comptypes                 PARAMS ((tree, tree, int));\n extern tree maybe_building_objc_message_expr    PARAMS ((void));\n extern tree maybe_objc_method_name\t\tPARAMS ((tree));\n extern int recognize_objc_keyword\t\tPARAMS ((void));\n-extern tree build_objc_string\t\t\tPARAMS ((int, const char *));\n extern tree lookup_objc_ivar\t\t\tPARAMS ((tree));\n \f\n /* in c-parse.in */"}, {"sha": "5307edc730aca4825cbf3fe4a321bd7efedf2fe4", "filename": "gcc/cpplex.c", "status": "modified", "additions": 75, "deletions": 36, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "patch": "@@ -1008,15 +1008,27 @@ parse_name (pfile, tok, cur, rlimit)\n     }\n   len = cur - name;\n \n-  if (tok->val.node == 0)\n+  if (tok->type == CPP_NAME && tok->val.node == 0)\n     tok->val.node = _cpp_lookup_with_hash (pfile, name, len, r);\n   else\n     {\n-      unsigned int oldlen = tok->val.node->length;\n-      U_CHAR *newname = alloca (oldlen + len);\n-      memcpy (newname, tok->val.node->name, oldlen);\n+      unsigned int oldlen;\n+      U_CHAR *newname;\n+\n+      if (tok->type == CPP_NAME)\n+\toldlen = tok->val.node->length;\n+      else\n+\toldlen = 1;\n+\n+      newname = alloca (oldlen + len);\n+\n+      if (tok->type == CPP_NAME)\n+\tmemcpy (newname, tok->val.node->name, oldlen);\n+      else\n+\tnewname[0] = tok->val.aux;\n       memcpy (newname + oldlen, name, len);\n       tok->val.node = cpp_lookup (pfile, newname, len + oldlen);\n+      tok->type = CPP_NAME;\n     }\n \n   return cur;\n@@ -1373,8 +1385,16 @@ lex_line (pfile, list)\n \tcase 'S': case 'T': case 'U': case 'V': case 'W': case 'X':\n \tcase 'Y': case 'Z':\n \t  cur--;\t\t     /* Backup character.  */\n-\t  cur_token->val.node = 0;\n-\t  cur_token->type = CPP_NAME; /* Identifier, macro etc.  */\n+\n+\t  /* In Objective C, '@' may begin certain keywords.  */\n+\t  if (CPP_OPTION (pfile, objc) && cur_token[-1].type == CPP_OTHER\n+\t      && cur_token[-1].val.aux == '@' && IMMED_TOKEN ())\n+\t    cur_token--;\n+\t  else\n+\t    {\n+\t      cur_token->val.node = 0;\n+\t      cur_token->type = CPP_NAME; /* Identifier, macro etc.  */\n+\t    }\n \n \tcontinue_name:\n \t  cur = parse_name (pfile, cur_token, cur, buffer->rlimit);\n@@ -1394,12 +1414,21 @@ lex_line (pfile, list)\n \t  break;\n \n \tcase '\\'':\n+\t  cur_token->type = CPP_CHAR;\n+\t  if (cur_token[-1].type == CPP_NAME && IMMED_TOKEN ()\n+\t      && cur_token[-1].val.node == pfile->spec_nodes->n_L)\n+\t    BACKUP_TOKEN (CPP_WCHAR);\n+\t  goto do_parse_string;\n+\t  \n \tcase '\\\"':\n-\t  cur_token->type = c == '\\'' ? CPP_CHAR : CPP_STRING;\n-\t  /* Do we have a wide string?  */\n+\t  cur_token->type = CPP_STRING;\n \t  if (cur_token[-1].type == CPP_NAME && IMMED_TOKEN ()\n \t      && cur_token[-1].val.node == pfile->spec_nodes->n_L)\n-\t    BACKUP_TOKEN (c == '\\'' ? CPP_WCHAR : CPP_WSTRING);\n+\t    BACKUP_TOKEN (CPP_WSTRING);\n+\t  else if (CPP_OPTION (pfile, objc)\n+\t\t   && cur_token[-1].type == CPP_OTHER && IMMED_TOKEN ()\n+\t\t   && cur_token[-1].val.aux == '@')\n+\t    BACKUP_TOKEN (CPP_OSTRING);\n \n \tdo_parse_string:\n \t  /* Here c is one of ' \" or >.  */\n@@ -1883,20 +1912,21 @@ output_token (pfile, fp, token, prev, white)\n \n     case SPELL_STRING:\n       {\n-\tif (token->type == CPP_WSTRING || token->type == CPP_WCHAR)\n-\t  putc ('L', fp);\n-\n-\tif (token->type == CPP_STRING || token->type == CPP_WSTRING)\n-\t  putc ('\"', fp);\n-\tif (token->type == CPP_CHAR || token->type == CPP_WCHAR)\n-\t  putc ('\\'', fp);\n-\n+\tint left, right, tag;\n+\tswitch (token->type)\n+\t  {\n+\t  case CPP_STRING:\tleft = '\"';  right = '\"';  tag = '\\0'; break;\n+\t  case CPP_WSTRING:\tleft = '\"';  right = '\"';  tag = 'L';  break;\n+\t  case CPP_OSTRING:\tleft = '\"';  right = '\"';  tag = '@';  break;\n+\t  case CPP_CHAR:\tleft = '\\''; right = '\\''; tag = '\\0'; break;\n+    \t  case CPP_WCHAR:\tleft = '\\''; right = '\\''; tag = 'L';  break;\n+\t  case CPP_HEADER_NAME:\tleft = '<';  right = '>';  tag = '\\0'; break;\n+\t  default:\t\tleft = '\\0'; right = '\\0'; tag = '\\0'; break;\n+\t  }\n+\tif (tag) putc (tag, fp);\n+\tif (left) putc (left, fp);\n \tfwrite (token->val.str.text, 1, token->val.str.len, fp);\n-\t\n-\tif (token->type == CPP_STRING || token->type == CPP_WSTRING)\n-\t  putc ('\"', fp);\n-\tif (token->type == CPP_CHAR || token->type == CPP_WCHAR)\n-\t  putc ('\\'', fp);\n+\tif (right) putc (right, fp);\n       }\n       break;\n \n@@ -1999,21 +2029,22 @@ spell_token (pfile, token, buffer)\n \n     case SPELL_STRING:\n       {\n-\tif (token->type == CPP_WSTRING || token->type == CPP_WCHAR)\n-\t  *buffer++ = 'L';\n-\n-\tif (token->type == CPP_STRING || token->type == CPP_WSTRING)\n-\t  *buffer++ = '\"';\n-\tif (token->type == CPP_CHAR || token->type == CPP_WCHAR)\n-\t  *buffer++ = '\\'';\n-\n+\tint left, right, tag;\n+\tswitch (token->type)\n+\t  {\n+\t  case CPP_STRING:\tleft = '\"';  right = '\"';  tag = '\\0'; break;\n+\t  case CPP_WSTRING:\tleft = '\"';  right = '\"';  tag = 'L';  break;\n+\t  case CPP_OSTRING:\tleft = '\"';  right = '\"';  tag = '@';  break;\n+\t  case CPP_CHAR:\tleft = '\\''; right = '\\''; tag = '\\0'; break;\n+    \t  case CPP_WCHAR:\tleft = '\\''; right = '\\''; tag = 'L';  break;\n+\t  case CPP_HEADER_NAME:\tleft = '<';  right = '>';  tag = '\\0'; break;\n+\t  default:\t\tleft = '\\0'; right = '\\0'; tag = '\\0'; break;\n+\t  }\n+\tif (tag) *buffer++ = tag;\n+\tif (left) *buffer++ = left;\n \tmemcpy (buffer, token->val.str.text, token->val.str.len);\n \tbuffer += token->val.str.len;\n-\t\n-\tif (token->type == CPP_STRING || token->type == CPP_WSTRING)\n-\t  *buffer++ = '\"';\n-\tif (token->type == CPP_CHAR || token->type == CPP_WCHAR)\n-\t  *buffer++ = '\\'';\n+\tif (right) *buffer++ = right;\n       }\n       break;\n \n@@ -2700,6 +2731,13 @@ can_paste (pfile, token1, token2, digraph)\n \treturn CPP_NUMBER;\n       break;\n \n+    case CPP_OTHER:\n+      if (CPP_OPTION (pfile, objc) && token1->val.aux == '@')\n+\t{\n+\t  if (b == CPP_NAME)\treturn CPP_NAME;\n+\t  if (b == CPP_STRING)\treturn CPP_OSTRING;\n+\t}\n+\n     default:\n       break;\n     }\n@@ -2789,7 +2827,8 @@ maybe_paste_with_next (pfile, token)\n \t\t  pasted->val.str.len = end - buf;\n \t\t}\n \t    }\n-\t  else if (type == CPP_WCHAR || type == CPP_WSTRING)\n+\t  else if (type == CPP_WCHAR || type == CPP_WSTRING\n+\t\t   || type == CPP_OSTRING)\n \t    pasted = duplicate_token (pfile, second);\n \t  else\n \t    {"}, {"sha": "1ce9bbfeca8c90eb796f29184a6ad00078e6f34e", "filename": "gcc/cpplib.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "patch": "@@ -242,6 +242,16 @@ get_define_node (pfile)\n       return 0;\n     }\n \n+  /* In Objective C, some keywords begin with '@', but general identifiers\n+     do not, and you're not allowed to #define them.  */\n+  if (token->val.node->name[0] == '@')\n+    {\n+      cpp_error_with_line (pfile, token->line, token->col,\n+\t\t\t   \"\\\"%s\\\" cannot be used as a macro name\",\n+\t\t\t   token->val.node->name);\n+      return 0;\n+    }\n+\n   /* Check for poisoned identifiers now.  */\n   if (token->val.node->type == T_POISON)\n     {"}, {"sha": "ad5909e8274f078526ac89d632f1be35e753c79c", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "patch": "@@ -123,6 +123,7 @@ typedef struct cpp_hashnode cpp_hashnode;\n \\\n   TK(CPP_STRING,\tSPELL_STRING)\t/* \"string\" */\t\t\t\\\n   TK(CPP_WSTRING,\tSPELL_STRING)\t/* L\"string\" */\t\t\t\\\n+  TK(CPP_OSTRING,\tSPELL_STRING)\t/* @\"string\" - Objective C */\t\\\n   TK(CPP_HEADER_NAME,\tSPELL_STRING)\t/* <stdio.h> in #include */\t\\\n \\\n   TK(CPP_COMMENT,\tSPELL_STRING)\t/* Only if output comments.  */ \\"}, {"sha": "00f2dfb3eef6a77b156a5b53eef96b1eb111be54", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "patch": "@@ -55,12 +55,14 @@ static cpp_toklist * alloc_macro PARAMS ((cpp_reader *, struct macro_info *));\n \n /* These are all the tokens that can have something pasted after them.\n    Comma is included in the list only to support the GNU varargs extension\n-   (where you write a ## b and a disappears if b is an empty rest argument).  */\n+   (where you write a ## b and a disappears if b is an empty rest argument).\n+   CPP_OTHER is included because of Objective C's use of '@'.  */\n #define CAN_PASTE_AFTER(type) \\\n ((type) <= CPP_LAST_EQ || (type) == CPP_COLON || (type) == CPP_HASH \\\n  || (type) == CPP_DEREF || (type) == CPP_DOT || (type) == CPP_NAME \\\n  || (type) == CPP_INT || (type) == CPP_FLOAT || (type) == CPP_NUMBER \\\n- || (type) == CPP_MACRO_ARG || (type) == CPP_PLACEMARKER || (type) == CPP_COMMA)\n+ || (type) == CPP_MACRO_ARG || (type) == CPP_PLACEMARKER \\\n+ || (type) == CPP_COMMA || (type) == CPP_OTHER)\n \n /* Scans for a given token, returning the parameter number if found,\n    or 0 if not found.  Scans from FIRST to TOKEN - 1 or the first"}, {"sha": "a96533c728cba17e635a0e48d5f8300d8b4583c2", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "patch": "@@ -1410,22 +1410,7 @@ my_build_string (len, str)\n   return a_string;\n }\n \n-/* Return a newly constructed OBJC_STRING_CST node whose value is\n-   the LEN characters at STR.\n-   The TREE_TYPE is not initialized.  */\n-\n-tree\n-build_objc_string (len, str)\n-     int len;\n-     const char *str;\n-{\n-  tree s = build_string (len, str);\n-\n-  TREE_SET_CODE (s, OBJC_STRING_CST);\n-  return s;\n-}\n-\n-/* Given a chain of OBJC_STRING_CST's, build a static instance of\n+/* Given a chain of STRING_CST's, build a static instance of\n    NXConstanString which points at the concatenation of those strings.\n    We place the string object in the __string_objects section of the\n    __OBJC segment.  The Objective-C runtime will initialize the isa\n@@ -1451,7 +1436,6 @@ build_objc_string_object (strings)\n \n   add_class_reference (constant_string_id);\n \n-  /* Combine_strings will work for OBJC_STRING_CST's too.  */\n   string = combine_strings (strings);\n   TREE_SET_CODE (string, STRING_CST);\n   length = TREE_STRING_LENGTH (string) - 1;"}, {"sha": "dad4330b6d5ee3b6ae07cec5257d48363c703468", "filename": "gcc/objc/objc-tree.def", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fobjc%2Fobjc-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Fobjc%2Fobjc-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-tree.def?ref=ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "patch": "@@ -32,6 +32,3 @@ DEFTREECODE (PROTOCOL_INTERFACE_TYPE, \"protocol_interface_type\", 't', 0)\n DEFTREECODE (KEYWORD_DECL, \"keyword_decl\", 'd', 0)\n DEFTREECODE (INSTANCE_METHOD_DECL, \"instance_method_decl\", 'd', 0)\n DEFTREECODE (CLASS_METHOD_DECL, \"class_method_decl\", 'd', 0)\n-\n-/* Objective-C constants.  */\n-DEFTREECODE (OBJC_STRING_CST, \"objc_string_cst\", 'c', 3)"}, {"sha": "bb483fcfc1327749b927a85d96274d69eb3a624b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "patch": "@@ -1,3 +1,7 @@\n+2000-08-03  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* gcc.dg/cpp/20000625-2.c: Don't expect a warning on line 4.\n+\n Thu Aug  3 01:46:33 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* gcc.c-torture/compile/20000803-1.c: New test."}, {"sha": "d2e17cb19437256906fcd66db4e3fbde34fafc33", "filename": "gcc/testsuite/gcc.dg/cpp/20000625-2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba89d661ac573f2402fa4f3b4cb117c8c74968e2/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F20000625-2.c?ref=ba89d661ac573f2402fa4f3b4cb117c8c74968e2", "patch": "@@ -2,7 +2,6 @@\n /* { dg-do run } */\n \n #define symbol_version(name, version) name##@##version\n-/* { dg-warning \"nothing can be pasted\" \"\" { target *-*-* } 4 } */\n #define str(x) xstr(x)\n #define xstr(x) #x\n "}]}