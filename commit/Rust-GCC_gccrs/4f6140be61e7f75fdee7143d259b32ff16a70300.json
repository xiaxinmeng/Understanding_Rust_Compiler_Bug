{"sha": "4f6140be61e7f75fdee7143d259b32ff16a70300", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY2MTQwYmU2MWU3Zjc1ZmRlZTcxNDNkMjU5YjMyZmYxNmE3MDMwMA==", "commit": {"author": {"name": "Paul Eggert", "email": "eggert@twinsun.com", "date": "1997-09-30T05:32:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-30T05:32:19Z"}, "message": "lex.c (real_yylex): Treat `$' just like `_'...\n\n1997-09-29  Paul Eggert  <eggert@twinsun.com>\n\n\t* lex.c (real_yylex): Treat `$' just like `_', except issue a\n\tdiagnostic if !dollars_in_ident or if pedantic.\n\n\t* lang-specs.h (@c++): -ansi no longer implies -$.\n\n\t* decl2.c (lang_decode_option):\n\t-traditional and -ansi now do not mess with\n\tdollars_in_ident.\n\nFrom-SVN: r15802", "tree": {"sha": "4535ad380ab461896c527838f82dc8d50944733b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4535ad380ab461896c527838f82dc8d50944733b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f6140be61e7f75fdee7143d259b32ff16a70300", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f6140be61e7f75fdee7143d259b32ff16a70300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f6140be61e7f75fdee7143d259b32ff16a70300", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f6140be61e7f75fdee7143d259b32ff16a70300/comments", "author": null, "committer": null, "parents": [{"sha": "9f6177175d92b4d7827cd9de3240be354b2aa47b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6177175d92b4d7827cd9de3240be354b2aa47b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f6177175d92b4d7827cd9de3240be354b2aa47b"}], "stats": {"total": 53, "additions": 37, "deletions": 16}, "files": [{"sha": "daa044b043b8d70cd915ad8ec21e5e6fe26192ca", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f6140be61e7f75fdee7143d259b32ff16a70300/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f6140be61e7f75fdee7143d259b32ff16a70300/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4f6140be61e7f75fdee7143d259b32ff16a70300", "patch": "@@ -1,3 +1,14 @@\n+1997-09-29  Paul Eggert  <eggert@twinsun.com>\n+\n+\t* lex.c (real_yylex): Treat `$' just like `_', except issue a\n+\tdiagnostic if !dollars_in_ident or if pedantic.\n+\n+\t* lang-specs.h (@c++): -ansi no longer implies -$.\n+\n+\t* decl2.c (lang_decode_option):\n+\t-traditional and -ansi now do not mess with\n+\tdollars_in_ident.\n+\n Mon Sep 29 19:57:51 1997  H.J. Lu  (hjl@gnu.ai.mit.edu)\n \n \t* Makefile.in (parse.o, decl.o): Also depend on"}, {"sha": "b99a1fa08b92c772e4fbbbee81eb0d71fad915f3", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f6140be61e7f75fdee7143d259b32ff16a70300/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f6140be61e7f75fdee7143d259b32ff16a70300/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=4f6140be61e7f75fdee7143d259b32ff16a70300", "patch": "@@ -271,8 +271,7 @@ int warn_sign_promo;\n \n int warn_old_style_cast;\n \n-/* Nonzero means `$' can be in an identifier.\n-   See cccp.c for reasons why this breaks some obscure ANSI C programs.  */\n+/* Nonzero means `$' can be in an identifier.  */\n \n #ifndef DOLLARS_IN_IDENTIFIERS\n #define DOLLARS_IN_IDENTIFIERS 1\n@@ -476,7 +475,7 @@ lang_decode_option (p)\n      char *p;\n {\n   if (!strcmp (p, \"-ftraditional\") || !strcmp (p, \"-traditional\"))\n-    dollars_in_ident = 1, flag_writable_strings = 1,\n+    flag_writable_strings = 1,\n     flag_this_is_variable = 1, flag_new_for_scope = 0;\n   /* The +e options are for cfront compatibility.  They come in as\n      `-+eN', to kludge around gcc.c's argument handling.  */\n@@ -690,7 +689,7 @@ lang_decode_option (p)\n       else return 0;\n     }\n   else if (!strcmp (p, \"-ansi\"))\n-    dollars_in_ident = 0, flag_no_nonansi_builtin = 1, flag_ansi = 1,\n+    flag_no_nonansi_builtin = 1, flag_ansi = 1,\n     flag_no_gnu_keywords = 1, flag_operator_names = 1;\n #ifdef SPEW_DEBUG\n   /* Undocumented, only ever used when you're invoking cc1plus by hand, since"}, {"sha": "381bec56ecb13c5ee6d7a3d20dd64867818d5024", "filename": "gcc/cp/lang-specs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f6140be61e7f75fdee7143d259b32ff16a70300/gcc%2Fcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f6140be61e7f75fdee7143d259b32ff16a70300/gcc%2Fcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-specs.h?ref=4f6140be61e7f75fdee7143d259b32ff16a70300", "patch": "@@ -32,7 +32,7 @@ Boston, MA 02111-1307, USA.  */\n \t%{C:%{!E:%eGNU C++ does not support -C without using -E}}\\\n \t%{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n \t-undef -D__GNUC__=%v1 -D__GNUG__=%v1 -D__cplusplus -D__GNUC_MINOR__=%v2\\\n-\t%{ansi:-trigraphs -$ -D__STRICT_ANSI__} %{!undef:%{!ansi:%p} %P}\\\n+\t%{ansi:-trigraphs -D__STRICT_ANSI__} %{!undef:%{!ansi:%p} %P}\\\n \t%{!fno-exceptions:-D__EXCEPTIONS}\\\n         %c %{O*:%{!O0:-D__OPTIMIZE__}} %{trigraphs}\\\n \t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\"}, {"sha": "6abf0d09fbfe72bd0390fe8d5998dabdaf0e0679", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f6140be61e7f75fdee7143d259b32ff16a70300/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f6140be61e7f75fdee7143d259b32ff16a70300/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=4f6140be61e7f75fdee7143d259b32ff16a70300", "patch": "@@ -3095,13 +3095,12 @@ real_yylex ()\n       break;\n \n     case '$':\n-      if (dollars_in_ident)\n-\t{\n-\t  dollar_seen = 1;\n-\t  goto letter;\n-\t}\n-      value = '$';\n-      goto done;\n+      if (! dollars_in_ident)\n+\terror (\"`$' in identifier\");\n+      else if (pedantic)\n+\tpedwarn (\"`$' in identifier\");\n+      dollar_seen = 1;\n+      goto letter;\n \n     case 'L':\n       /* Capital L may start a wide-string or wide-character constant.  */\n@@ -3152,8 +3151,14 @@ real_yylex ()\n \t       input sources.  */\n \t    while (isalnum (c) || (c == '_') || c == '$')\n \t      {\n-\t\tif (c == '$' && ! dollars_in_ident)\n-\t\t  break;\n+\t\tif (c == '$')\n+\t\t  {\n+\t\t    if (! dollars_in_ident)\n+\t\t      error (\"`$' in identifier\");\n+\t\t    else if (pedantic)\n+\t\t      pedwarn (\"`$' in identifier\");\n+\t\t  }\n+\n \t\tif (p >= token_buffer + maxtoken)\n \t\t  p = extend_token_buffer (p);\n \n@@ -3176,8 +3181,14 @@ real_yylex ()\n \n \t    while (isalnum (c) || (c == '_') || c == '$')\n \t      {\n-\t\tif (c == '$' && ! dollars_in_ident)\n-\t\t  break;\n+\t\tif (c == '$')\n+\t\t  {\n+\t\t    if (! dollars_in_ident)\n+\t\t      error (\"`$' in identifier\");\n+\t\t    else if (pedantic)\n+\t\t      pedwarn (\"`$' in identifier\");\n+\t\t  }\n+\n \t\tif (p >= token_buffer + maxtoken)\n \t\t  p = extend_token_buffer (p);\n "}]}