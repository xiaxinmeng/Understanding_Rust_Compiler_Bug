{"sha": "060a58c593b039e7a7c9f144b0e3f39e11fee735", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYwYTU4YzU5M2IwMzllN2E3YzlmMTQ0YjBlM2YzOWUxMWZlZTczNQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-07-21T22:01:58Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-07-21T22:01:58Z"}, "message": "gengenrtl.c (gencode): Don't define obstack_alloc_rtx.\n\n\t* gengenrtl.c (gencode): Don't define obstack_alloc_rtx.\n\t* function.c (SYMBOL__MAIN): Remove definition.\n\t* global.c (SET_CONFLICT, REGBITP, ALLOCNO_LIVE_P): Remove.\n\t* predict.c (PROB_NEVER, PROB_LIKELY, PROB_UNLIKELY): Remove.\n\t* profile.c (GCOV_INDEX_TO_BB): Remove.\n\t* sched-rgn.c (ABS_VALUE, MIN_DIFF_PRIORITY, MIN_PROB_DIFF): Remove.\n\t* simplify-rtx.c (FIXED_BASE_PLUS_P): Remove.\n\nFrom-SVN: r55631", "tree": {"sha": "596694dcc8d51e7c13ec05e9eb5bc835533ddc96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/596694dcc8d51e7c13ec05e9eb5bc835533ddc96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/060a58c593b039e7a7c9f144b0e3f39e11fee735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/060a58c593b039e7a7c9f144b0e3f39e11fee735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/060a58c593b039e7a7c9f144b0e3f39e11fee735", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/060a58c593b039e7a7c9f144b0e3f39e11fee735/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2f8dd115d2bf15e3866cbe0b98c73145853681f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f8dd115d2bf15e3866cbe0b98c73145853681f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f8dd115d2bf15e3866cbe0b98c73145853681f8"}], "stats": {"total": 60, "additions": 15, "deletions": 45}, "files": [{"sha": "90096f63ddf0aba303ef5267344fb9b82d652836", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/060a58c593b039e7a7c9f144b0e3f39e11fee735/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/060a58c593b039e7a7c9f144b0e3f39e11fee735/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=060a58c593b039e7a7c9f144b0e3f39e11fee735", "patch": "@@ -1,3 +1,13 @@\n+2002-07-21  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* gengenrtl.c (gencode): Don't define obstack_alloc_rtx.\n+\t* function.c (SYMBOL__MAIN): Remove definition.\n+\t* global.c (SET_CONFLICT, REGBITP, ALLOCNO_LIVE_P): Remove.\n+\t* predict.c (PROB_NEVER, PROB_LIKELY, PROB_UNLIKELY): Remove.\t\n+\t* profile.c (GCOV_INDEX_TO_BB): Remove.\n+\t* sched-rgn.c (ABS_VALUE, MIN_DIFF_PRIORITY, MIN_PROB_DIFF): Remove.\n+\t* simplify-rtx.c (FIXED_BASE_PLUS_P): Remove.\n+\n 2002-07-21  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* c-lex.c (GET_ENVIRONMENT): Remove."}, {"sha": "2a59d59459b2e23ba56e98d7cf85f52064b7dd26", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/060a58c593b039e7a7c9f144b0e3f39e11fee735/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/060a58c593b039e7a7c9f144b0e3f39e11fee735/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=060a58c593b039e7a7c9f144b0e3f39e11fee735", "patch": "@@ -75,7 +75,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    must define both, or neither.  */\n #ifndef NAME__MAIN\n #define NAME__MAIN \"__main\"\n-#define SYMBOL__MAIN __main\n #endif\n \n /* Round a value to the lowest integer less than it that is a multiple of"}, {"sha": "6bfd0ff77ee9e27e00970cb5fbbf6d3f82097f30", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/060a58c593b039e7a7c9f144b0e3f39e11fee735/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/060a58c593b039e7a7c9f144b0e3f39e11fee735/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=060a58c593b039e7a7c9f144b0e3f39e11fee735", "patch": "@@ -337,10 +337,6 @@ gencode ()\n   puts (\"#include \\\"rtl.h\\\"\");\n   puts (\"#include \\\"ggc.h\\\"\\n\");\n   puts (\"extern struct obstack *rtl_obstack;\\n\");\n-  puts (\"#define obstack_alloc_rtx(n)\t\t\t\t\t\\\\\");\n-  puts (\"    ((rtx) obstack_alloc (rtl_obstack,\t\t\t\t\\\\\");\n-  puts (\"\t\t\t  sizeof (struct rtx_def)\t\t\\\\\");\n-  puts (\"\t\t\t  + ((n) - 1) * sizeof (rtunion)))\\n\");\n \n   for (fmt = formats; *fmt != 0; fmt++)\n     gendef (*fmt);"}, {"sha": "50a1648c1f83715eaee5daedb9373047b0d69a89", "filename": "gcc/global.c", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/060a58c593b039e7a7c9f144b0e3f39e11fee735/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/060a58c593b039e7a7c9f144b0e3f39e11fee735/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=060a58c593b039e7a7c9f144b0e3f39e11fee735", "patch": "@@ -171,10 +171,6 @@ static int allocno_row_words;\n  (conflicts[(I) * allocno_row_words + (unsigned) (J) / INT_BITS]\t\\\n   & ((INT_TYPE) 1 << ((unsigned) (J) % INT_BITS)))\n \n-#define SET_CONFLICT(I, J) \\\n- (conflicts[(I) * allocno_row_words + (unsigned) (J) / INT_BITS]\t\\\n-  |= ((INT_TYPE) 1 << ((unsigned) (J) % INT_BITS)))\n-\n /* For any allocno set in ALLOCNO_SET, set ALLOCNO to that allocno,\n    and execute CODE.  */\n #define EXECUTE_IF_SET_IN_ALLOCNO_SET(ALLOCNO_SET, ALLOCNO, CODE)\t\\\n@@ -231,12 +227,8 @@ static int local_reg_freq[FIRST_PSEUDO_REGISTER];\n \n static int local_reg_live_length[FIRST_PSEUDO_REGISTER];\n \n-/* Test a bit in TABLE, a vector of HARD_REG_SETs,\n-   for vector element I, and hard register number J.  */\n-\n-#define REGBITP(TABLE, I, J)     TEST_HARD_REG_BIT (allocno[I].TABLE, J)\n-\n-/* Set to 1 a bit in a vector of HARD_REG_SETs.  Works like REGBITP.  */\n+/* Set to 1 a bit in a vector TABLE of HARD_REG_SETs, for vector\n+   element I, and hard register number J.  */\n \n #define SET_REGBIT(TABLE, I, J)  SET_HARD_REG_BIT (allocno[I].TABLE, J)\n \n@@ -247,10 +239,6 @@ static INT_TYPE *allocnos_live;\n /* Test, set or clear bit number I in allocnos_live,\n    a bit vector indexed by allocno.  */\n \n-#define ALLOCNO_LIVE_P(I)\t\t\t\t\\\n-  (allocnos_live[(unsigned) (I) / INT_BITS]\t\t\\\n-   & ((INT_TYPE) 1 << ((unsigned) (I) % INT_BITS)))\n-\n #define SET_ALLOCNO_LIVE(I)\t\t\t\t\\\n   (allocnos_live[(unsigned) (I) / INT_BITS]\t\t\\\n      |= ((INT_TYPE) 1 << ((unsigned) (I) % INT_BITS)))"}, {"sha": "7d94deafa8dc888dba5d1497723d22fc7e30db6e", "filename": "gcc/predict.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/060a58c593b039e7a7c9f144b0e3f39e11fee735/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/060a58c593b039e7a7c9f144b0e3f39e11fee735/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=060a58c593b039e7a7c9f144b0e3f39e11fee735", "patch": "@@ -57,11 +57,8 @@ static REAL_VALUE_TYPE real_zero, real_one, real_almost_one, real_br_prob_base,\n \t\t       real_one_half, real_bb_freq_max;\n \n /* Random guesstimation given names.  */\n-#define PROB_NEVER\t\t(0)\n #define PROB_VERY_UNLIKELY\t(REG_BR_PROB_BASE / 10 - 1)\n-#define PROB_UNLIKELY\t\t(REG_BR_PROB_BASE * 4 / 10 - 1)\n #define PROB_EVEN\t\t(REG_BR_PROB_BASE / 2)\n-#define PROB_LIKELY\t\t(REG_BR_PROB_BASE - PROB_UNLIKELY)\n #define PROB_VERY_LIKELY\t(REG_BR_PROB_BASE - PROB_VERY_UNLIKELY)\n #define PROB_ALWAYS\t\t(REG_BR_PROB_BASE)\n "}, {"sha": "9e95e667ab380e6c2ace0df213877b9350d1c8d1", "filename": "gcc/profile.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/060a58c593b039e7a7c9f144b0e3f39e11fee735/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/060a58c593b039e7a7c9f144b0e3f39e11fee735/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=060a58c593b039e7a7c9f144b0e3f39e11fee735", "patch": "@@ -72,9 +72,6 @@ struct bb_info\n \n /* Keep all basic block indexes nonnegative in the gcov output.  Index 0\n    is used for entry block, last block exit block.  */\n-#define GCOV_INDEX_TO_BB(i)  ((i) == 0 ? ENTRY_BLOCK_PTR\t\t\\\n-\t\t\t      : (((i) == last_basic_block + 1)\t\t\\\n-\t\t\t         ? EXIT_BLOCK_PTR : BASIC_BLOCK ((i)-1)))\n #define BB_TO_GCOV_INDEX(bb)  ((bb) == ENTRY_BLOCK_PTR ? 0\t\t\\\n \t\t\t       : ((bb) == EXIT_BLOCK_PTR\t\t\\\n \t\t\t\t  ? last_basic_block + 1 : (bb)->index + 1))"}, {"sha": "f9b762ee9322b9e6b9596b3c253e5d98cb05e526", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/060a58c593b039e7a7c9f144b0e3f39e11fee735/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/060a58c593b039e7a7c9f144b0e3f39e11fee735/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=060a58c593b039e7a7c9f144b0e3f39e11fee735", "patch": "@@ -270,16 +270,13 @@ static edgeset *ancestor_edges;\n \n static void compute_dom_prob_ps PARAMS ((int));\n \n-#define ABS_VALUE(x) (((x)<0)?(-(x)):(x))\n #define INSN_PROBABILITY(INSN) (SRC_PROB (BLOCK_TO_BB (BLOCK_NUM (INSN))))\n #define IS_SPECULATIVE_INSN(INSN) (IS_SPECULATIVE (BLOCK_TO_BB (BLOCK_NUM (INSN))))\n #define INSN_BB(INSN) (BLOCK_TO_BB (BLOCK_NUM (INSN)))\n \n /* Parameters affecting the decision of rank_for_schedule().\n    ??? Nope.  But MIN_PROBABILITY is used in copmute_trg_info.  */\n-#define MIN_DIFF_PRIORITY 2\n #define MIN_PROBABILITY 40\n-#define MIN_PROB_DIFF 10\n \n /* Speculative scheduling functions.  */\n static int check_live_1 PARAMS ((int, rtx));"}, {"sha": "c69084f70277ea47737bd8c75f761907a13b0db0", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/060a58c593b039e7a7c9f144b0e3f39e11fee735/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/060a58c593b039e7a7c9f144b0e3f39e11fee735/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=060a58c593b039e7a7c9f144b0e3f39e11fee735", "patch": "@@ -43,26 +43,12 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    virtual regs here because the simplify_*_operation routines are called\n    by integrate.c, which is called before virtual register instantiation.\n \n-   ?!? FIXED_BASE_PLUS_P and NONZERO_BASE_PLUS_P need to move into\n+   ?!? NONZERO_BASE_PLUS_P needs to move into\n    a header file so that their definitions can be shared with the\n    simplification routines in simplify-rtx.c.  Until then, do not\n-   change these macros without also changing the copy in simplify-rtx.c.  */\n+   change this macro without also changing the copy in simplify-rtx.c.  */\n \n-#define FIXED_BASE_PLUS_P(X)\t\t\t\t\t\\\n-  ((X) == frame_pointer_rtx || (X) == hard_frame_pointer_rtx\t\\\n-   || ((X) == arg_pointer_rtx && fixed_regs[ARG_POINTER_REGNUM])\\\n-   || (X) == virtual_stack_vars_rtx\t\t\t\t\\\n-   || (X) == virtual_incoming_args_rtx\t\t\t\t\\\n-   || (GET_CODE (X) == PLUS && GET_CODE (XEXP (X, 1)) == CONST_INT \\\n-       && (XEXP (X, 0) == frame_pointer_rtx\t\t\t\\\n-\t   || XEXP (X, 0) == hard_frame_pointer_rtx\t\t\\\n-\t   || ((X) == arg_pointer_rtx\t\t\t\t\\\n-\t       && fixed_regs[ARG_POINTER_REGNUM])\t\t\\\n-\t   || XEXP (X, 0) == virtual_stack_vars_rtx\t\t\\\n-\t   || XEXP (X, 0) == virtual_incoming_args_rtx))\t\\\n-   || GET_CODE (X) == ADDRESSOF)\n-\n-/* Similar, but also allows reference to the stack pointer.\n+/* Allows reference to the stack pointer.\n \n    This used to include FIXED_BASE_PLUS_P, however, we can't assume that\n    arg_pointer_rtx by itself is nonzero, because on at least one machine,"}]}