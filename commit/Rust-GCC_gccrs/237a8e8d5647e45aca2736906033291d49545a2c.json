{"sha": "237a8e8d5647e45aca2736906033291d49545a2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM3YThlOGQ1NjQ3ZTQ1YWNhMjczNjkwNjAzMzI5MWQ0OTU0NWEyYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-10T14:35:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-12-10T14:45:16Z"}, "message": "Small fix to PLACEHOLDER_EXPR handling in loc_list_from_tree_1\n\nThis handles the discriminated record types of Ada: the PLACEHOLDER_EXPR is\nthe \"template\" expression for the discriminant in the type definition. Now\nfor some components, typically arrays whose upper bound is the discriminant,\nthe compiler creates a local subtype for the component, so the code needs to\nbe able to deal with this nested type.\n\ngcc/ChangeLog:\n\t* dwarf2out.c (loc_list_from_tree_1) <PLACEHOLDER_EXPR>: Deal with\n\ta nested context type", "tree": {"sha": "247d418f01fe3af909e2be04b690e24cda4d2f4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/247d418f01fe3af909e2be04b690e24cda4d2f4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/237a8e8d5647e45aca2736906033291d49545a2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/237a8e8d5647e45aca2736906033291d49545a2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/237a8e8d5647e45aca2736906033291d49545a2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/237a8e8d5647e45aca2736906033291d49545a2c/comments", "author": null, "committer": null, "parents": [{"sha": "8c60696b699e0b22cc12ae628473f0a23f90c82e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c60696b699e0b22cc12ae628473f0a23f90c82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c60696b699e0b22cc12ae628473f0a23f90c82e"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "0baa056447c2678371c8555723bab16415d3fef8", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/237a8e8d5647e45aca2736906033291d49545a2c/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/237a8e8d5647e45aca2736906033291d49545a2c/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=237a8e8d5647e45aca2736906033291d49545a2c", "patch": "@@ -18245,10 +18245,11 @@ loc_list_from_tree_1 (tree loc, int want_address,\n     case PLACEHOLDER_EXPR:\n       /* This case involves extracting fields from an object to determine the\n \t position of other fields. It is supposed to appear only as the first\n-         operand of COMPONENT_REF nodes and to reference precisely the type\n-         that the context allows.  */\n+\t operand of COMPONENT_REF nodes and to reference precisely the type\n+\t that the context allows or its enclosing type.  */\n       if (context != NULL\n-          && TREE_TYPE (loc) == context->context_type\n+\t  && (TREE_TYPE (loc) == context->context_type\n+\t      || TREE_TYPE (loc) == TYPE_CONTEXT (context->context_type))\n \t  && want_address >= 1)\n \t{\n \t  if (dwarf_version >= 3 || !dwarf_strict)"}]}