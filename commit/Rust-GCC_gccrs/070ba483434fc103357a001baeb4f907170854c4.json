{"sha": "070ba483434fc103357a001baeb4f907170854c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcwYmE0ODM0MzRmYzEwMzM1N2EwMDFiYWViNGY5MDcxNzA4NTRjNA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-12-23T07:50:12Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-12-23T07:50:12Z"}, "message": "Fix PR42334: correct the update of the LST on loop interchange and distribution.\n\n2009-12-15  Sebastian Pop  <sebastian.pop@amd.com>\n\n        PR middle-end/42178\n        PR middle-end/42334\n        * graphite-interchange.c (lst_perfect_nestify): Reset to NULL the LSTs\n        that are empty.\n        (lst_do_interchange_1): Renamed lst_interchange_select_inner.\n        (lst_try_interchange): Reimplemented.\n        (lst_interchange_select_inner): Same.\n        (lst_do_interchange): Renamed lst_interchange_select_outer.\n        Reimplemented.\n        (scop_do_interchange): Update use of lst_interchange_select_outer.\n\n        * graphite-interchange.c (lst_try_interchange): Do not increment the\n        the OUTER index when there is no AFTER kernel.  Do not increment the\n        OUTER index for after processing the AFTER kernel.\n        (lst_interchange_select_inner): Call lst_try_interchange only on loops.\n        (lst_interchange_select_outer): Do not pass in a pointer to the OUTER\n        index.  Do not pass to lst_interchange_select_inner the OUTER index.\n        (scop_do_interchange): Update use of lst_interchange_select_outer.\n\n        * graphite-interchange.c (lst_try_interchange): Do not modify OUTER\n        index.  Call lst_interchange_select_inner only once.\n        (lst_interchange_select_inner): Update use of lst_try_interchange.\n        (lst_interchange_select_outer): Update.\n\n        * testsuite/g++.dg/graphite/pr42130.C: Add -fgraphite-identity.\n        * testsuite/gcc.dg/graphite/block-0.c: Un-XFAILed.\n        * testsuite/gcc.dg/graphite/pr42211.c: New.\n        * testsuite/gfortran.dg/graphite/pr42334.f90: New.\n\n        * testsuite/gfortran.dg/graphite/graphite.exp\n        (DEFAULT_FLAGS_GRAPHITE_IDENTITY): Remove -fdump-tree-graphite-all.\n        * testsuite/gfortran.dg/graphite/interchange-1.f: Add comment.  Clean\n        the graphite dump file.\n        * testsuite/gfortran.dg/graphite/interchange-2.f: Same.\n        * testsuite/gfortran.dg/graphite/pr42334-1.f: New.\n\nFrom-SVN: r155418", "tree": {"sha": "a387e9ce6cce09012b641189ba82c129dc7055c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a387e9ce6cce09012b641189ba82c129dc7055c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/070ba483434fc103357a001baeb4f907170854c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070ba483434fc103357a001baeb4f907170854c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070ba483434fc103357a001baeb4f907170854c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070ba483434fc103357a001baeb4f907170854c4/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b216ab08a5f433c4c1ceae18953e14c88f25bd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b216ab08a5f433c4c1ceae18953e14c88f25bd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b216ab08a5f433c4c1ceae18953e14c88f25bd1"}], "stats": {"total": 228, "additions": 174, "deletions": 54}, "files": [{"sha": "232e13d7696b40812cd346c543b354af1df8de76", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ba483434fc103357a001baeb4f907170854c4/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ba483434fc103357a001baeb4f907170854c4/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=070ba483434fc103357a001baeb4f907170854c4", "patch": "@@ -1,3 +1,49 @@\n+2009-12-17  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/42178\n+\tPR middle-end/42334\n+\t* graphite-interchange.c (lst_try_interchange): Do not modify OUTER\n+\tindex.  Call lst_interchange_select_inner only once.\n+\t(lst_interchange_select_inner): Update use of lst_try_interchange.\n+\t(lst_interchange_select_outer): Update.\n+\n+2009-12-15  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/42178\n+\tPR middle-end/42334\n+\t* graphite-interchange.c (lst_try_interchange): Do not increment the\n+\tthe OUTER index when there is no AFTER kernel.  Do not increment the\n+\tOUTER index for after processing the AFTER kernel.\n+\t(lst_interchange_select_inner): Call lst_try_interchange only on loops.\n+\t(lst_interchange_select_outer): Do not pass in a pointer to the OUTER\n+\tindex.  Do not pass to lst_interchange_select_inner the OUTER index.\n+\t(scop_do_interchange): Update use of lst_interchange_select_outer.\n+\n+\t* testsuite/gfortran.dg/graphite/graphite.exp\n+\t(DEFAULT_FLAGS_GRAPHITE_IDENTITY): Remove -fdump-tree-graphite-all.\n+\t* testsuite/gfortran.dg/graphite/interchange-1.f: Add comment.  Clean\n+\tthe graphite dump file.\n+\t* testsuite/gfortran.dg/graphite/interchange-2.f: Same.\n+\t* testsuite/gfortran.dg/graphite/pr42334-1.f: New.\n+\n+2009-12-15  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR middle-end/42178\n+\tPR middle-end/42334\n+\t* graphite-interchange.c (lst_perfect_nestify): Reset to NULL the LSTs\n+\tthat are empty.\n+\t(lst_do_interchange_1): Renamed lst_interchange_select_inner.\n+\t(lst_try_interchange): Reimplemented.\n+\t(lst_interchange_select_inner): Same.\n+\t(lst_do_interchange): Renamed lst_interchange_select_outer.\n+\tReimplemented.\n+\t(scop_do_interchange): Update use of lst_interchange_select_outer.\n+\n+\t* testsuite/g++.dg/graphite/pr42130.C: Add -fgraphite-identity.\n+\t* testsuite/gcc.dg/graphite/block-0.c: Un-XFAILed.\n+\t* testsuite/gcc.dg/graphite/pr42211.c: New.\n+\t* testsuite/gfortran.dg/graphite/pr42334.f90: New.\n+\n 2009-12-14  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR middle-end/42181"}, {"sha": "d4bc232ed161b60127f37b755302152283917a3b", "filename": "gcc/graphite-interchange.c", "status": "modified", "additions": 55, "deletions": 49, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ba483434fc103357a001baeb4f907170854c4/gcc%2Fgraphite-interchange.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ba483434fc103357a001baeb4f907170854c4/gcc%2Fgraphite-interchange.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-interchange.c?ref=070ba483434fc103357a001baeb4f907170854c4", "patch": "@@ -585,6 +585,13 @@ lst_perfect_nestify (lst_p loop1, lst_p loop2, lst_p *before,\n \n   lst_remove_all_before_excluding_pbb (*nest, first, true);\n   lst_remove_all_before_excluding_pbb (*nest, last, false);\n+\n+  if (lst_empty_p (*before))\n+    *before = NULL;\n+  if (lst_empty_p (*after))\n+    *after = NULL;\n+  if (lst_empty_p (*nest))\n+    *nest = NULL;\n }\n \n /* Try to interchange LOOP1 with LOOP2 for all the statements of the\n@@ -650,92 +657,91 @@ lst_try_interchange_loops (scop_p scop, lst_p loop1, lst_p loop2,\n   return false;\n }\n \n-static bool lst_do_interchange_1 (scop_p, lst_p, int *);\n+static bool lst_interchange_select_inner (scop_p, lst_p, int, lst_p);\n \n-/* Try to interchange LOOP with all the loops contained in the body of\n-   LST.  Return true if it did interchanged some loops.  INDEX points\n-   to the next element to be processed by lst_do_interchange.  */\n+/* Try to interchange loop OUTER of LST_SEQ (OUTER_FATHER) with all\n+   the loop INNER and with all the loops contained in the body of\n+   INNER.  Return true if it did interchanged some loops.  */\n \n static bool\n-lst_try_interchange (scop_p scop, lst_p loop, lst_p lst, int *index)\n+lst_try_interchange (scop_p scop, lst_p outer_father, int outer, lst_p inner)\n {\n-  int i;\n-  lst_p l;\n   lst_p before, nest, after;\n   bool res;\n+  lst_p loop1 = VEC_index (lst_p, LST_SEQ (outer_father), outer);\n+  lst_p loop2 = inner;\n \n-  if (!lst || !LST_LOOP_P (lst))\n-    return false;\n+  gcc_assert (LST_LOOP_P (loop1)\n+\t      && LST_LOOP_P (loop2));\n \n-  res = lst_try_interchange_loops (scop, loop, lst, &before, &nest, &after);\n+  res = lst_try_interchange_loops (scop, loop1, loop2, &before, &nest, &after);\n \n   if (before)\n-    {\n-      res |= lst_do_interchange_1 (scop, before, index);\n-      (*index)++;\n-    }\n-\n-  if (nest)\n-    res |= lst_do_interchange_1 (scop, nest, index);\n+    res |= lst_interchange_select_inner (scop, outer_father, outer, before);\n+  else if (nest)\n+    res |= lst_interchange_select_inner (scop, outer_father, outer, nest);\n   else\n-    for (i = 0; VEC_iterate (lst_p, LST_SEQ (lst), i, l); i++)\n-      res |= lst_try_interchange (scop, loop, l, index);\n+    res |= lst_interchange_select_inner (scop, outer_father, outer, loop2);\n \n-  if (after)\n-    {\n-      res |= lst_do_interchange_1 (scop, after, index);\n-      (*index)++;\n-    }\n-\n-  (*index)++;\n   return res;\n }\n \n-/* Interchanges all the loops of LOOP that are considered profitable\n-   to interchange.  Return true if it did interchanged some loops.\n-   INDEX points to the next element to be processed by\n-   lst_do_interchange.  */\n+/* Selects the inner loop in LST_SEQ (INNER_FATHER) to be interchanged\n+   with the loop OUTER in LST_SEQ (OUTER_FATHER).  */\n \n static bool\n-lst_do_interchange_1 (scop_p scop, lst_p loop, int *index)\n+lst_interchange_select_inner (scop_p scop, lst_p outer_father, int outer,\n+\t\t\t      lst_p inner_father)\n {\n-  int i;\n   lst_p l;\n   bool res = false;\n+  int inner;\n \n-  if (!loop || !LST_LOOP_P (loop))\n-    return false;\n+  gcc_assert (outer_father\n+\t      && LST_LOOP_P (outer_father)\n+\t      && LST_LOOP_P (VEC_index (lst_p, LST_SEQ (outer_father), outer))\n+\t      && inner_father\n+\t      && LST_LOOP_P (inner_father));\n \n-  for (i = 0; VEC_iterate (lst_p, LST_SEQ (loop), i, l); i++)\n-    res |= lst_try_interchange (scop, loop, l, index);\n+  for (inner = 0; VEC_iterate (lst_p, LST_SEQ (inner_father), inner, l); inner++)\n+    if (LST_LOOP_P (l))\n+      res |= lst_try_interchange (scop, outer_father, outer, l);\n \n   return res;\n }\n \n /* Interchanges all the loops of LOOP and the loops of its body that\n    are considered profitable to interchange.  Return true if it did\n-   interchanged some loops.  INDEX points to the next element to be\n-   processed in the LST_SEQ (LOOP) vector.  */\n+   interchanged some loops.  OUTER is the index in LST_SEQ (LOOP) that\n+   points to the next outer loop to be considered for interchange.  */\n \n static bool\n-lst_do_interchange (scop_p scop, lst_p loop, int *index)\n+lst_interchange_select_outer (scop_p scop, lst_p loop, int outer)\n {\n   lst_p l;\n   bool res = false;\n+  int i = 0;\n+  lst_p father;\n \n   if (!loop || !LST_LOOP_P (loop))\n     return false;\n \n-  if (lst_depth (loop) >= 0)\n-    res = lst_do_interchange_1 (scop, loop, index);\n+  father = LST_LOOP_FATHER (loop);\n+  if (father)\n+    {\n+      res = lst_interchange_select_inner (scop, father, outer, loop);\n+\n+      if (VEC_length (lst_p, LST_SEQ (father)) <= (unsigned) outer)\n+\treturn res;\n \n-  while (VEC_iterate (lst_p, LST_SEQ (loop), *index, l))\n-    if (LST_LOOP_P (l))\n-      res |= lst_do_interchange (scop, l, index);\n-    else\n-      (*index)++;\n+      loop = VEC_index (lst_p, LST_SEQ (father), outer);\n+    }\n+\n+  if (LST_LOOP_P (loop))\n+    for (i = 0; VEC_iterate (lst_p, LST_SEQ (loop), i, l); i++)\n+      if (LST_LOOP_P (l))\n+\tres |= lst_interchange_select_outer (scop, l, i);\n \n-  (*index)++;\n   return res;\n }\n \n@@ -744,8 +750,8 @@ lst_do_interchange (scop_p scop, lst_p loop, int *index)\n bool\n scop_do_interchange (scop_p scop)\n {\n-  int i = 0;\n-  bool res = lst_do_interchange (scop, SCOP_TRANSFORMED_SCHEDULE (scop), &i);\n+  bool res = lst_interchange_select_outer\n+    (scop, SCOP_TRANSFORMED_SCHEDULE (scop), 0);\n \n   lst_update_scattering (SCOP_TRANSFORMED_SCHEDULE (scop));\n "}, {"sha": "ee31abad0ee014b6a4e6d7af456482004abff411", "filename": "gcc/testsuite/g++.dg/graphite/pr42130.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ba483434fc103357a001baeb4f907170854c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr42130.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ba483434fc103357a001baeb4f907170854c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr42130.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgraphite%2Fpr42130.C?ref=070ba483434fc103357a001baeb4f907170854c4", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O2 -fno-tree-ch\" } */\n+/* { dg-options \"-O2 -fgraphite-identity -fno-tree-ch\" } */\n #include <vector>\n \n using std::vector;\n@@ -9,11 +9,11 @@ vector<unsigned> & __attribute__((noinline, noclone)) foo(unsigned n)\n   return *vv;\n }\n \n-\n int main()\n {\n   foo(0);\n   return 0;\n }\n+\n /* { dg-do run  } */\n "}, {"sha": "a00694ca406e62b66a865e34613f3d48c6bba533", "filename": "gcc/testsuite/gcc.dg/graphite/block-0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ba483434fc103357a001baeb4f907170854c4/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ba483434fc103357a001baeb4f907170854c4/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-0.c?ref=070ba483434fc103357a001baeb4f907170854c4", "patch": "@@ -19,5 +19,5 @@ main()\n   return toto();\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" { xfail *-*-* } } } */ \n+/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "d8fb915f377e9d6437e266a69e2976e1d64b2188", "filename": "gcc/testsuite/gcc.dg/graphite/pr42211.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ba483434fc103357a001baeb4f907170854c4/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr42211.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ba483434fc103357a001baeb4f907170854c4/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr42211.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr42211.c?ref=070ba483434fc103357a001baeb4f907170854c4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-options \"-O3 -floop-interchange\" } */\n+\n+typedef unsigned char uint8_t;\n+\n+void border_mirror(uint8_t *outer_img, int w, int h, int rb, int border)\n+{\n+  uint8_t *img = outer_img + border * rb + border;\n+  int x, y;\n+\n+  for (y = -border; y < 0; y++) {\n+    for (x = -border; x < 0; x++)\n+      img[y*rb + x] = img[(-y)*rb + (-x)];\n+\n+    for (x = 0; x < w; x++)\n+      img[y*rb + x] = img[(-y)*rb + x];\n+  }\n+}\n+\n+void border_mirror_480(uint8_t *outer_img)\n+{\n+  border_mirror(outer_img, 640, 480, 640 + 16*2, 16);\n+}"}, {"sha": "99b46def818dedb8200242e848c27347c0cdfe37", "filename": "gcc/testsuite/gfortran.dg/graphite/graphite.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ba483434fc103357a001baeb4f907170854c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fgraphite.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ba483434fc103357a001baeb4f907170854c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fgraphite.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fgraphite.exp?ref=070ba483434fc103357a001baeb4f907170854c4", "patch": "@@ -49,7 +49,7 @@ gfortran-dg-runtest $block_files $DEFAULT_FLAGS_GRAPHITE_BLOCK\n foreach block_file $block_files {lremove wait_to_run_files $block_file}\n \n # Flags using for id-* files.\n-set DEFAULT_FLAGS_GRAPHITE_IDENTITY \"-O2 -fgraphite-identity -fdump-tree-graphite-all\"\n+set DEFAULT_FLAGS_GRAPHITE_IDENTITY \"-O2 -fgraphite-identity\"\n set id_files [lsort [glob -nocomplain $srcdir/$subdir/id-*.\\[fF\\]{,90,95,03,08} ] ]\n gfortran-dg-runtest $id_files $DEFAULT_FLAGS_GRAPHITE_IDENTITY\n foreach id_file $id_files {lremove wait_to_run_files $id_file}"}, {"sha": "334fbd8246a75802a9bf37e3f47c1b4a302d1d2d", "filename": "gcc/testsuite/gfortran.dg/graphite/interchange-1.f", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ba483434fc103357a001baeb4f907170854c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ba483434fc103357a001baeb4f907170854c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-1.f?ref=070ba483434fc103357a001baeb4f907170854c4", "patch": "@@ -37,4 +37,9 @@ subroutine foo(f1,f2,f3,f4,f5,f6,f7,f8,f9,f0,g1,g2,g3)\n       end\n \n \n+! We should be able to interchange this as the number of iterations is\n+! known to be 4 in the inner two loops.  See interchange-2.f for the\n+! kernel from bwaves.\n+\n ! { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } }\n+! { dg-final { cleanup-tree-dump \"graphite\" } }"}, {"sha": "8e2e87f12ab4d5bdce5c1d52496a53fc034a7b40", "filename": "gcc/testsuite/gfortran.dg/graphite/interchange-2.f", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ba483434fc103357a001baeb4f907170854c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ba483434fc103357a001baeb4f907170854c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Finterchange-2.f?ref=070ba483434fc103357a001baeb4f907170854c4", "patch": "@@ -32,7 +32,12 @@ subroutine foo(f1,f2,f3,f4,f5,f6,f7,f8,f9,f0,g1,g2,g3)\n                enddo\n             enddo\n          enddo\n-      enddo          \n+      enddo\n       return\n       end\n \n+! This is the kernel extracted from bwaves: this cannot be interchanged\n+! as the number of iterations for f4 is not known.\n+\n+! { dg-final { scan-tree-dump-times \"will be interchanged\" 0 \"graphite\" } }\n+! { dg-final { cleanup-tree-dump \"graphite\" } }"}, {"sha": "2503dc3e8f2ec1a116a847353a81748718c47c09", "filename": "gcc/testsuite/gfortran.dg/graphite/pr42334-1.f", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ba483434fc103357a001baeb4f907170854c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr42334-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ba483434fc103357a001baeb4f907170854c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr42334-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr42334-1.f?ref=070ba483434fc103357a001baeb4f907170854c4", "patch": "@@ -0,0 +1,16 @@\n+! { dg-options \"-O2 -floop-interchange\" }\n+\n+      subroutine linel(icmdl,stre,anisox)\n+      real*8 stre(6),tkl(3,3),ekl(3,3),anisox(3,3,3,3)\n+            do m1=1,3\n+               do m2=1,m1\n+                  do m3=1,3\n+                     do m4=1,3\n+                        tkl(m1,m2)=tkl(m1,m2)+\n+     &                       anisox(m1,m2,m3,m4)*ekl(m3,m4)\n+                     enddo\n+                  enddo\n+               enddo\n+            enddo\n+            stre(1)=tkl(1,1)\n+      end"}, {"sha": "4080c9f2ab342fd0ea5b59a9c25219fdc9f62bef", "filename": "gcc/testsuite/gfortran.dg/graphite/pr42334.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070ba483434fc103357a001baeb4f907170854c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr42334.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070ba483434fc103357a001baeb4f907170854c4/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr42334.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgraphite%2Fpr42334.f90?ref=070ba483434fc103357a001baeb4f907170854c4", "patch": "@@ -0,0 +1,20 @@\n+! { dg-options \"-O2 -floop-interchange -ftree-loop-distribution\" }\n+\n+subroutine blockdis(bl1eg,bl2eg)\n+  implicit real*8 (a-h,o-z)\n+  parameter(nblo=300)\n+  common/str /mblo\n+  common/str2 /mel(nblo)\n+  dimension h(nblo,2,6),g(nblo,2,6)\n+  dimension bl1eg(nblo,2,6),bl2eg(nblo,2,6)\n+  do k=1,mblo\n+     jm=mel(k)\n+     do l=1,2\n+        do m=1,6\n+           bl1eg(k,l,m)=h(jm,l,m)\n+           bl2eg(k,l,m)=g(jm,l,m)\n+        enddo\n+     enddo\n+  enddo\n+  return\n+end subroutine blockdis"}]}