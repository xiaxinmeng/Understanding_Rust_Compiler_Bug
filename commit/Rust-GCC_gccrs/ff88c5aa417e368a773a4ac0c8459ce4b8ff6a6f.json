{"sha": "ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4OGM1YWE0MTdlMzY4YTc3M2E0YWMwYzg0NTljZTRiOGZmNmE2Zg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-12-19T00:12:14Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-12-19T00:12:14Z"}, "message": "tree-flow.h (struct stmt_ann_d): Remove makes_aliased_loads and makes_aliased_stores fields.\n\n\t* tree-flow.h (struct stmt_ann_d): Remove\n\tmakes_aliased_loads and makes_aliased_stores fields.\n\t* tree-ssa-ccp.c (likely_value): Do not use makes_aliased_stores\n\tand makes_aliased_loads fields.\n\t* tree-ssa-dom.c (eliminate_redundant_computations): Do not\n\tuse makes_aliased_stores.\n\t* tree-ssa-operands.c (clobbered_aliased_loads,\n\tclobbered_aliased_stores, ro_call_aliased_loads): Removed.\n\t(build_ssa_operands, add_stmt_operand, add_call_clobber_ops,\n\tadd_call_read_ops): Do not set makes_aliased_stores and\n\tmakes_aliased_loads fields.\n\t* tree-ssa.c (verify_ssa): Do not verify makes_aliased_stores\n\tfield.\n\nFrom-SVN: r108766", "tree": {"sha": "f42fbcc6e8a2ad0f43efd43b7cc4529297806946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f42fbcc6e8a2ad0f43efd43b7cc4529297806946"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f/comments", "author": null, "committer": null, "parents": [{"sha": "56c779bcc9047047c33a90d1994b94a7fb0df0d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c779bcc9047047c33a90d1994b94a7fb0df0d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56c779bcc9047047c33a90d1994b94a7fb0df0d3"}], "stats": {"total": 83, "additions": 21, "deletions": 62}, "files": [{"sha": "11df7f363c82db8fb94188c34f58e0abbd3d369a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f", "patch": "@@ -1,3 +1,19 @@\n+2005-12-19  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\t* tree-flow.h (struct stmt_ann_d): Remove\n+\tmakes_aliased_loads and makes_aliased_stores fields.\n+\t* tree-ssa-ccp.c (likely_value): Do not use makes_aliased_stores\n+\tand makes_aliased_loads fields.\n+\t* tree-ssa-dom.c (eliminate_redundant_computations): Do not\n+\tuse makes_aliased_stores.\n+\t* tree-ssa-operands.c (clobbered_aliased_loads,\n+\tclobbered_aliased_stores, ro_call_aliased_loads): Removed.\n+\t(build_ssa_operands, add_stmt_operand, add_call_clobber_ops,\n+\tadd_call_read_ops): Do not set makes_aliased_stores and\n+\tmakes_aliased_loads fields.\n+\t* tree-ssa.c (verify_ssa): Do not verify makes_aliased_stores\n+\tfield.\n+\n 2005-12-18  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/darwin.h: Don't include darwin-sections.def to declare"}, {"sha": "9675288eee65a96b9adb95cf91bbd27995869094", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f", "patch": "@@ -256,12 +256,6 @@ struct stmt_ann_d GTY(())\n      need to be scanned again).  */\n   unsigned modified : 1;\n \n-  /* Nonzero if the statement makes aliased loads.  */\n-  unsigned makes_aliased_loads : 1;\n-\n-  /* Nonzero if the statement makes aliased stores.  */\n-  unsigned makes_aliased_stores : 1;\n-\n   /* Nonzero if the statement makes references to volatile storage.  */\n   unsigned has_volatile_ops : 1;\n "}, {"sha": "c428ef0b4791e45c33473e657fc006214dd9108c", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f", "patch": "@@ -482,9 +482,7 @@ likely_value (tree stmt)\n   /* If we are not doing store-ccp, statements with loads\n      and/or stores will never fold into a constant.  */\n   if (!do_store_ccp\n-      && (ann->makes_aliased_stores\n-\t  || ann->makes_aliased_loads\n-\t  || !ZERO_SSA_OPERANDS (stmt, SSA_OP_ALL_VIRTUALS)))\n+      && !ZERO_SSA_OPERANDS (stmt, SSA_OP_ALL_VIRTUALS))\n     return VARYING;\n \n "}, {"sha": "b6257d33383f07d0c831b235ae3dec869d3d7905", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f", "patch": "@@ -2394,8 +2394,7 @@ eliminate_redundant_computations (tree stmt, stmt_ann_t ann)\n \n   /* Certain expressions on the RHS can be optimized away, but can not\n      themselves be entered into the hash tables.  */\n-  if (ann->makes_aliased_stores\n-      || ! def\n+  if (! def\n       || TREE_CODE (def) != SSA_NAME\n       || SSA_NAME_OCCURS_IN_ABNORMAL_PHI (def)\n       || !ZERO_SSA_OPERANDS (stmt, SSA_OP_VMAYDEF)"}, {"sha": "674e9ce773d4ffe00d3d99347f8c7c0593ac4d49", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 3, "deletions": 42, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f", "patch": "@@ -127,9 +127,6 @@ bool ssa_ro_call_cache_valid;\n static VEC(tree,heap) *clobbered_v_may_defs;\n static VEC(tree,heap) *clobbered_vuses;\n static VEC(tree,heap) *ro_call_vuses;\n-static bool clobbered_aliased_loads;\n-static bool clobbered_aliased_stores;\n-static bool ro_call_aliased_loads;\n static bool ops_active = false;\n \n static GTY (()) struct ssa_operand_memory_d *operand_memory = NULL;\n@@ -798,14 +795,9 @@ build_ssa_operands (tree stmt)\n {\n   stmt_ann_t ann = get_stmt_ann (stmt);\n   \n-  /* Initially assume that the statement has no volatile operands, nor\n-     makes aliased loads or stores.  */\n+  /* Initially assume that the statement has no volatile operands.  */\n   if (ann)\n-    {\n-      ann->has_volatile_ops = false;\n-      ann->makes_aliased_stores = false;\n-      ann->makes_aliased_loads = false;\n-    }\n+    ann->has_volatile_ops = false;\n \n   start_ssa_stmt_operands ();\n \n@@ -1643,11 +1635,7 @@ add_stmt_operand (tree *var_p, stmt_ann_t s_ann, int flags)\n \t\t}\n \t    }\n \t  else\n-\t    {\n-\t      append_vuse (var);\n-\t      if (s_ann && v_ann->is_alias_tag)\n-\t\ts_ann->makes_aliased_loads = 1;\n-\t    }\n+\t    append_vuse (var);\n \t}\n       else\n \t{\n@@ -1668,9 +1656,6 @@ add_stmt_operand (tree *var_p, stmt_ann_t s_ann, int flags)\n \n \t      for (i = 0; i < VARRAY_ACTIVE_SIZE (aliases); i++)\n \t\tappend_v_may_def (VARRAY_TREE (aliases, i));\n-\n-\t      if (s_ann)\n-\t\ts_ann->makes_aliased_stores = 1;\n \t    }\n \t  else\n \t    {\n@@ -1681,9 +1666,6 @@ add_stmt_operand (tree *var_p, stmt_ann_t s_ann, int flags)\n \n \t      for (i = 0; i < VARRAY_ACTIVE_SIZE (aliases); i++)\n \t\tappend_vuse (VARRAY_TREE (aliases, i));\n-\n-\t      if (s_ann)\n-\t\ts_ann->makes_aliased_loads = 1;\n \t    }\n \t}\n     }\n@@ -1792,11 +1774,6 @@ add_call_clobber_ops (tree stmt, tree callee)\n \t  var_ann (t)->in_v_may_def_list = 1;\n \t  VEC_safe_push (tree, heap, build_v_may_defs, (tree)t);\n \t}\n-      if (s_ann)\n-\t{\n-\t  s_ann->makes_aliased_loads = clobbered_aliased_loads;\n-\t  s_ann->makes_aliased_stores = clobbered_aliased_stores;\n-\t}\n       return;\n     }\n \n@@ -1828,16 +1805,6 @@ add_call_clobber_ops (tree stmt, tree callee)\n   if ((!not_read_b || bitmap_empty_p (not_read_b))\n       && (!not_written_b || bitmap_empty_p (not_written_b)))\n     {\n-      clobbered_aliased_loads = empty_ann.makes_aliased_loads;\n-      clobbered_aliased_stores = empty_ann.makes_aliased_stores;\n-\n-      /* Set the flags for a stmt's annotation.  */\n-      if (s_ann)\n-\t{\n-\t  s_ann->makes_aliased_loads = empty_ann.makes_aliased_loads;\n-\t  s_ann->makes_aliased_stores = empty_ann.makes_aliased_stores;\n-\t}\n-\n       /* Prepare empty cache vectors.  */\n       VEC_truncate (tree, clobbered_vuses, 0);\n       VEC_truncate (tree, clobbered_v_may_defs, 0);\n@@ -1893,8 +1860,6 @@ add_call_read_ops (tree stmt)\n \t  var_ann (t)->in_vuse_list = 1;\n \t  VEC_safe_push (tree, heap, build_vuses, (tree)t);\n \t}\n-      if (s_ann)\n-\ts_ann->makes_aliased_loads = ro_call_aliased_loads;\n       return;\n     }\n \n@@ -1907,10 +1872,6 @@ add_call_read_ops (tree stmt)\n       add_stmt_operand (&var, &empty_ann, opf_none | opf_non_specific);\n     }\n \n-  ro_call_aliased_loads = empty_ann.makes_aliased_loads;\n-  if (s_ann)\n-    s_ann->makes_aliased_loads = empty_ann.makes_aliased_loads;\n-\n   /* Prepare empty cache vectors.  */\n   VEC_truncate (tree, ro_call_vuses, 0);\n "}, {"sha": "2cd641244e9a7499bd89cfe0fe08a80b75ae7c03", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=ff88c5aa417e368a773a4ac0c8459ce4b8ff6a6f", "patch": "@@ -730,15 +730,6 @@ verify_ssa (bool check_modified_stmt)\n \t\t}\n \t    }\n \n-\n-\t  if (stmt_ann (stmt)->makes_aliased_stores \n-\t      && ZERO_SSA_OPERANDS (stmt, SSA_OP_VMAYDEF))\n-\t    {\n-\t      error (\"statement makes aliased stores, but has no V_MAY_DEFS\");\n-\t      print_generic_stmt (stderr, stmt, TDF_VOPS);\n-\t      goto err;\n-\t    }\n-\n \t  FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter,\n \t                            SSA_OP_ALL_USES | SSA_OP_ALL_KILLS)\n \t    {"}]}