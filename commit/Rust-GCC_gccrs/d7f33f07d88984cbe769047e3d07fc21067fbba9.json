{"sha": "d7f33f07d88984cbe769047e3d07fc21067fbba9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdmMzNmMDdkODg5ODRjYmU3NjkwNDdlM2QwN2ZjMjEwNjdmYmJhOQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-07-25T16:00:28Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-07-25T16:00:28Z"}, "message": "[AArch64][7/10] ARMv8.2-A FP16 one operand scalar intrinsics\n\ngcc/\n\t* config.gcc (aarch64*-*-*): Install arm_fp16.h.\n\t* config/aarch64/aarch64-builtins.c (hi_UP): New.\n\t* config/aarch64/aarch64-simd-builtins.def: Register new builtins.\n\t* config/aarch64/aarch64-simd.md (aarch64_frsqrte<mode>): Extend to HF\n\tmode.\n\t(aarch64_frecp<FRECP:frecp_suffix><mode>): Likewise.\n\t(aarch64_cm<optab><mode>): Likewise.\n\t* config/aarch64/aarch64.md (<frint_pattern><mode>2): Likewise.\n\t(l<fcvt_pattern><su_optab><GPF:mode><GPI:mode>2): Likewise.\n\t(fix_trunc<GPF:mode><GPI:mode>2): Likewise.\n\t(sqrt<mode>2): Likewise.\n\t(abs<mode>2): Likewise.\n\t(<optab><mode>hf2): New pattern for HF mode.\n\t(<optab>hihf2): Likewise.\n\t* config/aarch64/arm_neon.h: Include arm_fp16.h.\n\t* config/aarch64/iterators.md (GPF_F16, GPI_F16, VHSDF_HSDF): New.\n\t(w1, w2, v, s, q, Vmtype, V_cmp_result, fcvt_iesize, FCVT_IESIZE):\n\tSupport HF mode.\n\t* config/aarch64/arm_fp16.h: New file.\n\t(vabsh_f16, vceqzh_f16, vcgezh_f16, vcgtzh_f16, vclezh_f16, vcltzh_f16,\n\tvcvth_f16_s16, vcvth_f16_s32, vcvth_f16_s64, vcvth_f16_u16,\n\tvcvth_f16_u32, vcvth_f16_u64, vcvth_s16_f16, vcvth_s32_f16,\n\tvcvth_s64_f16, vcvth_u16_f16, vcvth_u32_f16, vcvth_u64_f16,\n\tvcvtah_s16_f16, vcvtah_s32_f16, vcvtah_s64_f16, vcvtah_u16_f16,\n\tvcvtah_u32_f16, vcvtah_u64_f16, vcvtmh_s16_f16, vcvtmh_s32_f16,\n\tvcvtmh_s64_f16, vcvtmh_u16_f16, vcvtmh_u32_f16, vcvtmh_u64_f16,\n\tvcvtnh_s16_f16, vcvtnh_s32_f16, vcvtnh_s64_f16, vcvtnh_u16_f16,\n\tvcvtnh_u32_f16, vcvtnh_u64_f16, vcvtph_s16_f16, vcvtph_s32_f16,\n\tvcvtph_s64_f16, vcvtph_u16_f16, vcvtph_u32_f16, vcvtph_u64_f16,\n\tvnegh_f16, vrecpeh_f16, vrecpxh_f16, vrndh_f16, vrndah_f16, vrndih_f16,\n\tvrndmh_f16, vrndnh_f16, vrndph_f16, vrndxh_f16, vrsqrteh_f16,\n\tvsqrth_f16): New.\n\nFrom-SVN: r238722", "tree": {"sha": "29262b8680f3c94bf1f84fdf61fae0c52db81937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29262b8680f3c94bf1f84fdf61fae0c52db81937"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7f33f07d88984cbe769047e3d07fc21067fbba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f33f07d88984cbe769047e3d07fc21067fbba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f33f07d88984cbe769047e3d07fc21067fbba9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f33f07d88984cbe769047e3d07fc21067fbba9/comments", "author": null, "committer": null, "parents": [{"sha": "703bbcdfe9f2a442ecc58366d3fcd0672a14c367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703bbcdfe9f2a442ecc58366d3fcd0672a14c367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/703bbcdfe9f2a442ecc58366d3fcd0672a14c367"}], "stats": {"total": 592, "additions": 534, "deletions": 58}, "files": [{"sha": "a26721b8c514d868e60e665a612b3b3fd54c45ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7f33f07d88984cbe769047e3d07fc21067fbba9", "patch": "@@ -1,3 +1,38 @@\n+2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config.gcc (aarch64*-*-*): Install arm_fp16.h.\n+\t* config/aarch64/aarch64-builtins.c (hi_UP): New.\n+\t* config/aarch64/aarch64-simd-builtins.def: Register new builtins.\n+\t* config/aarch64/aarch64-simd.md (aarch64_frsqrte<mode>): Extend to HF\n+\tmode.\n+\t(aarch64_frecp<FRECP:frecp_suffix><mode>): Likewise.\n+\t(aarch64_cm<optab><mode>): Likewise.\n+\t* config/aarch64/aarch64.md (<frint_pattern><mode>2): Likewise.\n+\t(l<fcvt_pattern><su_optab><GPF:mode><GPI:mode>2): Likewise.\n+\t(fix_trunc<GPF:mode><GPI:mode>2): Likewise.\n+\t(sqrt<mode>2): Likewise.\n+\t(abs<mode>2): Likewise.\n+\t(<optab><mode>hf2): New pattern for HF mode.\n+\t(<optab>hihf2): Likewise.\n+\t* config/aarch64/arm_neon.h: Include arm_fp16.h.\n+\t* config/aarch64/iterators.md (GPF_F16, GPI_F16, VHSDF_HSDF): New.\n+\t(w1, w2, v, s, q, Vmtype, V_cmp_result, fcvt_iesize, FCVT_IESIZE):\n+\tSupport HF mode.\n+\t* config/aarch64/arm_fp16.h: New file.\n+\t(vabsh_f16, vceqzh_f16, vcgezh_f16, vcgtzh_f16, vclezh_f16, vcltzh_f16,\n+\tvcvth_f16_s16, vcvth_f16_s32, vcvth_f16_s64, vcvth_f16_u16,\n+\tvcvth_f16_u32, vcvth_f16_u64, vcvth_s16_f16, vcvth_s32_f16,\n+\tvcvth_s64_f16, vcvth_u16_f16, vcvth_u32_f16, vcvth_u64_f16,\n+\tvcvtah_s16_f16, vcvtah_s32_f16, vcvtah_s64_f16, vcvtah_u16_f16,\n+\tvcvtah_u32_f16, vcvtah_u64_f16, vcvtmh_s16_f16, vcvtmh_s32_f16,\n+\tvcvtmh_s64_f16, vcvtmh_u16_f16, vcvtmh_u32_f16, vcvtmh_u64_f16,\n+\tvcvtnh_s16_f16, vcvtnh_s32_f16, vcvtnh_s64_f16, vcvtnh_u16_f16,\n+\tvcvtnh_u32_f16, vcvtnh_u64_f16, vcvtph_s16_f16, vcvtph_s32_f16,\n+\tvcvtph_s64_f16, vcvtph_u16_f16, vcvtph_u32_f16, vcvtph_u64_f16,\n+\tvnegh_f16, vrecpeh_f16, vrecpxh_f16, vrndh_f16, vrndah_f16, vrndih_f16,\n+\tvrndmh_f16, vrndnh_f16, vrndph_f16, vrndxh_f16, vrsqrteh_f16,\n+\tvsqrth_f16): New.\n+\n 2016-07-25  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def (reduc_smax_scal_,"}, {"sha": "8827dc830d374c2512be5713d6dd143913f53c7d", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=d7f33f07d88984cbe769047e3d07fc21067fbba9", "patch": "@@ -300,7 +300,7 @@ m32c*-*-*)\n         ;;\n aarch64*-*-*)\n \tcpu_type=aarch64\n-\textra_headers=\"arm_neon.h arm_acle.h\"\n+\textra_headers=\"arm_fp16.h arm_neon.h arm_acle.h\"\n \tc_target_objs=\"aarch64-c.o\"\n \tcxx_target_objs=\"aarch64-c.o\"\n \textra_objs=\"aarch64-builtins.o aarch-common.o cortex-a57-fma-steering.o\""}, {"sha": "ca91d9108ead3eb83c21ee86d9e6ed44c8f4ad2d", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=d7f33f07d88984cbe769047e3d07fc21067fbba9", "patch": "@@ -62,6 +62,7 @@\n #define si_UP    SImode\n #define sf_UP    SFmode\n #define hi_UP    HImode\n+#define hf_UP    HFmode\n #define qi_UP    QImode\n #define UP(X) X##_UP\n "}, {"sha": "6f50d8405d3ee8c4823037bb2022a4f2f08b72fe", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=d7f33f07d88984cbe769047e3d07fc21067fbba9", "patch": "@@ -274,6 +274,14 @@\n   BUILTIN_VHSDF (UNOP, round, 2)\n   BUILTIN_VHSDF_DF (UNOP, frintn, 2)\n \n+  VAR1 (UNOP, btrunc, 2, hf)\n+  VAR1 (UNOP, ceil, 2, hf)\n+  VAR1 (UNOP, floor, 2, hf)\n+  VAR1 (UNOP, frintn, 2, hf)\n+  VAR1 (UNOP, nearbyint, 2, hf)\n+  VAR1 (UNOP, rint, 2, hf)\n+  VAR1 (UNOP, round, 2, hf)\n+\n   /* Implemented by l<fcvt_pattern><su_optab><VQDF:mode><vcvt_target>2.  */\n   VAR1 (UNOP, lbtruncv4hf, 2, v4hi)\n   VAR1 (UNOP, lbtruncv8hf, 2, v8hi)\n@@ -292,7 +300,8 @@\n   VAR1 (UNOP, lroundv2sf, 2, v2si)\n   VAR1 (UNOP, lroundv4sf, 2, v4si)\n   VAR1 (UNOP, lroundv2df, 2, v2di)\n-  /* Implemented by l<fcvt_pattern><su_optab><GPF:mode><GPI:mode>2.  */\n+  /* Implemented by l<fcvt_pattern><su_optab><GPF_F16:mode><GPI:mode>2.  */\n+  BUILTIN_GPI_I16 (UNOP, lroundhf, 2)\n   VAR1 (UNOP, lroundsf, 2, si)\n   VAR1 (UNOP, lrounddf, 2, di)\n \n@@ -301,6 +310,7 @@\n   VAR1 (UNOPUS, lrounduv2sf, 2, v2si)\n   VAR1 (UNOPUS, lrounduv4sf, 2, v4si)\n   VAR1 (UNOPUS, lrounduv2df, 2, v2di)\n+  BUILTIN_GPI_I16 (UNOPUS, lrounduhf, 2)\n   VAR1 (UNOPUS, lroundusf, 2, si)\n   VAR1 (UNOPUS, lroundudf, 2, di)\n \n@@ -309,12 +319,14 @@\n   VAR1 (UNOP, lceilv2sf, 2, v2si)\n   VAR1 (UNOP, lceilv4sf, 2, v4si)\n   VAR1 (UNOP, lceilv2df, 2, v2di)\n+  BUILTIN_GPI_I16 (UNOP, lceilhf, 2)\n \n   VAR1 (UNOPUS, lceiluv4hf, 2, v4hi)\n   VAR1 (UNOPUS, lceiluv8hf, 2, v8hi)\n   VAR1 (UNOPUS, lceiluv2sf, 2, v2si)\n   VAR1 (UNOPUS, lceiluv4sf, 2, v4si)\n   VAR1 (UNOPUS, lceiluv2df, 2, v2di)\n+  BUILTIN_GPI_I16 (UNOPUS, lceiluhf, 2)\n   VAR1 (UNOPUS, lceilusf, 2, si)\n   VAR1 (UNOPUS, lceiludf, 2, di)\n \n@@ -323,12 +335,14 @@\n   VAR1 (UNOP, lfloorv2sf, 2, v2si)\n   VAR1 (UNOP, lfloorv4sf, 2, v4si)\n   VAR1 (UNOP, lfloorv2df, 2, v2di)\n+  BUILTIN_GPI_I16 (UNOP, lfloorhf, 2)\n \n   VAR1 (UNOPUS, lflooruv4hf, 2, v4hi)\n   VAR1 (UNOPUS, lflooruv8hf, 2, v8hi)\n   VAR1 (UNOPUS, lflooruv2sf, 2, v2si)\n   VAR1 (UNOPUS, lflooruv4sf, 2, v4si)\n   VAR1 (UNOPUS, lflooruv2df, 2, v2di)\n+  BUILTIN_GPI_I16 (UNOPUS, lflooruhf, 2)\n   VAR1 (UNOPUS, lfloorusf, 2, si)\n   VAR1 (UNOPUS, lfloorudf, 2, di)\n \n@@ -337,6 +351,7 @@\n   VAR1 (UNOP, lfrintnv2sf, 2, v2si)\n   VAR1 (UNOP, lfrintnv4sf, 2, v4si)\n   VAR1 (UNOP, lfrintnv2df, 2, v2di)\n+  BUILTIN_GPI_I16 (UNOP, lfrintnhf, 2)\n   VAR1 (UNOP, lfrintnsf, 2, si)\n   VAR1 (UNOP, lfrintndf, 2, di)\n \n@@ -345,6 +360,7 @@\n   VAR1 (UNOPUS, lfrintnuv2sf, 2, v2si)\n   VAR1 (UNOPUS, lfrintnuv4sf, 2, v4si)\n   VAR1 (UNOPUS, lfrintnuv2df, 2, v2di)\n+  BUILTIN_GPI_I16 (UNOPUS, lfrintnuhf, 2)\n   VAR1 (UNOPUS, lfrintnusf, 2, si)\n   VAR1 (UNOPUS, lfrintnudf, 2, di)\n \n@@ -376,9 +392,9 @@\n \n   /* Implemented by\n      aarch64_frecp<FRECP:frecp_suffix><mode>.  */\n-  BUILTIN_GPF (UNOP, frecpe, 0)\n+  BUILTIN_GPF_F16 (UNOP, frecpe, 0)\n   BUILTIN_GPF (BINOP, frecps, 0)\n-  BUILTIN_GPF (UNOP, frecpx, 0)\n+  BUILTIN_GPF_F16 (UNOP, frecpx, 0)\n \n   BUILTIN_VDQ_SI (UNOP, urecpe, 0)\n \n@@ -389,6 +405,7 @@\n      only ever used for the int64x1_t intrinsic, there is no scalar version.  */\n   BUILTIN_VSDQ_I_DI (UNOP, abs, 0)\n   BUILTIN_VHSDF (UNOP, abs, 2)\n+  VAR1 (UNOP, abs, 2, hf)\n \n   BUILTIN_VQ_HSF (UNOP, vec_unpacks_hi_, 10)\n   VAR1 (BINOP, float_truncate_hi_, 0, v4sf)\n@@ -483,7 +500,7 @@\n   BUILTIN_VHSDF_SDF (SHIFTIMM_USS, fcvtzu, 3)\n \n   /* Implemented by aarch64_rsqrte<mode>.  */\n-  BUILTIN_VHSDF_SDF (UNOP, rsqrte, 0)\n+  BUILTIN_VHSDF_HSDF (UNOP, rsqrte, 0)\n \n   /* Implemented by aarch64_rsqrts<mode>.  */\n   BUILTIN_VHSDF_SDF (BINOP, rsqrts, 0)\n@@ -495,17 +512,34 @@\n   BUILTIN_VHSDF (BINOP, faddp, 0)\n \n   /* Implemented by aarch64_cm<optab><mode>.  */\n-  BUILTIN_VHSDF_SDF (BINOP_USS, cmeq, 0)\n-  BUILTIN_VHSDF_SDF (BINOP_USS, cmge, 0)\n-  BUILTIN_VHSDF_SDF (BINOP_USS, cmgt, 0)\n-  BUILTIN_VHSDF_SDF (BINOP_USS, cmle, 0)\n-  BUILTIN_VHSDF_SDF (BINOP_USS, cmlt, 0)\n+  BUILTIN_VHSDF_HSDF (BINOP_USS, cmeq, 0)\n+  BUILTIN_VHSDF_HSDF (BINOP_USS, cmge, 0)\n+  BUILTIN_VHSDF_HSDF (BINOP_USS, cmgt, 0)\n+  BUILTIN_VHSDF_HSDF (BINOP_USS, cmle, 0)\n+  BUILTIN_VHSDF_HSDF (BINOP_USS, cmlt, 0)\n \n   /* Implemented by neg<mode>2.  */\n-  BUILTIN_VHSDF (UNOP, neg, 2)\n+  BUILTIN_VHSDF_HSDF (UNOP, neg, 2)\n \n   /* Implemented by aarch64_fac<optab><mode>.  */\n   BUILTIN_VHSDF_SDF (BINOP_USS, faclt, 0)\n   BUILTIN_VHSDF_SDF (BINOP_USS, facle, 0)\n   BUILTIN_VHSDF_SDF (BINOP_USS, facgt, 0)\n   BUILTIN_VHSDF_SDF (BINOP_USS, facge, 0)\n+\n+  /* Implemented by sqrt<mode>2.  */\n+  VAR1 (UNOP, sqrt, 2, hf)\n+\n+  /* Implemented by <optab><mode>hf2.  */\n+  VAR1 (UNOP, floatdi, 2, hf)\n+  VAR1 (UNOP, floatsi, 2, hf)\n+  VAR1 (UNOP, floathi, 2, hf)\n+  VAR1 (UNOPUS, floatunsdi, 2, hf)\n+  VAR1 (UNOPUS, floatunssi, 2, hf)\n+  VAR1 (UNOPUS, floatunshi, 2, hf)\n+  BUILTIN_GPI_I16 (UNOP, fix_trunchf, 2)\n+  BUILTIN_GPI (UNOP, fix_truncsf, 2)\n+  BUILTIN_GPI (UNOP, fix_truncdf, 2)\n+  BUILTIN_GPI_I16 (UNOPUS, fixuns_trunchf, 2)\n+  BUILTIN_GPI (UNOPUS, fixuns_truncsf, 2)\n+  BUILTIN_GPI (UNOPUS, fixuns_truncdf, 2)"}, {"sha": "2ed9d9f8ba8b533d9d513bcaf4273565190d2a5c", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=d7f33f07d88984cbe769047e3d07fc21067fbba9", "patch": "@@ -383,8 +383,8 @@\n )\n \n (define_insn \"aarch64_rsqrte<mode>\"\n-  [(set (match_operand:VHSDF_SDF 0 \"register_operand\" \"=w\")\n-\t(unspec:VHSDF_SDF [(match_operand:VHSDF_SDF 1 \"register_operand\" \"w\")]\n+  [(set (match_operand:VHSDF_HSDF 0 \"register_operand\" \"=w\")\n+\t(unspec:VHSDF_HSDF [(match_operand:VHSDF_HSDF 1 \"register_operand\" \"w\")]\n \t\t     UNSPEC_RSQRTE))]\n   \"TARGET_SIMD\"\n   \"frsqrte\\\\t%<v>0<Vmtype>, %<v>1<Vmtype>\"\n@@ -1755,6 +1755,32 @@\n   [(set_attr \"type\" \"neon_fp_to_int_<stype><q>\")]\n )\n \n+;; HF Scalar variants of related SIMD instructions.\n+(define_insn \"l<fcvt_pattern><su_optab>hfhi2\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=w\")\n+\t(FIXUORS:HI (unspec:HF [(match_operand:HF 1 \"register_operand\" \"w\")]\n+\t\t      FCVT)))]\n+  \"TARGET_SIMD_F16INST\"\n+  \"fcvt<frint_suffix><su>\\t%h0, %h1\"\n+  [(set_attr \"type\" \"neon_fp_to_int_s\")]\n+)\n+\n+(define_insn \"<optab>_trunchfhi2\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=w\")\n+\t(FIXUORS:HI (match_operand:HF 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD_F16INST\"\n+  \"fcvtz<su>\\t%h0, %h1\"\n+  [(set_attr \"type\" \"neon_fp_to_int_s\")]\n+)\n+\n+(define_insn \"<optab>hihf2\"\n+  [(set (match_operand:HF 0 \"register_operand\" \"=w\")\n+\t(FLOATUORS:HF (match_operand:HI 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD_F16INST\"\n+  \"<su_optab>cvtf\\t%h0, %h1\"\n+  [(set_attr \"type\" \"neon_int_to_fp_s\")]\n+)\n+\n (define_insn \"*aarch64_fcvt<su_optab><VDQF:mode><fcvt_target>2_mult\"\n   [(set (match_operand:<FCVT_TARGET> 0 \"register_operand\" \"=w\")\n \t(FIXUORS:<FCVT_TARGET> (unspec:<FCVT_TARGET>\n@@ -4297,8 +4323,8 @@\n   [(set (match_operand:<V_cmp_result> 0 \"register_operand\" \"=w,w\")\n \t(neg:<V_cmp_result>\n \t  (COMPARISONS:<V_cmp_result>\n-\t    (match_operand:VHSDF_SDF 1 \"register_operand\" \"w,w\")\n-\t    (match_operand:VHSDF_SDF 2 \"aarch64_simd_reg_or_zero\" \"w,YDz\")\n+\t    (match_operand:VHSDF_HSDF 1 \"register_operand\" \"w,w\")\n+\t    (match_operand:VHSDF_HSDF 2 \"aarch64_simd_reg_or_zero\" \"w,YDz\")\n \t  )))]\n   \"TARGET_SIMD\"\n   \"@\n@@ -5425,12 +5451,12 @@\n )\n \n (define_insn \"aarch64_frecp<FRECP:frecp_suffix><mode>\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-\t(unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")]\n-\t\t    FRECP))]\n+  [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\n+\t(unspec:GPF_F16 [(match_operand:GPF_F16 1 \"register_operand\" \"w\")]\n+\t FRECP))]\n   \"TARGET_SIMD\"\n   \"frecp<FRECP:frecp_suffix>\\\\t%<s>0, %<s>1\"\n-  [(set_attr \"type\" \"neon_fp_recp<FRECP:frecp_suffix>_<GPF:Vetype><GPF:q>\")]\n+  [(set_attr \"type\" \"neon_fp_recp<FRECP:frecp_suffix>_<GPF_F16:stype>\")]\n )\n \n (define_insn \"aarch64_frecps<mode>\""}, {"sha": "56ad581da6c85716256f22eafbe432cde486154c", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=d7f33f07d88984cbe769047e3d07fc21067fbba9", "patch": "@@ -4450,22 +4450,23 @@\n ;; Expands to btrunc, ceil, floor, nearbyint, rint, round, frintn.\n \n (define_insn \"<frint_pattern><mode>2\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-\t(unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")]\n+  [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\n+\t(unspec:GPF_F16 [(match_operand:GPF_F16 1 \"register_operand\" \"w\")]\n \t FRINT))]\n   \"TARGET_FLOAT\"\n   \"frint<frint_suffix>\\\\t%<s>0, %<s>1\"\n-  [(set_attr \"type\" \"f_rint<s>\")]\n+  [(set_attr \"type\" \"f_rint<stype>\")]\n )\n \n ;; frcvt floating-point round to integer and convert standard patterns.\n ;; Expands to lbtrunc, lceil, lfloor, lround.\n-(define_insn \"l<fcvt_pattern><su_optab><GPF:mode><GPI:mode>2\"\n+(define_insn \"l<fcvt_pattern><su_optab><GPF_F16:mode><GPI:mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-\t(FIXUORS:GPI (unspec:GPF [(match_operand:GPF 1 \"register_operand\" \"w\")]\n-\t\t      FCVT)))]\n+\t(FIXUORS:GPI\n+\t  (unspec:GPF_F16 [(match_operand:GPF_F16 1 \"register_operand\" \"w\")]\n+\t   FCVT)))]\n   \"TARGET_FLOAT\"\n-  \"fcvt<frint_suffix><su>\\\\t%<GPI:w>0, %<GPF:s>1\"\n+  \"fcvt<frint_suffix><su>\\\\t%<GPI:w>0, %<GPF_F16:s>1\"\n   [(set_attr \"type\" \"f_cvtf2i\")]\n )\n \n@@ -4593,19 +4594,11 @@\n   [(set_attr \"type\" \"f_cvt\")]\n )\n \n-(define_insn \"fix_trunc<GPF:mode><GPI:mode>2\"\n-  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-        (fix:GPI (match_operand:GPF 1 \"register_operand\" \"w\")))]\n-  \"TARGET_FLOAT\"\n-  \"fcvtzs\\\\t%<GPI:w>0, %<GPF:s>1\"\n-  [(set_attr \"type\" \"f_cvtf2i\")]\n-)\n-\n-(define_insn \"fixuns_trunc<GPF:mode><GPI:mode>2\"\n+(define_insn \"<optab>_trunc<GPF_F16:mode><GPI:mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n-        (unsigned_fix:GPI (match_operand:GPF 1 \"register_operand\" \"w\")))]\n+\t(FIXUORS:GPI (match_operand:GPF_F16 1 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n-  \"fcvtzu\\\\t%<GPI:w>0, %<GPF:s>1\"\n+  \"fcvtz<su>\\t%<GPI:w>0, %<GPF_F16:s>1\"\n   [(set_attr \"type\" \"f_cvtf2i\")]\n )\n \n@@ -4629,6 +4622,14 @@\n   [(set_attr \"type\" \"f_cvti2f\")]\n )\n \n+(define_insn \"<optab><mode>hf2\"\n+  [(set (match_operand:HF 0 \"register_operand\" \"=w\")\n+\t(FLOATUORS:HF (match_operand:GPI 1 \"register_operand\" \"r\")))]\n+  \"TARGET_FP_F16INST\"\n+  \"<su_optab>cvtf\\t%h0, %<w>1\"\n+  [(set_attr \"type\" \"f_cvti2f\")]\n+)\n+\n ;; Convert between fixed-point and floating-point (scalar modes)\n \n (define_insn \"<FCVT_F2FIXED:fcvt_fixed_insn><GPF:mode>3\"\n@@ -4735,36 +4736,36 @@\n )\n \n (define_insn \"neg<mode>2\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-        (neg:GPF (match_operand:GPF 1 \"register_operand\" \"w\")))]\n+  [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\n+\t(neg:GPF_F16 (match_operand:GPF_F16 1 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fneg\\\\t%<s>0, %<s>1\"\n-  [(set_attr \"type\" \"ffarith<s>\")]\n+  [(set_attr \"type\" \"ffarith<stype>\")]\n )\n \n (define_expand \"sqrt<mode>2\"\n-  [(set (match_operand:GPF 0 \"register_operand\")\n-        (sqrt:GPF (match_operand:GPF 1 \"register_operand\")))]\n+  [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\n+\t(sqrt:GPF_F16 (match_operand:GPF_F16 1 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n {\n   if (aarch64_emit_approx_sqrt (operands[0], operands[1], false))\n     DONE;\n })\n \n (define_insn \"*sqrt<mode>2\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-        (sqrt:GPF (match_operand:GPF 1 \"register_operand\" \"w\")))]\n+  [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\n+\t(sqrt:GPF_F16 (match_operand:GPF_F16 1 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fsqrt\\\\t%<s>0, %<s>1\"\n-  [(set_attr \"type\" \"fsqrt<s>\")]\n+  [(set_attr \"type\" \"fsqrt<stype>\")]\n )\n \n (define_insn \"abs<mode>2\"\n-  [(set (match_operand:GPF 0 \"register_operand\" \"=w\")\n-        (abs:GPF (match_operand:GPF 1 \"register_operand\" \"w\")))]\n+  [(set (match_operand:GPF_F16 0 \"register_operand\" \"=w\")\n+\t(abs:GPF_F16 (match_operand:GPF_F16 1 \"register_operand\" \"w\")))]\n   \"TARGET_FLOAT\"\n   \"fabs\\\\t%<s>0, %<s>1\"\n-  [(set_attr \"type\" \"ffarith<s>\")]\n+  [(set_attr \"type\" \"ffarith<stype>\")]\n )\n \n ;; Given that smax/smin do not specify the result when either input is NaN,"}, {"sha": "818aa61925b6c78ec93149b391a562bd1aea0b50", "filename": "gcc/config/aarch64/arm_fp16.h", "status": "added", "additions": 365, "deletions": 0, "changes": 365, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2Fconfig%2Faarch64%2Farm_fp16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2Fconfig%2Faarch64%2Farm_fp16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_fp16.h?ref=d7f33f07d88984cbe769047e3d07fc21067fbba9", "patch": "@@ -0,0 +1,365 @@\n+/* ARM FP16 scalar intrinsics include file.\n+\n+   Copyright (C) 2016 Free Software Foundation, Inc.\n+   Contributed by ARM Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _AARCH64_FP16_H_\n+#define _AARCH64_FP16_H_\n+\n+#include <stdint.h>\n+\n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.2-a+fp16\")\n+\n+typedef __fp16 float16_t;\n+\n+/* ARMv8.2-A FP16 one operand scalar intrinsics.  */\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vabsh_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_abshf (__a);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vceqzh_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_cmeqhf_uss (__a, 0.0f);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vcgezh_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_cmgehf_uss (__a, 0.0f);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vcgtzh_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_cmgthf_uss (__a, 0.0f);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vclezh_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_cmlehf_uss (__a, 0.0f);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vcltzh_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_cmlthf_uss (__a, 0.0f);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vcvth_f16_s16 (int16_t __a)\n+{\n+  return __builtin_aarch64_floathihf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vcvth_f16_s32 (int32_t __a)\n+{\n+  return __builtin_aarch64_floatsihf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vcvth_f16_s64 (int64_t __a)\n+{\n+  return __builtin_aarch64_floatdihf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vcvth_f16_u16 (uint16_t __a)\n+{\n+  return __builtin_aarch64_floatunshihf_us (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vcvth_f16_u32 (uint32_t __a)\n+{\n+  return __builtin_aarch64_floatunssihf_us (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vcvth_f16_u64 (uint64_t __a)\n+{\n+  return __builtin_aarch64_floatunsdihf_us (__a);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vcvth_s16_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_fix_trunchfhi (__a);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vcvth_s32_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_fix_trunchfsi (__a);\n+}\n+\n+__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n+vcvth_s64_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_fix_trunchfdi (__a);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vcvth_u16_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_fixuns_trunchfhi_us (__a);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcvth_u32_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_fixuns_trunchfsi_us (__a);\n+}\n+\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+vcvth_u64_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_fixuns_trunchfdi_us (__a);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vcvtah_s16_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lroundhfhi (__a);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vcvtah_s32_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lroundhfsi (__a);\n+}\n+\n+__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n+vcvtah_s64_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lroundhfdi (__a);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vcvtah_u16_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lrounduhfhi_us (__a);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcvtah_u32_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lrounduhfsi_us (__a);\n+}\n+\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+vcvtah_u64_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lrounduhfdi_us (__a);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vcvtmh_s16_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lfloorhfhi (__a);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vcvtmh_s32_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lfloorhfsi (__a);\n+}\n+\n+__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n+vcvtmh_s64_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lfloorhfdi (__a);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vcvtmh_u16_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lflooruhfhi_us (__a);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcvtmh_u32_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lflooruhfsi_us (__a);\n+}\n+\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+vcvtmh_u64_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lflooruhfdi_us (__a);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vcvtnh_s16_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lfrintnhfhi (__a);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vcvtnh_s32_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lfrintnhfsi (__a);\n+}\n+\n+__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n+vcvtnh_s64_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lfrintnhfdi (__a);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vcvtnh_u16_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lfrintnuhfhi_us (__a);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcvtnh_u32_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lfrintnuhfsi_us (__a);\n+}\n+\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+vcvtnh_u64_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lfrintnuhfdi_us (__a);\n+}\n+\n+__extension__ static __inline int16_t __attribute__ ((__always_inline__))\n+vcvtph_s16_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lceilhfhi (__a);\n+}\n+\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+vcvtph_s32_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lceilhfsi (__a);\n+}\n+\n+__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n+vcvtph_s64_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lceilhfdi (__a);\n+}\n+\n+__extension__ static __inline uint16_t __attribute__ ((__always_inline__))\n+vcvtph_u16_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lceiluhfhi_us (__a);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+vcvtph_u32_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lceiluhfsi_us (__a);\n+}\n+\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+vcvtph_u64_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_lceiluhfdi_us (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vnegh_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_neghf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrecpeh_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_frecpehf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrecpxh_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_frecpxhf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrndh_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_btrunchf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrndah_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_roundhf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrndih_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_nearbyinthf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrndmh_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_floorhf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrndnh_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_frintnhf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrndph_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_ceilhf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrndxh_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_rinthf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vrsqrteh_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_rsqrtehf (__a);\n+}\n+\n+__extension__ static __inline float16_t __attribute__ ((__always_inline__))\n+vsqrth_f16 (float16_t __a)\n+{\n+  return __builtin_aarch64_sqrthf (__a);\n+}\n+\n+#pragma GCC pop_options\n+\n+#endif"}, {"sha": "fd555583b46e5899772ba4a9a2d80ea973895bc5", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=d7f33f07d88984cbe769047e3d07fc21067fbba9", "patch": "@@ -26032,6 +26032,8 @@ __INTERLEAVE_LIST (zip)\n \n /* ARMv8.2-A FP16 intrinsics.  */\n \n+#include \"arm_fp16.h\"\n+\n #pragma GCC push_options\n #pragma GCC target (\"arch=armv8.2-a+fp16\")\n "}, {"sha": "20d0f1bf615396e0d662a51e9c5c9895046cd090", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7f33f07d88984cbe769047e3d07fc21067fbba9/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=d7f33f07d88984cbe769047e3d07fc21067fbba9", "patch": "@@ -26,6 +26,9 @@\n ;; Iterator for General Purpose Integer registers (32- and 64-bit modes)\n (define_mode_iterator GPI [SI DI])\n \n+;; Iterator for HI, SI, DI, some instructions can only work on these modes.\n+(define_mode_iterator GPI_I16 [(HI \"AARCH64_ISA_F16\") SI DI])\n+\n ;; Iterator for QI and HI modes\n (define_mode_iterator SHORT [QI HI])\n \n@@ -38,6 +41,9 @@\n ;; Iterator for General Purpose Floating-point registers (32- and 64-bit modes)\n (define_mode_iterator GPF [SF DF])\n \n+;; Iterator for all scalar floating point modes (HF, SF, DF)\n+(define_mode_iterator GPF_F16 [(HF \"AARCH64_ISA_F16\") SF DF])\n+\n ;; Iterator for all scalar floating point modes (HF, SF, DF and TF)\n (define_mode_iterator GPF_TF_F16 [HF SF DF TF])\n \n@@ -102,6 +108,11 @@\n (define_mode_iterator VHSDF_SDF [(V4HF \"TARGET_SIMD_F16INST\")\n \t\t\t\t (V8HF \"TARGET_SIMD_F16INST\")\n \t\t\t\t V2SF V4SF V2DF SF DF])\n+(define_mode_iterator VHSDF_HSDF [(V4HF \"TARGET_SIMD_F16INST\")\n+\t\t\t\t  (V8HF \"TARGET_SIMD_F16INST\")\n+\t\t\t\t  V2SF V4SF V2DF\n+\t\t\t\t  (HF \"TARGET_SIMD_F16INST\")\n+\t\t\t\t  SF DF])\n \n ;; Vector single Float modes.\n (define_mode_iterator VDQSF [V2SF V4SF])\n@@ -372,8 +383,8 @@\n (define_mode_attr w [(QI \"w\") (HI \"w\") (SI \"w\") (DI \"x\") (SF \"s\") (DF \"d\")])\n \n ;; For inequal width int to float conversion\n-(define_mode_attr w1 [(SF \"w\") (DF \"x\")])\n-(define_mode_attr w2 [(SF \"x\") (DF \"w\")])\n+(define_mode_attr w1 [(HF \"w\") (SF \"w\") (DF \"x\")])\n+(define_mode_attr w2 [(HF \"x\") (SF \"x\") (DF \"w\")])\n \n (define_mode_attr short_mask [(HI \"65535\") (QI \"255\")])\n \n@@ -385,7 +396,7 @@\n \n ;; For scalar usage of vector/FP registers\n (define_mode_attr v [(QI \"b\") (HI \"h\") (SI \"s\") (DI \"d\")\n-\t\t    (SF \"s\") (DF \"d\")\n+\t\t    (HF  \"h\") (SF \"s\") (DF \"d\")\n \t\t    (V8QI \"\") (V16QI \"\")\n \t\t    (V4HI \"\") (V8HI \"\")\n \t\t    (V2SI \"\") (V4SI  \"\")\n@@ -416,7 +427,7 @@\n (define_mode_attr vas [(DI \"\") (SI \".2s\")])\n \n ;; Map a floating point mode to the appropriate register name prefix\n-(define_mode_attr s [(SF \"s\") (DF \"d\")])\n+(define_mode_attr s [(HF \"h\") (SF \"s\") (DF \"d\")])\n \n ;; Give the length suffix letter for a sign- or zero-extension.\n (define_mode_attr size [(QI \"b\") (HI \"h\") (SI \"w\")])\n@@ -452,8 +463,8 @@\n \t\t\t (V4SF \".4s\") (V2DF \".2d\")\n \t\t\t (DI   \"\")    (SI   \"\")\n \t\t\t (HI   \"\")    (QI   \"\")\n-\t\t\t (TI   \"\")    (SF   \"\")\n-\t\t\t (DF   \"\")])\n+\t\t\t (TI   \"\")    (HF   \"\")\n+\t\t\t (SF   \"\")    (DF   \"\")])\n \n ;; Register suffix narrowed modes for VQN.\n (define_mode_attr Vmntype [(V8HI \".8b\") (V4SI \".4h\")\n@@ -468,6 +479,7 @@\n \t\t\t  (V2DI \"d\") (V4HF \"h\")\n \t\t\t  (V8HF \"h\") (V2SF  \"s\")\n \t\t\t  (V4SF \"s\") (V2DF  \"d\")\n+\t\t\t  (HF   \"h\")\n \t\t\t  (SF   \"s\") (DF  \"d\")\n \t\t\t  (QI \"b\")   (HI \"h\")\n \t\t\t  (SI \"s\")   (DI \"d\")])\n@@ -639,7 +651,7 @@\n \t\t\t\t(V4HF \"V4HI\") (V8HF  \"V8HI\")\n \t\t\t\t(V2SF \"V2SI\") (V4SF  \"V4SI\")\n \t\t\t\t(V2DF \"V2DI\") (DF    \"DI\")\n-\t\t\t\t(SF   \"SI\")])\n+\t\t\t\t(SF   \"SI\")   (HF    \"HI\")])\n \n ;; Lower case mode of results of comparison operations.\n (define_mode_attr v_cmp_result [(V8QI \"v8qi\") (V16QI \"v16qi\")\n@@ -702,8 +714,8 @@\n \n \n ;; for the inequal width integer to fp conversions\n-(define_mode_attr fcvt_iesize [(SF \"di\") (DF \"si\")])\n-(define_mode_attr FCVT_IESIZE [(SF \"DI\") (DF \"SI\")])\n+(define_mode_attr fcvt_iesize [(HF \"di\") (SF \"di\") (DF \"si\")])\n+(define_mode_attr FCVT_IESIZE [(HF \"DI\") (SF \"DI\") (DF \"SI\")])\n \n (define_mode_attr VSWAP_WIDTH [(V8QI \"V16QI\") (V16QI \"V8QI\")\n \t\t\t\t(V4HI \"V8HI\") (V8HI  \"V4HI\")\n@@ -757,7 +769,7 @@\n \t\t     (V4HF \"\") (V8HF \"_q\")\n \t\t     (V2SF \"\") (V4SF  \"_q\")\n \t\t\t       (V2DF  \"_q\")\n-\t\t     (QI \"\") (HI \"\") (SI \"\") (DI \"\") (SF \"\") (DF \"\")])\n+\t\t     (QI \"\") (HI \"\") (SI \"\") (DI \"\") (HF \"\") (SF \"\") (DF \"\")])\n \n (define_mode_attr vp [(V8QI \"v\") (V16QI \"v\")\n \t\t      (V4HI \"v\") (V8HI  \"v\")"}]}