{"sha": "8d6427c6ddefb12bf5656e8938f8055a1201650a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ2NDI3YzZkZGVmYjEyYmY1NjU2ZTg5MzhmODA1NWExMjAxNjUwYQ==", "commit": {"author": {"name": "Aaron Sawdey", "email": "acsawdey@linux.vnet.ibm.com", "date": "2017-02-13T16:00:22Z"}, "committer": {"name": "Aaron Sawdey", "email": "acsawdey@gcc.gnu.org", "date": "2017-02-13T16:00:22Z"}, "message": "re PR target/79449 (ppc builtin expansion of strncmp can cross page (4k) boundary where it should not)\n\n2017-02-13  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n\n\tPR target/79449\n\t* gcc.dg/strncmp-2.c: New.  Test strncmp and memcmp builtin expansion\n\tfor reading beyond a 4k boundary.\n\n2017-02-13  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n\n\tPR target/79449\n\t* config/rs6000/rs6000.c (expand_block_compare): Make sure runtime\n\tboundary crossing check and subsequent code generation agree.\n\nFrom-SVN: r245392", "tree": {"sha": "142217a485e81ca4cb3cac2f51a3b9ed1cb7dd8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/142217a485e81ca4cb3cac2f51a3b9ed1cb7dd8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d6427c6ddefb12bf5656e8938f8055a1201650a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6427c6ddefb12bf5656e8938f8055a1201650a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d6427c6ddefb12bf5656e8938f8055a1201650a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d6427c6ddefb12bf5656e8938f8055a1201650a/comments", "author": null, "committer": null, "parents": [{"sha": "550e2205cc42e5ca9906c81cbe4c3c4bc285fd5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/550e2205cc42e5ca9906c81cbe4c3c4bc285fd5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/550e2205cc42e5ca9906c81cbe4c3c4bc285fd5e"}], "stats": {"total": 134, "additions": 128, "deletions": 6}, "files": [{"sha": "f35205119e806617a328c40b7fb4be5e6d3b91b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6427c6ddefb12bf5656e8938f8055a1201650a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6427c6ddefb12bf5656e8938f8055a1201650a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d6427c6ddefb12bf5656e8938f8055a1201650a", "patch": "@@ -1,3 +1,9 @@\n+2017-02-13  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n+\n+\tPR target/79449\n+\t* config/rs6000/rs6000.c (expand_block_compare): Make sure runtime\n+\tboundary crossing check and subsequent code generation agree.\n+\n 2017-02-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.c (has_memory_op): Delete."}, {"sha": "f0824790b7abe677e9e7ba2ecd12165e37710db0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6427c6ddefb12bf5656e8938f8055a1201650a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6427c6ddefb12bf5656e8938f8055a1201650a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8d6427c6ddefb12bf5656e8938f8055a1201650a", "patch": "@@ -19931,14 +19931,25 @@ expand_strn_compare (rtx operands[], int no_length)\n \t cmpldi\tcr7,r8,4096-16\n \t bgt\tcr7,L(pagecross) */\n \n+      /* Make sure that the length we use for the alignment test and\n+         the subsequent code generation are in agreement so we do not\n+         go past the length we tested for a 4k boundary crossing.  */\n+      unsigned HOST_WIDE_INT align_test = compare_length;\n+      if (align_test < 8)\n+        {\n+          align_test = HOST_WIDE_INT_1U << ceil_log2 (align_test);\n+          base_align = align_test;\n+        }\n+      else\n+        {\n+          align_test = ROUND_UP (align_test, 8);\n+          base_align = 8;\n+        }\n+\n       if (align1 < 8)\n-\texpand_strncmp_align_check (strncmp_label, src1, compare_length);\n+        expand_strncmp_align_check (strncmp_label, src1, align_test);\n       if (align2 < 8)\n-\texpand_strncmp_align_check (strncmp_label, src2, compare_length);\n-\n-      /* After the runtime alignment checks, we can use any alignment we\n-\t like as we know there is no 4k boundary crossing.  */\n-      base_align = 8;\n+        expand_strncmp_align_check (strncmp_label, src2, align_test);\n \n       /* Now generate the following sequence:\n \t - branch to begin_compare"}, {"sha": "b5e225e2acf489dbe0c8faef69deb22523c180e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6427c6ddefb12bf5656e8938f8055a1201650a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6427c6ddefb12bf5656e8938f8055a1201650a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d6427c6ddefb12bf5656e8938f8055a1201650a", "patch": "@@ -1,3 +1,9 @@\n+2017-02-13  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n+\n+\tPR target/79449\n+\t* gcc.dg/strncmp-2.c: New.  Test strncmp and memcmp builtin expansion\n+\tfor reading beyond a 4k boundary.\n+\n 2017-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/79388"}, {"sha": "0c9a07aacb77a17731cb6d519ca233138bc3f0b9", "filename": "gcc/testsuite/gcc.dg/strncmp-2.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d6427c6ddefb12bf5656e8938f8055a1201650a/gcc%2Ftestsuite%2Fgcc.dg%2Fstrncmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d6427c6ddefb12bf5656e8938f8055a1201650a/gcc%2Ftestsuite%2Fgcc.dg%2Fstrncmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrncmp-2.c?ref=8d6427c6ddefb12bf5656e8938f8055a1201650a", "patch": "@@ -0,0 +1,99 @@\n+/* Test strncmp builtin expansion for compilation and proper execution.  */\n+/* { dg-do run { target *-*-linux* *-*-gnu* } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target ptr32plus } */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <sys/mman.h>\n+#include <unistd.h>\n+#include <stdlib.h>\n+\n+int lib_memcmp(const void *a, const void *b, size_t n) asm(\"memcmp\");\n+int lib_strncmp(const char *a, const char *b, size_t n) asm(\"strncmp\");\n+\n+static void test_driver_strncmp (void (test_strncmp)(const char *, const char *, int),\n+\t\t\t\t void (test_memcmp)(const void *, const void *, int),\n+\t\t\t\t size_t sz)\n+{\n+  long pgsz = sysconf(_SC_PAGESIZE);\n+  char buf1[sz+1];\n+  char *buf2 = aligned_alloc(pgsz,2*pgsz);\n+  char *p2;\n+  int r,i,e;\n+\n+  r = mprotect (buf2+pgsz,pgsz,PROT_NONE);\n+  if (r < 0) abort();\n+  \n+  memset(buf1,'A',sz);\n+  for(i=10; i>=0; i--) {\n+    p2 = buf2+pgsz-sz-i;\n+    memset(p2,'A',sz);\n+    e = lib_strncmp(buf1,p2,sz);\n+    (*test_strncmp)(buf1,p2,e);\n+    e = lib_memcmp(buf1,p2,sz);\n+    (*test_memcmp)(buf1,p2,e);\n+  }\n+}\n+\n+#define RUN_TEST(SZ) test_driver_strncmp (test_strncmp_ ## SZ, test_memcmp_ ## SZ, SZ);\n+\n+#define DEF_TEST(SZ) \\\n+__attribute__((noinline))\t\t\t\t\t\t  \\\n+void test_strncmp_ ## SZ (const char *str1, const char *str2, int expect) \\\n+{\t\t\t\t\t\t\t\t\t  \\\n+  int r;\t\t\t\t\t\t\t\t  \\\n+  r = strncmp(str1,str2,SZ);\t\t\t\t\t\t  \\\n+  if ( r < 0 && !(expect < 0) ) abort();\t\t\t\t  \\\n+  if ( r > 0 && !(expect > 0) )\tabort();\t\t\t\t  \\\n+  if ( r == 0 && !(expect == 0) ) abort();\t\t\t\t  \\\n+}                                                                         \\\n+__attribute__((noinline))\t\t\t\t\t\t  \\\n+void test_memcmp_ ## SZ (const void *p1, const void *p2, int expect)      \\\n+{\t\t\t\t\t\t\t\t\t  \\\n+  int r;\t\t\t\t\t\t\t\t  \\\n+  r = memcmp(p1,p2,SZ);\t\t\t\t\t\t          \\\n+  if ( r < 0 && !(expect < 0) ) abort();\t\t\t\t  \\\n+  if ( r > 0 && !(expect > 0) )\tabort();\t\t\t\t  \\\n+  if ( r == 0 && !(expect == 0) ) abort();\t\t\t\t  \\\n+}\n+\n+DEF_TEST(1)\n+DEF_TEST(2)\n+DEF_TEST(3)\n+DEF_TEST(4)\n+DEF_TEST(5)\n+DEF_TEST(6)\n+DEF_TEST(7)\n+DEF_TEST(8)\n+DEF_TEST(9)\n+DEF_TEST(10)\n+DEF_TEST(11)\n+DEF_TEST(12)\n+DEF_TEST(13)\n+DEF_TEST(14)\n+DEF_TEST(15)\n+DEF_TEST(16)\n+\n+int\n+main(int argc, char **argv)\n+{\n+  RUN_TEST(1) ;\n+  RUN_TEST(2) ;\n+  RUN_TEST(3) ;\n+  RUN_TEST(4) ;\n+  RUN_TEST(5) ;\n+  RUN_TEST(6) ;\n+  RUN_TEST(7) ;\n+  RUN_TEST(8) ;\n+  RUN_TEST(9) ;\n+  RUN_TEST(10);\n+  RUN_TEST(11);\n+  RUN_TEST(12);\n+  RUN_TEST(13);\n+  RUN_TEST(14);\n+  RUN_TEST(15);\n+  RUN_TEST(16);\n+  return 0;\n+}"}]}