{"sha": "facf0354cfdaa555f376311b9d3c8fec79747f09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFjZjAzNTRjZmRhYTU1NWYzNzYzMTFiOWQzYzhmZWM3OTc0N2YwOQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-11-27T13:06:48Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-11-27T13:06:48Z"}, "message": "Support simd function declarations via a pre-include.\n\n2018-11-27  Martin Liska  <mliska@suse.cz>\n\n\t* config/gnu-user.h (TARGET_F951_OPTIONS): New.\n\t* gcc.c (find_fortran_preinclude_file): New function\n\tto handle Fortran pre-include.\n2018-11-27  Martin Liska  <mliska@suse.cz>\n\n\t* decl.c (gfc_match_gcc_builtin): New function.\n\t* gfortran.h (struct vect_builtin_tuple): New.\n\t(gfc_adjust_builtins): Likewise.\n\t* lang-specs.h (TARGET_F951_OPTIONS): New.\n\t(F951_OPTIONS): Use it.\n\t* lang.opt: Add new option -fpre-include.\n\t* match.h (gfc_match_gcc_builtin): Declare new function.\n\t* parse.c (decode_gcc_attribute): Handle builtin.\n\t(parse_progunit): Call gfc_adjust_builtins.\n\t* scanner.c (gfc_new_file): Load pre-included header file\n\twhen provided.\n\t* trans-intrinsic.c (add_simd_flag_for_built_in): New.\n\t(gfc_adjust_builtins): Likewise.\n2018-11-27  Martin Liska  <mliska@suse.cz>\n\n\t* gfortran.dg/simd-builtins-1.f90: New test.\n\t* gfortran.dg/simd-builtins-1.h: New test.\n\t* gfortran.dg/simd-builtins-2.f90: New test.\n\t* gfortran.dg/simd-builtins-3.f90: New test.\n\t* gfortran.dg/simd-builtins-3.h: New test.\n\t* gfortran.dg/simd-builtins-4.f: New test.\n\t* gfortran.dg/simd-builtins-4.h: New test.\n\t* gfortran.dg/simd-builtins-5.f: New test.\n\t* gfortran.dg/simd-builtins-6.f90: New test.\n\nFrom-SVN: r266509", "tree": {"sha": "3ef0c2c2a134b5685f82b8144402a410645d79a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ef0c2c2a134b5685f82b8144402a410645d79a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/facf0354cfdaa555f376311b9d3c8fec79747f09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/facf0354cfdaa555f376311b9d3c8fec79747f09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/facf0354cfdaa555f376311b9d3c8fec79747f09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/facf0354cfdaa555f376311b9d3c8fec79747f09/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ff5ffb623e17b6bb81532394cb1f42fe7b354c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ff5ffb623e17b6bb81532394cb1f42fe7b354c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ff5ffb623e17b6bb81532394cb1f42fe7b354c8"}], "stats": {"total": 306, "additions": 304, "deletions": 2}, "files": [{"sha": "1ecc476d352ed0bbb067b63e2840c5886371dbbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -1,3 +1,9 @@\n+2018-11-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/gnu-user.h (TARGET_F951_OPTIONS): New.\n+\t* gcc.c (find_fortran_preinclude_file): New function\n+\tto handle Fortran pre-include.\n+\n 2018-11-27  Martin Liska  <mliska@suse.cz>\n \n \t* asan.c (asan_emit_stack_protection): Use new enum values"}, {"sha": "3da0c658285c469f53a91bafa8f44c246e87a7d3", "filename": "gcc/config/gnu-user.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Fconfig%2Fgnu-user.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Fconfig%2Fgnu-user.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgnu-user.h?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -148,3 +148,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n   LD_STATIC_OPTION \" --whole-archive -llsan --no-whole-archive \" \\\n   LD_DYNAMIC_OPTION \"}}%{!static-liblsan:-llsan}\"\n #endif\n+\n+#undef TARGET_F951_OPTIONS\n+#define TARGET_F951_OPTIONS \"%{!nostdinc:\\\n+  %:fortran-preinclude-file(-fpre-include= math-vector-fortran.h)}\""}, {"sha": "06e7400eda7dd07fd898b9c4a62a8c3c506df2bd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -1,3 +1,19 @@\n+2018-11-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* decl.c (gfc_match_gcc_builtin): New function.\n+\t* gfortran.h (struct vect_builtin_tuple): New.\n+\t(gfc_adjust_builtins): Likewise.\n+\t* lang-specs.h (TARGET_F951_OPTIONS): New.\n+\t(F951_OPTIONS): Use it.\n+\t* lang.opt: Add new option -fpre-include.\n+\t* match.h (gfc_match_gcc_builtin): Declare new function.\n+\t* parse.c (decode_gcc_attribute): Handle builtin.\n+\t(parse_progunit): Call gfc_adjust_builtins.\n+\t* scanner.c (gfc_new_file): Load pre-included header file\n+\twhen provided.\n+\t* trans-intrinsic.c (add_simd_flag_for_built_in): New.\n+\t(gfc_adjust_builtins): Likewise.\n+\n 2018-11-24  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/88143"}, {"sha": "ac8679886afb65ec88f09a517046c1426da722c7", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -98,6 +98,9 @@ bool gfc_matching_function;\n /* Set upon parsing a !GCC$ unroll n directive for use in the next loop.  */\n int directive_unroll = -1;\n \n+/* Map of middle-end built-ins that should be vectorized.  */\n+hash_map<nofree_string_hash, int> *gfc_vectorized_builtins;\n+\n /* If a kind expression of a component of a parameterized derived type is\n    parameterized, temporarily store the expression here.  */\n static gfc_expr *saved_kind_expr = NULL;\n@@ -11243,3 +11246,41 @@ gfc_match_gcc_unroll (void)\n   gfc_error (\"Syntax error in !GCC$ UNROLL directive at %C\");\n   return MATCH_ERROR;\n }\n+\n+/* Match a !GCC$ builtin (b) attributes simd flags form:\n+\n+   The parameter b is name of a middle-end built-in.\n+   Flags are one of:\n+     - (empty)\n+     - inbranch\n+     - notinbranch\n+\n+   When we come here, we have already matched the !GCC$ builtin string.  */\n+match\n+gfc_match_gcc_builtin (void)\n+{\n+  char builtin[GFC_MAX_SYMBOL_LEN + 1];\n+\n+  if (gfc_match (\" ( %n ) attributes simd\", builtin) != MATCH_YES)\n+    return MATCH_ERROR;\n+\n+  gfc_simd_clause clause = SIMD_NONE;\n+  if (gfc_match (\" ( notinbranch ) \") == MATCH_YES)\n+    clause = SIMD_NOTINBRANCH;\n+  else if (gfc_match (\" ( inbranch ) \") == MATCH_YES)\n+    clause = SIMD_INBRANCH;\n+\n+  if (gfc_vectorized_builtins == NULL)\n+    gfc_vectorized_builtins = new hash_map<nofree_string_hash, int> ();\n+\n+  char *r = XNEWVEC (char, strlen (builtin) + 32);\n+  sprintf (r, \"__builtin_%s\", builtin);\n+\n+  bool existed;\n+  int &value = gfc_vectorized_builtins->get_or_insert (r, &existed);\n+  value |= clause;\n+  if (existed)\n+    free (r);\n+\n+  return MATCH_YES;\n+}"}, {"sha": "4dd6298b3ddb55af80a1f5bffa0c23bb484fd14e", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -2764,6 +2764,27 @@ bool gfc_in_match_data (void);\n match gfc_match_char_spec (gfc_typespec *);\n extern int directive_unroll;\n \n+/* SIMD clause enum.  */\n+enum gfc_simd_clause\n+{\n+  SIMD_NONE = (1 << 0),\n+  SIMD_INBRANCH = (1 << 1),\n+  SIMD_NOTINBRANCH = (1 << 2)\n+};\n+\n+/* Tuple for parsing of vectorized built-ins.  */\n+struct gfc_vect_builtin_tuple\n+{\n+  gfc_vect_builtin_tuple (const char *n, gfc_simd_clause t)\n+    : name (n), simd_type (t) {}\n+\n+  const char *name;\n+  gfc_simd_clause simd_type;\n+};\n+\n+/* Map of middle-end built-ins that should be vectorized.  */\n+extern hash_map<nofree_string_hash, int> *gfc_vectorized_builtins;\n+\n /* Handling Parameterized Derived Types  */\n bool gfc_insert_kind_parameter_exprs (gfc_expr *);\n bool gfc_insert_parameter_exprs (gfc_expr *, gfc_actual_arglist *);\n@@ -3502,5 +3523,6 @@ bool gfc_is_reallocatable_lhs (gfc_expr *);\n /* trans-decl.c */\n \n void finish_oacc_declare (gfc_namespace *, gfc_symbol *, bool);\n+void gfc_adjust_builtins (void);\n \n #endif /* GCC_GFORTRAN_H  */"}, {"sha": "61a9118d531570e38e29da9a9688e83fe11627d5", "filename": "gcc/fortran/lang-specs.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang-specs.h?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -32,9 +32,15 @@\n #define F951_CPP_OPTIONS    \"%{!nocpp: -cpp=%g.f90 %{E} %(cpp_unique_options) \\\n \t\t\t     %{E|M|MM:%(cpp_debug_options) \" CPP_ONLY_OPTIONS \\\n \t\t\t     \" -fsyntax-only};: \" CPP_FORWARD_OPTIONS \"}\"\n+\n+#ifndef TARGET_F951_OPTIONS\n+#define TARGET_F951_OPTIONS\n+#endif\n+\n #define F951_OPTIONS        \"%(cc1_options) %{J*} \\\n-\t\t\t     %{!nostdinc:-fintrinsic-modules-path finclude%s}\\\n-\t\t\t     %{!fsyntax-only:%(invoke_as)}\"\n+\t\t\t     %{!nostdinc:-fintrinsic-modules-path finclude%s}\" \\\n+\t\t\t     TARGET_F951_OPTIONS \\\n+\t\t\t     \"%{!fsyntax-only:%(invoke_as)}\"\n #define F951_SOURCE_FORM    \"%{!ffree-form:-ffixed-form}\"\n \n "}, {"sha": "dc9a94c829c207b1dc0331f9b299b9df94a4068c", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -670,6 +670,10 @@ fprotect-parens\n Fortran Var(flag_protect_parens) Init(-1)\n Protect parentheses in expressions.\n \n+fpre-include=\n+Fortran RejectNegative Joined Var(flag_pre_include) Undocumented\n+Path to header file that should be pre-included before each compilation unit.\n+\n frange-check\n Fortran Var(flag_range_check) Init(1)\n Enable range checking during compilation."}, {"sha": "f25ed860c06e83d25c6557116c8c8a8f85a433e0", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -247,6 +247,7 @@ match gfc_match_dimension (void);\n match gfc_match_external (void);\n match gfc_match_gcc_attributes (void);\n match gfc_match_gcc_unroll (void);\n+match gfc_match_gcc_builtin (void);\n match gfc_match_import (void);\n match gfc_match_intent (void);\n match gfc_match_intrinsic (void);"}, {"sha": "56d0d050bc3b07206177c6bfad4f3c52377e9394", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -1072,6 +1072,7 @@ decode_gcc_attribute (void)\n \n   match (\"attributes\", gfc_match_gcc_attributes, ST_ATTR_DECL);\n   match (\"unroll\", gfc_match_gcc_unroll, ST_NONE);\n+  match (\"builtin\", gfc_match_gcc_builtin, ST_NONE);\n \n   /* All else has failed, so give up.  See if any of the matchers has\n      stored an error message of some sort.  */\n@@ -5663,6 +5664,8 @@ parse_progunit (gfc_statement st)\n   gfc_state_data *p;\n   int n;\n \n+  gfc_adjust_builtins ();\n+\n   if (gfc_new_block\n       && gfc_new_block->abr_modproc_decl\n       && gfc_new_block->attr.function)"}, {"sha": "a79689a266b8104403347233a4cc497e1130e853", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -2677,6 +2677,10 @@ gfc_new_file (void)\n {\n   bool result;\n \n+  if (flag_pre_include != NULL\n+      && !load_file (flag_pre_include, NULL, false))\n+    exit (FATAL_EXIT_CODE);\n+\n   if (gfc_cpp_enabled ())\n     {\n       result = gfc_cpp_preprocess (gfc_source_file);"}, {"sha": "40a74916bb835727d4fae7f204e3c476c396a043", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -597,7 +597,77 @@ define_quad_builtin (const char *name, tree type, bool is_const)\n   return fndecl;\n }\n \n+/* Add SIMD attribute for FNDECL built-in if the built-in\n+   name is in VECTORIZED_BUILTINS.  */\n \n+static void\n+add_simd_flag_for_built_in (tree fndecl)\n+{\n+  if (gfc_vectorized_builtins == NULL\n+      || fndecl == NULL_TREE)\n+    return;\n+\n+  const char *name = IDENTIFIER_POINTER (DECL_NAME (fndecl));\n+  int *clauses = gfc_vectorized_builtins->get (name);\n+  if (clauses)\n+    {\n+      for (unsigned i = 0; i < 3; i++)\n+\tif (*clauses & (1 << i))\n+\t  {\n+\t    gfc_simd_clause simd_type = (gfc_simd_clause)*clauses;\n+\t    tree omp_clause = NULL_TREE;\n+\t    if (simd_type == SIMD_NONE)\n+\t      ; /* No SIMD clause.  */\n+\t    else\n+\t      {\n+\t\tomp_clause_code code\n+\t\t  = (simd_type == SIMD_INBRANCH\n+\t\t     ? OMP_CLAUSE_INBRANCH : OMP_CLAUSE_NOTINBRANCH);\n+\t\tomp_clause = build_omp_clause (UNKNOWN_LOCATION, code);\n+\t\tomp_clause = build_tree_list (NULL_TREE, omp_clause);\n+\t      }\n+\n+\t    DECL_ATTRIBUTES (fndecl)\n+\t      = tree_cons (get_identifier (\"omp declare simd\"), omp_clause,\n+\t\t\t   DECL_ATTRIBUTES (fndecl));\n+\t  }\n+    }\n+}\n+\n+  /* Set SIMD attribute to all built-in functions that are mentioned\n+     in gfc_vectorized_builtins vector.  */\n+\n+void\n+gfc_adjust_builtins (void)\n+{\n+  gfc_intrinsic_map_t *m;\n+  for (m = gfc_intrinsic_map;\n+       m->id != GFC_ISYM_NONE || m->double_built_in != END_BUILTINS; m++)\n+    {\n+      add_simd_flag_for_built_in (m->real4_decl);\n+      add_simd_flag_for_built_in (m->complex4_decl);\n+      add_simd_flag_for_built_in (m->real8_decl);\n+      add_simd_flag_for_built_in (m->complex8_decl);\n+      add_simd_flag_for_built_in (m->real10_decl);\n+      add_simd_flag_for_built_in (m->complex10_decl);\n+      add_simd_flag_for_built_in (m->real16_decl);\n+      add_simd_flag_for_built_in (m->complex16_decl);\n+      add_simd_flag_for_built_in (m->real16_decl);\n+      add_simd_flag_for_built_in (m->complex16_decl);\n+    }\n+\n+  /* Release all strings.  */\n+  if (gfc_vectorized_builtins != NULL)\n+    {\n+      for (hash_map<nofree_string_hash, int>::iterator it\n+\t   = gfc_vectorized_builtins->begin ();\n+\t   it != gfc_vectorized_builtins->end (); ++it)\n+\tfree (CONST_CAST (char *, (*it).first));\n+\n+      delete gfc_vectorized_builtins;\n+      gfc_vectorized_builtins = NULL;\n+    }\n+}\n \n /* Initialize function decls for library functions.  The external functions\n    are created as required.  Builtin functions are added here.  */"}, {"sha": "955a08cc8e8bd3fa624fefb965a0e1f579eeeff3", "filename": "gcc/gcc.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -408,6 +408,7 @@ static const char *pass_through_libs_spec_func (int, const char **);\n static const char *replace_extension_spec_func (int, const char **);\n static const char *greater_than_spec_func (int, const char **);\n static const char *debug_level_greater_than_spec_func (int, const char **);\n+static const char *find_fortran_preinclude_file (int, const char **);\n static char *convert_white_space (char *);\n \f\n /* The Specs Language\n@@ -1647,6 +1648,7 @@ static const struct spec_function static_spec_functions[] =\n   { \"replace-extension\",\treplace_extension_spec_func },\n   { \"gt\",\t\t\tgreater_than_spec_func },\n   { \"debug-level-gt\",\t\tdebug_level_greater_than_spec_func },\n+  { \"fortran-preinclude-file\",\tfind_fortran_preinclude_file},\n #ifdef EXTRA_SPEC_FUNCTIONS\n   EXTRA_SPEC_FUNCTIONS\n #endif\n@@ -9894,6 +9896,23 @@ debug_level_greater_than_spec_func (int argc, const char **argv)\n   return NULL;\n }\n \n+/* The function takes 2 arguments: OPTION name and file name.\n+   When the FILE is found by find_file, return OPTION=path_to_file.  */\n+\n+static const char *\n+find_fortran_preinclude_file (int argc, const char **argv)\n+{\n+  if (argc != 2)\n+    return NULL;\n+\n+  const char *path = find_a_file (&include_prefixes, argv[1], R_OK, true);\n+  if (path != NULL)\n+    return concat (argv[0], path, NULL);\n+\n+  return NULL;\n+}\n+\n+\n /* Insert backslash before spaces in ORIG (usually a file path), to \n    avoid being broken by spec parser.\n "}, {"sha": "e6bc1f8ce21785927de86e413c31f16bf17c4285", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -1,3 +1,15 @@\n+2018-11-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* gfortran.dg/simd-builtins-1.f90: New test.\n+\t* gfortran.dg/simd-builtins-1.h: New test.\n+\t* gfortran.dg/simd-builtins-2.f90: New test.\n+\t* gfortran.dg/simd-builtins-3.f90: New test.\n+\t* gfortran.dg/simd-builtins-3.h: New test.\n+\t* gfortran.dg/simd-builtins-4.f: New test.\n+\t* gfortran.dg/simd-builtins-4.h: New test.\n+\t* gfortran.dg/simd-builtins-5.f: New test.\n+\t* gfortran.dg/simd-builtins-6.f90: New test.\n+\n 2018-11-27  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* lib/target-supports.exp"}, {"sha": "e5ee380943f65fbff17b9779586b2e463581005d", "filename": "gcc/testsuite/gfortran.dg/simd-builtins-1.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-1.f90?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile { target { i?86-*-linux* x86_64-*-linux* } } }\n+! { dg-additional-options \"-msse2 -nostdinc -Ofast -fpre-include=simd-builtins-1.h -fdump-tree-optimized\" }\n+\n+program test_overloaded_intrinsic\n+  real(4) :: x4(3200), y4(3200)\n+  real(8) :: x8(3200), y8(3200)\n+\n+  ! this should be using simd clone\n+  y4 = sin(x4)\n+  print *, y4\n+\n+  ! this should not be using simd clone\n+  y4 = sin(x8)\n+  print *, y8\n+end\n+\n+! { dg-final { scan-tree-dump \"sinf.simdclone\" \"optimized\" } } */\n+! { dg-final { scan-tree-dump \"__builtin_sin\" \"optimized\" } } */\n+! { dg-final { scan-assembler \"call.*_ZGVbN4v_sinf\" } }"}, {"sha": "88d555cf41ad065ea525a63d7c05d15d3e5b54ed", "filename": "gcc/testsuite/gfortran.dg/simd-builtins-1.h", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-1.h?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -0,0 +1,4 @@\n+!GCC$ builtin (sin) attributes simd (inbranch)\n+!GCC$ builtin (sinf) attributes simd (notinbranch)\n+!GCC$ builtin (cosf) attributes simd\n+!GCC$ builtin (cosf) attributes simd (notinbranch)"}, {"sha": "f0e6bc138628cb587ee92f62214e48667db3538c", "filename": "gcc/testsuite/gfortran.dg/simd-builtins-2.f90", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-2.f90?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -0,0 +1,20 @@\n+! { dg-do compile { target { i?86-*-linux* x86_64-*-linux* } } }\n+! { dg-additional-options \"-msse2 -nostdinc -Ofast -fdump-tree-optimized\" }\n+\n+program test_overloaded_intrinsic\n+  real(4) :: x4(3200), y4(3200)\n+  real(8) :: x8(3200), y8(3200)\n+\n+  ! this should be using simd clone\n+  y4 = sin(x4)\n+  print *, y4\n+\n+  ! this should not be using simd clone\n+  y4 = sin(x8)\n+  print *, y8\n+end\n+\n+! { dg-final { scan-tree-dump \"__builtin_sinf\" \"optimized\" } } */\n+! { dg-final { scan-tree-dump \"__builtin_sin\" \"optimized\" } } */\n+! { dg-final { scan-tree-dump-not \"simdclone\" \"optimized\" } } */\n+! { dg-final { scan-assembler-not \"call.*_ZGVbN4v_sinf\" } }"}, {"sha": "949209bcf604efdd5d48d8b180438c917de342e1", "filename": "gcc/testsuite/gfortran.dg/simd-builtins-3.f90", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-3.f90?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -0,0 +1 @@\n+! { dg-additional-options \"-nostdinc -fpre-include=simd-builtins-3.h\" }"}, {"sha": "9707ef0a628cb765b14094fb79e31c9958e2ee9d", "filename": "gcc/testsuite/gfortran.dg/simd-builtins-3.h", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-3.h?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -0,0 +1,8 @@\n+!GCC$ builtin (sin) attributes simd (inbranch)\n+!GCC$  builtin ( sin) attributes simd (inbranch)\n+!GCC$ builtin (sin  ) attributes simd (inbranch)\n+!GCC$ builtin (sin) attributes simd ( inbranch)\n+!GCC$ builtin (sin) attributes simd (inbranch )\n+!GCC$ builtin(sin  )   attributes   simd ( inbranch )\n+!GCC$ builtin  (    sin  )   attributes   simd (   inbranch )\n+!GCC$ builtin  (    sin  )   attributes   simd"}, {"sha": "48947b6f951c43ed2225e4f522a556dfabb8a3c9", "filename": "gcc/testsuite/gfortran.dg/simd-builtins-4.f", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-4.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-4.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-4.f?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -0,0 +1 @@\n+! { dg-additional-options \"-nostdinc -fpre-include=simd-builtins-4.h\" }"}, {"sha": "9707ef0a628cb765b14094fb79e31c9958e2ee9d", "filename": "gcc/testsuite/gfortran.dg/simd-builtins-4.h", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-4.h?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -0,0 +1,8 @@\n+!GCC$ builtin (sin) attributes simd (inbranch)\n+!GCC$  builtin ( sin) attributes simd (inbranch)\n+!GCC$ builtin (sin  ) attributes simd (inbranch)\n+!GCC$ builtin (sin) attributes simd ( inbranch)\n+!GCC$ builtin (sin) attributes simd (inbranch )\n+!GCC$ builtin(sin  )   attributes   simd ( inbranch )\n+!GCC$ builtin  (    sin  )   attributes   simd (   inbranch )\n+!GCC$ builtin  (    sin  )   attributes   simd"}, {"sha": "55330a8306dabac401781b3410ed4be9be538490", "filename": "gcc/testsuite/gfortran.dg/simd-builtins-5.f", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-5.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-5.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-5.f?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+\n+!GCC$ buil tin (s in) attributes simd (inbranch)\n+!GCC$ builtin (sinf) at tributes simd (notinbranch)\n+!GCC$ builtin (cosf) att r i    bu  tes s  imd\n+!GCC$ buil ti n (   cosf) attrib utes simd (noti   nbranch)\n+\n+      PROGRAM Z\n+      END"}, {"sha": "5ff99212cf1c03b1c78c0f794d26a3ee2e4c81fd", "filename": "gcc/testsuite/gfortran.dg/simd-builtins-6.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facf0354cfdaa555f376311b9d3c8fec79747f09/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-6.f90?ref=facf0354cfdaa555f376311b9d3c8fec79747f09", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile { target { i?86-*-linux* x86_64-*-linux* } } }\n+! { dg-additional-options \"-msse2 -nostdinc -Ofast -fdump-tree-optimized\" }\n+\n+!GCC$ builtin (sin) attributes simd (inbranch)\n+!GCC$ builtin (sinf) attributes simd (notinbranch)\n+!GCC$ builtin (cosf) attributes simd\n+!GCC$ builtin (cosf) attributes simd (notinbranch)\n+\n+program test_overloaded_intrinsic\n+  real(4) :: x4(3200), y4(3200)\n+  real(8) :: x8(3200), y8(3200)\n+\n+  ! this should be using simd clone\n+  y4 = sin(x4)\n+  print *, y4\n+\n+  ! this should not be using simd clone\n+  y4 = sin(x8)\n+  print *, y8\n+end\n+\n+! { dg-final { scan-tree-dump \"sinf.simdclone\" \"optimized\" } } */\n+! { dg-final { scan-tree-dump \"__builtin_sin\" \"optimized\" } } */\n+! { dg-final { scan-assembler \"call.*_ZGVbN4v_sinf\" } }"}]}