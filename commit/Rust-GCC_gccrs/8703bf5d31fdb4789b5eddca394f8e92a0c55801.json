{"sha": "8703bf5d31fdb4789b5eddca394f8e92a0c55801", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcwM2JmNWQzMWZkYjQ3ODliNWVkZGNhMzk0ZjhlOTJhMGM1NTgwMQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-04T09:09:57Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-11T13:12:43Z"}, "message": "Darwin, Objective-C : Adjust objective-c symbol linkage with version.\n\nEarlier linkers cannot handle publicly-visible (or linker-visible)\nmetadata, so we need to make the output of these conditional on version.\n\ngcc/ChangeLog:\n\n\t* config/darwin.c (darwin_globalize_label): Make a subset of\n\tmetadate symbols global.\n\t(darwin_label_is_anonymous_local_objc_name): Make a subset of\n\tmetadata symbols linker-visible.\n\t(darwin_override_options): Track more target OS versions, make\n\tthe next_runtime version track this (unless it's set to 0 for\n\tGNU runtime).\n\ngcc/objc/ChangeLog:\n\n\t* objc-next-runtime-abi-02.c (FIXUP_NEEDED): Rename ...\n\t(USE_FIXUP_BEFORE): ... to this.\n\t(next_runtime_02_initialize): Likewise.\n\t(next_runtime_abi_02_get_arg_type_list_base): Likewise.\n\t(next_runtime_abi_02_build_objc_method_call): Likewise.", "tree": {"sha": "4fec2c5edd9df135d4fba4864a70877d6d7c345a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fec2c5edd9df135d4fba4864a70877d6d7c345a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8703bf5d31fdb4789b5eddca394f8e92a0c55801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8703bf5d31fdb4789b5eddca394f8e92a0c55801", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8703bf5d31fdb4789b5eddca394f8e92a0c55801", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8703bf5d31fdb4789b5eddca394f8e92a0c55801/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "336fdc8ba88cf617d76d1764df033cbf972904dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336fdc8ba88cf617d76d1764df033cbf972904dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/336fdc8ba88cf617d76d1764df033cbf972904dd"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "dd4857f9e34d83f98aceef82478748b7d25deabd", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8703bf5d31fdb4789b5eddca394f8e92a0c55801/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8703bf5d31fdb4789b5eddca394f8e92a0c55801/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=8703bf5d31fdb4789b5eddca394f8e92a0c55801", "patch": "@@ -1876,7 +1876,10 @@ darwin_globalize_label (FILE *stream, const char *name)\n {\n   if (!!strncmp (name, \"_OBJC_\", 6))\n     default_globalize_label (stream, name);\n-  /* We have some Objective C cases that need to be global.  */\n+  /* We have some Objective C cases that need to be global, but only on newer\n+     OS versions.  */\n+  if (flag_objc_abi < 2 || flag_next_runtime < 100700)\n+    return;\n   if (!strncmp (name+6, \"LabelPro\", 8))\n     default_globalize_label (stream, name);\n   if (!strncmp (name+6, \"Protocol_\", 9))\n@@ -1901,8 +1904,14 @@ darwin_label_is_anonymous_local_objc_name (const char *name)\n   }\n   if (strncmp ((const char *)p, \"_OBJC_\", 6) != 0)\n     return false;\n+\n   /* We need some of the objective c meta-data symbols to be visible to the\n-     linker.  FIXME: this is horrible, we need a better mechanism.  */\n+     linker (when the target OS version is newer).  FIXME: this is horrible,\n+     we need a better mechanism.  */\n+\n+  if (flag_objc_abi < 2 || flag_next_runtime < 100700)\n+    return true;\n+\n   p += 6;\n   if (!strncmp ((const char *)p, \"ClassRef\", 8))\n     return false;\n@@ -3183,10 +3192,14 @@ darwin_override_options (void)\n   /* Keep track of which (major) version we're generating code for.  */\n   if (darwin_macosx_version_min)\n     {\n-      if (strverscmp (darwin_macosx_version_min, \"10.6\") >= 0)\n+      if (strverscmp (darwin_macosx_version_min, \"10.7\") >= 0)\n+\tgenerating_for_darwin_version = 11;\n+      else if (strverscmp (darwin_macosx_version_min, \"10.6\") >= 0)\n \tgenerating_for_darwin_version = 10;\n       else if (strverscmp (darwin_macosx_version_min, \"10.5\") >= 0)\n \tgenerating_for_darwin_version = 9;\n+      else if (strverscmp (darwin_macosx_version_min, \"10.4\") >= 0)\n+\tgenerating_for_darwin_version = 8;\n \n       /* Earlier versions are not specifically accounted, until required.  */\n     }\n@@ -3202,6 +3215,20 @@ darwin_override_options (void)\n      should check for correctness re. the ABI.  TODO: check and provide the\n      flags (runtime & ABI) from the lto wrapper).  */\n \n+  /* At present, make a hard update to the runtime version based on the target\n+     OS version.  */\n+  if (flag_next_runtime)\n+    {\n+      if (generating_for_darwin_version > 10)\n+\tflag_next_runtime = 100705;\n+      else if (generating_for_darwin_version > 9)\n+\tflag_next_runtime = 100608;\n+      else if (generating_for_darwin_version > 8)\n+\tflag_next_runtime = 100508;\n+      else\n+\tflag_next_runtime = 100000;\n+    }\n+\n   /* Unless set, force ABI=2 for NeXT and m64, 0 otherwise.  */\n   if (!global_options_set.x_flag_objc_abi)\n     global_options.x_flag_objc_abi"}, {"sha": "60bf86ab8c9e8460828097f3210abb46de63a361", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8703bf5d31fdb4789b5eddca394f8e92a0c55801/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8703bf5d31fdb4789b5eddca394f8e92a0c55801/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=8703bf5d31fdb4789b5eddca394f8e92a0c55801", "patch": "@@ -69,7 +69,7 @@ along with GCC; see the file COPYING3.  If not see\n #define TAG_MSGSENDID_STRET\t\"objc_msgSendId_stret\"\n #define TAG_MSGSENDSUPER_STRET\t\"objc_msgSendSuper2_stret\"\n \n-#define FIXUP_NEEDED\t\t100600\n+#define USE_FIXUP_BEFORE\t100600\n #define TAG_FIXUP\t\t\"_fixup\"\n \n \n@@ -392,7 +392,7 @@ static void next_runtime_02_initialize (void)\n   build_v2_protocol_template ();\n   build_v2_category_template ();\n \n-  bool fixup_p = flag_next_runtime < FIXUP_NEEDED;\n+  bool fixup_p = flag_next_runtime < USE_FIXUP_BEFORE;\n   if (fixup_p)\n     {\n       /* id objc_msgSend_fixup_rtp (id, struct message_ref_t*, ...); */\n@@ -1151,7 +1151,7 @@ next_runtime_abi_02_get_arg_type_list_base (vec<tree, va_gc> **argtypes,\n     receiver_type = objc_object_type;\n \n   vec_safe_push (*argtypes, receiver_type);\n-  if (flag_next_runtime < FIXUP_NEEDED)\n+  if (flag_next_runtime < USE_FIXUP_BEFORE)\n     /* Selector type - will eventually change to `int'.  */\n     vec_safe_push (*argtypes, superflag ? objc_v2_super_selector_type\n \t\t\t\t\t: objc_v2_selector_type);\n@@ -1821,7 +1821,7 @@ next_runtime_abi_02_build_objc_method_call (location_t loc,\n \t  && TREE_TYPE (receiver) == objc_class_type))\n     check_for_nil = false;\n \n-  if (flag_next_runtime >= FIXUP_NEEDED)\n+  if (flag_next_runtime >= USE_FIXUP_BEFORE)\n     {\n       tree selector\n \t= next_runtime_abi_02_build_selector_reference (loc, sel_name,"}]}