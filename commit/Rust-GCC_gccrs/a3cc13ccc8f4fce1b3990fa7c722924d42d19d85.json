{"sha": "a3cc13ccc8f4fce1b3990fa7c722924d42d19d85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNjYzEzY2NjOGY0ZmNlMWIzOTkwZmE3YzcyMjkyNGQ0MmQxOWQ4NQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-09-20T17:49:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-09-20T17:49:45Z"}, "message": "re PR middle-end/58484 (ICE in chrec_fold_plus_1, at tree-chrec.c:272 building 416.gamess)\n\n2013-09-20  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/58484\n\t* tree-scalar-evolution.c (struct scev_info_str): Shrink by\n\tremembering SSA name version and block index.\n\t(new_scev_info_str): Adjust.\n\t(hash_scev_info): Likewise.  Also hash the block index.\n\t(eq_scev_info): Adjust.\n\t(find_var_scev_info): Likewise.\n\t(struct instantiate_cache_entry): Remove.\n\t(struct instantiate_cache_type): Use a htab to map name, block\n\tto chrec.\n\t(instantiate_cache_type::~instantiate_cache_type): Adjust.\n\t(get_instantiated_value_entry): Likewise.\n\t(hash_idx_scev_info, eq_idx_scev_info): New functions.\n\t(instantiate_scev_name): Adjust.\n\n\t* gfortran.dg/pr58484.f: New testcase.\n\nFrom-SVN: r202790", "tree": {"sha": "c54ad3c3f957c8c89ffe6012a594fc159e3e1196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c54ad3c3f957c8c89ffe6012a594fc159e3e1196"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3cc13ccc8f4fce1b3990fa7c722924d42d19d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3cc13ccc8f4fce1b3990fa7c722924d42d19d85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3cc13ccc8f4fce1b3990fa7c722924d42d19d85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3cc13ccc8f4fce1b3990fa7c722924d42d19d85/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "925f3871dba29771277bd1c5f8371d28f4156e6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/925f3871dba29771277bd1c5f8371d28f4156e6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/925f3871dba29771277bd1c5f8371d28f4156e6d"}], "stats": {"total": 123, "additions": 88, "deletions": 35}, "files": [{"sha": "31f26b191dee4c86a75a7414f6725df5488337f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3cc13ccc8f4fce1b3990fa7c722924d42d19d85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3cc13ccc8f4fce1b3990fa7c722924d42d19d85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3cc13ccc8f4fce1b3990fa7c722924d42d19d85", "patch": "@@ -1,3 +1,20 @@\n+2013-09-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/58484\n+\t* tree-scalar-evolution.c (struct scev_info_str): Shrink by\n+\tremembering SSA name version and block index.\n+\t(new_scev_info_str): Adjust.\n+\t(hash_scev_info): Likewise.  Also hash the block index.\n+\t(eq_scev_info): Adjust.\n+\t(find_var_scev_info): Likewise.\n+\t(struct instantiate_cache_entry): Remove.\n+\t(struct instantiate_cache_type): Use a htab to map name, block\n+\tto chrec.\n+\t(instantiate_cache_type::~instantiate_cache_type): Adjust.\n+\t(get_instantiated_value_entry): Likewise.\n+\t(hash_idx_scev_info, eq_idx_scev_info): New functions.\n+\t(instantiate_scev_name): Adjust.\n+\n 2013-09-20  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dom.c (record_temporary_equivalences): Add comment."}, {"sha": "e7acce4d80543d697b5069983ab2b897e0beb7b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3cc13ccc8f4fce1b3990fa7c722924d42d19d85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3cc13ccc8f4fce1b3990fa7c722924d42d19d85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3cc13ccc8f4fce1b3990fa7c722924d42d19d85", "patch": "@@ -1,3 +1,8 @@\n+2013-09-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/58484\n+\t* gfortran.dg/pr58484.f: New testcase.\n+\n 2013-09-20  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/ssa-dom-thread-3.c: Add missing dg-final clause."}, {"sha": "2fd791347e9b9b389e5d3db0cfb9634d3d9281c3", "filename": "gcc/testsuite/gfortran.dg/pr58484.f", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3cc13ccc8f4fce1b3990fa7c722924d42d19d85/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr58484.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3cc13ccc8f4fce1b3990fa7c722924d42d19d85/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr58484.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr58484.f?ref=a3cc13ccc8f4fce1b3990fa7c722924d42d19d85", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-options \"-O2\" }\n+      SUBROUTINE UMPSE(AIBJ,NOC,NDIM,NOCA,NVIRA,NOCCA,E2)\n+      DIMENSION AIBJ(NOC,NDIM,*)\n+      DO 20 MA=1,NVIRA\n+      DO 20 MI=1,NOCA\n+         DO 10 MB=1,MA\n+         MBI = MI+NOCA*(MB-1)\n+         DO 10 MJ=1,NOCCA\n+            DUM = AIBJ(MJ,MAI,MB)-AIBJ(MJ,MBI,MA)\n+            E2A = E2A-DUM\n+   10    CONTINUE\n+   20 CONTINUE\n+      E2  = E2+E2A\n+      END"}, {"sha": "bda45a6f63bbcbc70ce9240a3067df02a071f465", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 51, "deletions": 35, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3cc13ccc8f4fce1b3990fa7c722924d42d19d85/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3cc13ccc8f4fce1b3990fa7c722924d42d19d85/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=a3cc13ccc8f4fce1b3990fa7c722924d42d19d85", "patch": "@@ -269,13 +269,13 @@ static tree analyze_scalar_evolution_1 (struct loop *, tree, tree);\n static tree analyze_scalar_evolution_for_address_of (struct loop *loop,\n \t\t\t\t\t\t     tree var);\n \n-/* The cached information about an SSA name VAR, claiming that below\n-   basic block INSTANTIATED_BELOW, the value of VAR can be expressed\n-   as CHREC.  */\n+/* The cached information about an SSA name with version NAME_VERSION,\n+   claiming that below basic block with index INSTANTIATED_BELOW, the\n+   value of the SSA name can be expressed as CHREC.  */\n \n struct GTY(()) scev_info_str {\n-  basic_block instantiated_below;\n-  tree var;\n+  unsigned int name_version;\n+  int instantiated_below;\n   tree chrec;\n };\n \n@@ -309,19 +309,20 @@ new_scev_info_str (basic_block instantiated_below, tree var)\n   struct scev_info_str *res;\n \n   res = ggc_alloc_scev_info_str ();\n-  res->var = var;\n+  res->name_version = SSA_NAME_VERSION (var);\n   res->chrec = chrec_not_analyzed_yet;\n-  res->instantiated_below = instantiated_below;\n+  res->instantiated_below = instantiated_below->index;\n \n   return res;\n }\n \n /* Computes a hash function for database element ELT.  */\n \n static inline hashval_t\n-hash_scev_info (const void *elt)\n+hash_scev_info (const void *elt_)\n {\n-  return SSA_NAME_VERSION (((const struct scev_info_str *) elt)->var);\n+  const struct scev_info_str *elt = (const struct scev_info_str *) elt_;\n+  return elt->name_version ^ elt->instantiated_below;\n }\n \n /* Compares database elements E1 and E2.  */\n@@ -332,7 +333,7 @@ eq_scev_info (const void *e1, const void *e2)\n   const struct scev_info_str *elt1 = (const struct scev_info_str *) e1;\n   const struct scev_info_str *elt2 = (const struct scev_info_str *) e2;\n \n-  return (elt1->var == elt2->var\n+  return (elt1->name_version == elt2->name_version\n \t  && elt1->instantiated_below == elt2->instantiated_below);\n }\n \n@@ -355,8 +356,8 @@ find_var_scev_info (basic_block instantiated_below, tree var)\n   struct scev_info_str tmp;\n   PTR *slot;\n \n-  tmp.var = var;\n-  tmp.instantiated_below = instantiated_below;\n+  tmp.name_version = SSA_NAME_VERSION (var);\n+  tmp.instantiated_below = instantiated_below->index;\n   slot = htab_find_slot (scalar_evolution_info, &tmp, INSERT);\n \n   if (!*slot)\n@@ -2065,16 +2066,10 @@ analyze_scalar_evolution_in_loop (struct loop *wrto_loop, struct loop *use_loop,\n    instantiating a CHREC or resolving mixers.  For this use\n    instantiated_below is always the same.  */\n \n-struct instantiate_cache_entry\n-{\n-  tree name;\n-  tree chrec;\n-};\n-\n struct instantiate_cache_type\n {\n-  pointer_map<unsigned> *map;\n-  vec<instantiate_cache_entry> entries;\n+  htab_t map;\n+  vec<scev_info_str> entries;\n \n   instantiate_cache_type () : map (NULL), entries(vNULL) {}\n   ~instantiate_cache_type ();\n@@ -2086,40 +2081,60 @@ instantiate_cache_type::~instantiate_cache_type ()\n {\n   if (map != NULL)\n     {\n-      delete map;\n+      htab_delete (map);\n       entries.release ();\n     }\n }\n \n+/* Cache to avoid infinite recursion when instantiating an SSA name.\n+   Live during the outermost instantiate_scev or resolve_mixers call.  */\n+static instantiate_cache_type *global_cache;\n+\n+/* Computes a hash function for database element ELT.  */\n+\n+static inline hashval_t\n+hash_idx_scev_info (const void *elt_)\n+{\n+  unsigned idx = ((size_t) elt_) - 2;\n+  return hash_scev_info (&global_cache->entries[idx]);\n+}\n+\n+/* Compares database elements E1 and E2.  */\n+\n+static inline int\n+eq_idx_scev_info (const void *e1, const void *e2)\n+{\n+  unsigned idx1 = ((size_t) e1) - 2;\n+  return eq_scev_info (&global_cache->entries[idx1], e2);\n+}\n+\n /* Returns from CACHE the slot number of the cached chrec for NAME.  */\n \n static unsigned\n-get_instantiated_value_entry (instantiate_cache_type &cache, tree name)\n+get_instantiated_value_entry (instantiate_cache_type &cache,\n+\t\t\t      tree name, basic_block instantiate_below)\n {\n   if (!cache.map)\n     {\n-      cache.map = new pointer_map<unsigned>;\n+      cache.map = htab_create (10, hash_idx_scev_info, eq_idx_scev_info, NULL);\n       cache.entries.create (10);\n     }\n \n-  bool existed_p;\n-  unsigned *slot = cache.map->insert (name, &existed_p);\n-  if (!existed_p)\n+  scev_info_str e;\n+  e.name_version = SSA_NAME_VERSION (name);\n+  e.instantiated_below = instantiate_below->index;\n+  void **slot = htab_find_slot_with_hash (cache.map, &e,\n+\t\t\t\t\t  hash_scev_info (&e), INSERT);\n+  if (!*slot)\n     {\n-      struct instantiate_cache_entry e;\n-      e.name = name;\n       e.chrec = chrec_not_analyzed_yet;\n-      *slot = cache.entries.length ();\n+      *slot = (void *)(size_t)(cache.entries.length () + 2);\n       cache.entries.safe_push (e);\n     }\n \n-  return *slot;\n+  return ((size_t)*slot) - 2;\n }\n \n-/* Cache to avoid infinite recursion when instantiating an SSA name.\n-   Live during the outermost instantiate_scev or resolve_mixers call.  */\n-static instantiate_cache_type *global_cache;\n-\n \n /* Return the closed_loop_phi node for VAR.  If there is none, return\n    NULL_TREE.  */\n@@ -2195,7 +2210,8 @@ instantiate_scev_name (basic_block instantiate_below,\n \n      | a_2 -> {0, +, 1, +, a_2}_1  */\n \n-  unsigned si = get_instantiated_value_entry (*global_cache, chrec);\n+  unsigned si = get_instantiated_value_entry (*global_cache,\n+\t\t\t\t\t      chrec, instantiate_below);\n   if (global_cache->get (si) != chrec_not_analyzed_yet)\n     return global_cache->get (si);\n "}]}