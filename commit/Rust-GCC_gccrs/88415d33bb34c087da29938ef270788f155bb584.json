{"sha": "88415d33bb34c087da29938ef270788f155bb584", "node_id": "C_kwDOANBUbNoAKDg4NDE1ZDMzYmIzNGMwODdkYTI5OTM4ZWYyNzA3ODhmMTU1YmI1ODQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-23T15:39:33Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-12-13T13:00:07Z"}, "message": "gccrs: Add GCC Rust front-end Make-lang.in\n\nThis is the Makefile for our front-end.\n\n\tgcc/rust/\n\t* Make-lang.in: New.", "tree": {"sha": "6cf63d8350b74b1b589b962c7b7f3eff3ebe8420", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cf63d8350b74b1b589b962c7b7f3eff3ebe8420"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88415d33bb34c087da29938ef270788f155bb584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88415d33bb34c087da29938ef270788f155bb584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88415d33bb34c087da29938ef270788f155bb584", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88415d33bb34c087da29938ef270788f155bb584/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e7d199739f245eaceed1e74ffd48429e2401c86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e7d199739f245eaceed1e74ffd48429e2401c86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e7d199739f245eaceed1e74ffd48429e2401c86"}], "stats": {"total": 402, "additions": 402, "deletions": 0}, "files": [{"sha": "f3a03a3199def3141a8ede988386c239e93224b7", "filename": "gcc/rust/Make-lang.in", "status": "added", "additions": 402, "deletions": 0, "changes": 402, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88415d33bb34c087da29938ef270788f155bb584/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88415d33bb34c087da29938ef270788f155bb584/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=88415d33bb34c087da29938ef270788f155bb584", "patch": "@@ -0,0 +1,402 @@\n+# Make-lang.in -- Top level -*- makefile -*- fragment for GCC Rust frontend.\n+\n+# Copyright (C) 2009-2022 Free Software Foundation, Inc.\n+\n+# This file is part of GCC.\n+\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\tSee the\n+# GNU General Public License for more details.\n+\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# This file provides the language dependent support in the main Makefile.\n+\n+#RUST_EXES = rust\n+\n+# Use strict warnings for this front end.\n+rust-warn = $(STRICT_WARN)\n+# ..., with the exception of '-Wunused-parameter'; waiting for\n+# <https://github.com/Rust-GCC/gccrs/issues/1626> \"bootstrap build failure\".\n+rust-warn += -Wno-unused-parameter\n+\n+# Installation name. Useful for cross compilers and used during install.\n+GCCRS_INSTALL_NAME := $(shell echo gccrs|sed '$(program_transform_name)')\n+GCCRS_TARGET_INSTALL_NAME := $(target_noncanonical)-$(shell echo gccrs|sed '$(program_transform_name)')\n+\n+# Define the names for selecting rust in LANGUAGES.\n+rust: rust1$(exeext)\n+\n+# Tell GNU make to ignore files by these names if they exist.\n+.PHONY: rust\n+\n+# removed GRS_CFLAGS from here\n+\n+CFLAGS-rust/rustspec.o += $(DRIVER_DEFINES)\n+\n+# Create the compiler driver gccrs.\n+# A compiler driver is the program that interprets command argument and can be called from the command\n+# line - e.g. gcc or g++, and not cc1, which is the actual compiler\n+\n+# Create driver objects\n+GCCRS_D_OBJS = \\\n+   $(GCC_OBJS) \\\n+   rust/rustspec.o \\\n+   $(END)\n+\n+gccrs$(exeext): $(GCCRS_D_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a $(LIBDEPS)\n+\t+$(LINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n+\t  $(GCCRS_D_OBJS) $(EXTRA_GCC_OBJS) libcommon-target.a \\\n+\t  $(EXTRA_GCC_LIBS) $(LIBS)\n+\n+# List of host object files used by the rust language - files for translation from the parse tree\n+# to GENERIC\n+# The compiler proper, not driver\n+GRS_OBJS = \\\n+    rust/rust-lang.o \\\n+    rust/rust-object-export.o \\\n+    rust/rust-linemap.o \\\n+    rust/rust-gcc-diagnostics.o \\\n+    rust/rust-diagnostics.o \\\n+    rust/rust-gcc.o \\\n+    rust/rust-token.o \\\n+    rust/rust-lex.o \\\n+    rust/rust-cfg-parser.o \\\n+    rust/rust-parse.o \\\n+    rust/rust-ast-full-test.o \\\n+    rust/rust-ast-dump.o \\\n+    rust/rust-hir-dump.o \\\n+    rust/rust-session-manager.o \\\n+    rust/rust-compile.o \\\n+    rust/rust-mangle.o \\\n+    rust/rust-compile-resolve-path.o \\\n+    rust/rust-macro-expand.o \\\n+    rust/rust-attribute-visitor.o \\\n+    rust/rust-macro-invoc-lexer.o \\\n+    rust/rust-macro-substitute-ctx.o \\\n+    rust/rust-macro-builtins.o \\\n+    rust/rust-hir-full-test.o \\\n+    rust/rust-hir-map.o \\\n+    rust/rust-attributes.o \\\n+    rust/rust-abi.o \\\n+    rust/rust-ast-lower.o \\\n+    rust/rust-ast-lower-base.o \\\n+    rust/rust-ast-lower-pattern.o \\\n+    rust/rust-ast-lower-item.o \\\n+    rust/rust-name-resolver.o \\\n+    rust/rust-ast-resolve.o \\\n+    rust/rust-ast-resolve-base.o \\\n+    rust/rust-ast-resolve-item.o \\\n+    rust/rust-ast-resolve-pattern.o \\\n+    rust/rust-ast-resolve-expr.o \\\n+    rust/rust-ast-resolve-type.o \\\n+    rust/rust-ast-resolve-path.o \\\n+    rust/rust-ast-resolve-stmt.o \\\n+    rust/rust-ast-resolve-struct-expr-field.o \\\n+    rust/rust-hir-type-check.o \\\n+    rust/rust-privacy-check.o \\\n+    rust/rust-privacy-ctx.o \\\n+    rust/rust-reachability.o \\\n+    rust/rust-visibility-resolver.o \\\n+    rust/rust-pub-restricted-visitor.o \\\n+    rust/rust-privacy-reporter.o \\\n+    rust/rust-tyty.o \\\n+    rust/rust-tyty-call.o \\\n+    rust/rust-tyctx.o \\\n+    rust/rust-tyty-bounds.o \\\n+    rust/rust-hir-type-check-util.o \\\n+    rust/rust-hir-trait-resolve.o \\\n+    rust/rust-hir-type-check-toplevel.o \\\n+    rust/rust-hir-type-check-item.o \\\n+    rust/rust-hir-type-check-type.o \\\n+    rust/rust-hir-type-check-struct.o \\\n+    rust/rust-hir-type-check-pattern.o \\\n+    rust/rust-hir-type-check-expr.o \\\n+    rust/rust-hir-type-check-stmt.o \\\n+    rust/rust-hir-type-check-enumitem.o \\\n+    rust/rust-hir-type-check-implitem.o \\\n+    rust/rust-hir-dot-operator.o \\\n+    rust/rust-coercion.o \\\n+    rust/rust-casts.o \\\n+    rust/rust-hir-type-check-base.o \\\n+    rust/rust-autoderef.o \\\n+    rust/rust-substitution-mapper.o \\\n+    rust/rust-const-checker.o \\\n+    rust/rust-lint-marklive.o \\\n+    rust/rust-lint-unused-var.o \\\n+    rust/rust-hir-type-check-path.o \\\n+    rust/rust-unsafe-checker.o \\\n+    rust/rust-compile-intrinsic.o \\\n+    rust/rust-compile-pattern.o \\\n+    rust/rust-compile-fnparam.o \\\n+    rust/rust-base62.o \\\n+    rust/rust-optional-test.o \\\n+    rust/rust-compile-item.o \\\n+    rust/rust-compile-implitem.o \\\n+    rust/rust-compile-stmt.o \\\n+    rust/rust-compile-expr.o \\\n+    rust/rust-compile-type.o \\\n+    rust/rust-compile-block.o \\\n+    rust/rust-compile-struct-field-expr.o \\\n+    rust/rust-constexpr.o \\\n+    rust/rust-compile-base.o \\\n+    rust/rust-tree.o \\\n+    rust/rust-compile-context.o \\\n+    rust/rust-export-metadata.o \\\n+    rust/rust-imports.o \\\n+    rust/rust-import-archive.o \\\n+    rust/rust-extern-crate.o \\\n+    $(END)\n+# removed object files from here\n+\n+# All language-specific object files for Rust.\n+RUST_ALL_OBJS = $(GRS_OBJS) $(RUST_TARGET_OBJS)\n+\n+rust_OBJS = $(RUST_ALL_OBJS) rust/rustspec.o\n+\n+# The compiler itself is called rust1 (formerly grs1)\n+rust1$(exeext): $(RUST_ALL_OBJS) attribs.o $(BACKEND) $(LIBDEPS)\n+\t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n+\t      $(RUST_ALL_OBJS) attribs.o $(BACKEND) $(LIBS) $(BACKENDLIBS)\n+\n+# Build hooks.\n+\n+lang_checks += check-rust\n+lang_checks_parallelized += check-rust\n+check_rust_parallelize = 10\n+\n+# Copies its dependencies into the source directory. This generally should be used for generated files\n+# such as Bison output files which are not version-controlled, but should be included in any release\n+# tarballs. This target will be executed during a bootstrap if \u2018--enable-generated-files-in-srcdir\u2019\n+# was specified as a configure option.\n+rust.srcextra:\n+\n+rust.all.cross: gccrs$(exeext)\n+\n+# idk what this does but someone used it\n+rust.start.encap: gccrs$(exeext)\n+rust.rest.encap:\n+\n+# Build generated man pages for the front end from Texinfo manuals (see Man Page Generation), in the\n+# build directory. This target is only called if the necessary tools are available, but should ignore\n+# errors so as not to stop the build if errors occur; man pages are optional and the tools involved\n+# may be installed in a broken way.\n+rust.man:\n+\n+# Copies its dependencies into the source directory. These targets will be executed during a bootstrap\n+# if \u2018--enable-generated-files-in-srcdir\u2019 was specified as a configure option.\n+rust.srcman:\n+\n+# Clean hooks.\n+\n+rust.mostlyclean:\n+#\tcd $(srcdir)/rust; rm -f *.o y.tab.h y.tab.c lex.yy.c\n+\n+rust.clean: rust.mostlyclean\n+\n+# Builds an etags TAGS file in the language subdirectory in the source tree.\n+# TODO: add more directories if I add more\n+rust.tags: force\n+\tcd $(srcdir)/rust; \\\n+\tetags -o TAGS.sub *.y *.l *.cc *.h ast/*.h ast/*.cc lex/*.h lex/*.cc parse/*.h parse/*.cc; \\\n+\tetags --include TAGS.sub --include ../TAGS.sub\n+\n+# Build documentation hooks.\n+\n+# Build info documentation for the front end, in the build directory. This target is only called by\n+# \u2018make bootstrap\u2019 if a suitable version of makeinfo is available, so does not need to check for this,\n+# and should fail if an error occurs.\n+rust.info:\n+\n+rust.srcinfo:\n+\n+# Build DVI documentation for the front end, in the build directory. This should be done using\n+# $(TEXI2DVI), with appropriate -I arguments pointing to directories of included files.\n+rust.dvi:\n+\n+# Build PDF documentation for the front end, in the build directory. This should be done using\n+# $(TEXI2PDF), with appropriate -I arguments pointing to directories of included files.\n+rust.pdf:\n+\n+doc/rust.info:\n+doc/rust.dvi:\n+doc/rust.pdf:\n+\n+# Build HTML documentation for the front end, in the build directory.\n+rust.html:\n+\n+# Install hooks.\n+\n+# Install everything that is part of the front end, apart from the compiler executables listed in\n+# compilers in config-lang.in.\n+rust.install-common: installdirs\n+#\t-rm -f $(DESTDIR)$(bindir)/$(GCCRS_INSTALL_NAME)$(exeext)\n+#\t-rm -f $(DESTDIR)$(bindir)/$(GCCRS_TARGET_INSTALL_NAME)$(exeext)\n+#\t$(INSTALL_PROGRAM) gccrs$(exeext) $(DESTDIR)$(bindir)/$(GCCRS_INSTALL_NAME)$(exeext)\n+#\tif test -f $(DESTDIR)$(bindir)$(GCCRS_TARGET_INSTALL_NAME)$(exeext); then \\\n+#\t  :; \\\n+#\telse \\\n+#\t  cd $(DESTDIR)$(bindir) && \\\n+#\t   $(LN) $(GCCRS_INSTALL_NAME)$(exeext) $(GCCRS_TARGET_INSTALL_NAME)$(exeext); \\\n+#\tfi\n+\t-rm -f $(DESTDIR)$(bindir)/$(GCCRS_INSTALL_NAME)$(exeext)\n+\t$(INSTALL_PROGRAM) gccrs$(exeext) $(DESTDIR)$(bindir)/$(GCCRS_INSTALL_NAME)$(exeext)\n+\trm -f $(DESTDIR)$(bindir)/$(GCCRS_TARGET_INSTALL_NAME)$(exeext); \\\n+\t( cd $(DESTDIR)$(bindir) && \\\n+      $(LN) $(GCCRS_INSTALL_NAME)$(exeext) $(GCCRS_TARGET_INSTALL_NAME)$(exeext) ); \\\n+\n+# Install headers needed for plugins.\n+rust.install-plugin:\n+\n+# Uninstall files installed by installing the compiler. This is currently documented not to be\n+# supported, so the hook need not do anything.\n+rust.uninstall:\n+#\t-rm -rf $(DESTDIR)/$(bindir)/$(GCCRS_INSTALL_NAME)$(exeext)\n+\t-rm -f gccrs$(exeext) grs1$(exeext)\n+\t-rm -f $(RUST_ALL_OBJS)\n+# ^those two are a maybe\n+\n+# Enable selftests for the rust frontend\n+selftest-rust: s-selftest-rust\n+\n+RUST_SELFTEST_FLAGS = -xrust $(SELFTEST_FLAGS)\n+RUST_SELFTEST_DEPS = rust1$(exeext) $(SELFTEST_DEPS)\n+\n+# Run the rust selftests\n+s-selftest-rust: $(RUST_SELFTEST_DEPS)\n+\t$(GCC_FOR_TARGET) $(RUST_SELFTEST_FLAGS)\n+\t$(STAMP) $@\n+\n+# Install info documentation for the front end, if it is present in the source directory. This target\n+# should have dependencies on info files that should be installed.\n+rust.install-info:\n+\n+rust.install-pdf:\n+\n+# Install man pages for the front end. This target should ignore errors.\n+rust.install-man:\n+\n+# Stage hooks:\n+# The toplevel makefile has already created stage?/rust at this point.\n+# Used for handling bootstrap\n+\n+rust.stage1: stage1-start\n+\t-mv rust/*$(objext) stage1/rust\n+rust.stage2: stage2-start\n+\t-mv rust/*$(objext) stage2/rust\n+rust.stage3: stage3-start\n+\t-mv rust/*$(objext) stage3/rust\n+rust.stage4: stage4-start\n+\t-mv rust/*$(objext) stage4/rust\n+rust.stageprofile: stageprofile-start\n+\t-mv rust/*$(objext) stageprofile/rust\n+rust.stagefeedback: stagefeedback-start\n+\t-mv rust/*$(objext) stagefeedback/rust\n+\n+CFLAGS-rust/rust-lang.o += -DDEFAULT_TARGET_VERSION=\\\"$(version)\\\" \\\n+\t-DDEFAULT_TARGET_MACHINE=\\\"$(target_noncanonical)\\\"\n+\n+# cross-folder includes - add new folders later\n+RUST_INCLUDES = -I $(srcdir)/rust \\\n+\t-I $(srcdir)/rust/lex \\\n+\t-I $(srcdir)/rust/parse \\\n+\t-I $(srcdir)/rust/ast \\\n+\t-I $(srcdir)/rust/analysis \\\n+\t-I $(srcdir)/rust/backend \\\n+\t-I $(srcdir)/rust/expand \\\n+\t-I $(srcdir)/rust/hir/tree \\\n+\t-I $(srcdir)/rust/hir \\\n+\t-I $(srcdir)/rust/resolve \\\n+\t-I $(srcdir)/rust/util \\\n+\t-I $(srcdir)/rust/typecheck \\\n+\t-I $(srcdir)/rust/checks/lints \\\n+\t-I $(srcdir)/rust/checks/errors \\\n+\t-I $(srcdir)/rust/checks/errors/privacy \\\n+\t-I $(srcdir)/rust/util \\\n+        -I $(srcdir)/rust/metadata\n+\n+# add files that require cross-folder includes - currently rust-lang.o, rust-lex.o\n+CFLAGS-rust/rust-lang.o += $(RUST_INCLUDES)\n+CFLAGS-rust/rust-lex.o += $(RUST_INCLUDES)\n+CFLAGS-rust/rust-parse.o += $(RUST_INCLUDES)\n+CFLAGS-rust/rust-session-manager.o += $(RUST_INCLUDES)\n+\n+RUST_CXXFLAGS = $(CXXFLAGS)\n+\n+# build all rust/lex files in rust folder, add cross-folder includes\n+rust/%.o: rust/lex/%.cc\n+\t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n+\t$(POSTCOMPILE)\n+\n+# build all rust/parse files in rust folder, add cross-folder includes\n+rust/%.o: rust/parse/%.cc\n+\t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n+\t$(POSTCOMPILE)\n+\n+# build rust/ast files in rust folder\n+rust/%.o: rust/ast/%.cc\n+\t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n+\t$(POSTCOMPILE)\n+\n+# build rust/backend files in rust folder\n+rust/%.o: rust/backend/%.cc\n+\t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n+\t$(POSTCOMPILE)\n+\n+# build rust/expand files in rust folder\n+rust/%.o: rust/expand/%.cc\n+\t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n+\t$(POSTCOMPILE)\n+\n+# build rust/util files in rust folder\n+rust/%.o: rust/util/%.cc\n+\t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n+\t$(POSTCOMPILE)\n+\n+# build rust/hir files in rust folder\n+rust/%.o: rust/hir/%.cc\n+\t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n+\t$(POSTCOMPILE)\n+\n+# build rust/hir/tree files in rust folder\n+rust/%.o: rust/hir/tree/%.cc\n+\t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n+\t$(POSTCOMPILE)\n+\n+# build rust/resolve files in rust folder\n+rust/%.o: rust/resolve/%.cc\n+\t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n+\t$(POSTCOMPILE)\n+\n+# build rust/typecheck files in rust folder\n+rust/%.o: rust/typecheck/%.cc\n+\t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n+\t$(POSTCOMPILE)\n+\n+# build rust/checks/lints files in rust folder\n+rust/%.o: rust/checks/lints/%.cc\n+\t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n+\t$(POSTCOMPILE)\n+\n+# build rust/checks/errors files in rust folder\n+rust/%.o: rust/checks/errors/%.cc\n+\t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n+\t$(POSTCOMPILE)\n+\n+# build privacy pass files in rust folder\n+rust/%.o: rust/checks/errors/privacy/%.cc\n+\t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n+\t$(POSTCOMPILE)\n+\n+# build rust/metadata files in rust folder\n+rust/%.o: rust/metadata/%.cc\n+\t$(COMPILE) $(RUST_CXXFLAGS) $(RUST_INCLUDES) $<\n+\t$(POSTCOMPILE)"}]}