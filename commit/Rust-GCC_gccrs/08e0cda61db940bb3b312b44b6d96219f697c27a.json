{"sha": "08e0cda61db940bb3b312b44b6d96219f697c27a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhlMGNkYTYxZGI5NDBiYjNiMzEyYjQ0YjZkOTYyMTlmNjk3YzI3YQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2013-03-21T16:33:33Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2013-03-21T16:33:33Z"}, "message": "tree.h (VECTOR_TYPE_P): New macro.\n\n2013-03-21  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* tree.h (VECTOR_TYPE_P): New macro.\n\t(VECTOR_INTEGER_TYPE_P, VECTOR_FLOAT_TYPE_P, FLOAT_TYPE_P,\n\tTYPE_MODE): Use it.\n\t* fold-const.c (fold_cond_expr_with_comparison): Use build_zero_cst.\n\tVEC_COND_EXPR cannot be lvalues.\n\t(fold_ternary_loc) <VEC_COND_EXPR>: Merge with the COND_EXPR case.\n\ngcc/cp/\n\t* call.c (build_conditional_expr_1): Fold VEC_COND_EXPR.\n\ngcc/testsuite/\n\t* g++.dg/ext/vector21.C: New testcase.\n\nFrom-SVN: r196884", "tree": {"sha": "32255bfeab9804ebb6cbd03117e49ca038c33706", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32255bfeab9804ebb6cbd03117e49ca038c33706"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08e0cda61db940bb3b312b44b6d96219f697c27a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e0cda61db940bb3b312b44b6d96219f697c27a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08e0cda61db940bb3b312b44b6d96219f697c27a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e0cda61db940bb3b312b44b6d96219f697c27a/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d08633b496a5820431e4049ee8a564796a42114d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d08633b496a5820431e4049ee8a564796a42114d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d08633b496a5820431e4049ee8a564796a42114d"}], "stats": {"total": 102, "additions": 83, "deletions": 19}, "files": [{"sha": "3992373c395f0e15f373ab686f98b7536ee8477b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e0cda61db940bb3b312b44b6d96219f697c27a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e0cda61db940bb3b312b44b6d96219f697c27a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08e0cda61db940bb3b312b44b6d96219f697c27a", "patch": "@@ -1,3 +1,12 @@\n+2013-03-21  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* tree.h (VECTOR_TYPE_P): New macro.\n+\t(VECTOR_INTEGER_TYPE_P, VECTOR_FLOAT_TYPE_P, FLOAT_TYPE_P,\n+\tTYPE_MODE): Use it.\n+\t* fold-const.c (fold_cond_expr_with_comparison): Use build_zero_cst.\n+\tVEC_COND_EXPR cannot be lvalues.\n+\t(fold_ternary_loc) <VEC_COND_EXPR>: Merge with the COND_EXPR case.\n+\n 2013-03-21  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* simplify-rtx.c (simplify_binary_operation_1) <VEC_CONCAT>:"}, {"sha": "37b67ce991c459deefe8c7ce1fc85341b30bcb61", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e0cda61db940bb3b312b44b6d96219f697c27a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e0cda61db940bb3b312b44b6d96219f697c27a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=08e0cda61db940bb3b312b44b6d96219f697c27a", "patch": "@@ -1,3 +1,7 @@\n+2013-03-21  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* call.c (build_conditional_expr_1): Fold VEC_COND_EXPR.\n+\n 2013-03-21  Richard Biener  <rguenther@suse.de>\n \n \t* error.c (cp_printer): Use DECL_HAS_DEBUG_EXPR_P instead of"}, {"sha": "5c9c28615df5a7388b6685ed0d9921509b579809", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e0cda61db940bb3b312b44b6d96219f697c27a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e0cda61db940bb3b312b44b6d96219f697c27a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=08e0cda61db940bb3b312b44b6d96219f697c27a", "patch": "@@ -4437,9 +4437,9 @@ build_conditional_expr_1 (tree arg1, tree arg2, tree arg3,\n \t}\n \n       if (!COMPARISON_CLASS_P (arg1))\n-\targ1 = build2 (NE_EXPR, signed_type_for (arg1_type), arg1,\n+\targ1 = fold_build2 (NE_EXPR, signed_type_for (arg1_type), arg1,\n \t\t       build_zero_cst (arg1_type));\n-      return build3 (VEC_COND_EXPR, arg2_type, arg1, arg2, arg3);\n+      return fold_build3 (VEC_COND_EXPR, arg2_type, arg1, arg2, arg3);\n     }\n \n   /* [expr.cond]"}, {"sha": "905661cf7e6dfc8329b2cd441bc2c84a465c8e95", "filename": "gcc/fold-const.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e0cda61db940bb3b312b44b6d96219f697c27a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e0cda61db940bb3b312b44b6d96219f697c27a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=08e0cda61db940bb3b312b44b6d96219f697c27a", "patch": "@@ -4633,7 +4633,7 @@ fold_cond_expr_with_comparison (location_t loc, tree type,\n       if (comp_code == NE_EXPR)\n \treturn pedantic_non_lvalue_loc (loc, fold_convert_loc (loc, type, arg1));\n       else if (comp_code == EQ_EXPR)\n-\treturn build_int_cst (type, 0);\n+\treturn build_zero_cst (type);\n     }\n \n   /* Try some transformations of A op B ? A : B.\n@@ -4667,6 +4667,7 @@ fold_cond_expr_with_comparison (location_t loc, tree type,\n       /* Avoid these transformations if the COND_EXPR may be used\n \t as an lvalue in the C++ front-end.  PR c++/19199.  */\n       && (in_gimple_form\n+\t  || VECTOR_TYPE_P (type)\n \t  || (strcmp (lang_hooks.name, \"GNU C++\") != 0\n \t      && strcmp (lang_hooks.name, \"GNU Objective-C++\") != 0)\n \t  || ! maybe_lvalue_p (arg1)\n@@ -13899,6 +13900,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n       return NULL_TREE;\n \n     case COND_EXPR:\n+    case VEC_COND_EXPR:\n       /* Pedantic ANSI C says that a conditional expression is never an lvalue,\n \t so all simple results must be passed through pedantic_non_lvalue.  */\n       if (TREE_CODE (arg0) == INTEGER_CST)\n@@ -13916,6 +13918,14 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t    return pedantic_non_lvalue_loc (loc, tem);\n \t  return NULL_TREE;\n \t}\n+      else if (TREE_CODE (arg0) == VECTOR_CST)\n+\t{\n+\t  if (integer_all_onesp (arg0))\n+\t    return pedantic_omit_one_operand_loc (loc, type, arg1, arg2);\n+\t  if (integer_zerop (arg0))\n+\t    return pedantic_omit_one_operand_loc (loc, type, arg2, arg1);\n+\t}\n+\n       if (operand_equal_p (arg1, op2, 0))\n \treturn pedantic_omit_one_operand_loc (loc, type, arg1, arg0);\n \n@@ -13951,6 +13961,10 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t    }\n \t}\n \n+      /* ???  Fixup the code below for VEC_COND_EXPR.  */\n+      if (code == VEC_COND_EXPR)\n+\treturn NULL_TREE;\n+\n       /* If the second operand is simpler than the third, swap them\n \t since that produces better jump optimization results.  */\n       if (truth_value_p (TREE_CODE (arg0))\n@@ -14138,16 +14152,6 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \n       return NULL_TREE;\n \n-    case VEC_COND_EXPR:\n-      if (TREE_CODE (arg0) == VECTOR_CST)\n-\t{\n-\t  if (integer_all_onesp (arg0) && !TREE_SIDE_EFFECTS (op2))\n-\t    return pedantic_non_lvalue_loc (loc, op1);\n-\t  if (integer_zerop (arg0) && !TREE_SIDE_EFFECTS (op1))\n-\t    return pedantic_non_lvalue_loc (loc, op2);\n-\t}\n-      return NULL_TREE;\n-\n     case CALL_EXPR:\n       /* CALL_EXPRs used to be ternary exprs.  Catch any mistaken uses\n \t of fold_ternary on them.  */"}, {"sha": "fc3ee606f44d761a8d7435965a395903ef32a416", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e0cda61db940bb3b312b44b6d96219f697c27a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e0cda61db940bb3b312b44b6d96219f697c27a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=08e0cda61db940bb3b312b44b6d96219f697c27a", "patch": "@@ -1,3 +1,7 @@\n+2013-03-21  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* g++.dg/ext/vector21.C: New testcase.\n+\n 2013-03-21  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/arm/neon-for-64bits-1.c: New tests."}, {"sha": "71634c327864d1dc91ea937a73188693895189d9", "filename": "gcc/testsuite/g++.dg/ext/vector21.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e0cda61db940bb3b312b44b6d96219f697c27a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e0cda61db940bb3b312b44b6d96219f697c27a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector21.C?ref=08e0cda61db940bb3b312b44b6d96219f697c27a", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-gimple\" } */\n+\n+typedef int vec __attribute__ ((vector_size (4 * sizeof (int))));\n+\n+void f1 (vec *x)\n+{\n+  *x = (*x >= 0) ? *x : -*x;\n+}\n+void f2 (vec *x)\n+{\n+  *x = (0 < *x) ? *x : -*x;\n+}\n+void g1 (vec *x)\n+{\n+  *x = (*x < 0) ? -*x : *x;\n+}\n+void g2 (vec *x)\n+{\n+  *x = (0 > *x) ? -*x : *x;\n+}\n+void h (vec *x, vec *y)\n+{\n+  *x = (*x < *y) ? *y : *x;\n+}\n+void i (vec *x, vec *y)\n+{\n+  *x = (*x < *y) ? *x : *y;\n+}\n+void j (vec *x, vec *y)\n+{\n+  *x = (*x < *y) ? *x : *x;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"ABS_EXPR\" 4 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"MIN_EXPR\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"MAX_EXPR\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-not \"VEC_COND_EXPR\" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "f1b988ca7bb5b112ddf73243a62f90109e9035da", "filename": "gcc/tree.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08e0cda61db940bb3b312b44b6d96219f697c27a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08e0cda61db940bb3b312b44b6d96219f697c27a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=08e0cda61db940bb3b312b44b6d96219f697c27a", "patch": "@@ -981,6 +981,10 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define STRIP_USELESS_TYPE_CONVERSION(EXP) \\\n   (EXP) = tree_ssa_strip_useless_type_conversions (EXP)\n \n+/* Nonzero if TYPE represents a vector type.  */\n+\n+#define VECTOR_TYPE_P(TYPE) (TREE_CODE (TYPE) == VECTOR_TYPE)\n+\n /* Nonzero if TYPE represents an integral type.  Note that we do not\n    include COMPLEX types here.  Keep these checks in ascending code\n    order.  */\n@@ -1016,15 +1020,15 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n \n /* Nonzero if TYPE represents a vector integer type.  */\n                 \n-#define VECTOR_INTEGER_TYPE_P(TYPE)                   \\\n-             (TREE_CODE (TYPE) == VECTOR_TYPE      \\\n-                 && TREE_CODE (TREE_TYPE (TYPE)) == INTEGER_TYPE)\n+#define VECTOR_INTEGER_TYPE_P(TYPE)\t\t\t\\\n+  (VECTOR_TYPE_P (TYPE)\t\t\t\t\t\\\n+   && TREE_CODE (TREE_TYPE (TYPE)) == INTEGER_TYPE)\n \n \n /* Nonzero if TYPE represents a vector floating-point type.  */\n \n #define VECTOR_FLOAT_TYPE_P(TYPE)\t\\\n-  (TREE_CODE (TYPE) == VECTOR_TYPE\t\\\n+  (VECTOR_TYPE_P (TYPE)\t\t\t\\\n    && TREE_CODE (TREE_TYPE (TYPE)) == REAL_TYPE)\n \n /* Nonzero if TYPE represents a floating-point type, including complex\n@@ -1034,7 +1038,7 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define FLOAT_TYPE_P(TYPE)\t\t\t\\\n   (SCALAR_FLOAT_TYPE_P (TYPE)\t\t\t\\\n    || ((TREE_CODE (TYPE) == COMPLEX_TYPE \t\\\n-        || TREE_CODE (TYPE) == VECTOR_TYPE)\t\\\n+        || VECTOR_TYPE_P (TYPE))\t\t\\\n        && SCALAR_FLOAT_TYPE_P (TREE_TYPE (TYPE))))\n \n /* Nonzero if TYPE represents a decimal floating-point type.  */\n@@ -2116,7 +2120,7 @@ struct GTY(()) tree_block {\n /* Vector types need to check target flags to determine type.  */\n extern enum machine_mode vector_type_mode (const_tree);\n #define TYPE_MODE(NODE) \\\n-  (TREE_CODE (TYPE_CHECK (NODE)) == VECTOR_TYPE \\\n+  (VECTOR_TYPE_P (TYPE_CHECK (NODE)) \\\n    ? vector_type_mode (NODE) : (NODE)->type_common.mode)\n #define SET_TYPE_MODE(NODE, MODE) \\\n   (TYPE_CHECK (NODE)->type_common.mode = (MODE))"}]}