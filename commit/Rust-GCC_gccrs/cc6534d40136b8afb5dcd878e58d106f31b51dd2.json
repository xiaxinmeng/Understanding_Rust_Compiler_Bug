{"sha": "cc6534d40136b8afb5dcd878e58d106f31b51dd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M2NTM0ZDQwMTM2YjhhZmI1ZGNkODc4ZTU4ZDEwNmYzMWI1MWRkMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-11-30T23:43:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-30T23:43:10Z"}, "message": "re PR c/83222 (Inconsistent \"initializer element is not constant\" error)\n\n\tPR c/83222\n\t* c-tree.h (decl_constant_value_1): Declare.\n\t* c-typeck.c (decl_constant_value_1): New function.\n\t(decl_constant_value): Use it.\n\t* c-fold.c (c_fully_fold_internal): If in_init, use\n\tdecl_constant_value_1 instead of decl_constant_value.\n\n\t* gcc.c-torture/compile/pr83222.c: New test.\n\nFrom-SVN: r255285", "tree": {"sha": "45bebb503a52bf8726cdc05432ea9875c8ef1bdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45bebb503a52bf8726cdc05432ea9875c8ef1bdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc6534d40136b8afb5dcd878e58d106f31b51dd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc6534d40136b8afb5dcd878e58d106f31b51dd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc6534d40136b8afb5dcd878e58d106f31b51dd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc6534d40136b8afb5dcd878e58d106f31b51dd2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5de73c050e4dbb3dfc8705bf20199aedb090df20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5de73c050e4dbb3dfc8705bf20199aedb090df20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5de73c050e4dbb3dfc8705bf20199aedb090df20"}], "stats": {"total": 61, "additions": 54, "deletions": 7}, "files": [{"sha": "90db38a0419e8e077a423dee28b587e0d14f1e99", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6534d40136b8afb5dcd878e58d106f31b51dd2/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6534d40136b8afb5dcd878e58d106f31b51dd2/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=cc6534d40136b8afb5dcd878e58d106f31b51dd2", "patch": "@@ -1,3 +1,12 @@\n+2017-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/83222\n+\t* c-tree.h (decl_constant_value_1): Declare.\n+\t* c-typeck.c (decl_constant_value_1): New function.\n+\t(decl_constant_value): Use it.\n+\t* c-fold.c (c_fully_fold_internal): If in_init, use\n+\tdecl_constant_value_1 instead of decl_constant_value.\n+\n 2017-11-30  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_postfix_expression): Use ; instead of ;;."}, {"sha": "84ce543be7593705d53f6c18a1c8eaa8cc4cd0a0", "filename": "gcc/c/c-fold.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6534d40136b8afb5dcd878e58d106f31b51dd2/gcc%2Fc%2Fc-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6534d40136b8afb5dcd878e58d106f31b51dd2/gcc%2Fc%2Fc-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-fold.c?ref=cc6534d40136b8afb5dcd878e58d106f31b51dd2", "patch": "@@ -167,7 +167,10 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       /* Except for variables which we can optimize to its initializer.  */\n       if (VAR_P (expr) && !lval && (optimize || in_init))\n \t{\n-\t  ret = decl_constant_value (expr);\n+\t  if (in_init)\n+\t    ret = decl_constant_value_1 (expr);\n+\t  else\n+\t    ret = decl_constant_value (expr);\n \t  /* Avoid unwanted tree sharing between the initializer and current\n \t     function's body where the tree can be modified e.g. by the\n \t     gimplifier.  */"}, {"sha": "cbc5e0e8bccc1f450cdb36a36dddfaf57df539ef", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6534d40136b8afb5dcd878e58d106f31b51dd2/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6534d40136b8afb5dcd878e58d106f31b51dd2/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=cc6534d40136b8afb5dcd878e58d106f31b51dd2", "patch": "@@ -640,6 +640,7 @@ extern struct c_expr default_function_array_read_conversion (location_t,\n \t\t\t\t\t\t\t     struct c_expr);\n extern struct c_expr convert_lvalue_to_rvalue (location_t, struct c_expr,\n \t\t\t\t\t       bool, bool);\n+extern tree decl_constant_value_1 (tree);\n extern void mark_exp_read (tree);\n extern tree composite_type (tree, tree);\n extern tree build_component_ref (location_t, tree, tree, location_t);"}, {"sha": "922266038afb6d3d410ef97b5d61837146631a5d", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6534d40136b8afb5dcd878e58d106f31b51dd2/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6534d40136b8afb5dcd878e58d106f31b51dd2/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=cc6534d40136b8afb5dcd878e58d106f31b51dd2", "patch": "@@ -1832,13 +1832,10 @@ c_size_in_bytes (const_tree type)\n /* Return either DECL or its known constant value (if it has one).  */\n \n tree\n-decl_constant_value (tree decl)\n+decl_constant_value_1 (tree decl)\n {\n-  if (/* Don't change a variable array bound or initial value to a constant\n-\t in a place where a variable is invalid.  Note that DECL_INITIAL\n-\t isn't valid for a PARM_DECL.  */\n-      current_function_decl != NULL_TREE\n-      && TREE_CODE (decl) != PARM_DECL\n+  if (/* Note that DECL_INITIAL isn't valid for a PARM_DECL.  */\n+      TREE_CODE (decl) != PARM_DECL\n       && !TREE_THIS_VOLATILE (decl)\n       && TREE_READONLY (decl)\n       && DECL_INITIAL (decl) != NULL_TREE\n@@ -1853,6 +1850,17 @@ decl_constant_value (tree decl)\n   return decl;\n }\n \n+/* Return either DECL or its known constant value (if it has one).\n+   Like the above, but always return decl outside of functions.  */\n+\n+tree\n+decl_constant_value (tree decl)\n+{\n+  /* Don't change a variable array bound or initial value to a constant\n+     in a place where a variable is invalid.  */\n+  return current_function_decl ? decl_constant_value_1 (decl) : decl;\n+}\n+\n /* Convert the array expression EXP to a pointer.  */\n static tree\n array_to_pointer_conversion (location_t loc, tree exp)"}, {"sha": "74211182335de3049e332d061bb824a5acac8293", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6534d40136b8afb5dcd878e58d106f31b51dd2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6534d40136b8afb5dcd878e58d106f31b51dd2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cc6534d40136b8afb5dcd878e58d106f31b51dd2", "patch": "@@ -1,3 +1,8 @@\n+2017-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/83222\n+\t* gcc.c-torture/compile/pr83222.c: New test.\n+\n 2017-12-01  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \tPR sanitizer/81697"}, {"sha": "ad40a3a11dd02a831b62d272f0302eb5346a1213", "filename": "gcc/testsuite/gcc.c-torture/compile/pr83222.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6534d40136b8afb5dcd878e58d106f31b51dd2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr83222.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6534d40136b8afb5dcd878e58d106f31b51dd2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr83222.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr83222.c?ref=cc6534d40136b8afb5dcd878e58d106f31b51dd2", "patch": "@@ -0,0 +1,21 @@\n+/* PR c/83222 */\n+\n+const char a = 0x42;\n+const double b = (double) a;\n+const double c = a;\n+double d = (double) a;\n+double e = a;\n+const double f = 1 + (double) a;\n+const double g = 1 + a;\n+double h = 1 + (double) a;\n+double i = 1 + a;\n+double j[] = { (double) a, a, 1 + (double) a, 1 + a };\n+\n+void\n+foo (void)\n+{\n+  static const double k = (double) a;\n+  static const double l = a;\n+  static const double m = 1 + (double) a;\n+  static const double n = 1 + a;\n+}"}]}