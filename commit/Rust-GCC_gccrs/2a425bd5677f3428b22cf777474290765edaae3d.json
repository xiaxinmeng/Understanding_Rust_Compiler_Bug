{"sha": "2a425bd5677f3428b22cf777474290765edaae3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE0MjViZDU2NzdmMzQyOGIyMmNmNzc3NDc0MjkwNzY1ZWRhYWUzZA==", "commit": {"author": {"name": "Dennis Glatting", "email": "dglattin@gnu.org", "date": "1992-08-18T04:46:58Z"}, "committer": {"name": "Dennis Glatting", "email": "dglattin@gnu.org", "date": "1992-08-18T04:46:58Z"}, "message": "Saving a working version before release.\n\nFrom-SVN: r1884", "tree": {"sha": "cc0c90692e69ee0c80313733609a4ab5409c4369", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc0c90692e69ee0c80313733609a4ab5409c4369"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a425bd5677f3428b22cf777474290765edaae3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a425bd5677f3428b22cf777474290765edaae3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a425bd5677f3428b22cf777474290765edaae3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a425bd5677f3428b22cf777474290765edaae3d/comments", "author": null, "committer": null, "parents": [{"sha": "e63c1d357b1ad721f799a0071ba511d2b7ab5581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e63c1d357b1ad721f799a0071ba511d2b7ab5581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e63c1d357b1ad721f799a0071ba511d2b7ab5581"}], "stats": {"total": 191, "additions": 106, "deletions": 85}, "files": [{"sha": "677b5d7b3c30597e1552fb9834ce2b036b109988", "filename": "gcc/objc/hash.c", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a425bd5677f3428b22cf777474290765edaae3d/gcc%2Fobjc%2Fhash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a425bd5677f3428b22cf777474290765edaae3d/gcc%2Fobjc%2Fhash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fhash.c?ref=2a425bd5677f3428b22cf777474290765edaae3d", "patch": "@@ -1,25 +1,38 @@\n-/* -*-c-*-\n- * This file contains the hashing implementation.\n- *\n- * Copyright (C) 1991 Threaded Technologies Inc.\n- * \n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published\n- * by the Free Software Foundation; either version 1, or any later version.\n- * \n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * General Public License for more details.\n- * \n- * You should receive a copy of the GNU General Public License \n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n- * \n-  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/hash/RCS/hash.c,v 0.11 1992/01/03 02:55:03 dennisg Exp dennisg $\n+/* -*-c-*- */\n+\n+/* Copyright (C) 1989, 1992 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* As a special exception, if you link this library with files\n+   compiled with GCC to produce an executable, this does not cause\n+   the resulting executable to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+/* \n+  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/dispatch.common/RCS/hash.c,v 0.12 1992/04/13 11:43:08 dennisg Exp dennisg $\n   $Author: dennisg $\n-  $Date: 1992/01/03 02:55:03 $\n+  $Date: 1992/04/13 11:43:08 $\n   $Log: hash.c,v $\n+ * Revision 0.12  1992/04/13  11:43:08  dennisg\n+ * Check in after array version of run-time works.\n+ * Expect more changes as hash version and other changes are made.\n+ *\n  * Revision 0.11  1992/01/03  02:55:03  dennisg\n  * modified to handle new initialization scheme.\n  * fixed code structure."}, {"sha": "1c0d186a747b61f876e4cd2b9f193c278616528d", "filename": "gcc/objc/hash.h", "status": "modified", "additions": 73, "deletions": 65, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a425bd5677f3428b22cf777474290765edaae3d/gcc%2Fobjc%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a425bd5677f3428b22cf777474290765edaae3d/gcc%2Fobjc%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fhash.h?ref=2a425bd5677f3428b22cf777474290765edaae3d", "patch": "@@ -1,30 +1,38 @@\n-/* -*-c-*-\n- * This is a general purpose hash object.\n- *\n- * The hash object used throughout the run-time\n- *  is an integer hash.  The key and data is of type\n- *  void*.  The hashing function converts the key to\n- *  an integer and computes it hash value.\n- *\n- * Copyright  (C) 1991 Threaded Technologies Inc.\n- * \n- * This program is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published\n- * by the Free Software Foundation; either version 1, or any later version.\n- * \n- * This program is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * General Public License for more details.\n- * \n- * You should receive a copy of the GNU General Public License \n- * along with this program; if not, write to the Free Software\n- * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n- * \n-  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/hash/RCS/hash.h,v 0.8 1991/12/10 12:05:28 dennisg Exp dennisg $\n+/* -*-c-*- */\n+\n+/* Copyright (C) 1989, 1992 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* As a special exception, if you link this library with files\n+   compiled with GCC to produce an executable, this does not cause\n+   the resulting executable to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+/* \n+  $Header: /usr/user/dennis_glatting/ObjC/c-runtime/dispatch.common/RCS/hash.h,v 0.9 1992/04/13 11:43:08 dennisg Exp dennisg $\n   $Author: dennisg $\n-  $Date: 1991/12/10 12:05:28 $\n+  $Date: 1992/04/13 11:43:08 $\n   $Log: hash.h,v $\n+ * Revision 0.9  1992/04/13  11:43:08  dennisg\n+ * Check in after array version of run-time works.\n+ * Expect more changes as hash version and other changes are made.\n+ *\n  * Revision 0.8  1991/12/10  12:05:28  dennisg\n  * Cleaned up file format for a distribution.\n  *\n@@ -68,10 +76,10 @@\n extern \"C\" {\n #endif\n \n-#include\t<assert.h>\n+#include        <assert.h>\n #include  <sys/types.h>\n \n-#include\t<mutex.h>\n+#include        <mutex.h>\n \n /*\n  * This data structure is used to hold items\n@@ -103,7 +111,7 @@ typedef struct cache_node {\n  * typedef.  Therefore, to remove compiler warnings the functions passed to\n  * hash_new() will have to be casted to this type. \n  */\n-typedef u_int\t(*HashFunc)(void*, void*);\n+typedef u_int   (*HashFunc)(void*, void*);\n \n /*\n  * This data type is the function that compares two hash keys and returns an\n@@ -112,7 +120,7 @@ typedef u_int\t(*HashFunc)(void*, void*);\n  * second. \n  */\n \n-typedef int\t(*CompareFunc)(void*, void*);\n+typedef int     (*CompareFunc)(void*, void*);\n \n \n /*\n@@ -140,24 +148,24 @@ typedef struct cache {\n                                                     a power of two. */\n               entriesInHash,                      /* Current number of entries\n                                                     in the hash table. */\n-\t\t\t\t\t\t\tmask;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/* Precomputed mask. */\n+                                                        mask;                                                                                                                           /* Precomputed mask. */\n   /*\n    * Variables used to implement indexing\n    *  through the hash table.\n    */\n   u_int       lastBucket;                         /* Tracks which entry in the\n                                                     array where the last value\n                                                     was returned. */\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/* Function used to compute\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ta hash code given a key. \n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tThis function is specified \n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhen the hash table is \n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcreated. */\n-\tHashFunc\t\thashFunc;\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/* Function used to compare \n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttwo hash keys to determine\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif they are equal. */\n-\tCompareFunc\tcompareFunc;\n+                                                                                                                                                                                                        /* Function used to compute\n+                                                                                                                                                                                                                a hash code given a key. \n+                                                                                                                                                                                                                This function is specified \n+                                                                                                                                                                                                                when the hash table is \n+                                                                                                                                                                                                                created. */\n+        HashFunc                hashFunc;\n+                                                                                                                                                                                                        /* Function used to compare \n+                                                                                                                                                                                                                two hash keys to determine\n+                                                                                                                                                                                                                if they are equal. */\n+        CompareFunc     compareFunc;\n } Cache, *Cache_t;\n \n \n@@ -203,67 +211,67 @@ hash_remove (Cache_t theCache, void* aKey);\n CacheNode_t \n hash_next (Cache_t theCache, CacheNode_t aCacheNode);\n \n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/* Used to return a value from \n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ta hash table using a given \n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey.  */\n+                                                                                                                                                                                                /* Used to return a value from \n+                                                                                                                                                                                                        a hash table using a given \n+                                                                                                                                                                                                        key.  */\n void* \n hash_value_for_key (Cache_t theCache, void* aKey);\n \n \n /************************************************\n \n-\tUseful hashing functions.  \n-\t\n-\tDeclared inline for your pleaseure. \n-\t\n+        Useful hashing functions.  \n+        \n+        Declared inline for your pleaseure. \n+        \n ************************************************/\n \n                                                 /* Calculate a hash code by \n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tperforming some manipulation \n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tof the key pointer. */\n+                                                                                                                                                                                                        performing some manipulation \n+                                                                                                                                                                                                        of the key pointer. */\n static inline u_int \n intHash(Cache_t theCache, void* aKey) {\n \n \n   assert(sizeof (u_int) == sizeof (aKey));\n \n-\treturn ((u_int)aKey >> (sizeof(void*) - 1)) & theCache->mask ;\n+        return ((u_int)aKey >> (sizeof(void*) - 1)) & theCache->mask ;\n }\n \n                                                 /* Calculate a hash code by \n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\titerating over a NULL \n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tterminate string. */\n+                                                                                                                                                                                                        iterating over a NULL \n+                                                                                                                                                                                                        terminate string. */\n static inline u_int \n strHash(Cache_t theCache, void* aKey) {\n \n-\tu_int\tret = 0;\n-\tu_int\tctr = 0;\n-\t\n-\t\n-\twhile(*(char*)aKey) {\n-\t\tret ^= *(char*)aKey++ << ctr;\n-\t\tctr = (ctr + 1) % sizeof(void*);\n-\t}\n+        u_int   ret = 0;\n+        u_int   ctr = 0;\n+        \n+        \n+        while(*(char*)aKey) {\n+                ret ^= *(char*)aKey++ << ctr;\n+                ctr = (ctr + 1) % sizeof(void*);\n+        }\n \n-\treturn ret & theCache->mask ;\n+        return ret & theCache->mask ;\n }\n \n \n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/* Compare two integers. */\n+                                                                                                                                                                                                /* Compare two integers. */\n static inline int \n intCmp(void* k1, void* k2) {\n \n \n-\treturn !((int)k1 - (int)k2);\n+        return !((int)k1 - (int)k2);\n }\n \n \n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/* Compare two strings. */\n+                                                                                                                                                                                                /* Compare two strings. */\n static inline int \n strCmp(void* k1, void* k2) {\n \n \n-\treturn !strcmp( k1, k2 );\n+        return !strcmp( k1, k2 );\n }\n \n "}]}