{"sha": "0f605e4049160519f72d1824b3307ff8cdfc31dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY2MDVlNDA0OTE2MDUxOWY3MmQxODI0YjMzMDdmZjhjZGZjMzFkZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-09-02T08:14:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-09-02T08:14:47Z"}, "message": "gimple-ssa-strength-reduction.c (valid_mem_ref_cand_p): New function.\n\n\t* gimple-ssa-strength-reduction.c (valid_mem_ref_cand_p): New function.\n\t(replace_ref): Do not replace a chain of only two candidates which are\n\tvalid memory references.\n\nFrom-SVN: r275297", "tree": {"sha": "84276c05422fcf6ca3e6133801937224cd916742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84276c05422fcf6ca3e6133801937224cd916742"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f605e4049160519f72d1824b3307ff8cdfc31dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f605e4049160519f72d1824b3307ff8cdfc31dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f605e4049160519f72d1824b3307ff8cdfc31dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f605e4049160519f72d1824b3307ff8cdfc31dd/comments", "author": null, "committer": null, "parents": [{"sha": "c746efcab3f7b2b02511f358f2d6ca37f3fcac5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c746efcab3f7b2b02511f358f2d6ca37f3fcac5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c746efcab3f7b2b02511f358f2d6ca37f3fcac5f"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "c5857875896c6d585d53a7cf01ec4b84794dd034", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f605e4049160519f72d1824b3307ff8cdfc31dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f605e4049160519f72d1824b3307ff8cdfc31dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f605e4049160519f72d1824b3307ff8cdfc31dd", "patch": "@@ -1,3 +1,9 @@\n+2019-09-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gimple-ssa-strength-reduction.c (valid_mem_ref_cand_p): New function.\n+\t(replace_ref): Do not replace a chain of only two candidates which are\n+\tvalid memory references.\n+\n 2019-09-02  Martin Liska  <mliska@suse.cz>\n \n \t* tree-switch-conversion.c (jump_table_cluster::find_jump_tables):"}, {"sha": "de7f36015efbb5e4c6d6eb503174619a993d5fba", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f605e4049160519f72d1824b3307ff8cdfc31dd/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f605e4049160519f72d1824b3307ff8cdfc31dd/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=0f605e4049160519f72d1824b3307ff8cdfc31dd", "patch": "@@ -1999,13 +1999,40 @@ replace_ref (tree *expr, slsr_cand_t c)\n   update_stmt (c->cand_stmt);\n }\n \n+/* Return true if CAND_REF candidate C is a valid memory reference.  */\n+\n+static bool\n+valid_mem_ref_cand_p (slsr_cand_t c)\n+{\n+  if (TREE_CODE (TREE_OPERAND (c->stride, 1)) != INTEGER_CST)\n+    return false;\n+\n+  struct mem_address addr\n+    = { NULL_TREE, c->base_expr, TREE_OPERAND (c->stride, 0),\n+\tTREE_OPERAND (c->stride, 1), wide_int_to_tree (sizetype, c->index) };\n+\n+  return\n+    valid_mem_ref_p (TYPE_MODE (c->cand_type), TYPE_ADDR_SPACE (c->cand_type),\n+\t\t     &addr);\n+}\n+\n /* Replace CAND_REF candidate C, each sibling of candidate C, and each\n    dependent of candidate C with an equivalent strength-reduced data\n    reference.  */\n \n static void\n replace_refs (slsr_cand_t c)\n {\n+  /* Replacing a chain of only 2 candidates which are valid memory references\n+     is generally counter-productive because you cannot recoup the additional\n+     calculation added in front of them.  */\n+  if (c->basis == 0\n+      && c->dependent\n+      && !lookup_cand (c->dependent)->dependent\n+      && valid_mem_ref_cand_p (c)\n+      && valid_mem_ref_cand_p (lookup_cand (c->dependent)))\n+    return;\n+\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fputs (\"Replacing reference: \", dump_file);"}, {"sha": "b6dbf7681678bd32b1bcaad133da728382e31952", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f605e4049160519f72d1824b3307ff8cdfc31dd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f605e4049160519f72d1824b3307ff8cdfc31dd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f605e4049160519f72d1824b3307ff8cdfc31dd", "patch": "@@ -1,3 +1,7 @@\n+2019-09-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/tree-ssa/slsr-42.c: New test.\n+\n 2019-09-02  Martin Liska  <mliska@suse.cz>\n \n \tPR c++/91155"}, {"sha": "0495fcf94e24444c13d301e974a1b623456078d4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/slsr-42.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f605e4049160519f72d1824b3307ff8cdfc31dd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f605e4049160519f72d1824b3307ff8cdfc31dd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fslsr-42.c?ref=0f605e4049160519f72d1824b3307ff8cdfc31dd", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-slsr-details\" } */\n+\n+struct x\n+{\n+  int a[16];\n+  int b[16];\n+};\n+\n+void\n+set (struct x *p, unsigned int n, int i)\n+{\n+  p->a[n] = i;\n+  p->b[n] = i;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"Replacing reference: \" \"slsr\"  { target i?86-*-* x86_64-*-* } } } */"}]}