{"sha": "e32fc4499f863fe0fa81767d11f40ad2f1ab1668", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTMyZmM0NDk5Zjg2M2ZlMGZhODE3NjdkMTFmNDBhZDJmMWFiMTY2OA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-01-17T11:56:58Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-01-17T11:56:58Z"}, "message": "[PR c++/86610] lambda captures in templates\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-01/msg00948.html\n\tPR c++/86610\n\t* semantics.c (process_outer_var_ref): Only skip dependent types\n\tin templates.\n\n\tPR c++/86610\n\t* g++.dg/cpp0x/pr86610.C: New.\n\nFrom-SVN: r268016", "tree": {"sha": "74d7a86f509de000262ea8da0863b3d4b9560707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74d7a86f509de000262ea8da0863b3d4b9560707"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e32fc4499f863fe0fa81767d11f40ad2f1ab1668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32fc4499f863fe0fa81767d11f40ad2f1ab1668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e32fc4499f863fe0fa81767d11f40ad2f1ab1668", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32fc4499f863fe0fa81767d11f40ad2f1ab1668/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fc881de2825e37142436efcfd7537cc467f3430c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc881de2825e37142436efcfd7537cc467f3430c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc881de2825e37142436efcfd7537cc467f3430c"}], "stats": {"total": 47, "additions": 44, "deletions": 3}, "files": [{"sha": "dec8d64d46f118fc34829f63fb2e1b22533d99d8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32fc4499f863fe0fa81767d11f40ad2f1ab1668/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32fc4499f863fe0fa81767d11f40ad2f1ab1668/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e32fc4499f863fe0fa81767d11f40ad2f1ab1668", "patch": "@@ -1,3 +1,9 @@\n+2019-01-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/86610\n+\t* semantics.c (process_outer_var_ref): Only skip dependent types\n+\tin templates.\n+\n 2019-01-17  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR c++/87768"}, {"sha": "e654750d249d7139394be767278b0e9f5ac2bf49", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32fc4499f863fe0fa81767d11f40ad2f1ab1668/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32fc4499f863fe0fa81767d11f40ad2f1ab1668/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e32fc4499f863fe0fa81767d11f40ad2f1ab1668", "patch": "@@ -3438,10 +3438,9 @@ process_outer_var_ref (tree decl, tsubst_flags_t complain, bool odr_use)\n     }\n \n   /* In a lambda within a template, wait until instantiation\n-     time to implicitly capture.  */\n+     time to implicitly capture a dependent type.  */\n   if (context == containing_function\n-      && DECL_TEMPLATE_INFO (containing_function)\n-      && uses_template_parms (DECL_TI_ARGS (containing_function)))\n+      && dependent_type_p (TREE_TYPE (decl)))\n     return decl;\n \n   if (lambda_expr && VAR_P (decl)"}, {"sha": "3075f478bdb010e09698eaf3080588564db70dcc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32fc4499f863fe0fa81767d11f40ad2f1ab1668/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32fc4499f863fe0fa81767d11f40ad2f1ab1668/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e32fc4499f863fe0fa81767d11f40ad2f1ab1668", "patch": "@@ -1,3 +1,8 @@\n+2019-01-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/86610\n+\t* g++.dg/cpp0x/pr86610.C: New.\n+\n 2019-01-17  Wei Xiao  <wei3.xiao@intel.com>\n \n \t* gcc.target/i386/avx512f-vfixupimmpd-2.c: Fix the test cases for"}, {"sha": "dc0e2f5d52ed90bfe8a951cec06b463193463daf", "filename": "gcc/testsuite/g++.dg/cpp0x/pr86610.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e32fc4499f863fe0fa81767d11f40ad2f1ab1668/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr86610.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e32fc4499f863fe0fa81767d11f40ad2f1ab1668/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr86610.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr86610.C?ref=e32fc4499f863fe0fa81767d11f40ad2f1ab1668", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do run { target c++11 } }\n+// PR c++86610 lambda capture inside template\n+\n+struct C\n+{\n+  int operator[](int)\n+  { return 1; }\n+\n+  int operator[](int) const\n+  { return 0; } // Want this one\n+};\n+\n+int q()\n+{\n+  C c;\n+  return [=] { return c[0]; }();\n+}\n+\n+template <typename T>\n+int f()\n+{\n+  C c;\n+  T d;\n+  return [=] { return c[0]; }() \n+    + [=] { return c[0] + d[0]; }();\n+}\n+\n+int main()\n+{\n+  return q () + f<C>();\n+}"}]}