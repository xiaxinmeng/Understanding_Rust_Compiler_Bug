{"sha": "b45a9ff305f536031a12509c6c6e7aea9cb7f884", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ1YTlmZjMwNWY1MzYwMzFhMTI1MDljNmM2ZTdhZWE5Y2I3Zjg4NA==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2018-09-26T09:17:21Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-09-26T09:17:21Z"}, "message": "[Ada] Crash on expression functions within quantified expressions\n\nThis patch fixes an issue whereby using a call to an expression function\nas the domain of iteration for a loop would trigger a crash due to the\nfunction not being frozen appropriately.\n\n2018-09-26  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch5.adb (Analyze_Iterator_Specification): Add conditional\n\tto freeze called functions within iterator specifications during\n\tfull analysis.\n\t(Preanalyze_Range): Minor typo fix.\n\ngcc/testsuite/\n\n\t* gnat.dg/expr_func8.adb: New testcase.\n\nFrom-SVN: r264612", "tree": {"sha": "e50986c734e96e988f0412ebc25891b9b39455e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e50986c734e96e988f0412ebc25891b9b39455e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b45a9ff305f536031a12509c6c6e7aea9cb7f884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b45a9ff305f536031a12509c6c6e7aea9cb7f884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b45a9ff305f536031a12509c6c6e7aea9cb7f884", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b45a9ff305f536031a12509c6c6e7aea9cb7f884/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bcbe14db192f03018ea74cf6eb24c04a110ecac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcbe14db192f03018ea74cf6eb24c04a110ecac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcbe14db192f03018ea74cf6eb24c04a110ecac0"}], "stats": {"total": 69, "additions": 65, "deletions": 4}, "files": [{"sha": "4ab1bcd54aaff971cad222f9d8857815fba10e18", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45a9ff305f536031a12509c6c6e7aea9cb7f884/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45a9ff305f536031a12509c6c6e7aea9cb7f884/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b45a9ff305f536031a12509c6c6e7aea9cb7f884", "patch": "@@ -1,3 +1,10 @@\n+2018-09-26  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iterator_Specification): Add conditional\n+\tto freeze called functions within iterator specifications during\n+\tfull analysis.\n+\t(Preanalyze_Range): Minor typo fix.\n+\n 2018-09-26  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch6.adb (Analyze_Function_Return): If the return type has"}, {"sha": "2f4469133500f91d013ddd9e6d1e1760527e2c6b", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45a9ff305f536031a12509c6c6e7aea9cb7f884/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45a9ff305f536031a12509c6c6e7aea9cb7f884/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=b45a9ff305f536031a12509c6c6e7aea9cb7f884", "patch": "@@ -2203,6 +2203,19 @@ package body Sem_Ch5 is\n \n       Preanalyze_Range (Iter_Name);\n \n+      --  If the domain of iteration is a function call, make sure the function\n+      --  itself is frozen. This is an issue if this is a local expression\n+      --  function.\n+\n+      if Nkind (Iter_Name) = N_Function_Call\n+        and then Is_Entity_Name (Name (Iter_Name))\n+        and then Full_Analysis\n+        and then (In_Assertion_Expr = 0\n+                   or else Assertions_Enabled)\n+      then\n+         Freeze_Before (N, Entity (Name (Iter_Name)));\n+      end if;\n+\n       --  Set the kind of the loop variable, which is not visible within the\n       --  iterator name.\n \n@@ -4136,10 +4149,10 @@ package body Sem_Ch5 is\n       Full_Analysis := False;\n       Expander_Mode_Save_And_Set (False);\n \n-      --  In addition to the above we must ecplicity suppress the\n-      --  generation of freeze nodes which might otherwise be generated\n-      --  during resolution of the range (e.g. if given by an attribute\n-      --  that will freeze its prefix).\n+      --  In addition to the above we must explicitly suppress the generation\n+      --  of freeze nodes that might otherwise be generated during resolution\n+      --  of the range (e.g. if given by an attribute that will freeze its\n+      --  prefix).\n \n       Set_Must_Not_Freeze (R_Copy);\n "}, {"sha": "f8591aa6db977b546d41af2fc2d2a3a585e74f46", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45a9ff305f536031a12509c6c6e7aea9cb7f884/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45a9ff305f536031a12509c6c6e7aea9cb7f884/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b45a9ff305f536031a12509c6c6e7aea9cb7f884", "patch": "@@ -1,3 +1,7 @@\n+2018-09-26  Justin Squirek  <squirek@adacore.com>\n+\n+\t* gnat.dg/expr_func8.adb: New testcase.\n+\n 2018-09-26  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/predicate3.adb, gnat.dg/predicate3_pkg.ads: New"}, {"sha": "90d3c9382d42a532c88c7a46b2a2b42248c43c35", "filename": "gcc/testsuite/gnat.dg/expr_func8.adb", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b45a9ff305f536031a12509c6c6e7aea9cb7f884/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b45a9ff305f536031a12509c6c6e7aea9cb7f884/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fexpr_func8.adb?ref=b45a9ff305f536031a12509c6c6e7aea9cb7f884", "patch": "@@ -0,0 +1,37 @@\n+--  { dg-do compile }\n+--  { dg-options \"-gnata\" }\n+\n+procedure Expr_Func8 is\n+\n+   type Node_Set is array (Positive range <>) of Integer;\n+\n+   function Nodes return Node_Set is\n+     ((1,2,3,4,5,6,7,8,9));\n+\n+   X1 : Boolean := (for all N of Nodes => N = N);\n+\n+   function Predecessors (N : Integer) return Node_Set Is\n+      (Nodes (1 .. N - 1));\n+   function Successors (N : Integer) return Node_Set Is\n+      (Nodes (N + 1 .. Nodes'Last));\n+\n+   pragma Assert\n+     (for all N of Nodes =>\n+       (for some S of Successors (N) => S = N));\n+\n+   X2 : Boolean :=\n+     (for all N of Nodes =>\n+       (for some S of Successors (N) => S = N));\n+\n+   X3 : Boolean :=\n+     (for all N of Nodes =>\n+       (for some S of Successors (N) => S = N)) with Ghost;\n+\n+   pragma Assert\n+      (for all N of Nodes =>\n+      (for all P of Predecessors (N) =>\n+      (for some S of Successors (P) => S = N)));\n+\n+begin\n+   null;\n+end;"}]}