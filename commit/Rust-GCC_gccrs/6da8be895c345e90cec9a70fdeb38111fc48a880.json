{"sha": "6da8be895c345e90cec9a70fdeb38111fc48a880", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRhOGJlODk1YzM0NWU5MGNlYzlhNzBmZGViMzgxMTFmYzQ4YTg4MA==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2012-06-15T14:40:38Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2012-06-15T14:40:38Z"}, "message": "gimplify.c (gimplify_modify_expr): Fold generated statements.\n\n\t* gimplify.c (gimplify_modify_expr): Fold generated statements.\n\t* gimple-fold.c (can_refer_decl_in_current_unit_p): Check flag_ltrans.\n\ntestsuite/\n\t* gcc.dg/debug/dwarf2/inline3.c: Adjust.\n\t* gcc.dg/tree-ssa/foldstring-1.c: Adjust.\n\nFrom-SVN: r188664", "tree": {"sha": "97534b2183367e8929d27bfc21c1ffdec14eb2a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97534b2183367e8929d27bfc21c1ffdec14eb2a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6da8be895c345e90cec9a70fdeb38111fc48a880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da8be895c345e90cec9a70fdeb38111fc48a880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6da8be895c345e90cec9a70fdeb38111fc48a880", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da8be895c345e90cec9a70fdeb38111fc48a880/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef5ad3b74564ef8039552d4d4e8098569fef3355", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef5ad3b74564ef8039552d4d4e8098569fef3355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef5ad3b74564ef8039552d4d4e8098569fef3355"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "7f21827f86a72f5e22e2e4cd2f4b325b8cc6abb2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da8be895c345e90cec9a70fdeb38111fc48a880/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da8be895c345e90cec9a70fdeb38111fc48a880/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6da8be895c345e90cec9a70fdeb38111fc48a880", "patch": "@@ -1,3 +1,8 @@\n+2012-06-15  Michael Matz  <matz@suse.de>\n+\n+\t* gimplify.c (gimplify_modify_expr): Fold generated statements.\n+\t* gimple-fold.c (can_refer_decl_in_current_unit_p): Check flag_ltrans.\n+\n 2012-06-15  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vrp.c (set_and_canonicalize_value_range): Use canonical"}, {"sha": "08e960363b6c0f614f9f87417cccb60292c283de", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da8be895c345e90cec9a70fdeb38111fc48a880/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da8be895c345e90cec9a70fdeb38111fc48a880/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=6da8be895c345e90cec9a70fdeb38111fc48a880", "patch": "@@ -61,19 +61,21 @@ can_refer_decl_in_current_unit_p (tree decl, tree from_decl)\n   struct cgraph_node *node;\n   symtab_node snode;\n \n-  /* We will later output the initializer, so we can reffer to it.\n+  /* We will later output the initializer, so we can refer to it.\n      So we are concerned only when DECL comes from initializer of\n      external var.  */\n   if (!from_decl\n       || TREE_CODE (from_decl) != VAR_DECL\n       || !DECL_EXTERNAL (from_decl)\n-      || (symtab_get_node (from_decl)->symbol.in_other_partition))\n+      || (flag_ltrans\n+\t  && symtab_get_node (from_decl)->symbol.in_other_partition))\n     return true;\n-  /* We are concerned ony about static/external vars and functions.  */\n+  /* We are concerned only about static/external vars and functions.  */\n   if ((!TREE_STATIC (decl) && !DECL_EXTERNAL (decl))\n       || (TREE_CODE (decl) != VAR_DECL && TREE_CODE (decl) != FUNCTION_DECL))\n     return true;\n-  /* Weakrefs have somewhat confusing DECL_EXTERNAL flag set; they are always safe.  */\n+  /* Weakrefs have somewhat confusing DECL_EXTERNAL flag set; they\n+     are always safe.  */\n   if (DECL_EXTERNAL (decl)\n       && lookup_attribute (\"weakref\", DECL_ATTRIBUTES (decl)))\n     return true;"}, {"sha": "c59e754bb6f3f8c53f7a1b40747b19cb10392129", "filename": "gcc/gimplify.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da8be895c345e90cec9a70fdeb38111fc48a880/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da8be895c345e90cec9a70fdeb38111fc48a880/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=6da8be895c345e90cec9a70fdeb38111fc48a880", "patch": "@@ -4772,6 +4772,7 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n   enum gimplify_status ret = GS_UNHANDLED;\n   gimple assign;\n   location_t loc = EXPR_LOCATION (*expr_p);\n+  gimple_stmt_iterator gsi;\n \n   gcc_assert (TREE_CODE (*expr_p) == MODIFY_EXPR\n \t      || TREE_CODE (*expr_p) == INIT_EXPR);\n@@ -4912,8 +4913,6 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n       gimple_set_location (assign, EXPR_LOCATION (*expr_p));\n     }\n \n-  gimplify_seq_add_stmt (pre_p, assign);\n-\n   if (gimplify_ctxp->into_ssa && is_gimple_reg (*to_p))\n     {\n       /* If we've somehow already got an SSA_NAME on the LHS, then\n@@ -4923,6 +4922,10 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n       gimple_set_lhs (assign, *to_p);\n     }\n \n+  gimplify_seq_add_stmt (pre_p, assign);\n+  gsi = gsi_last (*pre_p);\n+  fold_stmt (&gsi);\n+\n   if (want_value)\n     {\n       *expr_p = TREE_THIS_VOLATILE (*to_p) ? *from_p : unshare_expr (*to_p);"}, {"sha": "44215ff1e32bc2816c44b520dfcb260ae549bf74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da8be895c345e90cec9a70fdeb38111fc48a880/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da8be895c345e90cec9a70fdeb38111fc48a880/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6da8be895c345e90cec9a70fdeb38111fc48a880", "patch": "@@ -1,3 +1,8 @@\n+2012-06-15  Michael Matz  <matz@suse.de>\n+\n+\t* gcc.dg/debug/dwarf2/inline3.c: Adjust.\n+\t* gcc.dg/tree-ssa/foldstring-1.c: Adjust.\n+\n 2012-06-15  Ulrich Weigand  <ulrich.weigand@linaro.org>\n \n \tPR tree-optimization/53636"}, {"sha": "d2d3e0fd8a84fd8fbd3105e797ae5716b7cea234", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/inline3.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da8be895c345e90cec9a70fdeb38111fc48a880/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da8be895c345e90cec9a70fdeb38111fc48a880/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline3.c?ref=6da8be895c345e90cec9a70fdeb38111fc48a880", "patch": "@@ -1,7 +1,7 @@\n /* Verify that only one DW_AT_const_value is emitted for baz,\n    not for baz abstract DIE and again inside of\n    DW_TAG_inlined_subroutine.  */\n-/* { dg-options \"-O2 -g -dA\" } */\n+/* { dg-options \"-O2 -g -dA -fmerge-all-constants\" } */\n /* { dg-do compile } */\n /* { dg-final { scan-assembler-times \" DW_AT_const_value\" 1 } } */\n \n@@ -11,6 +11,9 @@ static inline long\n foo (void)\n {\n   const struct A baz = { .i = 2, .j = 21 };\n+  /* We must make sure that baz isn't optimized away before inlining,\n+     otherwise its initializer is also lost.  */\n+  const struct A *p = &baz;\n   asm volatile (\"\" : : : \"memory\");\n   return baz.i * baz.j;\n }"}, {"sha": "e738a44ab007bb5b85bd2a5f8eac9772e9890f84", "filename": "gcc/testsuite/gcc.dg/tree-ssa/foldstring-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da8be895c345e90cec9a70fdeb38111fc48a880/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldstring-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da8be895c345e90cec9a70fdeb38111fc48a880/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldstring-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Ffoldstring-1.c?ref=6da8be895c345e90cec9a70fdeb38111fc48a880", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-fre1\" } */\n+/* { dg-options \"-O1 -fdump-tree-gimple\" } */\n \n void\n arf ()\n {\n   if (\"\"[0] == 0)\n     blah ();\n }\n-/* { dg-final { scan-tree-dump-times \"= 0;\" 1 \"fre1\"} } */\n-/* { dg-final { cleanup-tree-dump \"fre1\" } } */\n+/* { dg-final { scan-tree-dump-times \"= 0;\" 1 \"gimple\"} } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}]}