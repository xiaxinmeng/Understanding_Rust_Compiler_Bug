{"sha": "304ccb107580ec81f3d44fbf0ecf5b0a66c291f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA0Y2NiMTA3NTgwZWM4MWYzZDQ0ZmJmMGVjZjViMGE2NmMyOTFmMA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-02-11T17:32:52Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-02-11T17:32:52Z"}, "message": "natFileDescriptorPosix.cc (open): Recognize EXCL flag.\n\n\t* java/io/natFileDescriptorPosix.cc (open): Recognize EXCL flag.\n\t* java/io/FileDescriptor.java (EXCL): New static field.\n\t* java/io/File.java (tmpdir): New static field.\n\t(createTempFile): New method.\n\t(nextValue): New method.\n\t* java/lang/natSystem.cc (init_properties): Set java.io.tmpdir\n\tproperty.\n\nFrom-SVN: r31922", "tree": {"sha": "12601bfce83cfa5636689e3f8af63f4c45a4c273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12601bfce83cfa5636689e3f8af63f4c45a4c273"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/304ccb107580ec81f3d44fbf0ecf5b0a66c291f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/304ccb107580ec81f3d44fbf0ecf5b0a66c291f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/304ccb107580ec81f3d44fbf0ecf5b0a66c291f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/304ccb107580ec81f3d44fbf0ecf5b0a66c291f0/comments", "author": null, "committer": null, "parents": [{"sha": "a1cee8a3f3ce4487e9671739b4db2d1c5ec6e56c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1cee8a3f3ce4487e9671739b4db2d1c5ec6e56c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1cee8a3f3ce4487e9671739b4db2d1c5ec6e56c"}], "stats": {"total": 96, "additions": 92, "deletions": 4}, "files": [{"sha": "35e132ee19a289eb41bdaf27db5ced70dfff34a3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304ccb107580ec81f3d44fbf0ecf5b0a66c291f0/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304ccb107580ec81f3d44fbf0ecf5b0a66c291f0/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=304ccb107580ec81f3d44fbf0ecf5b0a66c291f0", "patch": "@@ -1,5 +1,13 @@\n 2000-02-10  Tom Tromey  <tromey@cygnus.com>\n \n+\t* java/io/natFileDescriptorPosix.cc (open): Recognize EXCL flag.\n+\t* java/io/FileDescriptor.java (EXCL): New static field.\n+\t* java/io/File.java (tmpdir): New static field.\n+\t(createTempFile): New method.\n+\t(nextValue): New method.\n+\t* java/lang/natSystem.cc (init_properties): Set java.io.tmpdir\n+\tproperty.\n+\n \t* include/jni.h (JNI_FALSE): Renamed from JNI_TRUE; oops.\n \t(jboolean): Declare as an attributed int, not a bool.\n \t(_Jv_func): Declare differently for C."}, {"sha": "229125e41c289f309971ccba920532bc08079961", "filename": "libjava/java/io/File.java", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304ccb107580ec81f3d44fbf0ecf5b0a66c291f0/libjava%2Fjava%2Fio%2FFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304ccb107580ec81f3d44fbf0ecf5b0a66c291f0/libjava%2Fjava%2Fio%2FFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFile.java?ref=304ccb107580ec81f3d44fbf0ecf5b0a66c291f0", "patch": "@@ -1,6 +1,6 @@\n // File.java - File name\n \n-/* Copyright (C) 1998, 1999  Red Hat, Inc.\n+/* Copyright (C) 1998, 1999, 2000  Red Hat, Inc.\n \n    This file is part of libgcj.\n \n@@ -215,6 +215,68 @@ public boolean mkdirs ()\n     return mkdirs (new File (path));\n   }\n \n+  private static String nextValue ()\n+  {\n+    return Long.toString(counter++, Character.MAX_RADIX);\n+  }\n+\n+  public static File createTempFile (String prefix, String suffix,\n+\t\t\t\t     File directory)\n+    throws IOException\n+  {\n+    FileDescriptor desc = new FileDescriptor ();\n+\n+    SecurityManager s = System.getSecurityManager();\n+    if (s != null)\n+      s.checkWrite (desc);\n+\n+    if (prefix.length () < 3)\n+      throw new IllegalArgumentException ();\n+    if (suffix == null)\n+      suffix = \".tmp\";\n+\n+    // FIXME: filename length varies by architecture and filesystem.\n+    int max_length = 255;\n+\n+    // Truncation rules.\n+    // `6' is the number of characters we generate.\n+    if (prefix.length () + 6 + suffix.length () > max_length)\n+      {\n+\tint suf_len = 0;\n+\tif (suffix.charAt(0) == '.')\n+\t  suf_len = 4;\n+\tsuffix = suffix.substring(0, suf_len);\n+\tif (prefix.length () + 6 + suf_len > max_length)\n+\t  prefix = prefix.substring(0, max_length - 6 - suf_len);\n+      }\n+\n+    // We don't care about the name because we set it later.\n+    File ret = new File (\"\");\n+    // How many times should we try?  We choose 100.\n+    for (int i = 0; i < 100; ++i)\n+      {\n+\t// This is ugly.\n+\tString l = prefix + (nextValue () + \"ZZZZZZ\").substring(0,6) + suffix;\n+\ttry\n+\t  {\n+\t    desc.open (l, FileDescriptor.WRITE | FileDescriptor.EXCL);\n+\t    ret.setPath(l);\n+\t    return ret;\n+\t  }\n+\tcatch (IOException _)\n+\t  {\n+\t  }\n+      }\n+\n+    throw new IOException (\"couldn't make temp file\");\n+  }\n+\n+  public static File createTempFile (String prefix, String suffix)\n+    throws IOException\n+  {\n+    return createTempFile (prefix, suffix, null);\n+  }\n+\n   private final native boolean performRenameTo (File dest);\n   public boolean renameTo (File dest)\n   {\n@@ -234,10 +296,15 @@ public boolean renameTo (File dest)\n   public static final String separator = System.getProperty(\"file.separator\");\n   public static final char separatorChar = separator.charAt(0);\n \n+  private static final String tmpdir = System.getProperty(\"java.io.tmpdir\");\n \n   // The path.\n   private String path;\n \n+  // We keep a counter for use by createTempFile.  We choose the first\n+  // value randomly to try to avoid clashes with other VMs.\n+  private static long counter = Double.doubleToLongBits (Math.random ());\n+\n   // mkdirs() uses this to avoid repeated allocations.\n   private final void setPath (String n)\n   {"}, {"sha": "541c07a99fb2ca610cbd745271733784978e0b75", "filename": "libjava/java/io/FileDescriptor.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304ccb107580ec81f3d44fbf0ecf5b0a66c291f0/libjava%2Fjava%2Fio%2FFileDescriptor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304ccb107580ec81f3d44fbf0ecf5b0a66c291f0/libjava%2Fjava%2Fio%2FFileDescriptor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileDescriptor.java?ref=304ccb107580ec81f3d44fbf0ecf5b0a66c291f0", "patch": "@@ -1,6 +1,6 @@\n // FileDescriptor.java - Open file or device\n \n-/* Copyright (C) 1998, 1999  Red Hat, Inc.\n+/* Copyright (C) 1998, 1999, 2000  Red Hat, Inc.\n \n    This file is part of libgcj.\n \n@@ -36,6 +36,8 @@\n   static final int READ   = 1;\n   static final int WRITE  = 2;\n   static final int APPEND = 4;\n+  // EXCL is used only when making a temp file.\n+  static final int EXCL   = 8;\n \n   // These are WHENCE values for seek.\n   static final int SET = 0;"}, {"sha": "6538960705bfce298631de2ed232a3bbe971027d", "filename": "libjava/java/io/natFileDescriptorPosix.cc", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304ccb107580ec81f3d44fbf0ecf5b0a66c291f0/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304ccb107580ec81f3d44fbf0ecf5b0a66c291f0/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FnatFileDescriptorPosix.cc?ref=304ccb107580ec81f3d44fbf0ecf5b0a66c291f0", "patch": "@@ -1,6 +1,6 @@\n // natFileDescriptor.cc - Native part of FileDescriptor class.\n \n-/* Copyright (C) 1998, 1999  Red Hat, Inc.\n+/* Copyright (C) 1998, 1999, 2000  Red Hat, Inc.\n \n    This file is part of libgcj.\n \n@@ -83,6 +83,7 @@ java::io::FileDescriptor::open (jstring path, jint jflags)\n #endif\n \n   JvAssert ((jflags & READ) || (jflags & WRITE));\n+  int mode = 0644;\n   if ((jflags & READ) && (jflags & WRITE))\n     flags |= O_RDWR;\n   else if ((jflags & READ))\n@@ -94,9 +95,16 @@ java::io::FileDescriptor::open (jstring path, jint jflags)\n \tflags |= O_APPEND;\n       else\n \tflags |= O_TRUNC;\n+\n+      if ((jflags & EXCL))\n+\t{\n+\t  flags |= O_EXCL;\n+\t  // In this case we are making a temp file.\n+\t  mode = 0600;\n+\t}\n     }\n \n-  int fd = ::open (buf, flags, 0644);\n+  int fd = ::open (buf, flags, mode);\n   if (fd == -1)\n     {\n       char msg[MAXPATHLEN + 200];"}, {"sha": "35093df927ed2aad153f42fe2682a0f57f555a8b", "filename": "libjava/java/lang/natSystem.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304ccb107580ec81f3d44fbf0ecf5b0a66c291f0/libjava%2Fjava%2Flang%2FnatSystem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304ccb107580ec81f3d44fbf0ecf5b0a66c291f0/libjava%2Fjava%2Flang%2FnatSystem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatSystem.cc?ref=304ccb107580ec81f3d44fbf0ecf5b0a66c291f0", "patch": "@@ -270,11 +270,14 @@ java::lang::System::init_properties (void)\n   SET (\"file.separator\", \"\\\\\");\n   SET (\"path.separator\", \";\");\n   SET (\"line.separator\", \"\\r\\n\");\n+  SET (\"java.io.tmpdir\", \"C:\\\\temp\");\n #else\n   // Unix.\n   SET (\"file.separator\", \"/\");\n   SET (\"path.separator\", \":\");\n   SET (\"line.separator\", \"\\n\");\n+  // FIXME: look at getenv(\"TMPDIR\");\n+  SET (\"java.io.tmpdir\", \"/tmp\");\n #endif\n \n #ifdef HAVE_UNAME"}]}