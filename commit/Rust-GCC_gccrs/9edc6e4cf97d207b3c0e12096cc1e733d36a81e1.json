{"sha": "9edc6e4cf97d207b3c0e12096cc1e733d36a81e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWVkYzZlNGNmOTdkMjA3YjNjMGUxMjA5NmNjMWU3MzNkMzZhODFlMQ==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2014-10-14T20:53:29Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2014-10-14T20:53:29Z"}, "message": "More missed bits from the big __intN patch\n\nFrom-SVN: r216222", "tree": {"sha": "86a7ed83411ac670ac0ff149d0c718c8bca646b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86a7ed83411ac670ac0ff149d0c718c8bca646b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9edc6e4cf97d207b3c0e12096cc1e733d36a81e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9edc6e4cf97d207b3c0e12096cc1e733d36a81e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9edc6e4cf97d207b3c0e12096cc1e733d36a81e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9edc6e4cf97d207b3c0e12096cc1e733d36a81e1/comments", "author": null, "committer": null, "parents": [{"sha": "e1217ac7f26aca7f383229eea72dc895007cb8a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1217ac7f26aca7f383229eea72dc895007cb8a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1217ac7f26aca7f383229eea72dc895007cb8a8"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "d9941141041ed1fc09a5deabd8a5c2c0f38caf52", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edc6e4cf97d207b3c0e12096cc1e733d36a81e1/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edc6e4cf97d207b3c0e12096cc1e733d36a81e1/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=9edc6e4cf97d207b3c0e12096cc1e733d36a81e1", "patch": "@@ -9711,10 +9711,7 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t    case RID_INT_N_2:\n \t    case RID_INT_N_3:\n \t      specs->int_n_idx = i - RID_INT_N_0;\n-\t      if (!in_system_header_at (input_location)\n-\t\t  /* As a special exception, allow a type that's used\n-\t\t     for __SIZE_TYPE__.  */\n-\t\t  && int_n_data[specs->int_n_idx].bitsize != POINTER_SIZE)\n+\t      if (!in_system_header_at (input_location))\n \t\tpedwarn (loc, OPT_Wpedantic,\n \t\t\t \"ISO C does not support %<__int%d%> types\",\n \t\t\t int_n_data[specs->int_n_idx].bitsize);"}, {"sha": "99f4b8830d2b7424b42a49ebc562903e68de1dab", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9edc6e4cf97d207b3c0e12096cc1e733d36a81e1/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9edc6e4cf97d207b3c0e12096cc1e733d36a81e1/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9edc6e4cf97d207b3c0e12096cc1e733d36a81e1", "patch": "@@ -365,20 +365,6 @@ cp_common_type (tree t1, tree t2)\n \t\t    : long_long_integer_type_node);\n \t  return build_type_attribute_variant (t, attributes);\n \t}\n-      for (i = 0; i < NUM_INT_N_ENTS; i ++)\n-\t{\n-\t  if (int_n_enabled_p [i]\n-\t      && (same_type_p (TYPE_MAIN_VARIANT (t1),\n-\t\t\t       int_n_trees[i].signed_type)\n-\t\t  || same_type_p (TYPE_MAIN_VARIANT (t2),\n-\t\t\t\t  int_n_trees[i].signed_type)))\n-\t    {\n-\t      tree t = ((TYPE_UNSIGNED (t1) || TYPE_UNSIGNED (t2))\n-\t\t\t? int_n_trees[i].unsigned_type\n-\t\t\t: int_n_trees[i].signed_type);\n-\t      return build_type_attribute_variant (t, attributes);\n-\t    }\n-\t}\n \n       /* Go through the same procedure, but for longs.  */\n       if (same_type_p (TYPE_MAIN_VARIANT (t1), long_unsigned_type_node)\n@@ -392,6 +378,26 @@ cp_common_type (tree t1, tree t2)\n \t\t    ? long_unsigned_type_node : long_integer_type_node);\n \t  return build_type_attribute_variant (t, attributes);\n \t}\n+\n+      /* For __intN types, either the type is __int128 (and is lower\n+\t priority than the types checked above, but higher than other\n+\t 128-bit types) or it's known to not be the same size as other\n+\t types (enforced in toplev.c).  Prefer the unsigned type. */\n+      for (i = 0; i < NUM_INT_N_ENTS; i ++)\n+\t{\n+\t  if (int_n_enabled_p [i]\n+\t      && (same_type_p (TYPE_MAIN_VARIANT (t1), int_n_trees[i].signed_type)\n+\t\t  || same_type_p (TYPE_MAIN_VARIANT (t2), int_n_trees[i].signed_type)\n+\t\t  || same_type_p (TYPE_MAIN_VARIANT (t1), int_n_trees[i].unsigned_type)\n+\t\t  || same_type_p (TYPE_MAIN_VARIANT (t2), int_n_trees[i].unsigned_type)))\n+\t    {\n+\t      tree t = ((TYPE_UNSIGNED (t1) || TYPE_UNSIGNED (t2))\n+\t\t\t? int_n_trees[i].unsigned_type\n+\t\t\t: int_n_trees[i].signed_type);\n+\t      return build_type_attribute_variant (t, attributes);\n+\t    }\n+\t}\n+\n       /* Otherwise prefer the unsigned one.  */\n       if (TYPE_UNSIGNED (t1))\n \treturn build_type_attribute_variant (t1, attributes);"}]}