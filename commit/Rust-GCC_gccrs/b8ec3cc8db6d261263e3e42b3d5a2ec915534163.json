{"sha": "b8ec3cc8db6d261263e3e42b3d5a2ec915534163", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhlYzNjYzhkYjZkMjYxMjYzZTNlNDJiM2Q1YTJlYzkxNTUzNDE2Mw==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-11-09T23:56:57Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-11-09T23:56:57Z"}, "message": "re PR bootstrap/26892 (Can't compile a 64-bit gcc)\n\n2006-11-09  Eric Christopher  <echristo@apple.com>\n\n        PR bootstrap/26892\n        PR bootstrap/27814\n        PR other/28994\n        * configure.ac: Match powerpc*-*-darwin* for powerpc darwin checks.\n        * config.gcc (powerpc64-*-darwin*): New target.\n        * config.host: Ditto.\n        * config/rs6000/darwin64.h: New file.\n        * config/rs6000/x-darwin64: Ditto.\n        * config/rs6000/host-ppc64-darwin.c: Ditto.\n\nFrom-SVN: r118633", "tree": {"sha": "10154e12ba067e5cf04925eae7c4ecdf66094e92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10154e12ba067e5cf04925eae7c4ecdf66094e92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8ec3cc8db6d261263e3e42b3d5a2ec915534163", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ec3cc8db6d261263e3e42b3d5a2ec915534163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8ec3cc8db6d261263e3e42b3d5a2ec915534163", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/comments", "author": null, "committer": null, "parents": [{"sha": "bdbba3c27ea90684291579efcf27d9f346bd1db7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdbba3c27ea90684291579efcf27d9f346bd1db7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdbba3c27ea90684291579efcf27d9f346bd1db7"}], "stats": {"total": 10779, "additions": 6407, "deletions": 4372}, "files": [{"sha": "c9c7df8bcb55a7ea1961b1af27be7f8c5463aa31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8ec3cc8db6d261263e3e42b3d5a2ec915534163", "patch": "@@ -1,3 +1,15 @@\n+2006-11-09  Eric Christopher  <echristo@apple.com>\n+\n+\tPR bootstrap/26892\n+\tPR bootstrap/27814\n+\tPR other/28994\n+\t* configure.ac: Match powerpc*-*-darwin* for powerpc darwin checks.\n+\t* config.gcc (powerpc64-*-darwin*): New target.\n+\t* config.host: Ditto.\n+\t* config/rs6000/darwin64.h: New file.\n+\t* config/rs6000/x-darwin64: Ditto.\n+\t* config/rs6000/host-ppc64-darwin.c: Ditto.\n+\n 2006-11-09  Steve Ellcey  <sje@cup.hp.com>\n \n \t* config/ia64/ia64.c (ia64_hpux_init_libfuncs):  Use HP-UX millicode\n@@ -14,7 +26,7 @@\n \n 2006-11-09  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n-\t* simplify-rtx.c (avoid_constant_pool_reference): Avoid calling \n+\t* simplify-rtx.c (avoid_constant_pool_reference): Avoid calling\n \tsimplify_subreg with BLKmode outer mode.\n \n 2006-11-08  Brooks Moses  <brooks.moses@codesourcery.com>\n@@ -44,7 +56,7 @@\n \n 2006-11-08  Andrew Pinski  <Andrew_Pinski@playstation.sony.com>\n \n-\t* tree-pretty-print.c (dump_generic_node) <INTEGER_CST>: Use \n+\t* tree-pretty-print.c (dump_generic_node) <INTEGER_CST>: Use\n \tHOST_WIDE_INT_PRINT_DOUBLE_HEX instead of format buffer.\n \n 2006-11-08  Roger Sayle  <roger@eyesopen.com>\n@@ -65,7 +77,7 @@\n \n 2006-11-08  Dorit Nuzman  <dorit@il.ibm.com>\n \n-\t* tree-vect-analyze.c (vect_mark_relevant, vect_stmt_relevant_p): Take \n+\t* tree-vect-analyze.c (vect_mark_relevant, vect_stmt_relevant_p): Take\n \tenum argument instead of bool.\n \t(vect_analyze_operations): Call vectorizable_type_promotion.\n \t* tree-vectorizer.h (type_promotion_vec_info_type): New enum\n@@ -76,14 +88,14 @@\n \t(vectorizable_type_promotion): New function.\n \t(vect_transform_stmt): Call vectorizable_type_promotion.\n \t* tree-vect-analyze.c (supportable_widening_operation): New function.\n-\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern): \n+\t* tree-vect-patterns.c (vect_recog_dot_prod_pattern):\n \tAdd implementation.\n \t* tree-vect-generic.c (expand_vector_operations_1): Consider correct\n \tmode.\n-\t\n+\n \t* tree.def (VEC_WIDEN_MULT_HI_EXPR, VEC_WIDEN_MULT_LO_EXPR):\n \t(VEC_UNPACK_HI_EXPR, VEC_UNPACK_LO_EXPR): New tree-codes.\n-\t* tree-inline.c (estimate_num_insns_1): Add cases for above new \n+\t* tree-inline.c (estimate_num_insns_1): Add cases for above new\n \ttree-codes.\n \t* tree-pretty-print.c (dump_generic_node, op_prio): Likewise.\n \t* expr.c (expand_expr_real_1): Likewise.\n@@ -95,19 +107,19 @@\n \tvec_unpacku_lo_optab): Initialize new optabs.\n \t* optabs.h (OTI_vec_widen_umult_hi, OTI_vec_widen_umult_lo):\n \t(OTI_vec_widen_smult_h, OTI_vec_widen_smult_lo, OTI_vec_unpacks_hi,\n-\tOTI_vec_unpacks_lo, OTI_vec_unpacku_hi, OTI_vec_unpacku_lo): New \n+\tOTI_vec_unpacks_lo, OTI_vec_unpacku_hi, OTI_vec_unpacku_lo): New\n \toptab indices.\n \t(vec_widen_umult_hi_optab, vec_widen_umult_lo_optab):\n \t(vec_widen_smult_hi_optab, vec_widen_smult_lo_optab):\n \t(vec_unpacks_hi_optab, vec_unpacku_hi_optab, vec_unpacks_lo_optab):\n \t(vec_unpacku_lo_optab): New optabs.\n-\t* doc/md.texi (vec_unpacks_hi, vec_unpacks_lo, vec_unpacku_hi): \n-\t(vec_unpacku_lo, vec_widen_umult_hi, vec_widen_umult_lo): \n+\t* doc/md.texi (vec_unpacks_hi, vec_unpacks_lo, vec_unpacku_hi):\n+\t(vec_unpacku_lo, vec_widen_umult_hi, vec_widen_umult_lo):\n \t(vec_widen_smult_hi, vec_widen_smult_lo): New.\n \t* doc/c-tree.texi (VEC_LSHIFT_EXPR, VEC_RSHIFT_EXPR):\n \t(VEC_WIDEN_MULT_HI_EXPR, VEC_WIDEN_MULT_LO_EXPR, VEC_UNPACK_HI_EXPR):\n \t(VEC_UNPACK_LO_EXPR, VEC_PACK_MOD_EXPR, VEC_PACK_SAT_EXPR): New.\n-\t \n+\n \t* config/rs6000/altivec.md (UNSPEC_VMULWHUB, UNSPEC_VMULWLUB):\n \t(UNSPEC_VMULWHSB, UNSPEC_VMULWLSB, UNSPEC_VMULWHUH, UNSPEC_VMULWLUH):\n \t(UNSPEC_VMULWHSH, UNSPEC_VMULWLSH): New.\n@@ -119,7 +131,7 @@\n \t(vec_unpacku_hi_v16qi, vec_unpacku_hi_v8hi, vec_unpacku_lo_v16qi):\n \t(vec_unpacku_lo_v8hi): New unsigned unpacking patterns.\n \t(vec_widen_umult_hi_v16qi, vec_widen_umult_lo_v16qi):\n-\t(vec_widen_smult_hi_v16qi, vec_widen_smult_lo_v16qi): \n+\t(vec_widen_smult_hi_v16qi, vec_widen_smult_lo_v16qi):\n \t(vec_widen_umult_hi_v8hi, vec_widen_umult_lo_v8hi):\n \t(vec_widen_smult_hi_v8hi, vec_widen_smult_lo_v8hi): New widening\n \tmultiplication patterns.\n@@ -152,8 +164,8 @@\n \t(vec_widen_smult_hi_v4si, vec_widen_smult_lo_v4si,\n \tvec_widen_umult_hi_v4si, vec_widen_umult_lo_v4si): New.\n \n-\t* config/i386/i386.c (ix86_expand_sse_unpack): New. \n-\t* config/i386/i386-protos.h (ix86_expand_sse_unpack): New. \n+\t* config/i386/i386.c (ix86_expand_sse_unpack): New.\n+\t* config/i386/i386-protos.h (ix86_expand_sse_unpack): New.\n \t* config/i386/sse.md (vec_unpacku_hi_v16qi, vec_unpacks_hi_v16qi,\n \tvec_unpacku_lo_v16qi, vec_unpacks_lo_v16qi, vec_unpacku_hi_v8hi,\n \tvec_unpacks_hi_v8hi, vec_unpacku_lo_v8hi, vec_unpacks_lo_v8hi,\n@@ -165,7 +177,7 @@\n \t* tree-vect-transform.c (vectorizable_type_demotion): New function.\n \t(vect_transform_stmt): Add case for type_demotion_vec_info_type.\n \t(vect_analyze_operations): Call vectorizable_type_demotion.\n-\t* tree-vectorizer.h (type_demotion_vec_info_type): New enum \n+\t* tree-vectorizer.h (type_demotion_vec_info_type): New enum\n \tstmt_vec_info_type value.\n \t(vectorizable_type_demotion): New function declaration.\n \t* tree-vect-generic.c (expand_vector_operations_1): Consider correct\n@@ -178,8 +190,8 @@\n \t* tree-pretty-print.c (dump_generic_node, op_prio): Likewise.\n \t* optabs.c (optab_for_tree_code): Likewise.\n \n-\t* optabs.c (expand_binop): In case of vec_pack_*_optabs the mode \n-\tcompared against the predicate of the result is not 'mode' (the input \n+\t* optabs.c (expand_binop): In case of vec_pack_*_optabs the mode\n+\tcompared against the predicate of the result is not 'mode' (the input\n \tto the function) but a mode with half the size of 'mode'.\n \t(init_optab): Initialize new optabs.\n \t* optabs.h (OTI_vec_pack_mod, OTI_vec_pack_ssat, OTI_vec_pack_usat):\n@@ -201,19 +213,19 @@\n \n \t2006-11-08  Dorit Nuzman  <dorit@il.ibm.com>\n \n-\t* tree-vect-transform.c (vectorizable_reduction): Support multiple \n+\t* tree-vect-transform.c (vectorizable_reduction): Support multiple\n \tdatatypes.\n \t(vect_transform_stmt): Removed redundant code.\n \n \t2006-11-08  Dorit Nuzman  <dorit@il.ibm.com>\n \n-\t* tree-vect-transform.c (vectorizable_operation): Support multiple \n+\t* tree-vect-transform.c (vectorizable_operation): Support multiple\n \tdatatypes.\n \n \t2006-11-08  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* tree-vect-transform.c (vect_align_data_ref): Removed.\n-\t(vect_create_data_ref_ptr): Added additional argument - ptr_incr. \n+\t(vect_create_data_ref_ptr): Added additional argument - ptr_incr.\n \tUpdated function documentation. Return the increment stmt in ptr_incr.\n \t(bump_vector_ptr): New function.\n \t(vect_get_vec_def_for_stmt_copy): New function.\n@@ -228,7 +240,7 @@\n \t(vectorizable_store, vectorizable_load): Support the case that the VF\n \tis greater than the number of elements that can fit in one vector word.\n \t(vect_transform_loop): Don't fail in case of multiple data-types.\n-\t* tree-vect-analyze.c (vect_determine_vectorization_factor): Don't fail \n+\t* tree-vect-analyze.c (vect_determine_vectorization_factor): Don't fail\n \tin case of multiple data-types; the smallest type determines the VF.\n \t(vect_analyze_data_ref_dependence): Don't record datarefs as same_align\n \tif they are of different sizes."}, {"sha": "6fd1a312d2285b987bbc3ffe0aef5e01ca4005eb", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b8ec3cc8db6d261263e3e42b3d5a2ec915534163", "patch": "@@ -1742,6 +1742,12 @@ powerpc-*-darwin*)\n \tesac\n \textra_headers=altivec.h\n \t;;\n+powerpc64-*-darwin*)\n+\ttm_file=\"${tm_file} ${cpu_type}/darwin8.h ${cpu_type}/darwin64.h\"\n+\textra_options=\"${extra_options} ${cpu_type}/darwin.opt\"\n+\t# We're omitting t-darwin8 to avoid building any multilibs\n+\textra_headers=altivec.h\n+\t;;\n powerpc*-*-freebsd*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h ${fbsd_tm_file} rs6000/sysv4.h rs6000/freebsd.h\"\n \ttmake_file=\"rs6000/t-fprules rs6000/t-fprules-fpbit rs6000/t-ppcos ${tmake_file} rs6000/t-ppccomm\""}, {"sha": "ade31a2a4cc91673ae91703b937d0f901099fd6f", "filename": "gcc/config.host", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=b8ec3cc8db6d261263e3e42b3d5a2ec915534163", "patch": "@@ -188,6 +188,10 @@ case ${host} in\n     out_host_hook_obj=\"${out_host_hook_obj} host-ppc-darwin.o\"\n     host_xmake_file=\"${host_xmake_file} rs6000/x-darwin\"\n     ;;\n+  powerpc64-*-darwin*)\n+    out_host_hook_obj=\"${out_host_hook_obj} host-ppc64-darwin.o\"\n+    host_xmake_file=\"${host_xmake_file} rs6000/x-darwin64\"\n+    ;;\n   *-*-solaris2*)\n     out_host_hook_obj=host-solaris.o\n     host_xmake_file=\"${host_xmake_file} x-solaris\""}, {"sha": "9617a7eb0467556e8dd4fadc3c02f02e0068711f", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=b8ec3cc8db6d261263e3e42b3d5a2ec915534163", "patch": "@@ -126,6 +126,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n   %{static: %{Zdynamic: %e conflicting code gen style switches are used}}\\\n   %{!mkernel:%{!static:%{!mdynamic-no-pic:-fPIC}}}\"\n \n+#define DARWIN_ARCH_SPEC \"%{m64:ppc64;:ppc}\"\n+\n #define DARWIN_SUBARCH_SPEC \"\t\t\t\\\n  %{m64: ppc64}\t\t\t\t\t\\\n  %{!m64:\t\t\t\t\t\\\n@@ -151,7 +153,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef SUBTARGET_EXTRA_SPECS\n #define SUBTARGET_EXTRA_SPECS\t\t\t\\\n-  { \"darwin_arch\", \"%{m64:ppc64;:ppc}\" },\t\\\n+  { \"darwin_arch\", DARWIN_ARCH_SPEC },\t\t\\\n   { \"darwin_crt2\", DARWIN_CRT2_SPEC },\t\t\\\n   { \"darwin_subarch\", DARWIN_SUBARCH_SPEC },\n "}, {"sha": "80e802d89137b344d962210ee3fe506de43b085f", "filename": "gcc/config/rs6000/darwin64.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2Fconfig%2Frs6000%2Fdarwin64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2Fconfig%2Frs6000%2Fdarwin64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin64.h?ref=b8ec3cc8db6d261263e3e42b3d5a2ec915534163", "patch": "@@ -0,0 +1,36 @@\n+/* Target definitions for PowerPC running Darwin (Mac OS X).\n+   Copyright (C) 2006 Free Software Foundation, Inc.\n+   Contributed by Apple Computer Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 2, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING.  If not, write to the\n+   Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#undef  TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (Darwin/PowerPC64)\");\n+\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_POWERPC | MASK_POWERPC64 | MASK_64BIT \\\n+\t\t\t| MASK_MULTIPLE\t| MASK_NEW_MNEMONICS | MASK_PPC_GFXOPT)\n+\n+#undef DARWIN_ARCH_SPEC\n+#define DARWIN_ARCH_SPEC \"ppc64\"\n+\n+#undef DARWIN_SUBARCH_SPEC\n+#define DARWIN_SUBARCH_SPEC DARWIN_ARCH_SPEC\n+\n+#undef DARWIN_CRT2_SPEC\n+#define DARWIN_CRT2_SPEC \"\""}, {"sha": "ec7f9b3f11b63240898da68e7f13c2ab5e64cc0c", "filename": "gcc/config/rs6000/host-ppc64-darwin.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2Fconfig%2Frs6000%2Fhost-ppc64-darwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2Fconfig%2Frs6000%2Fhost-ppc64-darwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fhost-ppc64-darwin.c?ref=b8ec3cc8db6d261263e3e42b3d5a2ec915534163", "patch": "@@ -0,0 +1,31 @@\n+/* ppc64-darwin host-specific hook definitions.\n+   Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 2, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to the Free\n+Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n+02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"hosthooks.h\"\n+#include \"hosthooks-def.h\"\n+#include \"config/host-darwin.h\"\n+\n+/* Darwin doesn't do anything special for ppc64 hosts; this file exists just\n+   to include config/host-darwin.h.  */\n+\n+const struct host_hooks host_hooks = HOST_HOOKS_INITIALIZER;"}, {"sha": "3cb423db35ed705d9fb2fa9d28466e3ea4786629", "filename": "gcc/config/rs6000/x-darwin64", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2Fconfig%2Frs6000%2Fx-darwin64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2Fconfig%2Frs6000%2Fx-darwin64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fx-darwin64?ref=b8ec3cc8db6d261263e3e42b3d5a2ec915534163", "patch": "@@ -0,0 +1,4 @@\n+host-ppc64-darwin.o : $(srcdir)/config/rs6000/host-ppc64-darwin.c \\\n+  $(CONFIG_H) $(SYSTEM_H) coretypes.h hosthooks.h $(HOSTHOOKS_DEF_H) toplev.h \\\n+  config/host-darwin.h $(DIAGNOSTIC_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $< -o $@"}, {"sha": "ab6e343ebca7eafe41ff0224ea287d1e085262f1", "filename": "gcc/configure", "status": "modified", "additions": 6289, "deletions": 4349, "changes": 10638, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=b8ec3cc8db6d261263e3e42b3d5a2ec915534163"}, {"sha": "e26100efbcf54ec6ad908fa7b49806c89699ef26", "filename": "gcc/configure.ac", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ec3cc8db6d261263e3e42b3d5a2ec915534163/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=b8ec3cc8db6d261263e3e42b3d5a2ec915534163", "patch": "@@ -983,7 +983,7 @@ vax-*-*)\n     stage1_cflags=\"-J\"\n   fi\n   ;;\n-powerpc-*-darwin*)\n+powerpc*-*-darwin*)\n   # The spiffy cpp-precomp chokes on some legitimate constructs in GCC\n   # sources; use -no-cpp-precomp to get to GNU cpp.\n   # Apple's GCC has bugs in designated initializer handling, so disable\n@@ -1366,7 +1366,7 @@ if test \"$host_xm_file\" != \"$build_xm_file\"; then\n fi\n \n case ${host} in\n-  powerpc-*-darwin*)\n+  powerpc*-*-darwin*)\n     AC_CACHE_CHECK([whether mcontext_t fields have underscores],\n       gcc_cv_mcontext_underscores,\n       AC_COMPILE_IFELSE(["}]}