{"sha": "a15b25dcdcf597e01f5079b2bc44c1430b5e7719", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE1YjI1ZGNkY2Y1OTdlMDFmNTA3OWIyYmM0NGMxNDMwYjVlNzcxOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-21T07:00:37Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-21T07:00:37Z"}, "message": "poly_int: push_block/emit_push_insn\n\nThis patch changes the \"extra\" parameters to push_block and\nemit_push_insn from int to poly_int64.\n\n2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* expr.h (push_block, emit_push_insn): Change the \"extra\" parameter\n\tfrom HOST_WIDE_INT to poly_int64.\n\t* expr.c (push_block, emit_push_insn): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255918", "tree": {"sha": "70f0895f0abbd85a2301b0db51797febbb02449a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70f0895f0abbd85a2301b0db51797febbb02449a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a15b25dcdcf597e01f5079b2bc44c1430b5e7719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15b25dcdcf597e01f5079b2bc44c1430b5e7719", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a15b25dcdcf597e01f5079b2bc44c1430b5e7719", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a15b25dcdcf597e01f5079b2bc44c1430b5e7719/comments", "author": null, "committer": null, "parents": [{"sha": "f075bd950c5ad3e2baeb3d8f82fe962efc8e4f7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f075bd950c5ad3e2baeb3d8f82fe962efc8e4f7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f075bd950c5ad3e2baeb3d8f82fe962efc8e4f7a"}], "stats": {"total": 52, "additions": 33, "deletions": 19}, "files": [{"sha": "64577be7f0bba86d1054aff9d79b695e924d1d76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15b25dcdcf597e01f5079b2bc44c1430b5e7719/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15b25dcdcf597e01f5079b2bc44c1430b5e7719/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a15b25dcdcf597e01f5079b2bc44c1430b5e7719", "patch": "@@ -1,3 +1,11 @@\n+2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* expr.h (push_block, emit_push_insn): Change the \"extra\" parameter\n+\tfrom HOST_WIDE_INT to poly_int64.\n+\t* expr.c (push_block, emit_push_insn): Likewise.\n+\n 2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "64baaafed265db76e574d576db46c0de62aaed1a", "filename": "gcc/expr.c", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15b25dcdcf597e01f5079b2bc44c1430b5e7719/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15b25dcdcf597e01f5079b2bc44c1430b5e7719/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a15b25dcdcf597e01f5079b2bc44c1430b5e7719", "patch": "@@ -3867,19 +3867,19 @@ compress_float_constant (rtx x, rtx y)\n    otherwise, the padding comes at high addresses.  */\n \n rtx\n-push_block (rtx size, int extra, int below)\n+push_block (rtx size, poly_int64 extra, int below)\n {\n   rtx temp;\n \n   size = convert_modes (Pmode, ptr_mode, size, 1);\n   if (CONSTANT_P (size))\n     anti_adjust_stack (plus_constant (Pmode, size, extra));\n-  else if (REG_P (size) && extra == 0)\n+  else if (REG_P (size) && known_eq (extra, 0))\n     anti_adjust_stack (size);\n   else\n     {\n       temp = copy_to_mode_reg (Pmode, size);\n-      if (extra != 0)\n+      if (maybe_ne (extra, 0))\n \ttemp = expand_binop (Pmode, add_optab, temp,\n \t\t\t     gen_int_mode (extra, Pmode),\n \t\t\t     temp, 0, OPTAB_LIB_WIDEN);\n@@ -3889,15 +3889,15 @@ push_block (rtx size, int extra, int below)\n   if (STACK_GROWS_DOWNWARD)\n     {\n       temp = virtual_outgoing_args_rtx;\n-      if (extra != 0 && below)\n+      if (maybe_ne (extra, 0) && below)\n \ttemp = plus_constant (Pmode, temp, extra);\n     }\n   else\n     {\n       if (CONST_INT_P (size))\n \ttemp = plus_constant (Pmode, virtual_outgoing_args_rtx,\n \t\t\t      -INTVAL (size) - (below ? 0 : extra));\n-      else if (extra != 0 && !below)\n+      else if (maybe_ne (extra, 0) && !below)\n \ttemp = gen_rtx_PLUS (Pmode, virtual_outgoing_args_rtx,\n \t\t\t     negate_rtx (Pmode, plus_constant (Pmode, size,\n \t\t\t\t\t\t\t       extra)));\n@@ -4274,7 +4274,7 @@ memory_load_overlap (rtx x, rtx y, HOST_WIDE_INT size)\n \n bool\n emit_push_insn (rtx x, machine_mode mode, tree type, rtx size,\n-\t\tunsigned int align, int partial, rtx reg, int extra,\n+\t\tunsigned int align, int partial, rtx reg, poly_int64 extra,\n \t\trtx args_addr, rtx args_so_far, int reg_parm_stack_space,\n \t\trtx alignment_pad, bool sibcall_p)\n {\n@@ -4362,9 +4362,11 @@ emit_push_insn (rtx x, machine_mode mode, tree type, rtx size,\n \t  /* Push padding now if padding above and stack grows down,\n \t     or if padding below and stack grows up.\n \t     But if space already allocated, this has already been done.  */\n-\t  if (extra && args_addr == 0\n-\t      && where_pad != PAD_NONE && where_pad != stack_direction)\n-\t    anti_adjust_stack (GEN_INT (extra));\n+\t  if (maybe_ne (extra, 0)\n+\t      && args_addr == 0\n+\t      && where_pad != PAD_NONE\n+\t      && where_pad != stack_direction)\n+\t    anti_adjust_stack (gen_int_mode (extra, Pmode));\n \n \t  move_by_pieces (NULL, xinner, INTVAL (size) - used, align, 0);\n \t}\n@@ -4485,9 +4487,11 @@ emit_push_insn (rtx x, machine_mode mode, tree type, rtx size,\n       /* Push padding now if padding above and stack grows down,\n \t or if padding below and stack grows up.\n \t But if space already allocated, this has already been done.  */\n-      if (extra && args_addr == 0\n-\t  && where_pad != PAD_NONE && where_pad != stack_direction)\n-\tanti_adjust_stack (GEN_INT (extra));\n+      if (maybe_ne (extra, 0)\n+\t  && args_addr == 0\n+\t  && where_pad != PAD_NONE\n+\t  && where_pad != stack_direction)\n+\tanti_adjust_stack (gen_int_mode (extra, Pmode));\n \n       /* If we make space by pushing it, we might as well push\n \t the real data.  Otherwise, we can leave OFFSET nonzero\n@@ -4536,9 +4540,11 @@ emit_push_insn (rtx x, machine_mode mode, tree type, rtx size,\n       /* Push padding now if padding above and stack grows down,\n \t or if padding below and stack grows up.\n \t But if space already allocated, this has already been done.  */\n-      if (extra && args_addr == 0\n-\t  && where_pad != PAD_NONE && where_pad != stack_direction)\n-\tanti_adjust_stack (GEN_INT (extra));\n+      if (maybe_ne (extra, 0)\n+\t  && args_addr == 0\n+\t  && where_pad != PAD_NONE\n+\t  && where_pad != stack_direction)\n+\tanti_adjust_stack (gen_int_mode (extra, Pmode));\n \n #ifdef PUSH_ROUNDING\n       if (args_addr == 0 && PUSH_ARGS)\n@@ -4583,8 +4589,8 @@ emit_push_insn (rtx x, machine_mode mode, tree type, rtx size,\n \t}\n     }\n \n-  if (extra && args_addr == 0 && where_pad == stack_direction)\n-    anti_adjust_stack (GEN_INT (extra));\n+  if (maybe_ne (extra, 0) && args_addr == 0 && where_pad == stack_direction)\n+    anti_adjust_stack (gen_int_mode (extra, Pmode));\n \n   if (alignment_pad && args_addr == 0)\n     anti_adjust_stack (alignment_pad);"}, {"sha": "92a6b096a5a77f6a2ca06fa75279c2503ac42677", "filename": "gcc/expr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a15b25dcdcf597e01f5079b2bc44c1430b5e7719/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a15b25dcdcf597e01f5079b2bc44c1430b5e7719/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=a15b25dcdcf597e01f5079b2bc44c1430b5e7719", "patch": "@@ -233,11 +233,11 @@ extern rtx emit_move_resolve_push (machine_mode, rtx);\n \n /* Push a block of length SIZE (perhaps variable)\n    and return an rtx to address the beginning of the block.  */\n-extern rtx push_block (rtx, int, int);\n+extern rtx push_block (rtx, poly_int64, int);\n \n /* Generate code to push something onto the stack, given its mode and type.  */\n extern bool emit_push_insn (rtx, machine_mode, tree, rtx, unsigned int,\n-\t\t\t    int, rtx, int, rtx, rtx, int, rtx, bool);\n+\t\t\t    int, rtx, poly_int64, rtx, rtx, int, rtx, bool);\n \n /* Extract the accessible bit-range from a COMPONENT_REF.  */\n extern void get_bit_range (poly_uint64_pod *, poly_uint64_pod *, tree,"}]}