{"sha": "8199c8a865840ef3c426d6c37ade2199a0a86812", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE5OWM4YTg2NTg0MGVmM2M0MjZkNmMzN2FkZTIxOTlhMGE4NjgxMg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-09-10T14:14:28Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2008-09-10T14:14:28Z"}, "message": "re PR target/37434 (ICE in extract_insn, at recog.c:2027)\n\ngcc/\n\n2008-09-10  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/37434:\n\t* config/i386/i386.c (ix86_expand_vector_init_interleave): Force\n\tthe even element into register.\n\t(ix86_expand_vector_init_general): Don't use\n\tix86_expand_vector_init_interleave on V16QImode and V8HImode\n\tif we can't move from GPR to SSE register directly.\n\ngcc/testsuite/\n\n2008-09-10  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/37434:\n\t* gcc.target/i386/pr37434-1.c: New.\n\t* gcc.target/i386/pr37434-2.c: Likewise.\n\t* gcc.target/i386/pr37434-3.c: Likewise.\n\t* gcc.target/i386/pr37434-4.c: Likewise.\n\t* gcc.target/i386/sse2-set-v8hi-1a.c: Likewise.\n\t* gcc.target/i386/sse2-set-v8hi-2a.c: Likewise.\n\t* gcc.target/i386/sse4_1-set-v16qi-1a.c: Likewise.\n\t* gcc.target/i386/sse4_1-set-v16qi-2a.c: Likewise.\n\t* gcc.target/i386/sse4_1-set-v16qi-3a.c: Likewise.\n\nFrom-SVN: r140231", "tree": {"sha": "403704de95ef03360dd67b260c08c0abce2ccbc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/403704de95ef03360dd67b260c08c0abce2ccbc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8199c8a865840ef3c426d6c37ade2199a0a86812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8199c8a865840ef3c426d6c37ade2199a0a86812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8199c8a865840ef3c426d6c37ade2199a0a86812", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8199c8a865840ef3c426d6c37ade2199a0a86812/comments", "author": null, "committer": null, "parents": [{"sha": "90cbba020c11026300318186dddf251194e3bc53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90cbba020c11026300318186dddf251194e3bc53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90cbba020c11026300318186dddf251194e3bc53"}], "stats": {"total": 147, "additions": 140, "deletions": 7}, "files": [{"sha": "5b2ecb9062a3e3faef92d2c15a20f8842de26b39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8199c8a865840ef3c426d6c37ade2199a0a86812", "patch": "@@ -1,3 +1,12 @@\n+2008-09-10  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/37434:\n+\t* config/i386/i386.c (ix86_expand_vector_init_interleave): Force\n+\tthe even element into register.\n+\t(ix86_expand_vector_init_general): Don't use\n+\tix86_expand_vector_init_interleave on V16QImode and V8HImode\n+\tif we can't move from GPR to SSE register directly.\n+\n 2008-09-10  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/bfin.c (workaround_speculation): Correct algorithm to\n@@ -168,7 +177,7 @@\n \n 2008-09-09  Andrey Belevantsev  <abel@ispras.ru>\n \n-        PR rtl-optimization/37360\n+\tPR rtl-optimization/37360\n \t* haifa-sched.c (max_issue): Do not assert that we never issue more\n \tinsns than issue_rate.  Add comment.\n \t\n@@ -312,19 +321,19 @@\n \n 2008-09-07  Helge Deller  <deller@gmx.de>\n \n-        * pa/linux-atomic.c: New file.\n+\t* pa/linux-atomic.c: New file.\n \t* pa/t-linux (LIB2FUNCS_STATIC_EXTRA): Define.\n \t* pa/t-linux64 (LIB2FUNCS_STATIC_EXTRA): Define.\n \n 2008-09-07  Richard Guenther  <rguenther@suse.de>\n-            Ira Rosen  <irar@il.ibm.com>\n+\t    Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/36630\n \t* tree-vect-transform.c (vect_update_ivs_after_vectorizer):\n \tCall STRIP_NOPS before calling evolution_part_in_loop_num.\n \n 2008-09-07  Dorit Nuzman  <dorit@il.ibm.com>\n-            Ira Rosen  <irar@il.ibm.com>\n+\t    Ira Rosen  <irar@il.ibm.com>\n \n \tPR tree-optimization/35642\n \t* config/rs6000/altivec.md (mulv8hi3): Implement."}, {"sha": "3662d9663612e45f7e69b29b9b1bc0d1233412d9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8199c8a865840ef3c426d6c37ade2199a0a86812", "patch": "@@ -26886,7 +26886,7 @@ static void\n ix86_expand_vector_init_interleave (enum machine_mode mode,\n \t\t\t\t    rtx target, rtx *ops, int n)\n {\n-  enum machine_mode first_imode, second_imode, third_imode;\n+  enum machine_mode first_imode, second_imode, third_imode, inner_mode;\n   int i, j;\n   rtx op0, op1;\n   rtx (*gen_load_even) (rtx, rtx, rtx);\n@@ -26899,6 +26899,7 @@ ix86_expand_vector_init_interleave (enum machine_mode mode,\n       gen_load_even = gen_vec_setv8hi;\n       gen_interleave_first_low = gen_vec_interleave_lowv4si;\n       gen_interleave_second_low = gen_vec_interleave_lowv2di;\n+      inner_mode = HImode;\n       first_imode = V4SImode;\n       second_imode = V2DImode;\n       third_imode = VOIDmode;\n@@ -26907,6 +26908,7 @@ ix86_expand_vector_init_interleave (enum machine_mode mode,\n       gen_load_even = gen_vec_setv16qi;\n       gen_interleave_first_low = gen_vec_interleave_lowv8hi;\n       gen_interleave_second_low = gen_vec_interleave_lowv4si;\n+      inner_mode = QImode;\n       first_imode = V8HImode;\n       second_imode = V4SImode;\n       third_imode = V2DImode;\n@@ -26935,7 +26937,9 @@ ix86_expand_vector_init_interleave (enum machine_mode mode,\n       emit_move_insn (op0, gen_lowpart (mode, op1));\n       \n       /* Load even elements into the second positon.  */\n-      emit_insn ((*gen_load_even) (op0, ops [i + i + 1],\n+      emit_insn ((*gen_load_even) (op0,\n+\t\t\t\t   force_reg (inner_mode,\n+\t\t\t\t\t      ops [i + i + 1]),\n \t\t\t\t   const1_rtx));\n \n       /* Cast vector to FIRST_IMODE vector.  */\n@@ -27053,6 +27057,11 @@ ix86_expand_vector_init_general (bool mmx_ok, enum machine_mode mode,\n       if (!TARGET_SSE2)\n \tbreak;\n \n+      /* Don't use ix86_expand_vector_init_interleave if we can't\n+\t move from GPR to SSE register directly.  */ \n+      if (!TARGET_INTER_UNIT_MOVES)\n+\tbreak;\n+\n       n = GET_MODE_NUNITS (mode);\n       for (i = 0; i < n; i++)\n \tops[i] = XVECEXP (vals, 0, i);"}, {"sha": "f6a5b2b81730166fd82979c6064a0604229fd9a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8199c8a865840ef3c426d6c37ade2199a0a86812", "patch": "@@ -1,3 +1,16 @@\n+2008-09-10  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/37434:\n+\t* gcc.target/i386/pr37434-1.c: New.\n+\t* gcc.target/i386/pr37434-2.c: Likewise.\n+\t* gcc.target/i386/pr37434-3.c: Likewise.\n+\t* gcc.target/i386/pr37434-4.c: Likewise.\n+\t* gcc.target/i386/sse2-set-v8hi-1a.c: Likewise.\n+\t* gcc.target/i386/sse2-set-v8hi-2a.c: Likewise.\n+\t* gcc.target/i386/sse4_1-set-v16qi-1a.c: Likewise.\n+\t* gcc.target/i386/sse4_1-set-v16qi-2a.c: Likewise.\n+\t* gcc.target/i386/sse4_1-set-v16qi-3a.c: Likewise.\n+\n 2008-09-10  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/37420\n@@ -631,7 +644,7 @@\n \t* gcc.target/mips/octeon-bbit-3.c: New test.\n \n 2008-08-28  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n-            Andrew Pinski  <pinskia@gcc.gnu.org>\n+\t    Andrew Pinski  <pinskia@gcc.gnu.org>\n \n \tPR 18050\n \t* gcc.dg/Wsequence-point-pr18050.c: New."}, {"sha": "b556bf0848e44f9cffacd4d3562bbf6a674553d2", "filename": "gcc/testsuite/gcc.target/i386/pr37434-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37434-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37434-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37434-1.c?ref=8199c8a865840ef3c426d6c37ade2199a0a86812", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef short __v8hi __attribute__ ((__vector_size__ (16)));\n+typedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+__m128i Set_AC4R_SETUP_I( const short *val ) {\n+  short D2073 = *val;\n+  short D2076 = *(val + 2);\n+  short D2079 = *(val + 4);\n+  __v8hi D2094 = {D2073, D2076, D2079, 0, D2073, D2076, D2079, 0};\n+  return (__m128i)D2094;\n+}"}, {"sha": "00ff9fd2e6ce4f3d7d7ef7a345596a1b2c522ec7", "filename": "gcc/testsuite/gcc.target/i386/pr37434-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37434-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37434-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37434-2.c?ref=8199c8a865840ef3c426d6c37ade2199a0a86812", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=core2 -msse2\" } */\n+\n+typedef short __v8hi __attribute__ ((__vector_size__ (16)));\n+typedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+__m128i Set_AC4R_SETUP_I( const short *val ) {\n+  short D2073 = *val;\n+  short D2076 = *(val + 2);\n+  short D2079 = *(val + 4);\n+  __v8hi D2094 = {D2073, D2076, D2079, 0, D2073, D2076, D2079, 0};\n+  return (__m128i)D2094;\n+}\n+\n+/* { dg-final { scan-assembler \"pinsrw\" } } */"}, {"sha": "916c99fe02f9c349eb4496e29f4301f3996bf10a", "filename": "gcc/testsuite/gcc.target/i386/pr37434-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37434-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37434-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37434-3.c?ref=8199c8a865840ef3c426d6c37ade2199a0a86812", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+typedef char __v16qi __attribute__ ((__vector_size__ (16)));\n+typedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+__m128i Set_AC4R_SETUP_I( const char *val ) {\n+  char D2073 = *val;\n+  char D2074 = *(val + 1);\n+  char D2075 = *(val + 2);\n+  char D2076 = *(val + 3);\n+  char D2077 = *(val + 4);\n+  char D2078 = *(val + 5);\n+  char D2079 = *(val + 6);\n+  __v16qi D2094 = {D2073, D2074, D2075, D2076,  D2077, D2078, D2079, 0,\n+  D2073, D2074, D2075, D2076,  D2077, D2078, D2079, 0};\n+  return (__m128i)D2094;\n+}"}, {"sha": "15f8292b0293ab901e0d756eb62e5ab2ff327243", "filename": "gcc/testsuite/gcc.target/i386/pr37434-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37434-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37434-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37434-4.c?ref=8199c8a865840ef3c426d6c37ade2199a0a86812", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -mtune=core2 -msse4.1\" } */\n+\n+typedef char __v16qi __attribute__ ((__vector_size__ (16)));\n+typedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+__m128i Set_AC4R_SETUP_I( const char *val ) {\n+  char D2073 = *val;\n+  char D2074 = *(val + 1);\n+  char D2075 = *(val + 2);\n+  char D2076 = *(val + 3);\n+  char D2077 = *(val + 4);\n+  char D2078 = *(val + 5);\n+  char D2079 = *(val + 6);\n+  __v16qi D2094 = {D2073, D2074, D2075, D2076,  D2077, D2078, D2079, 0,\n+  D2073, D2074, D2075, D2076,  D2077, D2078, D2079, 0};\n+  return (__m128i)D2094;\n+}\n+\n+/* { dg-final { scan-assembler \"pinsrb\" } } */"}, {"sha": "816c19e20f83297f74d25ee7405b97c87c7dad31", "filename": "gcc/testsuite/gcc.target/i386/sse2-set-v8hi-1a.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v8hi-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v8hi-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v8hi-1a.c?ref=8199c8a865840ef3c426d6c37ade2199a0a86812", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mtune=core2 -msse2\" } */\n+\n+#define CHECK_H \"sse2-check.h\"\n+#define TEST sse2_test\n+\n+#include \"set-v8hi-1.h\""}, {"sha": "b5103ac1d75f28e520b4dbc90fff5d924de71539", "filename": "gcc/testsuite/gcc.target/i386/sse2-set-v8hi-2a.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v8hi-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v8hi-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-set-v8hi-2a.c?ref=8199c8a865840ef3c426d6c37ade2199a0a86812", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mtune=core2 -msse2\" } */\n+\n+#define CHECK_H \"sse2-check.h\"\n+#define TEST sse2_test\n+\n+#include \"set-v8hi-2.h\""}, {"sha": "b8612962deac4b3c64d7174a6a10a96c032b5974", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-set-v16qi-1a.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-v16qi-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-v16qi-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-v16qi-1a.c?ref=8199c8a865840ef3c426d6c37ade2199a0a86812", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -mtune=core2 -msse4.1\" } */\n+\n+#define CHECK_H \"sse4_1-check.h\"\n+#define TEST sse4_1_test\n+\n+#include \"set-v16qi-1.h\""}, {"sha": "21f1692cdf76725448166808d4dc91aa8263aa7c", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-set-v16qi-2a.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-v16qi-2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-v16qi-2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-v16qi-2a.c?ref=8199c8a865840ef3c426d6c37ade2199a0a86812", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -mtune=core2 -msse4.1\" } */\n+\n+#define CHECK_H \"sse4_1-check.h\"\n+#define TEST sse4_1_test\n+\n+#include \"set-v16qi-2.h\""}, {"sha": "1065a843a5841ff2bffd04dd3acdd09f1f5afe21", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-set-v16qi-3a.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-v16qi-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8199c8a865840ef3c426d6c37ade2199a0a86812/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-v16qi-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-set-v16qi-3a.c?ref=8199c8a865840ef3c426d6c37ade2199a0a86812", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -mtune=core2 -msse4.1\" } */\n+\n+#define CHECK_H \"sse4_1-check.h\"\n+#define TEST sse4_1_test\n+\n+#include \"set-v16qi-3.h\""}]}