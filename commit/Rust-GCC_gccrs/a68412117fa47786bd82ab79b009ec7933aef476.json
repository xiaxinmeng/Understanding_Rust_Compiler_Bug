{"sha": "a68412117fa47786bd82ab79b009ec7933aef476", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY4NDEyMTE3ZmE0Nzc4NmJkODJhYjc5YjAwOWVjNzkzM2FlZjQ3Ng==", "commit": {"author": {"name": "Guo, Xuepeng", "email": "xuepeng.guo@intel.com", "date": "2018-12-25T03:39:26Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-08T04:44:50Z"}, "message": "AVX512FP16: Initial support for AVX512FP16 feature and scalar _Float16 instructions.\n\ngcc/ChangeLog:\n\n\t* common/config/i386/cpuinfo.h (get_available_features):\n\tDetect FEATURE_AVX512FP16.\n\t* common/config/i386/i386-common.c\n\t(OPTION_MASK_ISA_AVX512FP16_SET,\n\tOPTION_MASK_ISA_AVX512FP16_UNSET,\n\tOPTION_MASK_ISA2_AVX512FP16_SET,\n\tOPTION_MASK_ISA2_AVX512FP16_UNSET): New.\n\t(OPTION_MASK_ISA2_AVX512BW_UNSET,\n\tOPTION_MASK_ISA2_AVX512BF16_UNSET): Add AVX512FP16.\n\t(ix86_handle_option): Handle -mavx512fp16.\n\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n\tAdd FEATURE_AVX512FP16.\n\t* common/config/i386/i386-isas.h: Add entry for AVX512FP16.\n\t* config.gcc: Add avx512fp16intrin.h.\n\t* config/i386/avx512fp16intrin.h: New intrinsic header.\n\t* config/i386/cpuid.h: Add bit_AVX512FP16.\n\t* config/i386/i386-builtin-types.def: (FLOAT16): New primitive type.\n\t* config/i386/i386-builtins.c: Support _Float16 type for i386\n\tbackend.\n\t(ix86_register_float16_builtin_type): New function.\n\t(ix86_float16_type_node): New.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n\t__AVX512FP16__.\n\t* config/i386/i386-expand.c (ix86_expand_branch): Support\n\tHFmode.\n\t(ix86_prepare_fp_compare_args): Adjust TARGET_SSE_MATH &&\n\tSSE_FLOAT_MODE_P to SSE_FLOAT_MODE_SSEMATH_OR_HF_P.\n\t(ix86_expand_fp_movcc): Ditto.\n\t* config/i386/i386-isa.def: Add PTA define for AVX512FP16.\n\t* config/i386/i386-options.c (isa2_opts): Add -mavx512fp16.\n\t(ix86_valid_target_attribute_inner_p): Add avx512fp16 attribute.\n\t* config/i386/i386.c (ix86_get_ssemov): Use\n\tvmovdqu16/vmovw/vmovsh for HFmode/HImode scalar or vector.\n\t(ix86_get_excess_precision): Use\n\tFLT_EVAL_METHOD_PROMOTE_TO_FLOAT16 when TARGET_AVX512FP16\n\texisted.\n\t(sse_store_index): Use SFmode cost for HFmode cost.\n\t(inline_memory_move_cost): Add HFmode, and perfer SSE cost over\n\tGPR cost for HFmode.\n\t(ix86_hard_regno_mode_ok): Allow HImode in sse register.\n\t(ix86_mangle_type): Add manlging for _Float16 type.\n\t(inline_secondary_memory_needed): No memory is needed for\n\t16bit movement between gpr and sse reg under\n\tTARGET_AVX512FP16.\n\t(ix86_multiplication_cost): Adjust TARGET_SSE_MATH &&\n\tSSE_FLOAT_MODE_P to SSE_FLOAT_MODE_SSEMATH_OR_HF_P.\n\t(ix86_division_cost): Ditto.\n\t(ix86_rtx_costs): Ditto.\n\t(ix86_add_stmt_cost): Ditto.\n\t(ix86_optab_supported_p): Ditto.\n\t* config/i386/i386.h (VALID_AVX512F_SCALAR_MODE): Add HFmode.\n\t(SSE_FLOAT_MODE_SSEMATH_OR_HF_P): Add HFmode.\n\t(PTA_SAPPHIRERAPIDS): Add PTA_AVX512FP16.\n\t* config/i386/i386.md (mode): Add HFmode.\n\t(MODE_SIZE): Add HFmode.\n\t(isa): Add avx512fp16.\n\t(enabled): Handle avx512fp16.\n\t(ssemodesuffix): Add sh suffix for HFmode.\n\t(comm): Add mult, div.\n\t(plusminusmultdiv): New code iterator.\n\t(insn): Add mult, div.\n\t(*movhf_internal): Adjust for avx512fp16 instruction.\n\t(*movhi_internal): Ditto.\n\t(*cmpi<unord>hf): New define_insn for HFmode.\n\t(*ieee_s<ieee_maxmin>hf3): Likewise.\n\t(extendhf<mode>2): Likewise.\n\t(trunc<mode>hf2): Likewise.\n\t(float<floatunssuffix><mode>hf2): Likewise.\n\t(*<insn>hf): Likewise.\n\t(cbranchhf4): New expander.\n\t(movhfcc): Likewise.\n\t(<insn>hf3): Likewise.\n\t(mulhf3): Likewise.\n\t(divhf3): Likewise.\n\t* config/i386/i386.opt: Add mavx512fp16.\n\t* config/i386/immintrin.h: Include avx512fp16intrin.h.\n\t* doc/invoke.texi: Add mavx512fp16.\n\t* doc/extend.texi: Add avx512fp16 Usage Notes.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-1.c: Add -mavx512fp16 in dg-options.\n\t* gcc.target/i386/avx-2.c: Ditto.\n\t* gcc.target/i386/avx512-check.h: Check cpuid for AVX512FP16.\n\t* gcc.target/i386/funcspec-56.inc: Add new target attribute check.\n\t* gcc.target/i386/sse-13.c: Add -mavx512fp16.\n\t* gcc.target/i386/sse-14.c: Ditto.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* lib/target-supports.exp: (check_effective_target_avx512fp16): New.\n\t* g++.target/i386/float16-1.C: New test.\n\t* g++.target/i386/float16-2.C: Ditto.\n\t* g++.target/i386/float16-3.C: Ditto.\n\t* gcc.target/i386/avx512fp16-12a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-12b.c: Ditto.\n\t* gcc.target/i386/float16-3a.c: Ditto.\n\t* gcc.target/i386/float16-3b.c: Ditto.\n\t* gcc.target/i386/float16-4a.c: Ditto.\n\t* gcc.target/i386/float16-4b.c: Ditto.\n\t* gcc.target/i386/pr54855-12.c: Ditto.\n\t* g++.dg/other/i386-2.C: Ditto.\n\t* g++.dg/other/i386-3.C: Ditto.\n\nCo-Authored-By: H.J. Lu <hongjiu.lu@intel.com>\nCo-Authored-By: Liu Hongtao <hongtao.liu@intel.com>\nCo-Authored-By: Wang Hongyu <hongyu.wang@intel.com>\nCo-Authored-By: Xu Dianhong <dianhong.xu@intel.com>", "tree": {"sha": "25a22cc1e5a1219510993198e77e98bcaa5dc1c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25a22cc1e5a1219510993198e77e98bcaa5dc1c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a68412117fa47786bd82ab79b009ec7933aef476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a68412117fa47786bd82ab79b009ec7933aef476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a68412117fa47786bd82ab79b009ec7933aef476", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a68412117fa47786bd82ab79b009ec7933aef476/comments", "author": null, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f19a327077ecc34a51487761378b9edb43c82997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f19a327077ecc34a51487761378b9edb43c82997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f19a327077ecc34a51487761378b9edb43c82997"}], "stats": {"total": 637, "additions": 561, "deletions": 76}, "files": [{"sha": "1835ac64e6707de72dbf469b08c6b4e6346d0edd", "filename": "gcc/common/config/i386/cpuinfo.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fcpuinfo.h?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -731,6 +731,8 @@ get_available_features (struct __processor_model *cpu_model,\n \t    set_feature (FEATURE_AVX5124FMAPS);\n \t  if (edx & bit_AVX512VP2INTERSECT)\n \t    set_feature (FEATURE_AVX512VP2INTERSECT);\n+\t  if (edx & bit_AVX512FP16)\n+\t    set_feature (FEATURE_AVX512FP16);\n \t}\n \n       __cpuid_count (7, 1, eax, ebx, ecx, edx);"}, {"sha": "00c65ba15abca88ddcc31b32b27eacb4a7ecd12f", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -82,6 +82,8 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AVX5124VNNIW_SET OPTION_MASK_ISA2_AVX5124VNNIW\n #define OPTION_MASK_ISA_AVX512VBMI2_SET \\\n   (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512F_SET)\n+#define OPTION_MASK_ISA_AVX512FP16_SET OPTION_MASK_ISA_AVX512BW_SET\n+#define OPTION_MASK_ISA2_AVX512FP16_SET OPTION_MASK_ISA2_AVX512FP16\n #define OPTION_MASK_ISA_AVX512VNNI_SET \\\n   (OPTION_MASK_ISA_AVX512VNNI | OPTION_MASK_ISA_AVX512F_SET)\n #define OPTION_MASK_ISA2_AVXVNNI_SET OPTION_MASK_ISA2_AVXVNNI\n@@ -231,6 +233,8 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AVX5124FMAPS_UNSET OPTION_MASK_ISA2_AVX5124FMAPS\n #define OPTION_MASK_ISA2_AVX5124VNNIW_UNSET OPTION_MASK_ISA2_AVX5124VNNIW\n #define OPTION_MASK_ISA_AVX512VBMI2_UNSET OPTION_MASK_ISA_AVX512VBMI2\n+#define OPTION_MASK_ISA_AVX512FP16_UNSET OPTION_MASK_ISA_AVX512BW_UNSET\n+#define OPTION_MASK_ISA2_AVX512FP16_UNSET OPTION_MASK_ISA2_AVX512FP16\n #define OPTION_MASK_ISA_AVX512VNNI_UNSET OPTION_MASK_ISA_AVX512VNNI\n #define OPTION_MASK_ISA2_AVXVNNI_UNSET OPTION_MASK_ISA2_AVXVNNI\n #define OPTION_MASK_ISA_AVX512VPOPCNTDQ_UNSET OPTION_MASK_ISA_AVX512VPOPCNTDQ\n@@ -313,7 +317,8 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA2_AVX512BF16_UNSET \\\n    | OPTION_MASK_ISA2_AVX5124FMAPS_UNSET \\\n    | OPTION_MASK_ISA2_AVX5124VNNIW_UNSET \\\n-   | OPTION_MASK_ISA2_AVX512VP2INTERSECT_UNSET)\n+   | OPTION_MASK_ISA2_AVX512VP2INTERSECT_UNSET \\\n+   | OPTION_MASK_ISA2_AVX512FP16_UNSET)\n #define OPTION_MASK_ISA2_GENERAL_REGS_ONLY_UNSET \\\n   (OPTION_MASK_ISA2_AVX512F_UNSET)\n #define OPTION_MASK_ISA2_AVX_UNSET OPTION_MASK_ISA2_AVX2_UNSET\n@@ -326,7 +331,9 @@ along with GCC; see the file COPYING3.  If not see\n   (OPTION_MASK_ISA2_SSE3_UNSET | OPTION_MASK_ISA2_KL_UNSET)\n #define OPTION_MASK_ISA2_SSE_UNSET OPTION_MASK_ISA2_SSE2_UNSET\n \n-#define OPTION_MASK_ISA2_AVX512BW_UNSET OPTION_MASK_ISA2_AVX512BF16_UNSET\n+#define OPTION_MASK_ISA2_AVX512BW_UNSET \\\n+  (OPTION_MASK_ISA2_AVX512BF16_UNSET \\\n+    | OPTION_MASK_ISA2_AVX512FP16_UNSET)\n \n /* Set 1 << value as value of -malign-FLAG option.  */\n \n@@ -853,6 +860,21 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mavx512fp16:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA2_AVX512FP16_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512FP16_SET;\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512FP16_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX512FP16_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA2_AVX512FP16_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA2_AVX512FP16_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mavx512vnni:\n       if (value)\n \t{"}, {"sha": "4e0659fc7b28197c601ede100d19e4e1ad426dec", "filename": "gcc/common/config/i386/i386-cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-cpuinfo.h?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -228,6 +228,7 @@ enum processor_features\n   FEATURE_AESKLE,\n   FEATURE_WIDEKL,\n   FEATURE_AVXVNNI,\n+  FEATURE_AVX512FP16,\n   CPU_FEATURE_MAX\n };\n "}, {"sha": "a6783660278550f79fd972d34c4aa5c9fd27e97f", "filename": "gcc/common/config/i386/i386-isas.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-isas.h?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -169,4 +169,5 @@ ISA_NAMES_TABLE_START\n   ISA_NAMES_TABLE_ENTRY(\"aeskle\", FEATURE_AESKLE, P_NONE, NULL)\n   ISA_NAMES_TABLE_ENTRY(\"widekl\", FEATURE_WIDEKL, P_NONE, \"-mwidekl\")\n   ISA_NAMES_TABLE_ENTRY(\"avxvnni\", FEATURE_AVXVNNI, P_NONE, \"-mavxvnni\")\n+  ISA_NAMES_TABLE_ENTRY(\"avx512fp16\", FEATURE_AVX512FP16, P_NONE, \"-mavx512fp16\")\n ISA_NAMES_TABLE_END"}, {"sha": "710f9ce571703b381f5f7f5b0f57fa2614e83a1e", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -416,7 +416,7 @@ i[34567]86-*-* | x86_64-*-*)\n \t\t       tsxldtrkintrin.h amxtileintrin.h amxint8intrin.h\n \t\t       amxbf16intrin.h x86gprintrin.h uintrintrin.h\n \t\t       hresetintrin.h keylockerintrin.h avxvnniintrin.h\n-\t\t       mwaitintrin.h\"\n+\t\t       mwaitintrin.h avx512fp16intrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "38d63161ba646841c2e7b3b9609fe0ac7b4566e2", "filename": "gcc/config/i386/avx512fp16intrin.h", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fp16intrin.h?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -0,0 +1,53 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512fp16intrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef __AVX512FP16INTRIN_H_INCLUDED\n+#define __AVX512FP16INTRIN_H_INCLUDED\n+\n+#ifndef __AVX512FP16__\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512fp16\")\n+#define __DISABLE_AVX512FP16__\n+#endif /* __AVX512FP16__ */\n+\n+/* Internal data types for implementing the intrinsics.  */\n+typedef _Float16 __v8hf __attribute__ ((__vector_size__ (16)));\n+typedef _Float16 __v16hf __attribute__ ((__vector_size__ (32)));\n+typedef _Float16 __v32hf __attribute__ ((__vector_size__ (64)));\n+\n+/* The Intel API is flexible enough that we must allow aliasing with other\n+   vector types, and their scalar components.  */\n+typedef _Float16 __m128h __attribute__ ((__vector_size__ (16), __may_alias__));\n+typedef _Float16 __m256h __attribute__ ((__vector_size__ (32), __may_alias__));\n+typedef _Float16 __m512h __attribute__ ((__vector_size__ (64), __may_alias__));\n+\n+#ifdef __DISABLE_AVX512FP16__\n+#undef __DISABLE_AVX512FP16__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512FP16__ */\n+\n+#endif /* __AVX512FP16INTRIN_H_INCLUDED */"}, {"sha": "82b8050028b79ac7d2ecb8cef9629c78855475a9", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -126,6 +126,7 @@\n #define bit_AVX5124VNNIW (1 << 2)\n #define bit_AVX5124FMAPS (1 << 3)\n #define bit_AVX512VP2INTERSECT\t(1 << 8)\n+#define bit_AVX512FP16   (1 << 23)\n #define bit_IBT\t(1 << 20)\n #define bit_UINTR (1 << 5)\n #define bit_PCONFIG\t(1 << 18)"}, {"sha": "1768b88d74852e8e16adb7d7e1c03b2acad6d1ac", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -68,6 +68,7 @@ DEF_PRIMITIVE_TYPE (UINT8, unsigned_char_type_node)\n DEF_PRIMITIVE_TYPE (UINT16, short_unsigned_type_node)\n DEF_PRIMITIVE_TYPE (INT64, long_long_integer_type_node)\n DEF_PRIMITIVE_TYPE (UINT64, long_long_unsigned_type_node)\n+DEF_PRIMITIVE_TYPE (FLOAT16, ix86_float16_type_node)\n DEF_PRIMITIVE_TYPE (FLOAT, float_type_node)\n DEF_PRIMITIVE_TYPE (DOUBLE, double_type_node)\n DEF_PRIMITIVE_TYPE (FLOAT80, float80_type_node)"}, {"sha": "179970162078c88c7d1f2b207f72163a929c294e", "filename": "gcc/config/i386/i386-builtins.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -125,6 +125,7 @@ BDESC_VERIFYS (IX86_BUILTIN_MAX,\n /* Table for the ix86 builtin non-function types.  */\n static GTY(()) tree ix86_builtin_type_tab[(int) IX86_BT_LAST_CPTR + 1];\n \n+tree ix86_float16_type_node = NULL_TREE;\n /* Retrieve an element from the above table, building some of\n    the types lazily.  */\n \n@@ -1343,6 +1344,26 @@ ix86_init_builtins_va_builtins_abi (void)\n \t\t\tBUILT_IN_VA_COPY, BUILT_IN_NORMAL, NULL, fnattr_sysv);\n }\n \n+static void\n+ix86_register_float16_builtin_type (void)\n+{\n+  /* Provide the _Float16 type and float16_type_node if needed so that\n+     it can be used in AVX512FP16 intrinsics and builtins.  */\n+  if (!float16_type_node)\n+    {\n+      ix86_float16_type_node = make_node (REAL_TYPE);\n+      TYPE_PRECISION (ix86_float16_type_node) = 16;\n+      SET_TYPE_MODE (ix86_float16_type_node, HFmode);\n+      layout_type (ix86_float16_type_node);\n+    }\n+  else\n+    ix86_float16_type_node = float16_type_node;\n+\n+  if (!maybe_get_identifier (\"_Float16\") && TARGET_SSE2)\n+    lang_hooks.types.register_builtin_type (ix86_float16_type_node,\n+\t\t\t\t\t    \"_Float16\");\n+}\n+\n static void\n ix86_init_builtin_types (void)\n {\n@@ -1371,6 +1392,8 @@ ix86_init_builtin_types (void)\n      it.  */\n   lang_hooks.types.register_builtin_type (float128_type_node, \"__float128\");\n \n+  ix86_register_float16_builtin_type ();\n+\n   const_string_type_node\n     = build_pointer_type (build_qualified_type\n \t\t\t  (char_type_node, TYPE_QUAL_CONST));"}, {"sha": "cc64f855ecc9d7b07dcfd901ce179bae1315e1cb", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -598,6 +598,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__PTWRITE__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_AVX512BF16)\n     def_or_undef (parse_in, \"__AVX512BF16__\");\n+  if (isa_flag2 & OPTION_MASK_ISA2_AVX512FP16)\n+    def_or_undef (parse_in, \"__AVX512FP16__\");\n   if (TARGET_MMX_WITH_SSE)\n     def_or_undef (parse_in, \"__MMX_WITH_SSE__\");\n   if (isa_flag2 & OPTION_MASK_ISA2_ENQCMD)"}, {"sha": "fb3873ba3b9d311a7d8f9bc20c0bfbe13ca34c14", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -2351,6 +2351,7 @@ ix86_expand_branch (enum rtx_code code, rtx op0, rtx op1, rtx label)\n \n   switch (mode)\n     {\n+    case E_HFmode:\n     case E_SFmode:\n     case E_DFmode:\n     case E_XFmode:\n@@ -2664,7 +2665,7 @@ ix86_prepare_fp_compare_args (enum rtx_code code, rtx *pop0, rtx *pop1)\n   bool unordered_compare = ix86_unordered_fp_compare (code);\n   rtx op0 = *pop0, op1 = *pop1;\n   machine_mode op_mode = GET_MODE (op0);\n-  bool is_sse = TARGET_SSE_MATH && SSE_FLOAT_MODE_P (op_mode);\n+  bool is_sse = SSE_FLOAT_MODE_SSEMATH_OR_HF_P (op_mode);\n \n   /* All of the unordered compare instructions only work on registers.\n      The same is true of the fcomi compare instructions.  The XFmode\n@@ -4149,7 +4150,7 @@ ix86_expand_fp_movcc (rtx operands[])\n   rtx op0 = XEXP (operands[1], 0);\n   rtx op1 = XEXP (operands[1], 1);\n \n-  if (TARGET_SSE_MATH && SSE_FLOAT_MODE_P (mode))\n+  if (SSE_FLOAT_MODE_SSEMATH_OR_HF_P (mode))\n     {\n       machine_mode cmode;\n "}, {"sha": "83d9302ea3df734f1ec1f37c9568878798f7e42f", "filename": "gcc/config/i386/i386-isa.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386-isa.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-isa.def?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -108,3 +108,4 @@ DEF_PTA(HRESET)\n DEF_PTA(KL)\n DEF_PTA(WIDEKL)\n DEF_PTA(AVXVNNI)\n+DEF_PTA(AVX512FP16)"}, {"sha": "2cb87cedec0b73cd005e6fac0ebc75f08a6b55e6", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -223,7 +223,8 @@ static struct ix86_target_opts isa2_opts[] =\n   { \"-mhreset\",\t\tOPTION_MASK_ISA2_HRESET },\n   { \"-mkl\",\t\tOPTION_MASK_ISA2_KL },\n   { \"-mwidekl\", \tOPTION_MASK_ISA2_WIDEKL },\n-  { \"-mavxvnni\",\tOPTION_MASK_ISA2_AVXVNNI }\n+  { \"-mavxvnni\",\tOPTION_MASK_ISA2_AVXVNNI },\n+  { \"-mavx512fp16\",\tOPTION_MASK_ISA2_AVX512FP16 }\n };\n static struct ix86_target_opts isa_opts[] =\n {\n@@ -1049,6 +1050,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"amx-bf16\", OPT_mamx_bf16),\n     IX86_ATTR_ISA (\"hreset\", OPT_mhreset),\n     IX86_ATTR_ISA (\"avxvnni\",   OPT_mavxvnni),\n+    IX86_ATTR_ISA (\"avx512fp16\", OPT_mavx512fp16),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),"}, {"sha": "b2a58b088ab9539bcfdd3167ca009ed3d1356c06", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 99, "deletions": 37, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -5508,6 +5508,14 @@ ix86_output_ssemov (rtx_insn *insn, rtx *operands)\n     case MODE_SI:\n       return \"%vmovd\\t{%1, %0|%0, %1}\";\n \n+    case MODE_HI:\n+      if (GENERAL_REG_P (operands[0]))\n+\treturn \"vmovw\\t{%1, %k0|%k0, %1}\";\n+      else if (GENERAL_REG_P (operands[1]))\n+\treturn \"vmovw\\t{%k1, %0|%0, %k1}\";\n+      else\n+\treturn \"vmovw\\t{%1, %0|%0, %1}\";\n+\n     case MODE_DF:\n       if (TARGET_AVX && REG_P (operands[0]) && REG_P (operands[1]))\n \treturn \"vmovsd\\t{%d1, %0|%0, %d1}\";\n@@ -5520,6 +5528,12 @@ ix86_output_ssemov (rtx_insn *insn, rtx *operands)\n       else\n \treturn \"%vmovss\\t{%1, %0|%0, %1}\";\n \n+    case MODE_HF:\n+      if (REG_P (operands[0]) && REG_P (operands[1]))\n+\treturn \"vmovsh\\t{%d1, %0|%0, %d1}\";\n+      else\n+\treturn \"vmovsh\\t{%1, %0|%0, %1}\";\n+\n     case MODE_V1DF:\n       gcc_assert (!TARGET_AVX);\n       return \"movlpd\\t{%1, %0|%0, %1}\";\n@@ -13999,7 +14013,7 @@ output_387_binary_op (rtx_insn *insn, rtx *operands)\n \n   if (is_sse)\n    {\n-     p = (GET_MODE (operands[0]) == SFmode) ? \"ss\" : \"sd\";\n+     p = GET_MODE (operands[0]) == SFmode ? \"ss\" : \"sd\";\n      strcat (buf, p);\n \n      if (TARGET_AVX)\n@@ -19311,10 +19325,19 @@ inline_secondary_memory_needed (machine_mode mode, reg_class_t class1,\n       if (!TARGET_SSE2)\n \treturn true;\n \n+      if (!(INTEGER_CLASS_P (class1) || INTEGER_CLASS_P (class2)))\n+\treturn true;\n+\n+      int msize = GET_MODE_SIZE (mode);\n+\n       /* Between SSE and general, we have moves no larger than word size.  */\n-      if (!(INTEGER_CLASS_P (class1) || INTEGER_CLASS_P (class2))\n-\t  || GET_MODE_SIZE (mode) < GET_MODE_SIZE (SImode)\n-\t  || GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n+      if (msize > UNITS_PER_WORD)\n+\treturn true;\n+\n+      /* In addition to SImode moves, AVX512FP16 also enables HImode moves.  */\n+      int minsize = GET_MODE_SIZE (TARGET_AVX512FP16 ? HImode : SImode);\n+\n+      if (msize < minsize)\n \treturn true;\n \n       /* If the target says that inter-unit moves are more expensive\n@@ -19408,21 +19431,27 @@ ix86_can_change_mode_class (machine_mode from, machine_mode to,\n static inline int\n sse_store_index (machine_mode mode)\n {\n-      switch (GET_MODE_SIZE (mode))\n-\t{\n-\t  case 4:\n-\t    return 0;\n-\t  case 8:\n-\t    return 1;\n-\t  case 16:\n-\t    return 2;\n-\t  case 32:\n-\t    return 3;\n-\t  case 64:\n-\t    return 4;\n-\t  default:\n-\t    return -1;\n-\t}\n+  /* NB: Use SFmode cost for HFmode instead of adding HFmode load/store\n+     costs to processor_costs, which requires changes to all entries in\n+     processor cost table.  */\n+  if (mode == E_HFmode)\n+    mode = E_SFmode;\n+\n+  switch (GET_MODE_SIZE (mode))\n+    {\n+    case 4:\n+      return 0;\n+    case 8:\n+      return 1;\n+    case 16:\n+      return 2;\n+    case 32:\n+      return 3;\n+    case 64:\n+      return 4;\n+    default:\n+      return -1;\n+    }\n }\n \n /* Return the cost of moving data of mode M between a\n@@ -19444,11 +19473,13 @@ static inline int\n inline_memory_move_cost (machine_mode mode, enum reg_class regclass, int in)\n {\n   int cost;\n+\n   if (FLOAT_CLASS_P (regclass))\n     {\n       int index;\n       switch (mode)\n \t{\n+\t  case E_HFmode:\n \t  case E_SFmode:\n \t    index = 0;\n \t    break;\n@@ -19549,11 +19580,32 @@ inline_memory_move_cost (machine_mode mode, enum reg_class regclass, int in)\n \t  }\n \tbreak;\n       case 2:\n-\tif (in == 2)\n-\t  return MAX (ix86_cost->hard_register.int_load[1],\n-\t\t      ix86_cost->hard_register.int_store[1]);\n-\treturn in ? ix86_cost->hard_register.int_load[1]\n-\t\t  : ix86_cost->hard_register.int_store[1];\n+\t{\n+\t  int cost;\n+\t  if (in == 2)\n+\t    cost = MAX (ix86_cost->hard_register.int_load[1],\n+\t\t\tix86_cost->hard_register.int_store[1]);\n+\t  else\n+\t    cost = in ? ix86_cost->hard_register.int_load[1]\n+\t\t      : ix86_cost->hard_register.int_store[1];\n+\n+\t  if (mode == E_HFmode)\n+\t    {\n+\t      /* Prefer SSE over GPR for HFmode.  */\n+\t      int sse_cost;\n+\t      int index = sse_store_index (mode);\n+\t      if (in == 2)\n+\t\tsse_cost = MAX (ix86_cost->hard_register.sse_load[index],\n+\t\t\t\tix86_cost->hard_register.sse_store[index]);\n+\t      else\n+\t\tsse_cost = (in\n+\t\t\t    ? ix86_cost->hard_register.sse_load [index]\n+\t\t\t    : ix86_cost->hard_register.sse_store [index]);\n+\t      if (sse_cost >= cost)\n+\t\tcost = sse_cost + 1;\n+\t    }\n+\t  return cost;\n+\t}\n       default:\n \tif (in == 2)\n \t  cost = MAX (ix86_cost->hard_register.int_load[2],\n@@ -19727,6 +19779,8 @@ ix86_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n \t  - XI mode\n \t  - any of 512-bit wide vector mode\n \t  - any scalar mode.  */\n+      /* For AVX512FP16, vmovw supports movement of HImode\n+\t between gpr and sse registser.  */\n       if (TARGET_AVX512F\n \t  && (mode == XImode\n \t      || VALID_AVX512F_REG_MODE (mode)\n@@ -20048,7 +20102,7 @@ ix86_multiplication_cost (const struct processor_costs *cost,\n   if (VECTOR_MODE_P (mode))\n     inner_mode = GET_MODE_INNER (mode);\n \n-  if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n+  if (SSE_FLOAT_MODE_SSEMATH_OR_HF_P (mode))\n     return inner_mode == DFmode ? cost->mulsd : cost->mulss;\n   else if (X87_FLOAT_MODE_P (mode))\n     return cost->fmul;\n@@ -20100,7 +20154,7 @@ ix86_division_cost (const struct processor_costs *cost,\n   if (VECTOR_MODE_P (mode))\n     inner_mode = GET_MODE_INNER (mode);\n \n-  if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n+  if (SSE_FLOAT_MODE_SSEMATH_OR_HF_P (mode))\n     return inner_mode == DFmode ? cost->divsd : cost->divss;\n   else if (X87_FLOAT_MODE_P (mode))\n     return cost->fdiv;\n@@ -20518,7 +20572,7 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n \t  return true;\n \t}\n \n-      if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n+      if (SSE_FLOAT_MODE_SSEMATH_OR_HF_P (mode))\n \t{\n \t  *total = cost->addss;\n \t  return false;\n@@ -20557,7 +20611,7 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n       /* FALLTHRU */\n \n     case NEG:\n-      if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n+      if (SSE_FLOAT_MODE_SSEMATH_OR_HF_P (mode))\n \t{\n \t  *total = cost->sse_op;\n \t  return false;\n@@ -20639,14 +20693,14 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n       return false;\n \n     case FLOAT_EXTEND:\n-      if (!(SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH))\n+      if (!SSE_FLOAT_MODE_SSEMATH_OR_HF_P (mode))\n \t*total = 0;\n       else\n         *total = ix86_vec_cost (mode, cost->addss);\n       return false;\n \n     case FLOAT_TRUNCATE:\n-      if (!(SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH))\n+      if (!SSE_FLOAT_MODE_SSEMATH_OR_HF_P (mode))\n \t*total = cost->fadd;\n       else\n         *total = ix86_vec_cost (mode, cost->addss);\n@@ -20656,7 +20710,7 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n       /* SSE requires memory load for the constant operand. It may make\n \t sense to account for this.  Of course the constant operand may or\n \t may not be reused. */\n-      if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n+      if (SSE_FLOAT_MODE_SSEMATH_OR_HF_P (mode))\n \t*total = cost->sse_op;\n       else if (X87_FLOAT_MODE_P (mode))\n \t*total = cost->fabs;\n@@ -20665,7 +20719,7 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n       return false;\n \n     case SQRT:\n-      if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n+      if (SSE_FLOAT_MODE_SSEMATH_OR_HF_P (mode))\n \t*total = mode == SFmode ? cost->sqrtss : cost->sqrtsd;\n       else if (X87_FLOAT_MODE_P (mode))\n \t*total = cost->fsqrt;\n@@ -22154,6 +22208,10 @@ ix86_mangle_type (const_tree type)\n \n   switch (TYPE_MODE (type))\n     {\n+    case E_HFmode:\n+      /* _Float16 is \"DF16_\".\n+\t Align with clang's decision in https://reviews.llvm.org/D33719. */\n+      return \"DF16_\";\n     case E_TFmode:\n       /* __float128 is \"g\".  */\n       return \"g\";\n@@ -22777,7 +22835,7 @@ ix86_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \tcase MINUS_EXPR:\n \t  if (kind == scalar_stmt)\n \t    {\n-\t      if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n+\t      if (SSE_FLOAT_MODE_SSEMATH_OR_HF_P (mode))\n \t\tstmt_cost = ix86_cost->addss;\n \t      else if (X87_FLOAT_MODE_P (mode))\n \t\tstmt_cost = ix86_cost->fadd;\n@@ -22803,7 +22861,7 @@ ix86_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \t  break;\n \n \tcase NEGATE_EXPR:\n-\t  if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n+\t  if (SSE_FLOAT_MODE_SSEMATH_OR_HF_P (mode))\n \t    stmt_cost = ix86_cost->sse_op;\n \t  else if (X87_FLOAT_MODE_P (mode))\n \t    stmt_cost = ix86_cost->fchs;\n@@ -22859,7 +22917,7 @@ ix86_add_stmt_cost (class vec_info *vinfo, void *data, int count,\n \tcase BIT_XOR_EXPR:\n \tcase BIT_AND_EXPR:\n \tcase BIT_NOT_EXPR:\n-\t  if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n+\t  if (SSE_FLOAT_MODE_SSEMATH_OR_HF_P (mode))\n \t    stmt_cost = ix86_cost->sse_op;\n \t  else if (VECTOR_MODE_P (mode))\n \t    stmt_cost = ix86_vec_cost (mode, ix86_cost->sse_op);\n@@ -23574,14 +23632,18 @@ ix86_get_excess_precision (enum excess_precision_type type)\n \t/* The fastest type to promote to will always be the native type,\n \t   whether that occurs with implicit excess precision or\n \t   otherwise.  */\n-\treturn FLT_EVAL_METHOD_PROMOTE_TO_FLOAT;\n+\treturn TARGET_AVX512FP16\n+\t       ? FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16\n+\t       : FLT_EVAL_METHOD_PROMOTE_TO_FLOAT;\n       case EXCESS_PRECISION_TYPE_STANDARD:\n       case EXCESS_PRECISION_TYPE_IMPLICIT:\n \t/* Otherwise, the excess precision we want when we are\n \t   in a standards compliant mode, and the implicit precision we\n \t   provide would be identical were it not for the unpredictable\n \t   cases.  */\n-\tif (!TARGET_80387)\n+\tif (TARGET_AVX512FP16 && TARGET_SSE_MATH)\n+\t  return FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16;\n+\telse if (!TARGET_80387)\n \t  return FLT_EVAL_METHOD_PROMOTE_TO_FLOAT;\n \telse if (!TARGET_MIX_SSE_I387)\n \t  {"}, {"sha": "2ac8f3ecb16e2d5b0a6b20db7a820294392f8bf6", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -1007,7 +1007,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n #define VALID_AVX512F_SCALAR_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == DImode || (MODE) == DFmode || (MODE) == SImode\t\t\\\n-   || (MODE) == SFmode)\n+   || (MODE) == SFmode\t\t\t\t\t\t\t\\\n+   || (TARGET_AVX512FP16 && ((MODE) == HImode || (MODE) == HFmode)))\n \n #define VALID_AVX512F_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V8DImode || (MODE) == V8DFmode || (MODE) == V64QImode\t\\\n@@ -1046,7 +1047,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n #define VALID_FP_MODE_P(MODE)\t\t\t\t\t\t\\\n   ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode\t\t\\\n-   || (MODE) == SCmode || (MODE) == DCmode || (MODE) == XCmode)\t\t\\\n+   || (MODE) == SCmode || (MODE) == DCmode || (MODE) == XCmode)\n \n #define VALID_INT_MODE_P(MODE)\t\t\t\t\t\t\\\n   ((MODE) == QImode || (MODE) == HImode\t\t\t\t\t\\\n@@ -1079,6 +1080,10 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define SSE_FLOAT_MODE_P(MODE) \\\n   ((TARGET_SSE && (MODE) == SFmode) || (TARGET_SSE2 && (MODE) == DFmode))\n \n+#define SSE_FLOAT_MODE_SSEMATH_OR_HF_P(MODE)\t\t\t\t\\\n+  ((SSE_FLOAT_MODE_P (MODE) && TARGET_SSE_MATH)\t\t\t\t\\\n+   || (TARGET_AVX512FP16 && (MODE) == HFmode))\n+\n #define FMA4_VEC_FLOAT_MODE_P(MODE) \\\n   (TARGET_FMA4 && ((MODE) == V4SFmode || (MODE) == V2DFmode \\\n \t\t  || (MODE) == V8SFmode || (MODE) == V4DFmode))\n@@ -2295,7 +2300,7 @@ constexpr wide_int_bitmask PTA_TIGERLAKE = PTA_ICELAKE_CLIENT | PTA_MOVDIRI\n constexpr wide_int_bitmask PTA_SAPPHIRERAPIDS = PTA_COOPERLAKE | PTA_MOVDIRI\n   | PTA_MOVDIR64B | PTA_AVX512VP2INTERSECT | PTA_ENQCMD | PTA_CLDEMOTE\n   | PTA_PTWRITE | PTA_WAITPKG | PTA_SERIALIZE | PTA_TSXLDTRK | PTA_AMX_TILE\n-  | PTA_AMX_INT8 | PTA_AMX_BF16 | PTA_UINTR | PTA_AVXVNNI;\n+  | PTA_AMX_INT8 | PTA_AMX_BF16 | PTA_UINTR | PTA_AVXVNNI | PTA_AVX512FP16;\n constexpr wide_int_bitmask PTA_KNL = PTA_BROADWELL | PTA_AVX512PF\n   | PTA_AVX512ER | PTA_AVX512F | PTA_AVX512CD | PTA_PREFETCHWT1;\n constexpr wide_int_bitmask PTA_BONNELL = PTA_CORE2 | PTA_MOVBE;"}, {"sha": "dcbbf2bae8bb2e948619ce8910b52f11990b401d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 155, "deletions": 17, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -499,7 +499,7 @@\n \n ;; Main data type used by the insn\n (define_attr \"mode\"\n-  \"unknown,none,QI,HI,SI,DI,TI,OI,XI,SF,DF,XF,TF,V16SF,V8SF,V4DF,V4SF,\n+  \"unknown,none,QI,HI,SI,DI,TI,OI,XI,HF,SF,DF,XF,TF,V16SF,V8SF,V4DF,V4SF,\n   V2DF,V2SF,V1DF,V8DF\"\n   (const_string \"unknown\"))\n \n@@ -835,8 +835,7 @@\n \t\t    sse_noavx,sse2,sse2_noavx,sse3,sse3_noavx,sse4,sse4_noavx,\n \t\t    avx,noavx,avx2,noavx2,bmi,bmi2,fma4,fma,avx512f,noavx512f,\n \t\t    avx512bw,noavx512bw,avx512dq,noavx512dq,\n-\t\t    avx512vl,noavx512vl,\n-\t\t    avxvnni,avx512vnnivl\"\n+\t\t    avx512vl,noavx512vl,avxvnni,avx512vnnivl,avx512fp16\"\n   (const_string \"base\"))\n \n ;; Define instruction set of MMX instructions\n@@ -888,6 +887,8 @@\n \t (eq_attr \"isa\" \"avxvnni\") (symbol_ref \"TARGET_AVXVNNI\")\n \t (eq_attr \"isa\" \"avx512vnnivl\")\n \t   (symbol_ref \"TARGET_AVX512VNNI && TARGET_AVX512VL\")\n+\t (eq_attr \"isa\" \"avx512fp16\")\n+\t   (symbol_ref \"TARGET_AVX512FP16\")\n \n \t (eq_attr \"mmx_isa\" \"native\")\n \t   (symbol_ref \"!TARGET_MMX_WITH_SSE\")\n@@ -909,6 +910,7 @@\n    (set_attr \"type\" \"multi\")])\n \n (define_code_iterator plusminus [plus minus])\n+(define_code_iterator plusminusmultdiv [plus minus mult div])\n \n (define_code_iterator sat_plusminus [ss_plus us_plus ss_minus us_minus])\n \n@@ -924,7 +926,8 @@\n \n ;; Mark commutative operators as such in constraints.\n (define_code_attr comm [(plus \"%\") (ss_plus \"%\") (us_plus \"%\")\n-\t\t\t(minus \"\") (ss_minus \"\") (us_minus \"\")])\n+\t\t\t(minus \"\") (ss_minus \"\") (us_minus \"\")\n+\t\t\t(mult \"%\") (div \"\")])\n \n ;; Mapping of max and min\n (define_code_iterator maxmin [smax smin umax umin])\n@@ -1024,7 +1027,8 @@\n    (minus \"sub\") (ss_minus \"sssub\") (us_minus \"ussub\")\n    (sign_extend \"extend\") (zero_extend \"zero_extend\")\n    (ashift \"ashl\") (lshiftrt \"lshr\") (ashiftrt \"ashr\")\n-   (rotate \"rotl\") (rotatert \"rotr\")])\n+   (rotate \"rotl\") (rotatert \"rotr\")\n+   (mult \"mul\") (div \"div\")])\n \n ;; All integer modes.\n (define_mode_iterator SWI1248x [QI HI SI DI])\n@@ -1092,8 +1096,9 @@\n ;; compile time constant, it is faster to use <MODE_SIZE> than\n ;; GET_MODE_SIZE (<MODE>mode).  For XFmode which depends on\n ;; command line options just use GET_MODE_SIZE macro.\n-(define_mode_attr MODE_SIZE [(QI \"1\") (HI \"2\") (SI \"4\") (DI \"8\") (TI \"16\")\n-\t\t\t     (SF \"4\") (DF \"8\") (XF \"GET_MODE_SIZE (XFmode)\")\n+(define_mode_attr MODE_SIZE [(QI \"1\") (HI \"2\") (SI \"4\") (DI \"8\")\n+\t\t\t     (TI \"16\") (HF \"2\") (SF \"4\") (DF \"8\")\n+\t\t\t     (XF \"GET_MODE_SIZE (XFmode)\")\n \t\t\t     (V16QI \"16\") (V32QI \"32\") (V64QI \"64\")\n \t\t\t     (V8HI \"16\") (V16HI \"32\") (V32HI \"64\")\n \t\t\t     (V4SI \"16\") (V8SI \"32\") (V16SI \"64\")\n@@ -1226,16 +1231,16 @@\n ;; All x87 floating point modes\n (define_mode_iterator X87MODEF [SF DF XF])\n \n-;; All x87 floating point modes plus HF\n-(define_mode_iterator X87MODEFH [SF DF XF HF])\n+;; All x87 floating point modes plus HFmode\n+(define_mode_iterator X87MODEFH [HF SF DF XF])\n \n ;; All SSE floating point modes\n (define_mode_iterator SSEMODEF [SF DF TF])\n (define_mode_attr ssevecmodef [(SF \"V4SF\") (DF \"V2DF\") (TF \"TF\")])\n \n ;; SSE instruction suffix for various modes\n (define_mode_attr ssemodesuffix\n-  [(SF \"ss\") (DF \"sd\")\n+  [(HF \"sh\") (SF \"ss\") (DF \"sd\")\n    (V16SF \"ps\") (V8DF \"pd\")\n    (V8SF \"ps\") (V4DF \"pd\")\n    (V4SF \"ps\") (V2DF \"pd\")\n@@ -1500,6 +1505,23 @@\n   DONE;\n })\n \n+(define_expand \"cbranchhf4\"\n+  [(set (reg:CC FLAGS_REG)\n+\t(compare:CC (match_operand:HF 1 \"cmp_fp_expander_operand\")\n+\t\t    (match_operand:HF 2 \"cmp_fp_expander_operand\")))\n+   (set (pc) (if_then_else\n+              (match_operator 0 \"ix86_fp_comparison_operator\"\n+               [(reg:CC FLAGS_REG)\n+                (const_int 0)])\n+              (label_ref (match_operand 3))\n+              (pc)))]\n+  \"TARGET_AVX512FP16\"\n+{\n+  ix86_expand_branch (GET_CODE (operands[0]),\n+\t\t      operands[1], operands[2], operands[3]);\n+  DONE;\n+})\n+\n (define_expand \"cbranch<mode>4\"\n   [(set (reg:CC FLAGS_REG)\n \t(compare:CC (match_operand:MODEF 1 \"cmp_fp_expander_operand\")\n@@ -1709,6 +1731,17 @@\n \t (eq_attr \"alternative\" \"0\")\n \t (symbol_ref \"true\")\n \t (symbol_ref \"false\"))))])\n+\n+(define_insn \"*cmpi<unord>hf\"\n+  [(set (reg:CCFP FLAGS_REG)\n+\t(compare:CCFP\n+\t  (match_operand:HF 0 \"register_operand\" \"v\")\n+\t  (match_operand:HF 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512FP16\"\n+  \"v<unord>comish\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecomi\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"HF\")])\n \f\n ;; Push/pop instructions.\n \n@@ -2440,8 +2473,8 @@\n \t   (symbol_ref \"true\")))])\n \n (define_insn \"*movhi_internal\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r ,r ,m ,*k,*k ,*r,*m,*k\")\n-\t(match_operand:HI 1 \"general_operand\"      \"r ,rn,rm,rn,*r,*km,*k,*k,CBC\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r ,r ,m ,*k,*k ,*r,*m,*k,?r,?v,*v,*v,*m\")\n+\t(match_operand:HI 1 \"general_operand\"      \"r ,rn,rm,rn,*r,*km,*k,*k,CBC,v, r, v, m, v\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && ix86_hardreg_mov_ok (operands[0], operands[1])\"\n \n@@ -2467,6 +2500,9 @@\n \t  gcc_unreachable ();\n \t}\n \n+    case TYPE_SSEMOV:\n+      return ix86_output_ssemov (insn, operands);\n+\n     case TYPE_MSKLOG:\n       if (operands[1] == const0_rtx)\n \treturn \"kxorw\\t%0, %0, %0\";\n@@ -2481,8 +2517,15 @@\n \treturn \"mov{w}\\t{%1, %0|%0, %1}\";\n     }\n }\n-  [(set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"4,5,6,7\")\n+  [(set (attr \"isa\")\n+\t(cond [(eq_attr \"alternative\" \"9,10,11,12,13\")\n+\t\t  (const_string \"avx512fp16\")\n+\t       ]\n+\t       (const_string \"*\")))\n+   (set (attr \"type\")\n+     (cond [(eq_attr \"alternative\" \"9,10,11,12,13\")\n+\t      (const_string \"ssemov\")\n+\t    (eq_attr \"alternative\" \"4,5,6,7\")\n \t      (const_string \"mskmov\")\n \t    (eq_attr \"alternative\" \"8\")\n \t      (const_string \"msklog\")\n@@ -2507,6 +2550,8 @@\n     (set (attr \"mode\")\n       (cond [(eq_attr \"type\" \"imovx\")\n \t       (const_string \"SI\")\n+\t     (eq_attr \"alternative\" \"11\")\n+\t       (const_string \"HF\")\n \t     (and (eq_attr \"alternative\" \"1,2\")\n \t\t  (match_operand:HI 1 \"aligned_operand\"))\n \t       (const_string \"SI\")\n@@ -3731,7 +3776,10 @@\n \t       (eq_attr \"alternative\" \"2\")\n \t\t (const_string \"sselog1\")\n \t       (eq_attr \"alternative\" \"4,5,6,7\")\n-\t\t (const_string \"sselog\")\n+\t\t (if_then_else\n+\t\t   (match_test (\"TARGET_AVX512FP16\"))\n+\t\t   (const_string \"ssemov\")\n+\t\t   (const_string \"sselog\"))\n \t      ]\n \t      (const_string \"ssemov\")))\n    (set (attr \"memory\")\n@@ -3754,9 +3802,15 @@\n \t       (eq_attr \"alternative\" \"2\")\n \t\t (const_string \"V4SF\")\n \t       (eq_attr \"alternative\" \"4,5,6,7\")\n-\t\t (const_string \"TI\")\n+\t\t (if_then_else\n+\t\t   (match_test \"TARGET_AVX512FP16\")\n+\t\t   (const_string \"HI\")\n+\t\t   (const_string \"TI\"))\n \t       (eq_attr \"alternative\" \"3\")\n-\t\t (const_string \"SF\")\n+\t\t (if_then_else\n+\t\t   (match_test \"TARGET_AVX512FP16\")\n+\t\t   (const_string \"HF\")\n+\t\t   (const_string \"SF\"))\n \t      ]\n \t      (const_string \"*\")))])\n \n@@ -4497,6 +4551,17 @@\n   emit_move_insn (operands[0], CONST0_RTX (V2DFmode));\n })\n \n+(define_insn \"extendhf<mode>2\"\n+  [(set (match_operand:MODEF 0 \"nonimm_ssenomem_operand\" \"=v\")\n+        (float_extend:MODEF\n+\t  (match_operand:HF 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512FP16\"\n+  \"vcvtsh2<ssemodesuffix>\\t{%1, %0, %0|%0, %0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+\n (define_expand \"extend<mode>xf2\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\")\n         (float_extend:XF (match_operand:MODEF 1 \"general_operand\")))]\n@@ -4674,6 +4739,18 @@\n \t      (symbol_ref \"flag_unsafe_math_optimizations\")\n \t   ]\n \t   (symbol_ref \"true\")))])\n+\n+;; Conversion from {SF,DF}mode to HFmode.\n+\n+(define_insn \"trunc<mode>hf2\"\n+  [(set (match_operand:HF 0 \"register_operand\" \"=v\")\n+       (float_truncate:HF\n+         (match_operand:MODEF 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512FP16\"\n+  \"vcvt<ssemodesuffix>2sh\\t{%1, %d0|%d0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"HF\")])\n \f\n ;; Signed conversion to DImode.\n \n@@ -5050,6 +5127,16 @@\n \t      (symbol_ref \"TARGET_INTER_UNIT_CONVERSIONS\")]\n \t   (symbol_ref \"true\")))])\n \n+(define_insn \"float<floatunssuffix><mode>hf2\"\n+  [(set (match_operand:HF 0 \"register_operand\" \"=v\")\n+\t(any_float:HF\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")))]\n+  \"TARGET_AVX512FP16\"\n+  \"vcvt<floatsuffix>si2sh<rex64suffix>\\t{%1, %d0|%d0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"HF\")])\n+\n (define_insn \"*floatdi<MODEF:mode>2_i387\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=f\")\n \t(float:MODEF (match_operand:DI 1 \"nonimmediate_operand\" \"m\")))]\n@@ -7653,6 +7740,13 @@\n \t  (match_operand:XF 2 \"register_operand\")))]\n   \"TARGET_80387\")\n \n+(define_expand \"<insn>hf3\"\n+  [(set (match_operand:HF 0 \"register_operand\")\n+\t(plusminus:HF\n+\t  (match_operand:HF 1 \"register_operand\")\n+\t  (match_operand:HF 2 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512FP16\")\n+\n (define_expand \"<insn><mode>3\"\n   [(set (match_operand:MODEF 0 \"register_operand\")\n \t(plusminus:MODEF\n@@ -8230,6 +8324,12 @@\n \t\t (match_operand:XF 2 \"register_operand\")))]\n   \"TARGET_80387\")\n \n+(define_expand \"mulhf3\"\n+  [(set (match_operand:HF 0 \"register_operand\")\n+\t(mult:HF (match_operand:HF 1 \"register_operand\")\n+\t\t    (match_operand:HF 2 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512FP16\")\n+\n (define_expand \"mul<mode>3\"\n   [(set (match_operand:MODEF 0 \"register_operand\")\n \t(mult:MODEF (match_operand:MODEF 1 \"register_operand\")\n@@ -8247,6 +8347,12 @@\n \t\t(match_operand:XF 2 \"register_operand\")))]\n   \"TARGET_80387\")\n \n+(define_expand \"divhf3\"\n+  [(set (match_operand:HF 0 \"register_operand\")\n+\t(div:HF (match_operand:HF 1 \"register_operand\")\n+\t\t   (match_operand:HF 2 \"nonimmediate_operand\")))]\n+  \"TARGET_AVX512FP16\")\n+\n (define_expand \"div<mode>3\"\n   [(set (match_operand:MODEF 0 \"register_operand\")\n \t(div:MODEF (match_operand:MODEF 1 \"register_operand\")\n@@ -16667,6 +16773,17 @@\n \t (symbol_ref \"true\")\n \t (symbol_ref \"false\"))))])\n \n+(define_insn \"*<insn>hf\"\n+  [(set (match_operand:HF 0 \"register_operand\" \"=v\")\n+\t(plusminusmultdiv:HF\n+\t  (match_operand:HF 1 \"nonimmediate_operand\" \"<comm>v\")\n+\t  (match_operand:HF 2 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512FP16\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n+  \"v<insn>sh\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"HF\")])\n+\n (define_insn \"*rcpsf2_sse\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=x,x,x\")\n \t(unspec:SF [(match_operand:SF 1 \"nonimmediate_operand\" \"0,x,m\")]\n@@ -19619,6 +19736,15 @@\n   operands[9] = replace_rtx (operands[6], operands[0], operands[1], true);\n })\n \n+(define_expand \"movhfcc\"\n+  [(set (match_operand:HF 0 \"register_operand\")\n+\t(if_then_else:HF\n+\t  (match_operand 1 \"comparison_operator\")\n+\t  (match_operand:HF 2 \"register_operand\")\n+\t  (match_operand:HF 3 \"register_operand\")))]\n+  \"TARGET_AVX512FP16\"\n+  \"if (ix86_expand_fp_movcc (operands)) DONE; else FAIL;\")\n+\n (define_expand \"mov<mode>cc\"\n   [(set (match_operand:X87MODEF 0 \"register_operand\")\n \t(if_then_else:X87MODEF\n@@ -19785,6 +19911,18 @@\n ;; Their operands are not commutative, and thus they may be used in the\n ;; presence of -0.0 and NaN.\n \n+(define_insn \"*ieee_s<ieee_maxmin>hf3\"\n+  [(set (match_operand:HF 0 \"register_operand\" \"=v\")\n+\t(unspec:HF\n+\t  [(match_operand:HF 1 \"register_operand\" \"v\")\n+\t   (match_operand:HF 2 \"nonimmediate_operand\" \"vm\")]\n+\t  IEEE_MAXMIN))]\n+  \"TARGET_AVX512FP16\"\n+  \"v<ieee_maxmin>sh\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"type\" \"sseadd\")\n+   (set_attr \"mode\" \"HF\")])\n+\n (define_insn \"*ieee_s<ieee_maxmin><mode>3\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=x,v\")\n \t(unspec:MODEF"}, {"sha": "ad366974b5b867c437b5c39983bcf5bab2b30013", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -1166,3 +1166,7 @@ Emit GNU_PROPERTY_X86_ISA_1_NEEDED GNU property.\n mmwait\n Target Mask(ISA2_MWAIT) Var(ix86_isa_flags2) Save\n Support MWAIT and MONITOR built-in functions and code generation.\n+\n+mavx512fp16\n+Target Mask(ISA2_AVX512FP16) Var(ix86_isa_flags2) Save\n+Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512FP16 built-in functions and code generation."}, {"sha": "2421a78637bc577602100773bc374ecf56e43fd3", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -94,6 +94,10 @@\n \n #include <avx512vp2intersectvlintrin.h>\n \n+#ifdef __SSE2__\n+#include <avx512fp16intrin.h>\n+#endif\n+\n #include <shaintrin.h>\n \n #include <fmaintrin.h>"}, {"sha": "52bc4e5b76e7c96a9c131923f675a5686bd2ee71", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -1163,6 +1163,14 @@ as 32-bit precision. This may lead to inconsistent behavior between software\n emulation and AVX512-FP16 instructions. Using @option{-fexcess-precision=16}\n will force round back after each operation.\n \n+Using @option{-mavx512fp16} will generate AVX512-FP16 instructions instead of\n+software emulation. The default behavior of @code{FLT_EVAL_METHOD} is to round\n+after each operation. The same is true with @option{-fexcess-precision=standard}\n+and @option{-mfpmath=sse}. If there is no @option{-mfpmath=sse},\n+@option{-fexcess-precision=standard} alone does the same thing as before,\n+It is useful for code that does not have @code{_Float16} and runs on the x87\n+FPU.\n+\n @node Decimal Float\n @section Decimal Floating Types\n @cindex decimal floating types"}, {"sha": "d4b3a66ee4fecd2828902a3554943a9ed5383675", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -1395,6 +1395,7 @@ See RS/6000 and PowerPC Options.\n -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid @gol\n -mrdseed  -msgx -mavx512vp2intersect -mserialize -mtsxldtrk@gol\n -mamx-tile  -mamx-int8  -mamx-bf16 -muintr -mhreset -mavxvnni@gol\n+-mavx512fp16 @gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mkl -mwidekl @gol\n@@ -31289,6 +31290,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mavx512bf16\n @opindex mavx512bf16\n @need 200\n+@itemx -mavx512fp16\n+@opindex mavx512fp16\n+@need 200\n @itemx -mgfni\n @opindex mgfni\n @need 200\n@@ -31367,9 +31371,9 @@ WBNOINVD, FMA4, PREFETCHW, RDPID, PREFETCHWT1, RDSEED, SGX, XOP, LWP,\n XSAVEOPT, XSAVEC, XSAVES, RTM, HLE, TBM, MWAITX, CLZERO, PKU, AVX512VBMI2,\n GFNI, VAES, WAITPKG, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B, AVX512BF16,\n ENQCMD, AVX512VPOPCNTDQ, AVX5124FMAPS, AVX512VNNI, AVX5124VNNIW, SERIALIZE,\n-UINTR, HRESET, AMXTILE, AMXINT8, AMXBF16, KL, WIDEKL, AVXVNNI or CLDEMOTE\n-extended instruction sets. Each has a corresponding @option{-mno-} option to\n-disable use of these instructions.\n+UINTR, HRESET, AMXTILE, AMXINT8, AMXBF16, KL, WIDEKL, AVXVNNI, AVX512FP16\n+or CLDEMOTE extended instruction sets. Each has a corresponding\n+@option{-mno-} option to disable use of these instructions.\n \n These extensions are also available as built-in functions: see\n @ref{x86 Built-in Functions}, for details of the functions enabled and"}, {"sha": "fba3d1ac684c42fba719e96af645d6abe48b040f", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "5cc0fa83457c6fd9edb5a933a6920d11a44727df", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,"}, {"sha": "95d1ac27c4fc29d3ca6ec8d61be33a9e04215e90", "filename": "gcc/testsuite/g++.target/i386/float16-1.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Ffloat16-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Ffloat16-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Ffloat16-1.C?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-sse2\" } */\n+\n+_Float16/* { dg-error \"does not name a type\" } */\n+foo (_Float16 x) \n+{\n+  return x;\n+}"}, {"sha": "99eb797eff1ea2e998479dbb0faf3ba7e0a596b9", "filename": "gcc/testsuite/g++.target/i386/float16-2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Ffloat16-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Ffloat16-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Ffloat16-2.C?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do assemble { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+union flt\n+{\n+  _Float16 flt;\n+  short s;\n+};\n+\n+_Float16\n+foo (union flt x)\n+{\n+  return x.flt;\n+}"}, {"sha": "940878503f104b6f8792abc9336273c9d839390f", "filename": "gcc/testsuite/g++.target/i386/float16-3.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Ffloat16-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Ffloat16-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Ffloat16-3.C?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do assemble { target avx512fp16 } } */\n+/* { dg-options \"-O0 -mavx512fp16\" } */\n+\n+template <typename> void a(char *) {}\n+char b, d;\n+void c()\n+{\n+  a<unsigned char>(&d);\n+  a<_Float16>(&b);\n+}"}, {"sha": "f3676077743edcbed13648d04c226750d14b31ac", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -maes -mpclmul -mgfni -mavx512bw\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -maes -mpclmul -mgfni -mavx512bw -mavx512fp16\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "1751c52565c23bfbc48914d56845bba2f0dc6593", "filename": "gcc/testsuite/gcc.target/i386/avx-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -msse4a -maes -mpclmul -mavx512bw\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -m3dnow -mavx -mavx2 -msse4a -maes -mpclmul -mavx512bw -mavx512fp16\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "0ad9064f637070ee9f3fab8b742344c2fca822fb", "filename": "gcc/testsuite/gcc.target/i386/avx512-check.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -87,6 +87,9 @@ main ()\n #ifdef AVX512VNNI\n       && (ecx & bit_AVX512VNNI)\n #endif\n+#ifdef AVX512FP16\n+      && (edx & bit_AVX512FP16)\n+#endif\n #ifdef VAES\n       && (ecx & bit_VAES)\n #endif"}, {"sha": "88887556d68737a2e921071aa931843e4a9b4073", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-12a.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-12a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-12a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-12a.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+_Float16\n+__attribute__ ((noinline, noclone))\n+do_max (_Float16 __A, _Float16 __B)\n+{\n+  return __A > __B ? __A : __B;\n+}\n+\n+_Float16\n+__attribute__ ((noinline, noclone))\n+do_min (_Float16 __A, _Float16 __B)\n+{\n+  return __A < __B ? __A : __B;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmaxsh\\[ \\\\t\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vminsh\\[ \\\\t\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vmovsh\\[ \\\\t\\]\" { target { ! ia32 } } } } */\n+/* { dg-final { scan-assembler-not \"vcomish\\[ \\\\t\\]\" } } */"}, {"sha": "c9e23bf95c276f855f0548a6a09a1fddce335438", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-12b.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-12b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-12b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-12b.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+#include <string.h>\n+\n+static void do_test (void);\n+\n+#define DO_TEST do_test\n+#define AVX512FP16\n+#include \"avx512-check.h\"\n+#include \"avx512fp16-12a.c\"\n+\n+static void\n+do_test (void)\n+{\n+  _Float16 x = 0.1f;\n+  _Float16 y = -3.2f;\n+  _Float16 z;\n+\n+  z = do_max (x, y);\n+  if (z != x)\n+    abort ();\n+\n+  z = do_min (x, y);\n+  if (z != y)\n+    abort ();\n+}"}, {"sha": "3846c8e9b6e464ecb21525ceb1e94c3ee65bca8d", "filename": "gcc/testsuite/gcc.target/i386/float16-3a.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-3a.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+_Float16\n+foo (int x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vcvtsi2shl\\[ \\t\\]+\\[^\\n\\r]*%xmm0\" 1 } } */"}, {"sha": "247dd6e7e339d236734b9c15f542e02ab0e285d8", "filename": "gcc/testsuite/gcc.target/i386/float16-3b.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-3b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-3b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-3b.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+_Float16\n+foo (unsigned int x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vcvtusi2shl\\[ \\t\\]+\\[^\\n\\r]*%xmm0\" 1 } } */"}, {"sha": "631082581f34b6dce1903bfcc51fd77cc657dd38", "filename": "gcc/testsuite/gcc.target/i386/float16-4a.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-4a.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+_Float16\n+foo (long long x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vcvtsi2shq\\[ \\t\\]+\\[^\\n\\r]*%xmm0\" 1 } } */"}, {"sha": "828d85307695340b55750e6edba2171e46c0d256", "filename": "gcc/testsuite/gcc.target/i386/float16-4b.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-4b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-4b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffloat16-4b.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+\n+_Float16\n+foo (unsigned long long x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vcvtusi2shq\\[ \\t\\]+\\[^\\n\\r]*%xmm0\" 1 } } */"}, {"sha": "8499fdf2db9bb6b1fdf8b0d013fbc0492a20175b", "filename": "gcc/testsuite/gcc.target/i386/funcspec-56.inc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-56.inc?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -79,6 +79,7 @@ extern void test_hreset (void)\t\t\t__attribute__((__target__(\"hreset\")));\n extern void test_keylocker (void)\t\t__attribute__((__target__(\"kl\")));\n extern void test_widekl (void)\t\t\t__attribute__((__target__(\"widekl\")));\n extern void test_avxvnni (void)\t\t\t__attribute__((__target__(\"avxvnni\")));\n+extern void test_avx512fp16 (void)\t\t__attribute__((__target__(\"avx512fp16\")));\n \n extern void test_no_sgx (void)\t\t\t__attribute__((__target__(\"no-sgx\")));\n extern void test_no_avx5124fmaps(void)\t\t__attribute__((__target__(\"no-avx5124fmaps\")));\n@@ -159,6 +160,7 @@ extern void test_no_hreset (void)\t\t__attribute__((__target__(\"no-hreset\")));\n extern void test_no_keylocker (void)\t\t__attribute__((__target__(\"no-kl\")));\n extern void test_no_widekl (void)\t\t__attribute__((__target__(\"no-widekl\")));\n extern void test_no_avxvnni (void)\t\t__attribute__((__target__(\"no-avxvnni\")));\n+extern void test_no_avx512fp16 (void)\t\t__attribute__((__target__(\"no-avx512fp16\")));\n \n extern void test_arch_nocona (void)\t\t__attribute__((__target__(\"arch=nocona\")));\n extern void test_arch_core2 (void)\t\t__attribute__((__target__(\"arch=core2\")));"}, {"sha": "2f8af392c832728eaaed67c338aa5456b99865c5", "filename": "gcc/testsuite/gcc.target/i386/pr54855-12.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54855-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54855-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54855-12.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+/* { dg-final { scan-assembler-times \"vmaxsh\\[ \\\\t\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vcomish\\[ \\\\t\\]\" } } */\n+/* { dg-final { scan-assembler-not \"vmovsh\\[ \\\\t\\]\" { target { ! ia32 } } } } */\n+\n+#include <immintrin.h>\n+\n+_Float16\n+foo (_Float16 x, _Float16 y)\n+{\n+  x = x > y ? x : y;\n+  return x;\n+}"}, {"sha": "f5f5c11361256b20fcebf44f15f9060dab45b485", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512vbmi2 -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "747d504cedbe25a6032ddfde28a7101bed336104", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx512vbmi2 -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect -mserialize -mtsxldtrk -mamx-tile -mamx-int8 -mamx-bf16 -mkl -mwidekl -mavxvnni -mavx512fp16\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "33411969901b616b48b0d2939750f25d47c7ae81", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -103,7 +103,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512vbmi2,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -220,7 +220,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx512vbmi2,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "86590ca5ffb8fb4b1cb9deb7e4839d96be03142a", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -708,6 +708,6 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect,serialize,tsxldtrk,amx-tile,amx-int8,amx-bf16,kl,widekl,avxvnni,avx512fp16\")\n \n #include <x86intrin.h>"}, {"sha": "82dc131f1e23fc6becc6968f10b7e4bdacc10bc5", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a68412117fa47786bd82ab79b009ec7933aef476/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=a68412117fa47786bd82ab79b009ec7933aef476", "patch": "@@ -3164,7 +3164,7 @@ proc check_effective_target_has_q_floating_suffix { } {\n \n proc check_effective_target_float16 {} {\n     return [check_no_compiler_messages_nocache float16 object {\n-        _Float16 x;\n+        _Float16 foo (_Float16 x) { return x; }\n     } [add_options_for_float16 \"\"]]\n }\n \n@@ -8877,6 +8877,17 @@ proc check_prefer_avx128 { } {\n }\n \n \n+# Return 1 if avx512fp16 instructions can be compiled.\n+\n+proc check_effective_target_avx512fp16 { } {\n+    return [check_no_compiler_messages avx512fp16 object {\n+\tvoid foo (void)\n+\t{\n+\t  asm volatile (\"vmovw %edi, %xmm0\");\n+\t}\n+    } \"-O2 -mavx512fp16\" ]\n+}\n+\n # Return 1 if avx512f instructions can be compiled.\n \n proc check_effective_target_avx512f { } {"}]}