{"sha": "b588ae3074e258f5c736034c212e7499a565746f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU4OGFlMzA3NGUyNThmNWM3MzYwMzRjMjEyZTc0OTlhNTY1NzQ2Zg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-09-05T08:47:50Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-09-05T08:47:50Z"}, "message": "re PR target/54461 ([avr] add configure option for better AVR-Libc integration)\n\n\tPR target/54461\n\t* configure.ac (noconfigdirs,target=avr-*-*): Add target-newlib,\n\ttarget-libgloss if not configured --with-avrlibc=no.\n\t* configure: Regenerate.\n\nlibgcc/\n\tPR target/54461\n\t* config.host (tmake_file,host=avr-*-*): Add avr/t-avrlibc if\n\tnot configured --with-avrlibc=no.\n\t* config/avr/t-avrlibc: New file.\n\t* Makefile.in (FPBIT_FUNCS): filter-out LIB2FUNCS_EXCLUDE.\n\t(DPBIT_FUNCS): Ditto.\n\t(TPBIT_FUNCS): Ditto.\n\ngcc/\n\tPR target/54461\n\t* config.gcc (tm_file,target=avr-*-*): Add avr/avrlibc.h if\n\tnot configured --with-avrlibc=no.\n\t(tm_defines,target=avr-*-*): Add WITH_AVRLIBC if not configured\n\t--with-avrlibc=no.\n\t* config/avr/avrlibc.h: New file.\n\t* config/avr/avr-c.c: Build-in define __WITH_AVRLIBC__ if\n\tnot configured --with-avrlibc=no.\n\t* doc/invoke.texi (AVR Built-in Macros): Document __WITH_AVRLIBC__\n\nFrom-SVN: r190967", "tree": {"sha": "9f336c5bfcd0b1ffef11bb616b7591f8823a8ed2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f336c5bfcd0b1ffef11bb616b7591f8823a8ed2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b588ae3074e258f5c736034c212e7499a565746f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b588ae3074e258f5c736034c212e7499a565746f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b588ae3074e258f5c736034c212e7499a565746f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b588ae3074e258f5c736034c212e7499a565746f/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4efbb06f6737868e79b3791af3462fb58da91013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4efbb06f6737868e79b3791af3462fb58da91013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4efbb06f6737868e79b3791af3462fb58da91013"}], "stats": {"total": 159, "additions": 159, "deletions": 0}, "files": [{"sha": "db2206c44309c1e4b673e0e4ecc0520fff140829", "filename": "ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b588ae3074e258f5c736034c212e7499a565746f/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b588ae3074e258f5c736034c212e7499a565746f/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=b588ae3074e258f5c736034c212e7499a565746f", "patch": "@@ -1,3 +1,10 @@\n+2012-09-05  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/54461\n+\t* configure.ac (noconfigdirs,target=avr-*-*): Add target-newlib,\n+\ttarget-libgloss if not configured --with-avrlibc=no.\n+\t* configure: Regenerate.\n+\n 2012-09-04  Jason Merrill  <jason@redhat.com>\n \n \t* configure.ac: Fix --enable-languages=all."}, {"sha": "8272ed05b28d95ed7325d7978ff243dc88667b3a", "filename": "configure", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b588ae3074e258f5c736034c212e7499a565746f/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b588ae3074e258f5c736034c212e7499a565746f/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=b588ae3074e258f5c736034c212e7499a565746f", "patch": "@@ -3499,6 +3499,13 @@ case \"${target}\" in\n   arm-*-riscix*)\n     noconfigdirs=\"$noconfigdirs ld target-libgloss\"\n     ;;\n+  avr-*-rtems*)\n+    ;;\n+  avr-*-*)\n+    if test x${with_avrlibc} != xno; then\n+      noconfigdirs=\"$noconfigdirs target-newlib target-libgloss\"\n+    fi\n+    ;;\n   c4x-*-* | tic4x-*-*)\n     noconfigdirs=\"$noconfigdirs target-libgloss\"\n     ;;"}, {"sha": "36830d1de2fd368d9b2e352ed77376ae7b4c6950", "filename": "configure.ac", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b588ae3074e258f5c736034c212e7499a565746f/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b588ae3074e258f5c736034c212e7499a565746f/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=b588ae3074e258f5c736034c212e7499a565746f", "patch": "@@ -891,6 +891,13 @@ case \"${target}\" in\n   arm-*-riscix*)\n     noconfigdirs=\"$noconfigdirs ld target-libgloss\"\n     ;;\n+  avr-*-rtems*)\n+    ;;\n+  avr-*-*)\n+    if test x${with_avrlibc} != xno; then\n+      noconfigdirs=\"$noconfigdirs target-newlib target-libgloss\"\n+    fi\n+    ;;\n   c4x-*-* | tic4x-*-*)\n     noconfigdirs=\"$noconfigdirs target-libgloss\"\n     ;;"}, {"sha": "9866362b50b4da8cd161f1f5c4addf360747f181", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b588ae3074e258f5c736034c212e7499a565746f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b588ae3074e258f5c736034c212e7499a565746f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b588ae3074e258f5c736034c212e7499a565746f", "patch": "@@ -1,3 +1,15 @@\n+2012-09-05  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/54461\n+\t* config.gcc (tm_file,target=avr-*-*): Add avr/avrlibc.h if\n+\tnot configured --with-avrlibc=no.\n+\t(tm_defines,target=avr-*-*): Add WITH_AVRLIBC if not configured\n+\t--with-avrlibc=no.\n+\t* config/avr/avrlibc.h: New file.\n+\t* config/avr/avr-c.c: Build-in define __WITH_AVRLIBC__ if\n+\tnot configured --with-avrlibc=no.\n+\t* doc/invoke.texi (AVR Built-in Macros): Document __WITH_AVRLIBC__\n+\n 2012-09-04  Teresa Johnson  <tejohnson@google.com>\n \n \t* gcov-io.c (gcov_write_summary): Write out non-zero histogram"}, {"sha": "6d9c68d81ffd83166fccdb980f7820820e51e6e2", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b588ae3074e258f5c736034c212e7499a565746f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b588ae3074e258f5c736034c212e7499a565746f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b588ae3074e258f5c736034c212e7499a565746f", "patch": "@@ -892,6 +892,10 @@ avr-*-rtems*)\n \t;;\n avr-*-*)\n \ttm_file=\"elfos.h avr/elf.h avr/avr.h dbxelf.h avr/avr-stdint.h\"\n+\tif test x${with_avrlibc} != xno; then\n+\t    tm_file=\"${tm_file} ${cpu_type}/avrlibc.h\"\n+\t    tm_defines=\"${tm_defines} WITH_AVRLIBC\"\n+\tfi\n \ttmake_file=\"avr/t-avr avr/t-multilib\"\n \tuse_gcc_stdint=wrap\n \textra_gcc_objs=\"driver-avr.o avr-devices.o\""}, {"sha": "6eb0ebaed5a107ad78e322977ab4346b5ce77d1b", "filename": "gcc/config/avr/avr-c.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b588ae3074e258f5c736034c212e7499a565746f/gcc%2Fconfig%2Favr%2Favr-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b588ae3074e258f5c736034c212e7499a565746f/gcc%2Fconfig%2Favr%2Favr-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-c.c?ref=b588ae3074e258f5c736034c212e7499a565746f", "patch": "@@ -148,6 +148,10 @@ avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n   cpp_define_formatted (pfile, \"__AVR_SFR_OFFSET__=0x%x\",\n                         avr_current_arch->sfr_offset);\n     \n+#ifdef WITH_AVRLIBC\n+  cpp_define (pfile, \"__WITH_AVRLIBC__\");\n+#endif /* WITH_AVRLIBC */\n+      \n   /* Define builtin macros so that the user can easily query if or if not\n      non-generic address spaces (and which) are supported.\n      This is only supported for C.  For C++, a language extension is needed"}, {"sha": "b1c1a8009d671a44c678511d700a94a149047519", "filename": "gcc/config/avr/avrlibc.h", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b588ae3074e258f5c736034c212e7499a565746f/gcc%2Fconfig%2Favr%2Favrlibc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b588ae3074e258f5c736034c212e7499a565746f/gcc%2Fconfig%2Favr%2Favrlibc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favrlibc.h?ref=b588ae3074e258f5c736034c212e7499a565746f", "patch": "@@ -0,0 +1,31 @@\n+/* Definitions of target machine for the GNU compiler collection\n+   for Atmel AVR micro controller if configured for AVR-Libc.\n+   Copyright (C) 2012\n+   Free Software Foundation, Inc.\n+   Contributed by Georg-Johann Lay (avr@gjlay.de)\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* AVR-Libc implements functions from libgcc.a in libm.a, see PR54461.  */\n+\n+#undef  LIBGCC_SPEC\n+#define LIBGCC_SPEC                                                     \\\n+  \"%{!mmcu=at90s1*:%{!mmcu=attiny11:%{!mmcu=attiny12:%{!mmcu=attiny15:%{!mmcu=attiny28: -lgcc -lm }}}}}\"\n+\n+#undef  LINK_GCC_C_SEQUENCE_SPEC\n+#define LINK_GCC_C_SEQUENCE_SPEC \\\n+  \"--start-group %G %L --end-group\""}, {"sha": "6794313ab777d0551020b4f4bac7c8d68936ed0d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b588ae3074e258f5c736034c212e7499a565746f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b588ae3074e258f5c736034c212e7499a565746f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b588ae3074e258f5c736034c212e7499a565746f", "patch": "@@ -11496,6 +11496,10 @@ or @code{STS}. This offset depends on the device architecture and has\n to be subtracted from the RAM address in order to get the\n respective I/O@tie{}address.\n \n+@item __WITH_AVRLIBC__\n+The compiler is configured to be used together with AVR-Libc.\n+See the @code{--with-avrlibc} configure option.\n+\n @end table\n \n @node Blackfin Options"}, {"sha": "7ffb58c3d245cdffc9e031820d4b8ccbfb13a7ff", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b588ae3074e258f5c736034c212e7499a565746f/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b588ae3074e258f5c736034c212e7499a565746f/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=b588ae3074e258f5c736034c212e7499a565746f", "patch": "@@ -1,3 +1,13 @@\n+2012-09-05  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/54461\n+\t* config.host (tmake_file,host=avr-*-*): Add avr/t-avrlibc if\n+\tnot configured --with-avrlibc=no.\n+\t* config/avr/t-avrlibc: New file.\n+\t* Makefile.in (FPBIT_FUNCS): filter-out LIB2FUNCS_EXCLUDE.\n+\t(DPBIT_FUNCS): Ditto.\n+\t(TPBIT_FUNCS): Ditto.\n+\n 2012-09-04  Teresa Johnson  <tejohnson@google.com>\n \n \t* libgcov.c (struct gcov_summary_buffer): New structure."}, {"sha": "43b14a01f93ccc93e380cc64ccf53083a59fc5dc", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b588ae3074e258f5c736034c212e7499a565746f/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b588ae3074e258f5c736034c212e7499a565746f/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=b588ae3074e258f5c736034c212e7499a565746f", "patch": "@@ -516,6 +516,10 @@ FPBIT_FUNCS := $(filter-out _sf_to_tf,$(FPBIT_FUNCS))\n DPBIT_FUNCS := $(filter-out _df_to_tf,$(DPBIT_FUNCS))\n endif\n \n+FPBIT_FUNCS := $(filter-out $(LIB2FUNCS_EXCLUDE),$(FPBIT_FUNCS))\n+DPBIT_FUNCS := $(filter-out $(LIB2FUNCS_EXCLUDE),$(DPBIT_FUNCS))\n+TPBIT_FUNCS := $(filter-out $(LIB2FUNCS_EXCLUDE),$(TPBIT_FUNCS))\n+\n fpbit-src := $(srcdir)/fp-bit.c\n \n # Build FPBIT."}, {"sha": "486b7152551d0d93f0fd02af46b89542e15b5933", "filename": "libgcc/config.host", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b588ae3074e258f5c736034c212e7499a565746f/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b588ae3074e258f5c736034c212e7499a565746f/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=b588ae3074e258f5c736034c212e7499a565746f", "patch": "@@ -380,6 +380,9 @@ avr-*-rtems*)\n avr-*-*)\n \t# Make HImode functions for AVR\n \ttmake_file=\"${cpu_type}/t-avr t-fpbit\"\n+\tif test x${with_avrlibc} != xno; then\n+\t    tmake_file=\"$tmake_file ${cpu_type}/t-avrlibc\"\n+\tfi\n \ttm_file=\"$tm_file avr/avr-lib.h\"\n \t;;\n bfin*-elf*)"}, {"sha": "d2c8b870aab91035f16047e4ad21f13c4c6ce53d", "filename": "libgcc/config/avr/t-avrlibc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b588ae3074e258f5c736034c212e7499a565746f/libgcc%2Fconfig%2Favr%2Ft-avrlibc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b588ae3074e258f5c736034c212e7499a565746f/libgcc%2Fconfig%2Favr%2Ft-avrlibc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Favr%2Ft-avrlibc?ref=b588ae3074e258f5c736034c212e7499a565746f", "patch": "@@ -0,0 +1,66 @@\n+# This file is used if not configured --with-avrlibc=no\n+#\n+# AVR-Libc comes with hand-optimized float routines.\n+# For historical reasons, these routines live in AVR-Libc\n+# and not in libgcc and use the same function names like libgcc.\n+# To get the best support, i.e. always use the routines from\n+# AVR-Libc, we remove these routines from libgcc.\n+#\n+# See also PR54461.\n+#\n+#\n+# Arithmetic:\n+#     __addsf3 __subsf3 __divsf3 __mulsf3 __negsf2\n+#\n+# Comparison:\n+#     __cmpsf2 __unordsf2\n+#     __eqsf2 __lesf2 __ltsf2 __nesf2 __gesf2 __gtsf2\n+#\n+# Conversion:\n+#     __fixsfdi __fixunssfdi __floatdisf __floatundisf\n+#     __fixsfsi __fixunssfsi __floatsisf __floatunsisf\n+#\n+#\n+# These functions are contained in modules:\n+#\n+# _addsub_sf.o:   __addsf3  __subsf3\n+# _mul_sf.o:      __mulsf3\n+# _div_sf.o:      __divsf3\n+# _negate_sf.o:   __negsf2\n+#\n+# _compare_sf.o:  __cmpsf2\n+# _unord_sf.o:    __unordsf2\n+# _eq_sf.o:       __eqsf2\n+# _ne_sf.o:       __nesf2\n+# _ge_sf.o:       __gesf2\n+# _gt_sf.o:       __gtsf2\n+# _le_sf.o:       __lesf2\n+# _lt_sf.o:       __ltsf2\n+#\n+# _fixsfdi.o:     __fixsfdi\n+# _fixunssfdi.o:  __fixunssfdi\n+# _fixunssfsi.o:  __fixunssfsi\n+# _floatdisf.o:   __floatdisf\n+# _floatundisf.o: __floatundisf\n+# _sf_to_si.o:    __fixsfsi\n+# _si_to_sf.o:    __floatsisf\n+# _usi_to_sf.o:   __floatunsisf\n+\n+\n+# SFmode\n+LIB2FUNCS_EXCLUDE += \\\n+\t_addsub_sf \\\n+\t_negate_sf \\\n+\t_mul_sf _div_sf \\\n+\t\\\n+\t_compare_sf \\\n+\t_unord_sf \\\n+\t_eq_sf _ne_sf \\\n+\t_gt_sf _ge_sf \\\n+\t_lt_sf _le_sf \\\n+\t\\\n+\t_si_to_sf  _sf_to_si \\\n+\t_usi_to_sf _sf_to_usi \\\n+\t_fixunssfsi _fixsfdi \\\n+\t_fixunssfdi \\\n+\t_floatdisf _floatundisf"}]}