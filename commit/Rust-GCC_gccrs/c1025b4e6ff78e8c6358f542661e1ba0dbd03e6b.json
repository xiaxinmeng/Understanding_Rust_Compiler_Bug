{"sha": "c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEwMjViNGU2ZmY3OGU4YzYzNThmNTQyNjYxZTFiYTBkYmQwM2U2Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T10:17:42Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-27T10:17:42Z"}, "message": "[multiple changes]\n\n2017-04-27  Steve Baird  <baird@adacore.com>\n\n\t* exp_util.adb (Build_Allocate_Deallocate_Proc):\n\tAdd \"Suppress => All_Checks\" to avoid generating unnecessary\n\tchecks.\n\n2017-04-27  Yannick Moy  <moy@adacore.com>\n\n\t* debug.adb: Reserve debug flag 'm' for no inlining in GNATprove.\n\t* sem_ch6.adb (Anayze_Subprogram_Body_Helper): Skip creation of\n\tinlining body in GNATprove mode when switch -gnatdm used.\n\t* sem_res.adb (Resolve_Call): Skip detection of lack of inlining\n\tin GNATprove mode when switch -gnatdm used.\n\n2017-04-27  Arnaud Charlet  <charlet@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause\n\t[Attribute_Address]): Call Set_Address_Taken when ignoring rep\n\tclauses, so that we keep an indication of the address clause\n\tbefore removing it from the tree.\n\nFrom-SVN: r247312", "tree": {"sha": "45ea951fea722453e90bb64505c39430628f632a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45ea951fea722453e90bb64505c39430628f632a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b/comments", "author": null, "committer": null, "parents": [{"sha": "cd5acda5a291ddb98c31c46cfe33be819db095c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5acda5a291ddb98c31c46cfe33be819db095c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd5acda5a291ddb98c31c46cfe33be819db095c1"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "cfcf449ffb6db3644e01ebe11ec5eb150ff24577", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b", "patch": "@@ -1,3 +1,24 @@\n+2017-04-27  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_util.adb (Build_Allocate_Deallocate_Proc):\n+\tAdd \"Suppress => All_Checks\" to avoid generating unnecessary\n+\tchecks.\n+\n+2017-04-27  Yannick Moy  <moy@adacore.com>\n+\n+\t* debug.adb: Reserve debug flag 'm' for no inlining in GNATprove.\n+\t* sem_ch6.adb (Anayze_Subprogram_Body_Helper): Skip creation of\n+\tinlining body in GNATprove mode when switch -gnatdm used.\n+\t* sem_res.adb (Resolve_Call): Skip detection of lack of inlining\n+\tin GNATprove mode when switch -gnatdm used.\n+\n+2017-04-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause\n+\t[Attribute_Address]): Call Set_Address_Taken when ignoring rep\n+\tclauses, so that we keep an indication of the address clause\n+\tbefore removing it from the tree.\n+\n 2017-04-27  Yannick Moy  <moy@adacore.com>\n \n \t* exp_util.ads, exp_util.adb (Evaluate_Name): Force evaluation"}, {"sha": "c289c98e6044fefc488fb5c086662af7ad7279fe", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b", "patch": "@@ -49,7 +49,7 @@ package body Debug is\n    --  dj   Suppress \"junk null check\" for access parameter values\n    --  dk   Generate GNATBUG message on abort, even if previous errors\n    --  dl   Generate unit load trace messages\n-   --  dm\n+   --  dm   Prevent special frontend inlining in GNATprove mode\n    --  dn   Generate messages for node/list allocation\n    --  do   Print source from tree (original code only)\n    --  dp   Generate messages for parser scope stack push/pops\n@@ -281,6 +281,11 @@ package body Debug is\n    --       generated each time a request is made to the library manager to\n    --       load a new unit.\n \n+   --  dm   Prevent special frontend inlining in GNATprove mode. In some cases,\n+   --       some subprogram calls are inlined in GNATprove mode in order to\n+   --       facilitate formal verification. This debug switch prevents that\n+   --       inlining to happen.\n+\n    --  dn   Generate messages for node/list allocation. Each time a node or\n    --       list header is allocated, a line of output is generated. Certain\n    --       other basic tree operations also cause a line of output to be"}, {"sha": "4da91dad397d57ae1e0d576a5d4a92e7f52997f9", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b", "patch": "@@ -991,7 +991,8 @@ package body Exp_Util is\n                    Make_Procedure_Call_Statement (Loc,\n                      Name                   =>\n                        New_Occurrence_Of (Proc_To_Call, Loc),\n-                     Parameter_Associations => Actuals)))));\n+                     Parameter_Associations => Actuals)))),\n+           Suppress => All_Checks);\n \n          --  The newly generated Allocate / Deallocate becomes the default\n          --  procedure to call when the back end processes the allocation /"}, {"sha": "2c2366d21920097296be948067e0cf1c69623ce5", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b", "patch": "@@ -4701,7 +4701,7 @@ package body Sem_Ch13 is\n \n             --  We do not do anything here with address clauses, they will be\n             --  removed by Freeze later on, but for now, it works better to\n-            --  keep then in the tree.\n+            --  keep them in the tree.\n \n             when Attribute_Address =>\n                null;\n@@ -4860,8 +4860,12 @@ package body Sem_Ch13 is\n             --  Even when ignoring rep clauses we need to indicate that the\n             --  entity has an address clause and thus it is legal to declare\n             --  it imported. Freeze will get rid of the address clause later.\n+            --  Also call Set_Address_Taken to indicate that an address clause\n+            --  was present, even if we are about to remove it.\n \n             if Ignore_Rep_Clauses then\n+               Set_Address_Taken (U_Ent);\n+\n                if Ekind_In (U_Ent, E_Variable, E_Constant) then\n                   Record_Rep_Item (U_Ent, N);\n                end if;"}, {"sha": "49bcc9b606402ecf13f01c4adb26d4dbce2fc7a6", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b", "patch": "@@ -4050,6 +4050,7 @@ package body Sem_Ch6 is\n       --  inlining. This inlining should occur after analysis of the body, so\n       --  that it is known whether the value of SPARK_Mode, which can be\n       --  defined by a pragma inside the body, is applicable to the body.\n+      --  Inlining can be disabled with switch -gnatdm\n \n       elsif GNATprove_Mode\n         and then Full_Analysis\n@@ -4060,6 +4061,7 @@ package body Sem_Ch6 is\n         and then Body_Has_SPARK_Mode_On\n         and then Can_Be_Inlined_In_GNATprove_Mode (Spec_Id, Body_Id)\n         and then not Body_Has_Contract\n+        and then not Debug_Flag_M\n       then\n          Build_Body_To_Inline (N, Spec_Id);\n       end if;"}, {"sha": "383a5a955195bec4bf510c48b0e77bbaf62e36a6", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=c1025b4e6ff78e8c6358f542661e1ba0dbd03e6b", "patch": "@@ -6621,10 +6621,11 @@ package body Sem_Res is\n             Body_Id := Corresponding_Body (Nam_Decl);\n \n             --  Nothing to do if the subprogram is not eligible for inlining in\n-            --  GNATprove mode.\n+            --  GNATprove mode, or inlining is disabled with switch -gnatdm\n \n             if not Is_Inlined_Always (Nam_UA)\n               or else not Can_Be_Inlined_In_GNATprove_Mode (Nam_UA, Body_Id)\n+              or else Debug_Flag_M\n             then\n                null;\n "}]}