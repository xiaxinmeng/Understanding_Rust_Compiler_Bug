{"sha": "ac6b1c676c9713beb3cfe1ac663c60317c57e1f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM2YjFjNjc2Yzk3MTNiZWIzY2ZlMWFjNjYzYzYwMzE3YzU3ZTFmNg==", "commit": {"author": {"name": "Chao-ying Fu", "email": "fu@mips.com", "date": "2007-08-30T23:05:17Z"}, "committer": {"name": "Chao-ying Fu", "email": "chaoyingfu@gcc.gnu.org", "date": "2007-08-30T23:05:17Z"}, "message": "expr.c (interpret_float_suffix): Support hr, r, lr, llr, uhr, ur, ulr, ullr, hk, k, lk, llk, uhk, uk, ulk, ullk.\n\n\t* expr.c (interpret_float_suffix): Support hr, r, lr, llr, uhr, ur,\n\tulr, ullr, hk, k, lk, llk, uhk, uk, ulk, ullk.\n\t(cpp_classify_number): Support decimal fixed-point constants without\n\texponents.\n\tWarn about fixed-point constants when -pedantic.\n\t* include/cpplib.h (CPP_N_SMALL, CPP_N_MEDIUM, CPP_N_LARGE): Change\n\tcomments to support fixed-point values.\n\t(CPP_N_FRACT, CPP_N_ACCUM): Define.\n\nFrom-SVN: r127940", "tree": {"sha": "f4c07ef719ac366d9d8400e5386ecb0c3d84690c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4c07ef719ac366d9d8400e5386ecb0c3d84690c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac6b1c676c9713beb3cfe1ac663c60317c57e1f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6b1c676c9713beb3cfe1ac663c60317c57e1f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac6b1c676c9713beb3cfe1ac663c60317c57e1f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6b1c676c9713beb3cfe1ac663c60317c57e1f6/comments", "author": null, "committer": null, "parents": [{"sha": "07368af0833c1bfc29e35a1eabb4f269eafd8825", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07368af0833c1bfc29e35a1eabb4f269eafd8825", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07368af0833c1bfc29e35a1eabb4f269eafd8825"}], "stats": {"total": 84, "additions": 80, "deletions": 4}, "files": [{"sha": "c24f47e1efff46376d4f44db5cfb0a2ddd28df6e", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6b1c676c9713beb3cfe1ac663c60317c57e1f6/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6b1c676c9713beb3cfe1ac663c60317c57e1f6/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=ac6b1c676c9713beb3cfe1ac663c60317c57e1f6", "patch": "@@ -1,3 +1,14 @@\n+2007-08-30  Chao-ying Fu  <fu@mips.com>\n+\n+\t* expr.c (interpret_float_suffix): Support hr, r, lr, llr, uhr, ur,\n+\tulr, ullr, hk, k, lk, llk, uhk, uk, ulk, ullk.\n+\t(cpp_classify_number): Support decimal fixed-point constants without\n+\texponents.\n+\tWarn about fixed-point constants when -pedantic.\n+\t* include/cpplib.h (CPP_N_SMALL, CPP_N_MEDIUM, CPP_N_LARGE): Change\n+\tcomments to support fixed-point values.\n+\t(CPP_N_FRACT, CPP_N_ACCUM): Define.\n+\n 2007-08-18  Tom Tromey  <tromey@redhat.com>\n \n \tPR preprocessor/32974:"}, {"sha": "9df75332c05510846a2e39087ed0f95ee0e04072", "filename": "libcpp/expr.c", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6b1c676c9713beb3cfe1ac663c60317c57e1f6/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6b1c676c9713beb3cfe1ac663c60317c57e1f6/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=ac6b1c676c9713beb3cfe1ac663c60317c57e1f6", "patch": "@@ -83,12 +83,18 @@ static unsigned int\n interpret_float_suffix (const uchar *s, size_t len)\n {\n   size_t f, l, w, q, i, d;\n+  size_t r, k, u, h;\n \n   f = l = w = q = i = d = 0;\n+  r = k = u = h = 0;\n \n   while (len--)\n     switch (s[len])\n       {\n+      case 'r': case 'R': r++; break;\n+      case 'k': case 'K': k++; break;\n+      case 'u': case 'U': u++; break;\n+      case 'h': case 'H': h++; break;\n       case 'f': case 'F':\n \tif (d > 0)\n \t  return 0;\n@@ -98,6 +104,9 @@ interpret_float_suffix (const uchar *s, size_t len)\n \tif (d > 0)\n \t  return 0;\n \tl++;\n+\t/* If there are two Ls, they must be adjacent and the same case.  */\n+\tif (l == 2 && s[len] != s[len + 1])\n+\t  return 0;\n \tbreak;\n       case 'w': case 'W':\n \tif (d > 0)\n@@ -116,7 +125,34 @@ interpret_float_suffix (const uchar *s, size_t len)\n \treturn 0;\n       }\n \n-  if (f + l + w + q > 1 || i > 1)\n+  if (r + k > 1 || h > 1 || l > 2 || u > 1)\n+    return 0;\n+\n+  if (r == 1)\n+    {\n+      if (f || i || d || w || q)\n+\treturn 0;\n+\n+      return (CPP_N_FRACT\n+\t      | (u ? CPP_N_UNSIGNED : 0)\n+\t      | (h ? CPP_N_SMALL :\n+\t\t l == 2 ? CPP_N_LARGE :\n+\t\t l == 1 ? CPP_N_MEDIUM :  0));\n+    }\n+\n+  if (k == 1)\n+    {\n+      if (f || i || d || w || q)\n+\treturn 0;\n+\n+      return (CPP_N_ACCUM\n+\t      | (u ? CPP_N_UNSIGNED : 0)\n+\t      | (h ? CPP_N_SMALL :\n+\t\t l == 2 ? CPP_N_LARGE :\n+\t\t l == 1 ? CPP_N_MEDIUM :  0));\n+    }\n+\n+  if (f + l + w + q > 1 || i > 1 || h + u > 0)\n     return 0;\n \n   /* Allow dd, df, dl suffixes for decimal float constants.  */\n@@ -238,6 +274,26 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token)\n \t}\n     }\n \n+  /* The suffix may be for decimal fixed-point constants without exponent.  */\n+  if (radix != 16 && float_flag == NOT_FLOAT)\n+    {\n+      result = interpret_float_suffix (str, limit - str);\n+      if ((result & CPP_N_FRACT) || (result & CPP_N_ACCUM))\n+\t{\n+\t  result |= CPP_N_FLOATING;\n+\t  /* We need to restore the radix to 10, if the radix is 8.  */\n+\t  if (radix == 8)\n+\t    radix = 10;\n+\n+\t  if (CPP_PEDANTIC (pfile))\n+\t    cpp_error (pfile, CPP_DL_PEDWARN,\n+\t\t       \"fixed-point constants are a GCC extension\");\n+\t  goto syntax_ok;\n+\t}\n+      else\n+\tresult = 0;\n+    }\n+\n   if (float_flag != NOT_FLOAT && radix == 8)\n     radix = 10;\n \n@@ -304,6 +360,10 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token)\n           return CPP_N_INVALID;\n         }\n \n+      if ((result & (CPP_N_FRACT | CPP_N_ACCUM)) && CPP_PEDANTIC (pfile))\n+\tcpp_error (pfile, CPP_DL_PEDWARN,\n+\t\t   \"fixed-point constants are a GCC extension\");\n+\n       if ((result & CPP_N_DFLOAT) && CPP_PEDANTIC (pfile))\n \tcpp_error (pfile, CPP_DL_PEDWARN,\n \t\t   \"decimal float constants are a GCC extension\");\n@@ -343,6 +403,7 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token)\n       result |= CPP_N_INTEGER;\n     }\n \n+ syntax_ok:\n   if ((result & CPP_N_IMAGINARY) && CPP_PEDANTIC (pfile))\n     cpp_error (pfile, CPP_DL_PEDWARN,\n \t       \"imaginary constants are a GCC extension\");"}, {"sha": "039dfbbf193e79680e3167c289509a7e04da7292", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac6b1c676c9713beb3cfe1ac663c60317c57e1f6/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac6b1c676c9713beb3cfe1ac663c60317c57e1f6/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=ac6b1c676c9713beb3cfe1ac663c60317c57e1f6", "patch": "@@ -747,9 +747,10 @@ struct cpp_num\n #define CPP_N_FLOATING\t0x0002\n \n #define CPP_N_WIDTH\t0x00F0\n-#define CPP_N_SMALL\t0x0010\t/* int, float.  */\n-#define CPP_N_MEDIUM\t0x0020\t/* long, double.  */\n-#define CPP_N_LARGE\t0x0040\t/* long long, long double.  */\n+#define CPP_N_SMALL\t0x0010\t/* int, float, shrot _Fract/Accum  */\n+#define CPP_N_MEDIUM\t0x0020\t/* long, double, long _Fract/_Accum.  */\n+#define CPP_N_LARGE\t0x0040\t/* long long, long double,\n+\t\t\t\t   long long _Fract/Accum.  */\n \n #define CPP_N_WIDTH_MD\t0xF0000\t/* machine defined.  */\n #define CPP_N_MD_W\t0x10000\n@@ -765,6 +766,9 @@ struct cpp_num\n #define CPP_N_IMAGINARY\t0x2000\n #define CPP_N_DFLOAT\t0x4000\n \n+#define CPP_N_FRACT\t0x100000 /* Fract types.  */\n+#define CPP_N_ACCUM\t0x200000 /* Accum types.  */\n+\n /* Classify a CPP_NUMBER token.  The return value is a combination of\n    the flags from the above sets.  */\n extern unsigned cpp_classify_number (cpp_reader *, const cpp_token *);"}]}