{"sha": "7e269fe8753df7018b2bcf29fe1bff3e01d09138", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UyNjlmZTg3NTNkZjcwMThiMmJjZjI5ZmUxYmZmM2UwMWQwOTEzOA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2015-05-12T21:12:55Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2015-05-12T21:12:55Z"}, "message": "re PR fortran/66111 (ICE with matmul and vector subscripts)\n\n2015-05-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/66111\n\t* frontend-passes.c (has_dimen_vector_ref):  New function.\n\t(inline_matmul_assign):  Use it to return early in case\n\tof unhandled vector subscripts.\n\n2015-05-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/66111\n\t* gfortran.dg/inline_matmul_10.f90:  New test.\n\nFrom-SVN: r223099", "tree": {"sha": "657a8b7fad116a0c764836088e017f1670366303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/657a8b7fad116a0c764836088e017f1670366303"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e269fe8753df7018b2bcf29fe1bff3e01d09138", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e269fe8753df7018b2bcf29fe1bff3e01d09138", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e269fe8753df7018b2bcf29fe1bff3e01d09138", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e269fe8753df7018b2bcf29fe1bff3e01d09138/comments", "author": null, "committer": null, "parents": [{"sha": "c3388e62499a6d2f931247a73cabf9184366248e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3388e62499a6d2f931247a73cabf9184366248e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3388e62499a6d2f931247a73cabf9184366248e"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "1b455b56e0f7ffd43feec47d0d95020400b52104", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e269fe8753df7018b2bcf29fe1bff3e01d09138/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e269fe8753df7018b2bcf29fe1bff3e01d09138/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7e269fe8753df7018b2bcf29fe1bff3e01d09138", "patch": "@@ -1,3 +1,10 @@\n+2015-05-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/66111\n+\t* frontend-passes.c (has_dimen_vector_ref):  New function.\n+\t(inline_matmul_assign):  Use it to return early in case\n+\tof unhandled vector subscripts.\n+\n 2015-05-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/66041"}, {"sha": "a6b57860a20eb72740cb99d0aa0cf3e7c649c3fe", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e269fe8753df7018b2bcf29fe1bff3e01d09138/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e269fe8753df7018b2bcf29fe1bff3e01d09138/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=7e269fe8753df7018b2bcf29fe1bff3e01d09138", "patch": "@@ -2680,6 +2680,25 @@ scalarized_expr (gfc_expr *e_in, gfc_expr **index, int count_index)\n   return e;\n }\n \n+/* Helper function to check for a dimen vector as subscript.  */\n+\n+static bool\n+has_dimen_vector_ref (gfc_expr *e)\n+{\n+  gfc_array_ref *ar;\n+  int i;\n+\n+  ar = gfc_find_array_ref (e);\n+  gcc_assert (ar);\n+  if (ar->type == AR_FULL)\n+    return false;\n+\n+  for (i=0; i<ar->dimen; i++)\n+    if (ar->dimen_type[i] == DIMEN_VECTOR)\n+      return true;\n+\n+  return false;\n+}\n \n /* Inline assignments of the form c = matmul(a,b).\n    Handle only the cases currently where b and c are rank-two arrays.\n@@ -2752,6 +2771,10 @@ inline_matmul_assign (gfc_code **c, int *walk_subtrees,\n       || matrix_b->expr_type != EXPR_VARIABLE)\n     return 0;\n \n+  if (has_dimen_vector_ref (expr1) || has_dimen_vector_ref (matrix_a)\n+      || has_dimen_vector_ref (matrix_b))\n+    return 0;\n+\n   if (matrix_a->rank == 2)\n     m_case = matrix_b->rank == 1 ? A2B1 : A2B2;\n   else"}, {"sha": "d8b6a582e7be23fbfbb7bb8cb9126fc539de43ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e269fe8753df7018b2bcf29fe1bff3e01d09138/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e269fe8753df7018b2bcf29fe1bff3e01d09138/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e269fe8753df7018b2bcf29fe1bff3e01d09138", "patch": "@@ -1,3 +1,8 @@\n+2015-05-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/66111\n+\t* gfortran.dg/inline_matmul_10.f90:  New test.\n+\n 2015-05-12  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-c++-common/Wmisleading-indentation.c: New testcase."}, {"sha": "3a577b00d8e1198b97f07d600f0db53bde44d204", "filename": "gcc/testsuite/gfortran.dg/inline_matmul_10.f90", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e269fe8753df7018b2bcf29fe1bff3e01d09138/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e269fe8753df7018b2bcf29fe1bff3e01d09138/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_10.f90?ref=7e269fe8753df7018b2bcf29fe1bff3e01d09138", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do  run }\n+! { dg-options \"-ffrontend-optimize\" }\n+! PR 66111 - this used to ICE with matmul inlining.\n+! Original test case by Mikael Morin.\n+\n+implicit none\n+  integer, parameter :: n = 4\n+  integer, dimension(n, n) :: a, b, c\n+  integer, dimension(n*n)  :: p, res, res2\n+  integer, dimension(n)    :: v\n+\n+  integer :: i\n+\n+  p = [ +59, -53, +47, -43, &\n+        -37, +31, -29, +23, &\n+        +19, -17, +13, -11, &\n+        - 7, + 5, - 3, + 2  ]\n+  a = reshape(p, shape(a))\n+  b = reshape([(i, i=1, size(a))], shape(b))\n+  v = [ 3, 1, 2, 4]\n+  c = matmul(a, b)\n+  res = [ + 14, - 22, + 16, - 22, &\n+          +150, -158, +128, -138, &\n+          +286, -294, +240, -254, &\n+          +422, -430, +352, -370  ]\n+  !print *,c\n+  if (any(c /= reshape(res, shape(c)))) call abort\n+  c(:,v) = matmul(a, b)\n+  if (any(c(:,v) /= reshape(res, shape(c)))) call abort\n+  c(v,:) = matmul(a, b)\n+  if (any(c(v,:) /= reshape(res, shape(c)))) call abort\n+\n+  c = matmul(a(:,v),b(v,:))\n+  if (any(c /= reshape(res, shape(c)))) call abort\n+end"}]}