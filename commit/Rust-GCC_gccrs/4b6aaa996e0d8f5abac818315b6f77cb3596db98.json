{"sha": "4b6aaa996e0d8f5abac818315b6f77cb3596db98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI2YWFhOTk2ZTBkOGY1YWJhYzgxODMxNWI2Zjc3Y2IzNTk2ZGI5OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-01-06T21:39:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-01-06T21:39:43Z"}, "message": "re PR c++/6057 (expression mangling doesn't work for operator new)\n\n\tPR c++/6057\n\tPR c++/48051\n\tPR c++/50855\n\tPR c++/51322\ngcc/cp/\n\t* mangle.c (write_expression): Support NEW_EXPR, DELETE_EXPR,\n\tTHROW_EXPR, CONSTRUCTOR, OVERLOAD.  Fix PREINCREMENT_EXPR and\n\tPREDECREMENT_EXPR.\n\t(write_template_arg): Fix mangling of class-scope functions and\n\targument packs.\n\t(mangle_decl): Update suggested -fabi-version argument.\n\t* operators.def: Add DOTSTAR_EXPR, REINTERPRET_CAST_EXPR,\n\tDYNAMIC_CAST_EXPR; correct CONST_CAST_EXPR, STATIC_CAST_EXPR.\n\t* tree.c (dependent_name): No longer static.\n\t* cp-tree.h: Declare it.\n\t* pt.c (unify): Defer handling of unconverted functions.\ninclude/\n\t* demangle.h (enum demangle_component_type): Add\n\tDEMANGLE_COMPONENT_INITIALIZER_LIST, DEMANGLE_COMPONENT_NULLARY.\nlibiberty/\n\t* cp-demangle.c (d_dump): Handle DEMANGLE_COMPONENT_NULLARY and\n\tDEMANGLE_COMPONENT_INITIALIZER_LIST.\n\t(d_make_comp): Likewise.  Allow null right arg for\n\tDEMANGLE_COMPONENT_TRINARY_ARG2.\n\t(cplus_demangle_operators): Adjust new/delete; add .*, :: and throw.\n\t(d_template_args, d_template_arg): Handle 'J' for argument packs.\n\t(d_exprlist): Add terminator parm.\n\t(d_expression, d_print_comp): Handle initializer lists, nullary\n\texpressions, prefix/suffix operators, and new.\n\t(d_print_subexpr): Avoid parens around DEMANGLE_COMPONENT_QUAL_NAME\n\tand DEMANGLE_COMPONENT_INITIALIZER_LIST.\n\t* testsuite/demangle-expected: Add tests.\n\nFrom-SVN: r182970", "tree": {"sha": "a4fb9016edd51d789295648c2f9d497fc2a85eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4fb9016edd51d789295648c2f9d497fc2a85eb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b6aaa996e0d8f5abac818315b6f77cb3596db98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6aaa996e0d8f5abac818315b6f77cb3596db98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b6aaa996e0d8f5abac818315b6f77cb3596db98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b6aaa996e0d8f5abac818315b6f77cb3596db98/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49f2da1a16b6336cbc8f5273a3dc835625fbf23f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49f2da1a16b6336cbc8f5273a3dc835625fbf23f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49f2da1a16b6336cbc8f5273a3dc835625fbf23f"}], "stats": {"total": 729, "additions": 625, "deletions": 104}, "files": [{"sha": "0544478f4e06f4834cf4d3108a7add7709dc5a1b", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -782,7 +782,10 @@ Driver Undocumented\n ;    function parameters used in other parameters and the return type.\n ;    First selectable in G++ 4.6.\n ;\n-; 6: The version of the ABI that doesn't promote scoped enums to int.\n+; 6: The version of the ABI that doesn't promote scoped enums to int and\n+;    changes the mangling of template argument packs, const/static_cast,\n+;    prefix ++ and --, and a class scope function used as a template\n+;    argument.\n ;    First selectable in G++ 4.7.\n ;\n ; Additional positive integers will be assigned as new versions of"}, {"sha": "041722d7179ead69408f6752dcbc4ef12b4d2da0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -1,5 +1,21 @@\n 2012-01-06  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/6057\n+\tPR c++/48051\n+\tPR c++/50855\n+\tPR c++/51322\n+\t* mangle.c (write_expression): Support NEW_EXPR, DELETE_EXPR,\n+\tTHROW_EXPR, CONSTRUCTOR, OVERLOAD.  Fix PREINCREMENT_EXPR and\n+\tPREDECREMENT_EXPR.\n+\t(write_template_arg): Fix mangling of class-scope functions and\n+\targument packs.\n+\t(mangle_decl): Update suggested -fabi-version argument.\n+\t* operators.def: Add DOTSTAR_EXPR, REINTERPRET_CAST_EXPR,\n+\tDYNAMIC_CAST_EXPR; correct CONST_CAST_EXPR, STATIC_CAST_EXPR.\n+\t* tree.c (dependent_name): No longer static.\n+\t* cp-tree.h: Declare it.\n+\t* pt.c (unify): Defer handling of unconverted functions.\n+\n \t* mangle.c (mangle_decl): Don't generate mangling aliases\n \tfor maybe-in-charge [cd]tors.\n "}, {"sha": "ccad64436510b3a359fa08528ee6295d597e244d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -5674,6 +5674,7 @@ extern tree hash_tree_cons\t\t\t(tree, tree, tree);\n extern tree hash_tree_chain\t\t\t(tree, tree);\n extern tree build_qualified_name\t\t(tree, tree, tree, bool);\n extern int is_overloaded_fn\t\t\t(tree);\n+extern tree dependent_name\t\t\t(tree);\n extern tree get_fns\t\t\t\t(tree);\n extern tree get_first_fn\t\t\t(tree);\n extern tree ovl_cons\t\t\t\t(tree, tree);"}, {"sha": "f4efa67cc2732f7c9a0a42ae7c3b84ddc634a2de", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 134, "deletions": 7, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -2646,6 +2646,102 @@ write_expression (tree expr)\n       write_expression (TREE_OPERAND (expr, 0));\n       write_expression (TREE_OPERAND (expr, 2));\n     }\n+  else if (code == NEW_EXPR || code == VEC_NEW_EXPR)\n+    {\n+      /* ::= [gs] nw <expression>* _ <type> E\n+\t ::= [gs] nw <expression>* _ <type> <initializer>\n+\t ::= [gs] na <expression>* _ <type> E\n+\t ::= [gs] na <expression>* _ <type> <initializer>\n+\t <initializer> ::= pi <expression>* E  */\n+      tree placement = TREE_OPERAND (expr, 0);\n+      tree type = TREE_OPERAND (expr, 1);\n+      tree nelts = TREE_OPERAND (expr, 2);\n+      tree init = TREE_OPERAND (expr, 3);\n+      tree t;\n+\n+      gcc_assert (code == NEW_EXPR);\n+      if (TREE_OPERAND (expr, 2))\n+\tcode = VEC_NEW_EXPR;\n+\n+      if (NEW_EXPR_USE_GLOBAL (expr))\n+\twrite_string (\"gs\");\n+\n+      write_string (operator_name_info[(int) code].mangled_name);\n+\n+      for (t = placement; t; t = TREE_CHAIN (t))\n+\twrite_expression (TREE_VALUE (t));\n+\n+      write_char ('_');\n+\n+      if (nelts)\n+\t{\n+\t  tree domain;\n+\t  ++processing_template_decl;\n+\t  domain = compute_array_index_type (NULL_TREE, nelts,\n+\t\t\t\t\t     tf_warning_or_error);\n+\t  type = build_cplus_array_type (type, domain);\n+\t  --processing_template_decl;\n+\t}\n+      write_type (type);\n+\n+      if (init && TREE_CODE (init) == TREE_LIST\n+\t  && TREE_CODE (TREE_VALUE (init)) == CONSTRUCTOR\n+\t  && CONSTRUCTOR_IS_DIRECT_INIT (TREE_VALUE (init)))\n+\twrite_expression (TREE_VALUE (init));\n+      else\n+\t{\n+\t  if (init)\n+\t    write_string (\"pi\");\n+\t  if (init && init != void_zero_node)\n+\t    for (t = init; t; t = TREE_CHAIN (t))\n+\t      write_expression (TREE_VALUE (t));\n+\t  write_char ('E');\n+\t}\n+    }\n+  else if (code == DELETE_EXPR || code == VEC_DELETE_EXPR)\n+    {\n+      gcc_assert (code == DELETE_EXPR);\n+      if (DELETE_EXPR_USE_VEC (expr))\n+\tcode = VEC_DELETE_EXPR;\n+\n+      if (DELETE_EXPR_USE_GLOBAL (expr))\n+\twrite_string (\"gs\");\n+\n+      write_string (operator_name_info[(int) code].mangled_name);\n+\n+      write_expression (TREE_OPERAND (expr, 0));\n+    }\n+  else if (code == THROW_EXPR)\n+    {\n+      tree op = TREE_OPERAND (expr, 0);\n+      if (op)\n+\t{\n+\t  write_string (\"tw\");\n+\t  write_expression (op);\n+\t}\n+      else\n+\twrite_string (\"tr\");\n+    }\n+  else if (code == CONSTRUCTOR)\n+    {\n+      VEC(constructor_elt,gc)* elts = CONSTRUCTOR_ELTS (expr);\n+      unsigned i; tree val;\n+\n+      if (BRACE_ENCLOSED_INITIALIZER_P (expr))\n+\twrite_string (\"il\");\n+      else\n+\t{\n+\t  write_string (\"tl\");\n+\t  write_type (TREE_TYPE (expr));\n+\t}\n+      FOR_EACH_CONSTRUCTOR_VALUE (elts, i, val)\n+\twrite_expression (val);\n+      write_char ('E');\n+    }\n+  else if (dependent_name (expr))\n+    {\n+      write_unqualified_id (dependent_name (expr));\n+    }\n   else\n     {\n       int i, len;\n@@ -2688,6 +2784,16 @@ write_expression (tree expr)\n \n       /* If it wasn't any of those, recursively expand the expression.  */\n       name = operator_name_info[(int) code].mangled_name;\n+\n+      /* We used to mangle const_cast and static_cast like a C cast.  */\n+      if (!abi_version_at_least (6)\n+\t  && (code == CONST_CAST_EXPR\n+\t      || code == STATIC_CAST_EXPR))\n+\t{\n+\t  name = operator_name_info[CAST_EXPR].mangled_name;\n+\t  G.need_abi_warning = 1;\n+\t}\n+\n       if (name == NULL)\n \t{\n \t  sorry (\"mangling %C\", code);\n@@ -2734,16 +2840,21 @@ write_expression (tree expr)\n \t    }\n \t  break;\n \n-\t  /* FIXME these should have a distinct mangling.  */\n+\tcase DYNAMIC_CAST_EXPR:\n+\tcase REINTERPRET_CAST_EXPR:\n \tcase STATIC_CAST_EXPR:\n \tcase CONST_CAST_EXPR:\n \t  write_type (TREE_TYPE (expr));\n \t  write_expression (TREE_OPERAND (expr, 0));\n \t  break;\n \n-\tcase NEW_EXPR:\n-\t  sorry (\"mangling new-expression\");\n-\t  break;\n+\tcase PREINCREMENT_EXPR:\n+\tcase PREDECREMENT_EXPR:\n+\t  if (abi_version_at_least (6))\n+\t    write_char ('_');\n+\t  else\n+\t    G.need_abi_warning = 1;\n+\t  /* Fall through.  */\n \n \tdefault:\n \t  /* In the middle-end, some expressions have more operands than\n@@ -2855,12 +2966,28 @@ write_template_arg (tree node)\n \tG.need_abi_warning = 1;\n     }\n \n+  if (TREE_CODE (node) == BASELINK\n+      && !type_unknown_p (node))\n+    {\n+      if (abi_version_at_least (6))\n+\tnode = BASELINK_FUNCTIONS (node);\n+      else\n+\t/* We wrongly wrapped a class-scope function in X/E.  */\n+\tG.need_abi_warning = 1;\n+    }\n+\n   if (ARGUMENT_PACK_P (node))\n     {\n       /* Expand the template argument pack. */\n       tree args = ARGUMENT_PACK_ARGS (node);\n       int i, length = TREE_VEC_LENGTH (args);\n-      write_char ('I');\n+      if (abi_version_at_least (6))\n+\twrite_char ('J');\n+      else\n+\t{\n+\t  write_char ('I');\n+\t  G.need_abi_warning = 1;\n+\t}\n       for (i = 0; i < length; ++i)\n         write_template_arg (TREE_VEC_ELT (args, i));\n       write_char ('E');\n@@ -3208,8 +3335,8 @@ mangle_decl (const tree decl)\n \n       SET_IDENTIFIER_GLOBAL_VALUE (id, decl);\n       if (IDENTIFIER_GLOBAL_VALUE (id) != decl)\n-\tinform (DECL_SOURCE_LOCATION (decl), \"-fabi-version=4 (or =0) \"\n-\t\t\"avoids this error with a change in vector mangling\");\n+\tinform (DECL_SOURCE_LOCATION (decl), \"-fabi-version=6 (or =0) \"\n+\t\t\"avoids this error with a change in mangling\");\n \n #ifdef ASM_OUTPUT_DEF\n       save_ver = flag_abi_version;"}, {"sha": "3dc7404995267647fcda553fcf3d2a007512966b", "filename": "gcc/cp/operators.def", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Fcp%2Foperators.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Fcp%2Foperators.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foperators.def?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -101,8 +101,10 @@ DEF_SIMPLE_OPERATOR (\"__real__\", REALPART_EXPR, \"v18__real__\", 1)\n /* The cast operator.  */\n DEF_SIMPLE_OPERATOR (\"\", TYPE_EXPR, \"cv\", 1)\n DEF_SIMPLE_OPERATOR (\"\", CAST_EXPR, \"cv\", 1)\n-DEF_SIMPLE_OPERATOR (\"\", CONST_CAST_EXPR, \"cv\", 1)\n-DEF_SIMPLE_OPERATOR (\"\", STATIC_CAST_EXPR, \"cv\", 1)\n+DEF_SIMPLE_OPERATOR (\"dynamic_cast\", DYNAMIC_CAST_EXPR, \"dc\", 1)\n+DEF_SIMPLE_OPERATOR (\"reinterpret_cast\", REINTERPRET_CAST_EXPR, \"rc\", 1)\n+DEF_SIMPLE_OPERATOR (\"const_cast\", CONST_CAST_EXPR, \"cc\", 1)\n+DEF_SIMPLE_OPERATOR (\"static_cast\", STATIC_CAST_EXPR, \"sc\", 1)\n \n /* Binary operators.  */\n DEF_SIMPLE_OPERATOR (\"+\", PLUS_EXPR, \"pl\", 2)\n@@ -125,6 +127,7 @@ DEF_SIMPLE_OPERATOR (\"&&\", TRUTH_ANDIF_EXPR, \"aa\", 2)\n DEF_SIMPLE_OPERATOR (\"||\", TRUTH_ORIF_EXPR, \"oo\", 2)\n DEF_SIMPLE_OPERATOR (\",\", COMPOUND_EXPR, \"cm\", 2)\n DEF_SIMPLE_OPERATOR (\"->*\", MEMBER_REF, \"pm\", 2)\n+DEF_SIMPLE_OPERATOR (\".*\", DOTSTAR_EXPR, \"ds\", 2)\n DEF_SIMPLE_OPERATOR (\"->\", COMPONENT_REF, \"pt\", 2)\n DEF_SIMPLE_OPERATOR (\"[]\", ARRAY_REF, \"ix\", 2)\n DEF_SIMPLE_OPERATOR (\"++\", POSTINCREMENT_EXPR, \"pp\", 2)"}, {"sha": "bc3dd9713a96eac678cc1b502ea2cad28376e776", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -16885,7 +16885,7 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n \n     default:\n       /* An unresolved overload is a nondeduced context.  */\n-      if (type_unknown_p (parm))\n+      if (is_overloaded_fn (parm) || type_unknown_p (parm))\n \treturn unify_success (explain_p);\n       gcc_assert (EXPR_P (parm));\n "}, {"sha": "8ef3e2540cdabd74ebdcccd4a39d0d20d51a13e5", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -1457,7 +1457,7 @@ is_overloaded_fn (tree x)\n    (14.6.2), return the IDENTIFIER_NODE for that name.  Otherwise, return\n    NULL_TREE.  */\n \n-static tree\n+tree\n dependent_name (tree x)\n {\n   if (TREE_CODE (x) == IDENTIFIER_NODE)"}, {"sha": "e96146d231cb7d050b2eb2cd5504cf79a8ed3a12", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -1,5 +1,21 @@\n 2012-01-06  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/abi/mangle51.C: New.\n+\t* g++.dg/abi/mangle52.C: New.\n+\t* g++.dg/abi/mangle53.C: New.\n+\t* g++.dg/abi/mangle54.C: New.\n+\t* g++.dg/abi/mangle55.C: New.\n+\t* g++.dg/abi/mangle56.C: New.\n+\t* g++.dg/abi/mangle57.C: New.\n+\t* g++.dg/abi/mangle58.C: New.\n+\t* g++.dg/abi/mangle59.C: New.\n+\t* g++.dg/cpp0x/trailing3.C: Update mangling.\n+\t* g++.dg/cpp0x/variadic111.C: Update mangling.\n+\t* g++.dg/cpp0x/variadic4.C: Update mangling.\n+\t* g++.dg/cpp0x/variadic42.C: Pass -fabi-version=5.\n+\t* g++.dg/template/nontype22.C: Works now.\n+\t* g++.dg/template/pr35240.C: Works now.\n+\n \t* g++.dg/cpp0x/error7.C: New.\n \n 2012-01-06  Tobias Burnus <burnus@net-b.de>"}, {"sha": "4992f1a327c51af4be9730fd00afe9b98870d9c1", "filename": "gcc/testsuite/g++.dg/abi/mangle51.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle51.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle51.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle51.C?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=c++0x -fabi-version=0\" }\n+\n+void* operator new (__SIZE_TYPE__, void *p) { return p; }\n+int i;\n+\n+template <unsigned int> struct helper {};\n+// { dg-final { scan-assembler \"_Z6check1IiEvP6helperIXsznw_T_EEE\" } }\n+template <class T> void check1( helper<sizeof(new T)> * ) { }\n+// { dg-final { scan-assembler \"_Z6check2IiEvP6helperIXszgsnw_T_piEEE\" } }\n+template <class T> void check2( helper<sizeof(::new T())> * ) { }\n+// { dg-final { scan-assembler \"_Z6check3IiEvP6helperIXsznwadL_Z1iE_T_piLi1EEEE\" } }\n+template <class T> void check3( helper<sizeof(new (&i) T(1))> * ) { }\n+// { dg-final { scan-assembler \"_Z7check3aIiEvP6helperIXsznw_T_ilLi1EEEE\" } }\n+template <class T> void check3a( helper<sizeof(new T{1})> * ) { }\n+// { dg-final { scan-assembler \"_Z6check4IiEvP6helperIXszna_A1_T_EEE\" } }\n+template <class T> void check4( helper<sizeof(new T[1])> * ) { }\n+// { dg-final { scan-assembler \"_Z6check5IiEvP6helperIXszna_A1_T_piEEE\" } }\n+template <class T> void check5( helper<sizeof(new T[1]())> * ) { }\n+int main()\n+{\n+  check1<int>(0);\n+  check2<int>(0);\n+  check3<int>(0);\n+  check3a<int>(0);\n+  check4<int>(0);\n+  check5<int>(0);\n+}"}, {"sha": "2c463415f1ffac11612d6e0374d4c16e0b0e73c7", "filename": "gcc/testsuite/g++.dg/abi/mangle52.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle52.C?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options \"-fabi-version=0\" }\n+\n+template <unsigned int> struct helper {};\n+// { dg-final { scan-assembler \"_Z6check1IiEvP6helperIXszscT_Li1EEE\" } }\n+template <class T> void check1( helper<sizeof(static_cast<T>(1))> * ) { }\n+// { dg-final { scan-assembler \"_Z6check2IiXadL_Z1iEEEvP6helperIXszccPT_T0_EE\" } }\n+template <class T, T* p> void check2( helper<sizeof(const_cast<T*>(p))> * ) { }\n+// { dg-final { scan-assembler \"_Z6check3IiEvP6helperIXszrcPT_Li0EEE\" } }\n+template <class T> void check3( helper<sizeof(reinterpret_cast<T*>(0))> * ) { }\n+// { dg-final { scan-assembler \"_Z6check4I1AXadL_Z1aEEEvP6helperIXszdcPT_T0_EE\" } }\n+template <class T, T* p> void check4( helper<sizeof(dynamic_cast<T*>(p))> * ) { }\n+\n+struct A{} a;\n+int i;\n+int main()\n+{\n+  check1<int>(0);\n+  check2<int,&i>(0);\n+  check3<int>(0);\n+  check4<A,&a>(0);\n+}"}, {"sha": "b279182d8c40fe2c36a9ed041996f86f875df522", "filename": "gcc/testsuite/g++.dg/abi/mangle53.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle53.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle53.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle53.C?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+bool b;\n+// { dg-final { scan-assembler \"_Z1fIiEDTquL_Z1bEfp_twLi42EET_\" } }\n+template <class T> auto f (T t) -> decltype(b?t:throw 42) { return 0; }\n+// { dg-final { scan-assembler \"_Z2f2IiEDTquL_Z1bEfp_trET_\" } }\n+template <class T> auto f2 (T t) -> decltype(b?t:throw) { return 0; }\n+\n+int main()\n+{\n+  f(0);\n+  f2(0);\n+}"}, {"sha": "ea98df17d3649dfee4b64e5e0e766d3356ef74c9", "filename": "gcc/testsuite/g++.dg/abi/mangle54.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle54.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle54.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle54.C?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -0,0 +1,19 @@\n+// { dg-options \"-std=c++0x -fabi-version=0\" }\n+\n+int i;\n+// { dg-final { scan-assembler \"_Z2f1IiEDTppfp_ET_\" } }\n+template <class T> auto f1 (T t) -> decltype(t++) { return i; }\n+// { dg-final { scan-assembler \"_Z2f2IiEDTpp_fp_ET_\" } }\n+template <class T> auto f2 (T t) -> decltype(++t) { return i; }\n+// { dg-final { scan-assembler \"_Z2f3IiEDTmmfp_ET_\" } }\n+template <class T> auto f3 (T t) -> decltype(t--) { return i; }\n+// { dg-final { scan-assembler \"_Z2f4IiEDTmm_fp_ET_\" } }\n+template <class T> auto f4 (T t) -> decltype(--t) { return i; }\n+\n+int main()\n+{\n+  f1(0);\n+  f2(0);\n+  f3(0);\n+  f4(0);\n+}"}, {"sha": "72caadcc24d5b35acd1a60ec1ecaf3d10234f4c4", "filename": "gcc/testsuite/g++.dg/abi/mangle55.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle55.C?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -0,0 +1,14 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+struct A { int i; };\n+// { dg-final { scan-assembler \"_Z2f1Ii1AEDTdsfp_fp0_ET0_MS2_T_\" } }\n+template <class T, class U> auto f1 (U u, T U::* p) -> decltype(u.*p) { return u.*p; }\n+// { dg-final { scan-assembler \"_Z2f2Ii1AEDTpmfp_fp0_EPT0_MS2_T_\" } }\n+template <class T, class U> auto f2 (U* u, T U::* p) -> decltype(u->*p) { return u->*p; }\n+\n+int main()\n+{\n+  A a = {};\n+  f1(a, &A::i);\n+  f2(&a, &A::i);\n+}"}, {"sha": "0fd270169d692d613a5ffcec3266f6f38ebdc00c", "filename": "gcc/testsuite/g++.dg/abi/mangle56.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle56.C?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"-std=c++0x\" }\n+\n+template <class T> T g(T t1, T t2) { return t2; }\n+// { dg-final { scan-assembler \"_Z2f1IiEDTcl1gfp_ilEEET_\" } }\n+template <class T> auto f1 (T t) -> decltype(g(t,{})) { return g(t,{}); }\n+// { dg-final { scan-assembler \"_Z2f2IiEDTcl1gfp_tlT_EEES0_\" } }\n+template <class T> auto f2 (T t) -> decltype(g(t,T{})) { return g(t,T{}); }\n+\n+int main()\n+{\n+  f1(0);\n+  f2(0);\n+}"}, {"sha": "3d9d81e55baeb2586381d1aee5e555db81a2d6af", "filename": "gcc/testsuite/g++.dg/abi/mangle57.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle57.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle57.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle57.C?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options \"-std=c++0x -fabi-version=0\" }\n+\n+template<typename T> int cmp1(T a, T b);\n+int cmp2(char a, char b);\n+template<typename T, int (*cmp)(T, T)> struct A { };\n+// { dg-final { scan-assembler \"_Z1fIcEvR1AIT_X4cmp1EE\" } }\n+template <typename T> void f (A<T,cmp1> &);\n+// { dg-final { scan-assembler \"_Z1fIcEvR1AIT_L_Z4cmp2ccEE\" } }\n+template <typename T> void f (A<T,cmp2> &);\n+void g()\n+{\n+  A<char,cmp1> a;\n+  f(a);\n+  A<char,cmp2> a2;\n+  f(a2);\n+}"}, {"sha": "14e5543d9f24e5409dd108ac672bf09757839082", "filename": "gcc/testsuite/g++.dg/abi/mangle58.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle58.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle58.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle58.C?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -0,0 +1,19 @@\n+// { dg-options \"-std=c++0x -fabi-version=0\" }\n+\n+template<typename T, int (*cmp)(T, T)> struct A { };\n+struct B {\n+  template<typename T> static int cmp1(T a, T b);\n+  static int cmp2(char a, char b);\n+  // { dg-final { scan-assembler \"_ZN1B1fIcEEvR1AIT_X4cmp1EE\" } }\n+  template <typename T> static void f (A<T,cmp1> &);\n+  // { dg-final { scan-assembler \"_ZN1B1fIcEEvR1AIT_L_ZNS_4cmp2EccEE\" } }\n+  template <typename T> static void f (A<T,cmp2> &);\n+};\n+\n+void g()\n+{\n+  A<char,B::cmp1> a;\n+  B::f(a);\n+  A<char,B::cmp2> a2;\n+  B::f(a2);\n+}"}, {"sha": "3c88ec87486a9f4e94e9029f10691c3f54b73d42", "filename": "gcc/testsuite/g++.dg/abi/mangle59.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle59.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle59.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle59.C?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -0,0 +1,19 @@\n+// { dg-options \"-std=c++0x -fabi-version=0\" }\n+\n+// { dg-final { scan-assembler \"_Z1fIiEDTcmdlfp_psfp_EPT_\" } }\n+template <class T> auto f (T* p) -> decltype(delete p, +p) { return p; }\n+// { dg-final { scan-assembler \"_Z1gIiEDTcmgsdlfp_psfp_EPT_\" } }\n+template <class T> auto g (T* p) -> decltype(::delete p, +p) { return p; }\n+// { dg-final { scan-assembler \"_Z1hIiEDTcmdafp_psfp_EPT_\" } }\n+template <class T> auto h (T* p) -> decltype(delete[] p, +p) { return p; }\n+// { dg-final { scan-assembler \"_Z1iIiEDTcmgsdafp_psfp_EPT_\" } }\n+template <class T> auto i (T* p) -> decltype(::delete[] p, +p) { return p; }\n+\n+int main()\n+{\n+  int x;\n+  f(&x);\n+  g(&x);\n+  h(&x);\n+  i(&x);\n+}"}, {"sha": "1c64f45731af4132ac13f9dc0507ad6b8b4a638d", "filename": "gcc/testsuite/g++.dg/cpp0x/trailing3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftrailing3.C?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -1,5 +1,5 @@\n // More auto/decltype mangling tests.\n-// { dg-options \"-std=c++0x\" }\n+// { dg-options \"-std=c++0x -fabi-version=0\" }\n \n template <class T>\n struct B\n@@ -58,6 +58,6 @@ int main()\n   A<int>().h(1);\n   // { dg-final { scan-assembler  \"_ZN1AIiE1jIiEEDTplfp_clL_Z1xvEEET_\" } }\n   A<int>().j(1);\n-  // { dg-final { scan-assembler  \"_Z1gIIidEEDTcl1fspplfp_Li1EEEDpT_\" } }  \n+  // { dg-final { scan-assembler  \"_Z1gIJidEEDTcl1fspplfp_Li1EEEDpT_\" } }\n   g(42, 1.0);\n }"}, {"sha": "cb94ce6975513e043e14bd66bc0c60fadcd26b02", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic111.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic111.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic111.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic111.C?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -1,5 +1,5 @@\n // PR c++/48424\n-// { dg-options -std=c++0x }\n+// { dg-options \"-std=c++0x -fabi-version=0\" }\n \n template<typename... Args1>\n struct S\n@@ -16,4 +16,4 @@ int main()\n   s.f(1,2.0,false,'a');\n }\n \n-// { dg-final { scan-assembler \"_ZN1SIIidEE1fIIbcEEEvidDpOT_\" } }\n+// { dg-final { scan-assembler \"_ZN1SIJidEE1fIJbcEEEvidDpOT_\" } }"}, {"sha": "1bdad3256fb1bb4caedf64782d846175450cfc03", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic4.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic4.C?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++0x -fabi-version=0\" }\n // { dg-do compile }\n template<typename... Args>\n class tuple {};\n@@ -9,7 +9,7 @@ void f_two(tuple<int, float>) {}\n void f_nested(tuple<int, tuple<double, char>, float>) { }\n \n \n-// { dg-final { scan-assembler \"_Z6f_none5tupleIIEE\" } }\n-// { dg-final { scan-assembler \"_Z5f_one5tupleIIiEE\" } }\n-// { dg-final { scan-assembler \"_Z5f_two5tupleIIifEE\" } }\n-// { dg-final { scan-assembler \"_Z8f_nested5tupleIIiS_IIdcEEfEE\" } }\n+// { dg-final { scan-assembler \"_Z6f_none5tupleIJEE\" } }\n+// { dg-final { scan-assembler \"_Z5f_one5tupleIJiEE\" } }\n+// { dg-final { scan-assembler \"_Z5f_two5tupleIJifEE\" } }\n+// { dg-final { scan-assembler \"_Z8f_nested5tupleIJiS_IJdcEEfEE\" } }"}, {"sha": "3ec68e8b1ff0890cce18966515b26a97a2643740", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic42.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic42.C?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-std=gnu++0x\" }\n+// { dg-options \"-std=gnu++0x -fabi-version=5\" }\n // { dg-do compile }\n template<typename... Args>\n void f(Args...) { }"}, {"sha": "44d8479af29951ff5dcd055cd7aadb6e8835e6d4", "filename": "gcc/testsuite/g++.dg/template/nontype22.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype22.C?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -3,7 +3,7 @@\n \n template<typename T> int cmp1(T a, T b);\n template<typename T, int (*cmp)(T, T) = cmp1> struct A { };\n-template <typename T> void f (A<T> &); // { dg-bogus \"\" \"\" { xfail *-*-* } }\n+template <typename T> void f (A<T> &);\n void g()\n {\n   A<char> a;"}, {"sha": "5b945511768686be77226ca3c53063d474b89e1a", "filename": "gcc/testsuite/g++.dg/template/pr35240.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr35240.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr35240.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr35240.C?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -1,12 +1,11 @@\n // PR c++/35240\n // { dg-do compile }\n \n-\n template<int> struct A {};\n \n-template<int N> A<sizeof(new int[N][N])> foo(); // { dg-message \"unimplemented\" }\n+template<int N> A<sizeof(new int[N][N])> foo();\n \n void bar()\n {\n-  foo<1>(); // { dg-message \"required\" }\n+  foo<1>();\n }"}, {"sha": "4e4ca15832ac38cc9d3e5b86c5e008b88f850f4c", "filename": "include/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -1,3 +1,12 @@\n+2012-01-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/6057\n+\tPR c++/48051\n+\tPR c++/50855\n+\tPR c++/51322\n+\t* demangle.h (enum demangle_component_type): Add\n+\tDEMANGLE_COMPONENT_INITIALIZER_LIST, DEMANGLE_COMPONENT_NULLARY.\n+\n 2011-11-07  Richard Henderson  <rth@redhat.com>\n \n \tMerged from transactional-memory."}, {"sha": "34b3ed3cde9af3bb2716ed601cf59d283b39cda8", "filename": "include/demangle.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -344,6 +344,9 @@ enum demangle_component_type\n      template argument, and the right subtree is either NULL or\n      another TEMPLATE_ARGLIST node.  */\n   DEMANGLE_COMPONENT_TEMPLATE_ARGLIST,\n+  /* An initializer list.  The left subtree is either an explicit type or\n+     NULL, and the right subtree is a DEMANGLE_COMPONENT_ARGLIST.  */\n+  DEMANGLE_COMPONENT_INITIALIZER_LIST,\n   /* An operator.  This holds information about a standard\n      operator.  */\n   DEMANGLE_COMPONENT_OPERATOR,\n@@ -353,6 +356,8 @@ enum demangle_component_type\n   /* A typecast, represented as a unary operator.  The one subtree is\n      the type to which the argument should be cast.  */\n   DEMANGLE_COMPONENT_CAST,\n+  /* A nullary expression.  The left subtree is the operator.  */\n+  DEMANGLE_COMPONENT_NULLARY,\n   /* A unary expression.  The left subtree is the operator, and the\n      right subtree is the single argument.  */\n   DEMANGLE_COMPONENT_UNARY,"}, {"sha": "8587ee2eabdb1528d722ec2e8e67aecfb3226c14", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -1,5 +1,22 @@\n 2012-01-06  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/6057\n+\tPR c++/48051\n+\tPR c++/50855\n+\tPR c++/51322\n+\t* cp-demangle.c (d_dump): Handle DEMANGLE_COMPONENT_NULLARY and\n+\tDEMANGLE_COMPONENT_INITIALIZER_LIST.\n+\t(d_make_comp): Likewise.  Allow null right arg for\n+\tDEMANGLE_COMPONENT_TRINARY_ARG2.\n+\t(cplus_demangle_operators): Adjust new/delete; add .*, :: and throw.\n+\t(d_template_args, d_template_arg): Handle 'J' for argument packs.\n+\t(d_exprlist): Add terminator parm.\n+\t(d_expression, d_print_comp): Handle initializer lists, nullary\n+\texpressions, prefix/suffix operators, and new.\n+\t(d_print_subexpr): Avoid parens around DEMANGLE_COMPONENT_QUAL_NAME\n+\tand DEMANGLE_COMPONENT_INITIALIZER_LIST.\n+\t* testsuite/demangle-expected: Add tests.\n+\n \t* cp-demangle.c (cplus_demangle_type): decltype, pack expansion\n \tand vector are substitutable.\n \t(cplus_demangle_operators): Sort."}, {"sha": "2dfd67ceb771c20c15b19d54167f2ab03c8b3380", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 196, "deletions": 76, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -648,9 +648,15 @@ d_dump (struct demangle_component *dc, int indent)\n     case DEMANGLE_COMPONENT_TEMPLATE_ARGLIST:\n       printf (\"template argument list\\n\");\n       break;\n+    case DEMANGLE_COMPONENT_INITIALIZER_LIST:\n+      printf (\"initializer list\\n\");\n+      break;\n     case DEMANGLE_COMPONENT_CAST:\n       printf (\"cast\\n\");\n       break;\n+    case DEMANGLE_COMPONENT_NULLARY:\n+      printf (\"nullary operator\\n\");\n+      break;\n     case DEMANGLE_COMPONENT_UNARY:\n       printf (\"unary operator\\n\");\n       break;\n@@ -806,7 +812,6 @@ d_make_comp (struct d_info *di, enum demangle_component_type type,\n     case DEMANGLE_COMPONENT_BINARY_ARGS:\n     case DEMANGLE_COMPONENT_TRINARY:\n     case DEMANGLE_COMPONENT_TRINARY_ARG1:\n-    case DEMANGLE_COMPONENT_TRINARY_ARG2:\n     case DEMANGLE_COMPONENT_LITERAL:\n     case DEMANGLE_COMPONENT_LITERAL_NEG:\n     case DEMANGLE_COMPONENT_COMPOUND_NAME:\n@@ -843,13 +848,16 @@ d_make_comp (struct d_info *di, enum demangle_component_type type,\n     case DEMANGLE_COMPONENT_PACK_EXPANSION:\n     case DEMANGLE_COMPONENT_GLOBAL_CONSTRUCTORS:\n     case DEMANGLE_COMPONENT_GLOBAL_DESTRUCTORS:\n+    case DEMANGLE_COMPONENT_NULLARY:\n+    case DEMANGLE_COMPONENT_TRINARY_ARG2:\n       if (left == NULL)\n \treturn NULL;\n       break;\n \n       /* This needs a right parameter, but the left parameter can be\n \t empty.  */\n     case DEMANGLE_COMPONENT_ARRAY_TYPE:\n+    case DEMANGLE_COMPONENT_INITIALIZER_LIST:\n       if (right == NULL)\n \treturn NULL;\n       break;\n@@ -1573,15 +1581,17 @@ const struct demangle_operator_info cplus_demangle_operators[] =\n   { \"cm\", NL (\",\"),         2 },\n   { \"co\", NL (\"~\"),         1 },\n   { \"dV\", NL (\"/=\"),        2 },\n-  { \"da\", NL (\"delete[]\"),  1 },\n+  { \"da\", NL (\"delete[] \"), 1 },\n   { \"de\", NL (\"*\"),         1 },\n-  { \"dl\", NL (\"delete\"),    1 },\n+  { \"dl\", NL (\"delete \"),   1 },\n+  { \"ds\", NL (\".*\"),        2 },\n   { \"dt\", NL (\".\"),         2 },\n   { \"dv\", NL (\"/\"),         2 },\n   { \"eO\", NL (\"^=\"),        2 },\n   { \"eo\", NL (\"^\"),         2 },\n   { \"eq\", NL (\"==\"),        2 },\n   { \"ge\", NL (\">=\"),        2 },\n+  { \"gs\", NL (\"::\"),\t    1 },\n   { \"gt\", NL (\">\"),         2 },\n   { \"ix\", NL (\"[]\"),        2 },\n   { \"lS\", NL (\"<<=\"),       2 },\n@@ -1593,11 +1603,11 @@ const struct demangle_operator_info cplus_demangle_operators[] =\n   { \"mi\", NL (\"-\"),         2 },\n   { \"ml\", NL (\"*\"),         2 },\n   { \"mm\", NL (\"--\"),        1 },\n-  { \"na\", NL (\"new[]\"),     1 },\n+  { \"na\", NL (\"new[]\"),     3 },\n   { \"ne\", NL (\"!=\"),        2 },\n   { \"ng\", NL (\"-\"),         1 },\n   { \"nt\", NL (\"!\"),         1 },\n-  { \"nw\", NL (\"new\"),       1 },\n+  { \"nw\", NL (\"new\"),       3 },\n   { \"oR\", NL (\"|=\"),        2 },\n   { \"oo\", NL (\"||\"),        2 },\n   { \"or\", NL (\"|\"),         2 },\n@@ -1614,6 +1624,8 @@ const struct demangle_operator_info cplus_demangle_operators[] =\n   { \"rs\", NL (\">>\"),        2 },\n   { \"st\", NL (\"sizeof \"),   1 },\n   { \"sz\", NL (\"sizeof \"),   1 },\n+  { \"tr\", NL (\"throw\"),     0 },\n+  { \"tw\", NL (\"throw \"),    1 },\n   { NULL, NULL, 0,          0 }\n };\n \n@@ -2679,8 +2691,10 @@ d_template_args (struct d_info *di)\n      constructor or destructor.  */\n   hold_last_name = di->last_name;\n \n-  if (! d_check_char (di, 'I'))\n+  if (d_peek_char (di) != 'I'\n+      && d_peek_char (di) != 'J')\n     return NULL;\n+  d_advance (di, 1);\n \n   if (d_peek_char (di) == 'E')\n     {\n@@ -2739,6 +2753,7 @@ d_template_arg (struct d_info *di)\n       return d_expr_primary (di);\n \n     case 'I':\n+    case 'J':\n       /* An argument pack.  */\n       return d_template_args (di);\n \n@@ -2747,15 +2762,16 @@ d_template_arg (struct d_info *di)\n     }\n }\n \n-/* Subroutine of <expression> ::= cl <expression>+ E */\n+/* Parse a sequence of expressions until we hit the terminator\n+   character.  */\n \n static struct demangle_component *\n-d_exprlist (struct d_info *di)\n+d_exprlist (struct d_info *di, char terminator)\n {\n   struct demangle_component *list = NULL;\n   struct demangle_component **p = &list;\n \n-  if (d_peek_char (di) == 'E')\n+  if (d_peek_char (di) == terminator)\n     {\n       d_advance (di, 1);\n       return d_make_comp (di, DEMANGLE_COMPONENT_ARGLIST, NULL, NULL);\n@@ -2772,7 +2788,7 @@ d_exprlist (struct d_info *di)\n \treturn NULL;\n       p = &d_right (*p);\n \n-      if (d_peek_char (di) == 'E')\n+      if (d_peek_char (di) == terminator)\n \t{\n \t  d_advance (di, 1);\n \t  break;\n@@ -2863,22 +2879,35 @@ d_expression (struct d_info *di)\n       else\n \treturn name;\n     }\n+  else if ((peek == 'i' || peek == 't')\n+\t   && d_peek_next_char (di) == 'l')\n+    {\n+      /* Brace-enclosed initializer list, untyped or typed.  */\n+      struct demangle_component *type = NULL;\n+      if (peek == 't')\n+\ttype = cplus_demangle_type (di);\n+      d_advance (di, 2);\n+      return d_make_comp (di, DEMANGLE_COMPONENT_INITIALIZER_LIST,\n+\t\t\t  type, d_exprlist (di, 'E'));\n+    }\n   else\n     {\n       struct demangle_component *op;\n+      const char *code = NULL;\n       int args;\n \n       op = d_operator_name (di);\n       if (op == NULL)\n \treturn NULL;\n \n       if (op->type == DEMANGLE_COMPONENT_OPERATOR)\n-\tdi->expansion += op->u.s_operator.op->len - 2;\n-\n-      if (op->type == DEMANGLE_COMPONENT_OPERATOR\n-\t  && strcmp (op->u.s_operator.op->code, \"st\") == 0)\n-\treturn d_make_comp (di, DEMANGLE_COMPONENT_UNARY, op,\n-\t\t\t    cplus_demangle_type (di));\n+\t{\n+\t  code = op->u.s_operator.op->code;\n+\t  di->expansion += op->u.s_operator.op->len - 2;\n+\t  if (strcmp (code, \"st\") == 0)\n+\t    return d_make_comp (di, DEMANGLE_COMPONENT_UNARY, op,\n+\t\t\t\tcplus_demangle_type (di));\n+\t}\n \n       switch (op->type)\n \t{\n@@ -2897,26 +2926,43 @@ d_expression (struct d_info *di)\n \n       switch (args)\n \t{\n+\tcase 0:\n+\t  return d_make_comp (di, DEMANGLE_COMPONENT_NULLARY, op, NULL);\n+\n \tcase 1:\n \t  {\n \t    struct demangle_component *operand;\n+\t    int suffix = 0;\n+\n+\t    if (code && (code[0] == 'p' || code[0] == 'm')\n+\t\t&& code[1] == code[0])\n+\t      /* pp_ and mm_ are the prefix variants.  */\n+\t      suffix = !d_check_char (di, '_');\n+\n \t    if (op->type == DEMANGLE_COMPONENT_CAST\n \t\t&& d_check_char (di, '_'))\n-\t      operand = d_exprlist (di);\n+\t      operand = d_exprlist (di, 'E');\n \t    else\n \t      operand = d_expression (di);\n-\t    return d_make_comp (di, DEMANGLE_COMPONENT_UNARY, op,\n-\t\t\t\toperand);\n+\n+\t    if (suffix)\n+\t      /* Indicate the suffix variant for d_print_comp.  */\n+\t      return d_make_comp (di, DEMANGLE_COMPONENT_UNARY, op,\n+\t\t\t\t  d_make_comp (di,\n+\t\t\t\t\t       DEMANGLE_COMPONENT_BINARY_ARGS,\n+\t\t\t\t\t       operand, operand));\n+\t    else\n+\t      return d_make_comp (di, DEMANGLE_COMPONENT_UNARY, op,\n+\t\t\t\t  operand);\n \t  }\n \tcase 2:\n \t  {\n \t    struct demangle_component *left;\n \t    struct demangle_component *right;\n-\t    const char *code = op->u.s_operator.op->code;\n \n \t    left = d_expression (di);\n \t    if (!strcmp (code, \"cl\"))\n-\t      right = d_exprlist (di);\n+\t      right = d_exprlist (di, 'E');\n \t    else if (!strcmp (code, \"dt\") || !strcmp (code, \"pt\"))\n \t      {\n \t\tright = d_unqualified_name (di);\n@@ -2936,17 +2982,50 @@ d_expression (struct d_info *di)\n \t  {\n \t    struct demangle_component *first;\n \t    struct demangle_component *second;\n+\t    struct demangle_component *third;\n \n-\t    first = d_expression (di);\n-\t    second = d_expression (di);\n+\t    if (!strcmp (code, \"qu\"))\n+\t      {\n+\t\t/* ?: expression.  */\n+\t\tfirst = d_expression (di);\n+\t\tsecond = d_expression (di);\n+\t\tthird = d_expression (di);\n+\t      }\n+\t    else if (code[0] == 'n')\n+\t      {\n+\t\t/* new-expression.  */\n+\t\tif (code[1] != 'w' && code[1] != 'a')\n+\t\t  return NULL;\n+\t\tfirst = d_exprlist (di, '_');\n+\t\tsecond = cplus_demangle_type (di);\n+\t\tif (d_peek_char (di) == 'E')\n+\t\t  {\n+\t\t    d_advance (di, 1);\n+\t\t    third = NULL;\n+\t\t  }\n+\t\telse if (d_peek_char (di) == 'p'\n+\t\t\t && d_peek_next_char (di) == 'i')\n+\t\t  {\n+\t\t    /* Parenthesized initializer.  */\n+\t\t    d_advance (di, 2);\n+\t\t    third = d_exprlist (di, 'E');\n+\t\t  }\n+\t\telse if (d_peek_char (di) == 'i'\n+\t\t\t && d_peek_next_char (di) == 'l')\n+\t\t  /* initializer-list.  */\n+\t\t  third = d_expression (di);\n+\t\telse\n+\t\t  return NULL;\n+\t      }\n+\t    else\n+\t      return NULL;\n \t    return d_make_comp (di, DEMANGLE_COMPONENT_TRINARY, op,\n \t\t\t\td_make_comp (di,\n \t\t\t\t\t     DEMANGLE_COMPONENT_TRINARY_ARG1,\n \t\t\t\t\t     first,\n \t\t\t\t\t     d_make_comp (di,\n \t\t\t\t\t\t\t  DEMANGLE_COMPONENT_TRINARY_ARG2,\n-\t\t\t\t\t\t\t  second,\n-\t\t\t\t\t\t\t  d_expression (di))));\n+\t\t\t\t\t\t\t  second, third)));\n \t  }\n \tdefault:\n \t  return NULL;\n@@ -3666,6 +3745,8 @@ d_print_subexpr (struct d_print_info *dpi, int options,\n {\n   int simple = 0;\n   if (dc->type == DEMANGLE_COMPONENT_NAME\n+      || dc->type == DEMANGLE_COMPONENT_QUAL_NAME\n+      || dc->type == DEMANGLE_COMPONENT_INITIALIZER_LIST\n       || dc->type == DEMANGLE_COMPONENT_FUNCTION_PARAM)\n     simple = 1;\n   if (!simple)\n@@ -4261,6 +4342,19 @@ d_print_comp (struct d_print_info *dpi, int options,\n \t}\n       return;\n \n+    case DEMANGLE_COMPONENT_INITIALIZER_LIST:\n+      {\n+\tstruct demangle_component *type = d_left (dc);\n+\tstruct demangle_component *list = d_right (dc);\n+\n+\tif (type)\n+\t  d_print_comp (dpi, options, type);\n+\td_append_char (dpi, '{');\n+\td_print_comp (dpi, options, list);\n+\td_append_char (dpi, '}');\n+      }\n+      return;\n+\n     case DEMANGLE_COMPONENT_OPERATOR:\n       {\n \tchar c;\n@@ -4284,55 +4378,59 @@ d_print_comp (struct d_print_info *dpi, int options,\n       d_print_cast (dpi, options, dc);\n       return;\n \n+    case DEMANGLE_COMPONENT_NULLARY:\n+      d_print_expr_op (dpi, options, d_left (dc));\n+      return;\n+\n     case DEMANGLE_COMPONENT_UNARY:\n-      if (d_left (dc)->type == DEMANGLE_COMPONENT_OPERATOR\n-\t  && d_left (dc)->u.s_operator.op->len == 1\n-\t  && d_left (dc)->u.s_operator.op->name[0] == '&'\n-\t  && d_right (dc)->type == DEMANGLE_COMPONENT_TYPED_NAME\n-\t  && d_left (d_right (dc))->type == DEMANGLE_COMPONENT_QUAL_NAME\n-\t  && d_right (d_right (dc))->type == DEMANGLE_COMPONENT_FUNCTION_TYPE)\n-\t{\n-\t  /* Address of a function (therefore in an expression context) must\n-\t     have its argument list suppressed.\n-\n-\t     unary operator ... dc\n-\t       operator & ... d_left (dc)\n-\t       typed name ... d_right (dc)\n-\t\t qualified name ... d_left (d_right (dc))\n-\t\t   <names>\n-\t\t function type ... d_right (d_right (dc))\n-\t\t   argument list\n-\t\t     <arguments>  */\n-\n-\t  d_print_expr_op (dpi, options, d_left (dc));\n-\t  d_print_comp (dpi, options, d_left (d_right (dc)));\n-\t  return;\n-\t}\n-      else if (d_left (dc)->type == DEMANGLE_COMPONENT_OPERATOR\n-\t       && d_left (dc)->u.s_operator.op->len == 1\n-\t       && d_left (dc)->u.s_operator.op->name[0] == '&'\n-\t       && d_right (dc)->type == DEMANGLE_COMPONENT_QUAL_NAME)\n-\t{\n-\t  /* Keep also already processed variant without the argument list.\n+      {\n+\tstruct demangle_component *op = d_left (dc);\n+\tstruct demangle_component *operand = d_right (dc);\n+\tconst char *code = NULL;\n \n-\t     unary operator ... dc\n-\t       operator & ... d_left (dc)\n-\t       qualified name ... d_right (dc)\n-\t\t <names>  */\n+\tif (op->type == DEMANGLE_COMPONENT_OPERATOR)\n+\t  {\n+\t    code = op->u.s_operator.op->code;\n+\t    if (!strcmp (code, \"ad\"))\n+\t      {\n+\t\t/* Don't print the argument list for the address of a\n+\t\t   function.  */\n+\t\tif (operand->type == DEMANGLE_COMPONENT_TYPED_NAME\n+\t\t    && d_left (operand)->type == DEMANGLE_COMPONENT_QUAL_NAME\n+\t\t    && d_right (operand)->type == DEMANGLE_COMPONENT_FUNCTION_TYPE)\n+\t\t  operand = d_left (operand);\n+\t      }\n+\t    if (operand->type == DEMANGLE_COMPONENT_BINARY_ARGS)\n+\t      {\n+\t\t/* This indicates a suffix operator.  */\n+\t\toperand = d_left (operand);\n+\t\td_print_subexpr (dpi, options, operand);\n+\t\td_print_expr_op (dpi, options, op);\n+\t\treturn;\n+\t      }\n+\t  }\n \n-\t  d_print_expr_op (dpi, options, d_left (dc));\n-\t  d_print_comp (dpi, options, d_right (dc));\n-\t  return;\n-\t}\n-      else if (d_left (dc)->type != DEMANGLE_COMPONENT_CAST)\n-\td_print_expr_op (dpi, options, d_left (dc));\n-      else\n-\t{\n-\t  d_append_char (dpi, '(');\n-\t  d_print_cast (dpi, options, d_left (dc));\n-\t  d_append_char (dpi, ')');\n-\t}\n-      d_print_subexpr (dpi, options, d_right (dc));\n+\tif (op->type != DEMANGLE_COMPONENT_CAST)\n+\t  d_print_expr_op (dpi, options, op);\n+\telse\n+\t  {\n+\t    d_append_char (dpi, '(');\n+\t    d_print_cast (dpi, options, op);\n+\t    d_append_char (dpi, ')');\n+\t  }\n+\tif (code && !strcmp (code, \"gs\"))\n+\t  /* Avoid parens after '::'.  */\n+\t  d_print_comp (dpi, options, operand);\n+\telse if (code && !strcmp (code, \"st\"))\n+\t  /* Always print parens for sizeof (type).  */\n+\t  {\n+\t    d_append_char (dpi, '(');\n+\t    d_print_comp (dpi, options, operand);\n+\t    d_append_char (dpi, ')');\n+\t  }\n+\telse\n+\t  d_print_subexpr (dpi, options, operand);\n+      }\n       return;\n \n     case DEMANGLE_COMPONENT_BINARY:\n@@ -4397,11 +4495,33 @@ d_print_comp (struct d_print_info *dpi, int options,\n \t  d_print_error (dpi);\n \t  return;\n \t}\n-      d_print_subexpr (dpi, options, d_left (d_right (dc)));\n-      d_print_expr_op (dpi, options, d_left (dc));\n-      d_print_subexpr (dpi, options, d_left (d_right (d_right (dc))));\n-      d_append_string (dpi, \" : \");\n-      d_print_subexpr (dpi, options, d_right (d_right (d_right (dc))));\n+      {\n+\tstruct demangle_component *op = d_left (dc);\n+\tstruct demangle_component *first = d_left (d_right (dc));\n+\tstruct demangle_component *second = d_left (d_right (d_right (dc)));\n+\tstruct demangle_component *third = d_right (d_right (d_right (dc)));\n+\n+\tif (!strcmp (op->u.s_operator.op->code, \"qu\"))\n+\t  {\n+\t    d_print_subexpr (dpi, options, first);\n+\t    d_print_expr_op (dpi, options, op);\n+\t    d_print_subexpr (dpi, options, second);\n+\t    d_append_string (dpi, \" : \");\n+\t    d_print_subexpr (dpi, options, third);\n+\t  }\n+\telse\n+\t  {\n+\t    d_append_string (dpi, \"new \");\n+\t    if (d_left (first) != NULL)\n+\t      {\n+\t\td_print_subexpr (dpi, options, first);\n+\t\td_append_char (dpi, ' ');\n+\t      }\n+\t    d_print_comp (dpi, options, second);\n+\t    if (third)\n+\t      d_print_subexpr (dpi, options, third);\n+\t  }\n+      }\n       return;\n \n     case DEMANGLE_COMPONENT_TRINARY_ARG1:"}, {"sha": "3f3960a409328beadcc00952e6ac3e13e43471c1", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -3935,7 +3935,7 @@ _Z1tIlEDTplcvT_Li5EclL_Z1qsELi6EEEv\n decltype (((long)(5))+(q(6))) t<long>()\n # test for expansion of function parameter pack\n --format=gnu-v3\n-_Z1gIIidEEDTclL_Z1fEspplfp_Li1EEEDpT_\n+_Z1gIJidEEDTclL_Z1fEspplfp_Li1EEEDpT_\n decltype (f(({parm#1}+(1))...)) g<int, double>(int, double)\n # lambda tests\n --format=gnu-v3\n@@ -4030,6 +4030,45 @@ decltype ((int)()) f<int, int>(int, int)\n --format=gnu-v3\n _Z1fDv4_iS_\n f(int __vector(4), int __vector(4))\n+--format=gnu-v3\n+_Z2f1Ii1AEDTdsfp_fp0_ET0_MS2_T_\n+decltype ({parm#1}.*{parm#2}) f1<int, A>(A, int A::*)\n+--format=gnu-v3\n+_Z2f2IiEDTquL_Z1bEfp_trET_\n+decltype (b?{parm#1} : (throw)) f2<int>(int)\n+--format=gnu-v3\n+_Z6check1IiEvP6helperIXsznw_T_EEE\n+void check1<int>(helper<sizeof (new int)>*)\n+--format=gnu-v3\n+_Z6check2IiEvP6helperIXszgsnw_T_piEEE\n+void check2<int>(helper<sizeof (::new int())>*)\n+--format=gnu-v3\n+_Z6check3IiEvP6helperIXsznwadL_Z1iE_T_piLi1EEEE\n+void check3<int>(helper<sizeof (new (&i) int(1))>*)\n+--format=gnu-v3\n+_Z6check4IiEvP6helperIXszna_A1_T_EEE\n+void check4<int>(helper<sizeof (new int [1])>*)\n+--format=gnu-v3\n+_Z6check5IiEvP6helperIXszna_A1_T_piEEE\n+void check5<int>(helper<sizeof (new int [1]())>*)\n+--format=gnu-v3\n+_Z1fIiEDTcmgsdlfp_psfp_EPT_\n+decltype ((::delete {parm#1}),(+{parm#1})) f<int>(int*)\n+--format=gnu-v3\n+_Z1fIiEDTcmdafp_psfp_EPT_\n+decltype ((delete[] {parm#1}),(+{parm#1})) f<int>(int*)\n+--format=gnu-v3\n+_Z2f1IiEDTppfp_ET_\n+decltype ({parm#1}++) f1<int>(int)\n+--format=gnu-v3\n+_Z2f1IiEDTpp_fp_ET_\n+decltype (++{parm#1}) f1<int>(int)\n+--format=gnu-v3\n+_Z2f1IiEDTcl1gfp_ilEEET_\n+decltype (g({parm#1}, {})) f1<int>(int)\n+--format=gnu-v3\n+_Z2f1IiEDTnw_T_ilEES0_\n+decltype (new int{}) f1<int>(int)\n #\n # Ada (GNAT) tests.\n #"}, {"sha": "f2e68c5dc8f687ee05ef77172b70d7ecd49edb24", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -1,3 +1,8 @@\n+2012-01-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* testsuite/abi/demangle/regression/cw-16.cc (main): Adjust\n+\texpected demangling.\n+\n 2012-01-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/51504"}, {"sha": "12fa6fe40eff68dcca68945121b399498f6e0973", "filename": "libstdc++-v3/testsuite/abi/demangle/regression/cw-16.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b6aaa996e0d8f5abac818315b6f77cb3596db98/libstdc%2B%2B-v3%2Ftestsuite%2Fabi%2Fdemangle%2Fregression%2Fcw-16.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b6aaa996e0d8f5abac818315b6f77cb3596db98/libstdc%2B%2B-v3%2Ftestsuite%2Fabi%2Fdemangle%2Fregression%2Fcw-16.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fabi%2Fdemangle%2Fregression%2Fcw-16.cc?ref=4b6aaa996e0d8f5abac818315b6f77cb3596db98", "patch": "@@ -39,7 +39,7 @@ verify_demangle(\"_Z1fPFYPFiiEiE\",\n verify_demangle(\"_Z1fI1XENT_1tES2_\",\n                 \"X::t f<X>(X::t)\");\n verify_demangle(\"_Z1fILi5E1AEvN1CIXstN1T1tEEXszsrS2_1tEE1qE\",\n-                \"void f<5, A>(C<sizeof (T::t), sizeof (T::t)>::q)\");\n+                \"void f<5, A>(C<sizeof (T::t), sizeof T::t>::q)\");\n // 2003/12/03, libstdc++/13045\n verify_demangle(\"_Z1fILi1ELc120EEv1AIXplT_cviLd4028ae147ae147aeEEE\",\n                 \"void f<1, (char)120>(A<(1)+((int)((double)[4028ae147ae147ae]))>)\");"}]}