{"sha": "1a59f3db4a4174d02256be51e9e08e9c68478a41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE1OWYzZGI0YTQxNzRkMDIyNTZiZTUxZTllMDhlOWM2ODQ3OGE0MQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-06T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-06T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "4bcc4a2f042633b046d96187d9c857f6b0c8ed3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bcc4a2f042633b046d96187d9c857f6b0c8ed3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a59f3db4a4174d02256be51e9e08e9c68478a41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a59f3db4a4174d02256be51e9e08e9c68478a41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a59f3db4a4174d02256be51e9e08e9c68478a41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a59f3db4a4174d02256be51e9e08e9c68478a41/comments", "author": null, "committer": null, "parents": [{"sha": "5bc13e5217f687f5d08a7022b4c6081befc54402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bc13e5217f687f5d08a7022b4c6081befc54402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bc13e5217f687f5d08a7022b4c6081befc54402"}], "stats": {"total": 460, "additions": 459, "deletions": 1}, "files": [{"sha": "b4c70db2b43860bb5040d4e7c3fcf434782ae950", "filename": "gcc/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a59f3db4a4174d02256be51e9e08e9c68478a41", "patch": "@@ -1,3 +1,65 @@\n+2020-06-05  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\t* gimplify.c (gimplify_adjust_omp_clauses): Remove\n+\t'GOMP_MAP_STRUCT' mapping from OpenACC 'exit data' directives.\n+\n+2020-06-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95539\n+\t* tree-vect-data-refs.c\n+\t(vect_slp_analyze_and_verify_instance_alignment): Use\n+\tSLP_TREE_REPRESENTATIVE for the data-ref check.\n+\t* tree-vect-stmts.c (vectorizable_load): Reset stmt_info\n+\tback to the first scalar stmt rather than the\n+\tSLP_TREE_REPRESENTATIVE to match previous behavior.\n+\n+2020-06-05  Felix Yang  <felix.yang@huawei.com>\n+\n+\tPR target/95254\n+\t* expr.c (emit_move_insn): Check src and dest of the copy to see\n+\tif one or both of them are subregs, try to remove the subregs when\n+\tinnermode and outermode are equal in size and the mode change involves\n+\tan implicit round trip through memory.\n+\n+2020-06-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/95535\n+\t* config/i386/i386.md (*ctzsi2_zext, *clzsi2_lzcnt_zext): New\n+\tdefine_insn_and_split patterns.\n+\t(*ctzsi2_zext_falsedep, *clzsi2_lzcnt_zext_falsedep): New\n+\tdefine_insn patterns.\n+\n+2020-06-05  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* alloc-pool.h (object_allocator::remove_raw): New.\n+\t* tree-ssa-math-opts.c (struct occurrence): Use NSMDI.\n+\t(occurrence::occurrence): Add.\n+\t(occurrence::~occurrence): Likewise.\n+\t(occurrence::new): Likewise.\n+\t(occurrence::delete): Likewise.\n+\t(occ_new): Remove.\n+\t(insert_bb): Use new occurence (...) instead of occ_new.\n+\t(register_division_in): Likewise.\n+\t(free_bb): Use delete occ instead of manually removing\n+\tfrom the pool.\n+\n+2020-06-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/95493\n+\t* cfgexpand.c (expand_debug_expr): Avoid calling\n+\tset_mem_attributes_minus_bitpos when we were expanding\n+\tan SSA name.\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Remove\n+\tARRAY_REF special-casing, add CONSTRUCTOR to the set of\n+\tspecial-cases we do not want MEM_EXPRs for.  Assert\n+\twe end up with reasonable MEM_EXPRs.\n+\n+2020-06-05  Lili Cui  <lili.cui@intel.com>\n+\n+\tPR target/95525\n+\t* config/i386/i386.h (PTA_WAITPKG): Change bitmask value.\n+\n 2020-06-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/10138"}, {"sha": "4d03d79ce42cb932f8309b8eacdd5b74c759bc6f", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=1a59f3db4a4174d02256be51e9e08e9c68478a41", "patch": "@@ -1 +1 @@\n-20200605\n+20200606"}, {"sha": "76948134677f362267de3b786ab3f893eeb8f471", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 212, "deletions": 0, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1a59f3db4a4174d02256be51e9e08e9c68478a41", "patch": "@@ -1,3 +1,215 @@\n+2020-06-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_prag.adb (Validate_Compile_Time_Warning_Or_Error): Use ??.\n+\n+2020-06-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* cstand.adb (Create_Standard): Update comments.\n+\n+2020-06-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* scng.adb (Scan): Fix typo to take into account all future\n+\tversions of Ada.\n+\t* sem_attr.ads (Attribute_Impl_Def): Add Attribute_Reduce for\n+\tnow.\n+\t* sem_attr.adb (Analyze_Attribute): Only allow 'Reduce under\n+\t-gnatX.\n+\t* snames.ads-tmpl (Name_Reduce): Update comment.\n+\n+2020-06-05  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_disp.adb (Expand_Interface_Thunk): Add comment about\n+\tgnatcov reliance on specific name used for thunks.\n+\n+2020-06-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Subtype_Declaration): For scalar types,\n+\tand for subtype declarations without a constraint, subtype\n+\tinherits Atomic flag from base type.\n+\n+2020-06-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_attributes.rst (Enum_Rep):\n+\tRemove extra colon.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-06-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* atree.adb (New_Copy): Clear Has_Dynamic_Range_Check on\n+\tsubexpression nodes.\n+\t* checks.adb (Append_Range_Checks): Assert that the node\n+\tdoesn't have the Has_Dynamic_Range_Check flag set.\n+\t(Insert_Range_Checks): Likewise.\n+\t* exp_ch3.adb (Expand_N_Subtype_Indication): Do not apply\n+\trange checks for a full type or object declaration.\n+\t* sem_ch3.ads: Move with and use clauses for Nlists to...\n+\t(Process_Range_Expr_In_Decl): Change default to No_List for\n+\tthe Check_List parameter.\n+\t* sem_ch3.adb: ...here.\n+\t(Process_Range_Expr_In_Decl): Likewise.  When the insertion\n+\tnode is a declaration, only insert on the list if is present\n+\twhen the declaration involves discriminants, and only insert\n+\ton the node when there is no list otherwise.\n+\n+2020-06-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Record_Aggregate): Create the\n+\tN_Aggregate node with its Expressions field set to No_List and\n+\tnot to an empty list.\n+\n+2020-06-05  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* libgnat/s-os_lib.adb (Is_Dirsep): Moved from Build_Path to\n+\tpackage level to reuse.\n+\t(Normalize_Pathname.Final_Value): Reduce 2 'if' statements to\n+\tone.\n+\t(Normalize_Pathname.Fill_Directory): New procedure instead of\n+\tfunction Get_Directory. Remove slash to backslash conversion and\n+\tdrive letter uppercasing on Windows.\n+\n+2020-06-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem.adb (Assert_Done): Relax check for main unit, as it was\n+\toverzealous in the case of the main unit itself.\n+\n+2020-06-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb, sem_ch8.adb, sem_util.adb: Use Is_Incomplete_Type\n+\tto make the code easier to read.\n+\n+2020-06-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo.adb: Minor reformatting.\n+\t* sem_util.adb (Has_Full_Default_Initialization,\n+\tIs_Partially_Initialized_Type, Caller_Known_Size_Record,\n+\tLarge_Max_Size_Mutable): Iterate with\n+\tFirst_Component/Next_Component; rename Ent to Comp.\n+\n+2020-06-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb (Aggr_Assignment_OK_For_Backend): Use\n+\tExpr_Rep_Value instead of Expr_Value to obtain the equivalent\n+\tinteger value.\n+\t* sem_eval.ads (Expr_Value): Document more supported cases.\n+\t* sem_eval.adb (Expr_Rep_Value): Copy missing cases from\n+\tExp_Value.\n+\n+2020-06-05  Bob Duff  <duff@adacore.com>\n+\n+\t* rtsfind.adb, rtsfind.ads: Move subtypes of RTU_Id into package\n+\tbody, because they are not needed by clients. Change \"Child_\" to\n+\t\"Descendant\", because grandchildren and great grandchildren are\n+\tinvolved.  Replace all the repetitive comments with a single\n+\tconcise one.  Change the parent subtypes to be more consistent;\n+\tuse the most specific parent.\n+\n+2020-06-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* rtsfind.ads, rtsfind.adb (Is_Text_IO_Special_Package): Moved\n+\tfrom the GNATprove backend to the frontend.\n+\n+2020-06-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.ads: Add comment about function only used in\n+\tCodePeer.\n+\n+2020-06-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch9.adb, (Analyze_Task_Body): After analying the task\n+\tbody, indicate that all local variables have no delayed aspects.\n+\tThis prevents improper later calls to\n+\tCheck_Aspect_At_End_Of_Declarations, that would happen when the\n+\tconstructed task_procedure body (generated during expansion) is\n+\tanalyzed. The legality of aspect specifications that may appear\n+\ton local declarations has already been established, and it is in\n+\tgeneral not possible to recheck them properly during expansion,\n+\twhen visibility may not be fully established.\n+\n+2020-06-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/a-cofuve.ads (First): Add Global contract.\n+\n+2020-06-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_prag.adb (Set_Convention_From_Pragma): Set the convention\n+\tof anonymous access array components.\n+\n+2020-06-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-calfor.ads, libgnat/a-catizo.ads,\n+\tlibgnat/a-catizo.adb (Local_Time_Offset, Local_Image): New.\n+\t(UTC_Time_Offset): Now a renaming of Local_Time_Offset.\n+\n+2020-06-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch3.adb (Available_Full_View): New function returning\n+\teither the full or the underlying full view.\n+\t(Build_Full_Derivation): Add guard for the full view.\n+\t(Copy_And_Build): Retrieve the underlying full view, if any,\n+\talso if deriving a completion.\n+\t(Build_Derived_Private_Type): Use Available_Full_View throughout\n+\tto decide whether a full derivation must be done.\n+\n+2020-06-05  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_attr.adb, exp_ch11.adb, exp_imgv.adb, exp_tss.ads,\n+\tpar-ch4.adb, sem_attr.adb, sem_util.ads: Misc cleanup.\n+\n+2020-06-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-nudira.ads, libgnat/a-nudira.adb (Random): New\n+\tfunction.\n+\n+2020-06-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_attr.ads (Attribute_Impl_Def): Remove Enum_Rep/Val.\n+\t* sem_attr.adb (Attribute_20): New, move Enum_Rep/Val here.\n+\t(Analyze_Attribute): Take Attribute_20 into account.\n+\n+2020-06-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* restrict.ads (Unit_Array): Add a-direct.\n+\n+2020-06-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/s-stopoo.ads: Mark package Pure and leave room for\n+\tNonblocking once this aspect is supported.\n+\n+2020-06-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference) <Valid_Scalars>:\n+\tSet the No_Truncation flag on the unchecked conversion built for\n+\tscalar types.\n+\n+2020-06-05  Bob Duff  <duff@adacore.com>\n+\n+\t* einfo.adb, einfo.ads, exp_util.adb: Remove Invariants_Ignored\n+\tflag.\n+\t* sem_prag.adb (Invariant): Instead of setting a flag to be\n+\tchecked elsewhere, remove the pragma as soon as it is analyzed\n+\tand checked for legality.\n+\n+2020-06-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* checks.ads (Apply_Length_Check): Rename Ck_Node parameter to\n+\tExpr.\n+\t(Apply_Range_Check): Likewise.\n+\t(Get_Range_Checks): Likewise.\n+\t* checks.adb (Apply_Float_Conversion_Check): Likewise.\n+\t(Apply_Selected_Length_Checks): Likewise.\n+\t(Apply_Selected_Range_Checks): Likewise.\n+\t(Guard_Access): Likewise.\n+\t(Selected_Length_Checks): Likewise.  Also avoid shadowing in\n+\tchild procedures.\n+\t(Selected_Range_Checks): Likewise.\n+\n+2020-06-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* par-ch3.adb, par-ch4.adb, scng.adb, sem_aggr.adb,\n+\tsem_ch10.adb, sem_ch12.adb, sem_prag.adb: Update wording: change\n+\tAda_2020 to Ada 2020 in comments and mention -gnat2020 instead\n+\tof -gnatX switch.\n+\n 2020-06-04  Arnaud Charlet  <charlet@adacore.com>\n \n \t* libgnat/i-c.ads (long_long, unsigned_long_long): New"}, {"sha": "8fac84d3b029bee04c699dd97023ed893e997073", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1a59f3db4a4174d02256be51e9e08e9c68478a41", "patch": "@@ -1,3 +1,8 @@\n+2020-06-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* c-pretty-print.c (pp_c_additive_expression): Handle negative\n+\toperand to POINTER_PLUS_EXPR.\n+\n 2020-06-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/10138"}, {"sha": "bf38e8704b70f027c9835ad488b666085c25be50", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=1a59f3db4a4174d02256be51e9e08e9c68478a41", "patch": "@@ -1,3 +1,10 @@\n+2020-06-05  Mark Wielaard  <mark@klomp.org>\n+\n+\t* c-decl.c (implicit_decl_warning): When warned and olddecl is\n+\tan undeclared builtin, then add a fixit header hint, if found.\n+\t(implicitly_declare): Add OPT_Wbuiltin_declaration_mismatch to\n+\twarning_at about implicit builtin declaration type mismatch.\n+\n 2020-06-03  Mark Wielaard  <mark@klomp.org>\n \n \t* c-parser.c (struct c_parser): Add seen_string_literal"}, {"sha": "ef3d75ca09f5e82d017a4a80c9a10245c7f7cd61", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1a59f3db4a4174d02256be51e9e08e9c68478a41", "patch": "@@ -1,3 +1,19 @@\n+2020-06-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95369\n+\t* call.c (build_converted_constant_expr_internal): Allow\n+\tlist-initialization.\n+\n+2020-06-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* cp-tree.def (CO_RETURN_EXPR): Correct the class\n+\tto use tcc_statement.\n+\n+2020-06-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* error.c (dump_binary_op): Handle negative operand to\n+\tPOINTER_PLUS_EXPR.\n+\n 2020-06-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/93310"}, {"sha": "8d5eee9fd39c96d54f0577e79fc0db2954d91259", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=1a59f3db4a4174d02256be51e9e08e9c68478a41", "patch": "@@ -1,3 +1,68 @@\n+2020-06-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 740f3d1ea.\n+\t* d-lang.cc (d_handle_option): Use new fields to save debug and\n+\tversion levels passed over command-line.\n+\t(d_post_options): Add them to front-end here.\n+\n+2020-06-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd f5638c7b8.\n+\t* d-builtins.cc (d_init_versions): Use new CHECKENABLE enum.\n+\t* d-codegen.cc (array_bounds_check): Likewise.\n+\t(build_frame_type): Likewise.\n+\t(get_frameinfo): Likewise.\n+\t* d-lang.cc (d_init_options): Likewise.\n+\t(d_init_options_struct): Don't initialize x_flag_bounds_check.\n+\t(d_handle_option): Use new CHECKENABLE enum.\n+\t(d_post_options): Likewise.  Set flag_bounds_check here.\n+\t* expr.cc (ExprVisitor::visit(AssertExp *)): Use new CHECKENABLE enum.\n+\n+2020-06-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 56f0a65c4.\n+\t* d-builtins.cc (build_frontend_type): Remove static.\n+\t(d_build_builtins_module): Use target.va_listType() to get front-end\n+\ttype for va_list.\n+\t(d_init_builtins): Move creation of va_list to Target::va_listType.\n+\t* d-codegen.cc (build_interface_binfo): Use new target global.\n+\t(build_vindex_ref): Likewise.\n+\t(identity_compare_p): Likewise.\n+\t* d-ctfloat.cc (CTFloat::parse): Likewise.\n+\t* d-lang.cc (d_init): Likewise.\n+\t* d-port.cc (Port::isFloat32LiteralOutOfRange): Likewise.\n+\t(Port::isFloat64LiteralOutOfRange): Likewise.\n+\t* d-target.cc (define_float_constants): Initialize constants through a\n+\treference, instead of setting globals.\n+\t(Target::_init): Initialize new fields instead of setting globals.\n+\t(Target::va_listType): Build front-end type from va_list_type_node.\n+\t(Target::toCppMangle): Renamed to ...\n+\t(TargetCPP::toMangle): ... this.\n+\t(Target::cppTypeInfoMangle): Renamed to ...\n+\t(TargetCPP::typeInfoMangle): ... this.\n+\t(Target::cppTypeMangle): Renamed to ...\n+\t(TargetCPP::typeMangle): this.\n+\t(Target::cppParameterType): Renamed to ...\n+\t(TargetCPP::parameterType): ... this.  Use target.va_listType() to get\n+\tfront-end type for va_list.\n+\t(Target::cppFundamentalType): Renamed to ...\n+\t(TargetCPP::fundamentalType): ... this.\n+\t* d-tree.h (build_frontend_type): Declare.\n+\t* decl.cc (base_vtable_offset): Use new target global.\n+\t* typeinfo.cc (layout_classinfo_interfaces): Likewise.\n+\t(layout_cpp_typeinfo): Likewise.\n+\t* types.cc (valist_array_p): Use target.va_listType() to get front-end\n+\ttype for va_list.\n+\t(layout_aggregate_type): Use new target global.\n+\n+2020-06-05  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 6d5bffa54.\n+\t* d-builtins.cc (maybe_set_builtin_1): Update call to\n+\tCondition::include().\n+\t* decl.cc (DeclVisitor::visit(AttribDeclaration *)): Likewise.\n+\t* types.cc (layout_aggregate_members): Likewise.\n+\n 2020-06-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd 48d704f08."}, {"sha": "fac5bcf0ba9b9b1f0443f2c41e5977a379f52a11", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1a59f3db4a4174d02256be51e9e08e9c68478a41", "patch": "@@ -1,3 +1,19 @@\n+2020-06-05  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95530\n+\tPR fortran/95537\n+\t* decl.c (gfc_match_decl_type_spec): Enlarge buffer, and enhance\n+\tstring copy to detect buffer overflow.\n+\t* gfortran.h (gfc_common_head): Enlarge buffer.\n+\t* trans-common.c (finish_equivalences): Enhance string copy to\n+\tdetect buffer overflow.\n+\n+2020-06-05  Tom Tromey  <tromey@adacore.com>\n+\n+\tPR fortran/95509\n+\t* misc.c (gfc_closest_fuzzy_match): Update cutoff value\n+\tcomputation.\n+\n 2020-06-04  Steven G. Kargl  <kargl@gcc.gnu.org>\n \t    Harald Anlauf  <anlauf@gmx.de>\n "}, {"sha": "740af3191cd33dae9c23da8d63b84d2db680af17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a59f3db4a4174d02256be51e9e08e9c68478a41/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a59f3db4a4174d02256be51e9e08e9c68478a41", "patch": "@@ -1,3 +1,61 @@\n+2020-06-05  Martin Sebor  <msebor@redhat.com>\n+\n+\t* g++.dg/warn/Wnonnull5.C: Temporarily remove.\n+\n+2020-06-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95369\n+\t* g++.dg/cpp2a/nontype-class38.C: New test.\n+\n+2020-06-05  Mark Wielaard  <mark@klomp.org>\n+\n+\t* gcc.dg/missing-header-fixit-3.c: Add\n+\t-Wno-implicit-function-declaration.\n+\t* gcc.dg/missing-header-fixit-4.c: Add new expected output.\n+\t* gcc.dg/missing-header-fixit-5.c: New testcase.\n+\t* gcc.dg/Wbuiltin-declaration-mismatch-ignore.c: Likewise.\n+\n+2020-06-05  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/constexpr-ptrsub2.C: New test.\n+\n+2020-06-05  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\t* c-c++-common/goacc/struct-enter-exit-data-1.c: New file.\n+\n+2020-06-05  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-c++-common/goacc/uninit-use-device-clause.c: Adjust.\n+\t* c-c++-common/pr59223.c: Same.\n+\t* g++.dg/warn/Wnonnull5.C: Same.\n+\t* gcc.dg/pr59924.c: Same.\n+\t* gcc.dg/ubsan/pr81981.c: Same.\n+\t* gcc.dg/ubsan/pr89284.c: Same.\n+\t* gfortran.dg/goacc/uninit-use-device-clause.f95: Same.\n+\n+2020-06-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95539\n+\t* gcc.dg/vect/pr95539.c: New testcase.\n+\n+2020-06-05  Felix Yang  <felix.yang@huawei.com>\n+\n+\tPR target/95254\n+\t* gcc.target/aarch64/pr95254.c: New test.\n+\t* gcc.target/i386/pr67609.c: Check \"movq\\t%xmm0\" instead of \"movdqa\".\n+\n+2020-06-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/95535\n+\t* gcc.target/i386/pr95535-1.c: New test.\n+\t* gcc.target/i386/pr95535-2.c: New test.\n+\n+2020-06-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/95493\n+\t* g++.dg/torture/pr95493.C: New testcase.\n+\n 2020-06-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/10138"}, {"sha": "1cc6015a64b7d95f5d1b945c7be1ed549f5e991e", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a59f3db4a4174d02256be51e9e08e9c68478a41/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a59f3db4a4174d02256be51e9e08e9c68478a41/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=1a59f3db4a4174d02256be51e9e08e9c68478a41", "patch": "@@ -1,3 +1,20 @@\n+2020-06-05  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\t* oacc-mem.c (goacc_exit_data_internal) <GOMP_MAP_STRUCT>: Explain\n+\tspecial handling.\n+\n+2020-06-05  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\n+\t* oacc-mem.c (goacc_exit_data_internal) <GOMP_MAP_STRUCT>:\n+\tSimplify.\n+\n+2020-06-05  Julian Brown  <julian@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/struct-copyout-1.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/struct-copyout-2.c: New test.\n+\n 2020-06-04  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* oacc-mem.c (goacc_exit_data_internal) <GOMP_MAP_STRUCT>:"}]}