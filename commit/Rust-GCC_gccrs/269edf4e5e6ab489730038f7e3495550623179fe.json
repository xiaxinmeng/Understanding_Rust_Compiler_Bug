{"sha": "269edf4e5e6ab489730038f7e3495550623179fe", "node_id": "C_kwDOANBUbNoAKDI2OWVkZjRlNWU2YWI0ODk3MzAwMzhmN2UzNDk1NTUwNjIzMTc5ZmU", "commit": {"author": {"name": "Cui,Lili", "email": "lili.cui@intel.com", "date": "2022-06-08T03:25:57Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-06-09T06:59:44Z"}, "message": "Update {skylake,icelake,alderlake}_cost to add a bit preference to vector store.\n\nSince the interger vector construction cost has changed, we need to adjust the\nload and store costs for intel processers.\n\nWith the patch applied\n538.imagic_r:gets ~6% improvement on ADL for multicopy.\n525.x264_r  :gets ~2% improvement on ADL and ICX for multicopy.\nwith no measurable changes for other benchmarks.\n\ngcc/ChangeLog\n\n\tPR target/105493\n\t* config/i386/x86-tune-costs.h (skylake_cost): Raise the gpr load cost\n\tfrom 4 to 6 and gpr store cost from 6 to 8. Change SSE loads and\n\tunaligned loads cost from {6, 6, 6, 10, 20} to {8, 8, 8, 8, 16}.\n\t(icelake_cost): Ditto.\n\t(alderlake_cost): Raise the gpr store cost from 6 to 8 and SSE loads,\n\tstores and unaligned stores cost from {6, 6, 6, 10, 15} to\n\t{8, 8, 8, 10, 15}.\n\ngcc/testsuite/\n\n\tPR target/105493\n\t* gcc.target/i386/pr91446.c: Adjust to expect vectorization\n\t* gcc.target/i386/pr99881.c: XFAIL.\n\t* gcc.target/i386/pr105493.c: New.\n\t* g++.target/i386/pr105638.C: Use other sequence checks\n\tinstead of vpxor, because code generation changed.", "tree": {"sha": "2a0dc0b8c5bddaa0aa9bf0c6a1f5748c3a0c1d00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a0dc0b8c5bddaa0aa9bf0c6a1f5748c3a0c1d00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/269edf4e5e6ab489730038f7e3495550623179fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/269edf4e5e6ab489730038f7e3495550623179fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/269edf4e5e6ab489730038f7e3495550623179fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/269edf4e5e6ab489730038f7e3495550623179fe/comments", "author": {"login": "cuilili8868", "id": 54013017, "node_id": "MDQ6VXNlcjU0MDEzMDE3", "avatar_url": "https://avatars.githubusercontent.com/u/54013017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuilili8868", "html_url": "https://github.com/cuilili8868", "followers_url": "https://api.github.com/users/cuilili8868/followers", "following_url": "https://api.github.com/users/cuilili8868/following{/other_user}", "gists_url": "https://api.github.com/users/cuilili8868/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuilili8868/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuilili8868/subscriptions", "organizations_url": "https://api.github.com/users/cuilili8868/orgs", "repos_url": "https://api.github.com/users/cuilili8868/repos", "events_url": "https://api.github.com/users/cuilili8868/events{/privacy}", "received_events_url": "https://api.github.com/users/cuilili8868/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc6e3d55f6080da3a43243f595bd1266595127d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fc6e3d55f6080da3a43243f595bd1266595127d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fc6e3d55f6080da3a43243f595bd1266595127d"}], "stats": {"total": 84, "additions": 68, "deletions": 16}, "files": [{"sha": "6c9066c84cc3b43c71ec8d92f1f852fe8d7c201a", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269edf4e5e6ab489730038f7e3495550623179fe/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269edf4e5e6ab489730038f7e3495550623179fe/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=269edf4e5e6ab489730038f7e3495550623179fe", "patch": "@@ -1897,15 +1897,15 @@ struct processor_costs skylake_cost = {\n   8,\t\t\t\t\t/* \"large\" insn */\n   17,\t\t\t\t\t/* MOVE_RATIO */\n   17,\t\t\t\t\t/* CLEAR_RATIO */\n-  {4, 4, 4},\t\t\t\t/* cost of loading integer registers\n+  {6, 6, 6},\t\t\t\t/* cost of loading integer registers\n \t\t\t\t\t   in QImode, HImode and SImode.\n \t\t\t\t\t   Relative to reg-reg move (2).  */\n-  {6, 6, 6},\t\t\t\t/* cost of storing integer registers */\n-  {6, 6, 6, 10, 20},\t\t\t/* cost of loading SSE register\n+  {8, 8, 8},\t\t\t\t/* cost of storing integer registers */\n+  {8, 8, 8, 8, 16},\t\t\t/* cost of loading SSE register\n \t\t\t\t\t   in 32bit, 64bit, 128bit, 256bit and 512bit */\n   {8, 8, 8, 8, 16},\t\t\t/* cost of storing SSE register\n \t\t\t\t\t   in 32bit, 64bit, 128bit, 256bit and 512bit */\n-  {6, 6, 6, 10, 20},\t\t\t/* cost of unaligned loads.  */\n+  {8, 8, 8, 8, 16},\t\t\t/* cost of unaligned loads.  */\n   {8, 8, 8, 8, 16},\t\t\t/* cost of unaligned stores.  */\n   2, 2, 4,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n@@ -2023,15 +2023,15 @@ struct processor_costs icelake_cost = {\n   8,\t\t\t\t\t/* \"large\" insn */\n   17,\t\t\t\t\t/* MOVE_RATIO */\n   17,\t\t\t\t\t/* CLEAR_RATIO */\n-  {4, 4, 4},\t\t\t\t/* cost of loading integer registers\n+  {6, 6, 6},\t\t\t\t/* cost of loading integer registers\n \t\t\t\t\t   in QImode, HImode and SImode.\n \t\t\t\t\t   Relative to reg-reg move (2).  */\n-  {6, 6, 6},\t\t\t\t/* cost of storing integer registers */\n-  {6, 6, 6, 10, 20},\t\t\t/* cost of loading SSE register\n+  {8, 8, 8},\t\t\t\t/* cost of storing integer registers */\n+  {8, 8, 8, 8, 16},\t\t\t/* cost of loading SSE register\n \t\t\t\t\t   in 32bit, 64bit, 128bit, 256bit and 512bit */\n   {8, 8, 8, 8, 16},\t\t\t/* cost of storing SSE register\n \t\t\t\t\t   in 32bit, 64bit, 128bit, 256bit and 512bit */\n-  {6, 6, 6, 10, 20},\t\t\t/* cost of unaligned loads.  */\n+  {8, 8, 8, 8, 16},\t\t\t/* cost of unaligned loads.  */\n   {8, 8, 8, 8, 16},\t\t\t/* cost of unaligned stores.  */\n   2, 2, 4,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n@@ -2146,13 +2146,13 @@ struct processor_costs alderlake_cost = {\n   {6, 6, 6},\t\t\t\t/* cost of loading integer registers\n \t\t\t\t\t   in QImode, HImode and SImode.\n \t\t\t\t\t   Relative to reg-reg move (2).  */\n-  {6, 6, 6},\t\t\t\t/* cost of storing integer registers */\n-  {6, 6, 6, 10, 15},\t\t\t/* cost of loading SSE register\n+  {8, 8, 8},\t\t\t\t/* cost of storing integer registers */\n+  {8, 8, 8, 10, 15},\t\t\t/* cost of loading SSE register\n \t\t\t\t\t   in 32bit, 64bit, 128bit, 256bit and 512bit */\n-  {6, 6, 6, 10, 15},\t\t\t/* cost of storing SSE register\n+  {8, 8, 8, 10, 15},\t\t\t/* cost of storing SSE register\n \t\t\t\t\t   in 32bit, 64bit, 128bit, 256bit and 512bit */\n-  {6, 6, 6, 10, 15},\t\t\t/* cost of unaligned loads.  */\n-  {6, 6, 6, 10, 15},\t\t\t/* cost of unaligned storess.  */\n+  {8, 8, 8, 10, 15},\t\t\t/* cost of unaligned loads.  */\n+  {8, 8, 8, 10, 15},\t\t\t/* cost of unaligned storess.  */\n   2, 3, 4,\t\t\t\t/* cost of moving XMM,YMM,ZMM register */\n   6,\t\t\t\t\t/* cost of moving SSE register to integer.  */\n   18, 6,\t\t\t\t/* Gather load static, per_elt.  */"}, {"sha": "c8770933b7c15530265c2d619f29fe18e8945aef", "filename": "gcc/testsuite/g++.target/i386/pr105638.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269edf4e5e6ab489730038f7e3495550623179fe/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr105638.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269edf4e5e6ab489730038f7e3495550623179fe/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr105638.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr105638.C?ref=269edf4e5e6ab489730038f7e3495550623179fe", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-std=gnu++20 -O2 -march=skylake\" } */\n-/* { dg-final { scan-assembler-not \"vpxor\" } } */\n+/* { dg-final { scan-assembler-not \"call\\[\\\\t \\]_?memset\\[\\r\\n\\]\\[^\\r\\n\\]movq\\[\\\\t \\]%\\[a-z0-9]*, %\\[a-z0-9]*\\[\\r\\n\\]\\[^\\r\\n\\]vpxor\\[\\\\t \\]%xmm0, %xmm0, %xmm0\\[\\r\\n\\]\\[^\\r\\n\\]vmovdqu\\[\\\\t \\]%xmm0, 36\\\\(%rax\\\\)\" } } */\n+\n \n #include <stdint.h>\n #include <vector>"}, {"sha": "c6fd16753cd90093f682a7fe47899109c69914c7", "filename": "gcc/testsuite/gcc.target/i386/pr105493.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269edf4e5e6ab489730038f7e3495550623179fe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105493.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269edf4e5e6ab489730038f7e3495550623179fe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105493.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105493.c?ref=269edf4e5e6ab489730038f7e3495550623179fe", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-Ofast -march=icelake-server -fdump-tree-slp-details\" } */\n+\n+typedef unsigned char uint8_t;\n+typedef unsigned int uint32_t;\n+typedef unsigned short uint16_t;\n+\n+static inline\n+uint32_t abs2 ( uint32_t a )\n+{\n+    uint32_t s = ((a>>15)&0x10001)*0xffff;\n+    return (a+s)^s;\n+}\n+\n+#define HADAMARD4(d0, d1, d2, d3, s0, s1, s2, s3) {\\\n+    int t0 = s0 + s1;\\\n+    int t1 = s0 - s1;\\\n+    int t2 = s2 + s3;\\\n+    int t3 = s2 - s3;\\\n+    d0 = t0 + t2;\\\n+    d2 = t0 - t2;\\\n+    d1 = t1 + t3;\\\n+    d3 = t1 - t3;\\\n+}\n+\n+int\n+foo ( uint8_t *pix1, int i_pix1, uint8_t *pix2, int i_pix2 )\n+{\n+    uint32_t tmp[4][4];\n+    uint32_t a0, a1, a2, a3;\n+    int sum = 0;\n+    for( int i = 0; i < 4; i++, pix1 += i_pix1, pix2 += i_pix2 )\n+    {\n+        a0 = (pix1[0] - pix2[0]) + ((pix1[4] - pix2[4]) << 16);\n+        a1 = (pix1[1] - pix2[1]) + ((pix1[5] - pix2[5]) << 16);\n+        a2 = (pix1[2] - pix2[2]) + ((pix1[6] - pix2[6]) << 16);\n+        a3 = (pix1[3] - pix2[3]) + ((pix1[7] - pix2[7]) << 16);\n+        HADAMARD4( tmp[i][0], tmp[i][1], tmp[i][2], tmp[i][3], a0,a1,a2,a3 );\n+    }\n+    for( int i = 0; i < 4; i++ )\n+    {\n+        HADAMARD4( a0, a1, a2, a3, tmp[0][i], tmp[1][i], tmp[2][i], tmp[3][i] );\n+        sum += abs2(a0) + abs2(a1) + abs2(a2) + abs2(a3);\n+    }\n+    return (((uint16_t)sum) + ((uint32_t)sum>>16)) >> 1;\n+}\n+\n+\n+/* The first loop should be vectorized, which will eliminate redundant stores\n+   and loads.  */\n+/* { dg-final { scan-tree-dump-times \"  MEM <vector\\\\\\(4\\\\\\) unsigned int> \\\\\\[\\[\\^\\]\\]\\*\\\\\\] = \" 4 \"slp1\" } } */"}, {"sha": "0243ca3ea68f7c995bb93fa2c02f3564ede21cb6", "filename": "gcc/testsuite/gcc.target/i386/pr91446.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269edf4e5e6ab489730038f7e3495550623179fe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91446.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269edf4e5e6ab489730038f7e3495550623179fe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91446.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr91446.c?ref=269edf4e5e6ab489730038f7e3495550623179fe", "patch": "@@ -21,4 +21,4 @@ foo (unsigned long long width, unsigned long long height,\n   bar (&t);\n }\n \n-/* { dg-final { scan-assembler-times \"xmm\\[0-9\\]\" 0 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqa\\[^\\n\\r\\]*xmm\\[0-9\\]\" 2 } } */"}, {"sha": "3e087eb2ed7f579b462d14ae4c48de71c1cbda8f", "filename": "gcc/testsuite/gcc.target/i386/pr99881.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/269edf4e5e6ab489730038f7e3495550623179fe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99881.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/269edf4e5e6ab489730038f7e3495550623179fe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99881.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99881.c?ref=269edf4e5e6ab489730038f7e3495550623179fe", "patch": "@@ -1,7 +1,7 @@\n /* PR target/99881.  */\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-Ofast -march=skylake\" } */\n-/* { dg-final { scan-assembler-not \"xmm\\[0-9\\]\" } } */\n+/* { dg-final { scan-assembler-not \"xmm\\[0-9\\]\" { xfail *-*-* } } } */\n \n void\n foo (int* __restrict a, int n, int c)"}]}