{"sha": "b6d2248c7e8bffa8f8dde30d7f1700ea920dcded", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZkMjI0OGM3ZThiZmZhOGY4ZGRlMzBkN2YxNzAwZWE5MjBkY2RlZA==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2005-04-02T10:46:03Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2005-04-02T10:46:03Z"}, "message": "predicates.md (indexed_or_indirect_operand): New.\n\n\t* config/rs6000/predicates.md (indexed_or_indirect_operand): New.\n\t(word_offset_memref_operand): New.\n\t* config/rs6000/rs6000-protos.h (word_offset_memref_operand): Delete.\n\t(indexed_or_indirect_operand): Delete.\n\t* config/rs6000/rs6000.c (word_offset_memref_operand): Delete.\n\t(indexed_or_indirect_operand): Delete.\n\nFrom-SVN: r97437", "tree": {"sha": "84a16e9389fa0fcf108a31b17a4b672b7c74309e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84a16e9389fa0fcf108a31b17a4b672b7c74309e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6d2248c7e8bffa8f8dde30d7f1700ea920dcded", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d2248c7e8bffa8f8dde30d7f1700ea920dcded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6d2248c7e8bffa8f8dde30d7f1700ea920dcded", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6d2248c7e8bffa8f8dde30d7f1700ea920dcded/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "807ecedf01fe2ed9c58af863cddc43dfedeeb8fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807ecedf01fe2ed9c58af863cddc43dfedeeb8fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/807ecedf01fe2ed9c58af863cddc43dfedeeb8fe"}], "stats": {"total": 65, "additions": 23, "deletions": 42}, "files": [{"sha": "0b9f371a2bbd249aedf4ec8db03d0d47de3201af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d2248c7e8bffa8f8dde30d7f1700ea920dcded/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d2248c7e8bffa8f8dde30d7f1700ea920dcded/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6d2248c7e8bffa8f8dde30d7f1700ea920dcded", "patch": "@@ -1,5 +1,12 @@\n 2005-04-02  Geoffrey Keating  <geoffk@apple.com>\n \n+\t* config/rs6000/predicates.md (indexed_or_indirect_operand): New.\n+\t(word_offset_memref_operand): New.\n+\t* config/rs6000/rs6000-protos.h (word_offset_memref_operand): Delete.\n+\t(indexed_or_indirect_operand): Delete.\n+\t* config/rs6000/rs6000.c (word_offset_memref_operand): Delete.\n+\t(indexed_or_indirect_operand): Delete.\n+\n \t* config/rs6000/t-darwin8: Comment out ppc64 multilib.\n \n \tPR 20650"}, {"sha": "b8757a1fe6aedae634f66a8ee1bfcac30b073f84", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d2248c7e8bffa8f8dde30d7f1700ea920dcded/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d2248c7e8bffa8f8dde30d7f1700ea920dcded/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=b6d2248c7e8bffa8f8dde30d7f1700ea920dcded", "patch": "@@ -358,6 +358,22 @@\n \t\t\t\t\t   || reload_in_progress,\n \t\t\t\t\t   mode, XEXP (op, 0))\")))\n \n+;; Return 1 if the operand is an indexed or indirect memory operand.\n+(define_predicate \"indexed_or_indirect_operand\"\n+  (and (match_operand 0 \"memory_operand\")\n+       (match_test \"REG_P (XEXP (op, 0))\n+\t\t    || (GET_CODE (XEXP (op, 0)) == PLUS\n+\t\t\t&& REG_P (XEXP (XEXP (op, 0), 0)) \n+\t\t\t&& REG_P (XEXP (XEXP (op, 0), 1)))\")))\n+\n+;; Return 1 if the operand is a memory operand with an address divisible by 4\n+(define_predicate \"word_offset_memref_operand\"\n+  (and (match_operand 0 \"memory_operand\")\n+       (match_test \"GET_CODE (XEXP (op, 0)) != PLUS\n+\t\t    || ! REG_P (XEXP (XEXP (op, 0), 0)) \n+\t\t    || GET_CODE (XEXP (XEXP (op, 0), 1)) != CONST_INT\n+\t\t    || INTVAL (XEXP (XEXP (op, 0), 1)) % 4 == 0\")))\n+\n ;; Return 1 if the operand is either a non-special register or can be used\n ;; as the operand of a `mode' add insn.\n (define_predicate \"add_operand\""}, {"sha": "72c205bba366e2620f934419e06228af307c9181", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d2248c7e8bffa8f8dde30d7f1700ea920dcded/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d2248c7e8bffa8f8dde30d7f1700ea920dcded/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=b6d2248c7e8bffa8f8dde30d7f1700ea920dcded", "patch": "@@ -48,8 +48,6 @@ extern bool rs6000_legitimate_offset_address_p (enum machine_mode, rtx, int);\n \n extern rtx rs6000_got_register (rtx);\n extern rtx find_addr_reg (rtx);\n-extern int word_offset_memref_operand (rtx, enum machine_mode);\n-extern int indexed_or_indirect_operand (rtx, enum machine_mode);\n extern rtx gen_easy_vector_constant_add_self (rtx);\n extern const char *output_vec_const_move (rtx *);\n extern void build_mask64_2_operands (rtx, rtx *);"}, {"sha": "d7328439bf59d206398b3c53e35b9529b704a903", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6d2248c7e8bffa8f8dde30d7f1700ea920dcded/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6d2248c7e8bffa8f8dde30d7f1700ea920dcded/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b6d2248c7e8bffa8f8dde30d7f1700ea920dcded", "patch": "@@ -2276,46 +2276,6 @@ small_data_operand (rtx op ATTRIBUTE_UNUSED,\n #endif\n }\n \n-/* Return true, if operand is a memory operand and has a\n-   displacement divisible by 4.  */\n-\n-int\n-word_offset_memref_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  rtx addr;\n-  int off = 0;\n-\n-  if (!memory_operand (op, mode))\n-    return 0;\n-\n-  addr = XEXP (op, 0);\n-  if (GET_CODE (addr) == PLUS\n-      && GET_CODE (XEXP (addr, 0)) == REG\n-      && GET_CODE (XEXP (addr, 1)) == CONST_INT)\n-    off = INTVAL (XEXP (addr, 1));\n-\n-  return (off % 4) == 0;\n-}\n-\n-/* Return true if the operand is an indirect or indexed memory operand.  */\n-\n-int\n-indexed_or_indirect_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n-{\n-  rtx addr;\n-  if (!memory_operand (op, mode))\n-    return 0;\n-\n-  addr = XEXP (op, 0);\n-  if (GET_CODE (addr) == REG)\n-    return 1;\n-  if (GET_CODE (addr) == PLUS\n-      && GET_CODE (XEXP (addr, 0)) == REG\n-      && GET_CODE (XEXP (addr, 1)) == REG)\n-    return 1;\n-  return 0;\n-}\n-\n /* Return true if either operand is a general purpose register.  */\n \n bool"}]}