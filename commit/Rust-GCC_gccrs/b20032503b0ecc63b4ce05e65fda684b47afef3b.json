{"sha": "b20032503b0ecc63b4ce05e65fda684b47afef3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIwMDMyNTAzYjBlY2M2M2I0Y2UwNWU2NWZkYTY4NGI0N2FmZWYzYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-03T04:23:21Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-03T04:23:21Z"}, "message": "varasm.c (make_decl_rtl): Remove call to REDO_SECTION_INFO_P; invoke ENCODE_SECTION_INFO with first call flag.\n\n\t* varasm.c (make_decl_rtl): Remove call to REDO_SECTION_INFO_P;\n\tinvoke ENCODE_SECTION_INFO with first call flag.\n\n\t* config/darwin-protos.h, config/darwin.c, config/darwin.h,\n\tconfig/a29k/a29k.h, config/alpha/alpha-protos.h, config/alpha/alpha.c,\n\tconfig/alpha/alpha.h, config/arc/arc.h, config/arm/arm-protos.h,\n\tconfig/arm/arm.h, config/arm/pe.c, config/arm/pe.h,\n\tconfig/avr/avr-protos.h, config/avr/avr.c, config/avr/avr.h,\n\tconfig/c4x/c4x-protos.h, config/c4x/c4x.c, config/c4x/c4x.h,\n\tconfig/cris/cris-protos.h, config/cris/cris.c, config/cris/cris.h,\n\tconfig/d30v/d30v.h, config/h8300/h8300.h, config/i370/i370.h,\n\tconfig/i386/cygwin.h, config/i386/i386-interix.h, config/i386/i386.h,\n\tconfig/i386/osfrose.h, config/i386/win32.h, config/i386/winnt.c,\n\tconfig/ia64/ia64-protos.h, config/ia64/ia64.c, config/ia64/ia64.h,\n\tconfig/m32r/m32r-protos.h, config/m32r/m32r.c, config/m32r/m32r.h,\n\tconfig/m68hc11/m68hc11-protos.h, config/m68hc11/m68hc11.c,\n\tconfig/m68hc11/m68hc11.h, config/m88k/m88k.h,\n\tconfig/mcore/mcore-protos.h, config/mcore/mcore.c,\n\tconfig/mcore/mcore.h, config/mips/mips.h, config/ns32k/ns32k.h,\n\tconfig/pa/pa.h, config/romp/romp.h, config/rs6000/linux64.h,\n\tconfig/rs6000/rs6000-protos.h, config/rs6000/rs6000.c,\n\tconfig/rs6000/sysv4.h, config/rs6000/xcoff.h, config/s390/s390.h,\n\tconfig/sh/sh.h, config/sparc/sparc.h,\n\tconfig/stormy16/stormy16-protos.h, config/stormy16/stormy16.c,\n\tconfig/stormy16/stormy16.h, config/v850/v850.h, config/vax/vms.h,\n\tconfig/xtensa/xtensa.h, doc/tm.texi: ENCODE_SECTION_INFO now takes\n\tFIRST argument.  As needed, examine it and do nothing.\n\n\t* config/darwin.h, config/alpha/alpha.h, config/arm/pe.h,\n\tconfig/i386/cygwin.h, config/ia64/ia64.h, config/m68hc11/m68hc11.h,\n\tconfig/mcore/mcore.h: Remove REDO_SECTION_INFO_P.\n\n\t* config/arm/t-pe (pe.o): Add dependencies.\n\nFrom-SVN: r50236", "tree": {"sha": "0c4d8b48d85a563b3f4acbe81debdbebc7911eac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c4d8b48d85a563b3f4acbe81debdbebc7911eac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b20032503b0ecc63b4ce05e65fda684b47afef3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20032503b0ecc63b4ce05e65fda684b47afef3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20032503b0ecc63b4ce05e65fda684b47afef3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20032503b0ecc63b4ce05e65fda684b47afef3b/comments", "author": null, "committer": null, "parents": [{"sha": "5c60f03d436955a225fd4e255af691f5782232f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c60f03d436955a225fd4e255af691f5782232f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c60f03d436955a225fd4e255af691f5782232f4"}], "stats": {"total": 442, "additions": 225, "deletions": 217}, "files": [{"sha": "85872bbdc1af2e43a54708190a1a7a3c3103a3e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1,3 +1,39 @@\n+2002-03-02  Richard Henderson  <rth@redhat.com>\n+\n+\t* varasm.c (make_decl_rtl): Remove call to REDO_SECTION_INFO_P;\n+\tinvoke ENCODE_SECTION_INFO with first call flag.\n+\n+\t* config/darwin-protos.h, config/darwin.c, config/darwin.h,\n+\tconfig/a29k/a29k.h, config/alpha/alpha-protos.h, config/alpha/alpha.c,\n+\tconfig/alpha/alpha.h, config/arc/arc.h, config/arm/arm-protos.h, \n+\tconfig/arm/arm.h, config/arm/pe.c, config/arm/pe.h,\n+\tconfig/avr/avr-protos.h, config/avr/avr.c, config/avr/avr.h,\n+\tconfig/c4x/c4x-protos.h, config/c4x/c4x.c, config/c4x/c4x.h,\n+\tconfig/cris/cris-protos.h, config/cris/cris.c, config/cris/cris.h,\n+\tconfig/d30v/d30v.h, config/h8300/h8300.h, config/i370/i370.h,\n+\tconfig/i386/cygwin.h, config/i386/i386-interix.h, config/i386/i386.h,\n+\tconfig/i386/osfrose.h, config/i386/win32.h, config/i386/winnt.c,\n+\tconfig/ia64/ia64-protos.h, config/ia64/ia64.c, config/ia64/ia64.h,\n+\tconfig/m32r/m32r-protos.h, config/m32r/m32r.c, config/m32r/m32r.h,\n+\tconfig/m68hc11/m68hc11-protos.h, config/m68hc11/m68hc11.c, \n+\tconfig/m68hc11/m68hc11.h, config/m88k/m88k.h, \n+\tconfig/mcore/mcore-protos.h, config/mcore/mcore.c,\n+\tconfig/mcore/mcore.h, config/mips/mips.h, config/ns32k/ns32k.h,\n+\tconfig/pa/pa.h, config/romp/romp.h, config/rs6000/linux64.h,\n+\tconfig/rs6000/rs6000-protos.h, config/rs6000/rs6000.c, \n+\tconfig/rs6000/sysv4.h, config/rs6000/xcoff.h, config/s390/s390.h,\n+\tconfig/sh/sh.h, config/sparc/sparc.h,\n+\tconfig/stormy16/stormy16-protos.h, config/stormy16/stormy16.c,\n+\tconfig/stormy16/stormy16.h, config/v850/v850.h, config/vax/vms.h,\n+\tconfig/xtensa/xtensa.h, doc/tm.texi: ENCODE_SECTION_INFO now takes\n+\tFIRST argument.  As needed, examine it and do nothing.\n+\n+\t* config/darwin.h, config/alpha/alpha.h, config/arm/pe.h, \n+\tconfig/i386/cygwin.h, config/ia64/ia64.h, config/m68hc11/m68hc11.h,\n+\tconfig/mcore/mcore.h: Remove REDO_SECTION_INFO_P.\n+\n+\t* config/arm/t-pe (pe.o): Add dependencies.\n+\n 2002-03-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* a29k.h, alpha.h, arc.h, arm.h, avr.h, clipper.h, convex.h,"}, {"sha": "2c98d12a65065afbe54464249d87ed7f3807e9f3", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1366,7 +1366,7 @@ literal_section ()\t\t\t\t\t\t\\\n    that we can branch to this function without emitting a no-op after the\n    call.  */\n \n-#define ENCODE_SECTION_INFO(DECL)  \\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)  \\\n   if (TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n       && (TREE_ASM_WRITTEN (DECL) || ! TREE_PUBLIC (DECL))) \\\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;"}, {"sha": "0ccdaaa0a1c929e68ab76aa78c12d399421c19d7", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -165,7 +165,7 @@ extern void alpha_start_function PARAMS ((FILE *, const char *, tree));\n extern void alpha_end_function PARAMS ((FILE *, const char *, tree));\n extern void alpha_output_mi_thunk_osf PARAMS ((FILE *, tree,\n \t\t\t\t\t       HOST_WIDE_INT, tree));\n-extern void alpha_encode_section_info PARAMS ((tree));\n+extern void alpha_encode_section_info PARAMS ((tree, int));\n #endif /* TREE CODE */\n \n #ifdef RTX_CODE"}, {"sha": "58753467e4f66c1d5ad5165ada812789d3676aca", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1554,8 +1554,9 @@ decl_in_text_section (decl)\n    then add \"@s\" instead.  */\n \n void\n-alpha_encode_section_info (decl)\n+alpha_encode_section_info (decl, first)\n      tree decl;\n+     int first ATTRIBUTE_UNUSED;\n {\n   const char *symbol_str;\n   bool is_local, is_small;"}, {"sha": "3ea65568d469c60b4efc84c95f14a6bc9935f049", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1797,16 +1797,8 @@ literal_section ()\t\t\t\t\t\t\\\n    depending on something about the variable or function named by the symbol\n    (such as what section it is in).  */\n \n-#define ENCODE_SECTION_INFO(DECL)  alpha_encode_section_info (DECL)\n-\n-/* If a variable is weakened, made one only or moved into a different\n-   section, it may be necessary to redo the section info to move the\n-   variable out of sdata.  */\n-\n-#define REDO_SECTION_INFO_P(DECL)                                       \\\n-   ((TREE_CODE (DECL) == VAR_DECL)                                      \\\n-    && (DECL_ONE_ONLY (DECL) || DECL_WEAK (DECL) || DECL_COMMON (DECL)  \\\n-        || DECL_SECTION_NAME (DECL) != 0))\n+#define ENCODE_SECTION_INFO(DECL, FIRST)  \\\n+  alpha_encode_section_info (DECL, FIRST)\n \n #define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME)\t\\\n do {\t\t\t\t\t\t\\"}, {"sha": "29edf4e95e1fd1a799dd83be0dc89bbeba0a539b", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1139,7 +1139,7 @@ extern const char *arc_text_section, *arc_data_section, *arc_rodata_section;\n    Branch to absolute address insns take an address that is right-shifted\n    by 2.  We encode the fact that we have a function here, and then emit a\n    special assembler op when outputting the address.  */\n-#define ENCODE_SECTION_INFO(DECL) \\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\\\n do {\t\t\t\t\t\t\t\\\n   if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\\"}, {"sha": "036ea44fed5db54340a997e62d4638f00c947dd2", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -185,7 +185,7 @@ extern int  arm_dllimport_name_p \tPARAMS ((const char *));\n \n #ifdef TREE_CODE\n extern void arm_pe_unique_section \tPARAMS ((tree, int));\n-extern void arm_pe_encode_section_info \tPARAMS ((tree));\n+extern void arm_pe_encode_section_info \tPARAMS ((tree, int));\n extern int  arm_dllexport_p \t\tPARAMS ((tree));\n extern int  arm_dllimport_p \t\tPARAMS ((tree));\n extern void arm_mark_dllexport \t\tPARAMS ((tree));"}, {"sha": "853db6da6d8c76e5c4d519a9ddc8f354fdc91330", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1912,7 +1912,7 @@ typedef struct\n /* This doesn't work with AOF syntax, since the string table may be in\n    a different AREA.  */\n #ifndef AOF_ASSEMBLER\n-#define ENCODE_SECTION_INFO(decl)\t\t\t\t\t\\\n+#define ENCODE_SECTION_INFO(decl, first)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (optimize > 0 && TREE_CONSTANT (decl)\t\t\t\t\\\n       && (!flag_writable_strings || TREE_CODE (decl) != STRING_CST))\t\\\n@@ -1921,12 +1921,14 @@ typedef struct\n                  ? TREE_CST_RTL (decl) : DECL_RTL (decl));\t\t\\\n       SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-  ARM_ENCODE_CALL_TYPE (decl)\t\t\t\t\t\t\\\n+  if (first)\t\t\t\t\t\t\t\t\\\n+    ARM_ENCODE_CALL_TYPE (decl)\t\t\t\t\t\t\\\n }\n #else\n-#define ENCODE_SECTION_INFO(decl)\t\t\t\t\t\\\n+#define ENCODE_SECTION_INFO(decl, first)\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  ARM_ENCODE_CALL_TYPE (decl)\t\t\t\t\t\t\\\n+  if (first)\t\t\t\t\t\t\t\t\\\n+    ARM_ENCODE_CALL_TYPE (decl)\t\t\t\t\t\t\\\n }\n #endif\n "}, {"sha": "4069eac1ab2dfa4be930c5235db9016e93d6b15c", "filename": "gcc/config/arm/pe.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Farm%2Fpe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Farm%2Fpe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.c?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -207,8 +207,9 @@ arm_mark_dllimport (decl)\n /* Cover function to implement ENCODE_SECTION_INFO.  */\n \n void\n-arm_pe_encode_section_info (decl)\n+arm_pe_encode_section_info (decl, first)\n      tree decl;\n+     int first ATTRIBUTE_UNUSED;\n {\n   /* This bit is copied from arm.h.  */\n   if (optimize > 0 && TREE_CONSTANT (decl)"}, {"sha": "6c4375de1224d26dba44951028c5604409abc252", "filename": "gcc/config/arm/pe.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Farm%2Fpe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Farm%2Fpe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -102,14 +102,8 @@ Boston, MA 02111-1307, USA.  */\n    section and we need to set DECL_SECTION_NAME so we do that here.\n    Note that we can be called twice on the same decl.  */\n #undef  ENCODE_SECTION_INFO\n-#define ENCODE_SECTION_INFO(DECL) \\\n-  arm_pe_encode_section_info (DECL)\n-\n-/* Used to implement dllexport overriding dllimport semantics.  It's also used\n-   to handle vtables - the first pass won't do anything because\n-   DECL_CONTEXT (DECL) will be 0 so arm_dll{ex,im}port_p will return 0.\n-   It's also used to handle dllimport override semantics.  */\n-#define REDO_SECTION_INFO_P(DECL) 1\n+#define ENCODE_SECTION_INFO(DECL, FIRST) \\\n+  arm_pe_encode_section_info (DECL, FIRST)\n \n /* Define this macro if in some cases global symbols from one translation\n    unit may not be bound to undefined symbols in another translation unit"}, {"sha": "f559bd20cff9ea0c9b0619f36d5e4e745c88e242", "filename": "gcc/config/arm/t-pe", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Farm%2Ft-pe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Farm%2Ft-pe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-pe?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -20,7 +20,8 @@ dp-bit.c: $(srcdir)/config/fp-bit.c\n \techo '#endif' >> dp-bit.c\n \tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n \n-pe.o: $(srcdir)/config/arm/pe.c\n+pe.o: $(srcdir)/config/arm/pe.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) output.h \\\n+   flags.h $(TREE_H) $(EXPR_H) toplev.h $(TM_P_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/config/arm/pe.c\n \n MULTILIB_OPTIONS = mhard-float mthumb"}, {"sha": "966a0cb28a4f1437beb6e9de268d5ef8e79a0490", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -44,7 +44,7 @@ extern void   gas_output_ascii          PARAMS ((FILE *file, const char *str,\n extern void   asm_output_external          PARAMS ((FILE *file, tree decl,\n \t\t\t\t\t\t   char *name));\n extern void   unique_section               PARAMS ((tree decl, int reloc));\n-extern void   encode_section_info          PARAMS ((tree decl));\n+extern void   encode_section_info          PARAMS ((tree decl, int));\n extern int    avr_progmem_p                PARAMS ((tree decl));\n \n "}, {"sha": "30ea833c751f11844402c4831012581f20069fa1", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -4741,12 +4741,14 @@ avr_progmem_p (decl)\n /* Encode section information about tree DECL */\n   \n void\n-encode_section_info (decl)\n+encode_section_info (decl, first)\n      tree decl;\n+     int first;\n {\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n-  else if ((TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n+  else if (first\n+\t   && (TREE_STATIC (decl) || DECL_EXTERNAL (decl))\n \t   && TREE_CODE (decl) == VAR_DECL\n \t   && avr_progmem_p (decl))\n     {"}, {"sha": "9b5b35f87405af7eeabf309c50b38ae60b3adf60", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1830,7 +1830,7 @@ progmem_section (void)\t\t\t\t\t\t\t      \\\n    This macro is irrelevant if there is no separate readonly data\n    section.  */\n \n-#define ENCODE_SECTION_INFO(DECL)  encode_section_info(DECL)\n+#define ENCODE_SECTION_INFO(DECL, FIRST)  encode_section_info(DECL, FIRST)\n /* Define this macro if references to a symbol must be treated\n    differently depending on something about the variable or function\n    named by the symbol (such as what section it is in)."}, {"sha": "d24a1f1bce4bc025e52058e48c153a7eb405b853", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -53,7 +53,7 @@ extern struct rtx_def *c4x_function_arg PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t\t enum machine_mode, tree,\n \t\t\t\t\t\t int));\n \n-extern void c4x_encode_section_info PARAMS ((tree));\n+extern void c4x_encode_section_info PARAMS ((tree, int));\n \n #endif /* TREE_CODE */\n "}, {"sha": "6743990bede00225ff2cb593ce840ba32a6b581b", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1479,16 +1479,12 @@ c4x_emit_libcall_mulhi (libcall, code, mode, operands)\n /* Set the SYMBOL_REF_FLAG for a function decl.  However, wo do not\n    yet use this info.  */\n void\n-c4x_encode_section_info (decl)\n-  tree decl;\n+c4x_encode_section_info (decl, first)\n+     tree decl;\n+     int first ATTRIBUTE_UNUSED;\n {\n-#if 0\n-  if (TREE_CODE (TREE_TYPE (decl)) == FUNCTION_TYPE)   \n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n-#else\n   if (TREE_CODE (decl) == FUNCTION_DECL)   \n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n-#endif\n }\n \n "}, {"sha": "ffa888e4e1a60315ec82748ded69bed35a776283", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1540,7 +1540,7 @@ CUMULATIVE_ARGS;\n    On the C4x we use this to indicate if a symbol is in text or\n    data space.  */\n \n-#define ENCODE_SECTION_INFO(DECL) c4x_encode_section_info (DECL);\n+#define ENCODE_SECTION_INFO(DECL, FIRST) c4x_encode_section_info (DECL, FIRST);\n \n /* Descripting Relative Cost of Operations.  */\n "}, {"sha": "f5e9f76c7e219adeea0bb2c7153c2c32a040e7cd", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -49,7 +49,7 @@ extern void cris_target_asm_named_section\n \n # ifdef TREE_CODE\n extern rtx cris_expand_builtin_va_arg PARAMS ((tree, tree));\n-extern void cris_encode_section_info PARAMS ((tree));\n+extern void cris_encode_section_info PARAMS ((tree, int));\n # endif\n #endif /* RTX_CODE */\n "}, {"sha": "72fc6b3acddf1cb8a0abeb21ec04498f09826903", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -2999,8 +2999,9 @@ cris_output_addr_const (file, x)\n    functions.  */\n \n void\n-cris_encode_section_info (exp)\n+cris_encode_section_info (exp, first)\n      tree exp;\n+     int first ATTRIBUTE_UNUSED;\n {\n   if (flag_pic)\n     {"}, {"sha": "e1d7007ccd5cee354f9fabc270bf24051ed99952", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1446,7 +1446,7 @@ struct cum_args {int regs;};\n \n /* We need to code in PIC-specific flags into SYMBOL_REF_FLAG.  */\n \n-#define ENCODE_SECTION_INFO(EXP) cris_encode_section_info (EXP)\n+#define ENCODE_SECTION_INFO(EXP, FIRST) cris_encode_section_info (EXP, FIRST)\n \n /* We pull a little trick to register the _fini function with atexit,\n    after (presumably) registering the eh frame info, since we don't handle"}, {"sha": "aa4f7187d15523404ef0aa3ccffd3acd0b1c4b8c", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -2794,19 +2794,6 @@ extern const char *d30v_branch_cost_string;\n    This macro is irrelevant if there is no separate readonly data section.  */\n /* #define JUMP_TABLES_IN_TEXT_SECTION */\n \n-/* Define this macro if references to a symbol must be treated differently\n-   depending on something about the variable or function named by the symbol\n-   (such as what section it is in).\n-\n-   The macro definition, if any, is executed immediately after the rtl for DECL\n-   has been created and stored in `DECL_RTL (DECL)'.  The value of the rtl will\n-   be a `mem' whose address is a `symbol_ref'.\n-\n-   The usual thing for this macro to do is to record a flag in the `symbol_ref'\n-   (such as `SYMBOL_REF_FLAG') or to store a modified name string in the\n-   `symbol_ref' (if one bit is not enough information).  */\n-/* #define ENCODE_SECTION_INFO(DECL) */\n-\n /* Decode SYM_NAME and store the real name part in VAR, sans the characters\n    that encode section info.  Define this macro if `ENCODE_SECTION_INFO' alters\n    the symbol's name string.  */"}, {"sha": "5a93ca6515184f9dd1e7a317ba4a34e9dfdea089", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -58,7 +58,7 @@ extern void machopic_define_ident PARAMS ((tree));\n extern void machopic_define_name PARAMS ((const char*));\n extern int machopic_name_defined_p PARAMS ((const char*));\n extern int machopic_ident_defined_p PARAMS ((tree));\n-extern void darwin_encode_section_info PARAMS ((tree));\n+extern void darwin_encode_section_info PARAMS ((tree, int));\n \n #endif /* TREE_CODE */\n "}, {"sha": "f5e9db0e315462370c68bf6f92c1af9b61f09448", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -952,8 +952,9 @@ machopic_operand_p (op)\n    use later.  */\n \n void\n-darwin_encode_section_info (decl)\n+darwin_encode_section_info (decl, first)\n      tree decl;\n+     int first ATTRIBUTE_UNUSED;\n {\n   char code = '\\0';\n   int defined = 0;"}, {"sha": "c5a078b025e50a655296a23f837d63f6da97a6c9", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -208,7 +208,7 @@ do { text_section ();\t\t\t\t\t\t\t\\\n     if ((TREE_STATIC (DECL)                                             \\\n \t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))               \\\n         || DECL_INITIAL (DECL))                                         \\\n-      ENCODE_SECTION_INFO (DECL);  \\\n+      ENCODE_SECTION_INFO (DECL, false);\t\t\t\t\\\n     ASM_OUTPUT_LABEL (FILE, xname);                                     \\\n   } while (0)\n \n@@ -224,7 +224,7 @@ do { text_section ();\t\t\t\t\t\t\t\\\n     if ((TREE_STATIC (DECL)                                             \\\n \t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))               \\\n         || DECL_INITIAL (DECL))                                         \\\n-      ENCODE_SECTION_INFO (DECL);\t\t\t\t\t\\\n+      ENCODE_SECTION_INFO (DECL, false);\t\t\t\t\\\n     ASM_OUTPUT_LABEL (FILE, xname);                                     \\\n     /* Avoid generating stubs for functions we've just defined by\t\\\n        outputting any required stub name label now.  */\t\t\t\\\n@@ -270,19 +270,20 @@ do { text_section ();\t\t\t\t\t\t\t\\\n /* Ensure correct alignment of bss data.  */\n \n #undef\tASM_OUTPUT_ALIGNED_DECL_LOCAL\n-#define ASM_OUTPUT_ALIGNED_DECL_LOCAL(FILE, DECL, NAME, SIZE, ALIGN) \\\n-  do {  \\\n-    fputs (\".lcomm \", (FILE));\t\t\t\t\\\n-    assemble_name ((FILE), (NAME));\t\t\t\\\n-    fprintf ((FILE), \",%u,%u\\n\", (SIZE), floor_log2 ((ALIGN) / BITS_PER_UNIT)); \\\n-    if ((DECL) && ((TREE_STATIC (DECL)                                             \\\n-\t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))               \\\n-        || DECL_INITIAL (DECL)))                                         \\\n-      ENCODE_SECTION_INFO (DECL);  \\\n-    if ((DECL) && ((TREE_STATIC (DECL)                                             \\\n-\t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))               \\\n-        || DECL_INITIAL (DECL)))                                         \\\n-      machopic_define_name (NAME);                                     \\\n+#define ASM_OUTPUT_ALIGNED_DECL_LOCAL(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    fputs (\".lcomm \", (FILE));\t\t\t\t\t\t\\\n+    assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n+    fprintf ((FILE), \",%u,%u\\n\", (SIZE),\t\t\t\t\\\n+\t     floor_log2 ((ALIGN) / BITS_PER_UNIT));\t\t\t\\\n+    if ((DECL) && ((TREE_STATIC (DECL)\t\t\t\t\t\\\n+\t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\t\t\\\n+        || DECL_INITIAL (DECL)))\t\t\t\t\t\\\n+      ENCODE_SECTION_INFO (DECL, false);\t\t\t\t\\\n+    if ((DECL) && ((TREE_STATIC (DECL)\t\t\t\t\t\\\n+\t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\t\t\\\n+        || DECL_INITIAL (DECL)))\t\t\t\t\t\\\n+      machopic_define_name (NAME);\t\t\t\t\t\\\n   } while (0)\n \n /* Output nothing for #ident.  */\n@@ -716,12 +717,8 @@ enum machopic_addr_class {\n #define MACHOPIC_JUST_INDIRECT (flag_pic == 1)\n #define MACHOPIC_PURE          (flag_pic == 2)\n \n-#define ENCODE_SECTION_INFO(DECL)  \\\n-  darwin_encode_section_info (DECL)\n-\n-/* Be conservative and always redo the encoding.  */\n-\n-#define REDO_SECTION_INFO_P(DECL) (1)\n+#define ENCODE_SECTION_INFO(DECL, FIRST) \\\n+  darwin_encode_section_info (DECL, FIRST)\n \n #define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME)  \\\n   ((VAR) = ((SYMBOL_NAME[0] == '!') ? (SYMBOL_NAME) + 4 : (SYMBOL_NAME)))"}, {"sha": "3439453a1e58cb2c4f293803f4b9f220304349ac", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1140,15 +1140,15 @@ readonly_data ()\t\t\t\t\t\t\t\\\n /* If we are referencing a function that is supposed to be called\n    through the function vector, the SYMBOL_REF_FLAG in the rtl\n    so the call patterns can generate the correct code.  */\n-#define ENCODE_SECTION_INFO(DECL)\t\t\t\t\\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\\\n   if (TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\t\\\n       && h8300_funcvec_function_p (DECL))\t\t\t\\\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\t\\\n   else if (TREE_CODE (DECL) == VAR_DECL\t\t\t\t\\\n \t   && (TREE_STATIC (DECL) || DECL_EXTERNAL (DECL))\t\\\n \t   && h8300_eightbit_data_p (DECL))\t\t\t\\\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\t\\\n-  else if (TREE_CODE (DECL) == VAR_DECL\t\t\t\t\\\n+  else if ((FIRST) && TREE_CODE (DECL) == VAR_DECL\t\t\\\n \t   && (TREE_STATIC (DECL) || DECL_EXTERNAL (DECL))\t\\\n \t   && h8300_tiny_data_p (DECL))\t\t\t\t\\\n     h8300_encode_label (DECL);"}, {"sha": "206a94dc89d29a4792c613381f7dea19f5d4f7dd", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -291,7 +291,7 @@ extern int mvs_function_name_length;\n \n /* Mark external references.  */\n \n-#define ENCODE_SECTION_INFO(decl)  \t\t\t\t\t\\\n+#define ENCODE_SECTION_INFO(decl, first)  \t\t\t\t\\\n   if (DECL_EXTERNAL (decl) && TREE_PUBLIC (decl)) \t\t\t\\\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n "}, {"sha": "aa05518ae46b9cdc5d5c01f676c1d1a72bb7acf3", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -189,19 +189,6 @@ Boston, MA 02111-1307, USA.  */\n \n union tree_node;\n #define TREE union tree_node *\n-\n-/* Used to implement dllexport overriding dllimport semantics.  It's also used\n-   to handle vtables - the first pass won't do anything because\n-   DECL_CONTEXT (DECL) will be 0 so i386_pe_dll{ex,im}port_p will return 0.\n-   It's also used to handle dllimport override semantics.  */\n-#if 0\n-#define REDO_SECTION_INFO_P(DECL) \\\n-  ((DECL_ATTRIBUTES (DECL) != NULL_TREE) \\\n-   || (TREE_CODE (DECL) == VAR_DECL && DECL_VIRTUAL_P (DECL)))\n-#else\n-#define REDO_SECTION_INFO_P(DECL) 1\n-#endif\n-\n \f\n #undef EXTRA_SECTIONS\n #define EXTRA_SECTIONS in_drectve\n@@ -277,12 +264,11 @@ do {\t\t\t\t\t\t\t\t\t\\\n    section and we need to set DECL_SECTION_NAME so we do that here.\n    Note that we can be called twice on the same decl.  */\n \n-extern void i386_pe_encode_section_info PARAMS ((TREE));\n+extern void i386_pe_encode_section_info PARAMS ((TREE, int));\n \n-#ifdef ENCODE_SECTION_INFO\n #undef ENCODE_SECTION_INFO\n-#endif\n-#define ENCODE_SECTION_INFO(DECL) i386_pe_encode_section_info (DECL)\n+#define ENCODE_SECTION_INFO(DECL, FIRST) \\\n+  i386_pe_encode_section_info (DECL, FIRST)\n \n /* Utility used only in this file.  */\n #define I386_PE_STRIP_ENCODING(SYM_NAME) \\"}, {"sha": "495d9628351015231288edae4d6180e92aae78eb", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -354,7 +354,7 @@ union tree_node;\n const char *gen_stdcall_suffix PARAMS ((union tree_node *));\n \n #undef ENCODE_SECTION_INFO\n-#define ENCODE_SECTION_INFO(DECL) \t\t\t\t\t\\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\t\\\n do \t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     if (flag_pic)\t\t\t\t\t\t\t\\\n@@ -365,7 +365,7 @@ do \t\t\t\t\t\t\t\t\t\\\n \t  = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\t\\\n \t     || ! TREE_PUBLIC (DECL));\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n-    if (TREE_CODE (DECL) == FUNCTION_DECL) \t\t\t\t\\\n+    if ((FIRST) && TREE_CODE (DECL) == FUNCTION_DECL) \t\t\t\\\n       if (lookup_attribute (\"stdcall\",\t\t\t\t\t\\\n \t\t\t    TYPE_ATTRIBUTES (TREE_TYPE (DECL))))\t\\\n         XEXP (DECL_RTL (DECL), 0) = \t\t\t\t\t\\"}, {"sha": "1a3d9abe58e03944fa97d639539e83c41986e731", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -2244,7 +2244,7 @@ enum ix86_builtins\n    On i386, if using PIC, mark a SYMBOL_REF for a non-global symbol\n    so that we may access it directly in the GOT.  */\n \n-#define ENCODE_SECTION_INFO(DECL)\t\t\t\t\\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n     if (flag_pic)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\\"}, {"sha": "7338191293eba5ca57bd975dc1d79a3247938e19", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -449,21 +449,23 @@ while (0)\n    `PRINT_OPERAND_ADDRESS'.  */\n \n #undef\tENCODE_SECTION_INFO\n-#define ENCODE_SECTION_INFO(DECL)\t\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-   if (HALF_PIC_P ())\t\t\t\t\t\t\t\\\n-      HALF_PIC_ENCODE (DECL);\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-   else if (flag_pic)\t\t\t\t\t\t\t\\\n-     {\t\t\t\t\t\t\t\t\t\\\n-       rtx rtl = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\\\n-\t\t  ? TREE_CST_RTL (DECL) : DECL_RTL (DECL));\t\t\\\n-       SYMBOL_REF_FLAG (XEXP (rtl, 0))\t\t\t\t\t\\\n-\t = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\t\\\n-\t    || ! TREE_PUBLIC (DECL));\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    if (HALF_PIC_P ())\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tif (FIRST)\t\t\t\t\t\t\\\n+\t  HALF_PIC_ENCODE (DECL);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    else if (flag_pic)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\trtx rtl = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\\\n+\t\t   ? TREE_CST_RTL (DECL) : DECL_RTL (DECL));\t\\\n+\tSYMBOL_REF_FLAG (XEXP (rtl, 0))\t\t\t\t\\\n+\t  = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\\\n+\t     || ! TREE_PUBLIC (DECL));\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n while (0)\n \n "}, {"sha": "da1821d877c3d6499706ec0e420219a791274b68", "filename": "gcc/config/i386/win32.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fi386%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fi386%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwin32.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -115,9 +115,8 @@ Boston, MA 02111-1307, USA.  */\n    the number of bytes of arguments passed to the function, if it has the \n    attribute STDCALL.  */\n \n-#ifdef ENCODE_SECTION_INFO\n #undef ENCODE_SECTION_INFO\n-#define ENCODE_SECTION_INFO(DECL) \t\t\t\t\t\\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     if (flag_pic)\t\t\t\t\t\t\t\\\n@@ -128,14 +127,13 @@ do\t\t\t\t\t\t\t\t\t\\\n \t  = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\t\\\n \t     || ! TREE_PUBLIC (DECL));\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n-    if (TREE_CODE (DECL) == FUNCTION_DECL) \t\t\t\t\\\n+    if ((FIRST) && TREE_CODE (DECL) == FUNCTION_DECL) \t\t\t\\\n       if (lookup_attribute (\"stdcall\",\t\t\t\t\t\\\n \t\t\t    TYPE_ATTRIBUTES (TREE_TYPE (DECL))))\t\\\n         XEXP (DECL_RTL (DECL), 0) = \t\t\t\t\t\\\n           gen_rtx (SYMBOL_REF, Pmode, gen_stdcall_suffix (DECL)); \t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n-#endif\n \n /* This macro gets just the user-specified name\n    out of the string in a SYMBOL_REF.  Discard"}, {"sha": "b8bb39e727b1e3c14a0e3488cecf5d58e2177add", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -369,9 +369,13 @@ gen_stdcall_suffix (decl)\n /* Cover function to implement ENCODE_SECTION_INFO.  */\n \n void\n-i386_pe_encode_section_info (decl)\n+i386_pe_encode_section_info (decl, first)\n      tree decl;\n+     int first;\n {\n+  if (!first)\n+    return;\n+\n   /* This bit is copied from i386.h.  */\n   if (optimize > 0 && TREE_CONSTANT (decl)\n       && (!flag_writable_strings || TREE_CODE (decl) != STRING_CST))"}, {"sha": "332b07690b832faebeb9aa8d340d8e695bffe6cf", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -116,7 +116,7 @@ extern void ia64_function_arg_advance PARAMS((CUMULATIVE_ARGS *,\n extern int ia64_return_in_memory PARAMS((tree));\n extern void ia64_asm_output_external PARAMS((FILE *, tree, const char *));\n \n-extern void ia64_encode_section_info PARAMS((tree));\n+extern void ia64_encode_section_info PARAMS((tree, int));\n #endif /* TREE_CODE */\n \n extern int ia64_register_move_cost PARAMS((enum machine_mode, enum reg_class,"}, {"sha": "1c7c5a35876a0700404f7530715c1b19e1118b74", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -6857,8 +6857,9 @@ const struct attribute_spec ia64_attribute_table[] =\n extern struct obstack * saveable_obstack;\n \n void\n-ia64_encode_section_info (decl)\n+ia64_encode_section_info (decl, first)\n      tree decl;\n+     int first ATTRIBUTE_UNUSED;\n {\n   const char *symbol_str;\n "}, {"sha": "50f7982ef32125f7487419023aa36411afef722e", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1764,16 +1764,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    depending on something about the variable or function named by the symbol\n    (such as what section it is in).  */\n \n-#define ENCODE_SECTION_INFO(DECL) ia64_encode_section_info (DECL)\n-\n-/* If a variable is weakened, made one only or moved into a different\n-   section, it may be necessary to redo the section info to move the\n-   variable out of sdata.  */\n-\n-#define REDO_SECTION_INFO_P(DECL)\t\t\t\t\t\\\n-   ((TREE_CODE (DECL) == VAR_DECL)\t\t\t\t\t\\\n-    && (DECL_ONE_ONLY (DECL) || DECL_WEAK (DECL) || DECL_COMMON (DECL)\t\\\n-\t|| DECL_SECTION_NAME (DECL) != 0))\n+#define ENCODE_SECTION_INFO(DECL, FIRST) ia64_encode_section_info (DECL, FIRST)\n \n #define SDATA_NAME_FLAG_CHAR '@'\n "}, {"sha": "86adde0166d0e9825c906bbf1f49f19dcb68b84c", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -34,7 +34,7 @@ extern void   m32r_asm_file_start\t\tPARAMS ((FILE *));\n extern int    direct_return \t\t\tPARAMS ((void));\n #ifdef TREE_CODE\n extern void   m32r_select_section\t\tPARAMS ((tree, int));\n-extern void   m32r_encode_section_info\t\tPARAMS ((tree));\n+extern void   m32r_encode_section_info\t\tPARAMS ((tree, int));\n extern enum m32r_function_type m32r_compute_function_type PARAMS ((tree));\n extern void   m32r_select_section \t\tPARAMS ((tree, int));\n "}, {"sha": "0a985599a3e544c864b384af31361f482d1b8bd3", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -366,12 +366,16 @@ m32r_select_section (decl, reloc)\n */\n \n void\n-m32r_encode_section_info (decl)\n+m32r_encode_section_info (decl, first)\n      tree decl;\n+     int first;\n {\n   char prefix = 0;\n   tree model = 0;\n \n+  if (!first)\n+    return;\n+\n   switch (TREE_CODE (decl))\n     {\n     case VAR_DECL :"}, {"sha": "dcbcfd5322b5426f9844291dcf4231ac17ebd636", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1644,7 +1644,7 @@ sbss_section ()\t\t\t\t\t\t\t\t\\\n  || MEDIUM_NAME_P (SYMBOL_NAME) \\\n  || LARGE_NAME_P (SYMBOL_NAME))\n \n-#define ENCODE_SECTION_INFO(DECL) m32r_encode_section_info (DECL)\n+#define ENCODE_SECTION_INFO(DECL, FIRST) m32r_encode_section_info (DECL, FIRST)\n \n /* Decode SYM_NAME and store the real name part in VAR, sans\n    the characters that encode section info.  Define this macro if"}, {"sha": "bbbb4525f4f36846c96b453ac2339d8fa820b19c", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -41,7 +41,7 @@ extern void m68hc11_function_arg_advance PARAMS((CUMULATIVE_ARGS*,\n                                                  enum machine_mode,\n                                                  tree,\n                                                  int));\n-extern void m68hc11_encode_section_info PARAMS((tree));\n+extern void m68hc11_encode_section_info PARAMS((tree, int));\n #endif\n \n #ifdef RTX_CODE"}, {"sha": "4946c3bb78cb1c19c4def39c852b4bf910917534", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1173,8 +1173,9 @@ m68hc11_handle_fntype_attribute (node, name, args, flags, no_add_attrs)\n    handle calls to traps in a special manner (by issuing the trap).\n    This information is stored in SYMBOL_REF_FLAG.  */\n void\n-m68hc11_encode_section_info (decl)\n+m68hc11_encode_section_info (decl, first)\n      tree decl;\n+     int first ATTRIBUTE_UNUSED;\n {\n   tree func_attr;\n   int trap_handler;"}, {"sha": "6afcf9a2173ac8e180eb9bc42d36c0efaf651f1c", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1146,11 +1146,8 @@ typedef struct m68hc11_args\n    handle calls to traps in a special manner (by issuing the trap).\n    This information is stored in SYMBOL_REF_FLAG.  */\n \n-#define ENCODE_SECTION_INFO(DECL) m68hc11_encode_section_info (DECL)\n-\n-/* Override what GCC does for section info to let us recognize traps.  */\n-\n-#define REDO_SECTION_INFO_P(DECL) 1\n+#define ENCODE_SECTION_INFO(DECL, FIRST) \\\n+  m68hc11_encode_section_info (DECL, FIRST)\n \n /* `INIT_TARGET_OPTABS'\n      Define this macro as a C statement that declares additional library"}, {"sha": "a6da552387fd9c0bf15f212da185f3c36129fe1d", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -2414,7 +2414,7 @@ sdata_section ()\t\t\t\t\t\t\t\\\n    rtl will be a `mem' whose address is a `symbol_ref'.\n \n    For the m88k, determine if the item should go in the global pool.  */\n-#define ENCODE_SECTION_INFO(DECL)\t\t\t\t\t\\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (m88k_gp_threshold > 0)\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "d6f6e2e8a46cf7d42647359cced0a9ccd7a524fd", "filename": "gcc/config/mcore/mcore-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -36,7 +36,7 @@ extern int          mcore_naked_function_p       \tPARAMS ((void));\n \n #ifdef TREE_CODE\n extern void         mcore_unique_section         \tPARAMS ((tree, int));\n-extern void         mcore_encode_section_info    \tPARAMS ((tree));\n+extern void         mcore_encode_section_info    \tPARAMS ((tree, int));\n \n #ifdef HAVE_MACHINE_MODES\n extern int          mcore_function_arg_partial_nregs\tPARAMS ((CUMULATIVE_ARGS, enum machine_mode, tree, int));"}, {"sha": "931cd06a99dbbb91b5468dd0af311e36bd987626", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -3416,8 +3416,9 @@ mcore_dllimport_p (decl)\n \n /* Cover function to implement ENCODE_SECTION_INFO.  */\n void\n-mcore_encode_section_info (decl)\n+mcore_encode_section_info (decl, first)\n      tree decl;\n+     int first ATTRIBUTE_UNUSED;\n {\n   /* This bit is copied from arm.h.  */\n   if (optimize > 0"}, {"sha": "4899aa6cc1d91d61bff2fb36e0311bb876eef1a3", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1161,8 +1161,6 @@ switch_to_section (section, decl)\t\t\t\t\\\n #undef  UNIQUE_SECTION\n #define UNIQUE_SECTION(DECL, RELOC) mcore_unique_section (DECL, RELOC)\n \n-#define REDO_SECTION_INFO_P(DECL) 1\n-\n #define MULTIPLE_SYMBOL_SPACES 1\n \n #define SUPPORTS_ONE_ONLY 1\n@@ -1315,7 +1313,8 @@ extern long mcore_current_compilation_timestamp;\n /* We must mark dll symbols specially.  Definitions of dllexport'd objects\n    install some info in the .drective (PE) or .exports (ELF) sections.   */\n #undef  ENCODE_SECTION_INFO\n-#define ENCODE_SECTION_INFO(DECL) mcore_encode_section_info (DECL)\n+#define ENCODE_SECTION_INFO(DECL, FIRST) \\\n+  mcore_encode_section_info (DECL, FIRST)\n \n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified."}, {"sha": "39862a35e90f6084e4aff42e6f0235cd54a2df6e", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -3343,12 +3343,12 @@ typedef struct mips_args {\n    If you are changing this macro, you should look at\n    mips_select_section and see if it needs a similar change.  */\n \n-#define ENCODE_SECTION_INFO(DECL)\t\t\t\t\t\\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     if (TARGET_MIPS16)\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tif (TREE_CODE (DECL) == STRING_CST\t\t\t\t\\\n+\tif ((FIRST) && TREE_CODE (DECL) == STRING_CST\t\t\t\\\n \t    && ! flag_writable_strings\t\t\t\t\t\\\n \t    /* If this string is from a function, and the function will\t\\\n \t       go in a gnu linkonce section, then we can't directly\t\\\n@@ -3415,7 +3415,8 @@ do\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n     else if (HALF_PIC_P ())\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-        HALF_PIC_ENCODE (DECL);\t\t\t\t\t\t\\\n+\tif (FIRST)\t\t\t\t\t\t\t\\\n+          HALF_PIC_ENCODE (DECL);\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)"}, {"sha": "e0343a6985735cc7ce5d321cbe7060659fab26c8", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1064,7 +1064,7 @@ __transfer_from_trampoline ()\t\t\\\n    symbol or a code symbol. These symbols are referenced via pc\n    and not via sb. */\n \n-#define ENCODE_SECTION_INFO(DECL) \\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     extern int flag_pic;\t\t\t\t\t\t\\"}, {"sha": "770f24363e84b8fc1490c1380cf435d617ba5d79", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1486,9 +1486,9 @@ do { \t\t\t\t\t\t\t\t\t\\\n \n #define FUNCTION_NAME_P(NAME)  (*(NAME) == '@')\n \n-#define ENCODE_SECTION_INFO(DECL)\\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\\\n do\t\t\t\t\t\t\t\\\n-  { if (TEXT_SPACE_P (DECL))\t\t\t\t\\\n+  { if (FIRST && TEXT_SPACE_P (DECL))\t\t\t\\\n       {\trtx _rtl;\t\t\t\t\t\\\n \tif (TREE_CODE (DECL) == FUNCTION_DECL\t\t\\\n \t    || TREE_CODE (DECL) == VAR_DECL)\t\t\\"}, {"sha": "a8e04dd8652002917d94f208531850a0c254ee67", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -923,7 +923,7 @@ struct rt_cargs {int gregs, fregs; };\n /* For no good reason, we do the same as the other RT compilers and load\n    the addresses of data areas for a function from our data area.  That means\n    that we need to mark such SYMBOL_REFs.  We do so here.  */\n-#define ENCODE_SECTION_INFO(DECL)\t\t\t\\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\\\n   if (TREE_CODE (TREE_TYPE (DECL)) == FUNCTION_TYPE)\t\\\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\n "}, {"sha": "109985998bc1d66a8ce8cf6fd90ec673799db1c1", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -218,7 +218,7 @@ Boston, MA 02111-1307, USA.  */\n    call.  Do not set this flag if the function is weakly defined.  */\n \n #undef  ENCODE_SECTION_INFO\n-#define ENCODE_SECTION_INFO(DECL)\t\t\t\t\\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\\\n   if (TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\t\\\n       && (TREE_ASM_WRITTEN (DECL) || ! TREE_PUBLIC (DECL))\t\\\n       && ! DECL_WEAK (DECL))\t\t\t\t\t\\"}, {"sha": "50367e35e25ca9c96c8ab585e6ecdd1e4bcf0f7a", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -144,7 +144,7 @@ extern void setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t    int *, int));\n extern struct rtx_def *rs6000_va_arg PARAMS ((tree, tree));\n extern void output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n-extern void rs6000_encode_section_info PARAMS ((tree));\n+extern void rs6000_encode_section_info PARAMS ((tree, int));\n extern void rs6000_select_section PARAMS ((tree, int));\n extern void rs6000_unique_section PARAMS ((tree, int));\n #ifdef ARGS_SIZE_RTX"}, {"sha": "140593fe2334ca47de7f5c05f685b4e40eb91f6f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -10954,9 +10954,13 @@ rs6000_unique_section (decl, reloc)\n    to read the prefixes.  */\n \n void\n-rs6000_encode_section_info (decl)\n+rs6000_encode_section_info (decl, first)\n      tree decl;\n+     int first;\n {\n+  if (!first)\n+    return;\n+\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       rtx sym_ref = XEXP (DECL_RTL (decl), 0);"}, {"sha": "5373a6cd11a2f8b0430c3e922890798816df7263", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -816,7 +816,8 @@ extern int fixuplabelno;\n    to read the prefixes.  */\n \n #undef\tENCODE_SECTION_INFO\n-#define\tENCODE_SECTION_INFO(DECL) rs6000_encode_section_info (DECL)\n+#define\tENCODE_SECTION_INFO(DECL, FIRST) \\\n+  rs6000_encode_section_info (DECL, FIRST)\n \n /* The ELF version doesn't encode [DS] or whatever at the end of symbols.  */\n "}, {"sha": "9fcedf8de5cda67690124d0d843668594cf11400", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -207,7 +207,7 @@ toc_section ()\t\t\t\t\t\t\\\n    that we can branch to this function without emitting a no-op after the\n    call.  Do not set this flag if the function is weakly defined.  */\n \n-#define ENCODE_SECTION_INFO(DECL)\t\t\t\\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\\\n   if (TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n       && !TREE_PUBLIC (DECL)\t\t\t\t\\\n       && !DECL_WEAK (DECL))\t\t\t\t\\"}, {"sha": "b8e86bb8c873ba720963575154d443479450ab6f", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -409,7 +409,7 @@ do\t\t\t\t\t\t\t\t\\\n    On s390, if using PIC, mark a SYMBOL_REF for a non-global symbol\n    so that we may access it directly in the GOT.  */\n \n-#define ENCODE_SECTION_INFO(DECL)                               \\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)                        \\\n do                                                              \\\n   {                                                             \\\n     if (flag_pic)                                               \\"}, {"sha": "28cf110c0ec39d197b601c7bd14d5bf673e16420", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -2688,31 +2688,33 @@ while (0)\n    On SH, if using PIC, mark a SYMBOL_REF for a non-global symbol\n    so that we may access it using GOTOFF instead of GOT.  */\n \n-#define ENCODE_SECTION_INFO(DECL) \\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (flag_pic)\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\trtx rtl = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\\\n-\t\t   ? TREE_CST_RTL (DECL) : DECL_RTL (DECL));\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tSYMBOL_REF_FLAG (XEXP (rtl, 0)) =\t\t\t\t\\\n-\t  (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\t\\\n-\t   || ! TREE_PUBLIC (DECL));\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_SH5)\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\trtx rtl = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\\\n-\t\t   ? TREE_CST_RTL (DECL)\t\t\t\t\\\n-\t\t   : TREE_CODE (DECL) != VAR_DECL\t\t\t\\\n-\t\t   ? NULL_RTX\t\t\t\t\t\t\\\n- \t\t   : DECL_RTL (DECL));\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-        if (rtl && GET_CODE (rtl) == MEM\t\t\t\t\\\n- \t    && GET_CODE (XEXP (rtl, 0)) == SYMBOL_REF)\t\t\t\\\n-\t  XEXP (rtl, 0) = gen_datalabel_ref (XEXP (rtl, 0));\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    if (!(FIRST))\t\t\t\t\t\t\\\n+      break;\t\t\t\t\t\t\t\\\n+    if (flag_pic)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\trtx rtl = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\\\n+\t\t   ? TREE_CST_RTL (DECL) : DECL_RTL (DECL));\t\\\n+\t\t\t\t\t\t\t\t\\\n+\tSYMBOL_REF_FLAG (XEXP (rtl, 0)) =\t\t\t\\\n+\t  (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\\\n+\t   || ! TREE_PUBLIC (DECL));\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    if (TARGET_SH5)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\trtx rtl = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\\\n+\t\t   ? TREE_CST_RTL (DECL)\t\t\t\\\n+\t\t   : TREE_CODE (DECL) != VAR_DECL\t\t\\\n+\t\t   ? NULL_RTX\t\t\t\t\t\\\n+ \t\t   : DECL_RTL (DECL));\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+        if (rtl && GET_CODE (rtl) == MEM\t\t\t\\\n+ \t    && GET_CODE (XEXP (rtl, 0)) == SYMBOL_REF)\t\t\\\n+\t  XEXP (rtl, 0) = gen_datalabel_ref (XEXP (rtl, 0));\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n while (0)\n \n /* The prefix used to mark SYMBOL_REFs that refer to data symbols.  */"}, {"sha": "22645c3b530772dc84a70966c6fd6bfefe89e408", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -2383,10 +2383,10 @@ do {                                                                    \\\n    In the Embedded Medium/Anywhere code model, %g4 points to the data segment\n    so we must not add it to function addresses.  */\n \n-#define ENCODE_SECTION_INFO(DECL) \\\n-  do {\t\t\t\t\t\t\t\\\n-    if (TARGET_CM_EMBMEDANY && TREE_CODE (DECL) == FUNCTION_DECL) \\\n-      SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (TARGET_CM_EMBMEDANY && TREE_CODE (DECL) == FUNCTION_DECL)\t\\\n+      SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\t\t\\\n   } while (0)\n \f\n /* Specify the machine mode that this machine uses"}, {"sha": "fdae8a466a9118a8556a21e618e6297a96e8a19e", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -38,7 +38,7 @@ extern CUMULATIVE_ARGS xstormy16_function_arg_advance\n extern void    xstormy16_setup_incoming_varargs \n   PARAMS ((CUMULATIVE_ARGS, int, tree, int *));\n extern tree    xstormy16_build_va_list PARAMS ((void));\n-extern void    xstormy16_encode_section_info PARAMS ((tree));\n+extern void    xstormy16_encode_section_info PARAMS ((tree, int));\n #endif\n \n #if defined (TREE_CODE) && defined (RTX_CODE)"}, {"sha": "dedc9be5ffe52baf754e4ce7295b1eab8fa903be", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1394,8 +1394,9 @@ xstormy16_asm_output_mi_thunk (file, thunk_fndecl, delta, function)\n /* Mark functions with SYMBOL_REF_FLAG.  */\n \n void\n-xstormy16_encode_section_info (decl)\n+xstormy16_encode_section_info (decl, first)\n      tree decl;\n+     int first ATTRIBUTE_UNUSED;\n {\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;"}, {"sha": "6ebb43f1bb3098c8bf7eb90a84e4d169d0c73775", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -2593,7 +2593,8 @@ do {\t\t\t\t\t\t\t\\\n    The usual thing for this macro to do is to record a flag in the `symbol_ref'\n    (such as `SYMBOL_REF_FLAG') or to store a modified name string in the\n    `symbol_ref' (if one bit is not enough information).  */\n-#define ENCODE_SECTION_INFO(DECL)  xstormy16_encode_section_info(DECL)\n+#define ENCODE_SECTION_INFO(DECL, FIRST) \\\n+  xstormy16_encode_section_info(DECL, FIRST)\n \n /* Decode SYM_NAME and store the real name part in VAR, sans the characters\n    that encode section info.  Define this macro if `ENCODE_SECTION_INFO' alters"}, {"sha": "1cf58da1290bb905ae60abb14f3b989ded4f6711", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1505,10 +1505,10 @@ extern union tree_node * GHS_current_section_names [(int) COUNT_OF_GHS_SECTION_K\n \n #define EP_REGNUM 30\t/* ep register number */\n \n-#define ENCODE_SECTION_INFO(DECL)\t\t\t\t\\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      if (TREE_CODE (DECL) == VAR_DECL\t\t\t\t\\\n+      if ((FIRST) && TREE_CODE (DECL) == VAR_DECL\t\t\\\n           && (TREE_STATIC (DECL) || DECL_EXTERNAL (DECL)))\t\\\n \tv850_encode_data_area (DECL);\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\"}, {"sha": "69eced9db1db64ba01bb3165d23e97006e86c8d3", "filename": "gcc/config/vax/vms.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fvax%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fvax%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvms.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -88,7 +88,7 @@ Boston, MA 02111-1307, USA.  */\n    addressed.  Under VMS there is some brain damage in the linker that requires\n    us to do this.  */\n \n-#define ENCODE_SECTION_INFO(decl)  \t\t\t\t\\\n+#define ENCODE_SECTION_INFO(decl, FIRST)  \t\t\t\\\n   if (DECL_EXTERNAL (decl) && TREE_PUBLIC (decl)) \t\t\\\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1; \n "}, {"sha": "428ed4734a42775206f1146c8a91c24b56d367c6", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -1261,7 +1261,7 @@ typedef struct xtensa_args {\n \n /* If we are referencing a function that is static, make the SYMBOL_REF\n    special so that we can generate direct calls to it even with -fpic.  */\n-#define ENCODE_SECTION_INFO(DECL)\t\t\t\t\t\\\n+#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (TREE_CODE (DECL) == FUNCTION_DECL && ! TREE_PUBLIC (DECL))\t\\\n       SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\t\t\\"}, {"sha": "2d7c3e0f250462e57089530efaa71638a226af46", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -5545,25 +5545,31 @@ readonly data section is used.\n This macro is irrelevant if there is no separate readonly data section.\n \n @findex ENCODE_SECTION_INFO\n-@item ENCODE_SECTION_INFO (@var{decl})\n+@item ENCODE_SECTION_INFO (@var{decl}, @var{new_decl_p})\n Define this macro if references to a symbol or a constant must be\n treated differently depending on something about the variable or\n function named by the symbol (such as what section it is in).\n \n The macro definition, if any, is executed under two circumstances.  One\n is immediately after the rtl for @var{decl} that represents a variable\n-or a function has been created and stored in @code{DECL_RTL\n-(@var{decl})}.  The value of the rtl will be a @code{mem} whose address\n-is a @code{symbol_ref}.  The other is immediately after the rtl for\n-@var{decl} that represents a constant has been created and stored in\n-@code{TREE_CST_RTL (@var{decl})}.  The macro is called once for each\n-distinct constant in a source file.\n+or a function has been created and stored in @code{DECL_RTL(@var{decl})}.\n+The value of the rtl will be a @code{mem} whose address is a @code{symbol_ref}.\n+The other is immediately after the rtl for @var{decl} that represents a\n+constant has been created and stored in @code{TREE_CST_RTL (@var{decl})}.\n+The macro is called once for each distinct constant in a source file.\n+\n+The @var{new_decl_p} argument will be true if this is the first time that\n+@code{ENCODE_SECTION_INFO} has been invoked on this decl.  It will\n+be false for subsequent invocations, which will happen for duplicate\n+declarations.  Whether or not anything must be done for the duplicate\n+declaration depends on whether @code{ENCODE_SECTION_INFO} examines\n+@code{DECL_ATTRIBUTES}.\n \n @cindex @code{SYMBOL_REF_FLAG}, in @code{ENCODE_SECTION_INFO}\n The usual thing for this macro to do is to record a flag in the\n @code{symbol_ref} (such as @code{SYMBOL_REF_FLAG}) or to store a\n-modified name string in the @code{symbol_ref} (if one bit is not enough\n-information).\n+modified name string in the @code{symbol_ref} (if one bit is not\n+enough information).\n \n @findex STRIP_NAME_ENCODING\n @item STRIP_NAME_ENCODING (@var{var}, @var{sym_name})"}, {"sha": "4d57b8990f82a8c9950faa4c06f398548228a898", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b20032503b0ecc63b4ce05e65fda684b47afef3b/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=b20032503b0ecc63b4ce05e65fda684b47afef3b", "patch": "@@ -851,14 +851,11 @@ make_decl_rtl (decl, asmspec)\n \n       /* ??? Another way to do this would be to do what halfpic.c does\n \t and maintain a hashed table of such critters.  */\n-      /* ??? Another way to do this would be to pass a flag bit to\n-\t ENCODE_SECTION_INFO saying whether this is a new decl or not.  */\n       /* Let the target reassign the RTL if it wants.\n \t This is necessary, for example, when one machine specific\n \t decl attribute overrides another.  */\n-#ifdef REDO_SECTION_INFO_P\n-      if (REDO_SECTION_INFO_P (decl))\n-\tENCODE_SECTION_INFO (decl);\n+#ifdef ENCODE_SECTION_INFO\n+      ENCODE_SECTION_INFO (decl, false);\n #endif\n       return;\n     }\n@@ -984,7 +981,7 @@ make_decl_rtl (decl, asmspec)\n      If the name is changed, the macro ASM_OUTPUT_LABELREF\n      will have to know how to strip this information.  */\n #ifdef ENCODE_SECTION_INFO\n-  ENCODE_SECTION_INFO (decl);\n+  ENCODE_SECTION_INFO (decl, true);\n #endif\n }\n \n@@ -3320,7 +3317,7 @@ output_constant_def (exp, defer)\n      encoded in it.  */\n   if (! found)\n     {\n-      ENCODE_SECTION_INFO (exp);\n+      ENCODE_SECTION_INFO (exp, true);\n       desc->rtl = rtl;\n       desc->label = XSTR (XEXP (desc->rtl, 0), 0);\n     }"}]}