{"sha": "0de4325e0bc2e0601e49ac8e85ca9a7134e50198", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRlNDMyNWUwYmMyZTA2MDFlNDlhYzhlODVjYTlhNzEzNGU1MDE5OA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-08-30T19:08:41Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-08-30T19:08:41Z"}, "message": "gfortran.h (gfc_namespace): Add new field is_block_data.\n\nfortran/\n* gfortran.h (gfc_namespace): Add new field is_block_data.\n* parse.c (accept_statement): Remove special handling for BLOCK DATA.\n(parse_block_data): Record BLOCK DATA name, set is_block_data field.\n* trans.c (gfc_generate_code): Handle BLOCK DATA units.\n* trans.h (gfc_generate_block_data): Add prototype.\n* trans-decl.c (gfc_generate_block_data): New function.\n\ntestsuite/\n* gfortran.dg/blockdata_1.f90: New test.\n\nFrom-SVN: r86796", "tree": {"sha": "f2545b671e60fba92c46ecb37aaa32965b1784a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2545b671e60fba92c46ecb37aaa32965b1784a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0de4325e0bc2e0601e49ac8e85ca9a7134e50198", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0de4325e0bc2e0601e49ac8e85ca9a7134e50198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0de4325e0bc2e0601e49ac8e85ca9a7134e50198", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "442c8e31f0c70473592cbb205ca2d3ebc5cb69ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/442c8e31f0c70473592cbb205ca2d3ebc5cb69ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/442c8e31f0c70473592cbb205ca2d3ebc5cb69ae"}], "stats": {"total": 99, "additions": 81, "deletions": 18}, "files": [{"sha": "44c9c487fae4d1ddd61f9fb37ce0bca459143bdd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0de4325e0bc2e0601e49ac8e85ca9a7134e50198", "patch": "@@ -1,3 +1,12 @@\n+2004-08-30  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* gfortran.h (gfc_namespace): Add new field is_block_data.\n+\t* parse.c (accept_statement): Remove special handling for BLOCK DATA.\n+\t(parse_block_data): Record BLOCK DATA name, set is_block_data field.\n+\t* trans.c (gfc_generate_code): Handle BLOCK DATA units.\n+\t* trans.h (gfc_generate_block_data): Add prototype.\n+\t* trans-decl.c (gfc_generate_block_data): New function.\n+\n 2004-08-29  Richard Henderson  <rth@redhat.com>\n \n \t* trans-const.c (gfc_conv_mpz_to_tree): Use mpz_export."}, {"sha": "3435665506c22341d73e0f28f2e6f2094e57855e", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=0de4325e0bc2e0601e49ac8e85ca9a7134e50198", "patch": "@@ -804,6 +804,9 @@ typedef struct gfc_namespace\n \n   /* A list of all alternate entry points to this procedure (or NULL).  */\n   gfc_entry_list *entries;\n+\n+  /* Set to 1 if namespace is a BLOCK DATA program unit.  */\n+  int is_block_data;\n }\n gfc_namespace;\n "}, {"sha": "b940fd3a8a4018f9494deca62e6e31369b79b045", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=0de4325e0bc2e0601e49ac8e85ca9a7134e50198", "patch": "@@ -1058,24 +1058,6 @@ accept_statement (gfc_statement st)\n \n       break;\n \n-    case ST_BLOCK_DATA:\n-      {\n-        gfc_symbol *block_data = NULL;\n-        symbol_attribute attr;\n-\n-        gfc_get_symbol (\"_BLOCK_DATA__\", gfc_current_ns, &block_data);\n-        gfc_clear_attr (&attr);\n-        attr.flavor = FL_PROCEDURE;\n-        attr.proc = PROC_UNKNOWN;\n-        attr.subroutine = 1;\n-        attr.access = ACCESS_PUBLIC;\n-        block_data->attr = attr;\n-        gfc_current_ns->proc_name = block_data;\n-        gfc_commit_symbols ();\n-      }\n-\n-      break;\n-\n     case ST_ENTRY:\n     case_executable:\n     case_exec_markers:\n@@ -2410,6 +2392,9 @@ parse_block_data (void)\n   static int blank_block=0;\n   gfc_gsymbol *s;\n \n+  gfc_current_ns->proc_name = gfc_new_block;\n+  gfc_current_ns->is_block_data = 1;\n+\n   if (gfc_new_block == NULL)\n     {\n       if (blank_block)"}, {"sha": "44ddb656dd8c710500b4a3462ac29e84c392f5b8", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=0de4325e0bc2e0601e49ac8e85ca9a7134e50198", "patch": "@@ -2350,4 +2350,30 @@ gfc_generate_constructors (void)\n #endif\n }\n \n+/* Translates a BLOCK DATA program unit. This means emitting the\n+   commons contained therein plus their initializations. We also emit\n+   a globally visible symbol to make sure that each BLOCK DATA program\n+   unit remains unique.  */\n+\n+void\n+gfc_generate_block_data (gfc_namespace * ns)\n+{\n+  tree decl;\n+  tree id;\n+\n+  gfc_trans_common (ns);\n+\n+  if (ns->proc_name)\n+    id = gfc_sym_mangled_function_id (ns->proc_name);\n+  else\n+    id = get_identifier (\"__BLOCK_DATA__\");\n+\n+  decl = build_decl (VAR_DECL, id, gfc_array_index_type);\n+  TREE_PUBLIC (decl) = 1;\n+  TREE_STATIC (decl) = 1;\n+\n+  pushdecl (decl);\n+  rest_of_decl_compilation (decl, 1, 0);\n+}\n+\n #include \"gt-fortran-trans-decl.h\""}, {"sha": "727a7d7bb2d385fe8a8a1959e097872584a08e75", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=0de4325e0bc2e0601e49ac8e85ca9a7134e50198", "patch": "@@ -647,6 +647,12 @@ gfc_generate_code (gfc_namespace * ns)\n   gfc_symbol *main_program = NULL;\n   symbol_attribute attr;\n \n+  if (ns->is_block_data)\n+    {\n+      gfc_generate_block_data (ns);\n+      return;\n+    }\n+\n   /* Main program subroutine.  */\n   if (!ns->proc_name)\n     {"}, {"sha": "1c7c73c0e75105112c2cd067c444db00c0ce553a", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=0de4325e0bc2e0601e49ac8e85ca9a7134e50198", "patch": "@@ -396,6 +396,8 @@ tree gfc_advance_chain (tree, int);\n void gfc_create_function_decl (gfc_namespace *);\n /* Generate the code for a function.  */\n void gfc_generate_function_code (gfc_namespace *);\n+/* Output a BLOCK DATA program unit.  */\n+void gfc_generate_block_data (gfc_namespace *);\n /* Output a decl for a module variable.  */\n void gfc_generate_module_vars (gfc_namespace *);\n "}, {"sha": "7f2e91dd3749b7a3519c1a8c2e84e3293d59cbbe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0de4325e0bc2e0601e49ac8e85ca9a7134e50198", "patch": "@@ -1,3 +1,7 @@\n+2004-08-30  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* gfortran.dg/blockdata_1.f90: New test.\n+\n 2004-08-30  Richard Henderson  <rth@redhat.com>\n \n \t* g++.dg/other/offsetof1.C: Use __builtin_offsetof."}, {"sha": "5c475f1d0f4ed1c5eb3f6e493657c86da5edd38f", "filename": "gcc/testsuite/gfortran.dg/blockdata_1.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/gcc%2Ftestsuite%2Fgfortran.dg%2Fblockdata_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0de4325e0bc2e0601e49ac8e85ca9a7134e50198/gcc%2Ftestsuite%2Fgfortran.dg%2Fblockdata_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fblockdata_1.f90?ref=0de4325e0bc2e0601e49ac8e85ca9a7134e50198", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! tests basic block data functionality\n+! we didn't allow multiple block data program units\n+block data \n+ common /a/ y(3)\n+ data y /3*1./\n+end\n+\n+blockdata d1\n+ common /a/ w(3)\n+ common /b/ u\n+ data u /1./\n+end blockdata d1\n+\n+block data d2\n+ common /b/ u\n+ common j\n+ data j /1/\n+end block data d2\n+!\n+! begin testing code\n+common /a/ x(3)\n+common /b/ y\n+common i\n+\n+if (any(x /= 1.)) call abort ()\n+if (y /= 1. .or. i /= 1) call abort ()\n+end"}]}