{"sha": "3057f1ab737582a9fb37a3fb967ed8bf3659f2f4", "node_id": "C_kwDOANBUbNoAKDMwNTdmMWFiNzM3NTgyYTlmYjM3YTNmYjk2N2VkOGJmMzY1OWYyZjQ", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@embecosm.com", "date": "2021-11-14T21:01:51Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@embecosm.com", "date": "2021-11-14T21:01:51Z"}, "message": "VAX: Add the `setmemhi' instruction\n\nThe MOVC5 machine instruction has `memset' semantics if encoded with a\nzero source length[1]:\n\n\"4. MOVC5 with a zero source length operand is the preferred way\n    to fill a block of memory with the fill character.\"\n\nUse that instruction to implement the `setmemhi' instruction then.  Use\nthe AP register in the register deferred mode for the source address to\nyield the shortest possible encoding of the otherwise unused operand,\nobserving that the address is never dereferenced if the source length is\nzero.\n\nThe use of this instruction yields steadily better performance, at least\nwith the Mariah VAX implementation, for a variable-length `memset' call\nexpanded inline as a single MOVC5 operation compared to an equivalent\nlibcall invocation:\n\nLength:   1, time elapsed:  0.971789 (builtin),  2.847303 (libcall)\nLength:   2, time elapsed:  0.907904 (builtin),  2.728259 (libcall)\nLength:   3, time elapsed:  1.038311 (builtin),  2.917245 (libcall)\nLength:   4, time elapsed:  0.775305 (builtin),  2.686088 (libcall)\nLength:   7, time elapsed:  1.112331 (builtin),  2.992968 (libcall)\nLength:   8, time elapsed:  0.856882 (builtin),  2.764885 (libcall)\nLength:  15, time elapsed:  1.256086 (builtin),  3.096660 (libcall)\nLength:  16, time elapsed:  1.001962 (builtin),  2.888131 (libcall)\nLength:  31, time elapsed:  1.590456 (builtin),  3.774164 (libcall)\nLength:  32, time elapsed:  1.288909 (builtin),  3.629622 (libcall)\nLength:  63, time elapsed:  3.430285 (builtin),  5.269789 (libcall)\nLength:  64, time elapsed:  3.265147 (builtin),  5.113156 (libcall)\nLength: 127, time elapsed:  6.438772 (builtin),  8.268305 (libcall)\nLength: 128, time elapsed:  6.268991 (builtin),  8.114557 (libcall)\nLength: 255, time elapsed: 12.417338 (builtin), 14.259678 (libcall)\n\n(times given in seconds per 1000000 `memset' invocations for the given\nlength made in a loop).  It is clear from these figures that hardware\ndoes data coalescence for consecutive bytes rather than naively copying\nthem one by one, as for lengths that are powers of 2 the figures are\nconsistently lower than ones for their respective next lower lengths.\n\nThe use of MOVC5 also requires at least 4 bytes less in terms of machine\ncode as it avoids encoding the address of `memset' needed for the CALLS\ninstruction used to make a libcall, as well as extra PUSHL instructions\nneeded to pass arguments to the call as those can be encoded directly as\nthe respective operands of the MOVC5 instruction.\n\nIt is perhaps worth noting too that for constant lengths we prefer to\nemit up to 5 individual MOVx instructions rather than a single MOVC5\ninstruction to clear memory and for consistency we copy this behavior\nhere for filling memory with another value too, even though there may be\na performance advantage with a string copy in comparison to a piecemeal\ncopy, e.g.:\n\nLength:  40, time elapsed:  2.183192 (string),   2.638878 (piecemeal)\n\nBut this is something for another change as it will have to be carefully\nevaluated.\n\n[1] DEC STD 032-0 \"VAX Architecture Standard\", Digital Equipment\n    Corporation, A-DS-EL-00032-00-0 Rev J, December 15, 1989, Section\n    3.10 \"Character-String Instructions\", p. 3-163\n\n\tgcc/\n\t* config/vax/vax.h (SET_RATIO): New macro.\n\t* config/vax/vax.md (UNSPEC_SETMEM_FILL): New constant.\n\t(setmemhi): New expander.\n\t(setmemhi1): New insn and splitter.\n\t(*setmemhi1): New insn.\n\n\tgcc/testsuite/\n\t* gcc.target/vax/setmem.c: New test.", "tree": {"sha": "96126a8a9dda99de35f2c35d237f3cee443e79ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96126a8a9dda99de35f2c35d237f3cee443e79ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3057f1ab737582a9fb37a3fb967ed8bf3659f2f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3057f1ab737582a9fb37a3fb967ed8bf3659f2f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3057f1ab737582a9fb37a3fb967ed8bf3659f2f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3057f1ab737582a9fb37a3fb967ed8bf3659f2f4/comments", "author": {"login": "maciej-w-rozycki", "id": 117297942, "node_id": "U_kgDOBv3TFg", "avatar_url": "https://avatars.githubusercontent.com/u/117297942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maciej-w-rozycki", "html_url": "https://github.com/maciej-w-rozycki", "followers_url": "https://api.github.com/users/maciej-w-rozycki/followers", "following_url": "https://api.github.com/users/maciej-w-rozycki/following{/other_user}", "gists_url": "https://api.github.com/users/maciej-w-rozycki/gists{/gist_id}", "starred_url": "https://api.github.com/users/maciej-w-rozycki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maciej-w-rozycki/subscriptions", "organizations_url": "https://api.github.com/users/maciej-w-rozycki/orgs", "repos_url": "https://api.github.com/users/maciej-w-rozycki/repos", "events_url": "https://api.github.com/users/maciej-w-rozycki/events{/privacy}", "received_events_url": "https://api.github.com/users/maciej-w-rozycki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "maciej-w-rozycki", "id": 117297942, "node_id": "U_kgDOBv3TFg", "avatar_url": "https://avatars.githubusercontent.com/u/117297942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maciej-w-rozycki", "html_url": "https://github.com/maciej-w-rozycki", "followers_url": "https://api.github.com/users/maciej-w-rozycki/followers", "following_url": "https://api.github.com/users/maciej-w-rozycki/following{/other_user}", "gists_url": "https://api.github.com/users/maciej-w-rozycki/gists{/gist_id}", "starred_url": "https://api.github.com/users/maciej-w-rozycki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maciej-w-rozycki/subscriptions", "organizations_url": "https://api.github.com/users/maciej-w-rozycki/orgs", "repos_url": "https://api.github.com/users/maciej-w-rozycki/repos", "events_url": "https://api.github.com/users/maciej-w-rozycki/events{/privacy}", "received_events_url": "https://api.github.com/users/maciej-w-rozycki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a53a4f764c37b50aff68811c5d37fcd6f38adb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9a53a4f764c37b50aff68811c5d37fcd6f38adb"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "006c0ab492dd53b78db5de7802026d8280b5920d", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3057f1ab737582a9fb37a3fb967ed8bf3659f2f4/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3057f1ab737582a9fb37a3fb967ed8bf3659f2f4/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=3057f1ab737582a9fb37a3fb967ed8bf3659f2f4", "patch": "@@ -433,6 +433,7 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n    move-instruction pairs, we will do a cpymem or libcall instead.  */\n #define MOVE_RATIO(speed) ((speed) ? 6 : 3)\n #define CLEAR_RATIO(speed) ((speed) ? 6 : 2)\n+#define SET_RATIO(speed) ((speed) ? 6 : 2)\n \n /* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS 0"}, {"sha": "977dc809d5f3da9af33353b7746a074df56a49e0", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3057f1ab737582a9fb37a3fb967ed8bf3659f2f4/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3057f1ab737582a9fb37a3fb967ed8bf3659f2f4/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=3057f1ab737582a9fb37a3fb967ed8bf3659f2f4", "patch": "@@ -32,6 +32,12 @@\n   VUNSPEC_PEM\t\t    ; 'procedure_entry_mask' insn.\n ])\n \n+;; UNSPEC usage:\n+\n+(define_c_enum \"unspec\" [\n+  UNSPEC_SETMEM_FILL\t    ; 'fill' operand to 'setmem' insn.\n+])\n+\n (define_constants\n   [(VAX_AP_REGNUM 12)\t    ; Register 12 contains the argument pointer\n    (VAX_FP_REGNUM 13)\t    ; Register 13 contains the frame pointer\n@@ -438,6 +444,64 @@\n    (clobber (reg:CC VAX_PSL_REGNUM))]\n   \"reload_completed\"\n   \"movc3 %2,%1,%0\")\n+\n+;; This is here to accept 4 arguments and pass the first 3 along\n+;; to the setmemhi1 pattern that really does the work.\n+(define_expand \"setmemhi\"\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"\")\n+\t(match_operand:QI 2 \"general_operand\" \"\"))\n+   (use (match_operand:HI 1 \"general_operand\" \"\"))\n+   (match_operand 3 \"\" \"\")]\n+  \"\"\n+  \"\n+{\n+  emit_insn (gen_setmemhi1 (operands[0], operands[1], operands[2]));\n+  DONE;\n+}\")\n+\n+;; The srcaddr operand of MOVC5 is not dereferenced if srclen is zero, so we\n+;; set it to (%ap) somewhat arbitrarily chosen for the shortest encoding.\n+(define_insn_and_split \"setmemhi1\"\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"=o\")\n+\t(unspec:BLK [(use (match_operand:QI 2 \"general_operand\" \"g\"))]\n+\t\t    UNSPEC_SETMEM_FILL))\n+   (use (match_operand:HI 1 \"general_operand\" \"g\"))\n+   (clobber (reg:SI 0))\n+   (clobber (reg:SI 1))\n+   (clobber (reg:SI 2))\n+   (clobber (reg:SI 3))\n+   (clobber (reg:SI 4))\n+   (clobber (reg:SI 5))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (unspec:BLK [(use (match_dup 2))] UNSPEC_SETMEM_FILL))\n+      (use (match_dup 1))\n+      (clobber (reg:SI 0))\n+      (clobber (reg:SI 1))\n+      (clobber (reg:SI 2))\n+      (clobber (reg:SI 3))\n+      (clobber (reg:SI 4))\n+      (clobber (reg:SI 5))\n+      (clobber (reg:CC VAX_PSL_REGNUM))])]\n+  \"\")\n+\n+(define_insn \"*setmemhi1\"\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"=o\")\n+\t(unspec:BLK [(use (match_operand:QI 2 \"general_operand\" \"g\"))]\n+\t\t    UNSPEC_SETMEM_FILL))\n+   (use (match_operand:HI 1 \"general_operand\" \"g\"))\n+   (clobber (reg:SI 0))\n+   (clobber (reg:SI 1))\n+   (clobber (reg:SI 2))\n+   (clobber (reg:SI 3))\n+   (clobber (reg:SI 4))\n+   (clobber (reg:SI 5))\n+   (clobber (reg:CC VAX_PSL_REGNUM))]\n+  \"reload_completed\"\n+  \"movc5 $0,(%%ap),%2,%1,%0\")\n \f\n ;; Extension and truncation insns.\n "}, {"sha": "6c60cfcd5551737967f1fa9aaa4ad1302559a661", "filename": "gcc/testsuite/gcc.target/vax/setmem.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3057f1ab737582a9fb37a3fb967ed8bf3659f2f4/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fsetmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3057f1ab737582a9fb37a3fb967ed8bf3659f2f4/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fsetmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fsetmem.c?ref=3057f1ab737582a9fb37a3fb967ed8bf3659f2f4", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+#include <stddef.h>\n+\n+void *\n+memset8 (void *block, int c, size_t size)\n+{\n+  unsigned char s8 = size;\n+  return __builtin_memset (block, c, s8);\n+}\n+\n+/* Expect assembly like:\n+\n+\tmovl 4(%ap),%r6\n+\tmovzbl 12(%ap),%r7\n+\tmovc5 $0,(%ap),8(%ap),%r7,(%r6)\n+\tmovl %r6,%r0\n+\n+ */\n+\n+/* { dg-final { scan-assembler \"\\tmovc5 \\\\\\$0,\\\\\\(%ap\\\\\\),\" } } */"}]}