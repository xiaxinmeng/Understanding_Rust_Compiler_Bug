{"sha": "e71dab87744081714bae2b3abb2e4157beed513d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcxZGFiODc3NDQwODE3MTRiYWUyYjNhYmIyZTQxNTdiZWVkNTEzZA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-28T00:16:25Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-07-28T00:16:25Z"}, "message": "Daily bump.", "tree": {"sha": "319db4088b9b38a8c6ddecf2d9d4d11a5611929c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/319db4088b9b38a8c6ddecf2d9d4d11a5611929c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e71dab87744081714bae2b3abb2e4157beed513d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e71dab87744081714bae2b3abb2e4157beed513d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e71dab87744081714bae2b3abb2e4157beed513d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e71dab87744081714bae2b3abb2e4157beed513d/comments", "author": null, "committer": null, "parents": [{"sha": "108fdcc56ee49dd7dc8314ce5022191f406a125f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108fdcc56ee49dd7dc8314ce5022191f406a125f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/108fdcc56ee49dd7dc8314ce5022191f406a125f"}], "stats": {"total": 361, "additions": 360, "deletions": 1}, "files": [{"sha": "73fd1e2772a92edc587ecd2c9b9e480d984e2adc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71dab87744081714bae2b3abb2e4157beed513d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71dab87744081714bae2b3abb2e4157beed513d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e71dab87744081714bae2b3abb2e4157beed513d", "patch": "@@ -1,3 +1,53 @@\n+2020-07-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/84079\n+\t* gimple-array-bounds.cc (array_bounds_checker::check_addr_expr):\n+\tOnly allow just-past-the-end references for the most significant\n+\tarray bound.\n+\n+2020-07-27  Hu Jiangping  <hujiangping@cn.fujitsu.com>\n+\n+\tPR driver/96247\n+\t* opts.c (check_alignment_argument): Set the -falign-Name\n+\ton/off flag on and set the -falign-Name string value null,\n+\twhen the command-line specified argument is zero.\n+\n+2020-07-27  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/96058\n+\t* expr.c (string_constant): Build string_constant only\n+\tfor a type that has same precision as char_type_node\n+\tand is an integral type.\n+\n+2020-07-27  Richard Biener  <rguenther@suse.de>\n+\n+\t* var-tracking.c (variable_tracking_main_1): Remove call\n+\tto mark_dfs_back_edges.\n+\n+2020-07-27  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/96128\n+\t* tree-vect-generic.c (expand_vector_comparison): Do not expand\n+\tvector comparison with VEC_COND_EXPR.\n+\n+2020-07-27  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/96203\n+\t* common.opt: Add -fcf-protection=check.\n+\t* flag-types.h (cf_protection_level): Add CF_CHECK.\n+\t* lto-wrapper.c (merge_and_complain): Issue an error for\n+\tmismatching -fcf-protection values with -fcf-protection=check.\n+\tOtherwise, merge -fcf-protection values.\n+\t* doc/invoke.texi: Document -fcf-protection=check.\n+\n+2020-07-27  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/45375\n+\t* symbol-summary.h: Call vec_safe_reserve before grow is called\n+\tin order to grow to a reasonable size.\n+\t* vec.h (vec_safe_reserve): Add missing function for vl_ptr\n+\ttype.\n+\n 2020-07-26  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* configure.ac (out-of-tree linker .hidden support): Don't turn off"}, {"sha": "75ec474bf8fcae4295f6cb7c12ebfea947d13830", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71dab87744081714bae2b3abb2e4157beed513d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71dab87744081714bae2b3abb2e4157beed513d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e71dab87744081714bae2b3abb2e4157beed513d", "patch": "@@ -1 +1 @@\n-20200727\n+20200728"}, {"sha": "304b19ae5954d10769a666bb38cb88f746c3f657", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71dab87744081714bae2b3abb2e4157beed513d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71dab87744081714bae2b3abb2e4157beed513d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e71dab87744081714bae2b3abb2e4157beed513d", "patch": "@@ -1,3 +1,191 @@\n+2020-07-27  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* switch.adb (Is_Internal_GCC_Switch): Revert accidental\n+\treintroduction of auxbase and auxbase-strip.\n+\n+2020-07-27  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actuals): Restrict the check on matching\n+\taliased components to view conversions of array types that are\n+\tnot placed in an instance. In such case at runtime an object is\n+\tcreated.\n+\t* sem_util.ads (Is_Actual_In_Out_Parameter, Is_View_Conversion):\n+\tNew subprograms.\n+\t* sem_util.adb (Is_Actual_In_Out_Parameter, Is_View_Conversion):\n+\tNew subprograms.\n+\n+2020-07-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* lib-xref.adb (Generate_Reference): Protect against malformed\n+\ttree in case of severe errors.\n+\t* sem_ch8.adb (Add_Implicit_Operator): Ditto.\n+\n+2020-07-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* opt.ads (Ada_Version_Runtime): Set to Ada_2020.\n+\t* sem_ch3.adb (Analyze_Subtype_Declaration): Propagate\n+\tIs_Independent flag to subtypes.\n+\t* libgnarl/s-taprop__linux.adb: Adapt to Ada 2020 warning.\n+\t* libgnat/a-nbnbin.adb, libgnat/a-nbnbin.ads,\n+\tlibgnat/a-nbnbin__gmp.adb, libgnat/a-nbnbre.adb,\n+\tlibgnat/a-nbnbre.ads, libgnat/a-stobbu.adb,\n+\tlibgnat/a-stobbu.ads, libgnat/a-stobfi.adb,\n+\tlibgnat/a-stobfi.ads, libgnat/a-stoubu.adb,\n+\tlibgnat/a-stoubu.ads, libgnat/a-stoufi.adb,\n+\tlibgnat/a-stoufi.ads, libgnat/a-stoufo.adb,\n+\tlibgnat/a-stoufo.ads, libgnat/a-stouut.adb,\n+\tlibgnat/a-stouut.ads, libgnat/a-strsto.ads,\n+\tlibgnat/a-ststbo.adb, libgnat/a-ststbo.ads,\n+\tlibgnat/a-ststun.adb, libgnat/a-ststun.ads,\n+\tlibgnat/a-stteou.ads, libgnat/s-aoinar.ads,\n+\tlibgnat/s-aomoar.ads, libgnat/s-atopex.ads,\n+\tlibgnat/s-putaim.adb, libgnat/s-putaim.ads,\n+\tlibgnat/s-putima.adb, libgnat/s-putima.ads: Remove pragma\n+\tAda_2020, now redundant.\n+\n+2020-07-27  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call_Helper): Modify addition of the extra\n+\taccessibility parameter to take into account the extra\n+\taccessibility of formals within the calling subprogram.\n+\n+2020-07-27  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_imgv.adb (Expand_Image_Attribute): Add Root_Type, so\n+\tconstrained subtypes work.\n+\n+2020-07-27  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* exp_prag.adb (Arg1, Arg2, Arg3): Removed.\n+\t(Arg_N): New function.\n+\n+2020-07-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Object_Renaming): Allow values in Ada\n+\t2020 mode.\n+\n+2020-07-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actuals): Refine 6.4.1 rules as per\n+\tAI12-0377.\n+\n+2020-07-27  Bob Duff  <duff@adacore.com>\n+\n+\t* errout.ads, errout.adb (Error_Msg_Ada_2020_Feature): New\n+\tprocedure analogous to Error_Msg_Ada_2012_Feature.\n+\t* sem_attr.adb (Analyze_Image_Attribute): Use\n+\tError_Msg_Ada_2012_Feature and Error_Msg_Ada_2020_Feature to\n+\tindicate that Object'Image is allowed in Ada 2012, and that\n+\t'Image is allowed for any type in Ada 2020.\n+\n+2020-07-27  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* libgnat/a-strunb.adb (Sum, Mul, Saturated_Sum, Saturated_Mul):\n+\tNew routines.  Use them when resulting string size more that\n+\tlength of the strings in parameters.\n+\t(Unbounded_Slice): Use \"- 1\" instead of \"+ 1\" in opposite side\n+\tof condition to avoid overflow.\n+\t* libgnat/a-strunb__shared.adb (Sum, Mul): New routines.\n+\t(Allocate): New routine with 2 parameters.  Use routine above\n+\twhen resulting string size more that length of the strings in\n+\tparameters.\n+\t(Aligned_Max_Length): Do not try to align to more than Natural'Last.\n+\t(Unbounded_Slice): Use \"- 1\" instead of \"+ 1\" in opposite side\n+\tof condition to avoid overflow.\n+\n+2020-07-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_attr.adb (Resolve_Attribute): Remove dead code.\n+\n+2020-07-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* aspects.adb, atree.adb, atree.ads, checks.adb, contracts.adb,\n+\teinfo.adb, errout.adb, exp_aggr.adb, exp_attr.adb, exp_cg.adb,\n+\texp_ch11.adb, exp_ch2.adb, exp_ch3.adb, exp_ch4.adb,\n+\texp_ch5.adb, exp_ch6.adb, exp_ch7.adb, exp_ch8.adb, exp_ch9.adb,\n+\texp_dbug.adb, exp_disp.adb, exp_intr.adb, exp_pakd.adb,\n+\texp_prag.adb, exp_put_image.adb, exp_smem.adb, exp_tss.adb,\n+\texp_unst.adb, exp_util.adb, freeze.adb, ghost.adb, gnat1drv.adb,\n+\tinline.adb, lib-writ.adb, lib-xref-spark_specific.adb,\n+\tlib-xref.adb, namet.adb, namet.ads, nlists.adb, par-ch10.adb,\n+\tpar-ch2.adb, par-ch3.adb, par-ch4.adb, par-ch5.adb, par-ch6.adb,\n+\tpar-prag.adb, par-util.adb, par_sco.adb, pprint.adb,\n+\trepinfo.adb, restrict.adb, rtsfind.adb, scil_ll.adb, sem.adb,\n+\tsem_aggr.adb, sem_attr.adb, sem_aux.adb, sem_cat.adb,\n+\tsem_ch10.adb, sem_ch11.adb, sem_ch12.adb, sem_ch13.adb,\n+\tsem_ch3.adb, sem_ch4.adb, sem_ch5.adb, sem_ch6.adb, sem_ch7.adb,\n+\tsem_ch8.adb, sem_ch9.adb, sem_dim.adb, sem_disp.adb,\n+\tsem_dist.adb, sem_elab.adb, sem_elim.adb, sem_eval.adb,\n+\tsem_intr.adb, sem_mech.adb, sem_prag.adb, sem_res.adb,\n+\tsem_scil.adb, sem_type.adb, sem_util.adb, sem_warn.adb,\n+\tsinfo.adb, sinfo.ads, sprint.adb, styleg.adb, tbuild.adb,\n+\ttreepr.adb (Nkind_In, Nam_In, Ekind_In): Removed, replaced by\n+\tmembership tests.\n+\n+2020-07-27  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, Pragma_Max_Entry_Queue_Length):\n+\tRefine error message to indicate that the pragma must apply to\n+\tan entry declaration, not just an entry.\n+\n+2020-07-27  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch6.adb (Make_Build_In_Place_Iface_Call_In_Allocator):\n+\tRevert previous patch, and add a missing type conversion to\n+\tdisplace the pointer to the allocated object to reference the\n+\ttarget dispatch table.\n+\n+2020-07-27  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actuals): Restore restrictive check on\n+\tview conversions which required matching value of\n+\tHas_Aliased_Components of formals and actuals. Required to avoid\n+\tthe regression of ACATS b460005.\n+\n+2020-07-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Package_Body): Add commentary for a\n+\tnesting issue with parent handling and private view switching.\n+\t(Switch_View): Do not skip specific private-dependent subtypes.\n+\n+2020-07-27  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* Makefile.rtl: Remove X86_TARGET_PAIRS for x86-lynx178elf.\n+\n+2020-07-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Address_Specification_Clause): Do not\n+\temit a warning when a constant declaration in a generic unit\n+\toverlays a generic In_Parameter.\n+\n+2020-07-27  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Abstract_Overriding): Remove Scope\n+\tcomparison test from test related to initial implementation of\n+\tAI12-0042, plus remove the related ??? comment.\n+\t(Derive_Subprogram): Add test requiring that the type extension\n+\tappear in the visible part of its enclosing package when\n+\tchecking the overriding requirement of 7.3.2(6.1/4), as\n+\tclarified by AI12-0382.\n+\n+2020-07-27  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_N_Attribute_Reference) Extend\n+\texisting workaround to 'Pos.\n+\n+2020-07-27  Bob Duff  <duff@adacore.com>\n+\n+\t* libgnat/s-rannum.ads, libgnat/s-rannum.adb: Add Put_Image.\n+\tThis will be inherited by the language-defined packages\n+\tAda.Numerics.Discrete_Random and Ada.Numerics.Float_Random.\n+\t* libgnat/a-convec.ads, libgnat/a-convec.adb: Add Put_Image.\n+\t* libgnat/s-putima.ads: Add pragma Preelaborate, so this can be\n+\timported into containers packages.\n+\t* libgnat/s-putima.adb: Move Digit to private part; otherwise\n+\treference to Base is illegal in Preelaborate generic.\n+\t* exp_put_image.adb (Build_Record_Put_Image_Procedure): Use the\n+\tbase type.\n+\n 2020-07-23  Arnaud Charlet  <charlet@adacore.com>\n \n \t* aspects.ads: Declare CUDA_Global as aspect."}, {"sha": "5780e6465f89d5a29f11c304c8d2f37360a16d9a", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71dab87744081714bae2b3abb2e4157beed513d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71dab87744081714bae2b3abb2e4157beed513d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e71dab87744081714bae2b3abb2e4157beed513d", "patch": "@@ -1,3 +1,8 @@\n+2020-07-27  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* c-common.c (try_to_locate_new_include_insertion_point): Use\n+\tstrcmp, not pointer equality.\n+\n 2020-07-25  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/96310"}, {"sha": "2ce7552d36f4701bd883718b632c738538a15cb8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71dab87744081714bae2b3abb2e4157beed513d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71dab87744081714bae2b3abb2e4157beed513d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e71dab87744081714bae2b3abb2e4157beed513d", "patch": "@@ -1,3 +1,12 @@\n+2020-07-27  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (enum cp_tree_index): Add CPTI_AS_BASE_IDENTIFIER.\n+\t(as_base_identifier): Define.\n+\t* decl.c (initialize_predifined_identifiers): Initialize as_base\n+\tidentifier.\n+\t* class.c (layout_class_type): Name the as-base type.  Zap\n+\tNSDMI its fields may have.\n+\n 2020-07-22  Nathan Sidwell  <nathan@acm.org>\n \n \t* class.c (maybe_add_class_template_decl_list): Don't add CONST_DECLs."}, {"sha": "e1419cdc19872fd12b5fa1a1c2b262a74ded86c5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71dab87744081714bae2b3abb2e4157beed513d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71dab87744081714bae2b3abb2e4157beed513d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e71dab87744081714bae2b3abb2e4157beed513d", "patch": "@@ -1,3 +1,8 @@\n+2020-07-27  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* openmp.c (gfc_resolve_omp_directive): Remove NULL check\n+\tfor clauses in EXEC_OMP_CRITICAL as it no longer can be NULL.\n+\n 2020-07-23  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* gfortran.h (gfc_omp_namelist): Add lastprivate_conditional."}, {"sha": "162d93370ba85aa6f776e37b8cf5e1de7aaa235b", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71dab87744081714bae2b3abb2e4157beed513d/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71dab87744081714bae2b3abb2e4157beed513d/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=e71dab87744081714bae2b3abb2e4157beed513d", "patch": "@@ -1,3 +1,9 @@\n+2020-07-27  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* be.po, da.po, de.po, el.po, es.po, fi.po, fr.po, hr.po, id.po,\n+\tja.po, nl.po, ru.po, sr.po, sv.po, tr.po, uk.po, vi.po, zh_CN.po,\n+\tzh_TW.po: Update.\n+\n 2020-07-20  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.pot: Regenerate."}, {"sha": "f900b67ec668ae94e2512b8d2e10d091d2f90a55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71dab87744081714bae2b3abb2e4157beed513d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71dab87744081714bae2b3abb2e4157beed513d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e71dab87744081714bae2b3abb2e4157beed513d", "patch": "@@ -1,3 +1,42 @@\n+2020-07-27  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* gcc.dg/torture/pr39074-2.c: Adjust for mmix.\n+\t* gcc.dg/torture/pr39074.c, gcc.dg/torture/pta-callused-1.c: Ditto.\n+\n+2020-07-27  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/lookup/missing-std-include-10.h: New.\n+\t* g++.dg/lookup/missing-std-include-10.C: New.\n+\t* g++.dg/lookup/missing-std-include-11.C: New.\n+\n+2020-07-27  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/84079\n+\t* gcc.dg/Warray-bounds-62.c: New test.\n+\n+2020-07-27  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/96128\n+\t* gcc.target/s390/vector/pr96128.c: New test.\n+\n+2020-07-27  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR bootstrap/96203\n+\t* gcc.target/i386/pr96203-1.c: New test.\n+\t* gcc.target/i386/pr96203-2.c: Likewise.\n+\n+2020-07-27  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* gcc.dg/tree-ssa/vector-4.c: Adjust for mmix.\n+\n+2020-07-27  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* gcc.dg/tree-ssa/ssa-dse-26.c: Adjust for mmix.\n+\n+2020-07-27  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* gcc.dg/tree-ssa/ssa-dom-cse-2.c: xfail scan for mmix.\n+\n 2020-07-27  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* gcc.dg/tree-ssa/reassoc-20.c: Adjust for mmix."}, {"sha": "2f9a05b9caffd57b1d663bc20ca847224c2b3bd3", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71dab87744081714bae2b3abb2e4157beed513d/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71dab87744081714bae2b3abb2e4157beed513d/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=e71dab87744081714bae2b3abb2e4157beed513d", "patch": "@@ -1,3 +1,29 @@\n+2020-07-27  Julian Brown  <julian@codesourcery.com>\n+\t    Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* libgomp.h (struct target_var_desc): Rename do_detach field to\n+\tis_attach.\n+\t* oacc-mem.c (goacc_exit_datum_1): Add assert.  Don't set finalize for\n+\tGOMP_MAP_FORCE_DETACH. Update checking to use is_attach field.\n+\t(goacc_enter_data_internal): Don't affect reference counts\n+\tfor attach mappings.\n+\t(goacc_exit_data_internal): Don't affect reference counts for detach\n+\tmappings.\n+\t* target.c (gomp_map_vars_existing): Don't affect reference counts for\n+\tattach mappings.\n+\t(gomp_map_vars_internal): Set renamed is_attach flag unconditionally to\n+\tmark attach mappings.\n+\t(gomp_unmap_vars_internal): Use is_attach flag to prevent affecting\n+\treference count for attach mappings.\n+\t* testsuite/libgomp.oacc-c-c++-common/mdc-refcount-1.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/mdc-refcount-2.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/mdc-refcount-2.c: New test.\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-6-no_finalize.F90: Mark\n+\ttest as shouldfail.\n+\t* testsuite/libgomp.oacc-fortran/deep-copy-6.f90: Adjust to fail\n+\tgracefully in no-finalize mode.\n+\t* testsuite/libgomp.oacc-c-c++-common/mdc-refcount-3.c: New file.\n+\n 2020-07-24  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c++/c++.exp: Unset 'offload_target' after"}, {"sha": "70d594f74d5d8ba2c634df249722563f9568cbdb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e71dab87744081714bae2b3abb2e4157beed513d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e71dab87744081714bae2b3abb2e4157beed513d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e71dab87744081714bae2b3abb2e4157beed513d", "patch": "@@ -1,3 +1,34 @@\n+2020-07-27  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/hashtable_policy.h (_Map_base<>::at): Use\n+\t_Hashtable<>::find.\n+\t(_Hashtable_base<>::_Equal_hash_code<>::_S_node_equals):New.\n+\t(_Hashtable_base<>::_M_node_equals): New, use latter.\n+\t(_Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash,\n+\t_RehashPolicy, false>::_M_equal): Adapt to use latter.\n+\t* include/bits/hashtable.h (_Hashtable<>::_M_update_bbegin): New.\n+\t(_Hashtable<>::_M_assign): Use latter.\n+\t(_Hashtable<>::_M_move_assign): Likewise.\n+\t(_Hashtable<>(_Hashtable<>&&)): Likewise.\n+\t(_Hashtable<>(_Hashtable<>&&, const allocator_type&)): Likewise.\n+\t(_Hashtable<>::swap): Likewise.\n+\t(_Hashtable<>::find): Build iterator directly from _M_find_node result.\n+\t(_Hashtable<>::count): Use _Hashtable<>::find.\n+\t(_Hashtable<>::equal_range): Likewise.\n+\t(_Hashtable<>::_M_erase(false_type, const key_type&)): Use\n+\t_M_node_equals.\n+\n+2020-07-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++17/floating_from_chars.cc (from_chars_impl): Ensure\n+\tthat FE_NEAREST is used.\n+\t* testsuite/20_util/from_chars/4.cc: Do not use if constexpr in\n+\ta { target c++14 } test.\n+\t[!_GLIBCXX_HAVE_USELOCALE]: Disable all tests.\n+\t* testsuite/20_util/from_chars/5.cc [!_GLIBCXX_HAVE_USELOCALE]:\n+\tLikewise.\n+\t* testsuite/20_util/from_chars/6.cc: New test.\n+\n 2020-07-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/future (future, shared_future, promise): Add"}]}