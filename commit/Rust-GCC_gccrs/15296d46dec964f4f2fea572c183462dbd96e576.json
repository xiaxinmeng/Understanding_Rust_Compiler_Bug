{"sha": "15296d46dec964f4f2fea572c183462dbd96e576", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUyOTZkNDZkZWM5NjRmNGYyZmVhNTcyYzE4MzQ2MmRiZDk2ZTU3Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-05-10T21:03:15Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-05-10T21:03:15Z"}, "message": "tree.c (free_lang_data_in_type): Free TREE_PURPOSE of TYPE_ARG_TYPES list.\n\n\t* tree.c (free_lang_data_in_type): Free TREE_PURPOSE of\n\tTYPE_ARG_TYPES list.\n\t(verify_type): Permit non-NULL TREE_PURPOSE in non-LTO builds.\n\t* tree.def (FUNCTION_TYPE): Document TREE_PURPOSE in TYPE_ARG_TYPES\n\nFrom-SVN: r222984", "tree": {"sha": "eff4cc7d99e6fb6b5bb97e85911269f526cc1081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eff4cc7d99e6fb6b5bb97e85911269f526cc1081"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15296d46dec964f4f2fea572c183462dbd96e576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15296d46dec964f4f2fea572c183462dbd96e576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15296d46dec964f4f2fea572c183462dbd96e576", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15296d46dec964f4f2fea572c183462dbd96e576/comments", "author": null, "committer": null, "parents": [{"sha": "e587377d38dc7aa230f103008851147021bcb624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e587377d38dc7aa230f103008851147021bcb624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e587377d38dc7aa230f103008851147021bcb624"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "2a43fe952aefd15f0d3cc379da0afe665058ecf6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15296d46dec964f4f2fea572c183462dbd96e576/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15296d46dec964f4f2fea572c183462dbd96e576/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15296d46dec964f4f2fea572c183462dbd96e576", "patch": "@@ -1,3 +1,10 @@\n+2015-05-09  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree.c (free_lang_data_in_type): Free TREE_PURPOSE of\n+\tTYPE_ARG_TYPES list.\n+\t(verify_type): Permit non-NULL TREE_PURPOSE in non-LTO builds.\n+\t* tree.def (FUNCTION_TYPE): Document TREE_PURPOSE in TYPE_ARG_TYPES\n+\n 2015-05-09  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree.c (verify_type): Verify TYPE_BINFO and TYPE_VALUES_RAW."}, {"sha": "b4dceed31dc227f426feab96fb40b30efbcadcd4", "filename": "gcc/tree.c", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15296d46dec964f4f2fea572c183462dbd96e576/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15296d46dec964f4f2fea572c183462dbd96e576/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=15296d46dec964f4f2fea572c183462dbd96e576", "patch": "@@ -5041,7 +5041,23 @@ free_lang_data_in_type (tree type)\n \t      TREE_VALUE (p) = build_qualified_type (arg_type, quals);\n \t      free_lang_data_in_type (TREE_VALUE (p));\n \t    }\n+\t  /* C++ FE uses TREE_PURPOSE to store initial values.  */\n+\t  TREE_PURPOSE (p) = NULL;\n \t}\n+      /* Java uses TYPE_MINVAL for TYPE_ARGUMENT_SIGNATURE.  */\n+      TYPE_MINVAL (type) = NULL;\n+    }\n+  if (TREE_CODE (type) == METHOD_TYPE)\n+    {\n+      tree p;\n+\n+      for (p = TYPE_ARG_TYPES (type); p; p = TREE_CHAIN (p))\n+\t{\n+\t  /* C++ FE uses TREE_PURPOSE to store initial values.  */\n+\t  TREE_PURPOSE (p) = NULL;\n+\t}\n+      /* Java uses TYPE_MINVAL for TYPE_ARGUMENT_SIGNATURE.  */\n+      TYPE_MINVAL (type) = NULL;\n     }\n \n   /* Remove members that are not actually FIELD_DECLs from the field\n@@ -12619,13 +12635,18 @@ verify_type (const_tree t)\n \t  error_found = true;\n \t}\n     }\n-  else if (INTEGRAL_TYPE_P (t) || TREE_CODE (t) == REAL_TYPE || TREE_CODE (t) == FIXED_POINT_TYPE)\n+  else if (INTEGRAL_TYPE_P (t) || TREE_CODE (t) == REAL_TYPE\n+\t   || TREE_CODE (t) == FIXED_POINT_TYPE)\n     {\n       /* FIXME: The following check should pass:\n-\t  useless_type_conversion_p (const_cast <tree> (t), TREE_TYPE (TYPE_MIN_VALUE (t))\n+\t  useless_type_conversion_p (const_cast <tree> (t),\n+\t\t\t\t     TREE_TYPE (TYPE_MIN_VALUE (t))\n \t but does not for C sizetypes in LTO.  */\n     }\n-  else if (TYPE_MINVAL (t))\n+  /* Java uses TYPE_MINVAL for TYPE_ARGUMENT_SIGNATURE.  */\n+  else if (TYPE_MINVAL (t)\n+\t   && ((TREE_CODE (t) != METHOD_TYPE && TREE_CODE (t) != FUNCTION_TYPE)\n+\t       || in_lto_p))\n     {\n       error (\"TYPE_MINVAL non-NULL\");\n       debug_tree (TYPE_MINVAL (t));\n@@ -12665,10 +12686,12 @@ verify_type (const_tree t)\n \t  error_found = true;\n \t}\n     }\n-  else if (INTEGRAL_TYPE_P (t) || TREE_CODE (t) == REAL_TYPE || TREE_CODE (t) == FIXED_POINT_TYPE)\n+  else if (INTEGRAL_TYPE_P (t) || TREE_CODE (t) == REAL_TYPE\n+\t   || TREE_CODE (t) == FIXED_POINT_TYPE)\n     {\n       /* FIXME: The following check should pass:\n-\t  useless_type_conversion_p (const_cast <tree> (t), TREE_TYPE (TYPE_MAX_VALUE (t))\n+\t  useless_type_conversion_p (const_cast <tree> (t),\n+\t\t\t\t     TREE_TYPE (TYPE_MAX_VALUE (t))\n \t but does not for C sizetypes in LTO.  */\n     }\n   else if (TREE_CODE (t) == ARRAY_TYPE)\n@@ -12817,7 +12840,8 @@ verify_type (const_tree t)\n   else if (TREE_CODE (t) == FUNCTION_TYPE || TREE_CODE (t) == METHOD_TYPE)\n     for (tree l = TYPE_ARG_TYPES (t); l; l = TREE_CHAIN (l))\n       {\n-\tif (TREE_PURPOSE (l))\n+\t/* C++ FE uses TREE_PURPOSE to store initial values.  */\n+\tif (TREE_PURPOSE (l) && in_lto_p)\n \t  {\n \t    error (\"TREE_PURPOSE is non-NULL in TYPE_ARG_TYPES list\");\n \t    debug_tree (l);"}, {"sha": "ea7bea046d62ed6c04356cfc742a9892b6b067f3", "filename": "gcc/tree.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15296d46dec964f4f2fea572c183462dbd96e576/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15296d46dec964f4f2fea572c183462dbd96e576/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=15296d46dec964f4f2fea572c183462dbd96e576", "patch": "@@ -245,6 +245,8 @@ DEFTREECODE (POINTER_BOUNDS_TYPE, \"pointer_bounds_type\", tcc_type, 0)\n    TREE_TYPE\t\t    type of value returned.\n    TYPE_ARG_TYPES      list of types of arguments expected.\n \tthis list is made of TREE_LIST nodes.\n+\tIn this list TREE_PURPOSE can be used to indicate the default\n+\tvalue of parameter (used by C++ frontend).\n    Types of \"Procedures\" in languages where they are different from functions\n    have code FUNCTION_TYPE also, but then TREE_TYPE is zero or void type.  */\n DEFTREECODE (FUNCTION_TYPE, \"function_type\", tcc_type, 0)"}]}