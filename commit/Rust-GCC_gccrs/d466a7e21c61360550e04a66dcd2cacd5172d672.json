{"sha": "d466a7e21c61360550e04a66dcd2cacd5172d672", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ2NmE3ZTIxYzYxMzYwNTUwZTA0YTY2ZGNkMmNhY2Q1MTcyZDY3Mg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-04-10T20:26:45Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-04-10T20:26:45Z"}, "message": "[multiple changes]\n\n2008-04-10  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/c_global/cstdatomic: C++ types only, format, doxygen markup.\n\t* include/c_compatibility/stdatomic.h: \"C\" only, format, doxygen markup.\n\t* src/atomic.c: Format, doxygen markup, edits.\n\n\t* include/Makefile.am (cstdatomic, stdatomic.h): Add.\n\t* src/Makefile.am (atomic.c): Add.\n\t* acinclude.m4 (GLIBCXX_CHECK_STANDARD_LAYOUT): New.\n\t* configure.ac: Call it.\t\n\t* include/Makefile.in: Regenerate.\n\t* src/Makefile.in: Same.\n\t* Makefile.in: Same.\n\t* doc/Makefile.in: Same.\n\t* po/Makefile.in: Same.\n\t* libmath/Makefile.in: Same.\n\t* include/Makefile.in: Same.\n\t* testsuite/Makefile.in: Same.\n\t* libsupc++/Makefile.in: Same.\n\t* config.h.in: Same.\n\t* configure: Same.\n\t\n\t* config/abi/pre/gnu.ver: Add atomics exports.\n\n\t* include/ext/typelist.h (apply_generator): New.\n\t* include/bits/c++config (_GLIBCXX_BEGIN_EXTERN_C): New.\n\t(_GLIBCXX_END_EXTERN_C): New.\n\tDeal with _GLIBCXX_BEGIN_NAMESPACE, _GLIBCXX_END_NAMESPACE when\n\tcompiling as C.\t\n\t* testsuite/lib/libstdc++.exp (v3_target_compile_as_c): Add -L\n\tflag for libstdc++.\n\t* testsuite/util/testsuite_common_types.h (integral_types): New\n\ttypelist.\n\t(atomics, atomics_tl): Same.\n\t(assignable, default_constructible, copy_constructible,\n\texplicit_value_constructible): New.\t\n\t* testsuite/17_intro/headers/c++200x/all.cc: Test new headers.\n\t* testsuite/29_atomics: New.\n\t* testsuite/29_atomics/atomic_address: Same.\n\t* testsuite/29_atomics/atomic_address/cons: Same.\n\t* testsuite/29_atomics/atomic_address/cons/explicit_value.cc: Same.\n\t* testsuite/29_atomics/atomic_address/cons/assign_neg.cc: Same.\n\t* testsuite/29_atomics/atomic_address/cons/copy_neg.cc: Same.\n\t* testsuite/29_atomics/atomic_address/cons/default.cc: Same.\n\t* testsuite/29_atomics/atomic_address/cons/aggregate.cc: Same.\n\t* testsuite/29_atomics/atomic_flag: Same.\n\t* testsuite/29_atomics/atomic_flag/cons: Same.\n\t* testsuite/29_atomics/atomic_flag/cons/assign_neg.cc: Same.\n\t* testsuite/29_atomics/atomic_flag/cons/copy_neg.cc: Same.\n\t* testsuite/29_atomics/atomic_flag/cons/default.cc: Same.\n\t* testsuite/29_atomics/atomic_flag/cons/aggregate.cc: Same.\n\t* testsuite/29_atomics/atomic_flag/requirements: Same.\n\t* testsuite/29_atomics/atomic_flag/requirements/standard_layout.cc: \n\tSame.\n\t* testsuite/29_atomics/atomic_flag/\n\tatomic_global_fence_compatibility.cc: Same.\n\t* testsuite/29_atomics/atomic_flag/test_and_set: Same.\n\t* testsuite/29_atomics/atomic_flag/test_and_set/explicit.c: Same.\n\t* testsuite/29_atomics/atomic_flag/test_and_set/explicit.cc: Same.\n\t* testsuite/29_atomics/atomic_flag/test_and_set/implicit.c: Same.\n\t* testsuite/29_atomics/atomic_flag/test_and_set/implicit.cc: Same.\n\t* testsuite/29_atomics/headers: Same.\n\t* testsuite/29_atomics/headers/cstdatomic: Same.\n\t* testsuite/29_atomics/headers/cstdatomic/types_std_c++0x.cc: Same.\n\t* testsuite/29_atomics/headers/cstdatomic/functions_std_c++0x.cc: Same.\n\t* testsuite/29_atomics/headers/cstdatomic/std_c++0x_neg.cc: Same.\n\t* testsuite/29_atomics/headers/cstdatomic/macros.cc: Same.\n\t* testsuite/29_atomics/headers/stdatomic.h: Same.\n\t* testsuite/29_atomics/headers/stdatomic.h/macros.c: Same.\n\t* testsuite/29_atomics/headers/stdatomic.h/types.c: Same.\n\t* testsuite/29_atomics/headers/stdatomic.h/functions.c: Same.\n\t* testsuite/29_atomics/atomic: Same.\n\t* testsuite/29_atomics/atomic/cons: Same.\n\t* testsuite/29_atomics/atomic/cons/explicit_value.cc: Same.\n\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Same.\n\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Same.\n\t* testsuite/29_atomics/atomic/cons/default.cc: Same.\n\t* testsuite/29_atomics/atomic/requirements: Same.\n\t* testsuite/29_atomics/atomic/requirements/explicit_instantiation: Same.\n\t* testsuite/29_atomics/atomic/requirements/explicit_instantiation/\n\t1.cc: Same.\n\t\n2008-04-10  Lawrence Crowl  <crowl@google.com>\n\n\t* include/c_global/cstdatomic: New.\n\t* include/c_compatibility/stdatomic.h: New.\n\t* src/atomic.c: New.\n\nFrom-SVN: r134174", "tree": {"sha": "dc0bf9fb108791fffd3d1c8bee85cb81446f702c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc0bf9fb108791fffd3d1c8bee85cb81446f702c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d466a7e21c61360550e04a66dcd2cacd5172d672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d466a7e21c61360550e04a66dcd2cacd5172d672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d466a7e21c61360550e04a66dcd2cacd5172d672", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d466a7e21c61360550e04a66dcd2cacd5172d672/comments", "author": null, "committer": null, "parents": [{"sha": "4514bed67d02fb39eeab73eb029e3860a21b3d3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4514bed67d02fb39eeab73eb029e3860a21b3d3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4514bed67d02fb39eeab73eb029e3860a21b3d3a"}], "stats": {"total": 6476, "additions": 6402, "deletions": 74}, "files": [{"sha": "3877bc30ac1289d765a484f0ee6964808a704397", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -1,3 +1,91 @@\n+2008-04-10  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/c_global/cstdatomic: C++ types only, format, doxygen markup.\n+\t* include/c_compatibility/stdatomic.h: \"C\" only, format, doxygen markup.\n+\t* src/atomic.c: Format, doxygen markup, edits.\n+\n+\t* include/Makefile.am (cstdatomic, stdatomic.h): Add.\n+\t* src/Makefile.am (atomic.c): Add.\n+\t* acinclude.m4 (GLIBCXX_CHECK_STANDARD_LAYOUT): New.\n+\t* configure.ac: Call it.\t\n+\t* include/Makefile.in: Regenerate.\n+\t* src/Makefile.in: Same.\n+\t* Makefile.in: Same.\n+\t* doc/Makefile.in: Same.\n+\t* po/Makefile.in: Same.\n+\t* libmath/Makefile.in: Same.\n+\t* include/Makefile.in: Same.\n+\t* testsuite/Makefile.in: Same.\n+\t* libsupc++/Makefile.in: Same.\n+\t* config.h.in: Same.\n+\t* configure: Same.\n+\t\n+\t* config/abi/pre/gnu.ver: Add atomics exports.\n+\n+\t* include/ext/typelist.h (apply_generator): New.\n+\t* include/bits/c++config (_GLIBCXX_BEGIN_EXTERN_C): New.\n+\t(_GLIBCXX_END_EXTERN_C): New.\n+\tDeal with _GLIBCXX_BEGIN_NAMESPACE, _GLIBCXX_END_NAMESPACE when\n+\tcompiling as C.\t\n+\t* testsuite/lib/libstdc++.exp (v3_target_compile_as_c): Add -L\n+\tflag for libstdc++.\n+\t* testsuite/util/testsuite_common_types.h (integral_types): New\n+\ttypelist.\n+\t(atomics, atomics_tl): Same.\n+\t(assignable, default_constructible, copy_constructible,\n+\texplicit_value_constructible): New.\t\n+\t* testsuite/17_intro/headers/c++200x/all.cc: Test new headers.\n+\t* testsuite/29_atomics: New.\n+\t* testsuite/29_atomics/atomic_address: Same.\n+\t* testsuite/29_atomics/atomic_address/cons: Same.\n+\t* testsuite/29_atomics/atomic_address/cons/explicit_value.cc: Same.\n+\t* testsuite/29_atomics/atomic_address/cons/assign_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic_address/cons/copy_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic_address/cons/default.cc: Same.\n+\t* testsuite/29_atomics/atomic_address/cons/aggregate.cc: Same.\n+\t* testsuite/29_atomics/atomic_flag: Same.\n+\t* testsuite/29_atomics/atomic_flag/cons: Same.\n+\t* testsuite/29_atomics/atomic_flag/cons/assign_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic_flag/cons/copy_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic_flag/cons/default.cc: Same.\n+\t* testsuite/29_atomics/atomic_flag/cons/aggregate.cc: Same.\n+\t* testsuite/29_atomics/atomic_flag/requirements: Same.\n+\t* testsuite/29_atomics/atomic_flag/requirements/standard_layout.cc: \n+\tSame.\n+\t* testsuite/29_atomics/atomic_flag/\n+\tatomic_global_fence_compatibility.cc: Same.\n+\t* testsuite/29_atomics/atomic_flag/test_and_set: Same.\n+\t* testsuite/29_atomics/atomic_flag/test_and_set/explicit.c: Same.\n+\t* testsuite/29_atomics/atomic_flag/test_and_set/explicit.cc: Same.\n+\t* testsuite/29_atomics/atomic_flag/test_and_set/implicit.c: Same.\n+\t* testsuite/29_atomics/atomic_flag/test_and_set/implicit.cc: Same.\n+\t* testsuite/29_atomics/headers: Same.\n+\t* testsuite/29_atomics/headers/cstdatomic: Same.\n+\t* testsuite/29_atomics/headers/cstdatomic/types_std_c++0x.cc: Same.\n+\t* testsuite/29_atomics/headers/cstdatomic/functions_std_c++0x.cc: Same.\n+\t* testsuite/29_atomics/headers/cstdatomic/std_c++0x_neg.cc: Same.\n+\t* testsuite/29_atomics/headers/cstdatomic/macros.cc: Same.\n+\t* testsuite/29_atomics/headers/stdatomic.h: Same.\n+\t* testsuite/29_atomics/headers/stdatomic.h/macros.c: Same.\n+\t* testsuite/29_atomics/headers/stdatomic.h/types.c: Same.\n+\t* testsuite/29_atomics/headers/stdatomic.h/functions.c: Same.\n+\t* testsuite/29_atomics/atomic: Same.\n+\t* testsuite/29_atomics/atomic/cons: Same.\n+\t* testsuite/29_atomics/atomic/cons/explicit_value.cc: Same.\n+\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic/cons/default.cc: Same.\n+\t* testsuite/29_atomics/atomic/requirements: Same.\n+\t* testsuite/29_atomics/atomic/requirements/explicit_instantiation: Same.\n+\t* testsuite/29_atomics/atomic/requirements/explicit_instantiation/\n+\t1.cc: Same.\n+\t\n+2008-04-10  Lawrence Crowl  <crowl@google.com>\n+\n+\t* include/c_global/cstdatomic: New.\n+\t* include/c_compatibility/stdatomic.h: New.\n+\t* src/atomic.c: New.\n+\n 2008-04-10  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/std/tuple: Consistency check for include guard, doxygen\n@@ -165,6 +253,7 @@\n \t* doc/xml/manual/parallel_mode.xml: Correct configuration documentation.\n \t* doc/html/manual/bk01pt12ch31s04.html: Regenerate.\n \n+>>>>>>> .r133664\n 2008-03-18  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* configure.ac (libtool_VERSION): To 6:11:0."}, {"sha": "146704405ff90f13a34554c154c61b1b279389cf", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -54,6 +54,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n+\t$(top_srcdir)/../config/proginstall.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n \t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\"}, {"sha": "e1712b77d804ee1144ba1a596b807133c8cd77ed", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -1476,6 +1476,46 @@ AC_DEFUN([GLIBCXX_CHECK_SYSTEM_ERROR], [\n   fi\n ])\n \n+dnl\n+dnl Check whether C++200x's standard layout types are supported. \n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_STANDARD_LAYOUT], [\n+\n+  AC_MSG_CHECKING([for ISO C++200x standard layout type support])\n+  AC_CACHE_VAL(ac_standard_layout, [\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS='-std=gnu++0x'\n+\n+  AC_TRY_COMPILE([struct b\n+                  {\n+  \t\t    bool t;\n+\n+\t\t    // Need standard layout relaxation from POD\n+\t\t    private:\t    \n+  \t\t    b& operator=(const b&);\n+  \t\t    b(const b&);\n+\t\t    };\n+\n+\t\t    int main()\n+\t\t    {\n+\t\t      b tst1 = { false };\n+\t\t       return 0;\n+\t\t    }],,\n+             [ac_standard_layout=yes], [ac_standard_layout=no])\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+  AC_MSG_RESULT($ac_standard_layout)\n+  if test x\"$ac_standard_layout\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_STANDARD_LAYOUT, 1,\n+              [Define if standard layout types are supported in C++200x.])\n+  fi\n+])\n+\n dnl\n dnl Check for what type of C headers to use.\n dnl"}, {"sha": "52acd2c2f0d6f538e77cac576b43a537d8c98212", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -815,6 +815,9 @@\n    TR1 (Chapter 5.1). */\n #undef _GLIBCXX_USE_RANDOM_TR1\n \n+/* Define if standard layout types are supported in C++200x. */\n+#undef _GLIBCXX_USE_STANDARD_LAYOUT\n+\n /* Define if code specialized for wchar_t should be used. */\n #undef _GLIBCXX_USE_WCHAR_T\n "}, {"sha": "3e5a9240513dc48197f23eef22c1caa005b703aa", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 64, "deletions": 24, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -26,7 +26,11 @@ GLIBCXX_3.4 {\n     # Names inside the 'extern' block are demangled names.\n     extern \"C++\"\n     {\n-      std::[A-Za]*;\n+      std::[A-Z]*;\n+      std::a[a-c]*;\n+      std::ad[a-n]*;\n+      std::ad[p-z]*;\n+      std::a[e-z]*;\n #     std::ba[a-r]*;\n       std::basic_[a-e]*;\n       std::basic_f[a-r]*;\n@@ -61,7 +65,9 @@ GLIBCXX_3.4 {\n       std::c[i-s]*;\n       std::c[u-z]*;\n #     std::[d-g]*;\n-      std::[d-e]*;\n+      std::d[a-d]*;\n+      std::d[f-z]*;\n+      std::e*;\n       std::gslice*;\n       std::h[^a]*;\n       std::i[a-n]*;\n@@ -120,7 +126,6 @@ GLIBCXX_3.4 {\n       std::_List_node_base::unhook*;\n       std::_List_node_base::reverse*;\n       std::_List_node_base::transfer*;\n-      std::__throw_*;\n       std::__timepunct*;\n       std::__numeric_limits_base*;\n       std::__num_base::_S_format_float*;\n@@ -135,23 +140,6 @@ GLIBCXX_3.4 {\n \n     # Names not in an 'extern' block are mangled names.\n \n-    # __gnu_debug::_Safe_sequence_base and _Safe_iterator_base\n-    _ZN11__gnu_debug19_Safe_sequence_base13_M_detach_allEv;\n-    _ZN11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv;\n-    _ZN11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv;\n-    _ZN11__gnu_debug19_Safe_sequence_base7_M_swapERS0_;\n-    _ZN11__gnu_debug19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb;\n-    _ZN11__gnu_debug19_Safe_iterator_base9_M_detachEv;\n-    _ZNK11__gnu_debug19_Safe_iterator_base11_M_singularEv;\n-    _ZNK11__gnu_debug19_Safe_iterator_base14_M_can_compareERKS0_;\n-\n-    # __gnu_debug::_Error_formatter\n-    _ZNK11__gnu_debug16_Error_formatter10_M_message*;\n-    _ZNK11__gnu_debug16_Error_formatter10_Parameter*;\n-    _ZNK11__gnu_debug16_Error_formatter13_M_print_word*;\n-    _ZNK11__gnu_debug16_Error_formatter15_M_print_string*;\n-    _ZNK11__gnu_debug16_Error_formatter8_M_error*;\n-    \n     # std::string\n     _ZNSsC*;\n     _ZNSsD*;\n@@ -436,6 +424,39 @@ GLIBCXX_3.4 {\n     _ZN10__gnu_norm15_List_node_base7reverseEv;\n     _ZN10__gnu_norm15_List_node_base8transfer*;\n \n+    # __gnu_debug::_Safe_sequence_base and _Safe_iterator_base\n+    _ZN11__gnu_debug19_Safe_sequence_base13_M_detach_allEv;\n+    _ZN11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv;\n+    _ZN11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv;\n+    _ZN11__gnu_debug19_Safe_sequence_base7_M_swapERS0_;\n+    _ZN11__gnu_debug19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb;\n+    _ZN11__gnu_debug19_Safe_iterator_base9_M_detachEv;\n+    _ZNK11__gnu_debug19_Safe_iterator_base11_M_singularEv;\n+    _ZNK11__gnu_debug19_Safe_iterator_base14_M_can_compareERKS0_;\n+\n+    # __gnu_debug::_Error_formatter\n+    _ZNK11__gnu_debug16_Error_formatter10_M_message*;\n+    _ZNK11__gnu_debug16_Error_formatter10_Parameter*;\n+    _ZNK11__gnu_debug16_Error_formatter13_M_print_word*;\n+    _ZNK11__gnu_debug16_Error_formatter15_M_print_string*;\n+    _ZNK11__gnu_debug16_Error_formatter8_M_error*;\n+    \n+    # exceptions as functions\n+    _ZSt16__throw_bad_castv;\n+    _ZSt17__throw_bad_allocv;\n+    _ZSt18__throw_bad_typeidv;\n+    _ZSt19__throw_ios_failurePKc;\n+    _ZSt19__throw_logic_errorPKc;\n+    _ZSt19__throw_range_errorPKc;\n+    _ZSt20__throw_domain_errorPKc;\n+    _ZSt20__throw_length_errorPKc;\n+    _ZSt20__throw_out_of_rangePKc;\n+    _ZSt21__throw_bad_exceptionv;\n+    _ZSt21__throw_runtime_errorPKc;\n+    _ZSt22__throw_overflow_errorPKc;\n+    _ZSt23__throw_underflow_errorPKc;\n+    _ZSt24__throw_invalid_argumentPKc;\n+\n     # operator new(size_t)\n     _Znw[jm];\n     # operator new(size_t, std::nothrow_t const&)\n@@ -464,7 +485,10 @@ GLIBCXX_3.4 {\n #   _ZTVSt[0-9][0-9][A-Za-z]*;\n     _ZTVSt[0-9][0-9][A-Z]*;\n     _ZTVSt[0-9][0-9][a-d]*;\n-    _ZTVSt[0-9][0-9][f-r]*;\n+    _ZTVSt[0-9][0-9][f-k]*;\n+    _ZTVSt11logic_error;\n+    _ZTVSt12length_error;\n+    _ZTVSt[0-9][0-9][m-r]*;\n     _ZTVSt[0-9][0-9][t-z]*;\n     _ZTVSt[0-9][0-9]e[^r]*;\n     _ZTVSt[0-9][0-9]s[^y]*;\n@@ -484,7 +508,10 @@ GLIBCXX_3.4 {\n #   _ZTISt[0-9][0-9][A-Za-z]*;\n     _ZTISt[0-9][0-9][A-Z]*;\n     _ZTISt[0-9][0-9][a-d]*;\n-    _ZTISt[0-9][0-9][f-r]*;\n+    _ZTISt[0-9][0-9][f-k]*;\n+    _ZTISt11logic_error;\n+    _ZTISt12length_error;\n+    _ZTISt[0-9][0-9][m-r]*;\n     _ZTISt[0-9][0-9][t-z]*;\n     _ZTISt[0-9][0-9]e[^r]*;\n     _ZTISt[0-9][0-9]s[^y]*;\n@@ -508,7 +535,10 @@ GLIBCXX_3.4 {\n #    _ZTSSt[0-9][0-9][A-Za-z]*;\n     _ZTSSt[0-9][0-9][A-Z]*;\n     _ZTSSt[0-9][0-9][a-d]*;\n-    _ZTSSt[0-9][0-9][f-r]*;\n+    _ZTSSt[0-9][0-9][f-k]*;\n+    _ZTSSt11logic_error;\n+    _ZTSSt12length_error;\n+    _ZTSSt[0-9][0-9][m-r]*;\n     _ZTSSt[0-9][0-9][t-z]*;\n     _ZTSSt[0-9][0-9]e[^r]*;\n     _ZTSSt[0-9][0-9]s[^y]*;\n@@ -785,13 +815,23 @@ GLIBCXX_3.4.10 {\n \n     _ZNSt15basic_streambufI[cw]St11char_traitsI[cw]EE6stosscEv;\n \n-\n     _ZN9__gnu_cxx18stdio_sync_filebufI[cw]St11char_traitsI[cw]EE4syncEv;\n     _ZN9__gnu_cxx18stdio_sync_filebufI[cw]St11char_traitsI[cw]EE[5-9CD]*;\n \n } GLIBCXX_3.4.9;\n \n GLIBCXX_3.4.11 {\n+\t \n+    # atomic\n+    __atomic_flag_for_address;\n+    __atomic_flag_wait_explicit;\n+    atomic_flag_clear;\n+    atomic_flag_clear_explicit;\n+    atomic_flag_fence;\n+    atomic_flag_test_and_set;\n+    atomic_flag_test_and_set_explicit;\n+    atomic_global_fence_compatibility;\n+\n     # system_error\n     _ZSt15system_category;\n "}, {"sha": "6e6e1996e62d57298deb7c65258918e21d809fb1", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 101, "deletions": 1, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -17947,6 +17947,106 @@ _ACEOF\n   fi\n \n \n+\n+  echo \"$as_me:$LINENO: checking for ISO C++200x standard layout type support\" >&5\n+echo $ECHO_N \"checking for ISO C++200x standard layout type support... $ECHO_C\" >&6\n+  if test \"${ac_standard_layout+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+\n+\n+  ac_ext=cc\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS='-std=gnu++0x'\n+\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+struct b\n+                  {\n+  \t\t    bool t;\n+\n+\t\t    // Need standard layout relaxation from POD\n+\t\t    private:\n+  \t\t    b& operator=(const b&);\n+  \t\t    b(const b&);\n+\t\t    };\n+\n+\t\t    int main()\n+\t\t    {\n+\t\t      b tst1 = { false };\n+\t\t       return 0;\n+\t\t    }\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_standard_layout=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_standard_layout=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+fi\n+\n+  echo \"$as_me:$LINENO: result: $ac_standard_layout\" >&5\n+echo \"${ECHO_T}$ac_standard_layout\" >&6\n+  if test x\"$ac_standard_layout\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_USE_STANDARD_LAYOUT 1\n+_ACEOF\n+\n+  fi\n+\n+\n # No surprises, no surprises...\n \n   echo \"$as_me:$LINENO: checking for thread model used by GCC\" >&5\n@@ -17988,7 +18088,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n   # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 17991 \"configure\"\n+#line 18091 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int."}, {"sha": "1930189ab5d84543d7b055a5e0b2f14152638a0f", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -113,6 +113,7 @@ GLIBCXX_ENABLE_FULLY_DYNAMIC_STRING([no])\n \n # Checks for operating systems support that don't require linking.\n GLIBCXX_CHECK_SYSTEM_ERROR\n+GLIBCXX_CHECK_STANDARD_LAYOUT\n \n # No surprises, no surprises...\n GLIBCXX_ENABLE_THREADS"}, {"sha": "da58aa6abf07233c308480abf1ddaa6a6f56c758", "filename": "libstdc++-v3/doc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2FMakefile.in?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -49,6 +49,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n+\t$(top_srcdir)/../config/proginstall.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n \t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\"}, {"sha": "0d002273c57cdfebc0983ce69d5acc2bc7d8e6ee", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -620,6 +620,7 @@ c_base_headers = \\\n \t${c_base_srcdir}/csetjmp \\\n \t${c_base_srcdir}/csignal \\\n \t${c_base_srcdir}/cstdarg \\\n+\t${c_base_srcdir}/cstdatomic \\\n \t${c_base_srcdir}/cstdbool \\\n \t${c_base_srcdir}/cstddef \\\n \t${c_base_srcdir}/cstdint \\\n@@ -643,7 +644,8 @@ if GLIBCXX_C_HEADERS_C_GLOBAL\n c_compatibility_headers = \\\n \t${c_compatibility_srcdir}/complex.h \\\n \t${c_compatibility_srcdir}/fenv.h \\\n-\t${c_compatibility_srcdir}/tgmath.h \n+\t${c_compatibility_srcdir}/tgmath.h \\\n+\t${c_compatibility_srcdir}/stdatomic.h \n endif\n \n if GLIBCXX_C_HEADERS_C"}, {"sha": "9bd5091f132a4b541649d7d88409ad2dba6e123e", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -49,6 +49,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n+\t$(top_srcdir)/../config/proginstall.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n \t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n@@ -867,6 +868,7 @@ c_base_headers = \\\n \t${c_base_srcdir}/csetjmp \\\n \t${c_base_srcdir}/csignal \\\n \t${c_base_srcdir}/cstdarg \\\n+\t${c_base_srcdir}/cstdatomic \\\n \t${c_base_srcdir}/cstdbool \\\n \t${c_base_srcdir}/cstddef \\\n \t${c_base_srcdir}/cstdint \\\n@@ -885,7 +887,8 @@ c_compatibility_builddir = .\n @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@c_compatibility_headers = \\\n @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\t${c_compatibility_srcdir}/complex.h \\\n @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\t${c_compatibility_srcdir}/fenv.h \\\n-@GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\t${c_compatibility_srcdir}/tgmath.h \n+@GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\t${c_compatibility_srcdir}/tgmath.h \\\n+@GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\t${c_compatibility_srcdir}/stdatomic.h \n \n @GLIBCXX_C_HEADERS_C_STD_TRUE@c_compatibility_headers = \n @GLIBCXX_C_HEADERS_C_TRUE@c_compatibility_headers = \\"}, {"sha": "e38cfe0518436b9fbd2fcc54974cc5c5087b37ac", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -1,7 +1,7 @@\n // Predefined symbols and macros -*- C++ -*-\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007 Free Software Foundation, Inc.\n+// 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -216,6 +216,20 @@ namespace std\n }\n #endif\n \n+// Defines for C compatibility. In particular, define extern \"C\"\n+// linkage only when using  C++, same with namespaces.\n+#if __cplusplus\n+# define _GLIBCXX_BEGIN_EXTERN_C extern \"C\" {\n+# define _GLIBCXX_END_EXTERN_C }\n+#else\n+# define _GLIBCXX_BEGIN_EXTERN_C\n+# define _GLIBCXX_END_EXTERN_C\n+# undef _GLIBCXX_BEGIN_NAMESPACE\n+# undef _GLIBCXX_END_NAMESPACE\n+# define _GLIBCXX_BEGIN_NAMESPACE(X) \n+# define _GLIBCXX_END_NAMESPACE \n+#endif\n+\n // Define if compatibility should be provided for -mlong-double-64.\n #undef _GLIBCXX_LONG_DOUBLE_COMPAT\n "}, {"sha": "e5f7dcfe6c120e4caac2f7c07362fd359a387d37", "filename": "libstdc++-v3/include/c_compatibility/stdatomic.h", "status": "added", "additions": 387, "deletions": 0, "changes": 387, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,387 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file stdatomic.h\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#include <bits/c++config.h>\n+#include <stddef.h>\n+#include <stdbool.h> // XXX need to define bool w/o stdbool.h in tr1/cstdbool\n+\n+#ifndef _GLIBCXX_STDATOMIC_H\n+#define _GLIBCXX_STDATOMIC_H 1\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+_GLIBCXX_BEGIN_EXTERN_C\n+\n+  /// Enumeration for memory_order\n+  typedef enum memory_order \n+    {\n+      memory_order_relaxed, \n+      memory_order_acquire, \n+      memory_order_release,\n+      memory_order_acq_rel, \n+      memory_order_seq_cst\n+    } memory_order;\n+\n+\n+  // Base for atomic_flag.\n+  struct __atomic_flag_base\n+  {\n+    bool _M_b;\n+  };\n+\n+  // Base for atomic_address\n+  struct __atomic_address_base\n+  {\n+    void* _M_i;\n+  };\n+\n+  // POD base classes for atomic intgral types.\n+  struct __atomic_bool_base\n+  {\n+    bool _M_i;\n+  };\n+\n+  struct __atomic_char_base\n+  {\n+    char _M_i;\n+  };\n+\n+  struct __atomic_schar_base\n+  {\n+    signed char _M_i;\n+  };\n+\n+  struct __atomic_uchar_base\n+  {\n+    unsigned char _M_i;\n+  };\n+\n+  struct __atomic_short_base\n+  {\n+    short _M_i;\n+  };\n+\n+  struct __atomic_ushort_base\n+  {\n+    unsigned short _M_i;\n+  };\n+\n+  struct __atomic_int_base\n+  {\n+    int _M_i;\n+  };\n+\n+  struct __atomic_uint_base\n+  {\n+    unsigned int _M_i;\n+  };\n+\n+  struct __atomic_long_base\n+  {\n+    long _M_i;\n+  };\n+\n+  struct __atomic_ulong_base\n+  {\n+    unsigned long _M_i;\n+  };\n+\n+  struct __atomic_llong_base\n+  {\n+    long long _M_i;\n+  };\n+\n+  struct __atomic_ullong_base\n+  {\n+    unsigned long long _M_i;\n+  };\n+\n+  struct __atomic_wchar_t_base\n+  {\n+    wchar_t _M_i;\n+  };\n+\n+  // Switch atomic integral base types based on C or C++.  In\n+  // addition, for \"C\" only provide type-generic macros for atomic\n+  // operations. (As C++ accomplishes the same thing with sets of\n+  // overloaded functions.\n+#ifdef __cplusplus\n+\n+#define ATOMIC_FLAG_INIT { { false } }\n+#define _ATOMIC_MEMBER_ ((__a)->_M_base._M_i)\n+\n+extern \"C++\"\n+{\n+  struct atomic_flag;\n+  struct atomic_address;\n+  struct atomic_bool;\n+  struct atomic_char;\n+  struct atomic_schar;\n+  struct atomic_uchar;\n+  struct atomic_short;\n+  struct atomic_ushort;\n+  struct atomic_int;\n+  struct atomic_uint;\n+  struct atomic_long;\n+  struct atomic_ulong;\n+  struct atomic_llong;\n+  struct atomic_ullong;\n+  struct atomic_wchar_t;\n+  template<typename _Tp>\n+    struct atomic;\n+}\n+#else\n+\n+#define ATOMIC_FLAG_INIT { false }\n+#define _ATOMIC_MEMBER_ ((__a)->_M_i)\n+\n+  typedef struct __atomic_flag_base \tatomic_flag;\n+  typedef struct __atomic_address_base \tatomic_address;\n+  typedef struct __atomic_bool_base\tatomic_bool;\n+  typedef struct __atomic_char_base \tatomic_char;\n+  typedef struct __atomic_schar_base \tatomic_schar;\n+  typedef struct __atomic_uchar_base \tatomic_uchar;\n+  typedef struct __atomic_short_base \tatomic_short;\n+  typedef struct __atomic_ushort_base \tatomic_ushort;\n+  typedef struct __atomic_int_base \tatomic_int;\n+  typedef struct __atomic_uint_base \tatomic_uint;\n+  typedef struct __atomic_long_base \tatomic_long;\n+  typedef struct __atomic_ulong_base \tatomic_ulong;\n+  typedef struct __atomic_llong_base \tatomic_llong;\n+  typedef struct __atomic_ullong_base \tatomic_ullong;\n+  typedef struct __atomic_wchar_t_base \tatomic_wchar_t;\n+\n+#define atomic_is_lock_free(__a)\t\t\t\t\\\n+  false\n+\n+#define atomic_load(__a)\t\t\t\t\t\\\n+  _ATOMIC_LOAD_(__a, memory_order_seq_cst)\n+\n+#define atomic_load_explicit(__a, __x)\t\t\t\t\\\n+  _ATOMIC_LOAD_(__a, __x)\n+\n+#define atomic_store(__a, __m)\t\t\t\t\t\\\n+  _ATOMIC_STORE_(__a, __m, memory_order_seq_cst)\n+\n+#define atomic_store_explicit(__a, __m, __x)\t\t\t\\\n+  _ATOMIC_STORE_(__a, __m, __x)\n+\n+#define atomic_swap(__a, __m)\t\t\t\t\t\\\n+  _ATOMIC_MODIFY_(__a, =, __m, memory_order_seq_cst)\n+\n+#define atomic_swap_explicit(__a, __m, __x)\t\t\t\\\n+  _ATOMIC_MODIFY_(__a, =, __m, __x)\n+\n+#define atomic_compare_swap(__a, __e, __m)\t\t\t\\\n+  _ATOMIC_CMPSWP_(__a, __e, __m, memory_order_seq_cst)\n+\n+#define atomic_compare_swap_explicit(__a, __e, __m, __x, __y)\t\\\n+  _ATOMIC_CMPSWP_(__a, __e, __m, __x)\n+\n+#define atomic_fence(__a, __x)\t\t\t\t\t\\\n+  ({ _ATOMIC_FENCE_(__a, __x); })\n+\n+#define atomic_fetch_add_explicit(__a, __m, __x)\t\t\\\n+  _ATOMIC_MODIFY_(__a, +=, __m, __x)\n+\n+#define atomic_fetch_add(__a, __m)\t\t\t\t\\\n+  _ATOMIC_MODIFY_(__a, +=, __m, memory_order_seq_cst)\n+\n+#define atomic_fetch_sub_explicit(__a, __m, __x)\t\t\\\n+  _ATOMIC_MODIFY_(__a, -=, __m, __x)\n+\n+#define atomic_fetch_sub(__a, __m)\t\t\t\t\\\n+  _ATOMIC_MODIFY_(__a, -=, __m, memory_order_seq_cst)\n+\n+#define atomic_fetch_and_explicit(__a, __m, __x)\t\t\\\n+  _ATOMIC_MODIFY_(__a, &=, __m, __x)\n+\n+#define atomic_fetch_and(__a, __m)\t\t\t\t\\\n+  _ATOMIC_MODIFY_(__a, &=, __m, memory_order_seq_cst)\n+\n+#define atomic_fetch_or_explicit(__a, __m, __x) \t\t\\\n+  _ATOMIC_MODIFY_(__a, |=, __m, __x)\n+\n+#define atomic_fetch_or(__a, __m)\t\t\t\t\\\n+  _ATOMIC_MODIFY_(__a, |=, __m, memory_order_seq_cst)\n+\n+#define atomic_fetch_xor_explicit(__a, __m, __x)\t\t\\\n+  _ATOMIC_MODIFY_(__a, ^=, __m, __x)\n+\n+#define atomic_fetch_xor(__a, __m)\t\t\t\t\\\n+  _ATOMIC_MODIFY_(__a, ^=, __m, memory_order_seq_cst)\n+\n+#endif\n+  \n+  // Typedefs for other atomic integral types.\n+  typedef atomic_schar \t\tatomic_int_least8_t;\n+  typedef atomic_uchar \t\tatomic_uint_least8_t;\n+  typedef atomic_short \t\tatomic_int_least16_t;\n+  typedef atomic_ushort \tatomic_uint_least16_t;\n+  typedef atomic_int \t\tatomic_int_least32_t;\n+  typedef atomic_uint \t\tatomic_uint_least32_t;\n+  typedef atomic_llong \t\tatomic_int_least64_t;\n+  typedef atomic_ullong \tatomic_uint_least64_t;\n+\n+  typedef atomic_schar \t\tatomic_int_fast8_t;\n+  typedef atomic_uchar \t\tatomic_uint_fast8_t;\n+  typedef atomic_short \t\tatomic_int_fast16_t;\n+  typedef atomic_ushort \tatomic_uint_fast16_t;\n+  typedef atomic_int \t\tatomic_int_fast32_t;\n+  typedef atomic_uint \t\tatomic_uint_fast32_t;\n+  typedef atomic_llong \t\tatomic_int_fast64_t;\n+  typedef atomic_ullong \tatomic_uint_fast64_t;\n+\n+  typedef atomic_long \t\tatomic_intptr_t;\n+  typedef atomic_ulong \t\tatomic_uintptr_t;\n+\n+  typedef atomic_long \t\tatomic_ssize_t;\n+  typedef atomic_ulong \t\tatomic_size_t;\n+\n+  typedef atomic_llong \t\tatomic_intmax_t;\n+  typedef atomic_ullong \tatomic_uintmax_t;\n+\n+  typedef atomic_long \t\tatomic_ptrdiff_t;\n+\n+  typedef atomic_int_least16_t\tatomic_char16_t;\n+  typedef atomic_int_least32_t\tatomic_char32_t;\n+\n+  // Accessor functions for atomic_flag.\n+  extern bool \n+  atomic_flag_test_and_set(volatile atomic_flag*);\n+  \n+  extern bool \n+  atomic_flag_test_and_set_explicit(volatile atomic_flag*, memory_order);\n+  \n+  extern void \n+  atomic_flag_clear(volatile atomic_flag*);\n+  \n+  extern void \n+  atomic_flag_clear_explicit(volatile atomic_flag*, memory_order);\n+  \n+  extern void \n+  atomic_flag_fence(const volatile atomic_flag*, memory_order);\n+  \n+  extern void \n+  __atomic_flag_wait_explicit(volatile atomic_flag*, memory_order);\n+  \n+  extern volatile atomic_flag* \n+  __atomic_flag_for_address(const volatile void* __z) __attribute__((const));\n+   \n+  // External object.\n+  extern const atomic_flag atomic_global_fence_compatibility;\n+  \n+  /// 29.2 Lock-free Property\n+#define ATOMIC_INTEGRAL_LOCK_FREE 0\n+#define ATOMIC_ADDRESS_LOCK_FREE 0\n+\n+  // Implementation specific defines.\n+#define _ATOMIC_LOAD_(__a, __x)\t\t\t\t\t\t\\\n+  ({ volatile __typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t\\\n+    volatile atomic_flag* __g = __atomic_flag_for_address(__p); \t\\\n+    __atomic_flag_wait_explicit(__g, __x);\t\t\t\t\\\n+    __typeof__ _ATOMIC_MEMBER_ __r = *__p;\t\t\t\t\\\n+    atomic_flag_clear_explicit(__g, __x);\t\t       \t\t\\\n+    __r; })\n+\n+#define _ATOMIC_STORE_(__a, __m, __x)\t\t\t\t\t\\\n+  ({ volatile __typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t\\\n+    __typeof__(__m) __v = (__m);\t\t\t       \t\t\\\n+    volatile atomic_flag* __g = __atomic_flag_for_address(__p); \t\\\n+    __atomic_flag_wait_explicit(__g, __x);\t\t\t\t\\\n+    *__p = __v;\t\t\t\t\t\t\t\t\\\n+    atomic_flag_clear_explicit(__g, __x);\t\t       \t\t\\\n+    __v; })\n+\n+#define _ATOMIC_MODIFY_(__a, __o, __m, __x)\t\t\t\t\\\n+  ({ volatile __typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t\\\n+    __typeof__(__m) __v = (__m);\t\t\t       \t\t\\\n+    volatile atomic_flag* __g = __atomic_flag_for_address(__p); \t\\\n+    __atomic_flag_wait_explicit(__g, __x);\t\t\t\t\\\n+    __typeof__ _ATOMIC_MEMBER_ __r = *__p;\t\t\t\t\\\n+    *__p __o __v;\t\t\t\t\t       \t\t\\\n+    atomic_flag_clear_explicit(__g, __x);\t\t       \t\t\\\n+    __r; })\n+\n+#define _ATOMIC_CMPSWP_(__a, __e, __m, __x)\t\t\t\t\\\n+  ({ volatile __typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t\\\n+    __typeof__(__e) __q = (__e);\t\t\t       \t\t\\\n+    __typeof__(__m) __v = (__m);\t\t\t       \t\t\\\n+    bool __r;\t\t\t\t\t\t       \t\t\\\n+    volatile atomic_flag* __g = __atomic_flag_for_address(__p); \t\\\n+    __atomic_flag_wait_explicit(__g, __x);\t\t\t\t\\\n+    __typeof__ _ATOMIC_MEMBER_ __t__ = *__p;\t\t       \t\t\\\n+    if (__t__ == *__q) { *__p = __v; __r = true; }\t\t\t\\\n+    else { *__q = __t__; __r = false; }\t\t       \t\t\t\\\n+    atomic_flag_clear_explicit(__g, __x);\t\t       \t\t\\\n+    __r; })\n+\n+#define _ATOMIC_FENCE_(__a, __x)\t\t\t       \t\t\\\n+  ({ volatile __typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t\\\n+    volatile atomic_flag* __g = __atomic_flag_for_address(__p); \t\\\n+    atomic_flag_fence(__g, __x);\t\t\t       \t\t\\\n+  })\n+\n+_GLIBCXX_END_EXTERN_C\n+_GLIBCXX_END_NAMESPACE\n+\n+#ifdef __cplusplus\n+// Inject into global namespace iff C++.\n+using std::memory_order;\n+using std::memory_order_relaxed;\n+using std::memory_order_acquire;\n+using std::memory_order_release;\n+using std::memory_order_acq_rel;\n+using std::memory_order_seq_cst;\n+\n+using std::atomic_flag;\n+\n+using std::atomic_bool;\n+using std::atomic_char;\n+using std::atomic_schar;\n+using std::atomic_uchar;\n+using std::atomic_short;\n+using std::atomic_ushort;\n+using std::atomic_int;\n+using std::atomic_uint;\n+using std::atomic_long;\n+using std::atomic_ulong;\n+using std::atomic_llong;\n+using std::atomic_ullong;\n+using std::atomic_wchar_t;\n+\n+using std::atomic_address;\n+using std::atomic;\n+\n+#endif\n+\n+#endif"}, {"sha": "22fde89603b5d7d7d9b77390482719df7aff1b2d", "filename": "libstdc++-v3/include/c_global/cstdatomic", "status": "added", "additions": 4100, "deletions": 0, "changes": 4100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdatomic?ref=d466a7e21c61360550e04a66dcd2cacd5172d672"}, {"sha": "03f28a7832342e043a30f618ea25345ee6a1da68", "filename": "libstdc++-v3/include/ext/typelist.h", "status": "modified", "additions": 91, "deletions": 18, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftypelist.h?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -71,10 +71,21 @@ namespace typelist\n       typedef Typelist \ttail;\n     };\n \n-  template<typename Fn, class Typelist>\n+  // Apply all typelist types to unary functor.\n+  template<typename Fn, typename Typelist>\n     void\n     apply(Fn&, Typelist);\n \n+  /// Apply all typelist types to generator functor.\n+  template<typename Gn, typename Typelist>\n+    void\n+    apply_generator(Gn&, Typelist);\n+\n+  // Apply all typelist types and values to generator functor.\n+  template<typename Gn, typename TypelistT, typename TypelistV>\n+    void\n+    apply_generator(Gn&, TypelistT, TypelistV);\n+\n   template<typename Typelist0, typename Typelist1>\n     struct append;\n \n@@ -135,20 +146,64 @@ namespace detail\n     struct apply_<Fn, chain<Hd, Tl> >\n     {\n       void\n-      operator() (Fn& f)\n+      operator()(Fn& f)\n       {\n \tf.operator()(Hd());\n \tapply_<Fn, Tl> next;\n \tnext(f);\n       }\n-  };\n+    };\n \n   template<typename Fn>\n     struct apply_<Fn, null_type>\n     {\n       void\n       operator()(Fn&) { }\n-  };\n+    };\n+\n+  template<typename Gn, typename Typelist_Chain>\n+    struct apply_generator1_;\n+\n+  template<typename Gn, typename Hd, typename Tl>\n+    struct apply_generator1_<Gn, chain<Hd, Tl> >\n+    {\n+      void\n+      operator()(Gn& g)\n+      {\n+\tg.template operator()<Hd>();\n+\tapply_generator1_<Gn, Tl> next;\n+\tnext(g);\n+      }\n+    };\n+\n+  template<typename Gn>\n+    struct apply_generator1_<Gn, null_type>\n+    {\n+      void\n+      operator()(Gn&) { }\n+    };\n+\n+  template<typename Gn, typename TypelistT_Chain, typename TypelistV_Chain>\n+    struct apply_generator2_;\n+\n+  template<typename Gn, typename Hd1, typename TlT, typename Hd2, typename TlV>\n+    struct apply_generator2_<Gn, chain<Hd1, TlT>, chain<Hd2, TlV> >\n+    {\n+      void\n+      operator()(Gn& g)\n+      {\n+\tg.template operator()<Hd1, Hd2>();\n+\tapply_generator2_<Gn, TlT, TlV> next;\n+\tnext(g);\n+      }\n+    };\n+\n+  template<typename Gn>\n+    struct apply_generator2_<Gn, null_type, null_type>\n+    {\n+      void\n+      operator()(Gn&) { }\n+    };\n \n   template<typename Typelist_Chain0, typename Typelist_Chain1>\n     struct append_;\n@@ -294,20 +349,20 @@ namespace detail\n     struct chain_flatten_;\n \n   template<typename Hd_Tl>\n-  struct chain_flatten_<chain<Hd_Tl, null_type> >\n-  {\n-    typedef typename Hd_Tl::root \t\t\t\ttype;\n-  };\n+    struct chain_flatten_<chain<Hd_Tl, null_type> >\n+    {\n+      typedef typename Hd_Tl::root \t\t\t\ttype;\n+    };\n \n   template<typename Hd_Typelist, class Tl_Typelist>\n-  struct chain_flatten_<chain<Hd_Typelist, Tl_Typelist> >\n-  {\n-  private:\n-    typedef typename chain_flatten_<Tl_Typelist>::type \t\trest_type;\n-    typedef append<Hd_Typelist, node<rest_type> >\t\tappend_type;\n-  public:\n-    typedef typename append_type::type::root \t\t\ttype;\n-  };\n+    struct chain_flatten_<chain<Hd_Typelist, Tl_Typelist> >\n+    {\n+    private:\n+      typedef typename chain_flatten_<Tl_Typelist>::type \trest_type;\n+      typedef append<Hd_Typelist, node<rest_type> >\t\tappend_type;\n+    public:\n+      typedef typename append_type::type::root \t\t\ttype;\n+    };\n } // namespace detail\n } // namespace typelist\n \n@@ -333,14 +388,32 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n namespace typelist\n {\n-  template<typename Fn, class Typelist>\n+  template<typename Fn, typename Typelist>\n     void\n     apply(Fn& fn, Typelist)\n     {\n       detail::apply_<Fn, typename Typelist::root> a;\n       a(fn);\n     }\n \n+  template<typename Fn, typename Typelist>\n+    void\n+    apply_generator(Fn& fn, Typelist)\n+    {\n+      detail::apply_generator1_<Fn, typename Typelist::root> a;\n+      a(fn);\n+    }\n+\n+  template<typename Fn, typename TypelistT, typename TypelistV>\n+    void\n+    apply_generator(Fn& fn, TypelistT, TypelistV)\n+    {\n+      typedef typename TypelistT::root rootT;\n+      typedef typename TypelistV::root rootV;\n+      detail::apply_generator2_<Fn, rootT, rootV> a;\n+      a(fn);\n+    }\n+\n   template<typename Typelist0, typename Typelist1>\n     struct append\n     {"}, {"sha": "c2302be25a7f1669cb3e22386631232eb76062b7", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -49,6 +49,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n+\t$(top_srcdir)/../config/proginstall.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n \t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\"}, {"sha": "631a3f3fa0dc44e289077751166d70b415ff891b", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -51,6 +51,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n+\t$(top_srcdir)/../config/proginstall.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n \t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\"}, {"sha": "c7ce1cafb327bf44b339fd0bf168f9215e5d90a4", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -49,6 +49,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n+\t$(top_srcdir)/../config/proginstall.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n \t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\"}, {"sha": "e6c0aad184a819c694d1207e0ed4593f85ad7a6b", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -134,6 +134,7 @@ endif\n \n # Sources present in the src directory.\n sources = \\\n+\tatomic.cc \\\n \tbitmap_allocator.cc \\\n \tpool_allocator.cc \\\n \tmt_allocator.cc \\\n@@ -248,6 +249,11 @@ date_time.lo: date_time.cc\n date_time.o: date_time.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+atomic.lo: atomic.cc\n+\t$(LTCXXCOMPILE) -x c++ -std=gnu++0x -c $<\n+atomic.o: atomic.cc\n+\t$(CXXCOMPILE) -x c++ -std=gnu++0x -c $<\n+\n if GLIBCXX_LDBL_COMPAT\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64."}, {"sha": "744833f75c28f353fc2e7dcf3028ee7ce31fdab5", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -50,6 +50,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n+\t$(top_srcdir)/../config/proginstall.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n \t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n@@ -69,18 +70,18 @@ am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;\n am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\"\n toolexeclibLTLIBRARIES_INSTALL = $(INSTALL)\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n-am__libstdc___la_SOURCES_DIST = bitmap_allocator.cc pool_allocator.cc \\\n-\tmt_allocator.cc codecvt.cc compatibility.cc complex_io.cc \\\n-\tctype.cc date_time.cc debug.cc functexcept.cc hash.cc \\\n-\thash_c++0x.cc globals_io.cc hashtable.cc hashtable_c++0x.cc \\\n-\tios.cc ios_failure.cc ios_init.cc ios_locale.cc limits.cc \\\n-\tlist.cc debug_list.cc locale.cc locale_init.cc \\\n-\tlocale_facets.cc localename.cc stdexcept.cc strstream.cc \\\n-\tsystem_error.cc tree.cc allocator-inst.cc concept-inst.cc \\\n-\tfstream-inst.cc ext-inst.cc ios-inst.cc iostream-inst.cc \\\n-\tistream-inst.cc istream.cc locale-inst.cc misc-inst.cc \\\n-\tostream-inst.cc sstream-inst.cc streambuf-inst.cc streambuf.cc \\\n-\tstring-inst.cc valarray-inst.cc wlocale-inst.cc \\\n+am__libstdc___la_SOURCES_DIST = atomic.cc bitmap_allocator.cc \\\n+\tpool_allocator.cc mt_allocator.cc codecvt.cc compatibility.cc \\\n+\tcomplex_io.cc ctype.cc date_time.cc debug.cc functexcept.cc \\\n+\thash.cc hash_c++0x.cc globals_io.cc hashtable.cc \\\n+\thashtable_c++0x.cc ios.cc ios_failure.cc ios_init.cc \\\n+\tios_locale.cc limits.cc list.cc debug_list.cc locale.cc \\\n+\tlocale_init.cc locale_facets.cc localename.cc stdexcept.cc \\\n+\tstrstream.cc system_error.cc tree.cc allocator-inst.cc \\\n+\tconcept-inst.cc fstream-inst.cc ext-inst.cc ios-inst.cc \\\n+\tiostream-inst.cc istream-inst.cc istream.cc locale-inst.cc \\\n+\tmisc-inst.cc ostream-inst.cc sstream-inst.cc streambuf-inst.cc \\\n+\tstreambuf.cc string-inst.cc valarray-inst.cc wlocale-inst.cc \\\n \twstring-inst.cc atomicity.cc codecvt_members.cc \\\n \tcollate_members.cc ctype_members.cc messages_members.cc \\\n \tmonetary_members.cc numeric_members.cc time_members.cc \\\n@@ -94,19 +95,19 @@ am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n @ENABLE_PARALLEL_TRUE@\tparallel_settings.lo\n am__objects_4 = basic_file.lo c++locale.lo $(am__objects_2) \\\n \t$(am__objects_3)\n-am__objects_5 = bitmap_allocator.lo pool_allocator.lo mt_allocator.lo \\\n-\tcodecvt.lo compatibility.lo complex_io.lo ctype.lo \\\n-\tdate_time.lo debug.lo functexcept.lo hash.lo hash_c++0x.lo \\\n-\tglobals_io.lo hashtable.lo hashtable_c++0x.lo ios.lo \\\n-\tios_failure.lo ios_init.lo ios_locale.lo limits.lo list.lo \\\n-\tdebug_list.lo locale.lo locale_init.lo locale_facets.lo \\\n-\tlocalename.lo stdexcept.lo strstream.lo system_error.lo \\\n-\ttree.lo allocator-inst.lo concept-inst.lo fstream-inst.lo \\\n-\text-inst.lo ios-inst.lo iostream-inst.lo istream-inst.lo \\\n-\tistream.lo locale-inst.lo misc-inst.lo ostream-inst.lo \\\n-\tsstream-inst.lo streambuf-inst.lo streambuf.lo string-inst.lo \\\n-\tvalarray-inst.lo wlocale-inst.lo wstring-inst.lo \\\n-\t$(am__objects_1) $(am__objects_4)\n+am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n+\tmt_allocator.lo codecvt.lo compatibility.lo complex_io.lo \\\n+\tctype.lo date_time.lo debug.lo functexcept.lo hash.lo \\\n+\thash_c++0x.lo globals_io.lo hashtable.lo hashtable_c++0x.lo \\\n+\tios.lo ios_failure.lo ios_init.lo ios_locale.lo limits.lo \\\n+\tlist.lo debug_list.lo locale.lo locale_init.lo \\\n+\tlocale_facets.lo localename.lo stdexcept.lo strstream.lo \\\n+\tsystem_error.lo tree.lo allocator-inst.lo concept-inst.lo \\\n+\tfstream-inst.lo ext-inst.lo ios-inst.lo iostream-inst.lo \\\n+\tistream-inst.lo istream.lo locale-inst.lo misc-inst.lo \\\n+\tostream-inst.lo sstream-inst.lo streambuf-inst.lo streambuf.lo \\\n+\tstring-inst.lo valarray-inst.lo wlocale-inst.lo \\\n+\twstring-inst.lo $(am__objects_1) $(am__objects_4)\n am_libstdc___la_OBJECTS = $(am__objects_5)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)\n@@ -367,6 +368,7 @@ host_sources_extra = \\\n \n # Sources present in the src directory.\n sources = \\\n+\tatomic.cc \\\n \tbitmap_allocator.cc \\\n \tpool_allocator.cc \\\n \tmt_allocator.cc \\\n@@ -839,6 +841,11 @@ date_time.lo: date_time.cc\n date_time.o: date_time.cc\n \t$(CXXCOMPILE) -std=gnu++0x -c $<\n \n+atomic.lo: atomic.cc\n+\t$(LTCXXCOMPILE) -x c++ -std=gnu++0x -c $<\n+atomic.o: atomic.cc\n+\t$(CXXCOMPILE) -x c++ -std=gnu++0x -c $<\n+\n # Use special rules for compatibility-ldbl.cc compilation, as we need to\n # pass -mlong-double-64.\n @GLIBCXX_LDBL_COMPAT_TRUE@compatibility-ldbl.lo: compatibility-ldbl.cc"}, {"sha": "e43733332db3050bb41f5b0cac3e89b29b8ca446", "filename": "libstdc++-v3/src/atomic.cc", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fsrc%2Fatomic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Fsrc%2Fatomic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fatomic.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,116 @@\n+// Support for atomic operations -*- C++ -*-\n+\n+// Copyright (C) 2008\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <stdint.h>\n+#include <cstdatomic>\n+\n+#define LOGSIZE 4\n+\n+namespace\n+{\n+  atomic_flag volatile __atomic_flag_anon_table__[ 1 << LOGSIZE ] =\n+    {\n+      ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT,\n+      ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT,\n+      ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT,\n+      ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT,\n+    };\n+} // anonymous namespace\n+\n+namespace std\n+{\n+  extern \"C\" {\n+\n+  const atomic_flag atomic_global_fence_compatibility = ATOMIC_FLAG_INIT;\n+\n+  bool \n+  atomic_flag_test_and_set_explicit(volatile atomic_flag* __a, \n+\t\t\t\t    memory_order __x)\n+  {\n+#ifdef _GLIBCXX_ATOMIC_BUILTINS\n+    if (__x >= memory_order_acq_rel)\n+      __sync_synchronize();\n+    return __sync_lock_test_and_set(&(__a->_M_base._M_b), 1);\n+#else\n+    bool result = __a->_M_base._M_b;\n+     __a->_M_base._M_b = true;\n+    return result;\n+#endif\n+  }\n+\n+  bool \n+  atomic_flag_test_and_set(volatile atomic_flag* __a)\n+  { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }\n+  \n+  void \n+  atomic_flag_clear_explicit(volatile atomic_flag* __a, memory_order __x)\n+  {\n+#ifdef _GLIBCXX_ATOMIC_BUILTINS\n+    __sync_lock_release(&(__a->_M_base._M_b));\n+    if (__x >= memory_order_acq_rel)\n+      __sync_synchronize();\n+#else\n+     __a->_M_base._M_b = false;\n+#endif\n+  } \n+\n+  void \n+  atomic_flag_clear(volatile atomic_flag* __a)\n+  { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }\n+  \n+  void \n+  atomic_flag_fence(const volatile atomic_flag*, memory_order)\n+  {\n+#ifdef _GLIBCXX_ATOMIC_BUILTINS\n+    __sync_synchronize(); \n+#endif\n+  } \n+\n+  void \n+  __atomic_flag_wait_explicit(volatile atomic_flag* __a, memory_order __x)\n+  { \n+    while (atomic_flag_test_and_set_explicit(__a, __x))\n+      { }; \n+  }\n+\n+  volatile atomic_flag* \n+  __atomic_flag_for_address(const volatile void* __z)\n+  {\n+    uintptr_t __u = reinterpret_cast<uintptr_t>(__z);\n+    __u += (__u >> 2) + (__u << 4);\n+    __u += (__u >> 7) + (__u << 5);\n+    __u += (__u >> 17) + (__u << 13);\n+    if (sizeof(uintptr_t) > 4) __u += (__u >> 31);\n+    __u &= ~((~uintptr_t(0)) << LOGSIZE);\n+    return __atomic_flag_anon_table__ + __u;\n+  }\n+\n+  } // extern \"C\"\n+} // namespace std"}, {"sha": "6c30410bb6f73315b8b3d3e02732e361efb5b40e", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++200x/all.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -36,6 +36,7 @@\n #include <csetjmp>\n #include <csignal>\n #include <cstdarg>\n+#include <cstdatomic>\n #include <cstdbool>\n #include <cstddef>\n #include <cstdint>\n@@ -67,6 +68,7 @@\n #include <math.h>\n #include <setjmp.h>\n #include <signal.h>\n+#include <stdatomic.h>\n #include <stdarg.h>\n #ifdef _GLIBCXX_HAVE_STDBOOL_H\n #include <stdbool.h>"}, {"sha": "435309860a33dc65bab67b469f936f123f3817f6", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/assign_neg.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+#include <testsuite_common_types.h>\n+\n+int main()\n+{\n+  __gnu_test::assignable test;\n+  __gnu_cxx::typelist::apply_generator(test, __gnu_test::atomics_tl());\n+  return 0;\n+}\n+\n+// { dg-error \"within this context\" \"\" { target *-*-* } 310 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 1750 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 1782 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 1799 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1816 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1832 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1848 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1864 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1880 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1896 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1913 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1929 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1945 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1961 }\n+// { dg-excess-errors \"In member function\" }"}, {"sha": "011933a8eb8ba6b3d2d0dc6fbb2106a8ea7d7b0f", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/copy_neg.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+#include <testsuite_common_types.h>\n+\n+int main()\n+{\n+  __gnu_test::copy_constructible test;\n+  __gnu_cxx::typelist::apply_generator(test, __gnu_test::atomics_tl());\n+  return 0;\n+}\n+\n+// { dg-error \"within this context\" \"\" { target *-*-* } 333 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 1749 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 1781 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 1798 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1814 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1831 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1847 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1863 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1879 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1895 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1912 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1928 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1944 }\n+// { dg-error \"is private\" \"\" { target *-*-* } 1960 }\n+// { dg-excess-errors \"In member function\" }"}, {"sha": "c8af19ad2ed86c383d30254ccbc0db6d48be572a", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/default.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fdefault.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+#include <testsuite_common_types.h>\n+\n+int main()\n+{\n+  __gnu_test::default_constructible test;\n+  __gnu_cxx::typelist::apply_generator(test, __gnu_test::atomics_tl());\n+  return 0;\n+}"}, {"sha": "da91e26a55dad31ad59f72fcab865b7c9cbead46", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/explicit_value.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fexplicit_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fexplicit_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fexplicit_value.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+#include <testsuite_common_types.h>\n+\n+int main()\n+{\n+  __gnu_test::explicit_value_constructible test;\n+  __gnu_cxx::typelist::apply_generator(test, __gnu_test::atomics_tl(), \n+\t\t\t\t       __gnu_test::integral_types::type());\n+  return 0;\n+}"}, {"sha": "5dafd093a01677ae3703ae0045056e246baf8758", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/requirements/explicit_instantiation/1.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file tests explicit instantiation of basic_string\n+\n+#include <cstdatomic>\n+#include <testsuite_character.h>\n+\n+template class std::atomic<__gnu_test::pod_char>;\n+template class std::atomic<__gnu_test::pod_char*>;"}, {"sha": "f6aee27ce51b68c391d53c8abcad71811f3a6793", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_address/cons/aggregate.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Faggregate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Faggregate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Faggregate.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile { xfail *-*-* } } \n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+\n+int main()\n+{\n+  std::atomic_address a = { { NULL } }; // { dg-excess-errors \"braces around\" }\n+  return 0;\n+}"}, {"sha": "ef50b9ed38fed070825086086c7eb21e524baa9a", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_address/cons/assign_neg.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fassign_neg.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+\n+void test01()\n+{\n+  // Assign.\n+  typedef std::atomic_address test_type;\n+  test_type t1;\n+  test_type t2;\n+  t1 = t2;\n+}\n+// { dg-error \"within this context\" \"\" { target *-*-* } 39 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 167 } "}, {"sha": "57732d8333551a112bafbb98915139dd95883938", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_address/cons/copy_neg.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fcopy_neg.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+\n+void test01()\n+{\n+  // Copy.\n+  typedef std::atomic_address test_type;\n+  test_type t1;\n+  test_type t2(t1);\n+}\n+// { dg-error \"within this context\" \"\" { target *-*-* } 38 } \n+// { dg-error \"is private\" \"\" { target *-*-* } 166 } "}, {"sha": "1d2c6cba50b54bf101ba65f4f70ae13f50e6525b", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_address/cons/default.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fdefault.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+\n+int main()\n+{\n+  // Default constructor.\n+  std::atomic_address a;\n+  return 0;\n+}"}, {"sha": "b455bf667cdc6147d9277ccd9da5f2e78ee95142", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_address/cons/explicit_value.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fexplicit_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fexplicit_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fexplicit_value.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+\n+int main()\n+{\n+  // Explicit value constructor.\n+  void* v = NULL;\n+  std::atomic_address a(v);\n+  return 0;\n+}"}, {"sha": "7ee633ebb32aad74c1976853d47a41ac093a5efd", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/atomic_global_fence_compatibility.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fatomic_global_fence_compatibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fatomic_global_fence_compatibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fatomic_global_fence_compatibility.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+\n+int main()\n+{\n+  using namespace std;\n+  atomic_flag_fence(&atomic_global_fence_compatibility, memory_order_acquire);\n+  atomic_global_fence_compatibility.fence(memory_order_release);\n+\n+  return 0;\n+}"}, {"sha": "151d85fc05062fb11d929c1661c7cf273cb93c55", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/cons/aggregate.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Faggregate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Faggregate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Faggregate.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile } \n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+\n+int main()\n+{\n+  // Only safe usage.\n+  std::atomic_flag guard = ATOMIC_FLAG_INIT;\n+  return 0;\n+}"}, {"sha": "5f8ff15dc522872d7de53e14a4ac6f483d95fcea", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/cons/assign_neg.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fassign_neg.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+\n+void test01()\n+{\n+  // Assign.\n+  typedef std::atomic_flag test_type;\n+  test_type t1;\n+  test_type t2;\n+  t1 = t2;\n+}\n+// { dg-error \"within this context\" \"\" { xfail *-*-* } 39 } \n+// { dg-error \"is private\" \"\" { xfail *-*-* } 89 } "}, {"sha": "3480d8c5e16e563f37eeb451d6056bc5db6cb828", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/cons/copy_neg.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fcopy_neg.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+\n+void test01()\n+{\n+  // Copy.\n+  typedef std::atomic_flag test_type;\n+  test_type t1;\n+  test_type t2(t1);\n+}\n+// { dg-error \"within this context\" \"\" { xfail *-*-* } 38 } \n+// { dg-error \"is private\" \"\" { xfail *-*-* } 88 } "}, {"sha": "b4fa3a755b2c12c20cc5082578f2d4cc2606fbf3", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/cons/default.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fdefault.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+\n+int main()\n+{\n+  // Default constructor.\n+  std::atomic_flag a;\n+  return 0;\n+}"}, {"sha": "351df912fff51b296ca4fadca1efa39a64ec14fe", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/requirements/standard_layout.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Frequirements%2Fstandard_layout.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Frequirements%2Fstandard_layout.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Frequirements%2Fstandard_layout.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+int main()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef std::atomic_flag test_type;\n+  VERIFY( std::has_trivial_default_constructor<test_type>::value );\n+  VERIFY( std::has_trivial_destructor<test_type>::value );\n+\n+  return 0;\n+}"}, {"sha": "9401af4d13b66520177cfcc858c4fdf169ae16ae", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/test_and_set/explicit.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fexplicit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fexplicit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fexplicit.c?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-x c -lstdc++\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <stdatomic.h>\n+\n+int main()\n+{\n+  atomic_flag af = ATOMIC_FLAG_INIT;\n+\n+  if (!atomic_flag_test_and_set_explicit(&af, memory_order_acquire))\n+    atomic_flag_clear_explicit(&af, memory_order_release);\n+\n+  return 0;\n+}"}, {"sha": "c81a75aa99a610d3d971653e77648fc7244b76eb", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/test_and_set/explicit.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fexplicit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fexplicit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fexplicit.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+\n+int main()\n+{\n+  using namespace std;\n+  atomic_flag af = ATOMIC_FLAG_INIT;\n+\n+  if (!af.test_and_set(memory_order_acquire))\n+    af.clear(memory_order_release);\n+\n+  return 0;\n+}"}, {"sha": "727421bd12f3f61c85c178b4ab3abe4fa89168e0", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/test_and_set/implicit.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fimplicit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fimplicit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fimplicit.c?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,40 @@\n+// { dg-options \"-x c -lstdc++\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <stdatomic.h>\n+\n+int main()\n+{\n+  atomic_flag af = ATOMIC_FLAG_INIT;\n+\n+  if (!atomic_flag_test_and_set(&af))\n+    atomic_flag_clear(&af);\n+\n+  return 0;\n+}"}, {"sha": "82961767e86a5441ee4e4e4a51f369131084d4fe", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/test_and_set/implicit.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fimplicit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fimplicit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fimplicit.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cstdatomic>\n+\n+int main()\n+{\n+  using namespace std;\n+  atomic_flag af = ATOMIC_FLAG_INIT;\n+\n+  if (!af.test_and_set())\n+    af.clear();\n+\n+  return 0;\n+}"}, {"sha": "5444d71f378e47bcc81512f8f1cbd25a598619b1", "filename": "libstdc++-v3/testsuite/29_atomics/headers/cstdatomic/functions_std_c++0x.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fcstdatomic%2Ffunctions_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fcstdatomic%2Ffunctions_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fcstdatomic%2Ffunctions_std_c%2B%2B0x.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdatomic>\n+\n+namespace gnu\n+{\n+  using std::atomic_flag_test_and_set;\n+  using std::atomic_flag_test_and_set_explicit;\n+  using std::atomic_flag_clear;\n+  using std::atomic_flag_clear_explicit;\n+  using std::atomic_flag_fence;\n+\n+  using std::atomic_global_fence_compatibility;\n+\n+  // Sloppy testing for integral types (en masse).\n+  using std::atomic_is_lock_free;\n+  using std::atomic_store;\n+  using std::atomic_store_explicit;\n+  using std::atomic_load;\n+  using std::atomic_load_explicit;\n+  using std::atomic_swap;\n+  using std::atomic_swap_explicit;\n+  using std::atomic_compare_swap;\n+  using std::atomic_compare_swap_explicit;\n+  using std::atomic_fence;\n+\n+  using std::atomic_fetch_add;\n+  using std::atomic_fetch_add_explicit;\n+  using std::atomic_fetch_sub;\n+  using std::atomic_fetch_sub_explicit;\n+}"}, {"sha": "62f76ab1f0e37d6f84bfca93919c4c6a5e728678", "filename": "libstdc++-v3/testsuite/29_atomics/headers/cstdatomic/macros.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fcstdatomic%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fcstdatomic%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fcstdatomic%2Fmacros.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdatomic>\n+\n+namespace gnu\n+{\n+#ifndef ATOMIC_INTEGRAL_LOCK_FREE\n+    #error \"ATOMIC_INTEGRAL_LOCK_FREE_must_be_a_macro\"\n+#endif\n+\n+#ifndef ATOMIC_ADDRESS_LOCK_FREE\n+    #error \"ATOMIC_ADDRESS_LOCK_FREE_must_be_a_macro\"\n+#endif\n+\n+#ifndef ATOMIC_FLAG_INIT\n+    #error \"ATOMIC_FLAG_INIT_must_be_a_macro\"\n+#endif\n+}"}, {"sha": "f72e8136a58a6404573869e3fca41ca09861bf2f", "filename": "libstdc++-v3/testsuite/29_atomics/headers/cstdatomic/std_c++0x_neg.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fcstdatomic%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fcstdatomic%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fcstdatomic%2Fstd_c%2B%2B0x_neg.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++98\" }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdatomic>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n+"}, {"sha": "31b32c138136bba002a888c96ba6ac741bb575ef", "filename": "libstdc++-v3/testsuite/29_atomics/headers/cstdatomic/types_std_c++0x.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fcstdatomic%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fcstdatomic%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fcstdatomic%2Ftypes_std_c%2B%2B0x.cc?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,80 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdatomic>\n+\n+void test01()\n+{\n+  using std::memory_order;\n+  using std::memory_order_relaxed;\n+  using std::memory_order_acquire;\n+  using std::memory_order_release;\n+  using std::memory_order_acq_rel;\n+  using std::memory_order_seq_cst;\n+\n+  using std::atomic_flag;\n+\n+  // atomics for builtins types\n+  using std::atomic_bool;\n+  using std::atomic_char;\n+  using std::atomic_schar;\n+  using std::atomic_uchar;\n+  using std::atomic_short;\n+  using std::atomic_ushort;\n+  using std::atomic_int;\n+  using std::atomic_uint;\n+  using std::atomic_long;\n+  using std::atomic_ulong;\n+  using std::atomic_llong;\n+  using std::atomic_ullong;\n+  using std::atomic_wchar_t;\n+  using std::atomic_char16_t;\n+  using std::atomic_char32_t;\n+\n+  // atomics for standard typedefs\n+  using std::atomic_int_least8_t;\n+  using std::atomic_uint_least8_t;\n+  using std::atomic_int_least16_t;\n+  using std::atomic_uint_least16_t;\n+  using std::atomic_int_least32_t;\n+  using std::atomic_uint_least32_t;\n+  using std::atomic_int_least64_t;\n+  using std::atomic_uint_least64_t;\n+  using std::atomic_int_fast8_t;\n+  using std::atomic_uint_fast8_t;\n+  using std::atomic_int_fast16_t;\n+  using std::atomic_uint_fast16_t;\n+  using std::atomic_int_fast32_t;\n+  using std::atomic_uint_fast32_t;\n+  using std::atomic_int_fast64_t;\n+  using std::atomic_uint_fast64_t;\n+  using std::atomic_intptr_t;\n+  using std::atomic_uintptr_t;\n+  using std::atomic_size_t;\n+  using std::atomic_ssize_t;\n+  using std::atomic_ptrdiff_t;\n+  using std::atomic_intmax_t;\n+  using std::atomic_uintmax_t;\n+\n+  using std::atomic_address;\n+\n+  &std::atomic_global_fence_compatibility;\n+}"}, {"sha": "1282c0df90643c712b5dfefbc8e0be861bb3d99e", "filename": "libstdc++-v3/testsuite/29_atomics/headers/stdatomic.h/functions.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Ffunctions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Ffunctions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Ffunctions.c?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-x c\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <stdatomic.h>\n+\n+int main()\n+{\n+  volatile atomic_flag f;\n+  volatile atomic_flag* p = &f;\n+  memory_order m = memory_order_relaxed;\n+\n+  // For position only.\n+  atomic_flag_test_and_set(p);\n+  atomic_flag_test_and_set_explicit(p, m);\n+  atomic_flag_clear(p);\n+  atomic_flag_clear_explicit(p, m);\n+  atomic_flag_fence(p, m);\n+\n+  return 0;\n+}"}, {"sha": "30368a06bf4b39ddcef09ca4430715c4ba0e445c", "filename": "libstdc++-v3/testsuite/29_atomics/headers/stdatomic.h/macros.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Fmacros.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Fmacros.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Fmacros.c?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,119 @@\n+// { dg-options \"-x c\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <stdatomic.h>\n+\n+int main()\n+{\n+#ifndef ATOMIC_INTEGRAL_LOCK_FREE\n+    #error \"ATOMIC_INTEGRAL_LOCK_FREE_must_be_a_macro\"\n+#endif\n+\n+#ifndef ATOMIC_ADDRESS_LOCK_FREE\n+    #error \"ATOMIC_ADDRESS_LOCK_FREE_must_be_a_macro\"\n+#endif\n+\n+#ifndef ATOMIC_FLAG_INIT\n+    #error \"ATOMIC_FLAG_INIT_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_is_lock_free\n+    #error \"atomic_is_lock_free_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_load\n+    #error \"atomic_load_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_load_explicit\n+    #error \"atomic_load_explicit_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_store_explicit\n+    #error \"atomic_store_explicit_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_store\n+    #error \"atomic_store_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_swap_explicit\n+    #error \"atomic_swap_explicit_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_swap\n+    #error \"atomic_swap_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_compare_swap\n+    #error \"atomic_compare_swap_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_compare_swap_explicit\n+    #error \"atomic_compare_swap_explicit_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_fence\n+    #error \"atomic_fence_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_fetch_add_explicit\n+    #error \"atomic_fetch_add_explicit_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_fetch_add\n+    #error \"atomic_fetch_add_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_fetch_sub_explicit\n+    #error \"atomic_fetch_sub_explicit_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_fetch_sub\n+    #error \"atomic_fetch_sub_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_fetch_and_explicit\n+    #error \"atomic_fetch_and_explicit_must_be_a_macro\"\n+#endif\n+ \n+#ifndef atomic_fetch_and\n+    #error \"atomic_fetch_and_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_fetch_or_explicit\n+    #error \"atomic_fetch_or_explicit_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_fetch_or\n+    #error \"atomic_fetch_or_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_fetch_xor_explicit\n+    #error \"atomic_fetch_xor_explicit_must_be_a_macro\"\n+#endif\n+\n+#ifndef atomic_fetch_xor\n+    #error \"atomic_fetch_xor_must_be_a_macro\"\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "8e9cfd56e0174ad36977b91f16482c91085718e2", "filename": "libstdc++-v3/testsuite/29_atomics/headers/stdatomic.h/types.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Ftypes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Ftypes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Ftypes.c?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -0,0 +1,80 @@\n+// { dg-options \"-x c\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <stdatomic.h>\n+\n+void test01()\n+{\n+  typedef memory_order t_01;\n+  memory_order t_02 = memory_order_relaxed;\n+  memory_order t_03 = memory_order_acquire;\n+  memory_order t_04 = memory_order_release;\n+  memory_order t_05 = memory_order_acq_rel;\n+  memory_order t_06 = memory_order_seq_cst;\n+\n+  typedef atomic_flag t_07;\n+\n+  // atomics for builtins types\n+  typedef atomic_bool t_08;\n+  typedef atomic_char t_09;\n+  typedef atomic_schar t_10;\n+  typedef atomic_uchar t_11;\n+  typedef atomic_short t_12;\n+  typedef atomic_ushort t_13;\n+  typedef atomic_int t_14;\n+  typedef atomic_uint t_15;\n+  typedef atomic_long t_16;\n+  typedef atomic_ulong t_17;\n+  typedef atomic_llong t_18;\n+  typedef atomic_ullong t_19;\n+  typedef atomic_wchar_t t_20;\n+  typedef atomic_char16_t t_21;\n+  typedef atomic_char32_t t_22;\n+\n+  // atomics for standard typedefs\n+  typedef atomic_int_least8_t t_23;\n+  typedef atomic_uint_least8_t t_24;\n+  typedef atomic_int_least16_t t_25;\n+  typedef atomic_uint_least16_t t_26;\n+  typedef atomic_int_least32_t t_27;\n+  typedef atomic_uint_least32_t t_28;\n+  typedef atomic_int_least64_t t_29;\n+  typedef atomic_uint_least64_t t_30;\n+  typedef atomic_int_fast8_t t_31;\n+  typedef atomic_uint_fast8_t t_32;\n+  typedef atomic_int_fast16_t t_33;\n+  typedef atomic_uint_fast16_t t_34;\n+  typedef atomic_int_fast32_t t_35;\n+  typedef atomic_uint_fast32_t t_36;\n+  typedef atomic_int_fast64_t t_37;\n+  typedef atomic_uint_fast64_t t_38;\n+  typedef atomic_intptr_t t_39;\n+  typedef atomic_uintptr_t t_40;\n+  typedef atomic_size_t t_41;\n+  typedef atomic_ssize_t t_42;\n+  typedef atomic_ptrdiff_t t_43;\n+  typedef atomic_intmax_t t_44;\n+  typedef atomic_uintmax_t t_45;\n+\n+  typedef atomic_address t_46;\n+\n+  &atomic_global_fence_compatibility;\n+}"}, {"sha": "63d92370dcb00eb01078d6d40d4f32dbd7303a42", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -49,6 +49,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/multi.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n+\t$(top_srcdir)/../config/proginstall.m4 \\\n \t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n \t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n \t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\"}, {"sha": "5f68d789d6dae193617f7af1af5fd7955506f0f6", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -443,12 +443,13 @@ proc v3_target_compile_as_c { source dest type options } {\n \tset includestarget \"${includesbase}/${machine}\"\n \tset cc_final [concat $cc_final \"-I$includesbase -I$includestarget\"]\n \n-        set libsup \"${comp_base_dir}/lib\"\n+        set libdir \"-L${comp_base_dir}/lib\"\n     } else {\n-        set libsup \"${blddir}/libsupc++/.libs\"\n+        set libdir \"-L${blddir}/libsupc++/.libs\"\n+\tset libdir [concat $libdir \"-L${blddir}/src/.libs\"]\n     }\n \n-    set cc_final [concat $cc_final \"-L$libsup\"]\n+    set cc_final [concat $cc_final \"$libdir\"]\n \n     lappend options \"compiler=$cc_final\"\n     lappend options \"timeout=600\""}, {"sha": "bd9e76d4e2e41a9cd6c47870cddcb7f15c0259cd", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d466a7e21c61360550e04a66dcd2cacd5172d672/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=d466a7e21c61360550e04a66dcd2cacd5172d672", "patch": "@@ -53,6 +53,10 @@\n #include <tr1/unordered_map>\n #include <tr1/unordered_set>\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#include <cstdatomic>\n+#endif\n+\n namespace __gnu_test\n {\n   using __gnu_cxx::typelist::node;\n@@ -260,6 +264,88 @@ namespace __gnu_test\n       typedef typename append<a1, a2>::type type;\n     };\n \n+  // A typelist of all integral types.\n+  struct integral_types\n+  {\n+    typedef bool \t\ta1;\n+    typedef char \t\ta2;\n+    typedef signed char \ta3;\n+    typedef unsigned char \ta4;\n+    typedef short \t\ta5;\n+    typedef unsigned short \ta6;\n+    typedef int \t\ta7;\n+    typedef unsigned int \ta8;\n+    typedef long \t\ta9;\n+    typedef unsigned long \ta10;\n+    typedef long long \t\ta11;\n+    typedef unsigned long long \ta12;\n+    typedef wchar_t \t\ta13;\n+    // typedef char16_t \t\ta14;\n+    // typedef char16_t \t\ta15;\n+\n+    typedef node<_GLIBCXX_TYPELIST_CHAIN13(a1, a2, a3, a4, a5, a6, a7, a8, a9, \n+\t\t\t\t\t   a10, a11, a12, a13)> type;\n+  };\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  template<typename Tp>\n+    struct atomics\n+    {\n+      typedef Tp\t\t\tvalue_type;\n+      typedef std::atomic<value_type>\ttype;\n+    };\n+\n+  typedef transform<integral_types::type, atomics>::type atomics_tl;\n+#endif\n+\n+  // Generator to test assignment operator.\n+  struct assignable\n+  {\n+    template<typename _T>\n+      void \n+      operator()()\n+      {\n+        _T v1;\n+        _T v2;\n+        v1 = v2;\n+      }\n+  };\n+\n+  // Generator to test default constructor.\n+  struct default_constructible\n+  {\n+    template<typename _T>\n+      void \n+      operator()()\n+      {\n+        _T v;\n+      }\n+  };\n+\n+  // Generator to test copy constructor.\n+  struct copy_constructible\n+  {\n+    template<typename _T>\n+      void \n+      operator()()\n+      {\n+        _T v1;\n+        _T v2(v1);\n+      }\n+  };\n+\n+  // Generator to test explicit value constructor.\n+  struct explicit_value_constructible\n+  {\n+    template<typename _Ttype, typename _Tvalue>\n+      void \n+      operator()()\n+      {\n+        _Tvalue a;\n+\t_Ttype v(a);\n+      }\n+  };\n+\n } // namespace __gnu_test\n \n "}]}