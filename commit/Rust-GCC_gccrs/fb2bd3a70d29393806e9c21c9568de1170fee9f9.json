{"sha": "fb2bd3a70d29393806e9c21c9568de1170fee9f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIyYmQzYTcwZDI5MzkzODA2ZTljMjFjOTU2OGRlMTE3MGZlZTlmOQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2011-11-23T11:02:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-23T11:02:03Z"}, "message": "errout.adb: Minor reformattin (Finalize): Take templates into account for warning suppression.\n\n2011-11-23  Robert Dewar  <dewar@adacore.com>\n\n\t* errout.adb: Minor reformattin (Finalize): Take templates into\n\taccount for warning suppression.\n\t* errout.ads (Set_Specific_Warning_Off): Add Used parameter.\n\t* erroutc.adb: Minor reformatting (Finalize): Take generic\n\ttemplates into account for warning suppress.\n\t* erroutc.ads (Set_Specific_Warning_Off): Add Used parameter.\n\t* sem_prag.adb: Minor reformatting (Analyze_Pragma,\n\tcase Warnings): Provide Used parameter in call to\n\tSet_Specific_Warnings_Off (to deal with generic template case).\n\nFrom-SVN: r181658", "tree": {"sha": "7db57e1d95683f3bef8a703b838fa8e8f198edba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7db57e1d95683f3bef8a703b838fa8e8f198edba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb2bd3a70d29393806e9c21c9568de1170fee9f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2bd3a70d29393806e9c21c9568de1170fee9f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb2bd3a70d29393806e9c21c9568de1170fee9f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2bd3a70d29393806e9c21c9568de1170fee9f9/comments", "author": null, "committer": null, "parents": [{"sha": "a1092b4889d054ba1f979e8a3e1672465610300c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1092b4889d054ba1f979e8a3e1672465610300c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1092b4889d054ba1f979e8a3e1672465610300c"}], "stats": {"total": 110, "additions": 72, "deletions": 38}, "files": [{"sha": "1f574e2246c5b44c3c975363754e3af07c438011", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2bd3a70d29393806e9c21c9568de1170fee9f9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2bd3a70d29393806e9c21c9568de1170fee9f9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fb2bd3a70d29393806e9c21c9568de1170fee9f9", "patch": "@@ -1,3 +1,15 @@\n+2011-11-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.adb: Minor reformattin (Finalize): Take templates into\n+\taccount for warning suppression.\n+\t* errout.ads (Set_Specific_Warning_Off): Add Used parameter.\n+\t* erroutc.adb: Minor reformatting (Finalize): Take generic\n+\ttemplates into account for warning suppress.\n+\t* erroutc.ads (Set_Specific_Warning_Off): Add Used parameter.\n+\t* sem_prag.adb: Minor reformatting (Analyze_Pragma,\n+\tcase Warnings): Provide Used parameter in call to\n+\tSet_Specific_Warnings_Off (to deal with generic template case).\n+\n 2011-11-23  Pascal Obry  <obry@adacore.com>\n \n \t* sem_prag.adb (Process_Convention): Better error message for"}, {"sha": "c40179a5f7a1694846f216e8767b7e3090e476a2", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2bd3a70d29393806e9c21c9568de1170fee9f9/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2bd3a70d29393806e9c21c9568de1170fee9f9/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=fb2bd3a70d29393806e9c21c9568de1170fee9f9", "patch": "@@ -1286,30 +1286,37 @@ package body Errout is\n \n       Cur := First_Error_Msg;\n       while Cur /= No_Error_Msg loop\n-         if not Errors.Table (Cur).Deleted\n-           and then Warning_Specifically_Suppressed\n-                      (Errors.Table (Cur).Sptr, Errors.Table (Cur).Text)\n-         then\n-            Delete_Warning (Cur);\n+         declare\n+            CE : Error_Msg_Object renames Errors.Table (Cur);\n \n-            --  If this is a continuation, delete previous messages\n+         begin\n+            if not CE.Deleted\n+              and then\n+                (Warning_Specifically_Suppressed (CE.Sptr, CE.Text)\n+                   or else\n+                 Warning_Specifically_Suppressed (CE.Optr, CE.Text))\n+            then\n+               Delete_Warning (Cur);\n \n-            F := Cur;\n-            while Errors.Table (F).Msg_Cont loop\n-               F := Errors.Table (F).Prev;\n-               Delete_Warning (F);\n-            end loop;\n+               --  If this is a continuation, delete previous messages\n \n-            --  Delete any following continuations\n+               F := Cur;\n+               while Errors.Table (F).Msg_Cont loop\n+                  F := Errors.Table (F).Prev;\n+                  Delete_Warning (F);\n+               end loop;\n \n-            F := Cur;\n-            loop\n-               F := Errors.Table (F).Next;\n-               exit when F = No_Error_Msg;\n-               exit when not Errors.Table (F).Msg_Cont;\n-               Delete_Warning (F);\n-            end loop;\n-         end if;\n+               --  Delete any following continuations\n+\n+               F := Cur;\n+               loop\n+                  F := Errors.Table (F).Next;\n+                  exit when F = No_Error_Msg;\n+                  exit when not Errors.Table (F).Msg_Cont;\n+                  Delete_Warning (F);\n+               end loop;\n+            end if;\n+         end;\n \n          Cur := Errors.Table (Cur).Next;\n       end loop;"}, {"sha": "ea83a8a7b45eddd6402522afac47e8e696545753", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2bd3a70d29393806e9c21c9568de1170fee9f9/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2bd3a70d29393806e9c21c9568de1170fee9f9/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=fb2bd3a70d29393806e9c21c9568de1170fee9f9", "patch": "@@ -771,7 +771,8 @@ package Errout is\n    procedure Set_Specific_Warning_Off\n      (Loc    : Source_Ptr;\n       Msg    : String;\n-      Config : Boolean)\n+      Config : Boolean;\n+      Used   : Boolean := False)\n      renames Erroutc.Set_Specific_Warning_Off;\n    --  This is called in response to the two argument form of pragma Warnings\n    --  where the first argument is OFF, and the second argument is the prefix"}, {"sha": "f58a49a8a5a1bd4f8df13e495f137d1296b350f9", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2bd3a70d29393806e9c21c9568de1170fee9f9/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2bd3a70d29393806e9c21c9568de1170fee9f9/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=fb2bd3a70d29393806e9c21c9568de1170fee9f9", "patch": "@@ -1081,15 +1081,16 @@ package body Erroutc is\n    procedure Set_Specific_Warning_Off\n      (Loc    : Source_Ptr;\n       Msg    : String;\n-      Config : Boolean)\n+      Config : Boolean;\n+      Used   : Boolean := False)\n    is\n    begin\n       Specific_Warnings.Append\n         ((Start      => Loc,\n           Msg        => new String'(Msg),\n           Stop       => Source_Last (Current_Source_File),\n           Open       => True,\n-          Used       => False,\n+          Used       => Used,\n           Config     => Config));\n    end Set_Specific_Warning_Off;\n \n@@ -1135,26 +1136,26 @@ package body Erroutc is\n \n    procedure Set_Warnings_Mode_Off (Loc : Source_Ptr) is\n    begin\n-      --  Don't bother with entries from instantiation copies, since we\n-      --  will already have a copy in the template, which is what matters\n+      --  Don't bother with entries from instantiation copies, since we will\n+      --  already have a copy in the template, which is what matters.\n \n       if Instantiation (Get_Source_File_Index (Loc)) /= No_Location then\n          return;\n       end if;\n \n-      --  If last entry in table already covers us, this is a redundant\n-      --  pragma Warnings (Off) and can be ignored. This also handles the\n-      --  case where all warnings are suppressed by command line switch.\n+      --  If last entry in table already covers us, this is a redundant pragma\n+      --  Warnings (Off) and can be ignored. This also handles the case where\n+      --  all warnings are suppressed by command line switch.\n \n       if Warnings.Last >= Warnings.First\n         and then Warnings.Table (Warnings.Last).Start <= Loc\n         and then Loc <= Warnings.Table (Warnings.Last).Stop\n       then\n          return;\n \n-      --  Otherwise establish a new entry, extending from the location of\n-      --  the pragma to the end of the current source file. This ending\n-      --  point will be adjusted by a subsequent pragma Warnings (On).\n+      --  Otherwise establish a new entry, extending from the location of the\n+      --  pragma to the end of the current source file. This ending point will\n+      --  be adjusted by a subsequent pragma Warnings (On).\n \n       else\n          Warnings.Increment_Last;\n@@ -1170,8 +1171,8 @@ package body Erroutc is\n \n    procedure Set_Warnings_Mode_On (Loc : Source_Ptr) is\n    begin\n-      --  Don't bother with entries from instantiation copies, since we\n-      --  will already have a copy in the template, which is what matters\n+      --  Don't bother with entries from instantiation copies, since we will\n+      --  already have a copy in the template, which is what matters.\n \n       if Instantiation (Get_Source_File_Index (Loc)) /= No_Location then\n          return;"}, {"sha": "6c077b0f2e301a6ee3dcbe11271c4572ac505810", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2bd3a70d29393806e9c21c9568de1170fee9f9/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2bd3a70d29393806e9c21c9568de1170fee9f9/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=fb2bd3a70d29393806e9c21c9568de1170fee9f9", "patch": "@@ -445,14 +445,17 @@ package Erroutc is\n    procedure Set_Specific_Warning_Off\n      (Loc    : Source_Ptr;\n       Msg    : String;\n-      Config : Boolean);\n+      Config : Boolean;\n+      Used   : Boolean := False);\n    --  This is called in response to the two argument form of pragma Warnings\n    --  where the first argument is OFF, and the second argument is a string\n    --  which identifies a specific warning to be suppressed. The first argument\n    --  is the start of the suppression range, and the second argument is the\n    --  string from the pragma. Loc is the location of the pragma (which is the\n    --  start of the range to suppress). Config is True for the configuration\n    --  pragma case (where there is no requirement for a matching OFF pragma).\n+   --  Used is set True to disable the check that the warning actually has\n+   --  has the effect of suppressing a warning.\n \n    procedure Set_Specific_Warning_On\n      (Loc : Source_Ptr;"}, {"sha": "a21358bd791e300aa996b5e5a8e4455842839b90", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2bd3a70d29393806e9c21c9568de1170fee9f9/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2bd3a70d29393806e9c21c9568de1170fee9f9/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=fb2bd3a70d29393806e9c21c9568de1170fee9f9", "patch": "@@ -14528,7 +14528,7 @@ package body Sem_Prag is\n                      end;\n                   end if;\n \n-                  --  Two or more arguments (must be two)\n+               --  Two or more arguments (must be two)\n \n                else\n                   Check_Arg_Is_One_Of (Arg1, Name_On, Name_Off);\n@@ -14547,8 +14547,7 @@ package body Sem_Prag is\n                      --  the formal may be wrapped in a conversion if the\n                      --  actual is a conversion. Retrieve the real entity name.\n \n-                     if (In_Instance_Body\n-                          or else In_Inlined_Body)\n+                     if (In_Instance_Body or else In_Inlined_Body)\n                        and then Nkind (E_Id) = N_Unchecked_Type_Conversion\n                      then\n                         E_Id := Expression (E_Id);\n@@ -14612,10 +14611,21 @@ package body Sem_Prag is\n                         --  In any other case, an error will be signalled (ON\n                         --  with no matching OFF).\n \n+                        --  Note: We set Used if we are inside a generic to\n+                        --  disable the test that the non-config case actually\n+                        --  cancels a warning. That's because we can't be sure\n+                        --  there isn't an instantiation in some other unit\n+                        --  where a warning is suppressed.\n+\n+                        --  We could do a little better here by checking if the\n+                        --  generic unit we are inside is public, but for now\n+                        --  we don't bother with that refinement.\n+\n                         if Chars (Argx) = Name_Off then\n                            Set_Specific_Warning_Off\n                              (Loc, Name_Buffer (1 .. Name_Len),\n-                              Config => Is_Configuration_Pragma);\n+                              Config => Is_Configuration_Pragma,\n+                              Used   => Inside_A_Generic or else In_Instance);\n \n                         elsif Chars (Argx) = Name_On then\n                            Set_Specific_Warning_On"}]}