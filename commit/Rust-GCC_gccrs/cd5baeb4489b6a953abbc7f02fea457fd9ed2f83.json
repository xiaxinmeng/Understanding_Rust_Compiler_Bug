{"sha": "cd5baeb4489b6a953abbc7f02fea457fd9ed2f83", "node_id": "C_kwDOANBUbNoAKGNkNWJhZWI0NDg5YjZhOTUzYWJiYzdmMDJmZWE0NTdmZDllZDJmODM", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-14T23:14:29Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-14T23:14:29Z"}, "message": "c++: redeclaring member of constrained class template [PR96830]\n\nAn out-of-line definition of a member of a constrained class template\nneeds to repeat the template's constraints, but it turns out we don't\nverify anywhere that the two sets of constraints match.  This patch\nadds such a check to push_template_decl, nearby a similar consistency\ncheck for the template parameter list lengths.\n\n\tPR c++/96830\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (push_inline_template_parms_recursive): Set\n\tTEMPLATE_PARMS_CONSTRAINTS.\n\t(push_template_decl): For an out-of-line declaration, verify\n\tconstraints for each enclosing template scope match those of the\n\toriginal template declaratation.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-class5.C: New test.\n\t* g++.dg/cpp2a/concepts-class5a.C: New test.", "tree": {"sha": "a29cdf36c2d282ce80bc3bccf90006b6678f8639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a29cdf36c2d282ce80bc3bccf90006b6678f8639"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd5baeb4489b6a953abbc7f02fea457fd9ed2f83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5baeb4489b6a953abbc7f02fea457fd9ed2f83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd5baeb4489b6a953abbc7f02fea457fd9ed2f83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5baeb4489b6a953abbc7f02fea457fd9ed2f83/comments", "author": null, "committer": null, "parents": [{"sha": "ec62dc95c4f8776c9f4eff2a9a06f9aef6a2d98a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec62dc95c4f8776c9f4eff2a9a06f9aef6a2d98a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec62dc95c4f8776c9f4eff2a9a06f9aef6a2d98a"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "84021c21467fe7692c21764a97a12598a0d6bc93", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5baeb4489b6a953abbc7f02fea457fd9ed2f83/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5baeb4489b6a953abbc7f02fea457fd9ed2f83/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=cd5baeb4489b6a953abbc7f02fea457fd9ed2f83", "patch": "@@ -471,6 +471,8 @@ push_inline_template_parms_recursive (tree parmlist, int levels)\n   current_template_parms\n     = tree_cons (size_int (current_template_depth + 1),\n \t\t parms, current_template_parms);\n+  TEMPLATE_PARMS_CONSTRAINTS (current_template_parms)\n+    = TEMPLATE_PARMS_CONSTRAINTS (parmlist);\n   TEMPLATE_PARMS_FOR_INLINE (current_template_parms) = 1;\n \n   begin_scope (TREE_VEC_LENGTH (parms) ? sk_template_parms : sk_template_spec,\n@@ -6134,6 +6136,30 @@ push_template_decl (tree decl, bool is_friend)\n \t  DECL_INTERFACE_KNOWN (decl) = 1;\n \t  return error_mark_node;\n \t}\n+\n+      /* Check that the constraints for each enclosing template scope are\n+\t consistent with the original declarations.  */\n+      if (flag_concepts)\n+\t{\n+\t  tree decl_parms = DECL_TEMPLATE_PARMS (tmpl);\n+\t  tree scope_parms = current_template_parms;\n+\t  if (PRIMARY_TEMPLATE_P (tmpl))\n+\t    {\n+\t      decl_parms = TREE_CHAIN (decl_parms);\n+\t      scope_parms = TREE_CHAIN (scope_parms);\n+\t    }\n+\t  while (decl_parms)\n+\t    {\n+\t      if (!template_requirements_equivalent_p (decl_parms, scope_parms))\n+\t\t{\n+\t\t  error (\"redeclaration of %qD with different constraints\",\n+\t\t\t TPARMS_PRIMARY_TEMPLATE (TREE_VALUE (decl_parms)));\n+\t\t  break;\n+\t\t}\n+\t      decl_parms = TREE_CHAIN (decl_parms);\n+\t      scope_parms = TREE_CHAIN (scope_parms);\n+\t    }\n+\t}\n     }\n \n   gcc_checking_assert (!tmpl || DECL_TEMPLATE_RESULT (tmpl) == decl);"}, {"sha": "5d893d9f6a7474bec8d2e4f8b963e7d6e45d6f9c", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-class5.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5baeb4489b6a953abbc7f02fea457fd9ed2f83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5baeb4489b6a953abbc7f02fea457fd9ed2f83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class5.C?ref=cd5baeb4489b6a953abbc7f02fea457fd9ed2f83", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/96830\n+// { dg-do compile { target c++20 } }\n+\n+template<class T> concept C = true;\n+\n+template<C T> requires true\n+struct A {\n+  void f();\n+  template<class U> void g();\n+\n+  struct B;\n+  template<class U> struct C;\n+\n+  static int D;\n+  template<class U> static int E;\n+};\n+\n+template<C T>\n+void A<T>::f() { }  // { dg-error \"different constraints\" }\n+\n+template<class T> requires true\n+template<class U>\n+void A<T>::g() { }  // { dg-error \"different constraints\" }\n+\n+template<C T> requires (!!true)\n+struct A<T>::B { }; // { dg-error \"different constraints\" }\n+\n+template<class T> requires true\n+template<class U>\n+struct A<T>::C { }; // { dg-error \"different constraints\" }\n+\n+template<C T>\n+int A<T>::D = 0;    // { dg-error \"different constraints\" }\n+\n+template<class T> requires true\n+template<class U>\n+int A<T>::E = 0;    // { dg-error \"different constraints\" }"}, {"sha": "a6a3684c25871c10ca1b06476cc824aac311a461", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-class5a.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd5baeb4489b6a953abbc7f02fea457fd9ed2f83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class5a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd5baeb4489b6a953abbc7f02fea457fd9ed2f83/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class5a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-class5a.C?ref=cd5baeb4489b6a953abbc7f02fea457fd9ed2f83", "patch": "@@ -0,0 +1,38 @@\n+// PR c++/96830\n+// A valid version of concepts-class5.C.\n+// { dg-do compile { target c++20 } }\n+\n+template<class T> concept C = true;\n+\n+template<C T> requires true\n+struct A {\n+  void f();\n+  template<class U> void g();\n+\n+  struct B;\n+  template<class U> struct C;\n+\n+  static int D;\n+  template<class U> static int E;\n+};\n+\n+template<C T> requires true\n+void A<T>::f() { }\n+\n+template<C T> requires true\n+template<class U>\n+void A<T>::g() { }\n+\n+template<C T> requires true\n+struct A<T>::B { };\n+\n+template<C T> requires true\n+template<class U>\n+struct A<T>::C { };\n+\n+template<C T> requires true\n+int A<T>::D = 0;\n+\n+template<C T> requires true\n+template<class U>\n+int A<T>::E = 0;"}]}