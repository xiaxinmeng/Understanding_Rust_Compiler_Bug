{"sha": "ad7d90cc4cf065413edfa1996dff98453652e66f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ3ZDkwY2M0Y2YwNjU0MTNlZGZhMTk5NmRmZjk4NDUzNjUyZTY2Zg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-06-12T10:13:11Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-06-12T10:13:11Z"}, "message": "PR/59843 Fix ICE on singleton vector of float on AArch64.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-modes.def: Add V1DFmode.\n\t* config/aarch64/aarch64.c (aarch64_vector_mode_supported_p):\n\tSupport V1DFmode.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/vect/vect-singleton_1.c: New file.\n\nFrom-SVN: r211502", "tree": {"sha": "c77366bde0f17ba923036c92218ddd8c72b8e1fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c77366bde0f17ba923036c92218ddd8c72b8e1fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad7d90cc4cf065413edfa1996dff98453652e66f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad7d90cc4cf065413edfa1996dff98453652e66f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad7d90cc4cf065413edfa1996dff98453652e66f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad7d90cc4cf065413edfa1996dff98453652e66f/comments", "author": null, "committer": null, "parents": [{"sha": "0ab75824c907413bed9ed7435c7cc9ee392a3101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab75824c907413bed9ed7435c7cc9ee392a3101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ab75824c907413bed9ed7435c7cc9ee392a3101"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "10af9a56c8cc5840ed999449ce9737d97cb459fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7d90cc4cf065413edfa1996dff98453652e66f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7d90cc4cf065413edfa1996dff98453652e66f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad7d90cc4cf065413edfa1996dff98453652e66f", "patch": "@@ -1,3 +1,10 @@\n+2014-06-10  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\tPR target/59843\n+\t* config/aarch64/aarch64-modes.def: Add V1DFmode.\n+\t* config/aarch64/aarch64.c (aarch64_vector_mode_supported_p):\n+\tSupport V1DFmode.\n+\n 2014-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-core.h (DECL_NONALIASED): Use proper spelling in comment."}, {"sha": "f9c436948a6f5177761ee1d288809f05a7e841c1", "filename": "gcc/config/aarch64/aarch64-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7d90cc4cf065413edfa1996dff98453652e66f/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7d90cc4cf065413edfa1996dff98453652e66f/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-modes.def?ref=ad7d90cc4cf065413edfa1996dff98453652e66f", "patch": "@@ -31,6 +31,7 @@ VECTOR_MODES (INT, 8);        /*       V8QI V4HI V2SI.  */\n VECTOR_MODES (INT, 16);       /* V16QI V8HI V4SI V2DI.  */\n VECTOR_MODES (FLOAT, 8);      /*                 V2SF.  */\n VECTOR_MODES (FLOAT, 16);     /*            V4SF V2DF.  */\n+VECTOR_MODE (FLOAT, DF, 1);   /*                 V1DF.  */\n \n /* Oct Int: 256-bit integer mode needed for 32-byte vector arguments.  */\n INT_MODE (OI, 32);"}, {"sha": "10fb7de3ba424576700b92291d41672f2d9b59dd", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7d90cc4cf065413edfa1996dff98453652e66f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7d90cc4cf065413edfa1996dff98453652e66f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ad7d90cc4cf065413edfa1996dff98453652e66f", "patch": "@@ -7251,7 +7251,8 @@ aarch64_vector_mode_supported_p (enum machine_mode mode)\n \t  || mode == V16QImode || mode == V2DImode\n \t  || mode == V2SImode  || mode == V4HImode\n \t  || mode == V8QImode || mode == V2SFmode\n-\t  || mode == V4SFmode || mode == V2DFmode))\n+\t  || mode == V4SFmode || mode == V2DFmode\n+\t  || mode == V1DFmode))\n     return true;\n \n   return false;"}, {"sha": "464c823b80dd1b581cf04ff5227d61d1b0218392", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7d90cc4cf065413edfa1996dff98453652e66f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7d90cc4cf065413edfa1996dff98453652e66f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ad7d90cc4cf065413edfa1996dff98453652e66f", "patch": "@@ -1,3 +1,8 @@\n+2014-06-10  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\tPR target/59843\n+\t* gcc.dg/vect/vect-singleton_1.c: New file.\n+\n 2014-06-12  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/61443"}, {"sha": "8a4dc810ce747f97649052e802ef5f0db274a870", "filename": "gcc/testsuite/gcc.dg/vect/vect-singleton_1.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad7d90cc4cf065413edfa1996dff98453652e66f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-singleton_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad7d90cc4cf065413edfa1996dff98453652e66f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-singleton_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-singleton_1.c?ref=ad7d90cc4cf065413edfa1996dff98453652e66f", "patch": "@@ -0,0 +1,76 @@\n+/* PR target/59843 ICE on function taking/returning vector of one float64_t.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Warray-bounds -O2 -fno-inline -std=c99\" } */\n+\n+#define TEST(BASETYPE, VECTYPE, SUFFIX)\t\t\t\t\t     \\\n+  typedef BASETYPE VECTYPE\t\t\t\t\t\t     \\\n+      __attribute__ ((__vector_size__ (sizeof (BASETYPE))));\t\t     \\\n+  VECTYPE\t\t\t\t\t\t\t\t     \\\n+  test_vadd_##SUFFIX (VECTYPE a, VECTYPE b)\t\t\t\t     \\\n+  {\t\t\t\t\t\t\t\t\t     \\\n+    return a + b;\t\t\t\t\t\t\t     \\\n+  }\t\t\t\t\t\t\t\t\t     \\\n+\t\t\t\t\t\t\t\t\t     \\\n+  void\t\t\t\t\t\t\t\t\t     \\\n+  test_##SUFFIX (BASETYPE val)\t\t\t\t\t\t     \\\n+  {\t\t\t\t\t\t\t\t\t     \\\n+    VECTYPE var = { val };\t\t\t\t\t\t     \\\n+    BASETYPE v0 = var[0];\t\t\t\t\t\t     \\\n+    BASETYPE v1 = var[1]; /* { dg-warning \"index value is out of bound\" } */ \\\n+  }\n+\n+TEST (double, float64x1_t, f64)\n+\n+/* Original bug was for above type;\n+   in a nod to completeness, test other types too.  */\n+\n+TEST (long long, int64x1_t, s64)\n+\n+TEST (float, float32x1_t, f32)\n+\n+TEST (long, longx1_t, l)\n+\n+TEST (int, intx1_t, i)\n+\n+TEST (short, int16x1_t, s16)\n+\n+TEST (char, int8x1_t, s8)\n+/* PR target/59843 ICE on function taking/returning vector of one float64_t.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-Warray-bounds -O2 -fno-inline -std=c99\" } */\n+\n+#define TEST(BASETYPE, VECTYPE, SUFFIX)\t\t\t\t\t     \\\n+  typedef BASETYPE VECTYPE\t\t\t\t\t\t     \\\n+      __attribute__ ((__vector_size__ (sizeof (BASETYPE))));\t\t     \\\n+  VECTYPE\t\t\t\t\t\t\t\t     \\\n+  test_vadd_##SUFFIX (VECTYPE a, VECTYPE b)\t\t\t\t     \\\n+  {\t\t\t\t\t\t\t\t\t     \\\n+    return a + b;\t\t\t\t\t\t\t     \\\n+  }\t\t\t\t\t\t\t\t\t     \\\n+\t\t\t\t\t\t\t\t\t     \\\n+  void\t\t\t\t\t\t\t\t\t     \\\n+  test_##SUFFIX (BASETYPE val)\t\t\t\t\t\t     \\\n+  {\t\t\t\t\t\t\t\t\t     \\\n+    VECTYPE var = { val };\t\t\t\t\t\t     \\\n+    BASETYPE v0 = var[0];\t\t\t\t\t\t     \\\n+    BASETYPE v1 = var[1]; /* { dg-warning \"index value is out of bound\" } */ \\\n+  }\n+\n+TEST (double, float64x1_t, f64)\n+\n+/* Original bug was for above type;\n+   in a nod to completeness, test other types too.  */\n+\n+TEST (long long, int64x1_t, s64)\n+\n+TEST (float, float32x1_t, f32)\n+\n+TEST (long, longx1_t, l)\n+\n+TEST (int, intx1_t, i)\n+\n+TEST (short, int16x1_t, s16)\n+\n+TEST (char, int8x1_t, s8)"}]}