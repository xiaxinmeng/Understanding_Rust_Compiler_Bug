{"sha": "f38bf60c3ac7f039db5ff5c7c0587325097892c8", "node_id": "C_kwDOANBUbNoAKGYzOGJmNjBjM2FjN2YwMzlkYjVmZjVjN2MwNTg3MzI1MDk3ODkyYzg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-29T15:14:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-29T15:14:48Z"}, "message": "Merge #1188\n\n1188: Support align and packed repr layout on structs r=dafaust a=dafaust\n\nThis is a start at handling the various layout options supported by Rust, beginning with `#[repr(align(N))]` and `#[repr(packed(N))]`, on structs and tuple structs.\r\n\r\nThere are several other layout options which remain to be supported such as `#[repr(C)]`, `#[repr(transparent)]`, combinations e.g. `#[repr(C, packed(2))]`, as well as layouts on union and enum types.\r\n\r\nFixes: #915 \n\nCo-authored-by: David Faust <david.faust@oracle.com>", "tree": {"sha": "3a1bfc617f39ac85074f456c13617cb749cb4bdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a1bfc617f39ac85074f456c13617cb749cb4bdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f38bf60c3ac7f039db5ff5c7c0587325097892c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJibADoCRBK7hj4Ov3rIwAA9aoIAEBTsYUXjpV/hnk3EDvZsCTk\nMboC+l2uzDNLsTc9UivYkQ65vXtys2JbWUPEsSt5CiaEm/cWL0hNmM66jNhnJbH/\nJD6NB5YandHeje5yIiJO69akSmG1+azUb62BWhDd7OOcdxNZb2j54rkoXJb58tH0\n+KEf/JscK9syhjLLOuYcUyS+KtcX6LOhz5/9GAxN4ZXkIA3nVOpjKabhEu0zkc0d\nTq0kyaauZC8sNtktVgQG2GIosXpHFSLKEZ96/maNqq1+rb7rHDJuMwB8IAJvnhuq\noeLV3w8V2cBC0R0iUxWB2DV/VP18SGDvF6trW1YwV3BQBnpy2d9TgUYVKwuZ3jA=\n=E9b5\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a1bfc617f39ac85074f456c13617cb749cb4bdc\nparent f8a137bd9391733a3d0d7b58f0f30af441e25a5a\nparent fd51331270ed0318144cb0031b21ef710218e2fe\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1651245288 +0000\ncommitter GitHub <noreply@github.com> 1651245288 +0000\n\nMerge #1188\n\n1188: Support align and packed repr layout on structs r=dafaust a=dafaust\n\nThis is a start at handling the various layout options supported by Rust, beginning with `#[repr(align(N))]` and `#[repr(packed(N))]`, on structs and tuple structs.\r\n\r\nThere are several other layout options which remain to be supported such as `#[repr(C)]`, `#[repr(transparent)]`, combinations e.g. `#[repr(C, packed(2))]`, as well as layouts on union and enum types.\r\n\r\nFixes: #915 \n\nCo-authored-by: David Faust <david.faust@oracle.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38bf60c3ac7f039db5ff5c7c0587325097892c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f38bf60c3ac7f039db5ff5c7c0587325097892c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38bf60c3ac7f039db5ff5c7c0587325097892c8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8a137bd9391733a3d0d7b58f0f30af441e25a5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8a137bd9391733a3d0d7b58f0f30af441e25a5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8a137bd9391733a3d0d7b58f0f30af441e25a5a"}, {"sha": "fd51331270ed0318144cb0031b21ef710218e2fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd51331270ed0318144cb0031b21ef710218e2fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd51331270ed0318144cb0031b21ef710218e2fe"}], "stats": {"total": 228, "additions": 223, "deletions": 5}, "files": [{"sha": "16029baf5d258bec3d50e4054f6a5fd1296f774b", "filename": "gcc/rust/backend/rust-compile-type.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Frust%2Fbackend%2Frust-compile-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-type.cc?ref=f38bf60c3ac7f039db5ff5c7c0587325097892c8", "patch": "@@ -280,6 +280,26 @@ TyTyResolveCompile::visit (const TyTy::ADTType &type)\n       type_record = ctx->get_backend ()->union_type (enum_fields);\n     }\n \n+  // Handle repr options\n+  // TODO: \"packed\" should only narrow type alignment and \"align\" should only\n+  // widen it. Do we need to check and enforce this here, or is it taken care of\n+  // later on in the gcc middle-end?\n+  TyTy::ADTType::ReprOptions repr = type.get_repr_options ();\n+  if (repr.pack)\n+    {\n+      TYPE_PACKED (type_record);\n+      if (repr.pack > 1)\n+\t{\n+\t  SET_TYPE_ALIGN (type_record, repr.pack * 8);\n+\t  TYPE_USER_ALIGN (type_record) = 1;\n+\t}\n+    }\n+  else if (repr.align)\n+    {\n+      SET_TYPE_ALIGN (type_record, repr.align * 8);\n+      TYPE_USER_ALIGN (type_record) = 1;\n+    }\n+\n   std::string named_struct_str\n     = type.get_ident ().path.get () + type.subst_as_string ();\n   tree named_struct"}, {"sha": "2a47c58664bbfff62777f3215cdb3a94d7bdca2a", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.cc", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.cc?ref=f38bf60c3ac7f039db5ff5c7c0587325097892c8", "patch": "@@ -260,5 +260,72 @@ TypeCheckBase::resolve_literal (const Analysis::NodeMapping &expr_mappings,\n   return infered;\n }\n \n+TyTy::ADTType::ReprOptions\n+TypeCheckBase::parse_repr_options (const AST::AttrVec &attrs, Location locus)\n+{\n+  TyTy::ADTType::ReprOptions repr;\n+  repr.pack = 0;\n+  repr.align = 0;\n+\n+  for (const auto &attr : attrs)\n+    {\n+      bool is_repr = attr.get_path ().as_string ().compare (\"repr\") == 0;\n+      if (is_repr)\n+\t{\n+\t  const AST::AttrInput &input = attr.get_attr_input ();\n+\t  bool is_token_tree = input.get_attr_input_type ()\n+\t\t\t       == AST::AttrInput::AttrInputType::TOKEN_TREE;\n+\t  rust_assert (is_token_tree);\n+\t  const auto &option = static_cast<const AST::DelimTokenTree &> (input);\n+\t  AST::AttrInputMetaItemContainer *meta_items\n+\t    = option.parse_to_meta_item ();\n+\n+\t  const std::string inline_option\n+\t    = meta_items->get_items ().at (0)->as_string ();\n+\n+\t  // TODO: it would probably be better to make the MetaItems more aware\n+\t  // of constructs with nesting like #[repr(packed(2))] rather than\n+\t  // manually parsing the string \"packed(2)\" here.\n+\n+\t  size_t oparen = inline_option.find ('(', 0);\n+\t  bool is_pack = false, is_align = false;\n+\t  unsigned char value = 1;\n+\n+\t  if (oparen == std::string::npos)\n+\t    {\n+\t      is_pack = inline_option.compare (\"packed\") == 0;\n+\t      is_align = inline_option.compare (\"align\") == 0;\n+\t    }\n+\n+\t  else\n+\t    {\n+\t      std::string rep = inline_option.substr (0, oparen);\n+\t      is_pack = rep.compare (\"packed\") == 0;\n+\t      is_align = rep.compare (\"align\") == 0;\n+\n+\t      size_t cparen = inline_option.find (')', oparen);\n+\t      if (cparen == std::string::npos)\n+\t\t{\n+\t\t  rust_error_at (locus, \"malformed attribute\");\n+\t\t}\n+\n+\t      std::string value_str = inline_option.substr (oparen, cparen);\n+\t      value = strtoul (value_str.c_str () + 1, NULL, 10);\n+\t    }\n+\n+\t  if (is_pack)\n+\t    repr.pack = value;\n+\t  else if (is_align)\n+\t    repr.align = value;\n+\n+\t  // Multiple repr options must be specified with e.g. #[repr(C,\n+\t  // packed(2))].\n+\t  break;\n+\t}\n+    }\n+\n+  return repr;\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "f7a1bd4fa8418c490867d9e750e1ee6242ede50d", "filename": "gcc/rust/typecheck/rust-hir-type-check-base.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-base.h?ref=f38bf60c3ac7f039db5ff5c7c0587325097892c8", "patch": "@@ -58,6 +58,9 @@ class TypeCheckBase : public HIR::HIRFullVisitorBase\n   TyTy::BaseType *resolve_literal (const Analysis::NodeMapping &mappings,\n \t\t\t\t   HIR::Literal &literal, Location locus);\n \n+  TyTy::ADTType::ReprOptions parse_repr_options (const AST::AttrVec &attrs,\n+\t\t\t\t\t\t Location locus);\n+\n   Analysis::Mappings *mappings;\n   Resolver *resolver;\n   TypeCheckContext *context;"}, {"sha": "2f14966ed668ca0ab2dd19692ec57cac7e5f97ff", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=f38bf60c3ac7f039db5ff5c7c0587325097892c8", "patch": "@@ -185,12 +185,18 @@ class TypeCheckStmt : public TypeCheckBase\n \t\t\t    TyTy::VariantDef::VariantType::TUPLE, nullptr,\n \t\t\t    std::move (fields)));\n \n+    // Process #[repr(...)] attribute, if any\n+    const AST::AttrVec &attrs = struct_decl.get_outer_attrs ();\n+    TyTy::ADTType::ReprOptions repr\n+      = parse_repr_options (attrs, struct_decl.get_locus ());\n+\n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n \t\t\t   mappings->get_next_hir_id (),\n \t\t\t   struct_decl.get_identifier (), ident,\n \t\t\t   TyTy::ADTType::ADTKind::TUPLE_STRUCT,\n-\t\t\t   std::move (variants), std::move (substitutions));\n+\t\t\t   std::move (variants), std::move (substitutions),\n+\t\t\t   repr);\n \n     context->insert_type (struct_decl.get_mappings (), type);\n     infered = type;\n@@ -311,12 +317,18 @@ class TypeCheckStmt : public TypeCheckBase\n \t\t\t    TyTy::VariantDef::VariantType::STRUCT, nullptr,\n \t\t\t    std::move (fields)));\n \n+    // Process #[repr(...)] attribute, if any\n+    const AST::AttrVec &attrs = struct_decl.get_outer_attrs ();\n+    TyTy::ADTType::ReprOptions repr\n+      = parse_repr_options (attrs, struct_decl.get_locus ());\n+\n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n \t\t\t   mappings->get_next_hir_id (),\n \t\t\t   struct_decl.get_identifier (), ident,\n \t\t\t   TyTy::ADTType::ADTKind::STRUCT_STRUCT,\n-\t\t\t   std::move (variants), std::move (substitutions));\n+\t\t\t   std::move (variants), std::move (substitutions),\n+\t\t\t   repr);\n \n     context->insert_type (struct_decl.get_mappings (), type);\n     infered = type;"}, {"sha": "eaa8d59d0012c58d9c2d6ff3296d6dc8c123afb3", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=f38bf60c3ac7f039db5ff5c7c0587325097892c8", "patch": "@@ -118,12 +118,18 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t\t\t    TyTy::VariantDef::VariantType::TUPLE, nullptr,\n \t\t\t    std::move (fields)));\n \n+    // Process #[repr(X)] attribute, if any\n+    const AST::AttrVec &attrs = struct_decl.get_outer_attrs ();\n+    TyTy::ADTType::ReprOptions repr\n+      = parse_repr_options (attrs, struct_decl.get_locus ());\n+\n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n \t\t\t   mappings->get_next_hir_id (),\n \t\t\t   struct_decl.get_identifier (), ident,\n \t\t\t   TyTy::ADTType::ADTKind::TUPLE_STRUCT,\n-\t\t\t   std::move (variants), std::move (substitutions));\n+\t\t\t   std::move (variants), std::move (substitutions),\n+\t\t\t   repr);\n \n     context->insert_type (struct_decl.get_mappings (), type);\n   }\n@@ -196,12 +202,18 @@ class TypeCheckTopLevel : public TypeCheckBase\n \t\t\t    TyTy::VariantDef::VariantType::STRUCT, nullptr,\n \t\t\t    std::move (fields)));\n \n+    // Process #[repr(X)] attribute, if any\n+    const AST::AttrVec &attrs = struct_decl.get_outer_attrs ();\n+    TyTy::ADTType::ReprOptions repr\n+      = parse_repr_options (attrs, struct_decl.get_locus ());\n+\n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n \t\t\t   mappings->get_next_hir_id (),\n \t\t\t   struct_decl.get_identifier (), ident,\n \t\t\t   TyTy::ADTType::ADTKind::STRUCT_STRUCT,\n-\t\t\t   std::move (variants), std::move (substitutions));\n+\t\t\t   std::move (variants), std::move (substitutions),\n+\t\t\t   repr);\n \n     context->insert_type (struct_decl.get_mappings (), type);\n   }"}, {"sha": "6fc395c572ba869c56d1e1d94eed1132cf5d9657", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=f38bf60c3ac7f039db5ff5c7c0587325097892c8", "patch": "@@ -961,7 +961,8 @@ ADTType::clone () const\n \n   return new ADTType (get_ref (), get_ty_ref (), identifier, ident,\n \t\t      get_adt_kind (), cloned_variants, clone_substs (),\n-\t\t      used_arguments, get_combined_refs ());\n+\t\t      get_repr_options (), used_arguments,\n+\t\t      get_combined_refs ());\n }\n \n static bool"}, {"sha": "e2f1aa49c8b0b2bce45acf5276381e263e51a712", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=f38bf60c3ac7f039db5ff5c7c0587325097892c8", "patch": "@@ -1254,6 +1254,20 @@ class ADTType : public BaseType, public SubstitutionRef\n     ENUM\n   };\n \n+  // Representation options, specified via attributes e.g. #[repr(packed)]\n+  struct ReprOptions\n+  {\n+    // bool is_c;\n+    // bool is_transparent;\n+    //...\n+\n+    // For align and pack: 0 = unspecified. Nonzero = byte alignment.\n+    // It is an error for both to be nonzero, this should be caught when\n+    // parsing the #[repr] attribute.\n+    unsigned char align = 0;\n+    unsigned char pack = 0;\n+  };\n+\n   ADTType (HirId ref, std::string identifier, RustIdent ident, ADTKind adt_kind,\n \t   std::vector<VariantDef *> variants,\n \t   std::vector<SubstitutionParamMapping> subst_refs,\n@@ -1276,7 +1290,20 @@ class ADTType : public BaseType, public SubstitutionRef\n       identifier (identifier), variants (variants), adt_kind (adt_kind)\n   {}\n \n+  ADTType (HirId ref, HirId ty_ref, std::string identifier, RustIdent ident,\n+\t   ADTKind adt_kind, std::vector<VariantDef *> variants,\n+\t   std::vector<SubstitutionParamMapping> subst_refs, ReprOptions repr,\n+\t   SubstitutionArgumentMappings generic_arguments\n+\t   = SubstitutionArgumentMappings::error (),\n+\t   std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ty_ref, TypeKind::ADT, ident, refs),\n+      SubstitutionRef (std::move (subst_refs), std::move (generic_arguments)),\n+      identifier (identifier), variants (variants), adt_kind (adt_kind),\n+      repr (repr)\n+  {}\n+\n   ADTKind get_adt_kind () const { return adt_kind; }\n+  ReprOptions get_repr_options () const { return repr; }\n \n   bool is_struct_struct () const { return adt_kind == STRUCT_STRUCT; }\n   bool is_tuple_struct () const { return adt_kind == TUPLE_STRUCT; }\n@@ -1385,6 +1412,7 @@ class ADTType : public BaseType, public SubstitutionRef\n   std::string identifier;\n   std::vector<VariantDef *> variants;\n   ADTType::ADTKind adt_kind;\n+  ReprOptions repr;\n };\n \n class FnType : public BaseType, public SubstitutionRef"}, {"sha": "c36d462537d8f58ad653fe36bd8281729fd17f75", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=f38bf60c3ac7f039db5ff5c7c0587325097892c8", "patch": "@@ -33,6 +33,7 @@ static const BuiltinAttrDefinition __definitions[] = {\n   {\"lang\", HIR_LOWERING},\n   {\"link_section\", CODE_GENERATION},\n   {\"no_mangle\", CODE_GENERATION},\n+  {\"repr\", CODE_GENERATION},\n };\n \n BuiltinAttributeMappings *"}, {"sha": "22eb6bc80fb0ddd20a341c033bce399caf61280a", "filename": "gcc/testsuite/rust/compile/struct_align1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_align1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_align1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_align1.rs?ref=f38bf60c3ac7f039db5ff5c7c0587325097892c8", "patch": "@@ -0,0 +1,19 @@\n+#[repr(align(8))]\n+struct Foo {\n+    x: i16,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+    y: i8,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+    z: i32,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+}\n+\n+#[repr(align(8))]\n+struct Bar(i8, i32);\n+\n+fn main () {\n+    let f = Foo { x: 5, y: 2, z: 13 };\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let b = Bar (7, 262);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "ac490643a360a2278089af4068f11d5fc90f90f6", "filename": "gcc/testsuite/rust/compile/struct_align2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_align2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_align2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_align2.rs?ref=f38bf60c3ac7f039db5ff5c7c0587325097892c8", "patch": "@@ -0,0 +1,18 @@\n+\n+fn main () {\n+\n+    #[repr(align(8))]\n+    struct Baz {\n+        x: u16,\n+        y: u32,\n+    };\n+\n+    #[repr(align(4))]\n+    struct Qux (u8, i16);\n+\n+    let b = Baz { x: 5, y: 1984 };\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let c = Qux (1, 2);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "eb9d879c1dc14d243ef54038752be87942b9702f", "filename": "gcc/testsuite/rust/compile/struct_pack1.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_pack1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_pack1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_pack1.rs?ref=f38bf60c3ac7f039db5ff5c7c0587325097892c8", "patch": "@@ -0,0 +1,19 @@\n+#[repr(packed(2))]\n+struct Foo {\n+    x: i16,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+    y: i8,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+    z: i32,\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+}\n+\n+#[repr(packed)]\n+struct Bar(i8, i32);\n+\n+fn main () {\n+    let f = Foo { x: 5, y: 2, z: 13 };\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+    let b = Bar (7, 262);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}, {"sha": "e5f74c20bb0c0245f536f341ae373478fc78abc3", "filename": "gcc/testsuite/rust/compile/struct_pack2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_pack2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38bf60c3ac7f039db5ff5c7c0587325097892c8/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_pack2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fstruct_pack2.rs?ref=f38bf60c3ac7f039db5ff5c7c0587325097892c8", "patch": "@@ -0,0 +1,18 @@\n+\n+fn main () {\n+\n+    #[repr(packed(2))]\n+    struct Baz {\n+        x: u16,\n+        y: u32,\n+    };\n+\n+    #[repr(packed)]\n+    struct Qux (u8, i16);\n+\n+    let b = Baz { x: 5, y: 1984 };\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+\n+    let c = Qux (1, 2);\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+}"}]}