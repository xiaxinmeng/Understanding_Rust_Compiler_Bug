{"sha": "7c8357def14d184fd95d506f0155c62a7141a921", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M4MzU3ZGVmMTRkMTg0ZmQ5NWQ1MDZmMDE1NWM2MmE3MTQxYTkyMQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-08-15T08:55:15Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-08-15T08:55:15Z"}, "message": "Fix merging of 2 predictors (PR tree-optimization/86925).\n\n2018-08-15  Martin Liska  <mliska@suse.cz>\n\n        PR tree-optimization/86925\n\t* predict.c (expr_expected_value_1): When taking\n        later predictor, assign also probability.\n        Use fold_build2_initializer_loc in order to fold\n        the expression in -frounding-math.\n2018-08-15  Martin Liska  <mliska@suse.cz>\n\n        PR tree-optimization/86925\n\t* gcc.dg/predict-20.c: New test.\n\t* gcc.dg/predict-21.c: New test.\n\nFrom-SVN: r263552", "tree": {"sha": "f6bc1fc8f9dbd6e1c5544d6c8d9a027c792a424e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6bc1fc8f9dbd6e1c5544d6c8d9a027c792a424e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c8357def14d184fd95d506f0155c62a7141a921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8357def14d184fd95d506f0155c62a7141a921", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c8357def14d184fd95d506f0155c62a7141a921", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c8357def14d184fd95d506f0155c62a7141a921/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0806181f233acd921de0881a65423eafc7cf8a5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0806181f233acd921de0881a65423eafc7cf8a5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0806181f233acd921de0881a65423eafc7cf8a5e"}], "stats": {"total": 61, "additions": 58, "deletions": 3}, "files": [{"sha": "40c7be5470a426d48f7fecee9a34631694fe1f36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8357def14d184fd95d506f0155c62a7141a921/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8357def14d184fd95d506f0155c62a7141a921/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c8357def14d184fd95d506f0155c62a7141a921", "patch": "@@ -1,3 +1,11 @@\n+2018-08-15  Martin Liska  <mliska@suse.cz>\n+\n+        PR tree-optimization/86925\n+\t* predict.c (expr_expected_value_1): When taking\n+        later predictor, assign also probability.\n+        Use fold_build2_initializer_loc in order to fold\n+        the expression in -frounding-math.\n+\n 2018-08-14 Allan Sandfeld Jensen <allan.jensen@qt.io>\n \n \t* config/i386/i386.c (expand_vec_perm_movs): New method matching movs"}, {"sha": "8c8e79153fc00f2708a72f462454622a3c9ce790", "filename": "gcc/predict.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8357def14d184fd95d506f0155c62a7141a921/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8357def14d184fd95d506f0155c62a7141a921/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=7c8357def14d184fd95d506f0155c62a7141a921", "patch": "@@ -2332,13 +2332,17 @@ expr_expected_value_1 (tree type, tree op0, enum tree_code code,\n \t      if (arg == PHI_RESULT (def))\n \t\tcontinue;\n \n+\t      HOST_WIDE_INT probability2;\n \t      new_val = expr_expected_value (arg, visited, &predictor2,\n-\t\t\t\t\t     probability);\n+\t\t\t\t\t     &probability2);\n \n \t      /* It is difficult to combine value predictors.  Simply assume\n \t\t that later predictor is weaker and take its prediction.  */\n \t      if (*predictor < predictor2)\n-\t\t*predictor = predictor2;\n+\t\t{\n+\t\t  *predictor = predictor2;\n+\t\t  *probability = probability2;\n+\t\t}\n \t      if (!new_val)\n \t\treturn NULL;\n \t      if (!val)\n@@ -2423,7 +2427,8 @@ expr_expected_value_1 (tree type, tree op0, enum tree_code code,\n \t\t  tree base = build_int_cst (integer_type_node,\n \t\t\t\t\t     REG_BR_PROB_BASE);\n \t\t  base = build_real_from_int_cst (t, base);\n-\t\t  tree r = fold_build2 (MULT_EXPR, t, prob, base);\n+\t\t  tree r = fold_build2_initializer_loc (UNKNOWN_LOCATION,\n+\t\t\t\t\t\t\tMULT_EXPR, t, prob, base);\n \t\t  HOST_WIDE_INT probi\n \t\t    = real_to_integer (TREE_REAL_CST_PTR (r));\n \t\t  if (probi >= 0 && probi <= REG_BR_PROB_BASE)"}, {"sha": "46a16279fe055318036e8945ae1ba39b1bb5c6bc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8357def14d184fd95d506f0155c62a7141a921/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8357def14d184fd95d506f0155c62a7141a921/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c8357def14d184fd95d506f0155c62a7141a921", "patch": "@@ -1,3 +1,9 @@\n+2018-08-15  Martin Liska  <mliska@suse.cz>\n+\n+        PR tree-optimization/86925\n+\t* gcc.dg/predict-20.c: New test.\n+\t* gcc.dg/predict-21.c: New test.\n+\n 2018-08-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/init/goto3.C: Adjust for error instead of permerror."}, {"sha": "31d01835b80a32d4b79c69ea90754fbad0fe72a1", "filename": "gcc/testsuite/gcc.dg/predict-20.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8357def14d184fd95d506f0155c62a7141a921/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8357def14d184fd95d506f0155c62a7141a921/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-20.c?ref=7c8357def14d184fd95d506f0155c62a7141a921", "patch": "@@ -0,0 +1,23 @@\n+/* PR tree-optimization/86925 */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate\" } */\n+\n+int a, b;\n+\n+void\n+c ()\n+{\n+  for (;;)\n+    {\n+      if (__builtin_expect (b < 0, 0))\n+\tbreak;\n+      if (__builtin_expect (a, 1))\n+\tbreak;\n+    }\n+  int d = b < 0;\n+  if (__builtin_expect (d, 0))\n+    asm(\"\");\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin_expect heuristics of edge\" 3 \"profile_estimate\"} } */"}, {"sha": "5949e5f4c19b90d18d54dc79d50b8815feff5d3d", "filename": "gcc/testsuite/gcc.dg/predict-21.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c8357def14d184fd95d506f0155c62a7141a921/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c8357def14d184fd95d506f0155c62a7141a921/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpredict-21.c?ref=7c8357def14d184fd95d506f0155c62a7141a921", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-profile_estimate -frounding-math\" } */\n+\n+extern int global;\n+\n+void foo (int base)\n+{\n+  for (int i = 0; __builtin_expect_with_probability (i < base, 1, 0.05f); i++)\n+    global++;\n+}\n+\n+/* { dg-final { scan-tree-dump \"first match heuristics: 5.00%\" \"profile_estimate\"} } */\n+/* { dg-final { scan-tree-dump \"__builtin_expect_with_probability heuristics of edge .*->.*: 5.00%\" \"profile_estimate\"} } */"}]}