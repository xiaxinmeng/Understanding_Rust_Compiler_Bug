{"sha": "fa233e34c957d836e99f74c03556cbe0073f1aa7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmEyMzNlMzRjOTU3ZDgzNmU5OWY3NGMwMzU1NmNiZTAwNzNmMWFhNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-07-29T05:43:43Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-07-29T05:43:43Z"}, "message": "attribs.c (hash_attr, [...]): Constify.\n\n\t* attribs.c (hash_attr, eq_attr, init_attributes): Constify.\n\t* builtins.c (validate_arg, builtin_mathfn_code,\n\tvalidate_arglist): Likewise.\n\t* calls.c (call_expr_flags): Likewise.\n\t* combine.c (reg_nonzero_bits_for_combine,\n\treg_num_sign_bit_copies_for_combine, get_last_value,\n\treg_truncated_to_mode): Likewise.\n\t* emit-rtl.c (subreg_lowpart_p): Likewise.\n\t* expr.c (highest_pow2_factor_for_target,\n\tcategorize_ctor_elements_1, categorize_ctor_elements,\n\tcount_type_elements, contains_packed_reference,\n\thighest_pow2_factor, highest_pow2_factor_for_target): Likewise.\n\t* fold-const.c (may_negate_without_overflow_p, int_const_binop,\n\tfold_convertible_p, operand_equal_p, tree_swap_operands_p,\n\tnative_encode_int, native_encode_real, native_encode_complex,\n\tnative_encode_vector, native_encode_expr, native_interpret_int,\n\tnative_interpret_real, native_interpret_complex,\n\tnative_interpret_vector, native_interpret_expr): Likewise.\n\t* function.c (use_register_for_decl): Likewise.\n\t* gimplify.c (get_name): Likewise.\n\t* langhooks-def.h (lhd_return_null_const_tree): New.\n\t(LANG_HOOKS_GET_CALLEE_FNDECL): Use it.\n\t* langhooks.c (lhd_return_null_const_tree): New.\n\t* langhooks.h (lang_get_callee_fndecl): Constify.\n\t* output.h (constructor_static_from_elts_p): Likewise.\n\t* rtl-factoring.c (gen_symbol_ref_rtx_for_label): Likewise.\n\t* rtl.h (nonzero_bits, num_sign_bit_copies, truncated_to_mode,\n\tsubreg_lowpart_p, noop_move_p, struct rtl_hooks): Likewise.\n\t* rtlanal.c (cached_nonzero_bits, nonzero_bits1,\n\tcached_num_sign_bit_copies, num_sign_bit_copies1, noop_move_p,\n\tnonzero_bits, num_sign_bit_copies, truncated_to_mode): Likewise.\n\t* rtlhooks-def.h (reg_nonzero_bits_general,\n\treg_num_sign_bit_copies_general, reg_truncated_to_mode_general):\n\tLikewise. \n\t* rtlhooks.c (reg_num_sign_bit_copies_general,\n\treg_nonzero_bits_general, reg_truncated_to_mode_general):\n\tLikewise. \n\t* stmt.c (warn_if_unused_value, is_body_block): Likewise.\n\t* stor-layout.c (mode_for_size_tree): Likewise.\n\t* tree-ssa-loop-im.c (memref_eq): Likewise.\n\t* tree-ssa-loop-ivopts.c (tree_int_cst_sign_bit): Likewise.\n\t* tree.c (contains_placeholder_p, type_list_equal,\n\tsimple_cst_equal, get_callee_fndecl, operand_equal_for_phi_arg_p):\n\tLikewise. \n\t* tree.h (tree_int_cst_sign_bit, may_negate_without_overflow_p,\n\tmode_for_size_tree, categorize_ctor_elements, count_type_elements,\n\tcontains_placeholder_p, contains_packed_reference,\n\tget_callee_fndecl, operand_equal_for_phi_arg_p,\n\twarn_if_unused_value, is_body_block, native_encode_expr,\n\tnative_interpret_expr, fold_convertible_p, operand_equal_p,\n\tint_const_binop, tree_swap_operands_p, builtin_mathfn_code,\n\tvalidate_arglist, simple_cst_equal, type_list_equal,\n\tuse_register_for_decl, call_expr_flags, get_name,\n\thighest_pow2_factor): Likewise.\n\t(const_call_expr_arg_iterator_d,\n\tinit_const_call_expr_arg_iterator, next_const_call_expr_arg,\n\tfirst_const_call_expr_arg, more_const_call_expr_args_p,\n\tFOR_EACH_CONST_CALL_EXPR_ARG): New.\n\t* varasm.c (constructor_static_from_elts_p): Constify.\n\t\ncp:\n\t* parser.c (eof_token): Un-constify.\n\t(cp_lexer_new_main, cp_lexer_new_from_tokens, VEC_alloc,\n\tcp_lexer_consume_token, cp_lexer_purge_token): Remove spurious\n\tcasts.\n\njava:\n\t* lang.c (java_get_callee_fndecl): Constify.\n\nobjc:\n\t* objc-act.c (objc_get_callee_fndecl): Constify.\n\t* objc-act.h (objc_get_callee_fndecl): Likewise.\n\nFrom-SVN: r127036", "tree": {"sha": "41da24bff35b17064ab893482d89e84d395707fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41da24bff35b17064ab893482d89e84d395707fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa233e34c957d836e99f74c03556cbe0073f1aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa233e34c957d836e99f74c03556cbe0073f1aa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa233e34c957d836e99f74c03556cbe0073f1aa7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa233e34c957d836e99f74c03556cbe0073f1aa7/comments", "author": null, "committer": null, "parents": [{"sha": "5d16f08a8991d4654a7dd305d6098ee2b3d102d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d16f08a8991d4654a7dd305d6098ee2b3d102d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d16f08a8991d4654a7dd305d6098ee2b3d102d9"}], "stats": {"total": 443, "additions": 286, "deletions": 157}, "files": [{"sha": "08ee9248ce6f9e37661be73573843a21a0ff0a37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -1,3 +1,65 @@\n+2007-07-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* attribs.c (hash_attr, eq_attr, init_attributes): Constify.\n+\t* builtins.c (validate_arg, builtin_mathfn_code,\n+\tvalidate_arglist): Likewise.\n+\t* calls.c (call_expr_flags): Likewise.\n+\t* combine.c (reg_nonzero_bits_for_combine,\n+\treg_num_sign_bit_copies_for_combine, get_last_value,\n+\treg_truncated_to_mode): Likewise.\n+\t* emit-rtl.c (subreg_lowpart_p): Likewise.\n+\t* expr.c (highest_pow2_factor_for_target,\n+\tcategorize_ctor_elements_1, categorize_ctor_elements,\n+\tcount_type_elements, contains_packed_reference,\n+\thighest_pow2_factor, highest_pow2_factor_for_target): Likewise.\n+\t* fold-const.c (may_negate_without_overflow_p, int_const_binop,\n+\tfold_convertible_p, operand_equal_p, tree_swap_operands_p,\n+\tnative_encode_int, native_encode_real, native_encode_complex,\n+\tnative_encode_vector, native_encode_expr, native_interpret_int,\n+\tnative_interpret_real, native_interpret_complex,\n+\tnative_interpret_vector, native_interpret_expr): Likewise.\n+\t* function.c (use_register_for_decl): Likewise.\n+\t* gimplify.c (get_name): Likewise.\n+\t* langhooks-def.h (lhd_return_null_const_tree): New.\n+\t(LANG_HOOKS_GET_CALLEE_FNDECL): Use it.\n+\t* langhooks.c (lhd_return_null_const_tree): New.\n+\t* langhooks.h (lang_get_callee_fndecl): Constify.\n+\t* output.h (constructor_static_from_elts_p): Likewise.\n+\t* rtl-factoring.c (gen_symbol_ref_rtx_for_label): Likewise.\n+\t* rtl.h (nonzero_bits, num_sign_bit_copies, truncated_to_mode,\n+\tsubreg_lowpart_p, noop_move_p, struct rtl_hooks): Likewise.\n+\t* rtlanal.c (cached_nonzero_bits, nonzero_bits1,\n+\tcached_num_sign_bit_copies, num_sign_bit_copies1, noop_move_p,\n+\tnonzero_bits, num_sign_bit_copies, truncated_to_mode): Likewise.\n+\t* rtlhooks-def.h (reg_nonzero_bits_general,\n+\treg_num_sign_bit_copies_general, reg_truncated_to_mode_general):\n+\tLikewise. \n+\t* rtlhooks.c (reg_num_sign_bit_copies_general,\n+\treg_nonzero_bits_general, reg_truncated_to_mode_general):\n+\tLikewise. \n+\t* stmt.c (warn_if_unused_value, is_body_block): Likewise.\n+\t* stor-layout.c (mode_for_size_tree): Likewise.\n+\t* tree-ssa-loop-im.c (memref_eq): Likewise.\n+\t* tree-ssa-loop-ivopts.c (tree_int_cst_sign_bit): Likewise.\n+\t* tree.c (contains_placeholder_p, type_list_equal,\n+\tsimple_cst_equal, get_callee_fndecl, operand_equal_for_phi_arg_p):\n+\tLikewise. \n+\t* tree.h (tree_int_cst_sign_bit, may_negate_without_overflow_p,\n+\tmode_for_size_tree, categorize_ctor_elements, count_type_elements,\n+\tcontains_placeholder_p, contains_packed_reference,\n+\tget_callee_fndecl, operand_equal_for_phi_arg_p,\n+\twarn_if_unused_value, is_body_block, native_encode_expr,\n+\tnative_interpret_expr, fold_convertible_p, operand_equal_p,\n+\tint_const_binop, tree_swap_operands_p, builtin_mathfn_code,\n+\tvalidate_arglist, simple_cst_equal, type_list_equal,\n+\tuse_register_for_decl, call_expr_flags, get_name,\n+\thighest_pow2_factor): Likewise.\n+\t(const_call_expr_arg_iterator_d,\n+\tinit_const_call_expr_arg_iterator, next_const_call_expr_arg,\n+\tfirst_const_call_expr_arg, more_const_call_expr_args_p,\n+\tFOR_EACH_CONST_CALL_EXPR_ARG): New.\n+\t* varasm.c (constructor_static_from_elts_p): Constify.\n+\n 2007-07-28  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* cfglayout.c, config/arm/arm.c, config/arm/cortex-a8.md,"}, {"sha": "feb1c301570fda3d551fd034accca2d23624b7a7", "filename": "gcc/attribs.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -87,8 +87,8 @@ substring_hash (const char *str, int l)\n static hashval_t\n hash_attr (const void *p)\n {\n-  struct attribute_spec *spec = (struct attribute_spec *) p;\n-  int l = strlen (spec->name);\n+  const struct attribute_spec *const spec = (const struct attribute_spec *) p;\n+  const int l = strlen (spec->name);\n \n   return substring_hash (spec->name, l);\n }\n@@ -98,8 +98,8 @@ hash_attr (const void *p)\n static int\n eq_attr (const void *p, const void *q)\n {\n-  const struct attribute_spec *spec = (struct attribute_spec *) p;\n-  const struct substring *str = (struct substring *) q;\n+  const struct attribute_spec *const spec = (const struct attribute_spec *) p;\n+  const struct substring *const str = (const struct substring *) q;\n \n   return (!strncmp (spec->name, str->str, str->length) && !spec->name[str->length]);\n }\n@@ -183,15 +183,15 @@ init_attributes (void)\n     for (k = 0; attribute_tables[i][k].name != NULL; k++)\n       {\n \tstruct substring str;\n-\tvoid **slot;\n+\tconst void **slot;\n \n \tstr.str = attribute_tables[i][k].name;\n \tstr.length = strlen (attribute_tables[i][k].name);\n-\tslot = htab_find_slot_with_hash (attribute_hash, &str,\n+\tslot = (const void **)htab_find_slot_with_hash (attribute_hash, &str,\n \t\t\t\t\t substring_hash (str.str, str.length),\n \t\t\t\t\t INSERT);\n \tgcc_assert (!*slot);\n-\t*slot = (void *)&attribute_tables[i][k];\n+\t*slot = &attribute_tables[i][k];\n       }\n   attributes_initialized = true;\n }"}, {"sha": "39b4fcc8dd2316defa13647a3f4a779da715095b", "filename": "gcc/builtins.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -152,7 +152,7 @@ static tree fold_builtin_strlen (tree);\n static tree fold_builtin_inf (tree, int);\n static tree fold_builtin_nan (tree, tree, int);\n static tree rewrite_call_expr (tree, int, tree, int, ...);\n-static bool validate_arg (tree, enum tree_code code);\n+static bool validate_arg (const_tree, enum tree_code code);\n static bool integer_valued_real_p (tree);\n static tree fold_trunc_transparent_mathfn (tree, tree);\n static bool readonly_data_expr (tree);\n@@ -6984,11 +6984,11 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n    Otherwise the return value is END_BUILTINS.  */\n \n enum built_in_function\n-builtin_mathfn_code (tree t)\n+builtin_mathfn_code (const_tree t)\n {\n-  tree fndecl, arg, parmlist;\n-  tree argtype, parmtype;\n-  call_expr_arg_iterator iter;\n+  const_tree fndecl, arg, parmlist;\n+  const_tree argtype, parmtype;\n+  const_call_expr_arg_iterator iter;\n \n   if (TREE_CODE (t) != CALL_EXPR\n       || TREE_CODE (CALL_EXPR_FN (t)) != ADDR_EXPR)\n@@ -7002,23 +7002,23 @@ builtin_mathfn_code (tree t)\n     return END_BUILTINS;\n \n   parmlist = TYPE_ARG_TYPES (TREE_TYPE (fndecl));\n-  init_call_expr_arg_iterator (t, &iter);\n+  init_const_call_expr_arg_iterator (t, &iter);\n   for (; parmlist; parmlist = TREE_CHAIN (parmlist))\n     {\n       /* If a function doesn't take a variable number of arguments,\n \t the last element in the list will have type `void'.  */\n       parmtype = TREE_VALUE (parmlist);\n       if (VOID_TYPE_P (parmtype))\n \t{\n-\t  if (more_call_expr_args_p (&iter))\n+\t  if (more_const_call_expr_args_p (&iter))\n \t    return END_BUILTINS;\n \t  return DECL_FUNCTION_CODE (fndecl);\n \t}\n \n-      if (! more_call_expr_args_p (&iter))\n+      if (! more_const_call_expr_args_p (&iter))\n \treturn END_BUILTINS;\n       \n-      arg = next_call_expr_arg (&iter);\n+      arg = next_const_call_expr_arg (&iter);\n       argtype = TREE_TYPE (arg);\n \n       if (SCALAR_FLOAT_TYPE_P (parmtype))\n@@ -10609,7 +10609,7 @@ rewrite_call_expr (tree exp, int skip, tree fndecl, int n, ...)\n    a type.  */\n   \n static bool\n-validate_arg (tree arg, enum tree_code code)\n+validate_arg (const_tree arg, enum tree_code code)\n {\n   if (!arg)\n     return false;\n@@ -10624,16 +10624,16 @@ validate_arg (tree arg, enum tree_code code)\n    VOID_TYPE.  */\n \n bool\n-validate_arglist (tree callexpr, ...)\n+validate_arglist (const_tree callexpr, ...)\n {\n   enum tree_code code;\n   bool res = 0;\n   va_list ap;\n-  call_expr_arg_iterator iter;\n-  tree arg;\n+  const_call_expr_arg_iterator iter;\n+  const_tree arg;\n \n   va_start (ap, callexpr);\n-  init_call_expr_arg_iterator (callexpr, &iter);\n+  init_const_call_expr_arg_iterator (callexpr, &iter);\n \n   do\n     {\n@@ -10647,13 +10647,13 @@ validate_arglist (tree callexpr, ...)\n \tcase VOID_TYPE:\n \t  /* This signifies an endlink, if no arguments remain, return\n \t     true, otherwise return false.  */\n-\t  res = !more_call_expr_args_p (&iter);\n+\t  res = !more_const_call_expr_args_p (&iter);\n \t  goto end;\n \tdefault:\n \t  /* If no parameters remain or the parameter's code does not\n \t     match the specified code, return false.  Otherwise continue\n \t     checking any remaining arguments.  */\n-\t  arg = next_call_expr_arg (&iter);\n+\t  arg = next_const_call_expr_arg (&iter);\n \t  if (!validate_arg (arg, code))\n \t    goto end;\n \t  break;"}, {"sha": "98fc8f503b0fe11137c93f18aa1990145244b8b1", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -616,7 +616,7 @@ flags_from_decl_or_type (const_tree exp)\n /* Detect flags from a CALL_EXPR.  */\n \n int\n-call_expr_flags (tree t)\n+call_expr_flags (const_tree t)\n {\n   int flags;\n   tree decl = get_callee_fndecl (t);"}, {"sha": "dda1a5b0152a5a94792223367e698a7a5501c4c5", "filename": "gcc/combine.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -368,11 +368,11 @@ static struct undobuf undobuf;\n \n static int n_occurrences;\n \n-static rtx reg_nonzero_bits_for_combine (rtx, enum machine_mode, rtx,\n+static rtx reg_nonzero_bits_for_combine (const_rtx, enum machine_mode, const_rtx,\n \t\t\t\t\t enum machine_mode,\n \t\t\t\t\t unsigned HOST_WIDE_INT,\n \t\t\t\t\t unsigned HOST_WIDE_INT *);\n-static rtx reg_num_sign_bit_copies_for_combine (rtx, enum machine_mode, rtx,\n+static rtx reg_num_sign_bit_copies_for_combine (const_rtx, enum machine_mode, const_rtx,\n \t\t\t\t\t\tenum machine_mode,\n \t\t\t\t\t\tunsigned int, unsigned int *);\n static void do_SUBST (rtx *, rtx);\n@@ -428,7 +428,7 @@ static void check_conversions (rtx, rtx);\n static void record_dead_and_set_regs_1 (rtx, rtx, void *);\n static void record_dead_and_set_regs (rtx);\n static int get_last_value_validate (rtx *, rtx, int, int);\n-static rtx get_last_value (rtx);\n+static rtx get_last_value (const_rtx);\n static int use_crosses_set_p (rtx, int);\n static void reg_dead_at_p_1 (rtx, rtx, void *);\n static int reg_dead_at_p (rtx, rtx);\n@@ -441,7 +441,7 @@ static void record_promoted_value (rtx, rtx);\n static int unmentioned_reg_p_1 (rtx *, void *);\n static bool unmentioned_reg_p (rtx, rtx);\n static void record_truncated_value (rtx);\n-static bool reg_truncated_to_mode (enum machine_mode, rtx);\n+static bool reg_truncated_to_mode (enum machine_mode, const_rtx);\n static rtx gen_lowpart_or_truncate (enum machine_mode, rtx);\n \f\n \n@@ -8622,8 +8622,8 @@ simplify_and_const_int (rtx x, enum machine_mode mode, rtx varop,\n    a shift, AND, or zero_extract, we can do better.  */\n \n static rtx\n-reg_nonzero_bits_for_combine (rtx x, enum machine_mode mode,\n-\t\t\t      rtx known_x ATTRIBUTE_UNUSED,\n+reg_nonzero_bits_for_combine (const_rtx x, enum machine_mode mode,\n+\t\t\t      const_rtx known_x ATTRIBUTE_UNUSED,\n \t\t\t      enum machine_mode known_mode ATTRIBUTE_UNUSED,\n \t\t\t      unsigned HOST_WIDE_INT known_ret ATTRIBUTE_UNUSED,\n \t\t\t      unsigned HOST_WIDE_INT *nonzero)\n@@ -8699,8 +8699,8 @@ reg_nonzero_bits_for_combine (rtx x, enum machine_mode mode,\n    be between 1 and the number of bits in MODE.  */\n \n static rtx\n-reg_num_sign_bit_copies_for_combine (rtx x, enum machine_mode mode,\n-\t\t\t\t     rtx known_x ATTRIBUTE_UNUSED,\n+reg_num_sign_bit_copies_for_combine (const_rtx x, enum machine_mode mode,\n+\t\t\t\t     const_rtx known_x ATTRIBUTE_UNUSED,\n \t\t\t\t     enum machine_mode known_mode\n \t\t\t\t     ATTRIBUTE_UNUSED,\n \t\t\t\t     unsigned int known_ret ATTRIBUTE_UNUSED,\n@@ -11518,7 +11518,7 @@ record_promoted_value (rtx insn, rtx subreg)\n    an explicit truncation.  */\n \n static bool\n-reg_truncated_to_mode (enum machine_mode mode, rtx x)\n+reg_truncated_to_mode (enum machine_mode mode, const_rtx x)\n {\n   reg_stat_type *rsp = VEC_index (reg_stat_type, reg_stat, REGNO (x));\n   enum machine_mode truncated = rsp->truncated_to_mode;\n@@ -11720,7 +11720,7 @@ get_last_value_validate (rtx *loc, rtx insn, int tick, int replace)\n    is known longer known reliably.  */\n \n static rtx\n-get_last_value (rtx x)\n+get_last_value (const_rtx x)\n {\n   unsigned int regno;\n   rtx value;"}, {"sha": "24006fefdaa70f431d3fd90d8f334972dd4d9758", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -1,3 +1,10 @@\n+2007-07-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* parser.c (eof_token): Un-constify.\n+\t(cp_lexer_new_main, cp_lexer_new_from_tokens, VEC_alloc,\n+\tcp_lexer_consume_token, cp_lexer_purge_token): Remove spurious\n+\tcasts.\n+\n 2007-07-28  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* pt.c, tree.c, typeck2.c: Fix comment typos."}, {"sha": "1b12d7999a2d23aeba5b6386b9241ca3e1523761", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -98,7 +98,7 @@ typedef struct cp_token *cp_token_position;\n DEF_VEC_P (cp_token_position);\n DEF_VEC_ALLOC_P (cp_token_position,heap);\n \n-static const cp_token eof_token =\n+static cp_token eof_token =\n {\n   CPP_EOF, RID_MAX, 0, PRAGMA_NONE, 0, 0, false, 0, { NULL },\n #if USE_MAPPED_LOCATION\n@@ -318,7 +318,7 @@ cp_lexer_new_main (void)\n   lexer->buffer = buffer;\n   lexer->buffer_length = alloc - space;\n   lexer->last_token = pos;\n-  lexer->next_token = lexer->buffer_length ? buffer : (cp_token *)&eof_token;\n+  lexer->next_token = lexer->buffer_length ? buffer : &eof_token;\n \n   /* Subsequent preprocessor diagnostics should use compiler\n      diagnostic functions to get the compiler source location.  */\n@@ -342,7 +342,7 @@ cp_lexer_new_from_tokens (cp_token_cache *cache)\n   /* We do not own the buffer.  */\n   lexer->buffer = NULL;\n   lexer->buffer_length = 0;\n-  lexer->next_token = first == last ? (cp_token *)&eof_token : first;\n+  lexer->next_token = first == last ? &eof_token : first;\n   lexer->last_token = last;\n \n   lexer->saved_tokens = VEC_alloc (cp_token_position, heap,\n@@ -612,7 +612,7 @@ cp_lexer_peek_nth_token (cp_lexer* lexer, size_t n)\n       ++token;\n       if (token == lexer->last_token)\n \t{\n-\t  token = (cp_token *)&eof_token;\n+\t  token = &eof_token;\n \t  break;\n \t}\n \n@@ -645,7 +645,7 @@ cp_lexer_consume_token (cp_lexer* lexer)\n       lexer->next_token++;\n       if (lexer->next_token == lexer->last_token)\n \t{\n-\t  lexer->next_token = (cp_token *)&eof_token;\n+\t  lexer->next_token = &eof_token;\n \t  break;\n \t}\n \n@@ -685,7 +685,7 @@ cp_lexer_purge_token (cp_lexer *lexer)\n       tok++;\n       if (tok == lexer->last_token)\n \t{\n-\t  tok = (cp_token *)&eof_token;\n+\t  tok = &eof_token;\n \t  break;\n \t}\n     }"}, {"sha": "fbc74eb207c58693bb8ea3bbffefc28a9ebd4512", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -1283,7 +1283,7 @@ subreg_highpart_offset (enum machine_mode outermode, enum machine_mode innermode\n    If X is not a SUBREG, always return 1 (it is its own low part!).  */\n \n int\n-subreg_lowpart_p (rtx x)\n+subreg_lowpart_p (const_rtx x)\n {\n   if (GET_CODE (x) != SUBREG)\n     return 1;"}, {"sha": "2119ab7d5ce0e8628c89a3e0952cf2985c21997b", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -144,7 +144,7 @@ static void store_constructor (tree, rtx, int, HOST_WIDE_INT);\n static rtx store_field (rtx, HOST_WIDE_INT, HOST_WIDE_INT, enum machine_mode,\n \t\t\ttree, tree, int, bool);\n \n-static unsigned HOST_WIDE_INT highest_pow2_factor_for_target (tree, tree);\n+static unsigned HOST_WIDE_INT highest_pow2_factor_for_target (const_tree, const_tree);\n \n static int is_aligning_offset (tree, tree);\n static void expand_operands (tree, tree, rtx, rtx*, rtx*,\n@@ -4656,7 +4656,7 @@ store_expr (tree exp, rtx target, int call_param_p, bool nontemporal)\n /* Helper for categorize_ctor_elements.  Identical interface.  */\n \n static bool\n-categorize_ctor_elements_1 (tree ctor, HOST_WIDE_INT *p_nz_elts,\n+categorize_ctor_elements_1 (const_tree ctor, HOST_WIDE_INT *p_nz_elts,\n \t\t\t    HOST_WIDE_INT *p_elt_count,\n \t\t\t    bool *p_must_clear)\n {\n@@ -4802,7 +4802,7 @@ categorize_ctor_elements_1 (tree ctor, HOST_WIDE_INT *p_nz_elts,\n    as \"initializer_constant_valid_p (CTOR, TREE_TYPE (CTOR)) != 0\".  */\n \n bool\n-categorize_ctor_elements (tree ctor, HOST_WIDE_INT *p_nz_elts,\n+categorize_ctor_elements (const_tree ctor, HOST_WIDE_INT *p_nz_elts,\n \t\t\t  HOST_WIDE_INT *p_elt_count,\n \t\t\t  bool *p_must_clear)\n {\n@@ -4819,7 +4819,7 @@ categorize_ctor_elements (tree ctor, HOST_WIDE_INT *p_nz_elts,\n    array member at the end of the structure.  */\n \n HOST_WIDE_INT\n-count_type_elements (tree type, bool allow_flexarr)\n+count_type_elements (const_tree type, bool allow_flexarr)\n {\n   const HOST_WIDE_INT max = ~((HOST_WIDE_INT)1 << (HOST_BITS_PER_WIDE_INT-1));\n   switch (TREE_CODE (type))\n@@ -5928,7 +5928,7 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n    as PACKED.  */\n \n bool\n-contains_packed_reference (tree exp)\n+contains_packed_reference (const_tree exp)\n {\n   bool packed_p = false;\n \n@@ -6446,7 +6446,7 @@ safe_from_p (rtx x, tree exp, int top_p)\n    This is used in updating alignment of MEMs in array references.  */\n \n unsigned HOST_WIDE_INT\n-highest_pow2_factor (tree exp)\n+highest_pow2_factor (const_tree exp)\n {\n   unsigned HOST_WIDE_INT c0, c1;\n \n@@ -6517,7 +6517,7 @@ highest_pow2_factor (tree exp)\n    the structure gives the alignment.  */\n \n static unsigned HOST_WIDE_INT\n-highest_pow2_factor_for_target (tree target, tree exp)\n+highest_pow2_factor_for_target (const_tree target, const_tree exp)\n {\n   unsigned HOST_WIDE_INT target_align, factor;\n "}, {"sha": "614e55a63659ea5b137b3176e5c35520f640d7a0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -1074,7 +1074,7 @@ negate_mathfn_p (enum built_in_function code)\n    overflow.  */\n \n bool\n-may_negate_without_overflow_p (tree t)\n+may_negate_without_overflow_p (const_tree t)\n {\n   unsigned HOST_WIDE_INT val;\n   unsigned int prec;\n@@ -1620,7 +1620,7 @@ int_binop_types_match_p (enum tree_code code, tree type1, tree type2)\n    If NOTRUNC is nonzero, do not truncate the result to fit the data type.  */\n \n tree\n-int_const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n+int_const_binop (enum tree_code code, const_tree arg1, const_tree arg2, int notrunc)\n {\n   unsigned HOST_WIDE_INT int1l, int2l;\n   HOST_WIDE_INT int1h, int2h;\n@@ -2213,7 +2213,7 @@ build_zero_vector (tree type)\n /* Returns true, if ARG is convertible to TYPE using a NOP_EXPR.  */\n \n bool\n-fold_convertible_p (tree type, tree arg)\n+fold_convertible_p (const_tree type, const_tree arg)\n {\n   tree orig = TREE_TYPE (arg);\n \n@@ -2744,7 +2744,7 @@ truth_value_p (enum tree_code code)\n    to ensure that global memory is unchanged in between.  */\n \n int\n-operand_equal_p (tree arg0, tree arg1, unsigned int flags)\n+operand_equal_p (const_tree arg0, const_tree arg1, unsigned int flags)\n {\n   /* If either is ERROR_MARK, they aren't equal.  */\n   if (TREE_CODE (arg0) == ERROR_MARK || TREE_CODE (arg1) == ERROR_MARK)\n@@ -2997,13 +2997,13 @@ operand_equal_p (tree arg0, tree arg1, unsigned int flags)\n \n \t  /* Now see if all the arguments are the same.  */\n \t  {\n-\t    call_expr_arg_iterator iter0, iter1;\n-\t    tree a0, a1;\n-\t    for (a0 = first_call_expr_arg (arg0, &iter0),\n-\t\t   a1 = first_call_expr_arg (arg1, &iter1);\n+\t    const_call_expr_arg_iterator iter0, iter1;\n+\t    const_tree a0, a1;\n+\t    for (a0 = first_const_call_expr_arg (arg0, &iter0),\n+\t\t   a1 = first_const_call_expr_arg (arg1, &iter1);\n \t\t a0 && a1;\n-\t\t a0 = next_call_expr_arg (&iter0),\n-\t\t   a1 = next_call_expr_arg (&iter1))\n+\t\t a0 = next_const_call_expr_arg (&iter0),\n+\t\t   a1 = next_const_call_expr_arg (&iter1))\n \t      if (! operand_equal_p (a0, a1, flags))\n \t\treturn 0;\n \n@@ -6722,7 +6722,7 @@ reorder_operands_p (tree arg0, tree arg1)\n    evaluate the operands in reverse order.  */\n \n bool\n-tree_swap_operands_p (tree arg0, tree arg1, bool reorder)\n+tree_swap_operands_p (const_tree arg0, const_tree arg1, bool reorder)\n {\n   STRIP_SIGN_NOPS (arg0);\n   STRIP_SIGN_NOPS (arg1);\n@@ -7217,7 +7217,7 @@ fold_plusminus_mult_expr (enum tree_code code, tree type, tree arg0, tree arg1)\n    upon failure.  */\n \n static int\n-native_encode_int (tree expr, unsigned char *ptr, int len)\n+native_encode_int (const_tree expr, unsigned char *ptr, int len)\n {\n   tree type = TREE_TYPE (expr);\n   int total_bytes = GET_MODE_SIZE (TYPE_MODE (type));\n@@ -7262,7 +7262,7 @@ native_encode_int (tree expr, unsigned char *ptr, int len)\n    upon failure.  */\n \n static int\n-native_encode_real (tree expr, unsigned char *ptr, int len)\n+native_encode_real (const_tree expr, unsigned char *ptr, int len)\n {\n   tree type = TREE_TYPE (expr);\n   int total_bytes = GET_MODE_SIZE (TYPE_MODE (type));\n@@ -7310,7 +7310,7 @@ native_encode_real (tree expr, unsigned char *ptr, int len)\n    upon failure.  */\n \n static int\n-native_encode_complex (tree expr, unsigned char *ptr, int len)\n+native_encode_complex (const_tree expr, unsigned char *ptr, int len)\n {\n   int rsize, isize;\n   tree part;\n@@ -7333,7 +7333,7 @@ native_encode_complex (tree expr, unsigned char *ptr, int len)\n    upon failure.  */\n \n static int\n-native_encode_vector (tree expr, unsigned char *ptr, int len)\n+native_encode_vector (const_tree expr, unsigned char *ptr, int len)\n {\n   int i, size, offset, count;\n   tree itype, elem, elements;\n@@ -7376,7 +7376,7 @@ native_encode_vector (tree expr, unsigned char *ptr, int len)\n    placed in the buffer, or zero upon failure.  */\n \n int\n-native_encode_expr (tree expr, unsigned char *ptr, int len)\n+native_encode_expr (const_tree expr, unsigned char *ptr, int len)\n {\n   switch (TREE_CODE (expr))\n     {\n@@ -7403,7 +7403,7 @@ native_encode_expr (tree expr, unsigned char *ptr, int len)\n    If the buffer cannot be interpreted, return NULL_TREE.  */\n \n static tree\n-native_interpret_int (tree type, unsigned char *ptr, int len)\n+native_interpret_int (tree type, const unsigned char *ptr, int len)\n {\n   int total_bytes = GET_MODE_SIZE (TYPE_MODE (type));\n   int byte, offset, word, words;\n@@ -7451,7 +7451,7 @@ native_interpret_int (tree type, unsigned char *ptr, int len)\n    If the buffer cannot be interpreted, return NULL_TREE.  */\n \n static tree\n-native_interpret_real (tree type, unsigned char *ptr, int len)\n+native_interpret_real (tree type, const unsigned char *ptr, int len)\n {\n   enum machine_mode mode = TYPE_MODE (type);\n   int total_bytes = GET_MODE_SIZE (mode);\n@@ -7501,7 +7501,7 @@ native_interpret_real (tree type, unsigned char *ptr, int len)\n    If the buffer cannot be interpreted, return NULL_TREE.  */\n \n static tree\n-native_interpret_complex (tree type, unsigned char *ptr, int len)\n+native_interpret_complex (tree type, const unsigned char *ptr, int len)\n {\n   tree etype, rpart, ipart;\n   int size;\n@@ -7525,7 +7525,7 @@ native_interpret_complex (tree type, unsigned char *ptr, int len)\n    If the buffer cannot be interpreted, return NULL_TREE.  */\n \n static tree\n-native_interpret_vector (tree type, unsigned char *ptr, int len)\n+native_interpret_vector (tree type, const unsigned char *ptr, int len)\n {\n   tree etype, elem, elements;\n   int i, size, count;\n@@ -7555,7 +7555,7 @@ native_interpret_vector (tree type, unsigned char *ptr, int len)\n    return NULL_TREE.  */\n \n tree\n-native_interpret_expr (tree type, unsigned char *ptr, int len)\n+native_interpret_expr (tree type, const unsigned char *ptr, int len)\n {\n   switch (TREE_CODE (type))\n     {"}, {"sha": "eaeaeebc1a9e46bce3fbc9ddd924f826bbbf9263", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -1824,7 +1824,7 @@ aggregate_value_p (tree exp, tree fntype)\n    should live on the local stack.  */\n \n bool\n-use_register_for_decl (tree decl)\n+use_register_for_decl (const_tree decl)\n {\n   /* Honor volatile.  */\n   if (TREE_SIDE_EFFECTS (decl))"}, {"sha": "5b317c7230e8a4a206d2e3997e875ecb1920974c", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -505,9 +505,9 @@ create_tmp_var (tree type, const char *prefix)\n     I.E. given  <temp> = &A, return A.  */\n \n const char *\n-get_name (tree t)\n+get_name (const_tree t)\n {\n-  tree stripped_decl;\n+  const_tree stripped_decl;\n \n   stripped_decl = t;\n   STRIP_NOPS (stripped_decl);"}, {"sha": "e7b05e7981aa241489da6e2cfe1c4fe45b558325", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -1,3 +1,7 @@\n+2007-07-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* lang.c (java_get_callee_fndecl): Constify.\n+\n 2007-07-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* mangle.c (set_type_package_list): Constify."}, {"sha": "3f2af64e468b589f3a4e0c364c26cd5818e0db7e", "filename": "gcc/java/lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -63,7 +63,7 @@ static int inline_init_test_initialization (void * *, void *);\n static bool java_dump_tree (void *, tree);\n static void dump_compound_expr (dump_info_p, tree);\n static bool java_decl_ok_for_sibcall (tree);\n-static tree java_get_callee_fndecl (tree);\n+static tree java_get_callee_fndecl (const_tree);\n static void java_clear_binding_stack (void);\n \n #ifndef TARGET_OBJECT_SUFFIX\n@@ -951,7 +951,7 @@ java_decl_ok_for_sibcall (tree decl)\n    will replace the indirection with a direct call, which undoes the\n    purpose of the atable indirection.  */\n static tree\n-java_get_callee_fndecl (tree call_expr)\n+java_get_callee_fndecl (const_tree call_expr)\n {\n   tree method, table, element, atable_methods;\n "}, {"sha": "a08e1b0aa1c0a5059e4eb966c359c0b2efd32d0e", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -43,6 +43,7 @@ extern HOST_WIDE_INT lhd_get_alias_set (tree);\n extern tree lhd_return_tree (tree);\n extern tree lhd_return_null_tree_v (void);\n extern tree lhd_return_null_tree (tree);\n+extern tree lhd_return_null_const_tree (const_tree);\n extern tree lhd_do_nothing_iii_return_null_tree (int, int, int);\n extern tree lhd_staticp (tree);\n extern void lhd_print_tree_nothing (FILE *, tree, int);\n@@ -113,7 +114,7 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_PRINT_ERROR_FUNCTION lhd_print_error_function\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tlhd_decl_printable_name\n #define LANG_HOOKS_DWARF_NAME\t\tlhd_dwarf_name\n-#define LANG_HOOKS_GET_CALLEE_FNDECL\tlhd_return_null_tree\n+#define LANG_HOOKS_GET_CALLEE_FNDECL\tlhd_return_null_const_tree\n #define LANG_HOOKS_EXPR_SIZE\t\tlhd_expr_size\n #define LANG_HOOKS_TREE_SIZE\t\tlhd_tree_size\n #define LANG_HOOKS_TYPES_COMPATIBLE_P\tlhd_types_compatible_p"}, {"sha": "d47a993637a822481e8840d99f3f9992621124b3", "filename": "gcc/langhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -100,6 +100,14 @@ lhd_return_null_tree (tree ARG_UNUSED (t))\n   return NULL_TREE;\n }\n \n+/* Do nothing (return NULL_TREE).  */\n+\n+tree\n+lhd_return_null_const_tree (const_tree ARG_UNUSED (t))\n+{\n+  return NULL_TREE;\n+}\n+\n /* The default post options hook.  */\n \n bool"}, {"sha": "68c20ff0cb9b8990077fc607c7c526bed5548c05", "filename": "gcc/langhooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -364,7 +364,7 @@ struct lang_hooks\n   int (*types_compatible_p) (tree x, tree y);\n \n   /* Given a CALL_EXPR, return a function decl that is its target.  */\n-  tree (*lang_get_callee_fndecl) (tree);\n+  tree (*lang_get_callee_fndecl) (const_tree);\n \n   /* Called by report_error_function to print out function name.  */\n   void (*print_error_function) (struct diagnostic_context *, const char *);"}, {"sha": "9c41a97971494c84e986aefbe17dea4fc196bb03", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -1,3 +1,8 @@\n+2007-07-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* objc-act.c (objc_get_callee_fndecl): Constify.\n+\t* objc-act.h (objc_get_callee_fndecl): Likewise.\n+\n 2007-07-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* objc-act.c (volatilized_hash, volatilized_eq, string_hash,"}, {"sha": "4e94c6f960e52fd824bef8c65f68cfcbd1643175", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -9512,7 +9512,7 @@ objc_gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p)\n    version looks for the OBJ_TYPE_REF_EXPR which is used for objc_msgSend.  */\n \n tree\n-objc_get_callee_fndecl (tree call_expr)\n+objc_get_callee_fndecl (const_tree call_expr)\n {\n   tree addr = CALL_EXPR_FN (call_expr);\n   if (TREE_CODE (addr) != OBJ_TYPE_REF)"}, {"sha": "c70609507f88e06ab97859f748190764ec231981", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -29,7 +29,7 @@ Boston, MA 02110-1301, USA.  */\n \n bool objc_init (void);\n const char *objc_printable_name (tree, int);\n-tree objc_get_callee_fndecl (tree);\n+tree objc_get_callee_fndecl (const_tree);\n void objc_finish_file (void);\n tree objc_fold_obj_type_ref (tree, tree);\n enum gimplify_status objc_gimplify_expr (tree *, tree *, tree *);"}, {"sha": "87d5a8610ffc25bd14003bfb3e7be795307692b9", "filename": "gcc/output.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -283,7 +283,7 @@ extern void output_object_blocks (void);\n    and has been exposed to let other functions like categorize_ctor_elements\n    evaluate the property while walking a constructor for other purposes.  */\n \n-extern bool constructor_static_from_elts_p (tree);\n+extern bool constructor_static_from_elts_p (const_tree);\n \n /* Return nonzero if VALUE is a valid constant-valued expression\n    for use in initializing a static variable; one that can be an"}, {"sha": "d0386d61c3e6ea07b62ebf83a57f7cd01e678cd7", "filename": "gcc/rtl-factoring.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Frtl-factoring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Frtl-factoring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl-factoring.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -938,7 +938,7 @@ determine_seq_blocks (void)\n /* Builds a symbol_ref for LABEL.  */\n \n static rtx\n-gen_symbol_ref_rtx_for_label (rtx label)\n+gen_symbol_ref_rtx_for_label (const_rtx label)\n {\n   char name[20];\n   rtx sym;"}, {"sha": "af39d0229ad9fdfb425a3be54c5bd8b44028d2fb", "filename": "gcc/rtl.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -1044,10 +1044,10 @@ extern bool subreg_offset_representable_p (unsigned int, enum machine_mode,\n \t\t\t\t\t   unsigned int, enum machine_mode);\n extern unsigned int subreg_regno (const_rtx);\n extern unsigned int subreg_nregs (const_rtx);\n-extern unsigned HOST_WIDE_INT nonzero_bits (rtx, enum machine_mode);\n-extern unsigned int num_sign_bit_copies (rtx, enum machine_mode);\n+extern unsigned HOST_WIDE_INT nonzero_bits (const_rtx, enum machine_mode);\n+extern unsigned int num_sign_bit_copies (const_rtx, enum machine_mode);\n extern bool constant_pool_constant_p (rtx);\n-extern bool truncated_to_mode (enum machine_mode, rtx);\n+extern bool truncated_to_mode (enum machine_mode, const_rtx);\n \n \n /* 1 if RTX is a subreg containing a reg that is already known to be\n@@ -1496,7 +1496,7 @@ extern rtx operand_subword (rtx, unsigned int, int, enum machine_mode);\n \n /* In emit-rtl.c */\n extern rtx operand_subword_force (rtx, unsigned int, enum machine_mode);\n-extern int subreg_lowpart_p (rtx);\n+extern int subreg_lowpart_p (const_rtx);\n extern unsigned int subreg_lowpart_offset (enum machine_mode,\n \t\t\t\t\t   enum machine_mode);\n extern unsigned int subreg_highpart_offset (enum machine_mode,\n@@ -1697,7 +1697,7 @@ extern int reg_set_p (rtx, rtx);\n extern rtx single_set_2 (const_rtx, const_rtx);\n extern int multiple_sets (const_rtx);\n extern int set_noop_p (const_rtx);\n-extern int noop_move_p (rtx);\n+extern int noop_move_p (const_rtx);\n extern rtx find_last_value (rtx, rtx *, rtx, int);\n extern int refers_to_regno_p (unsigned int, unsigned int, const_rtx, rtx *);\n extern int reg_overlap_mentioned_p (const_rtx, const_rtx);\n@@ -2268,11 +2268,11 @@ struct rtl_hooks\n {\n   rtx (*gen_lowpart) (enum machine_mode, rtx);\n   rtx (*gen_lowpart_no_emit) (enum machine_mode, rtx);\n-  rtx (*reg_nonzero_bits) (rtx, enum machine_mode, rtx, enum machine_mode,\n+  rtx (*reg_nonzero_bits) (const_rtx, enum machine_mode, const_rtx, enum machine_mode,\n \t\t\t   unsigned HOST_WIDE_INT, unsigned HOST_WIDE_INT *);\n-  rtx (*reg_num_sign_bit_copies) (rtx, enum machine_mode, rtx, enum machine_mode,\n+  rtx (*reg_num_sign_bit_copies) (const_rtx, enum machine_mode, const_rtx, enum machine_mode,\n \t\t\t\t  unsigned int, unsigned int *);\n-  bool (*reg_truncated_to_mode) (enum machine_mode, rtx);\n+  bool (*reg_truncated_to_mode) (enum machine_mode, const_rtx);\n \n   /* Whenever you add entries here, make sure you adjust rtlhooks-def.h.  */\n };"}, {"sha": "9f88a5014e9f5b890af0418a49fa0e3a7273f6ce", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -62,16 +62,16 @@ static void subreg_get_info (unsigned int, enum machine_mode,\n \t\t\t     unsigned int, enum machine_mode,\n \t\t\t     struct subreg_info *);\n \n-static unsigned HOST_WIDE_INT cached_nonzero_bits (rtx, enum machine_mode,\n-                                                   rtx, enum machine_mode,\n+static unsigned HOST_WIDE_INT cached_nonzero_bits (const_rtx, enum machine_mode,\n+                                                   const_rtx, enum machine_mode,\n                                                    unsigned HOST_WIDE_INT);\n-static unsigned HOST_WIDE_INT nonzero_bits1 (rtx, enum machine_mode,\n-\t\t\t\t\t     rtx, enum machine_mode,\n+static unsigned HOST_WIDE_INT nonzero_bits1 (const_rtx, enum machine_mode,\n+\t\t\t\t\t     const_rtx, enum machine_mode,\n                                              unsigned HOST_WIDE_INT);\n-static unsigned int cached_num_sign_bit_copies (rtx, enum machine_mode, rtx,\n+static unsigned int cached_num_sign_bit_copies (const_rtx, enum machine_mode, const_rtx,\n                                                 enum machine_mode,\n                                                 unsigned int);\n-static unsigned int num_sign_bit_copies1 (rtx, enum machine_mode, rtx,\n+static unsigned int num_sign_bit_copies1 (const_rtx, enum machine_mode, const_rtx,\n                                           enum machine_mode, unsigned int);\n \n /* Offset of the first 'e', 'E' or 'V' operand for each rtx code, or\n@@ -1106,7 +1106,7 @@ set_noop_p (const_rtx set)\n    value to itself.  */\n \n int\n-noop_move_p (rtx insn)\n+noop_move_p (const_rtx insn)\n {\n   rtx pat = PATTERN (insn);\n \n@@ -3503,13 +3503,13 @@ default_address_cost (rtx x)\n \f\n \n unsigned HOST_WIDE_INT\n-nonzero_bits (rtx x, enum machine_mode mode)\n+nonzero_bits (const_rtx x, enum machine_mode mode)\n {\n   return cached_nonzero_bits (x, mode, NULL_RTX, VOIDmode, 0);\n }\n \n unsigned int\n-num_sign_bit_copies (rtx x, enum machine_mode mode)\n+num_sign_bit_copies (const_rtx x, enum machine_mode mode)\n {\n   return cached_num_sign_bit_copies (x, mode, NULL_RTX, VOIDmode, 0);\n }\n@@ -3519,7 +3519,7 @@ num_sign_bit_copies (rtx x, enum machine_mode mode)\n    identical subexpressions on the first or the second level.  */\n \n static unsigned HOST_WIDE_INT\n-cached_nonzero_bits (rtx x, enum machine_mode mode, rtx known_x,\n+cached_nonzero_bits (const_rtx x, enum machine_mode mode, const_rtx known_x,\n \t\t     enum machine_mode known_mode,\n \t\t     unsigned HOST_WIDE_INT known_ret)\n {\n@@ -3572,7 +3572,7 @@ cached_nonzero_bits (rtx x, enum machine_mode mode, rtx known_x,\n    an arithmetic operation, we can do better.  */\n \n static unsigned HOST_WIDE_INT\n-nonzero_bits1 (rtx x, enum machine_mode mode, rtx known_x,\n+nonzero_bits1 (const_rtx x, enum machine_mode mode, const_rtx known_x,\n \t       enum machine_mode known_mode,\n \t       unsigned HOST_WIDE_INT known_ret)\n {\n@@ -4028,7 +4028,7 @@ nonzero_bits1 (rtx x, enum machine_mode mode, rtx known_x,\n    first or the second level.  */\n \n static unsigned int\n-cached_num_sign_bit_copies (rtx x, enum machine_mode mode, rtx known_x,\n+cached_num_sign_bit_copies (const_rtx x, enum machine_mode mode, const_rtx known_x,\n \t\t\t    enum machine_mode known_mode,\n \t\t\t    unsigned int known_ret)\n {\n@@ -4079,7 +4079,7 @@ cached_num_sign_bit_copies (rtx x, enum machine_mode mode, rtx known_x,\n    be between 1 and the number of bits in MODE.  */\n \n static unsigned int\n-num_sign_bit_copies1 (rtx x, enum machine_mode mode, rtx known_x,\n+num_sign_bit_copies1 (const_rtx x, enum machine_mode mode, const_rtx known_x,\n \t\t      enum machine_mode known_mode,\n \t\t      unsigned int known_ret)\n {\n@@ -4866,7 +4866,7 @@ init_num_sign_bit_copies_in_rep (void)\n    assume it already contains a truncated value of MODE.  */\n \n bool\n-truncated_to_mode (enum machine_mode mode, rtx x)\n+truncated_to_mode (enum machine_mode mode, const_rtx x)\n {\n   /* This register has already been used in MODE without explicit\n      truncation.  */"}, {"sha": "a3bc52d3922bf0aebbecff29c41f03c6783404f1", "filename": "gcc/rtlhooks-def.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Frtlhooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Frtlhooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlhooks-def.h?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -39,13 +39,13 @@ along with GCC; see the file COPYING3.  If not see\n \n extern rtx gen_lowpart_general (enum machine_mode, rtx);\n extern rtx gen_lowpart_no_emit_general (enum machine_mode, rtx);\n-extern rtx reg_nonzero_bits_general (rtx, enum machine_mode, rtx,\n+extern rtx reg_nonzero_bits_general (const_rtx, enum machine_mode, const_rtx,\n \t\t\t\t     enum machine_mode,\n \t\t\t\t     unsigned HOST_WIDE_INT,\n \t\t\t\t     unsigned HOST_WIDE_INT *);\n-extern rtx reg_num_sign_bit_copies_general (rtx, enum machine_mode, rtx,\n+extern rtx reg_num_sign_bit_copies_general (const_rtx, enum machine_mode, const_rtx,\n \t\t\t\t\t    enum machine_mode,\n \t\t\t\t\t    unsigned int, unsigned int *);\n-extern bool reg_truncated_to_mode_general (enum machine_mode, rtx);\n+extern bool reg_truncated_to_mode_general (enum machine_mode, const_rtx);\n \n #endif /* GCC_RTL_HOOKS_DEF_H */"}, {"sha": "8939b21bdb53a671b2944749f79501fc112526de", "filename": "gcc/rtlhooks.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Frtlhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Frtlhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlhooks.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -95,9 +95,9 @@ gen_lowpart_no_emit_general (enum machine_mode mode, rtx x)\n }\n \n rtx\n-reg_num_sign_bit_copies_general (rtx x ATTRIBUTE_UNUSED,\n+reg_num_sign_bit_copies_general (const_rtx x ATTRIBUTE_UNUSED,\n \t\t\t\t enum machine_mode mode ATTRIBUTE_UNUSED,\n-                                 rtx known_x ATTRIBUTE_UNUSED,\n+                                 const_rtx known_x ATTRIBUTE_UNUSED,\n \t\t\t\t enum machine_mode known_mode ATTRIBUTE_UNUSED,\n                                  unsigned int known_ret ATTRIBUTE_UNUSED,\n                                  unsigned int *result ATTRIBUTE_UNUSED)\n@@ -106,9 +106,9 @@ reg_num_sign_bit_copies_general (rtx x ATTRIBUTE_UNUSED,\n }\n \n rtx\n-reg_nonzero_bits_general (rtx x ATTRIBUTE_UNUSED,\n+reg_nonzero_bits_general (const_rtx x ATTRIBUTE_UNUSED,\n \t\t\t  enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t  rtx known_x ATTRIBUTE_UNUSED,\n+\t\t\t  const_rtx known_x ATTRIBUTE_UNUSED,\n                           enum machine_mode known_mode ATTRIBUTE_UNUSED,\n                           unsigned HOST_WIDE_INT known_ret ATTRIBUTE_UNUSED,\n                           unsigned HOST_WIDE_INT *nonzero ATTRIBUTE_UNUSED)\n@@ -118,7 +118,7 @@ reg_nonzero_bits_general (rtx x ATTRIBUTE_UNUSED,\n \n bool\n reg_truncated_to_mode_general (enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t       rtx x ATTRIBUTE_UNUSED)\n+\t\t\t       const_rtx x ATTRIBUTE_UNUSED)\n {\n   return false;\n }"}, {"sha": "d6637535cdc6a6f59e97fd72c4c3045776ec85a1", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -1392,7 +1392,7 @@ expand_expr_stmt (tree exp)\n    (potential) location of the expression.  */\n \n int\n-warn_if_unused_value (tree exp, location_t locus)\n+warn_if_unused_value (const_tree exp, location_t locus)\n {\n  restart:\n   if (TREE_USED (exp) || TREE_NO_WARNING (exp))\n@@ -1747,7 +1747,7 @@ expand_return (tree retval)\n    *that* node in turn will point to the relevant FUNCTION_DECL node.  */\n \n int\n-is_body_block (tree stmt)\n+is_body_block (const_tree stmt)\n {\n   if (lang_hooks.no_body_blocks)\n     return 0;"}, {"sha": "fc33d8ec99939ce04816896fc29129a542a9b3a7", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -187,7 +187,7 @@ mode_for_size (unsigned int size, enum mode_class class, int limit)\n /* Similar, except passed a tree node.  */\n \n enum machine_mode\n-mode_for_size_tree (tree size, enum mode_class class, int limit)\n+mode_for_size_tree (const_tree size, enum mode_class class, int limit)\n {\n   unsigned HOST_WIDE_INT uhwi;\n   unsigned int ui;"}, {"sha": "c623a47c5deb4eb131f399514659fda910cd757b", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -1295,7 +1295,7 @@ memref_eq (const void *obj1, const void *obj2)\n {\n   const struct mem_ref *const mem1 = (const struct mem_ref *) obj1;\n \n-  return operand_equal_p (mem1->mem, (tree) obj2, 0);\n+  return operand_equal_p (mem1->mem, (const_tree) obj2, 0);\n }\n \n /* Gathers memory references in statement STMT in LOOP, storing the"}, {"sha": "74c55a3f8babe93cbfa4becb0f0fb2b4b1930331", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -2485,7 +2485,7 @@ var_at_stmt (struct loop *loop, struct iv_cand *cand, tree stmt)\n    but the bit is determined from TYPE_PRECISION, not MODE_BITSIZE.  */\n \n int\n-tree_int_cst_sign_bit (tree t)\n+tree_int_cst_sign_bit (const_tree t)\n {\n   unsigned bitno = TYPE_PRECISION (TREE_TYPE (t)) - 1;\n   unsigned HOST_WIDE_INT w;"}, {"sha": "f45f71bd9ee93d412aa12d6b7062a80557f3f3d2", "filename": "gcc/tree.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -2213,7 +2213,7 @@ tree_node_structure (const_tree t)\n    or offset that depends on a field within a record.  */\n \n bool\n-contains_placeholder_p (tree exp)\n+contains_placeholder_p (const_tree exp)\n {\n   enum tree_code code;\n \n@@ -2274,9 +2274,9 @@ contains_placeholder_p (tree exp)\n \t{\n \tcase CALL_EXPR:\n \t  {\n-\t    tree arg;\n-\t    call_expr_arg_iterator iter;\n-\t    FOR_EACH_CALL_EXPR_ARG (arg, iter, exp)\n+\t    const_tree arg;\n+\t    const_call_expr_arg_iterator iter;\n+\t    FOR_EACH_CONST_CALL_EXPR_ARG (arg, iter, exp)\n \t      if (CONTAINS_PLACEHOLDER_P (arg))\n \t\treturn 1;\n \t    return 0;\n@@ -4787,9 +4787,9 @@ attribute_list_contained (tree l1, tree l2)\n    Also, the TREE_PURPOSEs must match.  */\n \n int\n-type_list_equal (tree l1, tree l2)\n+type_list_equal (const_tree l1, const_tree l2)\n {\n-  tree t1, t2;\n+  const_tree t1, t2;\n \n   for (t1 = l1, t2 = l2; t1 && t2; t1 = TREE_CHAIN (t1), t2 = TREE_CHAIN (t2))\n     if (TREE_VALUE (t1) != TREE_VALUE (t2)\n@@ -4972,7 +4972,7 @@ simple_cst_list_equal (const_tree l1, const_tree l2)\n    this function.  */\n \n int\n-simple_cst_equal (tree t1, tree t2)\n+simple_cst_equal (const_tree t1, const_tree t2)\n {\n   enum tree_code code1, code2;\n   int cmp;\n@@ -5043,13 +5043,13 @@ simple_cst_equal (tree t1, tree t2)\n       if (call_expr_nargs (t1) != call_expr_nargs (t2))\n \treturn 0;\n       {\n-\ttree arg1, arg2;\n-\tcall_expr_arg_iterator iter1, iter2;\n-\tfor (arg1 = first_call_expr_arg (t1, &iter1),\n-\t       arg2 = first_call_expr_arg (t2, &iter2);\n+\tconst_tree arg1, arg2;\n+\tconst_call_expr_arg_iterator iter1, iter2;\n+\tfor (arg1 = first_const_call_expr_arg (t1, &iter1),\n+\t       arg2 = first_const_call_expr_arg (t2, &iter2);\n \t     arg1 && arg2;\n-\t     arg1 = next_call_expr_arg (&iter1),\n-\t       arg2 = next_call_expr_arg (&iter2))\n+\t     arg1 = next_const_call_expr_arg (&iter1),\n+\t       arg2 = next_const_call_expr_arg (&iter2))\n \t  {\n \t    cmp = simple_cst_equal (arg1, arg2);\n \t    if (cmp <= 0)\n@@ -6509,12 +6509,12 @@ decl_type_context (const_tree decl)\n    determined.  */\n \n tree\n-get_callee_fndecl (tree call)\n+get_callee_fndecl (const_tree call)\n {\n   tree addr;\n \n   if (call == error_mark_node)\n-    return call;\n+    return error_mark_node;\n \n   /* It's invalid to call this function with anything but a\n      CALL_EXPR.  */\n@@ -8010,7 +8010,7 @@ lower_bound_in_type (tree outer, tree inner)\n    and get the same result, only slower.  */\n \n int\n-operand_equal_for_phi_arg_p (tree arg0, tree arg1)\n+operand_equal_for_phi_arg_p (const_tree arg0, const_tree arg1)\n {\n   if (arg0 == arg1)\n     return 1;"}, {"sha": "946898232343dfbf8fb65b7208f947f01b1d3d70", "filename": "gcc/tree.h", "status": "modified", "additions": 67, "deletions": 25, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -3826,10 +3826,10 @@ extern int host_integerp (const_tree, int);\n extern HOST_WIDE_INT tree_low_cst (const_tree, int);\n extern int tree_int_cst_msb (const_tree);\n extern int tree_int_cst_sgn (const_tree);\n-extern int tree_int_cst_sign_bit (tree);\n+extern int tree_int_cst_sign_bit (const_tree);\n extern bool tree_expr_nonnegative_p (tree);\n extern bool tree_expr_nonnegative_warnv_p (tree, bool *);\n-extern bool may_negate_without_overflow_p (tree);\n+extern bool may_negate_without_overflow_p (const_tree);\n extern tree get_inner_array_type (const_tree);\n \n /* From expmed.c.  Since rtl.h is included after tree.h, we can't\n@@ -4068,7 +4068,7 @@ extern void relayout_decl (tree);\n    The value is BLKmode if no other mode is found.  This is like\n    mode_for_size, but is passed a tree.  */\n \n-extern enum machine_mode mode_for_size_tree (tree, enum mode_class, int);\n+extern enum machine_mode mode_for_size_tree (const_tree, enum mode_class, int);\n \n /* Return an expr equal to X but certainly not valid as an lvalue.  */\n \n@@ -4176,10 +4176,10 @@ extern bool initializer_zerop (const_tree);\n    Return whether or not CTOR is a valid static constant initializer, the same\n    as \"initializer_constant_valid_p (CTOR, TREE_TYPE (CTOR)) != 0\".  */\n \n-extern bool categorize_ctor_elements (tree, HOST_WIDE_INT *, HOST_WIDE_INT *,\n+extern bool categorize_ctor_elements (const_tree, HOST_WIDE_INT *, HOST_WIDE_INT *,\n \t\t\t\t      bool *);\n \n-extern HOST_WIDE_INT count_type_elements (tree, bool);\n+extern HOST_WIDE_INT count_type_elements (const_tree, bool);\n \n /* integer_zerop (tree x) is nonzero if X is an integer constant of value 0.  */\n \n@@ -4233,7 +4233,7 @@ enum tree_node_structure_enum tree_node_structure (const_tree);\n    Note that we only allow such expressions within simple arithmetic\n    or a COND_EXPR.  */\n \n-extern bool contains_placeholder_p (tree);\n+extern bool contains_placeholder_p (const_tree);\n \n /* This macro calls the above function but short-circuits the common\n    case of a constant to save time.  Also check for null.  */\n@@ -4318,7 +4318,7 @@ extern tree get_inner_reference (tree, HOST_WIDE_INT *, HOST_WIDE_INT *,\n    look for whether EXP or any nested component-refs within EXP is marked\n    as PACKED.  */\n \n-extern bool contains_packed_reference (tree exp);\n+extern bool contains_packed_reference (const_tree exp);\n \n /* Return 1 if T is an expression that get_inner_reference handles.  */\n \n@@ -4378,14 +4378,14 @@ extern GTY(()) const char * current_function_func_begin_label;\n extern unsigned crc32_string (unsigned, const char *);\n extern void clean_symbol_name (char *);\n extern tree get_file_function_name (const char *);\n-extern tree get_callee_fndecl (tree);\n+extern tree get_callee_fndecl (const_tree);\n extern void change_decl_assembler_name (tree, tree);\n extern int type_num_arguments (const_tree);\n extern bool associative_tree_code (enum tree_code);\n extern bool commutative_tree_code (enum tree_code);\n extern tree upper_bound_in_type (tree, tree);\n extern tree lower_bound_in_type (tree, tree);\n-extern int operand_equal_for_phi_arg_p (tree, tree);\n+extern int operand_equal_for_phi_arg_p (const_tree, const_tree);\n extern bool empty_body_p (tree);\n extern tree call_expr_arg (tree, int);\n extern tree *call_expr_argp (tree, int);\n@@ -4394,14 +4394,14 @@ extern tree call_expr_arglist (tree);\n /* In stmt.c */\n \n extern void expand_expr_stmt (tree);\n-extern int warn_if_unused_value (tree, location_t);\n+extern int warn_if_unused_value (const_tree, location_t);\n extern void expand_label (tree);\n extern void expand_goto (tree);\n \n extern rtx expand_stack_save (void);\n extern void expand_stack_restore (tree);\n extern void expand_return (tree);\n-extern int is_body_block (tree);\n+extern int is_body_block (const_tree);\n \n /* In tree-eh.c */\n extern void using_eh_for_cleanups (void);\n@@ -4413,8 +4413,8 @@ extern void using_eh_for_cleanups (void);\n extern int folding_initializer;\n \n /* Convert between trees and native memory representation.  */\n-extern int native_encode_expr (tree, unsigned char *, int);\n-extern tree native_interpret_expr (tree, unsigned char *, int);\n+extern int native_encode_expr (const_tree, unsigned char *, int);\n+extern tree native_interpret_expr (tree, const unsigned char *, int);\n \n /* Fold constants as much as possible in an expression.\n    Returns the simplified expression.\n@@ -4437,7 +4437,7 @@ extern tree fold_build2_initializer (enum tree_code, tree, tree, tree);\n extern tree fold_build3_initializer (enum tree_code, tree, tree, tree, tree);\n extern tree fold_build_call_array (tree, tree, int, tree *);\n extern tree fold_build_call_array_initializer (tree, tree, int, tree *);\n-extern bool fold_convertible_p (tree, tree);\n+extern bool fold_convertible_p (const_tree, const_tree);\n extern tree fold_convert (tree, tree);\n extern tree fold_single_bit_test (enum tree_code, tree, tree, tree);\n extern tree fold_ignored_result (tree);\n@@ -4493,7 +4493,7 @@ enum operand_equal_flag\n   OEP_PURE_SAME = 2\n };\n \n-extern int operand_equal_p (tree, tree, unsigned int);\n+extern int operand_equal_p (const_tree, const_tree, unsigned int);\n extern int multiple_of_p (tree, tree, tree);\n extern tree omit_one_operand (tree, tree, tree);\n extern tree omit_two_operands (tree, tree, tree, tree);\n@@ -4502,7 +4502,7 @@ extern tree fold_truth_not_expr (tree);\n extern tree fold_unary_to_constant (enum tree_code, tree, tree);\n extern tree fold_binary_to_constant (enum tree_code, tree, tree, tree);\n extern tree fold_read_from_constant_string (tree);\n-extern tree int_const_binop (enum tree_code, tree, tree, int);\n+extern tree int_const_binop (enum tree_code, const_tree, const_tree, int);\n extern tree build_fold_addr_expr (tree);\n extern tree fold_build_cleanup_point_expr (tree type, tree expr);\n extern tree fold_strip_sign_ops (tree);\n@@ -4512,7 +4512,7 @@ extern tree fold_indirect_ref (tree);\n extern tree constant_boolean_node (int, tree);\n extern tree build_low_bits_mask (tree, unsigned);\n \n-extern bool tree_swap_operands_p (tree, tree, bool);\n+extern bool tree_swap_operands_p (const_tree, const_tree, bool);\n extern void swap_tree_operands (tree, tree *, tree *);\n extern enum tree_code swap_tree_comparison (enum tree_code);\n \n@@ -4535,7 +4535,7 @@ extern tree fold_builtin_stxcpy_chk (tree, tree, tree, tree, tree, bool,\n extern tree fold_builtin_strncpy_chk (tree, tree, tree, tree, tree);\n extern tree fold_builtin_snprintf_chk (tree, tree, enum built_in_function);\n extern bool fold_builtin_next_arg (tree, bool);\n-extern enum built_in_function builtin_mathfn_code (tree);\n+extern enum built_in_function builtin_mathfn_code (const_tree);\n extern tree build_function_call_expr (tree, tree);\n extern tree fold_build_call_expr (tree, tree, tree, tree);\n extern tree fold_builtin_call_array (tree, tree, int, tree *);\n@@ -4547,7 +4547,7 @@ extern tree c_strlen (tree, int);\n extern tree std_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n extern tree build_va_arg_indirect_ref (tree);\n extern tree build_string_literal (int, const char *);\n-extern bool validate_arglist (tree, ...);\n+extern bool validate_arglist (const_tree, ...);\n extern rtx builtin_memset_read_str (void *, HOST_WIDE_INT, enum machine_mode);\n extern int get_pointer_alignment (tree, unsigned int);\n \n@@ -4568,10 +4568,10 @@ extern void get_type_static_bounds (tree, mpz_t, mpz_t);\n extern bool variably_modified_type_p (tree, tree);\n extern int tree_log2 (const_tree);\n extern int tree_floor_log2 (const_tree);\n-extern int simple_cst_equal (tree, tree);\n+extern int simple_cst_equal (const_tree, const_tree);\n extern hashval_t iterative_hash_expr (const_tree, hashval_t);\n extern int compare_tree_int (const_tree, unsigned HOST_WIDE_INT);\n-extern int type_list_equal (tree, tree);\n+extern int type_list_equal (const_tree, const_tree);\n extern int chain_member (const_tree, const_tree);\n extern tree type_hash_lookup (unsigned int, tree);\n extern void type_hash_add (unsigned int, tree);\n@@ -4630,7 +4630,7 @@ extern void expand_dummy_function_end (void);\n extern unsigned int init_function_for_compilation (void);\n extern void allocate_struct_function (tree);\n extern void init_function_start (tree);\n-extern bool use_register_for_decl (tree);\n+extern bool use_register_for_decl (const_tree);\n extern void generate_setjmp_warnings (void);\n extern void init_temp_slots (void);\n extern void free_temp_slots (void);\n@@ -4696,7 +4696,7 @@ extern tree build_duplicate_type (tree);\n #define ECF_NOVOPS\t\t1024\n \n extern int flags_from_decl_or_type (const_tree);\n-extern int call_expr_flags (tree);\n+extern int call_expr_flags (const_tree);\n \n extern int setjmp_call_p (const_tree);\n extern bool alloca_call_p (const_tree);\n@@ -4758,7 +4758,7 @@ extern tree tree_overlaps_hard_reg_set (tree, HARD_REG_SET *);\n /* In gimplify.c.  */\n extern tree create_artificial_label (void);\n extern void gimplify_function_tree (tree);\n-extern const char *get_name (tree);\n+extern const char *get_name (const_tree);\n extern tree unshare_expr (tree);\n extern void sort_case_labels (tree);\n \f\n@@ -4918,7 +4918,7 @@ extern void fini_object_sizes (void);\n extern unsigned HOST_WIDE_INT compute_builtin_object_size (tree, int);\n \n /* In expr.c.  */\n-extern unsigned HOST_WIDE_INT highest_pow2_factor (tree);\n+extern unsigned HOST_WIDE_INT highest_pow2_factor (const_tree);\n \n /* In tree-inline.c.  */\n \n@@ -4948,6 +4948,13 @@ typedef struct call_expr_arg_iterator_d GTY (())\n   int i;\t/* next argument index */\n } call_expr_arg_iterator;\n \n+typedef struct const_call_expr_arg_iterator_d GTY (())\n+{\n+  const_tree t;\t/* the call_expr */\n+  int n;\t/* argument count */\n+  int i;\t/* next argument index */\n+} const_call_expr_arg_iterator;\n+\n /* Initialize the abstract argument list iterator object ITER with the\n    arguments from CALL_EXPR node EXP.  */\n static inline void\n@@ -4958,6 +4965,14 @@ init_call_expr_arg_iterator (tree exp, call_expr_arg_iterator *iter)\n   iter->i = 0;\n }\n \n+static inline void\n+init_const_call_expr_arg_iterator (const_tree exp, const_call_expr_arg_iterator *iter)\n+{\n+  iter->t = exp;\n+  iter->n = call_expr_nargs (exp);\n+  iter->i = 0;\n+}\n+\n /* Return the next argument from abstract argument list iterator object ITER,\n    and advance its state.  Return NULL_TREE if there are no more arguments.  */\n static inline tree\n@@ -4971,6 +4986,17 @@ next_call_expr_arg (call_expr_arg_iterator *iter)\n   return result;\n }\n \n+static inline const_tree\n+next_const_call_expr_arg (const_call_expr_arg_iterator *iter)\n+{\n+  const_tree result;\n+  if (iter->i >= iter->n)\n+    return NULL_TREE;\n+  result = CALL_EXPR_ARG (iter->t, iter->i);\n+  iter->i++;\n+  return result;\n+}\n+\n /* Initialize the abstract argument list iterator object ITER, then advance\n    past and return the first argument.  Useful in for expressions, e.g.\n      for (arg = first_call_expr_arg (exp, &iter); arg;\n@@ -4982,6 +5008,13 @@ first_call_expr_arg (tree exp, call_expr_arg_iterator *iter)\n   return next_call_expr_arg (iter);\n }\n \n+static inline const_tree\n+first_const_call_expr_arg (const_tree exp, const_call_expr_arg_iterator *iter)\n+{\n+  init_const_call_expr_arg_iterator (exp, iter);\n+  return next_const_call_expr_arg (iter);\n+}\n+\n /* Test whether there are more arguments in abstract argument list iterator\n    ITER, without changing its state.  */\n static inline bool\n@@ -4990,11 +5023,20 @@ more_call_expr_args_p (const call_expr_arg_iterator *iter)\n   return (iter->i < iter->n);\n }\n \n+static inline bool\n+more_const_call_expr_args_p (const const_call_expr_arg_iterator *iter)\n+{\n+  return (iter->i < iter->n);\n+}\n \n /* Iterate through each argument ARG of CALL_EXPR CALL, using variable ITER\n    (of type call_expr_arg_iterator) to hold the iteration state.  */\n #define FOR_EACH_CALL_EXPR_ARG(arg, iter, call)\t\t\t\\\n   for ((arg) = first_call_expr_arg ((call), &(iter)); (arg);\t\\\n        (arg) = next_call_expr_arg (&(iter)))\n \n+#define FOR_EACH_CONST_CALL_EXPR_ARG(arg, iter, call)\t\t\t\\\n+  for ((arg) = first_const_call_expr_arg ((call), &(iter)); (arg);\t\\\n+       (arg) = next_const_call_expr_arg (&(iter)))\n+\n #endif  /* GCC_TREE_H  */"}, {"sha": "a265db8b5b351d60ad3e11ea2d7a6a4c9619c4d4", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa233e34c957d836e99f74c03556cbe0073f1aa7/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=fa233e34c957d836e99f74c03556cbe0073f1aa7", "patch": "@@ -4004,7 +4004,7 @@ output_addressed_constants (tree exp)\n    evaluate the property while walking a constructor for other purposes.  */\n \n bool\n-constructor_static_from_elts_p (tree ctor)\n+constructor_static_from_elts_p (const_tree ctor)\n {\n   return (TREE_CONSTANT (ctor)\n \t  && (TREE_CODE (TREE_TYPE (ctor)) == UNION_TYPE"}]}