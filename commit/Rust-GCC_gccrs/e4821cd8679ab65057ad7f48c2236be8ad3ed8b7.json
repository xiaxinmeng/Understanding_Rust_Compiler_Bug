{"sha": "e4821cd8679ab65057ad7f48c2236be8ad3ed8b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ4MjFjZDg2NzlhYjY1MDU3YWQ3ZjQ4YzIyMzZiZThhZDNlZDhiNw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2013-01-04T20:50:15Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2013-01-04T20:50:15Z"}, "message": "re PR fortran/55172 ([OOP] gfc_variable_attr(): Bad array reference in SELECT TYPE)\n\n2013-01-04  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/55172\n\t* match.c (copy_ts_from_selector_to_associate): Remove call to\n\tgfc_resolve_expr and replace it with explicit setting of the\n\tarray reference type.\n\t* resolve.c (resolve_select_type): It is an error if the\n\tselector is coindexed.\n\n2013-01-04  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/55172\n\t* gfortran.dg/select_type_31.f03: New test.\n\nFrom-SVN: r194916", "tree": {"sha": "9a2cd2947d0ca61ecfb9528b1ee3dc7d2183d477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a2cd2947d0ca61ecfb9528b1ee3dc7d2183d477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4821cd8679ab65057ad7f48c2236be8ad3ed8b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4821cd8679ab65057ad7f48c2236be8ad3ed8b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4821cd8679ab65057ad7f48c2236be8ad3ed8b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4821cd8679ab65057ad7f48c2236be8ad3ed8b7/comments", "author": null, "committer": null, "parents": [{"sha": "ad8c59a1b9c665496a01871b5e21500d8945ac3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad8c59a1b9c665496a01871b5e21500d8945ac3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad8c59a1b9c665496a01871b5e21500d8945ac3f"}], "stats": {"total": 111, "additions": 105, "deletions": 6}, "files": [{"sha": "4e1cf5598b99fd33491220bc79a464eb1ad34f5c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4821cd8679ab65057ad7f48c2236be8ad3ed8b7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4821cd8679ab65057ad7f48c2236be8ad3ed8b7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e4821cd8679ab65057ad7f48c2236be8ad3ed8b7", "patch": "@@ -1,3 +1,12 @@\n+2013-01-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/55172\n+\t* match.c (copy_ts_from_selector_to_associate): Remove call to\n+\tgfc_resolve_expr and replace it with explicit setting of the\n+\tarray reference type.\n+\t* resolve.c (resolve_select_type): It is an error if the\n+\tselector is coindexed.\n+\n 2013-01-04  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/55763"}, {"sha": "2a3f5b4c0d2ca7d07103593bfd1ceb13d70c1f3d", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4821cd8679ab65057ad7f48c2236be8ad3ed8b7/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4821cd8679ab65057ad7f48c2236be8ad3ed8b7/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=e4821cd8679ab65057ad7f48c2236be8ad3ed8b7", "patch": "@@ -1,6 +1,6 @@\n /* Matching subroutines in all sizes, shapes and colors.\n    Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-   2009, 2010, 2011, 2012\n+   2009, 2010, 2011, 2012, 2013\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n@@ -5144,12 +5144,10 @@ copy_ts_from_selector_to_associate (gfc_expr *associate, gfc_expr *selector)\n {\n   gfc_ref *ref;\n   gfc_symbol *assoc_sym;\n+  int i;\n \n   assoc_sym = associate->symtree->n.sym;\n \n-  /* Ensure that any array reference is resolved.  */\n-  gfc_resolve_expr (selector);\n-\n   /* At this stage the expression rank and arrayspec dimensions have\n      not been completely sorted out. We must get the expr2->rank\n      right here, so that the correct class container is obtained.  */\n@@ -5161,6 +5159,23 @@ copy_ts_from_selector_to_associate (gfc_expr *associate, gfc_expr *selector)\n \t&& CLASS_DATA (selector)->as\n \t&& ref && ref->type == REF_ARRAY)\n     {\n+      /* Ensure that the array reference type is set.  We cannot use\n+\t gfc_resolve_expr at this point, so the usable parts of\n+\t resolve.c(resolve_array_ref) are employed to do it.  */\n+      if (ref->u.ar.type == AR_UNKNOWN)\n+\t{\n+\t  ref->u.ar.type = AR_ELEMENT;\n+\t  for (i = 0; i < ref->u.ar.dimen + ref->u.ar.codimen; i++)\n+\t    if (ref->u.ar.dimen_type[i] == DIMEN_RANGE\n+\t\t|| ref->u.ar.dimen_type[i] == DIMEN_VECTOR\n+\t\t|| (ref->u.ar.dimen_type[i] == DIMEN_UNKNOWN\n+\t\t    && ref->u.ar.start[i] && ref->u.ar.start[i]->rank))\n+\t      {\n+\t\tref->u.ar.type = AR_SECTION;\n+\t\tbreak;\n+\t      }\n+\t}\n+\n       if (ref->u.ar.type == AR_FULL)\n \tselector->rank = CLASS_DATA (selector)->as->rank;\n       else if (ref->u.ar.type == AR_SECTION)"}, {"sha": "54ac3c69a4efe1621415138a1f8b9b3b14ad95f5", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4821cd8679ab65057ad7f48c2236be8ad3ed8b7/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4821cd8679ab65057ad7f48c2236be8ad3ed8b7/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=e4821cd8679ab65057ad7f48c2236be8ad3ed8b7", "patch": "@@ -1,6 +1,6 @@\n /* Perform type resolution on the various structures.\n    Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n-   2010, 2011, 2012\n+   2010, 2011, 2012, 2013\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n@@ -8349,9 +8349,27 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n       if (code->expr1->symtree->n.sym->attr.untyped)\n \tcode->expr1->symtree->n.sym->ts = code->expr2->ts;\n       selector_type = CLASS_DATA (code->expr2)->ts.u.derived;\n+\n+      /* F2008: C803 The selector expression must not be coindexed.  */\n+      if (gfc_is_coindexed (code->expr2))\n+\t{\n+\t  gfc_error (\"Selector at %L must not be coindexed\",\n+\t\t     &code->expr2->where);\n+\t  return;\n+\t}\n+\n     }\n   else\n-    selector_type = CLASS_DATA (code->expr1)->ts.u.derived;\n+    {\n+      selector_type = CLASS_DATA (code->expr1)->ts.u.derived;\n+\n+      if (gfc_is_coindexed (code->expr1))\n+\t{\n+\t  gfc_error (\"Selector at %L must not be coindexed\",\n+\t\t     &code->expr1->where);\n+\t  return;\n+\t}\n+    }\n \n   /* Loop over TYPE IS / CLASS IS cases.  */\n   for (body = code->block; body; body = body->block)"}, {"sha": "9835a26ab1516750c2495aace386263e66b9cb3f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4821cd8679ab65057ad7f48c2236be8ad3ed8b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4821cd8679ab65057ad7f48c2236be8ad3ed8b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4821cd8679ab65057ad7f48c2236be8ad3ed8b7", "patch": "@@ -1,3 +1,8 @@\n+2013-01-04  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/55172\n+\t* gfortran.dg/select_type_31.f03: New test.\n+\n 2013-01-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/54526 (again)"}, {"sha": "a2858121957be894507b96130c638a7568803bd5", "filename": "gcc/testsuite/gfortran.dg/select_type_31.f03", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4821cd8679ab65057ad7f48c2236be8ad3ed8b7/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_31.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4821cd8679ab65057ad7f48c2236be8ad3ed8b7/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_31.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_31.f03?ref=e4821cd8679ab65057ad7f48c2236be8ad3ed8b7", "patch": "@@ -0,0 +1,52 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+! Test the fix for PR55172.\n+!\n+! Contributed by Arjen Markus  <arjen.markus@deltares.nl>\n+!\n+module gn\n+  type :: ncb\n+  end type ncb\n+  type, public :: tn\n+     class(ncb), allocatable, dimension(:) :: cb\n+  end type tn\n+contains\n+  integer function name(self)\n+    implicit none\n+    class (tn), intent(in) :: self\n+    select type (component => self%cb(i)) ! { dg-error \"has no IMPLICIT type\" }\n+    end select\n+  end function name\n+end module gn\n+\n+! Further issues, raised by Tobias Burnus in the course of fixing the PR\n+\n+module gn1\n+  type :: ncb1\n+  end type ncb1\n+  type, public :: tn1\n+     class(ncb1), allocatable, dimension(:) :: cb\n+  end type tn1\n+contains\n+  integer function name(self)\n+    implicit none\n+    class (tn1), intent(in) :: self\n+    select type (component => self%cb([4,7+1])) ! { dg-error \"needs a temporary\" }\n+    end select\n+  end function name\n+end module gn1\n+\n+module gn2\n+  type :: ncb2\n+  end type ncb2\n+  type, public :: tn2\n+     class(ncb2), allocatable :: cb[:]\n+  end type tn2\n+contains\n+  integer function name(self)\n+    implicit none\n+    class (tn2), intent(in) :: self\n+    select type (component => self%cb[4]) ! { dg-error \"must not be coindexed\" }\n+    end select\n+  end function name\n+end module gn2"}]}