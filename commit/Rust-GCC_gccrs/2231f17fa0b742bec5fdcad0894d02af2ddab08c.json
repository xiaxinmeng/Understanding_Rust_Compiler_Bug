{"sha": "2231f17fa0b742bec5fdcad0894d02af2ddab08c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIzMWYxN2ZhMGI3NDJiZWM1ZmRjYWQwODk0ZDAyYWYyZGRhYjA4Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-09-19T13:48:51Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-09-19T13:48:51Z"}, "message": "gigi.h (get_elaboration_procedure): Declare.\n\n\t* gcc-interface/gigi.h (get_elaboration_procedure): Declare.\n\t(gnat_zaplevel): Likewise.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Do not force global\n\tbinding level for an external constant.\n\t<E_Constant>: Force the local context and create a fake scope before\n\ttranslating the defining expression of an external constant.\n\t<object>: Treat external constants at the global level explicitly for\n\trenaming declarations.\n\t(elaborate_expression_1): Force the variable to be static if the\n\texpression is global.\n\t* gcc-interface/trans.c (get_elaboration_procedure): New function.\n\t(call_to_gnu): Use it.\n\t(gnat_to_gnu): Likewise.\n\t<N_Object_Declaration>: Do not test Is_Public to force the creation of\n\tan initialization variable.\n\t(add_decl_expr): Discard the statement if the declaration is external.\n\t* gcc-interface/utils.c (gnat_pushdecl): Do not put the declaration in\n\tthe current block if it is external.\n\t(create_var_decl_1): Do not test Is_Public to set TREE_STATIC.\n\t(gnat_zaplevel): New global function.\n\nFrom-SVN: r164416", "tree": {"sha": "b62bef407ee1a1a7c6b27d747db9b145775e6634", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b62bef407ee1a1a7c6b27d747db9b145775e6634"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2231f17fa0b742bec5fdcad0894d02af2ddab08c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2231f17fa0b742bec5fdcad0894d02af2ddab08c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2231f17fa0b742bec5fdcad0894d02af2ddab08c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2231f17fa0b742bec5fdcad0894d02af2ddab08c/comments", "author": null, "committer": null, "parents": [{"sha": "a10623fb71eb10046cbd3d7ad7dc3b9cef781666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10623fb71eb10046cbd3d7ad7dc3b9cef781666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a10623fb71eb10046cbd3d7ad7dc3b9cef781666"}], "stats": {"total": 185, "additions": 153, "deletions": 32}, "files": [{"sha": "b91bd5c25cdfa33cda7aa2bcff3e36a704bb20fc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2231f17fa0b742bec5fdcad0894d02af2ddab08c", "patch": "@@ -1,3 +1,26 @@\n+2010-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/gigi.h (get_elaboration_procedure): Declare.\n+\t(gnat_zaplevel): Likewise.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Do not force global\n+\tbinding level for an external constant.\n+\t<E_Constant>: Force the local context and create a fake scope before\n+\ttranslating the defining expression of an external constant.\n+\t<object>: Treat external constants at the global level explicitly for\n+\trenaming declarations.\n+\t(elaborate_expression_1): Force the variable to be static if the\n+\texpression is global.\n+\t* gcc-interface/trans.c (get_elaboration_procedure): New function.\n+\t(call_to_gnu): Use it.\n+\t(gnat_to_gnu): Likewise.\n+\t<N_Object_Declaration>: Do not test Is_Public to force the creation of\n+\tan initialization variable.\n+\t(add_decl_expr): Discard the statement if the declaration is external.\n+\t* gcc-interface/utils.c (gnat_pushdecl): Do not put the declaration in\n+\tthe current block if it is external.\n+\t(create_var_decl_1): Do not test Is_Public to set TREE_STATIC.\n+\t(gnat_zaplevel): New global function.\n+\n 2010-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity): Explicitly test _LEVEL"}, {"sha": "32b499b0c45fa1927b69a25386d8c46c4f1080fb", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=2231f17fa0b742bec5fdcad0894d02af2ddab08c", "patch": "@@ -357,10 +357,12 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n      another compilation unit) public entities, show we are at global level\n      for the purpose of computing scopes.  Don't do this for components or\n      discriminants since the relevant test is whether or not the record is\n-     being defined.  */\n+     being defined.  Don't do this for constants either as we'll look into\n+     their defining expression in the local context.  */\n   if (!definition\n       && kind != E_Component\n       && kind != E_Discriminant\n+      && kind != E_Constant\n       && Is_Public (gnat_entity)\n       && !Is_Statically_Allocated (gnat_entity))\n     force_global++, this_global = true;\n@@ -430,7 +432,28 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  && Present (Expression (Declaration_Node (gnat_entity)))\n \t  && Nkind (Expression (Declaration_Node (gnat_entity)))\n \t     != N_Allocator)\n-\tgnu_expr = gnat_to_gnu (Expression (Declaration_Node (gnat_entity)));\n+\t{\n+\t  bool went_into_elab_proc = false;\n+\n+\t  /* The expression may contain N_Expression_With_Actions nodes and\n+\t     thus object declarations from other units.  In this case, even\n+\t     though the expression will eventually be discarded since not a\n+\t     constant, the declarations would be stuck either in the global\n+\t     varpool or in the current scope.  Therefore we force the local\n+\t     context and create a fake scope that we'll zap at the end.  */\n+\t  if (!current_function_decl)\n+\t    {\n+\t      current_function_decl = get_elaboration_procedure ();\n+\t      went_into_elab_proc = true;\n+\t    }\n+\t  gnat_pushlevel ();\n+\n+\t  gnu_expr = gnat_to_gnu (Expression (Declaration_Node (gnat_entity)));\n+\n+\t  gnat_zaplevel ();\n+\t  if (went_into_elab_proc)\n+\t    current_function_decl = NULL_TREE;\n+\t}\n \n       /* Ignore deferred constant definitions without address clause since\n \t they are processed fully in the front-end.  If No_Initialization\n@@ -926,10 +949,12 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t   that for the renaming.  At the global level, we can only do\n \t\t   this if we know no SAVE_EXPRs need be made, because the\n \t\t   expression we return might be used in arbitrary conditional\n-\t\t   branches so we must force the SAVE_EXPRs evaluation\n-\t\t   immediately and this requires a function context.  */\n+\t\t   branches so we must force the evaluation of the SAVE_EXPRs\n+\t\t   immediately and this requires a proper function context.\n+\t\t   Note that an external constant is at the global level.  */\n \t\tif (!Materialize_Entity (gnat_entity)\n-\t\t    && (!global_bindings_p ()\n+\t\t    && (!((!definition && kind == E_Constant)\n+\t\t\t  || global_bindings_p ())\n \t\t\t|| (staticp (gnu_expr)\n \t\t\t    && !TREE_SIDE_EFFECTS (gnu_expr))))\n \t\t  {\n@@ -940,7 +965,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t      {\n \t\t\t/* ??? No DECL_EXPR is created so we need to mark\n \t\t\t   the expression manually lest it is shared.  */\n-\t\t\tif (global_bindings_p ())\n+\t\t\tif ((!definition && kind == E_Constant)\n+\t\t\t    || global_bindings_p ())\n \t\t\t  MARK_VISITED (maybe_stable_expr);\n \t\t\tgnu_decl = maybe_stable_expr;\n \t\t\tsave_gnu_tree (gnat_entity, gnu_decl, true);\n@@ -1359,11 +1385,12 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  }\n \n \t/* If this is a renaming pointer, attach the renamed object to it and\n-\t   register it if we are at top level.  */\n+\t   register it if we are at the global level.  Note that an external\n+\t   constant is at the global level.  */\n \tif (TREE_CODE (gnu_decl) == VAR_DECL && renamed_obj)\n \t  {\n \t    SET_DECL_RENAMED_OBJECT (gnu_decl, renamed_obj);\n-\t    if (global_bindings_p ())\n+\t    if ((!definition && kind == E_Constant) || global_bindings_p ())\n \t      {\n \t\tDECL_RENAMING_GLOBAL_P (gnu_decl) = 1;\n \t\trecord_global_renaming_pointer (gnu_decl);\n@@ -5977,7 +6004,7 @@ elaborate_expression_1 (tree gnu_expr, Entity_Id gnat_entity, tree gnu_name,\n \t\t\t\t\t     IDENTIFIER_POINTER (gnu_name)),\n \t\t\t NULL_TREE, TREE_TYPE (gnu_expr), gnu_expr,\n \t\t\t !need_debug, Is_Public (gnat_entity),\n-\t\t\t !definition, false, NULL, gnat_entity);\n+\t\t\t !definition, expr_global, NULL, gnat_entity);\n \n   /* We only need to use this variable if we are in global context since GCC\n      can do the right thing in the local case.  */"}, {"sha": "b464cacbe2ec89fcd102b0bf59702b19161ea2e8", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=2231f17fa0b742bec5fdcad0894d02af2ddab08c", "patch": "@@ -259,6 +259,9 @@ extern void post_error_ne_tree_2 (const char *msg, Node_Id node, Entity_Id ent,\n    if none.  */\n extern tree get_exception_label (char kind);\n \n+/* Return the decl for the current elaboration procedure.  */\n+extern tree get_elaboration_procedure (void);\n+\n /* If nonzero, pretend we are allocating at global level.  */\n extern int force_global;\n \n@@ -403,6 +406,7 @@ extern int global_bindings_p (void);\n /* Enter and exit a new binding level.  */\n extern void gnat_pushlevel (void);\n extern void gnat_poplevel (void);\n+extern void gnat_zaplevel (void);\n \n /* Set SUPERCONTEXT of the BLOCK for the current binding level to FNDECL\n    and point FNDECL to this BLOCK.  */"}, {"sha": "bf9ac15a4cd09fc8184f65d7c7283546c6b7b77c", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=2231f17fa0b742bec5fdcad0894d02af2ddab08c", "patch": "@@ -2675,7 +2675,7 @@ call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target)\n      so we can give them the scope of the elaboration routine at top level.  */\n   else if (!current_function_decl)\n     {\n-      current_function_decl = VEC_last (tree, gnu_elab_proc_stack);\n+      current_function_decl = get_elaboration_procedure ();\n       went_into_elab_proc = true;\n     }\n \n@@ -3755,11 +3755,13 @@ gnat_to_gnu (Node_Id gnat_node)\n       || kind == N_Handled_Sequence_Of_Statements\n       || (IN (kind, N_Raise_xxx_Error) && Ekind (Etype (gnat_node)) == E_Void))\n     {\n+      tree current_elab_proc = get_elaboration_procedure ();\n+\n       /* If this is a statement and we are at top level, it must be part of\n \t the elaboration procedure, so mark us as being in that procedure.  */\n       if (!current_function_decl)\n \t{\n-\t  current_function_decl = VEC_last (tree, gnu_elab_proc_stack);\n+\t  current_function_decl = current_elab_proc;\n \t  went_into_elab_proc = true;\n \t}\n \n@@ -3770,7 +3772,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t every nested real statement instead.  This also avoids triggering\n \t spurious errors on dummy (empty) sequences created by the front-end\n \t for package bodies in some cases.  */\n-      if (current_function_decl == VEC_last (tree, gnu_elab_proc_stack)\n+      if (current_function_decl == current_elab_proc\n \t  && kind != N_Handled_Sequence_Of_Statements)\n \tCheck_Elaboration_Code_Allowed (gnat_node);\n     }\n@@ -3998,15 +4000,13 @@ gnat_to_gnu (Node_Id gnat_node)\n \t     is frozen.  */\n \t  if (Present (Freeze_Node (gnat_temp)))\n \t    {\n-\t      bool public_flag = Is_Public (gnat_temp);\n-\n \t      if (TREE_CONSTANT (gnu_expr))\n \t\t;\n-\t      else if (public_flag || global_bindings_p ())\n+\t      else if (global_bindings_p ())\n \t\tgnu_expr\n \t\t  = create_var_decl (create_concat_name (gnat_temp, \"init\"),\n \t\t\t\t     NULL_TREE, TREE_TYPE (gnu_expr), gnu_expr,\n-\t\t\t\t     false, public_flag, false, false,\n+\t\t\t\t     false, false, false, false,\n \t\t\t\t     NULL, gnat_temp);\n \t      else\n \t\tgnu_expr = gnat_save_expr (gnu_expr);\n@@ -5809,7 +5809,7 @@ add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n \t\t   || TREE_CODE (type) == QUAL_UNION_TYPE))\n \tMARK_VISITED (TYPE_ADA_SIZE (type));\n     }\n-  else\n+  else if (!DECL_EXTERNAL (gnu_decl))\n     add_stmt_with_node (gnu_stmt, gnat_entity);\n \n   /* If this is a variable and an initializer is attached to it, it must be\n@@ -7665,4 +7665,12 @@ get_exception_label (char kind)\n     return NULL_TREE;\n }\n \n+/* Return the decl for the current elaboration procedure.  */\n+\n+tree\n+get_elaboration_procedure (void)\n+{\n+  return VEC_last (tree, gnu_elab_proc_stack);\n+}\n+\n #include \"gt-ada-trans.h\""}, {"sha": "98a1565864702f9a2dccc93986cf806ad68f18c7", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=2231f17fa0b742bec5fdcad0894d02af2ddab08c", "patch": "@@ -411,6 +411,22 @@ gnat_poplevel (void)\n   free_binding_level = level;\n }\n \n+/* Exit a binding level and discard the associated BLOCK.  */\n+\n+void\n+gnat_zaplevel (void)\n+{\n+  struct gnat_binding_level *level = current_binding_level;\n+  tree block = level->block;\n+\n+  BLOCK_CHAIN (block) = free_block_chain;\n+  free_block_chain = block;\n+\n+  /* Free this binding structure.  */\n+  current_binding_level = level->chain;\n+  level->chain = free_binding_level;\n+  free_binding_level = level;\n+}\n \f\n /* Records a ..._DECL node DECL as belonging to the current lexical scope\n    and uses GNAT_NODE for location information and propagating flags.  */\n@@ -441,13 +457,12 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n   add_decl_expr (decl, gnat_node);\n \n   /* Put the declaration on the list.  The list of declarations is in reverse\n-     order.  The list will be reversed later.  Put global variables in the\n-     globals list and builtin functions in a dedicated list to speed up\n-     further lookups.  Don't put TYPE_DECLs for UNCONSTRAINED_ARRAY_TYPE into\n-     the list, as they will cause trouble with the debugger and aren't needed\n-     anyway.  */\n-  if (TREE_CODE (decl) != TYPE_DECL\n-      || TREE_CODE (TREE_TYPE (decl)) != UNCONSTRAINED_ARRAY_TYPE)\n+     order.  The list will be reversed later.  Put global declarations in the\n+     globals list and local ones in the current block.  But skip TYPE_DECLs\n+     for UNCONSTRAINED_ARRAY_TYPE in both cases, as they will cause trouble\n+     with the debugger and aren't needed anyway.  */\n+  if (!(TREE_CODE (decl) == TYPE_DECL\n+        && TREE_CODE (TREE_TYPE (decl)) == UNCONSTRAINED_ARRAY_TYPE))\n     {\n       if (global_bindings_p ())\n \t{\n@@ -456,7 +471,7 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n \t  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_BUILT_IN (decl))\n \t    VEC_safe_push (tree, gc, builtin_decls, decl);\n \t}\n-      else\n+      else if (!DECL_EXTERNAL (decl))\n \t{\n \t  tree block;\n \t  /* Fake PARM_DECLs go into the topmost block of the function.  */\n@@ -1371,12 +1386,11 @@ create_var_decl_1 (tree var_name, tree asm_name, tree type, tree var_init,\n       && !have_global_bss_p ())\n     DECL_COMMON (var_decl) = 1;\n \n-  /* If it's public and not external, always allocate storage for it.\n-     At the global binding level we need to allocate static storage for the\n-     variable if and only if it's not external. If we are not at the top level\n-     we allocate automatic storage unless requested not to.  */\n+  /* At the global binding level, we need to allocate static storage for the\n+     variable if it isn't external.  Otherwise, we allocate automatic storage\n+     unless requested not to.  */\n   TREE_STATIC (var_decl)\n-    = !extern_flag && (public_flag || static_flag || global_bindings_p ());\n+    = !extern_flag && (static_flag || global_bindings_p ());\n \n   /* For an external constant whose initializer is not absolute, do not emit\n      debug info.  In DWARF this would mean a global relocation in a read-only"}, {"sha": "1ef14a32359085aefc190b10c977b0e1e08dc816", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2231f17fa0b742bec5fdcad0894d02af2ddab08c", "patch": "@@ -1,3 +1,11 @@\n+2010-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/const1.adb: Rename into...\n+\t* gnat.dg/constant1.adb: ...this.\n+\t* gnat.dg/constant2.adb: New test.\n+\t* gnat.dg/constant2_pkg1.ads: New helper.\n+\t* gnat.dg/constant2_pkg2.ad[sb]: Likewise.\n+\n 2010-09-19  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/constant1.ads: New test."}, {"sha": "6cd1bcfd24ec4b5ab02d37bf3075aa6919f7fe80", "filename": "gcc/testsuite/gnat.dg/constant1.adb", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant1.adb?ref=2231f17fa0b742bec5fdcad0894d02af2ddab08c", "patch": "@@ -1,8 +1,8 @@\n --  { dg-do compile }\n \n-procedure const1 is\n+procedure Constant1 is\n    Def_Const : constant Integer;\n    pragma Import (Ada, Def_Const);\n begin\n    null;\n-end const1;\n+end;", "previous_filename": "gcc/testsuite/gnat.dg/const1.adb"}, {"sha": "41c7e9140360b9e304a33c6a7ede8f0ab1c0c033", "filename": "gcc/testsuite/gnat.dg/constant2.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant2.adb?ref=2231f17fa0b742bec5fdcad0894d02af2ddab08c", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatVa\" }\n+\n+with Constant2_Pkg1; use Constant2_Pkg1;\n+\n+procedure Constant2 is\n+begin\n+  if Val then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "8905d306432b9ec4a6708b5b36ded4c39fb0d695", "filename": "gcc/testsuite/gnat.dg/constant2_pkg1.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant2_pkg1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant2_pkg1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant2_pkg1.ads?ref=2231f17fa0b742bec5fdcad0894d02af2ddab08c", "patch": "@@ -0,0 +1,7 @@\n+with Constant2_Pkg2; use Constant2_Pkg2;\n+\n+package Constant2_Pkg1 is\n+\n+  Val : constant Boolean := F1 and then F2;\n+\n+end Constant2_Pkg1;"}, {"sha": "e9ccadea2c986056a0b3264a2bbd9b2e4dfdb5d3", "filename": "gcc/testsuite/gnat.dg/constant2_pkg2.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant2_pkg2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant2_pkg2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant2_pkg2.adb?ref=2231f17fa0b742bec5fdcad0894d02af2ddab08c", "patch": "@@ -0,0 +1,13 @@\n+package body Constant2_Pkg2 is\n+\n+  function F1 return Boolean is\n+  begin\n+    return False;\n+  end;\n+\n+  function F2 return Boolean is\n+  begin\n+    return False;\n+  end;\n+\n+end Constant2_Pkg2;"}, {"sha": "60b283c87b94db6b7f11e42996c45d8654a7fd59", "filename": "gcc/testsuite/gnat.dg/constant2_pkg2.ads", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant2_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2231f17fa0b742bec5fdcad0894d02af2ddab08c/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant2_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fconstant2_pkg2.ads?ref=2231f17fa0b742bec5fdcad0894d02af2ddab08c", "patch": "@@ -0,0 +1,6 @@\n+package Constant2_Pkg2 is\n+\n+  function F1 return Boolean;\n+  function F2 return Boolean;\n+\n+end Constant2_Pkg2;"}]}