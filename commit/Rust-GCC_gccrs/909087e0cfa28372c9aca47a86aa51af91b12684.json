{"sha": "909087e0cfa28372c9aca47a86aa51af91b12684", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA5MDg3ZTBjZmEyODM3MmM5YWNhNDdhODZhYTUxYWY5MWIxMjY4NA==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-05-15T20:44:38Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2004-05-15T20:44:38Z"}, "message": "re PR libfortran/15234 (libgfortran doesn't compile on Tru64 UNIX V4.0F)\n\nPR fortran/15234\n* io/io.h (unit_t): Rename to ...\n(gfc_unit) ... this.\n(unit_root, current_unit, find_file, find_unit, get_unit): Now\nof type gfc_unit.\n(delete_file, insert_unit, close_unit): Argument now of type\ngfc_unit.\n* backspace.c (st_backspace), close.c (st_close), endfile.c\n(st_endfile), inquire.c (inquire_via_unit, st_inquire), open.c\n(test_endfile, edit_modes, new_unit, already_open, st_open),\nrewind.c (st_rewind), transfer.c (current_unit), unit.c\n(internal_unit, unit_cache, rotate_left, rotate_right, insert,\ninsert_unit, delete_root, delete_treap, delete_unit, find_unit,\nget_unit, init_units, close_unit), unix.c (find_file0,\nfind_file, delete_file): Replace all occurences of unit_t by\ngfc_unit.\n\nFrom-SVN: r81903", "tree": {"sha": "3a48d42e1a9a5fd43238184c5534791637d2239c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a48d42e1a9a5fd43238184c5534791637d2239c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/909087e0cfa28372c9aca47a86aa51af91b12684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/909087e0cfa28372c9aca47a86aa51af91b12684", "html_url": "https://github.com/Rust-GCC/gccrs/commit/909087e0cfa28372c9aca47a86aa51af91b12684", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/909087e0cfa28372c9aca47a86aa51af91b12684/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85ff6f624e23ae016b859f4829dd6f177b24c8b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ff6f624e23ae016b859f4829dd6f177b24c8b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85ff6f624e23ae016b859f4829dd6f177b24c8b7"}], "stats": {"total": 127, "additions": 73, "deletions": 54}, "files": [{"sha": "d3bf438fe16a9a75ae4e35342fae0e16987fd735", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=909087e0cfa28372c9aca47a86aa51af91b12684", "patch": "@@ -1,3 +1,22 @@\n+2004-05-15  Tobias Schlueter <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\tPR fortran/15234\n+\t* io/io.h (unit_t): Rename to ...\n+\t(gfc_unit) ... this.\n+\t(unit_root, current_unit, find_file, find_unit, get_unit): Now\n+\tof type gfc_unit.\n+\t(delete_file, insert_unit, close_unit): Argument now of type\n+\tgfc_unit.\n+\t* backspace.c (st_backspace), close.c (st_close), endfile.c\n+\t(st_endfile), inquire.c (inquire_via_unit, st_inquire), open.c\n+\t(test_endfile, edit_modes, new_unit, already_open, st_open),\n+\trewind.c (st_rewind), transfer.c (current_unit), unit.c\n+\t(internal_unit, unit_cache, rotate_left, rotate_right, insert,\n+\tinsert_unit, delete_root, delete_treap, delete_unit, find_unit,\n+\tget_unit, init_units, close_unit), unix.c (find_file0,\n+\tfind_file, delete_file): Replace all occurences of unit_t by\n+\tgfc_unit.\n+\n 2004-05-15  Bud Davis  <bdavis9659@comcast.net>\n \n \tPR fortran/15311"}, {"sha": "5cfc43ce888966fb35bdfe9fb4969c78f462595e", "filename": "libgfortran/io/backspace.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Fbackspace.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Fbackspace.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fbackspace.c?ref=909087e0cfa28372c9aca47a86aa51af91b12684", "patch": "@@ -117,7 +117,7 @@ unformatted_backspace (void)\n void\n st_backspace (void)\n {\n-  unit_t *u;\n+  gfc_unit *u;\n \n   library_start ();\n "}, {"sha": "48d669b2ce711cc04aa3fd1f63c2852836a03e8f", "filename": "libgfortran/io/close.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Fclose.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Fclose.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fclose.c?ref=909087e0cfa28372c9aca47a86aa51af91b12684", "patch": "@@ -37,7 +37,7 @@ void\n st_close (void)\n {\n   close_status status;\n-  unit_t *u;\n+  gfc_unit *u;\n \n   library_start ();\n "}, {"sha": "ca40fe4eb799e963973476471673a78cadf1e4e8", "filename": "libgfortran/io/endfile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Fendfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Fendfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fendfile.c?ref=909087e0cfa28372c9aca47a86aa51af91b12684", "patch": "@@ -27,7 +27,7 @@ Boston, MA 02111-1307, USA.  */\n void\n st_endfile (void)\n {\n-  unit_t *u;\n+  gfc_unit *u;\n \n   library_start ();\n "}, {"sha": "20bea1f887d5877a24266378604b39dc76a81cf3", "filename": "libgfortran/io/inquire.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Finquire.c?ref=909087e0cfa28372c9aca47a86aa51af91b12684", "patch": "@@ -32,7 +32,7 @@ static char undefined[] = \"UNDEFINED\";\n /* inquire_via_unit()-- Inquiry via unit number.  The unit might not exist. */\n \n static void\n-inquire_via_unit (unit_t * u)\n+inquire_via_unit (gfc_unit * u)\n {\n   const char *p;\n \n@@ -352,7 +352,7 @@ inquire_via_filename (void)\n void\n st_inquire (void)\n {\n-  unit_t *u;\n+  gfc_unit *u;\n \n   library_start ();\n "}, {"sha": "99c2b0241ae52815439eae00c96326b9dfb86faf", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=909087e0cfa28372c9aca47a86aa51af91b12684", "patch": "@@ -254,13 +254,13 @@ unit_flags;\n #define DEFAULT_RECL 10000\n \n \n-typedef struct unit_t\n+typedef struct gfc_unit\n {\n   int unit_number;\n \n   stream *s;\n \n-  struct unit_t *left, *right;\t/* Treap links.  */\n+  struct gfc_unit *left, *right;\t/* Treap links.  */\n   int priority;\n \n   int read_bad, current_record;\n@@ -279,7 +279,7 @@ typedef struct unit_t\n   int file_len;\n   char file[1];\t      /* Filename is allocated at the end of the structure.  */\n }\n-unit_t;\n+gfc_unit;\n \n /* Global variables.  Putting these in a structure makes it easier to\n    maintain, particularly with the constraint of a prefix.  */\n@@ -293,7 +293,7 @@ typedef struct\n   int reversion_flag;\t/* Format reversion has occurred.  */\n   int first_item;\n \n-  unit_t *unit_root;\n+  gfc_unit *unit_root;\n   int seen_dollar;\n \n   enum {READING, WRITING} mode;\n@@ -311,7 +311,7 @@ extern global_t g;\n \n \n #define current_unit prefix(current_unit)\n-extern unit_t *current_unit;\n+extern gfc_unit *current_unit;\n \n /* Format tokens.  Only about half of these can be stored in the\n    format nodes.  */\n@@ -409,7 +409,7 @@ stream *output_stream (void);\n int compare_file_filename (stream *, const char *, int);\n \n #define find_file prefix(find_file)\n-unit_t *find_file (void);\n+gfc_unit *find_file (void);\n \n #define stream_at_bof prefix(stream_at_bof)\n int stream_at_bof (stream *);\n@@ -418,7 +418,7 @@ int stream_at_bof (stream *);\n int stream_at_eof (stream *);\n \n #define delete_file prefix(delete_file)\n-int delete_file (unit_t *);\n+int delete_file (gfc_unit *);\n \n #define file_exists prefix(file_exists)\n int file_exists (void);\n@@ -460,24 +460,24 @@ void empty_internal_buffer(stream *);\n /* unit.c */\n \n #define insert_unit prefix(insert_unix)\n-void insert_unit (unit_t *);\n+void insert_unit (gfc_unit *);\n \n #define close_unit prefix(close_unit)\n-int close_unit (unit_t *);\n+int close_unit (gfc_unit *);\n \n #define is_internal_unit prefix(is_internal_unit)\n int is_internal_unit (void);\n \n #define find_unit prefix(find_unit)\n-unit_t *find_unit (int);\n+gfc_unit *find_unit (int);\n \n #define get_unit prefix(get_unit)\n-unit_t *get_unit (int);\n+gfc_unit *get_unit (int);\n \n /* open.c */\n \n #define test_endfile prefix(test_endfile)\n-void test_endfile (unit_t *);\n+void test_endfile (gfc_unit *);\n \n #define new_unit prefix(new_unit)\n void new_unit (unit_flags *);"}, {"sha": "cd70622baf7673fab9a1268f93498eb31082cd0d", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=909087e0cfa28372c9aca47a86aa51af91b12684", "patch": "@@ -140,7 +140,7 @@ static st_option access_opt[] = {\n  * state from AFTER_ENDFILE to AT_ENDFILE. */\n \n void\n-test_endfile (unit_t * u)\n+test_endfile (gfc_unit * u)\n {\n \n   if (u->endfile == NO_ENDFILE && file_length (u->s) == file_position (u->s))\n@@ -152,7 +152,7 @@ test_endfile (unit_t * u)\n  * to be changed. */\n \n static void\n-edit_modes (unit_t * u, unit_flags * flags)\n+edit_modes (gfc_unit * u, unit_flags * flags)\n {\n \n   /* Complain about attempts to change the unchangeable */\n@@ -250,7 +250,7 @@ edit_modes (unit_t * u, unit_flags * flags)\n void\n new_unit (unit_flags * flags)\n {\n-  unit_t *u;\n+  gfc_unit *u;\n   stream *s;\n   char tmpname[5 /* fort. */ + 10 /* digits of unit number */ + 1 /* 0 */];\n \n@@ -384,7 +384,7 @@ new_unit (unit_flags * flags)\n \n   /* Create the unit structure */\n \n-  u = get_mem (sizeof (unit_t) + ioparm.file_len);\n+  u = get_mem (sizeof (gfc_unit) + ioparm.file_len);\n \n   u->unit_number = ioparm.unit;\n   u->s = s;\n@@ -430,7 +430,7 @@ new_unit (unit_flags * flags)\n  * file. */\n \n static void\n-already_open (unit_t * u, unit_flags * flags)\n+already_open (gfc_unit * u, unit_flags * flags)\n {\n \n   if (ioparm.file == NULL)\n@@ -465,7 +465,7 @@ void\n st_open (void)\n {\n   unit_flags flags;\n-  unit_t *u = NULL;\n+  gfc_unit *u = NULL;\n  \n   library_start ();\n "}, {"sha": "76fd1948e050710713af7837f3748595fe783595", "filename": "libgfortran/io/rewind.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Frewind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Frewind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Frewind.c?ref=909087e0cfa28372c9aca47a86aa51af91b12684", "patch": "@@ -28,7 +28,7 @@ Boston, MA 02111-1307, USA.  */\n void\n st_rewind (void)\n {\n-  unit_t *u;\n+  gfc_unit *u;\n \n   library_start ();\n "}, {"sha": "2440aea6cf866ba7de0b27275029c0cd5adbc1a3", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=909087e0cfa28372c9aca47a86aa51af91b12684", "patch": "@@ -54,7 +54,7 @@ Boston, MA 02111-1307, USA.  */\n  *  transferred.\n  */\n \n-unit_t *current_unit;\n+gfc_unit *current_unit;\n static int sf_seen_eor = 0;\n \n char scratch[SCRATCH_SIZE];"}, {"sha": "6f35a2101daebf2ab7c32d34b106501a1b56350b", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=909087e0cfa28372c9aca47a86aa51af91b12684", "patch": "@@ -29,7 +29,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #define CACHE_SIZE 3\n-static unit_t internal_unit, *unit_cache[CACHE_SIZE];\n+static gfc_unit internal_unit, *unit_cache[CACHE_SIZE];\n \n \n /* This implementation is based on Stefan Nilsson's article in the\n@@ -51,10 +51,10 @@ pseudo_random (void)\n \n /* rotate_left()-- Rotate the treap left */\n \n-static unit_t *\n-rotate_left (unit_t * t)\n+static gfc_unit *\n+rotate_left (gfc_unit * t)\n {\n-  unit_t *temp;\n+  gfc_unit *temp;\n \n   temp = t->right;\n   t->right = t->right->left;\n@@ -66,10 +66,10 @@ rotate_left (unit_t * t)\n \n /* rotate_right()-- Rotate the treap right */\n \n-static unit_t *\n-rotate_right (unit_t * t)\n+static gfc_unit *\n+rotate_right (gfc_unit * t)\n {\n-  unit_t *temp;\n+  gfc_unit *temp;\n \n   temp = t->left;\n   t->left = t->left->right;\n@@ -95,8 +95,8 @@ compare (int a, int b)\n \n /* insert()-- Recursive insertion function.  Returns the updated treap. */\n \n-static unit_t *\n-insert (unit_t * new, unit_t * t)\n+static gfc_unit *\n+insert (gfc_unit * new, gfc_unit * t)\n {\n   int c;\n \n@@ -130,18 +130,18 @@ insert (unit_t * new, unit_t * t)\n  * an error to insert a key that already exists. */\n \n void\n-insert_unit (unit_t * new)\n+insert_unit (gfc_unit * new)\n {\n \n   new->priority = pseudo_random ();\n   g.unit_root = insert (new, g.unit_root);\n }\n \n \n-static unit_t *\n-delete_root (unit_t * t)\n+static gfc_unit *\n+delete_root (gfc_unit * t)\n {\n-  unit_t *temp;\n+  gfc_unit *temp;\n \n   if (t->left == NULL)\n     return t->right;\n@@ -168,8 +168,8 @@ delete_root (unit_t * t)\n  * must just point to a treap structure with the key to be deleted.\n  * Returns the new root node of the tree. */\n \n-static unit_t *\n-delete_treap (unit_t * old, unit_t * t)\n+static gfc_unit *\n+delete_treap (gfc_unit * old, gfc_unit * t)\n {\n   int c;\n \n@@ -192,7 +192,7 @@ delete_treap (unit_t * old, unit_t * t)\n /* delete_unit()-- Delete a unit from a tree */\n \n static void\n-delete_unit (unit_t * old)\n+delete_unit (gfc_unit * old)\n {\n \n   g.unit_root = delete_treap (old, g.unit_root);\n@@ -202,10 +202,10 @@ delete_unit (unit_t * old)\n /* find_unit()-- Given an integer, return a pointer to the unit\n  * structure.  Returns NULL if the unit does not exist. */\n \n-unit_t *\n+gfc_unit *\n find_unit (int n)\n {\n-  unit_t *p;\n+  gfc_unit *p;\n   int c;\n \n   for (c = 0; c < CACHE_SIZE; c++)\n@@ -241,10 +241,10 @@ find_unit (int n)\n /* get_unit()-- Returns the unit structure associated with the integer\n  * unit or the internal file. */\n \n-unit_t *\n+gfc_unit *\n get_unit (int read_flag)\n {\n-  unit_t *u;\n+  gfc_unit *u;\n \n   if (ioparm.internal_unit != NULL)\n     {\n@@ -290,12 +290,12 @@ void\n init_units (void)\n {\n   offset_t m, n;\n-  unit_t *u;\n+  gfc_unit *u;\n   int i;\n \n   if (options.stdin_unit >= 0)\n     {\t\t\t\t/* STDIN */\n-      u = get_mem (sizeof (unit_t));\n+      u = get_mem (sizeof (gfc_unit));\n \n       u->unit_number = options.stdin_unit;\n       u->s = input_stream ();\n@@ -316,7 +316,7 @@ init_units (void)\n \n   if (options.stdout_unit >= 0)\n     {\t\t\t\t/* STDOUT */\n-      u = get_mem (sizeof (unit_t));\n+      u = get_mem (sizeof (gfc_unit));\n \n       u->unit_number = options.stdout_unit;\n       u->s = output_stream ();\n@@ -351,7 +351,7 @@ init_units (void)\n  * associated with the stream is freed.  Returns nonzero on I/O error. */\n \n int\n-close_unit (unit_t * u)\n+close_unit (gfc_unit * u)\n {\n   int i, rc;\n "}, {"sha": "3cefd2ab5e542b3a3724d4c9221b10e25a9ed50d", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/909087e0cfa28372c9aca47a86aa51af91b12684/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=909087e0cfa28372c9aca47a86aa51af91b12684", "patch": "@@ -1112,11 +1112,11 @@ compare_file_filename (stream * s, const char *name, int len)\n \n /* find_file0()-- Recursive work function for find_file() */\n \n-static unit_t *\n-find_file0 (unit_t * u, struct stat *st1)\n+static gfc_unit *\n+find_file0 (gfc_unit * u, struct stat *st1)\n {\n   struct stat st2;\n-  unit_t *v;\n+  gfc_unit *v;\n \n   if (u == NULL)\n     return NULL;\n@@ -1140,7 +1140,7 @@ find_file0 (unit_t * u, struct stat *st1)\n /* find_file()-- Take the current filename and see if there is a unit\n  * that has the file already open.  Returns a pointer to the unit if so. */\n \n-unit_t *\n+gfc_unit *\n find_file (void)\n {\n   char path[PATH_MAX + 1];\n@@ -1194,7 +1194,7 @@ stream_at_eof (stream * s)\n  * with the unit.  Returns nonzero if something went wrong. */\n \n int\n-delete_file (unit_t * u)\n+delete_file (gfc_unit * u)\n {\n   char path[PATH_MAX + 1];\n "}]}