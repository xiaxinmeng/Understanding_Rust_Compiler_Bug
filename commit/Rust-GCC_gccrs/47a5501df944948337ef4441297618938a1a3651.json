{"sha": "47a5501df944948337ef4441297618938a1a3651", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdhNTUwMWRmOTQ0OTQ4MzM3ZWY0NDQxMjk3NjE4OTM4YTFhMzY1MQ==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2007-06-06T10:13:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:13:25Z"}, "message": "g-soccon-freebsd.ads, [...]:  Add new constant Thread_Blocking_IO...\n\n2007-04-20  Thomas Quinot  <quinot@adacore.com>\n\t    Bob Duff  <duff@adacore.com>\n\n        * g-soccon-freebsd.ads, g-soccon-vxworks.ads:,\n\tg-soccon-aix.ads, g-soccon-irix.ads, g-soccon-hpux.ads, \n\tg-soccon-solaris.ads, g-soccon-vms.ads, g-soccon-tru64.ads:  Add new\n\tconstant Thread_Blocking_IO, always True by default, set False\n\ton a per-runtime basis.\n\t(Need_Netdb_Buffer): New constant.\n\n\t* g-stheme.adb, g-sttsne.ads, g-sttsne-locking.ads,\n\tg-sttsne-locking.adb, g-sttsne-vxworks.ads, g-sttsne-vxworks.adb: New\n\tfiles.\n\n\t* g-socthi-vxworks.ads, g-socthi-vxworks.adb,\n\tg-socthi-vms.ads, g-socthi-vms.adb (Safe_Gethostbyname,\n\tSafe_Gethostbyaddr, Safe_Getservbyname, Safe_Getservbyport): Use new\n\tchild package Task_Safe_NetDB\n\t(Host_Error_Messages): Add stub body.\n\t(GNAT.Sockets.Thin.Signalling_Fds): New procedure Close.\n\n\t* g-soccon-mingw.ads: Add Windows-specific constants.\n\t(Need_Netdb_Buffer): New constant.\n\t(GNAT.Sockets.Thin.C_Inet_Addr, Windows version): Remove useless Ada\n\twrapper and import inet_addr(3) from the standard sockets library\n\tdirectly instead.\n\t(In_Addr): Add alignment clause.\n\t(GNAT.Sockets.Thin.Signalling_Fds): New procedure Close.\n\nFrom-SVN: r125358", "tree": {"sha": "baf058bd56d76dcabcd90188202b3f51c48b7a25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baf058bd56d76dcabcd90188202b3f51c48b7a25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47a5501df944948337ef4441297618938a1a3651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a5501df944948337ef4441297618938a1a3651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47a5501df944948337ef4441297618938a1a3651", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a5501df944948337ef4441297618938a1a3651/comments", "author": null, "committer": null, "parents": [{"sha": "9415ab7da862bbba06642935c245b0fd3d8e31c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9415ab7da862bbba06642935c245b0fd3d8e31c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9415ab7da862bbba06642935c245b0fd3d8e31c6"}], "stats": {"total": 1449, "additions": 1230, "deletions": 219}, "files": [{"sha": "f96cad40896c09068127b14f155cf313d936aa5d", "filename": "gcc/ada/g-soccon-aix.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-aix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-aix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-aix.ads?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -178,4 +178,17 @@ package GNAT.Sockets.Constants is\n    SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n    SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n \n+   ----------------------------------------\n+   -- Properties of supported interfaces --\n+   ----------------------------------------\n+\n+   Need_Netdb_Buffer  : constant :=           0; --  Need buffer for Netdb ops\n+\n+   ----------------------\n+   -- Additional flags --\n+   ----------------------\n+\n+   Thread_Blocking_IO : constant Boolean := True;\n+   --  Set False for contexts where socket i/o are process blocking\n+\n end GNAT.Sockets.Constants;"}, {"sha": "045c8a095cf6c6d2199841b7e5b0f4d11a588470", "filename": "gcc/ada/g-soccon-freebsd.ads", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-freebsd.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-freebsd.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-freebsd.ads?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,7 +35,7 @@\n --  by the GNAT.Sockets package (g-socket.ads). This package should not be\n --  directly with'ed by an applications program.\n \n---  This is the version for i386-unknown-freebsd5.2.1\n+--  This is the version for i386-unknown-freebsd6.1\n --  This file is generated automatically, do not modify it by hand! Instead,\n --  make changes to gen-soccon.c and re-run it on each target.\n \n@@ -139,7 +139,7 @@ package GNAT.Sockets.Constants is\n    MSG_PEEK           : constant :=           2; --  Peek at incoming data\n    MSG_EOR            : constant :=           8; --  Send end of record\n    MSG_WAITALL        : constant :=          64; --  Wait for full reception\n-   MSG_NOSIGNAL       : constant :=          -1; --  No SIGPIPE on send\n+   MSG_NOSIGNAL       : constant :=      131072; --  No SIGPIPE on send\n    MSG_Forced_Flags   : constant :=           0;\n    --  Flags set on all send(2) calls\n \n@@ -178,4 +178,17 @@ package GNAT.Sockets.Constants is\n    SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n    SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n \n+   ----------------------------------------\n+   -- Properties of supported interfaces --\n+   ----------------------------------------\n+\n+   Need_Netdb_Buffer  : constant :=           0; --  Need buffer for Netdb ops\n+\n+   ----------------------\n+   -- Additional flags --\n+   ----------------------\n+\n+   Thread_Blocking_IO : constant Boolean := True;\n+   --  Set False for contexts where socket i/o are process blocking\n+\n end GNAT.Sockets.Constants;"}, {"sha": "d2262176a528563cfd7a83748dc88ed59ee9214c", "filename": "gcc/ada/g-soccon-hpux.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-hpux.ads?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -178,4 +178,17 @@ package GNAT.Sockets.Constants is\n    SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n    SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n \n+   ----------------------------------------\n+   -- Properties of supported interfaces --\n+   ----------------------------------------\n+\n+   Need_Netdb_Buffer  : constant :=           0; --  Need buffer for Netdb ops\n+\n+   ----------------------\n+   -- Additional flags --\n+   ----------------------\n+\n+   Thread_Blocking_IO : constant Boolean := True;\n+   --  Set False for contexts where socket i/o are process blocking\n+\n end GNAT.Sockets.Constants;"}, {"sha": "7beb802a3ed31710819a9ec7dc6bb91489071775", "filename": "gcc/ada/g-soccon-irix.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-irix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-irix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-irix.ads?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -178,4 +178,17 @@ package GNAT.Sockets.Constants is\n    SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n    SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n \n+   ----------------------------------------\n+   -- Properties of supported interfaces --\n+   ----------------------------------------\n+\n+   Need_Netdb_Buffer  : constant :=           1; --  Need buffer for Netdb ops\n+\n+   ----------------------\n+   -- Additional flags --\n+   ----------------------\n+\n+   Thread_Blocking_IO : constant Boolean := True;\n+   --  Set False for contexts where socket i/o are process blocking\n+\n end GNAT.Sockets.Constants;"}, {"sha": "3e612a1a18cb12fc8e1088db3db1a9ea9feff042", "filename": "gcc/ada/g-soccon-mingw.ads", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-mingw.ads?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -178,4 +178,29 @@ package GNAT.Sockets.Constants is\n    SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n    SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n \n+   ----------------------------------------\n+   -- Properties of supported interfaces --\n+   ----------------------------------------\n+\n+   Need_Netdb_Buffer  : constant :=           0; --  Need buffer for Netdb ops\n+\n+   ----------------------\n+   -- Additional flags --\n+   ----------------------\n+\n+   Thread_Blocking_IO : constant Boolean := True;\n+   --  Set False for contexts where socket i/o are process blocking\n+\n+   ------------------------------\n+   -- MinGW-specific constants --\n+   ------------------------------\n+\n+   --  These constants may be used only within the MinGW version of\n+   --  GNAT.Sockets.Thin.\n+\n+   WSASYSNOTREADY     : constant :=       10091; --  System not ready\n+   WSAVERNOTSUPPORTED : constant :=       10092; --  Version not supported\n+   WSANOTINITIALISED  : constant :=       10093; --  Winsock not intialized\n+   WSAEDISCON         : constant :=       10101; --  Disconnected\n+\n end GNAT.Sockets.Constants;"}, {"sha": "26638a9b7835532557b2b3af3e4b1dc4de6af331", "filename": "gcc/ada/g-soccon-solaris.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-solaris.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-solaris.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-solaris.ads?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -178,4 +178,17 @@ package GNAT.Sockets.Constants is\n    SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n    SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n \n+   ----------------------------------------\n+   -- Properties of supported interfaces --\n+   ----------------------------------------\n+\n+   Need_Netdb_Buffer  : constant :=           1; --  Need buffer for Netdb ops\n+\n+   ----------------------\n+   -- Additional flags --\n+   ----------------------\n+\n+   Thread_Blocking_IO : constant Boolean := True;\n+   --  Set False for contexts where socket i/o are process blocking\n+\n end GNAT.Sockets.Constants;"}, {"sha": "5537151ac4fc86bef9ff89894bb3833f30520633", "filename": "gcc/ada/g-soccon-tru64.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-tru64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-tru64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-tru64.ads?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -178,4 +178,17 @@ package GNAT.Sockets.Constants is\n    SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n    SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n \n+   ----------------------------------------\n+   -- Properties of supported interfaces --\n+   ----------------------------------------\n+\n+   Need_Netdb_Buffer  : constant :=           0; --  Need buffer for Netdb ops\n+\n+   ----------------------\n+   -- Additional flags --\n+   ----------------------\n+\n+   Thread_Blocking_IO : constant Boolean := True;\n+   --  Set False for contexts where socket i/o are process blocking\n+\n end GNAT.Sockets.Constants;"}, {"sha": "ab6c761d9d03e68f5dc73239e539117c96eaadd2", "filename": "gcc/ada/g-soccon-vms.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-vms.ads?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -178,4 +178,17 @@ package GNAT.Sockets.Constants is\n    SIZEOF_tv_sec      : constant :=           4; --  tv_sec\n    SIZEOF_tv_usec     : constant :=           4; --  tv_usec\n \n+   ----------------------------------------\n+   -- Properties of supported interfaces --\n+   ----------------------------------------\n+\n+   Need_Netdb_Buffer  : constant :=           1; --  Need buffer for Netdb ops\n+\n+   ----------------------\n+   -- Additional flags --\n+   ----------------------\n+\n+   Thread_Blocking_IO : constant Boolean := True;\n+   --  Set False for contexts where socket i/o are process blocking\n+\n end GNAT.Sockets.Constants;"}, {"sha": "4168d2c997519a80569e0207a0c18ea1c2a5577f", "filename": "gcc/ada/g-soccon-vxworks.ads", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-soccon-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-vxworks.ads?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2007, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -178,6 +178,19 @@ package GNAT.Sockets.Constants is\n    SIZEOF_tv_sec      : constant :=          4; --  tv_sec\n    SIZEOF_tv_usec     : constant :=          4; --  tv_usec\n \n+   ----------------------------------------\n+   -- Properties of supported interfaces --\n+   ----------------------------------------\n+\n+   Need_Netdb_Buffer  : constant :=          1; --  Need buffer for Netdb ops\n+\n+   ----------------------\n+   -- Additional flags --\n+   ----------------------\n+\n+   Thread_Blocking_IO : constant Boolean := True;\n+   --  Set False for contexts where socket i/o are process blocking\n+\n    --------------------------------\n    -- VxWorks-specific constants --\n    --------------------------------"}, {"sha": "bd27a32d2ec8af676501b27ba30566e0321cd520", "filename": "gcc/ada/g-socthi-vms.adb", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-socthi-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-socthi-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.adb?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2006, AdaCore                     --\n+--                     Copyright (C) 2001-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -52,12 +52,10 @@ package body GNAT.Sockets.Thin is\n    --  been set in non-blocking mode by the user.\n \n    Quantum : constant Duration := 0.2;\n-   --  When Thread_Blocking_IO is False, we set sockets in\n+   --  When Constants.Thread_Blocking_IO is False, we set sockets in\n    --  non-blocking mode and we spend a period of time Quantum between\n    --  two attempts on a blocking operation.\n \n-   Thread_Blocking_IO : Boolean := True;\n-\n    Unknown_System_Error : constant C.Strings.chars_ptr :=\n                             C.Strings.New_String (\"Unknown system error\");\n \n@@ -136,14 +134,14 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          R := Syscall_Accept (S, Addr, Addrlen);\n-         exit when Thread_Blocking_IO\n+         exit when Constants.Thread_Blocking_IO\n            or else R /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= Constants.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n-      if not Thread_Blocking_IO\n+      if not Constants.Thread_Blocking_IO\n         and then R /= Failure\n       then\n          --  A socket inherits the properties ot its server especially\n@@ -171,7 +169,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       Res := Syscall_Connect (S, Name, Namelen);\n \n-      if Thread_Blocking_IO\n+      if Constants.Thread_Blocking_IO\n         or else Res /= Failure\n         or else Non_Blocking_Socket (S)\n         or else Errno /= Constants.EINPROGRESS\n@@ -229,7 +227,7 @@ package body GNAT.Sockets.Thin is\n       Arg : Int_Access) return C.int\n    is\n    begin\n-      if not Thread_Blocking_IO\n+      if not Constants.Thread_Blocking_IO\n         and then Req = Constants.FIONBIO\n       then\n          if Arg.all /= 0 then\n@@ -255,7 +253,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Recv (S, Msg, Len, Flags);\n-         exit when Thread_Blocking_IO\n+         exit when Constants.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= Constants.EWOULDBLOCK;\n@@ -282,7 +280,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Recvfrom (S, Msg, Len, Flags, From, Fromlen);\n-         exit when Thread_Blocking_IO\n+         exit when Constants.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= Constants.EWOULDBLOCK;\n@@ -307,7 +305,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Send (S, Msg, Len, Flags);\n-         exit when Thread_Blocking_IO\n+         exit when Constants.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= Constants.EWOULDBLOCK;\n@@ -334,7 +332,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Sendto (S, Msg, Len, Flags, To, Tolen);\n-         exit when Thread_Blocking_IO\n+         exit when Constants.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= Constants.EWOULDBLOCK;\n@@ -362,7 +360,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       R := Syscall_Socket (Domain, Typ, Protocol);\n \n-      if not Thread_Blocking_IO\n+      if not Constants.Thread_Blocking_IO\n         and then R /= Failure\n       then\n          --  Do not use C_Ioctl as this subprogram tracks sockets set\n@@ -384,13 +382,19 @@ package body GNAT.Sockets.Thin is\n       null;\n    end Finalize;\n \n+   -------------------------\n+   -- Host_Error_Messages --\n+   -------------------------\n+\n+   package body Host_Error_Messages is separate;\n+\n    ----------------\n    -- Initialize --\n    ----------------\n \n-   procedure Initialize (Process_Blocking_IO : Boolean) is\n+   procedure Initialize is\n    begin\n-      Thread_Blocking_IO := not Process_Blocking_IO;\n+      null;\n    end Initialize;\n \n    -------------------------"}, {"sha": "28b9dd0975feb6bc8056812ab28541676ce470e5", "filename": "gcc/ada/g-socthi-vms.ads", "status": "modified", "additions": 63, "deletions": 30, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-socthi-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-socthi-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.ads?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2006, AdaCore                     --\n+--                     Copyright (C) 2002-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,8 +40,8 @@\n with Interfaces.C.Pointers;\n with Interfaces.C.Strings;\n \n-with GNAT.Sockets.Constants;\n with GNAT.OS_Lib;\n+with GNAT.Sockets.Constants;\n \n with System;\n \n@@ -65,12 +65,21 @@ package GNAT.Sockets.Thin is\n \n    function Socket_Error_Message (Errno : Integer) return C.Strings.chars_ptr;\n    --  Returns the error message string for the error number Errno. If Errno is\n-   --  not known it returns \"Unknown system error\".\n+   --  not known, returns \"Unknown system error\".\n \n    function Host_Errno return Integer;\n    pragma Import (C, Host_Errno, \"__gnat_get_h_errno\");\n    --  Returns last host error number\n \n+   package Host_Error_Messages is\n+\n+      function Host_Error_Message\n+        (H_Errno : Integer) return C.Strings.chars_ptr;\n+      --  Returns the error message string for the host error number H_Errno.\n+      --  If H_Errno is not known, returns \"Unknown system error\".\n+\n+   end Host_Error_Messages;\n+\n    subtype Fd_Set_Access is System.Address;\n    No_Fd_Set : constant Fd_Set_Access := System.Null_Address;\n \n@@ -112,8 +121,11 @@ package GNAT.Sockets.Thin is\n    type In_Addr is record\n       S_B1, S_B2, S_B3, S_B4 : C.unsigned_char;\n    end record;\n+   for In_Addr'Alignment use C.int'Alignment;\n    pragma Convention (C, In_Addr);\n-   --  Internet address\n+   --  IPv4 address, represented as a network-order C.int. Note that the\n+   --  underlying operating system may assume that values of this type have\n+   --  C.int alignment, so we need to provide a suitable alignment clause here.\n \n    type In_Addr_Access is access all In_Addr;\n    pragma Convention (C, In_Addr_Access);\n@@ -220,6 +232,10 @@ package GNAT.Sockets.Thin is\n    --  Indices into an Fd_Pair value providing access to each of the connected\n    --  file descriptors.\n \n+   --------------------------------\n+   -- Standard library functions --\n+   --------------------------------\n+\n    function C_Accept\n      (S       : C.int;\n       Addr    : System.Address;\n@@ -238,14 +254,6 @@ package GNAT.Sockets.Thin is\n       Name    : System.Address;\n       Namelen : C.int) return C.int;\n \n-   function C_Gethostbyaddr\n-     (Addr : System.Address;\n-      Len  : C.int;\n-      Typ  : C.int) return Hostent_Access;\n-\n-   function C_Gethostbyname\n-     (Name : C.char_array) return Hostent_Access;\n-\n    function C_Gethostname\n      (Name    : System.Address;\n       Namelen : C.int) return C.int;\n@@ -255,14 +263,6 @@ package GNAT.Sockets.Thin is\n       Name    : System.Address;\n       Namelen : not null access C.int) return C.int;\n \n-   function C_Getservbyname\n-     (Name  : C.char_array;\n-      Proto : C.char_array) return Servent_Access;\n-\n-   function C_Getservbyport\n-     (Port  : C.int;\n-      Proto : C.char_array) return Servent_Access;\n-\n    function C_Getsockname\n      (S       : C.int;\n       Name    : System.Address;\n@@ -354,6 +354,10 @@ package GNAT.Sockets.Thin is\n       Iov    : System.Address;\n       Iovcnt : C.int) return C.int;\n \n+   -------------------------------------------------------\n+   -- Signalling file descriptors for selector abortion --\n+   -------------------------------------------------------\n+\n    package Signalling_Fds is\n \n       function Create (Fds : not null access Fd_Pair) return C.int;\n@@ -371,8 +375,16 @@ package GNAT.Sockets.Thin is\n       --  Write one byte of data to wsig, the write end of a pair of signalling\n       --  fds created by Create_Signalling_Fds.\n \n+      procedure Close (Sig : C.int);\n+      pragma Convention (C, Close);\n+      --  Close one end of a pair of signalling fds (ignoring any error)\n+\n    end Signalling_Fds;\n \n+   ----------------------------\n+   -- Socket sets management --\n+   ----------------------------\n+\n    procedure Free_Socket_Set\n      (Set : Fd_Set_Access);\n    --  Free system-dependent socket set\n@@ -381,11 +393,11 @@ package GNAT.Sockets.Thin is\n      (Set    : Fd_Set_Access;\n       Socket : Int_Access;\n       Last   : Int_Access);\n-   --  Get last socket in Socket and remove it from the socket\n-   --  set. The parameter Last is a maximum value of the largest\n-   --  socket. This hint is used to avoid scanning very large socket\n-   --  sets. After a call to Get_Socket_From_Set, Last is set back to\n-   --  the real largest socket in the socket set.\n+   --  Get last socket in Socket and remove it from the socket set. The\n+   --  parameter Last is a maximum value of the largest socket. This hint is\n+   --  used to avoid scanning very large socket sets. After a call to\n+   --  Get_Socket_From_Set, Last is set back to the real largest socket in the\n+   --  socket set.\n \n    procedure Insert_Socket_In_Set\n      (Set    : Fd_Set_Access;\n@@ -418,19 +430,35 @@ package GNAT.Sockets.Thin is\n       Socket : C.int);\n    --  Remove socket from the socket set\n \n+   -------------------------------------------\n+   -- Nonreentrant network databases access --\n+   -------------------------------------------\n+\n+   function Nonreentrant_Gethostbyname\n+     (Name : C.char_array) return Hostent_Access;\n+\n+   function Nonreentrant_Gethostbyaddr\n+     (Addr      : System.Address;\n+      Addr_Len  : C.int;\n+      Addr_Type : C.int) return Hostent_Access;\n+\n+   function Nonreentrant_Getservbyname\n+     (Name  : C.char_array;\n+      Proto : C.char_array) return Servent_Access;\n+\n+   function Nonreentrant_Getservbyport\n+     (Port  : C.int;\n+      Proto : C.char_array) return Servent_Access;\n+\n+   procedure Initialize;\n    procedure Finalize;\n-   procedure Initialize (Process_Blocking_IO : Boolean);\n \n private\n \n    pragma Import (C, C_Bind,          \"DECC$BIND\");\n    pragma Import (C, C_Close,         \"DECC$CLOSE\");\n-   pragma Import (C, C_Gethostbyaddr, \"DECC$GETHOSTBYADDR\");\n-   pragma Import (C, C_Gethostbyname, \"DECC$GETHOSTBYNAME\");\n    pragma Import (C, C_Gethostname,   \"DECC$GETHOSTNAME\");\n    pragma Import (C, C_Getpeername,   \"DECC$GETPEERNAME\");\n-   pragma Import (C, C_Getservbyname, \"DECC$GETSERVBYNAME\");\n-   pragma Import (C, C_Getservbyport, \"DECC$GETSERVBYPORT\");\n    pragma Import (C, C_Getsockname,   \"DECC$GETSOCKNAME\");\n    pragma Import (C, C_Getsockopt,    \"DECC$GETSOCKOPT\");\n    pragma Import (C, C_Inet_Addr,     \"DECC$INET_ADDR\");\n@@ -449,4 +477,9 @@ private\n    pragma Import (C, Insert_Socket_In_Set, \"__gnat_insert_socket_in_set\");\n    pragma Import (C, Remove_Socket_From_Set, \"__gnat_remove_socket_from_set\");\n \n+   pragma Import (C, Nonreentrant_Gethostbyname, \"DECC$GETHOSTBYNAME\");\n+   pragma Import (C, Nonreentrant_Gethostbyaddr, \"DECC$GETHOSTBYADDR\");\n+   pragma Import (C, Nonreentrant_Getservbyname, \"DECC$GETSERVBYNAME\");\n+   pragma Import (C, Nonreentrant_Getservbyport, \"DECC$GETSERVBYPORT\");\n+\n end GNAT.Sockets.Thin;"}, {"sha": "84394727f8e1e4bf033f70de08b89a238aa3c36a", "filename": "gcc/ada/g-socthi-vxworks.adb", "status": "modified", "additions": 20, "deletions": 137, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-socthi-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-socthi-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vxworks.adb?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2006, AdaCore                     --\n+--                     Copyright (C) 2002-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,7 +41,6 @@ with GNAT.OS_Lib;  use GNAT.OS_Lib;\n with GNAT.Task_Lock;\n \n with Interfaces.C; use Interfaces.C;\n-with Unchecked_Conversion;\n \n package body GNAT.Sockets.Thin is\n \n@@ -57,32 +56,13 @@ package body GNAT.Sockets.Thin is\n    --  been set in non-blocking mode by the user.\n \n    Quantum : constant Duration := 0.2;\n-   --  When Thread_Blocking_IO is False, we set sockets in\n+   --  When Constants.Thread_Blocking_IO is False, we set sockets in\n    --  non-blocking mode and we spend a period of time Quantum between\n    --  two attempts on a blocking operation.\n \n-   Thread_Blocking_IO : Boolean := True;\n-\n    Unknown_System_Error : constant C.Strings.chars_ptr :=\n                             C.Strings.New_String (\"Unknown system error\");\n \n-   --  The following types and variables are required to create a Hostent\n-   --  record \"by hand\".\n-\n-   type In_Addr_Access_Array_Access is access In_Addr_Access_Array;\n-\n-   Alias_Access : constant Chars_Ptr_Pointers.Pointer :=\n-                    new C.Strings.chars_ptr'(C.Strings.Null_Ptr);\n-\n-   In_Addr_Access_Array_A : constant In_Addr_Access_Array_Access :=\n-                              new In_Addr_Access_Array'(new In_Addr, null);\n-\n-   In_Addr_Access_Ptr : constant In_Addr_Access_Pointers.Pointer :=\n-                          In_Addr_Access_Array_A\n-                            (In_Addr_Access_Array_A'First)'Access;\n-\n-   Local_Hostent : constant Hostent_Access := new Hostent;\n-\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -166,14 +146,14 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          R := Syscall_Accept (S, Addr, Addrlen);\n-         exit when Thread_Blocking_IO\n+         exit when Constants.Thread_Blocking_IO\n            or else R /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= Constants.EWOULDBLOCK;\n          delay Quantum;\n       end loop;\n \n-      if not Thread_Blocking_IO\n+      if not Constants.Thread_Blocking_IO\n         and then R /= Failure\n       then\n          --  A socket inherits the properties ot its server especially\n@@ -202,7 +182,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       Res := Syscall_Connect (S, Name, Namelen);\n \n-      if Thread_Blocking_IO\n+      if Constants.Thread_Blocking_IO\n         or else Res /= Failure\n         or else Non_Blocking_Socket (S)\n         or else Errno /= Constants.EINPROGRESS\n@@ -251,97 +231,6 @@ package body GNAT.Sockets.Thin is\n       end if;\n    end C_Connect;\n \n-   ---------------------\n-   -- C_Gethostbyaddr --\n-   ---------------------\n-\n-   function C_Gethostbyaddr\n-     (Addr : System.Address;\n-      Len  : C.int;\n-      Typ  : C.int) return Hostent_Access\n-   is\n-      pragma Warnings (Off, Len);\n-      pragma Warnings (Off, Typ);\n-\n-      type int_Access is access int;\n-      function To_Pointer is\n-        new Unchecked_Conversion (System.Address, int_Access);\n-\n-      function VxWorks_hostGetByAddr\n-        (Addr : C.int; Buf : System.Address) return C.int;\n-      pragma Import (C, VxWorks_hostGetByAddr, \"hostGetByAddr\");\n-\n-      Host_Name : aliased C.char_array (1 .. Max_Name_Length);\n-\n-   begin\n-      if VxWorks_hostGetByAddr (To_Pointer (Addr).all,\n-                                Host_Name (Host_Name'First)'Address)\n-           /= Constants.OK\n-      then\n-         return null;\n-      end if;\n-\n-      In_Addr_Access_Ptr.all.all := To_In_Addr (To_Pointer (Addr).all);\n-      Local_Hostent.all.H_Name := C.Strings.New_Char_Array (Host_Name);\n-\n-      return Local_Hostent;\n-   end C_Gethostbyaddr;\n-\n-   ---------------------\n-   -- C_Gethostbyname --\n-   ---------------------\n-\n-   function C_Gethostbyname\n-     (Name : C.char_array) return Hostent_Access\n-   is\n-      function VxWorks_hostGetByName\n-        (Name : C.char_array) return C.int;\n-      pragma Import (C, VxWorks_hostGetByName, \"hostGetByName\");\n-\n-      Addr : C.int;\n-\n-   begin\n-      Addr := VxWorks_hostGetByName (Name);\n-      if Addr = Constants.ERROR then\n-         return null;\n-      end if;\n-\n-      In_Addr_Access_Ptr.all.all := To_In_Addr (Addr);\n-      Local_Hostent.all.H_Name := C.Strings.New_Char_Array (To_C (Host_Name));\n-\n-      return Local_Hostent;\n-   end C_Gethostbyname;\n-\n-   ---------------------\n-   -- C_Getservbyname --\n-   ---------------------\n-\n-   function C_Getservbyname\n-     (Name  : C.char_array;\n-      Proto : C.char_array) return Servent_Access\n-   is\n-      pragma Warnings (Off, Name);\n-      pragma Warnings (Off, Proto);\n-\n-   begin\n-      return null;\n-   end C_Getservbyname;\n-\n-   ---------------------\n-   -- C_Getservbyport --\n-   ---------------------\n-\n-   function C_Getservbyport\n-     (Port  : C.int;\n-      Proto : C.char_array) return Servent_Access\n-   is\n-      pragma Warnings (Off, Port);\n-      pragma Warnings (Off, Proto);\n-\n-   begin\n-      return null;\n-   end C_Getservbyport;\n-\n    -------------\n    -- C_Ioctl --\n    -------------\n@@ -352,7 +241,7 @@ package body GNAT.Sockets.Thin is\n       Arg  : Int_Access) return C.int\n    is\n    begin\n-      if not Thread_Blocking_IO\n+      if not Constants.Thread_Blocking_IO\n         and then Req = Constants.FIONBIO\n       then\n          if Arg.all /= 0 then\n@@ -378,7 +267,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Recv (S, Msg, Len, Flags);\n-         exit when Thread_Blocking_IO\n+         exit when Constants.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= Constants.EWOULDBLOCK;\n@@ -405,7 +294,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Recvfrom (S, Msg, Len, Flags, From, Fromlen);\n-         exit when Thread_Blocking_IO\n+         exit when Constants.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= Constants.EWOULDBLOCK;\n@@ -430,7 +319,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Send (S, Msg, Len, Flags);\n-         exit when Thread_Blocking_IO\n+         exit when Constants.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= Constants.EWOULDBLOCK;\n@@ -457,7 +346,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       loop\n          Res := Syscall_Sendto (S, Msg, Len, Flags, To, Tolen);\n-         exit when Thread_Blocking_IO\n+         exit when Constants.Thread_Blocking_IO\n            or else Res /= Failure\n            or else Non_Blocking_Socket (S)\n            or else Errno /= Constants.EWOULDBLOCK;\n@@ -485,7 +374,7 @@ package body GNAT.Sockets.Thin is\n    begin\n       R := Syscall_Socket (Domain, Typ, Protocol);\n \n-      if not Thread_Blocking_IO\n+      if not Constants.Thread_Blocking_IO\n         and then R /= Failure\n       then\n          --  Do not use C_Ioctl as this subprogram tracks sockets set\n@@ -508,13 +397,19 @@ package body GNAT.Sockets.Thin is\n       null;\n    end Finalize;\n \n+   -------------------------\n+   -- Host_Error_Messages --\n+   -------------------------\n+\n+   package body Host_Error_Messages is separate;\n+\n    ----------------\n    -- Initialize --\n    ----------------\n \n-   procedure Initialize (Process_Blocking_IO : Boolean) is\n+   procedure Initialize is\n    begin\n-      Thread_Blocking_IO := not Process_Blocking_IO;\n+      null;\n    end Initialize;\n \n    -------------------------\n@@ -539,7 +434,7 @@ package body GNAT.Sockets.Thin is\n       Address : In_Addr)\n    is\n    begin\n-      Sin.Sin_Addr   := Address;\n+      Sin.Sin_Addr := Address;\n    end Set_Address;\n \n    ----------------\n@@ -622,16 +517,4 @@ package body GNAT.Sockets.Thin is\n       end if;\n    end Socket_Error_Message;\n \n---  Package elaboration\n-\n-begin\n-   Local_Hostent.all.H_Aliases   := Alias_Access;\n-\n-   --  VxWorks currently only supports AF_INET\n-\n-   Local_Hostent.all.H_Addrtype  := Constants.AF_INET;\n-\n-   Local_Hostent.all.H_Length    := 1;\n-   Local_Hostent.all.H_Addr_List := In_Addr_Access_Ptr;\n-\n end GNAT.Sockets.Thin;"}, {"sha": "3e006a7408986a802b63c0e645bba9902e1bda4c", "filename": "gcc/ada/g-socthi-vxworks.ads", "status": "modified", "additions": 38, "deletions": 26, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-socthi-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-socthi-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vxworks.ads?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2006, AdaCore                     --\n+--                     Copyright (C) 2002-2007, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,8 +42,8 @@ with Interfaces.C.Strings;\n \n with Ada.Unchecked_Conversion;\n \n-with GNAT.Sockets.Constants;\n with GNAT.OS_Lib;\n+with GNAT.Sockets.Constants;\n \n with System;\n \n@@ -65,12 +65,21 @@ package GNAT.Sockets.Thin is\n \n    function Socket_Error_Message (Errno : Integer) return C.Strings.chars_ptr;\n    --  Returns the error message string for the error number Errno. If Errno is\n-   --  not known it returns \"Unknown system error\".\n+   --  not known, returns \"Unknown system error\".\n \n    function Host_Errno return Integer;\n    pragma Import (C, Host_Errno, \"__gnat_get_h_errno\");\n    --  Returns last host error number\n \n+   package Host_Error_Messages is\n+\n+      function Host_Error_Message\n+        (H_Errno : Integer) return C.Strings.chars_ptr;\n+      --  Returns the error message string for the host error number H_Errno.\n+      --  If H_Errno is not known, returns \"Unknown system error\".\n+\n+   end Host_Error_Messages;\n+\n    subtype Fd_Set_Access is System.Address;\n    No_Fd_Set : constant Fd_Set_Access := System.Null_Address;\n \n@@ -112,8 +121,11 @@ package GNAT.Sockets.Thin is\n    type In_Addr is record\n       S_B1, S_B2, S_B3, S_B4 : C.unsigned_char;\n    end record;\n+   for In_Addr'Alignment use C.int'Alignment;\n    pragma Convention (C, In_Addr);\n-   --  Internet address\n+   --  IPv4 address, represented as a network-order C.int. Note that the\n+   --  underlying operating system may assume that values of this type have\n+   --  C.int alignment, so we need to provide a suitable alignment clause here.\n \n    function To_In_Addr is new Ada.Unchecked_Conversion (C.int, In_Addr);\n \n@@ -223,6 +235,10 @@ package GNAT.Sockets.Thin is\n    --  Indices into an Fd_Pair value providing access to each of the connected\n    --  file descriptors.\n \n+   --------------------------------\n+   -- Standard library functions --\n+   --------------------------------\n+\n    function C_Accept\n      (S       : C.int;\n       Addr    : System.Address;\n@@ -241,14 +257,6 @@ package GNAT.Sockets.Thin is\n       Name    : System.Address;\n       Namelen : C.int) return C.int;\n \n-   function C_Gethostbyaddr\n-     (Addr : System.Address;\n-      Len  : C.int;\n-      Typ  : C.int) return Hostent_Access;\n-\n-   function C_Gethostbyname\n-     (Name : C.char_array) return Hostent_Access;\n-\n    function C_Gethostname\n      (Name    : System.Address;\n       Namelen : C.int) return C.int;\n@@ -258,14 +266,6 @@ package GNAT.Sockets.Thin is\n       Name    : System.Address;\n       Namelen : not null access C.int) return C.int;\n \n-   function C_Getservbyname\n-     (Name  : C.char_array;\n-      Proto : C.char_array) return Servent_Access;\n-\n-   function C_Getservbyport\n-     (Port  : C.int;\n-      Proto : C.char_array) return Servent_Access;\n-\n    function C_Getsockname\n      (S       : C.int;\n       Name    : System.Address;\n@@ -357,6 +357,10 @@ package GNAT.Sockets.Thin is\n       Iov    : System.Address;\n       Iovcnt : C.int) return C.int;\n \n+   -------------------------------------------------------\n+   -- Signalling file descriptors for selector abortion --\n+   -------------------------------------------------------\n+\n    package Signalling_Fds is\n \n       function Create (Fds : not null access Fd_Pair) return C.int;\n@@ -374,8 +378,16 @@ package GNAT.Sockets.Thin is\n       --  Write one byte of data to wsig, the write end of a pair of signalling\n       --  fds created by Create_Signalling_Fds.\n \n+      procedure Close (Sig : C.int);\n+      pragma Convention (C, Close);\n+      --  Close one end of a pair of signalling fds (ignoring any error)\n+\n    end Signalling_Fds;\n \n+   ----------------------------\n+   -- Socket sets management --\n+   ----------------------------\n+\n    procedure Free_Socket_Set\n      (Set : Fd_Set_Access);\n    --  Free system-dependent socket set\n@@ -384,11 +396,11 @@ package GNAT.Sockets.Thin is\n      (Set    : Fd_Set_Access;\n       Socket : Int_Access;\n       Last   : Int_Access);\n-   --  Get last socket in Socket and remove it from the socket\n-   --  set. The parameter Last is a maximum value of the largest\n-   --  socket. This hint is used to avoid scanning very large socket\n-   --  sets. After a call to Get_Socket_From_Set, Last is set back to\n-   --  the real largest socket in the socket set.\n+   --  Get last socket in Socket and remove it from the socket set. The\n+   --  parameter Last is a maximum value of the largest socket. This hint is\n+   --  used to avoid scanning very large socket sets. After a call to\n+   --  Get_Socket_From_Set, Last is set back to the real largest socket in the\n+   --  socket set.\n \n    procedure Insert_Socket_In_Set\n      (Set    : Fd_Set_Access;\n@@ -421,8 +433,8 @@ package GNAT.Sockets.Thin is\n       Socket : C.int);\n    --  Remove socket from the socket set\n \n+   procedure Initialize;\n    procedure Finalize;\n-   procedure Initialize (Process_Blocking_IO : Boolean);\n \n private\n    pragma Import (C, C_Bind, \"bind\");"}, {"sha": "25d6c61921dbd6b151cee788207f4a624ad5378b", "filename": "gcc/ada/g-stheme.adb", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-stheme.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-stheme.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-stheme.adb?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -0,0 +1,75 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                   GNAT.SOCKETS.THIN.HOST_ERROR_MESSAGES                  --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                       Copyright (C) 2007, AdaCore                        --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the default implementation of this unit, providing explicit\n+--  literal messages (we do not use hstrerror from the standard C library,\n+--  as this function is obsolete).\n+\n+separate (GNAT.Sockets.Thin)\n+package body Host_Error_Messages is\n+\n+   package Messages is\n+      HOST_NOT_FOUND : aliased char_array := \"Host not found\" & nul;\n+      TRY_AGAIN      : aliased char_array := \"Try again\"      & nul;\n+      NO_RECOVERY    : aliased char_array := \"No recovery\"    & nul;\n+      NO_DATA        : aliased char_array := \"No address\"     & nul;\n+      Unknown_Error  : aliased char_array := \"Unknown error\"  & nul;\n+   end Messages;\n+\n+   function Host_Error_Message (H_Errno : Integer) return C.Strings.chars_ptr\n+   is\n+      use Interfaces.C.Strings;\n+      function TCP\n+        (P : char_array_access; Nul_Check : Boolean := False) return chars_ptr\n+        renames To_Chars_Ptr;\n+   begin\n+      case H_Errno is\n+         when Constants.HOST_NOT_FOUND =>\n+            return TCP (Messages.HOST_NOT_FOUND'Access);\n+\n+         when Constants.TRY_AGAIN      =>\n+            return TCP (Messages.TRY_AGAIN'Access);\n+\n+         when Constants.NO_RECOVERY    =>\n+            return TCP (Messages.NO_RECOVERY'Access);\n+\n+         when Constants.NO_DATA        =>\n+            return TCP (Messages.NO_DATA'Access);\n+\n+         when others                   =>\n+            return TCP (Messages.Unknown_Error'Access);\n+\n+      end case;\n+   end Host_Error_Message;\n+\n+end Host_Error_Messages;"}, {"sha": "5153fb7923329d1e9a983246d110f1162edde383", "filename": "gcc/ada/g-sttsne-locking.adb", "status": "added", "additions": 442, "deletions": 0, "changes": 442, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-sttsne-locking.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-sttsne-locking.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sttsne-locking.adb?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -0,0 +1,442 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--    G N A T . S O C K E T S . T H I N . T A S K _ S A F E _ N E T D B     --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                     Copyright (C) 2007, AdaCore                          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with GNAT.Task_Lock;\n+\n+with Interfaces.C; use Interfaces.C;\n+\n+package body GNAT.Sockets.Thin.Task_Safe_NetDB is\n+\n+   procedure Copy_Host_Entry\n+     (Source_Hostent       : Hostent;\n+      Target_Hostent       : out Hostent;\n+      Target_Buffer        : System.Address;\n+      Target_Buffer_Length : C.int;\n+      Result               : out C.int);\n+   --  Copy all the information from Source_Hostent into Target_Hostent,\n+   --  using Target_Buffer to store associated data.\n+   --  0 is returned on success, -1 on failure (in case the provided buffer\n+   --  is too small for the associated data).\n+\n+   procedure Copy_Service_Entry\n+     (Source_Servent       : Servent;\n+      Target_Servent       : out Servent;\n+      Target_Buffer        : System.Address;\n+      Target_Buffer_Length : C.int;\n+      Result               : out C.int);\n+   --  Copy all the information from Source_Servent into Target_Servent,\n+   --  using Target_Buffer to store associated data.\n+   --  0 is returned on success, -1 on failure (in case the provided buffer\n+   --  is too small for the associated data).\n+\n+   procedure Store_Name\n+     (Name          : char_array;\n+      Storage       : in out char_array;\n+      Storage_Index : in out size_t;\n+      Stored_Name   : out C.Strings.chars_ptr);\n+   --  Store the given Name at the first available location in Storage\n+   --  (indicated by Storage_Index, which is updated afterwards), and return\n+   --  the address of that location in Stored_Name.\n+   --  (Supporting routine for the two below).\n+\n+   ---------------------\n+   -- Copy_Host_Entry --\n+   ---------------------\n+\n+   procedure Copy_Host_Entry\n+     (Source_Hostent       : Hostent;\n+      Target_Hostent       : out Hostent;\n+      Target_Buffer        : System.Address;\n+      Target_Buffer_Length : C.int;\n+      Result               : out C.int)\n+   is\n+      use type C.Strings.chars_ptr;\n+\n+      Names_Length : size_t;\n+\n+      Source_Aliases : Chars_Ptr_Array\n+        renames Chars_Ptr_Pointers.Value\n+          (Source_Hostent.H_Aliases, Terminator => C.Strings.Null_Ptr);\n+      --  Null-terminated list of aliases (last element of this array is\n+      --  Null_Ptr).\n+\n+      Source_Addresses : In_Addr_Access_Array\n+        renames In_Addr_Access_Pointers.Value\n+          (Source_Hostent.H_Addr_List, Terminator => null);\n+\n+   begin\n+      Result := -1;\n+      Names_Length := C.Strings.Strlen (Source_Hostent.H_Name) + 1;\n+\n+      for J in Source_Aliases'Range loop\n+         if Source_Aliases (J) /= C.Strings.Null_Ptr then\n+            Names_Length :=\n+              Names_Length + C.Strings.Strlen (Source_Aliases (J)) + 1;\n+         end if;\n+      end loop;\n+\n+      declare\n+         type In_Addr_Array is array (Source_Addresses'Range)\n+                                 of aliased In_Addr;\n+\n+         type Netdb_Host_Data is record\n+            Aliases_List   : aliased Chars_Ptr_Array (Source_Aliases'Range);\n+            Names          : aliased char_array (1 .. Names_Length);\n+\n+            Addresses_List : aliased In_Addr_Access_Array\n+                                       (In_Addr_Array'Range);\n+            Addresses : In_Addr_Array;\n+            --  ??? This assumes support only for Inet family\n+\n+         end record;\n+\n+         Netdb_Data : Netdb_Host_Data;\n+         pragma Import (Ada, Netdb_Data);\n+         for Netdb_Data'Address use Target_Buffer;\n+\n+         Names_Index : size_t := Netdb_Data.Names'First;\n+         --  Index of first available location in Netdb_Data.Names\n+\n+      begin\n+         if Netdb_Data'Size / 8 > Target_Buffer_Length then\n+            return;\n+         end if;\n+\n+         --  Copy host name\n+\n+         Store_Name\n+           (C.Strings.Value (Source_Hostent.H_Name),\n+            Netdb_Data.Names, Names_Index,\n+            Target_Hostent.H_Name);\n+\n+         --  Copy aliases (null-terminated string pointer array)\n+\n+         Target_Hostent.H_Aliases :=\n+           Netdb_Data.Aliases_List\n+             (Netdb_Data.Aliases_List'First)'Unchecked_Access;\n+         for J in Netdb_Data.Aliases_List'Range loop\n+            if J = Netdb_Data.Aliases_List'Last then\n+               Netdb_Data.Aliases_List (J) := C.Strings.Null_Ptr;\n+            else\n+               Store_Name\n+                 (C.Strings.Value (Source_Aliases (J)),\n+                  Netdb_Data.Names, Names_Index,\n+                  Netdb_Data.Aliases_List (J));\n+            end if;\n+         end loop;\n+\n+         --  Copy address type and length\n+\n+         Target_Hostent.H_Addrtype := Source_Hostent.H_Addrtype;\n+         Target_Hostent.H_Length   := Source_Hostent.H_Length;\n+\n+         --  Copy addresses\n+\n+         Target_Hostent.H_Addr_List :=\n+           Netdb_Data.Addresses_List\n+             (Netdb_Data.Addresses_List'First)'Unchecked_Access;\n+\n+         for J in Netdb_Data.Addresses'Range loop\n+            if J = Netdb_Data.Addresses'Last then\n+               Netdb_Data.Addresses_List (J) := null;\n+            else\n+               Netdb_Data.Addresses_List (J) :=\n+                 Netdb_Data.Addresses (J)'Unchecked_Access;\n+\n+               Netdb_Data.Addresses (J) := Source_Addresses (J).all;\n+            end if;\n+         end loop;\n+      end;\n+\n+      Result := 0;\n+   end Copy_Host_Entry;\n+\n+   ------------------------\n+   -- Copy_Service_Entry --\n+   ------------------------\n+\n+   procedure Copy_Service_Entry\n+     (Source_Servent       : Servent;\n+      Target_Servent       : out Servent;\n+      Target_Buffer        : System.Address;\n+      Target_Buffer_Length : C.int;\n+      Result               : out C.int)\n+   is\n+      use type C.Strings.chars_ptr;\n+\n+      Names_Length : size_t;\n+\n+      Source_Aliases : Chars_Ptr_Array\n+        renames Chars_Ptr_Pointers.Value\n+          (Source_Servent.S_Aliases, Terminator => C.Strings.Null_Ptr);\n+      --  Null-terminated list of aliases (last element of this array is\n+      --  Null_Ptr).\n+\n+   begin\n+      Result := -1;\n+      Names_Length := C.Strings.Strlen (Source_Servent.S_Name) + 1\n+                    + C.Strings.Strlen (Source_Servent.S_Proto) + 1;\n+\n+      for J in Source_Aliases'Range loop\n+         if Source_Aliases (J) /= C.Strings.Null_Ptr then\n+            Names_Length :=\n+              Names_Length + C.Strings.Strlen (Source_Aliases (J)) + 1;\n+         end if;\n+      end loop;\n+\n+      declare\n+         type Netdb_Service_Data is record\n+            Aliases_List : aliased Chars_Ptr_Array (Source_Aliases'Range);\n+            Names        : aliased char_array (1 .. Names_Length);\n+         end record;\n+\n+         Netdb_Data : Netdb_Service_Data;\n+         pragma Import (Ada, Netdb_Data);\n+         for Netdb_Data'Address use Target_Buffer;\n+\n+         Names_Index : size_t := Netdb_Data.Names'First;\n+         --  Index of first available location in Netdb_Data.Names\n+\n+      begin\n+         if Netdb_Data'Size / 8 > Target_Buffer_Length then\n+            return;\n+         end if;\n+\n+         --  Copy service name\n+\n+         Store_Name\n+           (C.Strings.Value (Source_Servent.S_Name),\n+            Netdb_Data.Names, Names_Index,\n+            Target_Servent.S_Name);\n+\n+         --  Copy aliases (null-terminated string pointer array)\n+\n+         Target_Servent.S_Aliases :=\n+           Netdb_Data.Aliases_List\n+             (Netdb_Data.Aliases_List'First)'Unchecked_Access;\n+\n+         --  Copy port number\n+\n+         Target_Servent.S_Port := Source_Servent.S_Port;\n+\n+         --  Copy protocol name\n+\n+         Store_Name\n+           (C.Strings.Value (Source_Servent.S_Proto),\n+            Netdb_Data.Names, Names_Index,\n+            Target_Servent.S_Proto);\n+\n+         for J in Netdb_Data.Aliases_List'Range loop\n+            if J = Netdb_Data.Aliases_List'Last then\n+               Netdb_Data.Aliases_List (J) := C.Strings.Null_Ptr;\n+            else\n+               Store_Name\n+                 (C.Strings.Value (Source_Aliases (J)),\n+                  Netdb_Data.Names, Names_Index,\n+                  Netdb_Data.Aliases_List (J));\n+            end if;\n+         end loop;\n+      end;\n+\n+      Result := 0;\n+   end Copy_Service_Entry;\n+\n+   ------------------------\n+   -- Safe_Gethostbyaddr --\n+   ------------------------\n+\n+   function Safe_Gethostbyaddr\n+     (Addr      : System.Address;\n+      Addr_Len  : C.int;\n+      Addr_Type : C.int;\n+      Ret      : not null access Hostent;\n+      Buf      : System.Address;\n+      Buflen   : C.int;\n+      H_Errnop : not null access C.int) return C.int\n+   is\n+      HE     : Hostent_Access;\n+      Result : C.int;\n+   begin\n+      Result := -1;\n+      GNAT.Task_Lock.Lock;\n+      HE := Nonreentrant_Gethostbyaddr (Addr, Addr_Len, Addr_Type);\n+\n+      if HE = null then\n+         H_Errnop.all := C.int (Host_Errno);\n+         goto Unlock_Return;\n+      end if;\n+\n+      --  Now copy the data to the user-provided buffer\n+\n+      Copy_Host_Entry\n+        (Source_Hostent       => HE.all,\n+         Target_Hostent       => Ret.all,\n+         Target_Buffer        => Buf,\n+         Target_Buffer_Length => Buflen,\n+         Result               => Result);\n+\n+      <<Unlock_Return>>\n+      GNAT.Task_Lock.Unlock;\n+      return Result;\n+   end Safe_Gethostbyaddr;\n+\n+   ------------------------\n+   -- Safe_Gethostbyname --\n+   ------------------------\n+\n+   function Safe_Gethostbyname\n+     (Name     : C.char_array;\n+      Ret      : not null access Hostent;\n+      Buf      : System.Address;\n+      Buflen   : C.int;\n+      H_Errnop : not null access C.int) return C.int\n+   is\n+      HE     : Hostent_Access;\n+      Result : C.int;\n+   begin\n+      Result := -1;\n+      GNAT.Task_Lock.Lock;\n+      HE := Nonreentrant_Gethostbyname (Name);\n+\n+      if HE = null then\n+         H_Errnop.all := C.int (Host_Errno);\n+         goto Unlock_Return;\n+      end if;\n+\n+      --  Now copy the data to the user-provided buffer\n+\n+      Copy_Host_Entry\n+        (Source_Hostent       => HE.all,\n+         Target_Hostent       => Ret.all,\n+         Target_Buffer        => Buf,\n+         Target_Buffer_Length => Buflen,\n+         Result               => Result);\n+\n+      <<Unlock_Return>>\n+      GNAT.Task_Lock.Unlock;\n+      return Result;\n+   end Safe_Gethostbyname;\n+\n+   ------------------------\n+   -- Safe_Getservbyname --\n+   ------------------------\n+\n+   function Safe_Getservbyname\n+     (Name     : C.char_array;\n+      Proto    : C.char_array;\n+      Ret      : not null access Servent;\n+      Buf      : System.Address;\n+      Buflen   : C.int) return C.int\n+   is\n+      SE     : Servent_Access;\n+      Result : C.int;\n+   begin\n+      Result := -1;\n+      GNAT.Task_Lock.Lock;\n+      SE := Nonreentrant_Getservbyname (Name, Proto);\n+\n+      if SE = null then\n+         goto Unlock_Return;\n+      end if;\n+\n+      --  Now copy the data to the user-provided buffer\n+\n+      Copy_Service_Entry\n+        (Source_Servent       => SE.all,\n+         Target_Servent       => Ret.all,\n+         Target_Buffer        => Buf,\n+         Target_Buffer_Length => Buflen,\n+         Result               => Result);\n+\n+      <<Unlock_Return>>\n+      GNAT.Task_Lock.Unlock;\n+      return Result;\n+   end Safe_Getservbyname;\n+\n+   ------------------------\n+   -- Safe_Getservbyport --\n+   ------------------------\n+\n+   function Safe_Getservbyport\n+     (Port     : C.int;\n+      Proto    : C.char_array;\n+      Ret      : not null access Servent;\n+      Buf      : System.Address;\n+      Buflen   : C.int) return C.int\n+   is\n+      SE     : Servent_Access;\n+      Result : C.int;\n+\n+   begin\n+      Result := -1;\n+      GNAT.Task_Lock.Lock;\n+      SE := Nonreentrant_Getservbyport (Port, Proto);\n+\n+      if SE = null then\n+         goto Unlock_Return;\n+      end if;\n+\n+      --  Now copy the data to the user-provided buffer\n+\n+      Copy_Service_Entry\n+        (Source_Servent       => SE.all,\n+         Target_Servent       => Ret.all,\n+         Target_Buffer        => Buf,\n+         Target_Buffer_Length => Buflen,\n+         Result               => Result);\n+\n+      <<Unlock_Return>>\n+      GNAT.Task_Lock.Unlock;\n+      return Result;\n+   end Safe_Getservbyport;\n+\n+   ----------------\n+   -- Store_Name --\n+   ----------------\n+\n+   procedure Store_Name\n+     (Name          : char_array;\n+      Storage       : in out char_array;\n+      Storage_Index : in out size_t;\n+      Stored_Name   : out C.Strings.chars_ptr)\n+   is\n+      First : constant C.size_t := Storage_Index;\n+      Last  : constant C.size_t := Storage_Index + Name'Length - 1;\n+   begin\n+      Storage (First .. Last) := Name;\n+      Stored_Name := C.Strings.To_Chars_Ptr\n+                       (Storage (First .. Last)'Unrestricted_Access);\n+      Storage_Index := Last + 1;\n+   end Store_Name;\n+\n+end GNAT.Sockets.Thin.Task_Safe_NetDB;"}, {"sha": "5b96cd3db967881771e4baf6f36304eb1d641a21", "filename": "gcc/ada/g-sttsne-locking.ads", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-sttsne-locking.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-sttsne-locking.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sttsne-locking.ads?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -0,0 +1,78 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--    G N A T . S O C K E T S . T H I N . T A S K _ S A F E _ N E T D B     --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                     Copyright (C) 2007, AdaCore                          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This version is used on VMS and LynxOS\n+\n+package GNAT.Sockets.Thin.Task_Safe_NetDB is\n+\n+   ----------------------------------------\n+   -- Reentrant network databases access --\n+   ----------------------------------------\n+\n+   --  The following routines wrap the Nonreentrant_ versions using the task\n+   --  lock, and copy the relevant data structures (under the lock) into the\n+   --  result. The Nonreentrant_ versions are expected to be in the parent\n+   --  package GNAT.Sockets.Thin (on platforms that use this version of\n+   --  Task_Safe_NetDB).\n+\n+   function Safe_Gethostbyname\n+     (Name     : C.char_array;\n+      Ret      : not null access Hostent;\n+      Buf      : System.Address;\n+      Buflen   : C.int;\n+      H_Errnop : not null access C.int) return C.int;\n+\n+   function Safe_Gethostbyaddr\n+     (Addr      : System.Address;\n+      Addr_Len  : C.int;\n+      Addr_Type : C.int;\n+      Ret       : not null access Hostent;\n+      Buf       : System.Address;\n+      Buflen    : C.int;\n+      H_Errnop  : not null access C.int) return C.int;\n+\n+   function Safe_Getservbyname\n+     (Name     : C.char_array;\n+      Proto    : C.char_array;\n+      Ret      : not null access Servent;\n+      Buf      : System.Address;\n+      Buflen   : C.int) return C.int;\n+\n+   function Safe_Getservbyport\n+     (Port     : C.int;\n+      Proto    : C.char_array;\n+      Ret      : not null access Servent;\n+      Buf      : System.Address;\n+      Buflen   : C.int) return C.int;\n+\n+end GNAT.Sockets.Thin.Task_Safe_NetDB;"}, {"sha": "eaec069993de040a55840af2de3ab629e83838f7", "filename": "gcc/ada/g-sttsne-vxworks.adb", "status": "added", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-sttsne-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-sttsne-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sttsne-vxworks.adb?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -0,0 +1,202 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--    G N A T . S O C K E T S . T H I N . T A S K _ S A F E _ N E T D B     --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--                     Copyright (C) 2007, AdaCore                          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Interfaces.C; use Interfaces.C;\n+\n+package body GNAT.Sockets.Thin.Task_Safe_NetDB is\n+\n+   --  The following additional data is returned by Safe_Gethostbyname\n+   --  and Safe_Getostbyaddr in the user provided buffer.\n+\n+   type Netdb_Host_Data (Name_Length : C.size_t) is record\n+      Address   : aliased In_Addr;\n+      Addr_List : aliased In_Addr_Access_Array (0 .. 1);\n+      Name      : aliased C.char_array (0 .. Name_Length);\n+   end record;\n+\n+   Alias_Access : constant Chars_Ptr_Pointers.Pointer :=\n+                    new C.Strings.chars_ptr'(C.Strings.Null_Ptr);\n+   --  Constant used to create a Hostent record manually\n+\n+   ------------------------\n+   -- Safe_Gethostbyaddr --\n+   ------------------------\n+\n+   function Safe_Gethostbyaddr\n+     (Addr      : System.Address;\n+      Addr_Len  : C.int;\n+      Addr_Type : C.int;\n+      Ret       : not null access Hostent;\n+      Buf       : System.Address;\n+      Buflen    : C.int;\n+      H_Errnop  : not null access C.int) return C.int\n+   is\n+      type int_Access is access int;\n+      function To_Pointer is\n+        new Ada.Unchecked_Conversion (System.Address, int_Access);\n+\n+      function VxWorks_hostGetByAddr\n+        (Addr : C.int; Buf : System.Address) return C.int;\n+      pragma Import (C, VxWorks_hostGetByAddr, \"hostGetByAddr\");\n+\n+      Netdb_Data : Netdb_Host_Data (Name_Length => Max_Name_Length);\n+      pragma Import (Ada, Netdb_Data);\n+      for Netdb_Data'Address use Buf;\n+\n+      pragma Unreferenced (H_Errnop);\n+      --  VxWorks does not provide h_errno\n+\n+   begin\n+      pragma Assert (Addr_Type = Constants.AF_INET);\n+      pragma Assert (Addr_Len = In_Addr'Size / 8);\n+\n+      --  Check that provided buffer is sufficiently large to hold the\n+      --  data we want to return.\n+\n+      if Netdb_Data'Size / 8 > Buflen then\n+         return -1;\n+      end if;\n+\n+      if VxWorks_hostGetByAddr (To_Pointer (Addr).all,\n+                                Netdb_Data.Name'Address)\n+           /= Constants.OK\n+      then\n+         return -1;\n+      end if;\n+\n+      Netdb_Data.Address   := To_In_Addr (To_Pointer (Addr).all);\n+      Netdb_Data.Addr_List :=\n+        (0 => Netdb_Data.Address'Unchecked_Access,\n+         1 => null);\n+\n+      Ret.H_Name      := C.Strings.To_Chars_Ptr\n+                           (Netdb_Data.Name'Unrestricted_Access);\n+      Ret.H_Aliases   := Alias_Access;\n+      Ret.H_Addrtype  := Constants.AF_INET;\n+      Ret.H_Length    := 4;\n+      Ret.H_Addr_List :=\n+        Netdb_Data.Addr_List (Netdb_Data.Addr_List'First)'Unchecked_Access;\n+      return 0;\n+   end Safe_Gethostbyaddr;\n+\n+   ------------------------\n+   -- Safe_Gethostbyname --\n+   ------------------------\n+\n+   function Safe_Gethostbyname\n+     (Name     : C.char_array;\n+      Ret      : not null access Hostent;\n+      Buf      : System.Address;\n+      Buflen   : C.int;\n+      H_Errnop : not null access C.int) return C.int\n+   is\n+      function VxWorks_hostGetByName\n+        (Name : C.char_array) return C.int;\n+      pragma Import (C, VxWorks_hostGetByName, \"hostGetByName\");\n+\n+      Addr : C.int;\n+\n+      pragma Unreferenced (H_Errnop);\n+      --  VxWorks does not provide h_errno\n+\n+   begin\n+      Addr := VxWorks_hostGetByName (Name);\n+      if Addr = Constants.ERROR then\n+         return -1;\n+      end if;\n+\n+      declare\n+         Netdb_Data : Netdb_Host_Data (Name_Length => Name'Length);\n+         pragma Import (Ada, Netdb_Data);\n+         for Netdb_Data'Address use Buf;\n+\n+      begin\n+         --  Check that provided buffer is sufficiently large to hold the\n+         --  data we want to return.\n+\n+         if Netdb_Data'Size / 8 > Buflen then\n+            return -1;\n+         end if;\n+\n+         Netdb_Data.Address   := To_In_Addr (Addr);\n+         Netdb_Data.Addr_List :=\n+           (0 => Netdb_Data.Address'Unchecked_Access,\n+            1 => null);\n+         Netdb_Data.Name (Netdb_Data.Name'First .. Name'Length - 1) := Name;\n+\n+         Ret.H_Name      := C.Strings.To_Chars_Ptr\n+                              (Netdb_Data.Name'Unrestricted_Access);\n+         Ret.H_Aliases   := Alias_Access;\n+         Ret.H_Addrtype  := Constants.AF_INET;\n+         Ret.H_Length    := 4;\n+         Ret.H_Addr_List :=\n+           Netdb_Data.Addr_List (Netdb_Data.Addr_List'First)'Unchecked_Access;\n+      end;\n+      return 0;\n+   end Safe_Gethostbyname;\n+\n+   ------------------------\n+   -- Safe_Getservbyname --\n+   ------------------------\n+\n+   function Safe_Getservbyname\n+     (Name     : C.char_array;\n+      Proto    : C.char_array;\n+      Ret      : not null access Servent;\n+      Buf      : System.Address;\n+      Buflen   : C.int) return C.int\n+   is\n+      pragma Unreferenced (Name, Proto, Ret, Buf, Buflen);\n+   begin\n+      --  Not available under VxWorks\n+      return -1;\n+   end Safe_Getservbyname;\n+\n+   ------------------------\n+   -- Safe_Getservbyport --\n+   ------------------------\n+\n+   function Safe_Getservbyport\n+     (Port     : C.int;\n+      Proto    : C.char_array;\n+      Ret      : not null access Servent;\n+      Buf      : System.Address;\n+      Buflen   : C.int) return C.int\n+   is\n+      pragma Unreferenced (Port, Proto, Ret, Buf, Buflen);\n+   begin\n+      --  Not available under VxWorks\n+      return -1;\n+   end Safe_Getservbyport;\n+\n+end GNAT.Sockets.Thin.Task_Safe_NetDB;"}, {"sha": "063ba12671f6ec67f1e9b1118b51e8fdf5c8c722", "filename": "gcc/ada/g-sttsne-vxworks.ads", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-sttsne-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-sttsne-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sttsne-vxworks.ads?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -0,0 +1,72 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--    G N A T . S O C K E T S . T H I N . T A S K _ S A F E _ N E T D B     --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                     Copyright (C) 2007, AdaCore                          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This version is used on VxWorks\n+\n+package GNAT.Sockets.Thin.Task_Safe_NetDB is\n+\n+   ----------------------------------------\n+   -- Reentrant network databases access --\n+   ----------------------------------------\n+\n+   function Safe_Gethostbyname\n+     (Name     : C.char_array;\n+      Ret      : not null access Hostent;\n+      Buf      : System.Address;\n+      Buflen   : C.int;\n+      H_Errnop : not null access C.int) return C.int;\n+\n+   function Safe_Gethostbyaddr\n+     (Addr      : System.Address;\n+      Addr_Len  : C.int;\n+      Addr_Type : C.int;\n+      Ret       : not null access Hostent;\n+      Buf       : System.Address;\n+      Buflen    : C.int;\n+      H_Errnop  : not null access C.int) return C.int;\n+\n+   function Safe_Getservbyname\n+     (Name     : C.char_array;\n+      Proto    : C.char_array;\n+      Ret      : not null access Servent;\n+      Buf      : System.Address;\n+      Buflen   : C.int) return C.int;\n+\n+   function Safe_Getservbyport\n+     (Port     : C.int;\n+      Proto    : C.char_array;\n+      Ret      : not null access Servent;\n+      Buf      : System.Address;\n+      Buflen   : C.int) return C.int;\n+\n+end GNAT.Sockets.Thin.Task_Safe_NetDB;"}, {"sha": "c10534e2dbd93cb33607074658fa832f58e6317c", "filename": "gcc/ada/g-sttsne.ads", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-sttsne.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47a5501df944948337ef4441297618938a1a3651/gcc%2Fada%2Fg-sttsne.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sttsne.ads?ref=47a5501df944948337ef4441297618938a1a3651", "patch": "@@ -0,0 +1,81 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--    G N A T . S O C K E T S . T H I N . T A S K _ S A F E _ N E T D B     --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--                     Copyright (C) 2007, AdaCore                          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the  Free Software Foundation,  51  Franklin  Street,  Fifth  Floor, --\n+-- Boston, MA 02110-1301, USA.                                              --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package exports reentrant NetDB subprograms. This is the default\n+--  version, used on most platforms. The routines are implemented by importing\n+--  from C; see gsocket.h for details. Different versions are provided on\n+--  platforms where this functionality is implemented in Ada.\n+\n+package GNAT.Sockets.Thin.Task_Safe_NetDB is\n+\n+   ----------------------------------------\n+   -- Reentrant network databases access --\n+   ----------------------------------------\n+\n+   function Safe_Gethostbyname\n+     (Name     : C.char_array;\n+      Ret      : not null access Hostent;\n+      Buf      : System.Address;\n+      Buflen   : C.int;\n+      H_Errnop : not null access C.int) return C.int;\n+\n+   function Safe_Gethostbyaddr\n+     (Addr      : System.Address;\n+      Addr_Len  : C.int;\n+      Addr_Type : C.int;\n+      Ret       : not null access Hostent;\n+      Buf       : System.Address;\n+      Buflen    : C.int;\n+      H_Errnop  : not null access C.int) return C.int;\n+\n+   function Safe_Getservbyname\n+     (Name     : C.char_array;\n+      Proto    : C.char_array;\n+      Ret      : not null access Servent;\n+      Buf      : System.Address;\n+      Buflen   : C.int) return C.int;\n+\n+   function Safe_Getservbyport\n+     (Port     : C.int;\n+      Proto    : C.char_array;\n+      Ret      : not null access Servent;\n+      Buf      : System.Address;\n+      Buflen   : C.int) return C.int;\n+\n+private\n+   pragma Import (C, Safe_Gethostbyname, \"__gnat_safe_gethostbyname\");\n+   pragma Import (C, Safe_Gethostbyaddr, \"__gnat_safe_gethostbyaddr\");\n+   pragma Import (C, Safe_Getservbyname, \"__gnat_safe_getservbyname\");\n+   pragma Import (C, Safe_Getservbyport, \"__gnat_safe_getservbyport\");\n+\n+end GNAT.Sockets.Thin.Task_Safe_NetDB;"}]}