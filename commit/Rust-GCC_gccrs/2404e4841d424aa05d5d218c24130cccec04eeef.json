{"sha": "2404e4841d424aa05d5d218c24130cccec04eeef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQwNGU0ODQxZDQyNGFhMDVkNWQyMThjMjQxMzBjY2NlYzA0ZWVlZg==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-15T15:33:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-15T15:33:18Z"}, "message": "Merge #567\n\n567: warn the unused associated functions r=philberty a=thomasyonug\n\nwarn the unused associated functions\n\nCo-authored-by: Thomas Young <wenzhang5800@gmail.com>", "tree": {"sha": "d0eb002fddc792b4ac8000da2d97c7806157159b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0eb002fddc792b4ac8000da2d97c7806157159b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2404e4841d424aa05d5d218c24130cccec04eeef", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg8FU+CRBK7hj4Ov3rIwAA+GQIAEVPCWw8fTTvf8k8iRRXAE0g\n6cZd/bbQhnmWZqKQZawaLLkJbGUOuyWm4GIbtSmWg5FKPmZmZXZaYLgqo/xat2uq\nTkQ1/a3Eng2qTMlMllanq/A3jWBl99sdws5NbhjSFAHSyPMA3+9nQRxei72kfW2S\nMsSrIgbfSEpNM8HeubYKuulhkFm3ZQ3fqIAW03cNUnAL6GDCkfgMZtunLUh7sAdB\nf6PmrHyjrtIqy+hKlrvAVEIhdYDWo1IyiOybd7sg2BTo+YfG8JgpS3h02L8m+31a\n2Mnm4EKbjfoQSsqRw0EN47lziaWpAnpbW/nTq0k0n9pNNMcsmW82LRxxCuDaH6k=\n=1YDe\n-----END PGP SIGNATURE-----\n", "payload": "tree d0eb002fddc792b4ac8000da2d97c7806157159b\nparent 089e62f33c328afea756ec4b92f5823584b08a3a\nparent 9bebd1e79ca486f74f31d0e64575ac6b4f472f74\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626363198 +0000\ncommitter GitHub <noreply@github.com> 1626363198 +0000\n\nMerge #567\n\n567: warn the unused associated functions r=philberty a=thomasyonug\n\nwarn the unused associated functions\n\nCo-authored-by: Thomas Young <wenzhang5800@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2404e4841d424aa05d5d218c24130cccec04eeef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2404e4841d424aa05d5d218c24130cccec04eeef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2404e4841d424aa05d5d218c24130cccec04eeef/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "089e62f33c328afea756ec4b92f5823584b08a3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/089e62f33c328afea756ec4b92f5823584b08a3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/089e62f33c328afea756ec4b92f5823584b08a3a"}, {"sha": "9bebd1e79ca486f74f31d0e64575ac6b4f472f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bebd1e79ca486f74f31d0e64575ac6b4f472f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bebd1e79ca486f74f31d0e64575ac6b4f472f74"}], "stats": {"total": 122, "additions": 103, "deletions": 19}, "files": [{"sha": "87fa3ef2f3eab33a99d4a9d4f09cf659d1a26309", "filename": "gcc/rust/lint/rust-lint-marklive.cc", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.cc?ref=2404e4841d424aa05d5d218c24130cccec04eeef", "patch": "@@ -106,11 +106,42 @@ MarkLive::go (HIR::Crate &crate)\n void\n MarkLive::visit (HIR::PathInExpression &expr)\n {\n-  // We should iterate every path segment in order to mark the function which is\n-  // called in the expression\n+  // We should iterate every path segment in order to mark the struct which\n+  // is used in expression like Foo::bar(), we should mark the Foo alive.\n   expr.iterate_path_segments ([&] (HIR::PathExprSegment &seg) -> bool {\n     return visit_path_segment (seg);\n   });\n+\n+  // after iterate the path segments, we should mark functions and associated\n+  // functions alive.\n+  NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n+  NodeId ref_node_id = UNKNOWN_NODEID;\n+  find_ref_node_id (ast_node_id, ref_node_id);\n+\n+  // node back to HIR\n+  HirId ref;\n+  bool ok = mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n+\t\t\t\t\t  ref_node_id, &ref);\n+  rust_assert (ok);\n+\n+  // it must resolve to some kind of HIR::Item or HIR::InheritImplItem\n+  HIR::Item *resolved_item\n+    = mappings->lookup_hir_item (expr.get_mappings ().get_crate_num (), ref);\n+  if (resolved_item != nullptr)\n+    {\n+      mark_hir_id (resolved_item->get_mappings ().get_hirid ());\n+    }\n+  else\n+    {\n+      HirId parent_impl_id = UNKNOWN_HIRID;\n+      HIR::ImplItem *resolved_item\n+\t= mappings->lookup_hir_implitem (expr.get_mappings ().get_crate_num (),\n+\t\t\t\t\t ref, &parent_impl_id);\n+      if (resolved_item != nullptr)\n+\t{\n+\t  mark_hir_id (resolved_item->get_impl_mappings ().get_hirid ());\n+\t}\n+    }\n }\n \n void\n@@ -126,8 +157,7 @@ MarkLive::visit (HIR::MethodCallExpr &expr)\n   // Trying to find the method definition and mark it alive.\n   NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n   NodeId ref_node_id = UNKNOWN_NODEID;\n-  find_ref_node_id (ast_node_id, ref_node_id, expr.get_locus (),\n-\t\t    expr.as_string ());\n+  find_ref_node_id (ast_node_id, ref_node_id);\n \n   // node back to HIR\n   HirId ref;\n@@ -215,8 +245,7 @@ MarkLive::visit (HIR::IdentifierExpr &expr)\n {\n   NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n   NodeId ref_node_id = UNKNOWN_NODEID;\n-  find_ref_node_id (ast_node_id, ref_node_id, expr.get_locus (),\n-\t\t    expr.as_string ());\n+  find_ref_node_id (ast_node_id, ref_node_id);\n \n   // node back to HIR\n   HirId ref;\n@@ -251,8 +280,7 @@ MarkLive::mark_hir_id (HirId id)\n }\n \n void\n-MarkLive::find_ref_node_id (NodeId ast_node_id, NodeId &ref_node_id,\n-\t\t\t    Location locus, const std::string &node_name)\n+MarkLive::find_ref_node_id (NodeId ast_node_id, NodeId &ref_node_id)\n {\n   if (resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n     {"}, {"sha": "780b2645bb2a61d31cc61b9cea7f1c53303d0a92", "filename": "gcc/rust/lint/rust-lint-marklive.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.h?ref=2404e4841d424aa05d5d218c24130cccec04eeef", "patch": "@@ -267,8 +267,7 @@ class MarkLive : public MarkLiveBase\n \n   void mark_hir_id (HirId);\n   bool visit_path_segment (HIR::PathExprSegment);\n-  void find_ref_node_id (NodeId ast_node_id, NodeId &ref_node_id,\n-\t\t\t Location locus, const std::string &node_name);\n+  void find_ref_node_id (NodeId ast_node_id, NodeId &ref_node_id);\n };\n \n } // namespace Analysis"}, {"sha": "464852a9f8f47af84b91e6ec44848cade0f06020", "filename": "gcc/rust/lint/rust-lint-scan-deadcode.h", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h?ref=2404e4841d424aa05d5d218c24130cccec04eeef", "patch": "@@ -32,7 +32,7 @@ namespace Analysis {\n // Scan item symbols and warn the symbol if it is not in the live_symbols set.\n // There are three kinds of item we should handle in this pass.\n // 1. Function item\n-// 2. TODO: The function item in the impl block without trait\n+// 2. The function item in the impl block without trait\n // 3. StructStruct, e.g., `Struct Foo{one: 1, two: 2}`. Furthermore, the unused\n //    struct fields will be warned too.\n // 4. TupleStruct, e.g., `Struct Foo(i32, i32)`\n@@ -56,9 +56,23 @@ class ScanDeadcode : public MarkLiveBase\n     HirId hirId = function.get_mappings ().get_hirid ();\n     if (should_warn (hirId))\n       {\n-\trust_warning_at (function.get_locus (), 0,\n-\t\t\t \"function is never used: %<%s%>\",\n-\t\t\t function.get_function_name ().c_str ());\n+\tif (mappings->is_impl_item (hirId))\n+\t  {\n+\t    HIR::ImplBlock *implBlock\n+\t      = mappings->lookup_associated_impl (hirId);\n+\t    if (!implBlock->has_trait_ref ())\n+\t      {\n+\t\trust_warning_at (function.get_locus (), 0,\n+\t\t\t\t \"associated function is never used: %<%s%>\",\n+\t\t\t\t function.get_function_name ().c_str ());\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    rust_warning_at (function.get_locus (), 0,\n+\t\t\t     \"function is never used: %<%s%>\",\n+\t\t\t     function.get_function_name ().c_str ());\n+\t  }\n       }\n   }\n \n@@ -99,12 +113,25 @@ class ScanDeadcode : public MarkLiveBase\n       }\n   }\n \n+  void visit (HIR::ImplBlock &blc) override\n+  {\n+    if (blc.has_impl_items ())\n+      {\n+\tfor (auto &implItem : blc.get_impl_items ())\n+\t  {\n+\t    implItem->accept_vis (*this);\n+\t  }\n+      }\n+  }\n+\n private:\n   std::set<HirId> live_symbols;\n   Resolver::Resolver *resolver;\n+  Analysis::Mappings *mappings;\n \n   ScanDeadcode (std::set<HirId> &live_symbols)\n-    : live_symbols (live_symbols), resolver (Resolver::Resolver::get ()){};\n+    : live_symbols (live_symbols), resolver (Resolver::Resolver::get ()),\n+      mappings (Analysis::Mappings::get ()){};\n \n   bool should_warn (HirId hirId)\n   {"}, {"sha": "9b679281af261e39f87ccc2be5ad59e2c8ef7e24", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=2404e4841d424aa05d5d218c24130cccec04eeef", "patch": "@@ -194,6 +194,13 @@ class Mappings\n   void iterate_impl_items (\n     std::function<bool (HirId, HIR::ImplItem *, HIR::ImplBlock *)> cb);\n \n+  bool is_impl_item (HirId id)\n+  {\n+    HirId parent_impl_block_id = UNKNOWN_HIRID;\n+    return lookup_hir_implitem (get_current_crate (), id, &parent_impl_block_id)\n+\t   != nullptr;\n+  }\n+\n private:\n   Mappings ();\n "}, {"sha": "cc781d8e6266d96cbf11138b8ce2e60f4ce87eec", "filename": "gcc/testsuite/rust/compile/torture/generics13.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics13.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics13.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics13.rs?ref=2404e4841d424aa05d5d218c24130cccec04eeef", "patch": "@@ -14,7 +14,8 @@ impl Foo<isize> {\n     }\n \n     fn bar(self) -> isize {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n         self.a\n     }\n }"}, {"sha": "d6fbc0cb52a627230a171b488ebc351c70227940", "filename": "gcc/testsuite/rust/compile/torture/generics14.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics14.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics14.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics14.rs?ref=2404e4841d424aa05d5d218c24130cccec04eeef", "patch": "@@ -9,7 +9,8 @@ impl Foo<isize> {\n     }\n \n     fn bar(self) -> isize {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n         self.a\n     }\n }"}, {"sha": "924b30cef903b07f82300cbd58c53b36ef539c47", "filename": "gcc/testsuite/rust/compile/torture/generics18.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics18.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics18.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics18.rs?ref=2404e4841d424aa05d5d218c24130cccec04eeef", "patch": "@@ -2,7 +2,8 @@ struct Foo<T>(T);\n \n impl<X> Foo<X> {\n     fn new(a: X) -> Self {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n         Self(a)\n     }\n "}, {"sha": "85ea2f74b7cd59fb9e3f1c869e43da9c0568ce49", "filename": "gcc/testsuite/rust/compile/torture/generics24.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics24.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics24.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics24.rs?ref=2404e4841d424aa05d5d218c24130cccec04eeef", "patch": "@@ -10,7 +10,8 @@ impl Foo<isize> {\n \n impl Foo<char> {\n     fn bar(self) -> char {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n         self.a\n     }\n }"}, {"sha": "ef40e18932e96a1385f77a8a3cff7e69221784d5", "filename": "gcc/testsuite/rust/compile/torture/impl_block_unused.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fimpl_block_unused.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2404e4841d424aa05d5d218c24130cccec04eeef/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fimpl_block_unused.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fimpl_block_unused.rs?ref=2404e4841d424aa05d5d218c24130cccec04eeef", "patch": "@@ -0,0 +1,19 @@\n+struct Foo(i32, bool);\n+\n+impl Foo {\n+    fn new(a: i32, b: bool) -> Foo {\n+    // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n+        Foo(a, b)\n+    }\n+\n+    fn test2() -> i32 {\n+    // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n+\t1\n+    }\n+}\n+\n+fn main() {\n+\tlet _a = Foo(1, true);\n+}"}]}