{"sha": "e8062ad468062f40064d2a648f02f993fe0070ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgwNjJhZDQ2ODA2MmY0MDA2NGQyYTY0OGYwMmY5OTNmZTAwNzBiYQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-01T22:51:11Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-02-02T12:14:39Z"}, "message": "aarch64: Add and use FLAG_LOAD in builtins\n\nWe already have a STORE flag that we use for builtins. This patch introduces a LOAD set\nthat uses AUTO_FP and FLAG_READ_MEMORY. This allows for more aggressive optimisation of the load\nintrinsics.\n\nTurns out we have a great many testcases that do:\nfloat16x4x2_t\nf_vld2_lane_f16 (float16_t * p, float16x4x2_t v)\n{\n  float16x4x2_t res;\n  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n  res = vld2_lane_f16 (p, v, 4);\n  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n  res = vld2_lane_f16 (p, v, -1);\n  return res;\n}\n\nbut since the first res is unused it now gets eliminated early on before we get to give an error\nmessage. Ideally we'd like to warn for both.\nThis patch takes the conservative approach and doesn't convert the load-lane builtins to LOAD ;\nthat's something we can improve later.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-builtins.c (FLAG_LOAD): Define.\n\t* config/aarch64/aarch64-simd-builtins.def (ld1x2, ld2, ld3, ld4, ld2r,\n\tld3r, ld4r, ld1, ld1x3, ld1x4): Use LOAD flags.", "tree": {"sha": "906887adfe634725f14bf56c88bf1034acc308d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/906887adfe634725f14bf56c88bf1034acc308d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8062ad468062f40064d2a648f02f993fe0070ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8062ad468062f40064d2a648f02f993fe0070ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8062ad468062f40064d2a648f02f993fe0070ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8062ad468062f40064d2a648f02f993fe0070ba/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cebc818213c1281d54f3d1d1676674f995241fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cebc818213c1281d54f3d1d1676674f995241fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cebc818213c1281d54f3d1d1676674f995241fa"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "25ab866ccd4e5ab15efe60574062423f7f0c41d1", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8062ad468062f40064d2a648f02f993fe0070ba/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8062ad468062f40064d2a648f02f993fe0070ba/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=e8062ad468062f40064d2a648f02f993fe0070ba", "patch": "@@ -133,6 +133,7 @@ const unsigned int FLAG_FP = FLAG_READ_FPCR | FLAG_RAISE_FP_EXCEPTIONS;\n const unsigned int FLAG_ALL = FLAG_READ_FPCR | FLAG_RAISE_FP_EXCEPTIONS\n   | FLAG_READ_MEMORY | FLAG_PREFETCH_MEMORY | FLAG_WRITE_MEMORY;\n const unsigned int FLAG_STORE = FLAG_WRITE_MEMORY | FLAG_AUTO_FP;\n+const unsigned int FLAG_LOAD = FLAG_READ_MEMORY | FLAG_AUTO_FP;\n \n typedef struct\n {"}, {"sha": "61731beb1e1e7979ebd639c342ec9a3ab9eae6c5", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8062ad468062f40064d2a648f02f993fe0070ba/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8062ad468062f40064d2a648f02f993fe0070ba/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=e8062ad468062f40064d2a648f02f993fe0070ba", "patch": "@@ -91,21 +91,21 @@\n   VAR1 (SETREGP, set_qregci, 0, AUTO_FP, v2di)\n   VAR1 (SETREGP, set_qregxi, 0, AUTO_FP, v2di)\n   /* Implemented by aarch64_ld1x2<VQ:mode>. */\n-  BUILTIN_VQ (LOADSTRUCT, ld1x2, 0, ALL)\n+  BUILTIN_VQ (LOADSTRUCT, ld1x2, 0, LOAD)\n   /* Implemented by aarch64_ld1x2<VDC:mode>. */\n-  BUILTIN_VDC (LOADSTRUCT, ld1x2, 0, ALL)\n+  BUILTIN_VDC (LOADSTRUCT, ld1x2, 0, LOAD)\n   /* Implemented by aarch64_ld<VSTRUCT:nregs><VDC:mode>.  */\n-  BUILTIN_VDC (LOADSTRUCT, ld2, 0, ALL)\n-  BUILTIN_VDC (LOADSTRUCT, ld3, 0, ALL)\n-  BUILTIN_VDC (LOADSTRUCT, ld4, 0, ALL)\n+  BUILTIN_VDC (LOADSTRUCT, ld2, 0, LOAD)\n+  BUILTIN_VDC (LOADSTRUCT, ld3, 0, LOAD)\n+  BUILTIN_VDC (LOADSTRUCT, ld4, 0, LOAD)\n   /* Implemented by aarch64_ld<VSTRUCT:nregs><VQ:mode>.  */\n-  BUILTIN_VQ (LOADSTRUCT, ld2, 0, ALL)\n-  BUILTIN_VQ (LOADSTRUCT, ld3, 0, ALL)\n-  BUILTIN_VQ (LOADSTRUCT, ld4, 0, ALL)\n+  BUILTIN_VQ (LOADSTRUCT, ld2, 0, LOAD)\n+  BUILTIN_VQ (LOADSTRUCT, ld3, 0, LOAD)\n+  BUILTIN_VQ (LOADSTRUCT, ld4, 0, LOAD)\n   /* Implemented by aarch64_ld<VSTRUCT:nregs>r<VALLDIF:mode>.  */\n-  BUILTIN_VALLDIF (LOADSTRUCT, ld2r, 0, ALL)\n-  BUILTIN_VALLDIF (LOADSTRUCT, ld3r, 0, ALL)\n-  BUILTIN_VALLDIF (LOADSTRUCT, ld4r, 0, ALL)\n+  BUILTIN_VALLDIF (LOADSTRUCT, ld2r, 0, LOAD)\n+  BUILTIN_VALLDIF (LOADSTRUCT, ld3r, 0, LOAD)\n+  BUILTIN_VALLDIF (LOADSTRUCT, ld4r, 0, LOAD)\n   /* Implemented by aarch64_ld<VSTRUCT:nregs>_lane<VQ:mode>.  */\n   BUILTIN_VALLDIF (LOADSTRUCT_LANE, ld2_lane, 0, ALL)\n   BUILTIN_VALLDIF (LOADSTRUCT_LANE, ld3_lane, 0, ALL)\n@@ -586,18 +586,18 @@\n   BUILTIN_VDF (UNOP, float_truncate_lo_, 0, FP)\n \n   /* Implemented by aarch64_ld1<VALL_F16:mode>.  */\n-  BUILTIN_VALL_F16 (LOAD1, ld1, 0, ALL)\n+  BUILTIN_VALL_F16 (LOAD1, ld1, 0, LOAD)\n   VAR1(STORE1P, ld1, 0, ALL, v2di)\n \n   /* Implemented by aarch64_st1<VALL_F16:mode>.  */\n   BUILTIN_VALL_F16 (STORE1, st1, 0, STORE)\n   VAR1 (STORE1P, st1, 0, STORE, v2di)\n \n   /* Implemented by aarch64_ld1x3<VALLDIF:mode>.  */\n-  BUILTIN_VALLDIF (LOADSTRUCT, ld1x3, 0, ALL)\n+  BUILTIN_VALLDIF (LOADSTRUCT, ld1x3, 0, LOAD)\n \n   /* Implemented by aarch64_ld1x4<VALLDIF:mode>.  */\n-  BUILTIN_VALLDIF (LOADSTRUCT, ld1x4, 0, ALL)\n+  BUILTIN_VALLDIF (LOADSTRUCT, ld1x4, 0, LOAD)\n \n   /* Implemented by aarch64_st1x2<VALLDIF:mode>.  */\n   BUILTIN_VALLDIF (STORESTRUCT, st1x2, 0, STORE)"}]}