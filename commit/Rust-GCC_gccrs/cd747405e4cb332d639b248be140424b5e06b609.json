{"sha": "cd747405e4cb332d639b248be140424b5e06b609", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q3NDc0MDVlNGNiMzMyZDYzOWIyNDhiZTE0MDQyNGI1ZTA2YjYwOQ==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2018-10-25T13:47:10Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@gcc.gnu.org", "date": "2018-10-25T13:47:10Z"}, "message": "Fix rtx_code_size static initialization order fiasco\n\nr264556 and r264537 changed the format of EQ_ATTR_ALT RTXs to \"ww\",\nwhich also required adjusting rtx_code_size initializer.  In order to\nsimplify things, the list of rtx_codes known to use HOST_WIDE_INTs was\nreplaced by the format string check.  However, unlike the old one, this\nnew check cannot be always performed at compile time, in which case a\nstatic constructor is generated.  This may lead to a static\ninitialization order fiasco with respect to other static constructors\nin the compiler, in case of PR87747, cselib's pool_allocator.\n\ngcc/ChangeLog:\n\n2018-10-25  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\tPR bootstrap/87747\n\t* rtl.c (RTX_CODE_HWINT_P_1): New helper macro.\n\t(RTX_CODE_HWINT_P): New macro.\n\t(rtx_code_size): Use RTX_CODE_HWINT_P ().\n\nFrom-SVN: r265488", "tree": {"sha": "92e7c35227a53ac41bb0459c440d67ebf18735d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92e7c35227a53ac41bb0459c440d67ebf18735d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd747405e4cb332d639b248be140424b5e06b609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd747405e4cb332d639b248be140424b5e06b609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd747405e4cb332d639b248be140424b5e06b609", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd747405e4cb332d639b248be140424b5e06b609/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f317ef76269a989ae751a808f946d15b740baf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f317ef76269a989ae751a808f946d15b740baf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f317ef76269a989ae751a808f946d15b740baf9"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "425c6202965db4a8c63d83128485fe0f8f91b9f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd747405e4cb332d639b248be140424b5e06b609/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd747405e4cb332d639b248be140424b5e06b609/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd747405e4cb332d639b248be140424b5e06b609", "patch": "@@ -1,3 +1,10 @@\n+2018-10-25  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\tPR bootstrap/87747\n+\t* rtl.c (RTX_CODE_HWINT_P_1): New helper macro.\n+\t(RTX_CODE_HWINT_P): New macro.\n+\t(rtx_code_size): Use RTX_CODE_HWINT_P ().\n+\n 2018-10-25  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-devirt.c (odr_types_equivalent_p): Do not ICE if one of types"}, {"sha": "86a40b11cf4c4c433cff22f69885996d53f8fb81", "filename": "gcc/rtl.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd747405e4cb332d639b248be140424b5e06b609/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd747405e4cb332d639b248be140424b5e06b609/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=cd747405e4cb332d639b248be140424b5e06b609", "patch": "@@ -106,11 +106,23 @@ const enum rtx_class rtx_class[NUM_RTX_CODE] = {\n #undef DEF_RTL_EXPR\n };\n \n+/* Whether rtxs with the given code code store data in the hwint field.  */\n+\n+#define RTX_CODE_HWINT_P_1(ENUM)\t\t\t\t\t\\\n+    ((ENUM) == CONST_INT || (ENUM) == CONST_DOUBLE\t\t\t\\\n+     || (ENUM) == CONST_FIXED || (ENUM) == CONST_WIDE_INT)\n+#ifdef GENERATOR_FILE\n+#define RTX_CODE_HWINT_P(ENUM)\t\t\t\t\t\t\\\n+    (RTX_CODE_HWINT_P_1 (ENUM) || (ENUM) == EQ_ATTR_ALT)\n+#else\n+#define RTX_CODE_HWINT_P RTX_CODE_HWINT_P_1\n+#endif\n+\n /* Indexed by rtx code, gives the size of the rtx in bytes.  */\n \n const unsigned char rtx_code_size[NUM_RTX_CODE] = {\n #define DEF_RTL_EXPR(ENUM, NAME, FORMAT, CLASS)\t\t\t\t\\\n-  ((FORMAT)[0] == 'w'\t\t\t\t\t\t\t\\\n+  (RTX_CODE_HWINT_P (ENUM)\t\t\t\t\t\t\\\n    ? RTX_HDR_SIZE + (sizeof FORMAT - 1) * sizeof (HOST_WIDE_INT)\t\\\n    : (ENUM) == REG\t\t\t\t\t\t\t\\\n    ? RTX_HDR_SIZE + sizeof (reg_info)\t\t\t\t\t\\"}]}