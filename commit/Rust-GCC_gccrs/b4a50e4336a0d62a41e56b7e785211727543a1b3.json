{"sha": "b4a50e4336a0d62a41e56b7e785211727543a1b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRhNTBlNDMzNmEwZDYyYTQxZTU2YjdlNzg1MjExNzI3NTQzYTFiMw==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-10-09T10:29:50Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-10-09T10:29:50Z"}, "message": "In libobjc/: 2011-10-09 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2011-10-09  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\tPR libobjc/49883\n\t* init.c (__objc_exec_class): Work around a bug in clang's code\n\tgeneration.  Clang sets the class->info field to values different\n\tfrom 0x1 or 0x2 (the only allowed values in the traditional GNU\n\tObjective-C runtime ABI) to store some additional information, but\n\tthis breaks backwards compatibility.  Wipe out all the bits in the\n\tfields other than the first two upon loading a class.\n\n2011-10-09  Nicola Pero  <nicola.pero@meta-innovation.com>\n\t\n\t* class.c (objc_lookup_class): Added back for compatibility with\n\tclang which seems to emit calls to it.\n\nFrom-SVN: r179721", "tree": {"sha": "52323cadfeff71297cb073de42a81990ba9f9e54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52323cadfeff71297cb073de42a81990ba9f9e54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4a50e4336a0d62a41e56b7e785211727543a1b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a50e4336a0d62a41e56b7e785211727543a1b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4a50e4336a0d62a41e56b7e785211727543a1b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4a50e4336a0d62a41e56b7e785211727543a1b3/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68e291ec19d388cf2c79ea01a826cfb3ca27b5a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e291ec19d388cf2c79ea01a826cfb3ca27b5a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e291ec19d388cf2c79ea01a826cfb3ca27b5a5"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "dbc70f190bb028bdbe81e77688c4316d7380f9d9", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a50e4336a0d62a41e56b7e785211727543a1b3/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a50e4336a0d62a41e56b7e785211727543a1b3/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=b4a50e4336a0d62a41e56b7e785211727543a1b3", "patch": "@@ -1,3 +1,18 @@\n+2011-10-09  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR libobjc/49883\n+\t* init.c (__objc_exec_class): Work around a bug in clang's code\n+\tgeneration.  Clang sets the class->info field to values different\n+\tfrom 0x1 or 0x2 (the only allowed values in the traditional GNU\n+\tObjective-C runtime ABI) to store some additional information, but\n+\tthis breaks backwards compatibility.  Wipe out all the bits in the\n+\tfields other than the first two upon loading a class.\n+\n+2011-10-09  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\t\n+\t* class.c (objc_lookup_class): Added back for compatibility with\n+\tclang which seems to emit calls to it.\n+\n 2011-10-08  Richard Frith-Macdonald <rfm@gnu.org>\n             Nicola Pero  <nicola.pero@meta-innovation.com>\n "}, {"sha": "3b750829f3bc232ab9514102c0a3542ff3bae6d0", "filename": "libobjc/class.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a50e4336a0d62a41e56b7e785211727543a1b3/libobjc%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a50e4336a0d62a41e56b7e785211727543a1b3/libobjc%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fclass.c?ref=b4a50e4336a0d62a41e56b7e785211727543a1b3", "patch": "@@ -764,6 +764,15 @@ objc_get_meta_class (const char *name)\n   return objc_get_class (name)->class_pointer;\n }\n \n+/* This is not used by GCC, but the clang compiler seems to use it\n+   when targetting the GNU runtime.  That's wrong, but we have it to\n+   be compatible.  */\n+Class\n+objc_lookup_class (const char *name)\n+{\n+  return objc_getClass (name);\n+}\n+\n /* This is used when the implementation of a method changes.  It goes\n    through all classes, looking for the ones that have these methods\n    (either method_a or method_b; method_b can be NULL), and reloads"}, {"sha": "23ba41ba128b04ad52b1cc71c9bc22a34d4f78af", "filename": "libobjc/init.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4a50e4336a0d62a41e56b7e785211727543a1b3/libobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4a50e4336a0d62a41e56b7e785211727543a1b3/libobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Finit.c?ref=b4a50e4336a0d62a41e56b7e785211727543a1b3", "patch": "@@ -643,6 +643,15 @@ __objc_exec_class (struct objc_module *module)\n       assert (CLS_ISMETA (class->class_pointer));\n       DEBUG_PRINTF (\" installing class '%s'\\n\", class->name);\n \n+      /* Workaround for a bug in clang: Clang may set flags other than\n+\t _CLS_CLASS and _CLS_META even when compiling for the\n+\t traditional ABI (version 8), confusing our runtime.  Try to\n+\t wipe these flags out.  */\n+      if (CLS_ISCLASS (class))\n+\t__CLS_INFO (class) = _CLS_CLASS;\n+      else\n+\t__CLS_INFO (class) = _CLS_META;\n+\n       /* Initialize the subclass list to be NULL.  In some cases it\n \t isn't and this crashes the program.  */\n       class->subclass_list = NULL;"}]}