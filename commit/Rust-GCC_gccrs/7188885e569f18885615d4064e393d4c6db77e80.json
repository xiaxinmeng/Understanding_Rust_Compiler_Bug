{"sha": "7188885e569f18885615d4064e393d4c6db77e80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE4ODg4NWU1NjlmMTg4ODU2MTVkNDA2NGUzOTNkNGM2ZGI3N2U4MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T09:48:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T09:48:00Z"}, "message": "[multiple changes]\n\n2015-10-20  Bob Duff  <duff@adacore.com>\n\n\t* output.adb (Write_Int): Work with negative numbers in order to avoid\n\tnegating Int'First and thereby causing overflow.\n\t* sem_util.adb: Minor comment fix.\n\n2015-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* make.adb (Check): Skip multilib switches reinstated by the\n\tcompiler when doing the comparison with switches passed to\n\tgnatmake.\n\n2015-10-20  Yannick Moy  <moy@adacore.com>\n\n\t* inline.adb (Can_Be_Inlined_In_GNATprove_Mode): Return\n\tFalse for procedures marked No_Return.\n\t* sem_util.ads (Enclosing_Declaration): Improve comment.\n\t* einfo.adb (Is_Completely_Hidden): Remove spurious assertion.\n\nFrom-SVN: r229029", "tree": {"sha": "a32a044ee02284902f110d5ffc5f7be3fdb24c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a32a044ee02284902f110d5ffc5f7be3fdb24c39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7188885e569f18885615d4064e393d4c6db77e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7188885e569f18885615d4064e393d4c6db77e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7188885e569f18885615d4064e393d4c6db77e80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7188885e569f18885615d4064e393d4c6db77e80/comments", "author": null, "committer": null, "parents": [{"sha": "f06f5f6bd618153d66a028f7be4dbecc22913ac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f06f5f6bd618153d66a028f7be4dbecc22913ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f06f5f6bd618153d66a028f7be4dbecc22913ac1"}], "stats": {"total": 80, "additions": 63, "deletions": 17}, "files": [{"sha": "612864835bc4ccb7df12dfbc8fb58d974a86e31e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7188885e569f18885615d4064e393d4c6db77e80/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7188885e569f18885615d4064e393d4c6db77e80/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7188885e569f18885615d4064e393d4c6db77e80", "patch": "@@ -1,3 +1,22 @@\n+2015-10-20  Bob Duff  <duff@adacore.com>\n+\n+\t* output.adb (Write_Int): Work with negative numbers in order to avoid\n+\tnegating Int'First and thereby causing overflow.\n+\t* sem_util.adb: Minor comment fix.\n+\n+2015-10-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* make.adb (Check): Skip multilib switches reinstated by the\n+\tcompiler when doing the comparison with switches passed to\n+\tgnatmake.\n+\n+2015-10-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* inline.adb (Can_Be_Inlined_In_GNATprove_Mode): Return\n+\tFalse for procedures marked No_Return.\n+\t* sem_util.ads (Enclosing_Declaration): Improve comment.\n+\t* einfo.adb (Is_Completely_Hidden): Remove spurious assertion.\n+\n 2015-10-20  Thomas Quinot  <quinot@adacore.com>\n \n \t* types.ads: Minor reformatting."}, {"sha": "bb26c4639d84d46f5f5afee078b53cfb2b241a1e", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7188885e569f18885615d4064e393d4c6db77e80/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7188885e569f18885615d4064e393d4c6db77e80/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=7188885e569f18885615d4064e393d4c6db77e80", "patch": "@@ -1534,6 +1534,12 @@ package body Inline is\n       elsif In_Package_Visible_Spec (Id) then\n          return False;\n \n+      --  Do not inline subprograms marked No_Return, possibly used for\n+      --  signaling errors, which GNATprove handles specially.\n+\n+      elsif No_Return (Id) then\n+         return False;\n+\n       --  Do not inline subprograms that have a contract on the spec or the\n       --  body. Use the contract(s) instead in GNATprove.\n "}, {"sha": "8db25986cc3cf5c288698eb39560c253e95cdaa0", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7188885e569f18885615d4064e393d4c6db77e80/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7188885e569f18885615d4064e393d4c6db77e80/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=7188885e569f18885615d4064e393d4c6db77e80", "patch": "@@ -1720,12 +1720,17 @@ package body Make is\n \n             for J in 1 .. Last_Argument loop\n \n-               --  Skip non switches -c, -I and -o switches\n+               --  Skip -c, -I and -o switches, as well as multilib switches\n+               --  reinstated by the compiler according to lang-specs.h.\n \n                if Arguments (J) (1) = '-'\n                  and then Arguments (J) (2) /= 'c'\n                  and then Arguments (J) (2) /= 'o'\n                  and then Arguments (J) (2) /= 'I'\n+                 and then not (Arguments (J)'Length = 5\n+                                 and then Arguments (J) (2 .. 5) = \"mrtp\")\n+                 and then not (Arguments (J)'Length = 6\n+                                 and then Arguments (J) (2 .. 6) = \"fsjlj\")\n                then\n                   Normalize_Compiler_Switches\n                     (Arguments (J).all,"}, {"sha": "9261519b24b1d2cb258a1b2744a4c5bcf3d6c7bb", "filename": "gcc/ada/output.adb", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7188885e569f18885615d4064e393d4c6db77e80/gcc%2Fada%2Foutput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7188885e569f18885615d4064e393d4c6db77e80/gcc%2Fada%2Foutput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Foutput.adb?ref=7188885e569f18885615d4064e393d4c6db77e80", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -350,6 +350,7 @@ package body Output is\n \n    procedure Write_Char (C : Character) is\n    begin\n+      pragma Assert (Next_Col in Buffer'Range);\n       if Next_Col = Buffer'Length then\n          Write_Eol;\n       end if;\n@@ -406,17 +407,29 @@ package body Output is\n    ---------------\n \n    procedure Write_Int (Val : Int) is\n+      --  Type Int has one extra negative number (i.e. two's complement), so we\n+      --  work with negative numbers here. Otherwise, negating Int'First will\n+      --  overflow.\n+\n+      subtype Nonpositive is Int range Int'First .. 0;\n+      procedure Write_Abs (Val : Nonpositive);\n+      --  Write out the absolute value of Val\n+\n+      procedure Write_Abs (Val : Nonpositive) is\n+      begin\n+         if Val < -9 then\n+            Write_Abs (Val / 10); -- Recursively write higher digits\n+         end if;\n+\n+         Write_Char (Character'Val (-(Val rem 10) + Character'Pos ('0')));\n+      end Write_Abs;\n+\n    begin\n       if Val < 0 then\n          Write_Char ('-');\n-         Write_Int (-Val);\n-\n+         Write_Abs (Val);\n       else\n-         if Val > 9 then\n-            Write_Int (Val / 10);\n-         end if;\n-\n-         Write_Char (Character'Val ((Val mod 10) + Character'Pos ('0')));\n+         Write_Abs (-Val);\n       end if;\n    end Write_Int;\n "}, {"sha": "d7177b85dc970a63ccbb390a7a729849f81f7680", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7188885e569f18885615d4064e393d4c6db77e80/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7188885e569f18885615d4064e393d4c6db77e80/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=7188885e569f18885615d4064e393d4c6db77e80", "patch": "@@ -17148,14 +17148,16 @@ package body Sem_Util is\n       then\n          return New_Requires_Transient_Scope (Cloned_Subtype (Typ));\n \n-      --  Functions returning tagged types may dispatch on result so their\n-      --  returned value is allocated on the secondary stack, even in the\n-      --  definite case. Is_Tagged_Type includes controlled types and\n-      --  class-wide types. Controlled type temporaries need finalization.\n+      --  Functions returning specific tagged types may dispatch on result, so\n+      --  their returned value is allocated on the secondary stack, even in the\n+      --  definite case. We must treat nondispatching functions the same way,\n+      --  because access-to-function types can point at both, so the calling\n+      --  conventions must be compatible. Is_Tagged_Type includes controlled\n+      --  types and class-wide types. Controlled type temporaries need\n+      --  finalization.\n+\n       --  ???It's not clear why we need to return noncontrolled types with\n-      --  controlled components on the secondary stack. Also, it's not clear\n-      --  why nonprimitive tagged type functions need the secondary stack,\n-      --  since they can't be called via dispatching.\n+      --  controlled components on the secondary stack.\n \n       elsif Is_Tagged_Type (Typ) or else Has_Controlled_Component (Typ) then\n          return True;"}, {"sha": "543d31f0fb5c5894b98c8c0a35b4bc5a407acda5", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7188885e569f18885615d4064e393d4c6db77e80/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7188885e569f18885615d4064e393d4c6db77e80/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=7188885e569f18885615d4064e393d4c6db77e80", "patch": "@@ -532,7 +532,8 @@ package Sem_Util is\n    --  Returns the closest ancestor of Typ that is a CPP type.\n \n    function Enclosing_Declaration (N : Node_Id) return Node_Id;\n-   --  Returns the declaration node enclosing N, if any, or Empty otherwise\n+   --  Returns the declaration node enclosing N (including possibly N itself),\n+   --  if any, or Empty otherwise\n \n    function Enclosing_Generic_Body\n      (N : Node_Id) return Node_Id;"}]}