{"sha": "3f3dcbb39347539a29ce245aa428ae73641f15c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YzZGNiYjM5MzQ3NTM5YTI5Y2UyNDVhYTQyOGFlNzM2NDFmMTVjMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-08T16:01:54Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-08T16:01:54Z"}, "message": "re PR target/53250 ([SH] ICE: in change_address_1, at emit-rtl.c:2018)\n\n\tPR target/53250\n\t* config/i386/i386.c (ix86_set_reg_reg_cost): New function.\n\t(ix86_rtx_costs): Handle SET.\n\nFrom-SVN: r187289", "tree": {"sha": "a40065ca6cb615fdce51b1384c4817e9e6c0a376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a40065ca6cb615fdce51b1384c4817e9e6c0a376"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f3dcbb39347539a29ce245aa428ae73641f15c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f3dcbb39347539a29ce245aa428ae73641f15c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f3dcbb39347539a29ce245aa428ae73641f15c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f3dcbb39347539a29ce245aa428ae73641f15c1/comments", "author": null, "committer": null, "parents": [{"sha": "bcc708fcdc60c6b4485b1796ac1ba61c5f56b0b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc708fcdc60c6b4485b1796ac1ba61c5f56b0b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcc708fcdc60c6b4485b1796ac1ba61c5f56b0b3"}], "stats": {"total": 64, "additions": 62, "deletions": 2}, "files": [{"sha": "d2994e437b844f071f213732fcc03185b0abd3ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f3dcbb39347539a29ce245aa428ae73641f15c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f3dcbb39347539a29ce245aa428ae73641f15c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f3dcbb39347539a29ce245aa428ae73641f15c1", "patch": "@@ -1,3 +1,9 @@\n+2012-05-08  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/53250\n+\t* config/i386/i386.c (ix86_set_reg_reg_cost): New function.\n+\t(ix86_rtx_costs): Handle SET.\n+\n 2012-05-08  Michael Matz  <matz@suse.de>\n \n \t* basic-block.h (struct rtl_bb_info): Remove visited member and\n@@ -15,8 +21,7 @@\n \t(fixup_fallthru_exit_predecessor): Ditto.\n \t(cfg_layout_duplicate_bb): Ditto.\n \t* combine.c (update_cfg_for_uncondjump): Adjust.\n-\t* bb-reorder.c (struct bbro_basic_block_data_def): Add visited\n-\tmember.\n+\t* bb-reorder.c (struct bbro_basic_block_data_def): Add visited member.\n \t(bb_visited_trace): New accessor.\n \t(mark_bb_visited): Move in front.\n \t(rotate_loop): Use bb_visited_trace."}, {"sha": "6bb64e085232f61fde4307375d3215ffd000a195", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f3dcbb39347539a29ce245aa428ae73641f15c1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f3dcbb39347539a29ce245aa428ae73641f15c1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3f3dcbb39347539a29ce245aa428ae73641f15c1", "patch": "@@ -31861,6 +31861,52 @@ ix86_modes_tieable_p (enum machine_mode mode1, enum machine_mode mode2)\n   return false;\n }\n \n+/* Return the cost of moving between two registers of mode MODE.  */\n+\n+static int\n+ix86_set_reg_reg_cost (enum machine_mode mode)\n+{\n+  unsigned int units = UNITS_PER_WORD;\n+\n+  switch (GET_MODE_CLASS (mode))\n+    {\n+    default:\n+      break;\n+\n+    case MODE_CC:\n+      units = GET_MODE_SIZE (CCmode);\n+      break;\n+\n+    case MODE_FLOAT:\n+      if ((TARGET_SSE2 && mode == TFmode)\n+\t  || (TARGET_80387 && mode == XFmode)\n+\t  || ((TARGET_80387 || TARGET_SSE2) && mode == DFmode)\n+\t  || ((TARGET_80387 || TARGET_SSE) && mode == SFmode))\n+\tunits = GET_MODE_SIZE (mode);\n+      break;\n+\n+    case MODE_COMPLEX_FLOAT:\n+      if ((TARGET_SSE2 && mode == TCmode)\n+\t  || (TARGET_80387 && mode == XCmode)\n+\t  || ((TARGET_80387 || TARGET_SSE2) && mode == DCmode)\n+\t  || ((TARGET_80387 || TARGET_SSE) && mode == SCmode))\n+\tunits = GET_MODE_SIZE (mode);\n+      break;\n+\n+    case MODE_VECTOR_INT:\n+    case MODE_VECTOR_FLOAT:\n+      if ((TARGET_AVX && VALID_AVX256_REG_MODE (mode))\n+\t  || (TARGET_SSE2 && VALID_SSE2_REG_MODE (mode))\n+\t  || (TARGET_SSE && VALID_SSE_REG_MODE (mode))\n+\t  || (TARGET_MMX && VALID_MMX_REG_MODE (mode)))\n+\tunits = GET_MODE_SIZE (mode);\n+    }\n+\n+  /* Return the cost of moving between two registers of mode MODE,\n+     assuming that the move will be in pieces of at most UNITS bytes.  */\n+  return COSTS_N_INSNS ((GET_MODE_SIZE (mode) + units - 1) / units);\n+}\n+\n /* Compute a (partial) cost for rtx X.  Return true if the complete\n    cost has been computed, and false if subexpressions should be\n    scanned.  In either case, *TOTAL contains the cost result.  */\n@@ -31875,6 +31921,15 @@ ix86_rtx_costs (rtx x, int code, int outer_code_i, int opno, int *total,\n \n   switch (code)\n     {\n+    case SET:\n+      if (register_operand (SET_DEST (x), VOIDmode)\n+\t  && reg_or_0_operand (SET_SRC (x), VOIDmode))\n+\t{\n+\t  *total = ix86_set_reg_reg_cost (GET_MODE (SET_DEST (x)));\n+\t  return true;\n+\t}\n+      return false;\n+\n     case CONST_INT:\n     case CONST:\n     case LABEL_REF:"}]}