{"sha": "11f68165164dc7cc245fd991c98eb87967852520", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFmNjgxNjUxNjRkYzdjYzI0NWZkOTkxYzk4ZWI4Nzk2Nzg1MjUyMA==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "2001-07-26T18:06:45Z"}, "committer": {"name": "John Wehle", "email": "wehle@gcc.gnu.org", "date": "2001-07-26T18:06:45Z"}, "message": "basic-block.h (PROP_ALLOW_CFG_CHANGES): Define.\n\n\t* basic-block.h (PROP_ALLOW_CFG_CHANGES): Define.\n\t(PROP_FINAL): Include PROP_ALLOW_CFG_CHANGES.\n\t(propagate_block): Update prototype.\n\t* flow.c (update_life_info): Simplify the CFG and\n\trecalculate the global regs which are alive when\n\tremoving dead code during a global update.\n\t(propagate_block): Return non-zero if an INSN is\n\tdeleted.\n\nFrom-SVN: r44403", "tree": {"sha": "32515011bfca44af926d53cd7f3eacfbe9d182ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32515011bfca44af926d53cd7f3eacfbe9d182ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11f68165164dc7cc245fd991c98eb87967852520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f68165164dc7cc245fd991c98eb87967852520", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11f68165164dc7cc245fd991c98eb87967852520", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11f68165164dc7cc245fd991c98eb87967852520/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62c62a4fde6dc009d30adcea0bc36aaa655c9f6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c62a4fde6dc009d30adcea0bc36aaa655c9f6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62c62a4fde6dc009d30adcea0bc36aaa655c9f6b"}], "stats": {"total": 68, "additions": 61, "deletions": 7}, "files": [{"sha": "fdb554afb8704440a096a637c5a43911c7a13712", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f68165164dc7cc245fd991c98eb87967852520/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f68165164dc7cc245fd991c98eb87967852520/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11f68165164dc7cc245fd991c98eb87967852520", "patch": "@@ -1,3 +1,14 @@\n+Thu Jul 26 14:04:03 EDT 2001  John Wehle  (john@feith.com)\n+\n+\t* basic-block.h (PROP_ALLOW_CFG_CHANGES): Define.\n+\t(PROP_FINAL): Include PROP_ALLOW_CFG_CHANGES.\n+\t(propagate_block): Update prototype.\n+\t* flow.c (update_life_info): Simplify the CFG and\n+\trecalculate the global regs which are alive when\n+\tremoving dead code during a global update.\n+\t(propagate_block): Return non-zero if an INSN is\n+\tdeleted.\n+\n 2001-07-26  Rainer Orth <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* Makefile.in (LIBICONV): Define."}, {"sha": "654e63a94789de88ca17291e36a2e6648ccb2493", "filename": "gcc/basic-block.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f68165164dc7cc245fd991c98eb87967852520/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f68165164dc7cc245fd991c98eb87967852520/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=11f68165164dc7cc245fd991c98eb87967852520", "patch": "@@ -533,8 +533,10 @@ enum update_life_extent\n #define PROP_REG_INFO\t\t4\t/* Update regs_ever_live et al.  */\n #define PROP_KILL_DEAD_CODE\t8\t/* Remove dead code.  */\n #define PROP_SCAN_DEAD_CODE\t16\t/* Scan for dead code.  */\n-#define PROP_AUTOINC\t\t32\t/* Create autoinc mem references.  */\n-#define PROP_FINAL\t\t63\t/* All of the above.  */\n+#define PROP_ALLOW_CFG_CHANGES\t32\t/* Allow the CFG to be changed\n+\t\t\t\t\t   by dead code removal.  */\n+#define PROP_AUTOINC\t\t64\t/* Create autoinc mem references.  */\n+#define PROP_FINAL\t\t127\t/* All of the above.  */\n \n #define CLEANUP_EXPENSIVE\t1\t/* Do relativly expensive optimizations\n \t\t\t\t\t   except for edge forwarding */\n@@ -557,7 +559,7 @@ extern void life_analysis\tPARAMS ((rtx, FILE *, int));\n extern void update_life_info\tPARAMS ((sbitmap, enum update_life_extent,\n \t\t\t\t\t int));\n extern int count_or_remove_death_notes\tPARAMS ((sbitmap, int));\n-extern void propagate_block\tPARAMS ((basic_block, regset, regset, regset,\n+extern int propagate_block\tPARAMS ((basic_block, regset, regset, regset,\n \t\t\t\t\t int));\n \n struct propagate_block_info;"}, {"sha": "cd33decb7cfc433379e878482e94dc1ce077cbe6", "filename": "gcc/flow.c", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11f68165164dc7cc245fd991c98eb87967852520/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11f68165164dc7cc245fd991c98eb87967852520/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=11f68165164dc7cc245fd991c98eb87967852520", "patch": "@@ -4209,11 +4209,45 @@ update_life_info (blocks, extent, prop_flags)\n \n   tmp = INITIALIZE_REG_SET (tmp_head);\n \n+  /* Changes to the CFG are only allowed when\n+     doing a global update for the entire CFG.  */\n+  if ((prop_flags & PROP_ALLOW_CFG_CHANGES)\n+      && (extent == UPDATE_LIFE_LOCAL || blocks))\n+    abort ();\n+\n   /* For a global update, we go through the relaxation process again.  */\n   if (extent != UPDATE_LIFE_LOCAL)\n     {\n-      calculate_global_regs_live (blocks, blocks,\n-\t\t\t\t  prop_flags & PROP_SCAN_DEAD_CODE);\n+      for ( ; ; )\n+\t{\n+\t  int changed = 0;\n+\n+\t  calculate_global_regs_live (blocks, blocks,\n+\t\t\t\tprop_flags & (PROP_SCAN_DEAD_CODE\n+\t\t\t\t\t      | PROP_ALLOW_CFG_CHANGES));\n+\n+\t  if ((prop_flags & (PROP_KILL_DEAD_CODE | PROP_ALLOW_CFG_CHANGES))\n+\t      != (PROP_KILL_DEAD_CODE | PROP_ALLOW_CFG_CHANGES))\n+\t    break;\n+\n+\t  /* Removing dead code may allow the CFG to be simplified which\n+\t     in turn may allow for further dead code detection / removal.  */\n+\t  for (i = n_basic_blocks - 1; i >= 0; --i)\n+\t    {\n+\t      basic_block bb = BASIC_BLOCK (i);\n+\n+\t      COPY_REG_SET (tmp, bb->global_live_at_end);\n+\t      changed |= propagate_block (bb, tmp, NULL, NULL,\n+\t\t\t\tprop_flags & (PROP_SCAN_DEAD_CODE\n+\t\t\t\t\t      | PROP_KILL_DEAD_CODE));\n+\t    }\n+\n+\t  if (! changed || ! try_optimize_cfg (CLEANUP_EXPENSIVE))\n+\t    break;\n+\n+\t  delete_unreachable_blocks ();\n+\t  mark_critical_edges ();\n+\t}\n \n       /* If asked, remove notes from the blocks we'll update.  */\n       if (extent == UPDATE_LIFE_GLOBAL_RM_NOTES)\n@@ -5365,9 +5399,11 @@ free_propagate_block_info (pbi)\n    and cleared in COND_LOCAL_SET.\n    It is valid for LOCAL_SET and COND_LOCAL_SET to be the same set.  In this\n    case, the resulting set will be equal to the union of the two sets that\n-   would otherwise be computed.  */\n+   would otherwise be computed.\n \n-void\n+   Return non-zero if an INSN is deleted (i.e. by dead code removal).  */\n+\n+int\n propagate_block (bb, live, local_set, cond_local_set, flags)\n      basic_block bb;\n      regset live;\n@@ -5377,6 +5413,7 @@ propagate_block (bb, live, local_set, cond_local_set, flags)\n {\n   struct propagate_block_info *pbi;\n   rtx insn, prev;\n+  int changed;\n \n   pbi = init_propagate_block_info (bb, live, local_set, cond_local_set, flags);\n \n@@ -5392,6 +5429,7 @@ propagate_block (bb, live, local_set, cond_local_set, flags)\n \n   /* Scan the block an insn at a time from end to beginning.  */\n \n+  changed = 0;\n   for (insn = bb->end;; insn = prev)\n     {\n       /* If this is a call to `setjmp' et al, warn if any\n@@ -5402,12 +5440,15 @@ propagate_block (bb, live, local_set, cond_local_set, flags)\n \tIOR_REG_SET (regs_live_at_setjmp, pbi->reg_live);\n \n       prev = propagate_one_insn (pbi, insn);\n+      changed |= NEXT_INSN (prev) != insn;\n \n       if (insn == bb->head)\n \tbreak;\n     }\n \n   free_propagate_block_info (pbi);\n+\n+  return changed;\n }\n \f\n /* Return 1 if X (the body of an insn, or part of it) is just dead stores"}]}