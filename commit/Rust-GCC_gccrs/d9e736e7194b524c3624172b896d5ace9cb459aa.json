{"sha": "d9e736e7194b524c3624172b896d5ace9cb459aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDllNzM2ZTcxOTRiNTI0YzM2MjQxNzJiODk2ZDVhY2U5Y2I0NTlhYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-09-19T12:49:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-09-19T12:49:45Z"}, "message": "re PR tree-optimization/91812 (GCC ignores volatile modifier)\n\n2019-09-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91812\n\t* tree-ssa-phiprop.c (propagate_with_phi): Do not replace\n\tvolatile loads.\n\n\t* gcc.dg/torture/pr91812.c: New testcase.\n\nFrom-SVN: r275960", "tree": {"sha": "7ddc9268cae4641b035d9e5e82d478a5ba2d7b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ddc9268cae4641b035d9e5e82d478a5ba2d7b2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9e736e7194b524c3624172b896d5ace9cb459aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9e736e7194b524c3624172b896d5ace9cb459aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9e736e7194b524c3624172b896d5ace9cb459aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9e736e7194b524c3624172b896d5ace9cb459aa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f24f4c15884bf1ee65a10e2f959842eec4198876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24f4c15884bf1ee65a10e2f959842eec4198876", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f24f4c15884bf1ee65a10e2f959842eec4198876"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "1810fe92af02b5c2fa7fed0f3dc4018435517a65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9e736e7194b524c3624172b896d5ace9cb459aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9e736e7194b524c3624172b896d5ace9cb459aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9e736e7194b524c3624172b896d5ace9cb459aa", "patch": "@@ -1,3 +1,9 @@\n+2019-09-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91812\n+\t* tree-ssa-phiprop.c (propagate_with_phi): Do not replace\n+\tvolatile loads.\n+\n 2019-09-19  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* defaults.h (TARGET_UNIT): New macro."}, {"sha": "c5854bd363dc77a629b362d98a8f78f19bcd6ea8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9e736e7194b524c3624172b896d5ace9cb459aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9e736e7194b524c3624172b896d5ace9cb459aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d9e736e7194b524c3624172b896d5ace9cb459aa", "patch": "@@ -1,3 +1,8 @@\n+2019-09-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91812\n+\t* gcc.dg/torture/pr91812.c: New testcase.\n+\n 2019-09-19  Tom Tromey  <tromey@adacore.com>\n \n \t* gnat.dg/bias1.adb: New testcase."}, {"sha": "ebc67a01e33f9c0aa3ff83026e38d1b2a9ab0c16", "filename": "gcc/testsuite/gcc.dg/torture/pr91812.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9e736e7194b524c3624172b896d5ace9cb459aa/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr91812.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9e736e7194b524c3624172b896d5ace9cb459aa/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr91812.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr91812.c?ref=d9e736e7194b524c3624172b896d5ace9cb459aa", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } { \"\" } } */\n+/* { dg-options \"-fdump-tree-optimized-blocks\" } */\n+\n+unsigned register1;\n+unsigned register2;\n+\n+void busy_wait_for_register (int x)\n+{\n+  volatile unsigned* ptr;\n+  switch(x) {\n+    case 0x1111:\n+    ptr = &register1;\n+    break;\n+\n+    case 0x2222:\n+    ptr = &register2;\n+    break;\n+\n+    default:\n+    return;\n+  }\n+  while (*ptr) {}\n+}\n+\n+/* { dg-final { scan-tree-dump \"loop depth 1\" \"optimized\" } } */"}, {"sha": "e90ae6a89cb5196267f3836f85a46311aa2c6e06", "filename": "gcc/tree-ssa-phiprop.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9e736e7194b524c3624172b896d5ace9cb459aa/gcc%2Ftree-ssa-phiprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9e736e7194b524c3624172b896d5ace9cb459aa/gcc%2Ftree-ssa-phiprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiprop.c?ref=d9e736e7194b524c3624172b896d5ace9cb459aa", "patch": "@@ -338,8 +338,15 @@ propagate_with_phi (basic_block bb, gphi *phi, struct phiprop_d *phivn,\n \t    && (!type\n \t\t|| types_compatible_p\n \t\t     (TREE_TYPE (gimple_assign_lhs (use_stmt)), type))\n-\t    /* We cannot replace a load that may throw or is volatile.  */\n-\t    && !stmt_can_throw_internal (cfun, use_stmt)))\n+\t    /* We cannot replace a load that may throw or is volatile.\n+\t       For volatiles the transform can change the number of\n+\t       executions if the load is inside a loop but the address\n+\t       computations outside (PR91812).  We could relax this\n+\t       if we guard against that appropriately.  For loads that can\n+\t       throw we could relax things if the moved loads all are\n+\t       known to not throw.  */\n+\t    && !stmt_can_throw_internal (cfun, use_stmt)\n+\t    && !gimple_has_volatile_ops (use_stmt)))\n \tcontinue;\n \n       /* Check if we can move the loads.  The def stmt of the virtual use"}]}