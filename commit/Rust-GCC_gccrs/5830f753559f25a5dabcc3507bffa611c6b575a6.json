{"sha": "5830f753559f25a5dabcc3507bffa611c6b575a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgzMGY3NTM1NTlmMjVhNWRhYmNjMzUwN2JmZmE2MTFjNmI1NzVhNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-03-30T20:09:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-03-30T21:04:09Z"}, "message": "c++: Fix comparison of fn() and ns::fn() [PR90711]\n\nThe resolution of CWG issue 1321 clarified that when deciding whether two\nexpressions involving template parameters are equivalent, two dependent\nfunction calls where the function is named with an unqualified-id are\nconsidered to be equivalent if the name is the same, even if unqualified\nlookup finds different sets of functions.  We were wrongly treating\nqualified-ids the same way, so that EXISTS and test::EXISTS were considered\nto be equivalent even though they are looking up the name in different\nscopes.  This also causes a mangling bug, but I don't think it's safe to fix\nthat for GCC 10; this patch just fixes the comparison.\n\ngcc/cp/ChangeLog\n2020-03-30  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/90711\n\t* tree.c (cp_tree_equal) [CALL_EXPR]: Compare KOENIG_LOOKUP_P.\n\t(called_fns_equal): Check DECL_CONTEXT.", "tree": {"sha": "5ca1ab73bcd732cdb0aea5bb7213c150f67f2ee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ca1ab73bcd732cdb0aea5bb7213c150f67f2ee7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5830f753559f25a5dabcc3507bffa611c6b575a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5830f753559f25a5dabcc3507bffa611c6b575a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5830f753559f25a5dabcc3507bffa611c6b575a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5830f753559f25a5dabcc3507bffa611c6b575a6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cb1986cb596336e688c079b821205ec212a46a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb1986cb596336e688c079b821205ec212a46a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb1986cb596336e688c079b821205ec212a46a3"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "cc79ece16896dd04f9c2707030c680646f0483ce", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5830f753559f25a5dabcc3507bffa611c6b575a6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5830f753559f25a5dabcc3507bffa611c6b575a6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5830f753559f25a5dabcc3507bffa611c6b575a6", "patch": "@@ -1,3 +1,9 @@\n+2020-03-30  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/90711\n+\t* tree.c (cp_tree_equal) [CALL_EXPR]: Compare KOENIG_LOOKUP_P.\n+\t(called_fns_equal): Check DECL_CONTEXT.\n+\n 2020-03-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/94385"}, {"sha": "a2172dea0d8a9af0b67d2b6ad17ef4f244953871", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5830f753559f25a5dabcc3507bffa611c6b575a6/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5830f753559f25a5dabcc3507bffa611c6b575a6/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=5830f753559f25a5dabcc3507bffa611c6b575a6", "patch": "@@ -2464,6 +2464,8 @@ is_overloaded_fn (tree x)\n tree\n dependent_name (tree x)\n {\n+  /* FIXME a dependent name must be unqualified, but this function doesn't\n+     distinguish between qualified and unqualified identifiers.  */\n   if (identifier_p (x))\n     return x;\n   if (TREE_CODE (x) == TEMPLATE_ID_EXPR)\n@@ -3581,6 +3583,15 @@ called_fns_equal (tree t1, tree t2)\n       if (name1 != name2)\n \treturn false;\n \n+      /* FIXME dependent_name currently returns an unqualified name regardless\n+\t of whether the function was named with a qualified- or unqualified-id.\n+\t Until that's fixed, check that we aren't looking at overload sets from\n+\t different scopes.  */\n+      if (is_overloaded_fn (t1) && is_overloaded_fn (t2)\n+\t  && (DECL_CONTEXT (get_first_fn (t1))\n+\t      != DECL_CONTEXT (get_first_fn (t2))))\n+\treturn false;\n+\n       if (TREE_CODE (t1) == TEMPLATE_ID_EXPR)\n \ttargs1 = TREE_OPERAND (t1, 1);\n       if (TREE_CODE (t2) == TEMPLATE_ID_EXPR)\n@@ -3677,7 +3688,8 @@ cp_tree_equal (tree t1, tree t2)\n       {\n \ttree arg1, arg2;\n \tcall_expr_arg_iterator iter1, iter2;\n-\tif (!called_fns_equal (CALL_EXPR_FN (t1), CALL_EXPR_FN (t2)))\n+\tif (KOENIG_LOOKUP_P (t1) != KOENIG_LOOKUP_P (t2)\n+\t    || !called_fns_equal (CALL_EXPR_FN (t1), CALL_EXPR_FN (t2)))\n \t  return false;\n \tfor (arg1 = first_call_expr_arg (t1, &iter1),\n \t       arg2 = first_call_expr_arg (t2, &iter2);"}, {"sha": "52d2e72be353a62cb52cfcd210b44453db8e5bea", "filename": "gcc/testsuite/g++.dg/template/dependent-name14.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5830f753559f25a5dabcc3507bffa611c6b575a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5830f753559f25a5dabcc3507bffa611c6b575a6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-name14.C?ref=5830f753559f25a5dabcc3507bffa611c6b575a6", "patch": "@@ -0,0 +1,38 @@\n+// PR c++/90711\n+// { dg-do compile { target c++11 } }\n+\n+namespace test {\n+    void EXISTS(int);\n+}\n+\n+template<typename... ARGS>\n+struct stub_void {\n+    typedef void type;\n+};\n+template<typename... ARGS>\n+using stub_void_t = typename stub_void<ARGS...>::type;\n+\n+#if !defined(SUPPRESS)\n+template<typename O, typename = void>\n+struct has_to_string {\n+    static constexpr bool value = false;\n+};\n+\n+template<typename O>\n+struct has_to_string<O, stub_void_t<decltype(EXISTS(O{}))>> {\n+    static constexpr bool value = true;\n+};\n+#endif\n+\n+template<typename O, typename = void>\n+struct has_std_to_string {\n+    static constexpr bool value = false;\n+};\n+\n+template<typename O>\n+struct has_std_to_string<O, stub_void_t<decltype(test::EXISTS(O{}))>> {\n+    static constexpr bool value = true;\n+};\n+\n+static_assert (has_std_to_string<int>::value, \"\");\n+"}]}