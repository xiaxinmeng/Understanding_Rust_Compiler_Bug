{"sha": "8748ad99e9aba52146166e3e6df7802226189dec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc0OGFkOTllOWFiYTUyMTQ2MTY2ZTNlNmRmNzgwMjIyNjE4OWRlYw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@cs.rice.edu", "date": "2010-05-17T16:03:46Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-05-17T16:03:46Z"}, "message": "trans-array.c (gfc_trans_array_constructor_value): Use build_constructor instead of build_constructor_from_list.\n\n\t* trans-array.c (gfc_trans_array_constructor_value): Use\n\tbuild_constructor instead of build_constructor_from_list.\n\t(gfc_build_constant_array_constructor): Likewise.\n\t* trans-decl.c (create_main_function): Likewise.\n\t* trans-stmt.c (gfc_trans_character_select): Likewise.\n\nFrom-SVN: r159490", "tree": {"sha": "9c8c1c0b6f4a3f0d03993988523ce0723cbeefc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c8c1c0b6f4a3f0d03993988523ce0723cbeefc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8748ad99e9aba52146166e3e6df7802226189dec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8748ad99e9aba52146166e3e6df7802226189dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8748ad99e9aba52146166e3e6df7802226189dec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8748ad99e9aba52146166e3e6df7802226189dec/comments", "author": null, "committer": null, "parents": [{"sha": "2882bfcc5b1d377551de2d44c5d5edb11c137bb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2882bfcc5b1d377551de2d44c5d5edb11c137bb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2882bfcc5b1d377551de2d44c5d5edb11c137bb2"}], "stats": {"total": 107, "additions": 61, "deletions": 46}, "files": [{"sha": "a1fec13438f2f20e61b3b986766e23822166cdd8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8748ad99e9aba52146166e3e6df7802226189dec/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8748ad99e9aba52146166e3e6df7802226189dec/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8748ad99e9aba52146166e3e6df7802226189dec", "patch": "@@ -1,3 +1,11 @@\n+2010-05-17  Nathan Froyd  <froydnj@cs.rice.edu>\n+\n+\t* trans-array.c (gfc_trans_array_constructor_value): Use\n+\tbuild_constructor instead of build_constructor_from_list.\n+\t(gfc_build_constant_array_constructor): Likewise.\n+\t* trans-decl.c (create_main_function): Likewise.\n+\t* trans-stmt.c (gfc_trans_character_select): Likewise.\n+\n 2010-05-17  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/44044"}, {"sha": "a94c8d2b3c54512c3591aac2f045a5d55d10619e", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8748ad99e9aba52146166e3e6df7802226189dec/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8748ad99e9aba52146166e3e6df7802226189dec/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=8748ad99e9aba52146166e3e6df7802226189dec", "patch": "@@ -1308,14 +1308,13 @@ gfc_trans_array_constructor_value (stmtblock_t * pblock, tree type,\n \t  else\n \t    {\n \t      /* Collect multiple scalar constants into a constructor.  */\n-\t      tree list;\n+\t      VEC(constructor_elt,gc) *v = NULL;\n \t      tree init;\n \t      tree bound;\n \t      tree tmptype;\n \t      HOST_WIDE_INT idx = 0;\n \n \t      p = c;\n-\t      list = NULL_TREE;\n               /* Count the number of consecutive scalar constants.  */\n \t      while (p && !(p->iterator\n \t\t\t    || p->expr->expr_type != EXPR_CONSTANT))\n@@ -1332,8 +1331,10 @@ gfc_trans_array_constructor_value (stmtblock_t * pblock, tree type,\n \t\t\t\t(gfc_get_pchar_type (p->expr->ts.kind),\n \t\t\t\t se.expr);\n \n-\t\t  list = tree_cons (build_int_cst (gfc_array_index_type,\n-\t\t\t\t\t\t   idx++), se.expr, list);\n+                  CONSTRUCTOR_APPEND_ELT (v,\n+                                          build_int_cst (gfc_array_index_type,\n+                                                         idx++),\n+                                          se.expr);\n \t\t  c = p;\n \t\t  p = gfc_constructor_next (p);\n \t\t}\n@@ -1344,7 +1345,7 @@ gfc_trans_array_constructor_value (stmtblock_t * pblock, tree type,\n \t\t\t\t\t  gfc_index_zero_node, bound);\n \t      tmptype = build_array_type (type, tmptype);\n \n-\t      init = build_constructor_from_list (tmptype, nreverse (list));\n+\t      init = build_constructor (tmptype, v);\n \t      TREE_CONSTANT (init) = 1;\n \t      TREE_STATIC (init) = 1;\n \t      /* Create a static variable to hold the data.  */\n@@ -1671,17 +1672,17 @@ gfc_constant_array_constructor_p (gfc_constructor_base base)\n tree\n gfc_build_constant_array_constructor (gfc_expr * expr, tree type)\n {\n-  tree tmptype, list, init, tmp;\n+  tree tmptype, init, tmp;\n   HOST_WIDE_INT nelem;\n   gfc_constructor *c;\n   gfc_array_spec as;\n   gfc_se se;\n   int i;\n+  VEC(constructor_elt,gc) *v = NULL;\n \n   /* First traverse the constructor list, converting the constants\n      to tree to build an initializer.  */\n   nelem = 0;\n-  list = NULL_TREE;\n   c = gfc_constructor_first (expr->value.constructor);\n   while (c)\n     {\n@@ -1692,8 +1693,8 @@ gfc_build_constant_array_constructor (gfc_expr * expr, tree type)\n       else if (POINTER_TYPE_P (type))\n \tse.expr = gfc_build_addr_expr (gfc_get_pchar_type (c->expr->ts.kind),\n \t\t\t\t       se.expr);\n-      list = tree_cons (build_int_cst (gfc_array_index_type, nelem),\n-\t\t\tse.expr, list);\n+      CONSTRUCTOR_APPEND_ELT (v, build_int_cst (gfc_array_index_type, nelem),\n+                              se.expr);\n       c = gfc_constructor_next (c);\n       nelem++;\n     }\n@@ -1723,7 +1724,7 @@ gfc_build_constant_array_constructor (gfc_expr * expr, tree type)\n \n   tmptype = gfc_get_nodesc_array_type (type, &as, PACKED_STATIC, true);\n \n-  init = build_constructor_from_list (tmptype, nreverse (list));\n+  init = build_constructor (tmptype, v);\n \n   TREE_CONSTANT (init) = 1;\n   TREE_STATIC (init) = 1;"}, {"sha": "7facc8dd1922f929ddde31ab004ab82473d85351", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8748ad99e9aba52146166e3e6df7802226189dec/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8748ad99e9aba52146166e3e6df7802226189dec/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=8748ad99e9aba52146166e3e6df7802226189dec", "patch": "@@ -4196,6 +4196,7 @@ create_main_function (tree fndecl)\n      language standard parameters.  */\n   {\n     tree array_type, array, var;\n+    VEC(constructor_elt,gc) *v = NULL;\n \n     /* Passing a new option to the library requires four modifications:\n      + add it to the tree_cons list below\n@@ -4204,28 +4205,34 @@ create_main_function (tree fndecl)\n             gfor_fndecl_set_options\n           + modify the library (runtime/compile_options.c)!  */\n \n-    array = tree_cons (NULL_TREE, build_int_cst (integer_type_node,\n-\t\t       gfc_option.warn_std), NULL_TREE);\n-    array = tree_cons (NULL_TREE, build_int_cst (integer_type_node,\n-\t\t       gfc_option.allow_std), array);\n-    array = tree_cons (NULL_TREE, build_int_cst (integer_type_node, pedantic),\n-\t\t       array);\n-    array = tree_cons (NULL_TREE, build_int_cst (integer_type_node,\n-\t\t       gfc_option.flag_dump_core), array);\n-    array = tree_cons (NULL_TREE, build_int_cst (integer_type_node,\n-\t\t       gfc_option.flag_backtrace), array);\n-    array = tree_cons (NULL_TREE, build_int_cst (integer_type_node,\n-\t\t       gfc_option.flag_sign_zero), array);\n-\n-    array = tree_cons (NULL_TREE, build_int_cst (integer_type_node,\n-\t\t       (gfc_option.rtcheck & GFC_RTCHECK_BOUNDS)), array);\n-\n-    array = tree_cons (NULL_TREE, build_int_cst (integer_type_node,\n-\t\t       gfc_option.flag_range_check), array);\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+                            build_int_cst (integer_type_node,\n+                                           gfc_option.warn_std));\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+                            build_int_cst (integer_type_node,\n+                                           gfc_option.allow_std));\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+                            build_int_cst (integer_type_node, pedantic));\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+                            build_int_cst (integer_type_node,\n+                                           gfc_option.flag_dump_core));\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+                            build_int_cst (integer_type_node,\n+                                           gfc_option.flag_backtrace));\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+                            build_int_cst (integer_type_node,\n+                                           gfc_option.flag_sign_zero));\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+                            build_int_cst (integer_type_node,\n+                                           (gfc_option.rtcheck\n+                                            & GFC_RTCHECK_BOUNDS)));\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+                            build_int_cst (integer_type_node,\n+                                           gfc_option.flag_range_check));\n \n     array_type = build_array_type (integer_type_node,\n \t\t       build_index_type (build_int_cst (NULL_TREE, 7)));\n-    array = build_constructor_from_list (array_type, nreverse (array));\n+    array = build_constructor (array_type, v);\n     TREE_CONSTANT (array) = 1;\n     TREE_STATIC (array) = 1;\n "}, {"sha": "f618f021bbb3de9bbecb3351a00f6841702addc1", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8748ad99e9aba52146166e3e6df7802226189dec/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8748ad99e9aba52146166e3e6df7802226189dec/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=8748ad99e9aba52146166e3e6df7802226189dec", "patch": "@@ -1593,12 +1593,13 @@ gfc_trans_logical_select (gfc_code * code)\n static tree\n gfc_trans_character_select (gfc_code *code)\n {\n-  tree init, node, end_label, tmp, type, case_num, label, fndecl;\n+  tree init, end_label, tmp, type, case_num, label, fndecl;\n   stmtblock_t block, body;\n   gfc_case *cp, *d;\n   gfc_code *c;\n   gfc_se se;\n   int n, k;\n+  VEC(constructor_elt,gc) *inits = NULL;\n \n   /* The jump table types are stored in static variables to avoid\n      constructing them from scratch every single time.  */\n@@ -1678,52 +1679,50 @@ gfc_trans_character_select (gfc_code *code)\n     }\n \n   /* Generate the structure describing the branches */\n-  init = NULL_TREE;\n-\n   for(d = cp; d; d = d->right)\n     {\n-      node = NULL_TREE;\n+      VEC(constructor_elt,gc) *node = NULL;\n \n       gfc_init_se (&se, NULL);\n \n       if (d->low == NULL)\n         {\n-          node = tree_cons (ss_string1[k], null_pointer_node, node);\n-          node = tree_cons (ss_string1_len[k], integer_zero_node, node);\n+          CONSTRUCTOR_APPEND_ELT (node, ss_string1[k], null_pointer_node);\n+          CONSTRUCTOR_APPEND_ELT (node, ss_string1_len[k], integer_zero_node);\n         }\n       else\n         {\n           gfc_conv_expr_reference (&se, d->low);\n \n-          node = tree_cons (ss_string1[k], se.expr, node);\n-          node = tree_cons (ss_string1_len[k], se.string_length, node);\n+          CONSTRUCTOR_APPEND_ELT (node, ss_string1[k], se.expr);\n+          CONSTRUCTOR_APPEND_ELT (node, ss_string1_len[k], se.string_length);\n         }\n \n       if (d->high == NULL)\n         {\n-          node = tree_cons (ss_string2[k], null_pointer_node, node);\n-          node = tree_cons (ss_string2_len[k], integer_zero_node, node);\n+          CONSTRUCTOR_APPEND_ELT (node, ss_string2[k], null_pointer_node);\n+          CONSTRUCTOR_APPEND_ELT (node, ss_string2_len[k], integer_zero_node);\n         }\n       else\n         {\n           gfc_init_se (&se, NULL);\n           gfc_conv_expr_reference (&se, d->high);\n \n-          node = tree_cons (ss_string2[k], se.expr, node);\n-          node = tree_cons (ss_string2_len[k], se.string_length, node);\n+          CONSTRUCTOR_APPEND_ELT (node, ss_string2[k], se.expr);\n+          CONSTRUCTOR_APPEND_ELT (node, ss_string2_len[k], se.string_length);\n         }\n \n-      node = tree_cons (ss_target[k], build_int_cst (integer_type_node, d->n),\n-\t\t\tnode);\n+      CONSTRUCTOR_APPEND_ELT (node, ss_target[k],\n+                              build_int_cst (integer_type_node, d->n));\n \n-      tmp = build_constructor_from_list (select_struct[k], nreverse (node));\n-      init = tree_cons (NULL_TREE, tmp, init);\n+      tmp = build_constructor (select_struct[k], node);\n+      CONSTRUCTOR_APPEND_ELT (inits, NULL_TREE, tmp);\n     }\n \n   type = build_array_type (select_struct[k],\n \t\t\t   build_index_type (build_int_cst (NULL_TREE, n-1)));\n \n-  init = build_constructor_from_list (type, nreverse(init));\n+  init = build_constructor (type, inits);\n   TREE_CONSTANT (init) = 1;\n   TREE_STATIC (init) = 1;\n   /* Create a static variable to hold the jump table.  */"}]}