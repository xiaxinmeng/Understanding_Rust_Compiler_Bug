{"sha": "1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMxNmYxZjdmY2IyMWUxZjVjODA3ZjJhM2E4NGYxNzc2NzRlMGU1Yg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-02-06T07:53:50Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-02-06T07:53:50Z"}, "message": "cppalloc.c: Update copyright.\n\n\t* cppalloc.c: Update copyright.\n\t* cpplib.c: Merge all the static function prototypes into one\n\tblock.\n\t* cpplib.h: Remove #if 0 block.\n\nFrom-SVN: r31818", "tree": {"sha": "6aaa6f9538630d2ea8364246fa5bcbbdd6bf3d3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6aaa6f9538630d2ea8364246fa5bcbbdd6bf3d3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b/comments", "author": null, "committer": null, "parents": [{"sha": "40ea76de513e2bd7388dfaf144c5c9f68f53afad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40ea76de513e2bd7388dfaf144c5c9f68f53afad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40ea76de513e2bd7388dfaf144c5c9f68f53afad"}], "stats": {"total": 97, "additions": 47, "deletions": 50}, "files": [{"sha": "a4e9b70085ae856a4355602bc7c9dd57e6a1a369", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b", "patch": "@@ -1,5 +1,10 @@\n 2000-02-05  Zack Weinberg  <zack@wolery.cumb.org>\n \n+\t* cppalloc.c: Update copyright.\n+\t* cpplib.c: Merge all the static function prototypes into one\n+\tblock.\n+\t* cpplib.h: Remove #if 0 block.\n+\n \t* cpperror.c: Remove #ifdef EMACS block.\n \t* cppmain.c: Likewise.\n \t* cpphash.c: Remove #if 0 blocks."}, {"sha": "ed39277d025bdbd66072decc16237d4bc76d164e", "filename": "gcc/cppalloc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b/gcc%2Fcppalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b/gcc%2Fcppalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppalloc.c?ref=1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b", "patch": "@@ -1,5 +1,6 @@\n /* Part of CPP library.  (memory allocation - xmalloc etc)\n-   Copyright (C) 1986, 87, 89, 92-95, 98, 99, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1986, 87, 89, 92-95, 98, 99, 2000\n+   Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987"}, {"sha": "409eb08a9baa20424e9f4a28ea80368456d937bf", "filename": "gcc/cpplib.c", "status": "modified", "additions": 39, "deletions": 35, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b", "patch": "@@ -35,22 +35,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n    (Note that it is false while we're expanding macro *arguments*.) */\n #define CPP_IS_MACRO_BUFFER(PBUF) ((PBUF)->data != NULL)\n \n-/* Forward declarations.  */\n-\n-static const char *my_strerror\t\tPARAMS ((int));\n-static void validate_else\t\tPARAMS ((cpp_reader *, const char *));\n-static HOST_WIDEST_INT eval_if_expression\tPARAMS ((cpp_reader *));\n-\n-static void conditional_skip\t\tPARAMS ((cpp_reader *, int,\n-\t\t\t\t\t\tenum node_type, U_CHAR *));\n-static void skip_if_group\t\tPARAMS ((cpp_reader *));\n-\n-static void parse_name\t\t\tPARAMS ((cpp_reader *, int));\n-static void parse_string\t\tPARAMS ((cpp_reader *, int));\n-static int parse_assertion\t\tPARAMS ((cpp_reader *));\n-static const char *if_directive_name\tPARAMS ((cpp_reader *,\n-\t\t\t\t\t\t struct if_stack *));\n-\n /* External declarations.  */\n \n extern HOST_WIDEST_INT cpp_parse_expr PARAMS ((cpp_reader *));\n@@ -87,26 +71,45 @@ static int do_sccs PARAMS ((cpp_reader *, const struct directive *));\n static int do_assert PARAMS ((cpp_reader *, const struct directive *));\n static int do_unassert PARAMS ((cpp_reader *, const struct directive *));\n static int do_warning PARAMS ((cpp_reader *, const struct directive *));\n-static enum cpp_token null_underflow PARAMS ((cpp_reader *));\n-static int null_cleanup PARAMS ((cpp_buffer *, cpp_reader *));\n-static int skip_comment PARAMS ((cpp_reader *, int));\n-static int copy_comment PARAMS ((cpp_reader *, int));\n-static void copy_rest_of_line PARAMS ((cpp_reader *));\n-static int handle_directive PARAMS ((cpp_reader *));\n-static void pass_thru_directive PARAMS ((const U_CHAR *, size_t, cpp_reader *,\n-\t\t\t\t\t const struct directive *));\n+\n+/* Forward declarations.  */\n+\n+static const char *my_strerror\t\tPARAMS ((int));\n+static void validate_else\t\tPARAMS ((cpp_reader *, const char *));\n+static HOST_WIDEST_INT eval_if_expression PARAMS ((cpp_reader *));\n+static void conditional_skip\t\tPARAMS ((cpp_reader *, int,\n+\t\t\t\t\t\tenum node_type, U_CHAR *));\n+static void skip_if_group\t\tPARAMS ((cpp_reader *));\n+static void parse_name\t\t\tPARAMS ((cpp_reader *, int));\n+static void parse_string\t\tPARAMS ((cpp_reader *, int));\n+static int parse_assertion\t\tPARAMS ((cpp_reader *));\n+static const char *if_directive_name\tPARAMS ((cpp_reader *,\n+\t\t\t\t\t\t struct if_stack *));\n+static enum cpp_token null_underflow\tPARAMS ((cpp_reader *));\n+static int null_cleanup\t\t\tPARAMS ((cpp_buffer *, cpp_reader *));\n+static int skip_comment\t\t\tPARAMS ((cpp_reader *, int));\n+static int copy_comment\t\t\tPARAMS ((cpp_reader *, int));\n+static void copy_rest_of_line\t\tPARAMS ((cpp_reader *));\n+static int handle_directive\t\tPARAMS ((cpp_reader *));\n+static void pass_thru_directive\t\tPARAMS ((const U_CHAR *, size_t,\n+\t\t\t\t\t\t cpp_reader *,\n+\t\t\t\t\t\t const struct directive *));\n static enum cpp_token get_directive_token PARAMS ((cpp_reader *));\n-static int read_line_number PARAMS ((cpp_reader *, int *));\n-static void cpp_print_file_and_line PARAMS ((cpp_reader *));\n-static void v_cpp_error PARAMS ((cpp_reader *, const char *, va_list));\n-static void v_cpp_warning PARAMS ((cpp_reader *, const char *, va_list));\n-static void v_cpp_error_with_line PARAMS ((cpp_reader *, int, int,\n-\t\t\t\t\t   const char *, va_list));\n-static void v_cpp_warning_with_line PARAMS ((cpp_reader *, int, int, const char *, va_list));\n-static U_CHAR *detect_if_not_defined PARAMS ((cpp_reader *));\n-static int consider_directive_while_skipping PARAMS ((cpp_reader *, IF_STACK_FRAME *));\n-static void skip_block_comment PARAMS ((cpp_reader *));\n-static void skip_line_comment PARAMS ((cpp_reader *));\n+static int read_line_number\t\tPARAMS ((cpp_reader *, int *));\n+static void cpp_print_file_and_line\tPARAMS ((cpp_reader *));\n+static void v_cpp_error\t\t\tPARAMS ((cpp_reader *, const char *,\n+\t\t\t\t\t\t va_list));\n+static void v_cpp_warning\t\tPARAMS ((cpp_reader *, const char *,\n+\t\t\t\t\t\t va_list));\n+static void v_cpp_error_with_line\tPARAMS ((cpp_reader *, int, int,\n+\t\t\t\t\t\t const char *, va_list));\n+static void v_cpp_warning_with_line\tPARAMS ((cpp_reader *, int, int,\n+\t\t\t\t\t\t const char *, va_list));\n+static U_CHAR *detect_if_not_defined\tPARAMS ((cpp_reader *));\n+static int consider_directive_while_skipping PARAMS ((cpp_reader *,\n+\t\t\t\t\t\t      IF_STACK_FRAME *));\n+static void skip_block_comment\t\tPARAMS ((cpp_reader *));\n+static void skip_line_comment\t\tPARAMS ((cpp_reader *));\n \n /* Here is the actual list of #-directives.\n    This table is ordered by frequency of occurrence; the numbers\n@@ -2329,6 +2332,7 @@ cpp_get_token (pfile)\n \t      CPP_PUTC (pfile, c);\n \t      return CPP_HSPACE;\n \t    }\n+\n \tcase '#':\n \t  if (!pfile->only_seen_white)\n \t    goto randomchar;"}, {"sha": "0ddc3198d21c6b33584b0ddd2959a8da53bc6462", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=1316f1f7fcb21e1f5c807f2a3a84f177674e0e5b", "patch": "@@ -53,20 +53,7 @@ enum cpp_token {\n   CPP_COMMA,    /* \",\" */\n   CPP_SEMICOLON,/* \";\" */\n   CPP_3DOTS,    /* \"...\" */\n-#if 0\n-  CPP_ANDAND, /* \"&&\" */\n-  CPP_OROR,   /* \"||\" */\n-  CPP_LSH,    /* \"<<\" */\n-  CPP_RSH,    /* \">>\" */\n-  CPP_EQL,    /* \"==\" */\n-  CPP_NEQ,    /* \"!=\" */\n-  CPP_LEQ,    /* \"<=\" */\n-  CPP_GEQ,    /* \">=\" */\n-  CPP_PLPL,   /* \"++\" */\n-  CPP_MINMIN, /* \"--\" */\n-#endif\n-  /* POP_TOKEN is returned when we've popped a cpp_buffer. */\n-  CPP_POP\n+  CPP_POP\t/* We're about to pop the buffer stack.  */\n };\n \n typedef enum cpp_token (*parse_underflow_t) PARAMS((cpp_reader *));"}]}