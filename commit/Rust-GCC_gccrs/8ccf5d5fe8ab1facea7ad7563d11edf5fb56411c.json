{"sha": "8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNjZjVkNWZlOGFiMWZhY2VhN2FkNzU2M2QxMWVkZjVmYjU2NDExYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-01-02T14:59:30Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-01-02T14:59:30Z"}, "message": "h8300.c (stack_pointer_operand): New.\n\n\t* config/h8300/h8300.c (stack_pointer_operand): New.\n\t(const_int_gt_2_operand): Likewise.\n\t(const_int_ge_8_operand): Likewise.\n\t* config/h8300/h8300.md (a splitter): Likewise.\n\t(a peephole2): Likewise.\n\t* config/h8300/h8300-protos.h: Add prototypes for the new\n\tfunctions above.\n\nFrom-SVN: r60784", "tree": {"sha": "8a1b93b9f6e96d2bd8d4393dc4f17d6fe3738736", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a1b93b9f6e96d2bd8d4393dc4f17d6fe3738736"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c/comments", "author": null, "committer": null, "parents": [{"sha": "43c6a96ab2d2ad55a19deb77ad8e33517ee8d568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43c6a96ab2d2ad55a19deb77ad8e33517ee8d568", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43c6a96ab2d2ad55a19deb77ad8e33517ee8d568"}], "stats": {"total": 80, "additions": 78, "deletions": 2}, "files": [{"sha": "99cb08285080e4a0432bef09651d8c44c379d95f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c", "patch": "@@ -1,3 +1,13 @@\n+2003-01-02  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.c (stack_pointer_operand): New.\n+\t(const_int_gt_2_operand): Likewise.\n+\t(const_int_ge_8_operand): Likewise.\n+\t* config/h8300/h8300.md (a splitter): Likewise.\n+\t(a peephole2): Likewise.\n+\t* config/h8300/h8300-protos.h: Add prototypes for the new\n+\tfunctions above.\n+\n 2003-01-02  Steven Bosscher <s.bosscher@student.tudelft.nl>\n \n \t* objc/Make-lang.in, objc/config-lang.in, objc/lang-specs.h,"}, {"sha": "0aa2315aea1ec8d09e642bd2a223d84e9ae02fe6", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    Hitachi H8/300 version generating coff\n-   Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2002, 2003 Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com),\n    Jim Wilson (wilson@cygnus.com), and Doug Evans (dje@cygnus.com).\n \n@@ -62,8 +62,11 @@ extern int small_call_insn_operand PARAMS ((rtx, enum machine_mode));\n extern int jump_address_operand PARAMS ((rtx, enum machine_mode));\n extern int bit_operand PARAMS ((rtx, enum machine_mode));\n extern int bit_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int stack_pointer_operand PARAMS ((rtx, enum machine_mode));\n extern int const_int_le_2_operand PARAMS ((rtx, enum machine_mode));\n extern int const_int_le_6_operand PARAMS ((rtx, enum machine_mode));\n+extern int const_int_gt_2_operand PARAMS ((rtx, enum machine_mode));\n+extern int const_int_ge_8_operand PARAMS ((rtx, enum machine_mode));\n extern int const_int_qi_operand PARAMS ((rtx, enum machine_mode));\n extern int const_int_hi_operand PARAMS ((rtx, enum machine_mode));\n extern int incdec_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "7da1780bbf92f257dd370ca3f59d8a785f180e85", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c", "patch": "@@ -1827,6 +1827,16 @@ notice_update_cc (body, insn)\n     }\n }\n \n+/* Return nonzero if X is a stack pointer.  */\n+\n+int\n+stack_pointer_operand (x, mode)\n+     rtx x;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  return x == stack_pointer_rtx;\n+}\n+\n /* Return nonzero if X is a constant whose absolute value is no\n    greater than 2.  */\n \n@@ -1851,6 +1861,30 @@ const_int_le_6_operand (x, mode)\n \t  && abs (INTVAL (x)) <= 6);\n }\n \n+/* Return nonzero if X is a constant whose absolute value is greater\n+   than 2.  */\n+\n+int\n+const_int_gt_2_operand (x, mode)\n+     rtx x;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  return (GET_CODE (x) == CONST_INT\n+\t  && abs (INTVAL (x)) > 2);\n+}\n+\n+/* Return nonzero if X is a constant whose absolute value is no\n+   smaller than 8.  */\n+\n+int\n+const_int_ge_8_operand (x, mode)\n+     rtx x;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  return (GET_CODE (x) == CONST_INT\n+\t  && abs (INTVAL (x)) >= 8);\n+}\n+\n /* Return nonzero if X is a constant expressible in QImode.  */\n \n int"}, {"sha": "70b98581293fa0f694e82162d2b0dedb01372eed", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=8ccf5d5fe8ab1facea7ad7563d11edf5fb56411c", "patch": "@@ -1,6 +1,6 @@\n ;; GCC machine description for Hitachi H8/300\n ;; Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-;; 2001, 2002 Free Software Foundation, Inc.\n+;; 2001, 2002, 2003 Free Software Foundation, Inc.\n \n ;;   Contributed by Steve Chamberlain (sac@cygnus.com),\n ;;   Jim Wilson (wilson@cygnus.com), and Doug Evans (dje@cygnus.com).\n@@ -783,6 +783,35 @@\n   [(set_attr \"length\" \"2,2,2,4,2\")\n    (set_attr \"cc\" \"none_0hit,none_0hit,clobber,clobber,set_zn\")])\n \n+;; This splitter is very important to make the stack adjustment\n+;; interrupt-safe.  The combination of add.b and addx is unsafe!\n+;;\n+;; We apply this split after the peephole2 pass so that we won't end\n+;; up creating too many adds/subs when a scratch register is\n+;; available, which is actually a common case because stack unrolling\n+;; tends to happen immediately after a function call.\n+\n+(define_split\n+  [(set (match_operand:HI 0 \"stack_pointer_operand\" \"\")\n+\t(plus:HI (match_dup 0)\n+\t\t (match_operand 1 \"const_int_gt_2_operand\" \"\")))]\n+  \"TARGET_H8300 && flow2_completed\"\n+  [(const_int 0)]\n+  \"split_adds_subs (HImode, operands, 0); DONE;\")\n+\n+(define_peephole2\n+  [(match_scratch:HI 2 \"r\")\n+   (set (match_operand:HI 0 \"stack_pointer_operand\" \"\")\n+\t(plus:HI (match_dup 0)\n+\t\t (match_operand:HI 1 \"const_int_ge_8_operand\" \"\")))]\n+  \"TARGET_H8300\"\n+  [(set (match_dup 2)\n+\t(match_dup 1))\n+   (set (match_dup 0)\n+\t(plus:HI (match_dup 0)\n+\t\t (match_dup 2)))]\n+  \"\")\n+\n (define_insn \"*addhi3_h8300hs\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,r,r\")\n \t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0,0,0\")"}]}