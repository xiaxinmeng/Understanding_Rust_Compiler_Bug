{"sha": "1a8f8908d21fe40629592c20a8c5c99a44dc8be0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE4Zjg5MDhkMjFmZTQwNjI5NTkyYzIwYThjNWM5OWE0NGRjOGJlMA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2015-06-23T23:41:51Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@gcc.gnu.org", "date": "2015-06-23T23:41:51Z"}, "message": "[PATCH] Fix PR c++/30044\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_template_parameter_list): Update\n\tcurrent_template_parms right after processing a paramater.\n\t* pt.c (template_parms_to_args): Remove obsolete hack for\n\tgiving template template arguments the proper level.\n\t(check_default_tmpl_args): Account for tested template\n\tparameter_lists.\n\t(splite_late_return_type): Remove obsolete hack for giving\n\ttemplate template arguments the proper level.\n\ngcc/testsuite/ChangeLog\n\n\t* g++.dg/cpp0x/auto45.C: New test.\n\t* g++.dg/template/pr30044.C: New test.\n\t* g++.dg/template/crash83.C: Accept any error string.\n\t* g++.dg/cpp0x/variadic18.C: Adjust to not shadow template\n\tparameters.\n\t* g++.dg/cpp0x/variadic18.C: Likewise\n\t* g++.dg/template/canon-type-13.C: Likewise.\n\t* g++.old-deja/g++.pt/ttp42.C: Likewise.\n\nFrom-SVN: r224859", "tree": {"sha": "1e64ec2e526bcd62927cd85e0ffea04f1d1f00de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e64ec2e526bcd62927cd85e0ffea04f1d1f00de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a8f8908d21fe40629592c20a8c5c99a44dc8be0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8f8908d21fe40629592c20a8c5c99a44dc8be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a8f8908d21fe40629592c20a8c5c99a44dc8be0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/comments", "author": null, "committer": null, "parents": [{"sha": "8289f048f0d5e6b7fa39857f34aacad816eede43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8289f048f0d5e6b7fa39857f34aacad816eede43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8289f048f0d5e6b7fa39857f34aacad816eede43"}], "stats": {"total": 113, "additions": 83, "deletions": 30}, "files": [{"sha": "3c1ef28c00d2c68003a986aaf84c89329cf83e54", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1a8f8908d21fe40629592c20a8c5c99a44dc8be0", "patch": "@@ -1,3 +1,14 @@\n+2015-06-23  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\t* parser.c (cp_parser_template_parameter_list): Update\n+\tcurrent_template_parms right after processing a paramater.\n+\t* pt.c (template_parms_to_args): Remove obsolete hack for\n+\tgiving template template arguments the proper level.\n+\t(check_default_tmpl_args): Account for tested template\n+\tparameter_lists.\n+\t(splite_late_return_type): Remove obsolete hack for giving\n+\ttemplate template arguments the proper level.\n+\n 2015-06-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/65879"}, {"sha": "98f0fb96918bd6c742c3e69b86af2b124d516235", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1a8f8908d21fe40629592c20a8c5c99a44dc8be0", "patch": "@@ -13273,6 +13273,11 @@ cp_parser_template_parameter_list (cp_parser* parser)\n \n   begin_template_parm_list ();\n \n+  current_template_parms\n+    = tree_cons (size_int (processing_template_decl),\n+\t\t make_tree_vec (0),\n+\t\t current_template_parms);\n+\n   /* The loop below parses the template parms.  We first need to know\n      the total number of template parms to be able to compute proper\n      canonical types of each dependent type. So after the loop, when\n@@ -13285,6 +13290,7 @@ cp_parser_template_parameter_list (cp_parser* parser)\n       bool is_non_type;\n       bool is_parameter_pack;\n       location_t parm_loc;\n+      tree parameter_vec;\n \n       /* Parse the template-parameter.  */\n       parm_loc = cp_lexer_peek_token (parser->lexer)->location;\n@@ -13309,8 +13315,27 @@ cp_parser_template_parameter_list (cp_parser* parser)\n \tbreak;\n       /* Otherwise, consume the `,' token.  */\n       cp_lexer_consume_token (parser->lexer);\n+\n+      /* Add the parameter we just processed to current_template_parms.  */\n+\n+      parameter_vec = make_tree_vec\n+\t(TREE_VEC_LENGTH (TREE_VALUE (current_template_parms)) + 1);\n+\n+      for (int i = 0; i < TREE_VEC_LENGTH (parameter_vec) - 1; i++)\n+\tTREE_VEC_ELT (parameter_vec, i)\n+\t  = TREE_VEC_ELT (TREE_VALUE (current_template_parms), i);\n+\n+      TREE_VEC_ELT (parameter_vec, TREE_VEC_LENGTH (parameter_vec) - 1)\n+\t= tree_last (parameter_list);\n+\n+      current_template_parms\n+\t= tree_cons (TREE_PURPOSE (current_template_parms),\n+\t\t     parameter_vec,\n+\t\t     TREE_CHAIN (current_template_parms));\n     }\n \n+  current_template_parms = TREE_CHAIN (current_template_parms);\n+\n   return end_template_parm_list (parameter_list);\n }\n "}, {"sha": "953a4da2121fa285a1cc6ea95ced72943a3ef77c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1a8f8908d21fe40629592c20a8c5c99a44dc8be0", "patch": "@@ -3989,21 +3989,6 @@ template_parms_to_args (tree parms)\n \targs = a;\n     }\n \n-    if (length > 1 && TREE_VEC_ELT (args, 0) == NULL_TREE)\n-      /* This can happen for template parms of a template template\n-\t parameter, e.g:\n-\n-\t template<template<class T, class U> class TT> struct S;\n-\n-\t Consider the level of the parms of TT; T and U both have\n-\t level 2; TT has no template parm of level 1. So in this case\n-\t the first element of full_template_args is NULL_TREE. If we\n-\t leave it like this TMPL_ARGS_DEPTH on args returns 1 instead\n-\t of 2. This will make tsubst wrongly consider that T and U\n-\t have level 1. Instead, let's create a dummy vector as the\n-\t first element of full_template_args so that TMPL_ARGS_DEPTH\n-\t returns the correct depth for args.  */\n-      TREE_VEC_ELT (args, 0) = make_tree_vec (1);\n   return args;\n }\n \n@@ -4646,6 +4631,9 @@ check_default_tmpl_args (tree decl, tree parms, bool is_primary,\n   else\n     msg = G_(\"default argument for template parameter for class enclosing %qD\");\n \n+  /* By default check everything.  */\n+  last_level_to_check = 1;\n+\n   if (current_class_type && TYPE_BEING_DEFINED (current_class_type))\n     /* If we're inside a class definition, there's no need to\n        examine the parameters to the class itself.  On the one\n@@ -4655,10 +4643,12 @@ check_default_tmpl_args (tree decl, tree parms, bool is_primary,\n \t struct S { template <class U> void f(U); };\n        Here the default argument for `S' has no bearing on the\n        declaration of `f'.  */\n-    last_level_to_check = template_class_depth (current_class_type) + 1;\n-  else\n-    /* Check everything.  */\n-    last_level_to_check = 0;\n+    last_level_to_check += template_class_depth (current_class_type);\n+\n+  if (processing_template_parmlist)\n+    /* Likewise for parameters outside of the nested parameter list we have\n+       just finished defining.  */\n+    last_level_to_check += processing_template_parmlist;\n \n   for (parm_level = parms;\n        parm_level && TMPL_PARMS_DEPTH (parm_level) >= last_level_to_check;\n@@ -22392,11 +22382,6 @@ splice_late_return_type (tree type, tree late_return_type)\n     return type;\n   argvec = make_tree_vec (1);\n   TREE_VEC_ELT (argvec, 0) = late_return_type;\n-  if (processing_template_parmlist)\n-    /* For a late-specified return type in a template type-parameter, we\n-       need to add a dummy argument level for its parmlist.  */\n-    argvec = add_to_template_args\n-      (make_tree_vec (processing_template_parmlist), argvec);\n   if (current_template_parms)\n     argvec = add_to_template_args (current_template_args (), argvec);\n   return tsubst (type, argvec, tf_warning_or_error, NULL_TREE);"}, {"sha": "c1e59f55d3a7e832378f3a988890392420210253", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a8f8908d21fe40629592c20a8c5c99a44dc8be0", "patch": "@@ -1,3 +1,14 @@\n+2015-06-23  Patrick Palka  <ppalka@gcc.gnu.org>\n+\n+\t* g++.dg/cpp0x/auto45.C: New test.\n+\t* g++.dg/template/pr30044.C: New test.\n+\t* g++.dg/template/crash83.C: Accept any error string.\n+\t* g++.dg/cpp0x/variadic18.C: Adjust to not shadow template\n+\tparameters.\n+\t* g++.dg/cpp0x/variadic18.C: Likewise\n+\t* g++.dg/template/canon-type-13.C: Likewise.\n+\t* g++.old-deja/g++.pt/ttp42.C: Likewise.\n+\n 2015-06-23  Marek Polacek  <polacek@redhat.com>\n \n \t* c-c++-common/Wlogical-op-3.c: New test."}, {"sha": "09e9f4436cfb976826da1b03f36e04f981b5559d", "filename": "gcc/testsuite/g++.dg/cpp0x/auto45.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto45.C?ref=1a8f8908d21fe40629592c20a8c5c99a44dc8be0", "patch": "@@ -0,0 +1,5 @@\n+// Addendum to auto23.C, now with nested template parameter lists\n+// { dg-do compile { target c++11 } }\n+\n+template<template <auto f()->int> class> struct A { };\n+template<template <template <auto f()->int> class> class> struct B { };"}, {"sha": "57fdc865501f31232e7a5441f596094bf8841003", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic18.C?ref=1a8f8908d21fe40629592c20a8c5c99a44dc8be0", "patch": "@@ -1,7 +1,7 @@\n // { dg-do compile { target c++11 } }\n template<typename...> class tuple { };\n \n-template<typename T, template<typename T> class... Metafunctions>\n+template<typename T, template<typename U> class... Metafunctions>\n struct apply_all\n {\n   typedef tuple<typename Metafunctions<T>::type...> type;"}, {"sha": "3be9bb022dcf104e2d44aae0c2e0a65ad1da19a4", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic19.C?ref=1a8f8908d21fe40629592c20a8c5c99a44dc8be0", "patch": "@@ -4,7 +4,7 @@ struct tuple {\n   static const int value = 0;\n };\n \n-template<typename T, template<class T> class... Metafunctions>\n+template<typename T, template<class U> class... Metafunctions>\n struct tuple<Metafunctions<T>...> {\n   static const int value = 1;\n };"}, {"sha": "5a8d37d18f3d46386834fb705761a03c054c2d0a", "filename": "gcc/testsuite/g++.dg/template/canon-type-13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcanon-type-13.C?ref=1a8f8908d21fe40629592c20a8c5c99a44dc8be0", "patch": "@@ -11,7 +11,7 @@ struct S1\n {\n };\n \n-template<class T, template<class T>  class A, template<class T>  class B = A>\n+template<class T, template<class U>  class A, template<class U>  class B = A>\n struct C\n {\n   B<T> m;"}, {"sha": "7dcbed93d164698753ade9d83a1b92fcd1b1c1d1", "filename": "gcc/testsuite/g++.dg/template/crash83.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash83.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash83.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash83.C?ref=1a8f8908d21fe40629592c20a8c5c99a44dc8be0", "patch": "@@ -2,4 +2,4 @@\n \n template<int> struct A {};\n \n-template<typename = class A<0>: > struct B {}; // { dg-error \"explicit specialization|expected\" }\n+template<typename = class A<0>: > struct B {}; // { dg-error \"\" }"}, {"sha": "fe0a470873dae4dc7fde01ae8d31833f915e7136", "filename": "gcc/testsuite/g++.dg/template/pr30044.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr30044.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr30044.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr30044.C?ref=1a8f8908d21fe40629592c20a8c5c99a44dc8be0", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/30044\n+\n+template <typename T1, typename T2, template <T2> class Comp, class Result = Comp<1> >\n+struct sort { };\n+\n+\n+template <typename Type, template <Type, Type> class Comp, class Result = Comp<1, 2> >\n+struct sort2 { };\n+\n+template <typename Type, template <int, Type> class Comp, class Result = Comp<1, 2> >\n+struct sort3 { };\n+\n+template <template <typename T1, typename T2, template <T2> class Comp, class Result = Comp<1> > class Foo>\n+struct sort4 { };\n+\n+"}, {"sha": "9bd8cc38c44c9a298c7accce0ecd2eaf5fbbb307", "filename": "gcc/testsuite/g++.dg/torture/20070621-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20070621-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20070621-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20070621-1.C?ref=1a8f8908d21fe40629592c20a8c5c99a44dc8be0", "patch": "@@ -89,7 +89,7 @@ namespace __gnu_test {\n         SharedInfo->first=ptr;\n       }\n     };\n-    template <class T, template<class T> class ItType>   struct test_container   {\n+    template <class T, template<class U> class ItType>   struct test_container   {\n       typename ItType<T>::ContainerType bounds;\n       test_container(T* _first, T* _last):bounds(_first, _last)     {\n   }"}, {"sha": "a2ac239611001b0059475acb5b09d5ca9154018b", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp42.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a8f8908d21fe40629592c20a8c5c99a44dc8be0/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp42.C?ref=1a8f8908d21fe40629592c20a8c5c99a44dc8be0", "patch": "@@ -1,5 +1,5 @@\n // { dg-do run  }\n-template <class T, template <class T> class C>\n+template <class T, template <class U> class C>\n struct X\n {};\n "}]}