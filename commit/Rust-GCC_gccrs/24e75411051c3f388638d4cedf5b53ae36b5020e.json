{"sha": "24e75411051c3f388638d4cedf5b53ae36b5020e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRlNzU0MTEwNTFjM2YzODg2MzhkNGNlZGY1YjUzYWUzNmI1MDIwZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-06-19T22:35:25Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-06-19T22:35:25Z"}, "message": "dwarfout.c (getpwd): Add prototype.\n\nd\n\t* dwarfout.c (getpwd): Add prototype.\n\t(is_pseudo_reg, type_main_variant, is_tagged_type,\n\tis_redundant_typedef): New declaration.\n\t(output_decl): Add prototype for FUNC.\n\t(type_main_variant): Make it static.\n\t(is_tagged_type): Likewise.\n\t(is_redundant_typedef): Likewise.\n\nFrom-SVN: r20618", "tree": {"sha": "4e45be3fa78a5d0c7c7c2356e6166e009ecf635a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e45be3fa78a5d0c7c7c2356e6166e009ecf635a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24e75411051c3f388638d4cedf5b53ae36b5020e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24e75411051c3f388638d4cedf5b53ae36b5020e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24e75411051c3f388638d4cedf5b53ae36b5020e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24e75411051c3f388638d4cedf5b53ae36b5020e/comments", "author": null, "committer": null, "parents": [{"sha": "90bf9bc4b9df1478c97124cf1505cbe8c02815f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90bf9bc4b9df1478c97124cf1505cbe8c02815f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90bf9bc4b9df1478c97124cf1505cbe8c02815f0"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "80475c6aea1b12bc885c1d2822f1d8f2f9755b69", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24e75411051c3f388638d4cedf5b53ae36b5020e/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24e75411051c3f388638d4cedf5b53ae36b5020e/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=24e75411051c3f388638d4cedf5b53ae36b5020e", "patch": "@@ -50,7 +50,7 @@ extern time_t time PROTO ((time_t *)); /* FIXME: use NEED_DECLARATION_TIME */\n # define assert(e) do { if (! (e)) abort (); } while (0)\n #endif\n \n-extern char *getpwd ();\n+extern char *getpwd PROTO((void));\n \n /* IMPORTANT NOTE: Please see the file README.DWARF for important details\n    regarding the GNU implementation of Dwarf.  */\n@@ -433,6 +433,10 @@ static void generate_new_sfname_entry\tPROTO((void));\n static unsigned lookup_filename\t\tPROTO((char *));\n static void generate_srcinfo_entry\tPROTO((unsigned, unsigned));\n static void generate_macinfo_entry\tPROTO((char *, char *));\n+static int is_pseudo_reg\t\tPROTO((rtx));\n+static tree type_main_variant\t\tPROTO((tree));\n+static int is_tagged_type\t\tPROTO((tree));\n+static int is_redundant_typedef\t\tPROTO((tree));\n \f\n /* Definitions of defaults for assembler-dependent names of various\n    pseudo-ops and section names.\n@@ -860,7 +864,7 @@ static void generate_macinfo_entry\tPROTO((char *, char *));\n \f\n /************************ general utility functions **************************/\n \n-inline int\n+inline static int\n is_pseudo_reg (rtl)\n      register rtx rtl;\n {\n@@ -869,7 +873,7 @@ is_pseudo_reg (rtl)\n \t      && (REGNO (XEXP (rtl, 0)) >= FIRST_PSEUDO_REGISTER)));\n }\n \n-inline tree\n+inline static tree\n type_main_variant (type)\n      register tree type;\n {\n@@ -891,7 +895,7 @@ type_main_variant (type)\n \n /* Return non-zero if the given type node represents a tagged type.  */\n \n-inline int\n+inline static int\n is_tagged_type (type)\n      register tree type;\n {\n@@ -4656,7 +4660,7 @@ output_decls_for_scope (stmt, depth)\n \n /* Is this a typedef we can avoid emitting?  */\n \n-inline int\n+inline static int\n is_redundant_typedef (decl)\n      register tree decl;\n {\n@@ -4997,7 +5001,7 @@ output_decl (decl, containing_scope)\n \t function.  */\n \n       {\n-        register void (*func) ();\n+        register void (*func) PROTO((void *));\n \tregister tree origin = decl_ultimate_origin (decl);\n \n \tif (origin != NULL && TREE_CODE (origin) == PARM_DECL)"}]}