{"sha": "b54a271561e04b37b5584033ee64920600fc0e8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0YTI3MTU2MWUwNGIzN2I1NTg0MDMzZWU2NDkyMDYwMGZjMGU4ZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2004-01-16T23:54:22Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2004-01-16T23:54:22Z"}, "message": "natClassLoader.cc: Moved VMClassLoader methods...\n\n\t* java/lang/natClassLoader.cc: Moved VMClassLoader methods...\n\t* java/lang/natVMClassLoader.cc: ...here.  New file.\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (nat_source_files): Added natVMClassLoader.cc.\n\nFrom-SVN: r76003", "tree": {"sha": "4fa6a54c6fc16fc9ab0716cf489d234d9d55e8fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fa6a54c6fc16fc9ab0716cf489d234d9d55e8fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b54a271561e04b37b5584033ee64920600fc0e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54a271561e04b37b5584033ee64920600fc0e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b54a271561e04b37b5584033ee64920600fc0e8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b54a271561e04b37b5584033ee64920600fc0e8d/comments", "author": null, "committer": null, "parents": [{"sha": "280835807d5eb09402d41db524b879f627f39c8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280835807d5eb09402d41db524b879f627f39c8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/280835807d5eb09402d41db524b879f627f39c8a"}], "stats": {"total": 265, "additions": 151, "deletions": 114}, "files": [{"sha": "8228be530fbf03052365d944487dcf2004dc18f2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54a271561e04b37b5584033ee64920600fc0e8d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54a271561e04b37b5584033ee64920600fc0e8d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b54a271561e04b37b5584033ee64920600fc0e8d", "patch": "@@ -1,3 +1,10 @@\n+2004-01-16  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/natClassLoader.cc: Moved VMClassLoader methods...\n+\t* java/lang/natVMClassLoader.cc: ...here.  New file.\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (nat_source_files): Added natVMClassLoader.cc.\n+\n 2004-01-16  Fernando Nasser  <fnasser@redhat.com>\n \n \t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c (pre_event_handler):"}, {"sha": "8043a0aca0d7a5e603d0cab4bc1076b338bbd52f", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54a271561e04b37b5584033ee64920600fc0e8d/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54a271561e04b37b5584033ee64920600fc0e8d/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=b54a271561e04b37b5584033ee64920600fc0e8d", "patch": "@@ -2805,6 +2805,7 @@ java/lang/natString.cc \\\n java/lang/natStringBuffer.cc \\\n java/lang/natSystem.cc \\\n java/lang/natThread.cc \\\n+java/lang/natVMClassLoader.cc \\\n java/lang/natVMSecurityManager.cc \\\n java/lang/ref/natReference.cc \\\n java/lang/reflect/natArray.cc \\"}, {"sha": "3e02fefd116751e1a6bd5aa627f5821dad88d867", "filename": "libjava/Makefile.in", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54a271561e04b37b5584033ee64920600fc0e8d/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54a271561e04b37b5584033ee64920600fc0e8d/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=b54a271561e04b37b5584033ee64920600fc0e8d", "patch": "@@ -2504,6 +2504,7 @@ java/lang/natString.cc \\\n java/lang/natStringBuffer.cc \\\n java/lang/natSystem.cc \\\n java/lang/natThread.cc \\\n+java/lang/natVMClassLoader.cc \\\n java/lang/natVMSecurityManager.cc \\\n java/lang/ref/natReference.cc \\\n java/lang/reflect/natArray.cc \\\n@@ -2672,12 +2673,12 @@ java/lang/natClassLoader.lo java/lang/natConcreteProcess.lo \\\n java/lang/natDouble.lo java/lang/natFloat.lo java/lang/natMath.lo \\\n java/lang/natObject.lo java/lang/natRuntime.lo java/lang/natString.lo \\\n java/lang/natStringBuffer.lo java/lang/natSystem.lo \\\n-java/lang/natThread.lo java/lang/natVMSecurityManager.lo \\\n-java/lang/ref/natReference.lo java/lang/reflect/natArray.lo \\\n-java/lang/reflect/natConstructor.lo java/lang/reflect/natField.lo \\\n-java/lang/reflect/natMethod.lo java/lang/reflect/natProxy.lo \\\n-java/net/natNetworkInterface.lo java/net/natInetAddress.lo \\\n-java/nio/natDirectByteBufferImpl.lo \\\n+java/lang/natThread.lo java/lang/natVMClassLoader.lo \\\n+java/lang/natVMSecurityManager.lo java/lang/ref/natReference.lo \\\n+java/lang/reflect/natArray.lo java/lang/reflect/natConstructor.lo \\\n+java/lang/reflect/natField.lo java/lang/reflect/natMethod.lo \\\n+java/lang/reflect/natProxy.lo java/net/natNetworkInterface.lo \\\n+java/net/natInetAddress.lo java/nio/natDirectByteBufferImpl.lo \\\n java/nio/channels/natFileChannelImpl.lo java/text/natCollator.lo \\\n java/util/natResourceBundle.lo java/util/natTimeZone.lo \\\n java/util/zip/natDeflater.lo java/util/zip/natInflater.lo\n@@ -3709,7 +3710,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/lang/natMath.P .deps/java/lang/natObject.P \\\n .deps/java/lang/natRuntime.P .deps/java/lang/natString.P \\\n .deps/java/lang/natStringBuffer.P .deps/java/lang/natSystem.P \\\n-.deps/java/lang/natThread.P .deps/java/lang/natVMSecurityManager.P \\\n+.deps/java/lang/natThread.P .deps/java/lang/natVMClassLoader.P \\\n+.deps/java/lang/natVMSecurityManager.P \\\n .deps/java/lang/ref/PhantomReference.P .deps/java/lang/ref/Reference.P \\\n .deps/java/lang/ref/ReferenceQueue.P \\\n .deps/java/lang/ref/SoftReference.P .deps/java/lang/ref/WeakReference.P \\"}, {"sha": "f5f37faf58b791ab537994e087d012cca0781ce3", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 1, "deletions": 107, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54a271561e04b37b5584033ee64920600fc0e8d/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54a271561e04b37b5584033ee64920600fc0e8d/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=b54a271561e04b37b5584033ee64920600fc0e8d", "patch": "@@ -1,6 +1,6 @@\n // natClassLoader.cc - Implementation of java.lang.ClassLoader native methods.\n \n-/* Copyright (C) 1999, 2000, 2001, 2002, 2003  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -28,7 +28,6 @@ details.  */\n #include <java/lang/InternalError.h>\n #include <java/lang/IllegalAccessError.h>\n #include <java/lang/LinkageError.h>\n-#include <java/lang/ClassFormatError.h>\n #include <java/lang/NoClassDefFoundError.h>\n #include <java/lang/ClassNotFoundException.h>\n #include <java/lang/ClassCircularityError.h>\n@@ -41,111 +40,6 @@ details.  */\n #include <java/io/Serializable.h>\n #include <java/lang/Cloneable.h>\n \n-/////////// java.lang.ClassLoader native methods ////////////\n-\n-java::lang::Class *\n-java::lang::VMClassLoader::defineClass (java::lang::ClassLoader *loader,\n-\t\t\t\t\tjstring name,\n-\t\t\t\t\tjbyteArray data, \n-\t\t\t\t\tjint offset,\n-\t\t\t\t\tjint length,\n-\t\t\t\t\tjava::security::ProtectionDomain *pd)\n-{\n-#ifdef INTERPRETER\n-  jclass klass;\n-  klass = (jclass) JvAllocObject (&java::lang::Class::class$,\n-\t\t\t\t  sizeof (_Jv_InterpClass));\n-\n-  // Synchronize on the class, so that it is not attempted initialized\n-  // until we're done loading.\n-  JvSynchronize sync (klass);\n-\n-  // Record the defining loader.  For the system class loader, we\n-  // record NULL.\n-  if (loader != java::lang::ClassLoader::getSystemClassLoader())\n-    klass->loader = loader;\n-\n-  if (name != 0)\n-    {\n-      _Jv_Utf8Const *name2 = _Jv_makeUtf8Const (name);\n-\n-      if (! _Jv_VerifyClassName (name2))\n-\tthrow new java::lang::ClassFormatError\n-\t  (JvNewStringLatin1 (\"erroneous class name\"));\n-\n-      klass->name = name2;\n-    }\n-\n-  try\n-    {\n-      _Jv_DefineClass (klass, data, offset, length);\n-    }\n-  catch (java::lang::Throwable *ex)\n-    {\n-      klass->state = JV_STATE_ERROR;\n-      klass->notifyAll ();\n-\n-      _Jv_UnregisterClass (klass);\n-\n-      // If EX is not a ClassNotFoundException, that's ok, because we\n-      // account for the possibility in defineClass().\n-      throw ex;\n-    }\n-    \n-  klass->protectionDomain = pd;\n-\n-  // if everything proceeded sucessfully, we're loaded.\n-  JvAssert (klass->state == JV_STATE_LOADED);\n-\n-  return klass;\n-\n-#else // INTERPRETER\n-\n-  return 0;\n-#endif\n-}\n-\n-// Finish linking a class.  Only called from ClassLoader::resolveClass.\n-void\n-java::lang::VMClassLoader::linkClass0 (java::lang::Class *klass)\n-{\n-  _Jv_WaitForState (klass, JV_STATE_LINKED);\n-}\n-\n-void\n-java::lang::VMClassLoader::markClassErrorState0 (java::lang::Class *klass)\n-{\n-  klass->state = JV_STATE_ERROR;\n-  klass->notifyAll ();\n-}\n-\n-java::lang::ClassLoader *\n-java::lang::VMClassLoader::getSystemClassLoaderInternal()\n-{\n-  _Jv_InitClass (&gnu::gcj::runtime::VMClassLoader::class$);\n-  return gnu::gcj::runtime::VMClassLoader::instance;\n-}\n-\n-jclass\n-java::lang::VMClassLoader::getPrimitiveClass (jchar type)\n-{\n-  char sig[2];\n-  sig[0] = (char) type;\n-  sig[1] = '\\0';\n-  return _Jv_FindClassFromSignature (sig, NULL);\n-}\n-\n-jclass\n-java::lang::VMClassLoader::loadClass(jstring name, jboolean resolve)\n-{\n-  _Jv_Utf8Const *utf = _Jv_makeUtf8Const (name);\n-  // FIXME: we culd make _Jv_FindClassFromSignature a template.\n-  jclass klass = _Jv_FindClassInCache (utf, NULL);\n-  if (klass && resolve)\n-    _Jv_InitClass (klass);\n-  return klass;\n-}\n-\n void\n _Jv_WaitForState (jclass klass, int state)\n {"}, {"sha": "8de0a70669e323acc743f8fd56eb1a550870df26", "filename": "libjava/java/lang/natVMClassLoader.cc", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b54a271561e04b37b5584033ee64920600fc0e8d/libjava%2Fjava%2Flang%2FnatVMClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b54a271561e04b37b5584033ee64920600fc0e8d/libjava%2Fjava%2Flang%2FnatVMClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatVMClassLoader.cc?ref=b54a271561e04b37b5584033ee64920600fc0e8d", "patch": "@@ -0,0 +1,133 @@\n+// natVMClassLoader.cc - VMClassLoader native methods\n+\n+/* Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+/* Author: Kresten Krab Thorup <krab@gnu.org>  */\n+\n+#include <config.h>\n+\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#include <gcj/cni.h>\n+#include <jvm.h>\n+\n+#include <java-threads.h>\n+#include <java-interp.h>\n+\n+#include <java/lang/VMClassLoader.h>\n+#include <gnu/gcj/runtime/VMClassLoader.h>\n+#include <java/lang/ClassLoader.h>\n+#include <java/lang/Class.h>\n+#include <java/lang/Throwable.h>\n+#include <java/security/ProtectionDomain.h>\n+#include <java/lang/ClassFormatError.h>\n+\n+java::lang::Class *\n+java::lang::VMClassLoader::defineClass (java::lang::ClassLoader *loader,\n+\t\t\t\t\tjstring name,\n+\t\t\t\t\tjbyteArray data, \n+\t\t\t\t\tjint offset,\n+\t\t\t\t\tjint length,\n+\t\t\t\t\tjava::security::ProtectionDomain *pd)\n+{\n+#ifdef INTERPRETER\n+  jclass klass;\n+  klass = (jclass) JvAllocObject (&java::lang::Class::class$,\n+\t\t\t\t  sizeof (_Jv_InterpClass));\n+\n+  // Synchronize on the class, so that it is not attempted initialized\n+  // until we're done loading.\n+  JvSynchronize sync (klass);\n+\n+  // Record the defining loader.  For the system class loader, we\n+  // record NULL.\n+  if (loader != java::lang::ClassLoader::getSystemClassLoader())\n+    klass->loader = loader;\n+\n+  if (name != 0)\n+    {\n+      _Jv_Utf8Const *name2 = _Jv_makeUtf8Const (name);\n+\n+      if (! _Jv_VerifyClassName (name2))\n+\tthrow new java::lang::ClassFormatError\n+\t  (JvNewStringLatin1 (\"erroneous class name\"));\n+\n+      klass->name = name2;\n+    }\n+\n+  try\n+    {\n+      _Jv_DefineClass (klass, data, offset, length);\n+    }\n+  catch (java::lang::Throwable *ex)\n+    {\n+      klass->state = JV_STATE_ERROR;\n+      klass->notifyAll ();\n+\n+      _Jv_UnregisterClass (klass);\n+\n+      // If EX is not a ClassNotFoundException, that's ok, because we\n+      // account for the possibility in defineClass().\n+      throw ex;\n+    }\n+    \n+  klass->protectionDomain = pd;\n+\n+  // if everything proceeded sucessfully, we're loaded.\n+  JvAssert (klass->state == JV_STATE_LOADED);\n+\n+  return klass;\n+\n+#else // INTERPRETER\n+\n+  return 0;\n+#endif\n+}\n+\n+// Finish linking a class.  Only called from ClassLoader::resolveClass.\n+void\n+java::lang::VMClassLoader::linkClass0 (java::lang::Class *klass)\n+{\n+  _Jv_WaitForState (klass, JV_STATE_LINKED);\n+}\n+\n+void\n+java::lang::VMClassLoader::markClassErrorState0 (java::lang::Class *klass)\n+{\n+  klass->state = JV_STATE_ERROR;\n+  klass->notifyAll ();\n+}\n+\n+java::lang::ClassLoader *\n+java::lang::VMClassLoader::getSystemClassLoaderInternal()\n+{\n+  _Jv_InitClass (&gnu::gcj::runtime::VMClassLoader::class$);\n+  return gnu::gcj::runtime::VMClassLoader::instance;\n+}\n+\n+jclass\n+java::lang::VMClassLoader::getPrimitiveClass (jchar type)\n+{\n+  char sig[2];\n+  sig[0] = (char) type;\n+  sig[1] = '\\0';\n+  return _Jv_FindClassFromSignature (sig, NULL);\n+}\n+\n+jclass\n+java::lang::VMClassLoader::loadClass(jstring name, jboolean resolve)\n+{\n+  _Jv_Utf8Const *utf = _Jv_makeUtf8Const (name);\n+  // FIXME: we culd make _Jv_FindClassFromSignature a template.\n+  jclass klass = _Jv_FindClassInCache (utf, NULL);\n+  if (klass && resolve)\n+    _Jv_InitClass (klass);\n+  return klass;\n+}"}]}