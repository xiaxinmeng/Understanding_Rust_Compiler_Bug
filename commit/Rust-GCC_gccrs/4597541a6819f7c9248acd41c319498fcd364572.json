{"sha": "4597541a6819f7c9248acd41c319498fcd364572", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU5NzU0MWE2ODE5ZjdjOTI0OGFjZDQxYzMxOTQ5OGZjZDM2NDU3Mg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2011-02-22T18:30:44Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2011-02-22T18:30:44Z"}, "message": "Fixed check for flexible array members used in Objective-C instance variables\n\nFrom-SVN: r170412", "tree": {"sha": "83aa82cec2f8047a1dcf7cb26c77779a6ea8e44a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83aa82cec2f8047a1dcf7cb26c77779a6ea8e44a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4597541a6819f7c9248acd41c319498fcd364572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4597541a6819f7c9248acd41c319498fcd364572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4597541a6819f7c9248acd41c319498fcd364572", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4597541a6819f7c9248acd41c319498fcd364572/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68bf6491ad1c5209c55e348c3d705b5e8dca3b2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68bf6491ad1c5209c55e348c3d705b5e8dca3b2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68bf6491ad1c5209c55e348c3d705b5e8dca3b2f"}], "stats": {"total": 184, "additions": 156, "deletions": 28}, "files": [{"sha": "9c466aa8771e7aab45739a785d0659cd65ddfc15", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4597541a6819f7c9248acd41c319498fcd364572/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4597541a6819f7c9248acd41c319498fcd364572/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=4597541a6819f7c9248acd41c319498fcd364572", "patch": "@@ -1,13 +1,22 @@\n+2011-02-22  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/47832\n+\t* objc-act.c (flexible_array_type_p): New.\n+\t(add_instance_variable): Produce an error if an instance variable\n+\tuses flexible array members.\n+\t(encode_array): Do not emit an error if encoding a flexible array\n+\ttype while generating instance variables.\n+\n 2011-02-21  Mike Stump  <mikestump@comcast.net>\n \n \t* Make-lang.in (check_objc_parallelize): Refine for 4 processor machines.\n \n 2011-02-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n-       * objc-gnu-runtime-abi-01.c (TARGET_64BIT): Removed.  Removed\n-       usage of padding fields.  Do not include tm.h.\n-       * objc-act.c (objc_write_global_declaration): Set input_location\n-       to BUILTINS_LOCATION while generating runtime metadata.\n+\t* objc-gnu-runtime-abi-01.c (TARGET_64BIT): Removed.  Removed\n+\tusage of padding fields.  Do not include tm.h.\n+\t* objc-act.c (objc_write_global_declaration): Set input_location\n+\tto BUILTINS_LOCATION while generating runtime metadata.\n \n 2011-01-20  Nicola Pero  <nicola.pero@meta-innovation.com>\n "}, {"sha": "85ef8fb0526d55edcfc13c7bb71a06de6802c386", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 89, "deletions": 20, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4597541a6819f7c9248acd41c319498fcd364572/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4597541a6819f7c9248acd41c319498fcd364572/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=4597541a6819f7c9248acd41c319498fcd364572", "patch": "@@ -5925,6 +5925,58 @@ add_category (tree klass, tree category)\n     }\n }\n \n+#ifndef OBJCPLUS\n+/* A flexible array member is a C99 extension where you can use\n+   \"type[]\" at the end of a struct to mean a variable-length array.\n+\n+   In Objective-C, instance variables are fundamentally members of a\n+   struct, but the struct can always be extended by subclassing; hence\n+   we need to detect and forbid all instance variables declared using\n+   flexible array members.\n+\n+   No check for this is needed in Objective-C++, since C++ does not\n+   have flexible array members.  */\n+\n+/* Determine whether TYPE is a structure with a flexible array member,\n+   a union containing such a structure (possibly recursively) or an\n+   array of such structures or unions.  These are all invalid as\n+   instance variable.  */\n+static bool\n+flexible_array_type_p (tree type)\n+{\n+  tree x;\n+  switch (TREE_CODE (type))\n+    {\n+    case RECORD_TYPE:\n+      x = TYPE_FIELDS (type);\n+      if (x == NULL_TREE)\n+\treturn false;\n+      while (DECL_CHAIN (x) != NULL_TREE)\n+\tx = DECL_CHAIN (x);\n+      if (TREE_CODE (TREE_TYPE (x)) == ARRAY_TYPE\n+\t  && TYPE_SIZE (TREE_TYPE (x)) == NULL_TREE\n+\t  && TYPE_DOMAIN (TREE_TYPE (x)) != NULL_TREE\n+\t  && TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (x))) == NULL_TREE)\n+\treturn true;\n+      return false;\n+    case UNION_TYPE:\n+      for (x = TYPE_FIELDS (type); x != NULL_TREE; x = DECL_CHAIN (x))\n+\t{\n+\t  if (flexible_array_type_p (TREE_TYPE (x)))\n+\t    return true;\n+\t}\n+      return false;\n+    /* Note that we also check for arrays of something that uses a flexible array member.  */\n+    case ARRAY_TYPE:\n+      if (flexible_array_type_p (TREE_TYPE (type)))\n+\treturn true;\n+      return false;\n+    default:\n+    return false;\n+  }\n+}\n+#endif\n+\n /* Called after parsing each instance variable declaration. Necessary to\n    preserve typedefs and implement public/private...\n \n@@ -5958,6 +6010,27 @@ add_instance_variable (tree klass, objc_ivar_visibility_kind visibility,\n       return klass;\n     }\n \n+#ifndef OBJCPLUS\n+  /* Also, in C reject a struct with a flexible array member.  Ie,\n+\n+       struct A { int x; int[] y; };\n+\n+       @interface X\n+       {\n+         struct A instance_variable;\n+       }\n+       @end\n+\n+       is not valid because if the class is subclassed, we wouldn't be able\n+       to calculate the offset of the next instance variable.  */\n+  if (flexible_array_type_p (field_type))\n+    {\n+      error (\"instance variable %qs uses flexible array member\", ivar_name);\n+      /* Return class as is without adding this ivar.  */\n+      return klass;      \n+    }\n+#endif\n+\n #ifdef OBJCPLUS\n   /* Check if the ivar being added has a non-POD C++ type.   If so, we will\n      need to either (1) warn the user about it or (2) generate suitable\n@@ -9926,27 +9999,23 @@ encode_array (tree type, int curtype, int format)\n   if (an_int_cst == NULL)\n     {\n       /* We are trying to encode an incomplete array.  An incomplete\n-\t array is forbidden as part of an instance variable.  */\n-      if (generating_instance_variables)\n-\t{\n-\t  /* TODO: Detect this error earlier.  */\n-\t  error (\"instance variable has unknown size\");\n-\t  return;\n-\t}\n+\t array is forbidden as part of an instance variable; but it\n+\t may occur if the instance variable is a pointer to such an\n+\t array.  */\n \n-      /* So the only case in which an incomplete array could occur is\n-\t if we are encoding the arguments or return value of a method.\n-\t In that case, an incomplete array argument or return value\n-\t (eg, -(void)display: (char[])string) is treated like a\n-\t pointer because that is how the compiler does the function\n-\t call.  A special, more complicated case, is when the\n-\t incomplete array is the last member of a struct (eg, if we\n-\t are encoding \"struct { unsigned long int a;double b[];}\"),\n-\t which is again part of a method argument/return value.  In\n-\t that case, we really need to communicate to the runtime that\n-\t there is an incomplete array (not a pointer!) there.  So, we\n-\t detect that special case and encode it as a zero-length\n-\t array.\n+      /* So the only case in which an incomplete array could occur\n+\t (without being pointed to) is if we are encoding the\n+\t arguments or return value of a method.  In that case, an\n+\t incomplete array argument or return value (eg,\n+\t -(void)display: (char[])string) is treated like a pointer\n+\t because that is how the compiler does the function call.  A\n+\t special, more complicated case, is when the incomplete array\n+\t is the last member of a struct (eg, if we are encoding\n+\t \"struct { unsigned long int a;double b[];}\"), which is again\n+\t part of a method argument/return value.  In that case, we\n+\t really need to communicate to the runtime that there is an\n+\t incomplete array (not a pointer!) there.  So, we detect that\n+\t special case and encode it as a zero-length array.\n \n \t Try to detect that we are part of a struct.  We do this by\n \t searching for '=' in the type encoding for the current type."}, {"sha": "32604613064dcfba15b000a3105359d7651f8bcd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4597541a6819f7c9248acd41c319498fcd364572/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4597541a6819f7c9248acd41c319498fcd364572/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4597541a6819f7c9248acd41c319498fcd364572", "patch": "@@ -1,3 +1,10 @@\n+2011-02-22  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\tPR objc/47832\n+\t* objc.dg/type-size-3.m: Updated error message.\n+\t* objc.dg/type-size-4.m: New test.\n+\t* objc.dg/type-size-5.m: New test.\n+\n 2011-02-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* lib/gnat.exp: Fix comments."}, {"sha": "bc66b0be67a001cd7ffa3e2764efac53c09dd3df", "filename": "gcc/testsuite/objc.dg/type-size-3.m", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4597541a6819f7c9248acd41c319498fcd364572/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4597541a6819f7c9248acd41c319498fcd364572/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-3.m?ref=4597541a6819f7c9248acd41c319498fcd364572", "patch": "@@ -1,4 +1,4 @@\n-/* Reject ivars with an unknown size.  */\n+/* Reject ivars that use flexible array members.  */\n /* Contributed by Nicola Pero  <nicola.pero@meta-innovation.com> */\n /* { dg-do compile } */\n \n@@ -10,11 +10,9 @@\n \n @interface Test\n {\n-  test_type c;\n+  test_type c; /* { dg-error \"instance variable .c. uses flexible array member\" } */\n }\n @end\n \n @implementation Test\n @end\n-\n-/* { dg-error \"instance variable has unknown size\" \"\" { target *-*-* } 0 } */"}, {"sha": "7e26da34a43de9c8bb67d40cd4322f438c250e2c", "filename": "gcc/testsuite/objc.dg/type-size-4.m", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4597541a6819f7c9248acd41c319498fcd364572/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4597541a6819f7c9248acd41c319498fcd364572/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-4.m?ref=4597541a6819f7c9248acd41c319498fcd364572", "patch": "@@ -0,0 +1,23 @@\n+/* Allow ivars that are pointers to structs with an unknown size.  */\n+/* Contributed by Nicola Pero  <nicola.pero@meta-innovation.com> */\n+/* PR objc/47832 */\n+/* { dg-do compile } */\n+\n+typedef struct\n+{\n+  unsigned long int a;\n+  double b[];\n+} test_type;\n+\n+@interface Test\n+{\n+  /* These are all fine.  */\n+  double *a;\n+  struct { int x; double y[]; } *b;\n+  test_type *c;\n+  union union_type { int x; test_type y; } *d;\n+}\n+@end\n+\n+@implementation Test\n+@end"}, {"sha": "d89af32b452e41b1eacd95a4088878f7bfd9218c", "filename": "gcc/testsuite/objc.dg/type-size-5.m", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4597541a6819f7c9248acd41c319498fcd364572/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4597541a6819f7c9248acd41c319498fcd364572/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftype-size-5.m?ref=4597541a6819f7c9248acd41c319498fcd364572", "patch": "@@ -0,0 +1,22 @@\n+/* Reject ivars that use flexible array members.  */\n+/* Contributed by Nicola Pero  <nicola.pero@meta-innovation.com> */\n+/* { dg-do compile } */\n+\n+typedef struct\n+{\n+  unsigned long int a;\n+  double b[];\n+} test_type;\n+\n+@interface Test\n+{\n+  double a[];                                 /* { dg-error \"instance variable .a. has unknown size\" } */\n+  struct { int x; double y[]; } b;            /* { dg-error \"instance variable .b. uses flexible array member\" } */\n+  test_type c;                                /* { dg-error \"instance variable .c. uses flexible array member\" } */\n+  test_type d[4];                             /* { dg-error \"instance variable .d. uses flexible array member\" } */\n+  union union_type { int x; test_type y; } e; /* { dg-error \"instance variable .e. uses flexible array member\" } */\n+}\n+@end\n+\n+@implementation Test\n+@end"}]}