{"sha": "ff35dbc02092fbcd3d814fcd9fe8e871c3f741fd", "node_id": "C_kwDOANBUbNoAKGZmMzVkYmMwMjA5MmZiY2QzZDgxNGZjZDlmZThlODcxYzNmNzQxZmQ", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-06-21T21:20:18Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-06-26T20:06:12Z"}, "message": "Fortran: fix simplification of INDEX(str1,str2) [PR105691]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/105691\n\t* simplify.cc (gfc_simplify_index): Replace old simplification\n\tcode by the equivalent of the runtime library implementation.  Use\n\tHOST_WIDE_INT instead of int for string index, length variables.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/105691\n\t* gfortran.dg/index_6.f90: New test.", "tree": {"sha": "8f37d23b6a4c57cf227d568dd989b0a5981ecab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f37d23b6a4c57cf227d568dd989b0a5981ecab7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff35dbc02092fbcd3d814fcd9fe8e871c3f741fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff35dbc02092fbcd3d814fcd9fe8e871c3f741fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff35dbc02092fbcd3d814fcd9fe8e871c3f741fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff35dbc02092fbcd3d814fcd9fe8e871c3f741fd/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a312407bd715647f7c11b67e0a52effc94d0f15d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a312407bd715647f7c11b67e0a52effc94d0f15d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a312407bd715647f7c11b67e0a52effc94d0f15d"}], "stats": {"total": 162, "additions": 60, "deletions": 102}, "files": [{"sha": "e8e3ec636691bcbf4fb47df62609b1b3f5ff34a9", "filename": "gcc/fortran/simplify.cc", "status": "modified", "additions": 29, "deletions": 102, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35dbc02092fbcd3d814fcd9fe8e871c3f741fd/gcc%2Ffortran%2Fsimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35dbc02092fbcd3d814fcd9fe8e871c3f741fd/gcc%2Ffortran%2Fsimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.cc?ref=ff35dbc02092fbcd3d814fcd9fe8e871c3f741fd", "patch": "@@ -3515,17 +3515,15 @@ gfc_expr *\n gfc_simplify_index (gfc_expr *x, gfc_expr *y, gfc_expr *b, gfc_expr *kind)\n {\n   gfc_expr *result;\n-  int back, len, lensub;\n-  int i, j, k, count, index = 0, start;\n+  bool back;\n+  HOST_WIDE_INT len, lensub, start, last, i, index = 0;\n+  int k, delta;\n \n   if (x->expr_type != EXPR_CONSTANT || y->expr_type != EXPR_CONSTANT\n       || ( b != NULL && b->expr_type !=  EXPR_CONSTANT))\n     return NULL;\n \n-  if (b != NULL && b->value.logical != 0)\n-    back = 1;\n-  else\n-    back = 0;\n+  back = (b != NULL && b->value.logical != 0);\n \n   k = get_kind (BT_INTEGER, kind, \"INDEX\", gfc_default_integer_kind);\n   if (k == -1)\n@@ -3542,111 +3540,40 @@ gfc_simplify_index (gfc_expr *x, gfc_expr *y, gfc_expr *b, gfc_expr *kind)\n       return result;\n     }\n \n-  if (back == 0)\n+  if (lensub == 0)\n     {\n-      if (lensub == 0)\n-\t{\n-\t  mpz_set_si (result->value.integer, 1);\n-\t  return result;\n-\t}\n-      else if (lensub == 1)\n-\t{\n-\t  for (i = 0; i < len; i++)\n-\t    {\n-\t      for (j = 0; j < lensub; j++)\n-\t\t{\n-\t\t  if (y->value.character.string[j]\n-\t\t      == x->value.character.string[i])\n-\t\t    {\n-\t\t      index = i + 1;\n-\t\t      goto done;\n-\t\t    }\n-\t\t}\n-\t    }\n-\t}\n+      if (back)\n+\tindex = len + 1;\n       else\n-\t{\n-\t  for (i = 0; i < len; i++)\n-\t    {\n-\t      for (j = 0; j < lensub; j++)\n-\t\t{\n-\t\t  if (y->value.character.string[j]\n-\t\t      == x->value.character.string[i])\n-\t\t    {\n-\t\t      start = i;\n-\t\t      count = 0;\n-\n-\t\t      for (k = 0; k < lensub; k++)\n-\t\t\t{\n-\t\t\t  if (y->value.character.string[k]\n-\t\t\t      == x->value.character.string[k + start])\n-\t\t\t    count++;\n-\t\t\t}\n-\n-\t\t      if (count == lensub)\n-\t\t\t{\n-\t\t\t  index = start + 1;\n-\t\t\t  goto done;\n-\t\t\t}\n-\t\t    }\n-\t\t}\n-\t    }\n-\t}\n+\tindex = 1;\n+      goto done;\n+    }\n \n+  if (!back)\n+    {\n+      last = len + 1 - lensub;\n+      start = 0;\n+      delta = 1;\n     }\n   else\n     {\n-      if (lensub == 0)\n-\t{\n-\t  mpz_set_si (result->value.integer, len + 1);\n-\t  return result;\n-\t}\n-      else if (lensub == 1)\n+      last = -1;\n+      start = len - lensub;\n+      delta = -1;\n+    }\n+\n+  for (; start != last; start += delta)\n+    {\n+      for (i = 0; i < lensub; i++)\n \t{\n-\t  for (i = 0; i < len; i++)\n-\t    {\n-\t      for (j = 0; j < lensub; j++)\n-\t\t{\n-\t\t  if (y->value.character.string[j]\n-\t\t      == x->value.character.string[len - i])\n-\t\t    {\n-\t\t      index = len - i + 1;\n-\t\t      goto done;\n-\t\t    }\n-\t\t}\n-\t    }\n+\t  if (x->value.character.string[start + i]\n+\t      != y->value.character.string[i])\n+\t    break;\n \t}\n-      else\n+      if (i == lensub)\n \t{\n-\t  for (i = 0; i < len; i++)\n-\t    {\n-\t      for (j = 0; j < lensub; j++)\n-\t\t{\n-\t\t  if (y->value.character.string[j]\n-\t\t      == x->value.character.string[len - i])\n-\t\t    {\n-\t\t      start = len - i;\n-\t\t      if (start <= len - lensub)\n-\t\t\t{\n-\t\t\t  count = 0;\n-\t\t\t  for (k = 0; k < lensub; k++)\n-\t\t\t    if (y->value.character.string[k]\n-\t\t\t        == x->value.character.string[k + start])\n-\t\t\t      count++;\n-\n-\t\t\t  if (count == lensub)\n-\t\t\t    {\n-\t\t\t      index = start + 1;\n-\t\t\t      goto done;\n-\t\t\t    }\n-\t\t\t}\n-\t\t      else\n-\t\t\t{\n-\t\t\t  continue;\n-\t\t\t}\n-\t\t    }\n-\t\t}\n-\t    }\n+\t  index = start + 1;\n+\t  goto done;\n \t}\n     }\n "}, {"sha": "61d492985ad04d5ea951ff53cb9795e82733d2eb", "filename": "gcc/testsuite/gfortran.dg/index_6.f90", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35dbc02092fbcd3d814fcd9fe8e871c3f741fd/gcc%2Ftestsuite%2Fgfortran.dg%2Findex_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35dbc02092fbcd3d814fcd9fe8e871c3f741fd/gcc%2Ftestsuite%2Fgfortran.dg%2Findex_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Findex_6.f90?ref=ff35dbc02092fbcd3d814fcd9fe8e871c3f741fd", "patch": "@@ -0,0 +1,31 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+! PR fortran/105691 - Incorrect calculation of INDEX(str1,str2) at compile time\n+\n+program main\n+  implicit none\n+  integer :: i\n+  character(*), parameter :: s1 = \"fortran.f90\"\n+  character(*), parameter :: s2 = \"fortran\"\n+  character(*), parameter :: s3 = s2 // \"*\"\n+  integer, parameter :: i0    = index(s1, s2)\n+  integer, parameter :: i1    = index(s1, s2, back= .true.)\n+  integer, parameter :: i2(*) = index(s1, s2, back=[.true.,.false.])\n+  integer, parameter :: i3(*) = index(s1, s2, back=[(i==1, i=1,2)] )\n+  integer, parameter :: i4    = index(s1, s3)\n+  integer, parameter :: i5    = index(s1, s3, back= .true.)\n+  integer, parameter :: i6(*) = index(s1, s3, back=[.true.,.false.])\n+  integer, parameter :: i7(*) = index(s1, s3, back=[(i==1, i=1,2)] )\n+  integer, parameter :: i8    = index(s1, \"f\", back= .true.)\n+  if (     i0 /= 1 ) stop 1\n+  if (     i1 /= 1 ) stop 2\n+  if (any (i2 /= 1)) stop 3\n+  if (any (i3 /= 1)) stop 4\n+  if (     i4 /= 0 ) stop 5\n+  if (     i5 /= 0 ) stop 6\n+  if (any (i6 /= 0)) stop 7\n+  if (any (i7 /= 0)) stop 8\n+  if (i8 /= len(s1)-2) stop 9\n+end program\n+\n+! { dg-final { scan-tree-dump-not \"_gfortran_stop_numeric\" \"original\" } }"}]}