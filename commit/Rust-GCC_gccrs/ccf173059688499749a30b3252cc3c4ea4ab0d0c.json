{"sha": "ccf173059688499749a30b3252cc3c4ea4ab0d0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NmMTczMDU5Njg4NDk5NzQ5YTMwYjMyNTJjYzNjNGVhNGFiMGQwYw==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2019-07-11T08:01:30Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-11T08:01:30Z"}, "message": "[Ada] No warning for guaranteed accessibility check failures\n\nThis patch corrects the generation of dynamic accessibility checks which\nare guaranteed to trigger errors during run time so as to give the user\nproper warning during unit compiliation.\n\n2019-07-11  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* checks.adb (Apply_Accessibility_Check): Add check for constant\n\tfolded conditions on accessibility checks.\n\ngcc/testsuite/\n\n\t* gnat.dg/access7.adb: New testcase.\n\nFrom-SVN: r273381", "tree": {"sha": "9f6cb8f06328b7298cccd7e69f9360f70b98d372", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f6cb8f06328b7298cccd7e69f9360f70b98d372"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccf173059688499749a30b3252cc3c4ea4ab0d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf173059688499749a30b3252cc3c4ea4ab0d0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccf173059688499749a30b3252cc3c4ea4ab0d0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf173059688499749a30b3252cc3c4ea4ab0d0c/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a1a8b1726cf8de2ed244353a9c8cd2fab12e4c71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a8b1726cf8de2ed244353a9c8cd2fab12e4c71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a8b1726cf8de2ed244353a9c8cd2fab12e4c71"}], "stats": {"total": 113, "additions": 108, "deletions": 5}, "files": [{"sha": "9104658a0089699edda143908482b5b1b6fe80f0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf173059688499749a30b3252cc3c4ea4ab0d0c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf173059688499749a30b3252cc3c4ea4ab0d0c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ccf173059688499749a30b3252cc3c4ea4ab0d0c", "patch": "@@ -1,3 +1,8 @@\n+2019-07-11  Justin Squirek  <squirek@adacore.com>\n+\n+\t* checks.adb (Apply_Accessibility_Check): Add check for constant\n+\tfolded conditions on accessibility checks.\n+\n 2019-07-11  Arnaud Charlet  <charlet@adacore.com>\n \n \t* libgnarl/g-thread.ads, libgnarl/g-thread.adb (Get_Thread):"}, {"sha": "7ca66bdbb608fad0dbad36c165998127a1024bf0", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf173059688499749a30b3252cc3c4ea4ab0d0c/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf173059688499749a30b3252cc3c4ea4ab0d0c/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=ccf173059688499749a30b3252cc3c4ea4ab0d0c", "patch": "@@ -577,6 +577,7 @@ package body Checks is\n       Typ         : Entity_Id;\n       Insert_Node : Node_Id)\n    is\n+      Check_Cond  : Node_Id;\n       Loc         : constant Source_Ptr := Sloc (N);\n       Param_Ent   : Entity_Id           := Param_Entity (N);\n       Param_Level : Node_Id;\n@@ -638,15 +639,29 @@ package body Checks is\n          --  Raise Program_Error if the accessibility level of the access\n          --  parameter is deeper than the level of the target access type.\n \n+         Check_Cond := Make_Op_Gt (Loc,\n+                         Left_Opnd  => Param_Level,\n+                         Right_Opnd => Type_Level);\n+\n          Insert_Action (Insert_Node,\n            Make_Raise_Program_Error (Loc,\n-             Condition =>\n-               Make_Op_Gt (Loc,\n-                 Left_Opnd  => Param_Level,\n-                 Right_Opnd => Type_Level),\n-             Reason => PE_Accessibility_Check_Failed));\n+             Condition => Check_Cond,\n+             Reason    => PE_Accessibility_Check_Failed));\n \n          Analyze_And_Resolve (N);\n+\n+         --  If constant folding has happened on the condition for the\n+         --  generated error, then warn about it being unconditional.\n+\n+         if Nkind (Check_Cond) = N_Identifier\n+           and then Entity (Check_Cond) = Standard_True\n+         then\n+            Error_Msg_Warn := SPARK_Mode /= On;\n+            Error_Msg_N\n+              (\"accessibility check fails<<\", N);\n+            Error_Msg_N\n+              (\"\\Program_Error [<<\", N);\n+         end if;\n       end if;\n    end Apply_Accessibility_Check;\n "}, {"sha": "3b393fb60cdfc2a9d5b642fc280a64a61753b1ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf173059688499749a30b3252cc3c4ea4ab0d0c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf173059688499749a30b3252cc3c4ea4ab0d0c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ccf173059688499749a30b3252cc3c4ea4ab0d0c", "patch": "@@ -1,3 +1,7 @@\n+2019-07-11  Justin Squirek  <squirek@adacore.com>\n+\n+\t* gnat.dg/access7.adb: New testcase.\n+\n 2019-07-11  Yannick Moy  <moy@adacore.com>\n \n \t* gnat.dg/warn21.adb, gnat.dg/warn21.ads: New testcase."}, {"sha": "e48131218785c9260f5d3f3c616d40ac7562ef89", "filename": "gcc/testsuite/gnat.dg/access7.adb", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccf173059688499749a30b3252cc3c4ea4ab0d0c/gcc%2Ftestsuite%2Fgnat.dg%2Faccess7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccf173059688499749a30b3252cc3c4ea4ab0d0c/gcc%2Ftestsuite%2Fgnat.dg%2Faccess7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faccess7.adb?ref=ccf173059688499749a30b3252cc3c4ea4ab0d0c", "patch": "@@ -0,0 +1,79 @@\n+--  { dg-do run }\n+\n+with Interfaces; use Interfaces;\n+\n+procedure Access7 is\n+   type t_p_string is access constant String;\n+   subtype t_hash is Unsigned_32;\n+\n+   -- Return a hash value for a given string\n+   function hash(s: String) return t_hash is\n+      h: t_hash := 0;\n+      g: t_hash;\n+   begin\n+      for i in s'Range loop\n+         h := Shift_Left(h, 4) + t_hash'(Character'Pos(s(i)));\n+         g := h and 16#F000_0000#;\n+         if (h and g) /= 0 then\n+            h := h xor ((Shift_Right(g, 24) and 16#FF#) or g);\n+         end if;\n+      end loop;\n+      return h;\n+   end hash;\n+\n+   type hash_entry is record\n+      v: t_p_string;\n+      hash: t_hash;\n+      next: access hash_entry;\n+   end record;\n+\n+   type hashtable is array(t_hash range <>) of access hash_entry;\n+\n+   protected pool is\n+      procedure allocate (sp: out t_p_string; s: String; h: t_hash);\n+   private\n+      tab: hashtable(0..199999-1) := (others => null);\n+   end pool;\n+\n+   protected body pool is\n+      procedure allocate(sp: out t_p_string; s: String; h: t_hash) is\n+         p: access hash_entry;\n+         slot: t_hash;\n+      begin\n+         slot := h mod tab'Length;\n+         p := tab(slot);\n+         while p /= null loop\n+            -- quickly check hash, then length, only then slow comparison\n+            if p.hash = h and then p.v.all'Length = s'Length\n+              and then p.v.all = s\n+            then\n+               sp := p.v;   -- shared string\n+               return;\n+            end if;\n+            p := p.next;\n+         end loop;\n+         -- add to table\n+         p := new hash_entry'(v    => new String'(s),\n+                              hash => h,\n+                              next => tab(slot));\n+         tab(slot) := p;  --  { dg-warning \"accessibility check fails|Program_Error will be raised at run time\" }\n+         sp := p.v;     -- shared string\n+      end allocate;\n+   end pool;\n+\n+   -- Return the pooled string equal to a given String\n+   function new_p_string(s: String) return t_p_string is\n+      sp: t_p_string;\n+   begin\n+      pool.allocate(sp, s, hash(s));\n+      return sp;\n+   end new_p_string;\n+\n+   foo_string : t_p_string;\n+begin\n+   foo_string := new_p_string(\"foo\");\n+   raise Constraint_Error;\n+exception\n+   when Program_Error =>\n+      null;\n+end Access7;"}]}