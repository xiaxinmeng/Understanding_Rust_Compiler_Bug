{"sha": "67f074899d00a173c0efbca542cc8defb76ce790", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdmMDc0ODk5ZDAwYTE3M2MwZWZiY2E1NDJjYzhkZWZiNzZjZTc5MA==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2006-03-29T16:33:54Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2006-03-29T16:33:54Z"}, "message": "reload1.c (choose_reload_regs): Check for all RTX_AUTOINC operators.\n\n2006-03-29  Paul Brook  <paul@codesourcery.com>\n\n\t* reload1.c (choose_reload_regs): Check for all RTX_AUTOINC operators.\n\t(inc_for_reload): Handle PRE_MODIFY and POST_MODIFY addresses.\n\nFrom-SVN: r112500", "tree": {"sha": "77d8d2307aa0441bb90fbee6a72741a4bbed79f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77d8d2307aa0441bb90fbee6a72741a4bbed79f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67f074899d00a173c0efbca542cc8defb76ce790", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f074899d00a173c0efbca542cc8defb76ce790", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f074899d00a173c0efbca542cc8defb76ce790", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f074899d00a173c0efbca542cc8defb76ce790/comments", "author": null, "committer": null, "parents": [{"sha": "531e214a01d19e889065032689d727cb754861ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/531e214a01d19e889065032689d727cb754861ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/531e214a01d19e889065032689d727cb754861ce"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "19e54d9a25dce6554b481ebef2bb23b92acffffb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f074899d00a173c0efbca542cc8defb76ce790/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f074899d00a173c0efbca542cc8defb76ce790/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67f074899d00a173c0efbca542cc8defb76ce790", "patch": "@@ -1,3 +1,8 @@\n+2006-03-29  Paul Brook  <paul@codesourcery.com>\n+\n+\t* reload1.c (choose_reload_regs): Check for all RTX_AUTOINC operators.\n+\t(inc_for_reload): Handle PRE_MODIFY and POST_MODIFY addresses.\n+\n 2006-03-29  Paul Brook  <paul@codesourcery.com>\n \n \tPR middle-end/23623"}, {"sha": "b9d7f8ed4aee2fe27f28001e409e28216c68c6a6", "filename": "gcc/reload1.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f074899d00a173c0efbca542cc8defb76ce790/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f074899d00a173c0efbca542cc8defb76ce790/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=67f074899d00a173c0efbca542cc8defb76ce790", "patch": "@@ -5505,10 +5505,7 @@ choose_reload_regs (struct insn_chain *chain)\n \t\t  mode = GET_MODE (rld[r].in_reg);\n \t\t}\n #ifdef AUTO_INC_DEC\n-\t      else if ((GET_CODE (rld[r].in_reg) == PRE_INC\n-\t\t\t|| GET_CODE (rld[r].in_reg) == PRE_DEC\n-\t\t\t|| GET_CODE (rld[r].in_reg) == POST_INC\n-\t\t\t|| GET_CODE (rld[r].in_reg) == POST_DEC)\n+\t      else if (GET_RTX_CLASS (GET_CODE (rld[r].in_reg)) == RTX_AUTOINC\n \t\t       && REG_P (XEXP (rld[r].in_reg, 0)))\n \t\t{\n \t\t  regno = REGNO (XEXP (rld[r].in_reg, 0));\n@@ -8115,7 +8112,8 @@ inc_for_reload (rtx reloadreg, rtx in, rtx value, int inc_amount)\n   /* REG or MEM to be copied and incremented.  */\n   rtx incloc = XEXP (value, 0);\n   /* Nonzero if increment after copying.  */\n-  int post = (GET_CODE (value) == POST_DEC || GET_CODE (value) == POST_INC);\n+  int post = (GET_CODE (value) == POST_DEC || GET_CODE (value) == POST_INC\n+\t      || GET_CODE (value) == POST_MODIFY);\n   rtx last;\n   rtx inc;\n   rtx add_insn;\n@@ -8130,10 +8128,18 @@ inc_for_reload (rtx reloadreg, rtx in, rtx value, int inc_amount)\n   if (REG_P (incloc))\n     reg_last_reload_reg[REGNO (incloc)] = 0;\n \n-  if (GET_CODE (value) == PRE_DEC || GET_CODE (value) == POST_DEC)\n-    inc_amount = -inc_amount;\n+  if (GET_CODE (value) == PRE_MODIFY || GET_CODE (value) == POST_MODIFY)\n+    {\n+      gcc_assert (GET_CODE (XEXP (value, 1)) == PLUS);\n+      inc = XEXP (XEXP (value, 1), 1);\n+    }\n+  else\n+    {\n+      if (GET_CODE (value) == PRE_DEC || GET_CODE (value) == POST_DEC)\n+\tinc_amount = -inc_amount;\n \n-  inc = GEN_INT (inc_amount);\n+      inc = GEN_INT (inc_amount);\n+    }\n \n   /* If this is post-increment, first copy the location to the reload reg.  */\n   if (post && real_in != reloadreg)\n@@ -8193,7 +8199,10 @@ inc_for_reload (rtx reloadreg, rtx in, rtx value, int inc_amount)\n \n       emit_insn (gen_add2_insn (reloadreg, inc));\n       store = emit_insn (gen_move_insn (incloc, reloadreg));\n-      emit_insn (gen_add2_insn (reloadreg, GEN_INT (-inc_amount)));\n+      if (GET_CODE (inc) == CONST_INT)\n+\temit_insn (gen_add2_insn (reloadreg, GEN_INT (-INTVAL(inc))));\n+      else\n+\temit_insn (gen_sub2_insn (reloadreg, inc));\n     }\n \n   return store;"}]}