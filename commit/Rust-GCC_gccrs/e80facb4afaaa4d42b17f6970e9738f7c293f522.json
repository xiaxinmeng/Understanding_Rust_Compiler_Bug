{"sha": "e80facb4afaaa4d42b17f6970e9738f7c293f522", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgwZmFjYjRhZmFhYTRkNDJiMTdmNjk3MGU5NzM4ZjdjMjkzZjUyMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-03-02T13:42:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-03-02T13:42:05Z"}, "message": "re PR tree-optimization/79345 (passing yet-uninitialized member as argument to base class constructor should warn (-Wunitialized))\n\n2017-03-02  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/79345\n\tPR c++/42000\n\t* tree-ssa-alias.c (walk_aliased_vdefs_1): Take a limit\n\tparam and abort the walk, returning -1 if it is hit.\n\t(walk_aliased_vdefs): Take a limit param and pass it on.\n\t* tree-ssa-alias.h (walk_aliased_vdefs): Add a limit param,\n\tdefaulting to 0 and return a signed int.\n\t* tree-ssa-uninit.c (struct check_defs_data): New struct.\n\t(check_defs): New helper.\n\t(warn_uninitialized_vars): Use walk_aliased_vdefs to warn\n\tabout uninitialized memory.\n\n\t* fixed-value.c (fixed_from_string): Use ulow/uhigh to avoid\n\tbogus uninitialized warning.\n\t(fixed_convert_from_real): Likewise.\n\n\t* g++.dg/warn/Wuninitialized-7.C: New testcase.\n\t* c-c++-common/ubsan/bounds-2.c: Add -Wno-uninitialized.\n\t* gcc.dg/uninit-pr19430-2.c: Add expected warning.\n\nFrom-SVN: r245840", "tree": {"sha": "1ae9c4a7112cdf29926e13b25e432f7a93f48b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ae9c4a7112cdf29926e13b25e432f7a93f48b81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e80facb4afaaa4d42b17f6970e9738f7c293f522", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e80facb4afaaa4d42b17f6970e9738f7c293f522", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e80facb4afaaa4d42b17f6970e9738f7c293f522", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e80facb4afaaa4d42b17f6970e9738f7c293f522/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f03e92172a78fbb7beab293ced88b161b2cfb4c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f03e92172a78fbb7beab293ced88b161b2cfb4c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f03e92172a78fbb7beab293ced88b161b2cfb4c5"}], "stats": {"total": 201, "additions": 158, "deletions": 43}, "files": [{"sha": "61b793b1bb67dce3f566a2db2ae15d98d3aae6c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e80facb4afaaa4d42b17f6970e9738f7c293f522", "patch": "@@ -1,3 +1,20 @@\n+2017-03-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79345\n+\tPR c++/42000\n+\t* tree-ssa-alias.c (walk_aliased_vdefs_1): Take a limit\n+\tparam and abort the walk, returning -1 if it is hit.\n+\t(walk_aliased_vdefs): Take a limit param and pass it on.\n+\t* tree-ssa-alias.h (walk_aliased_vdefs): Add a limit param,\n+\tdefaulting to 0 and return a signed int.\n+\t* tree-ssa-uninit.c (struct check_defs_data): New struct.\n+\t(check_defs): New helper.\n+\t(warn_uninitialized_vars): Use walk_aliased_vdefs to warn\n+\tabout uninitialized memory.\n+\t* fixed-value.c (fixed_from_string): Use ulow/uhigh to avoid\n+\tbogus uninitialized warning.\n+\t(fixed_convert_from_real): Likewise.\n+\n 2017-03-02  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/66768"}, {"sha": "d9489a3a576486c208de604bcbb57f41ac783808", "filename": "gcc/fixed-value.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2Ffixed-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2Ffixed-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixed-value.c?ref=e80facb4afaaa4d42b17f6970e9738f7c293f522", "patch": "@@ -130,8 +130,8 @@ fixed_from_string (FIXED_VALUE_TYPE *f, const char *str, machine_mode mode)\n   real_arithmetic (&fixed_value, MULT_EXPR, &real_value, &base_value);\n   wide_int w = real_to_integer (&fixed_value, &fail,\n \t\t\t\tGET_MODE_PRECISION (mode));\n-  f->data.low = w.elt (0);\n-  f->data.high = w.elt (1);\n+  f->data.low = w.ulow ();\n+  f->data.high = w.uhigh ();\n \n   if (temp == FIXED_MAX_EPS && ALL_FRACT_MODE_P (f->mode))\n     {\n@@ -1049,8 +1049,8 @@ fixed_convert_from_real (FIXED_VALUE_TYPE *f, machine_mode mode,\n \n   wide_int w = real_to_integer (&fixed_value, &fail,\n \t\t\t\tGET_MODE_PRECISION (mode));\n-  f->data.low = w.elt (0);\n-  f->data.high = w.elt (1);\n+  f->data.low = w.ulow ();\n+  f->data.high = w.uhigh ();\n   temp = check_real_for_fixed_mode (&real_value, mode);\n   if (temp == FIXED_UNDERFLOW) /* Minimum.  */\n     {"}, {"sha": "bb5d68f0477075c7b510a80ac8299e374d5c9f7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e80facb4afaaa4d42b17f6970e9738f7c293f522", "patch": "@@ -1,3 +1,11 @@\n+2017-03-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/79345\n+\tPR c++/42000\n+\t* g++.dg/warn/Wuninitialized-7.C: New testcase.\n+\t* c-c++-common/ubsan/bounds-2.c: Add -Wno-uninitialized.\n+\t* gcc.dg/uninit-pr19430-2.c: Add expected warning.\n+\n 2017-03-02  Richard Biener  <rguenther@suse.de>\n \n \tPR c/79756"}, {"sha": "56654486f65f9b0dafcaa11549991c312e697c0e", "filename": "gcc/testsuite/c-c++-common/ubsan/bounds-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-2.c?ref=e80facb4afaaa4d42b17f6970e9738f7c293f522", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=bounds -Wall -Wextra -Wno-unused -Wno-array-bounds\" } */\n+/* { dg-options \"-fsanitize=bounds -Wall -Wextra -Wno-unused -Wno-array-bounds -Wno-uninitialized\" } */\n \n /* Test runtime errors.  */\n "}, {"sha": "6b056e942a8e00e5a2e39b387eee8a662f46daeb", "filename": "gcc/testsuite/g++.dg/warn/Wuninitialized-7.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuninitialized-7.C?ref=e80facb4afaaa4d42b17f6970e9738f7c293f522", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++11 }\n+// { dg-options \"-O -Wuninitialized\" }\n+\n+struct A {\n+    A (int);\n+};\n+\n+struct B: A {\n+    const bool x = true;\n+\n+    B (): A (x ? 3 : 7) { } // { dg-warning \"x. is used uninitialized\" }\n+};\n+\n+void f (void*);\n+void g ()\n+{\n+  B b;\n+  f (&b);\n+}"}, {"sha": "9617efc23f252da66fc1ce5d1329ac412fdc0e4c", "filename": "gcc/testsuite/gcc.dg/uninit-pr19430-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr19430-2.c?ref=e80facb4afaaa4d42b17f6970e9738f7c293f522", "patch": "@@ -10,7 +10,7 @@ int foo (int b)\n   p = &i;\n   q = &j;\n   if (b)\n-    x = p;\n+    x = p;  /* { dg-warning \"i. may be used uninitialized\" } */\n   else\n     x = q;\n   return *x;"}, {"sha": "3f0c650475d16305f72597e5198138a569b9e657", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=e80facb4afaaa4d42b17f6970e9738f7c293f522", "patch": "@@ -2897,13 +2897,15 @@ walk_non_aliased_vuses (ao_ref *ref, tree vuse,\n    PHI argument (but only one walk continues on merge points), the\n    return value is true if any of the walks was successful.\n \n-   The function returns the number of statements walked.  */\n+   The function returns the number of statements walked or -1 if\n+   LIMIT stmts were walked and the walk was aborted at this point.\n+   If LIMIT is zero the walk is not aborted.  */\n \n-static unsigned int\n+static int\n walk_aliased_vdefs_1 (ao_ref *ref, tree vdef,\n \t\t      bool (*walker)(ao_ref *, tree, void *), void *data,\n \t\t      bitmap *visited, unsigned int cnt,\n-\t\t      bool *function_entry_reached)\n+\t\t      bool *function_entry_reached, unsigned limit)\n {\n   do\n     {\n@@ -2925,14 +2927,22 @@ walk_aliased_vdefs_1 (ao_ref *ref, tree vdef,\n \t  if (!*visited)\n \t    *visited = BITMAP_ALLOC (NULL);\n \t  for (i = 0; i < gimple_phi_num_args (def_stmt); ++i)\n-\t    cnt += walk_aliased_vdefs_1 (ref, gimple_phi_arg_def (def_stmt, i),\n-\t\t\t\t\t walker, data, visited, 0,\n-\t\t\t\t\t function_entry_reached);\n+\t    {\n+\t      int res = walk_aliased_vdefs_1 (ref,\n+\t\t\t\t\t      gimple_phi_arg_def (def_stmt, i),\n+\t\t\t\t\t      walker, data, visited, cnt,\n+\t\t\t\t\t      function_entry_reached, limit);\n+\t      if (res == -1)\n+\t\treturn -1;\n+\t      cnt = res;\n+\t    }\n \t  return cnt;\n \t}\n \n       /* ???  Do we want to account this to TV_ALIAS_STMT_WALK?  */\n       cnt++;\n+      if (cnt == limit)\n+\treturn -1;\n       if ((!ref\n \t   || stmt_may_clobber_ref_p_1 (def_stmt, ref))\n \t  && (*walker) (ref, vdef, data))\n@@ -2943,14 +2953,14 @@ walk_aliased_vdefs_1 (ao_ref *ref, tree vdef,\n   while (1);\n }\n \n-unsigned int\n+int\n walk_aliased_vdefs (ao_ref *ref, tree vdef,\n \t\t    bool (*walker)(ao_ref *, tree, void *), void *data,\n \t\t    bitmap *visited,\n-\t\t    bool *function_entry_reached)\n+\t\t    bool *function_entry_reached, unsigned int limit)\n {\n   bitmap local_visited = NULL;\n-  unsigned int ret;\n+  int ret;\n \n   timevar_push (TV_ALIAS_STMT_WALK);\n \n@@ -2959,7 +2969,7 @@ walk_aliased_vdefs (ao_ref *ref, tree vdef,\n \n   ret = walk_aliased_vdefs_1 (ref, vdef, walker, data,\n \t\t\t      visited ? visited : &local_visited, 0,\n-\t\t\t      function_entry_reached);\n+\t\t\t      function_entry_reached, limit);\n   if (local_visited)\n     BITMAP_FREE (local_visited);\n "}, {"sha": "8c89c693c39b82abd85bb1197c30912eacb24f09", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=e80facb4afaaa4d42b17f6970e9738f7c293f522", "patch": "@@ -131,10 +131,11 @@ extern void *walk_non_aliased_vuses (ao_ref *, tree,\n \t\t\t\t     void *(*)(ao_ref *, tree, void *, bool *),\n \t\t\t\t     tree (*)(tree),\n \t\t\t\t     void *);\n-extern unsigned int walk_aliased_vdefs (ao_ref *, tree,\n-\t\t\t\t\tbool (*)(ao_ref *, tree, void *),\n-\t\t\t\t\tvoid *, bitmap *,\n-\t\t\t\t\tbool *function_entry_reached = NULL);\n+extern int walk_aliased_vdefs (ao_ref *, tree,\n+\t\t\t       bool (*)(ao_ref *, tree, void *),\n+\t\t\t       void *, bitmap *,\n+\t\t\t       bool *function_entry_reached = NULL,\n+\t\t\t       unsigned int limit = 0);\n extern void dump_alias_info (FILE *);\n extern void debug_alias_info (void);\n extern void dump_points_to_solution (FILE *, struct pt_solution *);"}, {"sha": "1805c674ea497b31123b4e27aa2708369ad0c7cb", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 82, "deletions": 23, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e80facb4afaaa4d42b17f6970e9738f7c293f522/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=e80facb4afaaa4d42b17f6970e9738f7c293f522", "patch": "@@ -191,11 +191,39 @@ warn_uninit (enum opt_code wc, tree t, tree expr, tree var,\n     }\n }\n \n+struct check_defs_data\n+{\n+  /* If we found any may-defs besides must-def clobbers.  */\n+  bool found_may_defs;\n+};\n+\n+/* Callback for walk_aliased_vdefs.  */\n+\n+static bool\n+check_defs (ao_ref *ref, tree vdef, void *data_)\n+{\n+  check_defs_data *data = (check_defs_data *)data_;\n+  gimple *def_stmt = SSA_NAME_DEF_STMT (vdef);\n+  /* If this is a clobber then if it is not a kill walk past it.  */\n+  if (gimple_clobber_p (def_stmt))\n+    {\n+      if (stmt_kills_ref_p (def_stmt, ref))\n+\treturn true;\n+      return false;\n+    }\n+  /* Found a may-def on this path.  */\n+  data->found_may_defs = true;\n+  return true;\n+}\n+\n static unsigned int\n warn_uninitialized_vars (bool warn_possibly_uninitialized)\n {\n   gimple_stmt_iterator gsi;\n   basic_block bb;\n+  unsigned int vdef_cnt = 0;\n+  unsigned int oracle_cnt = 0;\n+  unsigned limit = 0;\n \n   FOR_EACH_BB_FN (bb, cfun)\n     {\n@@ -236,39 +264,70 @@ warn_uninitialized_vars (bool warn_possibly_uninitialized)\n \t\t\t     stmt, UNKNOWN_LOCATION);\n \t    }\n \n-\t  /* For memory the only cheap thing we can do is see if we\n-\t     have a use of the default def of the virtual operand.\n-\t     ???  Not so cheap would be to use the alias oracle via\n-\t     walk_aliased_vdefs, if we don't find any aliasing vdef\n-\t     warn as is-used-uninitialized, if we don't find an aliasing\n-\t     vdef that kills our use (stmt_kills_ref_p), warn as\n-\t     may-be-used-uninitialized.  But this walk is quadratic and\n-\t     so must be limited which means we would miss warning\n-\t     opportunities.  */\n-\t  use = gimple_vuse (stmt);\n-\t  if (use\n-\t      && gimple_assign_single_p (stmt)\n-\t      && !gimple_vdef (stmt)\n-\t      && SSA_NAME_IS_DEFAULT_DEF (use))\n+\t  /* For limiting the alias walk below we count all\n+\t     vdefs in the function.  */\n+\t  if (gimple_vdef (stmt))\n+\t    vdef_cnt++;\n+\n+\t  if (gimple_assign_load_p (stmt)\n+\t      && gimple_has_location (stmt))\n \t    {\n \t      tree rhs = gimple_assign_rhs1 (stmt);\n-\t      tree base = get_base_address (rhs);\n+\t      if (TREE_NO_WARNING (rhs))\n+\t\tcontinue;\n+\n+\t      ao_ref ref;\n+\t      ao_ref_init (&ref, rhs);\n \n \t      /* Do not warn if it can be initialized outside this function.  */\n+\t      tree base = ao_ref_base (&ref);\n \t      if (!VAR_P (base)\n \t\t  || DECL_HARD_REGISTER (base)\n-\t\t  || is_global_var (base))\n+\t\t  || is_global_var (base)\n+\t\t  || TREE_NO_WARNING (base))\n+\t\tcontinue;\n+\n+\t      /* Limit the walking to a constant number of stmts after\n+\t         we overcommit quadratic behavior for small functions\n+\t\t and O(n) behavior.  */\n+\t      if (oracle_cnt > 128 * 128\n+\t\t  && oracle_cnt > vdef_cnt * 2)\n+\t\tlimit = 32;\n+\t      check_defs_data data;\n+\t      data.found_may_defs = false;\n+\t      use = gimple_vuse (stmt);\n+\t      int res = walk_aliased_vdefs (&ref, use,\n+\t\t\t\t\t    check_defs, &data, NULL,\n+\t\t\t\t\t    NULL, limit);\n+\t      if (res == -1)\n+\t\t{\n+\t\t  oracle_cnt += limit;\n+\t\t  continue;\n+\t\t}\n+\t      oracle_cnt += res;\n+\t      if (data.found_may_defs)\n \t\tcontinue;\n \n+\t      /* We didn't find any may-defs so on all paths either\n+\t         reached function entry or a killing clobber.  */\n+\t      location_t location\n+\t\t= linemap_resolve_location (line_table, gimple_location (stmt),\n+\t\t\t\t\t    LRK_SPELLING_LOCATION, NULL);\n \t      if (always_executed)\n-\t\twarn_uninit (OPT_Wuninitialized, use, gimple_assign_rhs1 (stmt),\n-\t\t\t     base, \"%qE is used uninitialized in this function\",\n-\t\t\t     stmt, UNKNOWN_LOCATION);\n+\t\t{\n+\t\t  if (warning_at (location, OPT_Wuninitialized,\n+\t\t\t\t  \"%qE is used uninitialized in this function\",\n+\t\t\t\t  rhs))\n+\t\t    /* ???  This is only effective for decls as in\n+\t\t       gcc.dg/uninit-B-O0.c.  Avoid doing this for\n+\t\t       maybe-uninit uses as it may hide important\n+\t\t       locations.  */\n+\t\t    TREE_NO_WARNING (rhs) = 1;\n+\t\t}\n \t      else if (warn_possibly_uninitialized)\n-\t\twarn_uninit (OPT_Wmaybe_uninitialized, use,\n-\t\t\t     gimple_assign_rhs1 (stmt), base,\n-\t\t\t     \"%qE may be used uninitialized in this function\",\n-\t\t\t     stmt, UNKNOWN_LOCATION);\n+\t\twarning_at (location, OPT_Wmaybe_uninitialized,\n+\t\t\t    \"%qE may be used uninitialized in this function\",\n+\t\t\t    rhs);\n \t    }\n \t}\n     }"}]}