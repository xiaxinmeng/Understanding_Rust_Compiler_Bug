{"sha": "1e27e7a582a9b86bcf86f5c103cd947672746e97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUyN2U3YTU4MmE5Yjg2YmNmODZmNWMxMDNjZDk0NzY3Mjc0NmU5Nw==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2020-11-17T19:47:58Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2020-11-17T21:59:48Z"}, "message": "recognize implied ranges for modulo.\n\nimplement op1_range for modulo with implied positive and negative ranges.\n\n\tgcc/\n\tPR tree-optimization/91029\n\t* range-op.cc (operator_trunc_mod::op1_range): New.\n\tgcc/testsuite/\n\t* gcc.dg/pr91029.c: New.", "tree": {"sha": "62dba27e63b49b12d89a0b669c93fb51be9b511a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62dba27e63b49b12d89a0b669c93fb51be9b511a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e27e7a582a9b86bcf86f5c103cd947672746e97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e27e7a582a9b86bcf86f5c103cd947672746e97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e27e7a582a9b86bcf86f5c103cd947672746e97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e27e7a582a9b86bcf86f5c103cd947672746e97/comments", "author": null, "committer": null, "parents": [{"sha": "0c1db9fa47b97ac4f080994e7c4b382b7353e6dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c1db9fa47b97ac4f080994e7c4b382b7353e6dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c1db9fa47b97ac4f080994e7c4b382b7353e6dd"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "f37796cac709e062591ee09f304cfe494495a9b3", "filename": "gcc/range-op.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e27e7a582a9b86bcf86f5c103cd947672746e97/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e27e7a582a9b86bcf86f5c103cd947672746e97/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=1e27e7a582a9b86bcf86f5c103cd947672746e97", "patch": "@@ -2634,6 +2634,9 @@ class operator_trunc_mod : public range_operator\n \t\t        const wide_int &lh_ub,\n \t\t        const wide_int &rh_lb,\n \t\t        const wide_int &rh_ub) const;\n+  virtual bool op1_range (irange &r, tree type,\n+\t\t\t  const irange &lhs,\n+\t\t\t  const irange &op2) const;\n } op_trunc_mod;\n \n void\n@@ -2680,6 +2683,31 @@ operator_trunc_mod::wi_fold (irange &r, tree type,\n   value_range_with_overflow (r, type, new_lb, new_ub);\n }\n \n+bool\n+operator_trunc_mod::op1_range (irange &r, tree type,\n+\t\t\t       const irange &lhs,\n+\t\t\t       const irange &op2) const\n+{\n+  // PR 91029.  Check for signed truncation with op2 >= 0.\n+  if (TYPE_SIGN (type) == SIGNED && wi::ge_p (op2.lower_bound (), 0, SIGNED))\n+    {\n+      unsigned prec = TYPE_PRECISION (type);\n+      // if a & b >=0 , then a >= 0.\n+      if (wi::ge_p (lhs.lower_bound (), 0, SIGNED))\n+\t{\n+\t  r = value_range (type, wi::zero (prec), wi::max_value (prec, SIGNED));\n+\t  return true;\n+\t}\n+      // if a & b < 0 , then a <= 0.\n+      if (wi::lt_p (lhs.upper_bound (), 0, SIGNED))\n+\t{\n+\t  r = value_range (type, wi::min_value (prec, SIGNED), wi::zero (prec));\n+\t  return true;\n+\t}\n+    }\n+  return false;\n+}\n+\n \n class operator_logical_not : public range_operator\n {"}, {"sha": "8a4134c5d96d88c99c4d4366e0a4bc5ed3888018", "filename": "gcc/testsuite/gcc.dg/pr91029.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e27e7a582a9b86bcf86f5c103cd947672746e97/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91029.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e27e7a582a9b86bcf86f5c103cd947672746e97/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91029.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91029.c?ref=1e27e7a582a9b86bcf86f5c103cd947672746e97", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-evrp\" } */\n+\n+void kill (void);\n+int xx;\n+\n+void f1 (int i)\n+{\n+  if ((i % 7) == 3)\n+    {\n+      xx = (i < 0);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+void f2 (int i)\n+{\n+  if ((i % 7) >= 0)\n+    {\n+      xx = (i < 0);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+void f3 (int i)\n+{\n+  if ((i % 7) == -3)\n+    {\n+      xx = (i > 0);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+void f4 (int i)\n+{\n+  if ((i % 7) < 0)\n+    {\n+      xx = (i > 0);\n+      if (xx)\n+        kill ();\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"kill\" \"evrp\" } }  */"}]}