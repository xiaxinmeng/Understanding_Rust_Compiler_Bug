{"sha": "aa2480c5fb4fa679e109545b1a76cfd20bb0f624", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEyNDgwYzVmYjRmYTY3OWUxMDk1NDViMWE3NmNmZDIwYmIwZjYyNA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2007-06-14T14:40:58Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2007-06-14T14:40:58Z"}, "message": "configure.ac: Use ACX_PROG_CC_ALMOST_PEDANTIC too.\n\n2007-06-14  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* configure.ac: Use ACX_PROG_CC_ALMOST_PEDANTIC too.\n\t* configure: Regenerate.\n\nFrom-SVN: r125716", "tree": {"sha": "f5057e7ef882a8fc5ae38c1b526bd7a97579d83a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5057e7ef882a8fc5ae38c1b526bd7a97579d83a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa2480c5fb4fa679e109545b1a76cfd20bb0f624", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2480c5fb4fa679e109545b1a76cfd20bb0f624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2480c5fb4fa679e109545b1a76cfd20bb0f624", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2480c5fb4fa679e109545b1a76cfd20bb0f624/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90745823423b14c8f4c6489d6cde5e5069761914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90745823423b14c8f4c6489d6cde5e5069761914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90745823423b14c8f4c6489d6cde5e5069761914"}], "stats": {"total": 75, "additions": 73, "deletions": 2}, "files": [{"sha": "f7000581779701f42b0f79c8b615ed2b1aad313d", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2480c5fb4fa679e109545b1a76cfd20bb0f624/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2480c5fb4fa679e109545b1a76cfd20bb0f624/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=aa2480c5fb4fa679e109545b1a76cfd20bb0f624", "patch": "@@ -1,3 +1,8 @@\n+2007-06-14  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* configure.ac: Use ACX_PROG_CC_ALMOST_PEDANTIC too.\n+\t* configure: Regenerate.\n+\n 2007-06-14  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* aclocal.m4: Include config/warnings.m4."}, {"sha": "0312cc418d294be3557fa5840f4c55f36c1b7307", "filename": "libiberty/configure", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2480c5fb4fa679e109545b1a76cfd20bb0f624/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2480c5fb4fa679e109545b1a76cfd20bb0f624/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=aa2480c5fb4fa679e109545b1a76cfd20bb0f624", "patch": "@@ -2956,7 +2956,7 @@ ac_c_preproc_warn_flag=yes\n \n ac_libiberty_warn_cflags=\n save_CFLAGS=\"$CFLAGS\"\n-for option in -W -Wall -pedantic -Wwrite-strings -Wc++-compat \\\n+for option in -W -Wall -Wwrite-strings -Wc++-compat \\\n \t\t\t  -Wstrict-prototypes; do\n   as_acx_Woption=`echo \"acx_cv_prog_cc_warning_$option\" | $as_tr_sh`\n \n@@ -3022,6 +3022,71 @@ fi\n   done\n CFLAGS=\"$save_CFLAGS\"\n \n+if test \"$GCC\" = yes; then\n+  echo \"$as_me:$LINENO: checking whether $CC supports -pedantic \" >&5\n+echo $ECHO_N \"checking whether $CC supports -pedantic ... $ECHO_C\" >&6\n+if test \"${acx_cv_prog_cc_pedantic_+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  save_CFLAGS=\"$CFLAGS\"\n+CFLAGS=\"-pedantic \"\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  acx_cv_prog_cc_pedantic_=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+acx_cv_prog_cc_pedantic_=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+CFLAGS=\"$save_CFLAGS\"\n+fi\n+echo \"$as_me:$LINENO: result: $acx_cv_prog_cc_pedantic_\" >&5\n+echo \"${ECHO_T}$acx_cv_prog_cc_pedantic_\" >&6\n+if test $acx_cv_prog_cc_pedantic_ = yes; then\n+  ac_libiberty_warn_cflags=\"$ac_libiberty_warn_cflags${ac_libiberty_warn_cflags:+ }-pedantic \"\n+fi\n+\n+\n+fi\n+\n+\n \n if test \"x$CC\" != xcc; then\n   echo \"$as_me:$LINENO: checking whether $CC and cc understand -c and -o together\" >&5"}, {"sha": "371864e1e7a293544b710653edb5e5916d90a579", "filename": "libiberty/configure.ac", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2480c5fb4fa679e109545b1a76cfd20bb0f624/libiberty%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2480c5fb4fa679e109545b1a76cfd20bb0f624/libiberty%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.ac?ref=aa2480c5fb4fa679e109545b1a76cfd20bb0f624", "patch": "@@ -132,8 +132,9 @@ GCC_NO_EXECUTABLES\n AC_PROG_CC\n AC_PROG_CPP_WERROR\n \n-ACX_PROG_CC_WARNING_OPTS([-W -Wall -pedantic -Wwrite-strings -Wc++-compat \\\n+ACX_PROG_CC_WARNING_OPTS([-W -Wall -Wwrite-strings -Wc++-compat \\\n \t\t\t  -Wstrict-prototypes], [ac_libiberty_warn_cflags])\n+ACX_PROG_CC_WARNING_ALMOST_PEDANTIC([], [ac_libiberty_warn_cflags])\n \n AC_PROG_CC_C_O\n # autoconf is lame and doesn't give us any substitution variable for this."}]}