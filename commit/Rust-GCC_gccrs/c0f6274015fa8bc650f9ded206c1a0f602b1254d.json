{"sha": "c0f6274015fa8bc650f9ded206c1a0f602b1254d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBmNjI3NDAxNWZhOGJjNjUwZjlkZWQyMDZjMWEwZjYwMmIxMjU0ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-09T08:12:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-09T08:12:18Z"}, "message": "re PR middle-end/67891 (FAIL: gcc.dg/pr43300.c (internal compiler error) on alpha-linux-gnu)\n\n2015-10-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/67891\n\t* gimple-match.h (gimple_simplified_result_is_gimple_val):\n\tNew helper.\n\t(gimple_resimplify1): Declare.\n\t(gimple_resimplify2): Likewise.\n\t(gimple_resimplify3): Likewise.\n\t* gimple-match-head.c (gimple_resimplify1): Export.\n\t(gimple_resimplify2): Likewise.\n\t(gimple_resimplify3): Likewise.\n\t(maybe_push_res_to_seq): Use gimple_simplified_result_is_gimple_val.\n\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): Likewise.\n\t* tree-ssa-sccvn.c (visit_reference_op_load): Use gimple_resimplify1\n\tto avoid creating stmts without VN info.\n\n\t* gcc.dg/tree-ssa/pr67891.c: New testcase.\n\nFrom-SVN: r228635", "tree": {"sha": "a54ff8c6d5c8ec6eb2b4f543dcefbd2c343e3444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a54ff8c6d5c8ec6eb2b4f543dcefbd2c343e3444"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0f6274015fa8bc650f9ded206c1a0f602b1254d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f6274015fa8bc650f9ded206c1a0f602b1254d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0f6274015fa8bc650f9ded206c1a0f602b1254d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0f6274015fa8bc650f9ded206c1a0f602b1254d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2795c84a46d65e5a4bbb548438da597c5863cad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2795c84a46d65e5a4bbb548438da597c5863cad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2795c84a46d65e5a4bbb548438da597c5863cad9"}], "stats": {"total": 119, "additions": 86, "deletions": 33}, "files": [{"sha": "108cbdf5cf28e7f7c3a97fedae16d6de29387204", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0f6274015fa8bc650f9ded206c1a0f602b1254d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0f6274015fa8bc650f9ded206c1a0f602b1254d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0f6274015fa8bc650f9ded206c1a0f602b1254d", "patch": "@@ -1,3 +1,19 @@\n+2015-10-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/67891\n+\t* gimple-match.h (gimple_simplified_result_is_gimple_val):\n+\tNew helper.\n+\t(gimple_resimplify1): Declare.\n+\t(gimple_resimplify2): Likewise.\n+\t(gimple_resimplify3): Likewise.\n+\t* gimple-match-head.c (gimple_resimplify1): Export.\n+\t(gimple_resimplify2): Likewise.\n+\t(gimple_resimplify3): Likewise.\n+\t(maybe_push_res_to_seq): Use gimple_simplified_result_is_gimple_val.\n+\t* gimple-fold.c (gimple_fold_stmt_to_constant_1): Likewise.\n+\t* tree-ssa-sccvn.c (visit_reference_op_load): Use gimple_resimplify1\n+\tto avoid creating stmts without VN info.\n+\n 2015-10-08  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-icf.c (sem_item::compare_symbol_references): Fix use"}, {"sha": "ee2a320c1fcbd8eaacf531c8f053a332d15760f3", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0f6274015fa8bc650f9ded206c1a0f602b1254d/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0f6274015fa8bc650f9ded206c1a0f602b1254d/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=c0f6274015fa8bc650f9ded206c1a0f602b1254d", "patch": "@@ -4926,10 +4926,7 @@ gimple_fold_stmt_to_constant_1 (gimple *stmt, tree (*valueize) (tree),\n   if (gimple_simplify (stmt, &rcode, ops, NULL, gvalueize, valueize))\n     {\n       tree res = NULL_TREE;\n-      if (rcode.is_tree_code ()\n-\t  && (TREE_CODE_LENGTH ((tree_code) rcode) == 0\n-\t      || ((tree_code) rcode) == ADDR_EXPR)\n-\t  && is_gimple_val (ops[0]))\n+      if (gimple_simplified_result_is_gimple_val (rcode, ops))\n \tres = ops[0];\n       else if (mprts_hook)\n \tres = mprts_hook (rcode, gimple_expr_type (stmt), ops);"}, {"sha": "16d8c5b7eb1ae62e7c4fb6ca1e0c9417ef601926", "filename": "gcc/gimple-match-head.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0f6274015fa8bc650f9ded206c1a0f602b1254d/gcc%2Fgimple-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0f6274015fa8bc650f9ded206c1a0f602b1254d/gcc%2Fgimple-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.c?ref=c0f6274015fa8bc650f9ded206c1a0f602b1254d", "patch": "@@ -83,7 +83,7 @@ constant_for_folding (tree t)\n    *RES_CODE and *RES_OPS with a simplified and/or canonicalized\n    result and returns whether any change was made.  */\n \n-static bool\n+bool\n gimple_resimplify1 (gimple_seq *seq,\n \t\t    code_helper *res_code, tree type, tree *res_ops,\n \t\t    tree (*valueize)(tree))\n@@ -139,7 +139,7 @@ gimple_resimplify1 (gimple_seq *seq,\n    *RES_CODE and *RES_OPS with a simplified and/or canonicalized\n    result and returns whether any change was made.  */\n \n-static bool\n+bool\n gimple_resimplify2 (gimple_seq *seq,\n \t\t    code_helper *res_code, tree type, tree *res_ops,\n \t\t    tree (*valueize)(tree))\n@@ -208,7 +208,7 @@ gimple_resimplify2 (gimple_seq *seq,\n    *RES_CODE and *RES_OPS with a simplified and/or canonicalized\n    result and returns whether any change was made.  */\n \n-static bool\n+bool\n gimple_resimplify3 (gimple_seq *seq,\n \t\t    code_helper *res_code, tree type, tree *res_ops,\n \t\t    tree (*valueize)(tree))\n@@ -308,9 +308,7 @@ maybe_push_res_to_seq (code_helper rcode, tree type, tree *ops,\n   if (rcode.is_tree_code ())\n     {\n       if (!res\n-\t  && (TREE_CODE_LENGTH ((tree_code) rcode) == 0\n-\t      || ((tree_code) rcode) == ADDR_EXPR)\n-\t  && is_gimple_val (ops[0]))\n+\t  && gimple_simplified_result_is_gimple_val (rcode, ops))\n \treturn ops[0];\n       if (mprts_hook)\n \t{"}, {"sha": "632e9a53d1c217ea7e880b73f808e0d370ade8cd", "filename": "gcc/gimple-match.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0f6274015fa8bc650f9ded206c1a0f602b1254d/gcc%2Fgimple-match.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0f6274015fa8bc650f9ded206c1a0f602b1254d/gcc%2Fgimple-match.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match.h?ref=c0f6274015fa8bc650f9ded206c1a0f602b1254d", "patch": "@@ -40,10 +40,28 @@ class code_helper\n   int rep;\n };\n \n+/* Return whether OPS[0] with CODE is a non-expression result and\n+   a gimple value.  */\n+\n+inline bool\n+gimple_simplified_result_is_gimple_val (code_helper code, tree *ops)\n+{\n+  return (code.is_tree_code ()\n+\t  && (TREE_CODE_LENGTH ((tree_code) code) == 0\n+\t      || ((tree_code) code) == ADDR_EXPR)\n+\t  && is_gimple_val (ops[0]));\n+}\n+\n extern tree (*mprts_hook) (code_helper, tree, tree *);\n \n bool gimple_simplify (gimple *, code_helper *, tree *, gimple_seq *,\n \t\t      tree (*)(tree), tree (*)(tree));\n+bool gimple_resimplify1 (gimple_seq *, code_helper *, tree, tree *,\n+\t\t\t tree (*)(tree));\n+bool gimple_resimplify2 (gimple_seq *, code_helper *, tree, tree *,\n+\t\t\t tree (*)(tree));\n+bool gimple_resimplify3 (gimple_seq *, code_helper *, tree, tree *,\n+\t\t\t tree (*)(tree));\n tree maybe_push_res_to_seq (code_helper, tree, tree *,\n \t\t\t    gimple_seq *, tree res = NULL_TREE);\n void maybe_build_generic_op (enum tree_code, tree, tree *, tree, tree);"}, {"sha": "6ce8fab13935c300c0de10a498d22df04089c04a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0f6274015fa8bc650f9ded206c1a0f602b1254d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0f6274015fa8bc650f9ded206c1a0f602b1254d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0f6274015fa8bc650f9ded206c1a0f602b1254d", "patch": "@@ -1,3 +1,8 @@\n+2015-10-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/67891\n+\t* gcc.dg/tree-ssa/pr67891.c: New testcase.\n+\n 2015-10-08  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/builtins-47.c: Test the optimized dump instead."}, {"sha": "792690e426adc9c9a0da11d8fdf2546542dd7195", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr67891.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0f6274015fa8bc650f9ded206c1a0f602b1254d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr67891.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0f6274015fa8bc650f9ded206c1a0f602b1254d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr67891.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr67891.c?ref=c0f6274015fa8bc650f9ded206c1a0f602b1254d", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1\" } */\n+\n+unsigned int a, *b;\n+unsigned short c;\n+int d;\n+\n+void \n+fn1 ()\n+{\n+  b = &d;\n+  *b = c = a; \n+  *b = d;\n+}\n+\n+/* We should remove all loads but that from a.  */\n+/* { dg-final { scan-tree-dump-not \"= \\[dbc\\];\" \"fre1\" } } */"}, {"sha": "f2eb213e96f8e3afe99e0ee955b602b2a9343e0c", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0f6274015fa8bc650f9ded206c1a0f602b1254d/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0f6274015fa8bc650f9ded206c1a0f602b1254d/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=c0f6274015fa8bc650f9ded206c1a0f602b1254d", "patch": "@@ -3043,38 +3043,41 @@ visit_reference_op_load (tree lhs, tree op, gimple *stmt)\n \t of VIEW_CONVERT_EXPR <TREE_TYPE (result)> (result).\n \t So first simplify and lookup this expression to see if it\n \t is already available.  */\n-      gimple_seq stmts = NULL;\n       mprts_hook = vn_lookup_simplify_result;\n-      tree val = gimple_simplify (VIEW_CONVERT_EXPR, TREE_TYPE (op),\n-\t\t\t\t  result, &stmts, vn_valueize);\n+      code_helper rcode = VIEW_CONVERT_EXPR;\n+      tree ops[3] = { result };\n+      bool res = gimple_resimplify1 (NULL, &rcode, TREE_TYPE (op), ops,\n+\t\t\t\t     vn_valueize);\n       mprts_hook = NULL;\n-      if (!val)\n+      gimple *new_stmt = NULL;\n+      if (res\n+\t  && gimple_simplified_result_is_gimple_val (rcode, ops))\n+\t/* The expression is already available.  */\n+\tresult = ops[0];\n+      else\n \t{\n-\t  val = vn_nary_op_lookup_pieces (1, VIEW_CONVERT_EXPR,\n-\t\t\t\t\t  TREE_TYPE (op), &result, NULL);\n+\t  tree val = vn_lookup_simplify_result (rcode, TREE_TYPE (op), ops);\n \t  if (!val)\n \t    {\n-\t      val = make_ssa_name (TREE_TYPE (op));\n-\t      gimple *new_stmt = gimple_build_assign (val, VIEW_CONVERT_EXPR,\n-\t\t\t\t\t\t      build1 (VIEW_CONVERT_EXPR,\n-\t\t\t\t\t\t\t      TREE_TYPE (op),\n-\t\t\t\t\t\t\t      result));\n-\t      gimple_seq_add_stmt_without_update (&stmts, new_stmt);\n+\t      gimple_seq stmts = NULL;\n+\t      result = maybe_push_res_to_seq (rcode, TREE_TYPE (op), ops,\n+\t\t\t\t\t      &stmts);\n+\t      gcc_assert (result && gimple_seq_singleton_p (stmts));\n+\t      new_stmt = gimple_seq_first_stmt (stmts);\n \t    }\n+\t  else\n+\t    /* The expression is already available.  */\n+\t    result = val;\n \t}\n-      if (gimple_seq_empty_p (stmts))\n-\t/* The expression is already available.  */\n-\tresult = val;\n-      else\n+      if (new_stmt)\n \t{\n-\t  gcc_assert (gimple_seq_singleton_p (stmts));\n \t  /* The expression is not yet available, value-number lhs to\n \t     the new SSA_NAME we created.  */\n-\t  result = val;\n \t  /* Initialize value-number information properly.  */\n \t  VN_INFO_GET (result)->valnum = result;\n \t  VN_INFO (result)->value_id = get_next_value_id ();\n-\t  VN_INFO (result)->expr = stmts;\n+\t  gimple_seq_add_stmt_without_update (&VN_INFO (result)->expr,\n+\t\t\t\t\t      new_stmt);\n \t  VN_INFO (result)->needs_insertion = true;\n \t  /* As all \"inserted\" statements are singleton SCCs, insert\n \t     to the valid table.  This is strictly needed to\n@@ -3086,18 +3089,17 @@ visit_reference_op_load (tree lhs, tree op, gimple *stmt)\n \t  if (current_info == optimistic_info)\n \t    {\n \t      current_info = valid_info;\n-\t      vn_nary_op_insert_stmt (gimple_seq_first_stmt (stmts), result);\n+\t      vn_nary_op_insert_stmt (new_stmt, result);\n \t      current_info = optimistic_info;\n \t    }\n \t  else\n-\t    vn_nary_op_insert_stmt (gimple_seq_first_stmt (stmts), result);\n+\t    vn_nary_op_insert_stmt (new_stmt, result);\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Inserting name \");\n \t      print_generic_expr (dump_file, result, 0);\n \t      fprintf (dump_file, \" for expression \");\n-\t      print_gimple_expr (dump_file, gimple_seq_first_stmt (stmts),\n-\t\t\t\t 0, TDF_SLIM);\n+\t      print_gimple_expr (dump_file, new_stmt, 0, TDF_SLIM);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \t}"}]}