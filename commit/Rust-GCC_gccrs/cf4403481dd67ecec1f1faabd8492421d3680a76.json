{"sha": "cf4403481dd67ecec1f1faabd8492421d3680a76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y0NDAzNDgxZGQ2N2VjZWMxZjFmYWFiZDg0OTI0MjFkMzY4MGE3Ng==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-04-15T07:46:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-04-15T07:46:10Z"}, "message": "flags.h (flag_function_sections): Declare.\n\n        * flags.h (flag_function_sections): Declare.\n        * toplev.c (flag_function_sections): Define.\n        (compile_file): Add warnings when -ffunction-sections is\n        used with -g, or profiling.  Disable -ffunction-sections\n        when profiling is used.  Add warning when -ffunction-sections\n        is used on a target that doesn't support it.\n        * varasm.c (named_section): Make a copy of the section name\n        in case the original is in temporary storage.\n        (function_section): Set DECL_SECTION_NAME for each function\n        if flag_function_sections is on and the target supports it.\n        * dbxout.c (dbxout_function_end): New function.\n        (dbxout_function): Call dbxout_function_end if using extensions\n        and flag_function_sections is on.\n        * sparc/sysv4.h (ASM_OUTPUT_SECTION_NAME): Prefix a function\n        section's name with \".text%\" when -ffunction-sections.\n\nFrom-SVN: r11774", "tree": {"sha": "5ae566bfe100fa103dfabae70dc5d0eed68cc6b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ae566bfe100fa103dfabae70dc5d0eed68cc6b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf4403481dd67ecec1f1faabd8492421d3680a76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf4403481dd67ecec1f1faabd8492421d3680a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf4403481dd67ecec1f1faabd8492421d3680a76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf4403481dd67ecec1f1faabd8492421d3680a76/comments", "author": null, "committer": null, "parents": [{"sha": "7ca919b759bb26a3aadb085d6d514a3ecd672510", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ca919b759bb26a3aadb085d6d514a3ecd672510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ca919b759bb26a3aadb085d6d514a3ecd672510"}], "stats": {"total": 83, "additions": 81, "deletions": 2}, "files": [{"sha": "1c69dd5ee17443be6e95bd5862dd0b1dc3a44790", "filename": "gcc/config/sparc/sysv4.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf4403481dd67ecec1f1faabd8492421d3680a76/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf4403481dd67ecec1f1faabd8492421d3680a76/gcc%2Fconfig%2Fsparc%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsysv4.h?ref=cf4403481dd67ecec1f1faabd8492421d3680a76", "patch": "@@ -185,7 +185,8 @@ do { ASM_OUTPUT_ALIGN ((FILE), Pmode == SImode ? 2 : 3);\t\t\\\n #define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME) \\\n do {\t\t\t\t\t\t\t\t\t\\\n   if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-    fprintf (FILE, \".section\\t\\\"%s\\\",#alloc,#execinstr\\n\", (NAME));\t\\\n+    fprintf (FILE, \".section\\t\\\"%s%s\\\",#alloc,#execinstr\\n\",\t\t\\\n+\t     flag_function_sections ? \".text%\" : \"\", (NAME));\t\t\\\n   else if ((DECL) && TREE_READONLY (DECL))\t\t\t\t\\\n     fprintf (FILE, \".section\\t\\\"%s\\\",#alloc\\n\", (NAME));\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\"}, {"sha": "9831cdddc36a6fb82f45012a61acb1d5e3aedbe9", "filename": "gcc/dbxout.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf4403481dd67ecec1f1faabd8492421d3680a76/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf4403481dd67ecec1f1faabd8492421d3680a76/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=cf4403481dd67ecec1f1faabd8492421d3680a76", "patch": "@@ -438,6 +438,27 @@ abspath (rel_filename)\n }\n #endif /* 0 */\n \f\n+static int scope_labelno = 0;\n+static void\n+dbxout_function_end ()\n+{\n+  char lscope_label_name[100];\n+  /* Convert Ltext into the appropriate format for local labels in case\n+     the system doesn't insert underscores in front of user generated\n+     labels.  */\n+  ASM_GENERATE_INTERNAL_LABEL (lscope_label_name, \"Lscope\", scope_labelno);\n+  ASM_OUTPUT_INTERNAL_LABEL (asmfile, \"Lscope\", scope_labelno);\n+  scope_labelno++;\n+\n+  /* By convention, GCC will mark the end of a function with an N_FUN\n+     symbol and an empty string.  */\n+  fprintf (asmfile, \"%s \\\"\\\",%d,0,0,\", ASM_STABS_OP, N_FUN);\n+  assemble_name (asmfile, lscope_label_name);\n+  fputc ('-', asmfile);\n+  assemble_name (asmfile, XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0));\n+  fprintf (asmfile, \"-1\\n\");\n+}\n+\n /* At the beginning of compilation, start writing the symbol table.\n    Initialize `typevec' and output the standard data types of C.  */\n \n@@ -2670,5 +2691,9 @@ dbxout_function (decl)\n #ifdef DBX_OUTPUT_FUNCTION_END\n   DBX_OUTPUT_FUNCTION_END (asmfile, decl);\n #endif\n+#ifdef ASM_OUTPUT_SECTION_NAME\n+  if (flag_function_sections && use_gnu_debug_info_extensions)\n+    dbxout_function_end ();\n+#endif\n }\n #endif /* DBX_DEBUGGING_INFO */"}, {"sha": "60528ab3de18b26507b896f73a75c7aecd5c2d5d", "filename": "gcc/flags.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf4403481dd67ecec1f1faabd8492421d3680a76/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf4403481dd67ecec1f1faabd8492421d3680a76/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=cf4403481dd67ecec1f1faabd8492421d3680a76", "patch": "@@ -325,6 +325,11 @@ extern int flag_no_common;\n    needed for crtstuff.c on other systems.  */\n extern int flag_inhibit_size_directive;\n \n+/* Nonzero means place each function into its own section on those platforms\n+   which support arbitrary section names and unlimited numbers of sections.  */\n+\n+extern int flag_function_sections;\n+\n /* -fverbose-asm causes extra commentary information to be produced in\n    the generated assembly code (to make it more readable).  This option\n    is generally only of use to those who actually need to read the"}, {"sha": "2c8f9a2422349f18a5307d791fc7eb370cdd6b87", "filename": "gcc/toplev.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf4403481dd67ecec1f1faabd8492421d3680a76/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf4403481dd67ecec1f1faabd8492421d3680a76/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=cf4403481dd67ecec1f1faabd8492421d3680a76", "patch": "@@ -403,6 +403,11 @@ int flag_no_function_cse = 0;\n \n int flag_omit_frame_pointer = 0;\n \n+/* Nonzero means place each function into its own section on those platforms\n+   which support arbitrary section names and unlimited numbers of sections.  */\n+\n+int flag_function_sections = 0;\n+\n /* Nonzero to inhibit use of define_optimization peephole opts.  */\n \n int flag_no_peephole = 0;\n@@ -564,6 +569,7 @@ struct { char *string; int *variable; int on_value;} f_options[] =\n   {\"fast-math\", &flag_fast_math, 1},\n   {\"common\", &flag_no_common, 0},\n   {\"inhibit-size-directive\", &flag_inhibit_size_directive, 1},\n+  {\"function-sections\", &flag_function_sections, 1},\n   {\"verbose-asm\", &flag_verbose_asm, 1},\n   {\"gnu-linker\", &flag_gnu_linker, 1},\n   {\"pack-struct\", &flag_pack_struct, 1},\n@@ -2187,6 +2193,24 @@ compile_file (name)\n   ASM_IDENTIFY_LANGUAGE (asm_out_file);\n #endif\n \n+#ifndef ASM_OUTPUT_SECTION_NAME\n+  if (flag_function_sections)\n+    {\n+      warning (\"-ffunction-sections not supported for this target.\");\n+      flag_function_sections = 0;\n+    }\n+#endif\n+\n+  if (flag_function_sections\n+      && (profile_flag || profile_block_flag))\n+    {\n+      warning (\"-ffunction-sections disabled; it makes profiling impossible.\");\n+      flag_function_sections = 0;\n+    }\n+\n+  if (flag_function_sections && write_symbols != NO_DEBUG)\n+    warning (\"-ffunction-sections may affect debugging on some targets.\");\n+\n   if (output_bytecode)\n     {\n       if (profile_flag || profile_block_flag)"}, {"sha": "cc60f03fec1d4ae04db7aac7376fcb928329cd08", "filename": "gcc/varasm.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf4403481dd67ecec1f1faabd8492421d3680a76/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf4403481dd67ecec1f1faabd8492421d3680a76/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=cf4403481dd67ecec1f1faabd8492421d3680a76", "patch": "@@ -255,7 +255,8 @@ named_section (decl, name)\n \n   if (in_section != in_named || strcmp (name, in_named_name))\n     {\n-      in_named_name = name;\n+      in_named_name = obstack_alloc (&permanent_obstack, strlen (name) + 1);\n+      strcpy (in_named_name, name);\n       in_section = in_named;\n     \n #ifdef ASM_OUTPUT_SECTION_NAME\n@@ -349,6 +350,29 @@ void\n function_section (decl)\n      tree decl;\n {\n+\n+#ifdef ASM_OUTPUT_SECTION_NAME\n+  /* If we are placing functions into their own sections, and this\n+     function doesn't already have a section specified, set it now.  */\n+  if (flag_function_sections\n+      && decl != NULL_TREE\n+      && DECL_SECTION_NAME (decl) == NULL_TREE)\n+    {\n+      int len;\n+      char *string;\n+\n+      len = IDENTIFIER_LENGTH (DECL_ASSEMBLER_NAME (decl)) + 1;\n+      string = alloca (len);\n+      strcpy (string, IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)));\n+\n+      /* Strip off any encoding in fnname.  */\n+      STRIP_NAME_ENCODING (string, string);\n+\n+      /* Set DECL_SECTION_NAME.  */\n+      DECL_SECTION_NAME (decl) = build_string (len, string);\n+    }\n+#endif\n+\n   if (decl != NULL_TREE\n       && DECL_SECTION_NAME (decl) != NULL_TREE)\n     named_section (decl, (char *) 0);"}]}