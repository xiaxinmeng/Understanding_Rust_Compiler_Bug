{"sha": "46994828ef5e85aab972e70cb955998c6bc8d0eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY5OTQ4MjhlZjVlODVhYWI5NzJlNzBjYjk1NTk5OGM2YmM4ZDBlYg==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2009-03-25T17:41:58Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2009-03-25T17:41:58Z"}, "message": "invoke.texi (-mconsole): New.\n\n2009-03-25  Kai Tietz  <kai.tietz@onevision.com>\n\n        PR/39518\n        * doc/invoke.texi (-mconsole): New.\n        (-mcygwin): New.\n        (-mno-cygwin): New.\n        (-mdll): New.\n        (-mnop-fun-dllimport): New.\n        (-mthread): New.\n        (-mwin32): New.\n        (-mwindows): New.\n        (sub section \"i386 and x86-64 Windows Options\"): New.\n\nFrom-SVN: r145070", "tree": {"sha": "3a27656807eb42cf680bf7b2b372d09c0618c0a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a27656807eb42cf680bf7b2b372d09c0618c0a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46994828ef5e85aab972e70cb955998c6bc8d0eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46994828ef5e85aab972e70cb955998c6bc8d0eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46994828ef5e85aab972e70cb955998c6bc8d0eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46994828ef5e85aab972e70cb955998c6bc8d0eb/comments", "author": null, "committer": null, "parents": [{"sha": "4ba8a4cb63bb75fd679f903fae35dd562e586d19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ba8a4cb63bb75fd679f903fae35dd562e586d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ba8a4cb63bb75fd679f903fae35dd562e586d19"}], "stats": {"total": 87, "additions": 83, "deletions": 4}, "files": [{"sha": "1b7d9028a8605091c2d0a1a95e572e9b69df5c34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46994828ef5e85aab972e70cb955998c6bc8d0eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46994828ef5e85aab972e70cb955998c6bc8d0eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46994828ef5e85aab972e70cb955998c6bc8d0eb", "patch": "@@ -1,3 +1,16 @@\n+2009-03-25  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\tPR/39518\n+\t* doc/invoke.texi (-mconsole): New.\n+\t(-mcygwin): New.\n+\t(-mno-cygwin): New.\n+\t(-mdll): New.\n+\t(-mnop-fun-dllimport): New.\n+\t(-mthread): New.\n+\t(-mwin32): New.\n+\t(-mwindows): New.\n+\t(sub section \"i386 and x86-64 Windows Options\"): New.\n+\n 2009-03-25  Ralf Cors\u00e9pius <ralf.corsepius@rtems.org>\n \n \t* config/arm/rtems-elf.h: Remove LINK_GCC_C_SEQUENCE_SPEC."}, {"sha": "31739fc9539d66fdd640d01fc48a4e2f3e41b4d5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 70, "deletions": 4, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46994828ef5e85aab972e70cb955998c6bc8d0eb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46994828ef5e85aab972e70cb955998c6bc8d0eb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=46994828ef5e85aab972e70cb955998c6bc8d0eb", "patch": "@@ -826,6 +826,10 @@ See RS/6000 and PowerPC Options.\n @emph{x86-64 Options}\n See i386 and x86-64 Options.\n \n+@emph{i386 and x86-64 Windows Options}\n+@gccoptlist{-mconsole -mcygwin -mno-cygwin -mdll\n+-mnop-fun-dllimport -mthread -mwin32 -mwindows}\n+\n @emph{Xstormy16 Options}\n @gccoptlist{-msim}\n \n@@ -8827,6 +8831,7 @@ platform.\n * H8/300 Options::\n * HPPA Options::\n * i386 and x86-64 Options::\n+* i386 and x86-64 Windows Options::\n * IA-64 Options::\n * M32C Options::\n * M32R/D Options::\n@@ -9140,10 +9145,6 @@ long_calls_off} directive.  Note these switches have no effect on how\n the compiler generates code to handle function calls via function\n pointers.\n \n-@item -mnop-fun-dllimport\n-@opindex mnop-fun-dllimport\n-Disable support for the @code{dllimport} attribute.\n-\n @item -msingle-pic-base\n @opindex msingle-pic-base\n Treat the register used for PIC addressing as read-only, rather than\n@@ -15470,6 +15471,71 @@ is defined for compatibility with Diab.\n \n These are listed under @xref{i386 and x86-64 Options}.\n \n+@node i386 and x86-64 Windows Options\n+@subsection i386 and x86-64 Windows Options\n+@cindex i386 and x86-64 Windows Options\n+\n+These additional options are available for Windows targets:\n+\n+@table @gcctabopt\n+@item -mconsole\n+@opindex mconsole\n+This option is available for Cygwin and MinGW targets.  It\n+specifies that a console application is to be generated, by\n+instructing the linker to set the PE header subsystem type\n+required for console applications.\n+This is the default behaviour for Cygwin and MinGW targets.\n+\n+@item -mcygwin\n+@opindex mcygwin\n+This option is available for Cygwin targets.  It specifies that\n+the Cygwin internal interface is to be used for predefined\n+preprocessor macros, C runtime libraries and related linker\n+paths and options.  For Cygwin targets this is the default behaviour.\n+This option is deprecated and will be removed in a future release.\n+\n+@item -mno-cygwin\n+@opindex mno-cygwin\n+This option is available for Cygwin targets.  It specifies that\n+the MinGW internal interface is to be used instead of Cygwin's, by\n+setting MinGW-related predefined macros and linker paths and default\n+library options.\n+This option is deprecated and will be removed in a future release.\n+\n+@item -mdll\n+@opindex mdll\n+This option is available for Cygwin and MinGW targets.  It\n+specifies that a DLL - a dynamic link library - is to be\n+generated, enabling the selection of the required runtime\n+startup object and entry point.\n+\n+@item -mnop-fun-dllimport\n+@opindex mnop-fun-dllimport\n+This option is available for Cygwin and MinGW targets.  It\n+specifies that the dllimport attribute should be ignored.\n+\n+@item -mthread\n+@opindex mthread\n+This option is available for MinGW targets. It specifies\n+that MinGW-specific thread support is to be used.\n+\n+@item -mwin32\n+@opindex mwin32\n+This option is available for Cygwin and MinGW targets.  It\n+specifies that the typical Windows pre-defined macros are to\n+be set in the pre-processor, but does not influence the choice\n+of runtime library/startup code.\n+\n+@item -mwindows\n+@opindex mwindows\n+This option is available for Cygwin and MinGW targets.  It\n+specifies that a GUI application is to be generated by\n+instructing the linker to set the PE header subsystem type\n+appropriately.\n+@end table\n+\n+See also under @xref{i386 and x86-64 Options} for standard options.\n+\n @node Xstormy16 Options\n @subsection Xstormy16 Options\n @cindex Xstormy16 Options"}]}