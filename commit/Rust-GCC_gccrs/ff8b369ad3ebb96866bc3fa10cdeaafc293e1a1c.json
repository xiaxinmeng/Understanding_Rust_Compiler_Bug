{"sha": "ff8b369ad3ebb96866bc3fa10cdeaafc293e1a1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4YjM2OWFkM2ViYjk2ODY2YmMzZmExMGNkZWFhZmMyOTNlMWExYw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2004-12-06T16:07:57Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2004-12-06T16:07:57Z"}, "message": "bt-load.c (btr_def_s): New member own_end;\n\n\t* bt-load.c (btr_def_s): New member own_end;\n\t(add_btr_to_live_range): Add second parameter.  Changed caller.\n\t(clear_btr_from_live_range): Clear btrs_live_at_end bit\n\tfor the register its definition basic block if own_end is set.\n\t(augment_live_range): Also take btrs_live_at_end into account.\n\t(combine_btr_defs): Don't bother with\n\tother_def->other_btr_uses_after_use if it pertains to a different\n\tregister.\n\t(move_btr_def): Set def->other_btr_uses_before_def after\n\tcalling combine_btr_defs.\"\n\n\t* bt-load.c (augment_live_range): New argument full_range.\n\tChanged all callers.\n\n\t* bt-load.c (move_tr_def): Set other_tr_uses_before_def\n\ttaking new btr assignment into account.\n\nFrom-SVN: r91780", "tree": {"sha": "9ec453156c67cb3f9ea55c056c47598fb9008aac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ec453156c67cb3f9ea55c056c47598fb9008aac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff8b369ad3ebb96866bc3fa10cdeaafc293e1a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff8b369ad3ebb96866bc3fa10cdeaafc293e1a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff8b369ad3ebb96866bc3fa10cdeaafc293e1a1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff8b369ad3ebb96866bc3fa10cdeaafc293e1a1c/comments", "author": null, "committer": null, "parents": [{"sha": "e21cb773e5cce006984def7d2a35f1bd71ebb65b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e21cb773e5cce006984def7d2a35f1bd71ebb65b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e21cb773e5cce006984def7d2a35f1bd71ebb65b"}], "stats": {"total": 92, "additions": 73, "deletions": 19}, "files": [{"sha": "6cc24b7b1b2e23c58cf585e7b601849ea7ae18c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8b369ad3ebb96866bc3fa10cdeaafc293e1a1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8b369ad3ebb96866bc3fa10cdeaafc293e1a1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff8b369ad3ebb96866bc3fa10cdeaafc293e1a1c", "patch": "@@ -1,3 +1,22 @@\n+2004-12-06  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\t* bt-load.c (btr_def_s): New member own_end;\n+\t(add_btr_to_live_range): Add second parameter.  Changed caller.\n+\t(clear_btr_from_live_range): Clear btrs_live_at_end bit\n+\tfor the register its definition basic block if own_end is set.\n+\t(augment_live_range): Also take btrs_live_at_end into account.\n+\t(combine_btr_defs): Don't bother with\n+\tother_def->other_btr_uses_after_use if it pertains to a different\n+\tregister.\n+\t(move_btr_def): Set def->other_btr_uses_before_def after \n+\tcalling combine_btr_defs.\"\n+\t\n+\t* bt-load.c (augment_live_range): New argument full_range.\n+\tChanged all callers.\n+\n+\t* bt-load.c (move_tr_def): Set other_tr_uses_before_def\n+\ttaking new btr assignment into account.\n+\n 2004-12-05  Daniel Berlin <dberlin@dberlin.org>\n \n \t* tree-ssa-alias.c (create_global_var): Use void_type_node,"}, {"sha": "c3bc3fab54223e76a96d25f41a1696cb9cec2713", "filename": "gcc/bt-load.c", "status": "modified", "additions": 54, "deletions": 19, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff8b369ad3ebb96866bc3fa10cdeaafc293e1a1c/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff8b369ad3ebb96866bc3fa10cdeaafc293e1a1c/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=ff8b369ad3ebb96866bc3fa10cdeaafc293e1a1c", "patch": "@@ -98,6 +98,10 @@ typedef struct btr_def_s\n      as appropriate.  */\n   char other_btr_uses_before_def;\n   char other_btr_uses_after_use;\n+  /* We set own_end when we have moved a definition into a dominator.\n+     Thus, when a later combination removes this definition again, we know\n+     to clear out trs_live_at_end again.  */\n+  char own_end;\n   bitmap live_range;\n } *btr_def;\n \n@@ -123,9 +127,9 @@ static void link_btr_uses (btr_def *, btr_user *, sbitmap *, sbitmap *, int);\n static void build_btr_def_use_webs (fibheap_t);\n static int block_at_edge_of_live_range_p (int, btr_def);\n static void clear_btr_from_live_range (btr_def def);\n-static void add_btr_to_live_range (btr_def);\n+static void add_btr_to_live_range (btr_def, int);\n static void augment_live_range (bitmap, HARD_REG_SET *, basic_block,\n-\t\t\t\tbasic_block);\n+\t\t\t\tbasic_block, int);\n static int choose_btr (HARD_REG_SET);\n static void combine_btr_defs (btr_def, HARD_REG_SET *);\n static void btr_def_live_range (btr_def, HARD_REG_SET *);\n@@ -832,14 +836,18 @@ clear_btr_from_live_range (btr_def def)\n \t    dump_btrs_live (bb);\n \t}\n     }\n+ if (def->own_end)\n+   CLEAR_HARD_REG_BIT (btrs_live_at_end[def->bb->index], def->btr);\n }\n \n \n /* We are adding the def/use web DEF.  Add the target register used\n    in this web to the live set of all of the basic blocks that contain\n-   the live range of the web.  */\n+   the live range of the web.\n+   If OWN_END is set, also show that the register is live from our\n+   definitions at the end of the basic block where it is defined.  */\n static void\n-add_btr_to_live_range (btr_def def)\n+add_btr_to_live_range (btr_def def, int own_end)\n {\n   unsigned bb;\n   bitmap_iterator bi;\n@@ -851,6 +859,11 @@ add_btr_to_live_range (btr_def def)\n       if (dump_file)\n \tdump_btrs_live (bb);\n     }\n+  if (own_end)\n+    {\n+      SET_HARD_REG_BIT (btrs_live_at_end[def->bb->index], def->btr);\n+      def->own_end = 1;\n+    }\n }\n \n /* Update a live range to contain the basic block NEW_BLOCK, and all\n@@ -859,19 +872,30 @@ add_btr_to_live_range (btr_def def)\n    all other blocks in the existing live range.\n    Also add to the set BTRS_LIVE_IN_RANGE all target registers that\n    are live in the blocks that we add to the live range.\n+   If FULL_RANGE is set, include the full live range of NEW_BB;\n+   otherwise, if NEW_BB dominates HEAD_BB, only add registers that\n+   are life at the end of NEW_BB for NEW_BB itself.\n    It is a precondition that either NEW_BLOCK dominates HEAD,or\n    HEAD dom NEW_BLOCK.  This is used to speed up the\n    implementation of this function.  */\n static void\n augment_live_range (bitmap live_range, HARD_REG_SET *btrs_live_in_range,\n-\t\t    basic_block head_bb, basic_block new_bb)\n+\t\t    basic_block head_bb, basic_block new_bb, int full_range)\n {\n   basic_block *worklist, *tos;\n \n   tos = worklist = xmalloc (sizeof (basic_block) * (n_basic_blocks + 1));\n \n   if (dominated_by_p (CDI_DOMINATORS, new_bb, head_bb))\n-    *tos++ = new_bb;\n+    {\n+      if (new_bb == head_bb)\n+\t{\n+\t  if (full_range)\n+\t    IOR_HARD_REG_SET (*btrs_live_in_range, btrs_live[new_bb->index]);\n+\t  return;\n+\t}\n+      *tos++ = new_bb;\n+    }\n   else\n     {\n       edge e;\n@@ -880,14 +904,14 @@ augment_live_range (bitmap live_range, HARD_REG_SET *btrs_live_in_range,\n \n       gcc_assert (dominated_by_p (CDI_DOMINATORS, head_bb, new_bb));\n   \n+      IOR_HARD_REG_SET (*btrs_live_in_range, btrs_live[head_bb->index]);\n       bitmap_set_bit (live_range, new_block);\n-      if (flag_btr_bb_exclusive)\n+      /* A previous btr migration could have caused a register to be\n+        live just at the end of new_block which we need in full, so\n+        use trs_live_at_end even if full_range is set.  */\n+      IOR_HARD_REG_SET (*btrs_live_in_range, btrs_live_at_end[new_block]);\n+      if (full_range)\n \tIOR_HARD_REG_SET (*btrs_live_in_range, btrs_live[new_block]);\n-      else\n-\t{\n-\t  IOR_HARD_REG_SET (*btrs_live_in_range, btrs_live_at_end[new_block]);\n-\t  IOR_HARD_REG_SET (*btrs_live_in_range, btrs_live[head_bb->index]);\n-\t}\n       if (dump_file)\n \t{\n \t  fprintf (dump_file,\n@@ -912,6 +936,10 @@ augment_live_range (bitmap live_range, HARD_REG_SET *btrs_live_in_range,\n \t  bitmap_set_bit (live_range, bb->index);\n \t  IOR_HARD_REG_SET (*btrs_live_in_range,\n \t    btrs_live[bb->index]);\n+\t  /* A previous btr migration could have caused a register to be\n+\t     live just at the end of a block which we need in full.  */\n+\t  IOR_HARD_REG_SET (*btrs_live_in_range,\n+\t    btrs_live_at_end[bb->index]);\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file,\n@@ -977,7 +1005,10 @@ btr_def_live_range (btr_def def, HARD_REG_SET *btrs_live_in_range)\n \n       for (user = def->uses; user != NULL; user = user->next)\n \taugment_live_range (def->live_range, btrs_live_in_range,\n-\t\t\t    def->bb, user->bb);\n+\t\t\t    def->bb, user->bb,\n+\t\t\t    (flag_btr_bb_exclusive\n+\t\t\t     || user->insn != BB_END (def->bb)\n+\t\t\t     || GET_CODE (user->insn) != JUMP_INSN));\n     }\n   else\n     {\n@@ -1038,7 +1069,10 @@ combine_btr_defs (btr_def def, HARD_REG_SET *btrs_live_in_range)\n \n \t  for (user = other_def->uses; user != NULL; user = user->next)\n \t    augment_live_range (combined_live_range, &combined_btrs_live,\n-\t\t\t\tdef->bb, user->bb);\n+\t\t\t\tdef->bb, user->bb,\n+\t\t\t\t(flag_btr_bb_exclusive\n+\t\t\t\t || user->insn != BB_END (def->bb)\n+\t\t\t\t || GET_CODE (user->insn) != JUMP_INSN));\n \n \t  btr = choose_btr (combined_btrs_live);\n \t  if (btr != -1)\n@@ -1072,7 +1106,7 @@ combine_btr_defs (btr_def def, HARD_REG_SET *btrs_live_in_range)\n \t      clear_btr_from_live_range (other_def);\n \t      other_def->uses = NULL;\n \t      bitmap_copy (def->live_range, combined_live_range);\n-\t      if (other_def->other_btr_uses_after_use)\n+\t      if (other_def->btr == btr && other_def->other_btr_uses_after_use)\n \t\tdef->other_btr_uses_after_use = 1;\n \t      COPY_HARD_REG_SET (*btrs_live_in_range, combined_btrs_live);\n \n@@ -1119,12 +1153,12 @@ move_btr_def (basic_block new_def_bb, int btr, btr_def def, bitmap live_range,\n   def->bb = new_def_bb;\n   def->luid = 0;\n   def->cost = basic_block_freq (new_def_bb);\n-  def->other_btr_uses_before_def\n-    = TEST_HARD_REG_BIT (btrs_live[b->index], btr) ? 1 : 0;\n   bitmap_copy (def->live_range, live_range);\n   combine_btr_defs (def, btrs_live_in_range);\n   btr = def->btr;\n-  add_btr_to_live_range (def);\n+  def->other_btr_uses_before_def\n+    = TEST_HARD_REG_BIT (btrs_live[b->index], btr) ? 1 : 0;\n+  add_btr_to_live_range (def, 1);\n   if (LABEL_P (insp))\n     insp = NEXT_INSN (insp);\n   /* N.B.: insp is expected to be NOTE_INSN_BASIC_BLOCK now.  Some\n@@ -1292,7 +1326,8 @@ migrate_btr_def (btr_def def, int min_cost)\n \t  || (try_freq == def_basic_block_freq && btr_used_near_def))\n \t{\n \t  int btr;\n-\t  augment_live_range (live_range, &btrs_live_in_range, def->bb, try);\n+\t  augment_live_range (live_range, &btrs_live_in_range, def->bb, try,\n+\t\t\t      flag_btr_bb_exclusive);\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file, \"Now btrs live in range are: \");"}]}