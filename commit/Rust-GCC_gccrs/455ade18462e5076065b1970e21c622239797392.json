{"sha": "455ade18462e5076065b1970e21c622239797392", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU1YWRlMTg0NjJlNTA3NjA2NWIxOTcwZTIxYzYyMjIzOTc5NzM5Mg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-27T15:16:50Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-28T21:37:18Z"}, "message": "c++: Deprecate arithmetic convs on different enums [PR97573]\n\nI noticed that C++20 P1120R0 deprecated certain arithmetic conversions\nas outlined in [depr.arith.conv.enum], but we don't warn about them.  In\nparticular, \"If one operand is of enumeration type and the other operand\nis of a different enumeration type or a floating-point type, this\nbehavior is deprecated.\"  These will likely become ill-formed in C++23,\nso we should warn by default in C++20.  To this effect, this patch adds\ntwo new warnings (like clang++): -Wdeprecated-enum-enum-conversion and\n-Wdeprecated-enum-float-conversion.  They are enabled by default in\nC++20.  In older dialects, to enable these warnings you can now use\n-Wenum-conversion which I made available in C++ too.  Note that unlike\nC, in C++ it is not enabled by -Wextra, because that breaks bootstrap.\n\nWe already warn about comparisons of two different enumeration types via\n-Wenum-compare, the rest is handled in this patch: we're performing the\nusual arithmetic conversions in these contexts:\n  - an arithmetic operation,\n  - a bitwise operation,\n  - a comparison,\n  - a conditional operator,\n  - a compound assign operator.\n\nUsing the spaceship operator as enum <=> real_type is ill-formed but we\ndon't reject it yet.  We should also address [depr.array.comp] too, but\nit's not handled in this patch.\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/97573\n\t* c-opts.c (c_common_post_options): In C++20, turn on\n\t-Wdeprecated-enum-enum-conversion and\n\t-Wdeprecated-enum-float-conversion.\n\t* c.opt (Wdeprecated-enum-enum-conversion,\n\tWdeprecated-enum-float-conversion): New options.\n\t(Wenum-conversion): Allow for C++ too.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97573\n\t* call.c (build_conditional_expr_1): Warn about the deprecated\n\tenum/real type conversion in C++20.  Also warn about a non-enumerated\n\tand enumerated type in ?: when -Wenum-conversion is on.\n\t* typeck.c (do_warn_enum_conversions): New function.\n\t(cp_build_binary_op): Call it.\n\ngcc/ChangeLog:\n\n\tPR c++/97573\n\t* doc/invoke.texi: Document -Wdeprecated-enum-enum-conversion\n\tand -Wdeprecated-enum-float-conversion.  -Wenum-conversion is\n\tno longer C/ObjC only.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97573\n\t* g++.dg/cpp0x/linkage2.C: Add dg-warning.\n\t* g++.dg/parse/attr3.C: Likewise.\n\t* g++.dg/cpp2a/enum-conv1.C: New test.\n\t* g++.dg/cpp2a/enum-conv2.C: New test.\n\t* g++.dg/cpp2a/enum-conv3.C: New test.", "tree": {"sha": "6c9102f582ccec98f6ac8528ec420b76bdcbcddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c9102f582ccec98f6ac8528ec420b76bdcbcddb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/455ade18462e5076065b1970e21c622239797392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/455ade18462e5076065b1970e21c622239797392", "html_url": "https://github.com/Rust-GCC/gccrs/commit/455ade18462e5076065b1970e21c622239797392", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/455ade18462e5076065b1970e21c622239797392/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "976e7ef1a2d54f46021f74d071d9fdb9631298f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976e7ef1a2d54f46021f74d071d9fdb9631298f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/976e7ef1a2d54f46021f74d071d9fdb9631298f8"}], "stats": {"total": 566, "additions": 549, "deletions": 17}, "files": [{"sha": "120f4489f6cf14ec2b06749c4965296d13a8928f", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455ade18462e5076065b1970e21c622239797392/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455ade18462e5076065b1970e21c622239797392/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=455ade18462e5076065b1970e21c622239797392", "patch": "@@ -925,6 +925,16 @@ c_common_post_options (const char **pfilename)\n   SET_OPTION_IF_UNSET (&global_options, &global_options_set, warn_volatile,\n \t\t       cxx_dialect >= cxx20 && warn_deprecated);\n \n+  /* -Wdeprecated-enum-enum-conversion is enabled by default in C++20.  */\n+  SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t       warn_deprecated_enum_enum_conv,\n+\t\t       cxx_dialect >= cxx20 && warn_deprecated);\n+\n+  /* -Wdeprecated-enum-float-conversion is enabled by default in C++20.  */\n+  SET_OPTION_IF_UNSET (&global_options, &global_options_set,\n+\t\t       warn_deprecated_enum_float_conv,\n+\t\t       cxx_dialect >= cxx20 && warn_deprecated);\n+\n   /* Declone C++ 'structors if -Os.  */\n   if (flag_declone_ctor_dtor == -1)\n     flag_declone_ctor_dtor = optimize_size;"}, {"sha": "10e53ea67c90191d72928eaf787ff92371b5e8f2", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455ade18462e5076065b1970e21c622239797392/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455ade18462e5076065b1970e21c622239797392/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=455ade18462e5076065b1970e21c622239797392", "patch": "@@ -518,6 +518,15 @@ C++ ObjC++ Var(warn_deprecated_copy, 2) Warning\n Mark implicitly-declared copy operations as deprecated if the class has a\n user-provided copy operation or destructor.\n \n+Wdeprecated-enum-enum-conversion\n+C++ ObjC++ Var(warn_deprecated_enum_enum_conv) Warning\n+Warn about deprecated arithmetic conversions on operands of enumeration types.\n+\n+Wdeprecated-enum-float-conversion\n+C++ ObjC++ Var(warn_deprecated_enum_float_conv) Warning\n+Warn about deprecated arithmetic conversions on operands where one is of enumeration\n+type and the other is of a floating-point type.\n+\n Wdesignated-init\n C ObjC Var(warn_designated_init) Init(1) Warning\n Warn about positional initialization of structs requiring designated initializers.\n@@ -559,7 +568,7 @@ C ObjC C++ ObjC++ Var(warn_enum_compare) Init(-1) Warning LangEnabledBy(C ObjC,W\n Warn about comparison of different enum types.\n \n Wenum-conversion\n-C ObjC Var(warn_enum_conversion) Init(0) Warning LangEnabledBy(C ObjC,Wextra)\n+C ObjC C++ ObjC++ Var(warn_enum_conversion) Init(0) Warning LangEnabledBy(C ObjC,Wextra)\n Warn about implicit conversion of enum types.\n \n Werror"}, {"sha": "9861be1f8561dfa1983c90c76a3c9217ac8ef62d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455ade18462e5076065b1970e21c622239797392/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455ade18462e5076065b1970e21c622239797392/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=455ade18462e5076065b1970e21c622239797392", "patch": "@@ -5643,17 +5643,40 @@ build_conditional_expr_1 (const op_location_t &loc,\n \t\t\t\"in conditional expression: %qT vs %qT\",\n \t\t\targ2_type, arg3_type);\n         }\n-      else if (extra_warnings\n+      else if ((complain & tf_warning)\n+\t       && warn_deprecated_enum_float_conv\n+\t       && ((TREE_CODE (arg2_type) == ENUMERAL_TYPE\n+\t\t    && TREE_CODE (arg3_type) == REAL_TYPE)\n+\t\t   || (TREE_CODE (arg2_type) == REAL_TYPE\n+\t\t       && TREE_CODE (arg3_type) == ENUMERAL_TYPE)))\n+\t{\n+\t  if (TREE_CODE (arg2_type) == ENUMERAL_TYPE)\n+\t    warning_at (loc, OPT_Wdeprecated_enum_float_conversion,\n+\t\t\t\"conditional expression between enumeration type \"\n+\t\t\t\"%qT and floating-point type %qT is deprecated\",\n+\t\t\targ2_type, arg3_type);\n+\t  else\n+\t    warning_at (loc, OPT_Wdeprecated_enum_float_conversion,\n+\t\t\t\"conditional expression between floating-point \"\n+\t\t\t\"type %qT and enumeration type %qT is deprecated\",\n+\t\t\targ2_type, arg3_type);\n+\t}\n+      else if ((extra_warnings || warn_enum_conversion)\n \t       && ((TREE_CODE (arg2_type) == ENUMERAL_TYPE\n \t\t    && !same_type_p (arg3_type, type_promotes_to (arg2_type)))\n \t\t   || (TREE_CODE (arg3_type) == ENUMERAL_TYPE\n \t\t       && !same_type_p (arg2_type,\n \t\t\t\t\ttype_promotes_to (arg3_type)))))\n-        {\n-          if (complain & tf_warning)\n-\t    warning_at (loc, OPT_Wextra, \"enumerated and non-enumerated \"\n-\t\t\t\"type in conditional expression\");\n-        }\n+\t{\n+\t  if (complain & tf_warning)\n+\t    {\n+\t      enum opt_code opt = (warn_enum_conversion\n+\t\t\t\t   ? OPT_Wenum_conversion\n+\t\t\t\t   : OPT_Wextra);\n+\t      warning_at (loc, opt, \"enumerated and \"\n+\t\t\t  \"non-enumerated type in conditional expression\");\n+\t    }\n+\t}\n \n       arg2 = perform_implicit_conversion (result_type, arg2, complain);\n       arg3 = perform_implicit_conversion (result_type, arg3, complain);"}, {"sha": "7305310ecbe1fc1a59e22bf896027edc1faffef2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 107, "deletions": 5, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455ade18462e5076065b1970e21c622239797392/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455ade18462e5076065b1970e21c622239797392/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=455ade18462e5076065b1970e21c622239797392", "patch": "@@ -4428,6 +4428,104 @@ warn_for_null_address (location_t location, tree op, tsubst_flags_t complain)\n     }\n }\n \n+/* Warn about [expr.arith.conv]/2: If one operand is of enumeration type and\n+   the other operand is of a different enumeration type or a floating-point\n+   type, this behavior is deprecated ([depr.arith.conv.enum]).  CODE is the\n+   code of the binary operation, TYPE0 and TYPE1 are the types of the operands,\n+   and LOC is the location for the whole binary expression.\n+   TODO: Consider combining this with -Wenum-compare in build_new_op_1.  */\n+\n+static void\n+do_warn_enum_conversions (location_t loc, enum tree_code code, tree type0,\n+\t\t\t  tree type1)\n+{\n+  if (TREE_CODE (type0) == ENUMERAL_TYPE\n+      && TREE_CODE (type1) == ENUMERAL_TYPE\n+      && TYPE_MAIN_VARIANT (type0) != TYPE_MAIN_VARIANT (type1))\n+    {\n+      /* In C++20, -Wdeprecated-enum-enum-conversion is on by default.\n+\t Otherwise, warn if -Wenum-conversion is on.  */\n+      enum opt_code opt;\n+      if (warn_deprecated_enum_enum_conv)\n+\topt = OPT_Wdeprecated_enum_enum_conversion;\n+      else if (warn_enum_conversion)\n+\topt = OPT_Wenum_conversion;\n+      else\n+\treturn;\n+\n+      switch (code)\n+\t{\n+\tcase GT_EXPR:\n+\tcase LT_EXPR:\n+\tcase GE_EXPR:\n+\tcase LE_EXPR:\n+\tcase EQ_EXPR:\n+\tcase NE_EXPR:\n+\t  /* Comparisons are handled by -Wenum-compare.  */\n+\t  return;\n+\tcase SPACESHIP_EXPR:\n+\t  /* This is invalid, don't warn.  */\n+\t  return;\n+\tcase BIT_AND_EXPR:\n+\tcase BIT_IOR_EXPR:\n+\tcase BIT_XOR_EXPR:\n+\t  warning_at (loc, opt, \"bitwise operation between different \"\n+\t\t      \"enumeration types %qT and %qT is deprecated\",\n+\t\t      type0, type1);\n+\t  return;\n+\tdefault:\n+\t  warning_at (loc, opt, \"arithmetic between different enumeration \"\n+\t\t      \"types %qT and %qT is deprecated\", type0, type1);\n+\t  return;\n+\t}\n+    }\n+  else if ((TREE_CODE (type0) == ENUMERAL_TYPE\n+\t    && TREE_CODE (type1) == REAL_TYPE)\n+\t   || (TREE_CODE (type0) == REAL_TYPE\n+\t       && TREE_CODE (type1) == ENUMERAL_TYPE))\n+    {\n+      const bool enum_first_p = TREE_CODE (type0) == ENUMERAL_TYPE;\n+      /* In C++20, -Wdeprecated-enum-float-conversion is on by default.\n+\t Otherwise, warn if -Wenum-conversion is on.  */\n+      enum opt_code opt;\n+      if (warn_deprecated_enum_float_conv)\n+\topt = OPT_Wdeprecated_enum_float_conversion;\n+      else if (warn_enum_conversion)\n+\topt = OPT_Wenum_conversion;\n+      else\n+\treturn;\n+\n+      switch (code)\n+\t{\n+\tcase GT_EXPR:\n+\tcase LT_EXPR:\n+\tcase GE_EXPR:\n+\tcase LE_EXPR:\n+\tcase EQ_EXPR:\n+\tcase NE_EXPR:\n+\t  if (enum_first_p)\n+\t    warning_at (loc, opt, \"comparison of enumeration type %qT with \"\n+\t\t\t\"floating-point type %qT is deprecated\",\n+\t\t\ttype0, type1);\n+\t  else\n+\t    warning_at (loc, opt, \"comparison of floating-point type %qT \"\n+\t\t\t\"with enumeration type %qT is deprecated\",\n+\t\t\ttype0, type1);\n+\t  return;\n+\tdefault:\n+\t  if (enum_first_p)\n+\t    warning_at (loc, opt, \"arithmetic between enumeration type %qT \"\n+\t\t\t\"and floating-point type %qT is deprecated\",\n+\t\t\ttype0, type1);\n+\t  else\n+\t    warning_at (loc, opt, \"arithmetic between floating-point type %qT \"\n+\t\t\t\"and enumeration type %qT is deprecated\",\n+\t\t\ttype0, type1);\n+\t  return;\n+\t}\n+    }\n+}\n+\n /* Build a binary-operation expression without default conversions.\n    CODE is the kind of expression to build.\n    LOCATION is the location_t of the operator in the source code.\n@@ -5445,11 +5543,15 @@ cp_build_binary_op (const op_location_t &location,\n     {\n       result_type = cp_common_type (type0, type1);\n       if (complain & tf_warning)\n-\tdo_warn_double_promotion (result_type, type0, type1,\n-\t\t\t\t  \"implicit conversion from %qH to %qI \"\n-\t\t\t\t  \"to match other operand of binary \"\n-\t\t\t\t  \"expression\",\n-\t\t\t\t  location);\n+\t{\n+\t  do_warn_double_promotion (result_type, type0, type1,\n+\t\t\t\t    \"implicit conversion from %qH to %qI \"\n+\t\t\t\t    \"to match other operand of binary \"\n+\t\t\t\t    \"expression\",\n+\t\t\t\t    location);\n+\t  do_warn_enum_conversions (location, code, TREE_TYPE (orig_op0),\n+\t\t\t\t    TREE_TYPE (orig_op1));\n+\t}\n     }\n \n   if (code == SPACESHIP_EXPR)"}, {"sha": "72ae4a232037b15d038aeb14900993c7357924ed", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455ade18462e5076065b1970e21c622239797392/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455ade18462e5076065b1970e21c622239797392/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=455ade18462e5076065b1970e21c622239797392", "patch": "@@ -239,6 +239,7 @@ in the following sections.\n -Wno-conversion-null  -Wctad-maybe-unsupported @gol\n -Wctor-dtor-privacy  -Wno-delete-incomplete @gol\n -Wdelete-non-virtual-dtor  -Wdeprecated-copy  -Wdeprecated-copy-dtor @gol\n+-Wno-deprecated-enum-enum-conversion -Wno-deprecated-enum-float-conversion @gol\n -Weffc++  -Wextra-semi  -Wno-inaccessible-base @gol\n -Wno-inherited-variadic-ctor  -Wno-init-list-lifetime @gol\n -Wno-invalid-offsetof  -Wno-literal-suffix  -Wmismatched-tags @gol\n@@ -3358,6 +3359,42 @@ warning is enabled by @option{-Wextra}.  With\n @option{-Wdeprecated-copy-dtor}, also deprecate if the class has a\n user-provided destructor.\n \n+@item -Wno-deprecated-enum-enum-conversion @r{(C++ and Objective-C++ only)}\n+@opindex Wdeprecated-enum-enum-conversion\n+@opindex Wno-deprecated-enum-enum-conversion\n+Disable the warning about the case when the usual arithmetic conversions\n+are applied on operands where one is of enumeration type and the other is\n+of a different enumeration type.  This conversion was deprecated in C++20.\n+For example:\n+\n+@smallexample\n+enum E1 @{ e @};\n+enum E2 @{ f @};\n+int k = f - e;\n+@end smallexample\n+\n+@option{-Wdeprecated-enum-enum-conversion} is enabled by default with\n+@option{-std=c++20}.  In pre-C++20 dialects, this warning can be enabled\n+by @option{-Wenum-conversion}.\n+\n+@item -Wno-deprecated-enum-float-conversion @r{(C++ and Objective-C++ only)}\n+@opindex Wdeprecated-enum-float-conversion\n+@opindex Wno-deprecated-enum-float-conversion\n+Disable the warning about the case when the usual arithmetic conversions\n+are applied on operands where one is of enumeration type and the other is\n+of a floating-point type.  This conversion was deprecated in C++20.  For\n+example:\n+\n+@smallexample\n+enum E1 @{ e @};\n+enum E2 @{ f @};\n+bool b = e <= 3.7;\n+@end smallexample\n+\n+@option{-Wdeprecated-enum-float-conversion} is enabled by default with\n+@option{-std=c++20}.  In pre-C++20 dialects, this warning can be enabled\n+by @option{-Wenum-conversion}.\n+\n @item -Wno-init-list-lifetime @r{(C++ and Objective-C++ only)}\n @opindex Winit-list-lifetime\n @opindex Wno-init-list-lifetime\n@@ -5271,7 +5308,6 @@ Options} and @ref{Objective-C and Objective-C++ Dialect Options}.\n -Wcomment  @gol\n -Wduplicate-decl-specifier @r{(C and Objective-C only)} @gol\n -Wenum-compare @r{(in C/ObjC; this is on by default in C++)} @gol\n--Wenum-conversion @r{in C/ObjC;} @gol\n -Wformat   @gol\n -Wformat-overflow  @gol\n -Wformat-truncation  @gol\n@@ -5340,6 +5376,7 @@ name is still supported, but the newer name is more descriptive.)\n -Wcast-function-type  @gol\n -Wdeprecated-copy @r{(C++ only)} @gol\n -Wempty-body  @gol\n+-Wenum-conversion @r{(C only)} @gol\n -Wignored-qualifiers @gol\n -Wimplicit-fallthrough=3 @gol\n -Wmissing-field-initializers  @gol\n@@ -8006,11 +8043,12 @@ In C++ enumerated type mismatches in conditional expressions are also\n diagnosed and the warning is enabled by default.  In C this warning is \n enabled by @option{-Wall}.\n \n-@item -Wenum-conversion @r{(C, Objective-C only)}\n+@item -Wenum-conversion\n @opindex Wenum-conversion\n @opindex Wno-enum-conversion\n Warn when a value of enumerated type is implicitly converted to a \n-different enumerated type.  This warning is enabled by @option{-Wextra}.\n+different enumerated type.  This warning is enabled by @option{-Wextra}\n+in C@.\n \n @item -Wjump-misses-init @r{(C, Objective-C only)}\n @opindex Wjump-misses-init"}, {"sha": "549bd825aabd7e22b76d487de9e757caae1fea65", "filename": "gcc/testsuite/g++.dg/cpp0x/linkage2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455ade18462e5076065b1970e21c622239797392/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flinkage2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455ade18462e5076065b1970e21c622239797392/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flinkage2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flinkage2.C?ref=455ade18462e5076065b1970e21c622239797392", "patch": "@@ -29,5 +29,5 @@ void f() {\n   ba.g(a);              // OK\n   ba.h(a);              // error, B<T>::h never defined\n   i(ba, a);             // OK\n-  e1+e2+e3;\n+  e1+e2+e3; // { dg-warning \"arithmetic between different enumeration types\" \"\" { target c++20 } }\n }"}, {"sha": "d4960f334dde4aae6e6a102dea3c1d7ed65b7ddb", "filename": "gcc/testsuite/g++.dg/cpp2a/enum-conv1.C", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455ade18462e5076065b1970e21c622239797392/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fenum-conv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455ade18462e5076065b1970e21c622239797392/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fenum-conv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fenum-conv1.C?ref=455ade18462e5076065b1970e21c622239797392", "patch": "@@ -0,0 +1,120 @@\n+// PR c++/97573\n+// { dg-do compile }\n+// No special options.  In C++20 (only), we should get the deprecated warnings\n+// by default.  -Wenum-compare is enabled by default so some of them will be\n+// printed even pre-C++20.\n+\n+enum E1 { e } e1;\n+enum E2 { f } e2;\n+__extension__ static enum { } u1;\n+__extension__ static enum { } u2;\n+static double d;\n+\n+void\n+conv ()\n+{\n+  bool b1 = e == e1;\n+  bool b2 = e == f; // { dg-warning \"comparison between .enum E1. and .enum E2.\" }\n+  bool b3 = e == 0.0; // { dg-warning \"comparison of enumeration type .E1. with floating-point type .double.\" \"\" { target c++20 } }\n+  bool b4 = 0.0 == f; // { dg-warning \"comparison of floating-point type .double. with enumeration type .E2.\" \"\" { target c++20 } }\n+  int n1 = true ? e : f; // { dg-warning \"enumerated mismatch\" }\n+  int n2 = true ? e : 0.0; // { dg-warning \"conditional expression between\" \"\" { target c++20 } }\n+}\n+\n+int\n+enum_enum (bool b)\n+{\n+  int r = 0;\n+  const E1 e1c = e;\n+\n+  r += e - e;\n+  r += e - e1;\n+  r += e - f; // { dg-warning \"arithmetic between different enumeration types .E1. and .E2.\" \"\" { target c++20 } }\n+  r += f - e; // { dg-warning \"arithmetic between different enumeration types .E2. and .E1.\" \"\" { target c++20 } }\n+\n+  r += f + f;\n+  r += f + e; // { dg-warning \"arithmetic between different enumeration types .E2. and .E1.\" \"\" { target c++20 } }\n+  r += e + f; // { dg-warning \"arithmetic between different enumeration types .E1. and .E2.\" \"\" { target c++20 } }\n+\n+  r += e1 - e2; // { dg-warning \"arithmetic between different enumeration types .E1. and .E2.\" \"\" { target c++20 } }\n+  r += e1 - e1c;\n+  r += e1c - e1;\n+\n+  r += e * f; // { dg-warning \"arithmetic between different enumeration types .E1. and .E2.\" \"\" { target c++20 } }\n+  r += f * e; // { dg-warning \"arithmetic between different enumeration types .E2. and .E1.\" \"\" { target c++20 } }\n+  r += e * e;\n+\n+  r += e1 < e1c;\n+  r += e < e1;\n+  r += e1 < e2; // { dg-warning \"comparison between .enum E1. and .enum E2.\" }\n+  r += e < f; // { dg-warning \"comparison between .enum E1. and .enum E2.\" }\n+  r += f < e; // { dg-warning \"comparison between .enum E2. and .enum E1.\" }\n+\n+  r += e1 == e1c;\n+  r += e == e1;\n+  r += e == f; // { dg-warning \"comparison between .enum E1. and .enum E2.\" }\n+  r += f == e; // { dg-warning \"comparison between .enum E2. and .enum E1.\" }\n+  r += e1 == e2; // { dg-warning \"comparison between .enum E1. and .enum E2.\" }\n+  r += e2 == e1; // { dg-warning \"comparison between .enum E2. and .enum E1.\" }\n+\n+  r += b ? e1 : e1c;\n+  r += b ? e1 : e;\n+  r += b ? f : e; // { dg-warning \"enumerated mismatch in conditional expression: .E2. vs .E1.\" }\n+  r += b ? e1 : e2; // { dg-warning \"enumerated mismatch in conditional expression: .E1. vs .E2.\" }\n+\n+  r += e | f; // { dg-warning \"bitwise operation between different enumeration types .E1. and .E2.\" \"\" { target c++20 } }\n+  r += e ^ f; // { dg-warning \"bitwise operation between different enumeration types .E1. and .E2.\" \"\" { target c++20 } }\n+  r += e & f; // { dg-warning \"bitwise operation between different enumeration types .E1. and .E2.\" \"\" { target c++20 } }\n+  r += !e;\n+  r += e1 | e;\n+\n+  r += e << f;\n+  r += e >> f;\n+  r += e || f;\n+  r += e && f;\n+  e1 = e1c;\n+\n+  // Anonymous enum.\n+  r += u1 - u1;\n+  r += u1 + u2; // { dg-warning \"arithmetic between different enumeration types\" \"\" { target c++20 } }\n+  r += u1 * u2; // { dg-warning \"arithmetic between different enumeration types\" \"\" { target c++20 } }\n+  r += u1 == u2; // { dg-warning \"comparison between\" }\n+  r += u1 & u2; // { dg-warning \"bitwise operation between different enumeration types\" \"\" { target c++20 } }\n+\n+  return r;\n+}\n+\n+double\n+enum_float (bool b)\n+{\n+  double r = 0.0;\n+\n+  r += e1 - d; // { dg-warning \"arithmetic between enumeration type .E1. and floating-point type .double.\" \"\" { target c++20 } }\n+  r += d - e1; // { dg-warning \"arithmetic between floating-point type .double. and enumeration type .E1.\" \"\" { target c++20 } }\n+  r += e1 + d; // { dg-warning \"arithmetic between enumeration type .E1. and floating-point type .double.\" \"\" { target c++20 } }\n+  r += d + e1; // { dg-warning \"arithmetic between floating-point type .double. and enumeration type .E1.\" \"\" { target c++20 } }\n+  r += e1 * d; // { dg-warning \"arithmetic between enumeration type .E1. and floating-point type .double.\" \"\" { target c++20 } }\n+  r += d * e1; // { dg-warning \"arithmetic between floating-point type .double. and enumeration type .E1.\" \"\" { target c++20 } }\n+  r += u1 * d; // { dg-warning \"arithmetic between enumeration type\" \"\" { target c++20 } }\n+  r += d * u1; // { dg-warning \"arithmetic between floating-point type\" \"\" { target c++20 } }\n+\n+  r += e1 < d;  // { dg-warning \"comparison of enumeration type .E1. with floating-point type .double.\" \"\" { target c++20 } }\n+  r += d < e1;  // { dg-warning \"comparison of floating-point type .double. with enumeration type .E1.\" \"\" { target c++20 } }\n+  r += d == e1; // { dg-warning \"comparison of floating-point type .double. with enumeration type .E1.\" \"\" { target c++20 } }\n+  r += e1 == d; // { dg-warning \"comparison of enumeration type .E1. with floating-point type .double.\" \"\" { target c++20 } }\n+  r += u1 == d; // { dg-warning \"comparison of enumeration type\" \"\" { target c++20 } }\n+  r += d == u1; // { dg-warning \"comparison of floating-point type\" \"\" { target c++20 } }\n+\n+  r += b ? e1 : d; // { dg-warning \"conditional expression between enumeration type .E1. and floating-point type .double.\" \"\" { target c++20 } }\n+  r += b ? d : e1; // { dg-warning \"conditional expression between floating-point type .double. and enumeration type .E1.\" \"\" { target c++20 } }\n+  r += b ? d : u1; // { dg-warning \"conditional expression between\" \"\" { target c++20 } }\n+  r += b ? u1 : d; // { dg-warning \"conditional expression between\" \"\" { target c++20 } }\n+\n+  // FIXME should be error\n+  // e1 <=> d;\n+\n+  d += e1; // { dg-warning \"arithmetic between floating-point type .double. and enumeration type .E1.\" \"\" { target c++20 } }\n+  d = e1;\n+\n+  return r;\n+}"}, {"sha": "f15827bda1453804ade2fa1acf92430e04a85c03", "filename": "gcc/testsuite/g++.dg/cpp2a/enum-conv2.C", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455ade18462e5076065b1970e21c622239797392/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fenum-conv2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455ade18462e5076065b1970e21c622239797392/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fenum-conv2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fenum-conv2.C?ref=455ade18462e5076065b1970e21c622239797392", "patch": "@@ -0,0 +1,115 @@\n+// PR c++/97573\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-Wno-deprecated -Wno-enum-compare\" }\n+\n+enum E1 { e } e1;\n+enum E2 { f } e2;\n+__extension__ static enum { } u1;\n+__extension__ static enum { } u2;\n+static double d;\n+\n+void\n+conv ()\n+{\n+  bool b1 = e == e1;\n+  bool b2 = e == f;\n+  bool b3 = e == 0.0;\n+  bool b4 = 0.0 == f;\n+  int n1 = true ? e : f;\n+  int n2 = true ? e : 0.0;\n+}\n+\n+int\n+enum_enum (bool b)\n+{\n+  int r = 0;\n+  const E1 e1c = e;\n+\n+  r += e - e;\n+  r += e - e1;\n+  r += e - f;\n+  r += f - e;\n+\n+  r += f + f;\n+  r += f + e;\n+  r += e + f;\n+\n+  r += e1 - e2;\n+  r += e1 - e1c;\n+  r += e1c - e1;\n+\n+  r += e * f;\n+  r += f * e;\n+  r += e * e;\n+\n+  r += e1 < e1c;\n+  r += e < e1;\n+  r += e1 < e2;\n+  r += e < f;\n+  r += f < e;\n+\n+  r += e1 == e1c;\n+  r += e == e1;\n+  r += e == f;\n+  r += f == e;\n+  r += e1 == e2;\n+  r += e2 == e1;\n+\n+  r += b ? e1 : e1c;\n+  r += b ? e1 : e;\n+  r += b ? f : e;\n+  r += b ? e1 : e2;\n+\n+  r += e | f;\n+  r += e ^ f;\n+  r += e & f;\n+  r += !e;\n+  r += e1 | e;\n+\n+  r += e << f;\n+  r += e >> f;\n+  r += e || f;\n+  r += e && f;\n+  e1 = e1c;\n+\n+  // Anonymous enum.\n+  r += u1 - u1;\n+  r += u1 + u2;\n+  r += u1 * u2;\n+  r += u1 == u2;\n+  r += u1 & u2;\n+\n+  return r;\n+}\n+\n+double\n+enum_float (bool b)\n+{\n+  double r = 0.0;\n+\n+  r += e1 - d;\n+  r += d - e1;\n+  r += e1 + d;\n+  r += d + e1;\n+  r += e1 * d;\n+  r += d * e1;\n+  r += u1 * d;\n+  r += d * u1;\n+\n+  r += e1 < d;\n+  r += d < e1;\n+  r += d == e1;\n+  r += e1 == d;\n+  r += u1 == d;\n+  r += d == u1;\n+\n+  r += b ? e1 : d;\n+  r += b ? d : e1;\n+  r += b ? d : u1;\n+  r += b ? u1 : d;\n+\n+  d += e1;\n+  d = e1;\n+\n+  return r;\n+}"}, {"sha": "67bdf1600d7e163bf63f698e6470af94c22ec256", "filename": "gcc/testsuite/g++.dg/cpp2a/enum-conv3.C", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455ade18462e5076065b1970e21c622239797392/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fenum-conv3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455ade18462e5076065b1970e21c622239797392/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fenum-conv3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fenum-conv3.C?ref=455ade18462e5076065b1970e21c622239797392", "patch": "@@ -0,0 +1,115 @@\n+// PR c++/97573\n+// { dg-do compile { target { c++17_down } } }\n+// { dg-options \"-Wenum-conversion\" }\n+\n+enum E1 { e } e1;\n+enum E2 { f } e2;\n+__extension__ static enum { } u1;\n+__extension__ static enum { } u2;\n+static double d;\n+\n+void\n+conv ()\n+{\n+  bool b1 = e == e1;\n+  bool b2 = e == f; // { dg-warning \"comparison between .enum E1. and .enum E2.\" }\n+  bool b3 = e == 0.0; // { dg-warning \"comparison of enumeration type .E1. with floating-point type .double.\" }\n+  bool b4 = 0.0 == f; // { dg-warning \"comparison of floating-point type .double. with enumeration type .E2.\" }\n+  int n1 = true ? e : f; // { dg-warning \"enumerated mismatch\" }\n+  int n2 = true ? e : 0.0; // { dg-warning \"enumerated and non-enumerated type in conditional expression\" }\n+}\n+\n+int\n+enum_enum (bool b)\n+{\n+  int r = 0;\n+  const E1 e1c = e;\n+\n+  r += e - e;\n+  r += e - e1;\n+  r += e - f; // { dg-warning \"arithmetic between different enumeration types .E1. and .E2.\" }\n+  r += f - e; // { dg-warning \"arithmetic between different enumeration types .E2. and .E1.\" }\n+\n+  r += f + f;\n+  r += f + e; // { dg-warning \"arithmetic between different enumeration types .E2. and .E1.\" }\n+  r += e + f; // { dg-warning \"arithmetic between different enumeration types .E1. and .E2.\" }\n+\n+  r += e1 - e2; // { dg-warning \"arithmetic between different enumeration types .E1. and .E2.\" }\n+  r += e1 - e1c;\n+  r += e1c - e1;\n+\n+  r += e * f; // { dg-warning \"arithmetic between different enumeration types .E1. and .E2.\" }\n+  r += f * e; // { dg-warning \"arithmetic between different enumeration types .E2. and .E1.\" }\n+  r += e * e;\n+\n+  r += e1 < e1c;\n+  r += e < e1;\n+  r += e1 < e2; // { dg-warning \"comparison between .enum E1. and .enum E2.\" }\n+  r += e < f; // { dg-warning \"comparison between .enum E1. and .enum E2.\" }\n+  r += f < e; // { dg-warning \"comparison between .enum E2. and .enum E1.\" }\n+\n+  r += e1 == e1c;\n+  r += e == e1;\n+  r += e == f; // { dg-warning \"comparison between .enum E1. and .enum E2.\" }\n+  r += f == e; // { dg-warning \"comparison between .enum E2. and .enum E1.\" }\n+  r += e1 == e2; // { dg-warning \"comparison between .enum E1. and .enum E2.\" }\n+  r += e2 == e1; // { dg-warning \"comparison between .enum E2. and .enum E1.\" }\n+\n+  r += b ? e1 : e1c;\n+  r += b ? e1 : e;\n+  r += b ? f : e; // { dg-warning \"enumerated mismatch in conditional expression: .E2. vs .E1.\" }\n+  r += b ? e1 : e2; // { dg-warning \"enumerated mismatch in conditional expression: .E1. vs .E2.\" }\n+\n+  r += e | f; // { dg-warning \"bitwise operation between different enumeration types .E1. and .E2.\" }\n+  r += e ^ f; // { dg-warning \"bitwise operation between different enumeration types .E1. and .E2.\" }\n+  r += e & f; // { dg-warning \"bitwise operation between different enumeration types .E1. and .E2.\" }\n+  r += !e;\n+  r += e1 | e;\n+\n+  r += e << f;\n+  r += e >> f;\n+  r += e || f;\n+  r += e && f;\n+  e1 = e1c;\n+\n+  // Anonymous enum.\n+  r += u1 - u1;\n+  r += u1 + u2; // { dg-warning \"arithmetic between different enumeration types\" }\n+  r += u1 * u2; // { dg-warning \"arithmetic between different enumeration types\" }\n+  r += u1 == u2; // { dg-warning \"comparison between\" }\n+  r += u1 & u2; // { dg-warning \"bitwise operation between different enumeration types\" }\n+\n+  return r;\n+}\n+\n+double\n+enum_float (bool b)\n+{\n+  double r = 0.0;\n+\n+  r += e1 - d; // { dg-warning \"arithmetic between enumeration type .E1. and floating-point type .double.\" }\n+  r += d - e1; // { dg-warning \"arithmetic between floating-point type .double. and enumeration type .E1.\" }\n+  r += e1 + d; // { dg-warning \"arithmetic between enumeration type .E1. and floating-point type .double.\" }\n+  r += d + e1; // { dg-warning \"arithmetic between floating-point type .double. and enumeration type .E1.\" }\n+  r += e1 * d; // { dg-warning \"arithmetic between enumeration type .E1. and floating-point type .double.\" }\n+  r += d * e1; // { dg-warning \"arithmetic between floating-point type .double. and enumeration type .E1.\" }\n+  r += u1 * d; // { dg-warning \"arithmetic between enumeration type\" }\n+  r += d * u1; // { dg-warning \"arithmetic between floating-point type\" }\n+\n+  r += e1 < d;  // { dg-warning \"comparison of enumeration type .E1. with floating-point type .double.\" }\n+  r += d < e1;  // { dg-warning \"comparison of floating-point type .double. with enumeration type .E1.\" }\n+  r += d == e1; // { dg-warning \"comparison of floating-point type .double. with enumeration type .E1.\" }\n+  r += e1 == d; // { dg-warning \"comparison of enumeration type .E1. with floating-point type .double.\" }\n+  r += u1 == d; // { dg-warning \"comparison of enumeration type\" }\n+  r += d == u1; // { dg-warning \"comparison of floating-point type\" }\n+\n+  r += b ? e1 : d; // { dg-warning \"enumerated and non-enumerated type in conditional expression\" }\n+  r += b ? d : e1; // { dg-warning \"enumerated and non-enumerated type in conditional expression\" }\n+  r += b ? d : u1; // { dg-warning \"enumerated and non-enumerated type in conditional expression\" }\n+  r += b ? u1 : d; // { dg-warning \"enumerated and non-enumerated type in conditional expression\" }\n+\n+  d += e1; // { dg-warning \"arithmetic between floating-point type .double. and enumeration type .E1.\" }\n+  d = e1;\n+\n+  return r;\n+}"}, {"sha": "de0959880158818306feb9b0214512b41930c6e5", "filename": "gcc/testsuite/g++.dg/parse/attr3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455ade18462e5076065b1970e21c622239797392/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fattr3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455ade18462e5076065b1970e21c622239797392/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fattr3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fattr3.C?ref=455ade18462e5076065b1970e21c622239797392", "patch": "@@ -10,5 +10,5 @@ int main () {\n     S::F y;\t// { dg-warning \"'F' is deprecated\" }\n     y = S::f;\n \n-    return x + y;\n+    return x + y; // { dg-warning \"arithmetic between different enumeration types\" \"\" { target c++20 } }\n }"}]}