{"sha": "7bfe7d634f60b0a9ba1a456be59a1ee88abf112e", "node_id": "C_kwDOANBUbNoAKDdiZmU3ZDYzNGY2MGIwYTliYTFhNDU2YmU1OWExZWU4OGFiZjExMmU", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-09-10T09:25:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-15T07:34:07Z"}, "message": "Always default to DWARF2_DEBUG if not specified, warn about deprecated STABS\n\nThis makes defaults.h choose DWARF2_DEBUG if PREFERRED_DEBUGGING_TYPE\nis not specified by the target and errors out if DWARF DWARF is not supported.\n\nIt also makes us warn when STABS is enabled but not the preferred\ndebugging type and removes the corresponding diagnostic from the Ada frontend.\nThe warnings are pruned from the testsuite output via prune_gcc_output.\n\nThe following target configurations now explicitely default to STABS:\n pdp11-*-*   pdp11 is a.out, dwarf support is difficult\n hppa[12]*-*-hpux10*  does not support DWARF\n hppa[12]*-*-hpux11*  likewise\nnote that the hppa configs have been deprecated.\n\nTargets with DWARF support will now see\n> ./cc1 -quiet t.c -gstabs\nt.c: warning: STABS debugging information is obsolete and not supported anymore\n\nthat is, -gstabs will still generate STABS but use will be diagnosed\non targets where DWARF is available.\n\nI have built all targets from contrib/config-list.mk to make sure we\ndon't run into the #error and the following makes the STABS usage\nexplicit for pdp11 and hppa with SOM.\n\nThis completes the series of deprecating STABS for GCC 12.\n\n2021-09-21  Richard Biener  <rguenther@suse.de>\n\ngcc/\n\t* defaults.h (PREFERRED_DEBUGGING_TYPE): Choose DWARF2_DEBUG\n\twhen not set.\n\t* toplev.c (process_options): Warn when STABS debugging is\n\tenabled but not the preferred format.\n\t* config/pa/som.h (PREFERRED_DEBUGGING_TYPE): Define to\n\tDBX_DEBUG.\n\t* config/pdp11/pdp11.h (PREFERRED_DEBUGGING_TYPE): Likewise.\n\ngcc/ada/\n\t* gcc-interface/misc.c (gnat_post_options): Do not warn\n\tabout DBX_DEBUG use here.\n\ngcc/testsuite/\n\t* lib/prune.exp: Prune STABS obsoletion message.", "tree": {"sha": "50172e06f305f746cddd0fa1445a52db391fa249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50172e06f305f746cddd0fa1445a52db391fa249"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17ffb7a562061c54eb6eb9863271524568761cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ffb7a562061c54eb6eb9863271524568761cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17ffb7a562061c54eb6eb9863271524568761cf6"}], "stats": {"total": 50, "additions": 20, "deletions": 30}, "files": [{"sha": "2caa83ff8cf16d208ddad7da3908917a8886bdfa", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=7bfe7d634f60b0a9ba1a456be59a1ee88abf112e", "patch": "@@ -274,12 +274,6 @@ gnat_post_options (const char **pfilename ATTRIBUTE_UNUSED)\n   if (!OPTION_SET_P (flag_diagnostics_show_caret))\n     global_dc->show_caret = false;\n \n-  /* Warn only if STABS is not the default: we don't want to emit a warning if\n-     the user did not use a -gstabs option.  */\n-  if (PREFERRED_DEBUGGING_TYPE != DBX_DEBUG && write_symbols == DBX_DEBUG)\n-    warning (0, \"STABS debugging information for Ada is obsolete and not \"\n-\t\t\"supported anymore\");\n-\n   /* Copy global settings to local versions.  */\n   gnat_encodings = global_options.x_gnat_encodings;\n   optimize = global_options.x_optimize;"}, {"sha": "36a1122b1322f5e99fcb0fbb75dd5e74d8cfb328", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=7bfe7d634f60b0a9ba1a456be59a1ee88abf112e", "patch": "@@ -21,6 +21,10 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_SOM\n #define TARGET_SOM 1\n \n+/* With SOM we can only do STABS.  */\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n /* We do not use BINCL stabs in SOM.\n    ??? If it does not hurt, we probably should to avoid useless divergence\n    from other embedded stabs implementations.  */"}, {"sha": "91a8ce707515b826485cf66320d679390e21f40a", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=7bfe7d634f60b0a9ba1a456be59a1ee88abf112e", "patch": "@@ -54,6 +54,9 @@ along with GCC; see the file COPYING3.  If not see\n \n #define DBX_DEBUGGING_INFO\n \n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n #define TARGET_40_PLUS\t\t(TARGET_40 || TARGET_45)\n #define TARGET_10\t\t(! TARGET_40_PLUS)\n "}, {"sha": "bb68d0d1a791da36c715f90005b3c8424be85eb4", "filename": "gcc/defaults.h", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=7bfe7d634f60b0a9ba1a456be59a1ee88abf112e", "patch": "@@ -899,33 +899,14 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define DEFAULT_GDB_EXTENSIONS 1\n #endif\n \n-/* If more than one debugging type is supported, you must define\n-   PREFERRED_DEBUGGING_TYPE to choose the default.  */\n-\n-#if 1 < (defined (DBX_DEBUGGING_INFO) \\\n-         + defined (DWARF2_DEBUGGING_INFO) + defined (XCOFF_DEBUGGING_INFO) \\\n-         + defined (VMS_DEBUGGING_INFO))\n+/* Default to DWARF2_DEBUGGING_INFO.  Legacy targets can choose different\n+   by defining PREFERRED_DEBUGGING_TYPE.  */\n #ifndef PREFERRED_DEBUGGING_TYPE\n-#error You must define PREFERRED_DEBUGGING_TYPE\n-#endif /* no PREFERRED_DEBUGGING_TYPE */\n-\n-/* If only one debugging format is supported, define PREFERRED_DEBUGGING_TYPE\n-   here so other code needn't care.  */\n-#elif defined DBX_DEBUGGING_INFO\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-\n-#elif defined DWARF2_DEBUGGING_INFO || defined DWARF2_LINENO_DEBUGGING_INFO\n+#if defined DWARF2_DEBUGGING_INFO || defined DWARF2_LINENO_DEBUGGING_INFO\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n-\n-#elif defined VMS_DEBUGGING_INFO\n-#define PREFERRED_DEBUGGING_TYPE VMS_AND_DWARF2_DEBUG\n-\n-#elif defined XCOFF_DEBUGGING_INFO\n-#define PREFERRED_DEBUGGING_TYPE XCOFF_DEBUG\n-\n #else\n-/* No debugging format is supported by this target.  */\n-#define PREFERRED_DEBUGGING_TYPE NO_DEBUG\n+#error You must define PREFERRED_DEBUGGING_TYPE if DWARF is not supported\n+#endif\n #endif\n \n #ifndef FLOAT_LIB_COMPARE_RETURNS_BOOL"}, {"sha": "131424861d5e2d5e1809be6a6549a3d02d5a7c2b", "filename": "gcc/testsuite/lib/prune.exp", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e/gcc%2Ftestsuite%2Flib%2Fprune.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e/gcc%2Ftestsuite%2Flib%2Fprune.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprune.exp?ref=7bfe7d634f60b0a9ba1a456be59a1ee88abf112e", "patch": "@@ -93,6 +93,9 @@ proc prune_gcc_output { text } {\n     # Ignore dsymutil warning (tool bug is actually linker)\n     regsub -all \"(^|\\n)\\[^\\n\\]*could not find object file symbol for symbol\\[^\\n\\]*\" $text \"\" text\n \n+    # Ignore stabs obsoletion warnings\n+    regsub -all \"(^|\\n)\\[^\\n\\]*\\[Ww\\]arning: STABS debugging information is obsolete and not supported anymore\\[^\\n\\]*\" $text \"\" text\n+\n     # If dg-enable-nn-line-numbers was provided, then obscure source-margin\n     # line numbers by converting them to \"NN\" form.\n     set text [maybe-handle-nn-line-numbers $text]"}, {"sha": "cb4f8c470f0a1626db96478d4985ed2464fac3f5", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bfe7d634f60b0a9ba1a456be59a1ee88abf112e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=7bfe7d634f60b0a9ba1a456be59a1ee88abf112e", "patch": "@@ -1435,6 +1435,11 @@ process_options (bool no_backend)\n       && ctf_debug_info_level == CTFINFO_LEVEL_NONE)\n     write_symbols = NO_DEBUG;\n \n+  /* Warn if STABS debug gets enabled and is not the default.  */\n+  if (PREFERRED_DEBUGGING_TYPE != DBX_DEBUG && (write_symbols & DBX_DEBUG))\n+    warning (0, \"STABS debugging information is obsolete and not \"\n+\t     \"supported anymore\");\n+\n   if (write_symbols == NO_DEBUG)\n     ;\n #if defined(DBX_DEBUGGING_INFO)"}]}