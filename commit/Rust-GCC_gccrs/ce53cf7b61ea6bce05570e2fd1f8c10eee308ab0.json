{"sha": "ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0", "node_id": "C_kwDOANBUbNoAKGNlNTNjZjdiNjFlYTZiY2UwNTU3MGUyZmQxZjhjMTBlZWUzMDhhYjA", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-12-07T19:18:06Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-12-07T19:18:06Z"}, "message": "preprocessor: Enable __VA_OPT__ for C2x\n\nC2x supports __VA_OPT__, so adjust libcpp not to pedwarn for uses of\nit (or of not passing any variable arguments to a variable-arguments\nmacro) in standard C2x mode.\n\nI didn't try to duplicate existing tests for the details of the\nfeature, just verified -pedantic-errors handling is as expected.  And\nthere's a reasonable argument (bug 98859) that __VA_OPT__ shouldn't be\ndiagnosed in older standard modes at all (as opposed to not passing\nany variable arguments to a variable-arguments macro, for which older\nversions of the C standard require a diagnostic as a constraint\nviolation); that argument applies to C as much as to C++, but I\nhaven't made any changes in that regard.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\nlibcpp/\n\t* init.cc (lang_defaults): Enable va_opt for STDC2X.\n\t* lex.cc (maybe_va_opt_error): Adjust diagnostic message for C.\n\t* macro.cc (_cpp_arguments_ok): Update comment.\n\ngcc/testsuite/\n\t* gcc.dg/cpp/c11-vararg-1.c, gcc.dg/cpp/c2x-va-opt-1.c: New tests.", "tree": {"sha": "d347aafe958f5980ac1294dd4d40d8a33041b5b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d347aafe958f5980ac1294dd4d40d8a33041b5b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb9491baf5a5672888809f8b5932a99d91804a52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9491baf5a5672888809f8b5932a99d91804a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb9491baf5a5672888809f8b5932a99d91804a52"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "6b1bc38bb2c662974074eca29e1f7e01279ec97a", "filename": "gcc/testsuite/gcc.dg/cpp/c11-vararg-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc11-vararg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc11-vararg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc11-vararg-1.c?ref=ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0", "patch": "@@ -0,0 +1,9 @@\n+/* Test error in C11 for no arguments passed for variable arguments to a\n+   macro.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+#define M(X, ...) X\n+\n+M (x); /* { dg-error \"requires at least one argument\" } */\n+M (x, y);"}, {"sha": "bd438f745715d17211a6acb52bdd913865e48959", "filename": "gcc/testsuite/gcc.dg/cpp/c2x-va-opt-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc2x-va-opt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc2x-va-opt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fc2x-va-opt-1.c?ref=ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0", "patch": "@@ -0,0 +1,11 @@\n+/* Test __VA_OPT__ and no \"...\" arguments in a call to a variable-arguments\n+   macro accepted for C2X.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#define CALL(F, ...) F (7 __VA_OPT__(,) __VA_ARGS__)\n+#define M(X, ...) X\n+\n+CALL (a);\n+CALL (b, 1);\n+M (x);"}, {"sha": "ea683f0cfafe85111b55a30a40c6f70388231241", "filename": "libcpp/init.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0/libcpp%2Finit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0/libcpp%2Finit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.cc?ref=ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0", "patch": "@@ -114,7 +114,7 @@ static const struct lang_flags lang_defaults[] =\n   /* STDC99   */  { 1,  0,  1,  1,  0,  0,    1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n   /* STDC11   */  { 1,  0,  1,  1,  1,  0,    1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n   /* STDC17   */  { 1,  0,  1,  1,  1,  0,    1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0,   0,   0,      0,      0,    0 },\n-  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,    1,  1,   1,   0,   0,    1,     1,     0,   1,      0,   1,     1,   0,   1,      1,      0,    1 },\n+  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,    1,  1,   1,   0,   0,    1,     1,     0,   1,      1,   1,     1,   0,   1,      1,      0,    1 },\n   /* GNUCXX   */  { 0,  1,  1,  1,  0,  1,    0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    1 },\n   /* CXX98    */  { 0,  1,  0,  1,  0,  1,    1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1,     0,   0,   0,      0,      0,    1 },\n   /* GNUCXX11 */  { 1,  1,  1,  1,  1,  1,    0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1,     0,   0,   0,      0,      0,    1 },"}, {"sha": "9a21a3e9ecc69d6dff64eeae0b44eeda4b2a6ea7", "filename": "libcpp/lex.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0/libcpp%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0/libcpp%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.cc?ref=ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0", "patch": "@@ -2135,8 +2135,14 @@ maybe_va_opt_error (cpp_reader *pfile)\n       /* __VA_OPT__ should not be accepted at all, but allow it in\n \t system headers.  */\n       if (!_cpp_in_system_header (pfile))\n-\tcpp_error (pfile, CPP_DL_PEDWARN,\n-\t\t   \"__VA_OPT__ is not available until C++20\");\n+\t{\n+\t  if (CPP_OPTION (pfile, cplusplus))\n+\t    cpp_error (pfile, CPP_DL_PEDWARN,\n+\t\t       \"__VA_OPT__ is not available until C++20\");\n+\t  else\n+\t    cpp_error (pfile, CPP_DL_PEDWARN,\n+\t\t       \"__VA_OPT__ is not available until C2X\");\n+\t}\n     }\n   else if (!pfile->state.va_args_ok)\n     {"}, {"sha": "452e14a1e66ab5d7f8c150e1a13f1111c6b112be", "filename": "libcpp/macro.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0/libcpp%2Fmacro.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0/libcpp%2Fmacro.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.cc?ref=ce53cf7b61ea6bce05570e2fd1f8c10eee308ab0", "patch": "@@ -1093,7 +1093,7 @@ _cpp_arguments_ok (cpp_reader *pfile, cpp_macro *macro, const cpp_hashnode *node\n \n   if (argc < macro->paramc)\n     {\n-      /* In C++20 (here the va_opt flag is used), and also as a GNU\n+      /* In C++20 and C2X (here the va_opt flag is used), and also as a GNU\n \t extension, variadic arguments are allowed to not appear in\n \t the invocation at all.\n \t e.g. #define debug(format, args...) something"}]}