{"sha": "645ef01a463f15fc230e2155719c7a12cec89acf", "node_id": "C_kwDOANBUbNoAKDY0NWVmMDFhNDYzZjE1ZmMyMzBlMjE1NTcxOWM3YTEyY2VjODlhY2Y", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-14T10:36:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-09-14T10:36:36Z"}, "message": "Disallow pointer operands for |, ^ and partly & [PR106878]\n\nMy change to match.pd (that added the two simplifications this patch\ntouches) results in more |/^/& assignments with pointer arguments,\nbut since r12-1608 we reject pointer operands for BIT_NOT_EXPR.\n\nDisallowing them for BIT_NOT_EXPR and allowing for BIT_{IOR,XOR,AND}_EXPR\nleads to a match.pd maintainance nightmare (see one of the patches in the\nPR), so either we want to allow pointer operand on BIT_NOT_EXPR (but then\nwe run into issues e.g. with the ranger which expects it can emulate\nBIT_NOT_EXPR ~X as - 1 - X which doesn't work for pointers which don't\nsupport MINUS_EXPR), or the following patch disallows pointer arguments\nfor all of BIT_{IOR,XOR,AND}_EXPR with the exception of BIT_AND_EXPR\nwith INTEGER_CST last operand (for simpler pointer realignment).\nI had to tweak one reassoc optimization and the two match.pd\nsimplifications.\n\n2022-09-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/106878\n\t* tree-cfg.cc (verify_gimple_assign_binary): Disallow pointer,\n\treference or OFFSET_TYPE BIT_IOR_EXPR, BIT_XOR_EXPR or, unless\n\tthe second argument is INTEGER_CST, BIT_AND_EXPR.\n\t* match.pd ((type) X op CST -> (type) (X op ((type-x) CST)),\n\t(type) (((type2) X) op Y) -> (X op (type) Y)): Punt for\n\tPOINTER_TYPE_P or OFFSET_TYPE.\n\t* tree-ssa-reassoc.cc (optimize_range_tests_cmp_bitwise): For\n\tpointers cast them to pointer sized integers first.\n\n\t* gcc.c-torture/compile/pr106878.c: New test.", "tree": {"sha": "600f894f2595d530f45314ed9b322dedaa2347b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/600f894f2595d530f45314ed9b322dedaa2347b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/645ef01a463f15fc230e2155719c7a12cec89acf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/645ef01a463f15fc230e2155719c7a12cec89acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/645ef01a463f15fc230e2155719c7a12cec89acf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/645ef01a463f15fc230e2155719c7a12cec89acf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05f5c42cb42c5088187d44cc45a5f671d19ad8c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f5c42cb42c5088187d44cc45a5f671d19ad8c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05f5c42cb42c5088187d44cc45a5f671d19ad8c5"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "345bcb701a5b8dcf8dbfa66f1126aed63b65ae04", "filename": "gcc/match.pd", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/645ef01a463f15fc230e2155719c7a12cec89acf/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/645ef01a463f15fc230e2155719c7a12cec89acf/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=645ef01a463f15fc230e2155719c7a12cec89acf", "patch": "@@ -1763,6 +1763,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t && (int_fits_type_p (@1, TREE_TYPE (@0))\n \t     || tree_nop_conversion_p (TREE_TYPE (@0), type)))\n \t|| types_match (@0, @1))\n+       && !POINTER_TYPE_P (TREE_TYPE (@0))\n+       && TREE_CODE (TREE_TYPE (@0)) != OFFSET_TYPE\n        /* ???  This transform conflicts with fold-const.cc doing\n \t  Convert (T)(x & c) into (T)x & (T)c, if c is an integer\n \t  constants (if x has signed type, the sign bit cannot be set\n@@ -1799,7 +1801,9 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (if (GIMPLE\n        && TREE_CODE (@1) != INTEGER_CST\n        && tree_nop_conversion_p (type, TREE_TYPE (@2))\n-       && types_match (type, @0))\n+       && types_match (type, @0)\n+       && !POINTER_TYPE_P (TREE_TYPE (@0))\n+       && TREE_CODE (TREE_TYPE (@0)) != OFFSET_TYPE)\n    (bitop @0 (convert @1)))))\n \n (for bitop (bit_and bit_ior)"}, {"sha": "c845718943785c9ef2c3de8229ea29c5bd5249fa", "filename": "gcc/testsuite/gcc.c-torture/compile/pr106878.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/645ef01a463f15fc230e2155719c7a12cec89acf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr106878.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/645ef01a463f15fc230e2155719c7a12cec89acf/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr106878.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr106878.c?ref=645ef01a463f15fc230e2155719c7a12cec89acf", "patch": "@@ -0,0 +1,15 @@\n+/* PR tree-optimization/106878 */\n+\n+typedef __INTPTR_TYPE__ intptr_t;\n+typedef __UINTPTR_TYPE__ uintptr_t;\n+int a;\n+\n+int\n+foo (const int *c)\n+{\n+  uintptr_t d = ((intptr_t) c | (intptr_t) &a) & 65535 << 16;\n+  intptr_t e = (intptr_t) c;\n+  if (d != (e & 65535 << 16))\n+    return 1;\n+  return 0;\n+}"}, {"sha": "41ce1b29d177639783a751ae96d3624aa3496a98", "filename": "gcc/tree-cfg.cc", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/645ef01a463f15fc230e2155719c7a12cec89acf/gcc%2Ftree-cfg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/645ef01a463f15fc230e2155719c7a12cec89acf/gcc%2Ftree-cfg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.cc?ref=645ef01a463f15fc230e2155719c7a12cec89acf", "patch": "@@ -4167,6 +4167,8 @@ verify_gimple_assign_binary (gassign *stmt)\n     case ROUND_MOD_EXPR:\n     case RDIV_EXPR:\n     case EXACT_DIV_EXPR:\n+    case BIT_IOR_EXPR:\n+    case BIT_XOR_EXPR:\n       /* Disallow pointer and offset types for many of the binary gimple. */\n       if (POINTER_TYPE_P (lhs_type)\n \t  || TREE_CODE (lhs_type) == OFFSET_TYPE)\n@@ -4182,9 +4184,23 @@ verify_gimple_assign_binary (gassign *stmt)\n \n     case MIN_EXPR:\n     case MAX_EXPR:\n-    case BIT_IOR_EXPR:\n-    case BIT_XOR_EXPR:\n+      /* Continue with generic binary expression handling.  */\n+      break;\n+\n     case BIT_AND_EXPR:\n+      if (POINTER_TYPE_P (lhs_type)\n+\t  && TREE_CODE (rhs2) == INTEGER_CST)\n+\tbreak;\n+      /* Disallow pointer and offset types for many of the binary gimple. */\n+      if (POINTER_TYPE_P (lhs_type)\n+\t  || TREE_CODE (lhs_type) == OFFSET_TYPE)\n+\t{\n+\t  error (\"invalid types for %qs\", code_name);\n+\t  debug_generic_expr (lhs_type);\n+\t  debug_generic_expr (rhs1_type);\n+\t  debug_generic_expr (rhs2_type);\n+\t  return true;\n+\t}\n       /* Continue with generic binary expression handling.  */\n       break;\n "}, {"sha": "f45e552a8ccb1bd5483af02acca3ae1b10507503", "filename": "gcc/tree-ssa-reassoc.cc", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/645ef01a463f15fc230e2155719c7a12cec89acf/gcc%2Ftree-ssa-reassoc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/645ef01a463f15fc230e2155719c7a12cec89acf/gcc%2Ftree-ssa-reassoc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.cc?ref=645ef01a463f15fc230e2155719c7a12cec89acf", "patch": "@@ -3608,10 +3608,14 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n \ttree type2 = NULL_TREE;\n \tbool strict_overflow_p = false;\n \tcandidates.truncate (0);\n+\tif (POINTER_TYPE_P (type1))\n+\t  type1 = pointer_sized_int_node;\n \tfor (j = i; j; j = chains[j - 1])\n \t  {\n \t    tree type = TREE_TYPE (ranges[j - 1].exp);\n \t    strict_overflow_p |= ranges[j - 1].strict_overflow_p;\n+\t    if (POINTER_TYPE_P (type))\n+\t      type = pointer_sized_int_node;\n \t    if ((b % 4) == 3)\n \t      {\n \t\t/* For the signed < 0 cases, the types should be\n@@ -3642,6 +3646,8 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n \t    tree type = TREE_TYPE (ranges[j - 1].exp);\n \t    if (j == k)\n \t      continue;\n+\t    if (POINTER_TYPE_P (type))\n+\t      type = pointer_sized_int_node;\n \t    if ((b % 4) == 3)\n \t      {\n \t\tif (!useless_type_conversion_p (type1, type))\n@@ -3671,7 +3677,7 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n \t\top = r->exp;\n \t\tcontinue;\n \t      }\n-\t    if (id == l)\n+\t    if (id == l || POINTER_TYPE_P (TREE_TYPE (op)))\n \t      {\n \t\tcode = (b % 4) == 3 ? BIT_NOT_EXPR : NOP_EXPR;\n \t\tg = gimple_build_assign (make_ssa_name (type1), code, op);\n@@ -3695,6 +3701,14 @@ optimize_range_tests_cmp_bitwise (enum tree_code opcode, int first, int length,\n \t    gimple_seq_add_stmt_without_update (&seq, g);\n \t    op = gimple_assign_lhs (g);\n \t  }\n+\ttype1 = TREE_TYPE (ranges[k - 1].exp);\n+\tif (POINTER_TYPE_P (type1))\n+\t  {\n+\t    gimple *g\n+\t      = gimple_build_assign (make_ssa_name (type1), NOP_EXPR, op);\n+\t    gimple_seq_add_stmt_without_update (&seq, g);\n+\t    op = gimple_assign_lhs (g);\n+\t  }\n \tcandidates.pop ();\n \tif (update_range_test (&ranges[k - 1], NULL, candidates.address (),\n \t\t\t       candidates.length (), opcode, ops, op,"}]}