{"sha": "41850419739b8336c2b698e82be06e8b8c1a3c82", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE4NTA0MTk3MzliODMzNmMyYjY5OGU4MmJlMDZlOGI4YzFhM2M4Mg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2009-05-28T17:14:18Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2009-05-28T17:14:18Z"}, "message": "Makefile.in, [...]: New files.\n\n2009-05-28  Tom Tromey  <tromey@redhat.com>\n\t    Phil Muldoon  <pmuldoon@redhat.com>\n\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* python/Makefile.in, , python/libstdcxx/__init__.py,\n\tpython/libstdcxx/v6/__init__.py, python/libstdcxx/v6/printers.py,\n\tpython/hook.in, python/Makefile.am: New files.\n\t* configure, Makefile.in: Rebuild.\n\t* acinclude.m4 (glibcxx_SUBDIRS): Add python.\n\t* Makefile.am (SUBDIRS): Add python.\n\nCo-Authored-By: Jonathan Wakely <jwakely.gcc@gmail.com>\nCo-Authored-By: Phil Muldoon <pmuldoon@redhat.com>\n\nFrom-SVN: r147958", "tree": {"sha": "86776b8da26243b4808078fa0d2ee2c69a176ef8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86776b8da26243b4808078fa0d2ee2c69a176ef8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41850419739b8336c2b698e82be06e8b8c1a3c82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41850419739b8336c2b698e82be06e8b8c1a3c82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41850419739b8336c2b698e82be06e8b8c1a3c82", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41850419739b8336c2b698e82be06e8b8c1a3c82/comments", "author": null, "committer": null, "parents": [{"sha": "8a66e987b576d1eceb199834e526af56accf55cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a66e987b576d1eceb199834e526af56accf55cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a66e987b576d1eceb199834e526af56accf55cf"}], "stats": {"total": 1243, "additions": 1237, "deletions": 6}, "files": [{"sha": "1a237c2531a8968e1d490ba3a4cb62eaeaeb57fe", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=41850419739b8336c2b698e82be06e8b8c1a3c82", "patch": "@@ -1,3 +1,14 @@\n+2009-05-28  Tom Tromey  <tromey@redhat.com>\n+\t    Phil Muldoon  <pmuldoon@redhat.com>\n+\t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* python/Makefile.in, , python/libstdcxx/__init__.py,\n+\tpython/libstdcxx/v6/__init__.py, python/libstdcxx/v6/printers.py,\n+\tpython/hook.in, python/Makefile.am: New files.\n+\t* configure, Makefile.in: Rebuild.\n+\t* acinclude.m4 (glibcxx_SUBDIRS): Add python.\n+\t* Makefile.am (SUBDIRS): Add python.\n+\n 2009-05-28  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/util/testsuite_allocator.h (check_new, check_delete): Move"}, {"sha": "1f8d3159bc7ecea49343cf3e6d38db6a8c156797", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=41850419739b8336c2b698e82be06e8b8c1a3c82", "patch": "@@ -27,7 +27,8 @@ if GLIBCXX_HOSTED\n   hosted_source = doc src po testsuite\n endif\n ## Keep this list sync'd with acinclude.m4:GLIBCXX_CONFIGURE.\n-SUBDIRS = include libsupc++ $(hosted_source)\n+## Note that python must come after src.\n+SUBDIRS = include libsupc++ $(hosted_source) python\n \n ACLOCAL_AMFLAGS = -I . -I .. -I ../config\n "}, {"sha": "c51a637bc1d67a65b6207d4a676a150e605fe14c", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=41850419739b8336c2b698e82be06e8b8c1a3c82", "patch": "@@ -87,7 +87,7 @@ RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \\\n \tuninstall-recursive\n ETAGS = etags\n CTAGS = ctags\n-DIST_SUBDIRS = include libsupc++ doc src po testsuite\n+DIST_SUBDIRS = include libsupc++ doc src po testsuite python\n DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\n distdir = $(PACKAGE)-$(VERSION)\n top_distdir = $(distdir)\n@@ -321,7 +321,7 @@ WARN_CXXFLAGS = \\\n # -I/-D flags to pass when compiling.\n AM_CPPFLAGS = $(GLIBCXX_INCLUDES)\n @GLIBCXX_HOSTED_TRUE@hosted_source = doc src po testsuite\n-SUBDIRS = include libsupc++ $(hosted_source)\n+SUBDIRS = include libsupc++ $(hosted_source) python\n ACLOCAL_AMFLAGS = -I . -I .. -I ../config\n \n # Multilib support."}, {"sha": "d7895f5ec7f337b9e562c42286fbf315fe72af58", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=41850419739b8336c2b698e82be06e8b8c1a3c82", "patch": "@@ -49,7 +49,7 @@ AC_DEFUN([GLIBCXX_CONFIGURE], [\n   # Keep these sync'd with the list in Makefile.am.  The first provides an\n   # expandable list at autoconf time; the second provides an expandable list\n   # (i.e., shell variable) at configure time.\n-  m4_define([glibcxx_SUBDIRS],[include libsupc++ src doc po testsuite])\n+  m4_define([glibcxx_SUBDIRS],[include libsupc++ python src doc po testsuite])\n   SUBDIRS='glibcxx_SUBDIRS'\n \n   # These need to be absolute paths, yet at the same time need to"}, {"sha": "542e38a90786a541c8d17605cbe6ce255c31fdc9", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=41850419739b8336c2b698e82be06e8b8c1a3c82", "patch": "@@ -2453,7 +2453,7 @@ echo \"${ECHO_T}$ac_cv_prog_egrep\" >&6\n   # expandable list at autoconf time; the second provides an expandable list\n   # (i.e., shell variable) at configure time.\n \n-  SUBDIRS='include libsupc++ src doc po testsuite'\n+  SUBDIRS='include libsupc++ python src doc po testsuite'\n \n   # These need to be absolute paths, yet at the same time need to\n   # canonicalize only relative paths, because then amd will not unmount\n@@ -118371,7 +118371,7 @@ else\n fi\n \n \n-                                                                      ac_config_files=\"$ac_config_files Makefile include/Makefile libsupc++/Makefile src/Makefile doc/Makefile po/Makefile testsuite/Makefile\"\n+                                                                                ac_config_files=\"$ac_config_files Makefile include/Makefile libsupc++/Makefile python/Makefile src/Makefile doc/Makefile po/Makefile testsuite/Makefile\"\n \n           ac_config_files=\"$ac_config_files scripts/testsuite_flags\"\n \n@@ -119416,6 +119416,7 @@ do\n   \"Makefile\" ) CONFIG_FILES=\"$CONFIG_FILES Makefile\" ;;\n   \"include/Makefile\" ) CONFIG_FILES=\"$CONFIG_FILES include/Makefile\" ;;\n   \"libsupc++/Makefile\" ) CONFIG_FILES=\"$CONFIG_FILES libsupc++/Makefile\" ;;\n+  \"python/Makefile\" ) CONFIG_FILES=\"$CONFIG_FILES python/Makefile\" ;;\n   \"src/Makefile\" ) CONFIG_FILES=\"$CONFIG_FILES src/Makefile\" ;;\n   \"doc/Makefile\" ) CONFIG_FILES=\"$CONFIG_FILES doc/Makefile\" ;;\n   \"po/Makefile\" ) CONFIG_FILES=\"$CONFIG_FILES po/Makefile\" ;;"}, {"sha": "bcc8afea1eb9914f89021b8faf4f911c6b9afc43", "filename": "libstdc++-v3/python/Makefile.am", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2Fpython%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2Fpython%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2FMakefile.am?ref=41850419739b8336c2b698e82be06e8b8c1a3c82", "patch": "@@ -0,0 +1,43 @@\n+## Makefile for the python subdirectory of the GNU C++ Standard library.\n+##\n+## Copyright (C) 2009 Free Software Foundation, Inc.\n+##\n+## This file is part of the libstdc++ version 3 distribution.\n+## Process this file with automake to produce Makefile.in.\n+\n+## This file is part of the GNU ISO C++ Library.  This library is free\n+## software; you can redistribute it and/or modify it under the\n+## terms of the GNU General Public License as published by the\n+## Free Software Foundation; either version 2, or (at your option)\n+## any later version.\n+\n+## This library is distributed in the hope that it will be useful,\n+## but WITHOUT ANY WARRANTY; without even the implied warranty of\n+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+## GNU General Public License for more details.\n+\n+## You should have received a copy of the GNU General Public License along\n+## with this library; see the file COPYING.  If not, write to the Free\n+## Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+## USA.\n+\n+include $(top_srcdir)/fragment.am\n+\n+## Where to install the module code.\n+pythondir = $(pkgdatadir)/python\n+\n+all-local: gdb.py\n+\n+nobase_python_DATA = \\\n+    libstdcxx/v6/printers.py \\\n+    libstdcxx/v6/__init__.py \\\n+    libstdcxx/__init__.py\n+\n+gdb.py: hook.in Makefile\n+\tsed -e 's,@dir@,$(pythondir),' < $(srcdir)/hook.in > $@\n+\n+install-data-local: gdb.py\n+\t@$(mkdir_p) $(DESTDIR)$(toolexeclibdir)\n+\t@libname=`cd $(toolexeclibdir) && ls -r libstdc++* | fgrep -v gdb.py | sed 1q`; \\\n+\techo \" $(INSTALL_DATA) gdb.py $(DESTDIR)$(toolexeclibdir)/$$libname-gdb.py\"; \\\n+\t$(INSTALL_DATA) gdb.py $(DESTDIR)$(toolexeclibdir)/$$libname-gdb.py"}, {"sha": "879f040d606c3f49b89afd4c2704c96860e5d8e9", "filename": "libstdc++-v3/python/Makefile.in", "status": "added", "additions": 504, "deletions": 0, "changes": 504, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2Fpython%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2Fpython%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2FMakefile.in?ref=41850419739b8336c2b698e82be06e8b8c1a3c82", "patch": "@@ -0,0 +1,504 @@\n+# Makefile.in generated by automake 1.9.6 from Makefile.am.\n+# @configure_input@\n+\n+# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n+# 2003, 2004, 2005  Free Software Foundation, Inc.\n+# This Makefile.in is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+# PARTICULAR PURPOSE.\n+\n+@SET_MAKE@\n+\n+srcdir = @srcdir@\n+top_srcdir = @top_srcdir@\n+VPATH = @srcdir@\n+pkgdatadir = $(datadir)/@PACKAGE@\n+pkglibdir = $(libdir)/@PACKAGE@\n+pkgincludedir = $(includedir)/@PACKAGE@\n+top_builddir = ..\n+am__cd = CDPATH=\"$${ZSH_VERSION+.}$(PATH_SEPARATOR)\" && cd\n+INSTALL = @INSTALL@\n+install_sh_DATA = $(install_sh) -c -m 644\n+install_sh_PROGRAM = $(install_sh) -c\n+install_sh_SCRIPT = $(install_sh) -c\n+INSTALL_HEADER = $(INSTALL_DATA)\n+transform = $(program_transform_name)\n+NORMAL_INSTALL = :\n+PRE_INSTALL = :\n+POST_INSTALL = :\n+NORMAL_UNINSTALL = :\n+PRE_UNINSTALL = :\n+POST_UNINSTALL = :\n+build_triplet = @build@\n+host_triplet = @host@\n+target_triplet = @target@\n+DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \\\n+\t$(top_srcdir)/fragment.am\n+subdir = python\n+ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n+am__aclocal_m4_deps = $(top_srcdir)/../config/enable.m4 \\\n+\t$(top_srcdir)/../config/futex.m4 \\\n+\t$(top_srcdir)/../config/iconv.m4 \\\n+\t$(top_srcdir)/../config/lead-dot.m4 \\\n+\t$(top_srcdir)/../config/lib-ld.m4 \\\n+\t$(top_srcdir)/../config/lib-link.m4 \\\n+\t$(top_srcdir)/../config/lib-prefix.m4 \\\n+\t$(top_srcdir)/../config/multi.m4 \\\n+\t$(top_srcdir)/../config/no-executables.m4 \\\n+\t$(top_srcdir)/../config/override.m4 \\\n+\t$(top_srcdir)/../config/proginstall.m4 \\\n+\t$(top_srcdir)/../config/stdint.m4 \\\n+\t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n+\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n+\t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n+\t$(top_srcdir)/../lt~obsolete.m4 $(top_srcdir)/crossconfig.m4 \\\n+\t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n+\t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/configure.ac\n+am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n+\t$(ACLOCAL_M4)\n+CONFIG_HEADER = $(top_builddir)/config.h\n+CONFIG_CLEAN_FILES =\n+depcomp =\n+am__depfiles_maybe =\n+SOURCES =\n+DIST_SOURCES =\n+am__vpath_adj_setup = srcdirstrip=`echo \"$(srcdir)\" | sed 's|.|.|g'`;\n+am__vpath_adj = case $$p in \\\n+    $(srcdir)/*) f=`echo \"$$p\" | sed \"s|^$$srcdirstrip/||\"`;; \\\n+    *) f=$$p;; \\\n+  esac;\n+am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;\n+am__installdirs = \"$(DESTDIR)$(pythondir)\"\n+nobase_pythonDATA_INSTALL = $(install_sh_DATA)\n+DATA = $(nobase_python_DATA)\n+DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\n+ABI_TWEAKS_SRCDIR = @ABI_TWEAKS_SRCDIR@\n+ACLOCAL = @ACLOCAL@\n+ALLOCATOR_H = @ALLOCATOR_H@\n+ALLOCATOR_NAME = @ALLOCATOR_NAME@\n+AMTAR = @AMTAR@\n+AR = @AR@\n+AS = @AS@\n+ATOMICITY_SRCDIR = @ATOMICITY_SRCDIR@\n+ATOMIC_FLAGS = @ATOMIC_FLAGS@\n+ATOMIC_WORD_SRCDIR = @ATOMIC_WORD_SRCDIR@\n+AUTOCONF = @AUTOCONF@\n+AUTOHEADER = @AUTOHEADER@\n+AUTOMAKE = @AUTOMAKE@\n+AWK = @AWK@\n+BASIC_FILE_CC = @BASIC_FILE_CC@\n+BASIC_FILE_H = @BASIC_FILE_H@\n+CC = @CC@\n+CCODECVT_CC = @CCODECVT_CC@\n+CCOLLATE_CC = @CCOLLATE_CC@\n+CCTYPE_CC = @CCTYPE_CC@\n+CFLAGS = @CFLAGS@\n+CLOCALE_CC = @CLOCALE_CC@\n+CLOCALE_H = @CLOCALE_H@\n+CLOCALE_INTERNAL_H = @CLOCALE_INTERNAL_H@\n+CMESSAGES_CC = @CMESSAGES_CC@\n+CMESSAGES_H = @CMESSAGES_H@\n+CMONEY_CC = @CMONEY_CC@\n+CNUMERIC_CC = @CNUMERIC_CC@\n+CPP = @CPP@\n+CPPFLAGS = @CPPFLAGS@\n+CPU_DEFINES_SRCDIR = @CPU_DEFINES_SRCDIR@\n+CSTDIO_H = @CSTDIO_H@\n+CTIME_CC = @CTIME_CC@\n+CTIME_H = @CTIME_H@\n+CXX = @CXX@\n+CXXCPP = @CXXCPP@\n+CXXFLAGS = @CXXFLAGS@\n+CYGPATH_W = @CYGPATH_W@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+DEBUG_FLAGS = @DEBUG_FLAGS@\n+DEFS = @DEFS@\n+DSYMUTIL = @DSYMUTIL@\n+DUMPBIN = @DUMPBIN@\n+ECHO_C = @ECHO_C@\n+ECHO_N = @ECHO_N@\n+ECHO_T = @ECHO_T@\n+EGREP = @EGREP@\n+ENABLE_PARALLEL_FALSE = @ENABLE_PARALLEL_FALSE@\n+ENABLE_PARALLEL_TRUE = @ENABLE_PARALLEL_TRUE@\n+ENABLE_SYMVERS_DARWIN_FALSE = @ENABLE_SYMVERS_DARWIN_FALSE@\n+ENABLE_SYMVERS_DARWIN_TRUE = @ENABLE_SYMVERS_DARWIN_TRUE@\n+ENABLE_SYMVERS_FALSE = @ENABLE_SYMVERS_FALSE@\n+ENABLE_SYMVERS_GNU_FALSE = @ENABLE_SYMVERS_GNU_FALSE@\n+ENABLE_SYMVERS_GNU_NAMESPACE_FALSE = @ENABLE_SYMVERS_GNU_NAMESPACE_FALSE@\n+ENABLE_SYMVERS_GNU_NAMESPACE_TRUE = @ENABLE_SYMVERS_GNU_NAMESPACE_TRUE@\n+ENABLE_SYMVERS_GNU_TRUE = @ENABLE_SYMVERS_GNU_TRUE@\n+ENABLE_SYMVERS_TRUE = @ENABLE_SYMVERS_TRUE@\n+ENABLE_VISIBILITY_FALSE = @ENABLE_VISIBILITY_FALSE@\n+ENABLE_VISIBILITY_TRUE = @ENABLE_VISIBILITY_TRUE@\n+ERROR_CONSTANTS_SRCDIR = @ERROR_CONSTANTS_SRCDIR@\n+EXEEXT = @EXEEXT@\n+EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n+FGREP = @FGREP@\n+GLIBCXX_BUILD_DEBUG_FALSE = @GLIBCXX_BUILD_DEBUG_FALSE@\n+GLIBCXX_BUILD_DEBUG_TRUE = @GLIBCXX_BUILD_DEBUG_TRUE@\n+GLIBCXX_BUILD_PCH_FALSE = @GLIBCXX_BUILD_PCH_FALSE@\n+GLIBCXX_BUILD_PCH_TRUE = @GLIBCXX_BUILD_PCH_TRUE@\n+GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE = @GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@\n+GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE = @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@\n+GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n+GLIBCXX_C_HEADERS_C_GLOBAL_FALSE = @GLIBCXX_C_HEADERS_C_GLOBAL_FALSE@\n+GLIBCXX_C_HEADERS_C_GLOBAL_TRUE = @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\n+GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n+GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n+GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n+GLIBCXX_C_HEADERS_EXTRA_FALSE = @GLIBCXX_C_HEADERS_EXTRA_FALSE@\n+GLIBCXX_C_HEADERS_EXTRA_TRUE = @GLIBCXX_C_HEADERS_EXTRA_TRUE@\n+GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n+GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n+GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n+GLIBCXX_LDBL_COMPAT_FALSE = @GLIBCXX_LDBL_COMPAT_FALSE@\n+GLIBCXX_LDBL_COMPAT_TRUE = @GLIBCXX_LDBL_COMPAT_TRUE@\n+GLIBCXX_LIBS = @GLIBCXX_LIBS@\n+GREP = @GREP@\n+INSTALL_DATA = @INSTALL_DATA@\n+INSTALL_PROGRAM = @INSTALL_PROGRAM@\n+INSTALL_SCRIPT = @INSTALL_SCRIPT@\n+INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@\n+LD = @LD@\n+LDFLAGS = @LDFLAGS@\n+LIBICONV = @LIBICONV@\n+LIBOBJS = @LIBOBJS@\n+LIBS = @LIBS@\n+LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n+LIBTOOL = @LIBTOOL@\n+LIPO = @LIPO@\n+LN_S = @LN_S@\n+LTLIBICONV = @LTLIBICONV@\n+LTLIBOBJS = @LTLIBOBJS@\n+MAINT = @MAINT@\n+MAINTAINER_MODE_FALSE = @MAINTAINER_MODE_FALSE@\n+MAINTAINER_MODE_TRUE = @MAINTAINER_MODE_TRUE@\n+MAKEINFO = @MAKEINFO@\n+NM = @NM@\n+NMEDIT = @NMEDIT@\n+OBJDUMP = @OBJDUMP@\n+OBJEXT = @OBJEXT@\n+OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n+OPT_LDFLAGS = @OPT_LDFLAGS@\n+OS_INC_SRCDIR = @OS_INC_SRCDIR@\n+OTOOL = @OTOOL@\n+OTOOL64 = @OTOOL64@\n+PACKAGE = @PACKAGE@\n+PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@\n+PACKAGE_NAME = @PACKAGE_NAME@\n+PACKAGE_STRING = @PACKAGE_STRING@\n+PACKAGE_TARNAME = @PACKAGE_TARNAME@\n+PACKAGE_VERSION = @PACKAGE_VERSION@\n+PATH_SEPARATOR = @PATH_SEPARATOR@\n+RANLIB = @RANLIB@\n+SECTION_FLAGS = @SECTION_FLAGS@\n+SECTION_LDFLAGS = @SECTION_LDFLAGS@\n+SED = @SED@\n+SET_MAKE = @SET_MAKE@\n+SHELL = @SHELL@\n+STRIP = @STRIP@\n+SYMVER_FILE = @SYMVER_FILE@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+USE_NLS = @USE_NLS@\n+VERSION = @VERSION@\n+WARN_FLAGS = @WARN_FLAGS@\n+WERROR = @WERROR@\n+ac_ct_AR = @ac_ct_AR@\n+ac_ct_AS = @ac_ct_AS@\n+ac_ct_CC = @ac_ct_CC@\n+ac_ct_CXX = @ac_ct_CXX@\n+ac_ct_DSYMUTIL = @ac_ct_DSYMUTIL@\n+ac_ct_DUMPBIN = @ac_ct_DUMPBIN@\n+ac_ct_LIPO = @ac_ct_LIPO@\n+ac_ct_NMEDIT = @ac_ct_NMEDIT@\n+ac_ct_OBJDUMP = @ac_ct_OBJDUMP@\n+ac_ct_OTOOL = @ac_ct_OTOOL@\n+ac_ct_OTOOL64 = @ac_ct_OTOOL64@\n+ac_ct_RANLIB = @ac_ct_RANLIB@\n+ac_ct_STRIP = @ac_ct_STRIP@\n+am__leading_dot = @am__leading_dot@\n+am__tar = @am__tar@\n+am__untar = @am__untar@\n+baseline_dir = @baseline_dir@\n+bindir = @bindir@\n+build = @build@\n+build_alias = @build_alias@\n+build_cpu = @build_cpu@\n+build_os = @build_os@\n+build_vendor = @build_vendor@\n+check_msgfmt = @check_msgfmt@\n+datadir = @datadir@\n+enable_shared = @enable_shared@\n+enable_static = @enable_static@\n+exec_prefix = @exec_prefix@\n+glibcxx_MOFILES = @glibcxx_MOFILES@\n+glibcxx_PCHFLAGS = @glibcxx_PCHFLAGS@\n+glibcxx_POFILES = @glibcxx_POFILES@\n+glibcxx_builddir = @glibcxx_builddir@\n+glibcxx_localedir = @glibcxx_localedir@\n+glibcxx_prefixdir = @glibcxx_prefixdir@\n+glibcxx_srcdir = @glibcxx_srcdir@\n+glibcxx_thread_h = @glibcxx_thread_h@\n+glibcxx_toolexecdir = @glibcxx_toolexecdir@\n+glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n+gxx_include_dir = @gxx_include_dir@\n+host = @host@\n+host_alias = @host_alias@\n+host_cpu = @host_cpu@\n+host_os = @host_os@\n+host_vendor = @host_vendor@\n+includedir = @includedir@\n+infodir = @infodir@\n+install_sh = @install_sh@\n+libdir = @libdir@\n+libexecdir = @libexecdir@\n+libtool_VERSION = @libtool_VERSION@\n+localstatedir = @localstatedir@\n+lt_ECHO = @lt_ECHO@\n+mandir = @mandir@\n+mkdir_p = @mkdir_p@\n+multi_basedir = @multi_basedir@\n+oldincludedir = @oldincludedir@\n+port_specific_symbol_files = @port_specific_symbol_files@\n+prefix = @prefix@\n+program_transform_name = @program_transform_name@\n+sbindir = @sbindir@\n+sharedstatedir = @sharedstatedir@\n+sysconfdir = @sysconfdir@\n+target = @target@\n+target_alias = @target_alias@\n+target_cpu = @target_cpu@\n+target_os = @target_os@\n+target_vendor = @target_vendor@\n+toplevel_srcdir = @toplevel_srcdir@\n+\n+# May be used by various substitution variables.\n+gcc_version := $(shell cat $(top_srcdir)/../gcc/BASE-VER)\n+MAINT_CHARSET = latin1\n+mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n+PWD_COMMAND = $${PWDCMD-pwd}\n+STAMP = echo timestamp >\n+toolexecdir = $(glibcxx_toolexecdir)\n+toolexeclibdir = $(glibcxx_toolexeclibdir)\n+\n+# These bits are all figured out from configure.  Look in acinclude.m4\n+# or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.\n+CONFIG_CXXFLAGS = \\\n+\t$(SECTION_FLAGS) $(EXTRA_CXX_FLAGS)\n+\n+WARN_CXXFLAGS = \\\n+\t$(WARN_FLAGS) $(WERROR) -fdiagnostics-show-location=once\n+\n+\n+# -I/-D flags to pass when compiling.\n+AM_CPPFLAGS = $(GLIBCXX_INCLUDES)\n+pythondir = $(pkgdatadir)/python\n+nobase_python_DATA = \\\n+    libstdcxx/v6/printers.py \\\n+    libstdcxx/v6/__init__.py \\\n+    libstdcxx/__init__.py\n+\n+all: all-am\n+\n+.SUFFIXES:\n+$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(top_srcdir)/fragment.am $(am__configure_deps)\n+\t@for dep in $?; do \\\n+\t  case '$(am__configure_deps)' in \\\n+\t    *$$dep*) \\\n+\t      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \\\n+\t\t&& exit 0; \\\n+\t      exit 1;; \\\n+\t  esac; \\\n+\tdone; \\\n+\techo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  --ignore-deps python/Makefile'; \\\n+\tcd $(top_srcdir) && \\\n+\t  $(AUTOMAKE) --foreign  --ignore-deps python/Makefile\n+.PRECIOUS: Makefile\n+Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status\n+\t@case '$?' in \\\n+\t  *config.status*) \\\n+\t    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \\\n+\t  *) \\\n+\t    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \\\n+\t    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \\\n+\tesac;\n+\n+$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n+\tcd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh\n+\n+$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)\n+\tcd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh\n+$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)\n+\tcd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh\n+\n+mostlyclean-libtool:\n+\t-rm -f *.lo\n+\n+clean-libtool:\n+\t-rm -rf .libs _libs\n+\n+distclean-libtool:\n+\t-rm -f libtool\n+uninstall-info-am:\n+install-nobase_pythonDATA: $(nobase_python_DATA)\n+\t@$(NORMAL_INSTALL)\n+\ttest -z \"$(pythondir)\" || $(mkdir_p) \"$(DESTDIR)$(pythondir)\"\n+\t@$(am__vpath_adj_setup) \\\n+\tlist='$(nobase_python_DATA)'; for p in $$list; do \\\n+\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n+\t  $(am__vpath_adj) \\\n+\t  echo \" $(nobase_pythonDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(pythondir)/$$f'\"; \\\n+\t  $(nobase_pythonDATA_INSTALL) \"$$d$$p\" \"$(DESTDIR)$(pythondir)/$$f\"; \\\n+\tdone\n+\n+uninstall-nobase_pythonDATA:\n+\t@$(NORMAL_UNINSTALL)\n+\t@$(am__vpath_adj_setup) \\\n+\tlist='$(nobase_python_DATA)'; for p in $$list; do \\\n+\t  $(am__vpath_adj) \\\n+\t  echo \" rm -f '$(DESTDIR)$(pythondir)/$$f'\"; \\\n+\t  rm -f \"$(DESTDIR)$(pythondir)/$$f\"; \\\n+\tdone\n+tags: TAGS\n+TAGS:\n+\n+ctags: CTAGS\n+CTAGS:\n+\n+\n+distdir: $(DISTFILES)\n+\t$(mkdir_p) $(distdir)/..\n+\t@srcdirstrip=`echo \"$(srcdir)\" | sed 's|.|.|g'`; \\\n+\ttopsrcdirstrip=`echo \"$(top_srcdir)\" | sed 's|.|.|g'`; \\\n+\tlist='$(DISTFILES)'; for file in $$list; do \\\n+\t  case $$file in \\\n+\t    $(srcdir)/*) file=`echo \"$$file\" | sed \"s|^$$srcdirstrip/||\"`;; \\\n+\t    $(top_srcdir)/*) file=`echo \"$$file\" | sed \"s|^$$topsrcdirstrip/|$(top_builddir)/|\"`;; \\\n+\t  esac; \\\n+\t  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \\\n+\t  dir=`echo \"$$file\" | sed -e 's,/[^/]*$$,,'`; \\\n+\t  if test \"$$dir\" != \"$$file\" && test \"$$dir\" != \".\"; then \\\n+\t    dir=\"/$$dir\"; \\\n+\t    $(mkdir_p) \"$(distdir)$$dir\"; \\\n+\t  else \\\n+\t    dir=''; \\\n+\t  fi; \\\n+\t  if test -d $$d/$$file; then \\\n+\t    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \\\n+\t      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \\\n+\t    fi; \\\n+\t    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \\\n+\t  else \\\n+\t    test -f $(distdir)/$$file \\\n+\t    || cp -p $$d/$$file $(distdir)/$$file \\\n+\t    || exit 1; \\\n+\t  fi; \\\n+\tdone\n+check-am: all-am\n+check: check-am\n+all-am: Makefile $(DATA) all-local\n+installdirs:\n+\tfor dir in \"$(DESTDIR)$(pythondir)\"; do \\\n+\t  test -z \"$$dir\" || $(mkdir_p) \"$$dir\"; \\\n+\tdone\n+install: install-am\n+install-exec: install-exec-am\n+install-data: install-data-am\n+uninstall: uninstall-am\n+\n+install-am: all-am\n+\t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n+\n+installcheck: installcheck-am\n+install-strip:\n+\t$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n+\t  install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n+\t  `test -z '$(STRIP)' || \\\n+\t    echo \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\"` install\n+mostlyclean-generic:\n+\n+clean-generic:\n+\n+distclean-generic:\n+\t-test -z \"$(CONFIG_CLEAN_FILES)\" || rm -f $(CONFIG_CLEAN_FILES)\n+\n+maintainer-clean-generic:\n+\t@echo \"This command is intended for maintainers to use\"\n+\t@echo \"it deletes files that may require special tools to rebuild.\"\n+clean: clean-am\n+\n+clean-am: clean-generic clean-libtool mostlyclean-am\n+\n+distclean: distclean-am\n+\t-rm -f Makefile\n+distclean-am: clean-am distclean-generic distclean-libtool\n+\n+dvi: dvi-am\n+\n+dvi-am:\n+\n+html: html-am\n+\n+info: info-am\n+\n+info-am:\n+\n+install-data-am: install-data-local install-nobase_pythonDATA\n+\n+install-exec-am:\n+\n+install-info: install-info-am\n+\n+install-man:\n+\n+installcheck-am:\n+\n+maintainer-clean: maintainer-clean-am\n+\t-rm -f Makefile\n+maintainer-clean-am: distclean-am maintainer-clean-generic\n+\n+mostlyclean: mostlyclean-am\n+\n+mostlyclean-am: mostlyclean-generic mostlyclean-libtool\n+\n+pdf: pdf-am\n+\n+pdf-am:\n+\n+ps: ps-am\n+\n+ps-am:\n+\n+uninstall-am: uninstall-info-am uninstall-nobase_pythonDATA\n+\n+.PHONY: all all-am all-local check check-am clean clean-generic \\\n+\tclean-libtool distclean distclean-generic distclean-libtool \\\n+\tdistdir dvi dvi-am html html-am info info-am install \\\n+\tinstall-am install-data install-data-am install-data-local \\\n+\tinstall-exec install-exec-am install-info install-info-am \\\n+\tinstall-man install-nobase_pythonDATA install-strip \\\n+\tinstallcheck installcheck-am installdirs maintainer-clean \\\n+\tmaintainer-clean-generic mostlyclean mostlyclean-generic \\\n+\tmostlyclean-libtool pdf pdf-am ps ps-am uninstall uninstall-am \\\n+\tuninstall-info-am uninstall-nobase_pythonDATA\n+\n+\n+all-local: gdb.py\n+\n+gdb.py: hook.in Makefile\n+\tsed -e 's,@dir@,$(pythondir),' < $(srcdir)/hook.in > $@\n+\n+install-data-local: gdb.py\n+\t@$(mkdir_p) $(DESTDIR)$(toolexeclibdir)\n+\t@libname=`cd $(toolexeclibdir) && ls -r libstdc++* | fgrep -v gdb.py | sed 1q`; \\\n+\techo \" $(INSTALL_DATA) gdb.py $(DESTDIR)$(toolexeclibdir)/$$libname-gdb.py\"; \\\n+\t$(INSTALL_DATA) gdb.py $(DESTDIR)$(toolexeclibdir)/$$libname-gdb.py\n+# Tell versions [3.59,3.63) of GNU make to not export all variables.\n+# Otherwise a system limit (for SysV at least) may be exceeded.\n+.NOEXPORT:"}, {"sha": "fe7c0722484f6265fec861cf472a263fa1ee5055", "filename": "libstdc++-v3/python/hook.in", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2Fpython%2Fhook.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2Fpython%2Fhook.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Fhook.in?ref=41850419739b8336c2b698e82be06e8b8c1a3c82", "patch": "@@ -0,0 +1,27 @@\n+# -*- python -*-\n+# Copyright (C) 2009 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+import sys\n+import gdb\n+\n+# Update module path.\n+dir = '@dir@'\n+if not dir in sys.path:\n+    sys.path.insert(0, dir)\n+\n+# Load the pretty-printers.\n+from libstdcxx.v6.printers import register_libstdcxx_printers\n+register_libstdcxx_printers (gdb.current_objfile ())"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "libstdc++-v3/python/libstdcxx/__init__.py", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2F__init__.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2F__init__.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2F__init__.py?ref=41850419739b8336c2b698e82be06e8b8c1a3c82", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "libstdc++-v3/python/libstdcxx/v6/__init__.py", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2F__init__.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2F__init__.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2F__init__.py?ref=41850419739b8336c2b698e82be06e8b8c1a3c82", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "7b22e8a0bdc0afd469b72722a32e24a0cc33cdf5", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "added", "additions": 642, "deletions": 0, "changes": 642, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41850419739b8336c2b698e82be06e8b8c1a3c82/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=41850419739b8336c2b698e82be06e8b8c1a3c82", "patch": "@@ -0,0 +1,642 @@\n+# Pretty-printers for libstc++.\n+\n+# Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+import gdb\n+import itertools\n+import re\n+\n+class StdPointerPrinter:\n+    \"Print a smart pointer of some kind\"\n+\n+    def __init__ (self, typename, val):\n+        self.typename = typename\n+        self.val = val\n+\n+    def to_string (self):\n+        if self.val['_M_refcount']['_M_pi'] == 0:\n+            return '%s (empty) %s' % (self.typename, self.val['_M_ptr'])\n+        return '%s (count %d) %s' % (self.typename,\n+                                     self.val['_M_refcount']['_M_pi']['_M_use_count'],\n+                                     self.val['_M_ptr'])\n+\n+class UniquePointerPrinter:\n+    \"Print a unique_ptr\"\n+\n+    def __init__ (self, val):\n+        self.val = val\n+\n+    def to_string (self):\n+        return self.val['_M_t']\n+\n+class StdListPrinter:\n+    \"Print a std::list\"\n+\n+    class _iterator:\n+        def __init__(self, nodetype, head):\n+            self.nodetype = nodetype\n+            self.base = head['_M_next']\n+            self.head = head.address\n+            self.count = 0\n+\n+        def __iter__(self):\n+            return self\n+\n+        def next(self):\n+            if self.base == self.head:\n+                raise StopIteration\n+            elt = self.base.cast(self.nodetype).dereference()\n+            self.base = elt['_M_next']\n+            count = self.count\n+            self.count = self.count + 1\n+            return ('[%d]' % count, elt['_M_data'])\n+\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def children(self):\n+        itype = self.val.type.template_argument(0)\n+        nodetype = gdb.lookup_type('std::_List_node<%s>' % itype).pointer()\n+        return self._iterator(nodetype, self.val['_M_impl']['_M_node'])\n+\n+    def to_string(self):\n+        if self.val['_M_impl']['_M_node'].address == self.val['_M_impl']['_M_node']['_M_next']:\n+            return 'empty std::list'\n+        return 'std::list'\n+\n+class StdListIteratorPrinter:\n+    \"Print std::list::iterator\"\n+\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def to_string(self):\n+        itype = self.val.type.template_argument(0)\n+        nodetype = gdb.lookup_type('std::_List_node<%s>' % itype).pointer()\n+        return self.val['_M_node'].cast(nodetype).dereference()['_M_data']\n+\n+class StdSlistPrinter:\n+    \"Print a __gnu_cxx::slist\"\n+\n+    class _iterator:\n+        def __init__(self, nodetype, head):\n+            self.nodetype = nodetype\n+            self.base = head['_M_head']['_M_next']\n+            self.count = 0\n+\n+        def __iter__(self):\n+            return self\n+\n+        def next(self):\n+            if self.base == 0:\n+                raise StopIteration\n+            elt = self.base.cast(self.nodetype).dereference()\n+            self.base = elt['_M_next']\n+            count = self.count\n+            self.count = self.count + 1\n+            return ('[%d]' % count, elt['_M_data'])\n+\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def children(self):\n+        itype = self.val.type.template_argument(0)\n+        nodetype = gdb.lookup_type('__gnu_cxx::_Slist_node<%s>' % itype).pointer()\n+        return self._iterator(nodetype, self.val)\n+\n+    def to_string(self):\n+        if self.val['_M_head']['_M_next'] == 0:\n+            return 'empty __gnu_cxx::slist'\n+        return '__gnu_cxx::slist'\n+\n+class StdSlistIteratorPrinter:\n+    \"Print __gnu_cxx::slist::iterator\"\n+\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def to_string(self):\n+        itype = self.val.type.template_argument(0)\n+        nodetype = gdb.lookup_type('__gnu_cxx::_Slist_node<%s>' % itype).pointer()\n+        return self.val['_M_node'].cast(nodetype).dereference()['_M_data']\n+\n+class StdVectorPrinter:\n+    \"Print a std::vector\"\n+\n+    class _iterator:\n+        def __init__ (self, start, finish):\n+            self.item = start\n+            self.finish = finish\n+            self.count = 0\n+\n+        def __iter__(self):\n+            return self\n+\n+        def next(self):\n+            if self.item == self.finish:\n+                raise StopIteration\n+            count = self.count\n+            self.count = self.count + 1\n+            elt = self.item.dereference()\n+            self.item = self.item + 1\n+            return ('[%d]' % count, elt)\n+\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def children(self):\n+        return self._iterator(self.val['_M_impl']['_M_start'],\n+                              self.val['_M_impl']['_M_finish'])\n+\n+    def to_string(self):\n+        start = self.val['_M_impl']['_M_start']\n+        finish = self.val['_M_impl']['_M_finish']\n+        end = self.val['_M_impl']['_M_end_of_storage']\n+        return ('std::vector of length %d, capacity %d'\n+                % (int (finish - start), int (end - start)))\n+\n+    def display_hint(self):\n+        return 'array'\n+\n+class StdVectorIteratorPrinter:\n+    \"Print std::vector::iterator\"\n+\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def to_string(self):\n+        return self.val['_M_current'].dereference()\n+\n+class StdStackOrQueuePrinter:\n+    \"Print a std::stack or std::queue\"\n+\n+    def __init__ (self, typename, val):\n+        self.typename = typename\n+        self.visualizer = gdb.default_visualizer(val['c'])\n+\n+    def children (self):\n+        return self.visualizer.children()\n+\n+    def to_string (self):\n+        return '%s wrapping: %s' % (self.typename,\n+                                    self.visualizer.to_string())\n+\n+    def display_hint (self):\n+        if hasattr (self.visualizer, 'display_hint'):\n+            return self.visualizer.display_hint ()\n+        return None\n+\n+class RbtreeIterator:\n+    def __init__(self, rbtree):\n+        self.size = rbtree['_M_t']['_M_impl']['_M_node_count']\n+        self.node = rbtree['_M_t']['_M_impl']['_M_header']['_M_left']\n+        self.count = 0\n+\n+    def __iter__(self):\n+        return self\n+\n+    def __len__(self):\n+        return int (self.size)\n+\n+    def next(self):\n+        if self.count == self.size:\n+            raise StopIteration\n+        result = self.node\n+        self.count = self.count + 1\n+        if self.count < self.size:\n+            # Compute the next node.\n+            node = self.node\n+            if node.dereference()['_M_right']:\n+                node = node.dereference()['_M_right']\n+                while node.dereference()['_M_left']:\n+                    node = node.dereference()['_M_left']\n+            else:\n+                parent = node.dereference()['_M_parent']\n+                while node == parent.dereference()['_M_right']:\n+                    node = parent\n+                    parent = parent.dereference()['_M_parent']\n+                if node.dereference()['_M_right'] != parent:\n+                    node = parent\n+            self.node = node\n+        return result\n+\n+# This is a pretty printer for std::_Rb_tree_iterator (which is\n+# std::map::iterator), and has nothing to do with the RbtreeIterator\n+# class above.\n+class StdRbtreeIteratorPrinter:\n+    \"Print std::map::iterator\"\n+\n+    def __init__ (self, val):\n+        self.val = val\n+\n+    def to_string (self):\n+        valuetype = self.val.type.template_argument(0)\n+        nodetype = gdb.lookup_type('std::_Rb_tree_node < %s >' % valuetype)\n+        nodetype = nodetype.pointer()\n+        return self.val.cast(nodetype).dereference()['_M_value_field']\n+\n+\n+class StdMapPrinter:\n+    \"Print a std::map or std::multimap\"\n+\n+    # Turn an RbtreeIterator into a pretty-print iterator.\n+    class _iter:\n+        def __init__(self, rbiter, type):\n+            self.rbiter = rbiter\n+            self.count = 0\n+            self.type = type\n+\n+        def __iter__(self):\n+            return self\n+\n+        def next(self):\n+            if self.count % 2 == 0:\n+                n = self.rbiter.next()\n+                n = n.cast(self.type).dereference()['_M_value_field']\n+                self.pair = n\n+                item = n['first']\n+            else:\n+                item = self.pair['second']\n+            result = ('[%d]' % self.count, item)\n+            self.count = self.count + 1\n+            return result\n+\n+    def __init__ (self, typename, val):\n+        self.typename = typename\n+        self.val = val\n+        self.iter = RbtreeIterator (val)\n+\n+    def to_string (self):\n+        return '%s with %d elements' % (self.typename, len (self.iter))\n+\n+    def children (self):\n+        keytype = self.val.type.template_argument(0).const()\n+        valuetype = self.val.type.template_argument(1)\n+        nodetype = gdb.lookup_type('std::_Rb_tree_node< std::pair< %s, %s > >' % (keytype, valuetype))\n+        nodetype = nodetype.pointer()\n+        return self._iter (self.iter, nodetype)\n+\n+    def display_hint (self):\n+        return 'map'\n+\n+class StdSetPrinter:\n+    \"Print a std::set or std::multiset\"\n+\n+    # Turn an RbtreeIterator into a pretty-print iterator.\n+    class _iter:\n+        def __init__(self, rbiter, type):\n+            self.rbiter = rbiter\n+            self.count = 0\n+            self.type = type\n+\n+        def __iter__(self):\n+            return self\n+\n+        def next(self):\n+            item = self.rbiter.next()\n+            item = item.cast(self.type).dereference()['_M_value_field']\n+            # FIXME: this is weird ... what to do?\n+            # Maybe a 'set' display hint?\n+            result = ('[%d]' % self.count, item)\n+            self.count = self.count + 1\n+            return result\n+\n+    def __init__ (self, typename, val):\n+        self.typename = typename\n+        self.val = val\n+        self.iter = RbtreeIterator (val)\n+\n+    def to_string (self):\n+        return '%s with %d elements' % (self.typename, len (self.iter))\n+\n+    def children (self):\n+        keytype = self.val.type.template_argument(0)\n+        nodetype = gdb.lookup_type('std::_Rb_tree_node< %s >' % keytype).pointer()\n+        return self._iter (self.iter, nodetype)\n+\n+class StdBitsetPrinter:\n+    \"Print a std::bitset\"\n+\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def to_string (self):\n+        # If template_argument handled values, we could print the\n+        # size.  Or we could use a regexp on the type.\n+        return 'std::bitset'\n+\n+    def children (self):\n+        words = self.val['_M_w']\n+        wtype = words.type\n+\n+        # The _M_w member can be either an unsigned long, or an\n+        # array.  This depends on the template specialization used.\n+        # If it is a single long, convert to a single element list.\n+        if wtype.code == gdb.TYPE_CODE_ARRAY:\n+            tsize = wtype.target ().sizeof\n+        else:\n+            words = [words]\n+            tsize = wtype.sizeof \n+\n+        nwords = wtype.sizeof / tsize\n+        result = []\n+        byte = 0\n+        while byte < nwords:\n+            w = words[byte]\n+            bit = 0\n+            while w != 0:\n+                if (w & 1) != 0:\n+                    # Another spot where we could use 'set'?\n+                    result.append(('[%d]' % (byte * tsize * 8 + bit), 1))\n+                bit = bit + 1\n+                w = w >> 1\n+            byte = byte + 1\n+        return result\n+\n+class StdDequePrinter:\n+    \"Print a std::deque\"\n+\n+    class _iter:\n+        def __init__(self, node, start, end, last, buffer_size):\n+            self.node = node\n+            self.p = start\n+            self.end = end\n+            self.last = last\n+            self.buffer_size = buffer_size\n+            self.count = 0\n+\n+        def __iter__(self):\n+            return self\n+\n+        def next(self):\n+            if self.p == self.last:\n+                raise StopIteration\n+\n+            result = ('[%d]' % self.count, self.p.dereference())\n+            self.count = self.count + 1\n+\n+            # Advance the 'cur' pointer.\n+            self.p = self.p + 1\n+            if self.p == self.end:\n+                # If we got to the end of this bucket, move to the\n+                # next bucket.\n+                self.node = self.node + 1\n+                self.p = self.node[0]\n+                self.end = self.p + self.buffer_size\n+\n+            return result\n+\n+    def __init__(self, val):\n+        self.val = val\n+        self.elttype = val.type.template_argument(0)\n+        size = self.elttype.sizeof\n+        if size < 512:\n+            self.buffer_size = int (512 / size)\n+        else:\n+            self.buffer_size = 1\n+\n+    def to_string(self):\n+        start = self.val['_M_impl']['_M_start']\n+        end = self.val['_M_impl']['_M_finish']\n+\n+        delta_n = end['_M_node'] - start['_M_node'] - 1\n+        delta_s = start['_M_last'] - start['_M_cur']\n+        delta_e = end['_M_cur'] - end['_M_first']\n+\n+        size = self.buffer_size * delta_n + delta_s + delta_e\n+\n+        return 'std::deque with %d elements' % long (size)\n+\n+    def children(self):\n+        start = self.val['_M_impl']['_M_start']\n+        end = self.val['_M_impl']['_M_finish']\n+        return self._iter(start['_M_node'], start['_M_cur'], start['_M_last'],\n+                          end['_M_cur'], self.buffer_size)\n+\n+    def display_hint (self):\n+        return 'array'\n+\n+class StdDequeIteratorPrinter:\n+    \"Print std::deque::iterator\"\n+\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def to_string(self):\n+        return self.val['_M_cur'].dereference()\n+\n+class StdStringPrinter:\n+    \"Print a std::basic_string of some kind\"\n+\n+    def __init__(self, encoding, val):\n+        self.encoding = encoding\n+        self.val = val\n+\n+    def to_string(self):\n+        # Look up the target encoding as late as possible.\n+        encoding = self.encoding\n+        if encoding == 0:\n+            encoding = gdb.parameter('target-charset')\n+        elif encoding == 1:\n+            encoding = gdb.parameter('target-wide-charset')\n+        elif isinstance(encoding, WideEncoding):\n+            encoding = encoding.value\n+        return self.val['_M_dataplus']['_M_p'].string(encoding)\n+\n+    def display_hint (self):\n+        return 'string'\n+\n+class Tr1HashtableIterator:\n+    def __init__ (self, hash):\n+        self.count = 0\n+        self.n_buckets = hash['_M_element_count']\n+        if self.n_buckets == 0:\n+            self.node = False\n+        else:\n+            self.bucket = hash['_M_buckets']\n+            self.node = self.bucket[0]\n+            self.update ()\n+\n+    def __iter__ (self):\n+        return self\n+\n+    def update (self):\n+        # If we advanced off the end of the chain, move to the next\n+        # bucket.\n+        while self.node == 0:\n+            self.bucket = self.bucket + 1\n+            self.node = self.bucket[0]\n+\n+       # If we advanced off the end of the bucket array, then\n+       # we're done.\n+        if self.count == self.n_buckets:\n+            self.node = False\n+        else:\n+            self.count = self.count + 1\n+\n+    def next (self):\n+        if not self.node:\n+            raise StopIteration\n+        result = self.node.dereference()['_M_v']\n+        self.node = self.node.dereference()['_M_next']\n+        self.update ()\n+        return result\n+\n+class Tr1UnorderedSetPrinter:\n+    \"Print a tr1::unordered_set\"\n+\n+    def __init__ (self, typename, val):\n+        self.typename = typename\n+        self.val = val\n+\n+    def to_string (self):\n+        return '%s with %d elements' % (self.typename, self.val['_M_element_count'])\n+\n+    @staticmethod\n+    def format_count (i):\n+        return '[%d]' % i\n+\n+    def children (self):\n+        counter = itertools.imap (self.format_count, itertools.count())\n+        return itertools.izip (counter, Tr1HashtableIterator (self.val))\n+\n+class Tr1UnorderedMapPrinter:\n+    \"Print a tr1::unordered_map\"\n+\n+    def __init__ (self, typename, val):\n+        self.typename = typename\n+        self.val = val\n+\n+    def to_string (self):\n+        return '%s with %d elements' % (self.typename, self.val['_M_element_count'])\n+\n+    @staticmethod\n+    def flatten (list):\n+        for elt in list:\n+            for i in elt:\n+                yield i\n+\n+    @staticmethod\n+    def format_one (elt):\n+        return (elt['first'], elt['second'])\n+\n+    @staticmethod\n+    def format_count (i):\n+        return '[%d]' % i\n+\n+    def children (self):\n+        counter = itertools.imap (self.format_count, itertools.count())\n+        # Map over the hash table and flatten the result.\n+        data = self.flatten (itertools.imap (self.format_one, Tr1HashtableIterator (self.val)))\n+        # Zip the two iterators together.\n+        return itertools.izip (counter, data)\n+\n+    def display_hint (self):\n+        return 'map'\n+\n+def register_libstdcxx_printers (obj):\n+    \"Register libstdc++ pretty-printers with objfile Obj.\"\n+\n+    if obj == None:\n+        obj = gdb\n+\n+    obj.pretty_printers.append (lookup_function)\n+\n+def lookup_function (val):\n+    \"Look-up and return a pretty-printer that can print val.\"\n+\n+    # Get the type.\n+    type = val.type;\n+\n+    # If it points to a reference, get the reference.\n+    if type.code == gdb.TYPE_CODE_REF:\n+        type = type.target ()\n+\n+    # Get the unqualified type, stripped of typedefs.\n+    type = type.unqualified ().strip_typedefs ()\n+\n+    # Get the type name.    \n+    typename = type.tag\n+    if typename == None:\n+        return None\n+\n+    # Iterate over local dictionary of types to determine\n+    # if a printer is registered for that type.  Return an\n+    # instantiation of the printer if found.\n+    for function in pretty_printers_dict:\n+        if function.search (typename):\n+            return pretty_printers_dict[function] (val)\n+        \n+    # Cannot find a pretty printer.  Return None.\n+    return None\n+\n+def build_libstdcxx_dictionary ():\n+    # libstdc++ objects requiring pretty-printing.\n+    # In order from:\n+    # http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a01847.html\n+    pretty_printers_dict[re.compile('^std::basic_string<char,.*>$')] = lambda val: StdStringPrinter(0, val)\n+    pretty_printers_dict[re.compile('^std::basic_string<wchar_t,.*>$')] = lambda val: StdStringPrinter(1, val)\n+    pretty_printers_dict[re.compile('^std::basic_string<char16_t,.*>$')] = lambda val: StdStringPrinter('UTF-16', val)\n+    pretty_printers_dict[re.compile('^std::basic_string<char32_t,.*>$')] = lambda val: StdStringPrinter('UTF-32', val)\n+    pretty_printers_dict[re.compile('^std::bitset<.*>$')] = StdBitsetPrinter\n+    pretty_printers_dict[re.compile('^std::deque<.*>$')] = StdDequePrinter\n+    pretty_printers_dict[re.compile('^std::list<.*>$')] = StdListPrinter\n+    pretty_printers_dict[re.compile('^std::map<.*>$')] = lambda val: StdMapPrinter(\"std::map\", val)\n+    pretty_printers_dict[re.compile('^std::multimap<.*>$')] = lambda val: StdMapPrinter(\"std::multimap\", val)\n+    pretty_printers_dict[re.compile('^std::multiset<.*>$')] = lambda val: StdSetPrinter(\"std::multiset\", val)\n+    pretty_printers_dict[re.compile('^std::priority_queue<.*>$')] = lambda val: StdStackOrQueuePrinter(\"std::priority_queue\", val)\n+    pretty_printers_dict[re.compile('^std::queue<.*>$')] = lambda val: StdStackOrQueuePrinter(\"std::queue\", val)\n+    pretty_printers_dict[re.compile('^std::set<.*>$')] = lambda val: StdSetPrinter(\"std::set\", val)\n+    pretty_printers_dict[re.compile('^std::stack<.*>$')] = lambda val: StdStackOrQueuePrinter(\"std::stack\", val)\n+    pretty_printers_dict[re.compile('^std::unique_ptr<.*>$')] = UniquePointerPrinter\n+    pretty_printers_dict[re.compile('^std::vector<.*>$')] = StdVectorPrinter\n+    # vector<bool>\n+\n+    # These are the TR1 and C++0x printers.\n+    # For array - the default GDB pretty-printer seems reasonable.\n+    pretty_printers_dict[re.compile('^std::shared_ptr<.*>$')] = lambda val: StdPointerPrinter ('std::shared_ptr', val)\n+    pretty_printers_dict[re.compile('^std::weak_ptr<.*>$')] = lambda val: StdPointerPrinter ('std::weak_ptr', val)\n+    pretty_printers_dict[re.compile('^std::unordered_map<.*>$')] = lambda val: Tr1UnorderedMapPrinter ('std::unordered_map', val)\n+    pretty_printers_dict[re.compile('^std::unordered_set<.*>$')] = lambda val: Tr1UnorderedSetPrinter ('std::unordered_set', val)\n+    pretty_printers_dict[re.compile('^std::unordered_multimap<.*>$')] = lambda val: Tr1UnorderedMapPrinter ('std::unordered_multimap', val)\n+    pretty_printers_dict[re.compile('^std::unordered_multiset<.*>$')] = lambda val: Tr1UnorderedSetPrinter ('std::unordered_multiset', val)\n+\n+    pretty_printers_dict[re.compile('^std::tr1::shared_ptr<.*>$')] = lambda val: StdPointerPrinter ('std::tr1::shared_ptr', val)\n+    pretty_printers_dict[re.compile('^std::tr1::weak_ptr<.*>$')] = lambda val: StdPointerPrinter ('std::tr1::weak_ptr', val)\n+    pretty_printers_dict[re.compile('^std::tr1::unordered_map<.*>$')] = lambda val: Tr1UnorderedMapPrinter ('std::tr1::unordered_map', val)\n+    pretty_printers_dict[re.compile('^std::tr1::unordered_set<.*>$')] = lambda val: Tr1UnorderedSetPrinter ('std::tr1::unordered_set', val)\n+    pretty_printers_dict[re.compile('^std::tr1::unordered_multimap<.*>$')] = lambda val: Tr1UnorderedMapPrinter ('std::tr1::unordered_multimap', val)\n+    pretty_printers_dict[re.compile('^std::tr1::unordered_multiset<.*>$')] = lambda val: Tr1UnorderedSetPrinter ('std::tr1::unordered_multiset', val)\n+\n+\n+    # Extensions.\n+    pretty_printers_dict[re.compile('^__gnu_cxx::slist<.*>$')] = StdSlistPrinter\n+\n+    if True:\n+        # These shouldn't be necessary, if GDB \"print *i\" worked.\n+        # But it often doesn't, so here they are.\n+        pretty_printers_dict[re.compile('^std::_List_iterator<.*>$')] = lambda val: StdListIteratorPrinter(val)\n+        pretty_printers_dict[re.compile('^std::_List_const_iterator<.*>$')] = lambda val: StdListIteratorPrinter(val)\n+        pretty_printers_dict[re.compile('^std::_Rb_tree_iterator<.*>$')] = lambda val: StdRbtreeIteratorPrinter(val)\n+        pretty_printers_dict[re.compile('^std::_Rb_tree_const_iterator<.*>$')] = lambda val: StdRbtreeIteratorPrinter(val)\n+        pretty_printers_dict[re.compile('^std::_Deque_iterator<.*>$')] = lambda val: StdDequeIteratorPrinter(val)\n+        pretty_printers_dict[re.compile('^std::_Deque_const_iterator<.*>$')] = lambda val: StdDequeIteratorPrinter(val)\n+        pretty_printers_dict[re.compile('^__gnu_cxx::__normal_iterator<.*>$')] = lambda val: StdVectorIteratorPrinter(val)\n+        pretty_printers_dict[re.compile('^__gnu_cxx::_Slist_iterator<.*>$')] = lambda val: StdSlistIteratorPrinter(val)\n+\n+pretty_printers_dict = {}\n+\n+build_libstdcxx_dictionary ()"}]}