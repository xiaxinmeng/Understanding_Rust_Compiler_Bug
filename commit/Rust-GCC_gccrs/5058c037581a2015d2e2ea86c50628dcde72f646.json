{"sha": "5058c037581a2015d2e2ea86c50628dcde72f646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA1OGMwMzc1ODFhMjAxNWQyZTJlYTg2YzUwNjI4ZGNkZTcyZjY0Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-03-26T19:54:44Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-03-26T19:54:44Z"}, "message": "ipa-inline-analysis.c (redirect_to_unreachable): New function.\n\n\t* ipa-inline-analysis.c (redirect_to_unreachable): New function.\n\t(edge_set_predicate): Use it to mark unreachable edges.\n\t(inline_summary_t::duplicate): Remove unnecesary code.\n\t(remap_edge_summaries): Likewise.\n\t(dump_inline_summary): Report contains_cilk_spawn.\n\t(compute_inline_parameters): Compute contains_cilk_spawn.\n\t(inline_read_section, inline_write_summary): Stream\n\tcontains_cilk_spawn.\n\t* ipa-inline.c (can_inline_edge_p): Do not tuch \n\tDECL_STRUCT_FUNCTION that may not be available;\n\tuse CIF_CILK_SPAWN for cilk; fix optimization attribute checks;\n\tremove check for callee_fun->can_throw_non_call_exceptions and\n\treplace it by optimization attribute check; check for flag_exceptions.\n\t* ipa-inline-transform.c (inline_call): Maintain\n\tDECL_FUNCTION_PERSONALITY\n\t* ipa-inline.h (inline_summary): Add contains_cilk_spawn.\n\nFrom-SVN: r221706", "tree": {"sha": "ff4f08f1aba0f9a9dd96795eaa4ede3df6b92be8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff4f08f1aba0f9a9dd96795eaa4ede3df6b92be8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5058c037581a2015d2e2ea86c50628dcde72f646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5058c037581a2015d2e2ea86c50628dcde72f646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5058c037581a2015d2e2ea86c50628dcde72f646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5058c037581a2015d2e2ea86c50628dcde72f646/comments", "author": null, "committer": null, "parents": [{"sha": "082276588e742c74af0216ae824b112b8ec7bb97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/082276588e742c74af0216ae824b112b8ec7bb97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/082276588e742c74af0216ae824b112b8ec7bb97"}], "stats": {"total": 167, "additions": 98, "deletions": 69}, "files": [{"sha": "d9b125ec7ff87d058c871c762389bcb24b6ae7bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5058c037581a2015d2e2ea86c50628dcde72f646/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5058c037581a2015d2e2ea86c50628dcde72f646/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5058c037581a2015d2e2ea86c50628dcde72f646", "patch": "@@ -1,3 +1,22 @@\n+2015-03-26  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-inline-analysis.c (redirect_to_unreachable): New function.\n+\t(edge_set_predicate): Use it to mark unreachable edges.\n+\t(inline_summary_t::duplicate): Remove unnecesary code.\n+\t(remap_edge_summaries): Likewise.\n+\t(dump_inline_summary): Report contains_cilk_spawn.\n+\t(compute_inline_parameters): Compute contains_cilk_spawn.\n+\t(inline_read_section, inline_write_summary): Stream\n+\tcontains_cilk_spawn.\n+\t* ipa-inline.c (can_inline_edge_p): Do not tuch \n+\tDECL_STRUCT_FUNCTION that may not be available;\n+\tuse CIF_CILK_SPAWN for cilk; fix optimization attribute checks;\n+\tremove check for callee_fun->can_throw_non_call_exceptions and\n+\treplace it by optimization attribute check; check for flag_exceptions.\n+\t* ipa-inline-transform.c (inline_call): Maintain\n+\tDECL_FUNCTION_PERSONALITY\n+\t* ipa-inline.h (inline_summary): Add contains_cilk_spawn.\n+\n 2015-03-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/65551"}, {"sha": "6f34c47449b60c72ceda712b6e6dfa27ff11f4a9", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 35, "deletions": 36, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5058c037581a2015d2e2ea86c50628dcde72f646/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5058c037581a2015d2e2ea86c50628dcde72f646/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=5058c037581a2015d2e2ea86c50628dcde72f646", "patch": "@@ -760,6 +760,31 @@ account_size_time (struct inline_summary *summary, int size, int time,\n     }\n }\n \n+/* We proved E to be unreachable, redirect it to __bultin_unreachable.  */\n+\n+static void\n+redirect_to_unreachable (struct cgraph_edge *e)\n+{\n+  struct cgraph_node *callee = !e->inline_failed ? e->callee : NULL;\n+  struct inline_edge_summary *es = inline_edge_summary (e);\n+\n+  if (e->speculative)\n+    e->resolve_speculation (builtin_decl_implicit (BUILT_IN_UNREACHABLE));\n+  if (!e->callee)\n+    e->make_direct (cgraph_node::get_create\n+\t\t      (builtin_decl_implicit (BUILT_IN_UNREACHABLE)));\n+  else\n+    e->redirect_callee (cgraph_node::get_create\n+\t\t\t(builtin_decl_implicit (BUILT_IN_UNREACHABLE)));\n+  e->inline_failed = CIF_UNREACHABLE;\n+  e->frequency = 0;\n+  e->count = 0;\n+  es->call_stmt_size = 0;\n+  es->call_stmt_time = 0;\n+  if (callee)\n+    callee->remove_symbol_and_inline_clones ();\n+}\n+\n /* Set predicate for edge E.  */\n \n static void\n@@ -769,18 +794,8 @@ edge_set_predicate (struct cgraph_edge *e, struct predicate *predicate)\n \n   /* If the edge is determined to be never executed, redirect it\n      to BUILTIN_UNREACHABLE to save inliner from inlining into it.  */\n-  if (predicate && false_predicate_p (predicate) && e->callee)\n-    {\n-      struct cgraph_node *callee = !e->inline_failed ? e->callee : NULL;\n-\n-      e->redirect_callee (cgraph_node::get_create\n-\t\t\t    (builtin_decl_implicit (BUILT_IN_UNREACHABLE)));\n-      e->inline_failed = CIF_UNREACHABLE;\n-      es->call_stmt_size = 0;\n-      es->call_stmt_time = 0;\n-      if (callee)\n-\tcallee->remove_symbol_and_inline_clones ();\n-    }\n+  if (predicate && false_predicate_p (predicate))\n+    redirect_to_unreachable (e);\n   if (predicate && !true_predicate_p (predicate))\n     {\n       if (!es->predicate)\n@@ -1228,10 +1243,7 @@ inline_summary_t::duplicate (cgraph_node *src,\n \t\t\t\t\t\t\t     info);\n \t  if (false_predicate_p (&new_predicate)\n \t      && !false_predicate_p (es->predicate))\n-\t    {\n-\t      optimized_out_size += es->call_stmt_size * INLINE_SIZE_SCALE;\n-\t      edge->frequency = 0;\n-\t    }\n+\t    optimized_out_size += es->call_stmt_size * INLINE_SIZE_SCALE;\n \t  edge_set_predicate (edge, &new_predicate);\n \t}\n \n@@ -1250,10 +1262,7 @@ inline_summary_t::duplicate (cgraph_node *src,\n \t\t\t\t\t\t\t     info);\n \t  if (false_predicate_p (&new_predicate)\n \t      && !false_predicate_p (es->predicate))\n-\t    {\n-\t      optimized_out_size += es->call_stmt_size * INLINE_SIZE_SCALE;\n-\t      edge->frequency = 0;\n-\t    }\n+\t    optimized_out_size += es->call_stmt_size * INLINE_SIZE_SCALE;\n \t  edge_set_predicate (edge, &new_predicate);\n \t}\n       remap_hint_predicate_after_duplication (&info->loop_iterations,\n@@ -1441,6 +1450,8 @@ dump_inline_summary (FILE *f, struct cgraph_node *node)\n \tfprintf (f, \" always_inline\");\n       if (s->inlinable)\n \tfprintf (f, \" inlinable\");\n+      if (s->contains_cilk_spawn)\n+\tfprintf (f, \" contains_cilk_spawn\");\n       fprintf (f, \"\\n  self time:       %i\\n\", s->self_time);\n       fprintf (f, \"  global time:     %i\\n\", s->time);\n       fprintf (f, \"  self size:       %i\\n\", s->self_size);\n@@ -2925,6 +2936,8 @@ compute_inline_parameters (struct cgraph_node *node, bool early)\n   else\n     info->inlinable = tree_inlinable_function_p (node->decl);\n \n+  info->contains_cilk_spawn = fn_contains_cilk_spawn_p (cfun);\n+\n   /* Type attributes can use parameter indices to describe them.  */\n   if (TYPE_ATTRIBUTES (TREE_TYPE (node->decl)))\n     node->local.can_change_signature = false;\n@@ -3487,14 +3500,6 @@ remap_edge_summaries (struct cgraph_edge *inlined_edge,\n \t\t\t\t   es->predicate, operand_map, offset_map,\n \t\t\t\t   possible_truths, toplev_predicate);\n \t      edge_set_predicate (e, &p);\n-\t      /* TODO: We should remove the edge for code that will be\n-\t         optimized out, but we need to keep verifiers and tree-inline\n-\t         happy.  Make it cold for now.  */\n-\t      if (false_predicate_p (&p))\n-\t\t{\n-\t\t  e->count = 0;\n-\t\t  e->frequency = 0;\n-\t\t}\n \t    }\n \t  else\n \t    edge_set_predicate (e, toplev_predicate);\n@@ -3516,14 +3521,6 @@ remap_edge_summaries (struct cgraph_edge *inlined_edge,\n \t\t\t       es->predicate, operand_map, offset_map,\n \t\t\t       possible_truths, toplev_predicate);\n \t  edge_set_predicate (e, &p);\n-\t  /* TODO: We should remove the edge for code that will be optimized\n-\t     out, but we need to keep verifiers and tree-inline happy.\n-\t     Make it cold for now.  */\n-\t  if (false_predicate_p (&p))\n-\t    {\n-\t      e->count = 0;\n-\t      e->frequency = 0;\n-\t    }\n \t}\n       else\n \tedge_set_predicate (e, toplev_predicate);\n@@ -4228,6 +4225,7 @@ inline_read_section (struct lto_file_decl_data *file_data, const char *data,\n \n       bp = streamer_read_bitpack (&ib);\n       info->inlinable = bp_unpack_value (&bp, 1);\n+      info->contains_cilk_spawn = bp_unpack_value (&bp, 1);\n \n       count2 = streamer_read_uhwi (&ib);\n       gcc_assert (!info->conds);\n@@ -4393,6 +4391,7 @@ inline_write_summary (void)\n \t  streamer_write_hwi (ob, info->self_time);\n \t  bp = bitpack_create (ob->main_stream);\n \t  bp_pack_value (&bp, info->inlinable, 1);\n+\t  bp_pack_value (&bp, info->contains_cilk_spawn, 1);\n \t  streamer_write_bitpack (&bp);\n \t  streamer_write_uhwi (ob, vec_safe_length (info->conds));\n \t  for (i = 0; vec_safe_iterate (info->conds, i, &c); i++)"}, {"sha": "952659c99fd93ff3248a91e078a9da2b444e0718", "filename": "gcc/ipa-inline-transform.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5058c037581a2015d2e2ea86c50628dcde72f646/gcc%2Fipa-inline-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5058c037581a2015d2e2ea86c50628dcde72f646/gcc%2Fipa-inline-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-transform.c?ref=5058c037581a2015d2e2ea86c50628dcde72f646", "patch": "@@ -322,6 +322,10 @@ inline_call (struct cgraph_edge *e, bool update_original,\n   if (to->global.inlined_to)\n     to = to->global.inlined_to;\n \n+  if (DECL_FUNCTION_PERSONALITY (callee->decl))\n+    DECL_FUNCTION_PERSONALITY (to->decl)\n+      = DECL_FUNCTION_PERSONALITY (callee->decl);\n+\n   /* If aliases are involved, redirect edge to the actual destination and\n      possibly remove the aliases.  */\n   if (e->callee != callee)"}, {"sha": "49af4cec13d55dc1975cf29d7fd836a83f7aa8bd", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 37, "deletions": 33, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5058c037581a2015d2e2ea86c50628dcde72f646/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5058c037581a2015d2e2ea86c50628dcde72f646/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=5058c037581a2015d2e2ea86c50628dcde72f646", "patch": "@@ -142,7 +142,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-utils.h\"\n #include \"sreal.h\"\n #include \"auto-profile.h\"\n-#include \"cilk.h\"\n #include \"builtins.h\"\n #include \"fibonacci_heap.h\"\n #include \"lto-streamer.h\"\n@@ -329,8 +328,6 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n   tree caller_tree = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (caller->decl);\n   tree callee_tree\n     = callee ? DECL_FUNCTION_SPECIFIC_OPTIMIZATION (callee->decl) : NULL;\n-  struct function *caller_fun = caller->get_fun ();\n-  struct function *callee_fun = callee ? callee->get_fun () : NULL;\n \n   if (!callee->definition)\n     {\n@@ -342,12 +339,6 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n       e->inline_failed = CIF_USES_COMDAT_LOCAL;\n       inlinable = false;\n     }\n-  else if (!inline_summaries->get (callee)->inlinable\n-\t   || (caller_fun && fn_contains_cilk_spawn_p (caller_fun)))\n-    {\n-      e->inline_failed = CIF_FUNCTION_NOT_INLINABLE;\n-      inlinable = false;\n-    }\n   else if (avail <= AVAIL_INTERPOSABLE)\n     {\n       e->inline_failed = CIF_OVERWRITABLE;\n@@ -375,23 +366,23 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n       e->inline_failed = CIF_UNSPECIFIED;\n       inlinable = false;\n     }\n-  /* Don't inline if the callee can throw non-call exceptions but the\n-     caller cannot.\n-     FIXME: this is obviously wrong for LTO where STRUCT_FUNCTION is missing.\n-     Move the flag into cgraph node or mirror it in the inline summary.  */\n-  else if (callee_fun && callee_fun->can_throw_non_call_exceptions\n-\t   && !(caller_fun && caller_fun->can_throw_non_call_exceptions))\n-    {\n-      e->inline_failed = CIF_NON_CALL_EXCEPTIONS;\n-      inlinable = false;\n-    }\n   /* Check compatibility of target optimization options.  */\n   else if (!targetm.target_option.can_inline_p (caller->decl,\n \t\t\t\t\t\tcallee->decl))\n     {\n       e->inline_failed = CIF_TARGET_OPTION_MISMATCH;\n       inlinable = false;\n     }\n+  else if (!inline_summaries->get (callee)->inlinable)\n+    {\n+      e->inline_failed = CIF_FUNCTION_NOT_INLINABLE;\n+      inlinable = false;\n+    }\n+  else if (inline_summaries->get (caller)->contains_cilk_spawn)\n+    {\n+      e->inline_failed = CIF_CILK_SPAWN;\n+      inlinable = false;\n+    }\n   /* Don't inline a function with mismatched sanitization attributes. */\n   else if (!sanitize_attrs_match_for_inline_p (caller->decl, callee->decl))\n     {\n@@ -416,38 +407,51 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n       /* Strictly speaking only when the callee contains signed integer\n          math where overflow is undefined.  */\n       if ((opt_for_fn (caller->decl, flag_strict_overflow)\n-\t   != opt_for_fn (caller->decl, flag_strict_overflow))\n+\t   != opt_for_fn (callee->decl, flag_strict_overflow))\n \t  || (opt_for_fn (caller->decl, flag_wrapv)\n-\t      != opt_for_fn (caller->decl, flag_wrapv))\n+\t      != opt_for_fn (callee->decl, flag_wrapv))\n \t  || (opt_for_fn (caller->decl, flag_trapv)\n-\t      != opt_for_fn (caller->decl, flag_trapv))\n+\t      != opt_for_fn (callee->decl, flag_trapv))\n \t  /* Strictly speaking only when the callee contains memory\n \t     accesses that are not using alias-set zero anyway.  */\n \t  || (opt_for_fn (caller->decl, flag_strict_aliasing)\n-\t      != opt_for_fn (caller->decl, flag_strict_aliasing))\n+\t      != opt_for_fn (callee->decl, flag_strict_aliasing))\n \t  /* Strictly speaking only when the callee uses FP math.  */\n \t  || (opt_for_fn (caller->decl, flag_rounding_math)\n-\t      != opt_for_fn (caller->decl, flag_rounding_math))\n+\t      != opt_for_fn (callee->decl, flag_rounding_math))\n \t  || (opt_for_fn (caller->decl, flag_trapping_math)\n-\t      != opt_for_fn (caller->decl, flag_trapping_math))\n+\t      != opt_for_fn (callee->decl, flag_trapping_math))\n \t  || (opt_for_fn (caller->decl, flag_unsafe_math_optimizations)\n-\t      != opt_for_fn (caller->decl, flag_unsafe_math_optimizations))\n+\t      != opt_for_fn (callee->decl, flag_unsafe_math_optimizations))\n \t  || (opt_for_fn (caller->decl, flag_finite_math_only)\n-\t      != opt_for_fn (caller->decl, flag_finite_math_only))\n+\t      != opt_for_fn (callee->decl, flag_finite_math_only))\n \t  || (opt_for_fn (caller->decl, flag_signaling_nans)\n-\t      != opt_for_fn (caller->decl, flag_signaling_nans))\n+\t      != opt_for_fn (callee->decl, flag_signaling_nans))\n \t  || (opt_for_fn (caller->decl, flag_cx_limited_range)\n-\t      != opt_for_fn (caller->decl, flag_cx_limited_range))\n+\t      != opt_for_fn (callee->decl, flag_cx_limited_range))\n \t  || (opt_for_fn (caller->decl, flag_signed_zeros)\n-\t      != opt_for_fn (caller->decl, flag_signed_zeros))\n+\t      != opt_for_fn (callee->decl, flag_signed_zeros))\n \t  || (opt_for_fn (caller->decl, flag_associative_math)\n-\t      != opt_for_fn (caller->decl, flag_associative_math))\n+\t      != opt_for_fn (callee->decl, flag_associative_math))\n \t  || (opt_for_fn (caller->decl, flag_reciprocal_math)\n-\t      != opt_for_fn (caller->decl, flag_reciprocal_math))\n+\t      != opt_for_fn (callee->decl, flag_reciprocal_math))\n+\t  /* We do not want to make code compiled with exceptions to be brought\n+\t     into a non-EH function unless we know that the callee does not\n+\t     throw.  This is tracked by DECL_FUNCTION_PERSONALITY.  */\n+\t  || (opt_for_fn (caller->decl, flag_non_call_exceptions)\n+\t      != opt_for_fn (callee->decl, flag_non_call_exceptions)\n+\t      /* TODO: We also may allow bringing !flag_non_call_exceptions\n+\t\t to flag_non_call_exceptions function, but that may need\n+\t\t extra work in tree-inline to add the extra EH edges.  */\n+\t      && (!opt_for_fn (callee->decl, flag_non_call_exceptions)\n+\t\t  || DECL_FUNCTION_PERSONALITY (callee->decl)))\n+\t  || (!opt_for_fn (caller->decl, flag_exceptions)\n+\t      && opt_for_fn (callee->decl, flag_exceptions)\n+\t      && DECL_FUNCTION_PERSONALITY (callee->decl))\n \t  /* Strictly speaking only when the callee contains function\n \t     calls that may end up setting errno.  */\n \t  || (opt_for_fn (caller->decl, flag_errno_math)\n-\t      != opt_for_fn (caller->decl, flag_errno_math))\n+\t      != opt_for_fn (callee->decl, flag_errno_math))\n \t  /* When devirtualization is diabled for callee, it is not safe\n \t     to inline it as we possibly mangled the type info.\n \t     Allow early inlining of always inlines.  */"}, {"sha": "ed4d66fef4afcec0efa80b41e34ebbb172dd99d2", "filename": "gcc/ipa-inline.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5058c037581a2015d2e2ea86c50628dcde72f646/gcc%2Fipa-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5058c037581a2015d2e2ea86c50628dcde72f646/gcc%2Fipa-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.h?ref=5058c037581a2015d2e2ea86c50628dcde72f646", "patch": "@@ -126,6 +126,9 @@ struct GTY(()) inline_summary\n \n   /* False when there something makes inlining impossible (such as va_arg).  */\n   unsigned inlinable : 1;\n+  /* True when function contains cilk spawn (and thus we can not inline\n+     into it).  */\n+  unsigned contains_cilk_spawn : 1;\n \n   /* Information about function that will result after applying all the\n      inline decisions present in the callgraph.  Generally kept up to"}]}