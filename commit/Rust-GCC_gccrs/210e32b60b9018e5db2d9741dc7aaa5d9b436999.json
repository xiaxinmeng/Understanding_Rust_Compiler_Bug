{"sha": "210e32b60b9018e5db2d9741dc7aaa5d9b436999", "node_id": "C_kwDOANBUbNoAKDIxMGUzMmI2MGI5MDE4ZTVkYjJkOTc0MWRjN2FhYTVkOWI0MzY5OTk", "commit": {"author": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2022-03-30T14:53:29Z"}, "committer": {"name": "Sebastian Huber", "email": "sebastian.huber@embedded-brains.de", "date": "2022-04-28T18:46:50Z"}, "message": "gcov-tool: Add merge-stream subcommand\n\ngcc/\n\n\t* doc/gcov-tool.texi: Document merge-stream subcommand.\n\t* doc/invoke.texi (fprofile-info-section): Mention merge-stream\n\tsubcommand of gcov-tool.\n\t* gcov-tool.cc (gcov_profile_merge_stream): Declare.\n\t(print_merge_stream_usage_message): New.\n\t(merge_stream_usage): Likewise.\n\t(do_merge_stream): Likewise.\n\t(print_usage): Call print_merge_stream_usage_message().\n\t(main): Call do_merge_stream() to execute merge-stream subcommand.\n\nlibgcc/\n\n\t* libgcov-util.c (consume_stream): New.\n\t(get_target_profiles_for_merge): Likewise.\n\t(gcov_profile_merge_stream): Likewise.", "tree": {"sha": "1ab37b8840ce2f34db3bbe36c9836da255e8dbac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ab37b8840ce2f34db3bbe36c9836da255e8dbac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/210e32b60b9018e5db2d9741dc7aaa5d9b436999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/210e32b60b9018e5db2d9741dc7aaa5d9b436999", "html_url": "https://github.com/Rust-GCC/gccrs/commit/210e32b60b9018e5db2d9741dc7aaa5d9b436999", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/210e32b60b9018e5db2d9741dc7aaa5d9b436999/comments", "author": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebhub", "id": 932056, "node_id": "MDQ6VXNlcjkzMjA1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/932056?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebhub", "html_url": "https://github.com/sebhub", "followers_url": "https://api.github.com/users/sebhub/followers", "following_url": "https://api.github.com/users/sebhub/following{/other_user}", "gists_url": "https://api.github.com/users/sebhub/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebhub/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebhub/subscriptions", "organizations_url": "https://api.github.com/users/sebhub/orgs", "repos_url": "https://api.github.com/users/sebhub/repos", "events_url": "https://api.github.com/users/sebhub/events{/privacy}", "received_events_url": "https://api.github.com/users/sebhub/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef9a53feae5701953da9161afef2aea0329ec8b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef9a53feae5701953da9161afef2aea0329ec8b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef9a53feae5701953da9161afef2aea0329ec8b2"}], "stats": {"total": 212, "additions": 212, "deletions": 0}, "files": [{"sha": "77150836acc4d7ee5d2256d0746eb73c9302de26", "filename": "gcc/doc/gcov-tool.texi", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/210e32b60b9018e5db2d9741dc7aaa5d9b436999/gcc%2Fdoc%2Fgcov-tool.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/210e32b60b9018e5db2d9741dc7aaa5d9b436999/gcc%2Fdoc%2Fgcov-tool.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov-tool.texi?ref=210e32b60b9018e5db2d9741dc7aaa5d9b436999", "patch": "@@ -52,6 +52,10 @@ Current gcov-tool supports the following functionalities:\n @item\n merge two sets of profiles with weights.\n \n+@item\n+read a stream of profiles with associated filenames and merge it with a set of\n+profiles with weights.\n+\n @item\n read one set of profile and rewrite profile contents. One can scale or\n normalize the count values.\n@@ -64,6 +68,12 @@ Collect the profiles for different set of inputs, and use this tool to merge\n them. One can specify the weight to factor in the relative importance of\n each input.\n \n+@item\n+Collect profiles from target systems without a filesystem (freestanding\n+environments).  Merge the collected profiles with associated profiles\n+present on the host system.  One can specify the weight to factor in the\n+relative importance of each input.\n+\n @item\n Rewrite the profile after removing a subset of the gcda files, while maintaining\n the consistency of the summary and the histogram.\n@@ -117,6 +127,10 @@ gcov-tool merge [merge-options] @var{directory1} @var{directory2}\n      [@option{-v}|@option{--verbose}]\n      [@option{-w}|@option{--weight} @var{w1,w2}]\n \n+gcov-tool merge-stream [merge-stream-options] [@var{file}]\n+     [@option{-v}|@option{--verbose}]\n+     [@option{-w}|@option{--weight} @var{w1,w2}]\n+\n gcov-tool rewrite [rewrite-options] @var{directory}\n      [@option{-n}|@option{--normalize} @var{long_long_value}]\n      [@option{-o}|@option{--output} @var{directory}]\n@@ -169,6 +183,28 @@ Set the merge weights of the @var{directory1} and @var{directory2},\n respectively. The default weights are 1 for both.\n @end table\n \n+@item merge-stream\n+Collect profiles with associated filenames from a @emph{gcfn} and @emph{gcda}\n+data stream.  Read the stream from the file specified by @var{file} or from\n+@file{stdin}.  Merge the profiles with associated profiles in the host\n+filesystem.  Apply the optional weights while merging profiles.\n+\n+For the generation of a @emph{gcfn} and @emph{gcda} data stream on the target\n+system, please have a look at the @code{__gcov_filename_to_gcfn()} and\n+@code{__gcov_info_to_gcda()} functions declared in @code{#include <gcov.h>}.\n+@table @gcctabopt\n+\n+@item -v\n+@itemx --verbose\n+Set the verbose mode.\n+\n+@item -w @var{w1},@var{w2}\n+@itemx --weight @var{w1},@var{w2}\n+Set the merge weights of the profiles from the @emph{gcfn} and @emph{gcda} data\n+stream and the associated profiles in the host filesystem, respectively.  The\n+default weights are 1 for both.\n+@end table\n+\n @item rewrite\n Read the specified profile directory and rewrite to a new directory.\n @table @gcctabopt"}, {"sha": "3f4d6f2db7b942f3efed88b11b84a96297ea83c0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/210e32b60b9018e5db2d9741dc7aaa5d9b436999/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/210e32b60b9018e5db2d9741dc7aaa5d9b436999/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=210e32b60b9018e5db2d9741dc7aaa5d9b436999", "patch": "@@ -15537,6 +15537,11 @@ main (void)\n @}\n @end smallexample\n \n+The @command{merge-stream} subcommand of @command{gcov-tool} may be used to\n+deserialize the data stream generated by the @code{__gcov_filename_to_gcfn} and\n+@code{__gcov_info_to_gcda} functions and merge the profile information into\n+@file{.gcda} files on the host filesystem.\n+\n @item -fprofile-note=@var{path}\n @opindex fprofile-note\n "}, {"sha": "ceb250143c84ce23b6806295c8d9b7cca12d7ea0", "filename": "gcc/gcov-tool.cc", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/210e32b60b9018e5db2d9741dc7aaa5d9b436999/gcc%2Fgcov-tool.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/210e32b60b9018e5db2d9741dc7aaa5d9b436999/gcc%2Fgcov-tool.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-tool.cc?ref=210e32b60b9018e5db2d9741dc7aaa5d9b436999", "patch": "@@ -42,6 +42,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n extern struct gcov_info *gcov_profile_merge (struct gcov_info*,\n \t\t\t\t\t     struct gcov_info*, int, int);\n+extern struct gcov_info *gcov_profile_merge_stream (const char *, int, int);\n extern int gcov_profile_overlap (struct gcov_info*, struct gcov_info*);\n extern int gcov_profile_normalize (struct gcov_info*, gcov_type);\n extern int gcov_profile_scale (struct gcov_info*, float, int, int);\n@@ -229,6 +230,78 @@ do_merge (int argc, char **argv)\n   return profile_merge (argv[optind], argv[optind+1], output_dir, w1, w2);\n }\n \n+/* Usage message for profile merge-stream.  */\n+\n+static void\n+print_merge_stream_usage_message (int error_p)\n+{\n+  FILE *file = error_p ? stderr : stdout;\n+\n+  fnotice (file, \"  merge-stream [options] [<file>]       Merge coverage stream file (or stdin)\\n\"\n+\t\t \"                                        and coverage file contents\\n\");\n+  fnotice (file, \"    -v, --verbose                       Verbose mode\\n\");\n+  fnotice (file, \"    -w, --weight <w1,w2>                Set weights (float point values)\\n\");\n+}\n+\n+static const struct option merge_stream_options[] =\n+{\n+  { \"verbose\",                no_argument,       NULL, 'v' },\n+  { \"weight\",                 required_argument, NULL, 'w' },\n+  { 0, 0, 0, 0 }\n+};\n+\n+/* Print merge-stream usage and exit.  */\n+\n+static void ATTRIBUTE_NORETURN\n+merge_stream_usage (void)\n+{\n+  fnotice (stderr, \"Merge-stream subcomand usage:\");\n+  print_merge_stream_usage_message (true);\n+  exit (FATAL_EXIT_CODE);\n+}\n+\n+/* Driver for profile merge-stream sub-command.  */\n+\n+static int\n+do_merge_stream (int argc, char **argv)\n+{\n+  int opt;\n+  int w1 = 1, w2 = 1;\n+  struct gcov_info *merged_profile;\n+\n+  optind = 0;\n+  while ((opt = getopt_long (argc, argv, \"vw:\",\n+\t\t\t     merge_stream_options, NULL)) != -1)\n+    {\n+      switch (opt)\n+\t{\n+\tcase 'v':\n+\t  verbose = true;\n+\t  gcov_set_verbose ();\n+\t  break;\n+\tcase 'w':\n+\t  sscanf (optarg, \"%d,%d\", &w1, &w2);\n+\t  if (w1 < 0 || w2 < 0)\n+\t    fatal_error (input_location, \"weights need to be non-negative\");\n+\t  break;\n+\tdefault:\n+\t  merge_stream_usage ();\n+\t}\n+    }\n+\n+  if (argc - optind > 1)\n+    merge_stream_usage ();\n+\n+  merged_profile = gcov_profile_merge_stream (argv[optind], w1, w2);\n+\n+  if (merged_profile)\n+    gcov_do_dump (merged_profile, 0, -1);\n+  else if (verbose)\n+    fnotice (stdout, \"no profile files were merged\\n\");\n+\n+  return 0;\n+}\n+\n /* If N_VAL is no-zero, normalize the profile by setting the largest counter\n    counter value to N_VAL and scale others counters proportionally.\n    Otherwise, multiply the all counters by SCALE.  */\n@@ -505,6 +578,7 @@ print_usage (int error_p)\n   fnotice (file, \"  -h, --help                            Print this help, then exit\\n\");\n   fnotice (file, \"  -v, --version                         Print version number, then exit\\n\");\n   print_merge_usage_message (error_p);\n+  print_merge_stream_usage_message (error_p);\n   print_rewrite_usage_message (error_p);\n   print_overlap_usage_message (error_p);\n   fnotice (file, \"\\nFor bug reporting instructions, please see:\\n%s.\\n\",\n@@ -594,6 +668,8 @@ main (int argc, char **argv)\n \n   if (!strcmp (sub_command, \"merge\"))\n     return do_merge (argc - optind, argv + optind);\n+  else if (!strcmp (sub_command, \"merge-stream\"))\n+    return do_merge_stream (argc - optind, argv + optind);\n   else if (!strcmp (sub_command, \"rewrite\"))\n     return do_rewrite (argc - optind, argv + optind);\n   else if (!strcmp (sub_command, \"overlap\"))"}, {"sha": "250dddd8e212683ef6bf9bc855c210a4ec146fe2", "filename": "libgcc/libgcov-util.c", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/210e32b60b9018e5db2d9741dc7aaa5d9b436999/libgcc%2Flibgcov-util.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/210e32b60b9018e5db2d9741dc7aaa5d9b436999/libgcc%2Flibgcov-util.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-util.c?ref=210e32b60b9018e5db2d9741dc7aaa5d9b436999", "patch": "@@ -735,6 +735,101 @@ gcov_profile_merge (struct gcov_info *tgt_profile, struct gcov_info *src_profile\n   return tgt_profile;\n }\n \n+/* Deserialize gcov_info objects and associated filenames from the file\n+   specified by FILENAME to create a profile list.  When FILENAME is NULL, read\n+   from stdin.  Return the profile list.  */\n+\n+struct gcov_info *\n+deserialize_profiles (const char *filename)\n+{\n+  read_profile_dir_init ();\n+\n+  while (true)\n+    {\n+      unsigned version;\n+      const char *filename_of_info;\n+      struct gcov_info *obj_info;\n+\n+      if (!gcov_magic (gcov_read_unsigned (), GCOV_FILENAME_MAGIC))\n+\t{\n+\t  if (gcov_is_error () != 2)\n+\t    fnotice (stderr, \"%s:not a gcfn stream\\n\", filename);\n+\t  break;\n+\t}\n+\n+      version = gcov_read_unsigned ();\n+      if (version != GCOV_VERSION)\n+\t{\n+\t  fnotice (stderr, \"%s:incorrect gcov version %d vs %d \\n\",\n+\t\t   filename, version, GCOV_VERSION);\n+\t  break;\n+\t}\n+\n+      filename_of_info = gcov_read_string ();\n+      if (!filename_of_info)\n+\t{\n+\t  fnotice (stderr, \"%s:no filename in gcfn stream\\n\",\n+\t\t   filename);\n+\t  break;\n+\t}\n+\n+      obj_info = read_gcda_file (filename);\n+      if (!obj_info)\n+\tbreak;\n+\n+      obj_info->filename = filename_of_info;\n+    }\n+\n+  return gcov_info_head;\n+}\n+\n+/* For each profile of the list specified by SRC_PROFILE, read the GCDA file of\n+   the profile.  If a GCDA file exists, add the profile to a list.  Return the\n+   profile list.  */\n+\n+struct gcov_info *\n+get_target_profiles_for_merge (struct gcov_info *src_profile)\n+{\n+  struct gcov_info *gi_ptr;\n+\n+  read_profile_dir_init ();\n+\n+  for (gi_ptr = src_profile; gi_ptr; gi_ptr = gi_ptr->next)\n+    if (gcov_open (gi_ptr->filename, 1))\n+      {\n+\t(void)read_gcda_file (gi_ptr->filename);\n+\tgcov_close ();\n+      }\n+\n+  return gcov_info_head;\n+}\n+\n+/* Deserialize gcov_info objects and associated filenames from the file\n+   specified by FILENAME to create a source profile list.  When FILENAME is\n+   NULL, read from stdin.  Use the filenames of the source profile list to get\n+   a target profile list.  Merge the source profile list into the target\n+   profile list using weights W1 and W2.  Return the list of merged gcov_info\n+   objects.  Return NULL if the list is empty.  */\n+\n+struct gcov_info *\n+gcov_profile_merge_stream (const char *filename, int w1, int w2)\n+{\n+  struct gcov_info *tgt_profile;\n+  struct gcov_info *src_profile;\n+\n+  if (!gcov_open (filename, 1))\n+    {\n+      fnotice (stderr, \"%s:cannot open\\n\", filename);\n+      return NULL;\n+    }\n+\n+  src_profile = deserialize_profiles (filename ? filename : \"<stdin>\");\n+  gcov_close ();\n+  tgt_profile = get_target_profiles_for_merge (src_profile);\n+\n+  return gcov_profile_merge (tgt_profile, src_profile, w1, w2);\n+}\n+\n typedef gcov_type (*counter_op_fn) (gcov_type, void*, void*);\n \n /* Performing FN upon arc counters.  */"}]}