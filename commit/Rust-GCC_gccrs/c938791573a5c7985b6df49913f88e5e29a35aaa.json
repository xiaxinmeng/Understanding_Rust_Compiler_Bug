{"sha": "c938791573a5c7985b6df49913f88e5e29a35aaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkzODc5MTU3M2E1Yzc5ODViNmRmNDk5MTNmODhlNWUyOWEzNWFhYQ==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-11-17T00:17:00Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-11-17T00:17:00Z"}, "message": "decl.c (start_preparsed_function): Call check_function_type even in templates.\n\n\t* decl.c (start_preparsed_function): Call check_function_type even\n\tin templates.\n\t(require_complete_types_for_parms): Skip dependent types.\n\t(check_function_type): Likewise.\n\n\t* g++.dg/template/incomplete1.C: New test.\n\nFrom-SVN: r90779", "tree": {"sha": "26c508dbd04e16713c7ed6e66e122faa7058dd00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26c508dbd04e16713c7ed6e66e122faa7058dd00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c938791573a5c7985b6df49913f88e5e29a35aaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c938791573a5c7985b6df49913f88e5e29a35aaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c938791573a5c7985b6df49913f88e5e29a35aaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c938791573a5c7985b6df49913f88e5e29a35aaa/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4e649d2d2f713e8179e331ecd4bd88f11eb3c61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4e649d2d2f713e8179e331ecd4bd88f11eb3c61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4e649d2d2f713e8179e331ecd4bd88f11eb3c61"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "ddb1e996e3096d4935580d0bd0b0d7ae0039dd9d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c938791573a5c7985b6df49913f88e5e29a35aaa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c938791573a5c7985b6df49913f88e5e29a35aaa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c938791573a5c7985b6df49913f88e5e29a35aaa", "patch": "@@ -1,3 +1,10 @@\n+2004-11-16  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\t* decl.c (start_preparsed_function): Call check_function_type even\n+\tin templates.\n+\t(require_complete_types_for_parms): Skip dependent types.\n+\t(check_function_type): Likewise.\n+\n 2004-11-16  Steven Bosscher  <stevenb@suse.de>\n \n \t* Make-lang.in (cp/decl.o, cp/search.o): Don't depend on stack.h."}, {"sha": "9baedb42d32cdcd7ce40299a0167524e320a1c71", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c938791573a5c7985b6df49913f88e5e29a35aaa/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c938791573a5c7985b6df49913f88e5e29a35aaa/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c938791573a5c7985b6df49913f88e5e29a35aaa", "patch": "@@ -8271,6 +8271,8 @@ require_complete_types_for_parms (tree parms)\n {\n   for (; parms; parms = TREE_CHAIN (parms))\n     {\n+      if (dependent_type_p (TREE_TYPE (parms)))\n+\tcontinue;\n       if (VOID_TYPE_P (TREE_TYPE (parms)))\n         /* grokparms will have already issued an error.  */\n         TREE_TYPE (parms) = error_mark_node;\n@@ -9840,6 +9842,8 @@ check_function_type (tree decl, tree current_function_parms)\n   /* In a function definition, arg types must be complete.  */\n   require_complete_types_for_parms (current_function_parms);\n \n+  if (dependent_type_p (return_type))\n+    return;\n   if (!COMPLETE_OR_VOID_TYPE_P (return_type))\n     {\n       error (\"return type %q#T is incomplete\", TREE_TYPE (fntype));\n@@ -9985,8 +9989,7 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n   /* Make sure the parameter and return types are reasonable.  When\n      you declare a function, these types can be incomplete, but they\n      must be complete when you define the function.  */\n-  if (! processing_template_decl)\n-    check_function_type (decl1, current_function_parms);\n+  check_function_type (decl1, current_function_parms);\n \n   /* Build the return declaration for the function.  */\n   restype = TREE_TYPE (fntype);"}, {"sha": "8093d75806f99872a93cc1a23b840d1efea3541b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c938791573a5c7985b6df49913f88e5e29a35aaa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c938791573a5c7985b6df49913f88e5e29a35aaa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c938791573a5c7985b6df49913f88e5e29a35aaa", "patch": "@@ -1,3 +1,7 @@\n+2004-11-16  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\t* g++.dg/template/incomplete1.C: New test.\n+\n 2004-11-16  Nick Clifton  <nickc@redhat.com>\n \n \tRevert patches accidentally commited during checkin of fixes for"}, {"sha": "e4997ef01465e697c51ddae2b84fa06c8b34663a", "filename": "gcc/testsuite/g++.dg/template/incomplete1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c938791573a5c7985b6df49913f88e5e29a35aaa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c938791573a5c7985b6df49913f88e5e29a35aaa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fincomplete1.C?ref=c938791573a5c7985b6df49913f88e5e29a35aaa", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile }\n+// Origin: Ivan Godard <igodard at pacbell dot net>\n+// PR c++/17447: Detect parameters of dependent types even in templates\n+\n+struct B;   // { dg-error \"forward declaration\" }\n+template<typename T> struct A {\n+\n+    friend A& operator <<(A& a, B b) { return a; } // { dg-error \"incomplete\" }\n+    friend A& operator <<(A& a, T b) { return a; }\n+\n+    void foo1(B b) {}   // { dg-error \"incomplete\" }\n+    void foo1a(T b) {}\n+\n+    B foo2(void) {}  // { dg-error \"incomplete\" }\n+    T foo2a(void) {}\n+\n+    void foo3(B b);\n+};"}]}