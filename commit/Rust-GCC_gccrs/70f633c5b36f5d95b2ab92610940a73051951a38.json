{"sha": "70f633c5b36f5d95b2ab92610940a73051951a38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBmNjMzYzViMzZmNWQ5NWIyYWI5MjYxMDk0MGE3MzA1MTk1MWEzOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-07-08T09:12:56Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-07-08T09:12:56Z"}, "message": "tree-ssa-alias.c (walk_aliased_vdefs_1): Add FUNCTION_ENTRY_REACHED parameter.\n\n\t* tree-ssa-alias.c (walk_aliased_vdefs_1): Add FUNCTION_ENTRY_REACHED\n\tparameter.\n\t(walk_aliased_vdefs): Likewise.\n\t* tree-ssa-alias.h (walk_aliased_vdefs): Likewise.\n\t* ipa-prop.c (stmt_may_be_vtbl_ptr_store): Skip clobbers\n\t(detect_type_change_from_memory_writes): Check if entry was reached.\n\nFrom-SVN: r212351", "tree": {"sha": "94762ce36d4d69dcdc1e3aed3dae7d3ab377a1e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94762ce36d4d69dcdc1e3aed3dae7d3ab377a1e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70f633c5b36f5d95b2ab92610940a73051951a38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f633c5b36f5d95b2ab92610940a73051951a38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70f633c5b36f5d95b2ab92610940a73051951a38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f633c5b36f5d95b2ab92610940a73051951a38/comments", "author": null, "committer": null, "parents": [{"sha": "7f7563747e2b4f42f73c879d2783db16b534fcff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7563747e2b4f42f73c879d2783db16b534fcff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f7563747e2b4f42f73c879d2783db16b534fcff"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "084aa13494e00f27e792bf40009d9ff29be71eab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f633c5b36f5d95b2ab92610940a73051951a38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f633c5b36f5d95b2ab92610940a73051951a38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70f633c5b36f5d95b2ab92610940a73051951a38", "patch": "@@ -1,3 +1,12 @@\n+2014-07-08  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-ssa-alias.c (walk_aliased_vdefs_1): Add FUNCTION_ENTRY_REACHED\n+\tparameter.\n+\t(walk_aliased_vdefs): Likewise.\n+\t* tree-ssa-alias.h (walk_aliased_vdefs): Likewise.\n+\t* ipa-prop.c (stmt_may_be_vtbl_ptr_store): Skip clobbers\n+\t(detect_type_change_from_memory_writes): Check if entry was reached.\n+\n 2014-07-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/61681"}, {"sha": "c6dd610fc5d6c70736b2ad232f1071d77ff3b382", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f633c5b36f5d95b2ab92610940a73051951a38/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f633c5b36f5d95b2ab92610940a73051951a38/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=70f633c5b36f5d95b2ab92610940a73051951a38", "patch": "@@ -638,7 +638,8 @@ stmt_may_be_vtbl_ptr_store (gimple stmt)\n {\n   if (is_gimple_call (stmt))\n     return false;\n-  /* TODO: Skip clobbers, doing so triggers problem in PR60306.  */\n+  if (gimple_clobber_p (stmt))\n+    return false;\n   else if (is_gimple_assign (stmt))\n     {\n       tree lhs = gimple_assign_lhs (stmt);\n@@ -817,6 +818,7 @@ detect_type_change_from_memory_writes (tree arg, tree base, tree comp_type,\n {\n   struct type_change_info tci;\n   ao_ref ao;\n+  bool entry_reached = false;\n \n   gcc_checking_assert (DECL_P (arg)\n \t\t       || TREE_CODE (arg) == MEM_REF\n@@ -847,13 +849,16 @@ detect_type_change_from_memory_writes (tree arg, tree base, tree comp_type,\n   tci.multiple_types_encountered = false;\n \n   walk_aliased_vdefs (&ao, gimple_vuse (call), check_stmt_for_type_change,\n-\t\t      &tci, NULL);\n+\t\t      &tci, NULL, &entry_reached);\n   if (!tci.type_maybe_changed)\n     return false;\n \n   if (!tci.known_current_type\n       || tci.multiple_types_encountered\n-      || offset != 0)\n+      || offset != 0\n+      /* When the walk reached function entry, it means that type\n+\t is set along some paths but not along others.  */\n+      || entry_reached)\n     jfunc->type = IPA_JF_UNKNOWN;\n   else\n     ipa_set_jf_known_type (jfunc, 0, tci.known_current_type, comp_type);"}, {"sha": "5a8f7bda50b35bb5092ac4831a6158fec734d5a2", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f633c5b36f5d95b2ab92610940a73051951a38/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f633c5b36f5d95b2ab92610940a73051951a38/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=70f633c5b36f5d95b2ab92610940a73051951a38", "patch": "@@ -2643,6 +2643,9 @@ walk_non_aliased_vuses (ao_ref *ref, tree vuse,\n    WALKER is called with REF, the current vdef and DATA.  If WALKER\n    returns true the walk is stopped, otherwise it continues.\n \n+   If function entry is reached, FUNCTION_ENTRY_REACHED is set to true.\n+   The pointer may be NULL and then we do not track this information.\n+\n    At PHI nodes walk_aliased_vdefs forks into one walk for reach\n    PHI argument (but only one walk continues on merge points), the\n    return value is true if any of the walks was successful.\n@@ -2652,8 +2655,11 @@ walk_non_aliased_vuses (ao_ref *ref, tree vuse,\n static unsigned int\n walk_aliased_vdefs_1 (ao_ref *ref, tree vdef,\n \t\t      bool (*walker)(ao_ref *, tree, void *), void *data,\n-\t\t      bitmap *visited, unsigned int cnt)\n+\t\t      bitmap *visited, unsigned int cnt,\n+\t\t      bool *function_entry_reached)\n {\n+  if (function_entry_reached)\n+    *function_entry_reached = false;\n   do\n     {\n       gimple def_stmt = SSA_NAME_DEF_STMT (vdef);\n@@ -2663,15 +2669,20 @@ walk_aliased_vdefs_1 (ao_ref *ref, tree vdef,\n \treturn cnt;\n \n       if (gimple_nop_p (def_stmt))\n-\treturn cnt;\n+\t{\n+\t  if (function_entry_reached)\n+\t    *function_entry_reached = true;\n+\t  return cnt;\n+\t}\n       else if (gimple_code (def_stmt) == GIMPLE_PHI)\n \t{\n \t  unsigned i;\n \t  if (!*visited)\n \t    *visited = BITMAP_ALLOC (NULL);\n \t  for (i = 0; i < gimple_phi_num_args (def_stmt); ++i)\n \t    cnt += walk_aliased_vdefs_1 (ref, gimple_phi_arg_def (def_stmt, i),\n-\t\t\t\t\t walker, data, visited, 0);\n+\t\t\t\t\t walker, data, visited, 0,\n+\t\t\t\t\t function_entry_reached);\n \t  return cnt;\n \t}\n \n@@ -2690,15 +2701,17 @@ walk_aliased_vdefs_1 (ao_ref *ref, tree vdef,\n unsigned int\n walk_aliased_vdefs (ao_ref *ref, tree vdef,\n \t\t    bool (*walker)(ao_ref *, tree, void *), void *data,\n-\t\t    bitmap *visited)\n+\t\t    bitmap *visited,\n+\t\t    bool *function_entry_reached)\n {\n   bitmap local_visited = NULL;\n   unsigned int ret;\n \n   timevar_push (TV_ALIAS_STMT_WALK);\n \n   ret = walk_aliased_vdefs_1 (ref, vdef, walker, data,\n-\t\t\t      visited ? visited : &local_visited, 0);\n+\t\t\t      visited ? visited : &local_visited, 0,\n+\t\t\t      function_entry_reached);\n   if (local_visited)\n     BITMAP_FREE (local_visited);\n "}, {"sha": "e46f89e7e25effce939aafc662e5c0c930855624", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f633c5b36f5d95b2ab92610940a73051951a38/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f633c5b36f5d95b2ab92610940a73051951a38/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=70f633c5b36f5d95b2ab92610940a73051951a38", "patch": "@@ -123,7 +123,8 @@ extern void *walk_non_aliased_vuses (ao_ref *, tree,\n \t\t\t\t     void *);\n extern unsigned int walk_aliased_vdefs (ao_ref *, tree,\n \t\t\t\t\tbool (*)(ao_ref *, tree, void *),\n-\t\t\t\t\tvoid *, bitmap *);\n+\t\t\t\t\tvoid *, bitmap *,\n+\t\t\t\t\tbool *function_entry_reached = NULL);\n extern void dump_alias_info (FILE *);\n extern void debug_alias_info (void);\n extern void dump_points_to_solution (FILE *, struct pt_solution *);"}]}