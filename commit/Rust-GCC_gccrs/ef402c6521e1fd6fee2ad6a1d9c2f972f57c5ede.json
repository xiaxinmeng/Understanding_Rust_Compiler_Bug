{"sha": "ef402c6521e1fd6fee2ad6a1d9c2f972f57c5ede", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY0MDJjNjUyMWUxZmQ2ZmVlMmFkNmExZDljMmY5NzJmNTdjNWVkZQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-05-08T21:36:30Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-05-08T21:36:30Z"}, "message": "re PR target/51244 ([SH] Inefficient conditional branch and code around T bit)\n\n\tPR target/51244\n\t* config/sh/sh.md (*branch_true, *branch_false): New insns.\n\nFrom-SVN: r187298", "tree": {"sha": "0b51208b09083a6b401cb5424c3fb6b40f5c249f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b51208b09083a6b401cb5424c3fb6b40f5c249f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef402c6521e1fd6fee2ad6a1d9c2f972f57c5ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef402c6521e1fd6fee2ad6a1d9c2f972f57c5ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef402c6521e1fd6fee2ad6a1d9c2f972f57c5ede", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef402c6521e1fd6fee2ad6a1d9c2f972f57c5ede/comments", "author": null, "committer": null, "parents": [{"sha": "4e8ee9cbf7895df0147627c88a682d3e4d789779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e8ee9cbf7895df0147627c88a682d3e4d789779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e8ee9cbf7895df0147627c88a682d3e4d789779"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "aa5537aea02dd8fd1812647c7bfa944cb49b0d74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef402c6521e1fd6fee2ad6a1d9c2f972f57c5ede/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef402c6521e1fd6fee2ad6a1d9c2f972f57c5ede/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef402c6521e1fd6fee2ad6a1d9c2f972f57c5ede", "patch": "@@ -1,3 +1,8 @@\n+2012-05-08  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* config/sh/sh.md (*branch_true, *branch_false): New insns.\n+\n 2012-05-08   Teresa Johnson  <tejohnson@google.com>\n \n \t* gcov-io.h (__gcov_reset, __gcov_dump): Declare."}, {"sha": "7167b920641a213e4286580596785979fa867dbf", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef402c6521e1fd6fee2ad6a1d9c2f972f57c5ede/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef402c6521e1fd6fee2ad6a1d9c2f972f57c5ede/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=ef402c6521e1fd6fee2ad6a1d9c2f972f57c5ede", "patch": "@@ -7097,6 +7097,29 @@ label:\n }\n   [(set_attr \"type\" \"cbranch\")])\n \n+;; The *branch_true patterns help combine when trying to invert conditions.\n+(define_insn \"*branch_true\"\n+  [(set (pc) (if_then_else (ne (zero_extend:SI (subreg:QI (reg:SI T_REG) 0))\n+\t\t\t       (const_int 0))\n+\t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n+\t\t\t   (pc)))]\n+  \"TARGET_SH1 && TARGET_LITTLE_ENDIAN\"\n+{\n+  return output_branch (1, insn, operands);\n+}\n+  [(set_attr \"type\" \"cbranch\")])\n+\n+(define_insn \"*branch_true\"\n+  [(set (pc) (if_then_else (ne (zero_extend:SI (subreg:QI (reg:SI T_REG) 3))\n+\t\t\t       (const_int 0))\n+\t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n+\t\t\t   (pc)))]\n+  \"TARGET_SH1 && ! TARGET_LITTLE_ENDIAN\"\n+{\n+  return output_branch (1, insn, operands);\n+}\n+  [(set_attr \"type\" \"cbranch\")])\n+\n (define_insn \"branch_false\"\n   [(set (pc) (if_then_else (eq (reg:SI T_REG) (const_int 0))\n \t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n@@ -7107,6 +7130,29 @@ label:\n }\n   [(set_attr \"type\" \"cbranch\")])\n \n+;; The *branch_false patterns help combine when trying to invert conditions.\n+(define_insn \"*branch_false\"\n+  [(set (pc) (if_then_else (eq (zero_extend:SI (subreg:QI (reg:SI T_REG) 0))\n+\t\t\t       (const_int 0))\n+\t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n+\t\t\t   (pc)))]\n+  \"TARGET_SH1 && TARGET_LITTLE_ENDIAN\"\n+{\n+  return output_branch (0, insn, operands);\n+}\n+  [(set_attr \"type\" \"cbranch\")])\n+\n+(define_insn \"*branch_false\"\n+  [(set (pc) (if_then_else (eq (zero_extend:SI (subreg:QI (reg:SI T_REG) 3))\n+\t\t\t       (const_int 0))\n+\t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n+\t\t\t   (pc)))]\n+  \"TARGET_SH1 && ! TARGET_LITTLE_ENDIAN\"\n+{\n+  return output_branch (0, insn, operands);\n+}\n+  [(set_attr \"type\" \"cbranch\")])\n+\n ;; Patterns to prevent reorg from re-combining a condbranch with a branch\n ;; which destination is too far away.\n ;; The const_int_operand is distinct for each branch target; it avoids\n@@ -9721,7 +9767,7 @@ label:\n   \"\"\n   [(const_int 0)])\n \n-;; The *movtt patterns improve code at -O1.\n+;; The *movtt patterns eliminate redundant T bit to T bit moves / tests.\n (define_insn_and_split \"*movtt\"\n   [(set (reg:SI T_REG)\n \t(eq:SI (zero_extend:SI (subreg:QI (reg:SI T_REG) 3))"}]}