{"sha": "103a83e0fabbc85f12580a3d09cdfd429d05cacf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAzYTgzZTBmYWJiYzg1ZjEyNTgwYTNkMDljZGZkNDI5ZDA1Y2FjZg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-01-14T17:53:28Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-01-14T17:53:28Z"}, "message": "c-tree.h, [...]: Remove unused prototypes.\n\n\t* c-tree.h, coverage.h, langhooks-def.h, optabs.h, output.h,\n\trtl.h, targhooks.h, tree-flow.h, tree-mudflap.h, tree.h:\n\tRemove unused prototypes.\n\nFrom-SVN: r93651", "tree": {"sha": "d73ece63efb05148b26c152c149811407644177a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d73ece63efb05148b26c152c149811407644177a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/103a83e0fabbc85f12580a3d09cdfd429d05cacf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103a83e0fabbc85f12580a3d09cdfd429d05cacf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/103a83e0fabbc85f12580a3d09cdfd429d05cacf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103a83e0fabbc85f12580a3d09cdfd429d05cacf/comments", "author": null, "committer": null, "parents": [{"sha": "b5a5beb9830357e16ca31590f68a73d59c95678d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5a5beb9830357e16ca31590f68a73d59c95678d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5a5beb9830357e16ca31590f68a73d59c95678d"}], "stats": {"total": 34, "additions": 6, "deletions": 28}, "files": [{"sha": "5a7ade33316b9b9e55fe35480c86b8d008da312c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=103a83e0fabbc85f12580a3d09cdfd429d05cacf", "patch": "@@ -1,3 +1,9 @@\n+2005-01-14  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-tree.h, coverage.h, langhooks-def.h, optabs.h, output.h,\n+\trtl.h, targhooks.h, tree-flow.h, tree-mudflap.h, tree.h:\n+\tRemove unused prototypes.\n+\n 2005-01-14  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/rs6000.c (rs6000_stack_info): Fix caching of SPE"}, {"sha": "f684e13bd8ebee1048e81eec931b2e04fc9f448e", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=103a83e0fabbc85f12580a3d09cdfd429d05cacf", "patch": "@@ -434,7 +434,6 @@ extern int c_cannot_inline_tree_fn (tree *);\n extern bool c_objc_common_init (void);\n extern bool c_missing_noreturn_ok_p (tree);\n extern tree c_objc_common_truthvalue_conversion (tree expr);\n-extern int defer_fn (tree);\n extern bool c_warn_unused_global_decl (tree);\n extern void c_initialize_diagnostics (diagnostic_context *);\n "}, {"sha": "36b370a29ac3f5af6db332fc1d5deec7ff42749d", "filename": "gcc/coverage.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Fcoverage.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Fcoverage.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.h?ref=103a83e0fabbc85f12580a3d09cdfd429d05cacf", "patch": "@@ -26,7 +26,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n extern void coverage_init (const char *);\n extern void coverage_finish (void);\n-extern void coverage_read_counts_file (void);\n \n /* Complete the coverage information for the current function. Once\n    per function.  */"}, {"sha": "f91d4312714b8baa7a9cfd1e3527afe16e40386b", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=103a83e0fabbc85f12580a3d09cdfd429d05cacf", "patch": "@@ -67,8 +67,6 @@ extern void lhd_register_builtin_type (tree, const char *);\n extern bool lhd_decl_ok_for_sibcall (tree);\n extern const char *lhd_comdat_group (tree);\n extern tree lhd_expr_size (tree);\n-extern bool lhd_decl_uninit (tree);\n-extern tree lhd_get_callee_fndecl (tree);\n extern size_t lhd_tree_size (enum tree_code);\n \n /* Declarations of default tree inlining hooks.  */"}, {"sha": "539c94ba8a2ad9e79d6204ed0662f414d6dc6907", "filename": "gcc/optabs.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=103a83e0fabbc85f12580a3d09cdfd429d05cacf", "patch": "@@ -488,11 +488,6 @@ extern enum insn_code can_extend_p (enum machine_mode, enum machine_mode, int);\n extern rtx gen_extend_insn (rtx, rtx, enum machine_mode,\n \t\t\t    enum machine_mode, int);\n \n-/* Initialize the tables that control conversion between fixed and\n-   floating values.  */\n-extern void init_fixtab (void);\n-extern void init_floattab (void);\n-\n /* Call this to reset the function entry for one optab.  */\n extern void set_optab_libfunc (optab, enum machine_mode, const char *);\n extern void set_conv_libfunc (convert_optab, enum machine_mode,"}, {"sha": "a5d5418d29af672e2069031f5a3a01a0245bdcf0", "filename": "gcc/output.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=103a83e0fabbc85f12580a3d09cdfd429d05cacf", "patch": "@@ -144,10 +144,6 @@ extern void leaf_renumber_regs_insn (rtx);\n /* Locate the proper template for the given insn-code.  */\n extern const char *get_insn_template (int, rtx);\n \n-/* Add function NAME to the weak symbols list.  VALUE is a weak alias\n-   associated with NAME.  */\n-extern int add_weak (tree, const char *, const char *);\n-\n /* Functions in flow.c */\n extern int regno_clobbered_at_setjmp (int);\n "}, {"sha": "52aef454ef658bb60fba86da7d1e8d384cdab0ff", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=103a83e0fabbc85f12580a3d09cdfd429d05cacf", "patch": "@@ -2060,7 +2060,6 @@ extern void init_reg_modes_once (void);\n extern void init_regs (void);\n extern void init_fake_stack_mems (void);\n extern void init_reg_sets (void);\n-extern void regset_release_memory (void);\n extern void regclass_init (void);\n extern void regclass (rtx, int, FILE *);\n extern void reg_scan (rtx, unsigned int, int);\n@@ -2108,15 +2107,11 @@ extern void emit_library_call (rtx, enum libcall_type, enum machine_mode, int,\n extern rtx emit_library_call_value (rtx, rtx, enum libcall_type,\n \t\t\t\t    enum machine_mode, int, ...);\n \n-/* In unroll.c */\n-extern int set_dominates_use (int, int, int, rtx, rtx);\n-\n /* In varasm.c */\n extern int in_data_section (void);\n extern void init_varasm_once (void);\n \n /* In rtl.c */\n-extern void init_rtl (void);\n extern void traverse_md_constants (int (*) (void **, void *), void *);\n struct md_constant { char *name, *value; };\n "}, {"sha": "fb16245d30c91446342602fa329fee6fde35d90f", "filename": "gcc/targhooks.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=103a83e0fabbc85f12580a3d09cdfd429d05cacf", "patch": "@@ -46,8 +46,6 @@ extern void default_unwind_emit (FILE *, rtx);\n \n extern bool default_scalar_mode_supported_p (enum machine_mode);\n \n-extern bool default_vect_misaligned_mem_ok (enum machine_mode);\n-\n /* These are here, and not in hooks.[ch], because not all users of\n    hooks.h include tm.h, and thus we don't have CUMULATIVE_ARGS.  */\n "}, {"sha": "7dc809c256c1beb18a6b744730ea9f793fae7455", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=103a83e0fabbc85f12580a3d09cdfd429d05cacf", "patch": "@@ -572,7 +572,6 @@ DEF_VEC_MALLOC_P (tree_on_heap);\n \n /* In tree-ssa.c  */\n extern void init_tree_ssa (void);\n-extern void debug_reaching_defs (void);\n extern void dump_tree_ssa (FILE *);\n extern void debug_tree_ssa (void);\n extern void debug_def_blocks (void);"}, {"sha": "ace8263bcf31389f8350d6e3ca3b957d49b26e2b", "filename": "gcc/tree-mudflap.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Ftree-mudflap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Ftree-mudflap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.h?ref=103a83e0fabbc85f12580a3d09cdfd429d05cacf", "patch": "@@ -24,8 +24,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /* Instrumentation.  */\n extern void mudflap_init (void);\n-extern void mudflap_c_function_decls (tree);\n-extern void mudflap_c_function_ops (tree);\n extern void mudflap_enqueue_decl (tree);\n extern void mudflap_enqueue_constant (tree);\n extern void mudflap_finish_file (void);"}, {"sha": "f3410c6de6f0a9984cb1564efa80e0fa937625a2", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103a83e0fabbc85f12580a3d09cdfd429d05cacf/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=103a83e0fabbc85f12580a3d09cdfd429d05cacf", "patch": "@@ -2991,7 +2991,6 @@ enum attribute_flags\n \n extern tree merge_decl_attributes (tree, tree);\n extern tree merge_type_attributes (tree, tree);\n-extern void default_register_cpp_builtins (struct cpp_reader *);\n \n /* Given a tree node and a string, return nonzero if the tree node is\n    a valid attribute name for the string.  */\n@@ -3439,7 +3438,6 @@ extern void change_decl_assembler_name (tree, tree);\n extern int type_num_arguments (tree);\n extern bool associative_tree_code (enum tree_code);\n extern bool commutative_tree_code (enum tree_code);\n-extern tree get_case_label (tree);\n extern tree upper_bound_in_type (tree, tree);\n extern tree lower_bound_in_type (tree, tree);\n extern int operand_equal_for_phi_arg_p (tree, tree);\n@@ -3632,9 +3630,6 @@ extern bool debug_find_tree (tree, tree);\n    data structures from the inliner.  */\n extern tree unsave_expr_now (tree);\n \n-/* In expr.c */\n-extern void check_max_integer_computation_mode (tree);\n-\n /* In emit-rtl.c */\n extern rtx emit_line_note (location_t);\n "}]}