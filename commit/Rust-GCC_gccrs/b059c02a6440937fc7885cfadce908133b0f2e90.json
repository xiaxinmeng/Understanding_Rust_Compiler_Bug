{"sha": "b059c02a6440937fc7885cfadce908133b0f2e90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA1OWMwMmE2NDQwOTM3ZmM3ODg1Y2ZhZGNlOTA4MTMzYjBmMmU5MA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-03-02T19:12:45Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-03-02T19:12:45Z"}, "message": "h8300-protos.h: Add a prototype for iorxor_operator.\n\n\t* config/h8300/h8300-protos.h: Add a prototype for\n\tiorxor_operator.\n\t* config/h8300/h8300.c (print_operand): Handle 'c'.\n\t(iorxor_operator): New.\n\t* config/h8300/h8300.h (PREDICATE_CODES): Add iorxor_operator.\n\t* config/h8300/h8300.md (*iorhi3_zext): Remove.\n\t(*iorsi3_zexthi): Likewise.\n\t(*iorsi3_zextsi): Likewise.\n\t(*xorhi3_zextqi): Likewise.\n\t(*xorsi3_zexthi): Likewise.\n\t(*xorsi3_zextsi): Likewise.\n\t(*ixorhi3_zext): New.\n\t(*ixorsi3_zext_qi): Likewise.\n\t(*ixorsi3_zext_hi): Likewise.\n\nFrom-SVN: r63671", "tree": {"sha": "354f91d63bd1eecf24e31948cfe6becefb6d51a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/354f91d63bd1eecf24e31948cfe6becefb6d51a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b059c02a6440937fc7885cfadce908133b0f2e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b059c02a6440937fc7885cfadce908133b0f2e90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b059c02a6440937fc7885cfadce908133b0f2e90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b059c02a6440937fc7885cfadce908133b0f2e90/comments", "author": null, "committer": null, "parents": [{"sha": "986b1f13342be85a545cf1ce5560aef248bf87c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/986b1f13342be85a545cf1ce5560aef248bf87c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/986b1f13342be85a545cf1ce5560aef248bf87c3"}], "stats": {"total": 131, "additions": 76, "deletions": 55}, "files": [{"sha": "289cb4b79afe1d2c47eb0238956e238cb35fb275", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b059c02a6440937fc7885cfadce908133b0f2e90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b059c02a6440937fc7885cfadce908133b0f2e90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b059c02a6440937fc7885cfadce908133b0f2e90", "patch": "@@ -1,3 +1,20 @@\n+2003-03-02  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Add a prototype for\n+\tiorxor_operator.\n+\t* config/h8300/h8300.c (print_operand): Handle 'c'.\n+\t(iorxor_operator): New.\n+\t* config/h8300/h8300.h (PREDICATE_CODES): Add iorxor_operator.\n+\t* config/h8300/h8300.md (*iorhi3_zext): Remove.\n+\t(*iorsi3_zexthi): Likewise.\n+\t(*iorsi3_zextsi): Likewise.\n+\t(*xorhi3_zextqi): Likewise.\n+\t(*xorsi3_zexthi): Likewise.\n+\t(*xorsi3_zextsi): Likewise.\n+\t(*ixorhi3_zext): New.\n+\t(*ixorsi3_zext_qi): Likewise.\n+\t(*ixorsi3_zext_hi): Likewise.\n+\n 2003-03-02  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* c-incpath.c (remove_component_p, simplify_path): Move back to"}, {"sha": "57f047ff64b94d9c2e72f8cdfa7e8bcb60746053", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b059c02a6440937fc7885cfadce908133b0f2e90/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b059c02a6440937fc7885cfadce908133b0f2e90/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=b059c02a6440937fc7885cfadce908133b0f2e90", "patch": "@@ -69,6 +69,7 @@ extern int bit_operator PARAMS ((rtx, enum machine_mode));\n extern int nshift_operator PARAMS ((rtx, enum machine_mode));\n extern int eqne_operator PARAMS ((rtx, enum machine_mode));\n extern int gtuleu_operator PARAMS ((rtx, enum machine_mode));\n+extern int iorxor_operator PARAMS ((rtx, enum machine_mode));\n \n extern int h8300_eightbit_constant_address_p PARAMS ((rtx));\n extern int h8300_tiny_constant_address_p PARAMS ((rtx));"}, {"sha": "79ec1788ea9a0b259b37177ed99cff36cbafb8a5", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b059c02a6440937fc7885cfadce908133b0f2e90/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b059c02a6440937fc7885cfadce908133b0f2e90/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=b059c02a6440937fc7885cfadce908133b0f2e90", "patch": "@@ -1238,6 +1238,7 @@ h8300_rtx_costs (x, code, outer_code, total)\n        If this operand isn't a register, fall back to 'R' handling.\n    'Z' print int & 7.\n    'b' print the bit opcode\n+   'c' print the opcode corresponding to rtl\n    'e' first word of 32 bit value - if reg, then least reg. if mem\n        then least. if const then most sig word\n    'f' second word of 32 bit value - if reg, then biggest reg. if mem\n@@ -1390,6 +1391,19 @@ print_operand (file, x, code)\n \t  break;\n \t}\n       break;\n+    case 'c':\n+      switch (GET_CODE (x))\n+\t{\n+\tcase IOR:\n+\t  fprintf (file, \"or\");\n+\t  break;\n+\tcase XOR:\n+\t  fprintf (file, \"xor\");\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+      break;\n     case 'e':\n       switch (GET_CODE (x))\n \t{\n@@ -1903,6 +1917,18 @@ gtuleu_operator (x, mode)\n   return (code == GTU || code == LEU);\n }\n \n+/* Return nonzero if X is either IOR or XOR.  */\n+\n+int\n+iorxor_operator (x, mode)\n+     rtx x;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  enum rtx_code code = GET_CODE (x);\n+\n+  return (code == IOR || code == XOR);\n+}\n+\n /* Recognize valid operators for bit instructions.  */\n \n int"}, {"sha": "b1b57f352ec925c101834e598098c08728c33f5f", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b059c02a6440937fc7885cfadce908133b0f2e90/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b059c02a6440937fc7885cfadce908133b0f2e90/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=b059c02a6440937fc7885cfadce908133b0f2e90", "patch": "@@ -1292,6 +1292,7 @@ struct cum_arg\n   {\"bit_operator\", {XOR, AND, IOR}},\t\t\t\t\t\\\n   {\"nshift_operator\", {ASHIFTRT, LSHIFTRT, ASHIFT}},\t\t\t\\\n   {\"eqne_operator\", {EQ, NE}},\t\t\t\t\t\t\\\n-  {\"gtuleu_operator\", {GTU, LEU}},\n+  {\"gtuleu_operator\", {GTU, LEU}},\t\t\t\t\t\\\n+  {\"iorxor_operator\", {IOR, XOR}},\n \n #endif /* ! GCC_H8300_H */"}, {"sha": "61ae4b6553286bde1e898a12bc11efae5996ae50", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 30, "deletions": 54, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b059c02a6440937fc7885cfadce908133b0f2e90/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b059c02a6440937fc7885cfadce908133b0f2e90/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=b059c02a6440937fc7885cfadce908133b0f2e90", "patch": "@@ -2765,17 +2765,42 @@\n   [(set_attr \"cc\" \"clobber\")\n    (set_attr \"length\" \"6\")])\n \n-;; ior:HI\n+;; [ix]or:HI\n \n-(define_insn \"*iorhi3_zext\"\n+(define_insn \"*ixorhi3_zext\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(ior:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"r\"))\n-\t\t(match_operand:HI 2 \"register_operand\" \"0\")))]\n+\t(match_operator:HI 1 \"iorxor_operator\"\n+\t  [(zero_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))\n+\t   (match_operand:HI 3 \"register_operand\" \"0\")]))]\n+  \"\"\n+  \"%c1.b\\\\t%X2,%s0\"\n+  [(set_attr \"cc\" \"clobber\")\n+   (set_attr \"length\" \"2\")])\n+\n+;; [ix]or:SI\n+\n+(define_insn \"*ixorsi3_zext_qi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operator:SI 1 \"iorxor_operator\"\n+\t  [(zero_extend:SI (match_operand:QI 2 \"register_operand\" \"r\"))\n+\t   (match_operand:SI 3 \"register_operand\" \"0\")]))]\n+  \"\"\n+  \"%c1.b\\\\t%X2,%w0\"\n+  [(set_attr \"cc\" \"clobber\")\n+   (set_attr \"length\" \"2\")])\n+\n+(define_insn \"*ixorsi3_zext_hi\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(match_operator:SI 1 \"iorxor_operator\"\n+\t  [(zero_extend:SI (match_operand:HI 2 \"register_operand\" \"r\"))\n+\t   (match_operand:SI 3 \"register_operand\" \"0\")]))]\n   \"\"\n-  \"or\\\\t%X1,%s0\"\n+  \"%c1.w\\\\t%T2,%f0\"\n   [(set_attr \"cc\" \"clobber\")\n    (set_attr \"length\" \"2\")])\n \n+;; ior:HI\n+\n (define_insn \"*iorhi3_ashift_8\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(ior:HI (ashift:HI (match_operand:HI 1 \"register_operand\" \"r\")\n@@ -2808,24 +2833,6 @@\n \n ;; ior:SI\n \n-(define_insn \"*iorsi3_zexthi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(ior:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"r\"))\n-\t\t(match_operand:SI 2 \"register_operand\" \"0\")))]\n-  \"TARGET_H8300H || TARGET_H8300S\"\n-  \"or.w\\\\t%T1,%f0\"\n-  [(set_attr \"cc\" \"clobber\")\n-   (set_attr \"length\" \"2\")])\n-\n-(define_insn \"*iorsi3_zextqi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(ior:SI (zero_extend:SI (match_operand:QI 1 \"register_operand\" \"r\"))\n-\t\t(match_operand:SI 2 \"register_operand\" \"0\")))]\n-  \"\"\n-  \"or\\\\t%X1,%w0\"\n-  [(set_attr \"cc\" \"clobber\")\n-   (set_attr \"length\" \"2\")])\n-\n (define_insn \"*iorsi3_ashift_16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ior:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n@@ -3033,37 +3040,6 @@\n \t\t (match_dup 0)))]\n   \"operands[3] = gen_rtx_REG (HImode, REGNO (operands[2]));\")\n \n-;; xor:HI\n-\n-(define_insn \"*xorhi3_zextqi\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(xor:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"r\"))\n-\t\t(match_operand:HI 2 \"register_operand\" \"0\")))]\n-  \"\"\n-  \"xor\\\\t%X1,%s0\"\n-  [(set_attr \"cc\" \"clobber\")\n-   (set_attr \"length\" \"2\")])\n-\n-;; xor:SI\n-\n-(define_insn \"*xorsi3_zexthi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(xor:SI (zero_extend:SI (match_operand:HI 1 \"register_operand\" \"r\"))\n-\t\t(match_operand:SI 2 \"register_operand\" \"0\")))]\n-  \"TARGET_H8300H || TARGET_H8300S\"\n-  \"xor.w\\\\t%T1,%f0\"\n-  [(set_attr \"cc\" \"clobber\")\n-   (set_attr \"length\" \"2\")])\n-\n-(define_insn \"*xorsi3_zextqi\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(xor:SI (zero_extend:SI (match_operand:QI 1 \"register_operand\" \"r\"))\n-\t\t(match_operand:SI 2 \"register_operand\" \"0\")))]\n-  \"\"\n-  \"xor\\\\t%X1,%w0\"\n-  [(set_attr \"cc\" \"clobber\")\n-   (set_attr \"length\" \"2\")])\n-\n ;; ashift:SI\n \n (define_insn_and_split \"*ashiftsi_sextqi_7\""}]}