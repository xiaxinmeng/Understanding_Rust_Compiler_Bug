{"sha": "f7d8ccfda2d5c90dac97b1a3ede8b10391a3cc40", "node_id": "C_kwDOANBUbNoAKGY3ZDhjY2ZkYTJkNWM5MGRhYzk3YjFhM2VkZThiMTAzOTFhM2NjNDA", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-10-20T19:55:28Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-10-24T18:02:17Z"}, "message": "c++: ICE with invalid structured bindings [PR107276]\n\nThis test ICEs in C++23 because we reach the new code in do_auto_deduction:\n\n30468   if (cxx_dialect >= cxx23\n30469       && context == adc_return_type\n30470       && (!AUTO_IS_DECLTYPE (auto_node)\n30471           || !unparenthesized_id_or_class_member_access_p (init))\n30472       && (r = treat_lvalue_as_rvalue_p (maybe_undo_parenthesized_ref (init),\n30473                                         /*return*/true)))\n\nwhere 'init' is \"VIEW_CONVERT_EXPR<<<< error >>>>(y)\", and then the move\nin treat_lvalue_as_rvalue_p returns error_mark_node whereupon\nset_implicit_rvalue_p crashes.\n\nI don't think such V_C_Es are useful so let's not create them.  But that\nwon't fix the ICE so I'm checking the return value of move.  A structured\nbindings decl can have an error type, that is set in cp_finish_decomp:\n\n 8908           TREE_TYPE (first) = error_mark_node;\n\ntherefore I think treat_lvalue_as_rvalue_p just needs to cope.\n\n\tPR c++/107276\n\ngcc/cp/ChangeLog:\n\n\t* typeck.cc (treat_lvalue_as_rvalue_p): Check the return value of move.\n\ngcc/ChangeLog:\n\n\t* tree.cc (maybe_wrap_with_location): Don't create a location wrapper\n\twhen the type is erroneous.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/decomp4.C: New test.", "tree": {"sha": "eefd4617d0158fc6e2285e20aa769c84432df5e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eefd4617d0158fc6e2285e20aa769c84432df5e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7d8ccfda2d5c90dac97b1a3ede8b10391a3cc40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d8ccfda2d5c90dac97b1a3ede8b10391a3cc40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7d8ccfda2d5c90dac97b1a3ede8b10391a3cc40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d8ccfda2d5c90dac97b1a3ede8b10391a3cc40/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65e3274e363cb2c6bfe6b5e648916eb7696f7e2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e3274e363cb2c6bfe6b5e648916eb7696f7e2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e3274e363cb2c6bfe6b5e648916eb7696f7e2f"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "ab6979bcc509c2d378f7bd1a89f29865b49fe56a", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d8ccfda2d5c90dac97b1a3ede8b10391a3cc40/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d8ccfda2d5c90dac97b1a3ede8b10391a3cc40/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=f7d8ccfda2d5c90dac97b1a3ede8b10391a3cc40", "patch": "@@ -10729,7 +10729,12 @@ treat_lvalue_as_rvalue_p (tree expr, bool return_p)\n   if (DECL_CONTEXT (retval) != current_function_decl)\n     return NULL_TREE;\n   if (return_p)\n-    return set_implicit_rvalue_p (move (expr));\n+    {\n+      expr = move (expr);\n+      if (expr == error_mark_node)\n+\treturn NULL_TREE;\n+      return set_implicit_rvalue_p (expr);\n+    }\n \n   /* if the operand of a throw-expression is a (possibly parenthesized)\n      id-expression that names an implicitly movable entity whose scope does not"}, {"sha": "d1b0c90ee26d972fb34a32ec20de21dff821bd58", "filename": "gcc/testsuite/g++.dg/cpp2a/decomp4.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d8ccfda2d5c90dac97b1a3ede8b10391a3cc40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d8ccfda2d5c90dac97b1a3ede8b10391a3cc40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp4.C?ref=f7d8ccfda2d5c90dac97b1a3ede8b10391a3cc40", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/107276\n+// { dg-do compile { target c++20 } }\n+\n+auto f(auto x) {\n+  auto [y] = x; // { dg-error \"cannot decompose\" }\n+  return y;\n+}\n+int i = f(0);"}, {"sha": "04603c8c902ff2c1b6445776cc18dec79c9d121f", "filename": "gcc/tree.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d8ccfda2d5c90dac97b1a3ede8b10391a3cc40/gcc%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d8ccfda2d5c90dac97b1a3ede8b10391a3cc40/gcc%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.cc?ref=f7d8ccfda2d5c90dac97b1a3ede8b10391a3cc40", "patch": "@@ -14352,7 +14352,7 @@ maybe_wrap_with_location (tree expr, location_t loc)\n \n   /* For now, don't add wrappers to exceptional tree nodes, to minimize\n      any impact of the wrapper nodes.  */\n-  if (EXCEPTIONAL_CLASS_P (expr))\n+  if (EXCEPTIONAL_CLASS_P (expr) || error_operand_p (expr))\n     return expr;\n \n   /* Compiler-generated temporary variables don't need a wrapper.  */"}]}