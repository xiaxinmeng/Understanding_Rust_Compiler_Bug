{"sha": "689751d2f7ae12bd34637801860a766d1196d960", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg5NzUxZDJmN2FlMTJiZDM0NjM3ODAxODYwYTc2NmQxMTk2ZDk2MA==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2018-05-21T14:50:23Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-21T14:50:23Z"}, "message": "[Ada] Only allow Has_Discriminants on type entities\n\nThis patch enforces what the comment for Has_Discriminant says:\n\n--    Has_Discriminants (Flag5)\n--       Defined in all types and subtypes.\n\nto avoid semantically undefined calls on non-type entities. It also adapts\nother routines to respect this comment.\n\nNo user-visible impact.\n\n2018-05-21  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* einfo.adb (Has_Discriminants): Stronger assertion.\n\t(Set_Has_Discriminants): Stronger assertion.\n\t* sem_ch13.adb (Push_Scope_And_Install_Discriminants): Adapt to respect\n\tthe stronger assertion on Has_Discriminant.\n\t(Uninstall_Discriminants_And_Pop_Scope): Same as above.\n\t* sem_util.adb (New_Copy_Tree): Same as above.\n\t* sem_ch7.adb (Generate_Parent_References): Prevent calls to\n\tHas_Discriminant on non-type entities that might happen when the\n\tcompiled code has errors.\n\t* sem_ch3.adb (Derived_Type_Declaration): Only call\n\tSet_Has_Discriminant on type entities.\n\nFrom-SVN: r260447", "tree": {"sha": "3460244deb3d6eab3d867ef21c4e1f6e16d35dfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3460244deb3d6eab3d867ef21c4e1f6e16d35dfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/689751d2f7ae12bd34637801860a766d1196d960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/689751d2f7ae12bd34637801860a766d1196d960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/689751d2f7ae12bd34637801860a766d1196d960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/689751d2f7ae12bd34637801860a766d1196d960/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ae9d95322f3859298b77a306f38e70dbcb34194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae9d95322f3859298b77a306f38e70dbcb34194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ae9d95322f3859298b77a306f38e70dbcb34194"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "79f5759a4f682e0475aa17563ca99cc9a3685fac", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/689751d2f7ae12bd34637801860a766d1196d960/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/689751d2f7ae12bd34637801860a766d1196d960/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=689751d2f7ae12bd34637801860a766d1196d960", "patch": "@@ -1,3 +1,17 @@\n+2018-04-04  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo.adb (Has_Discriminants): Stronger assertion.\n+\t(Set_Has_Discriminants): Stronger assertion.\n+\t* sem_ch13.adb (Push_Scope_And_Install_Discriminants): Adapt to respect\n+\tthe stronger assertion on Has_Discriminant.\n+\t(Uninstall_Discriminants_And_Pop_Scope): Same as above.\n+\t* sem_util.adb (New_Copy_Tree): Same as above.\n+\t* sem_ch7.adb (Generate_Parent_References): Prevent calls to\n+\tHas_Discriminant on non-type entities that might happen when the\n+\tcompiled code has errors.\n+\t* sem_ch3.adb (Derived_Type_Declaration): Only call\n+\tSet_Has_Discriminant on type entities.\n+\n 2018-04-04  Arnaud Charlet  <charlet@adacore.com>\n \n \t* exp_unst.adb (Unnest_Subprogram): Unnest all subprograms relevant for"}, {"sha": "4e9aa0890a9ac8a588a2674ac53a1ba627dab911", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/689751d2f7ae12bd34637801860a766d1196d960/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/689751d2f7ae12bd34637801860a766d1196d960/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=689751d2f7ae12bd34637801860a766d1196d960", "patch": "@@ -1567,7 +1567,7 @@ package body Einfo is\n \n    function Has_Discriminants (Id : E) return B is\n    begin\n-      pragma Assert (Nkind (Id) in N_Entity);\n+      pragma Assert (Is_Type (Id));\n       return Flag5 (Id);\n    end Has_Discriminants;\n \n@@ -4730,7 +4730,7 @@ package body Einfo is\n \n    procedure Set_Has_Discriminants (Id : E; V : B := True) is\n    begin\n-      pragma Assert (Nkind (Id) in N_Entity);\n+      pragma Assert (Is_Type (Id));\n       Set_Flag5 (Id, V);\n    end Set_Has_Discriminants;\n "}, {"sha": "538fa9d60a2fd524d2f418f7407004655cefec12", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/689751d2f7ae12bd34637801860a766d1196d960/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/689751d2f7ae12bd34637801860a766d1196d960/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=689751d2f7ae12bd34637801860a766d1196d960", "patch": "@@ -12307,7 +12307,7 @@ package body Sem_Ch13 is\n \n    procedure Push_Scope_And_Install_Discriminants (E : Entity_Id) is\n    begin\n-      if Has_Discriminants (E) then\n+      if Is_Type (E) and then Has_Discriminants (E) then\n          Push_Scope (E);\n \n          --  Make the discriminants visible for type declarations and protected\n@@ -13491,7 +13491,7 @@ package body Sem_Ch13 is\n \n    procedure Uninstall_Discriminants_And_Pop_Scope (E : Entity_Id) is\n    begin\n-      if Has_Discriminants (E) then\n+      if Is_Type (E) and then Has_Discriminants (E) then\n          Uninstall_Discriminants (E);\n          Pop_Scope;\n       end if;"}, {"sha": "2f8af6662a7a5b7ce230c2bf0afb1ac9bac82e5b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/689751d2f7ae12bd34637801860a766d1196d960/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/689751d2f7ae12bd34637801860a766d1196d960/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=689751d2f7ae12bd34637801860a766d1196d960", "patch": "@@ -16664,7 +16664,13 @@ package body Sem_Ch3 is\n             Error_Msg_N\n               (\"elementary or array type cannot have discriminants\",\n                Defining_Identifier (First (Discriminant_Specifications (N))));\n-            Set_Has_Discriminants (T, False);\n+\n+            --  Unset Has_Discriminants flag to prevent cascaded errors, but\n+            --  only if we are not already processing a malformed syntax tree.\n+\n+            if Is_Type (T) then\n+               Set_Has_Discriminants (T, False);\n+            end if;\n \n          --  The type is allowed to have discriminants\n "}, {"sha": "9302f1abb09cc30397931b2f353a000e94871b25", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/689751d2f7ae12bd34637801860a766d1196d960/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/689751d2f7ae12bd34637801860a766d1196d960/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=689751d2f7ae12bd34637801860a766d1196d960", "patch": "@@ -1399,10 +1399,13 @@ package body Sem_Ch7 is\n \n             --  We are looking at an incomplete or private type declaration\n             --  with a known_discriminant_part whose full view is an\n-            --  Unchecked_Union.\n+            --  Unchecked_Union. The seemingly useless check with Is_Type\n+            --  prevents cascaded errors when routines defined only for type\n+            --  entities are called with non-type entities.\n \n             if Nkind_In (Decl, N_Incomplete_Type_Declaration,\n                                N_Private_Type_Declaration)\n+              and then Is_Type (Defining_Identifier (Decl))\n               and then Has_Discriminants (Defining_Identifier (Decl))\n               and then Present (Full_View (Defining_Identifier (Decl)))\n               and then"}, {"sha": "21105635b12359dc7ae89a2c7cbd7e569cfea97e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/689751d2f7ae12bd34637801860a766d1196d960/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/689751d2f7ae12bd34637801860a766d1196d960/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=689751d2f7ae12bd34637801860a766d1196d960", "patch": "@@ -19392,7 +19392,9 @@ package body Sem_Util is\n       begin\n          --  Discriminant_Constraint\n \n-         if Has_Discriminants (Base_Type (Id)) then\n+         if Is_Type (Id)\n+           and then Has_Discriminants (Base_Type (Id))\n+         then\n             Set_Discriminant_Constraint (Id, Elist_Id (\n               Copy_Field_With_Replacement\n                 (Field    => Union_Id (Discriminant_Constraint (Id)),\n@@ -19849,7 +19851,9 @@ package body Sem_Util is\n \n          --  Discriminant_Constraint\n \n-         if Has_Discriminants (Base_Type (Id)) then\n+         if Is_Type (Id)\n+           and then Has_Discriminants (Base_Type (Id))\n+         then\n             Visit_Field\n               (Field    => Union_Id (Discriminant_Constraint (Id)),\n                Semantic => True);"}]}