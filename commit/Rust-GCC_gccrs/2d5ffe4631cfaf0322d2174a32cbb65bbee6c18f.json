{"sha": "2d5ffe4631cfaf0322d2174a32cbb65bbee6c18f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ1ZmZlNDYzMWNmYWYwMzIyZDIxNzRhMzJjYmI2NWJiZWU2YzE4Zg==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2014-06-03T22:42:47Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2014-06-03T22:42:47Z"}, "message": "aarch64.c (aarch64_if_then_else_costs): New function.\n\n2014-06-03  Andrew Pinski  <apinski@cavium.com>\n\n\t* config/aarch64/aarch64.c (aarch64_if_then_else_costs): New function.\n\t(aarch64_rtx_costs): Use aarch64_if_then_else_costs.\n\nFrom-SVN: r211205", "tree": {"sha": "242fcb7d12bd154886f09c7ce75028e720c3e7d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/242fcb7d12bd154886f09c7ce75028e720c3e7d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d5ffe4631cfaf0322d2174a32cbb65bbee6c18f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d5ffe4631cfaf0322d2174a32cbb65bbee6c18f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d5ffe4631cfaf0322d2174a32cbb65bbee6c18f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d5ffe4631cfaf0322d2174a32cbb65bbee6c18f/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ce7abdd2f20ef1111e7241627bb8021910cd3e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce7abdd2f20ef1111e7241627bb8021910cd3e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce7abdd2f20ef1111e7241627bb8021910cd3e8"}], "stats": {"total": 131, "additions": 71, "deletions": 60}, "files": [{"sha": "becfda829d3776fffc1c116e18de6ee661b62d75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d5ffe4631cfaf0322d2174a32cbb65bbee6c18f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d5ffe4631cfaf0322d2174a32cbb65bbee6c18f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d5ffe4631cfaf0322d2174a32cbb65bbee6c18f", "patch": "@@ -1,3 +1,8 @@\n+014-06-03  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_if_then_else_costs): New function.\n+\t(aarch64_rtx_costs): Use aarch64_if_then_else_costs.\n+\n 2014-06-03  Kai Tietz  <ktietz@redhat.com>\n \n \t* config/i386/i386.c (ix86_function_value_regno_p): Disallow DX_REG"}, {"sha": "0cddba4c91924669cc2681cbe46a51b49be47dbd", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 66, "deletions": 60, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d5ffe4631cfaf0322d2174a32cbb65bbee6c18f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d5ffe4631cfaf0322d2174a32cbb65bbee6c18f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=2d5ffe4631cfaf0322d2174a32cbb65bbee6c18f", "patch": "@@ -4849,6 +4849,70 @@ aarch64_rtx_arith_op_extract_p (rtx x, enum machine_mode mode)\n   return false;\n }\n \n+/* Calculate the cost of calculating (if_then_else (OP0) (OP1) (OP2)),\n+   storing it in *COST.  Result is true if the total cost of the operation\n+   has now been calculated.  */\n+static bool\n+aarch64_if_then_else_costs (rtx op0, rtx op1, rtx op2, int *cost, bool speed)\n+{\n+  if (GET_CODE (op1) == PC || GET_CODE (op2) == PC)\n+    {\n+      /* Conditional branch.  */\n+      if (GET_MODE_CLASS (GET_MODE (XEXP (op0, 0))) == MODE_CC)\n+\treturn true;\n+      else\n+\t{\n+\t  if (GET_CODE (op0) == NE\n+\t      || GET_CODE (op0) == EQ)\n+\t    {\n+\t      rtx inner = XEXP (op0, 0);\n+\t      rtx comparator = XEXP (op0, 1);\n+\n+\t      if (comparator == const0_rtx)\n+\t\t{\n+\t\t  /* TBZ/TBNZ/CBZ/CBNZ.  */\n+\t\t  if (GET_CODE (inner) == ZERO_EXTRACT)\n+\t\t    /* TBZ/TBNZ.  */\n+\t\t    *cost += rtx_cost (XEXP (inner, 0), ZERO_EXTRACT,\n+\t\t\t \t       0, speed);\n+\t\telse\n+\t\t  /* CBZ/CBNZ.  */\n+\t\t  *cost += rtx_cost (inner, GET_CODE (op0), 0, speed);\n+\n+\t        return true;\n+\t      }\n+\t    }\n+\t  else if (GET_CODE (op0) == LT\n+\t\t   || GET_CODE (op0) == GE)\n+\t    {\n+\t      rtx comparator = XEXP (op0, 1);\n+\n+\t      /* TBZ/TBNZ.  */\n+\t      if (comparator == const0_rtx)\n+\t\treturn true;\n+\t    }\n+\t}\n+    }\n+  else if (GET_MODE_CLASS (GET_MODE (XEXP (op0, 0))) == MODE_CC)\n+    {\n+      /* It's a conditional operation based on the status flags,\n+\t so it must be some flavor of CSEL.  */\n+\n+      /* CSNEG, CSINV, and CSINC are handled for free as part of CSEL.  */\n+      if (GET_CODE (op1) == NEG\n+          || GET_CODE (op1) == NOT\n+          || (GET_CODE (op1) == PLUS && XEXP (op1, 1) == const1_rtx))\n+\top1 = XEXP (op1, 0);\n+\n+      *cost += rtx_cost (op1, IF_THEN_ELSE, 1, speed);\n+      *cost += rtx_cost (op2, IF_THEN_ELSE, 2, speed);\n+      return true;\n+    }\n+\n+  /* We don't know what this is, cost all operands.  */\n+  return false;\n+}\n+\n /* Calculate the cost of calculating X, storing it in *COST.  Result\n    is true if the total cost of the operation has now been calculated.  */\n static bool\n@@ -5583,66 +5647,8 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n       return false;  /* All arguments need to be in registers.  */\n \n     case IF_THEN_ELSE:\n-      op2 = XEXP (x, 2);\n-      op0 = XEXP (x, 0);\n-      op1 = XEXP (x, 1);\n-\n-      if (GET_CODE (op1) == PC || GET_CODE (op2) == PC)\n-        {\n-          /* Conditional branch.  */\n-          if (GET_MODE_CLASS (GET_MODE (XEXP (op0, 0))) == MODE_CC)\n-\t    return true;\n-\t  else\n-\t    {\n-\t      if (GET_CODE (op0) == NE\n-\t\t  || GET_CODE (op0) == EQ)\n-\t\t{\n-\t\t  rtx inner = XEXP (op0, 0);\n-\t\t  rtx comparator = XEXP (op0, 1);\n-\n-\t\t  if (comparator == const0_rtx)\n-\t\t    {\n-\t\t      /* TBZ/TBNZ/CBZ/CBNZ.  */\n-\t\t      if (GET_CODE (inner) == ZERO_EXTRACT)\n-\t\t\t/* TBZ/TBNZ.  */\n-\t\t\t*cost += rtx_cost (XEXP (inner, 0), ZERO_EXTRACT,\n-\t\t\t\t\t   0, speed);\n-\t\t      else\n-\t\t\t/* CBZ/CBNZ.  */\n-\t\t\t*cost += rtx_cost (inner, GET_CODE (op0), 0, speed);\n-\n-\t\t      return true;\n-\t\t    }\n-\t\t}\n-\t      else if (GET_CODE (op0) == LT\n-\t\t       || GET_CODE (op0) == GE)\n-\t\t{\n-\t\t  rtx comparator = XEXP (op0, 1);\n-\n-\t\t  /* TBZ/TBNZ.  */\n-\t\t  if (comparator == const0_rtx)\n-\t\t    return true;\n-\t\t}\n-\t    }\n-        }\n-      else if (GET_MODE_CLASS (GET_MODE (XEXP (op0, 0))) == MODE_CC)\n-        {\n-          /* It's a conditional operation based on the status flags,\n-             so it must be some flavor of CSEL.  */\n-\n-          /* CSNEG, CSINV, and CSINC are handled for free as part of CSEL.  */\n-          if (GET_CODE (op1) == NEG\n-              || GET_CODE (op1) == NOT\n-              || (GET_CODE (op1) == PLUS && XEXP (op1, 1) == const1_rtx))\n-            op1 = XEXP (op1, 0);\n-\n-          *cost += rtx_cost (op1, IF_THEN_ELSE, 1, speed);\n-          *cost += rtx_cost (op2, IF_THEN_ELSE, 2, speed);\n-          return true;\n-        }\n-\n-      /* We don't know what this is, cost all operands.  */\n-      return false;\n+      return aarch64_if_then_else_costs (XEXP (x, 0), XEXP (x, 1),\n+\t\t\t\t\t XEXP (x, 2), cost, speed);\n \n     case EQ:\n     case NE:"}]}