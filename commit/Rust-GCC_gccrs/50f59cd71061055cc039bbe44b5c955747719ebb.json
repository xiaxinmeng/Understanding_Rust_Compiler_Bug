{"sha": "50f59cd71061055cc039bbe44b5c955747719ebb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBmNTljZDcxMDYxMDU1Y2MwMzliYmU0NGI1Yzk1NTc0NzcxOWViYg==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2004-01-20T05:30:18Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2004-01-20T05:30:18Z"}, "message": "Move cpp_reader's line_maps field to a shared global.\n\n\t* cpphash.h (cpp_reader):  Rename line_maps field to line_table\n\tand change the type to a pointer rather than a struct.\n\t* cppinit.c (cpp_push_main_field):  Adjust accordingly.\n\t* cpplib.c (do_include_common, _cpp_do_file_change, cpp_get_callbacks):\n\tLikewise.\n\t* cppfiles.c (validate_pch):  Likewise.\n\t* cppmacro.c (_cpp_warn_if_unused_macro, _cpp_builtin_macro_text):\n\tLikewise.\n\t* cpperror.c (print_location):  Likewise.\n\t* cpplib.h (cpp_create_reader):  New line_maps pointer parameter.\n\t* cppinit.c (cpp_create_reader):  Handle new parameter.\n\t(cpp_destroy):  Don't free line_maps - that's no longer our job.\n\t* input.h (line_table):  New variable.\n\t* toplev.c (line_table):  Declare variable.\n\t(general_init):  Initialize line_table.\n\t* c-opts.c (c_common_init_options):  Pass line_table to\n\tcpp_create_reader.\n\t* fix-header.c (read_scan_file):  New local variable line_table.\n\tInitialize, and pass it to cpp_create_reader.\n\t* Makefile.in (LIBS, LIBDEPS):  Add libcpp.a.\n\t(C_AND_OBJC_OBJS, fix-header):  Remove redundant libcpp.a.\n\nFrom-SVN: r76198", "tree": {"sha": "15fcd6b635123af68ed69ca87bf633fa01f46d8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15fcd6b635123af68ed69ca87bf633fa01f46d8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50f59cd71061055cc039bbe44b5c955747719ebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f59cd71061055cc039bbe44b5c955747719ebb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50f59cd71061055cc039bbe44b5c955747719ebb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f59cd71061055cc039bbe44b5c955747719ebb/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9132fbb788b24bc4b03be723a42b16dd9f65e03f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9132fbb788b24bc4b03be723a42b16dd9f65e03f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9132fbb788b24bc4b03be723a42b16dd9f65e03f"}], "stats": {"total": 77, "additions": 56, "deletions": 21}, "files": [{"sha": "7dc7aee62355b6640a63dbd563b50e8def341a81", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50f59cd71061055cc039bbe44b5c955747719ebb", "patch": "@@ -1,4 +1,29 @@\n-2003-01-20  Per Bothner  <pbothner@apple.com>\n+2004-01-19  Per Bothner  <per@bothner.com>\n+\n+\tMove cpp_reader's line_maps field to a shared global.\n+\t* cpphash.h (cpp_reader):  Rename line_maps field to line_table\n+\tand change the type to a pointer rather than a struct.\n+\t* cppinit.c (cpp_push_main_field):  Adjust accordingly.\n+\t* cpplib.c (do_include_common, _cpp_do_file_change, cpp_get_callbacks):\n+\tLikewise.\n+\t* cppfiles.c (validate_pch):  Likewise.\n+\t* cppmacro.c (_cpp_warn_if_unused_macro, _cpp_builtin_macro_text):\n+\tLikewise.\n+\t* cpperror.c (print_location):  Likewise.\n+\t* cpplib.h (cpp_create_reader):  New line_maps pointer parameter.\n+\t* cppinit.c (cpp_create_reader):  Handle new parameter.\n+\t(cpp_destroy):  Don't free line_maps - that's no longer our job.\n+\t* input.h (line_table):  New variable.\n+\t* toplev.c (line_table):  Declare variable.\n+\t(general_init):  Initialize line_table.\n+\t* c-opts.c (c_common_init_options):  Pass line_table to\n+\tcpp_create_reader.\n+\t* fix-header.c (read_scan_file):  New local variable line_table.\n+\tInitialize, and pass it to cpp_create_reader.\n+\t* Makefile.in (LIBS, LIBDEPS):  Add libcpp.a.\n+\t(C_AND_OBJC_OBJS, fix-header):  Remove redundant libcpp.a.\n+\n+2004-01-19  Per Bothner  <per@bothner.com>\n \n \tImplement a cache for linemap_lookup.\n \t* line-map.h (struct_line_maps):  Add cache field."}, {"sha": "a48a4f585133dc7a5887830472ccb59316f63b75", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=50f59cd71061055cc039bbe44b5c955747719ebb", "patch": "@@ -714,15 +714,15 @@ LIBIBERTY = ../libiberty/libiberty.a\n BUILD_LIBIBERTY = @FORBUILD@/libiberty/libiberty.a\n \n # Dependencies on the intl and portability libraries.\n-LIBDEPS= $(LIBIBERTY) $(LIBINTL_DEP) $(LIBICONV_DEP)\n+LIBDEPS= $(LIBIBERTY) $(LIBINTL_DEP) $(LIBICONV_DEP) libcpp.a\n \n # Likewise, for use in the tools that must run on this machine\n # even if we are cross-building GCC.\n BUILD_LIBDEPS= $(BUILD_LIBIBERTY)\n \n # How to link with both our special library facilities\n # and the system's installed libraries.\n-LIBS = @LIBS@ $(LIBIBERTY) $(LIBINTL) $(LIBICONV)\n+LIBS = @LIBS@ libcpp.a $(LIBIBERTY) $(LIBINTL) $(LIBICONV)\n \n # Any system libraries needed just for GNAT.\n SYSLIBS = @GNAT_LIBEXC@\n@@ -839,7 +839,7 @@ CXX_TARGET_OBJS=@cxx_target_objs@\n C_AND_OBJC_OBJS = attribs.o c-errors.o c-lex.o c-pragma.o c-decl.o c-typeck.o \\\n   c-convert.o c-aux-info.o c-common.o c-opts.o c-format.o c-semantics.o \\\n   c-incpath.o cppdefault.o c-ppoutput.o c-cppbuiltin.o prefix.o \\\n-  c-objc-common.o c-dump.o c-pch.o libcpp.a $(C_TARGET_OBJS)\n+  c-objc-common.o c-dump.o c-pch.o $(C_TARGET_OBJS)\n \n # Language-specific object files for C.\n C_OBJS = c-parse.o c-lang.o c-pretty-print.o stub-objc.o $(C_AND_OBJC_OBJS)\n@@ -2571,7 +2571,7 @@ xsys-protos.h: $(GCC_PASSES) $(srcdir)/sys-protos.h deduced.h gen-protos$(build_\n fix-header$(build_exeext): fix-header.o scan-decls.o scan.o xsys-protos.h \\\n            c-incpath.o cppdefault.o prefix.o $(LIBDEPS) libcpp.a\n \t$(CC_FOR_BUILD) $(BUILD_CFLAGS) $(BUILD_LDFLAGS) -o $@ fix-header.o \\\n-\tc-incpath.o cppdefault.o scan-decls.o prefix.o scan.o libcpp.a $(LIBS)\n+\tc-incpath.o cppdefault.o scan-decls.o prefix.o scan.o $(LIBS)\n \n fix-header.o: fix-header.c $(OBSTACK_H) scan.h \\\n \txsys-protos.h $(BCONFIG_H) $(SYSTEM_H) coretypes.h $(GTM_H) $(CPPLIB_H)"}, {"sha": "77d668822f519c987f0a054cb6aebf8025685b23", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=50f59cd71061055cc039bbe44b5c955747719ebb", "patch": "@@ -203,7 +203,7 @@ c_common_init_options (unsigned int argc, const char **argv ATTRIBUTE_UNUSED)\n     }\n \n   parse_in = cpp_create_reader (c_dialect_cxx () ? CLK_GNUCXX: CLK_GNUC89,\n-\t\t\t\tident_hash);\n+\t\t\t\tident_hash, &line_table);\n \n   cpp_opts = cpp_get_options (parse_in);\n   cpp_opts->dollars_in_ident = DOLLARS_IN_IDENTIFIERS;"}, {"sha": "268d4ee53a86bb01a048bb10ae4be59fa883542a", "filename": "gcc/cpperror.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Fcpperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Fcpperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpperror.c?ref=50f59cd71061055cc039bbe44b5c955747719ebb", "patch": "@@ -45,8 +45,8 @@ print_location (cpp_reader *pfile, fileline line, unsigned int col)\n       const struct line_map *map;\n       unsigned int lin;\n \n-      map = linemap_lookup (&pfile->line_maps, line);\n-      linemap_print_containing_files (&pfile->line_maps, map);\n+      map = linemap_lookup (pfile->line_table, line);\n+      linemap_print_containing_files (pfile->line_table, map);\n \n       lin = SOURCE_LINE (map, line);\n       if (col == 0)"}, {"sha": "a63121d6528c539af14aaef8d7fa5423e5a155b7", "filename": "gcc/cpphash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=50f59cd71061055cc039bbe44b5c955747719ebb", "patch": "@@ -334,7 +334,7 @@ struct cpp_reader\n   struct lexer_state state;\n \n   /* Source line tracking.  */\n-  struct line_maps line_maps;\n+  struct line_maps *line_table;\n   const struct line_map *map;\n   fileline line;\n "}, {"sha": "b001c71ddabdd092931ea4c656c9a96f6122edc9", "filename": "gcc/cppinit.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=50f59cd71061055cc039bbe44b5c955747719ebb", "patch": "@@ -124,7 +124,8 @@ init_library (void)\n \n /* Initialize a cpp_reader structure.  */\n cpp_reader *\n-cpp_create_reader (enum c_lang lang, hash_table *table)\n+cpp_create_reader (enum c_lang lang, hash_table *table,\n+\t\t   struct line_maps *line_table)\n {\n   cpp_reader *pfile;\n \n@@ -172,7 +173,7 @@ cpp_create_reader (enum c_lang lang, hash_table *table)\n \n   /* Initialize the line map.  Start at logical line 1, so we can use\n      a line number of zero for special states.  */\n-  linemap_init (&pfile->line_maps);\n+  pfile->line_table = line_table;\n   pfile->line = 1;\n \n   /* Initialize lexer state.  */\n@@ -262,7 +263,6 @@ cpp_destroy (cpp_reader *pfile)\n       free (context);\n     }\n \n-  linemap_free (&pfile->line_maps);\n   free (pfile);\n }\n \n@@ -501,7 +501,7 @@ cpp_push_main_file (cpp_reader *pfile)\n   /* Set this here so the client can change the option if it wishes,\n      and after stacking the main file so we don't trace the main\n      file.  */\n-  pfile->line_maps.trace_includes = CPP_OPTION (pfile, print_include_names);\n+  pfile->line_table->trace_includes = CPP_OPTION (pfile, print_include_names);\n }\n \n /* For preprocessed files, if the first tokens are of the form # NUM."}, {"sha": "0d1ab9a37ece21d3e9d97a1cb12f1db8367e8a46", "filename": "gcc/cpplib.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=50f59cd71061055cc039bbe44b5c955747719ebb", "patch": "@@ -681,7 +681,7 @@ do_include_common (cpp_reader *pfile, enum include_type type)\n     return;\n \n   /* Prevent #include recursion.  */\n-  if (pfile->line_maps.depth >= CPP_STACK_MAX)\n+  if (pfile->line_table->depth >= CPP_STACK_MAX)\n     cpp_error (pfile, CPP_DL_ERROR, \"#include nested too deeply\");\n   else\n     {\n@@ -900,7 +900,7 @@ _cpp_do_file_change (cpp_reader *pfile, enum lc_reason reason,\n \t\t     const char *to_file, unsigned int file_line,\n \t\t     unsigned int sysp)\n {\n-  pfile->map = linemap_add (&pfile->line_maps, reason, sysp,\n+  pfile->map = linemap_add (pfile->line_table, reason, sysp,\n \t\t\t    pfile->line, to_file, file_line);\n \n   if (pfile->cb.file_change)\n@@ -1907,7 +1907,7 @@ cpp_get_callbacks (cpp_reader *pfile)\n const struct line_maps *\n cpp_get_line_maps (cpp_reader *pfile)\n {\n-  return &pfile->line_maps;\n+  return pfile->line_table;\n }\n \n /* Copy the given callbacks structure to our own.  */"}, {"sha": "9b916241eea011090f193276be3eade857f60050", "filename": "gcc/cpplib.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=50f59cd71061055cc039bbe44b5c955747719ebb", "patch": "@@ -510,7 +510,8 @@ struct cpp_hashnode GTY(())\n    pointer.  Otherwise you should pass in an initialized hash table\n    that cpplib will share; this technique is used by the C front\n    ends.  */\n-extern cpp_reader *cpp_create_reader (enum c_lang, struct ht *);\n+extern cpp_reader *cpp_create_reader (enum c_lang, struct ht *,\n+\t\t\t\t      struct line_maps *);\n \n /* Call this to change the selected language standard (e.g. because of\n    command line options).  */"}, {"sha": "158d9267f36e75bfa9985cb1c126c70849cc593c", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=50f59cd71061055cc039bbe44b5c955747719ebb", "patch": "@@ -80,7 +80,7 @@ _cpp_warn_if_unused_macro (cpp_reader *pfile, cpp_hashnode *node,\n       cpp_macro *macro = node->value.macro;\n \n       if (!macro->used\n-\t  && MAIN_FILE_P (linemap_lookup (&pfile->line_maps, macro->line)))\n+\t  && MAIN_FILE_P (linemap_lookup (pfile->line_table, macro->line)))\n \tcpp_error_with_line (pfile, CPP_DL_WARNING, macro->line, 0,\n \t\t\t     \"macro \\\"%s\\\" is not used\", NODE_NAME (node));\n     }\n@@ -136,7 +136,7 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node)\n \n \tif (node->value.builtin == BT_BASE_FILE)\n \t  while (! MAIN_FILE_P (map))\n-\t    map = INCLUDED_FROM (&pfile->line_maps, map);\n+\t    map = INCLUDED_FROM (pfile->line_table, map);\n \n \tname = map->to_file;\n \tlen = strlen (name);\n@@ -153,7 +153,7 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node)\n       /* The line map depth counts the primary source as level 1, but\n \t historically __INCLUDE_DEPTH__ has called the primary source\n \t level 0.  */\n-      number = pfile->line_maps.depth - 1;\n+      number = pfile->line_table->depth - 1;\n       break;\n \n     case BT_SPECLINE:"}, {"sha": "282c516e037f96b10d6993aac355b106122f1d94", "filename": "gcc/fix-header.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=50f59cd71061055cc039bbe44b5c955747719ebb", "patch": "@@ -590,10 +590,12 @@ read_scan_file (char *in_fname, int argc, char **argv)\n   struct fn_decl *fn;\n   int i, strings_processed;\n   struct symbol_list *cur_symbols;\n+  struct line_maps line_table;\n \n   obstack_init (&scan_file_obstack);\n \n-  scan_in = cpp_create_reader (CLK_GNUC89, NULL);\n+  linemap_init (&line_table);\n+  scan_in = cpp_create_reader (CLK_GNUC89, NULL, &line_table);\n   cb = cpp_get_callbacks (scan_in);\n   cb->file_change = cb_file_change;\n "}, {"sha": "3e00496eda9690903be794d66064dff360a03f8b", "filename": "gcc/input.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=50f59cd71061055cc039bbe44b5c955747719ebb", "patch": "@@ -22,6 +22,10 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_INPUT_H\n #define GCC_INPUT_H\n \n+#include \"line-map.h\"\n+\n+extern struct line_maps line_table;\n+\n /* The data structure used to record a location in a translation unit.  */\n /* Long-term, we want to get rid of this and typedef fileline location_t.  */\n struct location_s GTY (())"}, {"sha": "4769c82b441ab741a6ef56005a52c32535099030", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f59cd71061055cc039bbe44b5c955747719ebb/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=50f59cd71061055cc039bbe44b5c955747719ebb", "patch": "@@ -189,6 +189,8 @@ const char *main_input_filename;\n \n location_t input_location;\n \n+struct line_maps line_table;\n+\n /* Nonzero if it is unsafe to create any new pseudo registers.  */\n int no_new_pseudos;\n \n@@ -4228,6 +4230,7 @@ general_init (const char *argv0)\n      table.  */\n   init_ggc ();\n   init_stringpool ();\n+  linemap_init (&line_table);\n   init_ttree ();\n \n   /* Initialize register usage now so switches may override.  */"}]}