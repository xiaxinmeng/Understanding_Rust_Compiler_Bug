{"sha": "128b26dceb824d7760c2100cd6845c72be5a1422", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI4YjI2ZGNlYjgyNGQ3NzYwYzIxMDBjZDY4NDVjNzJiZTVhMTQyMg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2015-01-19T12:03:35Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2015-01-19T12:03:35Z"}, "message": "[PR libgomp/64625] Remove __OFFLOAD_TABLE__ variable/formal parameter.\n\n\tgcc/\n\t* omp-low.c (offload_symbol_decl): Remove variable.\n\t(get_offload_symbol_decl): Remove function.\n\t(expand_omp_target): For BUILT_IN_GOMP_TARGET,\n\tBUILT_IN_GOMP_TARGET_DATA, BUILT_IN_GOMP_TARGET_UPDATE pass NULL\n\tinstead of &__OFFLOAD_TABLE__, for BUILT_IN_GOACC_DATA_START,\n\tBUILT_IN_GOACC_ENTER_EXIT_DATA, BUILT_IN_GOACC_PARALLEL,\n\tBUILT_IN_GOACC_UPDATE don't pass it at all.\n\tlibgomp/\n\t* libgomp_g.h (GOACC_data_start, GOACC_enter_exit_data)\n\t(GOACC_parallel, GOACC_update): Remove const_void *offload_table\n\tformal parameter.  Update all users.\n\t* target.c (GOMP_target, GOMP_target_data, GOMP_target_update):\n\tDocument unused formal parameter.\n\nFrom-SVN: r219836", "tree": {"sha": "0dedf360229e98ec8dd3a80062bd72e0cad0cde5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dedf360229e98ec8dd3a80062bd72e0cad0cde5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/128b26dceb824d7760c2100cd6845c72be5a1422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/128b26dceb824d7760c2100cd6845c72be5a1422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/128b26dceb824d7760c2100cd6845c72be5a1422", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/128b26dceb824d7760c2100cd6845c72be5a1422/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3d36be01e4f9bd4d99750d93f44ef7d8f3a3cc4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d36be01e4f9bd4d99750d93f44ef7d8f3a3cc4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d36be01e4f9bd4d99750d93f44ef7d8f3a3cc4e"}], "stats": {"total": 92, "additions": 50, "deletions": 42}, "files": [{"sha": "3ee35a6a4ca6c25372cfeeba830b0eafd5a85788", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128b26dceb824d7760c2100cd6845c72be5a1422/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128b26dceb824d7760c2100cd6845c72be5a1422/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=128b26dceb824d7760c2100cd6845c72be5a1422", "patch": "@@ -1,3 +1,13 @@\n+2015-01-19  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* omp-low.c (offload_symbol_decl): Remove variable.\n+\t(get_offload_symbol_decl): Remove function.\n+\t(expand_omp_target): For BUILT_IN_GOMP_TARGET,\n+\tBUILT_IN_GOMP_TARGET_DATA, BUILT_IN_GOMP_TARGET_UPDATE pass NULL\n+\tinstead of &__OFFLOAD_TABLE__, for BUILT_IN_GOACC_DATA_START,\n+\tBUILT_IN_GOACC_ENTER_EXIT_DATA, BUILT_IN_GOACC_PARALLEL,\n+\tBUILT_IN_GOACC_UPDATE don't pass it at all.\n+\n 2015-01-19  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* tree-sra.c (some_callers_have_mismatched_arguments_p): Allow thunk"}, {"sha": "15893109889b6ae6acffd241e13a9531f08944cf", "filename": "gcc/omp-low.c", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128b26dceb824d7760c2100cd6845c72be5a1422/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128b26dceb824d7760c2100cd6845c72be5a1422/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=128b26dceb824d7760c2100cd6845c72be5a1422", "patch": "@@ -340,30 +340,6 @@ oacc_max_threads (omp_context *ctx)\n /* Holds offload tables with decls.  */\n vec<tree, va_gc> *offload_funcs, *offload_vars;\n \n-/* Holds a decl for __OFFLOAD_TABLE__.  */\n-static GTY(()) tree offload_symbol_decl;\n-\n-/* Get the __OFFLOAD_TABLE__ symbol.  */\n-static tree\n-get_offload_symbol_decl (void)\n-{\n-  if (!offload_symbol_decl)\n-    {\n-      tree decl = build_decl (UNKNOWN_LOCATION, VAR_DECL,\n-\t\t\t      get_identifier (\"__OFFLOAD_TABLE__\"),\n-\t\t\t      ptr_type_node);\n-      TREE_ADDRESSABLE (decl) = 1;\n-      TREE_PUBLIC (decl) = 1;\n-      DECL_EXTERNAL (decl) = 1;\n-      DECL_WEAK (decl) = 1;\n-      DECL_ATTRIBUTES (decl)\n-\t= tree_cons (get_identifier (\"weak\"),\n-\t\t     NULL_TREE, DECL_ATTRIBUTES (decl));\n-      offload_symbol_decl = decl;\n-    }\n-  return offload_symbol_decl;\n-}\n-\n /* Convenience function for calling scan_omp_1_op on tree operands.  */\n \n static inline tree\n@@ -9119,16 +9095,31 @@ expand_omp_target (struct omp_region *region)\n     }\n \n   gimple g;\n-  tree offload_table = get_offload_symbol_decl ();\n   vec<tree> *args;\n   /* The maximum number used by any start_ix, without varargs.  */\n-  unsigned int argcnt = 12;\n+  unsigned int argcnt = 11;\n \n   vec_alloc (args, argcnt);\n   args->quick_push (device);\n   if (offloaded)\n     args->quick_push (build_fold_addr_expr (child_fn));\n-  args->quick_push (build_fold_addr_expr (offload_table));\n+  switch (start_ix)\n+    {\n+    case BUILT_IN_GOMP_TARGET:\n+    case BUILT_IN_GOMP_TARGET_DATA:\n+    case BUILT_IN_GOMP_TARGET_UPDATE:\n+      /* This const void * is part of the current ABI, but we're not actually\n+\t using it.  */\n+      args->quick_push (build_zero_cst (ptr_type_node));\n+      break;\n+    case BUILT_IN_GOACC_DATA_START:\n+    case BUILT_IN_GOACC_ENTER_EXIT_DATA:\n+    case BUILT_IN_GOACC_PARALLEL:\n+    case BUILT_IN_GOACC_UPDATE:\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n   args->quick_push (t1);\n   args->quick_push (t2);\n   args->quick_push (t3);"}, {"sha": "482a968658b1bc95009710b265c6a27294d24ab5", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128b26dceb824d7760c2100cd6845c72be5a1422/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128b26dceb824d7760c2100cd6845c72be5a1422/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=128b26dceb824d7760c2100cd6845c72be5a1422", "patch": "@@ -1,3 +1,11 @@\n+2015-01-19  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* libgomp_g.h (GOACC_data_start, GOACC_enter_exit_data)\n+\t(GOACC_parallel, GOACC_update): Remove const_void *offload_table\n+\tformal parameter.  Update all users.\n+\t* target.c (GOMP_target, GOMP_target_data, GOMP_target_update):\n+\tDocument unused formal parameter.\n+\n 2015-01-16  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* oacc-parallel.c: Don't include <alloca.h>."}, {"sha": "5e88d451b9ab80e8e3a7f17cd49950885675441c", "filename": "libgomp/libgomp_g.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128b26dceb824d7760c2100cd6845c72be5a1422/libgomp%2Flibgomp_g.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128b26dceb824d7760c2100cd6845c72be5a1422/libgomp%2Flibgomp_g.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp_g.h?ref=128b26dceb824d7760c2100cd6845c72be5a1422", "patch": "@@ -217,15 +217,15 @@ extern void GOMP_teams (unsigned int, unsigned int);\n \n /* oacc-parallel.c */\n \n-extern void GOACC_data_start (int, const void *,\n-\t\t\t      size_t, void **, size_t *, unsigned short *);\n+extern void GOACC_data_start (int, size_t, void **, size_t *,\n+\t\t\t      unsigned short *);\n extern void GOACC_data_end (void);\n-extern void GOACC_enter_exit_data (int, const void *, size_t, void **,\n+extern void GOACC_enter_exit_data (int, size_t, void **,\n \t\t\t\t   size_t *, unsigned short *, int, int, ...);\n-extern void GOACC_parallel (int, void (*) (void *), const void *, size_t,\n+extern void GOACC_parallel (int, void (*) (void *), size_t,\n \t\t\t    void **, size_t *, unsigned short *, int, int, int,\n \t\t\t    int, int, ...);\n-extern void GOACC_update (int, const void *, size_t, void **, size_t *,\n+extern void GOACC_update (int, size_t, void **, size_t *,\n \t\t\t  unsigned short *, int, int, ...);\n extern void GOACC_wait (int, int, ...);\n extern int GOACC_get_num_threads (void);"}, {"sha": "a3007428a86d4c3c3c9c3bbe74e7b1b5b09f5bc6", "filename": "libgomp/oacc-parallel.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128b26dceb824d7760c2100cd6845c72be5a1422/libgomp%2Foacc-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128b26dceb824d7760c2100cd6845c72be5a1422/libgomp%2Foacc-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-parallel.c?ref=128b26dceb824d7760c2100cd6845c72be5a1422", "patch": "@@ -75,7 +75,7 @@ select_acc_device (int device_type)\n static void goacc_wait (int async, int num_waits, va_list ap);\n \n void\n-GOACC_parallel (int device, void (*fn) (void *), const void *offload_table,\n+GOACC_parallel (int device, void (*fn) (void *),\n \t\tsize_t mapnum, void **hostaddrs, size_t *sizes,\n \t\tunsigned short *kinds,\n \t\tint num_gangs, int num_workers, int vector_length,\n@@ -172,7 +172,7 @@ GOACC_parallel (int device, void (*fn) (void *), const void *offload_table,\n }\n \n void\n-GOACC_data_start (int device, const void *offload_table, size_t mapnum,\n+GOACC_data_start (int device, size_t mapnum,\n \t\t  void **hostaddrs, size_t *sizes, unsigned short *kinds)\n {\n   bool host_fallback = device == GOMP_DEVICE_HOST_FALLBACK;\n@@ -218,7 +218,7 @@ GOACC_data_end (void)\n }\n \n void\n-GOACC_enter_exit_data (int device, const void *offload_table, size_t mapnum,\n+GOACC_enter_exit_data (int device, size_t mapnum,\n \t\t       void **hostaddrs, size_t *sizes, unsigned short *kinds,\n \t\t       int async, int num_waits, ...)\n {\n@@ -408,7 +408,7 @@ goacc_wait (int async, int num_waits, va_list ap)\n }\n \n void\n-GOACC_update (int device, const void *offload_table, size_t mapnum,\n+GOACC_update (int device, size_t mapnum,\n \t      void **hostaddrs, size_t *sizes, unsigned short *kinds,\n \t      int async, int num_waits, ...)\n {"}, {"sha": "ebff55e47279c9f3691166bf318dd4fb0beead0f", "filename": "libgomp/target.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/128b26dceb824d7760c2100cd6845c72be5a1422/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/128b26dceb824d7760c2100cd6845c72be5a1422/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=128b26dceb824d7760c2100cd6845c72be5a1422", "patch": "@@ -738,15 +738,14 @@ gomp_fini_device (struct gomp_device_descr *devicep)\n    is GOMP_DEVICE_ICV, it means use device-var ICV.  If it is\n    GOMP_DEVICE_HOST_FALLBACK (or any value\n    larger than last available hw device), use host fallback.\n-   FN is address of host code, OFFLOAD_TABLE contains value of the\n-   __OFFLOAD_TABLE__ symbol in the shared library or binary that invokes\n-   GOMP_target.  HOSTADDRS, SIZES and KINDS are arrays\n+   FN is address of host code, UNUSED is part of the current ABI, but\n+   we're not actually using it.  HOSTADDRS, SIZES and KINDS are arrays\n    with MAPNUM entries, with addresses of the host objects,\n    sizes of the host objects (resp. for pointer kind pointer bias\n    and assumed sizeof (void *) size) and kinds.  */\n \n void\n-GOMP_target (int device, void (*fn) (void *), const void *offload_table,\n+GOMP_target (int device, void (*fn) (void *), const void *unused,\n \t     size_t mapnum, void **hostaddrs, size_t *sizes,\n \t     unsigned char *kinds)\n {\n@@ -817,7 +816,7 @@ GOMP_target (int device, void (*fn) (void *), const void *offload_table,\n }\n \n void\n-GOMP_target_data (int device, const void *offload_table, size_t mapnum,\n+GOMP_target_data (int device, const void *unused, size_t mapnum,\n \t\t  void **hostaddrs, size_t *sizes, unsigned char *kinds)\n {\n   struct gomp_device_descr *devicep = resolve_device (device);\n@@ -873,7 +872,7 @@ GOMP_target_end_data (void)\n }\n \n void\n-GOMP_target_update (int device, const void *offload_table, size_t mapnum,\n+GOMP_target_update (int device, const void *unused, size_t mapnum,\n \t\t    void **hostaddrs, size_t *sizes, unsigned char *kinds)\n {\n   struct gomp_device_descr *devicep = resolve_device (device);"}]}