{"sha": "037de943dc054e19f7387c56668fbb6375bee268", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM3ZGU5NDNkYzA1NGUxOWY3Mzg3YzU2NjY4ZmJiNjM3NWJlZTI2OA==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-11-05T23:00:35Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-11-05T23:00:35Z"}, "message": "i386.c (legitimate_pic_address_disp_p): Handle UNSPEC_PCREL.\n\n2010-11-05  Kai Tietz  <kai.tietz@onevision.com>\n\n        * config/i386/i386.c (legitimate_pic_address_disp_p):\n        Handle UNSPEC_PCREL.\n        (ix86_legitimate_address_p): Likewise.\n        (legitimize_pic_address): Likewise.\n        (output_pic_addr_const): Likewise.\n        (ix86_delegitimize_address): Likewise.\n        (ix86_find_base_term): Likewise.\n        (memory_address_length): Likewise.\n        (x86_output_mi_thunk): Handle special case x64\n        for non local binding.\n        * config/i386/i386.md (UNSPEC_PCREL): New.\n        * config/i386/winnt.c (i386_pe_binds_local_p):\n        Allow weak symbol for x64 windows with non-local binding.\n\nFrom-SVN: r166382", "tree": {"sha": "9fd2fa932befdfb5958617782e973e9b062237d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fd2fa932befdfb5958617782e973e9b062237d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/037de943dc054e19f7387c56668fbb6375bee268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/037de943dc054e19f7387c56668fbb6375bee268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/037de943dc054e19f7387c56668fbb6375bee268", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/037de943dc054e19f7387c56668fbb6375bee268/comments", "author": null, "committer": null, "parents": [{"sha": "f706cf1831e57964262a6ddd5d8bf96c7430b9af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f706cf1831e57964262a6ddd5d8bf96c7430b9af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f706cf1831e57964262a6ddd5d8bf96c7430b9af"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "1678d050b7716b9d5b83c6218981eeadced49496", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037de943dc054e19f7387c56668fbb6375bee268/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037de943dc054e19f7387c56668fbb6375bee268/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=037de943dc054e19f7387c56668fbb6375bee268", "patch": "@@ -1,3 +1,19 @@\n+2010-11-05  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* config/i386/i386.c (legitimate_pic_address_disp_p):\n+\tHandle UNSPEC_PCREL.\n+\t(ix86_legitimate_address_p): Likewise.\n+\t(legitimize_pic_address): Likewise.\n+\t(output_pic_addr_const): Likewise.\n+\t(ix86_delegitimize_address): Likewise.\n+\t(ix86_find_base_term): Likewise.\n+\t(memory_address_length): Likewise.\n+\t(x86_output_mi_thunk): Handle special case x64\n+\tfor non local binding.\n+\t* config/i386/i386.md (UNSPEC_PCREL): New.\n+\t* config/i386/winnt.c (i386_pe_binds_local_p):\n+\tAllow weak symbol for x64 windows with non-local binding.\n+\n 2010-11-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/45670"}, {"sha": "c50fcc23b286bb0614212bfe5d106bedcd4bb7a7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037de943dc054e19f7387c56668fbb6375bee268/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037de943dc054e19f7387c56668fbb6375bee268/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=037de943dc054e19f7387c56668fbb6375bee268", "patch": "@@ -11718,6 +11718,7 @@ legitimate_pic_address_disp_p (rtx disp)\n       if (GET_CODE (disp) != UNSPEC\n \t  || (XINT (disp, 1) != UNSPEC_GOTPCREL\n \t      && XINT (disp, 1) != UNSPEC_GOTOFF\n+\t      && XINT (disp, 1) != UNSPEC_PCREL\n \t      && XINT (disp, 1) != UNSPEC_PLTOFF))\n \treturn false;\n \n@@ -11900,6 +11901,7 @@ ix86_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n \t    return false;\n \n \t  case UNSPEC_GOTPCREL:\n+\t  case UNSPEC_PCREL:\n \t    gcc_assert (flag_pic);\n \t    goto is_legitimate_pic;\n \n@@ -12127,7 +12129,19 @@ legitimize_pic_address (rtx orig, rtx reg)\n             }\n         }\n \n-      if (TARGET_64BIT && ix86_cmodel != CM_LARGE_PIC)\n+      /* For x64 PE-COFF there is no GOT table.  So we use address\n+         directly.  */\n+      if (TARGET_64BIT && DEFAULT_ABI == MS_ABI)\n+      {\n+\t  new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_PCREL);\n+\t  new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n+\n+\t  if (reg == 0)\n+\t    reg = gen_reg_rtx (Pmode);\n+  \t  emit_move_insn (reg, new_rtx);\n+\t  new_rtx = reg;\n+      }\n+      else if (TARGET_64BIT && ix86_cmodel != CM_LARGE_PIC)\n \t{\n \t  new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, addr), UNSPEC_GOTPCREL);\n \t  new_rtx = gen_rtx_CONST (Pmode, new_rtx);\n@@ -12836,6 +12850,10 @@ output_pic_addr_const (FILE *file, rtx x, int code)\n \tcase UNSPEC_PLTOFF:\n \t  fputs (\"@PLTOFF\", file);\n \t  break;\n+\tcase UNSPEC_PCREL:\n+\t  fputs (ASSEMBLER_DIALECT == ASM_ATT ?\n+\t\t \"(%rip)\" : \"[rip]\", file);\n+\t  break;\n \tcase UNSPEC_GOTPCREL:\n \t  fputs (ASSEMBLER_DIALECT == ASM_ATT ?\n \t\t \"@GOTPCREL(%rip)\" : \"@GOTPCREL[rip]\", file);\n@@ -12995,6 +13013,7 @@ ix86_delegitimize_address (rtx x)\n       if (GET_CODE (x) != CONST\n \t  || GET_CODE (XEXP (x, 0)) != UNSPEC\n \t  || XINT (XEXP (x, 0), 1) != UNSPEC_GOTPCREL\n+\t  || XINT (XEXP (x, 0), 1) != UNSPEC_PCREL\n \t  || !MEM_P (orig_x))\n \treturn ix86_delegitimize_tls_address (orig_x);\n       x = XVECEXP (XEXP (x, 0), 0, 0);\n@@ -13091,7 +13110,8 @@ ix86_find_base_term (rtx x)\n \t      || GET_CODE (XEXP (term, 1)) == CONST_DOUBLE))\n \tterm = XEXP (term, 0);\n       if (GET_CODE (term) != UNSPEC\n-\t  || XINT (term, 1) != UNSPEC_GOTPCREL)\n+\t  || (XINT (term, 1) != UNSPEC_GOTPCREL\n+\t      && XINT (term, 1) != UNSPEC_PCREL))\n \treturn x;\n \n       return XVECEXP (term, 0, 0);\n@@ -21803,6 +21823,7 @@ memory_address_length (rtx addr)\n \t\t  || SYMBOL_REF_TLS_MODEL (symbol) != 0)\n \t      && (GET_CODE (symbol) != UNSPEC\n \t\t  || (XINT (symbol, 1) != UNSPEC_GOTPCREL\n+\t\t      && XINT (symbol, 1) != UNSPEC_PCREL\n \t\t      && XINT (symbol, 1) != UNSPEC_GOTNTPOFF)))\n \t    len += 1;\n \t}\n@@ -29112,7 +29133,8 @@ x86_output_mi_thunk (FILE *file,\n   xops[0] = XEXP (DECL_RTL (function), 0);\n   if (TARGET_64BIT)\n     {\n-      if (!flag_pic || targetm.binds_local_p (function))\n+      if (!flag_pic || targetm.binds_local_p (function)\n+\t  || DEFAULT_ABI == MS_ABI)\n \toutput_asm_insn (\"jmp\\t%P0\", xops);\n       /* All thunks should be in the same object as their target,\n \t and thus binds_local_p should be true.  */"}, {"sha": "eff96a106d4208e6d0d444386f2b444637c21d31", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037de943dc054e19f7387c56668fbb6375bee268/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037de943dc054e19f7387c56668fbb6375bee268/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=037de943dc054e19f7387c56668fbb6375bee268", "patch": "@@ -76,6 +76,7 @@\n   UNSPEC_INDNTPOFF\n   UNSPEC_PLTOFF\n   UNSPEC_MACHOPIC_OFFSET\n+  UNSPEC_PCREL\n \n   ;; Prologue support\n   UNSPEC_STACK_ALLOC"}, {"sha": "251bb5ae5bcce9caee70abb37c66d88ae147d21f", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/037de943dc054e19f7387c56668fbb6375bee268/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/037de943dc054e19f7387c56668fbb6375bee268/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=037de943dc054e19f7387c56668fbb6375bee268", "patch": "@@ -326,10 +326,7 @@ i386_pe_binds_local_p (const_tree exp)\n   /* Or a weak one, now that they are supported.  */\n   if ((TREE_CODE (exp) == VAR_DECL || TREE_CODE (exp) == FUNCTION_DECL)\n       && DECL_WEAK (exp))\n-    /* But x64 gets confused and attempts to use unsupported GOTPCREL\n-       relocations if we tell it the truth, so we still return true in\n-       that case until the deeper problem can be fixed.  */\n-    return (TARGET_64BIT && DEFAULT_ABI == MS_ABI);\n+    return false;\n \n   return true;\n }"}]}