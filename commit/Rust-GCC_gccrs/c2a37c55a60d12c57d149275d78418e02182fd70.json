{"sha": "c2a37c55a60d12c57d149275d78418e02182fd70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJhMzdjNTVhNjBkMTJjNTdkMTQ5Mjc1ZDc4NDE4ZTAyMTgyZmQ3MA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "1999-09-12T14:03:23Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "1999-09-12T14:03:23Z"}, "message": "define_function cleanup\n\nFrom-SVN: r29360", "tree": {"sha": "2499c1b8055faf8cd45b7911546f6c4ceca32c7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2499c1b8055faf8cd45b7911546f6c4ceca32c7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2a37c55a60d12c57d149275d78418e02182fd70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a37c55a60d12c57d149275d78418e02182fd70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a37c55a60d12c57d149275d78418e02182fd70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a37c55a60d12c57d149275d78418e02182fd70/comments", "author": null, "committer": null, "parents": [{"sha": "40c1bf53bbe72205e10d06af612da51d0018c93f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c1bf53bbe72205e10d06af612da51d0018c93f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40c1bf53bbe72205e10d06af612da51d0018c93f"}], "stats": {"total": 68, "additions": 39, "deletions": 29}, "files": [{"sha": "17c8f168968a26e426c948167f58dfb8bb9ec248", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a37c55a60d12c57d149275d78418e02182fd70/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a37c55a60d12c57d149275d78418e02182fd70/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c2a37c55a60d12c57d149275d78418e02182fd70", "patch": "@@ -1,3 +1,12 @@\n+1999-09-12  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* cp-tree.h (auto_function, define_function): Adjust prototypes.\n+\t* decl.c (define_function): Lose FUNCTION_CODE arg.  All callers\n+\tchanged.\n+\t(auto_function): Likewise, for CODE arg.\n+\tMove code to set DECL_BUILT_IN and DECL_FUNCTION_CODE to...\n+\t(builtin_function): ... here.\n+\n 1999-09-11  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.def (CLEANUP_STMT): New node."}, {"sha": "2cb0574f42baf72b41a12eeddad751cae1a6381d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a37c55a60d12c57d149275d78418e02182fd70/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a37c55a60d12c57d149275d78418e02182fd70/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c2a37c55a60d12c57d149275d78418e02182fd70", "patch": "@@ -3177,12 +3177,12 @@ extern tree namespace_ancestor\t\t\tPROTO((tree, tree));\n extern tree unqualified_namespace_lookup\tPROTO((tree, int, tree *));\n extern int  lookup_using_namespace              PROTO((tree, tree, tree, tree, int, tree *));\n extern int  qualified_lookup_using_namespace    PROTO((tree, tree, tree, int));\n-extern tree auto_function\t\t\tPROTO((tree, tree, enum built_in_function));\n+extern tree auto_function\t\t\tPROTO((tree, tree));\n extern void init_decl_processing\t\tPROTO((void));\n extern int init_type_desc\t\t\tPROTO((void));\n-extern tree define_function\n-\tPROTO((const char *, tree, enum built_in_function,\n-\t       void (*) (tree), const char *));  \n+extern tree define_function\t\t\tPROTO((const char *, tree,\n+\t\t\t\t\t\t       void (*) (tree),\n+\t\t\t\t\t\t       const char *));\n extern tree check_tag_decl\t\t\tPROTO((tree));\n extern void shadow_tag\t\t\t\tPROTO((tree));\n extern tree groktypename\t\t\tPROTO((tree));"}, {"sha": "5cbb8c8616e674cafe4bae082fcc3901d9fc0ec8", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a37c55a60d12c57d149275d78418e02182fd70/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a37c55a60d12c57d149275d78418e02182fd70/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c2a37c55a60d12c57d149275d78418e02182fd70", "patch": "@@ -5947,12 +5947,12 @@ push_overloaded_decl_1 (x)\n __inline\n #endif\n tree\n-auto_function (name, type, code)\n+auto_function (name, type)\n      tree name, type;\n-     enum built_in_function code;\n+     enum built_in_function;\n {\n   return define_function\n-    (IDENTIFIER_POINTER (name), type, code, push_overloaded_decl_1,\n+    (IDENTIFIER_POINTER (name), type, push_overloaded_decl_1,\n      IDENTIFIER_POINTER (build_decl_overload (name, TYPE_ARG_TYPES (type),\n \t\t\t\t\t      0)));\n }\n@@ -6309,16 +6309,15 @@ init_decl_processing ()\n     newtype = build_exception_variant\n       (ptr_ftype_sizetype, add_exception_specifier (NULL_TREE, bad_alloc_type_node, -1));\n     deltype = build_exception_variant (void_ftype_ptr, empty_except_spec);\n-    auto_function (ansi_opname[(int) NEW_EXPR], newtype, NOT_BUILT_IN);\n-    auto_function (ansi_opname[(int) VEC_NEW_EXPR], newtype, NOT_BUILT_IN);\n-    global_delete_fndecl\n-      = auto_function (ansi_opname[(int) DELETE_EXPR], deltype, NOT_BUILT_IN);\n-    auto_function (ansi_opname[(int) VEC_DELETE_EXPR], deltype, NOT_BUILT_IN);\n+    auto_function (ansi_opname[(int) NEW_EXPR], newtype);\n+    auto_function (ansi_opname[(int) VEC_NEW_EXPR], newtype);\n+    global_delete_fndecl = auto_function (ansi_opname[(int) DELETE_EXPR],\n+\t\t\t\t\t  deltype);\n+    auto_function (ansi_opname[(int) VEC_DELETE_EXPR], deltype);\n   }\n \n   abort_fndecl\n-    = define_function (\"__pure_virtual\", void_ftype,\n-\t\t       NOT_BUILT_IN, 0, 0);\n+    = define_function (\"__pure_virtual\", void_ftype, 0, 0);\n \n   /* Perform other language dependent initializations.  */\n   init_class_processing ();\n@@ -6401,17 +6400,14 @@ lang_print_error_function (file)\n \n /* Make a definition for a builtin function named NAME and whose data type\n    is TYPE.  TYPE should be a function type with argument types.\n-   FUNCTION_CODE tells later passes how to compile calls to this function.\n-   See tree.h for its possible values.\n \n    If LIBRARY_NAME is nonzero, use that for DECL_ASSEMBLER_NAME,\n    the name to be called if we can't opencode the function.  */\n \n tree\n-define_function (name, type, function_code, pfn, library_name)\n+define_function (name, type, pfn, library_name)\n      const char *name;\n      tree type;\n-     enum built_in_function function_code;\n      void (*pfn) PROTO((tree));\n      const char *library_name;\n {\n@@ -6430,22 +6426,30 @@ define_function (name, type, function_code, pfn, library_name)\n   if (library_name)\n     DECL_ASSEMBLER_NAME (decl) = get_identifier (library_name);\n   make_function_rtl (decl);\n-  if (function_code != NOT_BUILT_IN)\n-    {\n-      DECL_BUILT_IN (decl) = 1;\n-      DECL_FUNCTION_CODE (decl) = function_code;\n-    }\n   return decl;\n }\n \n+\n+/* Wrapper around define_function, for the benefit of \n+   c_common_nodes_and_builtins.\n+   FUNCTION_CODE tells later passes how to compile calls to this function.\n+   See tree.h for its possible values.  */\n+\n tree\n builtin_function (name, type, code, libname)\n      const char *name;\n      tree type;\n      enum built_in_function code;\n      const char *libname;\n {\n-  return define_function (name, type, code, (void (*) PROTO((tree)))pushdecl, libname);\n+  tree decl = define_function (name, type, (void (*) PROTO((tree)))pushdecl,\n+\t\t\t       libname);\n+  if (code != NOT_BUILT_IN)\n+    {\n+      DECL_BUILT_IN (decl) = 1;\n+      DECL_FUNCTION_CODE (decl) = code;\n+    }\n+  return decl;\n }\n \f\n /* When we call finish_struct for an anonymous union, we create\n@@ -7906,9 +7910,7 @@ destroy_local_static (decl)\n \t= define_function (\"atexit\",\n \t\t\t   build_function_type (void_type_node,\n \t\t\t\t\t\tpfvlist),\n-\t\t\t   NOT_BUILT_IN, \n-\t\t\t   /*pfn=*/0,\n-\t\t\t   NULL_PTR);\n+\t\t\t   /*pfn=*/0, NULL_PTR);\n       mark_used (atexit_fndecl);\n       atexit_node = default_conversion (atexit_fndecl);\n       pop_lang_context ();"}, {"sha": "196eaf90928ebbfeca05eb6c17ea54329f674b41", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2a37c55a60d12c57d149275d78418e02182fd70/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2a37c55a60d12c57d149275d78418e02182fd70/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=c2a37c55a60d12c57d149275d78418e02182fd70", "patch": "@@ -164,8 +164,7 @@ init_exception_processing ()\n   \n   if (flag_honor_std)\n     push_namespace (get_identifier (\"std\"));\n-  terminate_node = auto_function (get_identifier (\"terminate\"),\n-\t\t\t\t  vtype, NOT_BUILT_IN);\n+  terminate_node = auto_function (get_identifier (\"terminate\"), vtype);\n   TREE_THIS_VOLATILE (terminate_node) = 1;\n   if (flag_honor_std)\n     pop_namespace ();"}]}