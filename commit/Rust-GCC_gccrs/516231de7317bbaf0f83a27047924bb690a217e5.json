{"sha": "516231de7317bbaf0f83a27047924bb690a217e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE2MjMxZGU3MzE3YmJhZjBmODNhMjcwNDc5MjRiYjY5MGEyMTdlNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-03-16T15:27:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-03-16T15:27:57Z"}, "message": "Fix encoding() and max_length() values for codecvt facets\n\n\t* src/c++11/codecvt.cc (codecvt<char16_t, char, mbstate_t>)\n\t(codecvt<char32_t, char, mbstate_t>, __codecvt_utf8_base<char16_t>)\n\t(__codecvt_utf8_base<char32_t>, __codecvt_utf8_base<wchar_t>)\n\t(__codecvt_utf16_base<char16_t>, __codecvt_utf16_base<char32_t>)\n\t(__codecvt_utf16_base<wchar_t>, __codecvt_utf8_utf16_base<char16_t>)\n\t(__codecvt_utf8_utf16_base<char32_t>)\n\t(__codecvt_utf8_utf16_base<wchar_t>): Fix do_encoding() and\n\tdo_max_length() return values.\n\t* testsuite/22_locale/codecvt/codecvt_utf16/members.cc: New test.\n\t* testsuite/22_locale/codecvt/codecvt_utf8/members.cc: New test.\n\t* testsuite/22_locale/codecvt/codecvt_utf8_utf16/members.cc: New test.\n\nFrom-SVN: r246201", "tree": {"sha": "b2ce70fd6aaa1d1beff946081aa9e670e1441d64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2ce70fd6aaa1d1beff946081aa9e670e1441d64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/516231de7317bbaf0f83a27047924bb690a217e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516231de7317bbaf0f83a27047924bb690a217e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/516231de7317bbaf0f83a27047924bb690a217e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516231de7317bbaf0f83a27047924bb690a217e5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcd682e1faed71fd861518ca43235706fc39a7cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd682e1faed71fd861518ca43235706fc39a7cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcd682e1faed71fd861518ca43235706fc39a7cd"}], "stats": {"total": 374, "additions": 341, "deletions": 33}, "files": [{"sha": "9facce84994c6de803d373c2a00d88c30632eb39", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516231de7317bbaf0f83a27047924bb690a217e5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516231de7317bbaf0f83a27047924bb690a217e5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=516231de7317bbaf0f83a27047924bb690a217e5", "patch": "@@ -1,5 +1,17 @@\n 2017-03-16  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* src/c++11/codecvt.cc (codecvt<char16_t, char, mbstate_t>)\n+\t(codecvt<char32_t, char, mbstate_t>, __codecvt_utf8_base<char16_t>)\n+\t(__codecvt_utf8_base<char32_t>, __codecvt_utf8_base<wchar_t>)\n+\t(__codecvt_utf16_base<char16_t>, __codecvt_utf16_base<char32_t>)\n+\t(__codecvt_utf16_base<wchar_t>, __codecvt_utf8_utf16_base<char16_t>)\n+\t(__codecvt_utf8_utf16_base<char32_t>)\n+\t(__codecvt_utf8_utf16_base<wchar_t>): Fix do_encoding() and\n+\tdo_max_length() return values.\n+\t* testsuite/22_locale/codecvt/codecvt_utf16/members.cc: New test.\n+\t* testsuite/22_locale/codecvt/codecvt_utf8/members.cc: New test.\n+\t* testsuite/22_locale/codecvt/codecvt_utf8_utf16/members.cc: New test.\n+\n \tPR libstdc++/79980\n \t* include/bits/locale_conv.h (__do_str_codecvt): Set __count on\n \terror path."}, {"sha": "9c917257567d307dd221cbdf91c533fb96f9fd65", "filename": "libstdc++-v3/src/c++11/codecvt.cc", "status": "modified", "additions": 90, "deletions": 32, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516231de7317bbaf0f83a27047924bb690a217e5/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516231de7317bbaf0f83a27047924bb690a217e5/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc?ref=516231de7317bbaf0f83a27047924bb690a217e5", "patch": "@@ -72,8 +72,8 @@ namespace\n \n   // Multibyte sequences can have \"header\" consisting of Byte Order Mark\n   const unsigned char utf8_bom[3] = { 0xEF, 0xBB, 0xBF };\n-  const unsigned char utf16_bom[4] = { 0xFE, 0xFF };\n-  const unsigned char utf16le_bom[4] = { 0xFF, 0xFE };\n+  const unsigned char utf16_bom[2] = { 0xFE, 0xFF };\n+  const unsigned char utf16le_bom[2] = { 0xFF, 0xFE };\n \n   template<size_t N>\n     inline bool\n@@ -695,7 +695,7 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n \n int\n codecvt<char16_t, char, mbstate_t>::do_encoding() const throw()\n-{ return 0; }\n+{ return 0; } // UTF-8 is not a fixed-width encoding\n \n bool\n codecvt<char16_t, char, mbstate_t>::do_always_noconv() const throw()\n@@ -713,9 +713,9 @@ do_length(state_type&, const extern_type* __from,\n int\n codecvt<char16_t, char, mbstate_t>::do_max_length() const throw()\n {\n-  // Any valid UTF-8 sequence of 3 bytes fits in a single 16-bit code unit,\n-  // whereas 4 byte sequences require two 16-bit code units.\n-  return 3;\n+  // A single character (one or two UTF-16 code units) requires\n+  // up to four UTF-8 code units.\n+  return 4;\n }\n \n // Define members of codecvt<char32_t, char, mbstate_t> specialization.\n@@ -766,7 +766,7 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n \n int\n codecvt<char32_t, char, mbstate_t>::do_encoding() const throw()\n-{ return 0; }\n+{ return 0; } // UTF-8 is not a fixed-width encoding\n \n bool\n codecvt<char32_t, char, mbstate_t>::do_always_noconv() const throw()\n@@ -783,7 +783,11 @@ do_length(state_type&, const extern_type* __from,\n \n int\n codecvt<char32_t, char, mbstate_t>::do_max_length() const throw()\n-{ return 4; }\n+{\n+  // A single character (one UTF-32 code unit) requires\n+  // up to 4 UTF-8 code units.\n+  return 4;\n+}\n \n // Define members of codecvt_utf8<char16_t> base class implementation.\n // Converts from UTF-8 to UCS-2.\n@@ -835,7 +839,7 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n \n int\n __codecvt_utf8_base<char16_t>::do_encoding() const throw()\n-{ return 0; }\n+{ return 0; } // UTF-8 is not a fixed-width encoding\n \n bool\n __codecvt_utf8_base<char16_t>::do_always_noconv() const throw()\n@@ -852,7 +856,14 @@ do_length(state_type&, const extern_type* __from,\n \n int\n __codecvt_utf8_base<char16_t>::do_max_length() const throw()\n-{ return 3; }\n+{\n+  // A single UCS-2 character requires up to three UTF-8 code units.\n+  // (UCS-2 cannot represent characters that use four UTF-8 code units).\n+  int max = 3;\n+  if (_M_mode & consume_header)\n+    max += sizeof(utf8_bom);\n+  return max;\n+}\n \n // Define members of codecvt_utf8<char32_t> base class implementation.\n // Converts from UTF-8 to UTF-32 (aka UCS-4).\n@@ -900,7 +911,7 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n \n int\n __codecvt_utf8_base<char32_t>::do_encoding() const throw()\n-{ return 0; }\n+{ return 0; } // UTF-8 is not a fixed-width encoding\n \n bool\n __codecvt_utf8_base<char32_t>::do_always_noconv() const throw()\n@@ -917,7 +928,13 @@ do_length(state_type&, const extern_type* __from,\n \n int\n __codecvt_utf8_base<char32_t>::do_max_length() const throw()\n-{ return 4; }\n+{\n+  // A single UCS-4 character requires up to four UTF-8 code units.\n+  int max = 4;\n+  if (_M_mode & consume_header)\n+    max += sizeof(utf8_bom);\n+  return max;\n+}\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n // Define members of codecvt_utf8<wchar_t> base class implementation.\n@@ -992,7 +1009,7 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n \n int\n __codecvt_utf8_base<wchar_t>::do_encoding() const throw()\n-{ return 0; }\n+{ return 0; } // UTF-8 is not a fixed-width encoding\n \n bool\n __codecvt_utf8_base<wchar_t>::do_always_noconv() const throw()\n@@ -1015,7 +1032,16 @@ do_length(state_type&, const extern_type* __from,\n \n int\n __codecvt_utf8_base<wchar_t>::do_max_length() const throw()\n-{ return 4; }\n+{\n+#if __SIZEOF_WCHAR_T__ == 2\n+  int max = 3; // See __codecvt_utf8_base<char16_t>::do_max_length()\n+#else\n+  int max = 4; // See __codecvt_utf8_base<char32_t>::do_max_length()\n+#endif\n+  if (_M_mode & consume_header)\n+    max += sizeof(utf8_bom);\n+  return max;\n+}\n #endif\n \n // Define members of codecvt_utf16<char16_t> base class implementation.\n@@ -1070,7 +1096,7 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n \n int\n __codecvt_utf16_base<char16_t>::do_encoding() const throw()\n-{ return 1; }\n+{ return 0; } // UTF-16 is not a fixed-width encoding\n \n bool\n __codecvt_utf16_base<char16_t>::do_always_noconv() const throw()\n@@ -1089,7 +1115,14 @@ do_length(state_type&, const extern_type* __from,\n \n int\n __codecvt_utf16_base<char16_t>::do_max_length() const throw()\n-{ return 3; }\n+{\n+  // A single UCS-2 character requires one UTF-16 code unit (so two chars).\n+  // (UCS-2 cannot represent characters that use multiple UTF-16 code units).\n+  int max = 2;\n+  if (_M_mode & consume_header)\n+    max += sizeof(utf16_bom);\n+  return max;\n+}\n \n // Define members of codecvt_utf16<char32_t> base class implementation.\n // Converts from UTF-16 to UTF-32 (aka UCS-4).\n@@ -1143,7 +1176,7 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n \n int\n __codecvt_utf16_base<char32_t>::do_encoding() const throw()\n-{ return 0; }\n+{ return 0; } // UTF-16 is not a fixed-width encoding\n \n bool\n __codecvt_utf16_base<char32_t>::do_always_noconv() const throw()\n@@ -1162,7 +1195,14 @@ do_length(state_type&, const extern_type* __from,\n \n int\n __codecvt_utf16_base<char32_t>::do_max_length() const throw()\n-{ return 4; }\n+{\n+  // A single UCS-4 character requires one or two UTF-16 code units\n+  // (so up to four chars).\n+  int max = 4;\n+  if (_M_mode & consume_header)\n+    max += sizeof(utf16_bom);\n+  return max;\n+}\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n // Define members of codecvt_utf16<wchar_t> base class implementation.\n@@ -1237,7 +1277,7 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n \n int\n __codecvt_utf16_base<wchar_t>::do_encoding() const throw()\n-{ return 0; }\n+{ return 0; } // UTF-16 is not a fixed-width encoding\n \n bool\n __codecvt_utf16_base<wchar_t>::do_always_noconv() const throw()\n@@ -1261,7 +1301,16 @@ do_length(state_type&, const extern_type* __from,\n \n int\n __codecvt_utf16_base<wchar_t>::do_max_length() const throw()\n-{ return 4; }\n+{\n+#if __SIZEOF_WCHAR_T__ == 2\n+  int max = 2; // See __codecvt_utf16_base<char16_t>::do_max_length()\n+#else\n+  int max = 4; // See __codecvt_utf16_base<char32_t>::do_max_length()\n+#endif\n+  if (_M_mode & consume_header)\n+    max += sizeof(utf16_bom);\n+  return max;\n+}\n #endif\n \n // Define members of codecvt_utf8_utf16<char16_t> base class implementation.\n@@ -1314,7 +1363,7 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n \n int\n __codecvt_utf8_utf16_base<char16_t>::do_encoding() const throw()\n-{ return 0; }\n+{ return 0; } // UTF-8 is not a fixed-width encoding\n \n bool\n __codecvt_utf8_utf16_base<char16_t>::do_always_noconv() const throw()\n@@ -1332,9 +1381,12 @@ do_length(state_type&, const extern_type* __from,\n int\n __codecvt_utf8_utf16_base<char16_t>::do_max_length() const throw()\n {\n-  // Any valid UTF-8 sequence of 3 bytes fits in a single 16-bit code unit,\n-  // whereas 4 byte sequences require two 16-bit code units.\n-  return 3;\n+  // A single character can be 1 or 2 UTF-16 code units,\n+  // requiring up to 4 UTF-8 code units.\n+  int max = 4;\n+  if (_M_mode & consume_header)\n+    max += sizeof(utf8_bom);\n+  return max;\n }\n \n // Define members of codecvt_utf8_utf16<char32_t> base class implementation.\n@@ -1387,7 +1439,7 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n \n int\n __codecvt_utf8_utf16_base<char32_t>::do_encoding() const throw()\n-{ return 0; }\n+{ return 0; } // UTF-8 is not a fixed-width encoding\n \n bool\n __codecvt_utf8_utf16_base<char32_t>::do_always_noconv() const throw()\n@@ -1405,9 +1457,12 @@ do_length(state_type&, const extern_type* __from,\n int\n __codecvt_utf8_utf16_base<char32_t>::do_max_length() const throw()\n {\n-  // Any valid UTF-8 sequence of 3 bytes fits in a single 16-bit code unit,\n-  // whereas 4 byte sequences require two 16-bit code units.\n-  return 3;\n+  // A single character can be 1 or 2 UTF-16 code units,\n+  // requiring up to 4 UTF-8 code units.\n+  int max = 4;\n+  if (_M_mode & consume_header)\n+    max += sizeof(utf8_bom);\n+  return max;\n }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n@@ -1461,7 +1516,7 @@ do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n \n int\n __codecvt_utf8_utf16_base<wchar_t>::do_encoding() const throw()\n-{ return 0; }\n+{ return 0; } // UTF-8 is not a fixed-width encoding\n \n bool\n __codecvt_utf8_utf16_base<wchar_t>::do_always_noconv() const throw()\n@@ -1479,9 +1534,12 @@ do_length(state_type&, const extern_type* __from,\n int\n __codecvt_utf8_utf16_base<wchar_t>::do_max_length() const throw()\n {\n-  // Any valid UTF-8 sequence of 3 bytes fits in a single 16-bit code unit,\n-  // whereas 4 byte sequences require two 16-bit code units.\n-  return 3;\n+  // A single character can be 1 or 2 UTF-16 code units,\n+  // requiring up to 4 UTF-8 code units.\n+  int max = 4;\n+  if (_M_mode & consume_header)\n+    max += sizeof(utf8_bom);\n+  return max;\n }\n #endif\n "}, {"sha": "3288e77c5141e4339183eb29bfb33489d4155d10", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/char16_t.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516231de7317bbaf0f83a27047924bb690a217e5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar16_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516231de7317bbaf0f83a27047924bb690a217e5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar16_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar16_t.cc?ref=516231de7317bbaf0f83a27047924bb690a217e5", "patch": "@@ -34,7 +34,7 @@ test01()\n   const codecvt_c16* const cvt = &use_facet<codecvt_c16>(loc_c);\n \n   VERIFY(!cvt->always_noconv());\n-  VERIFY(cvt->max_length() == 3);\n+  VERIFY(cvt->max_length() == 4);\n   VERIFY(cvt->encoding() == 0);\n \n   const char u8dat[] = u8\"H\\U000000E4ll\\U000000F6 \\U0001F63F \\U000056FD \""}, {"sha": "993c86082c1758782610992bfba2dabed1c55641", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/codecvt_utf16/members.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516231de7317bbaf0f83a27047924bb690a217e5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf16%2Fmembers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516231de7317bbaf0f83a27047924bb690a217e5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf16%2Fmembers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf16%2Fmembers.cc?ref=516231de7317bbaf0f83a27047924bb690a217e5", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <codecvt>\n+#include <testsuite_hooks.h>\n+\n+const int bomlen = 2; // UTF-16 BOM is 16 bits\n+\n+void\n+test01()\n+{\n+  const int maxlen = 2;\n+\n+  std::codecvt_utf16<char16_t> c;\n+  VERIFY( c.always_noconv() == false );\n+  VERIFY( c.encoding() == 0 );\n+  VERIFY( c.max_length() == maxlen );\n+\n+  std::codecvt_utf16<char16_t, 0x10ffff, std::consume_header> c_bom;\n+  VERIFY( c_bom.always_noconv() == false );\n+  VERIFY( c_bom.encoding() == 0 );\n+  VERIFY( c_bom.max_length() == (maxlen + bomlen) );\n+}\n+\n+void\n+test02()\n+{\n+  const int maxlen = 4;\n+\n+  std::codecvt_utf16<char32_t> c;\n+  VERIFY( c.always_noconv() == false );\n+  VERIFY( c.encoding() == 0 );\n+  VERIFY( c.max_length() == maxlen );\n+\n+  std::codecvt_utf16<char32_t, 0x10ffff, std::consume_header> c_bom;\n+  VERIFY( c_bom.always_noconv() == false );\n+  VERIFY( c_bom.encoding() == 0 );\n+  VERIFY( c_bom.max_length() == (maxlen + bomlen) );\n+}\n+\n+void\n+test03()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  const int maxlen = sizeof(wchar_t) == 4 ? 4 : 2;\n+\n+  std::codecvt_utf16<wchar_t> c;\n+  VERIFY( c.always_noconv() == false );\n+  VERIFY( c.encoding() == 0 );\n+  VERIFY( c.max_length() == maxlen );\n+\n+  std::codecvt_utf16<wchar_t, 0x10ffff, std::consume_header> c_bom;\n+  VERIFY( c_bom.always_noconv() == false );\n+  VERIFY( c_bom.encoding() == 0 );\n+  VERIFY( c_bom.max_length() == (maxlen + bomlen) );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "baeb049861a12765cc04c96fd07541553b57ff78", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/codecvt_utf8/members.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516231de7317bbaf0f83a27047924bb690a217e5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8%2Fmembers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516231de7317bbaf0f83a27047924bb690a217e5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8%2Fmembers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8%2Fmembers.cc?ref=516231de7317bbaf0f83a27047924bb690a217e5", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <codecvt>\n+#include <testsuite_hooks.h>\n+\n+const int bomlen = 3; // UTF-8 BOM is 24 bits\n+\n+void\n+test01()\n+{\n+  const int maxlen = 3;\n+\n+  std::codecvt_utf8<char16_t> c;\n+  VERIFY( c.always_noconv() == false );\n+  VERIFY( c.encoding() == 0 );\n+  VERIFY( c.max_length() == maxlen );\n+\n+  std::codecvt_utf8<char16_t, 0x10ffff, std::consume_header> c_bom;\n+  VERIFY( c_bom.always_noconv() == false );\n+  VERIFY( c_bom.encoding() == 0 );\n+  VERIFY( c_bom.max_length() == (maxlen + bomlen) );\n+}\n+\n+void\n+test02()\n+{\n+  const int maxlen = 4;\n+\n+  std::codecvt_utf8<char32_t> c;\n+  VERIFY( c.always_noconv() == false );\n+  VERIFY( c.encoding() == 0 );\n+  VERIFY( c.max_length() == maxlen );\n+\n+  std::codecvt_utf8<char32_t, 0x10ffff, std::consume_header> c_bom;\n+  VERIFY( c_bom.always_noconv() == false );\n+  VERIFY( c_bom.encoding() == 0 );\n+  VERIFY( c_bom.max_length() == (maxlen + bomlen) );\n+}\n+\n+void\n+test03()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  const int maxlen = sizeof(wchar_t) == 4 ? 4 : 3;\n+\n+  std::codecvt_utf8<wchar_t> c;\n+  VERIFY( c.always_noconv() == false );\n+  VERIFY( c.encoding() == 0 );\n+  VERIFY( c.max_length() == maxlen );\n+\n+  std::codecvt_utf8<wchar_t, 0x10ffff, std::consume_header> c_bom;\n+  VERIFY( c_bom.always_noconv() == false );\n+  VERIFY( c_bom.encoding() == 0 );\n+  VERIFY( c_bom.max_length() == (maxlen + bomlen) );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "8fcdfff2cc1a16e835c1985e780a5dd340805e8a", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/codecvt_utf8_utf16/members.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516231de7317bbaf0f83a27047924bb690a217e5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8_utf16%2Fmembers.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516231de7317bbaf0f83a27047924bb690a217e5/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8_utf16%2Fmembers.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8_utf16%2Fmembers.cc?ref=516231de7317bbaf0f83a27047924bb690a217e5", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <codecvt>\n+#include <testsuite_hooks.h>\n+\n+const int bomlen = 3; // UTF-8 BOM is 24 bits\n+const int maxlen = 4;\n+\n+void\n+test01()\n+{\n+  std::codecvt_utf8_utf16<char16_t> c;\n+  VERIFY( c.always_noconv() == false );\n+  VERIFY( c.encoding() == 0 );\n+  VERIFY( c.max_length() == maxlen );\n+\n+  std::codecvt_utf8_utf16<char16_t, 0x10ffff, std::consume_header> c_bom;\n+  VERIFY( c_bom.always_noconv() == false );\n+  VERIFY( c_bom.encoding() == 0 );\n+  VERIFY( c_bom.max_length() == (maxlen + bomlen) );\n+}\n+\n+void\n+test02()\n+{\n+  std::codecvt_utf8_utf16<char32_t> c;\n+  VERIFY( c.always_noconv() == false );\n+  VERIFY( c.encoding() == 0 );\n+  VERIFY( c.max_length() == maxlen );\n+\n+  std::codecvt_utf8_utf16<char32_t, 0x10ffff, std::consume_header> c_bom;\n+  VERIFY( c_bom.always_noconv() == false );\n+  VERIFY( c_bom.encoding() == 0 );\n+  VERIFY( c_bom.max_length() == (maxlen + bomlen) );\n+}\n+\n+void\n+test03()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::codecvt_utf8_utf16<wchar_t> c;\n+  VERIFY( c.always_noconv() == false );\n+  VERIFY( c.encoding() == 0 );\n+  VERIFY( c.max_length() == maxlen );\n+\n+  std::codecvt_utf8_utf16<wchar_t, 0x10ffff, std::consume_header> c_bom;\n+  VERIFY( c_bom.always_noconv() == false );\n+  VERIFY( c_bom.encoding() == 0 );\n+  VERIFY( c_bom.max_length() == (maxlen + bomlen) );\n+#endif\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}