{"sha": "73fef4fe212796b459163b093386128128994217", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNmZWY0ZmUyMTI3OTZiNDU5MTYzYjA5MzM4NjEyODEyODk5NDIxNw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-20T02:31:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-01-20T02:31:33Z"}, "message": "(SETUP_INCOMING_VARARGS): Delete duplicate definition.\n\nFrom-SVN: r13536", "tree": {"sha": "a44631fe77a37f872f0c0550675d41623a588ae8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a44631fe77a37f872f0c0550675d41623a588ae8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73fef4fe212796b459163b093386128128994217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73fef4fe212796b459163b093386128128994217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73fef4fe212796b459163b093386128128994217", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73fef4fe212796b459163b093386128128994217/comments", "author": null, "committer": null, "parents": [{"sha": "9b80d951cacd1559a095f45cf1ccea58ec12dd26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b80d951cacd1559a095f45cf1ccea58ec12dd26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b80d951cacd1559a095f45cf1ccea58ec12dd26"}], "stats": {"total": 99, "additions": 32, "deletions": 67}, "files": [{"sha": "ab762ca2770a7fc5a96629175c3053846a3f779c", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 32, "deletions": 67, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73fef4fe212796b459163b093386128128994217/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73fef4fe212796b459163b093386128128994217/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=73fef4fe212796b459163b093386128128994217", "patch": "@@ -155,39 +155,40 @@ do {\t\t\t\t\t\t\t\t\\\n \t  = vmskrunch (XSTR (XEXP (DECL_RTL (DECL), 0), 0));\t\\\n } while (0)\n \n-/* Don't use BLKmode if VAX floats are used.  */\n+/* Perform any needed actions needed for a function that is receiving a\n+   variable number of arguments. \n+\n+   CUM is as for INIT_CUMULATIVE_ARGS.\n+\n+   MODE and TYPE are the mode and type of the current parameter.\n+\n+   PRETEND_SIZE is a variable that should be set to the amount of stack\n+   that must be pushed by the prolog to pretend that our caller pushed\n+   it.\n+\n+   Normally, this macro will push all remaining incoming registers on the\n+   stack and set PRETEND_SIZE to the length of the registers pushed. \n+\n+   For VMS, we allocate space for all 6 arg registers plus a count.\n+\n+   However, if NO registers need to be saved, don't allocate any space.\n+   This is not only because we won't need the space, but because AP includes\n+   the current_pretend_args_size and we don't want to mess up any\n+   ap-relative addresses already made.   */\n+\n #undef SETUP_INCOMING_VARARGS\n #define SETUP_INCOMING_VARARGS(CUM,MODE,TYPE,PRETEND_SIZE,NO_RTL)\t\\\n-{ if ((CUM & 0xff) < 6)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (! (NO_RTL))\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  move_block_from_reg\t\t\t\t\t\t\\\n-\t    (16 + (CUM & 0xff),\t\t\t\t\t\t\\\n-\t     gen_rtx (MEM, BLKmode,\t\t\t\t\t\\\n-\t\t      plus_constant (virtual_incoming_args_rtx,\t\t\\\n-\t\t\t\t     ((CUM & 0xff) + 6)* UNITS_PER_WORD)),\\\n-\t     6 - (CUM & 0xff), (6 - (CUM & 0xff)) * UNITS_PER_WORD);\t\\\n-\t  if (!TARGET_FLOAT_VAX || !TARGET_FPREGS)\t\t\t\\\n-\t    move_block_from_reg\t\t\t\t\t\t\\\n-\t      (16 + (TARGET_FPREGS ? 32 : 0) + (CUM & 0xff),\t\t\\\n-\t\tgen_rtx (MEM, BLKmode,\t\t\t\t\t\\\n-\t\t\t plus_constant (virtual_incoming_args_rtx,\t\\\n-\t\t\t\t\t(CUM & 0xff) * UNITS_PER_WORD)),\\\n-\t\t6 - (CUM & 0xff), (6 - (CUM & 0xff)) * UNITS_PER_WORD);\t\\\n-\t  else\t\t\t\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      int i;\t\t\t\t\t\t\t\\\n-\t      for (i = (CUM & 0xff); i < 6; i++)\t\t\t\\\n-\t\temit_move_insn (\t\t\t\t\t\\\n-\t\t  gen_rtx (MEM, DFmode,\t\t\t\t\t\\\n-\t\t    plus_constant (virtual_incoming_args_rtx,\t\t\\\n-\t\t\t\t   i * UNITS_PER_WORD)),\t\t\\\n-\t\t  gen_rtx (REG, DFmode, 48+i));\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-\t }\t\t\t\t\t\t\t\t\\\n-      PRETEND_SIZE = 12 * UNITS_PER_WORD;\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+{ if ((CUM) < 6)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      if (! (NO_RTL))\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\\\n+\t  emit_move_insn (gen_rtx (REG, DImode, 1),\t\\\n+\t\t\t  virtual_incoming_args_rtx);\t\\\n+\t  emit_insn (gen_arg_home ());\t\t\t\\\n+\t}\t\t\t\t\t\t\\\n+\t\t\t\t\t\t        \\\n+      PRETEND_SIZE = 7 * UNITS_PER_WORD;\t\t\\\n+    }\t\t\t\t\t\t\t\\\n }\n \n #undef ASM_DECLARE_FUNCTION_NAME\n@@ -277,42 +278,6 @@ void *function_arg ();\n { ASM_OUTPUT_ALIGN (FILE, 3); ASM_OUTPUT_INTERNAL_LABEL (FILE, PREFIX, NUM); }\n \n #define NO_MD_PROTOTYPES\n-/* Perform any needed actions needed for a function that is receiving a\n-   variable number of arguments. \n-\n-   CUM is as above.\n-\n-   MODE and TYPE are the mode and type of the current parameter.\n-\n-   PRETEND_SIZE is a variable that should be set to the amount of stack\n-   that must be pushed by the prolog to pretend that our caller pushed\n-   it.\n-\n-   Normally, this macro will push all remaining incoming registers on the\n-   stack and set PRETEND_SIZE to the length of the registers pushed. \n-\n-   For VMS, we allocate space for all 6 arg registers plus a count.\n-\n-   However, if NO registers need to be saved, don't allocate any space.\n-   This is not only because we won't need the space, but because AP includes\n-   the current_pretend_args_size and we don't want to mess up any\n-   ap-relative addresses already made.   */\n-   \n-\n-#undef SETUP_INCOMING_VARARGS\n-#define SETUP_INCOMING_VARARGS(CUM,MODE,TYPE,PRETEND_SIZE,NO_RTL)\t\\\n-{ if ((CUM) < 6)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      if (! (NO_RTL))\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  emit_move_insn (gen_rtx (REG, DImode, 1),\t\\\n-\t\t\t  virtual_incoming_args_rtx);\t\\\n-\t  emit_insn (gen_arg_home ());\t\t\t\\\n-\t}\t\t\t\t\t\t\\\n-\t\t\t\t\t\t        \\\n-      PRETEND_SIZE = 7 * UNITS_PER_WORD;\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-}\n \f\n /* Output assembler code for a block containing the constant parts\n    of a trampoline, leaving space for the variable parts."}]}