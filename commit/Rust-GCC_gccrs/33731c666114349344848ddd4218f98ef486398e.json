{"sha": "33731c666114349344848ddd4218f98ef486398e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM3MzFjNjY2MTE0MzQ5MzQ0ODQ4ZGRkNDIxOGY5OGVmNDg2Mzk4ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-01-27T18:05:59Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-01-27T18:05:59Z"}, "message": "decl.c (array_type_has_nonaliased_component): Return the same value for every dimension of a multidimensional array type.\n\n\t* gcc-interface/decl.c (array_type_has_nonaliased_component): Return\n\tthe same value for every dimension of a multidimensional array type.\n\nFrom-SVN: r268314", "tree": {"sha": "281d1c868cfdf5263d1e9097f609eb1abe8ad4e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/281d1c868cfdf5263d1e9097f609eb1abe8ad4e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33731c666114349344848ddd4218f98ef486398e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33731c666114349344848ddd4218f98ef486398e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33731c666114349344848ddd4218f98ef486398e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33731c666114349344848ddd4218f98ef486398e/comments", "author": null, "committer": null, "parents": [{"sha": "b253f94d4f7639adea7469fb7a8481cb05f8d960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b253f94d4f7639adea7469fb7a8481cb05f8d960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b253f94d4f7639adea7469fb7a8481cb05f8d960"}], "stats": {"total": 72, "additions": 63, "deletions": 9}, "files": [{"sha": "4a147775625eecd34ee64058dbe4ef2709abfba6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33731c666114349344848ddd4218f98ef486398e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33731c666114349344848ddd4218f98ef486398e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=33731c666114349344848ddd4218f98ef486398e", "patch": "@@ -1,3 +1,8 @@\n+2019-01-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (array_type_has_nonaliased_component): Return\n+\tthe same value for every dimension of a multidimensional array type.\n+\n 2019-01-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (Regular_Loop_to_gnu): Use the SLOC of the"}, {"sha": "a1cd6949a9d2fa49a4fe8eb50b5f22d00c704530", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33731c666114349344848ddd4218f98ef486398e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33731c666114349344848ddd4218f98ef486398e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=33731c666114349344848ddd4218f98ef486398e", "patch": "@@ -6237,12 +6237,6 @@ same_discriminant_p (Entity_Id discr1, Entity_Id discr2)\n static bool\n array_type_has_nonaliased_component (tree gnu_type, Entity_Id gnat_type)\n {\n-  /* If the array type is not the innermost dimension of the GNAT type,\n-     then it has a non-aliased component.  */\n-  if (TREE_CODE (TREE_TYPE (gnu_type)) == ARRAY_TYPE\n-      && TYPE_MULTI_ARRAY_P (TREE_TYPE (gnu_type)))\n-    return true;\n-\n   /* If the array type has an aliased component in the front-end sense,\n      then it also has an aliased component in the back-end sense.  */\n   if (Has_Aliased_Components (gnat_type))\n@@ -6253,15 +6247,17 @@ array_type_has_nonaliased_component (tree gnu_type, Entity_Id gnat_type)\n   if (Is_Derived_Type (gnat_type))\n     {\n       tree gnu_parent_type = gnat_to_gnu_type (Etype (gnat_type));\n-      int index;\n       if (TREE_CODE (gnu_parent_type) == UNCONSTRAINED_ARRAY_TYPE)\n \tgnu_parent_type\n \t  = TREE_TYPE (TREE_TYPE (TYPE_FIELDS (TREE_TYPE (gnu_parent_type))));\n-      for (index = Number_Dimensions (gnat_type) - 1; index > 0; index--)\n-\tgnu_parent_type = TREE_TYPE (gnu_parent_type);\n       return TYPE_NONALIASED_COMPONENT (gnu_parent_type);\n     }\n \n+  /* For a multi-dimensional array type, find the component type.  */\n+  while (TREE_CODE (TREE_TYPE (gnu_type)) == ARRAY_TYPE\n+\t && TYPE_MULTI_ARRAY_P (TREE_TYPE (gnu_type)))\n+    gnu_type = TREE_TYPE (gnu_type);\n+\n   /* Consider that an array of pointers has an aliased component, which is\n      sort of logical and helps with Taft Amendment types in LTO mode.  */\n   if (POINTER_TYPE_P (TREE_TYPE (gnu_type)))"}, {"sha": "e4d6a1ed4363306e40457a5b917f65154c86ec22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33731c666114349344848ddd4218f98ef486398e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33731c666114349344848ddd4218f98ef486398e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=33731c666114349344848ddd4218f98ef486398e", "patch": "@@ -1,3 +1,8 @@\n+2019-01-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt75.adb: New test.\n+\t* gnat.dg/opt75_pkg.ad[sb]: New helper.\n+\n 2019-01-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/87214"}, {"sha": "080a5183f2352e7f411d7be8e40847cf34d331c3", "filename": "gcc/testsuite/gnat.dg/opt75.adb", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33731c666114349344848ddd4218f98ef486398e/gcc%2Ftestsuite%2Fgnat.dg%2Fopt75.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33731c666114349344848ddd4218f98ef486398e/gcc%2Ftestsuite%2Fgnat.dg%2Fopt75.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt75.adb?ref=33731c666114349344848ddd4218f98ef486398e", "patch": "@@ -0,0 +1,9 @@\n+-- { dg-do run }\n+-- { dg-options \"-O3\" }\n+\n+with Opt75_Pkg; use Opt75_Pkg;\n+\n+procedure Opt75 is\n+begin\n+  null;\n+end;"}, {"sha": "4424e70ec8d4a186ff16a44c5c467b4ba76e57e1", "filename": "gcc/testsuite/gnat.dg/opt75_pkg.adb", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33731c666114349344848ddd4218f98ef486398e/gcc%2Ftestsuite%2Fgnat.dg%2Fopt75_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33731c666114349344848ddd4218f98ef486398e/gcc%2Ftestsuite%2Fgnat.dg%2Fopt75_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt75_pkg.adb?ref=33731c666114349344848ddd4218f98ef486398e", "patch": "@@ -0,0 +1,12 @@\n+package body Opt75_Pkg is\n+\n+  overriding procedure Adjust (Object : in out T) is\n+  begin\n+    if Object.Ref /= Empty_Rec'Access then\n+      System.Atomic_Counters.Increment (Object.Ref.Counter);\n+    end if;\n+  end;\n+\n+  A : constant Arr := (others => (others => Empty));\n+\n+end Opt75_Pkg;"}, {"sha": "4fae165e77f7be683c5a3ff29cc16382e538f4dc", "filename": "gcc/testsuite/gnat.dg/opt75_pkg.ads", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33731c666114349344848ddd4218f98ef486398e/gcc%2Ftestsuite%2Fgnat.dg%2Fopt75_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33731c666114349344848ddd4218f98ef486398e/gcc%2Ftestsuite%2Fgnat.dg%2Fopt75_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt75_pkg.ads?ref=33731c666114349344848ddd4218f98ef486398e", "patch": "@@ -0,0 +1,27 @@\n+pragma Restrictions (No_Abort_Statements);\n+pragma Restrictions (Max_Asynchronous_Select_Nesting => 0);\n+\n+with Ada.Finalization;\n+with System.Atomic_Counters;\n+\n+package Opt75_Pkg is\n+\n+  type Rec is record\n+    Counter : System.Atomic_Counters.Atomic_Counter;\n+  end record;\n+\n+  type Rec_Ptr is access all Rec;\n+\n+  Empty_Rec : aliased Rec;\n+\n+  type T is new Ada.Finalization.Controlled with record\n+    Ref : Rec_Ptr := Empty_Rec'Access;\n+  end record;\n+\n+  overriding procedure Adjust (Object : in out T);\n+\n+  Empty : constant T := (Ada.Finalization.Controlled with Ref => Empty_Rec'Access);\n+\n+  type Arr is array (Integer range 1 .. 8, Integer range 1 .. 4) of T;\n+\n+end Opt75_Pkg;"}]}