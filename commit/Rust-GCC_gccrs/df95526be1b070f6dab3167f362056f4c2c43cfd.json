{"sha": "df95526be1b070f6dab3167f362056f4c2c43cfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY5NTUyNmJlMWIwNzBmNmRhYjMxNjdmMzYyMDU2ZjRjMmM0M2NmZA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2004-11-09T04:21:49Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2004-11-09T04:21:49Z"}, "message": "cfg.c (redirect_edge_succ_nodup): Use find_edge rather than implementing it inline.\n\n        * cfg.c (redirect_edge_succ_nodup): Use find_edge rather than\n        implementing it inline.\n\n        * cfganal.c (find_edge): Search pred->succs or succ->preds,\n        whichever is shorter.\n\nFrom-SVN: r90333", "tree": {"sha": "06652f7acaf9367a0888955e343219ae2cf9e5d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06652f7acaf9367a0888955e343219ae2cf9e5d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df95526be1b070f6dab3167f362056f4c2c43cfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df95526be1b070f6dab3167f362056f4c2c43cfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df95526be1b070f6dab3167f362056f4c2c43cfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df95526be1b070f6dab3167f362056f4c2c43cfd/comments", "author": null, "committer": null, "parents": [{"sha": "68e4debe62c4404b0b5fdebf592c2b36bf52949d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e4debe62c4404b0b5fdebf592c2b36bf52949d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e4debe62c4404b0b5fdebf592c2b36bf52949d"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "6af64c641ab524fd24445e1ad70282ecadd1414e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df95526be1b070f6dab3167f362056f4c2c43cfd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df95526be1b070f6dab3167f362056f4c2c43cfd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df95526be1b070f6dab3167f362056f4c2c43cfd", "patch": "@@ -1,3 +1,11 @@\n+2004-11-08 Jeff Law  <law@redhat.com>\n+\n+\t* cfg.c (redirect_edge_succ_nodup): Use find_edge rather than\n+\timplementing it inline.\n+\n+\t* cfganal.c (find_edge): Search pred->succs or succ->preds,\n+\twhichever is shorter.\n+\n 2004-11-08  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* passes.c (rest_of_handle_jump): Remove dead code."}, {"sha": "b3da1429b1dbd748118e34dc5a38582473ed1509", "filename": "gcc/cfg.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df95526be1b070f6dab3167f362056f4c2c43cfd/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df95526be1b070f6dab3167f362056f4c2c43cfd/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=df95526be1b070f6dab3167f362056f4c2c43cfd", "patch": "@@ -428,14 +428,9 @@ edge\n redirect_edge_succ_nodup (edge e, basic_block new_succ)\n {\n   edge s;\n-  edge_iterator ei;\n-\n-  /* Check whether the edge is already present.  */\n-  FOR_EACH_EDGE (s, ei, e->src->succs)\n-    if (s->dest == new_succ && s != e)\n-      break;\n \n-  if (s)\n+  s = find_edge (e->src, new_succ);\n+  if (s && s != e)\n     {\n       s->flags |= e->flags;\n       s->probability += e->probability;"}, {"sha": "06c71f678c6dc816629c52db70e141a9e084283a", "filename": "gcc/cfganal.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df95526be1b070f6dab3167f362056f4c2c43cfd/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df95526be1b070f6dab3167f362056f4c2c43cfd/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=df95526be1b070f6dab3167f362056f4c2c43cfd", "patch": "@@ -478,9 +478,18 @@ find_edge (basic_block pred, basic_block succ)\n   edge e;\n   edge_iterator ei;\n \n-  FOR_EACH_EDGE (e, ei, pred->succs)\n-    if (e->dest == succ)\n-      return e;\n+  if (EDGE_COUNT (pred->succs) <= EDGE_COUNT (succ->preds))\n+    {\n+      FOR_EACH_EDGE (e, ei, pred->succs)\n+\tif (e->dest == succ)\n+\t  return e;\n+    }\n+  else\n+    {\n+      FOR_EACH_EDGE (e, ei, succ->preds)\n+\tif (e->src == pred)\n+\t  return e;\n+    }\n \n   return NULL;\n }"}]}