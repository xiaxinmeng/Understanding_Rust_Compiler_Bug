{"sha": "76ff80fb8bd42fa4c75866b1f952b39c9775c094", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZmZjgwZmI4YmQ0MmZhNGM3NTg2NmIxZjk1MmIzOWM5Nzc1YzA5NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-09-15T12:26:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-09-15T12:26:39Z"}, "message": "re PR middle-end/77475 (unnecessary or misleading context in reporting command line problems)\n\n\tPR middle-end/77475\n\t* config/i386/i386.c (ix86_parse_stringop_strategy_string): Simplify,\n\tuse %qs instead of %s where desirable, use argument instead of arg in\n\tthe diagnostic wording, add list of supported strategies and\n\tspellcheck hint.\n\t(ix86_option_override_internal): Emit target(\"m...\") instead of\n\toption(\"m...\") in the diagnostic.  Use %qs instead of %s in invalid\n\t-march/-mtune option diagnostic.  Add list of supported arches/tunings\n\tand spellcheck hint.  Remove prefix, suffix and sw variables, use\n\tmain_args_p ? \"...\" : \"...\" in diagnostics to make translation\n\tpossible.\n\n\t* gcc.target/i386/pr65990.c: Adjust expected diagnostics.\n\t* gcc.dg/march-generic.c: Likewise.\n\t* gcc.target/i386/spellcheck-options-1.c: New test.\n\t* gcc.target/i386/spellcheck-options-2.c: New test.\n\t* gcc.target/i386/spellcheck-options-3.c: New test.\n\t* gcc.target/i386/spellcheck-options-4.c: New test.\n\nFrom-SVN: r240162", "tree": {"sha": "e11ad0ec7c5a00cf9a5e3f4cde6be892aad7e717", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e11ad0ec7c5a00cf9a5e3f4cde6be892aad7e717"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76ff80fb8bd42fa4c75866b1f952b39c9775c094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76ff80fb8bd42fa4c75866b1f952b39c9775c094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76ff80fb8bd42fa4c75866b1f952b39c9775c094", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76ff80fb8bd42fa4c75866b1f952b39c9775c094/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b75c936018a0931c3b599e624bd15c4fb7c4fe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b75c936018a0931c3b599e624bd15c4fb7c4fe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b75c936018a0931c3b599e624bd15c4fb7c4fe6"}], "stats": {"total": 229, "additions": 175, "deletions": 54}, "files": [{"sha": "26a8f59fad3f817aaea2bed71943f1108fe17fe3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76ff80fb8bd42fa4c75866b1f952b39c9775c094", "patch": "@@ -1,3 +1,17 @@\n+2016-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/77475\n+\t* config/i386/i386.c (ix86_parse_stringop_strategy_string): Simplify,\n+\tuse %qs instead of %s where desirable, use argument instead of arg in\n+\tthe diagnostic wording, add list of supported strategies and\n+\tspellcheck hint.\n+\t(ix86_option_override_internal): Emit target(\"m...\") instead of\n+\toption(\"m...\") in the diagnostic.  Use %qs instead of %s in invalid\n+\t-march/-mtune option diagnostic.  Add list of supported arches/tunings\n+\tand spellcheck hint.  Remove prefix, suffix and sw variables, use\n+\tmain_args_p ? \"...\" : \"...\" in diagnostics to make translation\n+\tpossible.\n+\n 2016-09-15  Richard Biener  <rguenther@suse.de>\n \n \t* dwarf2asm.h (dw2_asm_output_offset): Add overload with"}, {"sha": "60b81bbb8ab47f4a96bbd26dd86f1b8269777f91", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 121, "deletions": 52, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=76ff80fb8bd42fa4c75866b1f952b39c9775c094", "patch": "@@ -4516,6 +4516,7 @@ ix86_parse_stringop_strategy_string (char *strategy_str, bool is_memset)\n   const struct stringop_algs *default_algs;\n   stringop_size_range input_ranges[MAX_STRINGOP_ALGS];\n   char *curr_range_str, *next_range_str;\n+  const char *opt = is_memset ? \"-mmemset_strategy=\" : \"-mmemcpy_strategy=\";\n   int i = 0, n = 0;\n \n   if (is_memset)\n@@ -4537,15 +4538,13 @@ ix86_parse_stringop_strategy_string (char *strategy_str, bool is_memset)\n       if (3 != sscanf (curr_range_str, \"%20[^:]:%d:%10s\",\n                        alg_name, &maxs, align))\n         {\n-          error (\"wrong arg %s to option %s\", curr_range_str,\n-                 is_memset ? \"-mmemset_strategy=\" : \"-mmemcpy_strategy=\");\n+\t  error (\"wrong argument %qs to option %qs\", curr_range_str, opt);\n           return;\n         }\n \n       if (n > 0 && (maxs < (input_ranges[n - 1].max + 1) && maxs != -1))\n         {\n-          error (\"size ranges of option %s should be increasing\",\n-                 is_memset ? \"-mmemset_strategy=\" : \"-mmemcpy_strategy=\");\n+\t  error (\"size ranges of option %qs should be increasing\", opt);\n           return;\n         }\n \n@@ -4555,20 +4554,34 @@ ix86_parse_stringop_strategy_string (char *strategy_str, bool is_memset)\n \n       if (i == last_alg)\n         {\n-          error (\"wrong stringop strategy name %s specified for option %s\",\n-                 alg_name,\n-                 is_memset ? \"-mmemset_strategy=\" : \"-mmemcpy_strategy=\");\n+\t  error (\"wrong strategy name %qs specified for option %qs\",\n+\t\t alg_name, opt);\n+\n+\t  auto_vec <const char *> candidates;\n+\t  for (i = 0; i < last_alg; i++)\n+\t    if ((stringop_alg) i != rep_prefix_8_byte || TARGET_64BIT)\n+\t      candidates.safe_push (stringop_alg_names[i]);\n+\n+\t  char *s;\n+\t  const char *hint\n+\t    = candidates_list_and_hint (alg_name, s, candidates);\n+\t  if (hint)\n+\t    inform (input_location,\n+\t\t    \"valid arguments to %qs are: %s; did you mean %qs?\",\n+\t\t    opt, s, hint);\n+\t  else\n+\t    inform (input_location, \"valid arguments to %qs are: %s\",\n+\t\t    opt, s);\n+\t  XDELETEVEC (s);\n           return;\n         }\n \n       if ((stringop_alg) i == rep_prefix_8_byte\n \t  && !TARGET_64BIT)\n \t{\n \t  /* rep; movq isn't available in 32-bit code.  */\n-\t  error (\"stringop strategy name %s specified for option %s \"\n-\t\t \"not supported for 32-bit code\",\n-                 alg_name,\n-                 is_memset ? \"-mmemset_strategy=\" : \"-mmemcpy_strategy=\");\n+\t  error (\"strategy name %qs specified for option %qs \"\n+\t\t \"not supported for 32-bit code\", alg_name, opt);\n \t  return;\n \t}\n \n@@ -4580,8 +4593,7 @@ ix86_parse_stringop_strategy_string (char *strategy_str, bool is_memset)\n         input_ranges[n].noalign = true;\n       else\n         {\n-          error (\"unknown alignment %s specified for option %s\",\n-                 align, is_memset ? \"-mmemset_strategy=\" : \"-mmemcpy_strategy=\");\n+\t  error (\"unknown alignment %qs specified for option %qs\", align, opt);\n           return;\n         }\n       n++;\n@@ -4592,15 +4604,13 @@ ix86_parse_stringop_strategy_string (char *strategy_str, bool is_memset)\n   if (input_ranges[n - 1].max != -1)\n     {\n       error (\"the max value for the last size range should be -1\"\n-             \" for option %s\",\n-             is_memset ? \"-mmemset_strategy=\" : \"-mmemcpy_strategy=\");\n+             \" for option %qs\", opt);\n       return;\n     }\n \n   if (n > MAX_STRINGOP_ALGS)\n     {\n-      error (\"too many size ranges specified in option %s\",\n-             is_memset ? \"-mmemset_strategy=\" : \"-mmemcpy_strategy=\");\n+      error (\"too many size ranges specified in option %qs\", opt);\n       return;\n     }\n \n@@ -4731,9 +4741,6 @@ ix86_option_override_internal (bool main_args_p,\n   int i;\n   unsigned int ix86_arch_mask;\n   const bool ix86_tune_specified = (opts->x_ix86_tune_string != NULL);\n-  const char *prefix;\n-  const char *suffix;\n-  const char *sw;\n \n #define PTA_3DNOW\t \t(HOST_WIDE_INT_1 << 0)\n #define PTA_3DNOW_A\t \t(HOST_WIDE_INT_1 << 1)\n@@ -5031,21 +5038,6 @@ ix86_option_override_internal (bool main_args_p,\n \n   int const pta_size = ARRAY_SIZE (processor_alias_table);\n \n-  /* Set up prefix/suffix so the error messages refer to either the command\n-     line argument, or the attribute(target).  */\n-  if (main_args_p)\n-    {\n-      prefix = \"-m\";\n-      suffix = \"\";\n-      sw = \"switch\";\n-    }\n-  else\n-    {\n-      prefix = \"option(\\\"\";\n-      suffix = \"\\\")\";\n-      sw = \"attribute\";\n-    }\n-\n   /* Turn off both OPTION_MASK_ABI_64 and OPTION_MASK_ABI_X32 if\n      TARGET_64BIT_DEFAULT is true and TARGET_64BIT is false.  */\n   if (TARGET_64BIT_DEFAULT && !TARGET_64BIT_P (opts->x_ix86_isa_flags))\n@@ -5118,9 +5110,13 @@ ix86_option_override_internal (bool main_args_p,\n \t  opts->x_ix86_tune_string = \"generic\";\n \t}\n       else if (!strcmp (opts->x_ix86_tune_string, \"x86-64\"))\n-        warning (OPT_Wdeprecated, \"%stune=x86-64%s is deprecated; use \"\n-                 \"%stune=k8%s or %stune=generic%s instead as appropriate\",\n-                 prefix, suffix, prefix, suffix, prefix, suffix);\n+        warning (OPT_Wdeprecated,\n+\t\t main_args_p\n+\t\t ? \"%<-mtune=x86-64%> is deprecated; use %<-mtune=k8%> \"\n+\t\t   \"or %<-mtune=generic%> instead as appropriate\"\n+\t\t : \"%<target(\\\"tune=x86-64\\\")%> is deprecated; use \"\n+\t\t   \"%<target(\\\"tune=k8\\\")%> or %<target(\\\"tune=generic\\\")%> \"\n+\t\t   \"instead as appropriate\");\n     }\n   else\n     {\n@@ -5474,14 +5470,48 @@ ix86_option_override_internal (bool main_args_p,\n     error (\"Intel MPX does not support x32\");\n \n   if (!strcmp (opts->x_ix86_arch_string, \"generic\"))\n-    error (\"generic CPU can be used only for %stune=%s %s\",\n-\t   prefix, suffix, sw);\n+    error (main_args_p\n+\t   ? \"%<generic%> CPU can be used only for %<-mtune=%> switch\"\n+\t   : \"%<generic%> CPU can be used only for \"\n+\t     \"%<target(\\\"tune=\\\")%> attribute\");\n   else if (!strcmp (opts->x_ix86_arch_string, \"intel\"))\n-    error (\"intel CPU can be used only for %stune=%s %s\",\n-\t   prefix, suffix, sw);\n+    error (main_args_p\n+\t   ? \"%<intel%> CPU can be used only for %<-mtune=%> switch\"\n+\t   : \"%<intel%> CPU can be used only for \"\n+\t     \"%<target(\\\"tune=\\\")%> attribute\");\n   else if (i == pta_size)\n-    error (\"bad value (%s) for %sarch=%s %s\",\n-\t   opts->x_ix86_arch_string, prefix, suffix, sw);\n+    {\n+      error (main_args_p\n+\t     ? \"bad value (%qs) for %<-march=%> switch\"\n+\t     : \"bad value (%qs) for %<target(\\\"arch=\\\")%> attribute\",\n+\t     opts->x_ix86_arch_string);\n+\n+      auto_vec <const char *> candidates;\n+      for (i = 0; i < pta_size; i++)\n+\tif (strcmp (processor_alias_table[i].name, \"generic\")\n+\t    && strcmp (processor_alias_table[i].name, \"intel\")\n+\t    && (!TARGET_64BIT_P (opts->x_ix86_isa_flags)\n+\t\t|| (processor_alias_table[i].flags & PTA_64BIT)))\n+\t  candidates.safe_push (processor_alias_table[i].name);\n+\n+      char *s;\n+      const char *hint\n+\t= candidates_list_and_hint (opts->x_ix86_arch_string, s, candidates);\n+      if (hint)\n+\tinform (input_location,\n+\t\tmain_args_p\n+\t\t? \"valid arguments to %<-march=%> switch are: \"\n+\t\t  \"%s; did you mean %qs?\"\n+\t\t: \"valid arguments to %<target(\\\"arch=\\\")%> attribute are: \"\n+\t\t  \"%s; did you mean %qs?\", s, hint);\n+      else\n+\tinform (input_location,\n+\t\tmain_args_p\n+\t\t? \"valid arguments to %<-march=%> switch are: %s\"\n+\t\t: \"valid arguments to %<target(\\\"arch=\\\")%> attribute are: %s\",\n+\t\ts);\n+      XDELETEVEC (s);\n+    }\n \n   ix86_arch_mask = 1u << ix86_arch;\n   for (i = 0; i < X86_ARCH_LAST; ++i)\n@@ -5523,8 +5553,36 @@ ix86_option_override_internal (bool main_args_p,\n       }\n \n   if (ix86_tune_specified && i == pta_size)\n-    error (\"bad value (%s) for %stune=%s %s\",\n-\t   opts->x_ix86_tune_string, prefix, suffix, sw);\n+    {\n+      error (main_args_p\n+\t     ? \"bad value (%qs) for %<-mtune=%> switch\"\n+\t     : \"bad value (%qs) for %<target(\\\"tune=\\\")%> attribute\",\n+\t     opts->x_ix86_tune_string);\n+\n+      auto_vec <const char *> candidates;\n+      for (i = 0; i < pta_size; i++)\n+\tif (!TARGET_64BIT_P (opts->x_ix86_isa_flags)\n+\t    || (processor_alias_table[i].flags & PTA_64BIT))\n+\t  candidates.safe_push (processor_alias_table[i].name);\n+\n+      char *s;\n+      const char *hint\n+\t= candidates_list_and_hint (opts->x_ix86_tune_string, s, candidates);\n+      if (hint)\n+\tinform (input_location,\n+\t\tmain_args_p\n+\t\t? \"valid arguments to %<-mtune=%> switch are: \"\n+\t\t  \"%s; did you mean %qs?\"\n+\t\t: \"valid arguments to %<target(\\\"tune=\\\")%> attribute are: \"\n+\t\t  \"%s; did you mean %qs?\", s, hint);\n+      else\n+\tinform (input_location,\n+\t\tmain_args_p\n+\t\t? \"valid arguments to %<-mtune=%> switch are: %s\"\n+\t\t: \"valid arguments to %<target(\\\"tune=\\\")%> attribute are: %s\",\n+\t\ts);\n+      XDELETEVEC (s);\n+    }\n \n   set_ix86_tune_features (ix86_tune, opts->x_ix86_dump_tunes);\n \n@@ -5623,7 +5681,9 @@ ix86_option_override_internal (bool main_args_p,\n             & ~opts->x_ix86_isa_flags_explicit);\n \n       if (TARGET_RTD_P (opts->x_target_flags))\n-\twarning (0, \"%srtd%s is ignored in 64bit mode\", prefix, suffix);\n+\twarning (0,\n+\t\t main_args_p ? \"%<-mrtd%> is ignored in 64bit mode\"\n+\t\t\t     : \"%<target(\\\"rtd\\\")%> is ignored in 64bit mode\");\n     }\n   else\n     {\n@@ -5744,7 +5804,9 @@ ix86_option_override_internal (bool main_args_p,\n   /* Accept -msseregparm only if at least SSE support is enabled.  */\n   if (TARGET_SSEREGPARM_P (opts->x_target_flags)\n       && ! TARGET_SSE_P (opts->x_ix86_isa_flags))\n-    error (\"%ssseregparm%s used without SSE enabled\", prefix, suffix);\n+    error (main_args_p\n+\t   ? \"%<-msseregparm%> used without SSE enabled\"\n+\t   : \"%<target(\\\"sseregparm\\\")%> used without SSE enabled\");\n \n   if (opts_set->x_ix86_fpmath)\n     {\n@@ -5809,8 +5871,12 @@ ix86_option_override_internal (bool main_args_p,\n       && !(opts->x_target_flags & MASK_ACCUMULATE_OUTGOING_ARGS))\n     {\n       if (opts_set->x_target_flags & MASK_ACCUMULATE_OUTGOING_ARGS)\n-\twarning (0, \"stack probing requires %saccumulate-outgoing-args%s \"\n-\t\t \"for correctness\", prefix, suffix);\n+\twarning (0,\n+\t\t main_args_p\n+\t\t ? \"stack probing requires %<-maccumulate-outgoing-args%> \"\n+\t\t   \"for correctness\"\n+\t\t : \"stack probing requires \"\n+\t\t   \"%<target(\\\"accumulate-outgoing-args\\\")%> for correctness\");\n       opts->x_target_flags |= MASK_ACCUMULATE_OUTGOING_ARGS;\n     }\n \n@@ -5820,8 +5886,11 @@ ix86_option_override_internal (bool main_args_p,\n       && !(opts->x_target_flags & MASK_ACCUMULATE_OUTGOING_ARGS))\n     {\n       if (opts_set->x_target_flags & MASK_ACCUMULATE_OUTGOING_ARGS)\n-\twarning (0, \"fixed ebp register requires %saccumulate-outgoing-args%s\",\n-\t\t prefix, suffix);\n+\twarning (0,\n+\t\t main_args_p\n+\t\t ? \"fixed ebp register requires %<-maccumulate-outgoing-args%>\"\n+\t\t : \"fixed ebp register requires \"\n+\t\t   \"%<target(\\\"accumulate-outgoing-args\\\")%>\");\n       opts->x_target_flags |= MASK_ACCUMULATE_OUTGOING_ARGS;\n     }\n "}, {"sha": "7f0746dedd3904c7684b9668192666ad418f9609", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76ff80fb8bd42fa4c75866b1f952b39c9775c094", "patch": "@@ -1,3 +1,13 @@\n+2016-09-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/77475\n+\t* gcc.target/i386/pr65990.c: Adjust expected diagnostics.\n+\t* gcc.dg/march-generic.c: Likewise.\n+\t* gcc.target/i386/spellcheck-options-1.c: New test.\n+\t* gcc.target/i386/spellcheck-options-2.c: New test.\n+\t* gcc.target/i386/spellcheck-options-3.c: New test.\n+\t* gcc.target/i386/spellcheck-options-4.c: New test.\n+\n 2016-09-15  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \tPR fortran/72743"}, {"sha": "fb5b83c7d746540fc41bd1cf5ce75581a7889a4f", "filename": "gcc/testsuite/gcc.dg/march-generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2Ftestsuite%2Fgcc.dg%2Fmarch-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2Ftestsuite%2Fgcc.dg%2Fmarch-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmarch-generic.c?ref=76ff80fb8bd42fa4c75866b1f952b39c9775c094", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n /* { dg-skip-if \"\" { *-*-* } { \"-march=*\" } { \"\" } } */\n /* { dg-options \"-march=generic\" } */\n-/* { dg-error \"generic CPU can be used only for -mtune\" \"\" { target *-*-* } 0 } */\n+/* { dg-error \"'generic' CPU can be used only for '-mtune=' switch\" \"\" { target *-*-* } 0 } */\n /* { dg-bogus \"march\" \"\" { target *-*-* } 0 } */\n int i;"}, {"sha": "3b1088f0a952ac0475e34b1354067ce39243674c", "filename": "gcc/testsuite/gcc.target/i386/pr65990.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65990.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65990.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65990.c?ref=76ff80fb8bd42fa4c75866b1f952b39c9775c094", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mtune=btver2 -mmemcpy-strategy=rep_8byte:-1:noalign\" }\n \n-/* { dg-error \"stringop strategy name rep_8byte specified for option -mmemcpy_strategy= not supported for 32-bit code\" \"\" { target ia32 } 0 } */\n+/* { dg-error \"stringop strategy name 'rep_8byte' specified for option '-mmemcpy_strategy=' not supported for 32-bit code\" \"\" { target ia32 } 0 } */\n \n struct U9\n {"}, {"sha": "275f86c178d64401dde28ddbcde30cb4f7c1f809", "filename": "gcc/testsuite/gcc.target/i386/spellcheck-options-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspellcheck-options-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspellcheck-options-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspellcheck-options-1.c?ref=76ff80fb8bd42fa4c75866b1f952b39c9775c094", "patch": "@@ -0,0 +1,7 @@\n+/* Verify that we provide a hint if the user misspells an option argument\n+   (PR middle-end/77475).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-march=hasvel\" } */\n+/* { dg-error \"bad value .'hasvel'. for '-march=' switch\"  \"\" { target *-*-* } 0 } */\n+/* { dg-message \"valid arguments to '-march=' switch are: \\[^\\n\\r]*; did you mean 'haswell'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "848906245af6dda760d8690523cf42e7191f475a", "filename": "gcc/testsuite/gcc.target/i386/spellcheck-options-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspellcheck-options-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspellcheck-options-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspellcheck-options-2.c?ref=76ff80fb8bd42fa4c75866b1f952b39c9775c094", "patch": "@@ -0,0 +1,7 @@\n+/* Verify that we provide a hint if the user misspells an option argument\n+   (PR middle-end/77475).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-mtune=hasvel\" } */\n+/* { dg-error \"bad value .'hasvel'. for '-mtune=' switch\"  \"\" { target *-*-* } 0 } */\n+/* { dg-message \"valid arguments to '-mtune=' switch are: \\[^\\n\\r]*; did you mean 'haswell'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "115cef178bd8365c44642b5533e19ed2270256f4", "filename": "gcc/testsuite/gcc.target/i386/spellcheck-options-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspellcheck-options-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspellcheck-options-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspellcheck-options-3.c?ref=76ff80fb8bd42fa4c75866b1f952b39c9775c094", "patch": "@@ -0,0 +1,7 @@\n+/* Verify that we provide a hint if the user misspells an option argument\n+   (PR middle-end/77475).  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-mmemcpy-strategy=unroled_looop:8:align\" } */\n+/* { dg-error \"wrong strategy name 'unroled_looop' specified for option '-mmemcpy_strategy='\"  \"\" { target *-*-* } 0 } */\n+/* { dg-message \"valid arguments to '-mmemcpy_strategy=' are: \\[^\\n\\r]*; did you mean 'unrolled_loop'?\"  \"\" { target *-*-* } 0 } */"}, {"sha": "d39bd239f891cba2298c7fbb3085abf529c585b2", "filename": "gcc/testsuite/gcc.target/i386/spellcheck-options-4.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspellcheck-options-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76ff80fb8bd42fa4c75866b1f952b39c9775c094/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspellcheck-options-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fspellcheck-options-4.c?ref=76ff80fb8bd42fa4c75866b1f952b39c9775c094", "patch": "@@ -0,0 +1,7 @@\n+/* Verify that we provide a hint if the user misspells an option argument\n+   (PR middle-end/77475).  */\n+\n+/* { dg-do compile } */\n+\n+__attribute__((target (\"arch=hasvel\"))) void foo (void) {} /* { dg-error \"bad value .'hasvel'. for 'target..arch=..' attribute\" } */\n+/* { dg-message \"valid arguments to 'target..arch=..' attribute are: \\[^\\n\\r]*; did you mean 'haswell'?\"  \"\" { target *-*-* } 6 } */"}]}