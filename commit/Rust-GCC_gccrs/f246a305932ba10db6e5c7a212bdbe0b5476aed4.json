{"sha": "f246a305932ba10db6e5c7a212bdbe0b5476aed4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI0NmEzMDU5MzJiYTEwZGI2ZTVjN2EyMTJiZGJlMGI1NDc2YWVkNA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-23T19:29:32Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-23T19:29:32Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r577", "tree": {"sha": "82e579b8cd82bbe52ea9fc50b6969091e40a3347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82e579b8cd82bbe52ea9fc50b6969091e40a3347"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f246a305932ba10db6e5c7a212bdbe0b5476aed4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f246a305932ba10db6e5c7a212bdbe0b5476aed4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f246a305932ba10db6e5c7a212bdbe0b5476aed4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f246a305932ba10db6e5c7a212bdbe0b5476aed4/comments", "author": null, "committer": null, "parents": [{"sha": "a609bfc673c8f2a3970ee0a5ab6c9cd325bf3895", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a609bfc673c8f2a3970ee0a5ab6c9cd325bf3895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a609bfc673c8f2a3970ee0a5ab6c9cd325bf3895"}], "stats": {"total": 109, "additions": 83, "deletions": 26}, "files": [{"sha": "923158a5436f082a940ad3b160c41da86abe5d03", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f246a305932ba10db6e5c7a212bdbe0b5476aed4/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f246a305932ba10db6e5c7a212bdbe0b5476aed4/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=f246a305932ba10db6e5c7a212bdbe0b5476aed4", "patch": "@@ -72,7 +72,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #endif /* DBX_DEBUGGING_INFO || XCOFF_DEBUGGING_INFO */\n \n #ifdef XCOFF_DEBUGGING_INFO\n-#include \"xcoff.h\"\n+#include \"xcoffout.h\"\n #endif\n \n /* .stabd code for line number.  */"}, {"sha": "4703c68d414b58e30ee1c369a12dee6dc8c50be0", "filename": "gcc/make-cc1.com", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f246a305932ba10db6e5c7a212bdbe0b5476aed4/gcc%2Fmake-cc1.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f246a305932ba10db6e5c7a212bdbe0b5476aed4/gcc%2Fmake-cc1.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-cc1.com?ref=f246a305932ba10db6e5c7a212bdbe0b5476aed4", "patch": "@@ -144,7 +144,7 @@ expmed,explow,optabs,emit-rtl,insn-emit,jump,cse,loop,flow,stupid,combine\n regclass,local-alloc,global-alloc,reload,reload1,insn-peep,final,recog\n insn-recog,insn-extract,insn-output,obstack,integrate,caller-save,calls\n dwarfout,xcoffout,function,insn-attrtab,reorg,sched,sdbout,dbxout,unroll\n-reg-stack,aux-output,print-rtl,version\n+reg-stack,aux-output,print-rtl,getpwd,version\n $!\n $pur/nolog independent.opt\n $!\n@@ -261,6 +261,7 @@ $\tassign/user insn-attrtab.c sys$output:\n $\tmcr sys$disk:[]genattrtab md\n $\t'CC 'CFLAGS insn-attrtab.c\n $\t'CC 'CFLAGS aux-output.c\n+$\t'CC 'CFLAGS getpwd.c\n $!\n $compile_cc1:\n $!"}, {"sha": "1ddfce430d4d8e5c590a4b3b413c4da2b74b02f9", "filename": "gcc/toplev.c", "status": "modified", "additions": 75, "deletions": 21, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f246a305932ba10db6e5c7a212bdbe0b5476aed4/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f246a305932ba10db6e5c7a212bdbe0b5476aed4/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=f246a305932ba10db6e5c7a212bdbe0b5476aed4", "patch": "@@ -52,6 +52,10 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"rtl.h\"\n #include \"flags.h\"\n #include \"insn-attr.h\"\n+\n+#ifdef XCOFF_DEBUGGING_INFO\n+#include \"xcoffout.h\"\n+#endif\n \f\n #ifdef VMS\n /* The extra parameters substantially improve the I/O performance.  */\n@@ -183,9 +187,9 @@ enum debug_info_type write_symbols = NO_DEBUG;\n    for the definitions of the different possible levels.  */\n enum debug_info_level debug_info_level = DINFO_LEVEL_NONE;\n \n-#ifdef DBX_DEBUGGING_INFO\n+#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n /* Nonzero means can use our own extensions to DBX format.\n-   Relevant only when write_symbols == DBX_DEBUG.  */\n+   Relevant only when write_symbols == DBX_DEBUG or XCOFF_DEBUG.  */\n int use_gdb_dbx_extensions = 0;\n #endif\n \n@@ -370,6 +374,10 @@ int flag_no_inline;\n \n int flag_gen_aux_info = 0;\n \n+/* Specified name of aux-info file.  */\n+\n+static char *aux_info_file_name;\n+\n /* Nonzero means make the text shared if supported.  */\n \n int flag_shared_data;\n@@ -445,7 +453,6 @@ struct { char *string; int *variable; int on_value;} f_options[] =\n   {\"keep-inline-functions\", &flag_keep_inline_functions, 1},\n   {\"inline\", &flag_no_inline, 0},\n   {\"syntax-only\", &flag_syntax_only, 1},\n-  {\"gen-aux-info\", &flag_gen_aux_info, 1},\n   {\"shared-data\", &flag_shared_data, 1},\n   {\"caller-saves\", &flag_caller_saves, 1},\n   {\"pcc-struct-return\", &flag_pcc_struct_return, 1},\n@@ -528,7 +535,8 @@ struct { char *string; int *variable; int on_value;} W_options[] =\n   {\"return-type\", &warn_return_type, 1},\n   {\"aggregate-return\", &warn_aggregate_return, 1},\n   {\"cast-align\", &warn_cast_align, 1},\n-  {\"uninitialized\", &warn_uninitialized, 1}\n+  {\"uninitialized\", &warn_uninitialized, 1},\n+  {\"inline\", &warn_inline, 1}\n };\n \f\n /* Output files for assembler code (real compiler output)\n@@ -1287,7 +1295,6 @@ compile_file (name)\n   tree globals;\n   int start_time;\n   int dump_base_name_length;\n-  char *aux_info_file_name;\n \n   int name_specified = name != 0;\n \n@@ -1345,12 +1352,11 @@ compile_file (name)\n   if (flag_caller_saves)\n     init_caller_save ();\n \n-  /* If auxilliary info generation is desired, open the output file.  */\n+  /* If auxiliary info generation is desired, open the output file.\n+     This goes in the same directory as the source file--unlike\n+     all the other output files.  */\n   if (flag_gen_aux_info)\n     {\n-      aux_info_file_name = (char *) xmalloc (dump_base_name_length + 6);\n-      strcpy (aux_info_file_name, dump_base_name);\n-      strcat (aux_info_file_name, \".X\");\n       aux_info_file = fopen (aux_info_file_name, \"w\");\n       if (aux_info_file == 0)\n \tpfatal_with_name (aux_info_file_name);\n@@ -1538,6 +1544,10 @@ compile_file (name)\n \tpfatal_with_name (asm_file_name);\n     }\n \n+#ifdef IO_BUFFER_SIZE\n+  setvbuf (asm_out_file, xmalloc (IO_BUFFER_SIZE), _IOFBF, IO_BUFFER_SIZE);\n+#endif\n+\n   input_filename = name;\n \n   /* Perform language-specific initialization.\n@@ -1570,8 +1580,8 @@ compile_file (name)\n \n   /* If dbx symbol table desired, initialize writing it\n      and output the predefined types.  */\n-#ifdef DBX_DEBUGGING_INFO\n-  if (write_symbols == DBX_DEBUG)\n+#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n+  if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n     TIMEVAR (symout_time, dbxout_init (asm_out_file, main_input_filename,\n \t\t\t\t       getdecls ()));\n #endif\n@@ -1718,8 +1728,8 @@ compile_file (name)\n   }\n \n   /* Do dbx symbols */\n-#ifdef DBX_DEBUGGING_INFO\n-  if (write_symbols == DBX_DEBUG)\n+#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n+  if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n     TIMEVAR (symout_time,\n \t     {\n \t       dbxout_finish (asm_out_file, main_input_filename);\n@@ -1884,8 +1894,9 @@ rest_of_decl_compilation (decl, asmspec, top_level, at_end)\n       else\n \terror (\"invalid register name `%s' for register variable\", asmspec);\n     }\n-#ifdef DBX_DEBUGGING_INFO\n-  else if (write_symbols == DBX_DEBUG && TREE_CODE (decl) == TYPE_DECL)\n+#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n+  else if ((write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n+\t   && TREE_CODE (decl) == TYPE_DECL)\n     TIMEVAR (symout_time, dbxout_symbol (decl, 0));\n #endif\n #ifdef SDB_DEBUGGING_INFO\n@@ -1902,8 +1913,8 @@ rest_of_type_compilation (type, toplev)\n      tree type;\n      int toplev;\n {\n-#ifdef DBX_DEBUGGING_INFO\n-  if (write_symbols == DBX_DEBUG)\n+#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n+  if (write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n     TIMEVAR (symout_time, dbxout_symbol (TYPE_STUB_DECL (type), !toplev));\n #endif\n #ifdef SDB_DEBUGGING_INFO\n@@ -2447,6 +2458,14 @@ rest_of_compilation (decl)\n \n  exit_rest_of_compilation:\n \n+  /* In case the function was not output,\n+     don't leave any temporary anonymous types\n+     queued up for sdb output.  */\n+#ifdef SDB_DEBUGGING_INFO\n+  if (write_symbols == SDB_DEBUG)\n+    sdbout_types (0);\n+#endif\n+\n   /* Put back the tree of subblocks from before we copied it.\n      Code generation and the output of debugging info may have modified\n      the copy, but the original is unchanged.  */\n@@ -2544,9 +2563,11 @@ main (argc, argv, envp)\n     }\n \n   obey_regdecls = (optimize == 0);\n-  flag_no_inline = (optimize == 0);\n-  if (flag_no_inline)\n-    warn_inline = 0;\n+  if (optimize == 0)\n+    {\n+      flag_no_inline = 1;\n+      warn_inline = 0;\n+    }\n \n   if (optimize >= 1)\n     {\n@@ -2826,7 +2847,7 @@ main (argc, argv, envp)\n \t\t you must define PREFERRED_DEBUGGING_TYPE\n \t\t to choose a format in a system-dependent way.  */\n #if 1 < (defined (DBX_DEBUGGING_INFO) + defined (SDB_DEBUGGING_INFO) \\\n-\t + defined (DWARF_DEBUGGING_INFO))\n+\t + defined (DWARF_DEBUGGING_INFO) + defined (XCOFF_DEBUGGING_INFO))\n #ifdef PREFERRED_DEBUGGING_TYPE\n \t      if (!strncmp (str, \"ggdb\", len))\n \t\twrite_symbols = PREFERRED_DEBUGGING_TYPE;\n@@ -2873,6 +2894,26 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n \t      else if (!strncmp (str, \"gcoff\", len))\n \t\twrite_symbols = SDB_DEBUG;\n #endif /* SDB_DEBUGGING_INFO */\n+#ifdef XCOFF_DEBUGGING_INFO\n+\t      if (write_symbols != NO_DEBUG)\n+\t\t;\n+\t      else if (!strncmp (str, \"ggdb\", len))\n+\t\twrite_symbols = XCOFF_DEBUG;\n+\t      else if (!strncmp (str, \"gxcoff\", len))\n+\t\twrite_symbols = XCOFF_DEBUG;\n+\n+\t      /* Always enable extensions for -ggdb,\n+\t\t always disable for -gxcoff.\n+\t\t For plain -g, use system-specific default.  */\n+\t      if (write_symbols == XCOFF_DEBUG && !strncmp (str, \"ggdb\", len)\n+\t\t  && len >= 2)\n+\t\tuse_gdb_dbx_extensions = 1;\n+\t      else if (write_symbols == DBX_DEBUG\n+\t\t       && !strncmp (str, \"gxcoff\", len) && len >= 2)\n+\t\tuse_gdb_dbx_extensions = 0;\n+\t      else\n+\t\tuse_gdb_dbx_extensions = DEFAULT_GDB_EXTENSIONS;\n+#endif\t      \n \t      if (write_symbols == NO_DEBUG)\n \t\twarning (\"`-%s' option not supported on this version of GCC\", str);\n \t      else if (level == 0)\n@@ -2889,6 +2930,11 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n \t      g_switch_set = TRUE;\n \t      g_switch_value = atoi ((str[1] != '\\0') ? str+1 : argv[++i]);\n \t    }\n+\t  else if (!strncmp (str, \"aux-info\", 8))\n+\t    {\n+\t      flag_gen_aux_info = 1;\n+\t      aux_info_file_name = (str[8] != '\\0' ? str+8 : argv[++i]);\n+\t    }\n \t  else\n \t    error (\"Invalid option `%s'\", argv[i]);\n \t}\n@@ -2903,6 +2949,14 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n \tfilename = argv[i];\n     }\n \n+  /* Inlining does not work if not optimizing,\n+     so force it not to be done.  */\n+  if (optimize == 0)\n+    {\n+      flag_no_inline = 1;\n+      warn_inline = 0;\n+    }\n+\n #ifdef OVERRIDE_OPTIONS\n   /* Some machines may reject certain combinations of options.  */\n   OVERRIDE_OPTIONS;"}, {"sha": "306cc8ccf3edc46b683c085a34096ded9aaca165", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f246a305932ba10db6e5c7a212bdbe0b5476aed4/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f246a305932ba10db6e5c7a212bdbe0b5476aed4/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f246a305932ba10db6e5c7a212bdbe0b5476aed4", "patch": "@@ -39,7 +39,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"obstack.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n-#include \"xcoff.h\"\n+#include \"xcoffout.h\"\n #endif\n \n #ifndef ASM_STABS_OP\n@@ -81,6 +81,7 @@ void assemble_name ();\n int output_addressed_constants ();\n void output_constant ();\n void output_constructor ();\n+void data_section ();\n \f\n #ifdef EXTRA_SECTIONS\n static enum in_section {no_section, in_text, in_data, EXTRA_SECTIONS} in_section\n@@ -1341,7 +1342,8 @@ immed_real_const_1 (d, mode)\n \n   /* Detect special cases.  */\n \n-  if (REAL_VALUES_EQUAL (dconst0, d))\n+  /* Avoid REAL_VALUES_EQUAL here in order to distinguish minus zero.  */\n+  if (!bcmp (&dconst0, &d, sizeof d))\n     return CONST0_RTX (mode);\n   else if (REAL_VALUES_EQUAL (dconst1, d))\n     return CONST1_RTX (mode);"}, {"sha": "1b42612270ad773a8ebbc6e0aa66a4f94d685983", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f246a305932ba10db6e5c7a212bdbe0b5476aed4/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f246a305932ba10db6e5c7a212bdbe0b5476aed4/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=f246a305932ba10db6e5c7a212bdbe0b5476aed4", "patch": "@@ -36,7 +36,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* This defines the C_* storage classes.  */\n #include <dbxstclass.h>\n \n-#include \"xcoff.h\"\n+#include \"xcoffout.h\"\n \n #if defined (USG) || defined (NO_STAB_H)\n #include \"gstab.h\""}]}