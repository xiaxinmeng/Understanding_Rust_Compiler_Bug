{"sha": "a0accaa99844b0c40661202635859f8c0be76cdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBhY2NhYTk5ODQ0YjBjNDA2NjEyMDI2MzU4NTlmOGMwYmU3NmNkZA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-24T17:35:21Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-24T20:01:55Z"}, "message": "Only register relations on live edges\n\nRegister a relation on a conditional edge only if the LHS supports\nthis edge being taken.\n\n\tgcc/\n\tPR tree-optimization/101189\n\t* gimple-range-fold.cc (fold_using_range::range_of_range_op): Pass\n\tLHS range of condition to postfold routine.\n\t(fold_using_range::postfold_gcond_edges): Only process the TRUE or\n\tFALSE edge if the LHS range supports it being taken.\n\t* gimple-range-fold.h (postfold_gcond_edges): Add range parameter.\n\n\tgcc/testsuite/\n\t* gcc.dg/tree-ssa/pr101189.c: New.", "tree": {"sha": "c6d9dade1c227a5ce29b876acea3ade86809d564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6d9dade1c227a5ce29b876acea3ade86809d564"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0accaa99844b0c40661202635859f8c0be76cdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0accaa99844b0c40661202635859f8c0be76cdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0accaa99844b0c40661202635859f8c0be76cdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0accaa99844b0c40661202635859f8c0be76cdd/comments", "author": null, "committer": null, "parents": [{"sha": "ce0b409f562cd09c67cc2dce74143a0f0647cde5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce0b409f562cd09c67cc2dce74143a0f0647cde5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce0b409f562cd09c67cc2dce74143a0f0647cde5"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "1fa4ace32b910e0eb4ecbe96280cb13d4e8dfb41", "filename": "gcc/gimple-range-fold.cc", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0accaa99844b0c40661202635859f8c0be76cdd/gcc%2Fgimple-range-fold.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0accaa99844b0c40661202635859f8c0be76cdd/gcc%2Fgimple-range-fold.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.cc?ref=a0accaa99844b0c40661202635859f8c0be76cdd", "patch": "@@ -617,7 +617,7 @@ fold_using_range::range_of_range_op (irange &r, gimple *s, fur_source &src)\n \t\t}\n \t    }\n \t  else if (is_a<gcond *> (s))\n-\t    postfold_gcond_edges (as_a<gcond *> (s), src);\n+\t    postfold_gcond_edges (as_a<gcond *> (s), r, src);\n \t}\n       else\n \tr.set_varying (type);\n@@ -1247,20 +1247,39 @@ fold_using_range::relation_fold_and_or (irange& lhs_range, gimple *s,\n // Register any outgoing edge relations from a conditional branch.\n \n void\n-fold_using_range::postfold_gcond_edges (gcond *s, fur_source &src)\n+fold_using_range::postfold_gcond_edges (gcond *s, irange& lhs_range,\n+\t\t\t\t\tfur_source &src)\n {\n   int_range_max r;\n+  int_range<2> e0_range, e1_range;\n   tree name;\n   range_operator *handler;\n   basic_block bb = gimple_bb (s);\n \n   edge e0 = EDGE_SUCC (bb, 0);\n   if (!single_pred_p (e0->dest))\n     e0 = NULL;\n+  else\n+    {\n+      // If this edge is never taken, ignore it.\n+      gcond_edge_range (e0_range, e0);\n+      e0_range.intersect (lhs_range);\n+      if (e0_range.undefined_p ())\n+\te0 = NULL;\n+    }\n+\n \n   edge e1 = EDGE_SUCC (bb, 1);\n   if (!single_pred_p (e1->dest))\n     e1 = NULL;\n+  else\n+    {\n+      // If this edge is never taken, ignore it.\n+      gcond_edge_range (e1_range, e1);\n+      e1_range.intersect (lhs_range);\n+      if (e1_range.undefined_p ())\n+\te1 = NULL;\n+    }\n \n   // At least one edge needs to be single pred.\n   if (!e0 && !e1)\n@@ -1276,15 +1295,13 @@ fold_using_range::postfold_gcond_edges (gcond *s, fur_source &src)\n       gcc_checking_assert (handler);\n       if (e0)\n \t{\n-\t  gcond_edge_range (r, e0);\n-\t  relation_kind relation = handler->op1_op2_relation (r);\n+\t  relation_kind relation = handler->op1_op2_relation (e0_range);\n \t  if (relation != VREL_NONE)\n \t    src.register_relation (e0, relation, ssa1, ssa2);\n \t}\n       if (e1)\n \t{\n-\t  gcond_edge_range (r, e1);\n-\t  relation_kind relation = handler->op1_op2_relation (r);\n+\t  relation_kind relation = handler->op1_op2_relation (e1_range);\n \t  if (relation != VREL_NONE)\n \t    src.register_relation (e1, relation, ssa1, ssa2);\n \t}"}, {"sha": "dc1b28f9acc59800020a8b2c81b60bc6e265376a", "filename": "gcc/gimple-range-fold.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0accaa99844b0c40661202635859f8c0be76cdd/gcc%2Fgimple-range-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0accaa99844b0c40661202635859f8c0be76cdd/gcc%2Fgimple-range-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-fold.h?ref=a0accaa99844b0c40661202635859f8c0be76cdd", "patch": "@@ -158,6 +158,6 @@ class fold_using_range\n   void range_of_ssa_name_with_loop_info (irange &, tree, class loop *, gphi *,\n \t\t\t\t\t fur_source &src);\n   void relation_fold_and_or (irange& lhs_range, gimple *s, fur_source &src);\n-  void postfold_gcond_edges (gcond *s, fur_source &src);\n+  void postfold_gcond_edges (gcond *s, irange &lhs_range, fur_source &src);\n };\n #endif // GCC_GIMPLE_RANGE_FOLD_H"}, {"sha": "5730708a0b8849f65ccfd7dedd14eab09f393993", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr101189.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0accaa99844b0c40661202635859f8c0be76cdd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr101189.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0accaa99844b0c40661202635859f8c0be76cdd/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr101189.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr101189.c?ref=a0accaa99844b0c40661202635859f8c0be76cdd", "patch": "@@ -0,0 +1,17 @@\n+/* PR tree-optimization/101189  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+static int a, b;\n+int main() {\n+  int d = 0, e, f = 5;\n+  if (a)\n+    f = 0;\n+  for (; f < 4; f++)\n+    ;\n+  e = f ^ -f;\n+  e && d;\n+  if (!e)\n+    e || b;\n+  return 0;\n+}"}]}