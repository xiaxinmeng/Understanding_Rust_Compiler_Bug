{"sha": "b0aba46ca6668ef16fa83ff146654a9bf946ff16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBhYmE0NmNhNjY2OGVmMTZmYTgzZmYxNDY2NTRhOWJmOTQ2ZmYxNg==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2018-12-14T13:48:56Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-12-14T13:48:56Z"}, "message": "[offloading] Error on missing symbols\n\nWhen compiling an OpenMP or OpenACC program containing a reference in the\noffloaded code to a symbol that has not been included in the offloaded code,\nthe offloading compiler may ICE in lto1.\n\nFix this by erroring out instead, mentioning the problematic symbol:\n...\nerror: variable 'var' has been referenced in offloaded code but hasn't\n  been marked to be included in the offloaded code\nlto1: fatal error: errors during merging of translation units\ncompilation terminated.\n...\n\nBuild x86_64 with nvptx accelerator and reg-tested libgomp.\n\nBuild x86_64 and reg-tested libgomp.\n\n2018-12-14  Tom de Vries  <tdevries@suse.de>\n\n\t* lto-cgraph.c (verify_node_partition): New function.\n\t(input_overwrite_node, input_varpool_node): Use verify_node_partition.\n\n\t* testsuite/libgomp.c-c++-common/function-not-offloaded-aux.c: New test.\n\t* testsuite/libgomp.c-c++-common/function-not-offloaded.c: New test.\n\t* testsuite/libgomp.c-c++-common/variable-not-offloaded.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/function-not-offloaded.c: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/variable-not-offloaded.c: New test.\n\nFrom-SVN: r267134", "tree": {"sha": "2d768b42e3a31f9210ad81e2e41b2466bd284d01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d768b42e3a31f9210ad81e2e41b2466bd284d01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0aba46ca6668ef16fa83ff146654a9bf946ff16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0aba46ca6668ef16fa83ff146654a9bf946ff16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0aba46ca6668ef16fa83ff146654a9bf946ff16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0aba46ca6668ef16fa83ff146654a9bf946ff16/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f472e636f7e99c3bca2fb70bd5adc2bb07dad3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f472e636f7e99c3bca2fb70bd5adc2bb07dad3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f472e636f7e99c3bca2fb70bd5adc2bb07dad3d"}], "stats": {"total": 134, "additions": 127, "deletions": 7}, "files": [{"sha": "afbdf75c62c96f7aeb7ae49a1b1bf4bff6a2e219", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0aba46ca6668ef16fa83ff146654a9bf946ff16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0aba46ca6668ef16fa83ff146654a9bf946ff16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0aba46ca6668ef16fa83ff146654a9bf946ff16", "patch": "@@ -1,3 +1,8 @@\n+2018-12-14  Tom de Vries  <tdevries@suse.de>\n+\n+\t* lto-cgraph.c (verify_node_partition): New function.\n+\t(input_overwrite_node, input_varpool_node): Use verify_node_partition.\n+\n 2018-12-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/88483"}, {"sha": "536e73c9ecd0c3bc668c67a9af7bb093b6edc0b8", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0aba46ca6668ef16fa83ff146654a9bf946ff16/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0aba46ca6668ef16fa83ff146654a9bf946ff16/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=b0aba46ca6668ef16fa83ff146654a9bf946ff16", "patch": "@@ -1091,6 +1091,36 @@ output_offload_tables (void)\n     }\n }\n \n+/* Verify the partitioning of NODE.  */\n+\n+static inline void\n+verify_node_partition (symtab_node *node)\n+{\n+  if (flag_ltrans)\n+    return;\n+\n+#ifdef ACCEL_COMPILER\n+  if (node->in_other_partition)\n+    {\n+      if (TREE_CODE (node->decl) == FUNCTION_DECL)\n+\terror_at (DECL_SOURCE_LOCATION (node->decl),\n+\t\t  \"function %qs has been referenced in offloaded code but\"\n+\t\t  \" hasn%'t been marked to be included in the offloaded code\",\n+\t\t  node->name ());\n+      else if (VAR_P (node->decl))\n+\terror_at (DECL_SOURCE_LOCATION (node->decl),\n+\t\t  \"variable %qs has been referenced in offloaded code but\"\n+\t\t  \" hasn%'t been marked to be included in the offloaded code\",\n+\t\t  node->name ());\n+      else\n+\tgcc_unreachable ();\n+    }\n+#else\n+  gcc_assert (!node->in_other_partition\n+\t      && !node->used_from_other_partition);\n+#endif\n+}\n+\n /* Overwrite the information in NODE based on FILE_DATA, TAG, FLAGS,\n    STACK_SIZE, SELF_TIME and SELF_SIZE.  This is called either to initialize\n    NODE or to replace the values in it, for instance because the first\n@@ -1153,9 +1183,7 @@ input_overwrite_node (struct lto_file_decl_data *file_data,\n   node->resolution = bp_unpack_enum (bp, ld_plugin_symbol_resolution,\n \t\t\t\t     LDPR_NUM_KNOWN);\n   node->split_part = bp_unpack_value (bp, 1);\n-  gcc_assert (flag_ltrans\n-\t      || (!node->in_other_partition\n-\t\t  && !node->used_from_other_partition));\n+  verify_node_partition (node);\n }\n \n /* Return string alias is alias of.  */\n@@ -1366,10 +1394,7 @@ input_varpool_node (struct lto_file_decl_data *file_data,\n     node->set_section_for_node (section);\n   node->resolution = streamer_read_enum (ib, ld_plugin_symbol_resolution,\n \t\t\t\t\t        LDPR_NUM_KNOWN);\n-  gcc_assert (flag_ltrans\n-\t      || (!node->in_other_partition\n-\t\t  && !node->used_from_other_partition));\n-\n+  verify_node_partition (node);\n   return node;\n }\n "}, {"sha": "4c66021c367daa63d2d3fae4d7dab8179b584b6b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0aba46ca6668ef16fa83ff146654a9bf946ff16/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0aba46ca6668ef16fa83ff146654a9bf946ff16/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b0aba46ca6668ef16fa83ff146654a9bf946ff16", "patch": "@@ -1,3 +1,11 @@\n+2018-12-14  Tom de Vries  <tdevries@suse.de>\n+\n+\t* testsuite/libgomp.c-c++-common/function-not-offloaded-aux.c: New test.\n+\t* testsuite/libgomp.c-c++-common/function-not-offloaded.c: New test.\n+\t* testsuite/libgomp.c-c++-common/variable-not-offloaded.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/function-not-offloaded.c: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/variable-not-offloaded.c: New test.\n+\n 2018-12-13  Tom de Vries  <tdevries@suse.de>\n \n \t* affinity-fmt.c (gomp_print_string): New function, factored out of ..."}, {"sha": "b8aa3da48a1160fd043fb1e02608171789b47105", "filename": "libgomp/testsuite/libgomp.c-c++-common/function-not-offloaded-aux.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0aba46ca6668ef16fa83ff146654a9bf946ff16/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ffunction-not-offloaded-aux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0aba46ca6668ef16fa83ff146654a9bf946ff16/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ffunction-not-offloaded-aux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ffunction-not-offloaded-aux.c?ref=b0aba46ca6668ef16fa83ff146654a9bf946ff16", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-skip-if \"\" { *-*-* } } */\n+\n+#pragma omp declare target\n+extern int var;\n+#pragma omp end declare target\n+\n+void __attribute__((noinline, noclone))\n+foo (void)\n+{\n+  var++;\n+}\n+"}, {"sha": "9e59ef8864e77450c7a0c6232de7a2d2bf883e00", "filename": "libgomp/testsuite/libgomp.c-c++-common/function-not-offloaded.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0aba46ca6668ef16fa83ff146654a9bf946ff16/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ffunction-not-offloaded.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0aba46ca6668ef16fa83ff146654a9bf946ff16/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ffunction-not-offloaded.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Ffunction-not-offloaded.c?ref=b0aba46ca6668ef16fa83ff146654a9bf946ff16", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do link } */\n+/* { dg-excess-errors \"unresolved symbol foo, lto1, mkoffload and lto-wrapper fatal errors\" { target offload_device_nonshared_as } } */\n+/* { dg-additional-sources \"function-not-offloaded-aux.c\" } */\n+\n+#pragma omp declare target\n+int var;\n+#pragma omp end declare target\n+\n+extern void foo ();\n+\n+int\n+main ()\n+{\n+#pragma omp target\n+  foo ();\n+}"}, {"sha": "bc4b916e9a4570b75b938e5d7e9ab0da845a8451", "filename": "libgomp/testsuite/libgomp.c-c++-common/variable-not-offloaded.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0aba46ca6668ef16fa83ff146654a9bf946ff16/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fvariable-not-offloaded.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0aba46ca6668ef16fa83ff146654a9bf946ff16/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fvariable-not-offloaded.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fvariable-not-offloaded.c?ref=b0aba46ca6668ef16fa83ff146654a9bf946ff16", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do link } */\n+/* { dg-excess-errors \"lto1, mkoffload and lto-wrapper fatal errors\" { target offload_device_nonshared_as } } */\n+\n+int var; /* { dg-error \"variable 'var' has been referenced in offloaded code but hasn't been marked to be included in the offloaded code\" \"\" { target offload_device_nonshared_as } } */\n+\n+#pragma omp declare target\n+void  __attribute__((noinline, noclone))\n+foo (void)\n+{\n+  var++;\n+}\n+#pragma omp end declare target\n+\n+int\n+main ()\n+{\n+#pragma omp target\n+  foo ();\n+}"}, {"sha": "c94f268462fd6a0144aee21f9a8efaed7dab5bde", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/function-not-offloaded.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0aba46ca6668ef16fa83ff146654a9bf946ff16/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffunction-not-offloaded.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0aba46ca6668ef16fa83ff146654a9bf946ff16/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffunction-not-offloaded.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffunction-not-offloaded.c?ref=b0aba46ca6668ef16fa83ff146654a9bf946ff16", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do link } */\n+/* { dg-excess-errors \"lto1, mkoffload and lto-wrapper fatal errors\" { target openacc_nvidia_accel_configured } } */\n+\n+int var;\n+#pragma acc declare create (var)\n+\n+void __attribute__((noinline, noclone))\n+foo () /* { dg-error \"function 'foo' has been referenced in offloaded code but hasn't been marked to be included in the offloaded code\" \"\" { target openacc_nvidia_accel_configured } } */\n+{\n+  var++;\n+}\n+\n+int\n+main ()\n+{\n+#pragma acc parallel\n+  foo ();\n+}"}, {"sha": "8e10271b97fea1c4e61cdf1cb6fb88354a1d5633", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/variable-not-offloaded.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0aba46ca6668ef16fa83ff146654a9bf946ff16/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvariable-not-offloaded.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0aba46ca6668ef16fa83ff146654a9bf946ff16/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvariable-not-offloaded.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvariable-not-offloaded.c?ref=b0aba46ca6668ef16fa83ff146654a9bf946ff16", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do link } */\n+\n+int var; /* { dg-error \"'var' requires a 'declare' directive for use in a 'routine' function\" } */\n+\n+#pragma acc routine\n+void  __attribute__((noinline, noclone))\n+foo (void)\n+{\n+  var++;\n+}\n+\n+int\n+main ()\n+{\n+#pragma acc parallel\n+  foo ();\n+}"}]}