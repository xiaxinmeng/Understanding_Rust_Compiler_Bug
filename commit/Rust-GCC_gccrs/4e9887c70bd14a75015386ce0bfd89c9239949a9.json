{"sha": "4e9887c70bd14a75015386ce0bfd89c9239949a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU5ODg3YzcwYmQxNGE3NTAxNTM4NmNlMGJmZDg5YzkyMzk5NDlhOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-07T07:16:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-07T07:16:59Z"}, "message": "genrecog.c (*): Rename _last_insn to last_insn.\n\n        * genrecog.c (*): Rename _last_insn to last_insn.\n        (make_insn_sequence): Set the position of the peephole2 C test\n        to be at the last insn.\n\nFrom-SVN: r32990", "tree": {"sha": "db30bbc1caf78cc5a9e965df776f973234bf369e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db30bbc1caf78cc5a9e965df776f973234bf369e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e9887c70bd14a75015386ce0bfd89c9239949a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9887c70bd14a75015386ce0bfd89c9239949a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e9887c70bd14a75015386ce0bfd89c9239949a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9887c70bd14a75015386ce0bfd89c9239949a9/comments", "author": null, "committer": null, "parents": [{"sha": "391b788c041b80a613283307d0d37cc96ff0b6e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391b788c041b80a613283307d0d37cc96ff0b6e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/391b788c041b80a613283307d0d37cc96ff0b6e3"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "9db44816a741c1f0ae6b723986c1628382e1afa3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9887c70bd14a75015386ce0bfd89c9239949a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9887c70bd14a75015386ce0bfd89c9239949a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e9887c70bd14a75015386ce0bfd89c9239949a9", "patch": "@@ -1,3 +1,9 @@\n+2000-04-06  Richard Henderson  <rth@cygnus.com>\n+\n+\t* genrecog.c (*): Rename _last_insn to last_insn.\n+\t(make_insn_sequence): Set the position of the peephole2 C test\n+\tto be at the last insn.\n+\n 2000-04-06  Richard Henderson  <rth@cygnus.com>\n \n \t* flow.c (compute_flow_dominators): Free worklist.\n@@ -181,11 +187,11 @@ Thu Apr  6 19:11:47 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n 2000-04-05   Benjamin Kosnik  <bkoz@cygnus.com>\n \n-        * configure.in: And here.\n-        * configure: Regenerate.\n-        * acconfig.h: Add ENABLE_STD_NAMESPACE to set flag_honor_std if\n-        --enable-libstdcxx-v3 is passed at configure time.\n-        * config.h.in: Regenerate.\n+\t* configure.in: And here.\n+\t* configure: Regenerate.\n+\t* acconfig.h: Add ENABLE_STD_NAMESPACE to set flag_honor_std if\n+\t--enable-libstdcxx-v3 is passed at configure time.\n+\t* config.h.in: Regenerate.\n \n 2000-04-05  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -231,7 +237,7 @@ Wed Apr  5 12:35:18 2000  Hans-Peter Nilsson  <hp@axis.com>\n \tall (op (minus A B) 0) with (op A B).\n \n Wed Apr  5 18:03:31 2000  Toshiyasu Morita  (toshi.morita@sega.com)\n-                          J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\t                  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* sh.c (block_lump_real_i4): Add missing clobber of T_REG\n \t(block_lump_real): Likewise."}, {"sha": "c86b62a734205b524ca012fc85acd413b4ce7b2e", "filename": "gcc/genrecog.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e9887c70bd14a75015386ce0bfd89c9239949a9/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e9887c70bd14a75015386ce0bfd89c9239949a9/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=4e9887c70bd14a75015386ce0bfd89c9239949a9", "patch": "@@ -1607,9 +1607,9 @@ change_state (oldpos, newpos, afterward, indent)\n     if (newpos[new_has_insn] >= 'A' && newpos[new_has_insn] <= 'Z')\n       break;\n \n-  /* Make sure to reset the _last_insn pointer when popping back up.  */\n+  /* Make sure to reset the last_insn pointer when popping back up.  */\n   if (old_has_insn >= 0 && new_has_insn < 0)\n-    printf (\"%s_last_insn = insn;\\n\", indent);\n+    printf (\"%slast_insn = insn;\\n\", indent);\n \n   /* Go down to desired level.  */\n   while (depth < ndepth)\n@@ -1620,7 +1620,7 @@ change_state (oldpos, newpos, afterward, indent)\n \t  /* We can only fail if we're moving down the tree.  */\n \t  if (old_has_insn >= 0 && oldpos[old_has_insn] >= newpos[depth])\n \t    {\n-\t      printf (\"%s_last_insn = recog_next_insn (insn, %d);\\n\", \n+\t      printf (\"%slast_insn = recog_next_insn (insn, %d);\\n\", \n \t\t      indent, newpos[depth] - 'A');\n \t    }\n \t  else\n@@ -1632,9 +1632,9 @@ change_state (oldpos, newpos, afterward, indent)\n \t\tprintf (\"%s  goto L%d;\\n\", indent, afterward->number);\n \t      else\n \t\tprintf (\"%s  goto ret0;\\n\", indent);\n-\t      printf (\"%s_last_insn = tem;\\n\", indent);\n+\t      printf (\"%slast_insn = tem;\\n\", indent);\n \t    }\n-\t  printf (\"%sx%d = PATTERN (_last_insn);\\n\", indent, depth + 1);\n+\t  printf (\"%sx%d = PATTERN (last_insn);\\n\", indent, depth + 1);\n \t}\n       else if (newpos[depth] >= 'a' && newpos[depth] <= 'z')\n \tprintf (\"%sx%d = XVECEXP (x%d, 0, %d);\\n\",\n@@ -2210,7 +2210,7 @@ peephole2%s (x0, insn, _plast_insn)\\n\\\n     printf (\"  register rtx x%d ATTRIBUTE_UNUSED;\\n\", i);\n \n   if (type == PEEPHOLE2)\n-    printf (\"  register rtx _last_insn = insn;\\n\");\n+    printf (\"  register rtx last_insn = insn;\\n\");\n   printf (\"  %s tem ATTRIBUTE_UNUSED;\\n\", IS_SPLIT (type) ? \"rtx\" : \"int\");\n \n   if (head->first)\n@@ -2219,7 +2219,7 @@ peephole2%s (x0, insn, _plast_insn)\\n\\\n     printf (\"  goto ret0;\\n\");\n \n   if (type == PEEPHOLE2)\n-    printf (\" ret1:\\n  *_plast_insn = _last_insn;\\n  return tem;\\n\");\n+    printf (\" ret1:\\n  *_plast_insn = last_insn;\\n  return tem;\\n\");\n   printf (\" ret0:\\n  return %d;\\n}\\n\\n\", IS_SPLIT (type) ? 0 : -1);\n }\n \n@@ -2310,6 +2310,7 @@ make_insn_sequence (insn, type)\n   struct decision *last;\n   struct decision_test *test, **place;\n   struct decision_head head;\n+  char *c_test_pos = \"\";\n \n   record_insn_name (next_insn_code, (type == RECOG ? XSTR (insn, 0) : NULL));\n \n@@ -2334,6 +2335,10 @@ make_insn_sequence (insn, type)\n \t    }\n \t}\n       XVECLEN (x, 0) = j;\n+\n+      c_test_pos = alloca (2);\n+      c_test_pos[0] = 'A' + j - 1;\n+      c_test_pos[1] = '\\0';\n     }\n   else if (XVECLEN (insn, type == RECOG) == 1)\n     x = XVECEXP (insn, type == RECOG, 0);\n@@ -2359,7 +2364,7 @@ make_insn_sequence (insn, type)\n       /* Need a new node if we have another test to add.  */\n       if (test->type == DT_accept_op)\n \t{\n-\t  last = new_decision (\"\", &last->success);\n+\t  last = new_decision (c_test_pos, &last->success);\n \t  place = &last->tests;\n \t}\n       test = new_decision_test (DT_c_test, &place);"}]}