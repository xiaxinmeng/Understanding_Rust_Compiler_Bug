{"sha": "d2e398dfc83188c4a94e191d51689ab56e0991a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJlMzk4ZGZjODMxODhjNGE5NGUxOTFkNTE2ODlhYjU2ZTA5OTFhMA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-25T22:31:09Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-25T22:31:09Z"}, "message": "tree-phinodes.c (add_phi_arg): Take \"tree\" instead of \"tree *\" as the first argument.\n\n\t* tree-phinodes.c (add_phi_arg): Take \"tree\" instead of\n\t\"tree *\" as the first argument.\n\t* tree-flow.h: Update the prototype of add_phi_arg.\n\t* lambda-code.c, tree-cfg.c, tree-into-ssa.c,\n\ttree-ssa-loop-ivopts.c, tree-ssa-loop-manip.c, tree-ssa-pre.c,\n\ttree-ssa-threadupdate.c, tree-ssa.c, tree-tailcall.c,\n\ttree-vectorizer.c: Update all call sites of add_phi_arg.\n\nFrom-SVN: r91307", "tree": {"sha": "66c8df427757e768c2a5be03b5940cc14259184e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66c8df427757e768c2a5be03b5940cc14259184e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2e398dfc83188c4a94e191d51689ab56e0991a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2e398dfc83188c4a94e191d51689ab56e0991a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2e398dfc83188c4a94e191d51689ab56e0991a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2e398dfc83188c4a94e191d51689ab56e0991a0/comments", "author": null, "committer": null, "parents": [{"sha": "9f8e747867f0b4824c02c7745491b8ef2110b814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f8e747867f0b4824c02c7745491b8ef2110b814", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f8e747867f0b4824c02c7745491b8ef2110b814"}], "stats": {"total": 94, "additions": 52, "deletions": 42}, "files": [{"sha": "316ca15473eeaf2c176bbb057edc6c14bf87705a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2e398dfc83188c4a94e191d51689ab56e0991a0", "patch": "@@ -1,3 +1,13 @@\n+2004-11-25  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-phinodes.c (add_phi_arg): Take \"tree\" instead of\n+\t\"tree *\" as the first argument.\n+\t* tree-flow.h: Update the prototype of add_phi_arg.\n+\t* lambda-code.c, tree-cfg.c, tree-into-ssa.c,\n+\ttree-ssa-loop-ivopts.c, tree-ssa-loop-manip.c, tree-ssa-pre.c,\n+\ttree-ssa-threadupdate.c, tree-ssa.c, tree-tailcall.c,\n+\ttree-vectorizer.c: Update all call sites of add_phi_arg.\n+\n 2004-11-25  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* bitmap.c (bitmap_malloc_alloc, bitmap_malloc_free): Remove."}, {"sha": "1fc3af52d9b6bf361e4f3dba5565f26831ec99b9", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=d2e398dfc83188c4a94e191d51689ab56e0991a0", "patch": "@@ -2330,7 +2330,7 @@ perfect_nestify (struct loops *loops,\n       def = VEC_pop (tree, phis);\n       phiname = VEC_pop (tree, phis);      \n       phi = create_phi_node (phiname, preheaderbb);\n-      add_phi_arg (&phi, def, EDGE_PRED (preheaderbb, 0));\n+      add_phi_arg (phi, def, EDGE_PRED (preheaderbb, 0));\n     }       \n   flush_pending_stmts (e);\n   unmark_all_for_rewrite ();"}, {"sha": "2d02f71d5b09ae6715d809f67b7248507d7068db", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=d2e398dfc83188c4a94e191d51689ab56e0991a0", "patch": "@@ -3130,7 +3130,7 @@ reinstall_phi_args (edge new_edge, edge old_edge)\n \n       gcc_assert (result == PHI_RESULT (phi));\n \n-      add_phi_arg (&phi, arg, new_edge);\n+      add_phi_arg (phi, arg, new_edge);\n     }\n \n   PENDING_STMT (old_edge) = NULL;\n@@ -3862,7 +3862,7 @@ tree_make_forwarder_block (edge fallthru)\n       new_phi = create_phi_node (var, bb);\n       SSA_NAME_DEF_STMT (var) = new_phi;\n       SET_PHI_RESULT (phi, make_ssa_name (SSA_NAME_VAR (var), phi));\n-      add_phi_arg (&new_phi, PHI_RESULT (phi), fallthru);\n+      add_phi_arg (new_phi, PHI_RESULT (phi), fallthru);\n     }\n \n   /* Ensure that the PHI node chain is in the same order.  */\n@@ -4040,7 +4040,7 @@ thread_jumps_from_bb (basic_block bb)\n \t    {\n \t      arg = phi_arg_from_edge (phi, last);\n \t      gcc_assert (arg >= 0);\n-\t      add_phi_arg (&phi, PHI_ARG_DEF (phi, arg), e);\n+\t      add_phi_arg (phi, PHI_ARG_DEF (phi, arg), e);\n \t    }\n \t}\n \n@@ -4566,7 +4566,7 @@ add_phi_args_after_copy_bb (basic_block bb_copy)\n \n \t  gcc_assert (PHI_RESULT (phi) == PHI_RESULT (phi_copy));\n \t  def = PHI_ARG_DEF_FROM_EDGE (phi, e);\n-\t  add_phi_arg (&phi_copy, def, e_copy);\n+\t  add_phi_arg (phi_copy, def, e_copy);\n \t}\n     }\n }\n@@ -4888,8 +4888,8 @@ tree_duplicate_sese_region (edge entry, edge exit,\n       tree name = ssa_name (ver);\n \n       phi = create_phi_node (name, exit->dest);\n-      add_phi_arg (&phi, name, exit);\n-      add_phi_arg (&phi, name, exit_copy);\n+      add_phi_arg (phi, name, exit);\n+      add_phi_arg (phi, name, exit_copy);\n \n       SSA_NAME_DEF_STMT (name) = phi;\n     }"}, {"sha": "39b81fc2ded9aa682d20f83e668a04da34147e03", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=d2e398dfc83188c4a94e191d51689ab56e0991a0", "patch": "@@ -518,7 +518,7 @@ extern stmt_ann_t create_stmt_ann (tree);\n extern tree_ann_t create_tree_ann (tree);\n extern void reserve_phi_args_for_new_edge (basic_block);\n extern tree create_phi_node (tree, basic_block);\n-extern void add_phi_arg (tree *, tree, edge);\n+extern void add_phi_arg (tree, tree, edge);\n extern void remove_phi_args (edge);\n extern void remove_phi_node (tree, tree, basic_block);\n extern void remove_all_phi_nodes_for (bitmap);"}, {"sha": "f79799ee372efb757a70e7b81783cf70780cb60c", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=d2e398dfc83188c4a94e191d51689ab56e0991a0", "patch": "@@ -797,7 +797,7 @@ rewrite_add_phi_arguments (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n \t    break;\n \n \t  currdef = get_reaching_def (SSA_NAME_VAR (PHI_RESULT (phi)));\n-\t  add_phi_arg (&phi, currdef, e);\n+\t  add_phi_arg (phi, currdef, e);\n \t}\n     }\n }\n@@ -1071,7 +1071,7 @@ insert_phi_nodes_for (tree var, bitmap *dfs, VEC(basic_block) *work_stack)\n \t{\n \t  edge_iterator ei;\n \t  FOR_EACH_EDGE (e, ei, bb->preds)\n-\t    add_phi_arg (&phi, var, e);\n+\t    add_phi_arg (phi, var, e);\n \t}\n     }\n "}, {"sha": "dc37066969b2683f9217b48a9d45b14817bd2aec", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=d2e398dfc83188c4a94e191d51689ab56e0991a0", "patch": "@@ -334,30 +334,30 @@ create_phi_node (tree var, basic_block bb)\n    PHI points to the reallocated phi node when we return.  */\n \n void\n-add_phi_arg (tree *phi, tree def, edge e)\n+add_phi_arg (tree phi, tree def, edge e)\n {\n   basic_block bb = e->dest;\n \n-  gcc_assert (bb == bb_for_stmt (*phi));\n+  gcc_assert (bb == bb_for_stmt (phi));\n \n   /* We resize PHI nodes upon edge creation.  We should always have\n      enough room at this point.  */\n-  gcc_assert (PHI_NUM_ARGS (*phi) <= PHI_ARG_CAPACITY (*phi));\n+  gcc_assert (PHI_NUM_ARGS (phi) <= PHI_ARG_CAPACITY (phi));\n \n   /* We resize PHI nodes upon edge creation.  We should always have\n      enough room at this point.  */\n-  gcc_assert (e->dest_idx < (unsigned int) PHI_NUM_ARGS (*phi));\n+  gcc_assert (e->dest_idx < (unsigned int) PHI_NUM_ARGS (phi));\n \n   /* Copy propagation needs to know what object occur in abnormal\n      PHI nodes.  This is a convenient place to record such information.  */\n   if (e->flags & EDGE_ABNORMAL)\n     {\n       SSA_NAME_OCCURS_IN_ABNORMAL_PHI (def) = 1;\n-      SSA_NAME_OCCURS_IN_ABNORMAL_PHI (PHI_RESULT (*phi)) = 1;\n+      SSA_NAME_OCCURS_IN_ABNORMAL_PHI (PHI_RESULT (phi)) = 1;\n     }\n \n-  SET_PHI_ARG_DEF (*phi, e->dest_idx, def);\n-  PHI_ARG_NONZERO (*phi, e->dest_idx) = false;\n+  SET_PHI_ARG_DEF (phi, e->dest_idx, def);\n+  PHI_ARG_NONZERO (phi, e->dest_idx) = false;\n }\n \n /* Remove the Ith argument from PHI's argument list.  This routine assumes"}, {"sha": "9bc66599dfec676cad9e78430db9d42d8d8a4607", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=d2e398dfc83188c4a94e191d51689ab56e0991a0", "patch": "@@ -4591,7 +4591,7 @@ protect_loop_closed_ssa_form_use (edge exit, use_operand_p op_p)\n \n       phi = create_phi_node (new_name, exit->dest);\n       SSA_NAME_DEF_STMT (new_name) = phi;\n-      add_phi_arg (&phi, use, exit);\n+      add_phi_arg (phi, use, exit);\n     }\n \n   SET_USE (op_p, PHI_RESULT (phi));"}, {"sha": "01c75c87cfa9dd88a042853fd8095981ba2e5de5", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=d2e398dfc83188c4a94e191d51689ab56e0991a0", "patch": "@@ -110,8 +110,8 @@ create_iv (tree base, tree step, tree var, struct loop *loop,\n \n   stmt = create_phi_node (vb, loop->header);\n   SSA_NAME_DEF_STMT (vb) = stmt;\n-  add_phi_arg (&stmt, initial, loop_preheader_edge (loop));\n-  add_phi_arg (&stmt, va, loop_latch_edge (loop));\n+  add_phi_arg (stmt, initial, loop_preheader_edge (loop));\n+  add_phi_arg (stmt, va, loop_latch_edge (loop));\n }\n \n /* Add exit phis for the USE on EXIT.  */\n@@ -140,7 +140,7 @@ add_exit_phis_edge (basic_block exit, tree use)\n   phi = create_phi_node (use, exit);\n \n   FOR_EACH_EDGE (e, ei, exit->preds)\n-    add_phi_arg (&phi, use, e);\n+    add_phi_arg (phi, use, e);\n \n   SSA_NAME_DEF_STMT (use) = def_stmt;\n }\n@@ -420,7 +420,7 @@ split_loop_exit_edge (edge exit)\n       new_name = duplicate_ssa_name (name, NULL);\n       new_phi = create_phi_node (new_name, bb);\n       SSA_NAME_DEF_STMT (new_name) = new_phi;\n-      add_phi_arg (&new_phi, name, exit);\n+      add_phi_arg (new_phi, name, exit);\n       SET_USE (op_p, new_name);\n     }\n }\n@@ -672,7 +672,7 @@ lv_adjust_loop_header_phi (basic_block first, basic_block second,\n       if (e2)\n \t{\n \t  tree def = PHI_ARG_DEF (phi2, e2->dest_idx);\n-\t  add_phi_arg (&phi1, def, e);\n+\t  add_phi_arg (phi1, def, e);\n \t}\n     }\n }"}, {"sha": "7cffc5656991b6d56dbb5fc4d57c1740ab3abe6c", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=d2e398dfc83188c4a94e191d51689ab56e0991a0", "patch": "@@ -1555,7 +1555,7 @@ insert_aux (basic_block block)\n \t\t\t\t\t\t\t PHI_RESULT (temp));\n \t\t\t  FOR_EACH_EDGE (pred, ei, block->preds)\n \t\t\t    {\n-\t\t\t      add_phi_arg (&temp, avail[pred->src->index],\n+\t\t\t      add_phi_arg (temp, avail[pred->src->index],\n \t\t\t\t\t   pred);\n \t\t\t    }\n \t\t\t  if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "d5272d533740a0de4e47653230be07d30be198f4", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=d2e398dfc83188c4a94e191d51689ab56e0991a0", "patch": "@@ -299,7 +299,7 @@ create_edge_and_update_destination_phis (struct redirection_data *rd)\n   for (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n     {\n       int indx = phi_arg_from_edge (phi, rd->outgoing_edge);\n-      add_phi_arg (&phi, PHI_ARG_DEF_TREE (phi, indx), e);\n+      add_phi_arg (phi, PHI_ARG_DEF_TREE (phi, indx), e);\n     }\n }\n "}, {"sha": "8e2e0982cded4b3e69cde596f922858341a5daa2", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=d2e398dfc83188c4a94e191d51689ab56e0991a0", "patch": "@@ -96,7 +96,7 @@ flush_pending_stmts (edge e)\n        phi = PHI_CHAIN (phi), arg = TREE_CHAIN (arg))\n     {\n       tree def = TREE_VALUE (arg);\n-      add_phi_arg (&phi, def, e);\n+      add_phi_arg (phi, def, e);\n     }\n \n   PENDING_STMT (e) = NULL;"}, {"sha": "5c5e09cce0573412819fdf5f75d860d59e271ce7", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=d2e398dfc83188c4a94e191d51689ab56e0991a0", "patch": "@@ -589,7 +589,7 @@ adjust_accumulator_values (block_stmt_iterator bsi, tree m, tree a, edge back)\n \tif (PHI_RESULT (phi) == a_acc)\n \t  break;\n \n-      add_phi_arg (&phi, a_acc_arg, back);\n+      add_phi_arg (phi, a_acc_arg, back);\n     }\n \n   if (m_acc)\n@@ -598,7 +598,7 @@ adjust_accumulator_values (block_stmt_iterator bsi, tree m, tree a, edge back)\n \tif (PHI_RESULT (phi) == m_acc)\n \t  break;\n \n-      add_phi_arg (&phi, m_acc_arg, back);\n+      add_phi_arg (phi, m_acc_arg, back);\n     }\n }\n \n@@ -736,7 +736,7 @@ eliminate_tail_call (struct tailcall *t)\n       if (!phi)\n \tcontinue;\n \n-      add_phi_arg (&phi, TREE_VALUE (args), e);\n+      add_phi_arg (phi, TREE_VALUE (args), e);\n     }\n \n   /* Add phi nodes for the call clobbered variables.  */\n@@ -766,15 +766,15 @@ eliminate_tail_call (struct tailcall *t)\n \t  var_ann (param)->default_def = new_name;\n \t  phi = create_phi_node (name, first);\n \t  SSA_NAME_DEF_STMT (name) = phi;\n-\t  add_phi_arg (&phi, new_name, EDGE_SUCC (ENTRY_BLOCK_PTR, 0));\n+\t  add_phi_arg (phi, new_name, EDGE_SUCC (ENTRY_BLOCK_PTR, 0));\n \n \t  /* For all calls the same set of variables should be clobbered.  This\n \t     means that there always should be the appropriate phi node except\n \t     for the first time we eliminate the call.  */\n \t  gcc_assert (EDGE_COUNT (first->preds) <= 2);\n \t}\n \n-      add_phi_arg (&phi, V_MAY_DEF_OP (v_may_defs, i), e);\n+      add_phi_arg (phi, V_MAY_DEF_OP (v_may_defs, i), e);\n     }\n \n   /* Update the values of accumulators.  */\n@@ -884,7 +884,7 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n \t      var_ann (param)->default_def = new_name;\n \t      phi = create_phi_node (name, first);\n \t      SSA_NAME_DEF_STMT (name) = phi;\n-\t      add_phi_arg (&phi, new_name, EDGE_PRED (first, 0));\n+\t      add_phi_arg (phi, new_name, EDGE_PRED (first, 0));\n \t    }\n \t  phis_constructed = true;\n \t}\n@@ -897,7 +897,7 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n \t  add_referenced_tmp_var (tmp);\n \n \t  phi = create_phi_node (tmp, first);\n-\t  add_phi_arg (&phi,\n+\t  add_phi_arg (phi,\n \t\t       /* RET_TYPE can be a float when -ffast-maths is\n \t\t\t  enabled.  */\n \t\t       fold_convert (ret_type, integer_zero_node),\n@@ -913,7 +913,7 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n \t  add_referenced_tmp_var (tmp);\n \n \t  phi = create_phi_node (tmp, first);\n-\t  add_phi_arg (&phi,\n+\t  add_phi_arg (phi,\n \t\t       /* RET_TYPE can be a float when -ffast-maths is\n \t\t\t  enabled.  */\n \t\t       fold_convert (ret_type, integer_one_node),"}, {"sha": "57739931bebeb98d2cda5e6eb1445d0066a4e7ae", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2e398dfc83188c4a94e191d51689ab56e0991a0/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=d2e398dfc83188c4a94e191d51689ab56e0991a0", "patch": "@@ -504,7 +504,7 @@ slpeel_update_phis_for_duplicate_loop (struct loop *orig_loop,\n     {\n       /* step 1.  */\n       def = PHI_ARG_DEF_FROM_EDGE (phi_orig, entry_arg_e);\n-      add_phi_arg (&phi_new, def, new_loop_entry_e);\n+      add_phi_arg (phi_new, def, new_loop_entry_e);\n \n       /* step 2.  */\n       def = PHI_ARG_DEF_FROM_EDGE (phi_orig, orig_loop_latch);\n@@ -518,7 +518,7 @@ slpeel_update_phis_for_duplicate_loop (struct loop *orig_loop,\n \n       /* An ordinary ssa name defined in the loop.  */\n       new_ssa_name = *new_name_ptr;\n-      add_phi_arg (&phi_new, new_ssa_name, loop_latch_edge (new_loop));\n+      add_phi_arg (phi_new, new_ssa_name, loop_latch_edge (new_loop));\n \n       /* step 3 (case 1).  */\n       if (!after)\n@@ -635,8 +635,8 @@ slpeel_update_phi_nodes_for_guard (edge guard_edge,\n               loop_arg = orig_def;\n             }\n         }\n-      add_phi_arg (&new_phi, loop_arg, loop->exit_edges[0]);\n-      add_phi_arg (&new_phi, guard_arg, guard_edge);\n+      add_phi_arg (new_phi, loop_arg, loop->exit_edges[0]);\n+      add_phi_arg (new_phi, guard_arg, guard_edge);\n \n       /* 3. Update phi in successor block.  */\n       gcc_assert (PHI_ARG_DEF_FROM_EDGE (update_phi, e) == loop_arg\n@@ -763,7 +763,7 @@ slpeel_tree_duplicate_loop_to_edge_cfg (struct loop *loop, struct loops *loops,\n \t  else\n \t    new_loop_exit_edge = EDGE_SUCC (new_loop->header, 0);\n   \n-\t  add_phi_arg (&phi, phi_arg, new_loop_exit_edge);\t\n+\t  add_phi_arg (phi, phi_arg, new_loop_exit_edge);\t\n \t}\n     }    \n    \n@@ -796,7 +796,7 @@ slpeel_tree_duplicate_loop_to_edge_cfg (struct loop *loop, struct loops *loops,\n \t{\n \t  phi_arg = PHI_ARG_DEF_FROM_EDGE (phi, entry_e);\n \t  if (phi_arg)\n-\t    add_phi_arg (&phi, phi_arg, new_exit_e);\t\n+\t    add_phi_arg (phi, phi_arg, new_exit_e);\t\n \t}    \n \n       redirect_edge_and_branch_force (entry_e, new_loop->header);\n@@ -2646,8 +2646,8 @@ vectorizable_load (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt)\n       msq = make_ssa_name (vec_dest, NULL_TREE);\n       phi_stmt = create_phi_node (msq, loop->header); /* CHECKME */\n       SSA_NAME_DEF_STMT (msq) = phi_stmt;\n-      add_phi_arg (&phi_stmt, msq_init, loop_preheader_edge (loop));\n-      add_phi_arg (&phi_stmt, lsq, loop_latch_edge (loop));\n+      add_phi_arg (phi_stmt, msq_init, loop_preheader_edge (loop));\n+      add_phi_arg (phi_stmt, lsq, loop_latch_edge (loop));\n \n \n       /* <5> Create <vec_dest = realign_load (msq, lsq, magic)> in loop  */"}]}