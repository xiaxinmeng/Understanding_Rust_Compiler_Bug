{"sha": "08b4fa8a7b43c83479339a6d7e9f5fd07553b302", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhiNGZhOGE3YjQzYzgzNDc5MzM5YTZkN2U5ZjVmZDA3NTUzYjMwMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-26T19:04:54Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-26T19:04:54Z"}, "message": "Don't look up methods for pointer to interface.\n\nFrom-SVN: r171562", "tree": {"sha": "56264158b207937d6617bfe8b90821378c76b6a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56264158b207937d6617bfe8b90821378c76b6a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08b4fa8a7b43c83479339a6d7e9f5fd07553b302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b4fa8a7b43c83479339a6d7e9f5fd07553b302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08b4fa8a7b43c83479339a6d7e9f5fd07553b302", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b4fa8a7b43c83479339a6d7e9f5fd07553b302/comments", "author": null, "committer": null, "parents": [{"sha": "cb83a137db640e7af9ce13ea9d42b2f90f0442cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb83a137db640e7af9ce13ea9d42b2f90f0442cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb83a137db640e7af9ce13ea9d42b2f90f0442cd"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "6feb035a9267c280b21152df49e0628bcdc23887", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b4fa8a7b43c83479339a6d7e9f5fd07553b302/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b4fa8a7b43c83479339a6d7e9f5fd07553b302/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=08b4fa8a7b43c83479339a6d7e9f5fd07553b302", "patch": "@@ -7995,7 +7995,7 @@ Type::bind_field_or_method(Gogo* gogo, const Type* type, Expression* expr,\n \n   const Named_type* nt = type->deref()->named_type();\n   const Struct_type* st = type->deref()->struct_type();\n-  const Interface_type* it = type->deref()->interface_type();\n+  const Interface_type* it = type->interface_type();\n \n   // If this is a pointer to a pointer, then it is possible that the\n   // pointed-to type has methods.\n@@ -8011,7 +8011,6 @@ Type::bind_field_or_method(Gogo* gogo, const Type* type, Expression* expr,\n \treturn Expression::make_error(location);\n       nt = type->points_to()->named_type();\n       st = type->points_to()->struct_type();\n-      it = type->points_to()->interface_type();\n     }\n \n   bool receiver_can_be_pointer = (expr->type()->points_to() != NULL\n@@ -8164,7 +8163,7 @@ Type::find_field_or_method(const Type* type,\n     }\n \n   // Interface types can have methods.\n-  const Interface_type* it = type->deref()->interface_type();\n+  const Interface_type* it = type->interface_type();\n   if (it != NULL && it->find_method(name) != NULL)\n     {\n       *is_method = true;\n@@ -8326,12 +8325,12 @@ Type::is_unexported_field_or_method(Gogo* gogo, const Type* type,\n \t}\n     }\n \n-  type = type->deref();\n-\n   const Interface_type* it = type->interface_type();\n   if (it != NULL && it->is_unexported_method(gogo, name))\n     return true;\n \n+  type = type->deref();\n+\n   const Struct_type* st = type->struct_type();\n   if (st != NULL && st->is_unexported_local_field(gogo, name))\n     return true;"}, {"sha": "0a4d7ab61eeb137b498c9c13f177d675a240547f", "filename": "gcc/testsuite/go.test/test/hashmap.go", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b4fa8a7b43c83479339a6d7e9f5fd07553b302/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fhashmap.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b4fa8a7b43c83479339a6d7e9f5fd07553b302/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fhashmap.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fhashmap.go?ref=08b4fa8a7b43c83479339a6d7e9f5fd07553b302", "patch": "@@ -21,7 +21,7 @@ func ASSERT(p bool) {\n \n type KeyType interface {\n \tHash() uint32\n-\tMatch(other *KeyType) bool\n+\tMatch(other KeyType) bool\n }\n \n \n@@ -31,8 +31,8 @@ type ValueType interface {\n \n \n type Entry struct {\n-\tkey *KeyType\n-\tvalue *ValueType\n+\tkey KeyType\n+\tvalue ValueType\n }\n \n \n@@ -68,7 +68,7 @@ func (m *HashMap) Initialize (initial_log2_capacity uint32) {\n }\n \n \n-func (m *HashMap) Probe (key *KeyType) *Entry {\n+func (m *HashMap) Probe (key KeyType) *Entry {\n \tASSERT(key != nil)\n \n \tvar i uint32 = key.Hash() % m.capacity()\n@@ -86,7 +86,7 @@ func (m *HashMap) Probe (key *KeyType) *Entry {\n }\n \n \n-func (m *HashMap) Lookup (key *KeyType, insert bool) *Entry {\n+func (m *HashMap) Lookup (key KeyType, insert bool) *Entry {\n \t// Find a matching entry.\n \tvar p *Entry = m.Probe(key)\n \t\tif p.key != nil {\n@@ -145,7 +145,7 @@ func (n *Number) Hash() uint32 {\n }\n \n \n-func (n *Number) Match(other *KeyType) bool {\n+func (n *Number) Match(other KeyType) bool {\n \t// var y *Number = other\n \t// return n.x == y.x\n \treturn false"}]}