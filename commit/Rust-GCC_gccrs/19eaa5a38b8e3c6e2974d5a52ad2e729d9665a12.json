{"sha": "19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTllYWE1YTM4YjhlM2M2ZTI5NzRkNWE1MmFkMmU3MjlkOTY2NWExMg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-12-13T05:00:15Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-12-13T05:00:15Z"}, "message": "loader.exp (gcj_loader_test_one): Use libjava_prune_warnings.\n\n\t* libjava.loader/loader.exp (gcj_loader_test_one): Use\n\tlibjava_prune_warnings.\n\t(gcj_loader_run): Likewise.\n\t* libjava.mauve/mauve.exp (test_mauve): Use\n\tlibjava_prune_warnings.\n\t(test_mauve_sim): Likewise.\n\t* libjava.jni/jni.exp (gcj_jni_compile_c_to_so): Use\n\tlibjava_prune_warnings.\n\t(gcj_jni_build_header): Likewise.\n\t* lib/libjava.exp (libjava_prune_warnings): New proc.\n\t(gcj_link): Use it.\n\t(test_libjava_from_source): Likewise.\n\t(test_libjava_from_javac): Likewise.\n\nFrom-SVN: r60089", "tree": {"sha": "73f2abae246af7f6615b11cc01bfe25e9809e4e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73f2abae246af7f6615b11cc01bfe25e9809e4e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12/comments", "author": null, "committer": null, "parents": [{"sha": "dd05b1b461a3ba163cac1e3ce7801ce042ea2964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd05b1b461a3ba163cac1e3ce7801ce042ea2964", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd05b1b461a3ba163cac1e3ce7801ce042ea2964"}], "stats": {"total": 77, "additions": 56, "deletions": 21}, "files": [{"sha": "8791dd4ec85cfe13397de837cb455aee31ee1221", "filename": "libjava/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12/libjava%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12/libjava%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FChangeLog?ref=19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12", "patch": "@@ -1,3 +1,19 @@\n+2002-12-12  Tom Tromey  <tromey@redhat.com>\n+\n+\t* libjava.loader/loader.exp (gcj_loader_test_one): Use\n+\tlibjava_prune_warnings.\n+\t(gcj_loader_run): Likewise.\n+\t* libjava.mauve/mauve.exp (test_mauve): Use\n+\tlibjava_prune_warnings.\n+\t(test_mauve_sim): Likewise.\n+\t* libjava.jni/jni.exp (gcj_jni_compile_c_to_so): Use\n+\tlibjava_prune_warnings.\n+\t(gcj_jni_build_header): Likewise.\n+\t* lib/libjava.exp (libjava_prune_warnings): New proc.\n+\t(gcj_link): Use it.\n+\t(test_libjava_from_source): Likewise.\n+\t(test_libjava_from_javac): Likewise.\n+\n 2002-12-08  Tom Tromey  <tromey@redhat.com>\n \n \tTest for PR libgcj/8823:"}, {"sha": "a807c4c8d60d0ac4d6e78f7e5f3163ce925a66e8", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12", "patch": "@@ -10,6 +10,22 @@ if ![info exists tmpdir] {\n     set tmpdir \"/tmp\"\n }\n \n+# This is like `prune_warnings', but it also prunes away a warning\n+# from the bytecode front end that we don't care about.\n+proc libjava_prune_warnings {text} {\n+    set text [prune_warnings $text]\n+    set tlist [split $text \\n]\n+    set len [llength $tlist]\n+    for {set i [expr {$len - 1}]} {$i >= 2} {incr i -1} {\n+\tif {[string match \"*unreachable bytecode*\" [lindex $tlist $i]]} {\n+\t    # Delete this line and the previous two lines.\n+\t    set tlist [lreplace $tlist [expr {$i - 2}] $i]\n+\t    incr i -2\n+\t}\n+    }\n+    return [join $tlist \\n]\n+}\n+\n # This is like `target_compile' but it does some surgery to work\n # around stupid DejaGNU bugs.  In particular DejaGNU has very poor\n # quoting, so for instance a `$' will be re-evaluated at spawn time.\n@@ -421,8 +437,8 @@ proc gcj_link {program main files {options {}}} {\n \teval lappend arguments $options\n     }\n     lappend arguments \"additional_flags=--main=$main\"\n-    set x [prune_warnings [libjava_tcompile $files $program executable \\\n-\t\t\t     $arguments]]\n+    set x [libjava_prune_warnings \\\n+\t     [libjava_tcompile $files $program executable $arguments]]\n     if {$x != \"\"} {\n \tverbose \"link failure: $x\" 2\n \tfail \"linking $program\"\n@@ -569,7 +585,7 @@ proc test_libjava_from_source { options srcfile compile_args inpfile resultfile\n \n     set removeList [list $executable]\n \n-    set x [prune_warnings \\\n+    set x [libjava_prune_warnings \\\n \t     [libjava_tcompile $srcfile \"$executable\" $target $args]]\n     if {[info exists opts(xfail-gcj)]} {\n \tsetup_xfail *-*-*\n@@ -683,11 +699,11 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     set jvscan [find_jvscan]\n     verbose \"jvscan is $jvscan\"\n     set main_name [string trim \\\n-\t\t     [prune_warnings \\\n+\t\t     [libjava_prune_warnings \\\n \t\t\t[lindex [local_exec \"$jvscan --encoding=UTF-8 $srcfile --print-main\" \"\" \"\" 300] 1]]]\n     verbose \"main name is $main_name\"\n     set class_out [string trim \\\n-\t\t     [prune_warnings \\\n+\t\t     [libjava_prune_warnings \\\n \t\t\t[lindex [local_exec \"$jvscan --encoding=UTF-8 $srcfile --list-class\" \"\" \"\" 300] 1]]]\n     verbose \"class list is $class_out\"\n \n@@ -765,7 +781,7 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n     if {$mode == \"compile\"} {\n \tforeach c_file $class_files {\n \t    set executable [file rootname [file tail $c_file]].o\n-\t    set x [prune_warnings \\\n+\t    set x [libjava_prune_warnings \\\n \t\t     [libjava_tcompile $c_file \"$executable\" $type $args]]\n \t    lappend removeList $executable\n \t    if {$x != \"\"} {\n@@ -781,7 +797,7 @@ proc test_libjava_from_javac { options srcfile compile_args inpfile resultfile e\n \t    set hack \"$hack $stupid\"\n \t}\n \tlappend removeList $executable\n-\tset x [prune_warnings \\\n+\tset x [libjava_prune_warnings \\\n \t\t [libjava_tcompile $hack \"$executable\" $type $args]]\n     }\n     if {[info exists opts(xfail-byte)]} {"}, {"sha": "2aec4c9bf8bc0f2d1ce9971dc1707d50bb7645e1", "filename": "libjava/testsuite/libjava.jni/jni.exp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fjni.exp?ref=19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12", "patch": "@@ -15,7 +15,8 @@ proc gcj_jni_compile_c_to_so {file {options {}}} {\n   # Find jni.h.\n   lappend options \"additional_flags=-I$srcdir/../include\"\n \n-  set x [prune_warnings [target_compile $file $soname executable $options]]\n+  set x [libjava_prune_warnings \\\n+\t   [target_compile $file $soname executable $options]]\n   if {$x != \"\"} {\n     verbose \"target_compile failed: $x\" 2\n     fail \"$name.c compilation\"\n@@ -30,7 +31,7 @@ proc gcj_jni_compile_c_to_so {file {options {}}} {\n proc gcj_jni_build_header {file} {\n   set gcjh [find_gcjh]\n   set file [file rootname $file]\n-  set x [string trim [prune_warnings \\\n+  set x [string trim [libjava_prune_warnings \\\n \t\t\t[lindex [local_exec \"$gcjh -jni $file\" \"\" \"\" 300] 1]]]\n   if {$x != \"\"} {\n     verbose \"local_exec failed: $x\" 2"}, {"sha": "e306a312c83df11ee2b3aded3bc2e0bde728aaf0", "filename": "libjava/testsuite/libjava.loader/loader.exp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12/libjava%2Ftestsuite%2Flibjava.loader%2Floader.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12/libjava%2Ftestsuite%2Flibjava.loader%2Floader.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.loader%2Floader.exp?ref=19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12", "patch": "@@ -12,7 +12,7 @@ proc gcj_loader_test_one {srcfile} {\n     set errname [file rootname [file tail $srcfile]]\n     set args [libjava_arguments link]\n     lappend args \"additional_flags=--main=[file rootname [file tail $srcfile]] $srcdir/$subdir/MyLoader.java $objdir/dummy.o\"\n-  set x [prune_warnings \\\n+  set x [libjava_prune_warnings \\\n \t     [libjava_tcompile $srcfile \"$executable\" executable $args]]\n \n     if { $x != \"\" } {\n@@ -46,8 +46,8 @@ proc gcj_loader_run {} {\n \n   set args [libjava_arguments compile]\n   lappend args \"additional_flags=--resource $objdir/dummy.class\"\n-  set x [prune_warnings \\\n-\t     [libjava_tcompile \"$objdir/dummy.class\" \"$objdir/dummy.o\" object $args]]\n+  set x [libjava_prune_warnings \\\n+\t   [libjava_tcompile \"$objdir/dummy.class\" \"$objdir/dummy.o\" object $args]]\n \n     if { $x != \"\" } {\n \tverbose \"resource compilation failed: $x\" 2"}, {"sha": "1ca2884249c450b63dcce94e682fae5495cacebe", "filename": "libjava/testsuite/libjava.mauve/mauve.exp", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12/libjava%2Ftestsuite%2Flibjava.mauve%2Fmauve.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12/libjava%2Ftestsuite%2Flibjava.mauve%2Fmauve.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.mauve%2Fmauve.exp?ref=19eaa5a38b8e3c6e2974d5a52ad2e729d9665a12", "patch": "@@ -154,7 +154,7 @@ proc test_mauve {} {\n   foreach base {DejaGNUTestHarness gnu/testlet/SimpleTestHarness gnu/testlet/TestHarness gnu/testlet/Testlet gnu/testlet/ResourceNotFoundException gnu/testlet/config} {\n     set file $base.class\n     set obj $base.o\n-    set x [prune_warnings \\\n+    set x [libjava_prune_warnings \\\n \t     [target_compile [pwd]/$file $obj object $compile_args]]\n     if {$x != \"\"} then {\n       fail \"Compile $obj\"\n@@ -180,7 +180,7 @@ proc test_mauve {} {\n       if {! [file exists $obj]} then {\n \tverbose \"compiling $obj for test of $class\"\n \tset srcfile [file rootname $obj].class\n-\tset x [prune_warnings \\\n+\tset x [libjava_prune_warnings \\\n \t\t [target_compile [pwd]/$srcfile $obj object $compile_args]]\n \tif {$x != \"\"} then {\n \t  fail \"Compile $obj for $class\"\n@@ -195,8 +195,9 @@ proc test_mauve {} {\n       continue\n     }\n \n-    set x [prune_warnings [target_compile [concat $uses($file) $objlist] \\\n-\t\t\t     $Executable executable $link_args]]\n+    set x [libjava_prune_warnings \\\n+\t     [target_compile [concat $uses($file) $objlist] \\\n+\t\t$Executable executable $link_args]]\n     if {$x != \"\"} then {\n       set proc_ok 0\n       fail \"Link for $class\"\n@@ -292,7 +293,7 @@ proc test_mauve_sim {} {\n \t\t  gnu/testlet/config} {\n     set file $base.class\n     set obj $base.o\n-    set x [prune_warnings \\\n+    set x [libjava_prune_warnings \\\n \t     [target_compile [pwd]/$file $obj object $compile_args]]\n     if {$x != \"\"} then {\n       fail \"Compile $obj\"\n@@ -321,7 +322,7 @@ proc test_mauve_sim {} {\n       if {! [file exists $obj]} then {\n \tverbose \"compiling $obj for test of $class\"\n \tset srcfile [file rootname $obj].class\n-\tset x [prune_warnings \\\n+\tset x [libjava_prune_warnings \\\n \t\t [target_compile [pwd]/$srcfile $obj object $compile_args]]\n \tif {$x != \"\"} then {\n \t  fail \"Compile $obj for $class\"\n@@ -357,7 +358,7 @@ proc test_mauve_sim {} {\n \treturn 0\n     }\n \n-    set x [prune_warnings \\\n+    set x [libjava_prune_warnings \\\n \t     [target_compile gnu/testlet/DejaGNUTestHarness.class \\\n \t\tgnu/testlet/DejaGNUTestHarness.o object $compile_args]]\n     if {$x != \"\"} then {\n@@ -366,8 +367,9 @@ proc test_mauve_sim {} {\n \tcontinue\n     }\n \n-    set x [prune_warnings [target_compile [concat $uses($file) $objlist] \\\n-\t\t\t     $Executable executable $link_args]]\n+    set x [libjava_prune_warnings \\\n+\t     [target_compile [concat $uses($file) $objlist] \\\n+\t\t$Executable executable $link_args]]\n     if {$x != \"\"} then {\n       set proc_ok 0\n       fail \"Link for $class\""}]}