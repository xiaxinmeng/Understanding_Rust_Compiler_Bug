{"sha": "e61492549b95dff635395f69034b5fefa00e339a", "node_id": "C_kwDOANBUbNoAKGU2MTQ5MjU0OWI5NWRmZjYzNTM5NWY2OTAzNGI1ZmVmYTAwZTMzOWE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-12T13:13:37Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-13T12:32:22Z"}, "message": "libstdc++: Improve doxygen docs for algorithms and more\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ostream_insert.h: Mark helper functions as\n\tundocumented by Doxygen.\n\t* include/bits/stl_algo.h: Use markdown for formatting and mark\n\thelper functions as undocumented.\n\t* include/bits/stl_numeric.h:  Likewise.\n\t* include/bits/stl_pair.h (pair): Add @headerfile.", "tree": {"sha": "4b6821044a87c98408bb1250118fdf99b3f1176b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b6821044a87c98408bb1250118fdf99b3f1176b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e61492549b95dff635395f69034b5fefa00e339a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61492549b95dff635395f69034b5fefa00e339a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e61492549b95dff635395f69034b5fefa00e339a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e61492549b95dff635395f69034b5fefa00e339a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "171f41f124bc1d5d80a395d27833a578cceba9e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/171f41f124bc1d5d80a395d27833a578cceba9e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/171f41f124bc1d5d80a395d27833a578cceba9e7"}], "stats": {"total": 216, "additions": 112, "deletions": 104}, "files": [{"sha": "f236353b2a68465d4470027d3529625b6c9e06b7", "filename": "libstdc++-v3/include/bits/ostream_insert.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61492549b95dff635395f69034b5fefa00e339a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61492549b95dff635395f69034b5fefa00e339a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h?ref=e61492549b95dff635395f69034b5fefa00e339a", "patch": "@@ -40,6 +40,8 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  /// @cond undocumented\n+\n   template<typename _CharT, typename _Traits>\n     inline void\n     __ostream_write(basic_ostream<_CharT, _Traits>& __out,\n@@ -124,6 +126,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n #endif\n \n+  /// @endcond\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "1d8ed4e5fa813e40ef4c952b4c8a2cd9afcbd554", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 100, "deletions": 98, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61492549b95dff635395f69034b5fefa00e339a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61492549b95dff635395f69034b5fefa00e339a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=e61492549b95dff635395f69034b5fefa00e339a", "patch": "@@ -1617,6 +1617,8 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n \t\t\t\t     __gnu_cxx::__ops::__pred_iter(__pred));\n     }\n \n+  /// @cond undocumented\n+\n   /// This is a helper function for the sort routines.\n   template<typename _RandomAccessIterator, typename _Compare>\n     _GLIBCXX20_CONSTEXPR\n@@ -1671,6 +1673,8 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n       return __result_real_last;\n     }\n \n+  /// @endcond\n+\n   /**\n    *  @brief Copy the smallest elements of a sequence.\n    *  @ingroup sorting_algorithms\n@@ -1680,14 +1684,14 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n    *  @param  __result_last    Another random-access iterator.\n    *  @return   An iterator indicating the end of the resulting sequence.\n    *\n-   *  Copies and sorts the smallest N values from the range @p [__first,__last)\n-   *  to the range beginning at @p __result_first, where the number of\n-   *  elements to be copied, @p N, is the smaller of @p (__last-__first) and\n-   *  @p (__result_last-__result_first).\n-   *  After the sort if @e i and @e j are iterators in the range\n-   *  @p [__result_first,__result_first+N) such that i precedes j then\n-   *  *j<*i is false.\n-   *  The value returned is @p __result_first+N.\n+   *  Copies and sorts the smallest `N` values from the range\n+   *  `[__first, __last)` to the range beginning at `__result_first`, where\n+   *  the number of elements to be copied, `N`, is the smaller of\n+   *  `(__last - __first)` and `(__result_last - __result_first)`.\n+   *  After the sort if `i` and `j` are iterators in the range\n+   *  `[__result_first,__result_first + N)` such that `i` precedes `j` then\n+   *  `*j < *i` is false.\n+   *  The value returned is `__result_first + N`.\n   */\n   template<typename _InputIterator, typename _RandomAccessIterator>\n     _GLIBCXX20_CONSTEXPR\n@@ -1730,14 +1734,14 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n    *  @param  __comp    A comparison functor.\n    *  @return   An iterator indicating the end of the resulting sequence.\n    *\n-   *  Copies and sorts the smallest N values from the range @p [__first,__last)\n-   *  to the range beginning at @p result_first, where the number of\n-   *  elements to be copied, @p N, is the smaller of @p (__last-__first) and\n-   *  @p (__result_last-__result_first).\n-   *  After the sort if @e i and @e j are iterators in the range\n-   *  @p [__result_first,__result_first+N) such that i precedes j then\n-   *  @p __comp(*j,*i) is false.\n-   *  The value returned is @p __result_first+N.\n+   *  Copies and sorts the smallest `N` values from the range\n+   *  `[__first, __last)` to the range beginning at `result_first`, where\n+   *  the number of elements to be copied, `N`, is the smaller of\n+   *  `(__last - __first)` and `(__result_last - __result_first)`.\n+   *  After the sort if `i` and `j` are iterators in the range\n+   *  `[__result_first, __result_first + N)` such that `i` precedes `j` then\n+   *  `__comp(*j, *i)` is false.\n+   *  The value returned is `__result_first + N`.\n   */\n   template<typename _InputIterator, typename _RandomAccessIterator,\n \t   typename _Compare>\n@@ -1774,6 +1778,8 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n \t\t\t\t__gnu_cxx::__ops::__iter_comp_iter(__comp));\n     }\n \n+  /// @cond undocumented\n+\n   /// This is a helper function for the sort routine.\n   template<typename _RandomAccessIterator, typename _Compare>\n     _GLIBCXX20_CONSTEXPR\n@@ -1967,21 +1973,22 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n       std::__insertion_sort(__first, __last, __comp);\n     }\n \n+  /// @endcond\n+\n   // nth_element\n \n   // lower_bound moved to stl_algobase.h\n \n   /**\n-   *  @brief Finds the first position in which @p __val could be inserted\n+   *  @brief Finds the first position in which `__val` could be inserted\n    *         without changing the ordering.\n    *  @ingroup binary_search_algorithms\n-   *  @param  __first   An iterator.\n-   *  @param  __last    Another iterator.\n+   *  @param  __first   An iterator to the start of a sorted range.\n+   *  @param  __last    A past-the-end iterator for the sorted range.\n    *  @param  __val     The search term.\n    *  @param  __comp    A functor to use for comparisons.\n-   *  @return An iterator pointing to the first element <em>not less\n-   *           than</em> @p __val, or end() if every element is less\n-   *           than @p __val.\n+   *  @return An iterator pointing to the first element _not less than_\n+   *           `__val`, or `end()` if every element is less than `__val`.\n    *  @ingroup binary_search_algorithms\n    *\n    *  The comparison function should have the same effects on ordering as\n@@ -4313,8 +4320,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __new_value  The replacement value.\n    *  @return   replace() returns no value.\n    *\n-   *  For each iterator @c i in the range @p [__first,__last) if @c *i ==\n-   *  @p __old_value then the assignment @c *i = @p __new_value is performed.\n+   *  For each iterator `i` in the range `[__first,__last)` if\n+   *  `*i == __old_value` then the assignment `*i = __new_value` is performed.\n   */\n   template<typename _ForwardIterator, typename _Tp>\n     _GLIBCXX20_CONSTEXPR\n@@ -4346,8 +4353,8 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __new_value  The replacement value.\n    *  @return   replace_if() returns no value.\n    *\n-   *  For each iterator @c i in the range @p [__first,__last) if @p __pred(*i)\n-   *  is true then the assignment @c *i = @p __new_value is performed.\n+   *  For each iterator `i` in the range `[__first,__last)` if `__pred(*i)`\n+   *  is true then the assignment `*i = __new_value` is performed.\n   */\n   template<typename _ForwardIterator, typename _Predicate, typename _Tp>\n     _GLIBCXX20_CONSTEXPR\n@@ -4375,12 +4382,11 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @ingroup mutating_algorithms\n    *  @param  __first  A forward iterator.\n    *  @param  __last   A forward iterator.\n-   *  @param  __gen    A function object taking no arguments and returning\n-   *                 std::iterator_traits<_ForwardIterator>::value_type\n+   *  @param  __gen    A function object callable with no arguments.\n    *  @return   generate() returns no value.\n    *\n-   *  Performs the assignment @c *i = @p __gen() for each @c i in the range\n-   *  @p [__first,__last).\n+   *  Performs the assignment `*i = __gen()` for each `i` in the range\n+   *  `[__first, __last)`.\n   */\n   template<typename _ForwardIterator, typename _Generator>\n     _GLIBCXX20_CONSTEXPR\n@@ -4404,14 +4410,13 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @ingroup mutating_algorithms\n    *  @param  __first  A forward iterator.\n    *  @param  __n      The length of the sequence.\n-   *  @param  __gen    A function object taking no arguments and returning\n-   *                 std::iterator_traits<_ForwardIterator>::value_type\n-   *  @return   The end of the sequence, @p __first+__n\n+   *  @param  __gen    A function object callable with no arguments.\n+   *  @return   The end of the sequence, i.e., `__first + __n`\n    *\n-   *  Performs the assignment @c *i = @p __gen() for each @c i in the range\n-   *  @p [__first,__first+__n).\n+   *  Performs the assignment `*i = __gen()` for each `i` in the range\n+   *  `[__first, __first + __n)`.\n    *\n-   * If @p __n is negative, the function does nothing and returns @p __first.\n+   * If `__n` is negative, the function does nothing and returns `__first`.\n   */\n   // _GLIBCXX_RESOLVE_LIB_DEFECTS\n   // DR 865. More algorithms that throw away information\n@@ -4441,19 +4446,16 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __result  An output iterator.\n    *  @return   An iterator designating the end of the resulting sequence.\n    *\n-   *  Copies each element in the range @p [__first,__last) to the range\n-   *  beginning at @p __result, except that only the first element is copied\n+   *  Copies each element in the range `[__first, __last)` to the range\n+   *  beginning at `__result`, except that only the first element is copied\n    *  from groups of consecutive elements that compare equal.\n-   *  unique_copy() is stable, so the relative order of elements that are\n+   *  `unique_copy()` is stable, so the relative order of elements that are\n    *  copied is unchanged.\n-   *\n-   *  _GLIBCXX_RESOLVE_LIB_DEFECTS\n-   *  DR 241. Does unique_copy() require CopyConstructible and Assignable?\n-   *  \n-   *  _GLIBCXX_RESOLVE_LIB_DEFECTS\n-   *  DR 538. 241 again: Does unique_copy() require CopyConstructible and \n-   *  Assignable?\n-  */\n+   */\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // DR 241. Does unique_copy() require CopyConstructible and Assignable?\n+  // DR 538. 241 again: Does unique_copy() require CopyConstructible and\n+  // Assignable?\n   template<typename _InputIterator, typename _OutputIterator>\n     _GLIBCXX20_CONSTEXPR\n     inline _OutputIterator\n@@ -4485,16 +4487,15 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __binary_pred  A binary predicate.\n    *  @return   An iterator designating the end of the resulting sequence.\n    *\n-   *  Copies each element in the range @p [__first,__last) to the range\n-   *  beginning at @p __result, except that only the first element is copied\n-   *  from groups of consecutive elements for which @p __binary_pred returns\n+   *  Copies each element in the range `[__first, __last)` to the range\n+   *  beginning at `__result`, except that only the first element is copied\n+   *  from groups of consecutive elements for which `__binary_pred` returns\n    *  true.\n-   *  unique_copy() is stable, so the relative order of elements that are\n+   *  `unique_copy()` is stable, so the relative order of elements that are\n    *  copied is unchanged.\n-   *\n-   *  _GLIBCXX_RESOLVE_LIB_DEFECTS\n-   *  DR 241. Does unique_copy() require CopyConstructible and Assignable?\n-  */\n+   */\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // DR 241. Does unique_copy() require CopyConstructible and Assignable?\n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _BinaryPredicate>\n     _GLIBCXX20_CONSTEXPR\n@@ -4526,7 +4527,7 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __last    A forward iterator.\n    *  @return  Nothing.\n    *\n-   *  Reorder the elements in the range @p [__first,__last) using a random\n+   *  Reorder the elements in the range `[__first, __last)` using a random\n    *  distribution, so that every possible ordering of the sequence is\n    *  equally likely.\n    *\n@@ -4565,10 +4566,10 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __rand    The RNG functor or function.\n    *  @return  Nothing.\n    *\n-   *  Reorders the elements in the range @p [__first,__last) using @p __rand to\n-   *  provide a random distribution. Calling @p __rand(N) for a positive\n-   *  integer @p N should return a randomly chosen integer from the\n-   *  range [0,N).\n+   *  Reorders the elements in the range `[__first, __last)` using `__rand`\n+   *  to provide a random distribution. Calling `__rand(N)` for a positive\n+   *  integer `N` should return a randomly chosen integer from the\n+   *  range `[0, N)`.\n    *\n    *  @deprecated\n    *  Since C++14 `std::random_shuffle` is not part of the C++ standard.\n@@ -4607,13 +4608,13 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __first   A forward iterator.\n    *  @param  __last    A forward iterator.\n    *  @param  __pred    A predicate functor.\n-   *  @return  An iterator @p middle such that @p __pred(i) is true for each\n-   *  iterator @p i in the range @p [__first,middle) and false for each @p i\n-   *  in the range @p [middle,__last).\n+   *  @return  An iterator `middle` such that `__pred(i)` is true for each\n+   *  iterator `i` in the range `[__first, middle)` and false for each `i`\n+   *  in the range `[middle, __last)`.\n    *\n-   *  @p __pred must not modify its operand. @p partition() does not preserve\n+   *  `__pred` must not modify its operand. `partition()` does not preserve\n    *  the relative ordering of elements in each group, use\n-   *  @p stable_partition() if this is needed.\n+   *  `stable_partition()` if this is needed.\n   */\n   template<typename _ForwardIterator, typename _Predicate>\n     _GLIBCXX20_CONSTEXPR\n@@ -4641,13 +4642,14 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __last    Another iterator.\n    *  @return  Nothing.\n    *\n-   *  Sorts the smallest @p (__middle-__first) elements in the range\n-   *  @p [first,last) and moves them to the range @p [__first,__middle). The\n-   *  order of the remaining elements in the range @p [__middle,__last) is\n-   *  undefined.\n-   *  After the sort if @e i and @e j are iterators in the range\n-   *  @p [__first,__middle) such that i precedes j and @e k is an iterator in\n-   *  the range @p [__middle,__last) then *j<*i and *k<*i are both false.\n+   *  Sorts the smallest `(__middle - __first)` elements in the range\n+   *  `[first, last)` and moves them to the range `[__first, __middle)`. The\n+   *  order of the remaining elements in the range `[__middle, __last)` is\n+   *  unspecified.\n+   *  After the sort if `i` and `j` are iterators in the range\n+   *  `[__first, __middle)` such that `i` precedes `j` and `k` is an iterator\n+   *  in the range `[__middle, __last)` then `*j < *i` and `*k < *i` are\n+   *  both false.\n   */\n   template<typename _RandomAccessIterator>\n     _GLIBCXX20_CONSTEXPR\n@@ -4679,14 +4681,14 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __comp    A comparison functor.\n    *  @return  Nothing.\n    *\n-   *  Sorts the smallest @p (__middle-__first) elements in the range\n-   *  @p [__first,__last) and moves them to the range @p [__first,__middle). The\n-   *  order of the remaining elements in the range @p [__middle,__last) is\n-   *  undefined.\n-   *  After the sort if @e i and @e j are iterators in the range\n-   *  @p [__first,__middle) such that i precedes j and @e k is an iterator in\n-   *  the range @p [__middle,__last) then @p *__comp(j,*i) and @p __comp(*k,*i)\n-   *  are both false.\n+   *  Sorts the smallest `(__middle - __first)` elements in the range\n+   *  `[__first, __last)` and moves them to the range `[__first, __middle)`.\n+   *  The order of the remaining elements in the range `[__middle, __last)` is\n+   *  unspecified.\n+   *  After the sort if `i` and `j` are iterators in the range\n+   *  `[__first, __middle)` such that `i` precedes `j` and `k` is an iterator\n+   *  in the range `[__middle, __last)` then `*__comp(j, *i)` and\n+   *  `__comp(*k, *i)` are both false.\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n     _GLIBCXX20_CONSTEXPR\n@@ -4718,12 +4720,12 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __last    Another iterator.\n    *  @return  Nothing.\n    *\n-   *  Rearranges the elements in the range @p [__first,__last) so that @p *__nth\n+   *  Rearranges the elements in the range `[__first, __last)` so that `*__nth`\n    *  is the same element that would have been in that position had the\n-   *  whole sequence been sorted. The elements either side of @p *__nth are\n-   *  not completely sorted, but for any iterator @e i in the range\n-   *  @p [__first,__nth) and any iterator @e j in the range @p [__nth,__last) it\n-   *  holds that *j < *i is false.\n+   *  whole sequence been sorted. The elements either side of `*__nth` are\n+   *  not completely sorted, but for any iterator `i` in the range\n+   *  `[__first, __nth)` and any iterator `j` in the range `[__nth, __last)` it\n+   *  holds that `*j < *i` is false.\n   */\n   template<typename _RandomAccessIterator>\n     _GLIBCXX20_CONSTEXPR\n@@ -4758,12 +4760,12 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __comp    A comparison functor.\n    *  @return  Nothing.\n    *\n-   *  Rearranges the elements in the range @p [__first,__last) so that @p *__nth\n+   *  Rearranges the elements in the range `[__first, __last)` so that `*__nth`\n    *  is the same element that would have been in that position had the\n-   *  whole sequence been sorted. The elements either side of @p *__nth are\n-   *  not completely sorted, but for any iterator @e i in the range\n-   *  @p [__first,__nth) and any iterator @e j in the range @p [__nth,__last) it\n-   *  holds that @p __comp(*j,*i) is false.\n+   *  whole sequence been sorted. The elements either side of `*__nth` are\n+   *  not completely sorted, but for any iterator `i` in the range\n+   *  `[__first, __nth)` and any iterator `j` in the range `[__nth, __last)`\n+   *  it holds that `__comp(*j, *i)` is false.\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n     _GLIBCXX20_CONSTEXPR\n@@ -4796,12 +4798,12 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __last    Another iterator.\n    *  @return  Nothing.\n    *\n-   *  Sorts the elements in the range @p [__first,__last) in ascending order,\n-   *  such that for each iterator @e i in the range @p [__first,__last-1),  \n-   *  *(i+1)<*i is false.\n+   *  Sorts the elements in the range `[__first, __last)` in ascending order,\n+   *  such that for each iterator `i` in the range `[__first, __last - 1)`,\n+   *  `*(i+1) < *i` is false.\n    *\n    *  The relative ordering of equivalent elements is not preserved, use\n-   *  @p stable_sort() if this is needed.\n+   *  `stable_sort()` if this is needed.\n   */\n   template<typename _RandomAccessIterator>\n     _GLIBCXX20_CONSTEXPR\n@@ -4827,12 +4829,12 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __comp    A comparison functor.\n    *  @return  Nothing.\n    *\n-   *  Sorts the elements in the range @p [__first,__last) in ascending order,\n-   *  such that @p __comp(*(i+1),*i) is false for every iterator @e i in the\n-   *  range @p [__first,__last-1).\n+   *  Sorts the elements in the range `[__first, __last)` in ascending order,\n+   *  such that `__comp(*(i+1), *i)` is false for every iterator `i` in the\n+   *  range `[__first, __last - 1)`.\n    *\n    *  The relative ordering of equivalent elements is not preserved, use\n-   *  @p stable_sort() if this is needed.\n+   *  `stable_sort()` if this is needed.\n   */\n   template<typename _RandomAccessIterator, typename _Compare>\n     _GLIBCXX20_CONSTEXPR"}, {"sha": "f71236cab5d30837a44a9a40ebfe3e15b750291c", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61492549b95dff635395f69034b5fefa00e339a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61492549b95dff635395f69034b5fefa00e339a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=e61492549b95dff635395f69034b5fefa00e339a", "patch": "@@ -328,10 +328,9 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __last  End of input range.\n    *  @param  __result  Output sums.\n    *  @return  Iterator pointing just beyond the values written to result.\n-   *\n-   *  _GLIBCXX_RESOLVE_LIB_DEFECTS\n-   *  DR 539. partial_sum and adjacent_difference should mention requirements\n    */\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // DR 539. partial_sum and adjacent_difference should mention requirements\n   template<typename _InputIterator, typename _OutputIterator>\n     _GLIBCXX20_CONSTEXPR\n     _OutputIterator\n@@ -371,10 +370,9 @@ _GLIBCXX_BEGIN_NAMESPACE_ALGO\n    *  @param  __result  Output sum.\n    *  @param  __binary_op Function object.\n    *  @return  Iterator pointing just beyond the values written to result.\n-   *\n-   *  _GLIBCXX_RESOLVE_LIB_DEFECTS\n-   *  DR 539. partial_sum and adjacent_difference should mention requirements\n    */\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // DR 539. partial_sum and adjacent_difference should mention requirements\n   template<typename _InputIterator, typename _OutputIterator,\n \t   typename _BinaryOperation>\n     _GLIBCXX20_CONSTEXPR"}, {"sha": "831e770d54b74e25066a7fc3401708b945e43f5e", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e61492549b95dff635395f69034b5fefa00e339a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e61492549b95dff635395f69034b5fefa00e339a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=e61492549b95dff635395f69034b5fefa00e339a", "patch": "@@ -180,6 +180,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @tparam _T2  Type of second object.\n    *\n    *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>\n+   *\n+   * @headerfile utility\n    */\n   template<typename _T1, typename _T2>\n     struct pair\n@@ -757,9 +759,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus >= 201103L\n   // Various functions which give std::pair a tuple-like interface.\n \n+  /// @cond undocumented\n   template<typename _T1, typename _T2>\n     struct __is_tuple_like_impl<pair<_T1, _T2>> : true_type\n     { };\n+  /// @endcond\n \n   /// Partial specialization for std::pair\n   template<class _Tp1, class _Tp2>"}]}