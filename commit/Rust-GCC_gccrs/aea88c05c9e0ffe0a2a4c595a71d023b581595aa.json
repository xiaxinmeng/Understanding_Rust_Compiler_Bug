{"sha": "aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVhODhjMDVjOWUwZmZlMGEyYTRjNTk1YTcxZDAyM2I1ODE1OTVhYQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2009-05-03T11:25:20Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2009-05-03T11:25:20Z"}, "message": "defaults.h (FRAME_POINTER_REQUIRED): Provide default.\n\n\t* defaults.h (FRAME_POINTER_REQUIRED): Provide default.\n\t* doc/tm.texi (FRAME_POINTER_REQUIRED): Revise documentation.\n\t* config/alpha/alpha.h (FRAME_POINTER_REQUIRED): Delete.\n\t* config/s390/s390.h (FRAME_POINTER_REQUIRED): Delete.\n\t* config/spu/spu.h (FRAME_POINTER_REQUIRED): Delete.\n\t* config/sh/sh.h (FRAME_POINTER_REQUIRED): Delete.\n\t* config/pdp11/pdp11.h (FRAME_POINTER_REQUIRED): Delete.\n\t* config/stormy16/stormy16.h (FRAME_POINTER_REQUIRED): Delete.\n\t* config/m68hc11/m68hc11.h (FRAME_POINTER_REQUIRED): Delete.\n\t* config/iq2000/iq2000.h (FRAME_POINTER_REQUIRED): Delete.\n\t* config/mn10300/mn10300.h (FRAME_POINTER_REQUIRED): Delete.\n\t* config/ia64/ia64.h (FRAME_POINTER_REQUIRED): Delete.\n\t* config/m68k/m68k.h (FRAME_POINTER_REQUIRED): Delete.\n\t* config/rs6000/rs6000.h (FRAME_POINTER_REQUIRED): Delete.\n\t* config/picochip/picochip.h (FRAME_POINTER_REQUIRED): Delete.\n\t* config/mcore/mcore.h (FRAME_POINTER_REQUIRED): Delete.\n\t* config/h8300/h8300.h (FRAME_POINTER_REQUIRED): Delete.\n\t* config/v850/v850.h (FRAME_POINTER_REQUIRED): Delete.\n\nFrom-SVN: r147072", "tree": {"sha": "4dafed57bb7317168f00f322296057e74d438f5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dafed57bb7317168f00f322296057e74d438f5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/comments", "author": null, "committer": null, "parents": [{"sha": "0453fa897a43d806c8046a682f89f4ffef91c82d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0453fa897a43d806c8046a682f89f4ffef91c82d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0453fa897a43d806c8046a682f89f4ffef91c82d"}], "stats": {"total": 108, "additions": 34, "deletions": 74}, "files": [{"sha": "07a84d6e745eccc5c1b5a008db72afd52276fa19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -1,3 +1,24 @@\n+2009-05-03  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* defaults.h (FRAME_POINTER_REQUIRED): Provide default.\n+\t* doc/tm.texi (FRAME_POINTER_REQUIRED): Revise documentation.\n+\t* config/alpha/alpha.h (FRAME_POINTER_REQUIRED): Delete.\n+\t* config/s390/s390.h (FRAME_POINTER_REQUIRED): Delete.\n+\t* config/spu/spu.h (FRAME_POINTER_REQUIRED): Delete.\n+\t* config/sh/sh.h (FRAME_POINTER_REQUIRED): Delete.\n+\t* config/pdp11/pdp11.h (FRAME_POINTER_REQUIRED): Delete.\n+\t* config/stormy16/stormy16.h (FRAME_POINTER_REQUIRED): Delete.\n+\t* config/m68hc11/m68hc11.h (FRAME_POINTER_REQUIRED): Delete.\n+\t* config/iq2000/iq2000.h (FRAME_POINTER_REQUIRED): Delete.\n+\t* config/mn10300/mn10300.h (FRAME_POINTER_REQUIRED): Delete.\n+\t* config/ia64/ia64.h (FRAME_POINTER_REQUIRED): Delete.\n+\t* config/m68k/m68k.h (FRAME_POINTER_REQUIRED): Delete.\n+\t* config/rs6000/rs6000.h (FRAME_POINTER_REQUIRED): Delete.\n+\t* config/picochip/picochip.h (FRAME_POINTER_REQUIRED): Delete.\n+\t* config/mcore/mcore.h (FRAME_POINTER_REQUIRED): Delete.\n+\t* config/h8300/h8300.h (FRAME_POINTER_REQUIRED): Delete.\n+\t* config/v850/v850.h (FRAME_POINTER_REQUIRED): Delete.\n+\n 2009-05-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/39940"}, {"sha": "433823dbbd04305efb80c5a92cba4e112df9e3fb", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -475,12 +475,6 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n /* Base register for access to local variables of the function.  */\n #define HARD_FRAME_POINTER_REGNUM 15\n \n-/* Value should be nonzero if functions must have frame pointers.\n-   Zero means the frame pointer need not be set up (and parms\n-   may be accessed via the stack pointer) in functions that seem suitable.\n-   This is computed in `reload', in reload1.c.  */\n-#define FRAME_POINTER_REQUIRED 0\n-\n /* Base register for access to arguments of the function.  */\n #define ARG_POINTER_REGNUM 31\n "}, {"sha": "7e3711323aa0392b7fbac312abfb4a5542812675", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -300,12 +300,6 @@ extern const char * const *h8_reg_names;\n /* Base register for access to local variables of the function.  */\n #define FRAME_POINTER_REGNUM FP_REG\n \n-/* Value should be nonzero if functions must have frame pointers.\n-   Zero means the frame pointer need not be set up (and parms\n-   may be accessed via the stack pointer) in functions that seem suitable.\n-   This is computed in `reload', in reload1.c.  */\n-#define FRAME_POINTER_REQUIRED 0\n-\n /* Base register for access to arguments of the function.  */\n #define ARG_POINTER_REGNUM AP_REG\n "}, {"sha": "05957ea12db971d6b5dd4c7dd0288dcf522925d8", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -1005,11 +1005,6 @@ enum reg_class\n \f\n /* Eliminating the Frame Pointer and the Arg Pointer */\n \n-/* A C expression which is nonzero if a function must have and use a frame\n-   pointer.  This expression is evaluated in the reload pass.  If its value is\n-   nonzero the function will have a frame pointer.  */\n-#define FRAME_POINTER_REQUIRED 0\n-\n /* Show we can debug even without a frame pointer.  */\n #define CAN_DEBUG_WITHOUT_FP\n "}, {"sha": "acbe569503fa82c33218a3d45199d6f9c2e778e7", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -345,8 +345,6 @@ enum reg_class\n \f\n /* Eliminating the Frame Pointer and the Arg Pointer.  */\n \n-#define FRAME_POINTER_REQUIRED 0\n-\n #define ELIMINABLE_REGS\t\t\t\t\t\t\t\\\n {{ ARG_POINTER_REGNUM,   STACK_POINTER_REGNUM},\t\t\t\t\\\n  { ARG_POINTER_REGNUM,   HARD_FRAME_POINTER_REGNUM},\t\t\t\\"}, {"sha": "5496640b040858e0b0f21a0068605299167e54a4", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -883,12 +883,6 @@ extern enum reg_class m68hc11_tmp_regs_class;\n  {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\\\n  {FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM}}\n \n-/* Value should be nonzero if functions must have frame pointers.\n-   Zero means the frame pointer need not be set up (and parms may be\n-   accessed via the stack pointer) in functions that seem suitable.\n-   This is computed in `reload', in reload1.c.  */\n-#define FRAME_POINTER_REQUIRED\t0\n-\n /* Given FROM and TO register numbers, say whether this elimination is allowed.\n    Frame pointer elimination is automatically handled.\n "}, {"sha": "11477c61ba9dbb53e795cd121fb8926ea83434a9", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -453,8 +453,6 @@ along with GCC; see the file COPYING3.  If not see\n    pointer is shifted to %a5 on this target.  */\n #define FRAME_POINTER_REGNUM A6_REG\n \n-#define FRAME_POINTER_REQUIRED 0\n-\n /* Base register for access to arguments of the function.\n  * This isn't a hardware register. It will be eliminated to the\n  * stack pointer or frame pointer."}, {"sha": "bbdc24811b8984a199aa56d2f72af6a173405202", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -303,11 +303,6 @@ extern int mcore_stack_increment;\n #define MODES_TIEABLE_P(MODE1, MODE2) \\\n   ((MODE1) == (MODE2) || GET_MODE_CLASS (MODE1) == GET_MODE_CLASS (MODE2))\n \n-/* Value should be nonzero if functions must have frame pointers.\n-   Zero means the frame pointer need not be set up (and parms may be accessed\n-   via the stack pointer) in functions that seem suitable.  */\n-#define FRAME_POINTER_REQUIRED\t0\n-\n /* Definitions for register eliminations.\n \n    We have two registers that can be eliminated on the MCore.  First, the"}, {"sha": "2737d15345cf61c6b36395598b37cce019890293", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -491,7 +491,6 @@ enum reg_class {\n \n /* We can debug without frame pointers on the mn10300, so eliminate\n    them whenever possible.  */\n-#define FRAME_POINTER_REQUIRED 0\n #define CAN_DEBUG_WITHOUT_FP\n \n /* Value is the number of bytes of arguments automatically"}, {"sha": "9dbb41eb7c12d854c05c87cd2f770c7617bf9ea7", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -246,14 +246,6 @@ extern const struct real_format pdp11_d_format;\n /* Base register for access to local variables of the function.  */\n #define FRAME_POINTER_REGNUM 5\n \n-/* Value should be nonzero if functions must have frame pointers.\n-   Zero means the frame pointer need not be set up (and parms\n-   may be accessed via the stack pointer) in functions that seem suitable.\n-   This is computed in `reload', in reload1.c.\n-  */\n-\n-#define FRAME_POINTER_REQUIRED 0\n-\n /* Base register for access to arguments of the function.  */\n #define ARG_POINTER_REGNUM 5\n "}, {"sha": "497c1307839c4656bc4b3e5103449167f99cb9d3", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -409,9 +409,6 @@ extern const enum reg_class picochip_regno_reg_class[FIRST_PSEUDO_REGISTER];\n    pointers are eliminated wherever possible, by replacing them with\n    offsets from the stack pointer. */\n \n-/* We want to get rid of the frame pointer.  */\n-#define FRAME_POINTER_REQUIRED 0\n-\n #define ELIMINABLE_REGS \t\t\t\t\t\t\\\n   {{ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\t\t\\\n    {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}}"}, {"sha": "5feae4d0db958f91138c6b14e69307f4f367c37f", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -1027,12 +1027,6 @@ extern int rs6000_xilinx_fpu;\n /* Base register for access to local variables of the function.  */\n #define FRAME_POINTER_REGNUM 113\n \n-/* Value should be nonzero if functions must have frame pointers.\n-   Zero means the frame pointer need not be set up (and parms\n-   may be accessed via the stack pointer) in functions that seem suitable.\n-   This is computed in `reload', in reload1.c.  */\n-#define FRAME_POINTER_REQUIRED 0\n-\n /* Base register for access to arguments of the function.  */\n #define ARG_POINTER_REGNUM 67\n "}, {"sha": "c62f6bfa62101208c8e1731931e93aef44cc1e6c", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -644,8 +644,6 @@ extern const enum reg_class regclass_map[FIRST_PSEUDO_REGISTER];\n \n /* Frame pointer and argument pointer elimination.  */\n \n-#define FRAME_POINTER_REQUIRED 0\n-\n #define ELIMINABLE_REGS\t\t\t\t\t\t\\\n {{ FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM },\t\t\\\n  { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM },\t\t\\"}, {"sha": "5f5006f7ff49cdb4ab9d7ba50241fef56bacfab0", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -1262,12 +1262,6 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n \n #define GOT_SYMBOL_NAME \"*_GLOBAL_OFFSET_TABLE_\"\n \n-/* Value should be nonzero if functions must have frame pointers.\n-   Zero means the frame pointer need not be set up (and parms may be accessed\n-   via the stack pointer) in functions that seem suitable.  */\n-\n-#define FRAME_POINTER_REQUIRED\t0\n-\n /* Definitions for register eliminations.\n \n    We have three registers that can be eliminated on the SH.  First, the"}, {"sha": "f8375f18c820c01285c5d973531cc20508f88777", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -314,8 +314,6 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n \f\n /* Elimination */\n \n-#define FRAME_POINTER_REQUIRED 0\n-\n #define ELIMINABLE_REGS  \\\n   {{ARG_POINTER_REGNUM,\t STACK_POINTER_REGNUM},\t\t\t\t\\\n   {ARG_POINTER_REGNUM,\t HARD_FRAME_POINTER_REGNUM},\t\t\t\\"}, {"sha": "675b94d9949d3856aa3eeac3a6acd2271617a63a", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -367,8 +367,6 @@ enum reg_class\n \f\n /* Eliminating the Frame Pointer and the Arg Pointer */\n \n-#define FRAME_POINTER_REQUIRED 0\n-\n #define ELIMINABLE_REGS\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\\\n   {FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\\"}, {"sha": "b841963bd2bea535f867ce0257bb3f9e21bf98c4", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -506,12 +506,6 @@ enum reg_class\n /* Register in which static-chain is passed to a function.  */\n #define STATIC_CHAIN_REGNUM 20\n \n-/* Value should be nonzero if functions must have frame pointers.\n-   Zero means the frame pointer need not be set up (and parms\n-   may be accessed via the stack pointer) in functions that seem suitable.\n-   This is computed in `reload', in reload1.c.  */\n-#define FRAME_POINTER_REQUIRED 0\n-\n /* If defined, this macro specifies a table of register pairs used to\n    eliminate unneeded registers that point into the stack frame.  If\n    it is not defined, the only elimination attempted by the compiler"}, {"sha": "0be7057fd31c1d3e559eeba9bce56e102f96caf0", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -969,4 +969,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define GO_IF_MODE_DEPENDENT_ADDRESS(X, WIN)\n #endif\n \n+#ifndef FRAME_POINTER_REQUIRED\n+#define FRAME_POINTER_REQUIRED false\n+#endif\n+\n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "4765cf6401aa83fc56559fa9bcd594c93f8e15b4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aea88c05c9e0ffe0a2a4c595a71d023b581595aa/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=aea88c05c9e0ffe0a2a4c595a71d023b581595aa", "patch": "@@ -3738,15 +3738,16 @@ return @code{@var{regno}}.\n This is about eliminating the frame pointer and arg pointer.\n \n @defmac FRAME_POINTER_REQUIRED\n-A C expression which is nonzero if a function must have and use a frame\n+A C expression which is @code{true} if a function must have and use a frame\n pointer.  This expression is evaluated  in the reload pass.  If its value is\n-nonzero the function will have a frame pointer.\n+@code{true} the function will have a frame pointer.\n \n The expression can in principle examine the current function and decide\n-according to the facts, but on most machines the constant 0 or the\n-constant 1 suffices.  Use 0 when the machine allows code to be generated\n-with no frame pointer, and doing so saves some time or space.  Use 1\n-when there is no possible advantage to avoiding a frame pointer.\n+according to the facts, but on most machines the constant @code{false} or the\n+constant @code{true} suffices.  Use @code{false} when the machine allows code\n+to be generated with no frame pointer, and doing so saves some time or space.\n+Use @code{true} when there is no possible advantage to avoiding a frame\n+pointer.\n \n In certain cases, the compiler does not know how to produce valid code\n without a frame pointer.  The compiler recognizes those cases and\n@@ -3757,6 +3758,8 @@ them.\n In a function that does not require a frame pointer, the frame pointer\n register can be allocated for ordinary usage, unless you mark it as a\n fixed register.  See @code{FIXED_REGISTERS} for more information.\n+\n+Default value is @code{false}.\n @end defmac\n \n @findex get_frame_size"}]}