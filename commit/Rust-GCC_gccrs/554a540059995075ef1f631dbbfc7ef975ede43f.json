{"sha": "554a540059995075ef1f631dbbfc7ef975ede43f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU0YTU0MDA1OTk5NTA3NWVmMWY2MzFkYmJmYzdlZjk3NWVkZTQzZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-07T13:44:58Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-07T13:44:58Z"}, "message": "Add new tests\n\nFrom-SVN: r125529", "tree": {"sha": "e30a6c2ac9168d789debec16cca6c032819fd784", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e30a6c2ac9168d789debec16cca6c032819fd784"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/554a540059995075ef1f631dbbfc7ef975ede43f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/554a540059995075ef1f631dbbfc7ef975ede43f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/554a540059995075ef1f631dbbfc7ef975ede43f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/554a540059995075ef1f631dbbfc7ef975ede43f/comments", "author": null, "committer": null, "parents": [{"sha": "9c28f283e7ce089bc0c3af8c091b4ff31461987f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c28f283e7ce089bc0c3af8c091b4ff31461987f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c28f283e7ce089bc0c3af8c091b4ff31461987f"}], "stats": {"total": 242, "additions": 242, "deletions": 0}, "files": [{"sha": "c41a4bcf3a973e01c76f669fc116a0e8b30cd541", "filename": "gcc/testsuite/gnat.dg/aliased_prefix_accessibility.adb", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Faliased_prefix_accessibility.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Faliased_prefix_accessibility.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faliased_prefix_accessibility.adb?ref=554a540059995075ef1f631dbbfc7ef975ede43f", "patch": "@@ -0,0 +1,68 @@\n+--  { dg-do run }\n+\n+with Tagged_Type_Pkg;  use Tagged_Type_Pkg;\n+with Ada.Text_IO;      use Ada.Text_IO;\n+      \n+procedure Aliased_Prefix_Accessibility is\n+   \n+  T_Obj : aliased TT;\n+         \n+   T_Obj_Acc : access TT'Class := T_Obj'Access;\n+   \n+   type Nested_TT is limited record\n+      TT_Comp : aliased TT;\n+   end record;\n+\n+   NTT_Obj : Nested_TT;\n+\n+   ATT_Obj : array (1 .. 2) of aliased TT;\n+\n+begin\n+   begin\n+      T_Obj_Acc := Pass_TT_Access (T_Obj'Access);\n+      Put_Line (\"FAILED (1): call should have raised an exception\");\n+   exception\n+      when others =>\n+         null;\n+   end;\n+\n+   begin\n+      T_Obj_Acc := T_Obj.Pass_TT_Access;\n+      Put_Line (\"FAILED (2): call should have raised an exception\");\n+   exception\n+      when others =>\n+         null;\n+   end;\n+\n+   begin\n+      T_Obj_Acc := Pass_TT_Access (NTT_Obj.TT_Comp'Access);\n+      Put_Line (\"FAILED (3): call should have raised an exception\");\n+   exception\n+      when others =>\n+         null;\n+   end;\n+   \n+   begin\n+      T_Obj_Acc := NTT_Obj.TT_Comp.Pass_TT_Access;\n+      Put_Line (\"FAILED (4): call should have raised an exception\");\n+   exception\n+      when others =>\n+         null;\n+   end;\n+   \n+   begin\n+      T_Obj_Acc := Pass_TT_Access (ATT_Obj (1)'Access);\n+      Put_Line (\"FAILED (5): call should have raised an exception\");\n+   exception\n+      when others =>\n+         null;\n+   end;\n+   \n+   begin\n+      T_Obj_Acc := ATT_Obj (2).Pass_TT_Access;\n+      Put_Line (\"FAILED (6): call should have raised an exception\");\n+   exception\n+      when others =>\n+         null;\n+   end;\n+end Aliased_Prefix_Accessibility;"}, {"sha": "024af725cd170fb7cdf832ffd4cb599794233bd9", "filename": "gcc/testsuite/gnat.dg/asynch.adb", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Fasynch.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Fasynch.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fasynch.adb?ref=554a540059995075ef1f631dbbfc7ef975ede43f", "patch": "@@ -0,0 +1,24 @@\n+--  { dg-do compile }\n+\n+package body asynch is\n+   function null_ctrl return t_ctrl is\n+   begin\n+      return (Ada.Finalization.Controlled with stuff => 0);\n+   end null_ctrl;\n+   \n+   procedure Proc (msg : String; c : t_ctrl := null_ctrl) is\n+   begin\n+      null;\n+   end Proc;\n+   \n+   task type tsk;\n+   task body tsk is\n+   begin\n+      select                                                    \n+         delay 10.0;                                            \n+         Proc (\"A message.\");\n+      then abort\n+         null;\n+      end select;\n+   end tsk;\n+end asynch;"}, {"sha": "c9b70aaf00ed893bdccf6e210ac80aebfbe724da", "filename": "gcc/testsuite/gnat.dg/asynch.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Fasynch.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Fasynch.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fasynch.ads?ref=554a540059995075ef1f631dbbfc7ef975ede43f", "patch": "@@ -0,0 +1,8 @@\n+with Ada.Finalization;\n+package asynch is\n+   type t_ctrl is new Ada.Finalization.Controlled with record\n+      stuff : Natural := 0;\n+   end record;\n+   \n+   function null_ctrl return t_ctrl;\n+end asynch;"}, {"sha": "6529fe50a5a1cc10dddc0eb83850fce8a6092f92", "filename": "gcc/testsuite/gnat.dg/bip_prim_func.adb", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_prim_func.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_prim_func.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_prim_func.adb?ref=554a540059995075ef1f631dbbfc7ef975ede43f", "patch": "@@ -0,0 +1,14 @@\n+--  { dg-do compile }\n+\n+package body BIP_Prim_Func is\n+        \n+   type NTT is new TT with record\n+      J : Integer;\n+   end record;\n+        \n+   function Prim_Func return NTT is\n+   begin\n+      return Result : NTT := (I => 1, J => 2);\n+   end Prim_Func;\n+        \n+end BIP_Prim_Func;"}, {"sha": "37f7ac0fd30f45fdc43fd310f257b590b94c5804", "filename": "gcc/testsuite/gnat.dg/bip_prim_func.ads", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_prim_func.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_prim_func.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_prim_func.ads?ref=554a540059995075ef1f631dbbfc7ef975ede43f", "patch": "@@ -0,0 +1,11 @@\n+\n+package BIP_Prim_Func is\n+   pragma Elaborate_Body;\n+        \n+   type TT is abstract tagged limited record\n+      I : Integer;\n+   end record;\n+        \n+   function Prim_Func return TT is abstract;\n+        \n+end BIP_Prim_Func;"}, {"sha": "2e9988c33bbec4ea45c4eb6878410279326533a9", "filename": "gcc/testsuite/gnat.dg/fixedpnt.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Ffixedpnt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Ffixedpnt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ffixedpnt.adb?ref=554a540059995075ef1f631dbbfc7ef975ede43f", "patch": "@@ -0,0 +1,10 @@\n+--  { dg-do run }\n+\n+procedure Fixedpnt is\n+   A : Duration := 1.0;\n+   B : Duration := Duration ((-1.0) * A);\n+begin   \n+   if B > 0.0 then \n+      raise Constraint_Error;\n+   end if;\n+end;    "}, {"sha": "da38a1fb798d44aea247fdc58a2a990cc3b0b0c0", "filename": "gcc/testsuite/gnat.dg/interface3.adb", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Finterface3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Finterface3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Finterface3.adb?ref=554a540059995075ef1f631dbbfc7ef975ede43f", "patch": "@@ -0,0 +1,31 @@\n+--  { dg-do run }\n+\n+procedure interface3 is\n+-- \n+   package Pkg is\n+      type Foo is interface;\n+      subtype Element_Type is Foo'Class;\n+--    \n+      type Element_Access  is access Element_Type;\n+      type Elements_Type   is array (1 .. 1) of Element_Access;\n+      type Elements_Access is access Elements_Type;\n+--    \n+      type Vector is tagged record\n+         Elements : Elements_Access;\n+      end record;\n+--    \n+      procedure Test (Obj : Vector);\n+   end;\n+-- \n+   package body Pkg is\n+      procedure Test (Obj : Vector) is\n+         Elements : Elements_Access := new Elements_Type;\n+--    \n+      begin\n+         Elements (1) := new Element_Type'(Obj.Elements (1).all);\n+      end;\n+   end;\n+--\n+begin\n+   null;\n+end;"}, {"sha": "f7fbf7e1e7466e0416aa9d12d11b53886f39ea6f", "filename": "gcc/testsuite/gnat.dg/specs/access3.ads", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faccess3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faccess3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Faccess3.ads?ref=554a540059995075ef1f631dbbfc7ef975ede43f", "patch": "@@ -0,0 +1,25 @@\n+--  { dg-do compile }\n+\n+package access3 is\n+   type TF is access function return access procedure (P1 : Integer);\n+   \n+   type TAF is access protected function return access procedure (P1 : Integer);\n+   \n+   type TAF2 is access\n+     function return access protected procedure (P1 : Integer);\n+   \n+   type TAF3 is access\n+     protected function return access protected procedure (P1 : Integer);\n+   \n+   type TAF_Inf is\n+      access protected function return\n+         access function return\n+         access function return\n+         access function return\n+         access function return\n+         access function return\n+         access function return\n+         access function return\n+         access function return\n+      Integer;\n+end access3;"}, {"sha": "dea1b54617ddcaf91bdf29543eec5cff13d554e7", "filename": "gcc/testsuite/gnat.dg/tagged_type_pkg.adb", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged_type_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged_type_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged_type_pkg.adb?ref=554a540059995075ef1f631dbbfc7ef975ede43f", "patch": "@@ -0,0 +1,18 @@\n+package body Tagged_Type_Pkg is\n+      \n+   function Pass_TT_Access (Obj : access TT'Class) return access TT'Class is\n+   begin\n+      if Obj = null then\n+         return null;\n+      \n+      else\n+         --  The implicit conversion in the assignment to the return object\n+         --  must fail if Obj's actual is not a library-level object.\n+         \n+         return TT_Acc : access TT'Class := Obj do\n+            TT_Acc := TT_Acc.Self;\n+         end return;\n+      end if;\n+   end Pass_TT_Access;\n+   \n+end Tagged_Type_Pkg;"}, {"sha": "80926103214beb14238acf3f3c3422ffa46a70ef", "filename": "gcc/testsuite/gnat.dg/tagged_type_pkg.ads", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged_type_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged_type_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Ftagged_type_pkg.ads?ref=554a540059995075ef1f631dbbfc7ef975ede43f", "patch": "@@ -0,0 +1,9 @@\n+package Tagged_Type_Pkg is\n+      \n+   type TT is tagged limited record\n+      Self : access TT'Class := TT'Unchecked_Access;\n+   end record;\n+         \n+   function Pass_TT_Access (Obj : access TT'Class) return access TT'Class;\n+   \n+end Tagged_Type_Pkg;"}, {"sha": "a24376733b111631033210da0d56938a5b7faef3", "filename": "gcc/testsuite/gnat.dg/valid1.adb", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Fvalid1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/554a540059995075ef1f631dbbfc7ef975ede43f/gcc%2Ftestsuite%2Fgnat.dg%2Fvalid1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvalid1.adb?ref=554a540059995075ef1f631dbbfc7ef975ede43f", "patch": "@@ -0,0 +1,24 @@\n+--  { dg-do run }\n+--  { dg-options \"-gnatVi\" }\n+\n+procedure valid1 is\n+   type m is range 0 .. 10;\n+   for m'size use 8;\n+   \n+   type r is record\n+      a, b : m;\n+      c, d, e, f : boolean;\n+   end record;\n+   pragma Pack (r);\n+   for R'size use 20;\n+   \n+   type G is array (1 .. 3, 1 .. 3) of R;\n+   pragma Pack (G);\n+   \n+   procedure h (c : m) is begin null; end;\n+   \n+   GG : G := (others => (others => (2, 3, true, true, true, true)));\n+\n+begin\n+   h (GG (3, 2).a);\n+end;"}]}