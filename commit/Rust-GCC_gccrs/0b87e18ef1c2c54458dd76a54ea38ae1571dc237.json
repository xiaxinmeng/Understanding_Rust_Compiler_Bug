{"sha": "0b87e18ef1c2c54458dd76a54ea38ae1571dc237", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI4N2UxOGVmMWMyYzU0NDU4ZGQ3NmE1NGVhMzhhZTE1NzFkYzIzNw==", "commit": {"author": {"name": "David Chad", "email": "davidc@freebsd.org", "date": "2003-04-11T04:30:33Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2003-04-11T04:30:33Z"}, "message": "(in libobjc:)\n\n\tlibobjc/8562\n(in libobjc:)\n\t* objc/hash.h (hash_string): Constify correctly.\n\t(compare_ptrs): Use direct compare.\n\t* objc/objc-list.h (list_nth): Rename index to indx to avoid shadow.\n\t* objc/sarray.h: Global rename index to indx to avoid shadow.\n\n(in gcc/testsuite:)\n\t* objc.dg/headers.m: New test.\n\nCo-Authored-By: Loren J. Rittle <ljrittle@acm.org>\n\nFrom-SVN: r65461", "tree": {"sha": "8cb1d7bf41f29d8a1c0357dd74e7f0eb0660328f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cb1d7bf41f29d8a1c0357dd74e7f0eb0660328f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b87e18ef1c2c54458dd76a54ea38ae1571dc237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b87e18ef1c2c54458dd76a54ea38ae1571dc237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b87e18ef1c2c54458dd76a54ea38ae1571dc237", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b87e18ef1c2c54458dd76a54ea38ae1571dc237/comments", "author": null, "committer": null, "parents": [{"sha": "339a28b96a306cb323a66e9142ab090d36f42ba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/339a28b96a306cb323a66e9142ab090d36f42ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/339a28b96a306cb323a66e9142ab090d36f42ba8"}], "stats": {"total": 73, "additions": 52, "deletions": 21}, "files": [{"sha": "7c1e3bc3505ccc89d8779215ff0aa00ba74e17ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b87e18ef1c2c54458dd76a54ea38ae1571dc237/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b87e18ef1c2c54458dd76a54ea38ae1571dc237/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b87e18ef1c2c54458dd76a54ea38ae1571dc237", "patch": "@@ -1,3 +1,9 @@\n+2003-04-11  David Chad  <davidc@freebsd.org>\n+\t    Loren J. Rittle  <ljrittle@acm.org>\n+\n+\tlibobjc/8562\n+\t* objc.dg/headers.m: New test.\n+\n 2003-04-10  Zack Weinberg  <zack@codesourcery.com>\n \n \t* gcc.c-torture/execute/builtin-noret-2.c: New."}, {"sha": "5435a75deeed8b8494423e76e56f7a13dd0b4fa9", "filename": "gcc/testsuite/objc.dg/headers.m", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b87e18ef1c2c54458dd76a54ea38ae1571dc237/gcc%2Ftestsuite%2Fobjc.dg%2Fheaders.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b87e18ef1c2c54458dd76a54ea38ae1571dc237/gcc%2Ftestsuite%2Fobjc.dg%2Fheaders.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fheaders.m?ref=0b87e18ef1c2c54458dd76a54ea38ae1571dc237", "patch": "@@ -0,0 +1,16 @@\n+// Test for obscure conflicts with the system headers (inspired by similar\n+// test in libstdc++-v3).  Author: Loren J. Rittle <ljrittle@acm.org>.\n+// { dg-options \"-Wall -Wpointer-arith -Wcast-qual -Wstrict-prototypes -Wshadow\" }\n+// { dg-do compile }\n+\n+#include <objc/NXConstStr.h>\n+#include <objc/Object.h>\n+#include <objc/Protocol.h>\n+#include <objc/encoding.h>\n+#include <objc/hash.h>\n+#include <objc/objc-api.h>\n+#include <objc/objc-list.h>\n+#include <objc/objc.h>\n+#include <objc/sarray.h>\n+#include <objc/thr.h>\n+#include <objc/typedstream.h>"}, {"sha": "1f00adf9524fe58e8a33588c820d3a56278e6f88", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b87e18ef1c2c54458dd76a54ea38ae1571dc237/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b87e18ef1c2c54458dd76a54ea38ae1571dc237/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=0b87e18ef1c2c54458dd76a54ea38ae1571dc237", "patch": "@@ -1,3 +1,12 @@\n+2003-04-11  David Chad  <davidc@freebsd.org>\n+\t    Loren J. Rittle  <ljrittle@acm.org>\n+\n+\tlibobjc/8562\n+\t* objc/hash.h (hash_string): Constify correctly.\n+\t(compare_ptrs): Use direct compare.\n+\t* objc/objc-list.h (list_nth): Rename index to indx to avoid shadow.\n+\t* objc/sarray.h: Global rename index to indx to avoid shadow.\n+\n 2003-03-12  Andreas Schwab  <schwab@suse.de>\n \n \t* aclocal.m4 (GLIBCPP_EXPORT_INSTALL_INFO): Avoid trailing /. in"}, {"sha": "9e89f5774853bed0f5ab58df4bc2802551edbece", "filename": "libobjc/objc/hash.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b87e18ef1c2c54458dd76a54ea38ae1571dc237/libobjc%2Fobjc%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b87e18ef1c2c54458dd76a54ea38ae1571dc237/libobjc%2Fobjc%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fhash.h?ref=0b87e18ef1c2c54458dd76a54ea38ae1571dc237", "patch": "@@ -174,8 +174,8 @@ hash_string (cache_ptr cache, const void *key)\n   unsigned int ctr = 0;\n         \n         \n-  while (*(char *) key) {\n-    ret ^= *(char *) key++ << ctr;\n+  while (*(const char *) key) {\n+    ret ^= *((const char *) key)++ << ctr;\n     ctr = (ctr + 1) % sizeof (void *);\n   }\n \n@@ -187,7 +187,7 @@ hash_string (cache_ptr cache, const void *key)\n static inline int \n compare_ptrs (const void *k1, const void *k2)\n {\n-  return ! (k1 - k2);\n+  return (k1 == k2);\n }\n \n "}, {"sha": "318c68682f5f6d4baa2edac6cbb42876b4679554", "filename": "libobjc/objc/objc-list.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b87e18ef1c2c54458dd76a54ea38ae1571dc237/libobjc%2Fobjc%2Fobjc-list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b87e18ef1c2c54458dd76a54ea38ae1571dc237/libobjc%2Fobjc%2Fobjc-list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fobjc-list.h?ref=0b87e18ef1c2c54458dd76a54ea38ae1571dc237", "patch": "@@ -64,9 +64,9 @@ list_length(struct objc_list* list)\n    larger than the list length, NULL is returned  */\n \n static inline void*\n-list_nth(int index, struct objc_list* list)\n+list_nth(int indx, struct objc_list* list)\n {\n-  while(index-- != 0)\n+  while(indx-- != 0)\n     {\n       if(list->tail)\n \tlist = list->tail;"}, {"sha": "fa6e2f0eaac48b84031714c862d7c5a5052cb8db", "filename": "libobjc/objc/sarray.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b87e18ef1c2c54458dd76a54ea38ae1571dc237/libobjc%2Fobjc%2Fsarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b87e18ef1c2c54458dd76a54ea38ae1571dc237/libobjc%2Fobjc%2Fsarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fsarray.h?ref=0b87e18ef1c2c54458dd76a54ea38ae1571dc237", "patch": "@@ -146,8 +146,8 @@ struct sarray* sarray_new(int, void* default_element);\n void sarray_free(struct sarray*);\n struct sarray* sarray_lazy_copy(struct sarray*);\n void sarray_realloc(struct sarray*, int new_size);\n-void sarray_at_put(struct sarray*, sidx index, void* elem);\n-void sarray_at_put_safe(struct sarray*, sidx index, void* elem);\n+void sarray_at_put(struct sarray*, sidx indx, void* elem);\n+void sarray_at_put_safe(struct sarray*, sidx indx, void* elem);\n \n struct sarray* sarray_hard_copy(struct sarray*); /* ... like the name? */\n void sarray_remove_garbage(void);\n@@ -156,10 +156,10 @@ void sarray_remove_garbage(void);\n #ifdef PRECOMPUTE_SELECTORS\n /* Transform soffset values to ints and vica verca */\n static inline unsigned int\n-soffset_decode(sidx index)\n+soffset_decode(sidx indx)\n {\n   union sofftype x;\n-  x.idx = index;\n+  x.idx = indx;\n #ifdef OBJC_SPARSE3\n   return x.off.eoffset\n     + (x.off.boffset*BUCKET_SIZE)\n@@ -186,9 +186,9 @@ soffset_encode(size_t offset)\n #else /* not PRECOMPUTE_SELECTORS */\n \n static inline size_t\n-soffset_decode(sidx index)\n+soffset_decode(sidx indx)\n {\n-  return index;\n+  return indx;\n }\n \n static inline sidx\n@@ -198,13 +198,13 @@ soffset_encode(size_t offset)\n }\n #endif /* not PRECOMPUTE_SELECTORS */\n \n-/* Get element from the Sparse array `array' at offset `index' */\n+/* Get element from the Sparse array `array' at offset `indx' */\n \n-static inline void* sarray_get(struct sarray* array, sidx index)\n+static inline void* sarray_get(struct sarray* array, sidx indx)\n {\n #ifdef PRECOMPUTE_SELECTORS\n   union sofftype x;\n-  x.idx = index;\n+  x.idx = indx;\n #ifdef OBJC_SPARSE3\n   return \n     array->\n@@ -217,19 +217,19 @@ static inline void* sarray_get(struct sarray* array, sidx index)\n #else /* not PRECOMPUTE_SELECTORS */\n #ifdef OBJC_SPARSE3\n   return array->\n-    indices[index/INDEX_CAPACITY]->\n-      buckets[(index/BUCKET_SIZE)%INDEX_SIZE]->\n-\telems[index%BUCKET_SIZE];\n+    indices[indx/INDEX_CAPACITY]->\n+      buckets[(indx/BUCKET_SIZE)%INDEX_SIZE]->\n+\telems[indx%BUCKET_SIZE];\n #else /* OBJC_SPARSE2 */\n-  return array->buckets[index/BUCKET_SIZE]->elems[index%BUCKET_SIZE];\n+  return array->buckets[indx/BUCKET_SIZE]->elems[indx%BUCKET_SIZE];\n #endif /* not OBJC_SPARSE3 */\n #endif /* not PRECOMPUTE_SELECTORS */\n }\n \n-static inline void* sarray_get_safe(struct sarray* array, sidx index)\n+static inline void* sarray_get_safe(struct sarray* array, sidx indx)\n {\n-  if(soffset_decode(index) < array->capacity)\n-    return sarray_get(array, index);\n+  if(soffset_decode(indx) < array->capacity)\n+    return sarray_get(array, indx);\n   else\n     return (array->empty_bucket->elems[0]);\n }"}]}