{"sha": "77011afe7fa44deb834e70ea536d533a8b4b8382", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzcwMTFhZmU3ZmE0NGRlYjgzNGU3MGVhNTM2ZDUzM2E4YjRiODM4Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-07-19T15:55:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-07-19T15:55:47Z"}, "message": "ada-tree.h (TYPE_OBJECT_RECORD_TYPE, [...]): Use TYPE_MIN_VALUE_RAW instead of TYPE_MINVAL.\n\n\t* gcc-interface/ada-tree.h (TYPE_OBJECT_RECORD_TYPE,\n\tTYPE_GCC_MIN_VALUE): Use TYPE_MIN_VALUE_RAW instead of TYPE_MINVAL.\n\t(TYPE_GCC_MAX_VALUE): Use TYPE_MAX_VALUE_RAW instead of TYPE_MAXVAL.\n\nFrom-SVN: r250355", "tree": {"sha": "1d3665a9b09f2a7940899c7bdc00fcb4e087f001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d3665a9b09f2a7940899c7bdc00fcb4e087f001"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77011afe7fa44deb834e70ea536d533a8b4b8382", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77011afe7fa44deb834e70ea536d533a8b4b8382", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77011afe7fa44deb834e70ea536d533a8b4b8382", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77011afe7fa44deb834e70ea536d533a8b4b8382/comments", "author": null, "committer": null, "parents": [{"sha": "de7422048ee2e388cedbeb328077948ae8f06c2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de7422048ee2e388cedbeb328077948ae8f06c2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de7422048ee2e388cedbeb328077948ae8f06c2a"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "6abf1f27cc537b3bfa5fa2849edac2f43d48b1e5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77011afe7fa44deb834e70ea536d533a8b4b8382/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77011afe7fa44deb834e70ea536d533a8b4b8382/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=77011afe7fa44deb834e70ea536d533a8b4b8382", "patch": "@@ -1,6 +1,12 @@\n+2017-07-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc-interface/ada-tree.h (TYPE_OBJECT_RECORD_TYPE,\n+\tTYPE_GCC_MIN_VALUE): Use TYPE_MIN_VALUE_RAW instead of TYPE_MINVAL.\n+\t(TYPE_GCC_MAX_VALUE): Use TYPE_MAX_VALUE_RAW instead of TYPE_MAXVAL.\n+\n 2017-07-18  Mike Frysinger  <vapier@chromium.org>\n \n-\t* gcc-interface/Makefile.in ($(P)): Delete\n+\t* gcc-interface/Makefile.in ($(P)): Delete.\n \n 2017-07-15  John Paul Adrian Glaubitz  <glaubitz@physik.fu-berlin.de>\n "}, {"sha": "2470c83c90123c9382dced4a069e269d89bdbf1c", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77011afe7fa44deb834e70ea536d533a8b4b8382/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77011afe7fa44deb834e70ea536d533a8b4b8382/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=77011afe7fa44deb834e70ea536d533a8b4b8382", "patch": "@@ -209,21 +209,24 @@ do {\t\t\t\t\t\t\t \\\n    this is a conflict on the minval field, but there doesn't seem to be\n    simple fix, so we'll live with this kludge for now.  */\n #define TYPE_OBJECT_RECORD_TYPE(NODE) \\\n-  (TYPE_MINVAL (TREE_CHECK2 ((NODE), UNCONSTRAINED_ARRAY_TYPE, ENUMERAL_TYPE)))\n+  (TYPE_MIN_VALUE_RAW (TREE_CHECK2 ((NODE), UNCONSTRAINED_ARRAY_TYPE, \\\n+\t\t\t\t    ENUMERAL_TYPE)))\n \n /* For numerical types, this is the GCC lower bound of the type.  The GCC\n    type system is based on the invariant that an object X of a given type\n    cannot hold at run time a value smaller than its lower bound; otherwise\n    the behavior is undefined.  The optimizer takes advantage of this and\n    considers that the assertion X >= LB is always true.  */\n-#define TYPE_GCC_MIN_VALUE(NODE) (TYPE_MINVAL (NUMERICAL_TYPE_CHECK (NODE)))\n+#define TYPE_GCC_MIN_VALUE(NODE) \\\n+  (TYPE_MIN_VALUE_RAW (NUMERICAL_TYPE_CHECK (NODE)))\n \n /* For numerical types, this is the GCC upper bound of the type.  The GCC\n    type system is based on the invariant that an object X of a given type\n    cannot hold at run time a value larger than its upper bound; otherwise\n    the behavior is undefined.  The optimizer takes advantage of this and\n    considers that the assertion X <= UB is always true.  */\n-#define TYPE_GCC_MAX_VALUE(NODE) (TYPE_MAXVAL (NUMERICAL_TYPE_CHECK (NODE)))\n+#define TYPE_GCC_MAX_VALUE(NODE) \\\n+  (TYPE_MAX_VALUE_RAW (NUMERICAL_TYPE_CHECK (NODE)))\n \n /* For a FUNCTION_TYPE, if the subprogram has parameters passed by copy in/\n    copy out, this is the list of nodes used to specify the return values of"}]}