{"sha": "a8c3f4c972025591b606714ca466678501cfee8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThjM2Y0Yzk3MjAyNTU5MWI2MDY3MTRjYTQ2NjY3ODUwMWNmZWU4Yg==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2012-08-29T22:05:41Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "2012-08-29T22:05:41Z"}, "message": "random.h (random_device): Move implementation to...\n\n\n\t* include/bits/random.h (random_device): Move implementation to...\n\t* src/c++11/random.cc: ...here.  New file.\n\t* config/abi/pre/gnu.ver: Add new version GLIBCXX_3.4.18.  Export\n\tstd::random_device::* symbols.\n\t* config/abi/post/x86_64-linux-gnu/baseline_symbols.txt: Generated.\n\t* src/c++11/Makefile.am (sources): Add random.cc.\n\t* src/c++11/Makefile.in: Regenerated.\n\nFrom-SVN: r190787", "tree": {"sha": "032d57d4baf87fa5a35938d91b970988ab6c90c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/032d57d4baf87fa5a35938d91b970988ab6c90c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8c3f4c972025591b606714ca466678501cfee8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c3f4c972025591b606714ca466678501cfee8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8c3f4c972025591b606714ca466678501cfee8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8c3f4c972025591b606714ca466678501cfee8b/comments", "author": null, "committer": null, "parents": [{"sha": "1dd5907e5c038c3d996215835d1cc35899e0b626", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dd5907e5c038c3d996215835d1cc35899e0b626", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dd5907e5c038c3d996215835d1cc35899e0b626"}], "stats": {"total": 239, "additions": 198, "deletions": 41}, "files": [{"sha": "d66ac97ad53d391b6b1ffba839746c6850822e5e", "filename": "libstdc++-v3/config/abi/post/x86_64-linux-gnu/baseline_symbols.txt", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c3f4c972025591b606714ca466678501cfee8b/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fx86_64-linux-gnu%2Fbaseline_symbols.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c3f4c972025591b606714ca466678501cfee8b/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fx86_64-linux-gnu%2Fbaseline_symbols.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpost%2Fx86_64-linux-gnu%2Fbaseline_symbols.txt?ref=a8c3f4c972025591b606714ca466678501cfee8b", "patch": "@@ -1485,6 +1485,10 @@ FUNC:_ZNSt13basic_ostreamIwSt11char_traitsIwEElsEs@@GLIBCXX_3.4\n FUNC:_ZNSt13basic_ostreamIwSt11char_traitsIwEElsEt@@GLIBCXX_3.4\n FUNC:_ZNSt13basic_ostreamIwSt11char_traitsIwEElsEx@@GLIBCXX_3.4\n FUNC:_ZNSt13basic_ostreamIwSt11char_traitsIwEElsEy@@GLIBCXX_3.4\n+FUNC:_ZNSt13random_device14_M_init_pretr1ERKSs@@GLIBCXX_3.4.18\n+FUNC:_ZNSt13random_device16_M_getval_pretr1Ev@@GLIBCXX_3.4.18\n+FUNC:_ZNSt13random_device7_M_initERKSs@@GLIBCXX_3.4.18\n+FUNC:_ZNSt13random_device9_M_getvalEv@@GLIBCXX_3.4.18\n FUNC:_ZNSt13runtime_errorC1ERKSs@@GLIBCXX_3.4\n FUNC:_ZNSt13runtime_errorC2ERKSs@@GLIBCXX_3.4\n FUNC:_ZNSt13runtime_errorD0Ev@@GLIBCXX_3.4\n@@ -2502,6 +2506,7 @@ OBJECT:0:GLIBCXX_3.4.14\n OBJECT:0:GLIBCXX_3.4.15\n OBJECT:0:GLIBCXX_3.4.16\n OBJECT:0:GLIBCXX_3.4.17\n+OBJECT:0:GLIBCXX_3.4.18\n OBJECT:0:GLIBCXX_3.4.2\n OBJECT:0:GLIBCXX_3.4.3\n OBJECT:0:GLIBCXX_3.4.4\n@@ -3683,3 +3688,5 @@ OBJECT:96:_ZTVSt12ctype_bynameIcE@@GLIBCXX_3.4\n OBJECT:96:_ZTVSt5ctypeIcE@@GLIBCXX_3.4\n OBJECT:96:_ZTVSt7num_putIcSt19ostreambuf_iteratorIcSt11char_traitsIcEEE@@GLIBCXX_3.4\n OBJECT:96:_ZTVSt7num_putIwSt19ostreambuf_iteratorIwSt11char_traitsIwEEE@@GLIBCXX_3.4\n+TLS:8:_ZSt11__once_call@@GLIBCXX_3.4.11\n+TLS:8:_ZSt15__once_callable@@GLIBCXX_3.4.11"}, {"sha": "5265b21702a2f11a1b9a824d69fe0d551dfa1ddc", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c3f4c972025591b606714ca466678501cfee8b/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c3f4c972025591b606714ca466678501cfee8b/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=a8c3f4c972025591b606714ca466678501cfee8b", "patch": "@@ -1321,6 +1321,17 @@ GLIBCXX_3.4.17 {\n \n } GLIBCXX_3.4.16;\n \n+GLIBCXX_3.4.18 {\n+  global:\n+\n+    # Names inside the 'extern' block are demangled names.\n+    extern \"C++\"\n+    {\n+      std::random_device::*;\n+    };\n+\n+} GLIBCXX_3.4.17;\n+\n # Symbols in the support library (libsupc++) have their own tag.\n CXXABI_1.3 {\n \n@@ -1523,4 +1534,4 @@ CXXABI_TM_1 {\n   global:\n     __cxa_tm_cleanup;\n \n-};\n\\ No newline at end of file\n+};"}, {"sha": "79a56a654640cd28151c6741e447fa0a3e2889ec", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 16, "deletions": 32, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c3f4c972025591b606714ca466678501cfee8b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c3f4c972025591b606714ca466678501cfee8b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=a8c3f4c972025591b606714ca466678501cfee8b", "patch": "@@ -1575,39 +1575,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef _GLIBCXX_USE_RANDOM_TR1\n \n     explicit\n-    random_device(const std::string& __token = \"/dev/urandom\")\n+    random_device(const std::string& __token = \"default\")\n     {\n-      if ((__token != \"/dev/urandom\" && __token != \"/dev/random\")\n-\t  || !(_M_file = std::fopen(__token.c_str(), \"rb\")))\n-\tstd::__throw_runtime_error(__N(\"random_device::\"\n-\t\t\t\t       \"random_device(const std::string&)\"));\n+      _M_init(__token);\n     }\n \n     ~random_device()\n-    { std::fclose(_M_file); }\n+    { _M_fini(); }\n \n #else\n \n     explicit\n     random_device(const std::string& __token = \"mt19937\")\n-    : _M_mt(_M_strtoul(__token)) { }\n-\n-  private:\n-    static unsigned long\n-    _M_strtoul(const std::string& __str)\n-    {\n-      unsigned long __ret = 5489UL;\n-      if (__str != \"mt19937\")\n-\t{\n-\t  const char* __nptr = __str.c_str();\n-\t  char* __endptr;\n-\t  __ret = std::strtoul(__nptr, &__endptr, 0);\n-\t  if (*__nptr == '\\0' || *__endptr != '\\0')\n-\t    std::__throw_runtime_error(__N(\"random_device::_M_strtoul\"\n-\t\t\t\t\t   \"(const std::string&)\"));\n-\t}\n-      return __ret;\n-    }\n+    { return _M_init_pretr1(__token); }\n \n   public:\n \n@@ -1629,12 +1609,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator()()\n     {\n #ifdef _GLIBCXX_USE_RANDOM_TR1\n-      result_type __ret;\n-      std::fread(reinterpret_cast<void*>(&__ret), sizeof(result_type),\n-\t\t 1, _M_file);\n-      return __ret;\n+      return this->_M_getval();\n #else\n-      return _M_mt();\n+      return this->_M_getval_pretr1();\n #endif\n     }\n \n@@ -1644,11 +1621,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   private:\n \n-#ifdef _GLIBCXX_USE_RANDOM_TR1\n+    void _M_init(const std::string& __token);\n+    void _M_init_pretr1(const std::string& __token);\n+    void _M_fini();\n+\n+    result_type _M_getval();\n+    result_type _M_getval_pretr1();\n+\n+    union\n+    {\n     FILE*        _M_file;\n-#else\n     mt19937      _M_mt;\n-#endif\n+  };\n   };\n \n   /* @} */ // group random_generators"}, {"sha": "69eb5b6dac60a75a92518537c0d9a8582fd39fee", "filename": "libstdc++-v3/src/c++11/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c3f4c972025591b606714ca466678501cfee8b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c3f4c972025591b606714ca466678501cfee8b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am?ref=a8c3f4c972025591b606714ca466678501cfee8b", "patch": "@@ -41,6 +41,7 @@ sources = \\\n \tlimits.cc \\\n \tmutex.cc \\\n \tplaceholders.cc \\\n+\trandom.cc \\\n \tregex.cc  \\\n \tshared_ptr.cc \\\n \tsystem_error.cc \\"}, {"sha": "37b9ea0fd8be40830c276065f9e178a15b4b920a", "filename": "libstdc++-v3/src/c++11/Makefile.in", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c3f4c972025591b606714ca466678501cfee8b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c3f4c972025591b606714ca466678501cfee8b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in?ref=a8c3f4c972025591b606714ca466678501cfee8b", "patch": "@@ -1,9 +1,9 @@\n-# Makefile.in generated by automake 1.11.1 from Makefile.am.\n+# Makefile.in generated by automake 1.11.3 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,\n-# Inc.\n+# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n+# Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n # gives unlimited permission to copy and/or distribute it,\n # with or without modifications, as long as this notice is preserved.\n@@ -68,8 +68,8 @@ LTLIBRARIES = $(noinst_LTLIBRARIES)\n libc__11convenience_la_LIBADD =\n am__objects_1 = chrono.lo condition_variable.lo debug.lo \\\n \tfunctexcept.lo functional.lo future.lo hash_c++0x.lo \\\n-\thashtable_c++0x.lo limits.lo mutex.lo placeholders.lo regex.lo \\\n-\tshared_ptr.lo system_error.lo thread.lo\n+\thashtable_c++0x.lo limits.lo mutex.lo placeholders.lo \\\n+\trandom.lo regex.lo shared_ptr.lo system_error.lo thread.lo\n @ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_2 = fstream-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tstring-inst.lo wstring-inst.lo\n am_libc__11convenience_la_OBJECTS = $(am__objects_1) $(am__objects_2)\n@@ -309,6 +309,7 @@ sources = \\\n \tlimits.cc \\\n \tmutex.cc \\\n \tplaceholders.cc \\\n+\trandom.cc \\\n \tregex.cc  \\\n \tshared_ptr.cc \\\n \tsystem_error.cc \\\n@@ -404,6 +405,7 @@ Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status\n \t    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \\\n \t    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \\\n \tesac;\n+$(top_srcdir)/fragment.am:\n \n $(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n \tcd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh\n@@ -422,7 +424,7 @@ clean-noinstLTLIBRARIES:\n \t  echo \"rm -f \\\"$${dir}/so_locations\\\"\"; \\\n \t  rm -f \"$${dir}/so_locations\"; \\\n \tdone\n-libc++11convenience.la: $(libc__11convenience_la_OBJECTS) $(libc__11convenience_la_DEPENDENCIES) \n+libc++11convenience.la: $(libc__11convenience_la_OBJECTS) $(libc__11convenience_la_DEPENDENCIES) $(EXTRA_libc__11convenience_la_DEPENDENCIES) \n \t$(CXXLINK)  $(libc__11convenience_la_OBJECTS) $(libc__11convenience_la_LIBADD) $(LIBS)\n \n mostlyclean-compile:\n@@ -511,10 +513,15 @@ install-am: all-am\n \n installcheck: installcheck-am\n install-strip:\n+\tif test -z '$(STRIP)'; then \\\n \t$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n \t  install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n-\t  `test -z '$(STRIP)' || \\\n-\t    echo \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\"` install\n+\t      install; \\\n+\telse \\\n+\t  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n+\t    install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n+\t    \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\" install; \\\n+\tfi\n mostlyclean-generic:\n \n clean-generic:"}, {"sha": "cabc388760b47bbb1cf9983bb97ae7f5e28a3c08", "filename": "libstdc++-v3/src/c++11/random.cc", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8c3f4c972025591b606714ca466678501cfee8b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8c3f4c972025591b606714ca466678501cfee8b/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Frandom.cc?ref=a8c3f4c972025591b606714ca466678501cfee8b", "patch": "@@ -0,0 +1,147 @@\n+// random -*- C++ -*-\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <random>\n+\n+#if defined __i386__ || defined __x86_64__\n+# include <cpuid.h>\n+#endif\n+\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+\n+  namespace\n+  {\n+    static unsigned long\n+    _M_strtoul(const std::string& __str)\n+    {\n+      unsigned long __ret = 5489UL;\n+      if (__str != \"mt19937\")\n+\t{\n+\t  const char* __nptr = __str.c_str();\n+\t  char* __endptr;\n+\t  __ret = std::strtoul(__nptr, &__endptr, 0);\n+\t  if (*__nptr == '\\0' || *__endptr != '\\0')\n+\t    std::__throw_runtime_error(__N(\"random_device::_M_strtoul\"\n+\t\t\t\t\t   \"(const std::string&)\"));\n+\t}\n+      return __ret;\n+    }\n+\n+#if defined __i386__ || defined __x86_64__\n+    unsigned int\n+    __attribute__ ((target(\"rdrnd\")))\n+    __x86_rdrand(void)\n+    {\n+      unsigned int retries = 100;\n+      unsigned int val;\n+\n+      while (__builtin_ia32_rdrand32_step(&val) == 0)\n+\tif (--retries == 0)\n+\t  std::__throw_runtime_error(__N(\"random_device::__x86_rdrand(void)\"));\n+\n+      return val;\n+    }\n+#endif\n+  }\n+\n+\n+  void\n+  random_device::_M_init(const std::string& token)\n+  {\n+    const char *fname = token.c_str();\n+\n+    if (token == \"default\")\n+      {\n+#if defined __i386__ || defined __x86_64__\n+\tunsigned int eax, ebx, ecx, edx;\n+\t__cpuid(0, eax, ebx, ecx, edx);\n+\t// Check for \"GenuineIntel\"\n+\tif (ebx == 0x756e6547 && ecx == 0x6c65746e && edx == 0x49656e69)\n+\t  {\n+\t    __cpuid(1, eax, ebx, ecx, edx);\n+\t    if (ecx & bit_RDRND)\n+\t      {\n+\t\t_M_file = nullptr;\n+\t\treturn;\n+\t      }\n+\t  }\n+#endif\n+\n+\tfname = \"/dev/urandom\";\n+      }\n+    else if (token != \"/dev/urandom\" && token != \"/dev/random\")\n+    fail:\n+      std::__throw_runtime_error(__N(\"random_device::\"\n+\t\t\t\t     \"random_device(const std::string&)\"));\n+\n+    _M_file = std::fopen(fname, \"rb\");\n+    if (! _M_file)\n+      goto fail;\n+  }\n+\n+  void\n+  random_device::_M_init_pretr1(const std::string& token)\n+\n+  {\n+    _M_mt.seed(_M_strtoul(token));\n+  }\n+\n+  void\n+  random_device::_M_fini()\n+  {\n+    if (_M_file)\n+      std::fclose(_M_file);\n+  }\n+\n+  random_device::result_type\n+  random_device::_M_getval()\n+  {\n+#if (defined __i386__ || defined __x86_64__)\n+    if (! _M_file)\n+      return __x86_rdrand();\n+#endif\n+\n+    result_type __ret;\n+    std::fread(reinterpret_cast<void*>(&__ret), sizeof(result_type),\n+\t       1, _M_file);\n+    return __ret;\n+  }\n+\n+  random_device::result_type\n+  random_device::_M_getval_pretr1()\n+  {\n+    return _M_mt();\n+  }\n+\n+  template class mersenne_twister_engine<\n+    uint_fast32_t,\n+    32, 624, 397, 31,\n+    0x9908b0dfUL, 11,\n+    0xffffffffUL, 7,\n+    0x9d2c5680UL, 15,\n+    0xefc60000UL, 18, 1812433253UL>;\n+\n+}"}]}