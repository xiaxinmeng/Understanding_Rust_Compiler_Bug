{"sha": "213c9dc78ecb2027e4691a6097c5fda6c2f06a63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEzYzlkYzc4ZWNiMjAyN2U0NjkxYTYwOTdjNWZkYTZjMmYwNmE2Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-12-17T08:09:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-04T09:17:31Z"}, "message": "[Ada] Missing finalization on generic instantiation\n\ngcc/ada/\n\n\t* exp_ch7.adb (Build_Finalizer_Helper.New_Finalizer_Name):\n\tUnnest so that it can be reused.\n\t(Build_Finalizer_Helper.Process_Declarations): Call the\n\txxx__finalize_body procedure of a package instantiation in case\n\tit contains finalization statements.  Code clean ups.\n\t(Build_Finalizer_Helper.Create_Finalizer): Export and set an\n\tInterface_Name for library level finalizers since these may be\n\timported now.\n\t(Build_Finalizer_Helper): Need to process library level package\n\tbody instantiations which may contain objects requiring\n\tfinalization.\n\t* libgnat/s-finmas.ads: Fix typo.", "tree": {"sha": "6c2fc34d82c35109ffbaade937b84dd440663d1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c2fc34d82c35109ffbaade937b84dd440663d1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/213c9dc78ecb2027e4691a6097c5fda6c2f06a63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213c9dc78ecb2027e4691a6097c5fda6c2f06a63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/213c9dc78ecb2027e4691a6097c5fda6c2f06a63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213c9dc78ecb2027e4691a6097c5fda6c2f06a63/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "869a06d981893b769829975bf27d8a3069cacf47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/869a06d981893b769829975bf27d8a3069cacf47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/869a06d981893b769829975bf27d8a3069cacf47"}], "stats": {"total": 211, "additions": 150, "deletions": 61}, "files": [{"sha": "0d7a644d35a9d4511ba0be8106c5992fd2e6a660", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 149, "deletions": 60, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213c9dc78ecb2027e4691a6097c5fda6c2f06a63/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213c9dc78ecb2027e4691a6097c5fda6c2f06a63/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=213c9dc78ecb2027e4691a6097c5fda6c2f06a63", "patch": "@@ -1547,14 +1547,20 @@ package body Exp_Ch7 is\n       --  Create the spec and body of the finalizer and insert them in the\n       --  proper place in the tree depending on the context.\n \n+      function New_Finalizer_Name\n+        (Spec_Id : Node_Id; For_Spec : Boolean) return Name_Id;\n+      --  Create a fully qualified name of a package spec or body finalizer.\n+      --  The generated name is of the form: xx__yy__finalize_[spec|body].\n+\n       procedure Process_Declarations\n         (Decls      : List_Id;\n          Preprocess : Boolean := False;\n          Top_Level  : Boolean := False);\n       --  Inspect a list of declarations or statements which may contain\n       --  objects that need finalization. When flag Preprocess is set, the\n       --  routine will simply count the total number of controlled objects in\n-      --  Decls. Flag Top_Level denotes whether the processing is done for\n+      --  Decls and set Counter_Val accordingly. Top_Level is only relevant\n+      --  when Preprocess is set and if True, the processing is performed for\n       --  objects in nested package declarations or instances.\n \n       procedure Process_Object_Declaration\n@@ -1689,67 +1695,13 @@ package body Exp_Ch7 is\n       ----------------------\n \n       procedure Create_Finalizer is\n-         function New_Finalizer_Name return Name_Id;\n-         --  Create a fully qualified name of a package spec or body finalizer.\n-         --  The generated name is of the form: xx__yy__finalize_[spec|body].\n-\n-         ------------------------\n-         -- New_Finalizer_Name --\n-         ------------------------\n-\n-         function New_Finalizer_Name return Name_Id is\n-            procedure New_Finalizer_Name (Id : Entity_Id);\n-            --  Place \"__<name-of-Id>\" in the name buffer. If the identifier\n-            --  has a non-standard scope, process the scope first.\n-\n-            ------------------------\n-            -- New_Finalizer_Name --\n-            ------------------------\n-\n-            procedure New_Finalizer_Name (Id : Entity_Id) is\n-            begin\n-               if Scope (Id) = Standard_Standard then\n-                  Get_Name_String (Chars (Id));\n-\n-               else\n-                  New_Finalizer_Name (Scope (Id));\n-                  Add_Str_To_Name_Buffer (\"__\");\n-                  Add_Str_To_Name_Buffer (Get_Name_String (Chars (Id)));\n-               end if;\n-            end New_Finalizer_Name;\n-\n-         --  Start of processing for New_Finalizer_Name\n-\n-         begin\n-            --  Create the fully qualified name of the enclosing scope\n-\n-            New_Finalizer_Name (Spec_Id);\n-\n-            --  Generate:\n-            --    __finalize_[spec|body]\n-\n-            Add_Str_To_Name_Buffer (\"__finalize_\");\n-\n-            if For_Package_Spec then\n-               Add_Str_To_Name_Buffer (\"spec\");\n-            else\n-               Add_Str_To_Name_Buffer (\"body\");\n-            end if;\n-\n-            return Name_Find;\n-         end New_Finalizer_Name;\n-\n-         --  Local variables\n-\n          Body_Id    : Entity_Id;\n          Fin_Body   : Node_Id;\n          Fin_Spec   : Node_Id;\n          Jump_Block : Node_Id;\n          Label      : Node_Id;\n          Label_Id   : Entity_Id;\n \n-      --  Start of processing for Create_Finalizer\n-\n       begin\n          --  Step 1: Creation of the finalizer name\n \n@@ -1760,7 +1712,8 @@ package body Exp_Ch7 is\n          --    xx__yy__finalize_[spec|body]\n \n          if For_Package then\n-            Fin_Id := Make_Defining_Identifier (Loc, New_Finalizer_Name);\n+            Fin_Id := Make_Defining_Identifier\n+                        (Loc, New_Finalizer_Name (Spec_Id, For_Package_Spec));\n             Set_Has_Qualified_Name       (Fin_Id);\n             Set_Has_Fully_Qualified_Name (Fin_Id);\n \n@@ -1836,10 +1789,22 @@ package body Exp_Ch7 is\n                Make_Procedure_Specification (Loc,\n                  Defining_Unit_Name => Fin_Id));\n \n+         if For_Package then\n+            Set_Is_Exported (Fin_Id);\n+            Set_Interface_Name (Fin_Id,\n+              Make_String_Literal (Loc,\n+                Strval => Get_Name_String (Chars (Fin_Id))));\n+         end if;\n+\n          --  Step 3: Creation of the finalizer body\n \n-         if Has_Ctrl_Objs then\n+        --  Has_Ctrl_Objs might be set because of a generic package body having\n+        --  controlled objects. In this case, Jump_Alts may be empty and no\n+        --  case nor goto statements are needed.\n \n+         if Has_Ctrl_Objs\n+           and then not Is_Empty_List (Jump_Alts)\n+         then\n             --  Add L0, the default destination to the jump block\n \n             Label_Id := Make_Identifier (Loc, New_External_Name ('L', 0));\n@@ -2161,6 +2126,54 @@ package body Exp_Ch7 is\n          Set_Is_Checked_Ghost_Entity (Fin_Id, False);\n       end Create_Finalizer;\n \n+      ------------------------\n+      -- New_Finalizer_Name --\n+      ------------------------\n+\n+      function New_Finalizer_Name\n+        (Spec_Id : Node_Id; For_Spec : Boolean) return Name_Id\n+      is\n+         procedure New_Finalizer_Name (Id : Entity_Id);\n+         --  Place \"__<name-of-Id>\" in the name buffer. If the identifier\n+         --  has a non-standard scope, process the scope first.\n+\n+         ------------------------\n+         -- New_Finalizer_Name --\n+         ------------------------\n+\n+         procedure New_Finalizer_Name (Id : Entity_Id) is\n+         begin\n+            if Scope (Id) = Standard_Standard then\n+               Get_Name_String (Chars (Id));\n+\n+            else\n+               New_Finalizer_Name (Scope (Id));\n+               Add_Str_To_Name_Buffer (\"__\");\n+               Get_Name_String_And_Append (Chars (Id));\n+            end if;\n+         end New_Finalizer_Name;\n+\n+      --  Start of processing for New_Finalizer_Name\n+\n+      begin\n+         --  Create the fully qualified name of the enclosing scope\n+\n+         New_Finalizer_Name (Spec_Id);\n+\n+         --  Generate:\n+         --    __finalize_[spec|body]\n+\n+         Add_Str_To_Name_Buffer (\"__finalize_\");\n+\n+         if For_Spec then\n+            Add_Str_To_Name_Buffer (\"spec\");\n+         else\n+            Add_Str_To_Name_Buffer (\"body\");\n+         end if;\n+\n+         return Name_Find;\n+      end New_Finalizer_Name;\n+\n       --------------------------\n       -- Process_Declarations --\n       --------------------------\n@@ -2540,6 +2553,73 @@ package body Exp_Ch7 is\n                   end if;\n                end if;\n \n+               --  Call the xxx__finalize_body procedure of a library level\n+               --  package instantiation if the body contains finalization\n+               --  statements.\n+\n+               if Present (Generic_Parent (Spec))\n+                 and then Is_Library_Level_Entity (Pack_Id)\n+                 and then Present (Body_Entity (Generic_Parent (Spec)))\n+               then\n+                  if Preprocess then\n+                     declare\n+                        P : Node_Id;\n+                     begin\n+                        P := Parent (Body_Entity (Generic_Parent (Spec)));\n+                        while Present (P)\n+                          and then Nkind (P) /= N_Package_Body\n+                        loop\n+                           P := Parent (P);\n+                        end loop;\n+\n+                        if Present (P) then\n+                           Old_Counter_Val := Counter_Val;\n+                           Process_Declarations (Declarations (P), Preprocess);\n+\n+                           --  Note that we are processing the generic body\n+                           --  template and not the actually instantiation\n+                           --  (which is generated too late for us to process\n+                           --  it), so there is no need to update in particular\n+                           --  to update Last_Top_Level_Ctrl_Construct here.\n+\n+                           if Counter_Val > Old_Counter_Val then\n+                              Counter_Val := Old_Counter_Val;\n+                              Set_Has_Controlled_Component (Pack_Id);\n+                           end if;\n+                        end if;\n+                     end;\n+\n+                  elsif Has_Controlled_Component (Pack_Id) then\n+\n+                     --  We import the xxx__finalize_body routine since the\n+                     --  generic body will be instantiated later.\n+\n+                     declare\n+                        Id : constant Node_Id :=\n+                          Make_Defining_Identifier (Loc,\n+                            New_Finalizer_Name (Defining_Unit_Name (Spec),\n+                              For_Spec => False));\n+\n+                     begin\n+                        Set_Has_Qualified_Name       (Id);\n+                        Set_Has_Fully_Qualified_Name (Id);\n+                        Set_Is_Imported              (Id);\n+                        Set_Has_Completion           (Id);\n+                        Set_Interface_Name (Id,\n+                          Make_String_Literal (Loc,\n+                            Strval => Get_Name_String (Chars (Id))));\n+\n+                        Append_New_To (Finalizer_Stmts,\n+                          Make_Subprogram_Declaration (Loc,\n+                            Make_Procedure_Specification (Loc,\n+                              Defining_Unit_Name => Id)));\n+                        Append_To (Finalizer_Stmts,\n+                          Make_Procedure_Call_Statement (Loc,\n+                            Name => New_Occurrence_Of (Id, Loc)));\n+                     end;\n+                  end if;\n+               end if;\n+\n             --  Nested package bodies, avoid generics\n \n             elsif Nkind (Decl) = N_Package_Body then\n@@ -2550,8 +2630,7 @@ package body Exp_Ch7 is\n                if Is_Ignored_Ghost_Entity (Defining_Entity (Decl)) then\n                   null;\n \n-               elsif Ekind (Corresponding_Spec (Decl)) /=\n-                       E_Generic_Package\n+               elsif Ekind (Corresponding_Spec (Decl)) /= E_Generic_Package\n                then\n                   Old_Counter_Val := Counter_Val;\n                   Process_Declarations (Declarations (Decl), Preprocess);\n@@ -3041,6 +3120,8 @@ package body Exp_Ch7 is\n             --  Otherwise the initialization calls follow the related object\n \n             else\n+               pragma Assert (Present (Stmt));\n+\n                Stmt_2 := Next_Suitable_Statement (Stmt);\n \n                --  Check for an optional call to Deep_Initialize which may\n@@ -3542,6 +3623,14 @@ package body Exp_Ch7 is\n             or else Scope_Depth_Value (Spec_Id) /= Uint_1\n             or else (Is_Generic_Instance (Spec_Id)\n                       and then Package_Instantiation (Spec_Id) /= N))\n+\n+         --  Still need to process package body instantiations which may\n+         --  contain objects requiring finalization.\n+\n+        and then not\n+          (For_Package_Body\n+            and then Is_Library_Level_Entity (Spec_Id)\n+            and then Is_Generic_Instance (Spec_Id))\n       then\n          return;\n       end if;\n@@ -3623,7 +3712,7 @@ package body Exp_Ch7 is\n \n       --  Step 3: Finalizer creation\n \n-      if Acts_As_Clean or else Has_Ctrl_Objs or else Has_Tagged_Types then\n+      if Acts_As_Clean or Has_Ctrl_Objs or Has_Tagged_Types then\n          Create_Finalizer;\n       end if;\n    end Build_Finalizer_Helper;"}, {"sha": "ea5a3fb3470c74f13af2525c99eecc8952a25dc8", "filename": "gcc/ada/libgnat/s-finmas.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213c9dc78ecb2027e4691a6097c5fda6c2f06a63/gcc%2Fada%2Flibgnat%2Fs-finmas.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213c9dc78ecb2027e4691a6097c5fda6c2f06a63/gcc%2Fada%2Flibgnat%2Fs-finmas.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-finmas.ads?ref=213c9dc78ecb2027e4691a6097c5fda6c2f06a63", "patch": "@@ -74,7 +74,7 @@ package System.Finalization_Masters is\n    for Finalization_Master_Ptr'Storage_Size use 0;\n \n    procedure Attach (N : not null FM_Node_Ptr; L : not null FM_Node_Ptr);\n-   --  Compiler interface, do not call from withing the run-time. Prepend a\n+   --  Compiler interface, do not call from within the run-time. Prepend a\n    --  node to a specific finalization master.\n \n    procedure Attach_Unprotected"}]}