{"sha": "170b020fe4be4eadea27d389257778d952fb5a13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcwYjAyMGZlNGJlNGVhZGVhMjdkMzg5MjU3Nzc4ZDk1MmZiNWExMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-06-20T00:48:44Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-06-20T00:48:44Z"}, "message": "re PR middle-end/11041 (ICE: const myclass &x = *x; (when operator*() defined))\n\n\tPR c++/11041\n\t* call.c (initialize_reference): Do not use cp_finish_decl to emit\n\ttemporary variables.\n\t* cp-tree.h (static_aggregates): Declare.\n\t(pushdecl_top_level_and_finish): Likewise.\n\t* decl.c (pushdecl_top_level_1): New function.\n\t(pushdecl_top_level): Use it.\n\t(pushdecl_top_level_and_finish): New function.\n\t(initialize_local_var): Remove redundant code.\n\t(cp_finish_decl): Remove support for RESULT_DECLs.  Don't check\n\tbuilding_stmt_tree.\n\t* decl.h (static_aggregates): Remove.\n\t* decl2.c (get_guard): Use pushdecl_top_level_and_finish.\n\t* rtti.c (get_tinfo_decl): Use pushdecl_top_level_and_finish.\n\t(tinfo_base_init): Likewise.\n\n\tPR c++/11041\n\t* g++.dg/init/ref7.C: New test.\n\nFrom-SVN: r68236", "tree": {"sha": "18750127388f053e1dd83e7ae5f29fc9e9fe0bfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18750127388f053e1dd83e7ae5f29fc9e9fe0bfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/170b020fe4be4eadea27d389257778d952fb5a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/170b020fe4be4eadea27d389257778d952fb5a13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/170b020fe4be4eadea27d389257778d952fb5a13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/170b020fe4be4eadea27d389257778d952fb5a13/comments", "author": null, "committer": null, "parents": [{"sha": "7a1d37e9102a1bbc34b4544161ddf283c667bc0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1d37e9102a1bbc34b4544161ddf283c667bc0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a1d37e9102a1bbc34b4544161ddf283c667bc0b"}], "stats": {"total": 141, "additions": 101, "deletions": 40}, "files": [{"sha": "30e01f2d8fd0615d9a4a6d620ee6aa694628e992", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=170b020fe4be4eadea27d389257778d952fb5a13", "patch": "@@ -1,3 +1,21 @@\n+2003-06-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/11041\n+\t* call.c (initialize_reference): Do not use cp_finish_decl to emit\n+\ttemporary variables.\n+\t* cp-tree.h (static_aggregates): Declare.\n+\t(pushdecl_top_level_and_finish): Likewise.\n+\t* decl.c (pushdecl_top_level_1): New function.\n+\t(pushdecl_top_level): Use it.\n+\t(pushdecl_top_level_and_finish): New function.\n+\t(initialize_local_var): Remove redundant code.\n+\t(cp_finish_decl): Remove support for RESULT_DECLs.  Don't check\n+\tbuilding_stmt_tree.\n+\t* decl.h (static_aggregates): Remove.\n+\t* decl2.c (get_guard): Use pushdecl_top_level_and_finish.\n+\t* rtti.c (get_tinfo_decl): Use pushdecl_top_level_and_finish.\n+\t(tinfo_base_init): Likewise.\n+\t\n 2003-06-19  Matt Austern  <austern@apple.com>\n \n \tPR c++/11228"}, {"sha": "9bc55bef9e25a5415dafe68520babc7c5efec0d8", "filename": "gcc/cp/call.c", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=170b020fe4be4eadea27d389257778d952fb5a13", "patch": "@@ -6144,7 +6144,7 @@ initialize_reference (tree type, tree expr, tree decl)\n        T t;\n        const S& s = t;\n \n-    we can extend the lifetime of the returnn value of the conversion\n+    we can extend the lifetime of the return value of the conversion\n     operator.  */\n   my_friendly_assert (TREE_CODE (conv) == REF_BIND, 20030302);\n   if (decl)\n@@ -6167,13 +6167,33 @@ initialize_reference (tree type, tree expr, tree decl)\n       expr = convert_like (conv, expr);\n       if (!real_non_cast_lvalue_p (expr))\n \t{\n+\t  tree init;\n+\t  tree type;\n+\n \t  /* Create the temporary variable.  */\n-\t  var = make_temporary_var_for_ref_to_temp (decl, TREE_TYPE (expr));\n-\t  DECL_INITIAL (var) = expr;\n-\t  cp_finish_decl (var, expr, NULL_TREE, \n-\t\t      LOOKUP_ONLYCONVERTING|DIRECT_BIND);\n+\t  type = TREE_TYPE (expr);\n+\t  var = make_temporary_var_for_ref_to_temp (decl, type);\n+\t  layout_decl (var, 0);\n+\t  if (at_function_scope_p ())\n+\t    {\n+\t      tree cleanup;\n+\n+\t      add_decl_stmt (var);\n+\t      cleanup = cxx_maybe_build_cleanup (var);\n+\t      if (cleanup)\n+\t\tfinish_decl_cleanup (var, cleanup);\n+\t    }\n+\t  else\n+\t    {\n+\t      rest_of_decl_compilation (var, NULL, /*toplev=*/1, at_eof);\n+\t      if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type))\n+\t\tstatic_aggregates = tree_cons (NULL_TREE, var,\n+\t\t\t\t\t       static_aggregates);\n+\t    }\n+\t  init = build (INIT_EXPR, type, var, expr);\n \t  /* Use its address to initialize the reference variable.  */\n \t  expr = build_address (var);\n+\t  expr = build (COMPOUND_EXPR, TREE_TYPE (expr), init, expr);\n \t}\n       else\n \t/* Take the address of EXPR.  */"}, {"sha": "bfb7e0f3e68660a3cffa597a6a8d12be993476cc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=170b020fe4be4eadea27d389257778d952fb5a13", "patch": "@@ -3263,6 +3263,12 @@ extern GTY(()) varray_type local_classes;\n \n extern int at_eof;\n \n+/* A list of namespace-scope objects which have constructors or\n+   destructors which reside in the global scope.  The decl is stored\n+   in the TREE_VALUE slot and the initializer is stored in the\n+   TREE_PURPOSE slot.  */\n+extern GTY(()) tree static_aggregates;\n+\n /* Functions called along with real static constructors and destructors.  */\n \n extern GTY(()) tree static_ctors;\n@@ -3631,6 +3637,7 @@ extern void clear_anon_tags\t\t\t(void);\n extern int decls_match\t\t\t\t(tree, tree);\n extern int duplicate_decls\t\t\t(tree, tree);\n extern tree pushdecl_top_level\t\t\t(tree);\n+extern tree pushdecl_top_level_and_finish       (tree, tree);\n extern void pushdecl_class_level\t\t(tree);\n extern tree pushdecl_namespace_level            (tree);\n extern tree push_using_decl                     (tree, tree);"}, {"sha": "d025a6fba1d35269e958993c3ed6c842e98bb1fb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=170b020fe4be4eadea27d389257778d952fb5a13", "patch": "@@ -4143,18 +4143,40 @@ pushdecl_namespace_level (tree x)\n   POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, t);\n }\n \n-/* Like pushdecl, only it places X in the global scope if appropriate.  */\n+/* Like pushdecl, only it places X in the global scope if appropriate.\n+   Calls cp_finish_decl to register the variable, initializing it with\n+   *INIT, if INIT is non-NULL.  */\n \n-tree\n-pushdecl_top_level (tree x)\n+static tree\n+pushdecl_top_level_1 (tree x, tree *init)\n {\n   timevar_push (TV_NAME_LOOKUP);\n   push_to_top_level ();\n   x = pushdecl_namespace_level (x);\n+  if (init)\n+    cp_finish_decl (x, *init, NULL_TREE, 0);\n   pop_from_top_level ();\n   POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, x);\n }\n \n+/* Like pushdecl, only it places X in the global scope if appropriate.  */\n+\n+tree\n+pushdecl_top_level (tree x)\n+{\n+  return pushdecl_top_level_1 (x, NULL);\n+}\n+\n+/* Like pushdecl, only it places X in the global scope if\n+   appropriate.  Calls cp_finish_decl to register the variable,\n+   initializing it with INIT.  */\n+\n+tree\n+pushdecl_top_level_and_finish (tree x, tree init)\n+{\n+  return pushdecl_top_level_1 (x, &init);\n+}\n+\n /* Make the declaration of X appear in CLASS scope.  */\n \n void\n@@ -7903,6 +7925,7 @@ static void\n initialize_local_var (tree decl, tree init)\n {\n   tree type = TREE_TYPE (decl);\n+  tree cleanup;\n \n   my_friendly_assert (TREE_CODE (decl) == VAR_DECL\n \t\t      || TREE_CODE (decl) == RESULT_DECL, \n@@ -7952,17 +7975,9 @@ initialize_local_var (tree decl, tree init)\n     }\n \n   /* Generate a cleanup, if necessary.  */\n-  if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type))\n-    {\n-      tree cleanup;\n-\n-      /* Compute the cleanup.  */\n-      cleanup = cxx_maybe_build_cleanup (decl);\n-      \n-      /* Record the cleanup required for this declaration.  */\n-      if (DECL_SIZE (decl) && cleanup)\n-\tfinish_decl_cleanup (decl, cleanup);\n-    }\n+  cleanup = cxx_maybe_build_cleanup (decl);\n+  if (DECL_SIZE (decl) && cleanup)\n+    finish_decl_cleanup (decl, cleanup);\n }\n \n /* Finish processing of a declaration;\n@@ -7991,6 +8006,8 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n       return;\n     }\n \n+  my_friendly_assert (TREE_CODE (decl) != RESULT_DECL, 20030619);\n+\n   /* If a name was specified, get the string.  */\n   if (global_scope_p (current_binding_level))\n     asmspec_tree = maybe_apply_renaming_pragma (decl, asmspec_tree);\n@@ -8031,8 +8048,7 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n   if (processing_template_decl)\n     {\n       /* Add this declaration to the statement-tree.  */\n-      if (at_function_scope_p ()\n-\t  && TREE_CODE (decl) != RESULT_DECL)\n+      if (at_function_scope_p ())\n \tadd_decl_stmt (decl);\n \n       if (init && DECL_INITIAL (decl))\n@@ -8089,8 +8105,6 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n       SET_DECL_ASSEMBLER_NAME (decl, get_identifier (asmspec));\n       make_decl_rtl (decl, asmspec);\n     }\n-  else if (TREE_CODE (decl) == RESULT_DECL)\n-    init = check_initializer (decl, init, flags);\n   else if (TREE_CODE (decl) == VAR_DECL)\n     {\n       /* Only PODs can have thread-local storage.  Other types may require\n@@ -8146,9 +8160,7 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n   /* Add this declaration to the statement-tree.  This needs to happen\n      after the call to check_initializer so that the DECL_STMT for a\n      reference temp is added before the DECL_STMT for the reference itself.  */\n-  if (building_stmt_tree ()\n-      && at_function_scope_p ()\n-      && TREE_CODE (decl) != RESULT_DECL)\n+  if (at_function_scope_p ())\n     add_decl_stmt (decl);\n \n   if (TREE_CODE (decl) == VAR_DECL)\n@@ -8157,8 +8169,7 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n   /* Output the assembler code and/or RTL code for variables and functions,\n      unless the type is an undefined structure or union.\n      If not, it will get done when the type is completed.  */\n-  if (TREE_CODE (decl) == VAR_DECL || TREE_CODE (decl) == FUNCTION_DECL\n-      || TREE_CODE (decl) == RESULT_DECL)\n+  if (TREE_CODE (decl) == VAR_DECL || TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       if (TREE_CODE (decl) == VAR_DECL)\n \tmaybe_commonize_var (decl);"}, {"sha": "2a7a7659e1bcb30c869c6981a6321a421f619595", "filename": "gcc/cp/decl.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Fcp%2Fdecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Fcp%2Fdecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.h?ref=170b020fe4be4eadea27d389257778d952fb5a13", "patch": "@@ -37,12 +37,6 @@ extern tree grokdeclarator (tree, tree, enum decl_context, int, tree*);\n    or a chain or parameter decls here.  */\n extern GTY(()) tree last_function_parms;\n \n-/* A list of objects which have constructors or destructors\n-   which reside in the global scope.  The decl is stored in\n-   the TREE_VALUE slot and the initializer is stored\n-   in the TREE_PURPOSE slot.  */\n-extern GTY(()) tree static_aggregates;\n-\n #ifdef DEBUG_CP_BINDING_LEVELS\n /* Purely for debugging purposes.  */\n extern int debug_bindings_indentation;"}, {"sha": "3fa4d74c53eaa7b680c0ac96c23a71c64306fdcc", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=170b020fe4be4eadea27d389257778d952fb5a13", "patch": "@@ -1886,8 +1886,7 @@ get_guard (tree decl)\n       \n       DECL_ARTIFICIAL (guard) = 1;\n       TREE_USED (guard) = 1;\n-      pushdecl_top_level (guard);\n-      cp_finish_decl (guard, NULL_TREE, NULL_TREE, 0);\n+      pushdecl_top_level_and_finish (guard, NULL_TREE);\n     }\n   return guard;\n }"}, {"sha": "1a29c1c783ec51bbdf6ea117e7f72709d85d642d", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=170b020fe4be4eadea27d389257778d952fb5a13", "patch": "@@ -364,9 +364,8 @@ get_tinfo_decl (tree type)\n       DECL_EXTERNAL (d) = 1;\n       SET_DECL_ASSEMBLER_NAME (d, name);\n       DECL_COMDAT (d) = 1;\n-      cp_finish_decl (d, NULL_TREE, NULL_TREE, 0);\n \n-      pushdecl_top_level (d);\n+      pushdecl_top_level_and_finish (d, NULL_TREE);\n \n       if (CLASS_TYPE_P (type))\n \tCLASSTYPE_TYPEINFO_VAR (TYPE_MAIN_VARIANT (type)) = d;\n@@ -770,8 +769,7 @@ tinfo_base_init (tree desc, tree target)\n     SET_DECL_ASSEMBLER_NAME (name_decl,\n \t\t\t     mangle_typeinfo_string_for_type (target));\n     DECL_INITIAL (name_decl) = name_string;\n-    cp_finish_decl (name_decl, name_string, NULL_TREE, 0);\n-    pushdecl_top_level (name_decl);\n+    pushdecl_top_level_and_finish (name_decl, name_string);\n   }\n \n   vtable_ptr = TINFO_VTABLE_DECL (desc);"}, {"sha": "dd5c99251abe64ded364383f035e64ae479fa1d1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=170b020fe4be4eadea27d389257778d952fb5a13", "patch": "@@ -1,3 +1,8 @@\n+2003-06-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/11041\n+\t* g++.dg/init/ref7.C: New test.\n+\n 2003-06-19  Matt Austern  <austern@apple.com>\n \n \tPR c++/11228"}, {"sha": "0832069e32ce643164e4bd968d35081006926369", "filename": "gcc/testsuite/g++.dg/init/ref7.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/170b020fe4be4eadea27d389257778d952fb5a13/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fref7.C?ref=170b020fe4be4eadea27d389257778d952fb5a13", "patch": "@@ -0,0 +1,9 @@\n+class hop\n+{\n+public:\n+    hop operator* () const;\n+};\n+int main(void)\n+{\n+    const hop &x = *x;\n+}"}]}