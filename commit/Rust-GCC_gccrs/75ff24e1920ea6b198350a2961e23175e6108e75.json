{"sha": "75ff24e1920ea6b198350a2961e23175e6108e75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVmZjI0ZTE5MjBlYTZiMTk4MzUwYTI5NjFlMjMxNzVlNjEwOGU3NQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-06-28T20:22:14Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-06-28T20:24:52Z"}, "message": "Underline argument in -Wnonnull and in C++ extend warning to the this pointer [PR c++/86568].\n\nResolves:\nPR c++/86568 - -Wnonnull warnings should highlight the relevant argument not the closing parenthesis\n\ngcc/c-family/ChangeLog:\n\n\tPR c++/86568\n\t* c-common.c (struct nonnull_arg_ctx): Add members.\n\t(check_function_nonnull): Use nonnull_arg_ctx as argument.  Handle\n\tC++ member functions specially.  Consider the this pointer implicitly\n\tnonnull.\n\t(check_nonnull_arg): Use location of argument when available.\n\t(check_function_arguments): Use nonnull_arg_ctx as argument.\n\ngcc/ChangeLog:\n\n\tPR c++/86568\n\t* calls.c (maybe_warn_rdwr_sizes): Use location of argument if\n\tavailable.\n\t* tree-ssa-ccp.c (pass_post_ipa_warn::execute): Same.  Adjust\n\tindentation.\n\t* tree.c (get_nonnull_args): Consider the this pointer implicitly\n\tnonnull.\n\t* var-tracking.c (deps_vec): New type.\n\t(var_loc_dep_vec): New function.\n\t(VAR_LOC_DEP_VEC): Use it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/86568\n\t* g++.dg/warn/Wnonnull5.C: New test.\n\t* c-c++-common/pr28656.c: Adjust text of expected warning.\n\t* c-c++-common/pr66208.c: Same.\n\t* g++.dg/cpp0x/nullptr22.C: Same.\n\t* g++.dg/ext/attr-nonnull.C: Same.\n\t* g++.dg/ext/attrib49.C: Same.\n\t* g++.dg/pr71973-2.C: Same.\n\t* g++.dg/warn/Wnonnull3.C: Same.\n\t* g++.dg/warn/Wnonnull4.C: Same.\n\t* obj-c++.dg/attributes/method-nonnull-1.mm: Same.\n\t* objc.dg/attributes/method-nonnull-1.m: Same.", "tree": {"sha": "88dfd1e43a652ff5f769d9543cd22d764cbe29e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88dfd1e43a652ff5f769d9543cd22d764cbe29e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75ff24e1920ea6b198350a2961e23175e6108e75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ff24e1920ea6b198350a2961e23175e6108e75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75ff24e1920ea6b198350a2961e23175e6108e75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ff24e1920ea6b198350a2961e23175e6108e75/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce56fd949f359a62b86a45aaf975ac2ecc48fa64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce56fd949f359a62b86a45aaf975ac2ecc48fa64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce56fd949f359a62b86a45aaf975ac2ecc48fa64"}], "stats": {"total": 364, "additions": 273, "deletions": 91}, "files": [{"sha": "cfd12c0177ffc4699a320418785cd8776b001c64", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 62, "deletions": 21, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=75ff24e1920ea6b198350a2961e23175e6108e75", "patch": "@@ -5288,26 +5288,39 @@ c_determine_visibility (tree decl)\n \n struct nonnull_arg_ctx\n {\n+  /* Location of the call.  */\n   location_t loc;\n+  /* The function whose arguments are being checked and its type (used\n+     for calls through function pointers).  */\n+  const_tree fndecl, fntype;\n+  /* True if a warning has been issued.  */\n   bool warned_p;\n };\n \n-/* Check the argument list of a function call for null in argument slots\n-   that are marked as requiring a non-null pointer argument.  The NARGS\n-   arguments are passed in the array ARGARRAY.  Return true if we have\n-   warned.  */\n+/* Check the argument list of a function call to CTX.FNDECL of CTX.FNTYPE\n+   for null in argument slots that are marked as requiring a non-null\n+   pointer argument.  The NARGS arguments are passed in the array ARGARRAY.\n+   Return true if we have warned.  */\n \n static bool\n-check_function_nonnull (location_t loc, tree attrs, int nargs, tree *argarray)\n+check_function_nonnull (nonnull_arg_ctx &ctx, int nargs, tree *argarray)\n {\n-  tree a;\n-  int i;\n+  int firstarg = 0;\n+  if (TREE_CODE (ctx.fntype) == METHOD_TYPE)\n+    {\n+      /* In calls to C++ non-static member functions check the this\n+\t pointer regardless of whether the function is declared with\n+\t attribute nonnull.  */\n+      firstarg = 1;\n+      check_function_arguments_recurse (check_nonnull_arg, &ctx, argarray[0],\n+\t\t\t\t\tfirstarg);\n+    }\n \n-  attrs = lookup_attribute (\"nonnull\", attrs);\n+  tree attrs = lookup_attribute (\"nonnull\", TYPE_ATTRIBUTES (ctx.fntype));\n   if (attrs == NULL_TREE)\n-    return false;\n+    return ctx.warned_p;\n \n-  a = attrs;\n+  tree a = attrs;\n   /* See if any of the nonnull attributes has no arguments.  If so,\n      then every pointer argument is checked (in which case the check\n      for pointer type is done in check_nonnull_arg).  */\n@@ -5316,16 +5329,15 @@ check_function_nonnull (location_t loc, tree attrs, int nargs, tree *argarray)\n       a = lookup_attribute (\"nonnull\", TREE_CHAIN (a));\n     while (a != NULL_TREE && TREE_VALUE (a) != NULL_TREE);\n \n-  struct nonnull_arg_ctx ctx = { loc, false };\n   if (a != NULL_TREE)\n-    for (i = 0; i < nargs; i++)\n+    for (int i = firstarg; i < nargs; i++)\n       check_function_arguments_recurse (check_nonnull_arg, &ctx, argarray[i],\n \t\t\t\t\ti + 1);\n   else\n     {\n       /* Walk the argument list.  If we encounter an argument number we\n \t should check for non-null, do it.  */\n-      for (i = 0; i < nargs; i++)\n+      for (int i = firstarg; i < nargs; i++)\n \t{\n \t  for (a = attrs; ; a = TREE_CHAIN (a))\n \t    {\n@@ -5495,12 +5507,39 @@ check_nonnull_arg (void *ctx, tree param, unsigned HOST_WIDE_INT param_num)\n     return;\n \n   /* Diagnose the simple cases of null arguments.  */\n-  if (integer_zerop (fold_for_warn (param)))\n+  if (!integer_zerop (fold_for_warn (param)))\n+    return;\n+\n+  auto_diagnostic_group adg;\n+\n+  const location_t loc = EXPR_LOC_OR_LOC (param, pctx->loc);\n+\n+  if (TREE_CODE (pctx->fntype) == METHOD_TYPE)\n+    --param_num;\n+\n+  bool warned;\n+  if (param_num == 0)\n+    {\n+      warned = warning_at (loc, OPT_Wnonnull,\n+\t\t\t   \"%qs pointer null\", \"this\");\n+      if (pctx->fndecl)\n+\tinform (DECL_SOURCE_LOCATION (pctx->fndecl),\n+\t\t\"in a call to non-static member function %qD\",\n+\t\tpctx->fndecl);\n+    }\n+  else\n     {\n-      warning_at (pctx->loc, OPT_Wnonnull, \"null argument where non-null \"\n-\t\t  \"required (argument %lu)\", (unsigned long) param_num);\n-      pctx->warned_p = true;\n+      warned = warning_at (loc, OPT_Wnonnull,\n+\t\t\t   \"argument %u null where non-null expected\",\n+\t\t\t   (unsigned) param_num);\n+      if (pctx->fndecl)\n+\tinform (DECL_SOURCE_LOCATION (pctx->fndecl),\n+\t\t\"in a call to function %qD declared %qs\",\n+\t\tpctx->fndecl, \"nonnull\");\n     }\n+\n+  if (warned)\n+    pctx->warned_p = true;\n }\n \n /* Helper for attribute handling; fetch the operand number from\n@@ -5717,11 +5756,13 @@ check_function_arguments (location_t loc, const_tree fndecl, const_tree fntype,\n   bool warned_p = false;\n \n   /* Check for null being passed in a pointer argument that must be\n-     non-null.  We also need to do this if format checking is enabled.  */\n-\n+     non-null.  In C++, this includes the this pointer.  We also need\n+     to do this if format checking is enabled.  */\n   if (warn_nonnull)\n-    warned_p = check_function_nonnull (loc, TYPE_ATTRIBUTES (fntype),\n-\t\t\t\t       nargs, argarray);\n+    {\n+      nonnull_arg_ctx ctx = { loc, fndecl, fntype, false };\n+      warned_p = check_function_nonnull (ctx, nargs, argarray);\n+    }\n \n   /* Check for errors in format strings.  */\n "}, {"sha": "72f8901158436af5a995cd7916ce851df2f3b2e6", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=75ff24e1920ea6b198350a2961e23175e6108e75", "patch": "@@ -1938,6 +1938,8 @@ maybe_warn_rdwr_sizes (rdwr_map *rwm, tree exp)\n   if (!fntype)\n     return;\n \n+  auto_diagnostic_group adg;\n+\n   /* A string describing the attributes that the warnings issued by this\n      function apply to.  Used to print one informational note per function\n      call, rather than one per warning.  That reduces clutter.  */\n@@ -2036,7 +2038,7 @@ maybe_warn_rdwr_sizes (rdwr_map *rwm, tree exp)\n \t     attribute nonnull when the function accepts null pointers\n \t     only when the corresponding size is zero.  */\n \t  bool warned = false;\n-\t  location_t loc = EXPR_LOCATION (exp);\n+\t  const location_t loc = EXPR_LOC_OR_LOC (ptr, EXPR_LOCATION (exp));\n \t  if (tree_int_cst_equal (sizrng[0], sizrng[1]))\n \t    warned = warning_at (loc, OPT_Wnonnull,\n \t\t\t\t \"%Kargument %i is null but the corresponding \""}, {"sha": "ed97f6c4cb3f3a9196cde268714511a2fcbe9ffc", "filename": "gcc/testsuite/c-c++-common/pr28656.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr28656.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr28656.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr28656.c?ref=75ff24e1920ea6b198350a2961e23175e6108e75", "patch": "@@ -18,12 +18,12 @@ void\n foo (void)\n {\n   memcpy (0, 0, 0);\n-  /* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 1\" \"\" { target *-*-* } .-1 } */\n-  /* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 2\" \"\" { target *-*-* } .-2 } */\n+  /* { dg-warning \"argument 1 null where non-null expected\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"argument 2 null where non-null expected\" \"\" { target *-*-* } .-2 } */\n \n   bar (0, 0, 0, 0, 0);\n-  /* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 1\" \"\" { target *-*-* } .-1 } */\n-  /* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 3\" \"\" { target *-*-* } .-2 } */\n-  /* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 4\" \"\" { target *-*-* } .-3 } */\n-  /* { dg-warning \"null argument where non-null required\\[^\\n\\r\\]*argument 5\" \"\" { target *-*-* } .-4 } */\n+  /* { dg-warning \"argument 1 null where non-null expected\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"argument 3 null where non-null expected\" \"\" { target *-*-* } .-2 } */\n+  /* { dg-warning \"argument 4 null where non-null expected\" \"\" { target *-*-* } .-3 } */\n+  /* { dg-warning \"argument 5 null where non-null expected\" \"\" { target *-*-* } .-4 } */\n }"}, {"sha": "fd67373042baca4991494090ee099da74b67d624", "filename": "gcc/testsuite/c-c++-common/pr66208.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr66208.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr66208.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr66208.c?ref=75ff24e1920ea6b198350a2961e23175e6108e75", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-Wnonnull\" } */\n \n void foox (char*, ...) __attribute__ ((nonnull (1)));\n-#define foo(p) foox (p, \"p is null\") /* { dg-warning \"null argument\" } */\n+#define foo(p) foox (p, \"p is null\") /* { dg-warning \"argument 1 null\" } */\n \n void baz (void)\n {"}, {"sha": "0b326fbb71542d43308299aed37b1904a28bbdc5", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr22.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr22.C?ref=75ff24e1920ea6b198350a2961e23175e6108e75", "patch": "@@ -10,11 +10,11 @@ void f3(const char*, ...) __attribute__((sentinel));\n void f()\n {\n   f1(\"%p\", nullptr);\n-  f2(nullptr); // { dg-warning \"null argument where non-null required \" }\n+  f2(nullptr); // { dg-warning \"argument 1 null where non-null expected \" }\n   f3(\"x\", \"y\", __null); // { dg-warning \"missing sentinel in function call\" }\n   f3(\"x\", \"y\", nullptr);\n   decltype(nullptr) mynull = 0;\n   f1(\"%p\", mynull);\n-  f2(mynull); // { dg-warning \"null argument where non-null required \" }\n+  f2(mynull); // { dg-warning \"argument 1 null where non-null expected \" }\n   f3(\"x\", \"y\", mynull);\n }"}, {"sha": "c448bb07971f57b669a4470d243f45992dcbf85c", "filename": "gcc/testsuite/g++.dg/ext/attr-nonnull.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-nonnull.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-nonnull.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-nonnull.C?ref=75ff24e1920ea6b198350a2961e23175e6108e75", "patch": "@@ -21,11 +21,11 @@ f<float>(float*, float*, float*);\n \n void test_nonnull (void)\n {\n-  f<void>(0, 0, 0);           // { dg-warning \"null argument where non-null required \\\\\\(argument 1\\\\\\)\" }\n+  f<void>(0, 0, 0);           // { dg-warning \"argument 1 null where non-null expected\" }\n \n-  f<int>(0, 0, 0);            // { dg-bogus \"null argument\" }\n+  f<int>(0, 0, 0);            // { dg-bogus \"null\" }\n \n   f<float>(0, 0, 0);\n-  // { dg-bogus \"null argument where non-null required \\\\\\(argument 1\\\\\\)\" \"\" { target *-*-* } .-1 }\n-  // { dg-warning \"null argument where non-null required \\\\\\(argument 3\\\\\\)\" \"\" { target *-*-* } .-2 }\n+  // { dg-bogus \"argument 1 null where non-null expected\" \"\" { target *-*-* } .-1 }\n+  // { dg-warning \"argument 3 null where non-null expected\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "d0ba738494a4e8cbf89937c2e266042b737f1557", "filename": "gcc/testsuite/g++.dg/ext/attrib49.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib49.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib49.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib49.C?ref=75ff24e1920ea6b198350a2961e23175e6108e75", "patch": "@@ -10,11 +10,11 @@ void (foo::*g) (int *) __attribute__ ((nonnull (2)));\n void\n fun1 (void (foo::*f) (int *) __attribute__ ((nonnull (2))))\n {\n-    (x.*f) ((int *) 0); // { dg-warning \"null argument\" }\n+    (x.*f) ((int *) 0); // { dg-warning \"argument 1 null\" }\n }\n \n void\n fun2 (void (foo::*f) () __attribute__ ((nonnull, unused))) // { dg-bogus \"unused\" }\n {\n-    (x.*g) ((int *) 0); // { dg-warning \"null argument\" }\n+    (x.*g) ((int *) 0); // { dg-warning \"argument 1 null\" }\n }"}, {"sha": "b0719b6a5a2823df184b336bed79da4419cff532", "filename": "gcc/testsuite/g++.dg/pr71973-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71973-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71973-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr71973-2.C?ref=75ff24e1920ea6b198350a2961e23175e6108e75", "patch": "@@ -10,7 +10,7 @@ __attribute__ ((__nothrow__));\n \n void foo () throw ()\n {\n-  strftime (0,0,0,0); // { dg-warning \"null argument where non-null required\" }\n+  strftime (0,0,0,0); // { dg-warning \"argument \\(1|3|4\\) null where non-null expected\" }\n   // { dg-warning \"too many arguments for format\" \"\" { target *-*-* } .-1 }\n }\n "}, {"sha": "cebf36d581d565e730669f0b8708fb355d520146", "filename": "gcc/testsuite/g++.dg/warn/Wnonnull3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull3.C?ref=75ff24e1920ea6b198350a2961e23175e6108e75", "patch": "@@ -10,6 +10,6 @@ struct S2 { static const int i = 1; typedef void* U; };\n void\n g ()\n {\n-  f<S1>(0); // { dg-warning \"null argument where non-null required\" }\n-  f<S2>(0); // { dg-warning \"null argument where non-null required\" }\n+  f<S1>(0); // { dg-warning \"argument 1 null where non-null expected\" }\n+  f<S2>(0); // { dg-warning \"argument 1 null where non-null expected\" }\n }"}, {"sha": "215781613b25ddb20e215149b9d530cf8c65f9bf", "filename": "gcc/testsuite/g++.dg/warn/Wnonnull4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull4.C?ref=75ff24e1920ea6b198350a2961e23175e6108e75", "patch": "@@ -10,8 +10,8 @@ int\n main ()\n {\n   int *const p = 0;\n-  declared_not_defined (p);\t// { dg-warning \"null argument where non-null required\" }\n-  declared_and_defined (p);\t// { dg-warning \"null argument where non-null required\" }\n+  declared_not_defined (p);\t// { dg-warning \"argument 1 null where non-null expected\" }\n+  declared_and_defined (p);\t// { dg-warning \"argument 1 null where non-null expected\" }\n }\n \n void *"}, {"sha": "8b25d2d9f86a857f7ed2e5cd7b5a2df2b65d5675", "filename": "gcc/testsuite/g++.dg/warn/Wnonnull5.C", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnonnull5.C?ref=75ff24e1920ea6b198350a2961e23175e6108e75", "patch": "@@ -0,0 +1,108 @@\n+/* PR c++/86568 - -Wnonnull warnings should highlight the relevant argument\n+   not the closing parenthesis.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+#define NONNULL __attribute__ ((nonnull))\n+\n+#if __cplusplus < 201103L\n+#  define nullptr __null\n+#endif\n+\n+struct S\n+{\n+  void\n+  f0 (const void*) const;         // { dg-message \"in a call to non-static member function 'void S::f0\\\\(const void\\\\*\\\\) const'\" }\n+\n+  void\n+  f1 (const void*) const;         // { dg-message \"in a call to non-static member function 'void S::f1\\\\(const void\\\\*\\\\) const'\" }\n+\n+  void\n+  f2 (const void*) const;         // { dg-message \"in a call to non-static member function 'void S::f2\\\\(const void\\\\*\\\\) const'\" }\n+\n+  NONNULL void\n+  f3 (const void*, const void*);  // { dg-message \"in a call to function 'void S::f3\\\\(const void\\\\*, const void\\\\*\\\\)' declared 'nonnull'\" }\n+\n+  NONNULL void\n+  f4 (const void*, const void*);  // { dg-message \"in a call to function 'void S::f4\\\\(const void\\\\*, const void\\\\*\\\\)' declared 'nonnull'\" }\n+\n+  NONNULL void\n+  f5 (const void*, const void*);  // { dg-message \"in a call to function 'void S::f5\\\\\\(const void\\\\*, const void\\\\*\\\\)' declared 'nonnull'\" }\n+\n+  NONNULL void\n+  f6 (const void*, const void*);  // { dg-message \"in a call to function 'void S::f6\\\\\\(const void\\\\*, const void\\\\*\\\\)' declared 'nonnull'\" }\n+};\n+\n+void warn_nullptr_this ()\n+{\n+  ((S*)nullptr)->f0 (\"\");        // { dg-warning \"3:'this' pointer null\" \"pr86568\" { xfail *-*-* } }\n+                                 // { dg-warning \"this' pointer null\" \"pr86568\" { target *-*-* } .-1 }\n+}\n+\n+void warn_null_this_cst ()\n+{\n+  S* const null = 0;\n+  null->f1 (\"\");                  // { dg-warning \"3:'this' pointer null\" }\n+}\n+\n+void warn_null_this_var ()\n+{\n+  S* null = 0;\n+  null->f2 (&null);               // { dg-warning \"3:'this' pointer null\" \"pr86568\" { xfail *-*-* } }\n+                                  // { dg-warning \"'this' pointer null\" \"pr86568\" { target *-*-* } .-1 }\n+}\n+\n+void warn_nullptr (S s)\n+{\n+  s.f3 (nullptr, &s);              // { dg-warning \"9:argument 1 null where non-null expected\" \"pr86568\" { xfail *-*-* } }\n+                                   // { dg-warning \"argument 1 null where non-null expected\" \"pr86568\" { target *-*-* } .-1 }\n+  s.f3 (&s, nullptr);              // { dg-warning \"13:argument 2 null where non-null expected\" \"pr86568\" { xfail *-*-* } }\n+                                   // { dg-warning \"argument 2 null where non-null expected\" \"pr86568\" { target *-*-* } .-1 }\n+}\n+\n+\n+void warn_null_cst (S s)\n+{\n+  void* const null = 0;\n+  s.f4 (null, &s);                 // { dg-warning \"9:argument 1 null where non-null expected\" }\n+  s.f4 (&s, null);                 // { dg-warning \"13:argument 2 null where non-null expected\" }\n+}\n+\n+void warn_null_var (S s)\n+{\n+  void* null = 0;\n+  s.f5 (null, &s);                // { dg-warning \"9:argument 1 null where non-null expected\" \"pr86568\" { xfail *-*-* } }\n+                                  // { dg-warning \"argument 1 null where non-null expected\" \"pr86568\" { target *-*-* } .-1 }\n+  s.f5 (&s, null);                // { dg-warning \"16:argument 2 null where non-null expected\" \"pr86568\" { xfail *-*-* } }\n+                                  // { dg-warning \"argument 2 null where non-null expected\" \"pr86568\" { target *-*-* } .-1 }\n+}\n+\n+void warn_null_cond (S s, void *null)\n+{\n+  if (null)\n+    return;\n+\n+  s.f6 (null, &s);                // { dg-warning \"9:argument 1 null where non-null expected\" \"pr86568\" { xfail *-*-* } }\n+                                  // { dg-warning \"argument 1 null where non-null expected\" \"pr86568\" { target *-*-* } .-1 }\n+  s.f6 (&s, null);                // { dg-warning \"13:argument 2 null where non-null expected\" \"pr86568\" { xfail *-*-* } }\n+                                  // { dg-warning \"argument 2 null where non-null expected\" \"pr86568\" { target *-*-* } .-1 }\n+}\n+\n+\n+typedef NONNULL void Fvp (const void*, const void*);\n+\n+void warn_fptr_null_cst (Fvp *p)\n+{\n+  void* const null = 0;\n+  p (null, \"\");                   // { dg-warning \"6:argument 1 null where non-null expected\" }\n+  p (\"\", null);                   // { dg-warning \"10:argument 2 null where non-null expected\" }\n+}\n+\n+typedef NONNULL void (S::*SMemFvp) (const void*, const void*);\n+\n+void warn_memfptr_null_cst (S *p, SMemFvp pmf)\n+{\n+  void* const null = 0;\n+  (p->*pmf) (null, \"\");           // { dg-warning \"14:argument 1 null where non-null expected\" }\n+  (p->*pmf) (\"\", null);           // { dg-warning \"18:argument 2 null where non-null expected\" }\n+}"}, {"sha": "83f918c5a3fb8938e2801ed380c9aebae3058b95", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-nonnull-1.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-nonnull-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-nonnull-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-nonnull-1.mm?ref=75ff24e1920ea6b198350a2961e23175e6108e75", "patch": "@@ -39,12 +39,12 @@ - (void) removeObject: (id)object __attribute__ ((nonnull (MyArray))); /* { dg-e\n void test (MyArray *object)\n {\n   [object addObject: object];\n-  [object addObject: nil]; /* { dg-warning \"null argument where non-null required\" } */\n+  [object addObject: nil]; /* { dg-warning \"\\\\\\[-Wnonnull\" } */\n \n   [object insertObject: object atIndex: 4];\n-  [object insertObject: nil    atIndex: 4]; /* { dg-warning \"null argument where non-null required\" } */\n+  [object insertObject: nil    atIndex: 4]; /* { dg-warning \"\\\\\\[-Wnonnull\" } */\n \n   [object insertObject: object atIndex: 2 andObject: object atIndex: 3];\n-  [object insertObject: nil    atIndex: 2 andObject: object atIndex: 3]; /* { dg-warning \"null argument where non-null required\" } */\n-  [object insertObject: object atIndex: 2 andObject: nil    atIndex: 3]; /* { dg-warning \"null argument where non-null required\" } */\n+  [object insertObject: nil    atIndex: 2 andObject: object atIndex: 3]; /* { dg-warning \"\\\\\\[-Wnonnull\" } */\n+  [object insertObject: object atIndex: 2 andObject: nil    atIndex: 3]; /* { dg-warning \"\\\\\\[-Wnonnull\" } */\n }"}, {"sha": "fe5f885b2d4617b1a05947714c6bbda39097efa6", "filename": "gcc/testsuite/objc.dg/attributes/method-nonnull-1.m", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-nonnull-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-nonnull-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-nonnull-1.m?ref=75ff24e1920ea6b198350a2961e23175e6108e75", "patch": "@@ -35,12 +35,12 @@ - (void) removeObject: (id)object __attribute__ ((nonnull (MyArray))); /* { dg-w\n void test (MyArray *object)\n {\n   [object addObject: object];\n-  [object addObject: nil]; /* { dg-warning \"null argument where non-null required\" } */\n+  [object addObject: nil]; /* { dg-warning \"\\\\\\[-Wnonnull\" } */\n \n   [object insertObject: object atIndex: 4];\n-  [object insertObject: nil    atIndex: 4]; /* { dg-warning \"null argument where non-null required\" } */\n+  [object insertObject: nil    atIndex: 4]; /* { dg-warning \"\\\\\\[-Wnonnull\" } */\n \n   [object insertObject: object atIndex: 2 andObject: object atIndex: 3];\n-  [object insertObject: nil    atIndex: 2 andObject: object atIndex: 3]; /* { dg-warning \"null argument where non-null required\" } */\n-  [object insertObject: object atIndex: 2 andObject: nil    atIndex: 3]; /* { dg-warning \"null argument where non-null required\" } */\n+  [object insertObject: nil    atIndex: 2 andObject: object atIndex: 3]; /* { dg-warning \"\\\\\\[-Wnonnull\" } */\n+  [object insertObject: object atIndex: 2 andObject: nil    atIndex: 3]; /* { dg-warning \"\\\\\\[-Wnonnull\" } */\n }"}, {"sha": "e8333ac27d9e6657d66f110d2a9f5a201b589f00", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 48, "deletions": 33, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=75ff24e1920ea6b198350a2961e23175e6108e75", "patch": "@@ -3540,43 +3540,58 @@ pass_post_ipa_warn::execute (function *fun)\n \t  if (!is_gimple_call (stmt) || gimple_no_warning_p (stmt))\n \t    continue;\n \n-\t  if (warn_nonnull)\n+\t  tree fntype = gimple_call_fntype (stmt);\n+\t  bitmap nonnullargs = get_nonnull_args (fntype);\n+\t  if (!nonnullargs)\n+\t    continue;\n+\n+\t  tree fndecl = gimple_call_fndecl (stmt);\n+\n+\t  for (unsigned i = 0; i < gimple_call_num_args (stmt); i++)\n \t    {\n-\t      bitmap nonnullargs\n-\t\t= get_nonnull_args (gimple_call_fntype (stmt));\n-\t      if (nonnullargs)\n+\t      tree arg = gimple_call_arg (stmt, i);\n+\t      if (TREE_CODE (TREE_TYPE (arg)) != POINTER_TYPE)\n+\t\tcontinue;\n+\t      if (!integer_zerop (arg))\n+\t\tcontinue;\n+\t      if (!bitmap_empty_p (nonnullargs)\n+\t\t  && !bitmap_bit_p (nonnullargs, i))\n+\t\tcontinue;\n+\n+\t      /* In C++ non-static member functions argument 0 refers\n+\t\t to the implicit this pointer.  Use the same one-based\n+\t\t numbering for ordinary arguments.  */\n+\t      unsigned argno = TREE_CODE (fntype) == METHOD_TYPE ? i : i + 1;\n+\t      location_t loc = (EXPR_HAS_LOCATION (arg)\n+\t\t\t\t? EXPR_LOCATION (arg)\n+\t\t\t\t: gimple_location (stmt));\n+\t      auto_diagnostic_group d;\n+\t      if (argno == 0)\n \t\t{\n-\t\t  for (unsigned i = 0; i < gimple_call_num_args (stmt); i++)\n-\t\t    {\n-\t\t      tree arg = gimple_call_arg (stmt, i);\n-\t\t      if (TREE_CODE (TREE_TYPE (arg)) != POINTER_TYPE)\n-\t\t\tcontinue;\n-\t\t      if (!integer_zerop (arg))\n-\t\t\tcontinue;\n-\t\t      if (!bitmap_empty_p (nonnullargs)\n-\t\t\t  && !bitmap_bit_p (nonnullargs, i))\n-\t\t\tcontinue;\n-\n-\t\t      location_t loc = gimple_location (stmt);\n-\t\t      auto_diagnostic_group d;\n-\t\t      if (warning_at (loc, OPT_Wnonnull,\n-\t\t\t\t      \"%Gargument %u null where non-null \"\n-\t\t\t\t      \"expected\", stmt, i + 1))\n-\t\t\t{\n-\t\t\t  tree fndecl = gimple_call_fndecl (stmt);\n-\t\t\t  if (fndecl && DECL_IS_BUILTIN (fndecl))\n-\t\t\t    inform (loc, \"in a call to built-in function %qD\",\n-\t\t\t\t    fndecl);\n-\t\t\t  else if (fndecl)\n-\t\t\t    inform (DECL_SOURCE_LOCATION (fndecl),\n-\t\t\t\t    \"in a call to function %qD declared here\",\n-\t\t\t\t    fndecl);\n-\n-\t\t\t}\n-\t\t    }\n-\t\t  BITMAP_FREE (nonnullargs);\n+\t\t  if (warning_at (loc, OPT_Wnonnull,\n+\t\t\t\t  \"%G%qs pointer null\", stmt, \"this\")\n+\t\t      && fndecl)\n+\t\t    inform (DECL_SOURCE_LOCATION (fndecl),\n+\t\t\t    \"in a call to non-static member function %qD\",\n+\t\t\t    fndecl);\n+\t\t  continue;\n \t\t}\n+\n+\t      if (!warning_at (loc, OPT_Wnonnull,\n+\t\t\t       \"%Gargument %u null where non-null \"\n+\t\t\t       \"expected\", stmt, argno))\n+\t\tcontinue;\n+\n+\t      tree fndecl = gimple_call_fndecl (stmt);\n+\t      if (fndecl && DECL_IS_BUILTIN (fndecl))\n+\t\tinform (loc, \"in a call to built-in function %qD\",\n+\t\t\tfndecl);\n+\t      else if (fndecl)\n+\t\tinform (DECL_SOURCE_LOCATION (fndecl),\n+\t\t\t\"in a call to function %qD declared %qs\",\n+\t\t\tfndecl, \"nonnull\");\n \t    }\n+\t  BITMAP_FREE (nonnullargs);\n \t}\n     }\n   return 0;"}, {"sha": "342da55bba7efd2bbf0c129ff224062a7a780bb3", "filename": "gcc/tree.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=75ff24e1920ea6b198350a2961e23175e6108e75", "patch": "@@ -14965,11 +14965,18 @@ get_nonnull_args (const_tree fntype)\n   if (fntype == NULL_TREE)\n     return NULL;\n \n+  bitmap argmap = NULL;\n+  if (TREE_CODE (fntype) == METHOD_TYPE)\n+    {\n+      /* The this pointer in C++ non-static member functions is\n+\t implicitly nonnull whether or not it's declared as such.  */\n+      argmap = BITMAP_ALLOC (NULL);\n+      bitmap_set_bit (argmap, 0);\n+    }\n+\n   tree attrs = TYPE_ATTRIBUTES (fntype);\n   if (!attrs)\n-    return NULL;\n-\n-  bitmap argmap = NULL;\n+    return argmap;\n \n   /* A function declaration can specify multiple attribute nonnull,\n      each with zero or more arguments.  The loop below creates a bitmap"}, {"sha": "899a5c0290dd200a0b2ee4e9402fe0c1280f36fc", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ff24e1920ea6b198350a2961e23175e6108e75/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=75ff24e1920ea6b198350a2961e23175e6108e75", "patch": "@@ -305,6 +305,9 @@ struct expand_depth\n   int entryvals;\n };\n \n+/* Type for dependencies actively used when expand FROM into cur_loc.  */\n+typedef vec<loc_exp_dep, va_heap, vl_embed> deps_vec;\n+\n /* This data structure is allocated for one-part variables at the time\n    of emitting notes.  */\n struct onepart_aux\n@@ -325,7 +328,7 @@ struct onepart_aux\n   /* The depth of the cur_loc expression.  */\n   expand_depth depth;\n   /* Dependencies actively used when expand FROM into cur_loc.  */\n-  vec<loc_exp_dep, va_heap, vl_embed> deps;\n+  deps_vec deps;\n };\n \n /* Structure describing one part of variable.  */\n@@ -434,10 +437,16 @@ int_mem_offset (const_rtx mem)\n \t\t\t       : NULL)\n #define VAR_LOC_FROM(var) (VAR_LOC_1PAUX (var)->from)\n #define VAR_LOC_DEPTH(var) (VAR_LOC_1PAUX (var)->depth)\n-#define VAR_LOC_DEP_VEC(var) (VAR_LOC_1PAUX (var)\t\t  \\\n-\t\t\t      ? &VAR_LOC_1PAUX (var)->deps\t  \\\n-\t\t\t      : NULL)\n+#define VAR_LOC_DEP_VEC(var) var_loc_dep_vec (var)\n+\n+/* Implements the VAR_LOC_DEP_VEC above as a function to work around\n+   a bogus -Wnonnull (PR c/95554). */\n \n+static inline deps_vec*\n+var_loc_dep_vec (variable *var)\n+{\n+  return VAR_LOC_1PAUX (var) ? &VAR_LOC_1PAUX (var)->deps : NULL;\n+}\n \n \n typedef unsigned int dvuid;\n@@ -8112,7 +8121,7 @@ loc_exp_dep_alloc (variable *var, int count)\n     return;\n \n   allocsize = offsetof (struct onepart_aux, deps)\n-\t      + vec<loc_exp_dep, va_heap, vl_embed>::embedded_size (count);\n+\t      + deps_vec::embedded_size (count);\n \n   if (VAR_LOC_1PAUX (var))\n     {"}]}