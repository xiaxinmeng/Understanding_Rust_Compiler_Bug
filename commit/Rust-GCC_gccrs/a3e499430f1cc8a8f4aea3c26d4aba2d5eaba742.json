{"sha": "a3e499430f1cc8a8f4aea3c26d4aba2d5eaba742", "node_id": "C_kwDOANBUbNoAKGEzZTQ5OTQzMGYxY2M4YThmNGFlYTNjMjZkNGFiYTJkNWVhYmE3NDI", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2023-02-15T20:34:59Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2023-02-15T20:35:35Z"}, "message": "i386: Relax extract location operand mode requirements\n\nThere is no requirement on the mode of the location operand, so any\nsupported integer mode is valid.  We can relax extract location\noperand mode requirement of other patterns involving zero_extract RTX.\n\n2023-02-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.md (*cmpqi_ext<mode>_1): Use\n\tint248_register_operand predicate in zero_extract sub-RTX.\n\t(*cmpqi_ext<mode>_2): Ditto.\n\t(*cmpqi_ext<mode>_3): Ditto.\n\t(*cmpqi_ext<mode>_4): Ditto.\n\t(*extzvqi_mem_rex64): Ditto.\n\t(*extzvqi): Ditto.\n\t(*insvqi_1_mem_rex64): Ditto.\n\t(@insv<mode>_1): Ditto.\n\t(*insvqi_1): Ditto.\n\t(*insvqi_2): Ditto.\n\t(*insvqi_3): Ditto.\n\t(*extendqi<SWI24:mode>_ext_1): Ditto.\n\t(*addqi_ext<mode>_1): Ditto.\n\t(*addqi_ext<mode>_2): Ditto.\n\t(*subqi_ext<mode>_2): Ditto.\n\t(*testqi_ext<mode>_1): Ditto.\n\t(*testqi_ext<mode>_2): Ditto.\n\t(*andqi_ext<mode>_1): Ditto.\n\t(*andqi_ext<mode>_1_cc): Ditto.\n\t(*andqi_ext<mode>_2): Ditto.\n\t(*<any_or:code>qi_ext<mode>_1): Ditto.\n\t(*<any_or:code>qi_ext<mode>_2): Ditto.\n\t(*xorqi_ext<mode>_1_cc): Ditto.\n\t(*negqi_ext<mode>_2): Ditto.\n\t(*ashlqi_ext<mode>_2): Ditto.\n\t(*<any_shiftrt:insn>qi_ext<mode>_2): Ditto.", "tree": {"sha": "09cfe689cb0e5d46df513c95d764633d41a60c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09cfe689cb0e5d46df513c95d764633d41a60c77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3e499430f1cc8a8f4aea3c26d4aba2d5eaba742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e499430f1cc8a8f4aea3c26d4aba2d5eaba742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3e499430f1cc8a8f4aea3c26d4aba2d5eaba742", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3e499430f1cc8a8f4aea3c26d4aba2d5eaba742/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b03a10b0b25cef4928ccead4c8a461d3674dbe86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03a10b0b25cef4928ccead4c8a461d3674dbe86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b03a10b0b25cef4928ccead4c8a461d3674dbe86"}], "stats": {"total": 134, "additions": 67, "deletions": 67}, "files": [{"sha": "198f06e0769652fef2c8298f2982be2f0f9e5d14", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3e499430f1cc8a8f4aea3c26d4aba2d5eaba742/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3e499430f1cc8a8f4aea3c26d4aba2d5eaba742/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a3e499430f1cc8a8f4aea3c26d4aba2d5eaba742", "patch": "@@ -1459,7 +1459,7 @@\n \t  (match_operand:QI 0 \"nonimmediate_operand\" \"QBc,m\")\n \t  (subreg:QI\n \t    (zero_extract:SWI248\n-\t      (match_operand:SWI248 1 \"register_operand\" \"Q,Q\")\n+\t      (match_operand 1 \"int248_register_operand\" \"Q,Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)))]\n   \"ix86_match_ccmode (insn, CCmode)\"\n@@ -1473,7 +1473,7 @@\n \t(compare\n \t  (subreg:QI\n \t    (zero_extract:SWI248\n-\t      (match_operand:SWI248 0 \"register_operand\" \"Q\")\n+\t      (match_operand 0 \"int248_register_operand\" \"Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)\n \t  (match_operand:QI 1 \"const0_operand\")))]\n@@ -1498,7 +1498,7 @@\n \t(compare\n \t  (subreg:QI\n \t    (zero_extract:SWI248\n-\t      (match_operand:SWI248 0 \"register_operand\" \"Q,Q\")\n+\t      (match_operand 0 \"int248_register_operand\" \"Q,Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)\n \t  (match_operand:QI 1 \"general_operand\" \"QnBc,m\")))]\n@@ -1513,12 +1513,12 @@\n \t(compare\n \t  (subreg:QI\n \t    (zero_extract:SWI248\n-\t      (match_operand:SWI248 0 \"register_operand\" \"Q\")\n+\t      (match_operand 0 \"int248_register_operand\" \"Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)\n \t  (subreg:QI\n \t    (zero_extract:SWI248\n-\t      (match_operand:SWI248 1 \"register_operand\" \"Q\")\n+\t      (match_operand 1 \"int248_register_operand\" \"Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)))]\n   \"ix86_match_ccmode (insn, CCmode)\"\n@@ -3192,7 +3192,7 @@\n   [(set (match_operand:QI 0 \"norex_memory_operand\" \"=Bn\")\n \t(subreg:QI\n \t  (zero_extract:SWI248\n-\t    (match_operand:SWI248 1 \"register_operand\" \"Q\")\n+\t    (match_operand 1 \"int248_register_operand\" \"Q\")\n \t    (const_int 8)\n \t    (const_int 8)) 0))]\n   \"TARGET_64BIT && reload_completed\"\n@@ -3214,7 +3214,7 @@\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=QBc,?R,m\")\n \t(subreg:QI\n \t  (zero_extract:SWI248\n-\t    (match_operand:SWI248 1 \"register_operand\" \"Q,Q,Q\")\n+\t    (match_operand 1 \"int248_register_operand\" \"Q,Q,Q\")\n \t    (const_int 8)\n \t    (const_int 8)) 0))]\n   \"\"\n@@ -3242,7 +3242,7 @@\n (define_peephole2\n   [(set (match_operand:QI 0 \"register_operand\")\n \t(subreg:QI\n-\t  (zero_extract:SWI248 (match_operand:SWI248 1 \"register_operand\")\n+\t  (zero_extract:SWI248 (match_operand 1 \"int248_register_operand\")\n \t\t\t       (const_int 8)\n \t\t\t       (const_int 8)) 0))\n    (set (match_operand:QI 2 \"norex_memory_operand\") (match_dup 0))]\n@@ -3289,7 +3289,7 @@\n \n (define_insn \"*insvqi_1_mem_rex64\"\n   [(set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(subreg:SWI248\n@@ -3301,7 +3301,7 @@\n \n (define_insn \"@insv<mode>_1\"\n   [(set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q,Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q,Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(match_operand:SWI248 1 \"general_operand\" \"QnBc,m\"))]\n@@ -3317,7 +3317,7 @@\n \n (define_insn \"*insvqi_1\"\n   [(set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q,Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q,Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(subreg:SWI248\n@@ -3331,7 +3331,7 @@\n (define_peephole2\n   [(set (match_operand:QI 0 \"register_operand\")\n \t(match_operand:QI 1 \"norex_memory_operand\"))\n-   (set (zero_extract:SWI248 (match_operand:SWI248 2 \"register_operand\")\n+   (set (zero_extract:SWI248 (match_operand 2 \"int248_register_operand\")\n \t\t\t     (const_int 8)\n \t\t\t     (const_int 8))\n \t(subreg:SWI248 (match_dup 0) 0))]\n@@ -3347,7 +3347,7 @@\n   [(parallel [(set (match_operand:SWI48 0 \"general_reg_operand\")\n \t\t   (const_int 0))\n \t      (clobber (reg:CC FLAGS_REG))])\n-   (set (zero_extract:SWI248 (match_operand:SWI248 1 \"general_reg_operand\")\n+   (set (zero_extract:SWI248 (match_operand 1 \"int248_register_operand\")\n \t\t\t     (const_int 8)\n \t\t\t     (const_int 8))\n \t(const_int 0))]\n@@ -3360,7 +3360,7 @@\n (define_peephole2\n   [(set (match_operand:SWI48 0 \"general_reg_operand\")\n \t(match_operand:SWI48 1 \"const_int_operand\"))\n-   (set (zero_extract:SWI248 (match_operand:SWI248 2 \"general_reg_operand\")\n+   (set (zero_extract:SWI248 (match_operand 2 \"int248_register_operand\")\n \t\t\t     (const_int 8)\n \t\t\t     (const_int 8))\n \t(match_operand:SWI248 3 \"const_int_operand\"))]\n@@ -3378,11 +3378,11 @@\n \n (define_insn \"*insvqi_2\"\n   [(set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(any_extract:SWI248\n-\t  (match_operand:SWI248 1 \"register_operand\" \"Q\")\n+\t  (match_operand 1 \"int248_register_operand\" \"Q\")\n \t  (const_int 8)\n \t  (const_int 8)))]\n   \"\"\n@@ -3392,7 +3392,7 @@\n \n (define_insn \"*insvqi_3\"\n   [(set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(any_shiftrt:SWI248\n@@ -4783,7 +4783,7 @@\n \t(sign_extend:SWI24\n \t  (subreg:QI\n \t    (zero_extract:SWI248\n-\t      (match_operand:SWI248 1 \"register_operand\" \"Q\")\n+\t      (match_operand 1 \"int248_register_operand\" \"Q\")\n \t      (const_int 8)\n \t      (const_int 8)) 0)))]\n   \"\"\n@@ -6657,14 +6657,14 @@\n \n (define_insn \"*addqi_ext<mode>_1\"\n   [(set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q,Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q,Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(subreg:SWI248\n \t  (plus:QI\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 1 \"register_operand\" \"0,0\")\n+\t        (match_operand 1 \"int248_register_operand\" \"0,0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n \t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\")) 0))\n@@ -6696,19 +6696,19 @@\n \n (define_insn \"*addqi_ext<mode>_2\"\n   [(set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(subreg:SWI248\n \t  (plus:QI\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 1 \"register_operand\" \"%0\")\n+\t        (match_operand 1 \"int248_register_operand\" \"%0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 2 \"register_operand\" \"Q\")\n+\t        (match_operand 2 \"int248_register_operand\" \"Q\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)) 0))\n   (clobber (reg:CC FLAGS_REG))]\n@@ -7267,19 +7267,19 @@\n \n (define_insn \"*subqi_ext<mode>_2\"\n   [(set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(subreg:SWI248\n \t  (minus:QI\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 1 \"register_operand\" \"0\")\n+\t        (match_operand 1 \"int248_register_operand\" \"0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 2 \"register_operand\" \"Q\")\n+\t        (match_operand 2 \"int248_register_operand\" \"Q\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)) 0))\n   (clobber (reg:CC FLAGS_REG))]\n@@ -9866,7 +9866,7 @@\n \t  (and:QI\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 0 \"register_operand\" \"Q,Q\")\n+\t        (match_operand 0 \"int248_register_operand\" \"Q,Q\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n \t    (match_operand:QI 1 \"general_operand\" \"QnBc,m\"))\n@@ -9883,12 +9883,12 @@\n \t  (and:QI\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 0 \"register_operand\" \"Q\")\n+\t        (match_operand 0 \"int248_register_operand\" \"Q\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 1 \"register_operand\" \"Q\")\n+\t        (match_operand 1 \"int248_register_operand\" \"Q\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0))\n \t  (const_int 0)))]\n@@ -10086,13 +10086,13 @@\n \t(match_op_dup 1\n \t  [(and:QI\n \t     (subreg:QI\n-\t       (zero_extract:SI (match_dup 2)\n+\t       (zero_extract:HI (match_dup 2)\n \t\t\t\t(const_int 8)\n \t\t\t\t(const_int 8)) 0)\n \t     (match_dup 3))\n \t   (const_int 0)]))]\n {\n-  operands[2] = gen_lowpart (SImode, operands[2]);\n+  operands[2] = gen_lowpart (HImode, operands[2]);\n   operands[3] = gen_int_mode (INTVAL (operands[3]) >> 8, QImode);\n })\n \n@@ -10417,21 +10417,21 @@\n   \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && reload_completed\"\n   [(parallel\n-     [(set (zero_extract:SI (match_dup 0)\n+     [(set (zero_extract:HI (match_dup 0)\n \t\t\t    (const_int 8)\n \t\t\t    (const_int 8))\n-\t   (subreg:SI\n+\t   (subreg:HI\n \t     (xor:QI\n \t       (subreg:QI\n-\t\t (zero_extract:SI (match_dup 0)\n+\t\t (zero_extract:HI (match_dup 0)\n \t\t\t\t  (const_int 8)\n \t\t\t\t  (const_int 8)) 0)\n \t       (subreg:QI\n-\t\t (zero_extract:SI (match_dup 0)\n+\t\t (zero_extract:HI (match_dup 0)\n \t\t\t\t  (const_int 8)\n \t\t\t\t  (const_int 8)) 0)) 0))\n       (clobber (reg:CC FLAGS_REG))])]\n-  \"operands[0] = gen_lowpart (SImode, operands[0]);\")\n+  \"operands[0] = gen_lowpart (HImode, operands[0]);\")\n \n (define_insn \"*anddi_2\"\n   [(set (reg FLAGS_REG)\n@@ -10544,14 +10544,14 @@\n \n (define_insn \"*andqi_ext<mode>_1\"\n   [(set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q,Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q,Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(subreg:SWI248\n \t  (and:QI\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 1 \"register_operand\" \"0,0\")\n+\t        (match_operand 1 \"int248_register_operand\" \"0,0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n \t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\")) 0))\n@@ -10571,13 +10571,13 @@\n \t  (and:QI\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 1 \"register_operand\" \"0,0\")\n+\t        (match_operand 1 \"int248_register_operand\" \"0,0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n \t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\"))\n \t  (const_int 0)))\n    (set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q,Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q,Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(subreg:SWI248\n@@ -10598,19 +10598,19 @@\n \n (define_insn \"*andqi_ext<mode>_2\"\n   [(set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(subreg:SWI248\n \t  (and:QI\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 1 \"register_operand\" \"%0\")\n+\t        (match_operand 1 \"int248_register_operand\" \"%0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 2 \"register_operand\" \"Q\")\n+\t        (match_operand 2 \"int248_register_operand\" \"Q\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)) 0))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -10635,20 +10635,20 @@\n     && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n     && !(~INTVAL (operands[2]) & ~(255 << 8))\"\n   [(parallel\n-     [(set (zero_extract:SI (match_dup 0)\n+     [(set (zero_extract:HI (match_dup 0)\n \t\t\t    (const_int 8)\n \t\t\t    (const_int 8))\n-\t   (subreg:SI\n+\t   (subreg:HI\n \t     (and:QI\n \t       (subreg:QI\n-\t\t (zero_extract:SI (match_dup 1)\n+\t\t (zero_extract:HI (match_dup 1)\n \t\t\t\t  (const_int 8)\n \t\t\t\t  (const_int 8)) 0)\n \t       (match_dup 2)) 0))\n       (clobber (reg:CC FLAGS_REG))])]\n {\n-  operands[0] = gen_lowpart (SImode, operands[0]);\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[0] = gen_lowpart (HImode, operands[0]);\n+  operands[1] = gen_lowpart (HImode, operands[1]);\n   operands[2] = gen_int_mode (INTVAL (operands[2]) >> 8, QImode);\n })\n \n@@ -11271,14 +11271,14 @@\n \n (define_insn \"*<code>qi_ext<mode>_1\"\n   [(set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q,Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q,Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(subreg:SWI248\n \t  (any_or:QI\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 1 \"register_operand\" \"0,0\")\n+\t        (match_operand 1 \"int248_register_operand\" \"0,0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n \t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\")) 0))\n@@ -11293,19 +11293,19 @@\n \n (define_insn \"*<code>qi_ext<mode>_2\"\n   [(set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(subreg:SWI248\n \t  (any_or:QI\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 1 \"register_operand\" \"%0\")\n+\t        (match_operand 1 \"int248_register_operand\" \"%0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 2 \"register_operand\" \"Q\")\n+\t        (match_operand 2 \"int248_register_operand\" \"Q\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)) 0))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -11331,13 +11331,13 @@\n     && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n     && !(INTVAL (operands[2]) & ~(255 << 8))\"\n   [(parallel\n-     [(set (zero_extract:SI (match_dup 0)\n+     [(set (zero_extract:HI (match_dup 0)\n \t\t\t    (const_int 8)\n \t\t\t    (const_int 8))\n-\t   (subreg:SI\n+\t   (subreg:HI\n \t     (any_or:QI\n \t       (subreg:QI\n-\t\t (zero_extract:SI (match_dup 1)\n+\t\t (zero_extract:HI (match_dup 1)\n \t\t\t\t  (const_int 8)\n \t\t\t\t  (const_int 8)) 0)\n \t       (match_dup 2)) 0))\n@@ -11352,8 +11352,8 @@\n \temit_note (NOTE_INSN_DELETED);\n       DONE;\n     }\n-  operands[0] = gen_lowpart (SImode, operands[0]);\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n+  operands[0] = gen_lowpart (HImode, operands[0]);\n+  operands[1] = gen_lowpart (HImode, operands[1]);\n   operands[2] = gen_int_mode (INTVAL (operands[2]) >> 8, QImode);\n })\n \n@@ -11406,13 +11406,13 @@\n \t  (xor:QI\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 1 \"register_operand\" \"0,0\")\n+\t        (match_operand 1 \"int248_register_operand\" \"0,0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n \t    (match_operand:QI 2 \"general_operand\" \"QnBc,m\"))\n \t  (const_int 0)))\n    (set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q,Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q,Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(subreg:SWI248\n@@ -11809,14 +11809,14 @@\n \n (define_insn \"*negqi_ext<mode>_2\"\n   [(set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(subreg:SWI248\n \t  (neg:QI\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 1 \"register_operand\" \"0\")\n+\t        (match_operand 1 \"int248_register_operand\" \"0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)) 0))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -13370,14 +13370,14 @@\n \n (define_insn \"*ashlqi_ext<mode>_2\"\n   [(set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(subreg:SWI248\n \t  (ashift:QI\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 1 \"register_operand\" \"0\")\n+\t        (match_operand 1 \"int248_register_operand\" \"0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n \t    (match_operand:QI 2 \"nonmemory_operand\" \"cI\")) 0))\n@@ -14273,14 +14273,14 @@\n \n (define_insn \"*<insn>qi_ext<mode>_2\"\n   [(set (zero_extract:SWI248\n-\t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n+\t  (match_operand 0 \"int248_register_operand\" \"+Q\")\n \t  (const_int 8)\n \t  (const_int 8))\n \t(subreg:SWI248\n \t  (any_shiftrt:QI\n \t    (subreg:QI\n \t      (zero_extract:SWI248\n-\t        (match_operand:SWI248 1 \"register_operand\" \"0\")\n+\t        (match_operand 1 \"int248_register_operand\" \"0\")\n \t\t(const_int 8)\n \t\t(const_int 8)) 0)\n \t    (match_operand:QI 2 \"nonmemory_operand\" \"cI\")) 0))\n@@ -23135,7 +23135,7 @@\n \t(match_operator 1 \"compare_operator\"\n \t  [(and:QI\n \t     (subreg:QI\n-\t       (zero_extract:SWI248 (match_operand:SWI248 2 \"QIreg_operand\")\n+\t       (zero_extract:SWI248 (match_operand 2 \"int248_register_operand\")\n \t\t\t\t    (const_int 8)\n \t\t\t\t    (const_int 8)) 0)\n \t     (match_operand 3 \"const_int_operand\"))"}]}