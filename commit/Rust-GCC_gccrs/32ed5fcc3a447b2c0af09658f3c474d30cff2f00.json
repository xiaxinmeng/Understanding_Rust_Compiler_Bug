{"sha": "32ed5fcc3a447b2c0af09658f3c474d30cff2f00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJlZDVmY2MzYTQ0N2IyYzBhZjA5NjU4ZjNjNDc0ZDMwY2ZmMmYwMA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-04-11T11:24:40Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-04-11T11:24:40Z"}, "message": "sh.h (SIDI_OFF): Remove.\n\n\t* config/sh/sh.h (SIDI_OFF): Remove.\n\t* config/sh/sh.md: Use gen_highpart and gen_lowpart to access\n\tDImode subregs instead of gen_rtx_REG or simplifly_gen_subreg\n\tor operand_subword.\n\nFrom-SVN: r186309", "tree": {"sha": "0e4eea4e1b0795bc69407fc210f2a6b9554fc261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e4eea4e1b0795bc69407fc210f2a6b9554fc261"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32ed5fcc3a447b2c0af09658f3c474d30cff2f00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ed5fcc3a447b2c0af09658f3c474d30cff2f00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32ed5fcc3a447b2c0af09658f3c474d30cff2f00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32ed5fcc3a447b2c0af09658f3c474d30cff2f00/comments", "author": null, "committer": null, "parents": [{"sha": "ac868f29d7e81636b988cc4b67f681dce3498175", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac868f29d7e81636b988cc4b67f681dce3498175", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac868f29d7e81636b988cc4b67f681dce3498175"}], "stats": {"total": 100, "additions": 40, "deletions": 60}, "files": [{"sha": "f0ae48f381b14e5d7eb460e166598a5cfd70b71d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ed5fcc3a447b2c0af09658f3c474d30cff2f00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ed5fcc3a447b2c0af09658f3c474d30cff2f00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32ed5fcc3a447b2c0af09658f3c474d30cff2f00", "patch": "@@ -1,3 +1,10 @@\n+2012-04-11  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.h (SIDI_OFF): Remove.\n+\t* config/sh/sh.md: Use gen_highpart and gen_lowpart to access\n+\tDImode subregs instead of gen_rtx_REG or simplifly_gen_subreg\n+\tor operand_subword.\n+\n 2012-04-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/52624"}, {"sha": "498109a7312eadfad8c025cfdd70a1b4b68bbf41", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ed5fcc3a447b2c0af09658f3c474d30cff2f00/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ed5fcc3a447b2c0af09658f3c474d30cff2f00/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=32ed5fcc3a447b2c0af09658f3c474d30cff2f00", "patch": "@@ -2387,8 +2387,6 @@ extern int current_function_interrupt;\n \n #define MAX_FIXED_MODE_SIZE (TARGET_SH5 ? 128 : 64)\n \n-#define SIDI_OFF (TARGET_LITTLE_ENDIAN ? 0 : 4)\n-\n /* Better to allocate once the maximum space for outgoing args in the\n    prologue rather than duplicate around each call.  */\n #define ACCUMULATE_OUTGOING_ARGS TARGET_ACCUMULATE_OUTGOING_ARGS"}, {"sha": "d6ae7999164656c6975a7f7e34ab6fd3cbb87dc5", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 33, "deletions": 58, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32ed5fcc3a447b2c0af09658f3c474d30cff2f00/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32ed5fcc3a447b2c0af09658f3c474d30cff2f00/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=32ed5fcc3a447b2c0af09658f3c474d30cff2f00", "patch": "@@ -942,15 +942,10 @@\n    (set (reg:SI T_REG) (eq:SI (match_dup 4) (match_dup 5)))\n    (match_dup 6)]\n {\n-  operands[2]\n-    = gen_rtx_REG (SImode,\n-\t\t   true_regnum (operands[0]) + (TARGET_LITTLE_ENDIAN ? 1 : 0));\n-  operands[3]\n-    = (operands[1] == const0_rtx\n-       ? const0_rtx\n-       : gen_rtx_REG (SImode,\n-\t\t      true_regnum (operands[1])\n-\t\t      + (TARGET_LITTLE_ENDIAN ? 1 : 0)));\n+  operands[2] = gen_highpart (SImode, operands[0]);\n+  operands[3] = operands[1] == const0_rtx\n+\t\t? const0_rtx\n+\t\t: gen_highpart (SImode, operands[1]);\n   operands[4] = gen_lowpart (SImode, operands[0]);\n   operands[5] = gen_lowpart (SImode, operands[1]);\n   operands[6] = gen_label_rtx ();\n@@ -1453,13 +1448,10 @@\n   \"TARGET_SH1 && reload_completed\"\n   [(const_int 0)]\n {\n-  rtx high0, high2, low0 = gen_lowpart (SImode, operands[0]);\n-  high0 = gen_rtx_REG (SImode,\n-\t\t       true_regnum (operands[0])\n-\t\t       + (TARGET_LITTLE_ENDIAN ? 1 : 0));\n-  high2 = gen_rtx_REG (SImode,\n-\t\t       true_regnum (operands[2])\n-\t\t       + (TARGET_LITTLE_ENDIAN ? 1 : 0));\n+  rtx high0 = gen_highpart (SImode, operands[0]);\n+  rtx high2 = gen_highpart (SImode, operands[2]);\n+  rtx low0 = gen_lowpart (SImode, operands[0]);\n+\n   emit_insn (gen_clrt ());\n   emit_insn (gen_addc (low0, low0, gen_lowpart (SImode, operands[2])));\n   emit_insn (gen_addc1 (high0, high0, high2));\n@@ -1581,13 +1573,10 @@\n   \"TARGET_SH1 && reload_completed\"\n   [(const_int 0)]\n {\n-  rtx high0, high2, low0 = gen_lowpart (SImode, operands[0]);\n-  high0 = gen_rtx_REG (SImode,\n-\t\t       true_regnum (operands[0])\n-\t\t       + (TARGET_LITTLE_ENDIAN ? 1 : 0));\n-  high2 = gen_rtx_REG (SImode,\n-\t\t       true_regnum (operands[2])\n-\t\t       + (TARGET_LITTLE_ENDIAN ? 1 : 0));\n+  rtx high0 = gen_highpart (SImode, operands[0]);\n+  rtx high2 = gen_highpart (SImode, operands[2]);\n+  rtx low0 = gen_lowpart (SImode, operands[0]);\n+\n   emit_insn (gen_clrt ());\n   emit_insn (gen_subc (low0, low0, gen_lowpart (SImode, operands[2])));\n   emit_insn (gen_subc1 (high0, high0, high2));\n@@ -2321,7 +2310,7 @@ norm32: r25\n   rtx tab_ix = operands[2];\n   rtx norm32 = operands[3];\n   rtx scratch0 = operands[4];\n-  rtx scratch0_si = simplify_gen_subreg (SImode, scratch0, DImode, SIDI_OFF);\n+  rtx scratch0_si = gen_lowpart (SImode, scratch0);\n   rtx scratch1 = operands[5];\n \n   emit_insn (gen_divsi_inv_qitable (scratch0, tab_base, tab_ix));\n@@ -2368,7 +2357,7 @@ norm32: r25\n   rtx scratch0b = operands[6];\n   rtx scratch0 = operands[7];\n   rtx scratch1 = operands[8];\n-  rtx scratch1_si = simplify_gen_subreg (SImode, scratch1, DImode, SIDI_OFF);\n+  rtx scratch1_si = gen_lowpart (SImode, scratch1);\n \n   emit_insn (gen_divsi_inv_m0 (inv0, tab_base, tab_ix, norm32,\n \t\t\t       scratch0a, scratch0b));\n@@ -2405,7 +2394,7 @@ norm32: r25\n   rtx inv1 = operands[2];\n   rtx i92 = operands[3];\n   rtx scratch0 = operands[4];\n-  rtx scratch0_si = simplify_gen_subreg (SImode, scratch0, DImode, SIDI_OFF);\n+  rtx scratch0_si = gen_lowpart (SImode, scratch0);\n \n   emit_insn (gen_mulsidi3_media (scratch0, inv1, norm32));\n   emit_insn (gen_ashrdi3_media (scratch0, scratch0, GEN_INT (16)));\n@@ -2518,9 +2507,9 @@ norm32: r25\n   rtx i2p27 = operands[7];\n   rtx i43 = operands[8];\n   rtx scratch0 = operands[9];\n-  rtx scratch0_si = simplify_gen_subreg (SImode, scratch0, DImode, SIDI_OFF);\n+  rtx scratch0_si = gen_lowpart (SImode, scratch0);\n   rtx scratch1 = operands[10];\n-  rtx scratch1_si = simplify_gen_subreg (SImode, scratch1, DImode, SIDI_OFF);\n+  rtx scratch1_si = gen_lowpart (SImode, scratch1);\n   rtx scratch2 = operands[11];\n   rtx scratch3 = operands[12];\n   rtx scratch4 = operands[13];\n@@ -3919,17 +3908,14 @@ label:\n                    (match_operand:DI 2 \"const_int_operand\" \"n\")))]\n   \"TARGET_SH1 && INTVAL (operands[2]) < 32\"\n {\n-  int low_word = (TARGET_LITTLE_ENDIAN ? 0 : 1);\n-  int high_word = (TARGET_LITTLE_ENDIAN ? 1 : 0);\n-  rtx low_src = operand_subword (operands[1], low_word, 0, DImode);\n-  rtx high_src = operand_subword (operands[1], high_word, 0, DImode);\n+  rtx low_src = gen_lowpart (SImode, operands[1]);\n+  rtx high_src = gen_highpart (SImode, operands[1]);\n   rtx dst = gen_reg_rtx (DImode);\n-  rtx low_dst = operand_subword (dst, low_word, 1, DImode);\n-  rtx high_dst = operand_subword (dst, high_word, 1, DImode);\n-  rtx tmp0, tmp1;\n+  rtx low_dst = gen_lowpart (SImode, dst);\n+  rtx high_dst = gen_highpart (SImode, dst);\n+  rtx tmp0 = gen_reg_rtx (SImode);\n+  rtx tmp1 = gen_reg_rtx (SImode);\n \n-  tmp0 = gen_reg_rtx (SImode);\n-  tmp1 = gen_reg_rtx (SImode);\n   emit_insn (gen_lshrsi3 (tmp0, low_src, GEN_INT (32 - INTVAL (operands[2]))));\n   emit_insn (gen_ashlsi3 (low_dst, low_src, operands[2]));  \n   emit_insn (gen_ashlsi3 (tmp1, high_src, operands[2]));  \n@@ -4373,14 +4359,10 @@ label:\n   \"TARGET_SH1\"\n   [(const_int 0)]\n {\n-  int low_word = (TARGET_LITTLE_ENDIAN ? 0 : 1);\n-  int high_word = (TARGET_LITTLE_ENDIAN ? 1 : 0);\n-\n-  rtx low_src = operand_subword (operands[1], low_word, 0, DImode);\n-  rtx high_src = operand_subword (operands[1], high_word, 0, DImode);\n-\n-  rtx low_dst = operand_subword (operands[0], low_word, 1, DImode);\n-  rtx high_dst = operand_subword (operands[0], high_word, 1, DImode);\n+  rtx low_src = gen_lowpart (SImode, operands[1]);\n+  rtx high_src = gen_highpart (SImode, operands[1]);\n+  rtx low_dst = gen_lowpart (SImode, operands[0]);\n+  rtx high_dst = gen_highpart (SImode, operands[0]);\n \n   emit_insn (gen_clrt ());\n   emit_insn (gen_negc (low_dst, low_src));\n@@ -4493,8 +4475,7 @@ label:\n   \"&& reload_completed\"\n   [(const_int 0)]\n {\n-  int high_word = (TARGET_LITTLE_ENDIAN ? 1 : 0);\n-  rtx high_src = operand_subword (operands[1], high_word, 0, DImode);\n+  rtx high_src = gen_highpart (SImode, operands[1]);\n   emit_insn (gen_cmpgesi_t (high_src, const0_rtx));\n   emit_insn (gen_negdi_cond (operands[0], operands[1], operands[1],\n \t\t\t     const1_rtx));\n@@ -4509,9 +4490,7 @@ label:\n   \"&& reload_completed\"\n   [(const_int 0)]\n {\n-  int high_word = (TARGET_LITTLE_ENDIAN ? 1 : 0);\n-  rtx high_src = operand_subword (operands[1], high_word, 0, DImode);\n-\n+  rtx high_src = gen_highpart (SImode, operands[1]);\n   emit_insn (gen_cmpgesi_t (high_src, const0_rtx));\n   emit_insn (gen_negdi_cond (operands[0], operands[1], operands[1],\n \t\t\t     const0_rtx));\n@@ -4529,14 +4508,10 @@ label:\n   \"TARGET_SH1\"\n   [(const_int 0)]\n {\n-  int low_word = (TARGET_LITTLE_ENDIAN ? 0 : 1);\n-  int high_word = (TARGET_LITTLE_ENDIAN ? 1 : 0);\n-\n-  rtx low_src = operand_subword (operands[1], low_word, 0, DImode);\n-  rtx high_src = operand_subword (operands[1], high_word, 0, DImode);\n-\n-  rtx low_dst = operand_subword (operands[0], low_word, 1, DImode);\n-  rtx high_dst = operand_subword (operands[0], high_word, 1, DImode);\n+  rtx low_src = gen_lowpart (SImode, operands[1]);\n+  rtx high_src = gen_highpart (SImode, operands[1]);\n+  rtx low_dst = gen_lowpart (SImode, operands[0]);\n+  rtx high_dst = gen_highpart (SImode, operands[0]);\n \n   rtx skip_neg_label = gen_label_rtx ();\n "}]}