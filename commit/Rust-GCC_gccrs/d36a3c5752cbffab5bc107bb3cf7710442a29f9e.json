{"sha": "d36a3c5752cbffab5bc107bb3cf7710442a29f9e", "node_id": "C_kwDOANBUbNoAKGQzNmEzYzU3NTJjYmZmYWI1YmMxMDdiYjNjZjc3MTA0NDJhMjlmOWU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-14T07:27:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-14T07:27:52Z"}, "message": "Merge #1110\n\n1110: Add Reachability visitors for items with generics r=CohenArthur a=CohenArthur\n\nThis factors generics' predicates visiting in the `ReachabilityVisitor` and calls the function in other items with generic parameters\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "4c4a2a4fbbde130ea7cc7017e8001e18b1b95bba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c4a2a4fbbde130ea7cc7017e8001e18b1b95bba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d36a3c5752cbffab5bc107bb3cf7710442a29f9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiV8z4CRBK7hj4Ov3rIwAACXkIAKjxtWsjQcKq9hjEnqKsKlEf\nVGueW57tRCNBoneJqtG+zG9xCY+jkwxeWPDm96j0k1YLu21j2rqTxzAhfeoV0F7o\n9mEOBM1TQKrys2v/TiNBTFtWn9HPYmNzdZdZsN4uhfU7HuBYqOKdw+lBN9CYJggn\ncVSSVB1u1K9FuQru2W5LF006PJzCj/tg8kO5L4m+Dyi3J7cXDHSsfdT8MrilnMTV\nffg+F63at/VBbizxFC/RZWSR8TcxWyaMxHcdSkvkGUElLvkDKfvVG+AsSsu3pA/u\nHNowVwSMzT2rdWET+rvulKbj2qW319TR3NGhw800eCrpsBelxGYHVwKclarewIQ=\n=FVe0\n-----END PGP SIGNATURE-----\n", "payload": "tree 4c4a2a4fbbde130ea7cc7017e8001e18b1b95bba\nparent 73e017f7cb8423cbd3ab1a8424d59f2ced81eb97\nparent ed904fefddddf35f5f13d18157e48fae3818794f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1649921272 +0000\ncommitter GitHub <noreply@github.com> 1649921272 +0000\n\nMerge #1110\n\n1110: Add Reachability visitors for items with generics r=CohenArthur a=CohenArthur\n\nThis factors generics' predicates visiting in the `ReachabilityVisitor` and calls the function in other items with generic parameters\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d36a3c5752cbffab5bc107bb3cf7710442a29f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d36a3c5752cbffab5bc107bb3cf7710442a29f9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d36a3c5752cbffab5bc107bb3cf7710442a29f9e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73e017f7cb8423cbd3ab1a8424d59f2ced81eb97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e017f7cb8423cbd3ab1a8424d59f2ced81eb97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e017f7cb8423cbd3ab1a8424d59f2ced81eb97"}, {"sha": "ed904fefddddf35f5f13d18157e48fae3818794f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed904fefddddf35f5f13d18157e48fae3818794f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed904fefddddf35f5f13d18157e48fae3818794f"}], "stats": {"total": 129, "additions": 87, "deletions": 42}, "files": [{"sha": "c5bfce1e2984cb894fda060084b6b0f1b9114e73", "filename": "gcc/rust/privacy/rust-reachability.cc", "status": "modified", "additions": 74, "deletions": 42, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d36a3c5752cbffab5bc107bb3cf7710442a29f9e/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d36a3c5752cbffab5bc107bb3cf7710442a29f9e/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-reachability.cc?ref=d36a3c5752cbffab5bc107bb3cf7710442a29f9e", "patch": "@@ -31,6 +31,41 @@ maybe_get_vis_item (std::unique_ptr<HIR::Item> &item)\n   return static_cast<HIR::VisItem *> (item.get ());\n }\n \n+ReachLevel\n+ReachabilityVisitor::get_reachability_level (\n+  const HIR::Visibility &item_visibility)\n+{\n+  return item_visibility.is_public () ? current_level : ReachLevel::Unreachable;\n+}\n+\n+void\n+ReachabilityVisitor::visit_generic_predicates (\n+  const std::vector<std::unique_ptr<HIR::GenericParam>> &generics,\n+  ReachLevel item_reach)\n+{\n+  if (item_reach == ReachLevel::Unreachable)\n+    return;\n+\n+  for (const auto &generic : generics)\n+    {\n+      if (generic->get_kind () == HIR::GenericParam::TYPE)\n+\t{\n+\t  TyTy::BaseType *generic_ty = nullptr;\n+\t  auto ok = ty_ctx.lookup_type (generic->get_mappings ().get_hirid (),\n+\t\t\t\t\t&generic_ty);\n+\t  rust_assert (ok);\n+\t  rust_assert (generic_ty->get_kind () == TyTy::PARAM);\n+\n+\t  auto generic_param = static_cast<TyTy::ParamType *> (generic_ty);\n+\t  for (const auto &bound : generic_param->get_specified_bounds ())\n+\t    {\n+\t      const auto trait = bound.get ()->get_hir_trait_ref ();\n+\t      ctx.update_reachability (trait->get_mappings (), item_reach);\n+\t    }\n+\t}\n+    }\n+}\n+\n void\n ReachabilityVisitor::visit (HIR::Module &mod)\n {\n@@ -56,60 +91,36 @@ ReachabilityVisitor::visit (HIR::UseDeclaration &use_decl)\n \n void\n ReachabilityVisitor::visit (HIR::Function &func)\n-{}\n+{\n+  auto fn_reach = get_reachability_level (func.get_visibility ());\n+\n+  fn_reach = ctx.update_reachability (func.get_mappings (), fn_reach);\n+  visit_generic_predicates (func.get_generic_params (), fn_reach);\n+}\n \n void\n ReachabilityVisitor::visit (HIR::TypeAlias &type_alias)\n-{}\n+{\n+  auto type_reach = get_reachability_level (type_alias.get_visibility ());\n+\n+  visit_generic_predicates (type_alias.get_generic_params (), type_reach);\n+}\n \n void\n ReachabilityVisitor::visit (HIR::StructStruct &struct_item)\n {\n-  auto struct_reach = ReachLevel::Unreachable;\n-  if (struct_item.get_visibility ().is_public ())\n-    struct_reach = current_level;\n+  auto struct_reach = get_reachability_level (struct_item.get_visibility ());\n \n   struct_reach\n     = ctx.update_reachability (struct_item.get_mappings (), struct_reach);\n \n   auto old_level = current_level;\n   current_level = struct_reach;\n \n+  visit_generic_predicates (struct_item.get_generic_params (), struct_reach);\n+\n   if (struct_reach != ReachLevel::Unreachable)\n     {\n-      for (auto &field : struct_item.get_fields ())\n-\tif (field.get_visibility ().is_public ())\n-\t  ctx.update_reachability (field.get_mappings (), struct_reach);\n-\n-      for (auto &generic : struct_item.get_generic_params ())\n-\t{\n-\t  switch (generic->get_kind ())\n-\t    {\n-\t    case HIR::GenericParam::LIFETIME:\n-\t      break;\n-\t    case HIR::GenericParam::TYPE:\n-\t      TyTy::BaseType *generic_ty = nullptr;\n-\t      rust_assert (\n-\t\tty_ctx.lookup_type (generic->get_mappings ().get_hirid (),\n-\t\t\t\t    &generic_ty));\n-\n-\t      if (generic_ty->get_kind () == TyTy::PARAM)\n-\t\t{\n-\t\t  auto generic_param\n-\t\t    = static_cast<TyTy::ParamType *> (generic_ty);\n-\t\t  for (const auto &bound :\n-\t\t       generic_param->get_specified_bounds ())\n-\t\t    {\n-\t\t      const auto trait = bound.get ()->get_hir_trait_ref ();\n-\t\t      ctx.update_reachability (trait->get_mappings (),\n-\t\t\t\t\t       struct_reach);\n-\t\t    }\n-\t\t}\n-\n-\t      break;\n-\t    }\n-\t}\n-\n       for (auto &field : struct_item.get_fields ())\n \tif (field.get_visibility ().is_public ())\n \t  ctx.update_reachability (field.get_field_type ()->get_mappings (),\n@@ -125,11 +136,22 @@ ReachabilityVisitor::visit (HIR::TupleStruct &tuple_struct)\n \n void\n ReachabilityVisitor::visit (HIR::Enum &enum_item)\n-{}\n+{\n+  auto enum_reach = get_reachability_level (enum_item.get_visibility ());\n+\n+  enum_reach = ctx.update_reachability (enum_item.get_mappings (), enum_reach);\n+  visit_generic_predicates (enum_item.get_generic_params (), enum_reach);\n+}\n \n void\n ReachabilityVisitor::visit (HIR::Union &union_item)\n-{}\n+{\n+  auto union_reach = get_reachability_level (union_item.get_visibility ());\n+\n+  union_reach\n+    = ctx.update_reachability (union_item.get_mappings (), union_reach);\n+  visit_generic_predicates (union_item.get_generic_params (), union_reach);\n+}\n \n void\n ReachabilityVisitor::visit (HIR::ConstantItem &const_item)\n@@ -141,11 +163,21 @@ ReachabilityVisitor::visit (HIR::StaticItem &static_item)\n \n void\n ReachabilityVisitor::visit (HIR::Trait &trait)\n-{}\n+{\n+  auto trait_reach = get_reachability_level (trait.get_visibility ());\n+\n+  trait_reach = ctx.update_reachability (trait.get_mappings (), trait_reach);\n+  visit_generic_predicates (trait.get_generic_params (), trait_reach);\n+}\n \n void\n ReachabilityVisitor::visit (HIR::ImplBlock &impl)\n-{}\n+{\n+  auto impl_reach = get_reachability_level (impl.get_visibility ());\n+\n+  impl_reach = ctx.update_reachability (impl.get_mappings (), impl_reach);\n+  visit_generic_predicates (impl.get_generic_params (), impl_reach);\n+}\n \n void\n ReachabilityVisitor::visit (HIR::ExternBlock &block)"}, {"sha": "e61fbdfa8b376e460fb066637ad0de41bbf1a6eb", "filename": "gcc/rust/privacy/rust-reachability.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d36a3c5752cbffab5bc107bb3cf7710442a29f9e/gcc%2Frust%2Fprivacy%2Frust-reachability.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d36a3c5752cbffab5bc107bb3cf7710442a29f9e/gcc%2Frust%2Fprivacy%2Frust-reachability.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-reachability.h?ref=d36a3c5752cbffab5bc107bb3cf7710442a29f9e", "patch": "@@ -46,6 +46,19 @@ class ReachabilityVisitor : public HIR::HIRVisItemVisitor\n     : current_level (ReachLevel::Reachable), ctx (ctx), ty_ctx (ty_ctx)\n   {}\n \n+  /**\n+   * Visit all the predicates of all the generic types of a given item, marking\n+   * them as reachable or not.\n+   */\n+  void visit_generic_predicates (\n+    const std::vector<std::unique_ptr<HIR::GenericParam>> &generics,\n+    ReachLevel item_reach);\n+\n+  /**\n+   * Get the initial reach level for an item based on its visibility.\n+   */\n+  ReachLevel get_reachability_level (const HIR::Visibility &item_visibility);\n+\n   virtual void visit (HIR::Module &mod);\n   virtual void visit (HIR::ExternCrate &crate);\n   virtual void visit (HIR::UseDeclaration &use_decl);"}]}