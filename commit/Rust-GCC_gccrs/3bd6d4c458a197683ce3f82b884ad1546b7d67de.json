{"sha": "3bd6d4c458a197683ce3f82b884ad1546b7d67de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JkNmQ0YzQ1OGExOTc2ODNjZTNmODJiODg0YWQxNTQ2YjdkNjdkZQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2003-01-19T13:04:24Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2003-01-19T13:04:24Z"}, "message": "config.gcc (mips64*-*-linux*): Added.\n\n* config.gcc (mips64*-*-linux*): Added.\n* config/mips/linux64.h, config/mips/t-linux64: New file.\n* config/mips/iris6.h (MIPS_TFMODE_FORMAT): Define.\n* config/mips/mips.c (override_options): Use it.\n* config/mips/mips.h (TARGET_SWITCHES): Added...\n(SUBTARGET_TARGET_SWITCHES): New, empty by default.\n* Makefile.in (SPECS): New.\n(STAGESTUFF, specs, mostlyclean, install-common): Use it.\n* gcc.c (process_command): Move self-spec processing past spec\nfile loading.\n* doc/tm.texi (DRIVER_SELF_SPECS): Document the change.\n* doc/fragments.texi (MULTILIB_EXTRA_OPTS): Document need for\nCRTSTUFF_T_CFLAGS.\n(SPECS): Document.\n* doc/invoke.texi (-mabi-fake-default): Document.\n\nFrom-SVN: r61481", "tree": {"sha": "1c9527057e11cd9aeab8e1192678a236184395a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c9527057e11cd9aeab8e1192678a236184395a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bd6d4c458a197683ce3f82b884ad1546b7d67de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd6d4c458a197683ce3f82b884ad1546b7d67de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bd6d4c458a197683ce3f82b884ad1546b7d67de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd6d4c458a197683ce3f82b884ad1546b7d67de/comments", "author": null, "committer": null, "parents": [{"sha": "e9f13564bb2cd1147517bcee06e2de0aefeb4af1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f13564bb2cd1147517bcee06e2de0aefeb4af1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9f13564bb2cd1147517bcee06e2de0aefeb4af1"}], "stats": {"total": 283, "additions": 262, "deletions": 21}, "files": [{"sha": "f300181d28716b9279622d9936a9bd017a7c4566", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bd6d4c458a197683ce3f82b884ad1546b7d67de", "patch": "@@ -1,3 +1,21 @@\n+2003-01-19  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config.gcc (mips64*-*-linux*): Added.\n+\t* config/mips/linux64.h, config/mips/t-linux64: New file.\n+\t* config/mips/iris6.h (MIPS_TFMODE_FORMAT): Define.\n+\t* config/mips/mips.c (override_options): Use it.\n+\t* config/mips/mips.h (TARGET_SWITCHES): Added...\n+\t(SUBTARGET_TARGET_SWITCHES): New, empty by default.\n+\t* Makefile.in (SPECS): New.\n+\t(STAGESTUFF, specs, mostlyclean, install-common): Use it.\n+\t* gcc.c (process_command): Move self-spec processing past spec\n+\tfile loading.\n+\t* doc/tm.texi (DRIVER_SELF_SPECS): Document the change.\n+\t* doc/fragments.texi (MULTILIB_EXTRA_OPTS): Document need for\n+\tCRTSTUFF_T_CFLAGS.\n+\t(SPECS): Document.\n+\t* doc/invoke.texi (-mabi-fake-default): Document.\n+\n 2003-01-19  Stephane Carrez  <stcarrez@nerim.fr>\n \n \t* config/m68hc11/m68hc11.c (stack_push_word, stack_pop_word,"}, {"sha": "7ae08fca892eaa1dea8a5fe805d37965fb1395e9", "filename": "gcc/Makefile.in", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3bd6d4c458a197683ce3f82b884ad1546b7d67de", "patch": "@@ -549,6 +549,13 @@ T =\n T_TARGET =\n T_TARGET : $(T_TARGET)\n \n+# This should name the specs file that we're going to install.  Target\n+# Makefiles may override it and name another file to be generated from\n+# the built-in specs and installed as the default spec, as long as\n+# they also introduce a rule to generate a file name specs, to be used\n+# at build time.\n+SPECS = specs\n+\n # End of variables for you to override.\n \n # Definition of `all' is here so that new rules inserted by sed\n@@ -788,7 +795,7 @@ STAGESTUFF = *$(objext) insn-flags.h insn-config.h insn-codes.h \\\n  xgcc$(exeext) cpp$(exeext) cc1$(exeext) $(EXTRA_PASSES) \\\n  $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) cc1obj$(exeext) \\\n  protoize$(exeext) unprotoize$(exeext) \\\n- specs collect2$(exeext) $(USE_COLLECT2) \\\n+ $(SPECS) collect2$(exeext) $(USE_COLLECT2) \\\n  gcov-iov$(build_exeext) gcov$(exeext) gcov-dump$(exeext) \\\n  *.[0-9][0-9].* *.[si] libcpp.a libbackend.a libgcc.mk \\\n  $(LANG_STAGESTUFF)\n@@ -994,9 +1001,9 @@ cpp$(exeext): gcc.o cppspec.o version.o intl.o prefix.o \\\n \t  prefix.o version.o $(EXTRA_GCC_OBJS) $(LIBS)\n \n # Dump a specs file to make -B./ read these specs over installed ones.\n-specs: xgcc$(exeext)\n+$(SPECS): xgcc$(exeext)\n \t$(GCC_FOR_TARGET) -dumpspecs > tmp-specs\n-\tmv tmp-specs specs\n+\tmv tmp-specs $(SPECS)\n \n # We do want to create an executable named `xgcc', so we can use it to\n # compile libgcc2.a.\n@@ -2668,7 +2675,7 @@ mostlyclean: $(INTL_MOSTLYCLEAN) lang.mostlyclean\n # Delete debugging dump files.\n \t-rm -f *.[0-9][0-9].* */*.[0-9][0-9].*\n # Delete some files made during installation.\n-\t-rm -f specs SYSCALLS.c.X SYSCALLS.c\n+\t-rm -f specs $(SPECS) SYSCALLS.c.X SYSCALLS.c\n \t-rm -f collect collect2 mips-tfile mips-tdump\n # Delete files generated for fixproto\n \t-rm -rf fix-header$(build_exeext) xsys-protos.h deduced.h tmp-deduced.h \\\n@@ -2841,7 +2848,7 @@ install-common: native $(EXTRA_PARTS) lang.install-common\n # Don't mess with specs if it doesn't exist yet.\n \t-if [ -f specs ] ; then \\\n \t  rm -f $(DESTDIR)$(libsubdir)/specs; \\\n-\t  $(INSTALL_DATA) specs $(DESTDIR)$(libsubdir)/specs; \\\n+\t  $(INSTALL_DATA) $(SPECS) $(DESTDIR)$(libsubdir)/specs; \\\n \t  chmod a-x $(DESTDIR)$(libsubdir)/specs; \\\n \tfi\n # Install protoize if it was compiled."}, {"sha": "9f74569872f16b95e0e11caea4720905b684fa9f", "filename": "gcc/config.gcc", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3bd6d4c458a197683ce3f82b884ad1546b7d67de", "patch": "@@ -1,5 +1,6 @@\n # GCC build-, host- and target-specific configuration file.\n-# Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+# Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+# Free Software Foundation, Inc.\n \n #This file is part of GCC.\n \n@@ -1802,6 +1803,24 @@ mips*-*-netbsd*)\t\t\t# NetBSD/mips, either endian.\n \ttm_file=\"elfos.h ${tm_file} mips/netbsd.h\"\n \ttmake_file=\"${tmake_file}\"\n \t;;\n+mips64*-*-linux*)\n+\ttm_file=\"dbxelf.h elfos.h svr4.h linux.h ${tm_file} mips/linux.h mips/linux64.h\"\n+\ttmake_file=\"t-slibgcc-elf-ver t-linux mips/t-linux mips/t-linux64\"\n+\n+\t# This default ABI is a partial lie: t-linux64 overrides the\n+\t# DRIVER_SELF_SPEC that sets the default abi, in the spec file\n+\t# that is installed.  What GCC thinks of as the default must\n+\t# remain as ABI_32 such that the SONAMEs of the libgcc shared\n+\t# libraries remain compatible with those of mips-linux-gnu.\n+\ttm_defines=\"MIPS_ISA_DEFAULT=1 MIPS_ABI_DEFAULT=ABI_32\"\n+\ttarget_cpu_default=\"MASK_ABICALLS|MASK_FLOAT64|MASK_64BIT\"\n+\textra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n+\tgnu_ld=yes\n+\tgas=yes\n+\tif test x$enable_threads = xyes; then\n+\t\tthread_file='posix'\n+\tfi\n+\t;;\n mips*-*-linux*)\t\t\t\t# Linux MIPS, either endian.\n         tm_file=\"dbxelf.h elfos.h svr4.h linux.h ${tm_file} mips/linux.h\"\n \tcase $machine in"}, {"sha": "314f98ca43cb16ddc01d0c323aac8698211aeeac", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=3bd6d4c458a197683ce3f82b884ad1546b7d67de", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  Iris version 6.\n-   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2002\n+   Copyright (C) 1994, 1995, 1996, 1997, 1998, 2000, 2001, 2002, 2003\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -509,3 +509,5 @@ do {\t\t\t\t\t\t\t\t\t \\\n %{shared:-hidden_symbol __do_global_ctors,__do_global_ctors_1,__do_global_dtors} \\\n -_SYSTYPE_SVR4 -woff 131 \\\n %{mabi=32: -32}%{mabi=n32: -n32}%{mabi=64: -64}%{!mabi*: -n32}\"\n+\n+#define MIPS_TFMODE_FORMAT ibm_extended_format"}, {"sha": "ef30146c988d678ea87484fcd3cd750e35e87d0e", "filename": "gcc/config/mips/linux64.h", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fconfig%2Fmips%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fconfig%2Fmips%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Flinux64.h?ref=3bd6d4c458a197683ce3f82b884ad1546b7d67de", "patch": "@@ -0,0 +1,99 @@\n+/* Definitions for MIPS running Linux-based GNU systems with ELF format\n+   using n32/64 abi.\n+   Copyright 2002, 2003 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* This sets the post-install default ABI to n32.  This must NOT be\n+   kept in sync with the default ABI in gcc/config.gcc; it's actually\n+   meant to override that.  However, for correct behavior at build\n+   time, we also need t-linux64 to get the build-time specs in line\n+   with the setting in config.gcc.  */\n+#define DRIVER_DEFAULT_ABI_SELF_SPEC \"%{!mabi=*:-mabi=n32}\"\n+#define SUBTARGET_EXTRA_SPECS \\\n+  { \"driver_default_abi_self_spec\", DRIVER_DEFAULT_ABI_SELF_SPEC },\n+#define DRIVER_SELF_SPECS \\\n+\"%{mabi-fake-default:%{!mabi=*:-mabi=32}}\", \\\n+\"%(driver_default_abi_self_spec)\", \\\n+\"%{!mips*:%{mabi=32:-mips1}%{mabi=n32:-mips3}%{mabi=64:-mips4}}\"\n+#undef SUBTARGET_TARGET_SWITCHES\n+#define SUBTARGET_TARGET_SWITCHES \\\n+  { \"abi-fake-default\", 0, N_(\"Same as -mabi=32, just trickier\") },\n+\n+#undef SUBTARGET_ASM_SPEC\n+#define SUBTARGET_ASM_SPEC \"\\\n+%{!fno-PIC:%{!fno-pic:-KPIC}} \\\n+%{fno-PIC:-non_shared} %{fno-pic:-non_shared} \\\n+%{mabi=64:-64} %{mabi=n32:-n32} \\\n+%{!mips*: %{mabi=n32|mabi=32:-mips3} %{mabi=64:-mips4}}\"\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"\\\n+%{!static: \\\n+ %{mabi=n32:-rpath-link %R/lib32:%R/usr/lib32} \\\n+ %{mabi=64:-rpath-link %R/lib64:%R/usr/lib64} \\\n+ %{mabi=32:-rpath-link %R/lib:%R/usr/lib}} \\\n+%{!shared: %{pthread:-lthread} %{profile:-lc_p} %{!profile: -lc}}\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"\\\n+%{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} %{mips4} \\\n+%{bestGnum} %{shared} %{non_shared} \\\n+%{call_shared} %{no_archive} %{exact_version} \\\n+ %(endian_spec) \\\n+  %{!shared: \\\n+    %{!ibcs: \\\n+      %{!static: \\\n+        %{rdynamic:-export-dynamic} \\\n+        %{!dynamic-linker: \\\n+\t  %{mabi=n32: -dynamic-linker /lib32/ld.so.1} \\\n+\t  %{mabi=64: -dynamic-linker /lib64/ld.so.1} \\\n+\t  %{mabi=32: -dynamic-linker /lib/ld.so.1}}} \\\n+      %{static:-static}}} \\\n+%{mabi=n32: -melf32btsmipn32} \\\n+%{mabi=64: -melf64btsmip} \\\n+%{mabi=32: -melf32btsmip}\"\n+\n+#undef STARTFILE_PREFIX_SPEC\n+#define STARTFILE_PREFIX_SPEC \"\\\n+%{mabi=n32: /lib32/ /usr/lib32/} \\\n+%{mabi=64: /lib64/ /usr/lib64/} \\\n+%{mabi=32: /lib/ /usr/lib/}\"\n+\n+#undef LOCAL_LABEL_PREFIX\n+#define LOCAL_LABEL_PREFIX ((mips_abi == ABI_32 || mips_abi == ABI_O64) \\\n+\t\t\t    ? \"$\" : \".\")\n+\n+/* The size in bytes of a DWARF field indicating an offset or length\n+   relative to a debug info section, specified to be 4 bytes in the DWARF-2\n+   specification.  The SGI/MIPS ABI defines it to be the same as PTR_SIZE.  */\n+#define DWARF_OFFSET_SIZE PTR_SIZE\n+\n+#undef ASM_PREFERRED_EH_DATA_FORMAT\n+#if 0  /* We can't use relative addressing modes on NEWABI :-(  */\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL)       \t\t\\\n+   (flag_pic\t\t\t\t\t\t\t\t\\\n+    ? ((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_sdata4\t\t\\\n+    : DW_EH_PE_absptr)\n+#endif\n+\n+/* GNU/Linux doesn't use the same floating-point format that IRIX uses\n+   for long double.  There's no need to override this here, since\n+   ieee_quad_format is the default, but let's put this here to make\n+   sure nobody thinks we just forgot to set it to something else.  */\n+#define MIPS_TFMODE_FORMAT ieee_quad_format"}, {"sha": "c0133fafdb271761ef9c89857f6b9937e619457e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=3bd6d4c458a197683ce3f82b884ad1546b7d67de", "patch": "@@ -5359,6 +5359,10 @@ override_options ()\n   else\n     mips16 = 0;\n \n+#ifdef MIPS_TFMODE_FORMAT\n+  real_format_for_mode[TFmode - QFmode] = &MIPS_TFMODE_FORMAT;\n+#endif\n+  \n   mips_print_operand_punct['?'] = 1;\n   mips_print_operand_punct['#'] = 1;\n   mips_print_operand_punct['&'] = 1;"}, {"sha": "09d46632fe36565c44578ec5705d0071178928c1", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=3bd6d4c458a197683ce3f82b884ad1546b7d67de", "patch": "@@ -534,6 +534,7 @@ extern void\t\tsbss_section PARAMS ((void));\n \n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n+  SUBTARGET_TARGET_SWITCHES\t\t\t\t\t\t\\\n   {\"no-crt0\",          0,                                               \\\n      N_(\"No default crt0.o\") },\t\t\t\t\t \t\\\n   {\"int64\",\t\t  MASK_INT64 | MASK_LONG64,\t\t\t\\\n@@ -993,6 +994,7 @@ extern void\t\tsbss_section PARAMS ((void));\n \n #define GAS_ASM_SPEC \"%{mtune=*} %{v}\"\n \n+#define SUBTARGET_TARGET_SWITCHES\n \n extern int mips_abi;\n "}, {"sha": "cf63928777076891a575ffd084071b633e148848", "filename": "gcc/config/mips/t-linux64", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fconfig%2Fmips%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fconfig%2Fmips%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-linux64?ref=3bd6d4c458a197683ce3f82b884ad1546b7d67de", "patch": "@@ -0,0 +1,41 @@\n+MULTILIB_OPTIONS = mabi=32/mabi=n32/mabi=64\n+MULTILIB_DIRNAMES = o32 32 64\n+MULTILIB_OSDIRNAMES = ../lib ../lib32 ../lib64\n+\n+EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\n+\n+LIB2FUNCS_EXTRA = $(srcdir)/config/mips/_tilib.c\n+\n+TPBIT = tp-bit.c\n+\n+tp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#ifdef __MIPSEL__' > tp-bit.c\n+\techo '# define FLOAT_BIT_ORDER_MISMATCH' >> tp-bit.c\n+\techo '#endif' >> tp-bit.c\n+\techo '#if __LDBL_MANT_DIG__ == 113' >> tp-bit.c\n+\techo '# define TFLOAT' >> tp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> tp-bit.c\n+\techo '#endif' >> tp-bit.c\n+\n+# This arranges for us to extract the built-in specs of the compiler\n+# into specs.install.  It's this file that we're going to install as\n+# specs.  Howver, at toolchain build time, we must use specs that\n+# enforce the defaults that the compiler expects, namely, the o32 ABI,\n+# instead of n32, that we want to use as the default post install.\n+SPECS = specs.install\n+specs: specs.install\n+\t# Changing the build-time default ABI from n32 to o32\n+\t# The post-install default ABI will remain n32\n+\t@if test \"x`grep '!mabi=\\*:-mabi=n32' specs.install`\" = \\\n+\t\t\"x%{!mabi=*:-mabi=n32}\"; then \\\n+\t  sed 's,\\(!mabi=\\*:-mabi\\)=n32,\\1=32,' < specs.install > $@ ; \\\n+\telse \\\n+\t  echo failed, gcc/config/mips/t-linux64 needs updating >&2; \\\n+\t  false; \\\n+\tfi\n+\n+# This arranges for anyone who uses gcc -print-multi-lib post\n+# installation to get lists of options for each multilib to get\n+# options that actually work.\n+MULTILIB_EXTRA_OPTS = mabi-fake-default\n+CRTSTUFF_T_CFLAGS = -mabi-fake-default"}, {"sha": "798745584cddd5d2cc85c02412b01ea39d6326ee", "filename": "gcc/doc/fragments.texi", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fdoc%2Ffragments.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fdoc%2Ffragments.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ffragments.texi?ref=3bd6d4c458a197683ce3f82b884ad1546b7d67de", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -147,7 +147,24 @@ at the same time.  Therefore @code{MULTILIB_EXCEPTIONS} is set to\n Sometimes it is desirable that when building multiple versions of\n @file{libgcc.a} certain options should always be passed on to the\n compiler.  In that case, set @code{MULTILIB_EXTRA_OPTS} to be the list\n-of options to be used for all builds.\n+of options to be used for all builds.  If you set this, you should\n+probably set @code{CRTSTUFF_T_CFLAGS} to a dash followed by it.\n+\n+@findex SPECS\n+@item SPECS\n+Unfortunately, setting @code{MULTILIB_EXTRA_OPTS} is not enough, since\n+it does not affect the build of target libraries, at least not the\n+build of the default multilib.  One possible work-around is to use\n+@code{DRIVER_SELF_SPECS} to bring options from the @file{specs} file\n+as if they had been passed in the compiler driver command line.\n+However, you don't want to be adding these options after the toolchain\n+is installed, so you can instead tweak the @file{specs} file that will\n+be used during the toolchain build, while you still install the\n+original, built-in @file{specs}.  The trick is to set @code{SPECS} to\n+some other filename (say @file{specs.install}), that will then be\n+created out of the built-in specs, and introduce a @file{Makefile}\n+rule to generate the @file{specs} file that's going to be used at\n+build time out of your @file{specs.install}.\n @end table\n \n @node Host Fragment"}, {"sha": "ebf340793ce181e244e8f61534f59def5e4e660e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3bd6d4c458a197683ce3f82b884ad1546b7d67de", "patch": "@@ -491,7 +491,7 @@ in the following sections.\n -mrnames  -msoft-float @gol\n -m4650  -msingle-float  -mmad @gol\n -mstats  -EL  -EB  -G @var{num}  -nocpp @gol\n--mabi=32  -mabi=n32  -mabi=64  -mabi=eabi @gol\n+-mabi=32  -mabi=n32  -mabi=64  -mabi=eabi  -mabi-fake-default @gol\n -mfix7000  -mno-crt0 -mflush-func=@var{func} -mno-flush-func @gol\n -mbranch-likely -mno-branch-likely}\n \n@@ -7465,6 +7465,37 @@ selects the one defined by MIPS@.  Both these ABIs have\n 64-bit code when you select a 64-bit architecture, but you\n can use @option{-mgp32} to get 32-bit code instead.\n \n+@item -mabi-fake-default\n+@opindex mabi-fake-default\n+You don't want to know what this option does.  No, really.  I mean\n+it.  Move on to the next option.\n+\n+What?  You're still here?  Oh, well@enddots{}  Ok, here's the deal.  GCC\n+wants the default set of options to get the root of the multilib tree,\n+and the shared library SONAMEs without any multilib-indicating\n+suffixes.  This is not convenience for @samp{mips64-linux-gnu}, since\n+we want to default to the N32 ABI, while still being binary-compatible\n+with @samp{mips-linux-gnu} if you stick to the O32 ABI@.  Being\n+binary-compatible means shared libraries should have the same SONAMEs,\n+and libraries should live in the same location.  Having O32 libraries\n+in a sub-directory named say @file{o32} is not acceptable.\n+\n+So we trick GCC into believing that O32 is the default ABI, except\n+that we override the default with some internal command-line\n+processing magic.  Problem is, if we stopped at that, and you then\n+created a multilib-aware package that used the output of @command{gcc\n+-print-multi-lib} to decide which multilibs to build, and how, and\n+you'd find yourself in an awkward situation when you found out that\n+some of the options listed ended up mapping to the same multilib, and\n+none of your libraries was actually built for the multilib that\n+@option{-print-multi-lib} claims to be the default.  So we added this\n+option that disables the default switcher, falling back to GCC's\n+original notion of the default library.  Confused yet?\n+\n+For short: don't ever use this option, unless you find it in the list\n+of additional options to be used when building for multilibs, in the\n+output of @option{gcc -print-multi-lib}.\n+\n @item -mmips-as\n @opindex mmips-as\n Generate code for the MIPS assembler, and invoke @file{mips-tfile} to"}, {"sha": "bc883331f95993909dfc110d28e957d9815ea493", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=3bd6d4c458a197683ce3f82b884ad1546b7d67de", "patch": "@@ -168,11 +168,12 @@ multilibs.  Example nonsensical definition, where @code{-malt-abi},\n A list of specs for the driver itself.  It should be a suitable\n initializer for an array of strings, with no surrounding braces.\n \n-The driver applies these specs to its own command line before choosing\n-the multilib directory or running any subcommands.  It applies them in\n-the order given, so each spec can depend on the options added by\n-earlier ones.  It is also possible to remove options using\n-@samp{%<@var{option}} in the usual way.\n+The driver applies these specs to its own command line between loading\n+default @file{specs} files (but not command-line specified ones) and\n+choosing the multilib directory or running any subcommands.  It\n+applies them in the order given, so each spec can depend on the\n+options added by earlier ones.  It is also possible to remove options\n+using @samp{%<@var{option}} in the usual way.\n \n This macro can be useful when a port has several interdependent target\n options.  It provides a way of standardizing the command line so"}, {"sha": "ca3a51337f6219df99de2d8f601b0185796544fb", "filename": "gcc/gcc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd6d4c458a197683ce3f82b884ad1546b7d67de/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=3bd6d4c458a197683ce3f82b884ad1546b7d67de", "patch": "@@ -6198,12 +6198,6 @@ main (argc, argv)\n \n   process_command (argc, argv);\n \n-  /* Process DRIVER_SELF_SPECS, adding any new options to the end\n-     of the command line.  */\n-\n-  for (i = 0; i < ARRAY_SIZE (driver_self_specs); i++)\n-    do_self_spec (driver_self_specs[i]);\n-\n   /* Initialize the vector of specs to just the default.\n      This means one element containing 0s, as a terminator.  */\n \n@@ -6237,6 +6231,12 @@ main (argc, argv)\n   if (access (specs_file, R_OK) == 0)\n     read_specs (specs_file, TRUE);\n \n+  /* Process DRIVER_SELF_SPECS, adding any new options to the end\n+     of the command line.  */\n+\n+  for (i = 0; i < ARRAY_SIZE (driver_self_specs); i++)\n+    do_self_spec (driver_self_specs[i]);\n+\n   /* If not cross-compiling, look for executables in the standard\n      places.  */\n   if (*cross_compile == '0')"}]}