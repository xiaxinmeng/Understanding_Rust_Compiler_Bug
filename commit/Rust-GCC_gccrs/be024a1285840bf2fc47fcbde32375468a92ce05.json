{"sha": "be024a1285840bf2fc47fcbde32375468a92ce05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUwMjRhMTI4NTg0MGJmMmZjNDdmY2JkZTMyMzc1NDY4YTkyY2UwNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2021-08-16T13:26:22Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2021-08-16T13:27:42Z"}, "message": "Fix regression in debug info for Ada with DWARF 5\n\nadd_scalar_info can directly generate a reference to an existing DIE for a\nscalar attribute, e.g the upper bound of a VLA, but it does so only if this\nexisting DIE has a location or is a constant:\n\n              if (get_AT (decl_die, DW_AT_location)\n                  || get_AT (decl_die, DW_AT_data_member_location)\n                  || get_AT (decl_die, DW_AT_const_value))\n\nNow, in DWARF 5, members of a structure that are bitfields no longer have a\nDW_AT_data_member_location but a DW_AT_data_bit_offset attribute instead, so\nthe condition is bypassed.\n\ngcc/\n\t* dwarf2out.c (add_scalar_info): Deal with DW_AT_data_bit_offset.", "tree": {"sha": "3e27687ab331c7f8981729eeb517eb509b4500dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e27687ab331c7f8981729eeb517eb509b4500dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be024a1285840bf2fc47fcbde32375468a92ce05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be024a1285840bf2fc47fcbde32375468a92ce05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be024a1285840bf2fc47fcbde32375468a92ce05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be024a1285840bf2fc47fcbde32375468a92ce05/comments", "author": null, "committer": null, "parents": [{"sha": "e660441f94f2ca2ca1bd63c922c6a43737c2259e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e660441f94f2ca2ca1bd63c922c6a43737c2259e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e660441f94f2ca2ca1bd63c922c6a43737c2259e"}], "stats": {"total": 1, "additions": 1, "deletions": 0}, "files": [{"sha": "ba0a6d6ed60206804336343f759d1537d23f2c35", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be024a1285840bf2fc47fcbde32375468a92ce05/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be024a1285840bf2fc47fcbde32375468a92ce05/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=be024a1285840bf2fc47fcbde32375468a92ce05", "patch": "@@ -21253,6 +21253,7 @@ add_scalar_info (dw_die_ref die, enum dwarf_attribute attr, tree value,\n \t    {\n \t      if (get_AT (decl_die, DW_AT_location)\n \t\t  || get_AT (decl_die, DW_AT_data_member_location)\n+\t\t  || get_AT (decl_die, DW_AT_data_bit_offset)\n \t\t  || get_AT (decl_die, DW_AT_const_value))\n \t\t{\n \t\t  add_AT_die_ref (die, attr, decl_die);"}]}