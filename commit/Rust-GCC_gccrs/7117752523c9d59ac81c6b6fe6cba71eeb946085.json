{"sha": "7117752523c9d59ac81c6b6fe6cba71eeb946085", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzExNzc1MjUyM2M5ZDU5YWM4MWM2YjZmZTZjYmE3MWVlYjk0NjA4NQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-09-09T17:44:12Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-09-09T17:44:12Z"}, "message": "compiler: break dependence on hex_value\n    \n    Rework the lexical analyzer to eliminate the need to call\n    hex_value() in libiberty (added equivalent local functionality).\n    No change in functionality.\n    \n    Reviewed-on: https://go-review.googlesource.com/28855\n\nFrom-SVN: r240049", "tree": {"sha": "725842b404500eee6e0928b7dbcee772c95a30f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/725842b404500eee6e0928b7dbcee772c95a30f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7117752523c9d59ac81c6b6fe6cba71eeb946085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7117752523c9d59ac81c6b6fe6cba71eeb946085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7117752523c9d59ac81c6b6fe6cba71eeb946085", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7117752523c9d59ac81c6b6fe6cba71eeb946085/comments", "author": null, "committer": null, "parents": [{"sha": "c65248cb7df48f125ff375849e2834d64e7bc3bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c65248cb7df48f125ff375849e2834d64e7bc3bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c65248cb7df48f125ff375849e2834d64e7bc3bd"}], "stats": {"total": 81, "additions": 65, "deletions": 16}, "files": [{"sha": "26ce264c79843af4ed35bf462094f9dd93456c27", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7117752523c9d59ac81c6b6fe6cba71eeb946085/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7117752523c9d59ac81c6b6fe6cba71eeb946085/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=7117752523c9d59ac81c6b6fe6cba71eeb946085", "patch": "@@ -1,4 +1,4 @@\n-6c1f159cdcb56ebff617f6bbc6c97943a1a8a34d\n+4de301275dfed034a1dd9dff3d1af8643ee5cb4b\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "05705f581c91c903c55565ff196c1d319deab731", "filename": "gcc/go/gofrontend/lex.cc", "status": "modified", "additions": 61, "deletions": 15, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7117752523c9d59ac81c6b6fe6cba71eeb946085/gcc%2Fgo%2Fgofrontend%2Flex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7117752523c9d59ac81c6b6fe6cba71eeb946085/gcc%2Fgo%2Fgofrontend%2Flex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.cc?ref=7117752523c9d59ac81c6b6fe6cba71eeb946085", "patch": "@@ -985,6 +985,52 @@ Lex::is_hex_digit(char c)\n \t  || (c >= 'a' && c <= 'f'));\n }\n \n+// not a hex value\n+#define NHV 100\n+\n+// for use by Lex::hex_val\n+static const unsigned char hex_value_lookup_table[256] =\n+{\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, // NUL SOH STX ETX EOT ENQ ACK BEL\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //  BS  HT  LF  VT  FF  CR  SO  SI\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, // DLE DC1 DC2 DC3 DC4 NAK SYN ETB\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, // CAN  EM SUB ESC  FS  GS  RS  US\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //  SP   !   \"   #   $   %   &   '\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //   (   )   *   +   ,   -   .   /\n+    0,   1,   2,   3,   4,   5,   6,   7, //   0   1   2   3   4   5   6   7\n+    8,   9, NHV, NHV, NHV, NHV, NHV, NHV, //   8   9   :   ;   <   =   >   ?\n+  NHV,  10,  11,  12,  13,  14,  15, NHV, //   @   A   B   C   D   E   F   G\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //   H   I   J   K   L   M   N   O\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //   P   Q   R   S   T   U   V   W\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //   X   Y   Z   [   \\   ]   ^   _\n+  NHV,  10,  11,  12,  13,  14,  15, NHV, //   `   a   b   c   d   e   f   g\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //   h   i   j   k   l   m   n   o\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //   p   q   r   s   t   u   v   w\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //   x   y   z   {   |   }   ~\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV, //\n+  NHV, NHV, NHV, NHV, NHV, NHV, NHV, NHV //\n+};\n+\n+unsigned\n+Lex::hex_val(char c)\n+{\n+  return hex_value_lookup_table[static_cast<unsigned char>(c)];\n+}\n+\n // Return whether an exponent could start at P.\n \n bool\n@@ -1212,7 +1258,7 @@ Lex::advance_one_char(const char* p, bool is_single_quote, unsigned int* value,\n \t  *is_character = false;\n \t  if (Lex::is_hex_digit(p[1]) && Lex::is_hex_digit(p[2]))\n \t    {\n-\t      *value = (hex_value(p[1]) << 4) + hex_value(p[2]);\n+\t      *value = (Lex::hex_val(p[1]) << 4) + Lex::hex_val(p[2]);\n \t      return p + 3;\n \t    }\n \t  error_at(this->location(), \"invalid hex character\");\n@@ -1259,10 +1305,10 @@ Lex::advance_one_char(const char* p, bool is_single_quote, unsigned int* value,\n \t  if (Lex::is_hex_digit(p[1]) && Lex::is_hex_digit(p[2])\n \t      && Lex::is_hex_digit(p[3]) && Lex::is_hex_digit(p[4]))\n \t    {\n-\t      *value = ((hex_value(p[1]) << 12)\n-\t\t\t+ (hex_value(p[2]) << 8)\n-\t\t\t+ (hex_value(p[3]) << 4)\n-\t\t\t+ hex_value(p[4]));\n+\t      *value = ((Lex::hex_val(p[1]) << 12)\n+\t\t\t+ (Lex::hex_val(p[2]) << 8)\n+\t\t\t+ (Lex::hex_val(p[3]) << 4)\n+\t\t\t+ Lex::hex_val(p[4]));\n \t      if (*value >= 0xd800 && *value < 0xe000)\n \t\t{\n \t\t  error_at(this->location(),\n@@ -1282,14 +1328,14 @@ Lex::advance_one_char(const char* p, bool is_single_quote, unsigned int* value,\n \t      && Lex::is_hex_digit(p[5]) && Lex::is_hex_digit(p[6])\n \t      && Lex::is_hex_digit(p[7]) && Lex::is_hex_digit(p[8]))\n \t    {\n-\t      *value = ((hex_value(p[1]) << 28)\n-\t\t\t+ (hex_value(p[2]) << 24)\n-\t\t\t+ (hex_value(p[3]) << 20)\n-\t\t\t+ (hex_value(p[4]) << 16)\n-\t\t\t+ (hex_value(p[5]) << 12)\n-\t\t\t+ (hex_value(p[6]) << 8)\n-\t\t\t+ (hex_value(p[7]) << 4)\n-\t\t\t+ hex_value(p[8]));\n+\t      *value = ((Lex::hex_val(p[1]) << 28)\n+\t\t\t+ (Lex::hex_val(p[2]) << 24)\n+\t\t\t+ (Lex::hex_val(p[3]) << 20)\n+\t\t\t+ (Lex::hex_val(p[4]) << 16)\n+\t\t\t+ (Lex::hex_val(p[5]) << 12)\n+\t\t\t+ (Lex::hex_val(p[6]) << 8)\n+\t\t\t+ (Lex::hex_val(p[7]) << 4)\n+\t\t\t+ Lex::hex_val(p[8]));\n \t      if (*value > 0x10ffff\n \t\t  || (*value >= 0xd800 && *value < 0xe000))\n \t\t{\n@@ -2721,10 +2767,10 @@ Lex::is_exported_name(const std::string& name)\n       for (size_t i = 2; i < len && p[i] != '$'; ++i)\n \t{\n \t  c = p[i];\n-\t  if (!hex_p(c))\n+\t  if (!Lex::is_hex_digit(c))\n \t    return false;\n \t  ci <<= 4;\n-\t  ci |= hex_value(c);\n+\t  ci |= Lex::hex_val(c);\n \t}\n       return Lex::is_unicode_uppercase(ci);\n     }"}, {"sha": "0a7a842ba8836badbbd9e3f20fe6bbea8bab8cb3", "filename": "gcc/go/gofrontend/lex.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7117752523c9d59ac81c6b6fe6cba71eeb946085/gcc%2Fgo%2Fgofrontend%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7117752523c9d59ac81c6b6fe6cba71eeb946085/gcc%2Fgo%2Fgofrontend%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Flex.h?ref=7117752523c9d59ac81c6b6fe6cba71eeb946085", "patch": "@@ -454,6 +454,9 @@ class Lex\n   octal_value(char c)\n   { return c - '0'; }\n \n+  static unsigned\n+  hex_val(char c);\n+\n   Token\n   make_invalid_token()\n   { return Token::make_invalid_token(this->location()); }"}]}