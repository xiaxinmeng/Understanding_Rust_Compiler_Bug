{"sha": "52f26be4091ee44b2f6407d44c05c310917f2465", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJmMjZiZTQwOTFlZTQ0YjJmNjQwN2Q0NGMwNWMzMTA5MTdmMjQ2NQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-12-06T12:17:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-12-06T12:17:31Z"}, "message": "re PR middle-end/51436 (ICE(segfault) in gimplify_and_update_call_from_tree gimple-fold.c:603)\n\n2011-12-06  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/51436\n\t* gimple-fold.c (gimplify_and_update_call_from_tree): Guard\n\tvdef check for the fact we do not have virtual operands when\n\tnot optimizing.\n\n\t* g++.dg/torture/pr51436.C: New testcase.\n\nFrom-SVN: r182045", "tree": {"sha": "1cf5701c5c16af15a9dc6c9d966f5e04c2748d2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cf5701c5c16af15a9dc6c9d966f5e04c2748d2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52f26be4091ee44b2f6407d44c05c310917f2465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f26be4091ee44b2f6407d44c05c310917f2465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52f26be4091ee44b2f6407d44c05c310917f2465", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52f26be4091ee44b2f6407d44c05c310917f2465/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b55eb41058252a2775fad91b3f77beec6fcc1b5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55eb41058252a2775fad91b3f77beec6fcc1b5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b55eb41058252a2775fad91b3f77beec6fcc1b5b"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "76c8b183a164e4a0644772212b2641eb78064006", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f26be4091ee44b2f6407d44c05c310917f2465/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f26be4091ee44b2f6407d44c05c310917f2465/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52f26be4091ee44b2f6407d44c05c310917f2465", "patch": "@@ -1,3 +1,10 @@\n+2011-12-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/51436\n+\t* gimple-fold.c (gimplify_and_update_call_from_tree): Guard\n+\tvdef check for the fact we do not have virtual operands when\n+\tnot optimizing.\n+\n 2011-12-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/51245"}, {"sha": "5da9be37575f8bb9dee8be4c5f4732cdd4bcb693", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f26be4091ee44b2f6407d44c05c310917f2465/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f26be4091ee44b2f6407d44c05c310917f2465/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=52f26be4091ee44b2f6407d44c05c310917f2465", "patch": "@@ -600,7 +600,7 @@ gimplify_and_update_call_from_tree (gimple_stmt_iterator *si_p, tree expr)\n \t  else\n \t    vdef = make_ssa_name (gimple_vop (cfun), new_stmt);\n \t  gimple_set_vdef (new_stmt, vdef);\n-\t  if (TREE_CODE (vdef) == SSA_NAME)\n+\t  if (vdef && TREE_CODE (vdef) == SSA_NAME)\n \t    SSA_NAME_DEF_STMT (vdef) = new_stmt;\n \t  laststore = new_stmt;\n \t}"}, {"sha": "5668927f566a2bc23b07ca67b00844bd1f0b4e82", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f26be4091ee44b2f6407d44c05c310917f2465/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f26be4091ee44b2f6407d44c05c310917f2465/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52f26be4091ee44b2f6407d44c05c310917f2465", "patch": "@@ -1,3 +1,8 @@\n+2011-12-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/51436\n+\t* g++.dg/torture/pr51436.C: New testcase.\n+\n 2011-12-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/51245"}, {"sha": "43d6c730032f196de3a97267c1fbfbaa6a257697", "filename": "gcc/testsuite/g++.dg/torture/pr51436.C", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52f26be4091ee44b2f6407d44c05c310917f2465/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr51436.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52f26be4091ee44b2f6407d44c05c310917f2465/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr51436.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr51436.C?ref=52f26be4091ee44b2f6407d44c05c310917f2465", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do compile } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern \"C\" void *memcpy (void *, __const void *, size_t);\n+template < class Dest, class Source > struct BitCastHelper {\n+    static Dest cast (const Source & source) __attribute__ ((always_inline)) {\n+\tDest dest;\n+\tmemcpy (0, &source, sizeof dest);\n+    }\n+};\n+template < class Dest, class Source > Dest BitCast (Source)\n+{\n+  BitCastHelper < Dest, Source >::cast (0);\n+}\n+\n+class MaybeObject\n+{\n+};\n+class Object:MaybeObject\n+{\n+public:\n+    static Object *cast (Object *) {\n+    }\n+};\n+class HeapObject:public Object\n+{\n+};\n+class String:public HeapObject\n+{\n+};\n+class ExternalString:public String\n+{\n+};\n+class ExternalTwoByteString:public ExternalString\n+{\n+};\n+\n+template < typename T > class Handle\n+{\n+public:\n+    Handle () {\n+    }\n+    T *operator* () const;\n+    template < class S > static Handle < T > cast (Handle < S > that) {\n+\tT::cast (*that);\n+    }\n+    T **location_;\n+};\n+\n+template < typename T > T * Handle < T >::operator* () const\n+{\n+  *BitCast < T ** >(location_);\n+}\n+\n+void\n+TestCharacterStream ()\n+{\n+  Handle < String > uc16_string;\n+  Handle < ExternalTwoByteString >::cast (uc16_string);\n+}"}]}