{"sha": "0024a8041f8b3a6b02e81632a9fb4b3c61969ac1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAyNGE4MDQxZjhiM2E2YjAyZTgxNjMyYTlmYjRiM2M2MTk2OWFjMQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@redhat.com", "date": "2001-01-24T04:30:47Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2001-01-24T04:30:47Z"}, "message": "Eliminate IA-64 compiler warnings.\n\n\t* dwarf2out.c (dwarf2out_line): Make last_file_num be unsigned.\n\t* frame.h (__ia64_personality_v1): Add prototype.\n\t* libgcc2.c (ia64_throw_helper): Change personality declaration to\n\tprototype form.  Add void * cast to first argument to personality\n\tcall.\n\t...\n\nFrom-SVN: r39227", "tree": {"sha": "fc4d21fc541822da267b743559aad79cad4610ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc4d21fc541822da267b743559aad79cad4610ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/comments", "author": null, "committer": null, "parents": [{"sha": "17fd8a87a4d92cd98089525cbc562ed3beed7937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17fd8a87a4d92cd98089525cbc562ed3beed7937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17fd8a87a4d92cd98089525cbc562ed3beed7937"}], "stats": {"total": 86, "additions": 70, "deletions": 16}, "files": [{"sha": "ee6029b7e98c1a6edcd41685ed0bf42835126b28", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0024a8041f8b3a6b02e81632a9fb4b3c61969ac1", "patch": "@@ -1,3 +1,28 @@\n+2001-01-23  Jim Wilson  <wilson@redhat.com>\n+\n+\t* dwarf2out.c (dwarf2out_line): Make last_file_num be unsigned.\n+\t* frame.h (__ia64_personality_v1): Add prototype.\n+\t* libgcc2.c (ia64_throw_helper): Change personality declaration to\n+\tprototype form.  Add void * cast to first argument to personality\n+\tcall.\n+\t* real.c (e113toe): Surround with INTEL_EXTENDED_IEEE_FORMAT ifdefs.\n+\t(asctoe113): Likewise.\n+\t* config/ia64/frame-ia64.c: Include eh-common.h.\n+\t* config/ia64/ia64-protos.h (sdata_section, sbbs_section): Add\n+\tprototypes.\n+\t* config/ia64/ia64.c (emit_insn_group_barriers): Add ATTRIBUTE_UNUSED\n+\tto dump parameter.\n+\t(itanium_split_issue): Add prototype.\n+\t(gen_nop_type): Ifdef out.\n+\t(find_best_packet): Initialize best_packet.\n+\t(ia64_encode_section_info): New local string.  Use for ggc_alloc_string\n+\tresult.\n+\t* config/ia64/ia64.h (ASM_OUTPUT_LONG_DOUBLE): Use 0L not 0.\n+\t* config/ia64/ia64.md (bsp_value): Add explicit stop bit at start.\n+\t(flushrs): Add explicit stop bit at end.\n+\t* config/ia64/lib1funcs.asm (__ia64_restore_stack_nonlocal): Change\n+\ttrailing \\ to >.\n+\t\n 2001-01-23  Chris Demetriou  <cgd@broadcom.com>\n \n \t* libgcc-std.ver (GCC_3.0): Add __terminate_func_set to list"}, {"sha": "66d39a4c1ced2074d2420b6544cd807bebb6c15f", "filename": "gcc/config/ia64/frame-ia64.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Fconfig%2Fia64%2Fframe-ia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Fconfig%2Fia64%2Fframe-ia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fframe-ia64.c?ref=0024a8041f8b3a6b02e81632a9fb4b3c61969ac1", "patch": "@@ -48,6 +48,7 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"defaults.h\"\n #include \"frame-ia64.h\"\n+#include \"eh-common.h\"\n \n /* Some types used by the DWARF 2 spec.  */\n "}, {"sha": "6f073ef92a899ed536638c61420b1498182e8890", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=0024a8041f8b3a6b02e81632a9fb4b3c61969ac1", "patch": "@@ -135,3 +135,11 @@ extern void ia64_output_end_prologue PARAMS((FILE *));\n extern void ia64_init_builtins PARAMS((void));\n extern void ia64_override_options PARAMS((void));\n extern int ia64_dbx_register_number PARAMS((int));\n+\n+#ifdef SDATA_SECTION_ASM_OP\n+extern void sdata_section PARAMS ((void));\n+#endif\n+\n+#ifdef SBSS_SECTION_ASM_OP\n+extern void sbss_section PARAMS ((void));\n+#endif"}, {"sha": "228c9074814300a920d61b6528d88269998bfa23", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=0024a8041f8b3a6b02e81632a9fb4b3c61969ac1", "patch": "@@ -4524,7 +4524,7 @@ emit_insn_group_barriers (dump, insns)\n \n static void\n emit_all_insn_group_barriers (dump, insns)\n-     FILE *dump;\n+     FILE *dump ATTRIBUTE_UNUSED;\n      rtx insns;\n {\n   rtx insn;\n@@ -4748,10 +4748,13 @@ static const char *type_names[] =\n /* Nonzero if we should insert stop bits into the schedule.  */\n int ia64_final_schedule = 0;\n \n+static int itanium_split_issue PARAMS ((const struct ia64_packet *, int));\n static rtx ia64_single_set PARAMS ((rtx));\n static int insn_matches_slot PARAMS ((const struct ia64_packet *, enum attr_type, int, rtx));\n static void ia64_emit_insn_before PARAMS ((rtx, rtx));\n+#if 0\n static rtx gen_nop_type PARAMS ((enum attr_type));\n+#endif\n static void finish_last_head PARAMS ((FILE *, int));\n static void rotate_one_bundle PARAMS ((FILE *));\n static void rotate_two_bundles PARAMS ((FILE *));\n@@ -5049,6 +5052,7 @@ ia64_emit_insn_before (insn, before)\n   emit_insn_before (insn, before);\n }\n \n+#if 0\n /* Generate a nop insn of the given type.  Note we never generate L type\n    nops.  */\n \n@@ -5072,6 +5076,7 @@ gen_nop_type (t)\n       abort ();\n     }\n }\n+#endif\n \n /* When rotating a bundle out of the issue window, insert a bundle selector\n    insn in front of it.  DUMP is the scheduling dump file or NULL.  START\n@@ -5383,7 +5388,7 @@ find_best_packet (pbest, ppacket, ready, types, n_ready)\n   int first = sched_data.first_slot;\n   int best = 0;\n   int lowest_end = 6;\n-  const struct ia64_packet *best_packet;\n+  const struct ia64_packet *best_packet = NULL;\n   int i;\n \n   for (i = 0; i < NR_PACKETS; i++)\n@@ -6160,12 +6165,13 @@ ia64_encode_section_info (decl)\n \t{\n \t  size_t len = strlen (symbol_str);\n \t  char *newstr = alloca (len + 1);\n+\t  const char *string;\n \n \t  *newstr = SDATA_NAME_FLAG_CHAR;\n \t  memcpy (newstr + 1, symbol_str, len + 1);\n \t  \n-\t  newstr = ggc_alloc_string (newstr, len + 1);\n-\t  XSTR (XEXP (DECL_RTL (decl), 0), 0) = newstr;\n+\t  string = ggc_alloc_string (newstr, len + 1);\n+\t  XSTR (XEXP (DECL_RTL (decl), 0), 0) = string;\n \t}\n     }\n   /* This decl is marked as being in small data/bss but it shouldn't"}, {"sha": "f0cd62e1a963e7de70f83a4556b55fc20a521c2f", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=0024a8041f8b3a6b02e81632a9fb4b3c61969ac1", "patch": "@@ -2024,7 +2024,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   long t[3];\t\t\t\t\t\t\t\t\\\n   REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, t);\t\t\t\t\\\n   fprintf (FILE, \"\\tdata4 0x%08lx, 0x%08lx, 0x%08lx, 0x%08lx\\n\",\t\\\n-\t   t[0] & 0xffffffff, t[1] & 0xffffffff, t[2] & 0xffffffff, 0);\t\\\n+\t   t[0] & 0xffffffff, t[1] & 0xffffffff, t[2] & 0xffffffff, 0L);\\\n } while (0)\n \n /* ??? Must reverse the word order for big-endian code?  */"}, {"sha": "7de8677ac21f94aa8e712c9edfe936715ec15723", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=0024a8041f8b3a6b02e81632a9fb4b3c61969ac1", "patch": "@@ -46,10 +46,6 @@\n \n ;; ??? Add function unit scheduling info for Itanium (TM) processor.\n \n-;; ??? The explicit stop in the flushrs pattern is not ideal.  It\n-;; would be better if rtx_needs_barrier took care of this, but this is\n-;; something that can be fixed later.\n-\n ;; ??? Need a better way to describe alternate fp status registers.\n \n ;; Unspec usage:\n@@ -4872,11 +4868,15 @@\n   \"ldf.fill %0 = %1%P1\"\n   [(set_attr \"itanium_class\" \"fld\")])\n \n+;; ??? The explicit stop is not ideal.  It would be better if\n+;; rtx_needs_barrier took care of this, but this is something that can be\n+;; fixed later.  This avoids an RSE DV.\n+\n (define_insn \"bsp_value\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(unspec:DI [(const_int 0)] 20))]\n   \"\"\n-  \"mov %0 = ar.bsp\"\n+  \";;\\;mov %0 = ar.bsp\"\n   [(set_attr \"itanium_class\" \"frar_i\")])\n \n (define_insn \"set_bsp\"\n@@ -4886,10 +4886,14 @@\n   [(set_attr \"itanium_class\" \"unknown\")\n    (set_attr \"predicable\" \"no\")])\n \n+;; ??? The explicit stops are not ideal.  It would be better if\n+;; rtx_needs_barrier took care of this, but this is something that can be\n+;; fixed later.  This avoids an RSE DV.\n+\n (define_insn \"flushrs\"\n   [(unspec [(const_int 0)] 21)]\n   \"\"\n-  \";;\\;flushrs\"\n+  \";;\\;flushrs\\;;;\"\n   [(set_attr \"itanium_class\" \"rse_m\")])\n \f\n ;; ::::::::::::::::::::"}, {"sha": "67f0a89ce61403267c8fdc9dfa8fc4be305d9302", "filename": "gcc/config/ia64/lib1funcs.asm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Fconfig%2Fia64%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Fconfig%2Fia64%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flib1funcs.asm?ref=0024a8041f8b3a6b02e81632a9fb4b3c61969ac1", "patch": "@@ -670,11 +670,11 @@ __ia64_restore_stack_nonlocal:\n //\n // The trampoline has the following form:\n //\n-//\t\t+-------------------+ \\ \n+//\t\t+-------------------+ >\n //\tTRAMP:\t| __ia64_trampoline | |\n //\t\t+-------------------+  > fake function descriptor\n //\t\t| TRAMP+16          | |\n-//\t\t+-------------------+ /\n+//\t\t+-------------------+ >\n //\t\t| target descriptor |\n //\t\t+-------------------+\n //\t\t| static link\t    |"}, {"sha": "9b0a8c454bec8e6c4e2a2dd519fcc89590df7034", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=0024a8041f8b3a6b02e81632a9fb4b3c61969ac1", "patch": "@@ -11390,7 +11390,7 @@ dwarf2out_line (filename, line)\n \t    fprintf (asm_out_file, \"\\t.file %d \\\"%s\\\"\\n\", file_num, filename);\n \t  fprintf (asm_out_file, \"\\t.loc %d %d 0\\n\", file_num, line);\n #else\n-\t  static int last_file_num;\n+\t  static unsigned int last_file_num;\n \t  if (file_num != last_file_num)\n \t    {\n \t      last_file_num = file_num;"}, {"sha": "2257d5256c56f5858c15e3268d40bbb0963b6140", "filename": "gcc/frame.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Fframe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Fframe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fframe.h?ref=0024a8041f8b3a6b02e81632a9fb4b3c61969ac1", "patch": "@@ -271,6 +271,8 @@ typedef struct unwind_info_ptr\n #define IA64_UNW_EHANDLER\t0x1\n #define IA64_UNW_UHANDLER\t0x2\n \n+extern void * __ia64_personality_v1 (void *pc, old_exception_table *table);\n+\n extern unwind_info_ptr *__build_ia64_frame_state (unsigned char *, \n \t\t\t\t\t\t  ia64_frame_state *,\n \t\t\t\t\t\t  void *, void *,"}, {"sha": "bb0d64e9f610afd3506c0919ae695ab081239f94", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=0024a8041f8b3a6b02e81632a9fb4b3c61969ac1", "patch": "@@ -4230,7 +4230,7 @@ ia64_throw_helper (ia64_frame_state *throw_frame, ia64_frame_state *caller,\n   memcpy (caller, throw_frame, sizeof (*caller));\n   while (!handler)\n     {\n-      void *(*personality) ();\n+      void *(*personality) (void *, old_exception_table *);\n       void *eh_table;\n \n       frame_count++;\n@@ -4256,7 +4256,7 @@ ia64_throw_helper (ia64_frame_state *throw_frame, ia64_frame_state *caller,\n       if (personality)\n \t/* Pass a segment relative PC address to the personality routine,\n \t   because the unwind_info section uses segrel relocs.  */\n-\thandler = personality (pc - pc_base, eh_table);\n+\thandler = personality ((void *)(pc - pc_base), eh_table);\n     }\n   \n   if (!handler)"}, {"sha": "087f10367c8d7909989a7e2146e07f257c1b8ab0", "filename": "gcc/real.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0024a8041f8b3a6b02e81632a9fb4b3c61969ac1/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=0024a8041f8b3a6b02e81632a9fb4b3c61969ac1", "patch": "@@ -407,7 +407,9 @@ static void emul\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *,\n \t\t\t       unsigned EMUSHORT *));\n static void e53toe\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static void e64toe\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n+#ifndef INTEL_EXTENDED_IEEE_FORMAT\n static void e113toe\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n+#endif\n static void e24toe\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static void etoe113\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n static void toe113\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n@@ -439,7 +441,9 @@ static void etoasc\tPARAMS ((unsigned EMUSHORT *, char *, int));\n static void asctoe24\tPARAMS ((const char *, unsigned EMUSHORT *));\n static void asctoe53\tPARAMS ((const char *, unsigned EMUSHORT *));\n static void asctoe64\tPARAMS ((const char *, unsigned EMUSHORT *));\n+#ifndef INTEL_EXTENDED_IEEE_FORMAT\n static void asctoe113\tPARAMS ((const char *, unsigned EMUSHORT *));\n+#endif\n static void asctoe\tPARAMS ((const char *, unsigned EMUSHORT *));\n static void asctoeg\tPARAMS ((const char *, unsigned EMUSHORT *, int));\n static void efloor\tPARAMS ((unsigned EMUSHORT *, unsigned EMUSHORT *));\n@@ -3327,6 +3331,7 @@ e64toe (pe, y)\n     *q++ = *p++;\n }\n \n+#ifndef INTEL_EXTENDED_IEEE_FORMAT\n /* Convert 128-bit long double precision float PE to e type Y.  */\n \n static void\n@@ -3411,6 +3416,7 @@ e113toe (pe, y)\n     }\n   emovo (yy, y);\n }\n+#endif\n \n /* Convert single precision float PE to e type Y.  */\n \n@@ -5101,6 +5107,7 @@ asctoe64 (s, y)\n   asctoeg (s, y, 64);\n }\n \n+#ifndef INTEL_EXTENDED_IEEE_FORMAT\n /* Convert ASCII string S to 128-bit long double Y.  */\n \n static void\n@@ -5110,6 +5117,7 @@ asctoe113 (s, y)\n {\n   asctoeg (s, y, 113);\n }\n+#endif\n \n /* Convert ASCII string S to e type Y.  */\n "}]}