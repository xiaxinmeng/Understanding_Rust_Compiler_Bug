{"sha": "e5a20888976375a90843c4e3625702a71f6f8e50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVhMjA4ODg5NzYzNzVhOTA4NDNjNGUzNjI1NzAyYTcxZjZmOGU1MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-02-21T21:16:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-02-21T21:16:22Z"}, "message": "re PR rtl-optimization/4994 (ICE with \"-fno-exceptions -O2 -mmmx -march=athlon\")\n\n\tPR optimization/4994\n\t* config/i386/i386.md (movsi_1, movsf_1): Support MMX -> MMX\n\tregister moves.\n\n\t* g++.dg/opt/mmx1.C: New test.\n\nFrom-SVN: r49939", "tree": {"sha": "31afe5ea799d69d4a0af20187cac2e9efca3c060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31afe5ea799d69d4a0af20187cac2e9efca3c060"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5a20888976375a90843c4e3625702a71f6f8e50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5a20888976375a90843c4e3625702a71f6f8e50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5a20888976375a90843c4e3625702a71f6f8e50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5a20888976375a90843c4e3625702a71f6f8e50/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "22273300ad1417a429f5d1d0e51e3b954278a72f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22273300ad1417a429f5d1d0e51e3b954278a72f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22273300ad1417a429f5d1d0e51e3b954278a72f"}], "stats": {"total": 100, "additions": 89, "deletions": 11}, "files": [{"sha": "2419eb508ba2180cf15f28ae215da4ceaa5a3927", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a20888976375a90843c4e3625702a71f6f8e50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a20888976375a90843c4e3625702a71f6f8e50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5a20888976375a90843c4e3625702a71f6f8e50", "patch": "@@ -1,4 +1,10 @@\n-2002-02-20  Jakub Jelinek  <jakub@redhat.com>\n+2002-02-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR optimization/4994\n+\t* config/i386/i386.md (movsi_1, movsf_1): Support MMX -> MMX\n+\tregister moves.\n+\n+2002-02-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/4574\n \t* expr.h (expand_and): Add mode argument."}, {"sha": "a62fd2fcf38969e46a0447afa68bbf78065c6031", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a20888976375a90843c4e3625702a71f6f8e50/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a20888976375a90843c4e3625702a71f6f8e50/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e5a20888976375a90843c4e3625702a71f6f8e50", "patch": "@@ -1734,8 +1734,8 @@\n    (set_attr \"length_immediate\" \"1\")])\n \n (define_insn \"*movsi_1\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=*a,r,*a,m,!*y,!rm,!*Y,!rm,!*Y\")\n-\t(match_operand:SI 1 \"general_operand\" \"im,rinm,rinm,rin,rm,*y,rm,*Y,*Y\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=*a,r,*a,m,!*y,!rm,!*y,!*Y,!rm,!*Y\")\n+\t(match_operand:SI 1 \"general_operand\" \"im,rinm,rinm,rin,rm,*y,*y,rm,*Y,*Y\"))]\n   \"GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM\"\n {\n   switch (get_attr_type (insn))\n@@ -1746,6 +1746,8 @@\n       return \"movd\\t{%1, %0|%0, %1}\";\n \n     case TYPE_MMX:\n+      if (get_attr_mode (insn) == DImode)\n+\treturn \"movq\\t{%1, %0|%0, %1}\";\n       return \"movd\\t{%1, %0|%0, %1}\";\n \n     case TYPE_LEA:\n@@ -1758,17 +1760,17 @@\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"4,5\")\n+     (cond [(eq_attr \"alternative\" \"4,5,6\")\n \t      (const_string \"mmx\")\n-\t    (eq_attr \"alternative\" \"6,7,8\")\n+\t    (eq_attr \"alternative\" \"7,8,9\")\n \t      (const_string \"sse\")\n \t    (and (ne (symbol_ref \"flag_pic\") (const_int 0))\n \t\t (match_operand:SI 1 \"symbolic_operand\" \"\"))\n \t      (const_string \"lea\")\n \t   ]\n \t   (const_string \"imov\")))\n-   (set_attr \"modrm\" \"0,*,0,*,*,*,*,*,*\")\n-   (set_attr \"mode\" \"SI,SI,SI,SI,SI,SI,TI,SI,SI\")])\n+   (set_attr \"modrm\" \"0,*,0,*,*,*,*,*,*,*\")\n+   (set_attr \"mode\" \"SI,SI,SI,SI,SI,SI,DI,TI,SI,SI\")])\n \n ;; Stores and loads of ax to arbitary constant address.\n ;; We fake an second form of instruction to force reload to load address\n@@ -2713,8 +2715,8 @@\n    (set (mem:SF (reg:DI 7)) (match_dup 1))])\n \n (define_insn \"*movsf_1\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f#xr,m,f#xr,r#xf,m,x#rf,x#rf,x#rf,m,!*y,!rm\")\n-\t(match_operand:SF 1 \"general_operand\" \"fm#rx,f#rx,G,rmF#fx,Fr#fx,H,x,xm#rf,x#rf,rm,*y\"))]\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f#xr,m,f#xr,r#xf,m,x#rf,x#rf,x#rf,m,!*y,!rm,!*y\")\n+\t(match_operand:SF 1 \"general_operand\" \"fm#rx,f#rx,G,rmF#fx,Fr#fx,H,x,xm#rf,x#rf,rm,*y,*y\"))]\n   \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n    && (reload_in_progress || reload_completed\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -2766,12 +2768,15 @@\n     case 10:\n       return \"movd\\t{%1, %0|%0, %1}\";\n \n+    case 11:\n+      return \"movq\\t{%1, %0|%0, %1}\";\n+\n     default:\n       abort();\n     }\n }\n-  [(set_attr \"type\" \"fmov,fmov,fmov,imov,imov,sse,sse,sse,sse,mmx,mmx\")\n-   (set_attr \"mode\" \"SF,SF,SF,SI,SI,TI,SF,SF,SF,SI,SI\")])\n+  [(set_attr \"type\" \"fmov,fmov,fmov,imov,imov,sse,sse,sse,sse,mmx,mmx,mmx\")\n+   (set_attr \"mode\" \"SF,SF,SF,SI,SI,TI,SF,SF,SF,SI,SI,DI\")])\n \n (define_insn \"*swapsf\"\n   [(set (match_operand:SF 0 \"register_operand\" \"+f\")"}, {"sha": "f9a45982a5564864f997a9de6298baafbb90670c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a20888976375a90843c4e3625702a71f6f8e50/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a20888976375a90843c4e3625702a71f6f8e50/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e5a20888976375a90843c4e3625702a71f6f8e50", "patch": "@@ -4,6 +4,8 @@\n \n \t* gcc.dg/20020220-2.c: New test.\n \n+\t* g++.dg/opt/mmx1.C: New test.\n+\n 2002-02-20  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* gcc.c-torture/compile/20020110.c: New test."}, {"sha": "e433d554aea5966276ff6527af5862f9565dcef3", "filename": "gcc/testsuite/g++.dg/opt/mmx1.C", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5a20888976375a90843c4e3625702a71f6f8e50/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmmx1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5a20888976375a90843c4e3625702a71f6f8e50/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmmx1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fmmx1.C?ref=e5a20888976375a90843c4e3625702a71f6f8e50", "patch": "@@ -0,0 +1,65 @@\n+// PR optimization/4994\n+// This testcase ICEd because movsi was not supporting direct\n+// mmx -> mmx register moves.\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+// { dg-options \"-fno-exceptions -O2 -mmmx -fPIC\" { target i?86-*-*  } }\n+\n+struct A {\n+  unsigned a0;\n+  bool a1 () { return !--a0; }\n+  void a2 ();\n+};\n+\n+struct B\n+{\n+  B ();\n+  B (const B &);\n+  ~B();\n+  B &operator= (const B &);\n+  B b0 (unsigned long x, int y = 0, int z = 10) const;\n+\n+private:\n+  A *b1;\n+  static A *b2;\n+};\n+\n+inline B::~B()\n+{\n+  if (b1->a1 () && b1 == b2)\n+    b1->a2();\n+}\n+\n+struct C\n+{\n+  C *c0;\n+};\n+\n+struct D\n+{\n+  C *d0;\n+  D ();\n+  D (const D &c0) {}\n+  D &operator++ () {\n+    C *x = d0; C *y = x->c0;\n+    while (x == y->c0)\n+      x = y;\n+    d0 = x;\n+    return *this;\n+  }\n+};\n+\n+B foo (const char *x, const B &y);\n+\n+void bar (void)\n+{\n+  B *y = 0;\n+  B z;\n+  for (unsigned long l = 0; l < 2147483647L * 2UL + 1; l++)\n+    {\n+      z = y->b0 (l);\n+      *y = foo (\"data\", z);\n+    }\n+  D d;\n+  ++d;\n+}"}]}