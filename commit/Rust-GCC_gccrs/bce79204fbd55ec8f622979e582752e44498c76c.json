{"sha": "bce79204fbd55ec8f622979e582752e44498c76c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNlNzkyMDRmYmQ1NWVjOGY2MjI5NzllNTgyNzUyZTQ0NDk4Yzc2Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T08:56:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T08:56:40Z"}, "message": "[multiple changes]\n\n2010-06-17  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.adb: Minor code fix, allow E_Class_Wide_Type for\n\tEquivalent_Type to match documentation.\n\n2010-06-17  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch6.adb, sem_ch7.adb: Minor reformatting.\n\t* sem_ch3.adb, sem_ch5.adb, sem_ch9.adb, sem_ch10.adb, sem_ch12.adb,\n\tsem_ch4.adb, sem_ch8.adb, sem_ch13.adb: Make use of Ekind_In.\n\n2010-06-17  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_res.adb (Set_Slice_Subtype): Always freeze the slice's itype.\n\n2010-06-17  Thomas Quinot  <quinot@adacore.com>\n\n\t* freeze.adb (Freeze_Expression): Short circuit operators are valid\n\tfreeze node insertion points.\n\nFrom-SVN: r160889", "tree": {"sha": "592d50ba4c49a4ad6785726c1fbee9a23c1aba1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/592d50ba4c49a4ad6785726c1fbee9a23c1aba1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bce79204fbd55ec8f622979e582752e44498c76c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce79204fbd55ec8f622979e582752e44498c76c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bce79204fbd55ec8f622979e582752e44498c76c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce79204fbd55ec8f622979e582752e44498c76c/comments", "author": null, "committer": null, "parents": [{"sha": "3428cb9fcb371855b04fd7b796cd98819a31047d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3428cb9fcb371855b04fd7b796cd98819a31047d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3428cb9fcb371855b04fd7b796cd98819a31047d"}], "stats": {"total": 230, "additions": 104, "deletions": 126}, "files": [{"sha": "2a2e29860316692d552a86ab3cf1630ecdace701", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bce79204fbd55ec8f622979e582752e44498c76c", "patch": "@@ -1,3 +1,23 @@\n+2010-06-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.adb: Minor code fix, allow E_Class_Wide_Type for\n+\tEquivalent_Type to match documentation.\n+\n+2010-06-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch6.adb, sem_ch7.adb: Minor reformatting.\n+\t* sem_ch3.adb, sem_ch5.adb, sem_ch9.adb, sem_ch10.adb, sem_ch12.adb,\n+\tsem_ch4.adb, sem_ch8.adb, sem_ch13.adb: Make use of Ekind_In.\n+\n+2010-06-17  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_res.adb (Set_Slice_Subtype): Always freeze the slice's itype.\n+\n+2010-06-17  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* freeze.adb (Freeze_Expression): Short circuit operators are valid\n+\tfreeze node insertion points.\n+\n 2010-06-17  Robert Dewar  <dewar@adacore.com>\n \n \t* switch-c.ads, switch-c.adb, sem_ch13.adb: Minor reformatting."}, {"sha": "7b20078cd2e4dfc97a5c4ca01762497ce3e61b4e", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=bce79204fbd55ec8f622979e582752e44498c76c", "patch": "@@ -975,7 +975,8 @@ package body Einfo is\n    function Equivalent_Type (Id : E) return E is\n    begin\n       pragma Assert\n-        (Ekind_In (Id, E_Class_Wide_Subtype,\n+        (Ekind_In (Id, E_Class_Wide_Type,\n+                       E_Class_Wide_Subtype,\n                        E_Access_Protected_Subprogram_Type,\n                        E_Anonymous_Access_Protected_Subprogram_Type,\n                        E_Access_Subprogram_Type,\n@@ -7872,10 +7873,10 @@ package body Einfo is\n             Write_Str (\"Spec_PPC_List\");\n \n          when E_Record_Type                                =>\n-            Write_Str (\"Underlying record view\");\n+            Write_Str (\"Underlying_Record_View\");\n \n          when E_Variable | E_Constant                      =>\n-            Write_Str (\"Related expression\");\n+            Write_Str (\"Related_Expression\");\n \n          when others                                       =>\n             Write_Str (\"???\");"}, {"sha": "47befcda0fb0bad43f79f0abda62ad602120f298", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=bce79204fbd55ec8f622979e582752e44498c76c", "patch": "@@ -4244,8 +4244,8 @@ package body Freeze is\n       --  exiting from the loop when it is appropriate to insert the freeze\n       --  node before the current node P.\n \n-      --  Also checks som special exceptions to the freezing rules. These cases\n-      --  result in a direct return, bypassing the freeze action.\n+      --  Also checks some special exceptions to the freezing rules. These\n+      --  cases result in a direct return, bypassing the freeze action.\n \n       P := N;\n       loop\n@@ -4422,6 +4422,8 @@ package body Freeze is\n                  N_Entry_Call_Alternative     |\n                  N_Triggering_Alternative     |\n                  N_Abortable_Part             |\n+                 N_And_Then                   |\n+                 N_Or_Else                    |\n                  N_Freeze_Entity              =>\n \n                exit when Is_List_Member (P);"}, {"sha": "ec6dcac1389284c6000f5f93102369e75abebb21", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=bce79204fbd55ec8f622979e582752e44498c76c", "patch": "@@ -5535,9 +5535,7 @@ package body Sem_Ch10 is\n          then\n             return True;\n \n-         elsif Ekind (E) = E_Generic_Function\n-           or else Ekind (E) = E_Generic_Procedure\n-         then\n+         elsif Ekind_In (E, E_Generic_Function, E_Generic_Procedure) then\n             return True;\n \n          elsif Ekind (E) = E_Generic_Package\n@@ -5578,10 +5576,7 @@ package body Sem_Ch10 is\n       then\n          Set_Body_Needed_For_SAL (Unit_Name);\n \n-      elsif Ekind (Unit_Name) = E_Generic_Procedure\n-              or else\n-            Ekind (Unit_Name) = E_Generic_Function\n-      then\n+      elsif Ekind_In (Unit_Name, E_Generic_Procedure, E_Generic_Function) then\n          Set_Body_Needed_For_SAL (Unit_Name);\n \n       elsif Is_Subprogram (Unit_Name)"}, {"sha": "d03ca93832a4c4e4d2e7defee5b1dbfa64370193", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=bce79204fbd55ec8f622979e582752e44498c76c", "patch": "@@ -2414,8 +2414,8 @@ package body Sem_Ch12 is\n                end if;\n \n             elsif Nkind (Prefix (Def)) = N_Selected_Component then\n-               if Ekind (Entity (Selector_Name (Prefix (Def))))\n-                 /= E_Entry_Family\n+               if Ekind (Entity (Selector_Name (Prefix (Def)))) /=\n+                                                          E_Entry_Family\n                then\n                   Error_Msg_N (\"expect valid subprogram name as default\", Def);\n                end if;\n@@ -4078,9 +4078,7 @@ package body Sem_Ch12 is\n       --  Verify that it is a generic subprogram of the right kind, and that\n       --  it does not lead to a circular instantiation.\n \n-      if Ekind (Gen_Unit) /= E_Generic_Procedure\n-        and then Ekind (Gen_Unit) /= E_Generic_Function\n-      then\n+      if not Ekind_In (Gen_Unit, E_Generic_Procedure, E_Generic_Function) then\n          Error_Msg_N (\"expect generic subprogram in instantiation\", Gen_Id);\n \n       elsif In_Open_Scopes (Gen_Unit) then\n@@ -9860,9 +9858,7 @@ package body Sem_Ch12 is\n                               --  then so far the subprograms correspond, so\n                               --  now check that any result types correspond.\n \n-                              if No (Anc_Formal)\n-                                and then No (Act_Formal)\n-                              then\n+                              if No (Anc_Formal) and then No (Act_Formal) then\n                                  Subprograms_Correspond := True;\n \n                                  if Ekind (Act_Subp) = E_Function then\n@@ -11293,9 +11289,9 @@ package body Sem_Ch12 is\n          --  exchanged explicitly now, in order to remain consistent with the\n          --  view of the parent type.\n \n-         if Ekind (Typ) = E_Private_Type\n-           or else Ekind (Typ) = E_Limited_Private_Type\n-           or else Ekind (Typ) = E_Record_Type_With_Private\n+         if Ekind_In (Typ, E_Private_Type,\n+                           E_Limited_Private_Type,\n+                           E_Record_Type_With_Private)\n          then\n             Dep_Elmt := First_Elmt (Private_Dependents (Typ));\n             while Present (Dep_Elmt) loop"}, {"sha": "8d5cb080c911b771da9c94904f619d64455577a8", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=bce79204fbd55ec8f622979e582752e44498c76c", "patch": "@@ -803,9 +803,7 @@ package body Sem_Ch13 is\n             --  it imported.\n \n             if Ignore_Rep_Clauses then\n-               if Ekind (U_Ent) = E_Variable\n-                 or else Ekind (U_Ent) = E_Constant\n-               then\n+               if Ekind_In (U_Ent, E_Variable, E_Constant) then\n                   Record_Rep_Item (U_Ent, N);\n                end if;\n \n@@ -1534,8 +1532,8 @@ package body Sem_Ch13 is\n                   Nam);\n                return;\n \n-            elsif Ekind (U_Ent) /= E_Access_Type\n-              and then Ekind (U_Ent) /= E_General_Access_Type\n+            elsif not\n+              Ekind_In (U_Ent, E_Access_Type, E_General_Access_Type)\n             then\n                Error_Msg_N\n                  (\"storage pool can only be given for access types\", Nam);\n@@ -2402,10 +2400,7 @@ package body Sem_Ch13 is\n             Parent_Last_Bit := UI_From_Int (System_Address_Size - 1);\n             Pcomp := First_Entity (Tagged_Parent);\n             while Present (Pcomp) loop\n-               if Ekind (Pcomp) = E_Discriminant\n-                    or else\n-                  Ekind (Pcomp) = E_Component\n-               then\n+               if Ekind_In (Pcomp, E_Discriminant, E_Component) then\n                   if Component_Bit_Offset (Pcomp) /= No_Uint\n                     and then Known_Static_Esize (Pcomp)\n                   then\n@@ -2820,9 +2815,7 @@ package body Sem_Ch13 is\n             --  This latter test is repeated recursively up the variant tree.\n \n             Main_Component_Loop : while Present (C1_Ent) loop\n-               if Ekind (C1_Ent) /= E_Component\n-                 and then Ekind (C1_Ent) /= E_Discriminant\n-               then\n+               if not Ekind_In (C1_Ent, E_Component, E_Discriminant) then\n                   goto Continue_Main_Component_Loop;\n                end if;\n \n@@ -3208,11 +3201,8 @@ package body Sem_Ch13 is\n \n                --  Otherwise look at the identifier and see if it is OK\n \n-               if Ekind (Ent) = E_Named_Integer\n-                    or else\n-                  Ekind (Ent) = E_Named_Real\n-                    or else\n-                  Is_Type (Ent)\n+               if Ekind_In (Ent, E_Named_Integer, E_Named_Real)\n+                 or else Is_Type (Ent)\n                then\n                   return;\n \n@@ -3884,9 +3874,10 @@ package body Sem_Ch13 is\n                 Out_Present         => Out_P,\n                 Parameter_Type      => T_Ref));\n \n-            Spec := Make_Procedure_Specification (Loc,\n-                      Defining_Unit_Name       => Subp_Id,\n-                      Parameter_Specifications => Formals);\n+            Spec :=\n+              Make_Procedure_Specification (Loc,\n+                Defining_Unit_Name       => Subp_Id,\n+                Parameter_Specifications => Formals);\n          end if;\n \n          return Spec;"}, {"sha": "80e309893c3361b25c20e499eb55913e9bb621a8", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=bce79204fbd55ec8f622979e582752e44498c76c", "patch": "@@ -3285,9 +3285,7 @@ package body Sem_Ch3 is\n            (\"parent of type extension must be a tagged type \", Indic);\n          return;\n \n-      elsif Ekind (Parent_Type) = E_Void\n-        or else Ekind (Parent_Type) = E_Incomplete_Type\n-      then\n+      elsif Ekind_In (Parent_Type, E_Void, E_Incomplete_Type) then\n          Error_Msg_N (\"premature derivation of incomplete type\", Indic);\n          return;\n \n@@ -7548,9 +7546,7 @@ package body Sem_Ch3 is\n       begin\n          D := First_Entity (Derived_Type);\n          while Present (D) loop\n-            if Ekind (D) = E_Discriminant\n-              or else Ekind (D) = E_Component\n-            then\n+            if Ekind_In (D, E_Discriminant, E_Component) then\n                if Is_Itype (Etype (D))\n                   and then Ekind (Etype (D)) = E_Anonymous_Access_Type\n                then\n@@ -8741,9 +8737,7 @@ package body Sem_Ch3 is\n       begin\n          if not Comes_From_Source (E) then\n \n-            if Ekind (E) = E_Task_Type\n-              or else Ekind (E) = E_Protected_Type\n-            then\n+            if Ekind_In (E, E_Task_Type, E_Protected_Type) then\n                --  It may be an anonymous protected type created for a\n                --  single variable. Post error on variable, if present.\n \n@@ -9834,9 +9828,10 @@ package body Sem_Ch3 is\n                          & \" must be in private part\", N);\n \n          elsif Ekind (Current_Scope) = E_Package\n-           and then List_Containing (Parent (Prev))\n-           /= Visible_Declarations\n-             (Specification (Unit_Declaration_Node (Current_Scope)))\n+           and then\n+             List_Containing (Parent (Prev)) /=\n+               Visible_Declarations\n+                 (Specification (Unit_Declaration_Node (Current_Scope)))\n          then\n             Error_Msg_N\n               (\"deferred constant must be declared in visible part\",\n@@ -13363,9 +13358,7 @@ package body Sem_Ch3 is\n \n       --  Check for early use of incomplete or private type\n \n-      if Ekind (Parent_Type) = E_Void\n-        or else Ekind (Parent_Type) = E_Incomplete_Type\n-      then\n+      if Ekind_In (Parent_Type, E_Void, E_Incomplete_Type) then\n          Error_Msg_N (\"premature derivation of incomplete type\", Indic);\n          return;\n \n@@ -14786,8 +14779,8 @@ package body Sem_Ch3 is\n          then\n             null;\n \n-         elsif Ekind (Derived_Base) = E_Private_Type\n-           or else Ekind (Derived_Base) = E_Limited_Private_Type\n+         elsif Ekind_In (Derived_Base, E_Private_Type,\n+                                       E_Limited_Private_Type)\n          then\n             null;\n \n@@ -14955,9 +14948,7 @@ package body Sem_Ch3 is\n    --  Start of processing for Is_Visible_Component\n \n    begin\n-      if Ekind (C) = E_Component\n-        or else Ekind (C) = E_Discriminant\n-      then\n+      if Ekind_In (C, E_Component, E_Discriminant) then\n          Original_Comp := Original_Record_Component (C);\n       end if;\n \n@@ -16492,9 +16483,9 @@ package body Sem_Ch3 is\n          while Present (Priv_Elmt) loop\n             Priv := Node (Priv_Elmt);\n \n-            if Ekind (Priv) = E_Private_Subtype\n-              or else Ekind (Priv) = E_Limited_Private_Subtype\n-              or else Ekind (Priv) = E_Record_Subtype_With_Private\n+            if Ekind_In (Priv, E_Private_Subtype,\n+                               E_Limited_Private_Subtype,\n+                               E_Record_Subtype_With_Private)\n             then\n                Full := Make_Defining_Identifier (Sloc (Priv), Chars (Priv));\n                Set_Is_Itype (Full);\n@@ -16642,10 +16633,7 @@ package body Sem_Ch3 is\n \n                Prim := Next_Entity (Full_T);\n                while Present (Prim) and then Prim /= Priv_T loop\n-                  if Ekind (Prim) = E_Procedure\n-                       or else\n-                     Ekind (Prim) = E_Function\n-                  then\n+                  if Ekind_In (Prim, E_Procedure, E_Function) then\n                      Disp_Typ := Find_Dispatching_Type (Prim);\n \n                      if Disp_Typ = Full_T"}, {"sha": "6afb4a115297ebdb7a1f09fa88d1fc2c86cb2645", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=bce79204fbd55ec8f622979e582752e44498c76c", "patch": "@@ -818,10 +818,10 @@ package body Sem_Ch4 is\n          elsif Nkind (Nam) = N_Selected_Component then\n             Nam_Ent := Entity (Selector_Name (Nam));\n \n-            if Ekind (Nam_Ent) /= E_Entry\n-              and then Ekind (Nam_Ent) /= E_Entry_Family\n-              and then Ekind (Nam_Ent) /= E_Function\n-              and then Ekind (Nam_Ent) /= E_Procedure\n+            if not Ekind_In (Nam_Ent, E_Entry,\n+                                      E_Entry_Family,\n+                                      E_Function,\n+                                      E_Procedure)\n             then\n                Error_Msg_N (\"name in call is not a callable entity\", Nam);\n                Set_Etype (N, Any_Type);\n@@ -1174,7 +1174,6 @@ package body Sem_Ch4 is\n \n       if Present (Op_Id) then\n          if Ekind (Op_Id) = E_Operator then\n-\n             LT := Base_Type (Etype (L));\n             RT := Base_Type (Etype (R));\n \n@@ -1944,7 +1943,8 @@ package body Sem_Ch4 is\n          elsif Ekind (Etype (P)) = E_Subprogram_Type\n            or else (Is_Access_Type (Etype (P))\n                       and then\n-                    Ekind (Designated_Type (Etype (P))) = E_Subprogram_Type)\n+                        Ekind (Designated_Type (Etype (P))) =\n+                                                   E_Subprogram_Type)\n          then\n             --  Call to access_to-subprogram with possible implicit dereference\n \n@@ -1969,7 +1969,7 @@ package body Sem_Ch4 is\n          if Ekind (P_T) = E_Subprogram_Type\n            or else (Is_Access_Type (P_T)\n                      and then\n-                    Ekind (Designated_Type (P_T)) = E_Subprogram_Type)\n+                       Ekind (Designated_Type (P_T)) = E_Subprogram_Type)\n          then\n             Process_Function_Call;\n \n@@ -3580,10 +3580,8 @@ package body Sem_Ch4 is\n                      Has_Candidate := True;\n                   end if;\n \n-               elsif Ekind (Comp) = E_Discriminant\n-                 or else Ekind (Comp) = E_Entry_Family\n-                 or else (In_Scope\n-                   and then Is_Entity_Name (Name))\n+               elsif Ekind_In (Comp, E_Discriminant, E_Entry_Family)\n+                 or else (In_Scope and then Is_Entity_Name (Name))\n                then\n                   Set_Entity_With_Style_Check (Sel, Comp);\n                   Generate_Reference (Comp, Sel);\n@@ -4502,9 +4500,7 @@ package body Sem_Ch4 is\n       if Nkind (N) = N_Function_Call then\n          Get_First_Interp (Nam, X, It);\n          while Present (It.Nam) loop\n-            if Ekind (It.Nam) = E_Function\n-              or else Ekind (It.Nam) = E_Operator\n-            then\n+            if Ekind_In (It.Nam, E_Function, E_Operator) then\n                return;\n             else\n                Get_Next_Interp (X, It);\n@@ -6675,9 +6671,8 @@ package body Sem_Ch4 is\n             if Is_Derived_Type (T) then\n                return Primitive_Operations (T);\n \n-            elsif Ekind (Scope (T)) = E_Procedure\n-              or else Ekind (Scope (T)) = E_Function\n-            then\n+            elsif Ekind_In (Scope (T), E_Procedure, E_Function) then\n+\n                --  Scan the list of generic formals to find subprograms\n                --  that may have a first controlling formal of the type.\n "}, {"sha": "1ad940071ffb5738f87071311501ba10421af65d", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=bce79204fbd55ec8f622979e582752e44498c76c", "patch": "@@ -998,11 +998,9 @@ package body Sem_Ch5 is\n          if Is_Entity_Name (Exp) then\n             Ent := Entity (Exp);\n \n-            if Ekind (Ent) = E_Variable\n-                 or else\n-               Ekind (Ent) = E_In_Out_Parameter\n-                 or else\n-               Ekind (Ent) = E_Out_Parameter\n+            if Ekind_In (Ent, E_Variable,\n+                              E_In_Out_Parameter,\n+                              E_Out_Parameter)\n             then\n                if List_Length (Choices) = 1\n                  and then Nkind (First (Choices)) in N_Subexpr"}, {"sha": "ba3967a75ea10bd15027d2c2c70f20dfb2cf10d4", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=bce79204fbd55ec8f622979e582752e44498c76c", "patch": "@@ -3125,6 +3125,7 @@ package body Sem_Ch6 is\n               or else Is_Child_Unit (S)\n             then\n                return False;\n+\n             elsif Ekind (S) = E_Package\n               and then Has_Forward_Instantiation (S)\n             then\n@@ -6513,7 +6514,6 @@ package body Sem_Ch6 is\n          --  instance of) a generic type.\n \n          Formal := First_Formal (Prev_E);\n-\n          while Present (Formal) loop\n             F_Typ := Base_Type (Etype (Formal));\n "}, {"sha": "11736d561095ae2937343fe47607fb545e47829d", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=bce79204fbd55ec8f622979e582752e44498c76c", "patch": "@@ -2074,7 +2074,7 @@ package body Sem_Ch7 is\n          --  but the formals are private and remain so.\n \n          if Ekind (Id) = E_Function\n-           and then  Is_Operator_Symbol_Name (Chars (Id))\n+           and then Is_Operator_Symbol_Name (Chars (Id))\n            and then not Is_Hidden (Id)\n            and then not Error_Posted (Id)\n          then"}, {"sha": "b9527554a826130edc57808e9bb3fcd3e369ccca", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=bce79204fbd55ec8f622979e582752e44498c76c", "patch": "@@ -1315,7 +1315,8 @@ package body Sem_Ch8 is\n    begin\n       if not Is_Overloaded (P) then\n          if Ekind (Etype (Nam)) /= E_Subprogram_Type\n-           or else not Type_Conformant (Etype (Nam), New_S) then\n+           or else not Type_Conformant (Etype (Nam), New_S)\n+         then\n             Error_Msg_N (\"designated type does not match specification\", P);\n          else\n             Resolve (P);\n@@ -1330,8 +1331,8 @@ package body Sem_Ch8 is\n          while Present (It.Nam) loop\n \n             if Ekind (It.Nam) = E_Subprogram_Type\n-              and then Type_Conformant (It.Nam, New_S) then\n-\n+              and then Type_Conformant (It.Nam, New_S)\n+            then\n                if Typ /= Any_Id then\n                   Error_Msg_N (\"ambiguous renaming\", P);\n                   return;\n@@ -2149,9 +2150,7 @@ package body Sem_Ch8 is\n          --  Guard against previous errors, and omit renamings of predefined\n          --  operators.\n \n-         elsif Ekind (Old_S) /= E_Function\n-           and then Ekind (Old_S) /= E_Procedure\n-         then\n+         elsif not Ekind_In (Old_S, E_Function, E_Procedure) then\n             null;\n \n          elsif Requires_Overriding (Old_S)\n@@ -4755,9 +4754,9 @@ package body Sem_Ch8 is\n \n                         exit when S = Standard_Standard;\n \n-                        if Ekind (S) = E_Function\n-                          or else Ekind (S) = E_Package\n-                          or else Ekind (S) = E_Procedure\n+                        if Ekind_In (S, E_Function,\n+                                        E_Package,\n+                                        E_Procedure)\n                         then\n                            P := Generic_Parent (Specification\n                                   (Unit_Declaration_Node (S)));\n@@ -6223,9 +6222,7 @@ package body Sem_Ch8 is\n             Next_Formal (Old_F);\n          end loop;\n \n-         if Ekind (Old_S) = E_Function\n-           or else Ekind (Old_S) = E_Enumeration_Literal\n-         then\n+         if Ekind_In (Old_S, E_Function, E_Enumeration_Literal) then\n             Set_Etype (New_S, Etype (Old_S));\n          end if;\n       end if;"}, {"sha": "bcd42d12501a3d65061390a2bd5ef14467600841", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=bce79204fbd55ec8f622979e582752e44498c76c", "patch": "@@ -1174,9 +1174,7 @@ package body Sem_Ch9 is\n \n       E := First_Entity (Current_Scope);\n       while Present (E) loop\n-         if Ekind (E) = E_Function\n-           or else Ekind (E) = E_Procedure\n-         then\n+         if Ekind_In (E, E_Function, E_Procedure) then\n             Set_Convention (E, Convention_Protected);\n \n          elsif Is_Task_Type (Etype (E))\n@@ -1343,9 +1341,7 @@ package body Sem_Ch9 is\n          Enclosing := Scope_Stack.Table (J).Entity;\n          exit when Is_Entry (Enclosing);\n \n-         if Ekind (Enclosing) /= E_Block\n-           and then Ekind (Enclosing) /= E_Loop\n-         then\n+         if not Ekind_In (Enclosing, E_Block, E_Loop) then\n             Error_Msg_N (\"requeue must appear within accept or entry body\", N);\n             return;\n          end if;\n@@ -1576,10 +1572,7 @@ package body Sem_Ch9 is\n                   --  perform an unconditional goto so that any further\n                   --  references will not occur anyway.\n \n-                  if Ekind (Ent) = E_Out_Parameter\n-                       or else\n-                     Ekind (Ent) = E_In_Out_Parameter\n-                  then\n+                  if Ekind_In (Ent, E_Out_Parameter, E_In_Out_Parameter) then\n                      Set_Never_Set_In_Source (Ent, False);\n                      Set_Is_True_Constant    (Ent, False);\n                   end if;"}, {"sha": "eba43ef6c89ff716ebea213d53e565f646ae47fe", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce79204fbd55ec8f622979e582752e44498c76c/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=bce79204fbd55ec8f622979e582752e44498c76c", "patch": "@@ -8958,6 +8958,15 @@ package body Sem_Res is\n          Set_Etype        (Index_Subtype, Index_Type);\n          Set_Size_Info    (Index_Subtype, Index_Type);\n          Set_RM_Size      (Index_Subtype, RM_Size (Index_Type));\n+\n+         --  Now replace the discrete range in the slice with a reference to\n+         --  its index subtype. This ensures that further expansion (e.g\n+         --  while rewriting a slice assignment into a FOR loop) does not\n+         --  attempt to remove side effects on the bounds again (which would\n+         --  cause the bounds in the index subtype definition to refer to\n+         --  temporaries before they are defined).\n+\n+         Set_Discrete_Range (N, New_Copy_Tree (Drange));\n       end if;\n \n       Slice_Subtype := Create_Itype (E_Array_Subtype, N);\n@@ -8970,24 +8979,17 @@ package body Sem_Res is\n       Set_Etype          (Slice_Subtype, Base_Type (Etype (N)));\n       Set_Is_Constrained (Slice_Subtype, True);\n \n-      Check_Compile_Time_Size (Slice_Subtype);\n-\n       --  The Etype of the existing Slice node is reset to this slice subtype.\n       --  Its bounds are obtained from its first index.\n \n       Set_Etype (N, Slice_Subtype);\n \n       --  In the packed case, this must be immediately frozen\n \n-      --  Couldn't we always freeze here??? and if we did, then the above\n-      --  call to Check_Compile_Time_Size could be eliminated, which would\n-      --  be nice, because then that routine could be made private to Freeze.\n+      --  Always freeze subtype. This ensures that the slice subtype is\n+      --  elaborated in the scope of the expression.\n \n-      --  Why the test for In_Spec_Expression here ???\n-\n-      if Is_Packed (Slice_Subtype) and not In_Spec_Expression then\n-         Freeze_Itype (Slice_Subtype, N);\n-      end if;\n+      Freeze_Itype (Slice_Subtype, N);\n \n    end Set_Slice_Subtype;\n "}]}