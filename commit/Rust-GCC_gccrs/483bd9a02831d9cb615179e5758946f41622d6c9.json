{"sha": "483bd9a02831d9cb615179e5758946f41622d6c9", "node_id": "C_kwDOANBUbNoAKDQ4M2JkOWEwMjgzMWQ5Y2I2MTUxNzllNTc1ODk0NmY0MTYyMmQ2Yzk", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-07-04T10:14:03Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-07-04T10:20:25Z"}, "message": "Use default lower bound for vector types in debug info\n\nVector types are represented as array types with DW_AT_GNU_vector attribute\nin the debug info and a range [0 .. TYPE_VECTOR_SUBPARTS - 1].  Now that's\nobviously skewed toward the C family of languages, therefore the attached\npatch changes the lower bound to the default for the language of the CU.\n\ngcc/\n\t* dwarf2out.cc (gen_array_type_die): Use the default lower bound of\n\tthe language for vector types.", "tree": {"sha": "999031b25332e5ac06d902ab0eac05375dbd416b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/999031b25332e5ac06d902ab0eac05375dbd416b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/483bd9a02831d9cb615179e5758946f41622d6c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483bd9a02831d9cb615179e5758946f41622d6c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/483bd9a02831d9cb615179e5758946f41622d6c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483bd9a02831d9cb615179e5758946f41622d6c9/comments", "author": null, "committer": null, "parents": [{"sha": "a7ccdfa17e5c45c32828fbeb3642ccdb10caa141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7ccdfa17e5c45c32828fbeb3642ccdb10caa141", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7ccdfa17e5c45c32828fbeb3642ccdb10caa141"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "e3920c898f5f7a1ace25cd44ed4cc30025fa35de", "filename": "gcc/dwarf2out.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/483bd9a02831d9cb615179e5758946f41622d6c9/gcc%2Fdwarf2out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/483bd9a02831d9cb615179e5758946f41622d6c9/gcc%2Fdwarf2out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.cc?ref=483bd9a02831d9cb615179e5758946f41622d6c9", "patch": "@@ -22539,11 +22539,14 @@ gen_array_type_die (tree type, dw_die_ref context_die)\n \n   if (TREE_CODE (type) == VECTOR_TYPE)\n     {\n-      /* For VECTOR_TYPEs we use an array die with appropriate bounds.  */\n+      /* For VECTOR_TYPEs we use an array DIE with appropriate bounds.  */\n       dw_die_ref subrange_die = new_die (DW_TAG_subrange_type, array_die, NULL);\n-      add_bound_info (subrange_die, DW_AT_lower_bound, size_zero_node, NULL);\n+      int lb = lower_bound_default ();\n+      if (lb == -1)\n+\tlb = 0;\n+      add_bound_info (subrange_die, DW_AT_lower_bound, size_int (lb), NULL);\n       add_bound_info (subrange_die, DW_AT_upper_bound,\n-\t\t      size_int (TYPE_VECTOR_SUBPARTS (type) - 1), NULL);\n+\t\t      size_int (lb + TYPE_VECTOR_SUBPARTS (type) - 1), NULL);\n     }\n   else\n     add_subscript_info (array_die, type, collapse_nested_arrays);"}]}