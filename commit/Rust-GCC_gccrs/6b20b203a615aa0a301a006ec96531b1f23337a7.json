{"sha": "6b20b203a615aa0a301a006ec96531b1f23337a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIyMGIyMDNhNjE1YWEwYTMwMWEwMDZlYzk2NTMxYjFmMjMzMzdhNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-12-20T04:44:20Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-12-20T04:44:20Z"}, "message": "re PR c++/24915 (Overload errors generated without template instantiations for class member templates)\n\n\tPR c++/24915\n\t* class.c (add_method): Do not treat templates as identical unless\n\ttheir return types are the same.\n\tPR c++/24915\n\t* g++.dg/template/overload8.C: New test.\n\nFrom-SVN: r108837", "tree": {"sha": "dbb215ef5d575a86d0e925759b871bf32dec3234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbb215ef5d575a86d0e925759b871bf32dec3234"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b20b203a615aa0a301a006ec96531b1f23337a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b20b203a615aa0a301a006ec96531b1f23337a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b20b203a615aa0a301a006ec96531b1f23337a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b20b203a615aa0a301a006ec96531b1f23337a7/comments", "author": null, "committer": null, "parents": [{"sha": "c2c22cd6345a8e6f58702c5e406fc78cd33ef959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2c22cd6345a8e6f58702c5e406fc78cd33ef959", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2c22cd6345a8e6f58702c5e406fc78cd33ef959"}], "stats": {"total": 106, "additions": 95, "deletions": 11}, "files": [{"sha": "3c79990b6ce13d7607c28c3de5f78714f4134e9d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20b203a615aa0a301a006ec96531b1f23337a7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20b203a615aa0a301a006ec96531b1f23337a7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6b20b203a615aa0a301a006ec96531b1f23337a7", "patch": "@@ -1,3 +1,69 @@\n+2005-12-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/24915\n+\t* class.c (add_method): Do not treat templates as identical unless\n+\ttheir return types are the same.\n+\t\n+2005-12-12  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/25300\n+\t* tree.c (build_qualified_name): Return error_mark_node for\n+\terroneous input.\n+\n+2005-12-10  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/25337 \n+\t* pt.c (tsubst_copy_and_build): Permit dependent types for the\n+\tobject in a class member access expression.\n+\n+2005-12-10  Terry Laurenzo  <tlaurenzo@gmail.com>\n+\n+\tPR java/9861\n+\t* mangle.c (write_bare_function_type): Mangle return type for\n+\tmethods of Java classes\n+\n+2005-12-08  Th\ufffdodore Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n+\t\n+\t* call.c (build_conditional_expr): Print types in error messages.\n+\t\n+2005-12-07  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* expr.c (cxx_expand_expr): Call gcc_unreachable instead of abort.\n+\n+2005-12-07  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* cp-gimplify.c (gimplify_cp_loop): Use fold_build3.\n+\n+2005-12-07  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n+\n+\t* Make-lang.in (c++.all.build, c++.install-normal): Remove.\n+\n+2005-12-07  Rafael \ufffdvila de Esp\ufffdndola  <rafael.espindola@gmail.com>\n+\n+\t* Make-lang.in: Remove all dependencies on s-gtype.\n+\n+2005-12-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+       PR C++/24138\n+        * decl.c (reshape_init_array_1): Handle max_index of -1.\n+\n+2005-12-06  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* typeck.c (build_binary_op): Issue warning if either operand of a\n+\tcomparison operator is a string literal, except for testing equality\n+\tor inequality against NULL.\n+\n+2005-12-06  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR c++/25263\n+\t* decl.c (compute_array_index_type): Check that itype is an\n+\tINTEGER_CST node before testing/clearing TREE_OVERFLOW.\n+\n+2005-12-05  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* ptree.c (cxx_print_decl): Update to check for decl_common\n+\tstructure.\n+\n 2005-12-02  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/24173"}, {"sha": "2ccc724247b0c9811b3556708a18adc942b81227", "filename": "gcc/cp/class.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20b203a615aa0a301a006ec96531b1f23337a7/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20b203a615aa0a301a006ec96531b1f23337a7/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=6b20b203a615aa0a301a006ec96531b1f23337a7", "patch": "@@ -982,9 +982,10 @@ add_method (tree type, tree method, tree using_decl)\n       for (fns = current_fns; fns; fns = OVL_NEXT (fns))\n \t{\n \t  tree fn = OVL_CURRENT (fns);\n+\t  tree fn_type;\n+\t  tree method_type;\n \t  tree parms1;\n \t  tree parms2;\n-\t  bool same = 1;\n \n \t  if (TREE_CODE (fn) != TREE_CODE (method))\n \t    continue;\n@@ -999,8 +1000,10 @@ add_method (tree type, tree method, tree using_decl)\n \t     functions in the derived class override and/or hide member\n \t     functions with the same name and parameter types in a base\n \t     class (rather than conflicting).  */\n-\t  parms1 = TYPE_ARG_TYPES (TREE_TYPE (fn));\n-\t  parms2 = TYPE_ARG_TYPES (TREE_TYPE (method));\n+\t  fn_type = TREE_TYPE (fn);\n+\t  method_type = TREE_TYPE (method);\n+\t  parms1 = TYPE_ARG_TYPES (fn_type);\n+\t  parms2 = TYPE_ARG_TYPES (method_type);\n \n \t  /* Compare the quals on the 'this' parm.  Don't compare\n \t     the whole types, as used functions are treated as\n@@ -1009,23 +1012,26 @@ add_method (tree type, tree method, tree using_decl)\n \t      && ! DECL_STATIC_FUNCTION_P (method)\n \t      && (TYPE_QUALS (TREE_TYPE (TREE_VALUE (parms1)))\n \t\t  != TYPE_QUALS (TREE_TYPE (TREE_VALUE (parms2)))))\n-\t    same = 0;\n+\t    continue;\n \n-\t  /* For templates, the template parms must be identical.  */\n+\t  /* For templates, the return type and template parameters\n+\t     must be identical.  */\n \t  if (TREE_CODE (fn) == TEMPLATE_DECL\n-\t      && !comp_template_parms (DECL_TEMPLATE_PARMS (fn),\n-\t\t\t\t       DECL_TEMPLATE_PARMS (method)))\n-\t    same = 0;\n+\t      && (!same_type_p (TREE_TYPE (fn_type),\n+\t\t\t\tTREE_TYPE (method_type))\n+\t\t  || !comp_template_parms (DECL_TEMPLATE_PARMS (fn),\n+\t\t\t\t\t   DECL_TEMPLATE_PARMS (method))))\n+\t    continue;\n \n \t  if (! DECL_STATIC_FUNCTION_P (fn))\n \t    parms1 = TREE_CHAIN (parms1);\n \t  if (! DECL_STATIC_FUNCTION_P (method))\n \t    parms2 = TREE_CHAIN (parms2);\n \n-\t  if (same && compparms (parms1, parms2)\n+\t  if (compparms (parms1, parms2)\n \t      && (!DECL_CONV_FN_P (fn)\n-\t\t  || same_type_p (TREE_TYPE (TREE_TYPE (fn)),\n-\t\t\t\t  TREE_TYPE (TREE_TYPE (method)))))\n+\t\t  || same_type_p (TREE_TYPE (fn_type),\n+\t\t\t\t  TREE_TYPE (method_type))))\n \t    {\n \t      if (using_decl)\n \t\t{"}, {"sha": "e87eb1d688a2b46b49f1106b38f6dd8036d82ba7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20b203a615aa0a301a006ec96531b1f23337a7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20b203a615aa0a301a006ec96531b1f23337a7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b20b203a615aa0a301a006ec96531b1f23337a7", "patch": "@@ -1,3 +1,8 @@\n+2005-12-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/24915\n+\t* g++.dg/template/overload8.C: New test.\n+\n 2005-12-19  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n \t* gcc.c-torture/compile/pr25483 : New test."}, {"sha": "cc6a05b7041cab9e9e4a912b3151c713a550d398", "filename": "gcc/testsuite/g++.dg/template/overload8.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b20b203a615aa0a301a006ec96531b1f23337a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b20b203a615aa0a301a006ec96531b1f23337a7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload8.C?ref=6b20b203a615aa0a301a006ec96531b1f23337a7", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/24915\n+\n+struct A\n+{\n+  template<int> void foo() {}\n+  template<int> int foo() {}\n+};"}]}