{"sha": "7dc2f5f1236a0f1544c756c46a5cd06491e96934", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RjMmY1ZjEyMzZhMGYxNTQ0Yzc1NmM0NmE1Y2QwNjQ5MWU5NjkzNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-10-12T07:08:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-10-12T07:08:49Z"}, "message": "re PR middle-end/77920 (186.crafty doesn't compile)\n\n2016-10-12  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/77920\n\t* tree-vrp.c (simplify_div_or_mod_using_ranges): Simplify.\n\t(simplify_min_or_max_using_ranges): Pass in gsi and use it.\n\t(simplify_abs_using_ranges): Likewise.\n\t(simplify_conversion_using_ranges): Likewise.\n\t(simplify_stmt_using_ranges): Adjust.\n\n\t* gcc.dg/torture/pr77920.c: New testcase.\n\nFrom-SVN: r241020", "tree": {"sha": "4e8e8161e311f5f7a1df12b3e91addf2c2f04eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e8e8161e311f5f7a1df12b3e91addf2c2f04eb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dc2f5f1236a0f1544c756c46a5cd06491e96934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc2f5f1236a0f1544c756c46a5cd06491e96934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc2f5f1236a0f1544c756c46a5cd06491e96934", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc2f5f1236a0f1544c756c46a5cd06491e96934/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a8b97cb8af6e8632e1674ac82611b4d45c17b53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8b97cb8af6e8632e1674ac82611b4d45c17b53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a8b97cb8af6e8632e1674ac82611b4d45c17b53"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "92a45d90cdc55657b85fe731809de3d97d25fdaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc2f5f1236a0f1544c756c46a5cd06491e96934/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc2f5f1236a0f1544c756c46a5cd06491e96934/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7dc2f5f1236a0f1544c756c46a5cd06491e96934", "patch": "@@ -1,3 +1,12 @@\n+2016-10-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/77920\n+\t* tree-vrp.c (simplify_div_or_mod_using_ranges): Simplify.\n+\t(simplify_min_or_max_using_ranges): Pass in gsi and use it.\n+\t(simplify_abs_using_ranges): Likewise.\n+\t(simplify_conversion_using_ranges): Likewise.\n+\t(simplify_stmt_using_ranges): Adjust.\n+\n 2016-10-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/77929"}, {"sha": "1ebd9bd01d9654596aac4925e31852ca3d662c79", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc2f5f1236a0f1544c756c46a5cd06491e96934/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc2f5f1236a0f1544c756c46a5cd06491e96934/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7dc2f5f1236a0f1544c756c46a5cd06491e96934", "patch": "@@ -1,3 +1,8 @@\n+2016-10-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/77920\n+\t* gcc.dg/torture/pr77920.c: New testcase.\n+\n 2016-10-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/77929"}, {"sha": "66ad5fc1248415a00d9d5f128d2e3b97db1ab1c5", "filename": "gcc/testsuite/gcc.dg/torture/pr77920.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc2f5f1236a0f1544c756c46a5cd06491e96934/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77920.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc2f5f1236a0f1544c756c46a5cd06491e96934/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77920.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr77920.c?ref=7dc2f5f1236a0f1544c756c46a5cd06491e96934", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+\n+int a, b;\n+void fn1()\n+{\n+  int c;\n+  for (; b < 0;)\n+    {\n+\t{\n+\t  int d = 56, e = (b >> 3) - (d >> 3) > 0 ? (b >> 3) - (d >> 3)\n+\t      : -((b >> 3) - (d >> 3));\n+\t  c = 1 >= e;\n+\t}\n+      if (c)\n+\ta = 0;\n+    }\n+}"}, {"sha": "e46f7fcf085cc3caec9744c0e84be2e3b70c163b", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dc2f5f1236a0f1544c756c46a5cd06491e96934/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dc2f5f1236a0f1544c756c46a5cd06491e96934/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=7dc2f5f1236a0f1544c756c46a5cd06491e96934", "patch": "@@ -9093,9 +9093,7 @@ simplify_div_or_mod_using_ranges (gimple_stmt_iterator *gsi, gimple *stmt)\n \t{\n \t  /* If op0 already has the range op0 % op1 has,\n \t     then TRUNC_MOD_EXPR won't change anything.  */\n-\t  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n-\t  gimple_assign_set_rhs_from_tree (&gsi, op0);\n-\t  update_stmt (stmt);\n+\t  gimple_assign_set_rhs_from_tree (gsi, op0);\n \t  return true;\n \t}\n     }\n@@ -9171,7 +9169,7 @@ simplify_div_or_mod_using_ranges (gimple_stmt_iterator *gsi, gimple *stmt)\n    disjoint.   Return true if we do simplify.  */\n \n static bool\n-simplify_min_or_max_using_ranges (gimple *stmt)\n+simplify_min_or_max_using_ranges (gimple_stmt_iterator *gsi, gimple *stmt)\n {\n   tree op0 = gimple_assign_rhs1 (stmt);\n   tree op1 = gimple_assign_rhs2 (stmt);\n@@ -9206,10 +9204,7 @@ simplify_min_or_max_using_ranges (gimple *stmt)\n \t VAL == FALSE -> OP0 > or >= op1.  */\n       tree res = ((gimple_assign_rhs_code (stmt) == MAX_EXPR)\n \t\t  == integer_zerop (val)) ? op0 : op1;\n-      gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n-      gimple_assign_set_rhs_from_tree (&gsi, res);\n-      update_stmt (stmt);\n-      fold_stmt (&gsi, follow_single_use_edges);\n+      gimple_assign_set_rhs_from_tree (gsi, res);\n       return true;\n     }\n \n@@ -9221,7 +9216,7 @@ simplify_min_or_max_using_ranges (gimple *stmt)\n    ABS_EXPR into a NEGATE_EXPR.  */\n \n static bool\n-simplify_abs_using_ranges (gimple *stmt)\n+simplify_abs_using_ranges (gimple_stmt_iterator *gsi, gimple *stmt)\n {\n   tree op = gimple_assign_rhs1 (stmt);\n   value_range *vr = get_value_range (op);\n@@ -9262,8 +9257,7 @@ simplify_abs_using_ranges (gimple *stmt)\n \t  else\n \t    gimple_assign_set_rhs_code (stmt, NEGATE_EXPR);\n \t  update_stmt (stmt);\n-\t  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n-\t  fold_stmt (&gsi, follow_single_use_edges);\n+\t  fold_stmt (gsi, follow_single_use_edges);\n \t  return true;\n \t}\n     }\n@@ -9844,7 +9838,7 @@ simplify_switch_using_ranges (gswitch *stmt)\n /* Simplify an integral conversion from an SSA name in STMT.  */\n \n static bool\n-simplify_conversion_using_ranges (gimple *stmt)\n+simplify_conversion_using_ranges (gimple_stmt_iterator *gsi, gimple *stmt)\n {\n   tree innerop, middleop, finaltype;\n   gimple *def_stmt;\n@@ -9914,8 +9908,7 @@ simplify_conversion_using_ranges (gimple *stmt)\n     return false;\n \n   gimple_assign_set_rhs1 (stmt, innerop);\n-  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n-  fold_stmt (&gsi, follow_single_use_edges);\n+  fold_stmt (gsi, follow_single_use_edges);\n   return true;\n }\n \n@@ -10218,7 +10211,7 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n \tcase ABS_EXPR:\n \t  if (TREE_CODE (rhs1) == SSA_NAME\n \t      && INTEGRAL_TYPE_P (TREE_TYPE (rhs1)))\n-\t    return simplify_abs_using_ranges (stmt);\n+\t    return simplify_abs_using_ranges (gsi, stmt);\n \t  break;\n \n \tcase BIT_AND_EXPR:\n@@ -10233,7 +10226,7 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n \tCASE_CONVERT:\n \t  if (TREE_CODE (rhs1) == SSA_NAME\n \t      && INTEGRAL_TYPE_P (TREE_TYPE (rhs1)))\n-\t    return simplify_conversion_using_ranges (stmt);\n+\t    return simplify_conversion_using_ranges (gsi, stmt);\n \t  break;\n \n \tcase FLOAT_EXPR:\n@@ -10244,7 +10237,7 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n \n \tcase MIN_EXPR:\n \tcase MAX_EXPR:\n-\t  return simplify_min_or_max_using_ranges (stmt);\n+\t  return simplify_min_or_max_using_ranges (gsi, stmt);\n \n \tdefault:\n \t  break;"}]}