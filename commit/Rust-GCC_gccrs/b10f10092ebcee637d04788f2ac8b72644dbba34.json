{"sha": "b10f10092ebcee637d04788f2ac8b72644dbba34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEwZjEwMDkyZWJjZWU2MzdkMDQ3ODhmMmFjOGI3MjY0NGRiYmEzNA==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2017-06-21T15:58:12Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2017-06-21T15:58:12Z"}, "message": "aarch64-cost-tables.h (thunderx_extra_costs): Increment Arith_shift and Arith_shift_reg by 1.\n\n2017-06-21  Andrew Pinski  <apinski@cavium.com>\n\n        * config/aarch64/aarch64-cost-tables.h (thunderx_extra_costs):\n        Increment Arith_shift and Arith_shift_reg by 1.\n        * config/aarch64/aarch64-tuning-flags.def (cheap_shift_extend):\n        New tuning flag.\n        * config/aarch64/aarch64.c (thunderx_tunings): Enable\n        AARCH64_EXTRA_TUNE_CHEAP_SHIFT_EXTEND.\n        (aarch64_strip_extend): Add new argument and test for it.\n        (aarch64_cheap_mult_shift_p): New function.\n        (aarch64_rtx_mult_cost): Call aarch64_cheap_mult_shift_p and don't\n        add a cost if it is true.\n        Update calls to aarch64_strip_extend.\n        (aarch64_rtx_costs): Update calls to aarch64_strip_extend.\n\nFrom-SVN: r249459", "tree": {"sha": "765bf734e79111a8af47e6686f0706381e2f2bab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/765bf734e79111a8af47e6686f0706381e2f2bab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b10f10092ebcee637d04788f2ac8b72644dbba34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10f10092ebcee637d04788f2ac8b72644dbba34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b10f10092ebcee637d04788f2ac8b72644dbba34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10f10092ebcee637d04788f2ac8b72644dbba34/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1e247d0181d3b055b0d9435a7f65e88792e7812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1e247d0181d3b055b0d9435a7f65e88792e7812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1e247d0181d3b055b0d9435a7f65e88792e7812"}], "stats": {"total": 85, "additions": 73, "deletions": 12}, "files": [{"sha": "ea97b0badff28cf4af7506053322c8432b8c43f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10f10092ebcee637d04788f2ac8b72644dbba34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10f10092ebcee637d04788f2ac8b72644dbba34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b10f10092ebcee637d04788f2ac8b72644dbba34", "patch": "@@ -1,3 +1,18 @@\n+2017-06-21  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* config/aarch64/aarch64-cost-tables.h (thunderx_extra_costs):\n+\tIncrement Arith_shift and Arith_shift_reg by 1.\n+\t* config/aarch64/aarch64-tuning-flags.def (cheap_shift_extend):\n+\tNew tuning flag.\n+\t* config/aarch64/aarch64.c (thunderx_tunings): Enable\n+\tAARCH64_EXTRA_TUNE_CHEAP_SHIFT_EXTEND.\n+\t(aarch64_strip_extend): Add new argument and test for it.\n+\t(aarch64_cheap_mult_shift_p): New function.\n+\t(aarch64_rtx_mult_cost): Call aarch64_cheap_mult_shift_p and don't\n+\tadd a cost if it is true.\n+\tUpdate calls to aarch64_strip_extend.\n+\t(aarch64_rtx_costs): Update calls to aarch64_strip_extend.\n+\n 2017-06-21  Andrew Pinski  <apinski@cavium.com>\n \n \t* config/aarch64/aarch64-cores.def (thunderxt88p1): Use thunderxt88"}, {"sha": "5d149bd09af7bbd387eb67b03c93a14339ef21f0", "filename": "gcc/config/aarch64/aarch64-cost-tables.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10f10092ebcee637d04788f2ac8b72644dbba34/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10f10092ebcee637d04788f2ac8b72644dbba34/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h?ref=b10f10092ebcee637d04788f2ac8b72644dbba34", "patch": "@@ -136,8 +136,8 @@ const struct cpu_cost_table thunderx_extra_costs =\n     0,\t\t\t/* Logical.  */\n     0,\t\t\t/* Shift.  */\n     0,\t\t\t/* Shift_reg.  */\n-    COSTS_N_INSNS (1),\t/* Arith_shift.  */\n-    COSTS_N_INSNS (1),\t/* Arith_shift_reg.  */\n+    COSTS_N_INSNS (1)+1,\t/* Arith_shift.  */\n+    COSTS_N_INSNS (1)+1,\t/* Arith_shift_reg.  */\n     COSTS_N_INSNS (1),\t/* UNUSED: Log_shift.  */\n     COSTS_N_INSNS (1),\t/* UNUSED: Log_shift_reg.  */\n     0,\t\t\t/* Extend.  */"}, {"sha": "f48642c28089cfdd639cc8434e486954bdaeff1a", "filename": "gcc/config/aarch64/aarch64-tuning-flags.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10f10092ebcee637d04788f2ac8b72644dbba34/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10f10092ebcee637d04788f2ac8b72644dbba34/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def?ref=b10f10092ebcee637d04788f2ac8b72644dbba34", "patch": "@@ -35,4 +35,10 @@ two load/stores are not at least 8 byte aligned don't create load/store\n pairs.   */\n AARCH64_EXTRA_TUNING_OPTION (\"slow_unaligned_ldpw\", SLOW_UNALIGNED_LDPW)\n \n+/* Some of the optional shift to some arthematic instructions are\n+   considered cheap.  Logical shift left <=4 with or without a\n+   zero extend are considered cheap.  Sign extend; non logical shift left\n+   are not considered cheap.  */\n+AARCH64_EXTRA_TUNING_OPTION (\"cheap_shift_extend\", CHEAP_SHIFT_EXTEND)\n+\n #undef AARCH64_EXTRA_TUNING_OPTION"}, {"sha": "3364a02e89c7939e56770264ada7802fd62f3a13", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10f10092ebcee637d04788f2ac8b72644dbba34/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10f10092ebcee637d04788f2ac8b72644dbba34/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b10f10092ebcee637d04788f2ac8b72644dbba34", "patch": "@@ -809,7 +809,8 @@ static const struct tune_params thunderx_tunings =\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n   tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_SLOW_UNALIGNED_LDPW),\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_SLOW_UNALIGNED_LDPW\n+   | AARCH64_EXTRA_TUNE_CHEAP_SHIFT_EXTEND),\t/* tune_flags.  */\n   &thunderx_prefetch_tune\n };\n \n@@ -6120,9 +6121,10 @@ aarch64_strip_shift (rtx x)\n /* Helper function for rtx cost calculation.  Strip an extend\n    expression from X.  Returns the inner operand if successful, or the\n    original expression on failure.  We deal with a number of possible\n-   canonicalization variations here.  */\n+   canonicalization variations here. If STRIP_SHIFT is true, then\n+   we can strip off a shift also.  */\n static rtx\n-aarch64_strip_extend (rtx x)\n+aarch64_strip_extend (rtx x, bool strip_shift)\n {\n   rtx op = x;\n \n@@ -6146,7 +6148,8 @@ aarch64_strip_extend (rtx x)\n \n   /* Now handle extended register, as this may also have an optional\n      left shift by 1..4.  */\n-  if (GET_CODE (op) == ASHIFT\n+  if (strip_shift\n+      && GET_CODE (op) == ASHIFT\n       && CONST_INT_P (XEXP (op, 1))\n       && ((unsigned HOST_WIDE_INT) INTVAL (XEXP (op, 1))) <= 4)\n     op = XEXP (op, 0);\n@@ -6170,6 +6173,39 @@ aarch64_shift_p (enum rtx_code code)\n   return code == ASHIFT || code == ASHIFTRT || code == LSHIFTRT;\n }\n \n+\n+/* Return true iff X is a cheap shift without a sign extend. */\n+\n+static bool\n+aarch64_cheap_mult_shift_p (rtx x)\n+{\n+  rtx op0, op1;\n+\n+  op0 = XEXP (x, 0);\n+  op1 = XEXP (x, 1);\n+\n+  if (!(aarch64_tune_params.extra_tuning_flags\n+                      & AARCH64_EXTRA_TUNE_CHEAP_SHIFT_EXTEND))\n+    return false;\n+\n+  if (GET_CODE (op0) == SIGN_EXTEND)\n+    return false;\n+\n+  if (GET_CODE (x) == ASHIFT && CONST_INT_P (op1)\n+      && UINTVAL (op1) <= 4)\n+    return true;\n+\n+  if (GET_CODE (x) != MULT || !CONST_INT_P (op1))\n+    return false;\n+\n+  HOST_WIDE_INT l2 = exact_log2 (INTVAL (op1));\n+\n+  if (l2 > 0 && l2 <= 4)\n+    return true;\n+\n+  return false;\n+}\n+\n /* Helper function for rtx cost calculation.  Calculate the cost of\n    a MULT or ASHIFT, which may be part of a compound PLUS/MINUS rtx.\n    Return the calculated cost of the expression, recursing manually in to\n@@ -6207,7 +6243,11 @@ aarch64_rtx_mult_cost (rtx x, enum rtx_code code, int outer, bool speed)\n \t    {\n \t      if (compound_p)\n \t        {\n-\t          if (REG_P (op1))\n+\t\t  /* If the shift is considered cheap,\n+\t\t     then don't add any cost. */\n+\t\t  if (aarch64_cheap_mult_shift_p (x))\n+\t\t    ;\n+\t          else if (REG_P (op1))\n \t\t    /* ARITH + shift-by-register.  */\n \t\t    cost += extra_cost->alu.arith_shift_reg;\n \t\t  else if (is_extend)\n@@ -6225,7 +6265,7 @@ aarch64_rtx_mult_cost (rtx x, enum rtx_code code, int outer, bool speed)\n \t    }\n \t  /* Strip extends as we will have costed them in the case above.  */\n \t  if (is_extend)\n-\t    op0 = aarch64_strip_extend (op0);\n+\t    op0 = aarch64_strip_extend (op0, true);\n \n \t  cost += rtx_cost (op0, VOIDmode, code, 0, speed);\n \n@@ -7069,13 +7109,13 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n \t    if (speed)\n \t      *cost += extra_cost->alu.extend_arith;\n \n-\t    op1 = aarch64_strip_extend (op1);\n+\t    op1 = aarch64_strip_extend (op1, true);\n \t    *cost += rtx_cost (op1, VOIDmode,\n \t\t\t       (enum rtx_code) GET_CODE (op1), 0, speed);\n \t    return true;\n \t  }\n \n-\trtx new_op1 = aarch64_strip_extend (op1);\n+\trtx new_op1 = aarch64_strip_extend (op1, false);\n \n \t/* Cost this as an FMA-alike operation.  */\n \tif ((GET_CODE (new_op1) == MULT\n@@ -7148,15 +7188,15 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n \t    if (speed)\n \t      *cost += extra_cost->alu.extend_arith;\n \n-\t    op0 = aarch64_strip_extend (op0);\n+\t    op0 = aarch64_strip_extend (op0, true);\n \t    *cost += rtx_cost (op0, VOIDmode,\n \t\t\t       (enum rtx_code) GET_CODE (op0), 0, speed);\n \t    return true;\n \t  }\n \n \t/* Strip any extend, leave shifts behind as we will\n \t   cost them through mult_cost.  */\n-\tnew_op0 = aarch64_strip_extend (op0);\n+\tnew_op0 = aarch64_strip_extend (op0, false);\n \n \tif (GET_CODE (new_op0) == MULT\n \t    || aarch64_shift_p (GET_CODE (new_op0)))"}]}