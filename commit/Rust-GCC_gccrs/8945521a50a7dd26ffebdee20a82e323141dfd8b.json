{"sha": "8945521a50a7dd26ffebdee20a82e323141dfd8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk0NTUyMWE1MGE3ZGQyNmZmZWJkZWUyMGE4MmUzMjMxNDFkZmQ4Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-06-27T17:29:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-06-27T17:29:51Z"}, "message": "Avoid crash on friend in nested class template.\n\n\t* name-lookup.c (do_pushtag): If we skip a class level, also skip\n\tits template level.\n\nFrom-SVN: r262188", "tree": {"sha": "b87cf8b3c60804210ba30e17be4ab7cde464fd68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b87cf8b3c60804210ba30e17be4ab7cde464fd68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8945521a50a7dd26ffebdee20a82e323141dfd8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8945521a50a7dd26ffebdee20a82e323141dfd8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8945521a50a7dd26ffebdee20a82e323141dfd8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8945521a50a7dd26ffebdee20a82e323141dfd8b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25846b50895262d38e1271bb19def833f9a63182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25846b50895262d38e1271bb19def833f9a63182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25846b50895262d38e1271bb19def833f9a63182"}], "stats": {"total": 62, "additions": 44, "deletions": 18}, "files": [{"sha": "05383b6003abf4a998959d4f0f4a5954dcc50a46", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8945521a50a7dd26ffebdee20a82e323141dfd8b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8945521a50a7dd26ffebdee20a82e323141dfd8b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8945521a50a7dd26ffebdee20a82e323141dfd8b", "patch": "@@ -1,3 +1,8 @@\n+2018-06-27  Jason Merrill  <jason@redhat.com>\n+\n+\t* name-lookup.c (do_pushtag): If we skip a class level, also skip\n+\tits template level.\n+\n 2018-06-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/86320 - memory-hog with std::array of pair"}, {"sha": "e0500d83071113dd98573e6c64e2bbeb267821ec", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8945521a50a7dd26ffebdee20a82e323141dfd8b/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8945521a50a7dd26ffebdee20a82e323141dfd8b/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=8945521a50a7dd26ffebdee20a82e323141dfd8b", "patch": "@@ -6509,20 +6509,30 @@ do_pushtag (tree name, tree type, tag_scope scope)\n   tree decl;\n \n   cp_binding_level *b = current_binding_level;\n-  while (/* Cleanup scopes are not scopes from the point of view of\n-\t    the language.  */\n-\t b->kind == sk_cleanup\n-\t /* Neither are function parameter scopes.  */\n-\t || b->kind == sk_function_parms\n-\t /* Neither are the scopes used to hold template parameters\n-\t    for an explicit specialization.  For an ordinary template\n-\t    declaration, these scopes are not scopes from the point of\n-\t    view of the language.  */\n-\t || (b->kind == sk_template_parms\n-\t     && (b->explicit_spec_p || scope == ts_global))\n-\t || (b->kind == sk_class\n-\t     && scope != ts_current))\n-    b = b->level_chain;\n+  while (true)\n+    {\n+      if (/* Cleanup scopes are not scopes from the point of view of\n+\t     the language.  */\n+\t  b->kind == sk_cleanup\n+\t  /* Neither are function parameter scopes.  */\n+\t  || b->kind == sk_function_parms\n+\t  /* Neither are the scopes used to hold template parameters\n+\t     for an explicit specialization.  For an ordinary template\n+\t     declaration, these scopes are not scopes from the point of\n+\t     view of the language.  */\n+\t  || (b->kind == sk_template_parms\n+\t      && (b->explicit_spec_p || scope == ts_global)))\n+\tb = b->level_chain;\n+      else if (b->kind == sk_class\n+\t       && scope != ts_current)\n+\t{\n+\t  b = b->level_chain;\n+\t  if (b->kind == sk_template_parms)\n+\t    b = b->level_chain;\n+\t}\n+      else\n+\tbreak;\n+    }\n \n   gcc_assert (identifier_p (name));\n "}, {"sha": "f8c95f844b3d7302ee7537a1f3829adde135a3af", "filename": "gcc/testsuite/g++.dg/template/friend66.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8945521a50a7dd26ffebdee20a82e323141dfd8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend66.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8945521a50a7dd26ffebdee20a82e323141dfd8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend66.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend66.C?ref=8945521a50a7dd26ffebdee20a82e323141dfd8b", "patch": "@@ -0,0 +1,9 @@\n+template <class T>\n+struct A\n+{\n+  template <class U>\n+  struct B\n+  {\n+    friend struct C;\n+  };\n+};"}, {"sha": "451ef1afaf8e2b31fcdba92811ab7829d24b8ef6", "filename": "gcc/testsuite/g++.old-deja/g++.law/visibility13.C", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8945521a50a7dd26ffebdee20a82e323141dfd8b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8945521a50a7dd26ffebdee20a82e323141dfd8b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Fvisibility13.C?ref=8945521a50a7dd26ffebdee20a82e323141dfd8b", "patch": "@@ -15,9 +15,11 @@ using namespace std;\n \n const int ArraySize = 12;\n \n+template <class> class Array_RC;\n+\n template <class Type>\n-class Array { // { dg-error \"\" } .struct Array_RC redecl.*\n-friend class Array_RC;\n+class Array {\n+  friend class Array_RC<Type>;\n public:\n     Array(const Type *ar, int sz) { init(ar,sz); }\n     virtual ~Array() { delete [] ia; }\n@@ -76,8 +78,8 @@ Array_RC<Type>::Array_RC(const Type *ar, int sz) : Array<Type>(ar, sz) {}\n \n template <class Type>\n Type &Array_RC<Type>::operator[](int ix) {\n-    assert(ix >= 0 && ix < size);// { dg-error \"\" } member .size.*\n-    return ia[ix];// { dg-error \"\" } member .ia.*\n+    assert(ix >= 0 && ix < this->size);\n+    return this->ia[ix];\n }\n \n //    -------------------   Test routine   ----------------------"}]}