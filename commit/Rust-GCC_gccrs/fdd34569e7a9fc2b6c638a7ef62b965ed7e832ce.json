{"sha": "fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce", "node_id": "C_kwDOANBUbNoAKGZkZDM0NTY5ZTdhOWZjMmI2YzYzOGE3ZWY2MmI5NjVlZDdlODMyY2U", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-11-22T16:29:09Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-11-24T10:59:03Z"}, "message": "Restore previous OpenACC implicit data clauses ordering [PR103244]\n\nFollow-up for recent commit b7e20480630e3eeb9eed8b3941da3b3f0c22c969\n\"openmp: Relax handling of implicit map vs. existing device mappings\".\n\nAs discussed, we likely also for OpenACC ought to use\n'OMP_CLAUSE_MAP_RUNTIME_IMPLICIT_P' and do the appropriate implicit clauses\nordering -- but that's for a separate step.\n\n\tgcc/\n\tPR middle-end/103244\n\t* gimplify.c (gimplify_adjust_omp_clauses): Restore previous\n\tOpenACC behavior.\n\tgcc/testsuite/\n\tPR middle-end/103244\n\t* c-c++-common/goacc/combined-reduction.c: Revert/expect previous\n\tOpenACC behavior.\n\t* c-c++-common/goacc/firstprivate-mappings-1.c: Likewise.\n\t* c-c++-common/goacc/mdc-1.c: Likewise.\n\t* g++.dg/goacc/firstprivate-mappings-1.C: Likewise.", "tree": {"sha": "ba9e33b7a48e3d8bfc05dbfa7ef0d21ef0655f32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba9e33b7a48e3d8bfc05dbfa7ef0d21ef0655f32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2e681059bcd7f76f13029988f133858dc82c205", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e681059bcd7f76f13029988f133858dc82c205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2e681059bcd7f76f13029988f133858dc82c205"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "8624f8221fd3b75be097800e33e9433e4a34e186", "filename": "gcc/gimplify.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce", "patch": "@@ -11501,15 +11501,21 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \tlist_p = &OMP_CLAUSE_CHAIN (c);\n     }\n \n-  /* Add in any implicit data sharing.  Implicit clauses are added at the start\n-     of the clause list, but after any non-map clauses.  */\n+  /* Add in any implicit data sharing.  */\n   struct gimplify_adjust_omp_clauses_data data;\n-  tree *implicit_add_list_p = orig_list_p;\n-  while (*implicit_add_list_p\n-\t && OMP_CLAUSE_CODE (*implicit_add_list_p) != OMP_CLAUSE_MAP)\n-    implicit_add_list_p = &OMP_CLAUSE_CHAIN (*implicit_add_list_p);\n-\n-  data.list_p = implicit_add_list_p;\n+  if ((gimplify_omp_ctxp->region_type & ORT_ACC) == 0)\n+    {\n+      /* OpenMP.  Implicit clauses are added at the start of the clause list,\n+\t but after any non-map clauses.  */\n+      tree *implicit_add_list_p = orig_list_p;\n+      while (*implicit_add_list_p\n+\t     && OMP_CLAUSE_CODE (*implicit_add_list_p) != OMP_CLAUSE_MAP)\n+\timplicit_add_list_p = &OMP_CLAUSE_CHAIN (*implicit_add_list_p);\n+      data.list_p = implicit_add_list_p;\n+    }\n+  else\n+    /* OpenACC.  */\n+    data.list_p = list_p;\n   data.pre_p = pre_p;\n   splay_tree_foreach (ctx->variables, gimplify_adjust_omp_clauses_1, &data);\n "}, {"sha": "ecf23f59d66073b8fe44a06222a93bf92bc8df78", "filename": "gcc/testsuite/c-c++-common/goacc/combined-reduction.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcombined-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcombined-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcombined-reduction.c?ref=fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce", "patch": "@@ -23,7 +23,7 @@ main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"omp target oacc_parallel reduction.+:v1. firstprivate.n. map.tofrom:v1\" 1 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \"omp target oacc_parallel reduction.+:v1. map.tofrom:v1\" 1 \"gimple\" } } */\n /* { dg-final { scan-tree-dump-times \"acc loop reduction.+:v1. private.i.\" 1 \"gimple\" } } */\n /* { dg-final { scan-tree-dump-times \"omp target oacc_kernels map.force_tofrom:n .len: 4.. map.force_tofrom:v1 .len: 4..\" 1 \"gimple\" } } */\n /* { dg-final { scan-tree-dump-times \"acc loop reduction.+:v1. private.i.\" 1 \"gimple\" } } */"}, {"sha": "7987beaed9a2eee5204e9d3865084996e0f9ab24", "filename": "gcc/testsuite/c-c++-common/goacc/firstprivate-mappings-1.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Ffirstprivate-mappings-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Ffirstprivate-mappings-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Ffirstprivate-mappings-1.c?ref=fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce", "patch": "@@ -419,7 +419,12 @@ vla (int array_li)\n   copyout (array_so)\n   /* The gimplifier has created an implicit 'firstprivate' clause for the array\n      length.\n-     { dg-final { scan-tree-dump {(?n)#pragma omp target oacc_parallel firstprivate\\(array_li.[0-9]+\\) map\\(from:array_so \\[len: 4\\]\\) \\[} omplower } } */\n+     { dg-final { scan-tree-dump {(?n)#pragma omp target oacc_parallel map\\(from:array_so \\[len: 4\\]\\) firstprivate\\(array_li.[0-9]+\\)} omplower { target { ! c++ } } } }\n+     { dg-final { scan-tree-dump {(?n)#pragma omp target oacc_parallel map\\(from:array_so \\[len: 4\\]\\) firstprivate\\(} omplower { target { c++ } } } }\n+     (C++ computes an intermediate value, so can't scan for 'firstprivate(array_li)'.)  */\n+  /* For C, non-LP64, the gimplifier has also created a mapping for the array\n+     itself; PR90859.\n+     { dg-final { scan-tree-dump {(?n)#pragma omp target oacc_parallel map\\(from:array_so \\[len: 4\\]\\) firstprivate\\(array_li.[0-9]+\\) map\\(tofrom:\\(\\*array.[0-9]+\\) \\[len: D\\.[0-9]+\\]\\) map\\(firstprivate:array \\[pointer assign, bias: 0\\]\\) \\[} omplower { target { c && { ! lp64 } } } } } */\n   {\n     array_so = sizeof array;\n   }"}, {"sha": "c2b8dc6c88088e703c95f8ad0d8aa024280c3c65", "filename": "gcc/testsuite/c-c++-common/goacc/mdc-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fmdc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fmdc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fmdc-1.c?ref=fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce", "patch": "@@ -45,7 +45,7 @@ t1 ()\n \n /* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_data map.to:s .len: 32..\" 1 \"omplower\" } } */\n /* { dg-final { scan-tree-dump-times \"pragma omp target oacc_data map.tofrom:.z .len: 40.. map.struct:s .len: 1.. map.alloc:s.a .len: 8.. map.tofrom:._1 .len: 40.. map.attach:s.a .bias: 0..\" 1 \"omplower\" } } */\n-/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_parallel map.tofrom:s .len: 32.. map.attach:s.e .bias: 0..\" 1 \"omplower\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp target oacc_parallel map.attach:s.e .bias: 0.. map.tofrom:s .len: 32\" 1 \"omplower\" } } */\n /* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_data map.attach:a .bias: 0..\" 1 \"omplower\" } } */\n /* { dg-final { scan-tree-dump-times \"pragma omp target oacc_exit_data map.detach:a .bias: 0..\" 1 \"omplower\" } } */\n /* { dg-final { scan-tree-dump-times \"pragma omp target oacc_enter_data map.to:a .len: 8..\" 1 \"omplower\" } } */"}, {"sha": "1b1badb1a9040c419b169b88e48410e2a82e75f9", "filename": "gcc/testsuite/g++.dg/goacc/firstprivate-mappings-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ffirstprivate-mappings-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ffirstprivate-mappings-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgoacc%2Ffirstprivate-mappings-1.C?ref=fdd34569e7a9fc2b6c638a7ef62b965ed7e832ce", "patch": "@@ -416,7 +416,7 @@ vla (int &array_li)\n   copyout (array_so)\n   /* The gimplifier has created an implicit 'firstprivate' clause for the array\n      length.\n-     { dg-final { scan-tree-dump {(?n)#pragma omp target oacc_parallel firstprivate\\([^)]+\\) map\\(from:array_so \\[len: 4\\]\\)} omplower } }\n+     { dg-final { scan-tree-dump {(?n)#pragma omp target oacc_parallel map\\(from:array_so \\[len: 4\\]\\) firstprivate\\(} omplower } }\n      (C++ computes an intermediate value, so can't scan for 'firstprivate(array_li)'.)  */\n   {\n     array_so = sizeof array;"}]}