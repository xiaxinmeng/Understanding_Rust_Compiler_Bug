{"sha": "63b0cb0436382abe256360ca3e83c02041b8ffe2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNiMGNiMDQzNjM4MmFiZTI1NjM2MGNhM2U4M2MwMjA0MWI4ZmZlMg==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2015-10-16T13:52:51Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2015-10-16T13:52:51Z"}, "message": "re PR target/67745 ([ARM] wrong alignments when __attribute__ ((optimize,target,align) is used)\n\n2015-10-16  Christian Bruel  <christian.bruel@st.com>\n\n \tPR target/67745\n \t* config/arm/arm.h (FUNCTION_BOUNDARY): Use FUNCTION_BOUNDARY_P.\n \t(FUNCTION_BOUNDARY_P): New macro:\n \t* config/arm/arm.c (TARGET_RELAYOUT_FUNCTION, arm_relayout_function): \n \tNew hook.\n \t* doc/tm.texi.in (TARGET_RELAYOUT_FUNCTION): Document.\n \t* doc/tm.texi (TARGET_RELAYOUT_FUNCTION): New hook.\n \t* gcc/target.def (TARGET_RELAYOUT_FUNCTION): Likewise.\n \t* gcc/function.c (allocate_struct_function): Call relayout_function hook.\n \t* gcc/passes.c (rest_of_decl_compilation): Likewise.\n\nFrom-SVN: r228912", "tree": {"sha": "dd02fa210573226e6a7f1a92dd5a6db115002160", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd02fa210573226e6a7f1a92dd5a6db115002160"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63b0cb0436382abe256360ca3e83c02041b8ffe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63b0cb0436382abe256360ca3e83c02041b8ffe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63b0cb0436382abe256360ca3e83c02041b8ffe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63b0cb0436382abe256360ca3e83c02041b8ffe2/comments", "author": null, "committer": null, "parents": [{"sha": "1df7c326c72121e3f18743dadb6880a102b018ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1df7c326c72121e3f18743dadb6880a102b018ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1df7c326c72121e3f18743dadb6880a102b018ed"}], "stats": {"total": 57, "additions": 56, "deletions": 1}, "files": [{"sha": "fe2d8ce67b114b044cebf8bb1f0948966c0d9bbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b0cb0436382abe256360ca3e83c02041b8ffe2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b0cb0436382abe256360ca3e83c02041b8ffe2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63b0cb0436382abe256360ca3e83c02041b8ffe2", "patch": "@@ -1,3 +1,16 @@\n+2015-10-16  Christian Bruel  <christian.bruel@st.com>\n+\n+ \tPR target/67745\n+ \t* config/arm/arm.h (FUNCTION_BOUNDARY): Use FUNCTION_BOUNDARY_P.\n+ \t(FUNCTION_BOUNDARY_P): New macro:\n+ \t* config/arm/arm.c (TARGET_RELAYOUT_FUNCTION, arm_relayout_function): \n+ \tNew hook.\n+ \t* doc/tm.texi.in (TARGET_RELAYOUT_FUNCTION): Document.\n+ \t* doc/tm.texi (TARGET_RELAYOUT_FUNCTION): New hook.\n+ \t* gcc/target.def (TARGET_RELAYOUT_FUNCTION): Likewise.\n+ \t* gcc/function.c (allocate_struct_function): Call relayout_function hook.\n+ \t* gcc/passes.c (rest_of_decl_compilation): Likewise.\n+\n 2015-10-16  Christian Bruel  <christian.bruel@st.com>\n \n \tPR target/67745"}, {"sha": "b80ec08512af829cc4dede6f195dd160b6f9145c", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b0cb0436382abe256360ca3e83c02041b8ffe2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b0cb0436382abe256360ca3e83c02041b8ffe2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=63b0cb0436382abe256360ca3e83c02041b8ffe2", "patch": "@@ -250,6 +250,7 @@ static void arm_override_options_after_change (void);\n static void arm_option_print (FILE *, int, struct cl_target_option *);\n static void arm_set_current_function (tree);\n static bool arm_can_inline_p (tree, tree);\n+static void arm_relayout_function (tree);\n static bool arm_valid_target_attribute_p (tree, tree, tree, int);\n static unsigned HOST_WIDE_INT arm_shift_truncation_mask (machine_mode);\n static bool arm_macro_fusion_p (void);\n@@ -405,6 +406,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_CAN_INLINE_P\n #define TARGET_CAN_INLINE_P arm_can_inline_p\n \n+#undef TARGET_RELAYOUT_FUNCTION\n+#define TARGET_RELAYOUT_FUNCTION arm_relayout_function\n+\n #undef  TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE arm_option_override\n \n@@ -29825,6 +29829,23 @@ arm_can_inline_p (tree caller ATTRIBUTE_UNUSED, tree callee ATTRIBUTE_UNUSED)\n   return true;\n }\n \n+/* Hook to fix function's alignment affected by target attribute.  */\n+\n+static void\n+arm_relayout_function (tree fndecl)\n+{\n+  if (DECL_USER_ALIGN (fndecl))\n+    return;\n+\n+  tree callee_tree = DECL_FUNCTION_SPECIFIC_TARGET (fndecl);\n+\n+  if (!callee_tree)\n+    callee_tree = target_option_default_node;\n+\n+  DECL_ALIGN (fndecl) =\n+    FUNCTION_BOUNDARY_P (TREE_TARGET_OPTION (callee_tree)->x_target_flags);\n+}\n+\n /* Inner function to process the attribute((target(...))), take an argument and\n    set the current options from the argument.  If we have a list, recursively\n    go over the list.  */"}, {"sha": "585bd1d95f37fba65dec1d8b99e7a9392299a603", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b0cb0436382abe256360ca3e83c02041b8ffe2/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b0cb0436382abe256360ca3e83c02041b8ffe2/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=63b0cb0436382abe256360ca3e83c02041b8ffe2", "patch": "@@ -565,7 +565,8 @@ extern int arm_arch_crc;\n #define PREFERRED_STACK_BOUNDARY \\\n     (arm_abi == ARM_ABI_ATPCS ? 64 : STACK_BOUNDARY)\n \n-#define FUNCTION_BOUNDARY           (TARGET_THUMB ? 16 : 32)\n+#define FUNCTION_BOUNDARY_P(flags)  (TARGET_THUMB_P (flags) ? 16 : 32)\n+#define FUNCTION_BOUNDARY           (FUNCTION_BOUNDARY_P (target_flags))\n \n /* The lowest bit is used to indicate Thumb-mode functions, so the\n    vbit must go into the delta field of pointers to member"}, {"sha": "731e63043f3af2203cf80d27c315e922fe4382a5", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b0cb0436382abe256360ca3e83c02041b8ffe2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b0cb0436382abe256360ca3e83c02041b8ffe2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=63b0cb0436382abe256360ca3e83c02041b8ffe2", "patch": "@@ -9985,6 +9985,10 @@ default, inlining is not allowed if the callee function has function\n specific target options and the caller does not use the same options.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_RELAYOUT_FUNCTION (tree @var{fndecl})\n+This target hook fixes function @var{fndecl} after attributes are processed. Default does nothing. On ARM, the default function's alignment is updated with the attribute target.\n+@end deftypefn\n+\n @node Emulated TLS\n @section Emulating TLS\n @cindex Emulated TLS"}, {"sha": "0b52250d372192420456d3ff9b86647f1006af16", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b0cb0436382abe256360ca3e83c02041b8ffe2/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b0cb0436382abe256360ca3e83c02041b8ffe2/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=63b0cb0436382abe256360ca3e83c02041b8ffe2", "patch": "@@ -7274,6 +7274,8 @@ on this implementation detail.\n \n @hook TARGET_CAN_INLINE_P\n \n+@hook TARGET_RELAYOUT_FUNCTION\n+\n @node Emulated TLS\n @section Emulating TLS\n @cindex Emulated TLS"}, {"sha": "f7742148cfb7b7a8d7557636661d3e9a15bfd2cf", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b0cb0436382abe256360ca3e83c02041b8ffe2/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b0cb0436382abe256360ca3e83c02041b8ffe2/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=63b0cb0436382abe256360ca3e83c02041b8ffe2", "patch": "@@ -4840,6 +4840,9 @@ allocate_struct_function (tree fndecl, bool abstract_p)\n \t  for (tree parm = DECL_ARGUMENTS (fndecl); parm;\n \t       parm = DECL_CHAIN (parm))\n \t    relayout_decl (parm);\n+\n+\t  /* Similarly relayout the function decl.  */\n+\t  targetm.target_option.relayout_function (fndecl);\n \t}\n \n       if (!abstract_p && aggregate_value_p (result, fndecl))"}, {"sha": "6ef6d2e50ff6994cf39de7173097be928b1f4160", "filename": "gcc/passes.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b0cb0436382abe256360ca3e83c02041b8ffe2/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b0cb0436382abe256360ca3e83c02041b8ffe2/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=63b0cb0436382abe256360ca3e83c02041b8ffe2", "patch": "@@ -253,6 +253,11 @@ rest_of_decl_compilation (tree decl,\n \t}\n #endif\n \n+      /* Now that we have activated any function-specific attributes\n+\t that might affect function decl, particularly align, relayout it.  */\n+      if (TREE_CODE (decl) == FUNCTION_DECL)\n+\ttargetm.target_option.relayout_function (decl);\n+\n       timevar_pop (TV_VARCONST);\n     }\n   else if (TREE_CODE (decl) == TYPE_DECL"}, {"sha": "694e455f570056fbda6a0a168ad1e235230022bc", "filename": "gcc/target.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63b0cb0436382abe256360ca3e83c02041b8ffe2/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63b0cb0436382abe256360ca3e83c02041b8ffe2/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=63b0cb0436382abe256360ca3e83c02041b8ffe2", "patch": "@@ -5620,6 +5620,12 @@ specific target options and the caller does not use the same options.\",\n  bool, (tree caller, tree callee),\n  default_target_can_inline_p)\n \n+DEFHOOK\n+(relayout_function,\n+\"This target hook fixes function @var{fndecl} after attributes are processed. Default does nothing. On ARM, the default function's alignment is updated with the attribute target.\",\n+ void, (tree fndecl),\n+ hook_void_tree)\n+\n HOOK_VECTOR_END (target_option)\n \n /* For targets that need to mark extra registers as live on entry to"}]}