{"sha": "ca04c5a93cabee4b3e79cd5d6e791828bd1b7d0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EwNGM1YTkzY2FiZWU0YjNlNzljZDVkNmU3OTE4MjhiZDFiN2QwYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-24T05:32:06Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-24T05:32:06Z"}, "message": "h8300.h (REG_OK_FOR_INDEX_NONSTRICT_P): New.\n\n\t* config/h8300/h8300.h (REG_OK_FOR_INDEX_NONSTRICT_P): New.\n\t(REG_OK_FOR_BASE_NONSTRICT_P): Likewise.\n\t(REG_OK_FOR_INDEX_STRICT_P): Likewise.\n\t(REG_OK_FOR_BASE_STRICT_P): Likewise.\n\t(REG_OK_FOR_INDEX_STRICT_P): Use REGNO_OK_FOR_INDEX_P.\n\t(REG_OK_FOR_BASE_STRICT_P): Use REGNO_OK_FOR_BASE_P.\n\t(REG_OK_FOR_INDEX_P): Use REG_OK_FOR_INDEX_STRICT_P.\n\t(REG_OK_FOR_BASE_P): Use REG_OK_FOR_BASE_STRICT_P.\n\nFrom-SVN: r76483", "tree": {"sha": "14f7adcf7c65ba1b5c7f9e849f3f562e4e2adb67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14f7adcf7c65ba1b5c7f9e849f3f562e4e2adb67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca04c5a93cabee4b3e79cd5d6e791828bd1b7d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca04c5a93cabee4b3e79cd5d6e791828bd1b7d0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca04c5a93cabee4b3e79cd5d6e791828bd1b7d0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca04c5a93cabee4b3e79cd5d6e791828bd1b7d0c/comments", "author": null, "committer": null, "parents": [{"sha": "cc79e34f967f45493d24a291307e3b80e642fec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc79e34f967f45493d24a291307e3b80e642fec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc79e34f967f45493d24a291307e3b80e642fec5"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "3272aa4361f92ed0cb9e7c81081b4a8f860f8271", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca04c5a93cabee4b3e79cd5d6e791828bd1b7d0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca04c5a93cabee4b3e79cd5d6e791828bd1b7d0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca04c5a93cabee4b3e79cd5d6e791828bd1b7d0c", "patch": "@@ -1,3 +1,14 @@\n+2004-01-24  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.h (REG_OK_FOR_INDEX_NONSTRICT_P): New.\n+\t(REG_OK_FOR_BASE_NONSTRICT_P): Likewise.\n+\t(REG_OK_FOR_INDEX_STRICT_P): Likewise.\n+\t(REG_OK_FOR_BASE_STRICT_P): Likewise.\n+\t(REG_OK_FOR_INDEX_STRICT_P): Use REGNO_OK_FOR_INDEX_P.\n+\t(REG_OK_FOR_BASE_STRICT_P): Use REGNO_OK_FOR_BASE_P.\n+\t(REG_OK_FOR_INDEX_P): Use REG_OK_FOR_INDEX_STRICT_P.\n+\t(REG_OK_FOR_BASE_P): Use REG_OK_FOR_BASE_STRICT_P.\n+\n 2004-01-24  Jan Hubicka  <jh@suse.cz>\n \n \t* cselib.c (remove_useless_values):  Do not access discarded values."}, {"sha": "af61d0f88914c3587d68aeee3d38bb6caada5d9c", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca04c5a93cabee4b3e79cd5d6e791828bd1b7d0c/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca04c5a93cabee4b3e79cd5d6e791828bd1b7d0c/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=ca04c5a93cabee4b3e79cd5d6e791828bd1b7d0c", "patch": "@@ -811,23 +811,25 @@ struct cum_arg\n    After reload, it makes no difference, since pseudo regs have\n    been eliminated by then.  */\n \n+/* Non-strict versions.  */\n+#define REG_OK_FOR_INDEX_NONSTRICT_P(X) 0\n+/* Don't use REGNO_OK_FOR_BASE_P here because it uses reg_renumber.  */\n+#define REG_OK_FOR_BASE_NONSTRICT_P(X)\t\t\t\t\\\n+  (REGNO (X) >= FIRST_PSEUDO_REGISTER || REGNO (X) != 8)\n+\n+/* Strict versions.  */\n+#define REG_OK_FOR_INDEX_STRICT_P(X) REGNO_OK_FOR_INDEX_P (REGNO (X))\n+#define REG_OK_FOR_BASE_STRICT_P(X)  REGNO_OK_FOR_BASE_P (REGNO (X))\n+\n #ifndef REG_OK_STRICT\n \n-/* Nonzero if X is a hard reg that can be used as an index\n-   or if it is a pseudo reg.  */\n-#define REG_OK_FOR_INDEX_P(X) 0\n-/* Nonzero if X is a hard reg that can be used as a base reg\n-   or if it is a pseudo reg.  */\n-/* Don't use REGNO_OK_FOR_BASE_P here because it uses reg_renumber.  */\n-#define REG_OK_FOR_BASE_P(X) \\\n-\t(REGNO (X) >= FIRST_PSEUDO_REGISTER || REGNO (X) != 8)\n+#define REG_OK_FOR_INDEX_P(X) REG_OK_FOR_INDEX_NONSTRICT_P (X)\n+#define REG_OK_FOR_BASE_P(X)  REG_OK_FOR_BASE_NONSTRICT_P (X)\n \n #else\n \n-/* Nonzero if X is a hard reg that can be used as an index.  */\n-#define REG_OK_FOR_INDEX_P(X) REGNO_OK_FOR_INDEX_P (REGNO (X))\n-/* Nonzero if X is a hard reg that can be used as a base reg.  */\n-#define REG_OK_FOR_BASE_P(X) REGNO_OK_FOR_BASE_P (REGNO (X))\n+#define REG_OK_FOR_INDEX_P(X) REG_OK_FOR_INDEX_STRICT_P (X)\n+#define REG_OK_FOR_BASE_P(X)  REG_OK_FOR_BASE_STRICT_P (X)\n \n #endif\n "}]}