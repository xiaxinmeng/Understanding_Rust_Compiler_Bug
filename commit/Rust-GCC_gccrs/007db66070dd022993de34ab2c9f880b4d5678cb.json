{"sha": "007db66070dd022993de34ab2c9f880b4d5678cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA3ZGI2NjA3MGRkMDIyOTkzZGUzNGFiMmM5Zjg4MGI0ZDU2NzhjYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-12-12T18:55:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-12-12T18:55:06Z"}, "message": "re PR c++/51496 (FAIL: libgomp.c++/for-2.C  *  (test for excess errors))\n\n\tPR c++/51496\n\t* parser.c (cp_parser_omp_for_loop): When determining whether\n\tto use cp_parser_omp_for_incr or cp_parser_expression and when\n\tcalling cp_parser_omp_for_incr, use real_decl instead of decl.\n\nFrom-SVN: r182257", "tree": {"sha": "a57323d9fb21bb4b9a243709225a2a653c407055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a57323d9fb21bb4b9a243709225a2a653c407055"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/007db66070dd022993de34ab2c9f880b4d5678cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/007db66070dd022993de34ab2c9f880b4d5678cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/007db66070dd022993de34ab2c9f880b4d5678cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/007db66070dd022993de34ab2c9f880b4d5678cb/comments", "author": null, "committer": null, "parents": [{"sha": "fe4bf59fb63c95ee07aa8a62a4ecf0a93e8d6083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe4bf59fb63c95ee07aa8a62a4ecf0a93e8d6083", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe4bf59fb63c95ee07aa8a62a4ecf0a93e8d6083"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "3f04054cd8a460859b3cb5b3a936c85049012424", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007db66070dd022993de34ab2c9f880b4d5678cb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007db66070dd022993de34ab2c9f880b4d5678cb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=007db66070dd022993de34ab2c9f880b4d5678cb", "patch": "@@ -1,3 +1,10 @@\n+2011-12-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/51496\n+\t* parser.c (cp_parser_omp_for_loop): When determining whether\n+\tto use cp_parser_omp_for_incr or cp_parser_expression and when\n+\tcalling cp_parser_omp_for_incr, use real_decl instead of decl.\n+\n 2011-12-12  Torvald Riegel  <triegel@redhat.com>\n \n \t* semantics.c (finish_transaction_stmt, build_transaction_expr):\n@@ -9,7 +16,7 @@\n \t(cp_parser_noexcept_specification_opt): ...here.  Allow for parsing\n \tnon-constexpr noexcept arguments.\n \t(cp_parser_transaction, cp_parser_transaction_expression): Parse\n-    and handle noexcept-specifications.\n+\tand handle noexcept-specifications.\n \t(cp_parser_function_transaction): Adapt to finish_transaction_stmt\n \tchange.\n \t* pt.c (tsubst_expr): Adapt to new noexcept parameters when"}, {"sha": "2bd91ec96561bb99d571da6a94ade16dc61fa1a9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/007db66070dd022993de34ab2c9f880b4d5678cb/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/007db66070dd022993de34ab2c9f880b4d5678cb/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=007db66070dd022993de34ab2c9f880b4d5678cb", "patch": "@@ -26354,11 +26354,11 @@ cp_parser_omp_for_loop (cp_parser *parser, tree clauses, tree *par_clauses)\n \t{\n \t  /* If decl is an iterator, preserve the operator on decl\n \t     until finish_omp_for.  */\n-\t  if (decl\n+\t  if (real_decl\n \t      && ((processing_template_decl\n-\t\t   && !POINTER_TYPE_P (TREE_TYPE (decl)))\n-\t\t  || CLASS_TYPE_P (TREE_TYPE (decl))))\n-\t    incr = cp_parser_omp_for_incr (parser, decl);\n+\t\t   && !POINTER_TYPE_P (TREE_TYPE (real_decl)))\n+\t\t  || CLASS_TYPE_P (TREE_TYPE (real_decl))))\n+\t    incr = cp_parser_omp_for_incr (parser, real_decl);\n \t  else\n \t    incr = cp_parser_expression (parser, false, NULL);\n \t}"}]}