{"sha": "735b8f9fc4b14384b246b39dfccbf529402b7791", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM1YjhmOWZjNGIxNDM4NGIyNDZiMzlkZmNjYmY1Mjk0MDJiNzc5MQ==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2016-10-17T23:35:48Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2016-10-17T23:35:48Z"}, "message": "Set nonnull attribute to ptr_info_def based on VRP\n\nSet nonnull attribute to ptr_info_def based on VRP\ngcc/ChangeLog:\n\n2016-10-18  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* tree-ssa-alias.h (pt_solution_singleton_or_null_p): Renamed from\n\tpt_solution_singleton_p.\n\t* tree-ssa-ccp.c (fold_builtin_alloca_with_align): Use renamed\n\tpt_solution_singleton_or_null_p from pt_solution_singleton_p.\n\t* tree-ssa-structalias.c (find_what_p_points_to): Preserve\n\tpointer nonnull computed by VRP.\n\tAlso Conservatively set pt.null to 1.\n\t(pt_solution_reset): Conservatively set pt.null to 1.\n\t(pt_solution_singleton_or_null_p): Renamed from\n\tpt_solution_singleton_p.\n\t* tree-ssanames.h (set_ptr_nonnull): Declare.\n\t(get_ptr_nonnull): Likewise.\n\t* tree-ssanames.c (set_ptr_nonnull): New.\n\t(get_ptr_nonnull): Likewise.\n\t* tree-vrp.c (vrp_finalize): Set ptr that are nonnull.\n\t(evrp_dom_walker::before_dom_children): Likewise.\n\n\ngcc/testsuite/ChangeLog:\n\n2016-10-18  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* gcc.dg/torture/pr39074-2.c: Adjust testcase.\n\t* gcc.dg/torture/pr39074.c: Likewise.\n\nFrom-SVN: r241287", "tree": {"sha": "79b96808abe9a9f3a2571e69510e046068caad46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79b96808abe9a9f3a2571e69510e046068caad46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/735b8f9fc4b14384b246b39dfccbf529402b7791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/735b8f9fc4b14384b246b39dfccbf529402b7791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/735b8f9fc4b14384b246b39dfccbf529402b7791", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/735b8f9fc4b14384b246b39dfccbf529402b7791/comments", "author": null, "committer": null, "parents": [{"sha": "86f980870a28bc9022cc57362b5031ede43ecff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f980870a28bc9022cc57362b5031ede43ecff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86f980870a28bc9022cc57362b5031ede43ecff9"}], "stats": {"total": 119, "additions": 98, "deletions": 21}, "files": [{"sha": "86f48345cbe1249d33b5b59d8c3be650fd20f595", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=735b8f9fc4b14384b246b39dfccbf529402b7791", "patch": "@@ -1,3 +1,22 @@\n+2016-10-18  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* tree-ssa-alias.h (pt_solution_singleton_or_null_p): Renamed from\n+\tpt_solution_singleton_p.\n+\t* tree-ssa-ccp.c (fold_builtin_alloca_with_align): Use renamed\n+\tpt_solution_singleton_or_null_p from pt_solution_singleton_p.\n+\t* tree-ssa-structalias.c (find_what_p_points_to): Preserve\n+\tpointer nonnull computed by VRP.\n+\tAlso Conservatively set pt.null to 1.\n+\t(pt_solution_reset): Conservatively set pt.null to 1.\n+\t(pt_solution_singleton_or_null_p): Renamed from\n+\tpt_solution_singleton_p.\n+\t* tree-ssanames.h (set_ptr_nonnull): Declare.\n+\t(get_ptr_nonnull): Likewise.\n+\t* tree-ssanames.c (set_ptr_nonnull): New.\n+\t(get_ptr_nonnull): Likewise.\n+\t* tree-vrp.c (vrp_finalize): Set ptr that are nonnull.\n+\t(evrp_dom_walker::before_dom_children): Likewise.\n+\n 2016-10-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/i386/i386.h (TARGET_CUSTOM_FUNCTION_DESCRIPTORS): Move to..."}, {"sha": "d59844272cec6e612a6e94326a958a921866f815", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=735b8f9fc4b14384b246b39dfccbf529402b7791", "patch": "@@ -1,3 +1,8 @@\n+2016-10-18  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* gcc.dg/torture/pr39074-2.c: Adjust testcase.\n+\t* gcc.dg/torture/pr39074.c: Likewise.\n+\n 2016-10-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/Wtrampolines.c: XFAIL warning on ia64-*-* and powerpc64-*-*."}, {"sha": "0693f2d6fced8b78898eeabb892f80a57cda17ac", "filename": "gcc/testsuite/gcc.dg/torture/pr39074-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074-2.c?ref=735b8f9fc4b14384b246b39dfccbf529402b7791", "patch": "@@ -31,4 +31,4 @@ int main()\n }\n \n /* { dg-final { scan-tree-dump \"y.._. = { i }\" \"alias\" } } */\n-/* { dg-final { scan-tree-dump \"y.._., points-to vars: { D..... }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"y.._., points-to NULL, points-to vars: { D..... }\" \"alias\" } } */"}, {"sha": "54c444e19a47d1de6a1215eddc4709851ffcfb8f", "filename": "gcc/testsuite/gcc.dg/torture/pr39074.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr39074.c?ref=735b8f9fc4b14384b246b39dfccbf529402b7791", "patch": "@@ -30,4 +30,4 @@ int main()\n }\n \n /* { dg-final { scan-tree-dump \"y.._. = { i }\" \"alias\" } } */\n-/* { dg-final { scan-tree-dump \"y.._., points-to vars: { D..... }\" \"alias\" } } */\n+/* { dg-final { scan-tree-dump \"y.._., points-to NULL, points-to vars: { D..... }\" \"alias\" } } */"}, {"sha": "27a06fcca2c20bc1373856efff82afb690e1d7d5", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=735b8f9fc4b14384b246b39dfccbf529402b7791", "patch": "@@ -146,7 +146,7 @@ extern void dump_alias_stats (FILE *);\n /* In tree-ssa-structalias.c  */\n extern unsigned int compute_may_aliases (void);\n extern bool pt_solution_empty_p (struct pt_solution *);\n-extern bool pt_solution_singleton_p (struct pt_solution *, unsigned *);\n+extern bool pt_solution_singleton_or_null_p (struct pt_solution *, unsigned *);\n extern bool pt_solution_includes_global (struct pt_solution *);\n extern bool pt_solution_includes (struct pt_solution *, const_tree);\n extern bool pt_solutions_intersect (struct pt_solution *, struct pt_solution *);"}, {"sha": "61754d8d7588c747229d145ee2fabc4e2cf1083a", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=735b8f9fc4b14384b246b39dfccbf529402b7791", "patch": "@@ -2135,7 +2135,7 @@ fold_builtin_alloca_with_align (gimple *stmt)\n       {\n \tbool singleton_p;\n \tunsigned uid;\n-\tsingleton_p = pt_solution_singleton_p (&pi->pt, &uid);\n+\tsingleton_p = pt_solution_singleton_or_null_p (&pi->pt, &uid);\n \tgcc_assert (singleton_p);\n \tSET_DECL_PT_UID (var, uid);\n       }"}, {"sha": "78f45334785071e9ffdf973eb5177c7732677533", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=735b8f9fc4b14384b246b39dfccbf529402b7791", "patch": "@@ -6451,6 +6451,7 @@ find_what_p_points_to (tree fndecl, tree p)\n   struct ptr_info_def *pi;\n   tree lookup_p = p;\n   varinfo_t vi;\n+  bool nonnull = get_ptr_nonnull (p);\n \n   /* For parameters, get at the points-to set for the actual parm\n      decl.  */\n@@ -6466,6 +6467,12 @@ find_what_p_points_to (tree fndecl, tree p)\n \n   pi = get_ptr_info (p);\n   pi->pt = find_what_var_points_to (fndecl, vi);\n+  /* Conservatively set to NULL from PTA (to true). */\n+  pi->pt.null = 1;\n+  /* Preserve pointer nonnull computed by VRP.  See get_ptr_nonnull\n+     in gcc/tree-ssaname.c for more information.  */\n+  if (nonnull)\n+    set_ptr_nonnull (p);\n }\n \n \n@@ -6505,6 +6512,7 @@ pt_solution_reset (struct pt_solution *pt)\n {\n   memset (pt, 0, sizeof (struct pt_solution));\n   pt->anything = true;\n+  pt->null = true;\n }\n \n /* Set the points-to solution *PT to point only to the variables\n@@ -6599,10 +6607,10 @@ pt_solution_empty_p (struct pt_solution *pt)\n    return the var uid in *UID.  */\n \n bool\n-pt_solution_singleton_p (struct pt_solution *pt, unsigned *uid)\n+pt_solution_singleton_or_null_p (struct pt_solution *pt, unsigned *uid)\n {\n   if (pt->anything || pt->nonlocal || pt->escaped || pt->ipa_escaped\n-      || pt->null || pt->vars == NULL\n+      || pt->vars == NULL\n       || !bitmap_single_bit_set_p (pt->vars))\n     return false;\n "}, {"sha": "913d142f0462e1647401bdefa21c2527b153ed5b", "filename": "gcc/tree-ssanames.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftree-ssanames.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftree-ssanames.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.c?ref=735b8f9fc4b14384b246b39dfccbf529402b7791", "patch": "@@ -374,6 +374,35 @@ get_range_info (const_tree name, wide_int *min, wide_int *max)\n   return SSA_NAME_RANGE_TYPE (name);\n }\n \n+/* Set nonnull attribute to pointer NAME.  */\n+\n+void\n+set_ptr_nonnull (tree name)\n+{\n+  gcc_assert (POINTER_TYPE_P (TREE_TYPE (name)));\n+  struct ptr_info_def *pi = get_ptr_info (name);\n+  pi->pt.null = 0;\n+}\n+\n+/* Return nonnull attribute of pointer NAME.  */\n+bool\n+get_ptr_nonnull (const_tree name)\n+{\n+  gcc_assert (POINTER_TYPE_P (TREE_TYPE (name)));\n+  struct ptr_info_def *pi = SSA_NAME_PTR_INFO (name);\n+  if (pi == NULL)\n+    return false;\n+  /* TODO Now pt->null is conservatively set to true in PTA\n+     analysis. vrp is the only pass (including ipa-vrp)\n+     that clears pt.null via set_ptr_nonull when it knows\n+     for sure. PTA will preserves the pt.null value set by VRP.\n+\n+     When PTA analysis is improved, pt.anything, pt.nonlocal\n+     and pt.escaped may also has to be considered before\n+     deciding that pointer cannot point to NULL.  */\n+  return !pi->pt.null;\n+}\n+\n /* Change non-zero bits bitmask of NAME.  */\n \n void"}, {"sha": "d39cc9d4e27c46c98176edcee02be7e7339875e9", "filename": "gcc/tree-ssanames.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftree-ssanames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftree-ssanames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssanames.h?ref=735b8f9fc4b14384b246b39dfccbf529402b7791", "patch": "@@ -88,6 +88,8 @@ extern void set_ptr_info_alignment (struct ptr_info_def *, unsigned int,\n extern void adjust_ptr_info_misalignment (struct ptr_info_def *,\n \t\t\t\t\t  unsigned int);\n extern struct ptr_info_def *get_ptr_info (tree);\n+extern void set_ptr_nonnull (tree);\n+extern bool get_ptr_nonnull (const_tree);\n \n extern tree copy_ssa_name_fn (struct function *, tree, gimple *);\n extern void duplicate_ssa_name_ptr_info (tree, struct ptr_info_def *);"}, {"sha": "b11fc64dd8da641304bde9137b7194035c0d6f07", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/735b8f9fc4b14384b246b39dfccbf529402b7791/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=735b8f9fc4b14384b246b39dfccbf529402b7791", "patch": "@@ -10601,18 +10601,24 @@ vrp_finalize (bool warn_array_bounds_p)\n       {\n \ttree name = ssa_name (i);\n \n-      if (!name\n-\t  || POINTER_TYPE_P (TREE_TYPE (name))\n-\t  || (vr_value[i]->type == VR_VARYING)\n-\t  || (vr_value[i]->type == VR_UNDEFINED))\n-\tcontinue;\n+\tif (!name\n+\t    || (vr_value[i]->type == VR_VARYING)\n+\t    || (vr_value[i]->type == VR_UNDEFINED)\n+\t    || (TREE_CODE (vr_value[i]->min) != INTEGER_CST)\n+\t    || (TREE_CODE (vr_value[i]->max) != INTEGER_CST))\n+\t  continue;\n \n-      if ((TREE_CODE (vr_value[i]->min) == INTEGER_CST)\n-\t  && (TREE_CODE (vr_value[i]->max) == INTEGER_CST)\n-\t  && (vr_value[i]->type == VR_RANGE\n-\t      || vr_value[i]->type == VR_ANTI_RANGE))\n-\tset_range_info (name, vr_value[i]->type, vr_value[i]->min,\n-\t\t\tvr_value[i]->max);\n+\tif (POINTER_TYPE_P (TREE_TYPE (name))\n+\t    && ((vr_value[i]->type == VR_RANGE\n+\t\t && range_includes_zero_p (vr_value[i]->min,\n+\t\t\t\t\t   vr_value[i]->max) == 0)\n+\t\t|| (vr_value[i]->type == VR_ANTI_RANGE\n+\t\t    && range_includes_zero_p (vr_value[i]->min,\n+\t\t\t\t\t      vr_value[i]->max) == 1)))\n+\t  set_ptr_nonnull (name);\n+\telse if (!POINTER_TYPE_P (TREE_TYPE (name)))\n+\t  set_range_info (name, vr_value[i]->type, vr_value[i]->min,\n+\t\t\t  vr_value[i]->max);\n       }\n \n   substitute_and_fold (op_with_constant_singleton_value_range,\n@@ -10821,17 +10827,25 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n \t  def_operand_p def_p = SINGLE_SSA_DEF_OPERAND (stmt, SSA_OP_DEF);\n \t  /* Set the SSA with the value range.  */\n \t  if (def_p\n-\t      && TREE_CODE (DEF_FROM_PTR (def_p)) == SSA_NAME\n-\t      && INTEGRAL_TYPE_P (TREE_TYPE (DEF_FROM_PTR (def_p))))\n+\t      && TREE_CODE (DEF_FROM_PTR (def_p)) == SSA_NAME)\n \t    {\n \t      tree def = DEF_FROM_PTR (def_p);\n \t      value_range *vr = get_value_range (def);\n \n-\t      if ((vr->type == VR_RANGE\n-\t\t   || vr->type == VR_ANTI_RANGE)\n+\t      if (INTEGRAL_TYPE_P (TREE_TYPE (DEF_FROM_PTR (def_p)))\n+\t\t  && (vr->type == VR_RANGE\n+\t\t      || vr->type == VR_ANTI_RANGE)\n \t\t  && (TREE_CODE (vr->min) == INTEGER_CST)\n \t\t  && (TREE_CODE (vr->max) == INTEGER_CST))\n \t\tset_range_info (def, vr->type, vr->min, vr->max);\n+\t      else if (POINTER_TYPE_P (TREE_TYPE (DEF_FROM_PTR (def_p)))\n+\t\t       && ((vr->type == VR_RANGE\n+\t\t\t    && range_includes_zero_p (vr->min,\n+\t\t\t\t\t\t      vr->max) == 0)\n+\t\t\t   || (vr->type == VR_ANTI_RANGE\n+\t\t\t       && range_includes_zero_p (vr->min,\n+\t\t\t\t\t\t\t vr->max) == 1)))\n+\t\tset_ptr_nonnull (def);\n \t    }\n \t}\n       else"}]}