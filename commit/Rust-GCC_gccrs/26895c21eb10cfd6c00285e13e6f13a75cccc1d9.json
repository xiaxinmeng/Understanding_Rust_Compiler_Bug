{"sha": "26895c21eb10cfd6c00285e13e6f13a75cccc1d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY4OTVjMjFlYjEwY2ZkNmMwMDI4NWUxM2U2ZjEzYTc1Y2NjYzFkOQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2017-11-03T18:19:33Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2017-11-03T18:19:33Z"}, "message": "Improve aarch64_legitimate_constant_p\n\nThis patch further improves aarch64_legitimate_constant_p.  Allow all\ninteger, floating point and vector constants.  Allow label references\nand non-anchor symbols with an immediate offset.  This allows such\nconstants to be rematerialized, resulting in smaller code and fewer stack\nspills.  SPEC2006 codesize reduces by 0.08%, SPEC2017 by 0.13%.\n\n    gcc/\n\t* config/aarch64/aarch64.c (aarch64_legitimate_constant_p):\n\tReturn true for more constants, symbols and label references.\n\t(aarch64_valid_floating_const): Remove unused function.\n\nFrom-SVN: r254388", "tree": {"sha": "7108a16814077daf80f63a291fa8df3f32868b67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7108a16814077daf80f63a291fa8df3f32868b67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26895c21eb10cfd6c00285e13e6f13a75cccc1d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26895c21eb10cfd6c00285e13e6f13a75cccc1d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26895c21eb10cfd6c00285e13e6f13a75cccc1d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26895c21eb10cfd6c00285e13e6f13a75cccc1d9/comments", "author": null, "committer": null, "parents": [{"sha": "f66060c60238bc96acae4af983ad8a4dc25d304f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66060c60238bc96acae4af983ad8a4dc25d304f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f66060c60238bc96acae4af983ad8a4dc25d304f"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "7dd5653463a98c6804ad18d39abff492be6f3b90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26895c21eb10cfd6c00285e13e6f13a75cccc1d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26895c21eb10cfd6c00285e13e6f13a75cccc1d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26895c21eb10cfd6c00285e13e6f13a75cccc1d9", "patch": "@@ -1,3 +1,9 @@\n+2017-11-03  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_legitimate_constant_p):\n+\tReturn true for more constants, symbols and label references.\n+\t(aarch64_valid_floating_const): Remove unused function.\n+\n 2017-11-03  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tPR target/82786"}, {"sha": "71c3693ad7de9b2b0bbacdfc95eb0c62ef5ba5f5", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26895c21eb10cfd6c00285e13e6f13a75cccc1d9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26895c21eb10cfd6c00285e13e6f13a75cccc1d9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=26895c21eb10cfd6c00285e13e6f13a75cccc1d9", "patch": "@@ -10371,51 +10371,49 @@ aarch64_legitimate_pic_operand_p (rtx x)\n   return true;\n }\n \n-/* Return true if X holds either a quarter-precision or\n-     floating-point +0.0 constant.  */\n-static bool\n-aarch64_valid_floating_const (rtx x)\n-{\n-  if (!CONST_DOUBLE_P (x))\n-    return false;\n-\n-  /* This call determines which constants can be used in mov<mode>\n-     as integer moves instead of constant loads.  */\n-  if (aarch64_float_const_rtx_p (x))\n-    return true;\n-\n-  return aarch64_float_const_representable_p (x);\n-}\n+/* Implement TARGET_LEGITIMATE_CONSTANT_P hook.  Return true for constants\n+   that should be rematerialized rather than spilled.  */\n \n static bool\n aarch64_legitimate_constant_p (machine_mode mode, rtx x)\n {\n+  /* Support CSE and rematerialization of common constants.  */\n+  if (CONST_INT_P (x) || CONST_DOUBLE_P (x) || GET_CODE (x) == CONST_VECTOR)\n+    return true;\n+\n   /* Do not allow vector struct mode constants.  We could support\n      0 and -1 easily, but they need support in aarch64-simd.md.  */\n-  if (TARGET_SIMD && aarch64_vect_struct_mode_p (mode))\n+  if (aarch64_vect_struct_mode_p (mode))\n     return false;\n \n-  /* For these cases we never want to use a literal load.\n-     As such we have to prevent the compiler from forcing these\n-     to memory.  */\n-  if ((GET_CODE (x) == CONST_VECTOR\n-       && aarch64_simd_valid_immediate (x, mode, false, NULL))\n-      || CONST_INT_P (x)\n-      || aarch64_valid_floating_const (x)\n-      || aarch64_can_const_movi_rtx_p (x, mode)\n-      || aarch64_float_const_rtx_p (x))\n-\treturn !targetm.cannot_force_const_mem (mode, x);\n+  /* Do not allow wide int constants - this requires support in movti.  */\n+  if (CONST_WIDE_INT_P (x))\n+    return false;\n \n-  if (GET_CODE (x) == HIGH\n-      && aarch64_valid_symref (XEXP (x, 0), GET_MODE (XEXP (x, 0))))\n-    return true;\n+  /* Do not allow const (plus (anchor_symbol, const_int)).  */\n+  if (GET_CODE (x) == CONST)\n+    {\n+      rtx offset;\n+\n+      split_const (x, &x, &offset);\n+\n+      if (SYMBOL_REF_P (x) && SYMBOL_REF_ANCHOR_P (x))\n+\treturn false;\n+    }\n+\n+  if (GET_CODE (x) == HIGH)\n+    x = XEXP (x, 0);\n \n   /* Treat symbols as constants.  Avoid TLS symbols as they are complex,\n      so spilling them is better than rematerialization.  */\n   if (SYMBOL_REF_P (x) && !SYMBOL_REF_TLS_MODEL (x))\n     return true;\n \n-  return aarch64_constant_address_p (x);\n+  /* Label references are always constant.  */\n+  if (GET_CODE (x) == LABEL_REF)\n+    return true;\n+\n+  return false;\n }\n \n rtx"}]}