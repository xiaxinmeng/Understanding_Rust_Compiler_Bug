{"sha": "c9d440223594cbf955177628d62a667727a1780a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlkNDQwMjIzNTk0Y2JmOTU1MTc3NjI4ZDYyYTY2NzcyN2ExNzgwYQ==", "commit": {"author": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2020-09-02T07:12:21Z"}, "committer": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2020-09-02T07:12:21Z"}, "message": "bpf: use elfos.h\n\nBPF is an ELF-based target, so it definitely benefits from using\nelfos.h.  This patch makes the target to use it, and removes\nsuperfluous definitions from bpf.h which are better defined in\nelfos.h.\n\nNote that BPF, despite being an ELF target, doesn't use DWARF.  At\nsome point it will generate DWARF when generating xBPF (-mxbpf) and\nBTF when generating plain eBPF, but for the time being it just\ngenerates stabs.\n\n2020-09-02  Jose E. Marchesi  <jemarch@gnu.org>\n\n\tgcc/\n\t* config.gcc: Use elfos.h in bpf-*-* targets.\n\t* config/bpf/bpf.h (MAX_OFILE_ALIGNMENT): Remove definition.\n\t(COMMON_ASM_OP): Likewise.\n\t(INIT_SECTION_ASM_OP): Likewise.\n\t(FINI_SECTION_ASM_OP): Likewise.\n\t(ASM_OUTPUT_SKIP): Likewise.\n\t(ASM_OUTPUT_ALIGNED_COMMON): Likewise.\n\t(ASM_OUTPUT_ALIGNED_LOCAL): Likewise.", "tree": {"sha": "7a5ef353670592b1b3b1771eda2bc9c2e50de1b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a5ef353670592b1b3b1771eda2bc9c2e50de1b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9d440223594cbf955177628d62a667727a1780a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d440223594cbf955177628d62a667727a1780a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9d440223594cbf955177628d62a667727a1780a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d440223594cbf955177628d62a667727a1780a/comments", "author": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1a4a8a03f700744c59e5b5e562fee0c33859c2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a4a8a03f700744c59e5b5e562fee0c33859c2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1a4a8a03f700744c59e5b5e562fee0c33859c2c"}], "stats": {"total": 47, "additions": 10, "deletions": 37}, "files": [{"sha": "797f0ad5eddd6763579e0d4fe8993fd545892b12", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d440223594cbf955177628d62a667727a1780a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d440223594cbf955177628d62a667727a1780a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=c9d440223594cbf955177628d62a667727a1780a", "patch": "@@ -1491,6 +1491,7 @@ bfin*-*)\n \tuse_gcc_stdint=wrap\n \t;;\n bpf-*-*)\n+        tm_file=\"elfos.h ${tm_file}\"\n         tmake_file=\"${tmake_file} bpf/t-bpf\"\n         use_collect2=no\n         extra_headers=\"bpf-helpers.h\""}, {"sha": "940029ba606c16b9affea59d24ca8e168e84f474", "filename": "gcc/config/bpf/bpf.h", "status": "modified", "additions": 9, "deletions": 37, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9d440223594cbf955177628d62a667727a1780a/gcc%2Fconfig%2Fbpf%2Fbpf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9d440223594cbf955177628d62a667727a1780a/gcc%2Fconfig%2Fbpf%2Fbpf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbpf%2Fbpf.h?ref=c9d440223594cbf955177628d62a667727a1780a", "patch": "@@ -50,11 +50,6 @@\n \tM = DImode;\t\t\t\t\\\n     } while (0)\n \n-/* Biggest alignment supported by the object file format of this\n-   machine.  In this case this is ELF.  Use the same definition than\n-   in elfos.h */\n-#define MAX_OFILE_ALIGNMENT (((unsigned int) 1 << 28) * 8)\n-\n /* Align argument parameters on the stack to 64-bit, at a minimum.  */\n #define PARM_BOUNDARY 64\n \n@@ -241,6 +236,15 @@ enum reg_class\n /**** Debugging Info ****/\n \n /* We cannot support DWARF2 because of the limitations of eBPF.  */\n+\n+/* elfos.h insists in using DWARF.  Undo that here.  */\n+#ifdef DWARF2_DEBUGGING_INFO\n+# undef DWARF2_DEBUGGING_INFO\n+#endif\n+#ifdef PREFERRED_DEBUGGING_TYPE\n+# undef PREFERRED_DEBUGGING_TYPE\n+#endif\n+\n #define DBX_DEBUGGING_INFO\n \n /**** Stack Layout and Calling Conventions.  */\n@@ -387,7 +391,6 @@ enum reg_class\n #define TEXT_SECTION_ASM_OP \"\\t.text\"\n #define DATA_SECTION_ASM_OP \"\\t.data\"\n #define BSS_SECTION_ASM_OP \"\\t.bss\"\n-#define COMMON_ASM_OP \"\\t.common\\t\"\n \n /**** Defining the Output Assembler Language.  */\n \n@@ -413,18 +416,6 @@ enum reg_class\n \n /*** Output of Uninitialized Variables.  */\n \n-/* How to output an assembler line to define a local common\n-   symbol.  */\n-\n-#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n-      assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      fprintf ((FILE), \",%u,%u\\n\", (int)(SIZE), (ALIGN) / (BITS_PER_UNIT)); \\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* A C statement (sans semicolon) to output to the stdio stream\n    FILE the assembler definition of uninitialized global DECL named\n    NAME whose size is SIZE bytes and alignment is ALIGN bytes.\n@@ -435,15 +426,6 @@ enum reg_class\n     ASM_OUTPUT_ALIGNED_LOCAL (FILE, NAME, SIZE, ALIGN);\t\t\\\n   } while (0)\n \n-/* This says how to output an assembler line to define a local common\n-   symbol.  */\n-\n-#define ASM_OUTPUT_ALIGNED_LOCAL(FILE,NAME,SIZE,ALIGN)\t\t\t\\\n-  ( fputs (\"\\t.lcomm \", (FILE)),\t\t\t\t\t\\\n-    assemble_name ((FILE), (NAME)),\t\t\t\t\t\\\n-    fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\t\t\\\n-\t     (SIZE), ((ALIGN) / BITS_PER_UNIT)))\n-\n /*** Output and Generation of Labels.  */\n \n /* Globalizing directive for a label.  */\n@@ -458,11 +440,6 @@ enum reg_class\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\t\t\\\n   sprintf ((LABEL), \"*%s%s%ld\", (LOCAL_LABEL_PREFIX), (PREFIX), (long)(NUM))\n \n-/*** Macros Controlling Initialization Routines.  */\n-\n-#define INIT_SECTION_ASM_OP \"\\t.init\"\n-#define FINI_SECTION_ASM_OP \"\\t.fini\"\n-\n /*** Output of Assembler Instructions.  */\n \n #define REGISTER_NAMES\t\t\t\t\t\t\\\n@@ -488,11 +465,6 @@ enum reg_class\n #define ASM_OUTPUT_ALIGN(STREAM,LOG)\t\t\\\n   fprintf (STREAM, \"\\t.align\\t%d\\n\", (LOG))\n \n-/* This is how to output an assembler line\n-   that says to advance the location counter by SIZE bytes.  */\n-#define ASM_OUTPUT_SKIP(FILE,SIZE)\t\t\\\n-  fprintf (FILE, \"\\t.skip\\t\" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\", (SIZE))\n-\n /**** Miscellaneous Parameters.  */\n \n /* Specify the machine mode that this machine uses for the index in"}]}