{"sha": "e21b52afe92f2596a5b0963d6efb5be44ab3b227", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIxYjUyYWZlOTJmMjU5NmE1YjA5NjNkNmVmYjViZTQ0YWIzYjIyNw==", "commit": {"author": {"name": "Hongtao Liu", "email": "hongtao.liu@intel.com", "date": "2019-06-26T04:46:29Z"}, "committer": {"name": "Hongtao Liu", "email": "liuhongt@gcc.gnu.org", "date": "2019-06-26T04:46:29Z"}, "message": "Enable GCC support for AVX512_VP2INTERSECT which will be in tigerlaker.\n\nThere are two instructions for AVX512_VP2INTERSECT:\nVP2INTERSECTD and VP2INTERSECTQ.\n\ngcc/\n2019-06-05  Hongtao Liu  <hongtao.liu@intel.com>\n\n\t* common/config/i386/i386-common.c\n\t(OPTION_MASK_ISA_AVX512VP2INTERSECT_SET,\n\tOPTION_MASK_ISA_AVX512VP2INTERSECT_UNSET): New macros.\n\t(OPTION_MASK_ISA2_AVX512F_UNSET): Add\n\tOPTION_MASK_ISA_AVX512VP2INTERSECT_UNSET.\n\t(ix86_handle_option): Handle -mavx512vp2intersect.\n\t* config/i386/avx512vp2intersectintrin.h: New.\n\t* config/i386/avx512vp2intersectvlintrin.h: New.\n\t* config/i386/cpuid.h (bit_AVX512VP2INTERSECT): New.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n\tAVX512VP2INTERSECT.\n\t* config/i386/i386-builtin-types.def: Add new types.\n\t* config/i386/i386-builtin.def: Add new builtins.\n\t* config/i386/i386-builtins.c: (enum processor_features): Add\n\tF_AVX512VP2INTERSECT.\n\t(static const _isa_names_table isa_names_table): Ditto.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n\t__AVX512VP2INTERSECT__.\n\t* config/i386/i386-expand.c (ix86_expand_builtin): Expand\n\tIX86_BUILTIN_2INTERSECTD512, IX86_BUILTIN_2INTERSECTQ512,\n\tIX86_BUILTIN_2INTERSECTD256, IX86_BUILTIN_2INTERSECTQ256,\n\tIX86_BUILTIN_2INTERSECTD128, IX86_BUILTIN_2INTERSECTQ128.\n\t* config/i386/i386-modes.def (P2QI, P2HI): New modes.\n\t* config/i386/i386-options.c (ix86_target_string): Add\n\t-mavx512vp2intersect.\n\t(ix86_option_override_internal): Handle AVX512VP2INTERSECT.\n\t* config/i386/i386.c (ix86_hard_regno_nregs): Allocate two regs for\n\tP2HImode and P2QImode.\n\t(ix86_hard_regno_mode_ok): Register pair only starts at even hardreg\n\tnumber for P2QImode and P2HImode.\n\t(ix86_regmode_natural_size): New function.\n\t* config/i386/i386.h (TARGET_AVX512VP2INTERSECT,\n\tTARGET_AVX512VP2INTERSECT_P, PTA_AVX512VP2INTERSECT\n\tREGMODE_NATURAL_SIZE, MASK_PAIR_REGNO_P): New.\n\t* config/i386/i386-protos.h (ix86_regmode_natural_size): Declare\n\t* config/i386/i386.opt: Add -mavx512vp2intersect.\n\t* config/i386/immintrin.h: Include avx512vp2intersectintrin.h and\n\tavx512vp2intersectvlintrin.h.\n\t* config/i386/sse.md (define_c_enum \"unspec\"): Add UNSPEC_VP2INTERSECT.\n\t(define_mode_iterator VI48_AVX512VP2VL): New.\n\t(avx512vp2intersect_2intersect<mode>,\n\tavx512vp2intersect_2intersectv16si): New define_insn patterns.\n\t* config.gcc: Add avx512vp2intersectvlintrin.h and\n\tavx512vp2intersectintrin.h to extra_headers.\n\t* doc/invoke.texi: Document -mavx512vp2intersect.\n\ngcc/testsuite\n2019-06-06  Hongtao Liu  <hongtao.liu@intel.com>\n\t    Olga Makhotina  <olga.makhotina@intel.com>\n\n\t* gcc.target/i386/avx512-check.h: Handle bit_AVX512VP2INTERSECT.\n\t* gcc.target/i386/avx512vp2intersect-2intersect-1a.c: New test.\n\t* gcc.target/i386/avx512vp2intersect-2intersect-1b.c: Likewise.\n\t* gcc.target/i386/avx512vp2intersect-2intersectvl-1a.c: Likewise.\n\t* gcc.target/i386/avx512vp2intersect-2intersectvl-1b.c: Likewise.\n\t* gcc.target/i386/sse-12.c: Add -mavx512vp2intersect.\n\t* gcc.target/i386/sse-13.c: Likewsie.\n\t* gcc.target/i386/sse-14.c: Likewise.\n\t* gcc.target/i386/sse-22.c: Likewise.\n\t* gcc.target/i386/sse-23.c: Likewise.\n\t* g++.dg/other/i386-2.C: Likewise.\n\t* g++.dg/other/i386-3.C: Likewise.\n\nCo-Authored-By: H.J. Lu <hongjiu.lu@intel.com>\nCo-Authored-By: Olga Makhotina <olga.makhotina@intel.com>\n\nFrom-SVN: r272668", "tree": {"sha": "699ae022ef64b1f8800a1c563659e4cac0d64f24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/699ae022ef64b1f8800a1c563659e4cac0d64f24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e21b52afe92f2596a5b0963d6efb5be44ab3b227", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e21b52afe92f2596a5b0963d6efb5be44ab3b227", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e21b52afe92f2596a5b0963d6efb5be44ab3b227", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e21b52afe92f2596a5b0963d6efb5be44ab3b227/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b48826985b8b0bba790688ebe717cf626019a415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48826985b8b0bba790688ebe717cf626019a415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b48826985b8b0bba790688ebe717cf626019a415"}], "stats": {"total": 511, "additions": 485, "deletions": 26}, "files": [{"sha": "7945fdca7dafd1572a981fcd2625b13848ef63fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -1,3 +1,53 @@\n+2019-06-25  Hongtao Liu  <hongtao.liu@intel.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\t    Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* common/config/i386/i386-common.c\n+\t(OPTION_MASK_ISA_AVX512VP2INTERSECT_SET,\n+\tOPTION_MASK_ISA_AVX512VP2INTERSECT_UNSET): New macros.\n+\t(OPTION_MASK_ISA2_AVX512F_UNSET): Add\n+\tOPTION_MASK_ISA_AVX512VP2INTERSECT_UNSET.\n+\t(ix86_handle_option): Handle -mavx512vp2intersect.\n+\t* config/i386/avx512vp2intersectintrin.h: New.\n+\t* config/i386/avx512vp2intersectvlintrin.h: New.\n+\t* config/i386/cpuid.h (bit_AVX512VP2INTERSECT): New.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n+\tAVX512VP2INTERSECT.\n+\t* config/i386/i386-builtin-types.def: Add new types.\n+\t* config/i386/i386-builtin.def: Add new builtins.\n+\t* config/i386/i386-builtins.c: (enum processor_features): Add\n+\tF_AVX512VP2INTERSECT.\n+\t(static const _isa_names_table isa_names_table): Ditto.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n+\t__AVX512VP2INTERSECT__.\n+\t* config/i386/i386-expand.c (ix86_expand_builtin): Expand\n+\tIX86_BUILTIN_2INTERSECTD512, IX86_BUILTIN_2INTERSECTQ512,\n+\tIX86_BUILTIN_2INTERSECTD256, IX86_BUILTIN_2INTERSECTQ256,\n+\tIX86_BUILTIN_2INTERSECTD128, IX86_BUILTIN_2INTERSECTQ128.\n+\t* config/i386/i386-modes.def (P2QI, P2HI): New modes.\n+\t* config/i386/i386-options.c (ix86_target_string): Add\n+\t-mavx512vp2intersect.\n+\t(ix86_option_override_internal): Handle AVX512VP2INTERSECT.\n+\t* config/i386/i386.c (ix86_hard_regno_nregs): Allocate two regs for\n+\tP2HImode and P2QImode.\n+\t(ix86_hard_regno_mode_ok): Register pair only starts at even hardreg\n+\tnumber for P2QImode and P2HImode.\n+\t(ix86_regmode_natural_size): New function.\n+\t* config/i386/i386.h (TARGET_AVX512VP2INTERSECT,\n+\tTARGET_AVX512VP2INTERSECT_P, PTA_AVX512VP2INTERSECT\n+\tREGMODE_NATURAL_SIZE, MASK_PAIR_REGNO_P): New.\n+\t* config/i386/i386-protos.h (ix86_regmode_natural_size): Declare\n+\t* config/i386/i386.opt: Add -mavx512vp2intersect.\n+\t* config/i386/immintrin.h: Include avx512vp2intersectintrin.h and\n+\tavx512vp2intersectvlintrin.h.\n+\t* config/i386/sse.md (define_c_enum \"unspec\"): Add UNSPEC_VP2INTERSECT.\n+\t(define_mode_iterator VI48_AVX512VP2VL): New.\n+\t(avx512vp2intersect_2intersect<mode>,\n+\tavx512vp2intersect_2intersectv16si): New define_insn patterns.\n+\t* config.gcc: Add avx512vp2intersectvlintrin.h and\n+\tavx512vp2intersectintrin.h to extra_headers.\n+\t* doc/invoke.texi: Document -mavx512vp2intersect.\n+\n 2019-06-25  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/rs6000/darwin.h (ENDFILE_SPEC): New."}, {"sha": "a394f874fe44a70678373d54aec5ade9d4ce66f0", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -100,6 +100,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_XSAVEC_SET \\\n   (OPTION_MASK_ISA_XSAVEC | OPTION_MASK_ISA_XSAVE_SET)\n #define OPTION_MASK_ISA_CLWB_SET OPTION_MASK_ISA_CLWB\n+#define OPTION_MASK_ISA_AVX512VP2INTERSECT_SET OPTION_MASK_ISA_AVX512VP2INTERSECT\n \n /* SSE4 includes both SSE4.1 and SSE4.2. -msse4 should be the same\n    as -msse4.2.  */\n@@ -240,6 +241,7 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA_WAITPKG_UNSET OPTION_MASK_ISA_WAITPKG\n #define OPTION_MASK_ISA_CLDEMOTE_UNSET OPTION_MASK_ISA_CLDEMOTE\n #define OPTION_MASK_ISA_ENQCMD_UNSET OPTION_MASK_ISA_ENQCMD\n+#define OPTION_MASK_ISA_AVX512VP2INTERSECT_UNSET OPTION_MASK_ISA_AVX512VP2INTERSECT\n \n /* SSE4 includes both SSE4.1 and SSE4.2.  -mno-sse4 should the same\n    as -mno-sse4.1. */\n@@ -282,7 +284,8 @@ along with GCC; see the file COPYING3.  If not see\n #define OPTION_MASK_ISA2_AVX512F_UNSET \\\n   (OPTION_MASK_ISA_AVX512BF16_UNSET \\\n    | OPTION_MASK_ISA_AVX5124FMAPS_UNSET \\\n-   | OPTION_MASK_ISA_AVX5124VNNIW_UNSET)\n+   | OPTION_MASK_ISA_AVX5124VNNIW_UNSET \\\n+   | OPTION_MASK_ISA_AVX512VP2INTERSECT_UNSET)\n #define OPTION_MASK_ISA2_GENERAL_REGS_ONLY_UNSET \\\n   (OPTION_MASK_ISA2_AVX512F_UNSET)\n \n@@ -880,6 +883,23 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mavx512vp2intersect:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX512VP2INTERSECT_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |=\n+\t    OPTION_MASK_ISA_AVX512VP2INTERSECT_SET;\n+\t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512F_SET;\n+\t  opts->x_ix86_isa_flags_explicit |= OPTION_MASK_ISA_AVX512F_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_AVX512VP2INTERSECT_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |=\n+\t    OPTION_MASK_ISA_AVX512VP2INTERSECT_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mfma:\n       if (value)\n \t{"}, {"sha": "fe010d7e543c6b18e1d0a665b3252971b67ae719", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -408,7 +408,7 @@ i[34567]86-*-*)\n \t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\n \t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\n \t\t       waitpkgintrin.h cldemoteintrin.h avx512bf16vlintrin.h avx512bf16intrin.h\n-\t\t       enqcmdintrin.h\"\n+\t\t       enqcmdintrin.h avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -441,7 +441,7 @@ x86_64-*-*)\n \t\t       avx512vpopcntdqvlintrin.h avx512bitalgintrin.h\n \t\t       pconfigintrin.h wbnoinvdintrin.h movdirintrin.h\n \t\t       waitpkgintrin.h cldemoteintrin.h avx512bf16vlintrin.h avx512bf16intrin.h\n-\t\t       enqcmdintrin.h\"\n+\t\t       enqcmdintrin.h avx512vp2intersectintrin.h avx512vp2intersectvlintrin.h\"\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h"}, {"sha": "60cb52c2ee09598da0c6f4fc78fb96ca1099debc", "filename": "gcc/config/i386/avx512vp2intersectintrin.h", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Favx512vp2intersectintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Favx512vp2intersectintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vp2intersectintrin.h?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -0,0 +1,35 @@\n+#if !defined _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512vp2intersectintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVX512VP2INTERSECTINTRIN_H_INCLUDED\n+#define _AVX512VP2INTERSECTINTRIN_H_INCLUDED\n+\n+#if !defined(__AVX512VP2INTERSECT__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512vp2intersect\")\n+#define __DISABLE_AVX512VP2INTERSECT__\n+#endif /* __AVX512VP2INTERSECT__ */\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_2intersect_epi32 (__m512i __A, __m512i __B, __mmask16 *__U,\n+\t\t\t __mmask16 *__M)\n+{\n+  __builtin_ia32_2intersectd512 (__U, __M, (__v16si) __A, (__v16si) __B);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_2intersect_epi64 (__m512i __A, __m512i __B, __mmask8 *__U,\n+\t\t\t __mmask8 *__M)\n+{\n+  __builtin_ia32_2intersectq512 (__U, __M, (__v8di) __A, (__v8di) __B);\n+}\n+\n+#ifdef __DISABLE_AVX512VP2INTERSECT__\n+#undef __DISABLE_AVX512VP2INTERSECT__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512VP2INTERSECT__ */\n+\n+#endif /* _AVX512VP2INTERSECTINTRIN_H_INCLUDED */"}, {"sha": "26eee36602c04873634e1d9e9314f6f6a1dd9f47", "filename": "gcc/config/i386/avx512vp2intersectvlintrin.h", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Favx512vp2intersectvlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Favx512vp2intersectvlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vp2intersectvlintrin.h?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -0,0 +1,49 @@\n+#if !defined _IMMINTRIN_H_INCLUDED\n+#error \"Never use <avx512vp2intersectintrin.h> directly; include <immintrin.h> instead.\"\n+#endif\n+\n+#ifndef _AVX512VP2INTERSECTVLINTRIN_H_INCLUDED\n+#define _AVX512VP2INTERSECTVLINTRIN_H_INCLUDED\n+\n+#if !defined(__AVX512VP2INTERSECT__) || !defined(__AVX512VL__)\n+#pragma GCC push_options\n+#pragma GCC target(\"avx512vp2intersect,avx512vl\")\n+#define __DISABLE_AVX512VP2INTERSECTVL__\n+#endif /* __AVX512VP2INTERSECTVL__ */\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_2intersect_epi32 (__m128i __A, __m128i __B, __mmask8 *__U, __mmask8 *__M)\n+{\n+  __builtin_ia32_2intersectd128 (__U, __M, (__v4si) __A, (__v4si) __B);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_2intersect_epi32 (__m256i __A, __m256i __B, __mmask8 *__U,\n+\t\t\t __mmask8 *__M)\n+{\n+  __builtin_ia32_2intersectd256 (__U, __M, (__v8si) __A, (__v8si) __B);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_2intersect_epi64 (__m128i __A, __m128i __B, __mmask8 *__U, __mmask8 *__M)\n+{\n+  __builtin_ia32_2intersectq128 (__U, __M, (__v2di) __A, (__v2di) __B);\n+}\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_2intersect_epi64 (__m256i __A, __m256i __B, __mmask8 *__U,\n+\t\t\t __mmask8 *__M)\n+{\n+  __builtin_ia32_2intersectq256 (__U, __M, (__v4di) __A, (__v4di) __B);\n+}\n+\n+#ifdef __DISABLE_AVX512VP2INTERSECTVL__\n+#undef __DISABLE_AVX512VP2INTERSECTVL__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_AVX512VP2INTERSECTVL__ */\n+\n+#endif /* _AVX512VP2INTERSECTVLINTRIN_H_INCLUDED */"}, {"sha": "6108577cc3b64840015bd4b130b9d5cea24f161e", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -119,6 +119,7 @@\n /* %edx */\n #define bit_AVX5124VNNIW (1 << 2)\n #define bit_AVX5124FMAPS (1 << 3)\n+#define bit_AVX512VP2INTERSECT\t(1 << 8)\n #define bit_IBT\t(1 << 20)\n #define bit_PCONFIG\t(1 << 18)\n /* XFEATURE_ENABLED_MASK register bits (%eax == 13, %ecx == 0) */"}, {"sha": "a9d89817202112f7b12e9f7af7cb7d034e9bf935", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -423,6 +423,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_shstk = 0;\n   unsigned int has_avx512vnni = 0, has_vaes = 0;\n   unsigned int has_vpclmulqdq = 0;\n+  unsigned int has_avx512vp2intersect = 0;\n   unsigned int has_movdiri = 0, has_movdir64b = 0;\n   unsigned int has_enqcmd = 0;\n   unsigned int has_waitpkg = 0;\n@@ -532,6 +533,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \n       has_avx5124vnniw = edx & bit_AVX5124VNNIW;\n       has_avx5124fmaps = edx & bit_AVX5124FMAPS;\n+      has_avx512vp2intersect = edx & bit_AVX512VP2INTERSECT;\n \n       has_shstk = ecx & bit_SHSTK;\n       has_pconfig = edx & bit_PCONFIG;\n@@ -1143,6 +1145,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *shstk = has_shstk ? \" -mshstk\" : \" -mno-shstk\";\n       const char *vaes = has_vaes ? \" -mvaes\" : \" -mno-vaes\";\n       const char *vpclmulqdq = has_vpclmulqdq ? \" -mvpclmulqdq\" : \" -mno-vpclmulqdq\";\n+      const char *avx512vp2intersect = has_avx512vp2intersect ? \" -mavx512vp2intersect\" : \" -mno-avx512vp2intersect\";\n       const char *avx512bitalg = has_avx512bitalg ? \" -mavx512bitalg\" : \" -mno-avx512bitalg\";\n       const char *movdiri = has_movdiri ? \" -mmovdiri\" : \" -mno-movdiri\";\n       const char *movdir64b = has_movdir64b ? \" -mmovdir64b\" : \" -mno-movdir64b\";\n@@ -1165,7 +1168,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\tclwb, mwaitx, clzero, pku, rdpid, gfni, shstk,\n \t\t\tavx512vbmi2, avx512vnni, vaes, vpclmulqdq,\n \t\t\tavx512bitalg, movdiri, movdir64b, waitpkg, cldemote,\n-\t\t\tptwrite, avx512bf16, enqcmd,\n+\t\t\tptwrite, avx512bf16, enqcmd, avx512vp2intersect,\n \t\t\tNULL);\n     }\n "}, {"sha": "221c0e7bb7324c477c48c05d3df2ac431de3100d", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -975,6 +975,13 @@ DEF_FUNCTION_TYPE (QI, V8SF, INT, UQI)\n DEF_FUNCTION_TYPE (QI, V4SF, INT, UQI)\n DEF_FUNCTION_TYPE (VOID, PV32QI, V32HI, USI)\n \n+DEF_FUNCTION_TYPE (VOID, PUHI, PUHI, V16SI, V16SI)\n+DEF_FUNCTION_TYPE (VOID, PUQI, PUQI, V8SI, V8SI)\n+DEF_FUNCTION_TYPE (VOID, PUQI, PUQI, V4SI, V4SI)\n+DEF_FUNCTION_TYPE (VOID, PUQI, PUQI, V8DI, V8DI)\n+DEF_FUNCTION_TYPE (VOID, PUQI, PUQI, V4DI, V4DI)\n+DEF_FUNCTION_TYPE (VOID, PUQI, PUQI, V2DI, V2DI)\n+\n DEF_FUNCTION_TYPE (V2DI, V2DI, V2DI, UINT, UINT)\n DEF_FUNCTION_TYPE (V4HI, HI, HI, HI, HI)\n "}, {"sha": "aad62f3e40102267bbe4699831149385d9c6ac94", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -288,6 +288,14 @@ BDESC (OPTION_MASK_ISA_AVX512BW, 0, CODE_FOR_avx512bw_loadv64qi_mask, \"__builtin\n BDESC (OPTION_MASK_ISA_AVX512BW, 0, CODE_FOR_avx512bw_storev32hi_mask, \"__builtin_ia32_storedquhi512_mask\", IX86_BUILTIN_STOREDQUHI512_MASK, UNKNOWN, (int) VOID_FTYPE_PSHORT_V32HI_USI)\n BDESC (OPTION_MASK_ISA_AVX512BW, 0, CODE_FOR_avx512bw_storev64qi_mask, \"__builtin_ia32_storedquqi512_mask\", IX86_BUILTIN_STOREDQUQI512_MASK, UNKNOWN, (int) VOID_FTYPE_PCHAR_V64QI_UDI)\n \n+/* AVX512VP2INTERSECT */\n+BDESC (0, OPTION_MASK_ISA_AVX512VP2INTERSECT, CODE_FOR_nothing, \"__builtin_ia32_2intersectd512\", IX86_BUILTIN_2INTERSECTD512, UNKNOWN, (int) VOID_FTYPE_PUHI_PUHI_V16SI_V16SI)\n+BDESC (0, OPTION_MASK_ISA_AVX512VP2INTERSECT, CODE_FOR_nothing, \"__builtin_ia32_2intersectq512\", IX86_BUILTIN_2INTERSECTQ512, UNKNOWN, (int) VOID_FTYPE_PUQI_PUQI_V8DI_V8DI)\n+BDESC (0, OPTION_MASK_ISA_AVX512VP2INTERSECT, CODE_FOR_nothing, \"__builtin_ia32_2intersectd256\", IX86_BUILTIN_2INTERSECTD256, UNKNOWN, (int) VOID_FTYPE_PUQI_PUQI_V8SI_V8SI)\n+BDESC (0, OPTION_MASK_ISA_AVX512VP2INTERSECT, CODE_FOR_nothing, \"__builtin_ia32_2intersectq256\", IX86_BUILTIN_2INTERSECTQ256, UNKNOWN, (int) VOID_FTYPE_PUQI_PUQI_V4DI_V4DI)\n+BDESC (0, OPTION_MASK_ISA_AVX512VP2INTERSECT, CODE_FOR_nothing, \"__builtin_ia32_2intersectd128\", IX86_BUILTIN_2INTERSECTD128, UNKNOWN, (int) VOID_FTYPE_PUQI_PUQI_V4SI_V4SI)\n+BDESC (0, OPTION_MASK_ISA_AVX512VP2INTERSECT, CODE_FOR_nothing, \"__builtin_ia32_2intersectq128\", IX86_BUILTIN_2INTERSECTQ128, UNKNOWN, (int) VOID_FTYPE_PUQI_PUQI_V2DI_V2DI)\n+\n /* AVX512VL */\n BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_loadv16hi_mask, \"__builtin_ia32_loaddquhi256_mask\", IX86_BUILTIN_LOADDQUHI256_MASK, UNKNOWN, (int) V16HI_FTYPE_PCSHORT_V16HI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_loadv8hi_mask, \"__builtin_ia32_loaddquhi128_mask\", IX86_BUILTIN_LOADDQUHI128_MASK, UNKNOWN, (int) V8HI_FTYPE_PCSHORT_V8HI_UQI)"}, {"sha": "9b6a59dd13651102c2be323f82bdadecb4149944", "filename": "gcc/config/i386/i386-builtins.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.c?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -1924,6 +1924,7 @@ enum processor_features\n   F_VPCLMULQDQ,\n   F_AVX512VNNI,\n   F_AVX512BITALG,\n+  F_AVX512VP2INTERSECT,\n   F_AVX512BF16,\n   F_MAX\n };\n@@ -2070,6 +2071,7 @@ static const _isa_names_table isa_names_table[] =\n   {\"vpclmulqdq\", F_VPCLMULQDQ, P_ZERO},\n   {\"avx512vnni\", F_AVX512VNNI, P_ZERO},\n   {\"avx512bitalg\", F_AVX512BITALG, P_ZERO},\n+  {\"avx512vp2intersect\",F_AVX512VP2INTERSECT, P_ZERO},\n   {\"avx512bf16\", F_AVX512BF16, P_ZERO}\n };\n "}, {"sha": "ec5f15bee261626b35bc1631afafea5472eb65d0", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -404,6 +404,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n \n   if (isa_flag2 & OPTION_MASK_ISA_WBNOINVD)\n     def_or_undef (parse_in, \"__WBNOINVD__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_AVX512VP2INTERSECT)\n+    def_or_undef (parse_in, \"__AVX512VP2INTERSECT__\");\n   if (isa_flag & OPTION_MASK_ISA_MMX)\n     def_or_undef (parse_in, \"__MMX__\");\n   if (isa_flag & OPTION_MASK_ISA_3DNOW)"}, {"sha": "d50b811d863fbb23e80439bc919c39cb34530bd1", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -11339,6 +11339,79 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       emit_move_insn (target, op0);\n       return target;\n \n+    case IX86_BUILTIN_2INTERSECTD512:\n+    case IX86_BUILTIN_2INTERSECTQ512:\n+    case IX86_BUILTIN_2INTERSECTD256:\n+    case IX86_BUILTIN_2INTERSECTQ256:\n+    case IX86_BUILTIN_2INTERSECTD128:\n+    case IX86_BUILTIN_2INTERSECTQ128:\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      arg1 = CALL_EXPR_ARG (exp, 1);\n+      arg2 = CALL_EXPR_ARG (exp, 2);\n+      arg3 = CALL_EXPR_ARG (exp, 3);\n+      op0 = expand_normal (arg0);\n+      op1 = expand_normal (arg1);\n+      op2 = expand_normal (arg2);\n+      op3 = expand_normal (arg3);\n+\n+      if (!address_operand (op0, VOIDmode))\n+\t{\n+\t  op0 = convert_memory_address (Pmode, op0);\n+\t  op0 = copy_addr_to_reg (op0);\n+\t}\n+      if (!address_operand (op1, VOIDmode))\n+\t{\n+\t  op1 = convert_memory_address (Pmode, op1);\n+\t  op1 = copy_addr_to_reg (op1);\n+\t}\n+\n+      switch (fcode)\n+\t{\n+\tcase IX86_BUILTIN_2INTERSECTD512:\n+\t  mode4 = P2HImode;\n+\t  icode = CODE_FOR_avx512vp2intersect_2intersectv16si;\n+\t  break;\n+\tcase IX86_BUILTIN_2INTERSECTQ512:\n+\t  mode4 = P2QImode;\n+\t  icode = CODE_FOR_avx512vp2intersect_2intersectv8di;\n+\t  break;\n+\tcase IX86_BUILTIN_2INTERSECTD256:\n+\t  mode4 = P2QImode;\n+\t  icode = CODE_FOR_avx512vp2intersect_2intersectv8si;\n+\t  break;\n+\tcase IX86_BUILTIN_2INTERSECTQ256:\n+\t  mode4 = P2QImode;\n+\t  icode = CODE_FOR_avx512vp2intersect_2intersectv4di;\n+\t  break;\n+\tcase IX86_BUILTIN_2INTERSECTD128:\n+\t  mode4 = P2QImode;\n+\t  icode = CODE_FOR_avx512vp2intersect_2intersectv4si;\n+\t  break;\n+\tcase IX86_BUILTIN_2INTERSECTQ128:\n+\t  mode4 = P2QImode;\n+\t  icode = CODE_FOR_avx512vp2intersect_2intersectv2di;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n+      mode2 = insn_data[icode].operand[1].mode;\n+      mode3 = insn_data[icode].operand[2].mode;\n+      if (!insn_data[icode].operand[1].predicate (op2, mode2))\n+\top2 = copy_to_mode_reg (mode2, op2);\n+      if (!insn_data[icode].operand[2].predicate (op3, mode3))\n+\top3 = copy_to_mode_reg (mode3, op3);\n+\n+      op4 = gen_reg_rtx (mode4);\n+      emit_insn (GEN_FCN (icode) (op4, op2, op3));\n+      mode0 = mode4 == P2HImode ? HImode : QImode;\n+      emit_move_insn (gen_rtx_MEM (mode0, op0),\n+\t\t      gen_lowpart (mode0, op4));\n+      emit_move_insn (gen_rtx_MEM (mode0, op1),\n+\t\t      gen_highpart (mode0, op4));\n+\n+      return 0;\n+\n     case IX86_BUILTIN_RDPMC:\n     case IX86_BUILTIN_RDTSC:\n     case IX86_BUILTIN_RDTSCP:"}, {"sha": "e1b86c8631057f2b74452023c4dcadf69110a69f", "filename": "gcc/config/i386/i386-modes.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-modes.def?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -101,6 +101,12 @@ VECTOR_MODE (INT, SI, 64);    /* \t\t  V64SI */\n INT_MODE (OI, 32);\n INT_MODE (XI, 64);\n \n+/* Modes needs a consecutive register pair.\n+   Note that Using PARTIAL_INT_MODE but not INT_MODE is to avoid mode promotion\n+   issues.  */\n+PARTIAL_INT_MODE (HI, 16, P2QI);\n+PARTIAL_INT_MODE (SI, 32, P2HI);\n+\n /* Keep the OI and XI modes from confusing the compiler into thinking\n    that these modes could actually be used for computation.  They are\n    only holders for vectors during data movement.  */"}, {"sha": "6f8851aaf863b9f3941e7dff58152772414a9c5c", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -199,6 +199,7 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-mrdpid\",\tOPTION_MASK_ISA_RDPID },\n     { \"-mpconfig\",\tOPTION_MASK_ISA_PCONFIG },\n     { \"-mwbnoinvd\",     OPTION_MASK_ISA_WBNOINVD },\n+    { \"-mavx512vp2intersect\", OPTION_MASK_ISA_AVX512VP2INTERSECT },\n     { \"-msgx\",\t\tOPTION_MASK_ISA_SGX },\n     { \"-mavx5124vnniw\", OPTION_MASK_ISA_AVX5124VNNIW },\n     { \"-mavx5124fmaps\", OPTION_MASK_ISA_AVX5124FMAPS },\n@@ -852,6 +853,7 @@ ix86_valid_target_attribute_inner_p (tree fndecl, tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"avx512vbmi2\", OPT_mavx512vbmi2),\n     IX86_ATTR_ISA (\"avx512vnni\", OPT_mavx512vnni),\n     IX86_ATTR_ISA (\"avx512bitalg\", OPT_mavx512bitalg),\n+    IX86_ATTR_ISA (\"avx512vp2intersect\", OPT_mavx512vp2intersect),\n \n     IX86_ATTR_ISA (\"avx512vbmi\", OPT_mavx512vbmi),\n     IX86_ATTR_ISA (\"avx512ifma\", OPT_mavx512ifma),\n@@ -2027,6 +2029,10 @@ ix86_option_override_internal (bool main_args_p,\n \t    & OPTION_MASK_ISA_AVX512BITALG))\n \t  opts->x_ix86_isa_flags |= OPTION_MASK_ISA_AVX512BITALG;\n \n+\tif (((processor_alias_table[i].flags & PTA_AVX512VP2INTERSECT) != 0)\n+\t    && !(opts->x_ix86_isa_flags2_explicit\n+\t\t & OPTION_MASK_ISA_AVX512VP2INTERSECT))\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_AVX512VP2INTERSECT;\n \tif (((processor_alias_table[i].flags & PTA_AVX5124VNNIW) != 0)\n \t    && !(opts->x_ix86_isa_flags2_explicit\n \t\t & OPTION_MASK_ISA_AVX5124VNNIW))"}, {"sha": "2faa9f15830872e184c767216d6f958a38ef4a36", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -47,6 +47,7 @@ extern void ix86_reset_previous_fndecl (void);\n \n extern bool ix86_using_red_zone (void);\n \n+extern unsigned int ix86_regmode_natural_size (machine_mode);\n #ifdef RTX_CODE\n extern int standard_80387_constant_p (rtx);\n extern const char *standard_80387_constant_opcode (rtx);"}, {"sha": "1ca1712183dce70c236c55d44ad21059c900d95c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -18674,11 +18674,23 @@ ix86_hard_regno_nregs (unsigned int regno, machine_mode mode)\n     }\n   if (COMPLEX_MODE_P (mode))\n     return 2;\n+  /* Register pair for mask registers.  */\n+  if (mode == P2QImode || mode == P2HImode)\n+    return 2;\n   if (mode == V64SFmode || mode == V64SImode)\n     return 4;\n   return 1;\n }\n \n+/* Implement REGMODE_NATURAL_SIZE(MODE).  */\n+unsigned int\n+ix86_regmode_natural_size (machine_mode mode)\n+{\n+  if (mode == P2HImode || mode == P2QImode)\n+    return GET_MODE_SIZE (mode) / 2;\n+  return UNITS_PER_WORD;\n+}\n+\n /* Implement TARGET_HARD_REGNO_MODE_OK.  */\n \n static bool\n@@ -18688,15 +18700,24 @@ ix86_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n   if (CC_REGNO_P (regno))\n     return GET_MODE_CLASS (mode) == MODE_CC;\n   if (GET_MODE_CLASS (mode) == MODE_CC\n-      || GET_MODE_CLASS (mode) == MODE_RANDOM\n-      || GET_MODE_CLASS (mode) == MODE_PARTIAL_INT)\n+      || GET_MODE_CLASS (mode) == MODE_RANDOM)\n     return false;\n   if (STACK_REGNO_P (regno))\n     return VALID_FP_MODE_P (mode);\n   if (MASK_REGNO_P (regno))\n-    return (VALID_MASK_REG_MODE (mode)\n-\t    || (TARGET_AVX512BW\n-\t\t&& VALID_MASK_AVX512BW_MODE (mode)));\n+    {\n+      /* Register pair only starts at even register number.  */\n+      if ((mode == P2QImode || mode == P2HImode))\n+\treturn MASK_PAIR_REGNO_P(regno);\n+\n+      return (VALID_MASK_REG_MODE (mode)\n+\t      || (TARGET_AVX512BW\n+\t\t  && VALID_MASK_AVX512BW_MODE (mode)));\n+    }\n+\n+  if (GET_MODE_CLASS (mode) == MODE_PARTIAL_INT)\n+    return false;\n+\n   if (SSE_REGNO_P (regno))\n     {\n       /* We implement the move patterns for all vector modes into and"}, {"sha": "5e670b5fd11b58beccd47e07ed204b303b887e51", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -93,6 +93,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_AVX512VNNI_P(x) TARGET_ISA_AVX512VNNI_P(x)\n #define TARGET_AVX512BITALG\tTARGET_ISA_AVX512BITALG\n #define TARGET_AVX512BITALG_P(x) TARGET_ISA_AVX512BITALG_P(x)\n+#define TARGET_AVX512VP2INTERSECT\tTARGET_ISA_AVX512VP2INTERSECT\n+#define TARGET_AVX512VP2INTERSECT_P(x) TARGET_ISA_AVX512VP2INTERSECT_P(x)\n #define TARGET_FMA\tTARGET_ISA_FMA\n #define TARGET_FMA_P(x)\tTARGET_ISA_FMA_P(x)\n #define TARGET_SSE4A\tTARGET_ISA_SSE4A\n@@ -1125,6 +1127,8 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n #define HARD_REGNO_NREGS_WITH_PADDING(REGNO, MODE) ((MODE) == XFmode ? 4 : 8)\n \n+#define REGMODE_NATURAL_SIZE(MODE) ix86_regmode_natural_size (MODE)\n+\n #define VALID_AVX256_REG_MODE(MODE)\t\t\t\t\t\\\n   ((MODE) == V32QImode || (MODE) == V16HImode || (MODE) == V8SImode\t\\\n    || (MODE) == V4DImode || (MODE) == V2TImode || (MODE) == V8SFmode\t\\\n@@ -1509,6 +1513,7 @@ enum reg_class\n \n #define MASK_REG_P(X) (REG_P (X) && MASK_REGNO_P (REGNO (X)))\n #define MASK_REGNO_P(N) IN_RANGE ((N), FIRST_MASK_REG, LAST_MASK_REG)\n+#define MASK_PAIR_REGNO_P(N) ((((N) - FIRST_MASK_REG) & 1) == 0)\n \n #define MMX_REG_P(X) (REG_P (X) && MMX_REGNO_P (REGNO (X)))\n #define MMX_REGNO_P(N) IN_RANGE ((N), FIRST_MMX_REG, LAST_MMX_REG)\n@@ -2362,6 +2367,7 @@ const wide_int_bitmask PTA_AVX512BITALG (0, HOST_WIDE_INT_1U << 5);\n const wide_int_bitmask PTA_RDPID (0, HOST_WIDE_INT_1U << 6);\n const wide_int_bitmask PTA_PCONFIG (0, HOST_WIDE_INT_1U << 7);\n const wide_int_bitmask PTA_WBNOINVD (0, HOST_WIDE_INT_1U << 8);\n+const wide_int_bitmask PTA_AVX512VP2INTERSECT (0, HOST_WIDE_INT_1U << 9);\n const wide_int_bitmask PTA_WAITPKG (0, HOST_WIDE_INT_1U << 9);\n const wide_int_bitmask PTA_PTWRITE (0, HOST_WIDE_INT_1U << 10);\n const wide_int_bitmask PTA_AVX512BF16 (0, HOST_WIDE_INT_1U << 11);"}, {"sha": "599e799ea5ef73f83f4b464afb4c790acf9fcd16", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -749,6 +749,10 @@ mavx512bitalg\n Target Report Mask(ISA_AVX512BITALG) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX, AVX2, AVX512F and AVX512BITALG built-in functions and code generation.\n \n+mavx512vp2intersect\n+Target Report Mask(ISA_AVX512VP2INTERSECT) Var(ix86_isa_flags2) Save\n+Support AVX512VP2INTERSECT built-in functions and code generation.\n+\n mfma\n Target Report Mask(ISA_FMA) Var(ix86_isa_flags) Save\n Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, AVX and FMA built-in functions and code generation."}, {"sha": "743aa7451bc864f84789906ab7dcee198debd2e9", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -96,6 +96,10 @@\n \n #include <avx512bitalgintrin.h>\n \n+#include <avx512vp2intersectintrin.h>\n+\n+#include <avx512vp2intersectvlintrin.h>\n+\n #include <shaintrin.h>\n \n #include <lzcntintrin.h>"}, {"sha": "abf7d987e12897783318557567958d1481e987f3", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -188,6 +188,9 @@\n   ;; For AVX512BITALG support\n   UNSPEC_VPSHUFBIT\n \n+  ;; For VP2INTERSECT support\n+  UNSPEC_VP2INTERSECT\n+\n   ;; For AVX512BF16 support\n   UNSPEC_VCVTNE2PS2BF16\n   UNSPEC_VCVTNEPS2BF16\n@@ -22523,6 +22526,30 @@\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_mode_iterator VI48_AVX512VP2VL\n+  [V8DI\n+  (V4DI \"TARGET_AVX512VL\") (V2DI \"TARGET_AVX512VL\")\n+  (V8SI \"TARGET_AVX512VL\") (V4SI \"TARGET_AVX512VL\")])\n+\n+(define_insn \"avx512vp2intersect_2intersect<mode>\"\n+  [(set (match_operand:P2QI 0 \"register_operand\" \"=k\")\n+\t(unspec:P2QI\n+\t  [(match_operand:VI48_AVX512VP2VL 1 \"register_operand\" \"v\")\n+\t   (match_operand:VI48_AVX512VP2VL 2 \"vector_operand\" \"vm\")]\n+\t  UNSPEC_VP2INTERSECT))]\n+  \"TARGET_AVX512VP2INTERSECT\"\n+  \"vp2intersect<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr (\"prefix\") (\"evex\"))])\n+\n+(define_insn \"avx512vp2intersect_2intersectv16si\"\n+  [(set (match_operand:P2HI 0 \"register_operand\" \"=k\")\n+\t(unspec:P2HI [(match_operand:V16SI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V16SI 2 \"vector_operand\" \"vm\")]\n+\t\tUNSPEC_VP2INTERSECT))]\n+  \"TARGET_AVX512VP2INTERSECT\"\n+  \"vp2intersectd\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr (\"prefix\") (\"evex\"))])\n+\n (define_mode_iterator BF16 [V32HI (V16HI \"TARGET_AVX512VL\") (V8HI \"TARGET_AVX512VL\")])\n ;; Converting from BF to SF\n (define_mode_attr bf16_cvt_2sf"}, {"sha": "e6d591cc13dedf2742cc8fd4711d077577f8408f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -1284,7 +1284,7 @@ See RS/6000 and PowerPC Options.\n -mshstk -mmanual-endbr -mforce-indirect-call  -mavx512vbmi2 -mavx512bf16 -menqcmd @gol\n -mvpclmulqdq  -mavx512bitalg  -mmovdiri  -mmovdir64b  -mavx512vpopcntdq @gol\n -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid @gol\n--mrdseed  -msgx @gol\n+-mrdseed  -msgx -mavx512vp2intersect@gol\n -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically  -mstringop-strategy=@var{alg} @gol\n -mmemcpy-strategy=@var{strategy}  -mmemset-strategy=@var{strategy} @gol\n@@ -28192,6 +28192,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mavx512vpopcntdq\n @opindex mavx512vpopcntdq\n @need 200\n+@itemx -mavx512vp2intersect\n+@opindex mavx512vp2intersect\n+@need 200\n @itemx -mavx5124fmaps\n @opindex mavx5124fmaps\n @need 200"}, {"sha": "fd34b5eceab8a0e24cd1c64827ef7dd821cf13e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -1,3 +1,19 @@\n+2019-06-06  Hongtao Liu  <hongtao.liu@intel.com>\n+\t    Olga Makhotina  <olga.makhotina@intel.com>\n+\n+\t* gcc.target/i386/avx512-check.h: Handle bit_AVX512VP2INTERSECT.\n+\t* gcc.target/i386/avx512vp2intersect-2intersect-1a.c: New test.\n+\t* gcc.target/i386/avx512vp2intersect-2intersect-1b.c: Likewise.\n+\t* gcc.target/i386/avx512vp2intersect-2intersectvl-1a.c: Likewise.\n+\t* gcc.target/i386/avx512vp2intersect-2intersectvl-1b.c: Likewise.\n+\t* gcc.target/i386/sse-12.c: Add -mavx512vp2intersect.\n+\t* gcc.target/i386/sse-13.c: Likewsie.\n+\t* gcc.target/i386/sse-14.c: Likewise.\n+\t* gcc.target/i386/sse-22.c: Likewise.\n+\t* gcc.target/i386/sse-23.c: Likewise.\n+\t* g++.dg/other/i386-2.C: Likewise.\n+\t* g++.dg/other/i386-3.C: Likewise.\n+\n 2019-06-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/90969"}, {"sha": "b83248044e45aa3908ca0d28b593774367139f72", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -1,12 +1,13 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt  -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n    popcntintrin.h, fmaintrin.h, pkuintrin.h, avx5124fmapsintrin.h,\n    avx5124vnniwintrin.h, avx512vpopcntdqintrin.h gfniintrin.h\n-   avx512bitalgintrin.h and mm_malloc.h.h are usable with -O\n-   -pedantic-errors.  */\n+   avx512bitalgintrin.h, avx512vp2intersectintrin.h,\n+   avx512vp2intersectvlintrin.h and mm_malloc.h.h are usable\n+   with -O -pedantic-errors.  */\n \n #include <x86intrin.h>\n "}, {"sha": "303bef47816ab927a3ea9697f5beca8e4b930e92", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -1,11 +1,12 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, mm3dnow.h, fma4intrin.h,\n    xopintrin.h, abmintrin.h, bmiintrin.h, tbmintrin.h, lwpintrin.h,\n    popcntintrin.h, fmaintrin.h, pkuintrin.h, avx5124fmapsintrin.h,\n    avx5124vnniwintrin.h, avx512vpopcntdqintrin.h gfniintrin.h\n-   avx512bitalgintrin.h and mm_malloc.h are usable with -O\n-   -fkeep-inline-functions.  */\n+   avx512bitalgintrin.h, avx512vp2intersectintrin.h,\n+   avx512vp2intersectvlintrin.h and mm_malloc.h are usable\n+   with -O -fkeep-inline-functions.  */\n \n #include <x86intrin.h>"}, {"sha": "0a377dba1d5bf2f1b106296facc7f56f951da178", "filename": "gcc/testsuite/gcc.target/i386/avx512-check.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512-check.h?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -92,6 +92,9 @@ main ()\n #endif\n #ifdef VPCLMULQDQ\n       && (ecx & bit_VPCLMULQDQ)\n+#endif\n+#ifdef AVX512VP2INTERSECT\n+      && (edx & bit_AVX512VP2INTERSECT)\n #endif\n       && avx512f_os_support ())\n     {"}, {"sha": "4ce04002fbd9a4b7c511c7240425011a06f9e7ee", "filename": "gcc/testsuite/gcc.target/i386/avx512vp2intersect-2intersect-1a.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vp2intersect-2intersect-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vp2intersect-2intersect-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vp2intersect-2intersect-1a.c?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vp2intersect\" } */\n+/* { dg-final { scan-assembler \"vp2intersectq\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\"} } */\n+/* { dg-final { scan-assembler \"vp2intersectd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\"} } */\n+\n+#include <x86intrin.h>\n+\n+__m512i a1, b1;\n+__m512i a2, b2;\n+__mmask8 m8, u8;\n+__mmask16 m16, u16;\n+\n+int foo ()\n+{\n+  _mm512_2intersect_epi64 (a1, b1, &u8, &m8);\n+  _mm512_2intersect_epi32 (a2, b2, &u16, &m16);\n+}\n+"}, {"sha": "5d718d30588e24bae9303db01a0cd4363887c27d", "filename": "gcc/testsuite/gcc.target/i386/avx512vp2intersect-2intersect-1b.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vp2intersect-2intersect-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vp2intersect-2intersect-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vp2intersect-2intersect-1b.c?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vp2intersect\" } */\n+\n+#define AVX512F\n+#include <x86intrin.h>\n+#include \"avx512f-helper.h\"\n+\n+void\n+TEST (void)\n+{\n+  __m512i a1 = _mm512_set_epi64 (10, 43, 253, 3566, 25, -253, -243, 3456);\n+  __m512i b1 = _mm512_set_epi64 (43, 100, 3566, 2353, -253, -25, 3456, 243);\n+  __m512i a2 = _mm512_set_epi32 (21, 22, 23, 24, 25, 26, 27, 28,\n+\t\t\t       11, 12, 13, 14, 15, 16, 17, 18);\n+  __m512i b2 = _mm512_set_epi32 (22, 211, 24, 213, 26, 215, 28, 217,\n+\t\t\t\t 12, 111, 14, 113, 16, 115, 18, 117);\n+  __mmask8 u8 = 0, m8 = 0;\n+  __mmask16 u16 = 0, m16 = 0;\n+\n+  _mm512_2intersect_epi64 (a1, b1, &u8, &m8);\n+  /* u8 = 01010101, m8 = 10101010.  */\n+  if (u8 != 0x55 || m8 != 0xaa)\n+    abort();\n+  _mm512_2intersect_epi32 (a2, b2, &u16, &m16);\n+  /* u8 = 0101010101010101, m8 = 1010101010101010.  */\n+  if (u16 != 0x5555 || m16 != 0xaaaa)\n+    abort();\n+}"}, {"sha": "555f5aba477cca9d48a543ade2f9e6b6cf96f2cd", "filename": "gcc/testsuite/gcc.target/i386/avx512vp2intersect-2intersectvl-1a.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vp2intersect-2intersectvl-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vp2intersect-2intersectvl-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vp2intersect-2intersectvl-1a.c?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vp2intersect -mavx512vl\" } */\n+/* { dg-final { scan-assembler \"vp2intersectd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\"  } } */\n+/* { dg-final { scan-assembler \"vp2intersectd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\"  } } */\n+/* { dg-final { scan-assembler \"vp2intersectq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\"  } } */\n+/* { dg-final { scan-assembler \"vp2intersectq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\"  } } */\n+\n+#include <x86intrin.h>\n+\n+__m256i a2, b2;\n+__m128i a3, b3;\n+__mmask8 m0, m1, m2, m3, m4, m5, m6, m7;\n+\n+int foo ()\n+{\n+  _mm_2intersect_epi64 (a3, b3, &m0, &m1);\n+  _mm_2intersect_epi32 (a3, b3, &m2, &m3);\n+\n+  _mm256_2intersect_epi64 (a2, b2, &m4, &m5);\n+  _mm256_2intersect_epi32 (a2, b2, &m6, &m7);\n+}"}, {"sha": "ee3d237c86e7661dcf46f1b7fa830d50b95e1ab4", "filename": "gcc/testsuite/gcc.target/i386/avx512vp2intersect-2intersectvl-1b.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vp2intersect-2intersectvl-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vp2intersect-2intersectvl-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vp2intersect-2intersectvl-1b.c?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vp2intersect -mavx512vl\" } */\n+\n+#define AVX512F\n+#include <x86intrin.h>\n+#include \"avx512f-helper.h\"\n+\n+ void\n+ TEST (void)\n+{\n+  __m256i a1 = _mm256_set_epi64x (1, 2, 3, 4);\n+  __m256i b1 = _mm256_set_epi64x (2, 11, 4, 33);\n+  __m256i a2 = _mm256_set_epi32 (1, 2, 3, 4, 5, 6, 7, 8);\n+  __m256i b2 = _mm256_set_epi32 (2, 11, 4, 33, 6, 55, 8, 77);\n+  __m128i a3 = _mm_set_epi64x (13, 22);\n+  __m128i b3 = _mm_set_epi64x (22, 1434);\n+  __m128i a4 = _mm_set_epi32 (1, 2, 3, 4);\n+  __m128i b4 = _mm_set_epi32 (2, 11, 4, 33);\n+  __mmask8 m0, m1, m2, m3, m4, m5, m6, m7;\n+  m0 = m1 = m2 = m3 = m4 = m5 = m6 = m7 = 0;\n+\n+  _mm_2intersect_epi64 (a3, b3, &m0, &m1);\n+  /* m0 = ******01, m1 = ******10.  */\n+  if (m0 != 0x1 || m1 != 0x2)\n+    abort();\n+\n+  _mm_2intersect_epi32 (a4, b4, &m2, &m3);\n+  /* m2 = ****0101, m3 = ****1010.  */\n+  if (m2  != 0x5 || m3 != 0xa)\n+    abort();\n+\n+  _mm256_2intersect_epi64 (a1, b1, &m4, &m5);\n+  /* m4 = ****0101, m5 = ****1010.  */\n+  if (m4 != 0x5 || m5 != 0xa)\n+    abort();\n+\n+  _mm256_2intersect_epi32 (a2, b2, &m6, &m7);\n+  /* m0 = 01010101, m1 = 10101010.  */\n+  if (m6 != 0x55 || m7 != 0xaa)\n+    abort();\n+}"}, {"sha": "222675e98c6a48123da79531e5520dc2d2b554c5", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -3,7 +3,7 @@\n    popcntintrin.h gfniintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd -mavx512vp2intersect\" } */\n \n #include <x86intrin.h>\n "}, {"sha": "39b2d31578c67a1ee3be5e01fb7afce2f2cf150f", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512vl -mavx512dq -mavx512bw -mavx512vbmi -mavx512ifma -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mavx512vp2intersect -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mavx512bitalg -mpconfig -mwbnoinvd -mavx512bf16 -menqcmd\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "8795109e1b8b7c655270c7f54d1762d5a86a6dd6", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd\" } */\n+/* { dg-options \"-O0 -Werror-implicit-function-declaration -march=k8 -msse4a -m3dnow -mavx -mavx2 -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlzcnt -mbmi -mbmi2 -mtbm -mlwp -mfsgsbase -mrdrnd -mf16c -mfma -mrtm -mrdseed -mprfchw -madx -mfxsr -mxsaveopt -mavx512f -mavx512er -mavx512cd -mavx512pf -msha -mprefetchwt1 -mxsavec -mxsaves -mclflushopt -mavx512dq -mavx512bw -mavx512vl -mavx512ifma -mavx512vbmi -mavx5124fmaps -mavx5124vnniw -mavx512vpopcntdq -mclwb -mmwaitx -mclzero -mpku -msgx -mrdpid -mgfni -mpconfig -mwbnoinvd -mavx512vl -mavx512bf16 -menqcmd -mavx512vp2intersect\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}, {"sha": "1c786bb939206c47d40357d523b8f49bd097011e", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -10,8 +10,9 @@\n    mm3dnow.h, fma4intrin.h, xopintrin.h, abmintrin.h, bmiintrin.h,\n    tbmintrin.h, lwpintrin.h, popcntintrin.h, fmaintrin.h,\n    avx5124fmapsintrin.h, avx5124vnniwintrin.h, avx512vpopcntdqintrin.h,\n-   avx512bitalgintrin.h and mm_malloc.h that reference the proper builtin\n-   functions.\n+   avx512bitalgintrin.h, avx512vp2intersectintrin.h,\n+   avx512vp2intersectvlintrin.h and mm_malloc.h that reference the proper\n+   builtin functions.\n    Defining away \"extern\" and \"__inline\" results in all of them being\n    compiled as proper functions.  */\n \n@@ -101,7 +102,7 @@\n \n \n #ifndef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,avx512vl,avx512bw,avx512dq,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect\")\n #endif\n \n /* Following intrinsics require immediate arguments.  They\n@@ -218,7 +219,7 @@ test_4 (_mm_cmpestrz, int, __m128i, int, __m128i, int, 1)\n \n /* immintrin.h (AVX/AVX2/RDRND/FSGSBASE/F16C/RTM/AVX512F/SHA) */\n #ifdef DIFFERENT_PRAGMAS\n-#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16\")\n+#pragma GCC target (\"avx,avx2,rdrnd,fsgsbase,f16c,rtm,avx512f,avx512er,avx512cd,avx512pf,sha,avx512vl,avx512bw,avx512dq,avx512ifma,avx512vbmi,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,gfni,avx512bitalg,avx512bf16,avx512vp2intersect\")\n #endif\n #include <immintrin.h>\n test_1 (_cvtss_sh, unsigned short, float, 1)"}, {"sha": "7ea665de747a788280f07acda10bd0513685742e", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e21b52afe92f2596a5b0963d6efb5be44ab3b227/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=e21b52afe92f2596a5b0963d6efb5be44ab3b227", "patch": "@@ -9,8 +9,9 @@\n    mm3dnow.h, fma4intrin.h, xopintrin.h, abmintrin.h, bmiintrin.h,\n    tbmintrin.h, lwpintrin.h, popcntintrin.h, fmaintrin.h,\n    avx5124fmapsintrin.h, avx5124vnniwintrin.h, avx512vpopcntdqintrin.h,\n-   avx512bitalgintrin.h and mm_malloc.h that reference the proper builtin\n-   functions.\n+   avx512bitalgintrin.h, avx512vp2intersectintrin.h,\n+   avx512vp2intersectvlintrin.h and mm_malloc.h that reference the proper\n+   builtin functions.\n    Defining away \"extern\" and \"__inline\" results in all of them being\n    compiled as proper functions.  */\n \n@@ -696,6 +697,6 @@\n #define __builtin_ia32_vpclmulqdq_v2di(A, B, C)  __builtin_ia32_vpclmulqdq_v2di(A, B, 1) \n #define __builtin_ia32_vpclmulqdq_v8di(A, B, C)  __builtin_ia32_vpclmulqdq_v8di(A, B, 1) \n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd\")\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2,vpclmulqdq,avx512bitalg,pconfig,wbnoinvd,avx512bf16,enqcmd,avx512vp2intersect\")\n \n #include <x86intrin.h>"}]}