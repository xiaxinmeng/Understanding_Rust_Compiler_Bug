{"sha": "0df73beea03f9dc124dc6e98ec4bdeacca7a2eea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRmNzNiZWVhMDNmOWRjMTI0ZGM2ZTk4ZWM0YmRlYWNjYTdhMmVlYQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-15T20:10:45Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-24T14:50:45Z"}, "message": "c++: Fix verify_ctor_sanity ICE [PR96241]\n\nThe code added in r10-6437 caused us to create a CONSTRUCTOR when we're\n{}-initializing an aggregate.  Then we pass this new CONSTRUCTOR down to\ncxx_eval_constant_expression which, if the CONSTRUCTOR isn't TREE_CONSTANT\nor reduced_constant_expression_p, calls cxx_eval_bare_aggregate.  In\nthis case the CONSTRUCTOR wasn't reduced_constant_expression_p because\nfor r_c_e_p a CONST_DECL isn't good enough so it returns false.  So we\ngo to cxx_eval_bare_aggregate where we crash, because ctx->ctor wasn't\nset up properly.  So my fix is to do so.  Since we're value-initializing,\nI'm not setting CONSTRUCTOR_NO_CLEARING.  To avoid keeping a garbage\nconstructor around, I call free_constructor in case the evaluation did\nnot use it.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96241\n\t* constexpr.c (cxx_eval_array_reference): Set up ctx->ctor if we\n\tare initializing an aggregate.  Call free_constructor on the new\n\tCONSTRUCTOR if it isn't returned from cxx_eval_constant_expression.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96241\n\t* g++.dg/cpp0x/constexpr-96241.C: New test.\n\t* g++.dg/cpp1y/constexpr-96241.C: New test.", "tree": {"sha": "fe324c27c75d3c97ee0194901f8feb57492e5f6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe324c27c75d3c97ee0194901f8feb57492e5f6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0df73beea03f9dc124dc6e98ec4bdeacca7a2eea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df73beea03f9dc124dc6e98ec4bdeacca7a2eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0df73beea03f9dc124dc6e98ec4bdeacca7a2eea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0df73beea03f9dc124dc6e98ec4bdeacca7a2eea/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16e2427f50c208dfe07d07f18009969502c25dc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16e2427f50c208dfe07d07f18009969502c25dc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16e2427f50c208dfe07d07f18009969502c25dc8"}], "stats": {"total": 76, "additions": 74, "deletions": 2}, "files": [{"sha": "7ebdd308dcd67e3b2099f03f824cde031b6c9a53", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df73beea03f9dc124dc6e98ec4bdeacca7a2eea/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df73beea03f9dc124dc6e98ec4bdeacca7a2eea/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=0df73beea03f9dc124dc6e98ec4bdeacca7a2eea", "patch": "@@ -3657,15 +3657,22 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n      initializer, it's initialized from {}.  But use build_value_init\n      directly for non-aggregates to avoid creating a garbage CONSTRUCTOR.  */\n   tree val;\n+  constexpr_ctx new_ctx;\n   if (CP_AGGREGATE_TYPE_P (elem_type))\n     {\n       tree empty_ctor = build_constructor (init_list_type_node, NULL);\n       val = digest_init (elem_type, empty_ctor, tf_warning_or_error);\n+      new_ctx = *ctx;\n+      new_ctx.ctor = build_constructor (elem_type, NULL);\n+      ctx = &new_ctx;\n     }\n   else\n     val = build_value_init (elem_type, tf_warning_or_error);\n-  return cxx_eval_constant_expression (ctx, val, lval, non_constant_p,\n-\t\t\t\t       overflow_p);\n+  t = cxx_eval_constant_expression (ctx, val, lval, non_constant_p,\n+\t\t\t\t    overflow_p);\n+  if (CP_AGGREGATE_TYPE_P (elem_type) && t != ctx->ctor)\n+    free_constructor (ctx->ctor);\n+  return t;\n }\n \n /* Subroutine of cxx_eval_constant_expression."}, {"sha": "599405302cb2156675ddfcaee939587b84d4660c", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-96241.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df73beea03f9dc124dc6e98ec4bdeacca7a2eea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-96241.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df73beea03f9dc124dc6e98ec4bdeacca7a2eea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-96241.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-96241.C?ref=0df73beea03f9dc124dc6e98ec4bdeacca7a2eea", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/96241\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T, T...> struct S {};\n+template <typename T, T t> using U = S<T, __integer_pack(t)...>;\n+template <long... N> using f = S<unsigned long, N...>;\n+template <long N> using V = U<unsigned long, N>;\n+template <int N> struct A { typedef int type[N]; };\n+template <int N> struct B { typename A<N>::type k; };\n+template <typename T, int N, unsigned long... P>\n+constexpr B<N> bar(T (&arr)[N], f<P...>) {\n+  return {arr[P]...};\n+}\n+template <typename T, int N> constexpr B<N> foo(T (&arr)[N]) {\n+  return bar(arr, V<N>{});\n+}\n+constexpr char arr[2]{};\n+B<2> b = foo(arr);"}, {"sha": "107f2b09de95c72f3197e1f5929d70ab89b6b0dd", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-96241.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0df73beea03f9dc124dc6e98ec4bdeacca7a2eea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-96241.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0df73beea03f9dc124dc6e98ec4bdeacca7a2eea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-96241.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-96241.C?ref=0df73beea03f9dc124dc6e98ec4bdeacca7a2eea", "patch": "@@ -0,0 +1,47 @@\n+// PR c++/96241\n+// { dg-do compile { target c++14 } }\n+\n+#define assert(expr) static_assert (expr, #expr)\n+\n+enum E { o };\n+\n+struct S {\n+  int e = o;\n+};\n+\n+using T = S[3];\n+\n+constexpr struct S s[1][1][1] = { };\n+assert (0 == s[0][0][0].e);\n+\n+constexpr int\n+fn0 ()\n+{\n+  return T{}[0].e;\n+}\n+assert(fn0 () == 0);\n+\n+constexpr int\n+fn1 ()\n+{\n+  S d[1];\n+  int x = d[0].e;\n+  return x;\n+}\n+assert(fn1 () == 0);\n+\n+constexpr int\n+fn2 ()\n+{\n+  S d[1];\n+  return d[0].e;\n+}\n+assert(fn2 () == 0);\n+\n+constexpr int\n+fn3 ()\n+{\n+  struct X { int e = o; } d[1]{};\n+  return d[0].e;\n+}\n+assert(fn3 () == 0);"}]}