{"sha": "fcd7f76b289ddadbb67057154547d570b94f2b23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNkN2Y3NmIyODlkZGFkYmI2NzA1NzE1NDU0N2Q1NzBiOTRmMmIyMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-04T00:48:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-03-04T00:48:46Z"}, "message": "dwarf2out.c (dwarf2out_frame_debug): Add cast to silence warning.\n\n        * dwarf2out.c (dwarf2out_frame_debug): Add cast to silence warning.\n        (dwarf2out_decl): Functions can now have DECL_IGNORED_P.\n        (gen_decl_die): Likewise.\n        * dwarfout.c (dwarfout_file_scope_decl): Likewise.\n        (output_decl): Likewise.\n\n        * varasm.c (make_function_rtl): If we change the name used in the\n        rtl, update DECL_ASSEMBLER_NAME accordingly.\n        (make_decl_rtl): Likewise.\n\n        * toplev.c (rest_of_compilation): Tweak formatting.\n\n        * toplev.c (rest_of_compilation): find_loop_tree_blocks before\n        remove_unnecessary_notes.\n        (debug_ignore_block): New fn.\n        * toplev.h: Declare it.\n        * emit-rtl.c (remove_unncessary_notes): Call it.\n        * dwarf2out.c (dwarf2out_ignore_block): New fn.\n        * dwarf2out.h: Declare it.\n        * final.c (final_start_function): Don't call remove_unnecessary_notes\n        if we did insn scheduling.\n\nFrom-SVN: r32320", "tree": {"sha": "29b58916ce9e193f2b31a39bfb2eb5cdae4dfcef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29b58916ce9e193f2b31a39bfb2eb5cdae4dfcef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcd7f76b289ddadbb67057154547d570b94f2b23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcd7f76b289ddadbb67057154547d570b94f2b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcd7f76b289ddadbb67057154547d570b94f2b23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcd7f76b289ddadbb67057154547d570b94f2b23/comments", "author": null, "committer": null, "parents": [{"sha": "6db201439a6635a374ec572561d961c9cf734ee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db201439a6635a374ec572561d961c9cf734ee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6db201439a6635a374ec572561d961c9cf734ee2"}], "stats": {"total": 144, "additions": 93, "deletions": 51}, "files": [{"sha": "6cf650da74fb455f8b73f45995264a1d3d221950", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd7f76b289ddadbb67057154547d570b94f2b23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd7f76b289ddadbb67057154547d570b94f2b23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcd7f76b289ddadbb67057154547d570b94f2b23", "patch": "@@ -1,3 +1,27 @@\n+2000-03-03  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* dwarf2out.c (dwarf2out_frame_debug): Add cast to silence warning.\n+\t(dwarf2out_decl): Functions can now have DECL_IGNORED_P.\n+\t(gen_decl_die): Likewise.\n+\t* dwarfout.c (dwarfout_file_scope_decl): Likewise.\n+\t(output_decl): Likewise.\n+\n+\t* varasm.c (make_function_rtl): If we change the name used in the\n+\trtl, update DECL_ASSEMBLER_NAME accordingly.\n+\t(make_decl_rtl): Likewise.\n+\n+\t* toplev.c (rest_of_compilation): Tweak formatting.\n+\n+\t* toplev.c (rest_of_compilation): find_loop_tree_blocks before\n+\tremove_unnecessary_notes.\n+\t(debug_ignore_block): New fn.\n+\t* toplev.h: Declare it.\n+\t* emit-rtl.c (remove_unncessary_notes): Call it.\n+\t* dwarf2out.c (dwarf2out_ignore_block): New fn.\n+\t* dwarf2out.h: Declare it.\n+\t* final.c (final_start_function): Don't call remove_unnecessary_notes\n+\tif we did insn scheduling.\n+\n 2000-03-03  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cppinit.c (cpp_handle_option): Set opts->pedantic directly.\n@@ -10,7 +34,7 @@ Fri Mar  3 14:56:12 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n 2000-03-03  Jonathan Larmour  <jlarmour@cygnus.co.uk>\n \n-\t* config/mips/elf.h (CTOR_LISTS_DEFINED_EXTERNALLY): Added.\n+\t* mips/elf.h (CTOR_LISTS_DEFINED_EXTERNALLY): Added.\n \n 2000-03-03  Richard Henderson  <rth@cygnus.com>\n "}, {"sha": "cb8b7234c2721c385cc4eb3c13f5ee947f453a45", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd7f76b289ddadbb67057154547d570b94f2b23/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd7f76b289ddadbb67057154547d570b94f2b23/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=fcd7f76b289ddadbb67057154547d570b94f2b23", "patch": "@@ -1355,7 +1355,7 @@ dwarf2out_frame_debug (insn)\n     {\n       /* Set up state for generating call frame debug info.  */\n       lookup_cfa (&cfa_reg, &cfa_offset);\n-      if (cfa_reg != DWARF_FRAME_REGNUM (STACK_POINTER_REGNUM))\n+      if (cfa_reg != (unsigned long) DWARF_FRAME_REGNUM (STACK_POINTER_REGNUM))\n \tabort ();\n       cfa_reg = STACK_POINTER_REGNUM;\n       cfa_store_reg = cfa_reg;\n@@ -9296,12 +9296,8 @@ gen_decl_die (decl, context_die)\n   if (TREE_CODE (decl) == ERROR_MARK)\n     return;\n \n-  /* If this ..._DECL node is marked to be ignored, then ignore it. But don't \n-     ignore a function definition, since that would screw up our count of\n-     blocks, and that in turn will completely screw up the labels we will \n-     reference in subsequent DW_AT_low_pc and DW_AT_high_pc attributes (for\n-     subsequent blocks).  */\n-  if (DECL_IGNORED_P (decl) && TREE_CODE (decl) != FUNCTION_DECL)\n+  /* If this ..._DECL node is marked to be ignored, then ignore it.  */\n+  if (DECL_IGNORED_P (decl))\n     return;\n \n   switch (TREE_CODE (decl))\n@@ -9460,21 +9456,9 @@ dwarf2out_decl (decl)\n   if (TREE_CODE (decl) == ERROR_MARK)\n     return;\n \n-  /* If this ..._DECL node is marked to be ignored, then ignore it.  We gotta \n-     hope that the node in question doesn't represent a function definition.\n-     If it does, then totally ignoring it is bound to screw up our count of\n-     blocks, and that in turn will completely screw up the labels we will \n-     reference in subsequent DW_AT_low_pc and DW_AT_high_pc attributes (for\n-     subsequent blocks).  (It's too bad that BLOCK nodes don't carry their\n-     own sequence numbers with them!) */\n+  /* If this ..._DECL node is marked to be ignored, then ignore it.  */\n   if (DECL_IGNORED_P (decl))\n-    {\n-      if (TREE_CODE (decl) == FUNCTION_DECL\n-          && DECL_INITIAL (decl) != NULL)\n-\tabort ();\n-\n-      return;\n-    }\n+    return;\n \n   switch (TREE_CODE (decl))\n     {\n@@ -9594,6 +9578,33 @@ dwarf2out_end_block (blocknum)\n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, BLOCK_END_LABEL, blocknum);\n }\n \n+/* We've decided not to emit any debugging information for BLOCK; make\n+   sure that we don't end up with orphans as a result.  */\n+\n+void\n+dwarf2out_ignore_block (block)\n+     tree block;\n+{\n+  tree decl;\n+  for (decl = BLOCK_VARS (block); decl; decl = TREE_CHAIN (decl))\n+    {\n+      dw_die_ref die;\n+\n+      if (TREE_CODE (decl) == FUNCTION_DECL)\n+\tdie = lookup_decl_die (decl);\n+      else if (TREE_CODE (decl) == TYPE_DECL && TYPE_DECL_IS_STUB (decl))\n+\tdie = lookup_type_die (TREE_TYPE (decl));\n+      else\n+\tdie = NULL;\n+\n+      /* Just give them a dummy value for parent so dwarf2out_finish\n+\t doesn't blow up; we would use add_child_die if we really\n+\t wanted to add them to comp_unit_die's children.  */\n+      if (die && die->die_parent == 0)\n+\tdie->die_parent = comp_unit_die;\n+    }\n+}\n+\n /* Output a marker (i.e. a label) at a point in the assembly code which\n    corresponds to a given source level label.  */\n "}, {"sha": "d639eb94f99d52ea89be2e373663077d581419ec", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd7f76b289ddadbb67057154547d570b94f2b23/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd7f76b289ddadbb67057154547d570b94f2b23/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=fcd7f76b289ddadbb67057154547d570b94f2b23", "patch": "@@ -4787,13 +4787,9 @@ output_decl (decl, containing_scope)\n \t      && (TREE_CODE (TYPE_FIELDS (TREE_TYPE (decl))) == ERROR_MARK))))\n     return;\n   \n-  /* If this ..._DECL node is marked to be ignored, then ignore it.\n-     But don't ignore a function definition, since that would screw\n-     up our count of blocks, and that it turn will completely screw up the\n-     labels we will reference in subsequent AT_low_pc and AT_high_pc\n-     attributes (for subsequent blocks).  */\n+  /* If this ..._DECL node is marked to be ignored, then ignore it.  */\n \n-  if (DECL_IGNORED_P (decl) && TREE_CODE (decl) != FUNCTION_DECL)\n+  if (DECL_IGNORED_P (decl))\n     return;\n \n   switch (TREE_CODE (decl))\n@@ -5133,20 +5129,10 @@ dwarfout_file_scope_decl (decl, set_finalizing)\n   if (TREE_CODE (decl) == ERROR_MARK)\n     return;\n \n-  /* If this ..._DECL node is marked to be ignored, then ignore it.  We\n-     gotta hope that the node in question doesn't represent a function\n-     definition.  If it does, then totally ignoring it is bound to screw\n-     up our count of blocks, and that it turn will completely screw up the\n-     labels we will reference in subsequent AT_low_pc and AT_high_pc\n-     attributes (for subsequent blocks).  (It's too bad that BLOCK nodes\n-     don't carry their own sequence numbers with them!)  */\n+  /* If this ..._DECL node is marked to be ignored, then ignore it.  */\n \n   if (DECL_IGNORED_P (decl))\n-    {\n-      if (TREE_CODE (decl) == FUNCTION_DECL && DECL_INITIAL (decl) != NULL)\n-\tabort ();\n-      return;\n-    }\n+    return;\n \n   switch (TREE_CODE (decl))\n     {"}, {"sha": "f43a1814d1db1d9e8dda34e9b57ec14447c9da49", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd7f76b289ddadbb67057154547d570b94f2b23/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd7f76b289ddadbb67057154547d570b94f2b23/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=fcd7f76b289ddadbb67057154547d570b94f2b23", "patch": "@@ -2710,6 +2710,8 @@ remove_unncessary_notes ()\n \t\t     nesting structure.  */\n \t\t  if (NOTE_BLOCK (prev) != NOTE_BLOCK (insn))\n \t\t    abort ();\n+\n+\t\t  debug_ignore_block (NOTE_BLOCK (insn));\n \t\t  \n \t\t  remove_insn (prev);\n \t\t  remove_insn (insn);"}, {"sha": "d5a1a304c40d44ffb1d5c7747eb75fbe38627941", "filename": "gcc/final.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd7f76b289ddadbb67057154547d570b94f2b23/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd7f76b289ddadbb67057154547d570b94f2b23/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=fcd7f76b289ddadbb67057154547d570b94f2b23", "patch": "@@ -1644,7 +1644,10 @@ final_start_function (first, file, optimize)\n   if (write_symbols)\n     {\n       number_blocks (current_function_decl);\n-      remove_unncessary_notes ();\n+      /* Scheduling packs block notes together at the top of a basic block,\n+\t so we can't learn anything from them.  */\n+      if (! flag_schedule_insns && ! flag_schedule_insns_after_reload)\n+\tremove_unncessary_notes ();\n       /* We never actually put out begin/end notes for the top-level\n \t block in the function.  But, conceptually, that block is\n \t always needed.  */"}, {"sha": "05b15772071575e3894b8336eacc9b513da305db", "filename": "gcc/toplev.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd7f76b289ddadbb67057154547d570b94f2b23/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd7f76b289ddadbb67057154547d570b94f2b23/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=fcd7f76b289ddadbb67057154547d570b94f2b23", "patch": "@@ -2845,14 +2845,15 @@ rest_of_compilation (decl)\n      have been run to re-initialize it.  */\n   cse_not_expected = ! optimize;\n \n-  /* First, remove any notes we don't need.  That will make iterating\n+  /* First, make sure that NOTE_BLOCK is set correctly for each\n+     NOTE_INSN_BLOCK_BEG/NOTE_INSN_BLOCK_END note.  */\n+  find_loop_tree_blocks ();\n+\n+  /* Then remove any notes we don't need.  That will make iterating\n      over the instruction sequence faster, and allow the garbage\n      collector to reclaim the memory used by the notes.  */\n   remove_unncessary_notes ();\n \n-  /* We need to make sure that NOTE_BLOCK is set correctly\n-     for each NOTE_INSN_BLOCK_BEG/NOTE_INSN_BLOCK_END note.  */\n-  find_loop_tree_blocks ();\n   /* In function-at-a-time mode, we do not attempt to keep the BLOCK\n      tree in sensible shape.  So, we just recalculate it here.  */\n   if (cfun->x_whole_function_mode_p)\n@@ -2928,17 +2929,15 @@ rest_of_compilation (decl)\n \t for those functions that need to be output.  Also defer those\n \t functions that we are supposed to defer.  */\n \n-      if (inlinable)\n-\tDECL_DEFER_OUTPUT (decl) = 1;\n-\n-      if (DECL_DEFER_OUTPUT (decl)\n+      if (inlinable\n \t  || (DECL_INLINE (decl)\n \t      && ((! TREE_PUBLIC (decl) && ! TREE_ADDRESSABLE (decl)\n \t\t   && ! flag_keep_inline_functions)\n \t\t  || DECL_EXTERNAL (decl))))\n-\t{\n-\t  DECL_DEFER_OUTPUT (decl) = 1;\n+\tDECL_DEFER_OUTPUT (decl) = 1;\n \n+      if (DECL_DEFER_OUTPUT (decl))\n+\t{\n \t  /* If -Wreturn-type, we have to do a bit of compilation.\n \t     However, if we just fall through we will call\n \t     save_for_inline_copying() which results in excessive\n@@ -5160,3 +5159,17 @@ debug_undef (lineno, buffer)\n     dwarf2out_undef (lineno, buffer);\n #endif /* DWARF2_DEBUGGING_INFO */\n }\n+\n+/* Tell the debugging backend that we've decided not to emit any\n+   debugging information for BLOCK, so it can clean up after any local\n+   classes or nested functions.  */\n+\n+void\n+debug_ignore_block (block)\n+     tree block;\n+{\n+#ifdef DWARF2_DEBUGGING_INFO\n+  if (write_symbols == DWARF2_DEBUG)\n+    dwarf2out_ignore_block (block);\n+#endif\n+}"}, {"sha": "49990a8597b84f27d7cd96bcfafb06e3a47c333c", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd7f76b289ddadbb67057154547d570b94f2b23/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd7f76b289ddadbb67057154547d570b94f2b23/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=fcd7f76b289ddadbb67057154547d570b94f2b23", "patch": "@@ -35,6 +35,7 @@ extern void debug_start_source_file\tPARAMS ((char *));\n extern void debug_end_source_file\tPARAMS ((unsigned));\n extern void debug_define\t\tPARAMS ((unsigned, char *));\n extern void debug_undef\t\t\tPARAMS ((unsigned, char *));\n+extern void debug_ignore_block\t\tPARAMS ((union tree_node *));\n extern void fatal\t\t\tPARAMS ((const char *, ...))\n   ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n extern void fatal_io_error\t\tPARAMS ((const char *))"}, {"sha": "751ce82b77c37afd948ac9972c8e54952140a9e9", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcd7f76b289ddadbb67057154547d570b94f2b23/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcd7f76b289ddadbb67057154547d570b94f2b23/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=fcd7f76b289ddadbb67057154547d570b94f2b23", "patch": "@@ -553,6 +553,7 @@ make_function_rtl (decl)\n \n   if (DECL_RTL (decl) == 0)\n     {\n+      DECL_ASSEMBLER_NAME (decl) = get_identifier (name);\n       DECL_RTL (decl)\n \t= gen_rtx_MEM (DECL_MODE (decl),\n \t\t       gen_rtx_SYMBOL_REF (Pmode, name));\n@@ -792,6 +793,7 @@ make_decl_rtl (decl, asmspec, top_level)\n \t      name = new_name;\n \t    }\n \n+\t  DECL_ASSEMBLER_NAME (decl) = get_identifier (name);\n \t  DECL_RTL (decl) = gen_rtx_MEM (DECL_MODE (decl),\n \t\t\t\t\t gen_rtx_SYMBOL_REF (Pmode, name));\n \t  MEM_ALIAS_SET (DECL_RTL (decl)) = get_alias_set (decl);"}]}