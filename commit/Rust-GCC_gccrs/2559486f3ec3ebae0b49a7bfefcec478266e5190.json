{"sha": "2559486f3ec3ebae0b49a7bfefcec478266e5190", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU1OTQ4NmYzZWMzZWJhZTBiNDlhN2JmZWZjZWM0NzgyNjZlNTE5MA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2002-08-27T20:30:26Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-08-27T20:30:26Z"}, "message": "std_limits.h (__glibcpp_f32_infinity_bytes, [...]): New macros.\n\n\t* include/std/std_limits.h (__glibcpp_f32_infinity_bytes,\n \t__glibcpp_f32_has_infinity, __glibcpp_f32_QNaN_bytes,\n\t__glibcpp_f32_has_QNaN, __glibcpp_f32_SNaN_bytes,\n\t__glibcpp_f32_has_SNaN, __glibcpp_f32_denorm_min_bytes,\n\t__glibcpp_f32_has_denorm, __glibcpp_f32_is_iec559,\n\t__glibcpp_f64_infinity_bytes,\n\t__glibcpp_f64_has_infinity, __glibcpp_f64_QNaN_bytes,\n\t__glibcpp_f64_has_QNaN, __glibcpp_f64_SNaN_bytes,\n\t__glibcpp_f64_has_SNaN, __glibcpp_f64_denorm_min_bytes,\n\t__glibcpp_f64_has_denorm, __glibcpp_f64_is_iec559,\n\t__glibcpp_f80_infinity_bytes,\n\t__glibcpp_f80_has_infinity, __glibcpp_f80_QNaN_bytes,\n\t__glibcpp_f80_has_QNaN, __glibcpp_f80_SNaN_bytes,\n\t__glibcpp_f80_has_SNaN, __glibcpp_f80_denorm_min_bytes,\n\t__glibcpp_f80_has_denorm, __glibcpp_f80_is_iec559,\n\t__glibcpp_f96_infinity_bytes,\n\t__glibcpp_f96_has_infinity, __glibcpp_f96_QNaN_bytes,\n\t__glibcpp_f96_has_QNaN, __glibcpp_f96_SNaN_bytes,\n\t__glibcpp_f96_has_SNaN, __glibcpp_f96_denorm_min_bytes,\n\t__glibcpp_f96_has_denorm, __glibcpp_f96_is_iec559,\n \t__glibcpp_f128_infinity_bytes,\n \t__glibcpp_f128_has_infinity, __glibcpp_f128_QNaN_bytes,\n\t__glibcpp_f128_has_QNaN, __glibcpp_f128_SNaN_bytes,\n\t__glibcpp_f128_has_SNaN, __glibcpp_f128_denorm_min_bytes,\n\t__glibcpp_f128_has_denorm, __glibcpp_f128_is_iec559,\n\t__glibcpp_float_infinity_bytes,\n\t__glibcpp_float_has_infinity, __glibcpp_float_QNaN_bytes,\n\t__glibcpp_float_has_QNaN, __glibcpp_float_SNaN_bytes,\n\t__glibcpp_float_has_SNaN, __glibcpp_float_denorm_min_bytes,\n\t__glibcpp_float_has_denorm, __glibcpp_float_is_iec559,\n\t__glibcpp_double_infinity_bytes,\n\t__glibcpp_double_has_infinity, __glibcpp_double_QNaN_bytes,\n\t__glibcpp_double_has_QNaN, __glibcpp_double_SNaN_bytes,\n\t__glibcpp_double_has_SNaN, __glibcpp_double_denorm_min_bytes,\n\t__glibcpp_double_has_denorm, __glibcpp_double_is_iec559,\n\t__glibcpp_long_double_infinity_bytes,\n\t__glibcpp_long_double_has_infinity, __glibcpp_long_double_QNaN_bytes,\n\t__glibcpp_long_double_has_QNaN, __glibcpp_long_double_SNaN_bytes,\n\t__glibcpp_long_double_has_SNaN, __glibcpp_long_double_denorm_min_bytes,\n\t__glibcpp_long_double_has_denorm, __glibcpp_long_double_is_iec559:\n\tNew macros.\n\t(__glibcpp_word_bits, __glibcpp_word): Likewise.\n\t(__glibcpp_byte): New typedef.\n\t(__float_storage, __double_storage, __long_double_storage): New types.\n\t(__glibcpp_float_infinity, __glibcpp_float_QNaN,\n\t__glibcpp_float_SNaN, __glibcpp_float_denorm_min): Now\n\tobjects. Declare.\n\t(__glibcpp_double_infinity, __glibcpp_double_QNaN,\n\t__glibcpp_double_SNaN, __glibcpp_double_denorm_min): Likewise.\n\t(__glibcpp_long_double_infinity, __glibcpp_long_double_QNaN,\n\t__glibcpp_long_double_SNaN, __glibcpp_long_double_denorm_min):\n\tLikewise.\n\n\t* src/limits.cc (__glibcpp_float_infinity, __glibcpp_float_QNaN,\n\t__glibcpp_float_SNaN, __glibcpp_float_denorm_min): Define.\n\t(__glibcpp_double_infinity, __glibcpp_double_QNaN,\n\t__glibcpp_double_SNaN, __glibcpp_double_denorm_min): Likewise.\n\t(__glibcpp_long_double_infinity, __glibcpp_long_double_QNaN,\n\t__glibcpp_long_double_SNaN, __glibcpp_long_double_denorm_min):\n\tLikewise.\n\nFrom-SVN: r56613", "tree": {"sha": "d423097187e2faf0d024fe26b52914e0ee847eee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d423097187e2faf0d024fe26b52914e0ee847eee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2559486f3ec3ebae0b49a7bfefcec478266e5190", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2559486f3ec3ebae0b49a7bfefcec478266e5190", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2559486f3ec3ebae0b49a7bfefcec478266e5190", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2559486f3ec3ebae0b49a7bfefcec478266e5190/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b43783196fe7e18c741444ccbb94ad6c7920814b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b43783196fe7e18c741444ccbb94ad6c7920814b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b43783196fe7e18c741444ccbb94ad6c7920814b"}], "stats": {"total": 618, "additions": 504, "deletions": 114}, "files": [{"sha": "86b6d841ff9c63fbf76bd3175654506d4d893e11", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2559486f3ec3ebae0b49a7bfefcec478266e5190/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2559486f3ec3ebae0b49a7bfefcec478266e5190/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2559486f3ec3ebae0b49a7bfefcec478266e5190", "patch": "@@ -1,3 +1,66 @@\n+2002-08-27  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* include/std/std_limits.h (__glibcpp_f32_infinity_bytes,\n+\t__glibcpp_f32_has_infinity, __glibcpp_f32_QNaN_bytes,\n+\t__glibcpp_f32_has_QNaN, __glibcpp_f32_SNaN_bytes,\n+\t__glibcpp_f32_has_SNaN, __glibcpp_f32_denorm_min_bytes,\n+\t__glibcpp_f32_has_denorm, __glibcpp_f32_is_iec559,\n+\t__glibcpp_f64_infinity_bytes,\n+\t__glibcpp_f64_has_infinity, __glibcpp_f64_QNaN_bytes,\n+\t__glibcpp_f64_has_QNaN, __glibcpp_f64_SNaN_bytes,\n+\t__glibcpp_f64_has_SNaN, __glibcpp_f64_denorm_min_bytes,\n+\t__glibcpp_f64_has_denorm, __glibcpp_f64_is_iec559,\n+\t__glibcpp_f80_infinity_bytes,\n+\t__glibcpp_f80_has_infinity, __glibcpp_f80_QNaN_bytes,\n+\t__glibcpp_f80_has_QNaN, __glibcpp_f80_SNaN_bytes,\n+\t__glibcpp_f80_has_SNaN, __glibcpp_f80_denorm_min_bytes,\n+\t__glibcpp_f80_has_denorm, __glibcpp_f80_is_iec559,\n+\t__glibcpp_f96_infinity_bytes,\n+\t__glibcpp_f96_has_infinity, __glibcpp_f96_QNaN_bytes,\n+\t__glibcpp_f96_has_QNaN, __glibcpp_f96_SNaN_bytes,\n+\t__glibcpp_f96_has_SNaN, __glibcpp_f96_denorm_min_bytes,\n+\t__glibcpp_f96_has_denorm, __glibcpp_f96_is_iec559,\n+\t__glibcpp_f128_infinity_bytes,\n+\t__glibcpp_f128_has_infinity, __glibcpp_f128_QNaN_bytes,\n+\t__glibcpp_f128_has_QNaN, __glibcpp_f128_SNaN_bytes,\n+\t__glibcpp_f128_has_SNaN, __glibcpp_f128_denorm_min_bytes,\n+\t__glibcpp_f128_has_denorm, __glibcpp_f128_is_iec559,\n+\t__glibcpp_float_infinity_bytes,\n+\t__glibcpp_float_has_infinity, __glibcpp_float_QNaN_bytes,\n+\t__glibcpp_float_has_QNaN, __glibcpp_float_SNaN_bytes,\n+\t__glibcpp_float_has_SNaN, __glibcpp_float_denorm_min_bytes,\n+\t__glibcpp_float_has_denorm, __glibcpp_float_is_iec559,\n+\t__glibcpp_double_infinity_bytes,\n+\t__glibcpp_double_has_infinity, __glibcpp_double_QNaN_bytes,\n+\t__glibcpp_double_has_QNaN, __glibcpp_double_SNaN_bytes,\n+\t__glibcpp_double_has_SNaN, __glibcpp_double_denorm_min_bytes,\n+\t__glibcpp_double_has_denorm, __glibcpp_double_is_iec559,\n+\t__glibcpp_long_double_infinity_bytes,\n+\t__glibcpp_long_double_has_infinity, __glibcpp_long_double_QNaN_bytes,\n+\t__glibcpp_long_double_has_QNaN, __glibcpp_long_double_SNaN_bytes,\n+\t__glibcpp_long_double_has_SNaN, __glibcpp_long_double_denorm_min_bytes,\n+\t__glibcpp_long_double_has_denorm, __glibcpp_long_double_is_iec559:\n+\tNew macros.\n+\t(__glibcpp_word_bits, __glibcpp_word): Likewise.\n+\t(__glibcpp_byte): New typedef.\n+\t(__float_storage, __double_storage, __long_double_storage): New types.\n+\t(__glibcpp_float_infinity, __glibcpp_float_QNaN,\n+\t__glibcpp_float_SNaN, __glibcpp_float_denorm_min): Now\n+\tobjects. Declare.\n+\t(__glibcpp_double_infinity, __glibcpp_double_QNaN,\n+\t__glibcpp_double_SNaN, __glibcpp_double_denorm_min): Likewise.\n+\t(__glibcpp_long_double_infinity, __glibcpp_long_double_QNaN,\n+\t__glibcpp_long_double_SNaN, __glibcpp_long_double_denorm_min):\n+\tLikewise.\n+\t\n+\t* src/limits.cc (__glibcpp_float_infinity, __glibcpp_float_QNaN,\n+\t__glibcpp_float_SNaN, __glibcpp_float_denorm_min): Define.\n+\t(__glibcpp_double_infinity, __glibcpp_double_QNaN,\n+\t__glibcpp_double_SNaN, __glibcpp_double_denorm_min): Likewise.\n+\t(__glibcpp_long_double_infinity, __glibcpp_long_double_QNaN,\n+\t__glibcpp_long_double_SNaN, __glibcpp_long_double_denorm_min):\n+\tLikewise.\n+\t\n 2002-08-25  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* include/std/std_limits.h: Indent conditional macro definitions."}, {"sha": "f1878a74faa8a71cb3378df917ee78251d049bfc", "filename": "libstdc++-v3/include/std/std_limits.h", "status": "modified", "additions": 418, "deletions": 114, "changes": 532, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2559486f3ec3ebae0b49a7bfefcec478266e5190/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2559486f3ec3ebae0b49a7bfefcec478266e5190/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h?ref=2559486f3ec3ebae0b49a7bfefcec478266e5190", "patch": "@@ -185,6 +185,36 @@\n #define __glibcpp_f32_min_exponent10 -37\n #define __glibcpp_f32_max_exponent 128\n #define __glibcpp_f32_max_exponent10 38\n+#if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n+#  define __glibcpp_f32_infinity_bytes { 0x7f800000 }\n+#  define __glibcpp_f32_has_infinity true\n+#  define __glibcpp_f32_QNaN_bytes { 0x7fc00000 }\n+#  define __glibcpp_f32_has_QNaN true\n+#  define __glibcpp_f32_SNaN_bytes { 0x7f800001 }\n+#  define __glibcpp_f32_has_SNaN true\n+#  define __glibcpp_f32_denorm_min_bytes { 0x00000001 }\n+#  define __glibcpp_f32_has_denorm denorm_present\n+#  define __glibcpp_f32_is_iec559  true\n+#endif\n+#ifndef __glibcpp_f32_infinity_bytes\n+#  define __glibcpp_f32_infinity_bytes { }\n+#  define __glibcpp_f32_has_infinity false\n+#endif\n+#ifndef __glibcpp_f32_QNaN_bytes\n+#  define __glibcpp_f32_QNaN_bytes { }\n+#  define __glibcpp_f32_has_QNaN false\n+#endif\n+#ifndef __glibcpp_f32_SNaN_bytes\n+#  define __glibcpp_f32_SNaN_bytes { }\n+#  define __glibcpp_f32_has_SNaN false\n+#endif\n+#ifndef __glibcpp_f32_denorm_min_bytes\n+#  define __glibcpp_f32_denorm_min_bytes { }\n+#  define __glibcpp_f32_has_denorm denorm_indeterminate\n+#endif\n+#ifndef __glibcpp_f32_is_iec559\n+#  define __glibcpp_f32_is_iec559 false\n+#endif \n #define __glibcpp_f64_min 2.2250738585072014e-308\n #define __glibcpp_f64_max 1.7976931348623157e+308\n #define __glibcpp_f64_digits 53\n@@ -196,6 +226,43 @@\n #define __glibcpp_f64_min_exponent10 -307\n #define __glibcpp_f64_max_exponent 1024\n #define __glibcpp_f64_max_exponent10 308\n+#if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n+#  if __TARGET_FLOAT_WORDS_ORDER__ == __GCC_BIG_ENDIAN__\n+#    define __glibcpp_f64_infinity_bytes { 0x7ff00000, 0x0 }\n+#    define __glibcpp_f64_QNaN_bytes { 0x7ff80000, 0x0 }\n+#    define __glibcpp_f64_SNaN_bytes { 0x7ff00000, 0x1 }\n+#    define __glibcpp_f64_denorm_min_bytes { 0x0, 0x1 }\n+#  else\n+#    define __glibcpp_f64_infinity_bytes { 0x0, 0x7ff00000 }\n+#    define __glibcpp_f64_QNaN_bytes { 0x0, 0x7ff80000 }\n+#    define __glibcpp_f64_SNaN_bytes { 0x1, 0x7ff00000 }\n+#    define __glibcpp_f64_denorm_min_bytes { 0x1, 0x0 }\n+#  endif\n+#  define __glibcpp_f64_has_infinity true\n+#  define __glibcpp_f64_has_QNaN true\n+#  define __glibcpp_f64_has_SNaN true\n+#  define __glibcpp_f64_has_denorm denorm_present\n+#  define __glibcpp_f64_is_iec559 true\n+#endif\n+#ifndef __glibcpp_f64_infinity_bytes\n+#  define __glibcpp_f64_infinity_bytes { }\n+#  define __glibcpp_f64_has_infinity false\n+#endif\n+#ifndef __glibcpp_f64_QNaN_bytes\n+#  define __glibcpp_f64_QNaN_bytes { }\n+#  define __glibcpp_f64_has_QNaN false\n+#endif\n+#ifndef __glibcpp_f64_SNaN_bytes\n+#  define __glibcpp_f64_SNaN_bytes { }\n+#  define __glibcpp_f64_has_SNaN false\n+#endif\n+#ifndef __glibcpp_f64_denorm_min_bytes\n+#  define __glibcpp_f64_denorm_min_bytes { }\n+#  define __glibcpp_f64_has_denorm denorm_indeterminate\n+#endif\n+#ifndef __glibcpp_f64_is_iec559\n+#  define __glibcpp_f64_is_iec559 false\n+#endif \n #define __glibcpp_f80_min 3.36210314311209350626e-4932L\n #define __glibcpp_f80_max 1.18973149535723176502e+4932L\n #define __glibcpp_f80_digits 64\n@@ -207,6 +274,51 @@\n #define __glibcpp_f80_min_exponent10 -4931\n #define __glibcpp_f80_max_exponent 16384\n #define __glibcpp_f80_max_exponent10 4932\n+#if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n+#  if __TARGET_BYTES_ORDER__ == __GCC_BIG_ENDIAN__\n+#    define __glibcpp_f80_infinity_bytes   \\\n+       { 0x7f, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }\n+#    define __glibcpp_f80_QNaN_bytes       \\\n+       { 0x7f, 0xff, 0xC0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }\n+#    define __glibcpp_f80_SNaN_bytes       \\\n+       { 0x7f, 0xff, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1 }\n+#    define __glibcpp_f80_denorm_min_bytes \\\n+       { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1 }\n+#  else\n+#    define __glibcpp_f80_infinity_bytes   \\\n+       { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xff, 0x7f }\n+#    define __glibcpp_f80_QNaN_bytes       \\\n+       { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xC0, 0xff, 0x7f }\n+#    define __glibcpp_f80_SNaN_bytes       \\\n+       { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0xff, 0x7f }\n+#    define __glibcpp_f80_denorm_min_bytes \\\n+       { 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 }\n+#  endif\n+#  define __glibcpp_f80_has_infinity true\n+#  define __glibcpp_f80_has_QNaN true\n+#  define __glibcpp_f80_has_SNaN true\n+#  define __glibcpp_f80_has_denorm denorm_present\n+#  define __glibcpp_f80_is_iec559 true\n+#endif\n+#ifndef __glibcpp_f80_infinity_bytes\n+#  define __glibcpp_f80_infinity_bytes { }\n+#  define __glibcpp_f80_has_infinity false\n+#endif\n+#ifndef __glibcpp_f80_QNaN_bytes\n+#  define __glibcpp_f80_QNaN_bytes { }\n+#  define __glibcpp_f80_has_QNaN false\n+#endif\n+#ifndef __glibcpp_f80_SNaN_bytes\n+#  define __glibcpp_f80_SNaN_bytes { }\n+#  define __glibcpp_f80_has_SNaN false\n+#endif\n+#ifndef __glibcpp_f80_denorm_min_bytes\n+#  define __glibcpp_f80_denorm_min_bytes { }\n+#  define __glibcpp_f80_has_denorm denorm_indeterminate\n+#endif\n+#ifndef __glibcpp_f80_is_iec559\n+#  define __glibcpp_f80_is_iec559 false\n+#endif \n #define __glibcpp_f96_min 1.68105157155604675313e-4932L\n #define __glibcpp_f96_max 1.18973149535723176502e+4932L\n #define __glibcpp_f96_digits 64\n@@ -218,6 +330,40 @@\n #define __glibcpp_f96_min_exponent10 -4931\n #define __glibcpp_f96_max_exponent 16384\n #define __glibcpp_f96_max_exponent10 4932\n+#if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n+#  if __TARGET_BYTES_ORDER__ == __GCC_BIG_ENDIAN__\n+#    define __glibcpp_f96_infinity_bytes { 0x7ff0000, 0x0, 0x0 } \n+#    define __glibcpp_f96_QNaN_bytes { 0x7ff80000, 0x0, 0x0 }\n+#    define __glibcpp_f96_SNaN_bytes { 0x7ff00000, 0x0, 0x1 }\n+#    define __glibcpp_f96_denorm_min_bytes { 0x0, 0x0, 0x1 }\n+#  else\n+#    define __glibcpp_f96_infinity_bytes { 0x0, 0x0, 0x7ff0000 }\n+#    define __glibcpp_f96_QNaN_bytes { 0x0, 0x0, 0x7ff80000 }\n+#    define __glibcpp_f96_SNaN_bytes { 0x1, 0x0, 0x7ff00000 }\n+#    define __glibcpp_f96_denorm_min_bytes { 0x1, 0x0, 0x0 }\n+#  endif\n+#  define __glibcpp_f96_has_infinity true\n+#  define __glibcpp_f96_has_QNaN true\n+#  define __glibcpp_f96_has_SNaN true\n+#  define __glibcpp_f96_has_denorm denorm_present\n+#  define __glibcpp_f96_is_iec559 true\n+#endif\n+#ifndef __glibcpp_f96_infinity_bytes\n+#  define __glibcpp_f96_infinity_bytes { }\n+#  define __glibcpp_f96_has_infinity false\n+#endif\n+#ifndef __glibcpp_f96_QNaN_bytes\n+#  define __glibcpp_f96_QNaN_bytes { }\n+#  define __glibcpp_f96_has_QNaN false\n+#endif\n+#ifndef __glibcpp_f96_SNaN_bytes\n+#  define __glibcpp_f96_SNaN_bytes { }\n+#  define __glibcpp_f96_has_SNaN false\n+#endif\n+#ifndef __glibcpp_f96_denorm_min_bytes\n+#  define __glibcpp_f96_denorm_min_bytes { }\n+#  define __glibcpp_f96_has denorm_indeterminate\n+#endif\n #define __glibcpp_f128_min 3.362103143112093506262677817321752603E-4932L\n #define __glibcpp_f128_max 1.189731495357231765085759326628007016E+4932L\n #define __glibcpp_f128_digits 113\n@@ -229,6 +375,42 @@\n #define __glibcpp_f128_min_exponent10 -4931\n #define __glibcpp_f128_max_exponent 16384\n #define __glibcpp_f128_max_exponent10 4932\n+#if __GCC_FLOAT_FORMAT__ == __IEEE_FORMAT__\n+#  if __TARGET_FLOAT_WORDS_ORDER__ == __GCC_BIG_ENDIAN__\n+#    define __glibcpp_f128_infinity_bytes { 0x7fff0000, 0x0, 0x0, 0x0 }\n+#    define __glibcpp_f128_QNaN_bytes { 0x7fff0800, 0x0, 0x0, 0x0 }\n+#    define __glibcpp_f128_SNaN_bytes { 0x7fff0000, 0x0, 0x0, 0x1 }\n+#    define __glibcpp_f128_denorm_min_bytes { 0x0, 0x0, 0x0, 0x1 }\n+#  else\n+#    define __glibcpp_f128_infinity_bytes { 0x0, 0x0, 0x0, 0x7fff0000 }\n+#    define __glibcpp_f128_QNaN_bytes { 0x0, 0x0, 0x0, 0x7fff0800 }\n+#    define __glibcpp_f128_SNaN_bytes { 0x1, 0x0, 0x0, 0x7fff0000 }\n+#    define __glibcpp_f128_denorm_min_bytes { 0x1, 0x0, 0x0, 0x0 }\n+#  endif\n+#  define __glibcpp_f128_has_infinity true\n+#  define __glibcpp_f128_has_QNaN true\n+#  define __glibcpp_f128_has_SNaN true\n+#  define __glibcpp_f128_has_denorm denorm_present\n+#endif\n+#ifndef __glibcpp_f128_infinity_bytes\n+#  define __glibcpp_f128_infinity_bytes { }\n+#  define __glibcpp_f128_has_infinity false\n+#endif\n+#ifndef __glibcpp_f128_QNaN_bytes\n+#  define __glibcpp_f128_QNaN_bytes { }\n+#  define __glibcpp_f128_has_QNaN false\n+#endif\n+#ifndef __glibcpp_f128_SNaN_bytes\n+#  define __glibcpp_f128_SNaN_bytes { }\n+#  define __glibcpp_f128_has_SNaN false\n+#endif\n+#ifndef __glibcpp_f128_denorm_min_bytes\n+#  define __glibcpp_f128_denorm_min_bytes { }\n+#  define __glibcpp_f128_has_denorm denorm_indeterminate\n+#endif\n+#ifndef __glibcpp_f128_is_iec559\n+#  define __glibcpp_f128_is_iec559 false\n+#endif\n \n // bool-specific hooks:\n //     __glibcpp_bool_digits  __glibcpp_int_traps __glibcpp_long_traps\n@@ -561,6 +743,15 @@\n #  define __glibcpp_float_min_exponent10 __glibcpp_f32_min_exponent10\n #  define __glibcpp_float_max_exponent __glibcpp_f32_max_exponent\n #  define __glibcpp_float_max_exponent10 __glibcpp_f32_max_exponent10\n+#  define __glibcpp_float_infinity_bytes __glibcpp_f32_infinity_bytes\n+#  define __glibcpp_float_QNaN_bytes  __glibcpp_f32_QNaN_bytes\n+#  define __glibcpp_float_SNaN_bytes  __glibcpp_f32_SNaN_bytes\n+#  define __glibcpp_float_denorm_min_bytes  __glibcpp_f32_denorm_min_bytes\n+#  define __glibcpp_float_has_infinity __glibcpp_f32_has_infinity\n+#  define __glibcpp_float_has_QNaN __glibcpp_f32_has_QNaN\n+#  define __glibcpp_float_has_SNaN __glibcpp_f32_has_SNaN\n+#  define __glibcpp_float_has_denorm __glibcpp_f32_has_denorm\n+#  define __glibcpp_float_is_iec559 __glibcpp_f32_is_iec559\n #elif __glibcpp_float_bits == 64\n #  define __glibcpp_float_min __glibcpp_f64_min\n #  define __glibcpp_float_max __glibcpp_f64_max\n@@ -573,6 +764,15 @@\n #  define __glibcpp_float_min_exponent10 __glibcpp_f64_min_exponent10\n #  define __glibcpp_float_max_exponent __glibcpp_f64_max_exponent\n #  define __glibcpp_float_max_exponent10 __glibcpp_f64_max_exponent10\n+#  define __glibcpp_float_infinity_bytes __glibcpp_f64_infinity_bytes\n+#  define __glibcpp_float_QNaN_bytes  __glibcpp_f64_QNaN_bytes\n+#  define __glibcpp_float_SNaN_bytes  __glibcpp_f64_SNaN_bytes\n+#  define __glibcpp_float_denorm_min_bytes  __glibcpp_f64_denorm_min_bytes\n+#  define __glibcpp_float_has_infinity __glibcpp_f64_has_infinity\n+#  define __glibcpp_float_has_QNaN __glibcpp_f64_has_QNaN\n+#  define __glibcpp_float_has_SNaN __glibcpp_f64_has_SNaN\n+#  define __glibcpp_float_has_denorm __glibcpp_f64_has_denorm\n+#  define __glibcpp_float_is_iec559 __glibcpp_f64_is_iec559\n #elif __glibcpp_float_bits == 80\n #  define __glibcpp_float_min __glibcpp_f80_min\n #  define __glibcpp_float_max __glibcpp_f80_max\n@@ -585,56 +785,53 @@\n #  define __glibcpp_float_min_exponent10 __glibcpp_f80_min_exponent10\n #  define __glibcpp_float_max_exponent __glibcpp_f80_max_exponent\n #  define __glibcpp_float_max_exponent10 __glibcpp_f80_max_exponent10\n+#  define __glibcpp_float_infinity_bytes __glibcpp_f80_infinity_bytes\n+#  define __glibcpp_float_QNaN_bytes  __glibcpp_f80_QNaN_bytes\n+#  define __glibcpp_float_SNaN_bytes  __glibcpp_f80_SNaN_bytes\n+#  define __glibcpp_float_denorm_min_bytes  __glibcpp_f80_denorm_min_bytes\n+#  define __glibcpp_float_has_infinity __glibcpp_f80_has_infinity\n+#  define __glibcpp_float_has_QNaN __glibcpp_f80_has_QNaN\n+#  define __glibcpp_float_has_SNaN __glibcpp_f80_has_SNaN\n+#  define __glibcpp_float_has_denorm __glibcpp_f80_has_denorm\n+#  define __glibcpp_float_is_iec559 __glibcpp_f80_is_iec559\n #else\n // You must define these macros in the configuration file.\n #endif\n \n-// FIXME: These are just stubs and inkorrect\n+// Default values.  Should be overriden in configuration files if necessary.\n \n-#ifndef __glibcpp_float_has_infinity\n-#  define __glibcpp_float_has_infinity false\n+#ifndef __glibcpp_float_infinity_bytes\n+#  define __glibcpp_float_infinity_bytes { }\n+#  define __glibcpp_float_has_infinty false\n #endif\n \n-#ifndef __glibcpp_float_has_quiet_NaN\n-#  define __glibcpp_float_has_quiet_NaN false\n+#ifndef __glibcpp_float_QNaN_bytes\n+#  define __glibcpp_float_QNaN_bytes { }\n+#  define __glibcpp_float_has_QNaN false\n #endif\n \n-#ifndef __glibcpp_float_has_signaling_NaN\n-#  define __glibcpp_float_has_signaling_NaN false\n+#ifndef __glibcpp_float_SNaN_bytes\n+#  define __glibcpp_float_SNaN_bytes { }\n+#  define __glibcpp_float_has_SNaN false\n #endif\n \n-#ifndef __glibcpp_float_has_denorm\n-#  define __glibcpp_float_has_denorm denorm_absent\n+#ifndef __glibcpp_float_denorm_min_bytes\n+#  define __glibcpp_float_denorm_min_bytes { }\n+#  define __glibcpp_float_has_denorm denorm_indeterminate\n #endif\n \n #ifndef __glibcpp_float_has_denorm_loss\n #  define __glibcpp_float_has_denorm_loss false\n #endif\n \n-#ifndef __glibcpp_float_infinity\n-#  define __glibcpp_float_infinity 0.0F\n-#endif\n-\n-#ifndef __glibcpp_float_quiet_NaN\n-#  define __glibcpp_float_quiet_NaN 0.0F\n-#endif\n-\n-#ifndef __glibcpp_float_signaling_NaN\n-#  define __glibcpp_float_signaling_NaN 0.0F\n-#endif\n-\n-#ifndef __glibcpp_float_denorm_min\n-#  define __glibcpp_float_denorm_min 0.0F\n+#ifndef __glibcpp_float_is_bounded\n+#  define __glibcpp_float_is_bounded true\n #endif\n \n #ifndef __glibcpp_float_is_iec559\n #  define __glibcpp_float_is_iec559 false\n #endif\n \n-#ifndef __glibcpp_float_is_bounded\n-#  define __glibcpp_float_is_bounded true\n-#endif\n-\n #ifndef __glibcpp_float_is_modulo\n #  define __glibcpp_float_is_modulo false\n #endif\n@@ -665,6 +862,15 @@\n #  define __glibcpp_double_min_exponent10 __glibcpp_f32_min_exponent10\n #  define __glibcpp_double_max_exponent __glibcpp_f32_max_exponent\n #  define __glibcpp_double_max_exponent10 __glibcpp_f32_max_exponent10\n+#  define __glibcpp_double_infinity_bytes __glibcpp_f32_infinity_bytes\n+#  define __glibcpp_double_QNaN_bytes __glibcpp_f32_QNaN_bytes\n+#  define __glibcpp_double_SNaN_bytes __glibcpp_f32_SNaN_bytes\n+#  define __glibcpp_double_denorm_min_bytes __glibcpp_f32_denorm_min_bytes\n+#  define __glibcpp_double_has_infinity __glibcpp_f32_has_infinity\n+#  define __glibcpp_double_has_QNaN __glibcpp_f32_has_QNaN\n+#  define __glibcpp_double_has_SNaN __glibcpp_f32_has_SNaN\n+#  define __glibcpp_double_has_denorm __glibcpp_f32_has_denorm\n+#  define __glibcpp_double_is_iec559 __glibcpp_f32_is_iec559\n #elif __glibcpp_double_bits == 64\n #  define __glibcpp_double_min __glibcpp_f64_min\n #  define __glibcpp_double_max __glibcpp_f64_max\n@@ -677,6 +883,15 @@\n #  define __glibcpp_double_min_exponent10 __glibcpp_f64_min_exponent10\n #  define __glibcpp_double_max_exponent __glibcpp_f64_max_exponent\n #  define __glibcpp_double_max_exponent10 __glibcpp_f64_max_exponent10\n+#  define __glibcpp_double_infinity_bytes __glibcpp_f64_infinity_bytes\n+#  define __glibcpp_double_QNaN_bytes __glibcpp_f64_QNaN_bytes\n+#  define __glibcpp_double_SNaN_bytes __glibcpp_f64_SNaN_bytes\n+#  define __glibcpp_double_denorm_min_bytes __glibcpp_f64_denorm_min_bytes\n+#  define __glibcpp_double_has_infinity __glibcpp_f64_has_infinity\n+#  define __glibcpp_double_has_QNaN __glibcpp_f64_has_QNaN\n+#  define __glibcpp_double_has_SNaN __glibcpp_f64_has_SNaN\n+#  define __glibcpp_double_has_denorm __glibcpp_f64_has_denorm\n+#  define __glibcpp_double_is_iec559 __glibcpp_f64_is_iec559\n #elif __glibcpp_double_bits == 80\n #  define __glibcpp_double_min __glibcpp_f80_min\n #  define __glibcpp_double_max __glibcpp_f80_max\n@@ -689,48 +904,45 @@\n #  define __glibcpp_double_min_exponent10 __glibcpp_f80_min_exponent10\n #  define __glibcpp_double_max_exponent __glibcpp_f80_max_exponent\n #  define __glibcpp_double_max_exponent10 __glibcpp_f80_max_exponent10\n+#  define __glibcpp_double_infinity_bytes __glibcpp_f80_infinity_bytes\n+#  define __glibcpp_double_QNaN_bytes __glibcpp_f80_QNaN_bytes\n+#  define __glibcpp_double_SNaN_bytes __glibcpp_f80_SNaN_bytes\n+#  define __glibcpp_double_denorm_min_bytes __glibcpp_f80_denorm_min_bytes\n+#  define __glibcpp_double_has_infinity __glibcpp_f80_has_infinity\n+#  define __glibcpp_double_has_QNaN __glibcpp_f80_has_QNaN\n+#  define __glibcpp_double_has_SNaN __glibcpp_f80_has_SNaN\n+#  define __glibcpp_double_has_denorm __glibcpp_f80_has_denorm\n+#  define __glibcpp_double_is_iec559 __glibcpp_f80_is_iec559\n #else\n // You must define these macros in the configuration file.\n #endif\n \n-// FIXME: These are just stubs and inkorrect\n+// Default values.  Should be overriden in configuration files if necessary.\n \n-#ifndef __glibcpp_double_has_infinity\n-#  define __glibcpp_double_has_infinity false\n+#ifndef __glibcpp_double_infinity_bytes\n+#  define __glibcpp_double_infinity_bytes { }\n+#  define __glibcpp_double_has_infinty false\n #endif\n \n-#ifndef __glibcpp_double_has_quiet_NaN\n-#  define __glibcpp_double_has_quiet_NaN false\n+#ifndef __glibcpp_double_QNaN_bytes\n+#  define __glibcpp_double_QNaN_bytes { }\n+#  define __glibcpp_double_has_QNaN false\n #endif\n \n-#ifndef __glibcpp_double_has_signaling_NaN\n-#  define __glibcpp_double_has_signaling_NaN false\n+#ifndef __glibcpp_double_SNaN_bytes\n+#  define __glibcpp_double_SNaN_bytes { }\n+#  define __glibcpp_double_has_SNaN false\n #endif\n \n-#ifndef __glibcpp_double_has_denorm\n-#  define __glibcpp_double_has_denorm denorm_absent\n+#ifndef __glibcpp_double_denorm_min_bytes\n+#  define __glibcpp_double_denorm_min_bytes { }\n+#  define __glibcpp_double_has_denorm denorm_indeterminate\n #endif\n \n #ifndef __glibcpp_double_has_denorm_loss\n #  define __glibcpp_double_has_denorm_loss false\n #endif\n \n-#ifndef __glibcpp_double_infinity\n-#  define __glibcpp_double_infinity 0.0\n-#endif\n-\n-#ifndef __glibcpp_double_quiet_NaN\n-#  define __glibcpp_double_quiet_NaN 0.0\n-#endif\n-\n-#ifndef __glibcpp_double_signaling_NaN\n-#  define __glibcpp_double_signaling_NaN 0.0\n-#endif\n-\n-#ifndef __glibcpp_double_denorm_min\n-#  define __glibcpp_double_denorm_min 0.0\n-#endif\n-\n #ifndef __glibcpp_double_is_iec559\n #  define __glibcpp_double_is_iec559 false\n #endif\n@@ -769,6 +981,15 @@\n #  define __glibcpp_long_double_min_exponent10 __glibcpp_f32_min_exponent10\n #  define __glibcpp_long_double_max_exponent __glibcpp_f32_max_exponent\n #  define __glibcpp_long_double_max_exponent10 __glibcpp_f32_max_exponent10\n+#  define __glibcpp_long_double_infinity_bytes __glibcpp_f32_infinity_bytes\n+#  define __glibcpp_long_double_QNaN_bytes __glibcpp_f32_QNaN_bytes\n+#  define __glibcpp_long_double_SNaN_bytes __glibcpp_f32_SNaN_bytes\n+#  define __glibcpp_long_double_denorm_min_bytes __glibcpp_f32_denorm_min_bytes\n+#  define __glibcpp_long_double_has_infinity __glibcpp_f32_has_infinity\n+#  define __glibcpp_long_double_has_QNaN __glibcpp_f32_has_QNaN\n+#  define __glibcpp_long_double_has_SNaN __glibcpp_f32_has_SNaN\n+#  define __glibcpp_long_double_has_denorm __glibcpp_f32_has_denorm\n+#  define __glibcpp_long_double_is_iec559 __glibcpp_f32_is_iec559\n #elif __glibcpp_long_double_bits == 64\n #  define __glibcpp_long_double_min __glibcpp_f64_min\n #  define __glibcpp_long_double_max __glibcpp_f64_max\n@@ -781,6 +1002,15 @@\n #  define __glibcpp_long_double_min_exponent10 __glibcpp_f64_min_exponent10\n #  define __glibcpp_long_double_max_exponent __glibcpp_f64_max_exponent\n #  define __glibcpp_long_double_max_exponent10 __glibcpp_f64_max_exponent10\n+#  define __glibcpp_long_double_infinity_bytes __glibcpp_f64_infinity_bytes\n+#  define __glibcpp_long_double_QNaN_bytes __glibcpp_f64_QNaN_bytes\n+#  define __glibcpp_long_double_SNaN_bytes __glibcpp_f64_SNaN_bytes\n+#  define __glibcpp_long_double_denorm_min_bytes __glibcpp_f64_denorm_min_bytes\n+#  define __glibcpp_long_double_has_infinity __glibcpp_f64_has_infinity\n+#  define __glibcpp_long_double_has_QNaN __glibcpp_f64_has_QNaN\n+#  define __glibcpp_long_double_has_SNaN __glibcpp_f64_has_SNaN\n+#  define __glibcpp_long_double_has_denorm __glibcpp_f64_has_denorm\n+#  define __glibcpp_long_double_is_iec559 __glibcpp_f64_is_iec559\n #elif __glibcpp_long_double_bits == 80\n #  define __glibcpp_long_double_min __glibcpp_f80_min\n #  define __glibcpp_long_double_max __glibcpp_f80_max\n@@ -793,6 +1023,15 @@\n #  define __glibcpp_long_double_min_exponent10 __glibcpp_f80_min_exponent10\n #  define __glibcpp_long_double_max_exponent __glibcpp_f80_max_exponent\n #  define __glibcpp_long_double_max_exponent10 __glibcpp_f80_max_exponent10\n+#  define __glibcpp_long_double_infinity_bytes __glibcpp_f80_infinity_bytes\n+#  define __glibcpp_long_double_QNaN_bytes __glibcpp_f80_QNaN_bytes\n+#  define __glibcpp_long_double_SNaN_bytes __glibcpp_f80_SNaN_bytes\n+#  define __glibcpp_long_double_denorm_min_bytes __glibcpp_f80_denorm_min_bytes\n+#  define __glibcpp_long_double_has_infinity __glibcpp_f80_has_infinity\n+#  define __glibcpp_long_double_has_QNaN __glibcpp_f80_has_QNaN\n+#  define __glibcpp_long_double_has_SNaN __glibcpp_f80_has_SNaN\n+#  define __glibcpp_long_double_has_denorm __glibcpp_f80_has_denorm\n+#  define __glibcpp_long_double_is_iec559 __glibcpp_f80_is_iec559\n #elif __glibcpp_long_double_bits == 96\n #  define __glibcpp_long_double_min __glibcpp_f96_min\n #  define __glibcpp_long_double_max __glibcpp_f96_max\n@@ -805,6 +1044,15 @@\n #  define __glibcpp_long_double_min_exponent10 __glibcpp_f96_min_exponent10\n #  define __glibcpp_long_double_max_exponent __glibcpp_f96_max_exponent\n #  define __glibcpp_long_double_max_exponent10 __glibcpp_f96_max_exponent10\n+#  define __glibcpp_long_double_infinity_bytes __glibcpp_f96_infinity_bytes\n+#  define __glibcpp_long_double_QNaN_bytes __glibcpp_f96_QNaN_bytes\n+#  define __glibcpp_long_double_SNaN_bytes __glibcpp_f96_SNaN_bytes\n+#  define __glibcpp_long_double_denorm_min_bytes __glibcpp_f96_denorm_min_bytes\n+#  define __glibcpp_long_double_has_infinity __glibcpp_f96_has_infinity\n+#  define __glibcpp_long_double_has_QNaN __glibcpp_f96_has_QNaN\n+#  define __glibcpp_long_double_has_SNaN __glibcpp_f96_has_SNaN\n+#  define __glibcpp_long_double_has_denorm __glibcpp_f96_has_denorm\n+#  define __glibcpp_long_double_is_iec559 __glibcpp_f96_is_iec559\n #elif __glibcpp_long_double_bits == 128\n #  define __glibcpp_long_double_min __glibcpp_f128_min\n #  define __glibcpp_long_double_max __glibcpp_f128_max\n@@ -817,48 +1065,45 @@\n #  define __glibcpp_long_double_min_exponent10 __glibcpp_f128_min_exponent10\n #  define __glibcpp_long_double_max_exponent __glibcpp_f128_max_exponent\n #  define __glibcpp_long_double_max_exponent10 __glibcpp_f128_max_exponent10\n+#  define __glibcpp_long_double_infinity_bytes __glibcpp_f128_infinity_bytes\n+#  define __glibcpp_long_double_QNaN_bytes __glibcpp_f128_QNaN_bytes\n+#  define __glibcpp_long_double_SNaN_bytes __glibcpp_f128_SNaN_bytes\n+#  define __glibcpp_long_double_denorm_min_bytes __glibcpp_f128_denorm_min_bytes\n+#  define __glibcpp_long_double_has_infinity __glibcpp_f128_has_infinity\n+#  define __glibcpp_long_double_has_QNaN __glibcpp_f128_has_QNaN\n+#  define __glibcpp_long_double_has_SNaN __glibcpp_f128_has_SNaN\n+#  define __glibcpp_long_double_has_denorm __glibcpp_f128_has_denorm\n+#  define __glibcpp_long_double_is_iec559 __glibcpp_f128_is_iec559\n #else\n // You must define these macros in the configuration file.\n #endif\n \n-// FIXME: These are just stubs and inkorrect\n+// Default values.  Should be overriden in configuration files if necessary.\n \n-#ifndef __glibcpp_long_double_has_infinity\n-#  define __glibcpp_long_double_has_infinity false\n+#ifndef __glibcpp_long_double_infinity_bytes\n+#  define __glibcpp_long_double_infinity_bytes { }\n+#  define __glibcpp_long_double_has_infinty false\n #endif\n \n-#ifndef __glibcpp_long_double_has_quiet_NaN\n-#  define __glibcpp_long_double_has_quiet_NaN false\n+#ifndef __glibcpp_long_double_QNaN_bytes\n+#  define __glibcpp_long_double_QNaN_bytes { }\n+#  define __glibcpp_long_double_has_QNaN false\n #endif\n \n-#ifndef __glibcpp_long_double_has_signaling_NaN\n-#  define __glibcpp_long_double_has_signaling_NaN false\n+#ifndef __glibcpp_long_double_SNaN_bytes\n+#  define __glibcpp_long_double_SNaN_bytes { }\n+#  define __glibcpp_long_double_has_SNaN false\n #endif\n \n-#ifndef __glibcpp_long_double_has_denorm\n-#  define __glibcpp_long_double_has_denorm denorm_absent\n+#ifndef __glibcpp_long_double_denorm_min_bytes\n+#  define __glibcpp_long_double_denorm_min_bytes { }\n+#  define __glibcpp_long_double_has_denorm denorm_indeterminate\n #endif\n \n #ifndef __glibcpp_long_double_has_denorm_loss\n #  define __glibcpp_long_double_has_denorm_loss false\n #endif\n \n-#ifndef __glibcpp_long_double_infinity\n-#  define __glibcpp_long_double_infinity 0.0L\n-#endif\n-\n-#ifndef __glibcpp_long_double_quiet_NaN\n-#  define __glibcpp_long_double_quiet_NaN 0.0L\n-#endif\n-\n-#ifndef __glibcpp_long_double_signaling_NaN\n-#  define __glibcpp_long_double_signaling_NaN 0.0L\n-#endif\n-\n-#ifndef __glibcpp_long_double_denorm_min\n-#  define __glibcpp_long_double_denorm_min 0.0L\n-#endif\n-\n #ifndef __glibcpp_long_double_is_iec559\n #  define __glibcpp_long_double_is_iec559 false\n #endif\n@@ -886,6 +1131,63 @@\n \n namespace std\n {\n+  // This is better handled by the compiler, but we do it here for the\n+  // time being.  (We're just second-guessing something the compiler\n+  // knows about better than we do.) -- Gaby\n+  typedef unsigned char __glibcpp_byte;\n+#define __glibcpp_word_bits 32\n+#if __glibcpp_char_bits == __glibcpp_word_bits\n+#  define __glibcpp_word unsigned char\n+#elif __glibcpp_short_bits == __glibcpp_word_bits\n+#  define __glibcpp_word unsigned short  \n+#elif __glibcpp_int_bits == __glibcpp_word_bits\n+#  define __glibcpp_word unsigned int\n+#elif __glibcpp_long_bits == __glibcpp_word_bits\n+#  define __glibcpp_word unsigned long\n+#endif  \n+\n+  // Define storage types for the single, double and extended floating\n+  // point data types.  Maybe we could avoid the conditional #defines by\n+  // using the aligned_storage<> extension.  -- Gaby\n+  typedef const\n+#if __glibcpp_float_bits % __glibcpp_word_bits == 0\n+    __glibcpp_word __float_storage[sizeof (float) / sizeof (__glibcpp_word)]\n+#else\n+    __glibcpp_byte __float_storage[sizeof (float)]\n+#endif  \n+    __attribute__((__aligned__(__alignof__(float))));\n+\n+  typedef const\n+#if __glibcpp_double_bits % __glibcpp_word_bits == 0\n+    __glibcpp_word __double_storage[sizeof (double) / sizeof (__glibcpp_word)]\n+#else\n+    __glibcpp_byte __double_storage[sizeof (double)]\n+#endif  \n+    __attribute__((__aligned__(__alignof__(double))));\n+\n+  typedef const\n+#if __glibcpp_long_double_bits % __glibcpp_word_bits == 0\n+    __glibcpp_word __long_double_storage[sizeof (long double) / sizeof (__glibcpp_word)]\n+#else\n+    __glibcpp_byte __long_double_storage[sizeof (long double)]\n+#endif  \n+    __attribute__((__aligned__(__alignof__(long double))));\n+\n+  extern const __float_storage __glibcpp_float_infinity;\n+  extern const __float_storage __glibcpp_float_QNaN;\n+  extern const __float_storage __glibcpp_float_SNaN;\n+  extern const __float_storage __glibcpp_float_denorm_min;\n+  \n+  extern const __double_storage __glibcpp_double_infinity;\n+  extern const __double_storage __glibcpp_double_QNaN;\n+  extern const __double_storage __glibcpp_double_SNaN;\n+  extern const __double_storage __glibcpp_double_denorm_min;\n+\n+  extern const __long_double_storage __glibcpp_long_double_infinity;\n+  extern const __long_double_storage __glibcpp_long_double_QNaN;\n+  extern const __long_double_storage __glibcpp_long_double_SNaN;\n+  extern const __long_double_storage __glibcpp_long_double_denorm_min;\n+  \n   enum float_round_style \n   {\n     round_indeterminate       = -1,\n@@ -1713,19 +2015,19 @@ namespace std\n       static const int max_exponent10 = __glibcpp_float_max_exponent10;\n \n       static const bool has_infinity = __glibcpp_float_has_infinity;\n-      static const bool has_quiet_NaN = __glibcpp_float_has_quiet_NaN;\n-      static const bool has_signaling_NaN = __glibcpp_float_has_signaling_NaN;\n+      static const bool has_quiet_NaN = __glibcpp_float_has_QNaN;\n+      static const bool has_signaling_NaN = __glibcpp_float_has_SNaN;\n       static const float_denorm_style has_denorm = __glibcpp_float_has_denorm;\n       static const bool has_denorm_loss = __glibcpp_float_has_denorm_loss;\n \n       static float infinity() throw()\n-      { return __glibcpp_float_infinity; }\n+      { return *reinterpret_cast<const float*>(__glibcpp_float_infinity); }\n       static float quiet_NaN() throw()\n-      { return __glibcpp_float_quiet_NaN; }\n+      { return *reinterpret_cast<const float*>(__glibcpp_float_QNaN); }\n       static float signaling_NaN() throw()\n-      { return __glibcpp_float_signaling_NaN; }\n+      { return *reinterpret_cast<const float*>(__glibcpp_float_SNaN); }\n       static float denorm_min() throw()\n-      { return __glibcpp_float_denorm_min; }\n+      { return *reinterpret_cast<const float*>(__glibcpp_float_denorm_min); }\n \n       static const bool is_iec559 = __glibcpp_float_is_iec559;\n       static const bool is_bounded = __glibcpp_float_is_bounded;\n@@ -1747,14 +2049,10 @@ namespace std\n #undef __glibcpp_float_max_exponent\n #undef __glibcpp_float_max_exponent10\n #undef __glibcpp_float_has_infinity\n-#undef __glibcpp_float_has_quiet_NaN\n-#undef __glibcpp_float_has_signaling_NaN\n+#undef __glibcpp_float_has_QNaN\n+#undef __glibcpp_float_has_SNaN\n #undef __glibcpp_float_has_denorm\n #undef __glibcpp_float_has_denorm_loss\n-#undef __glibcpp_float_infinity\n-#undef __glibcpp_float_quiet_NaN\n-#undef __glibcpp_float_signaling_NaN\n-#undef __glibcpp_float_denorm_min\n #undef __glibcpp_float_is_iec559\n #undef __glibcpp_float_is_bounded\n #undef __glibcpp_float_is_modulo\n@@ -1789,20 +2087,20 @@ namespace std\n       static const int max_exponent10 = __glibcpp_double_max_exponent10;\n \n       static const bool has_infinity = __glibcpp_double_has_infinity;\n-      static const bool has_quiet_NaN = __glibcpp_double_has_quiet_NaN;\n-      static const bool has_signaling_NaN = __glibcpp_double_has_signaling_NaN;\n+      static const bool has_quiet_NaN = __glibcpp_double_has_QNaN;\n+      static const bool has_signaling_NaN = __glibcpp_double_has_SNaN;\n       static const float_denorm_style has_denorm =\n               __glibcpp_double_has_denorm;\n       static const bool has_denorm_loss = __glibcpp_double_has_denorm_loss;\n \n       static double infinity() throw()\n-      { return __glibcpp_double_infinity; }\n+      { return *reinterpret_cast<const double*>(__glibcpp_double_infinity); }\n       static double quiet_NaN() throw()\n-      { return __glibcpp_double_quiet_NaN; }\n+      { return *reinterpret_cast<const double*>(__glibcpp_double_QNaN); }\n       static double signaling_NaN() throw()\n-      { return __glibcpp_double_signaling_NaN; }\n+      { return *reinterpret_cast<const double*>(__glibcpp_double_SNaN); }\n       static double denorm_min() throw()\n-      { return __glibcpp_double_denorm_min; }\n+      { return *reinterpret_cast<const double*>(__glibcpp_double_denorm_min); }\n \n       static const bool is_iec559 = __glibcpp_double_is_iec559;\n       static const bool is_bounded = __glibcpp_double_is_bounded;\n@@ -1825,14 +2123,10 @@ namespace std\n #undef __glibcpp_double_max_exponent\n #undef __glibcpp_double_max_exponent10\n #undef __glibcpp_double_has_infinity\n-#undef __glibcpp_double_has_quiet_NaN\n-#undef __glibcpp_double_has_signaling_NaN\n+#undef __glibcpp_double_has_QNaN\n+#undef __glibcpp_double_has_SNaN\n #undef __glibcpp_double_has_denorm\n #undef __glibcpp_double_has_denorm_loss\n-#undef __glibcpp_double_infinity\n-#undef __glibcpp_double_quiet_NaN\n-#undef __glibcpp_double_signaling_NaN\n-#undef __glibcpp_double_denorm_min\n #undef __glibcpp_double_is_iec559\n #undef __glibcpp_double_is_bounded\n #undef __glibcpp_double_is_modulo\n@@ -1868,22 +2162,36 @@ namespace std\n       static const int max_exponent10 = __glibcpp_long_double_max_exponent10;\n \n       static const bool has_infinity = __glibcpp_long_double_has_infinity;\n-      static const bool has_quiet_NaN = __glibcpp_long_double_has_quiet_NaN;\n-      static const bool has_signaling_NaN =\n-                __glibcpp_long_double_has_signaling_NaN;\n+      static const bool has_quiet_NaN = __glibcpp_long_double_has_SNaN;\n+      static const bool has_signaling_NaN = __glibcpp_long_double_has_SNaN;\n       static const float_denorm_style has_denorm =\n                 __glibcpp_long_double_has_denorm;\n       static const bool has_denorm_loss =\n                 __glibcpp_long_double_has_denorm_loss;\n \n       static long double infinity() throw()\n-      { return __glibcpp_long_double_infinity; }\n+      {\n+        return *reinterpret_cast<const long double*>\n+          (__glibcpp_long_double_infinity);\n+      } \n+\n       static long double quiet_NaN() throw()\n-      { return __glibcpp_long_double_quiet_NaN; }\n+      {\n+        return *reinterpret_cast<const long double*>\n+          (__glibcpp_long_double_QNaN);\n+      }\n+\n       static long double signaling_NaN() throw()\n-      { return __glibcpp_long_double_signaling_NaN; }\n+      {\n+        return *reinterpret_cast<const long double*>\n+          (__glibcpp_long_double_SNaN);\n+      }\n+      \n       static long double denorm_min() throw()\n-      { return __glibcpp_long_double_denorm_min; }\n+      {\n+        return *reinterpret_cast<const long double*>\n+          (__glibcpp_long_double_denorm_min);\n+      }\n \n       static const bool is_iec559 = __glibcpp_long_double_is_iec559;\n       static const bool is_bounded = __glibcpp_long_double_is_bounded;\n@@ -1906,14 +2214,10 @@ namespace std\n #undef __glibcpp_long_double_max_exponent\n #undef __glibcpp_long_double_max_exponent10\n #undef __glibcpp_long_double_has_infinity\n-#undef __glibcpp_long_double_has_quiet_NaN\n-#undef __glibcpp_long_double_has_signaling_NaN\n+#undef __glibcpp_long_double_has_QNaN\n+#undef __glibcpp_long_double_has_SNaN\n #undef __glibcpp_long_double_has_denorm\n #undef __glibcpp_long_double_has_denorm_loss\n-#undef __glibcpp_long_double_infinity\n-#undef __glibcpp_long_double_quiet_NaN\n-#undef __glibcpp_long_double_signaling_NaN\n-#undef __glibcpp_long_double_denorm_min\n #undef __glibcpp_long_double_is_iec559\n #undef __glibcpp_long_double_is_bounded\n #undef __glibcpp_long_double_is_modulo"}, {"sha": "b0172b8d94b20056fdddbfc79d22666db6124cf9", "filename": "libstdc++-v3/src/limits.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2559486f3ec3ebae0b49a7bfefcec478266e5190/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2559486f3ec3ebae0b49a7bfefcec478266e5190/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flimits.cc?ref=2559486f3ec3ebae0b49a7bfefcec478266e5190", "patch": "@@ -38,6 +38,29 @@\n \n namespace std \n {\n+  const __float_storage __glibcpp_float_infinity =\n+    __glibcpp_float_infinity_bytes;\n+  const __float_storage __glibcpp_float_QNaN = __glibcpp_float_QNaN_bytes;\n+  const __float_storage __glibcpp_float_SNaN = __glibcpp_float_SNaN_bytes;\n+  const __float_storage __glibcpp_float_denorm_min =\n+    __glibcpp_float_denorm_min_bytes;\n+\n+  const __double_storage __glibcpp_double_infinity =\n+    __glibcpp_double_infinity_bytes;\n+  const __double_storage __glibcpp_double_QNaN = __glibcpp_double_QNaN_bytes;\n+  const __double_storage __glibcpp_double_SNaN = __glibcpp_double_SNaN_bytes;\n+  const __double_storage __glibcpp_double_denorm_min =\n+    __glibcpp_double_denorm_min_bytes;\n+\n+  const __long_double_storage __glibcpp_long_double_infinity =\n+    __glibcpp_long_double_infinity_bytes;\n+  const __long_double_storage __glibcpp_long_double_QNaN =\n+    __glibcpp_long_double_QNaN_bytes;\n+  const __long_double_storage __glibcpp_long_double_SNaN =\n+    __glibcpp_long_double_SNaN_bytes;\n+  const __long_double_storage __glibcpp_long_double_denorm_min =\n+    __glibcpp_long_double_denorm_min_bytes;\n+\n   const bool __numeric_limits_base::is_specialized;\n   const int  __numeric_limits_base::digits;\n   const int  __numeric_limits_base::digits10;"}]}