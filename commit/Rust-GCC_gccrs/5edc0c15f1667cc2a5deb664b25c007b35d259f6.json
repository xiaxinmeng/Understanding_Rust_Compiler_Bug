{"sha": "5edc0c15f1667cc2a5deb664b25c007b35d259f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVkYzBjMTVmMTY2N2NjMmE1ZGViNjY0YjI1YzAwN2IzNWQyNTlmNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-10T19:46:38Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-10T20:10:33Z"}, "message": "libstdc++: Implement proposed resolution to LWG 3548\n\nThis has been tentatively approved by LWG. The deleter from a unique_ptr\ncan be moved into the shared_ptr (at least, since LWG 2802). This uses\nstd::forward<_Del>(__r.get_deleter()) not std::move(__r.get_deleter())\nbecause we don't want to convert the deleter to an rvalue when _Del is\nan lvalue reference type.\n\nThis also adds a missing is_move_constructible_v<D> constraint to the\nshared_ptr(unique_ptr<Y, D>&&) constructor, which is inherited from the\nshared_ptr(Y*, D) constructor due to the use of \"equivalent to\" in the\nspecified effects.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/shared_ptr_base.h (__shared_count(unique_ptr&&)):\n\tInitialize a non-reference deleter from an rvalue, as per LWG\n\t3548.\n\t(__shared_ptr::_UniqCompatible): Add missing constraint.\n\t* testsuite/20_util/shared_ptr/cons/lwg3548.cc: New test.\n\t* testsuite/20_util/shared_ptr/cons/unique_ptr_deleter.cc: Check\n\tconstraints.", "tree": {"sha": "8706dbce1d5b9ea547ba54e885d59fd25b76cb5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8706dbce1d5b9ea547ba54e885d59fd25b76cb5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5edc0c15f1667cc2a5deb664b25c007b35d259f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5edc0c15f1667cc2a5deb664b25c007b35d259f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5edc0c15f1667cc2a5deb664b25c007b35d259f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5edc0c15f1667cc2a5deb664b25c007b35d259f6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f974b54b8a0c330e9dd2b43ebc940100d601df0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f974b54b8a0c330e9dd2b43ebc940100d601df0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f974b54b8a0c330e9dd2b43ebc940100d601df0f"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "eb9ad23ba1e3d37a9230bfad048c0296066c9424", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5edc0c15f1667cc2a5deb664b25c007b35d259f6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5edc0c15f1667cc2a5deb664b25c007b35d259f6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=5edc0c15f1667cc2a5deb664b25c007b35d259f6", "patch": "@@ -684,8 +684,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  using _Alloc_traits = allocator_traits<_Alloc>;\n \t  _Alloc __a;\n \t  _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 3548. shared_ptr construction from unique_ptr should move\n+\t  // (not copy) the deleter\n \t  _Alloc_traits::construct(__a, __mem, __r.release(),\n-\t\t\t\t   __r.get_deleter());  // non-throwing\n+\t\t\t\t   std::forward<_Del>(__r.get_deleter()));\n \t  _M_pi = __mem;\n \t}\n \n@@ -1070,9 +1073,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Constraint for construction from unique_ptr:\n       template<typename _Yp, typename _Del, typename _Res = void,\n \t       typename _Ptr = typename unique_ptr<_Yp, _Del>::pointer>\n-\tusing _UniqCompatible = typename enable_if<__and_<\n-\t  __sp_compatible_with<_Yp*, _Tp*>, is_convertible<_Ptr, element_type*>\n-\t  >::value, _Res>::type;\n+\tusing _UniqCompatible = __enable_if_t<__and_<\n+\t  __sp_compatible_with<_Yp*, _Tp*>,\n+\t  is_convertible<_Ptr, element_type*>,\n+\t  is_move_constructible<_Del>\n+\t  >::value, _Res>;\n \n       // Constraint for assignment from unique_ptr:\n       template<typename _Yp, typename _Del>"}, {"sha": "d6ec7b1d057898615a334fbdbedc7a83bd5d795a", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/lwg3548.cc", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5edc0c15f1667cc2a5deb664b25c007b35d259f6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Flwg3548.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5edc0c15f1667cc2a5deb664b25c007b35d259f6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Flwg3548.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Flwg3548.cc?ref=5edc0c15f1667cc2a5deb664b25c007b35d259f6", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile { target c++11 } }\n+\n+#include <memory>\n+\n+// LWG 3548\n+// shared_ptr construction from unique_ptr should move (not copy) the deleter\n+\n+struct D\n+{\n+  D() { }\n+  D(D&&) { }\n+  void operator()(int* p) const { delete p; }\n+};\n+\n+std::unique_ptr<int, D> u;\n+std::shared_ptr<int> s1(std::move(u));"}, {"sha": "d7ca51a4aa6e72641e974f4fee1bcece83b729be", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/unique_ptr_deleter.cc", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5edc0c15f1667cc2a5deb664b25c007b35d259f6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Funique_ptr_deleter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5edc0c15f1667cc2a5deb664b25c007b35d259f6/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Funique_ptr_deleter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Funique_ptr_deleter.cc?ref=5edc0c15f1667cc2a5deb664b25c007b35d259f6", "patch": "@@ -58,10 +58,25 @@ test02()\n   VERIFY( D::count == 0 ); // LWG 2415\n }\n \n+void\n+test03()\n+{\n+  struct D\n+  {\n+    D() = default;\n+    D(const D&) = delete; // not copyable or movable\n+    void operator()(int* p) const { delete p; }\n+  };\n+\n+  using namespace std;\n+  static_assert( ! is_constructible<shared_ptr<int>, unique_ptr<int, D>>(),\n+\t\t \"Constraints: is_move_constructible_v<D> is true\" );\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n-  return 0;\n+  test03();\n }"}]}