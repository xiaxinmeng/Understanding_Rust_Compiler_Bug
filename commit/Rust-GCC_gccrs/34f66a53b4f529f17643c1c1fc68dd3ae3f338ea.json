{"sha": "34f66a53b4f529f17643c1c1fc68dd3ae3f338ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRmNjZhNTNiNGY1MjlmMTc2NDNjMWMxZmM2OGRkM2FlM2YzMzhlYQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-05T00:18:17Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-05T00:18:17Z"}, "message": "compiler: statically allocate constant interface data\n    \n    When converting a constant to interface, such as interface{}(42)\n    or interface{}(\"hello\"), if the interface escapes, we currently\n    generate a heap allocation to hold the constant value.\n    \n    This CL changes it to generate a static allocation instead, as\n    the gc compiler does. This reduces allocations in such cases.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/180277\n\nFrom-SVN: r271945", "tree": {"sha": "0bd3561a889220cfb173c2bdcb4e8cdbe9cf64fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bd3561a889220cfb173c2bdcb4e8cdbe9cf64fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34f66a53b4f529f17643c1c1fc68dd3ae3f338ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f66a53b4f529f17643c1c1fc68dd3ae3f338ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34f66a53b4f529f17643c1c1fc68dd3ae3f338ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f66a53b4f529f17643c1c1fc68dd3ae3f338ea/comments", "author": null, "committer": null, "parents": [{"sha": "abccc5d2198f9bac2f09680bb9fb6882bfeae087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abccc5d2198f9bac2f09680bb9fb6882bfeae087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abccc5d2198f9bac2f09680bb9fb6882bfeae087"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "e9072a85851780f54658571c4e4885aad7e4a381", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f66a53b4f529f17643c1c1fc68dd3ae3f338ea/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f66a53b4f529f17643c1c1fc68dd3ae3f338ea/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=34f66a53b4f529f17643c1c1fc68dd3ae3f338ea", "patch": "@@ -1,4 +1,4 @@\n-e4d8ccaed06f81683e79774ede6c61949f6df8b8\n+949c3b7aa603bc09e650d62e82c600b3463802f0\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "d7bf4d75c95234c357aa95da7bacfb2961ba63c5", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f66a53b4f529f17643c1c1fc68dd3ae3f338ea/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f66a53b4f529f17643c1c1fc68dd3ae3f338ea/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=34f66a53b4f529f17643c1c1fc68dd3ae3f338ea", "patch": "@@ -323,9 +323,14 @@ Expression::convert_type_to_interface(Type* lhs_type, Expression* rhs,\n     {\n       // We are assigning a non-pointer value to the interface; the\n       // interface gets a copy of the value in the heap if it escapes.\n-      obj = Expression::make_heap_expression(rhs, location);\n-      if (on_stack)\n-        obj->heap_expression()->set_allocate_on_stack();\n+      if (rhs->is_constant())\n+        obj = Expression::make_unary(OPERATOR_AND, rhs, location);\n+      else\n+        {\n+          obj = Expression::make_heap_expression(rhs, location);\n+          if (on_stack)\n+            obj->heap_expression()->set_allocate_on_stack();\n+        }\n     }\n \n   return Expression::make_interface_value(lhs_type, first_field, obj, location);\n@@ -4896,6 +4901,18 @@ Unary_expression::do_get_backend(Translate_context* context)\n \t\t\t\t\t\t     false, btype, loc, bexpr);\n           bexpr = gogo->backend()->var_expression(decl, loc);\n         }\n+      else if (this->expr_->is_constant())\n+        {\n+          std::string var_name(gogo->initializer_name());\n+          std::string asm_name(go_selectively_encode_id(var_name));\n+          Bvariable* decl =\n+              gogo->backend()->implicit_variable(var_name, asm_name, btype,\n+                                                 true, true, false, 0);\n+          gogo->backend()->implicit_variable_set_init(decl, var_name, btype,\n+                                                      true, true, false,\n+                                                      bexpr);\n+          bexpr = gogo->backend()->var_expression(decl, loc);\n+        }\n \n       go_assert(!this->create_temp_ || this->expr_->is_variable());\n       ret = gogo->backend()->address_expression(bexpr, loc);"}]}