{"sha": "9964df74a9e99e850bf9b0b6ff5c47133f846db8", "node_id": "C_kwDOANBUbNoAKDk5NjRkZjc0YTllOTllODUwYmY5YjBiNmZmNWM0NzEzM2Y4NDZkYjg", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-04-14T17:37:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-04-15T01:34:14Z"}, "message": "-Wdangling-pointer: fix MEM_REF handling [PR109514]\n\nHere we hit the MEM_REF case, with its arg an ADDR_EXPR, but had no handling\nfor that and wrongly assumed it would be a reference to a local variable.\nThis patch overhauls the logic for deciding whether the target is something\nto warn about so that we only warn if we specifically recognize the target\nas non-local.  None of the existing tests regress as a result.\n\n\tPR c++/109514\n\ngcc/ChangeLog:\n\n\t* gimple-ssa-warn-access.cc (pass_waccess::check_dangling_stores):\n\tOverhaul lhs_ref.ref analysis.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Wdangling-pointer-6.C: New test.", "tree": {"sha": "44bb6e88aecdd16b93b79a03cdc89149e5aaf76f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44bb6e88aecdd16b93b79a03cdc89149e5aaf76f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9964df74a9e99e850bf9b0b6ff5c47133f846db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9964df74a9e99e850bf9b0b6ff5c47133f846db8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9964df74a9e99e850bf9b0b6ff5c47133f846db8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9964df74a9e99e850bf9b0b6ff5c47133f846db8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aee19f9b57caef2a600968807ecaa13bac2d2f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aee19f9b57caef2a600968807ecaa13bac2d2f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aee19f9b57caef2a600968807ecaa13bac2d2f8"}], "stats": {"total": 80, "additions": 50, "deletions": 30}, "files": [{"sha": "d0d2148c87208845ac63c76da266e3dddbfe9085", "filename": "gcc/gimple-ssa-warn-access.cc", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9964df74a9e99e850bf9b0b6ff5c47133f846db8/gcc%2Fgimple-ssa-warn-access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9964df74a9e99e850bf9b0b6ff5c47133f846db8/gcc%2Fgimple-ssa-warn-access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-access.cc?ref=9964df74a9e99e850bf9b0b6ff5c47133f846db8", "patch": "@@ -4528,39 +4528,34 @@ pass_waccess::check_dangling_stores (basic_block bb,\n       if (!m_ptr_qry.get_ref (lhs, stmt, &lhs_ref, 0))\n \tcontinue;\n \n-      if (auto_var_p (lhs_ref.ref))\n-\tcontinue;\n-\n-      if (DECL_P (lhs_ref.ref))\n+      if (TREE_CODE (lhs_ref.ref) == MEM_REF)\n \t{\n-\t  if (!POINTER_TYPE_P (TREE_TYPE (lhs_ref.ref))\n-\t      || lhs_ref.deref > 0)\n-\t    continue;\n+\t  lhs_ref.ref = TREE_OPERAND (lhs_ref.ref, 0);\n+\t  ++lhs_ref.deref;\n \t}\n-      else if (TREE_CODE (lhs_ref.ref) == SSA_NAME)\n+      if (TREE_CODE (lhs_ref.ref) == ADDR_EXPR)\n+\t{\n+\t  lhs_ref.ref = TREE_OPERAND (lhs_ref.ref, 0);\n+\t  --lhs_ref.deref;\n+\t}\n+      if (TREE_CODE (lhs_ref.ref) == SSA_NAME)\n \t{\n \t  gimple *def_stmt = SSA_NAME_DEF_STMT (lhs_ref.ref);\n \t  if (!gimple_nop_p (def_stmt))\n \t    /* Avoid looking at or before stores into unknown objects.  */\n \t    return;\n \n-\t  tree var = SSA_NAME_VAR (lhs_ref.ref);\n-\t  if (TREE_CODE (var) == PARM_DECL && DECL_BY_REFERENCE (var))\n-\t    /* Avoid by-value arguments transformed into by-reference.  */\n-\t    continue;\n-\n-\t}\n-      else if (TREE_CODE (lhs_ref.ref) == MEM_REF)\n-\t{\n-\t  tree arg = TREE_OPERAND (lhs_ref.ref, 0);\n-\t  if (TREE_CODE (arg) == SSA_NAME)\n-\t    {\n-\t      gimple *def_stmt = SSA_NAME_DEF_STMT (arg);\n-\t      if (!gimple_nop_p (def_stmt))\n-\t\treturn;\n-\t    }\n+\t  lhs_ref.ref = SSA_NAME_VAR (lhs_ref.ref);\n \t}\n+\n+      if (TREE_CODE (lhs_ref.ref) == PARM_DECL\n+\t  && (lhs_ref.deref - DECL_BY_REFERENCE (lhs_ref.ref)) > 0)\n+\t/* Assignment through a (real) pointer/reference parameter.  */;\n+      else if (TREE_CODE (lhs_ref.ref) == VAR_DECL\n+\t       && !auto_var_p (lhs_ref.ref))\n+\t/* Assignment to/through a non-local variable.  */;\n       else\n+\t/* Something else, don't warn.  */\n \tcontinue;\n \n       if (stores.add (lhs_ref.ref))\n@@ -4587,13 +4582,8 @@ pass_waccess::check_dangling_stores (basic_block bb,\n \t  location_t loc = DECL_SOURCE_LOCATION (rhs_ref.ref);\n \t  inform (loc, \"%qD declared here\", rhs_ref.ref);\n \n-\t  if (DECL_P (lhs_ref.ref))\n-\t    loc = DECL_SOURCE_LOCATION (lhs_ref.ref);\n-\t  else if (EXPR_HAS_LOCATION (lhs_ref.ref))\n-\t    loc = EXPR_LOCATION (lhs_ref.ref);\n-\n-\t  if (loc != UNKNOWN_LOCATION)\n-\t    inform (loc, \"%qE declared here\", lhs_ref.ref);\n+\t  loc = DECL_SOURCE_LOCATION (lhs_ref.ref);\n+\t  inform (loc, \"%qD declared here\", lhs_ref.ref);\n \t}\n     }\n "}, {"sha": "20d47edecc5f9b75f190ec88d04ca00673335a29", "filename": "gcc/testsuite/g++.dg/warn/Wdangling-pointer-6.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9964df74a9e99e850bf9b0b6ff5c47133f846db8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-pointer-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9964df74a9e99e850bf9b0b6ff5c47133f846db8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-pointer-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-pointer-6.C?ref=9964df74a9e99e850bf9b0b6ff5c47133f846db8", "patch": "@@ -0,0 +1,30 @@\n+// PR c++/109514\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-O2 -Werror=dangling-pointer\" }\n+\n+struct _Rb_tree_node_base {\n+  _Rb_tree_node_base *_M_parent;\n+};\n+struct _Rb_tree_header {\n+  _Rb_tree_node_base _M_header;\n+  void _M_move_data() { _M_header._M_parent->_M_parent = &_M_header; }\n+};\n+struct _Rb_tree {\n+  _Rb_tree_header _M_impl;\n+  _Rb_tree_node_base *&_M_root() { return _M_impl._M_header._M_parent; }\n+  _Rb_tree();\n+  _Rb_tree &operator=(_Rb_tree &&);\n+};\n+_Rb_tree &_Rb_tree::operator=(_Rb_tree &&) {\n+  if (_M_root())\n+    _M_impl._M_move_data();\n+  return *this;\n+}\n+struct set {\n+  _Rb_tree _M_t;\n+};\n+set FilterRs();\n+void f() {\n+  set rs;\n+  rs = FilterRs();\n+};"}]}