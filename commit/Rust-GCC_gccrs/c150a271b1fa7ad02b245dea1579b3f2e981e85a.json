{"sha": "c150a271b1fa7ad02b245dea1579b3f2e981e85a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE1MGEyNzFiMWZhN2FkMDJiMjQ1ZGVhMTU3OWIzZjJlOTgxZTg1YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-02-23T17:23:44Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-02-23T17:23:44Z"}, "message": "type_traits: Implement is_convertible.\n\n2005-02-23  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: Implement is_convertible.\n\t* testsuite/tr1/4_metaprogramming/relationships_between_types/\n\tis_convertible/is_convertible.cc: New.\n\t* testsuite/tr1/4_metaprogramming/relationships_between_types/\n\tis_convertible/typedefs.cc: Likewise.\n\t* testsuite/testsuite_tr1.h: Add class DerivedType.\n\n\t* include/tr1/type_traits (is_function): Don't mistake references\n\tto function types for function types.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_function/is_function.cc: Add testcase.\n\nFrom-SVN: r95458", "tree": {"sha": "7fdedf5c972da7c58c73f7ec99acfc1c1a1fc3d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fdedf5c972da7c58c73f7ec99acfc1c1a1fc3d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c150a271b1fa7ad02b245dea1579b3f2e981e85a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c150a271b1fa7ad02b245dea1579b3f2e981e85a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c150a271b1fa7ad02b245dea1579b3f2e981e85a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c150a271b1fa7ad02b245dea1579b3f2e981e85a/comments", "author": null, "committer": null, "parents": [{"sha": "f439764ffa75ffef38c6e7bfd4815288bd3e2c18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f439764ffa75ffef38c6e7bfd4815288bd3e2c18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f439764ffa75ffef38c6e7bfd4815288bd3e2c18"}], "stats": {"total": 168, "additions": 167, "deletions": 1}, "files": [{"sha": "14e038d4fa425a43af4c1d67453c27eb320a0a61", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c150a271b1fa7ad02b245dea1579b3f2e981e85a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c150a271b1fa7ad02b245dea1579b3f2e981e85a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c150a271b1fa7ad02b245dea1579b3f2e981e85a", "patch": "@@ -1,3 +1,17 @@\n+2005-02-23  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: Implement is_convertible.\n+\t* testsuite/tr1/4_metaprogramming/relationships_between_types/\n+\tis_convertible/is_convertible.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/relationships_between_types/\n+\tis_convertible/typedefs.cc: Likewise.\n+\t* testsuite/testsuite_tr1.h: Add class DerivedType.\n+\n+\t* include/tr1/type_traits (is_function): Don't mistake references\n+\tto function types for function types.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_function/is_function.cc: Add testcase.\n+\n 2005-02-22  Benjamin Kosnik  <bkoz@redhat.com>\n \t\n \t* scripts/check_performance: Tweaks."}, {"sha": "0fb5916fc655260cc8b1f3af8c7e253578909c3b", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c150a271b1fa7ad02b245dea1579b3f2e981e85a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c150a271b1fa7ad02b245dea1579b3f2e981e85a/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=c150a271b1fa7ad02b245dea1579b3f2e981e85a", "patch": "@@ -208,7 +208,8 @@ namespace tr1\n     struct is_enum\n     : public integral_constant<bool, __is_enum_helper<_Tp>::__value> { };\n \n-  template<typename _Tp, bool = is_void<_Tp>::value>\n+  template<typename _Tp, bool = (is_void<_Tp>::value\n+\t\t\t\t || is_reference<_Tp>::value)>\n     struct __is_function_helper\n     {\n       static const bool __value = (__conv_helper<typename\n@@ -440,6 +441,39 @@ namespace tr1\n     struct is_same<_Tp, _Tp>\n     : public true_type { };\n \n+  template<typename _Tp>\n+    struct __is_int_or_cref\n+    {\n+      typedef typename remove_reference<_Tp>::type __rr_Tp;\n+      static const bool __value = (is_integral<_Tp>::value\n+\t\t\t\t   || (is_integral<__rr_Tp>::value\n+\t\t\t\t       && is_const<__rr_Tp>::value\n+\t\t\t\t       && !is_volatile<__rr_Tp>::value));\n+    };\n+\n+  template<typename _From, typename _To,\n+\t   bool = (is_function<_To>::value || is_array<_To>::value\n+\t\t   // This special case is here only to avoid warnings.\t\t   \n+\t\t   || (is_floating_point<typename\n+\t\t       remove_reference<_From>::type>::value\n+\t\t       && __is_int_or_cref<_To>::__value))>\n+    struct __is_convertible_helper\n+    {\n+      // \"An imaginary lvalue of type From...\".\n+      static const bool __value = (__conv_helper<typename\n+\t\t\t\t   add_reference<_From>::type, _To>::__value);\n+    };\n+\n+  template<typename _From, typename _To>\n+    struct __is_convertible_helper<_From, _To, true>\n+    { static const bool __value = __is_int_or_cref<_To>::__value; };\n+\n+  template<typename _From, typename _To>\n+    struct is_convertible\n+    : public integral_constant<bool,\n+\t\t\t       __is_convertible_helper<_From, _To>::__value>\n+    { };\n+\n   /// @brief  const-volatile modifications [4.7.1].\n   template<typename _Tp>\n     struct remove_const"}, {"sha": "a0302c136534cea78eb45e08d300b69a9682e4af", "filename": "libstdc++-v3/testsuite/testsuite_tr1.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c150a271b1fa7ad02b245dea1579b3f2e981e85a/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c150a271b1fa7ad02b245dea1579b3f2e981e85a/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h?ref=c150a271b1fa7ad02b245dea1579b3f2e981e85a", "patch": "@@ -113,6 +113,8 @@ namespace __gnu_test\n   typedef volatile ClassType        vClassType;\n   typedef const volatile ClassType  cvClassType;\n \n+  class DerivedType : public ClassType { };\n+\n   enum EnumType { };\n \n   struct ConvType"}, {"sha": "1c8d64dca4d55b7a1b7a34b060e78b3c3c68a18d", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_function/is_function.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c150a271b1fa7ad02b245dea1579b3f2e981e85a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2Fis_function.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c150a271b1fa7ad02b245dea1579b3f2e981e85a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2Fis_function.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_function%2Fis_function.cc?ref=c150a271b1fa7ad02b245dea1579b3f2e981e85a", "patch": "@@ -41,6 +41,7 @@ void test01()\n   VERIFY( (test_category<is_function, const void>(false)) );\n \n   VERIFY( (test_category<is_function, AbstractClass>(false)) );\n+  VERIFY( (test_category<is_function, int(&)(int)>(false)) );\n   \n   // Sanity check.\n   VERIFY( (test_category<is_function, ClassType>(false)) );"}, {"sha": "858bfda3ad1b25cb3cfcbfd312309b837c0bf171", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/relationships_between_types/is_convertible/is_convertible.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c150a271b1fa7ad02b245dea1579b3f2e981e85a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_convertible%2Fis_convertible.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c150a271b1fa7ad02b245dea1579b3f2e981e85a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_convertible%2Fis_convertible.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_convertible%2Fis_convertible.cc?ref=c150a271b1fa7ad02b245dea1579b3f2e981e85a", "patch": "@@ -0,0 +1,79 @@\n+// 2005-02-23  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.6 Relationships between types\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_convertible;\n+  using namespace __gnu_test;\n+\n+  // Positive tests.\n+  VERIFY( (test_relationship<is_convertible, int, int>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int, const int>(true)) );\n+  VERIFY( (test_relationship<is_convertible, volatile int, const int>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int, float>(true)) );\n+  VERIFY( (test_relationship<is_convertible, double, float>(true)) );\n+  VERIFY( (test_relationship<is_convertible, float, int>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int*, const int*>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int*, void*>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int[4], int*>(true)) );\n+  VERIFY( (test_relationship<is_convertible, float&, int>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int, const int&>(true)) ); \n+  VERIFY( (test_relationship<is_convertible, const int&, int>(true)) );\n+  VERIFY( (test_relationship<is_convertible, float, const int&>(true)) );\n+  VERIFY( (test_relationship<is_convertible, float, volatile float&>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int(int), int(*)(int)>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int(int), int(&)(int)>(true)) );\n+  VERIFY( (test_relationship<is_convertible, int(&)(int), int(*)(int)>(true)) );\n+  VERIFY( (test_relationship<is_convertible, EnumType, int>(true)) );\n+  VERIFY( (test_relationship<is_convertible, ClassType, ClassType>(true)) );\n+  VERIFY( (test_relationship<is_convertible, DerivedType, ClassType>(true)) );\n+  VERIFY( (test_relationship<is_convertible, DerivedType*, ClassType*>(true)) );\n+  VERIFY( (test_relationship<is_convertible, DerivedType&, ClassType&>(true)) );\n+\n+  // Negative tests.\n+  VERIFY( (test_relationship<is_convertible, const int*, int*>(false)) );\n+  VERIFY( (test_relationship<is_convertible, int*, float*>(false)) );\n+  VERIFY( (test_relationship<is_convertible, const int[4], int*>(false)) );\n+  VERIFY( (test_relationship<is_convertible, int[4], int[4]>(false)) );\n+  VERIFY( (test_relationship<is_convertible, const int&, int&>(false)) );\n+  VERIFY( (test_relationship<is_convertible, float&, int&>(false)) );  \n+  VERIFY( (test_relationship<is_convertible, float, volatile int&>(false)) );\n+  VERIFY( (test_relationship<is_convertible, int(int), int(int)>(false)) );\n+  VERIFY( (test_relationship<is_convertible, int(int), int(*)(void)>(false)) );\n+  VERIFY( (test_relationship<is_convertible, int(*)(int), int(&)(int)>(false)) );\n+  VERIFY( (test_relationship<is_convertible, int, EnumType>(false)) );\n+  VERIFY( (test_relationship<is_convertible, int, ClassType>(false)) );\n+  VERIFY( (test_relationship<is_convertible, ClassType, DerivedType>(false)) );\n+  VERIFY( (test_relationship<is_convertible, ClassType*, DerivedType*>(false)) );\n+  VERIFY( (test_relationship<is_convertible, ClassType&, DerivedType&>(false)) );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "333c405ac0c040461a91551feea0a26475781322", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/relationships_between_types/is_convertible/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c150a271b1fa7ad02b245dea1579b3f2e981e85a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_convertible%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c150a271b1fa7ad02b245dea1579b3f2e981e85a/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_convertible%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_convertible%2Ftypedefs.cc?ref=c150a271b1fa7ad02b245dea1579b3f2e981e85a", "patch": "@@ -0,0 +1,36 @@\n+// 2005-02-23  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_convertible<int, int>  test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}]}