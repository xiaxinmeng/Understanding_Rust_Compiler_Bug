{"sha": "4e185d7cee2261ee43266533a8fdbcc84e65e539", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUxODVkN2NlZTIyNjFlZTQzMjY2NTMzYThmZGJjYzg0ZTY1ZTUzOQ==", "commit": {"author": {"name": "Dominique d'Humieres", "email": "dominiq@lps.ens.fr", "date": "2014-03-08T06:04:34Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2014-03-08T06:04:34Z"}, "message": "re PR fortran/60128 (Wrong ouput using en edit descriptor)\n\n2014-03-08  Dominique d'Humieres  <dominiq@lps.ens.fr>\n\n\tPR libgfortran/60128\n\t* io/write_float.def (output_float): Remove unused variable\n\tnzero_real. Replace a double space with a single one.\n\t(determine_en_precision): Fix wrong handling of the EN format.\n\n\tPR libfortran/60128\n\t* gfortran.dg/fmt_en.f90: New test.\n\nFrom-SVN: r208423", "tree": {"sha": "f71055d1cc6bf8e4cb1bed27e2c4718192f8b8fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f71055d1cc6bf8e4cb1bed27e2c4718192f8b8fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e185d7cee2261ee43266533a8fdbcc84e65e539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e185d7cee2261ee43266533a8fdbcc84e65e539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e185d7cee2261ee43266533a8fdbcc84e65e539", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e185d7cee2261ee43266533a8fdbcc84e65e539/comments", "author": {"login": "DominiquedHumieres", "id": 18394944, "node_id": "MDQ6VXNlcjE4Mzk0OTQ0", "avatar_url": "https://avatars.githubusercontent.com/u/18394944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DominiquedHumieres", "html_url": "https://github.com/DominiquedHumieres", "followers_url": "https://api.github.com/users/DominiquedHumieres/followers", "following_url": "https://api.github.com/users/DominiquedHumieres/following{/other_user}", "gists_url": "https://api.github.com/users/DominiquedHumieres/gists{/gist_id}", "starred_url": "https://api.github.com/users/DominiquedHumieres/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DominiquedHumieres/subscriptions", "organizations_url": "https://api.github.com/users/DominiquedHumieres/orgs", "repos_url": "https://api.github.com/users/DominiquedHumieres/repos", "events_url": "https://api.github.com/users/DominiquedHumieres/events{/privacy}", "received_events_url": "https://api.github.com/users/DominiquedHumieres/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "494c3d0e55e267db18575d2da0285f9820eabae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/494c3d0e55e267db18575d2da0285f9820eabae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/494c3d0e55e267db18575d2da0285f9820eabae0"}], "stats": {"total": 206, "additions": 184, "deletions": 22}, "files": [{"sha": "e46a9fc913b4d8a27bc75ebe57f1cb91b92a4eca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e185d7cee2261ee43266533a8fdbcc84e65e539/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e185d7cee2261ee43266533a8fdbcc84e65e539/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4e185d7cee2261ee43266533a8fdbcc84e65e539", "patch": "@@ -1,3 +1,8 @@\n+2014-03-08  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR libfortran/60128\n+\t* gfortran.dg/fmt_en.f90: New test.\n+\n 2014-03-07  Jason Merrill  <jason@redhat.com>\n \n \t* lib/g++-dg.exp (g++-dg-runtest): Run tests in C++1y mode, too."}, {"sha": "75d6040d8e8f931a68c9171502f6292cdb3f486b", "filename": "gcc/testsuite/gfortran.dg/fmt_en.f90", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e185d7cee2261ee43266533a8fdbcc84e65e539/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e185d7cee2261ee43266533a8fdbcc84e65e539/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_en.f90?ref=4e185d7cee2261ee43266533a8fdbcc84e65e539", "patch": "@@ -0,0 +1,141 @@\n+! { dg-do run }\n+! PR60128 Invalid outputs with EN descriptors\n+! Test case provided by Walt Brainerd.\n+program pr60128\n+implicit none\n+    integer :: n_tst = 0, n_cnt = 0\n+\n+! Original test.\n+    call checkfmt(\"(en15.2)\", -.44444,    \"    -444.44E-03\")\n+\n+! Test for the bug in comment 6.\n+    call checkfmt(\"(en15.0)\", 1.0,        \"         1.E+00\")\n+    call checkfmt(\"(en15.0)\", 1.00000012, \"         1.E+00\")\n+    call checkfmt(\"(en15.0)\", 0.99999994, \"         1.E+00\")\n+    call checkfmt(\"(en15.0)\", 10.0,       \"        10.E+00\")\n+    call checkfmt(\"(en15.0)\", 10.0000010, \"        10.E+00\")\n+    call checkfmt(\"(en15.0)\", 9.99999905, \"        10.E+00\")\n+    call checkfmt(\"(en15.0)\", 100.0,      \"       100.E+00\")\n+    call checkfmt(\"(en15.0)\", 100.000008, \"       100.E+00\")\n+    call checkfmt(\"(en15.0)\", 99.9999924, \"       100.E+00\")\n+    call checkfmt(\"(en15.0)\", 1000.0,     \"         1.E+03\")\n+    call checkfmt(\"(en15.0)\", 1000.00006, \"         1.E+03\")\n+    call checkfmt(\"(en15.0)\", 999.999939, \"         1.E+03\")\n+    call checkfmt(\"(en15.0)\", 9.5,        \"        10.E+00\")\n+    call checkfmt(\"(en15.0)\", 9.50000095, \"        10.E+00\")\n+    call checkfmt(\"(en15.0)\", 9.49999905, \"         9.E+00\")\n+    call checkfmt(\"(en15.0)\", 99.5,       \"       100.E+00\")\n+    call checkfmt(\"(en15.0)\", 99.5000076, \"       100.E+00\")\n+    call checkfmt(\"(en15.0)\", 99.4999924, \"        99.E+00\")\n+    call checkfmt(\"(en15.0)\", 999.5,      \"         1.E+03\")\n+    call checkfmt(\"(en15.0)\", 999.500061, \"         1.E+03\")\n+    call checkfmt(\"(en15.0)\", 999.499939, \"       999.E+00\")\n+    call checkfmt(\"(en15.0)\", 9500.0,     \"        10.E+03\")\n+    call checkfmt(\"(en15.0)\", 9500.00098, \"        10.E+03\")\n+    call checkfmt(\"(en15.0)\", 9499.99902, \"         9.E+03\")\n+    call checkfmt(\"(en15.1)\", 9950.0,     \"       10.0E+03\")\n+    call checkfmt(\"(en15.2)\", 9995.0,     \"      10.00E+03\")\n+    call checkfmt(\"(en15.3)\", 9999.5,     \"     10.000E+03\")\n+    call checkfmt(\"(en15.1)\", 9.5,        \"        9.5E+00\")\n+    call checkfmt(\"(en15.1)\", 9.50000095, \"        9.5E+00\")\n+    call checkfmt(\"(en15.1)\", 9.49999905, \"        9.5E+00\")\n+    call checkfmt(\"(en15.1)\", 0.099951,   \"      100.0E-03\")\n+    call checkfmt(\"(en15.1)\", 0.009951,   \"       10.0E-03\")\n+    call checkfmt(\"(en15.1)\", 0.000999951,\"        1.0E-03\")\n+\n+    call checkfmt(\"(en15.0)\", -1.0,        \"        -1.E+00\")\n+    call checkfmt(\"(en15.0)\", -1.00000012, \"        -1.E+00\")\n+    call checkfmt(\"(en15.0)\", -0.99999994, \"        -1.E+00\")\n+    call checkfmt(\"(en15.0)\", -10.0,       \"       -10.E+00\")\n+    call checkfmt(\"(en15.0)\", -10.0000010, \"       -10.E+00\")\n+    call checkfmt(\"(en15.0)\", -9.99999905, \"       -10.E+00\")\n+    call checkfmt(\"(en15.0)\", -100.0,      \"      -100.E+00\")\n+    call checkfmt(\"(en15.0)\", -100.000008, \"      -100.E+00\")\n+    call checkfmt(\"(en15.0)\", -99.9999924, \"      -100.E+00\")\n+    call checkfmt(\"(en15.0)\", -1000.0,     \"        -1.E+03\")\n+    call checkfmt(\"(en15.0)\", -1000.00006, \"        -1.E+03\")\n+    call checkfmt(\"(en15.0)\", -999.999939, \"        -1.E+03\")\n+    call checkfmt(\"(en15.0)\", -9.5,        \"       -10.E+00\")\n+    call checkfmt(\"(en15.0)\", -9.50000095, \"       -10.E+00\")\n+    call checkfmt(\"(en15.0)\", -9.49999905, \"        -9.E+00\")\n+    call checkfmt(\"(en15.0)\", -99.5,       \"      -100.E+00\")\n+    call checkfmt(\"(en15.0)\", -99.5000076, \"      -100.E+00\")\n+    call checkfmt(\"(en15.0)\", -99.4999924, \"       -99.E+00\")\n+    call checkfmt(\"(en15.0)\", -999.5,      \"        -1.E+03\")\n+    call checkfmt(\"(en15.0)\", -999.500061, \"        -1.E+03\")\n+    call checkfmt(\"(en15.0)\", -999.499939, \"      -999.E+00\")\n+    call checkfmt(\"(en15.0)\", -9500.0,     \"       -10.E+03\")\n+    call checkfmt(\"(en15.0)\", -9500.00098, \"       -10.E+03\")\n+    call checkfmt(\"(en15.0)\", -9499.99902, \"        -9.E+03\")\n+    call checkfmt(\"(en15.1)\", -9950.0,     \"      -10.0E+03\")\n+    call checkfmt(\"(en15.2)\", -9995.0,     \"     -10.00E+03\")\n+    call checkfmt(\"(en15.3)\", -9999.5,     \"    -10.000E+03\")\n+    call checkfmt(\"(en15.1)\", -9.5,        \"       -9.5E+00\")\n+    call checkfmt(\"(en15.1)\", -9.50000095, \"       -9.5E+00\")\n+    call checkfmt(\"(en15.1)\", -9.49999905, \"       -9.5E+00\")\n+    call checkfmt(\"(en15.1)\", -0.099951,   \"     -100.0E-03\")\n+    call checkfmt(\"(en15.1)\", -0.009951,   \"      -10.0E-03\")\n+    call checkfmt(\"(en15.1)\", -0.000999951,\"       -1.0E-03\")\n+\n+    call checkfmt(\"(en15.1)\", 987350.,     \"      987.4E+03\")\n+    call checkfmt(\"(en15.2)\", 98735.,      \"      98.74E+03\")\n+    call checkfmt(\"(en15.3)\", 9873.5,      \"      9.874E+03\")\n+    call checkfmt(\"(en15.1)\", 987650.,     \"      987.6E+03\")\n+    call checkfmt(\"(en15.2)\", 98765.,      \"      98.76E+03\")\n+    call checkfmt(\"(en15.3)\", 9876.5,      \"      9.876E+03\")\n+    call checkfmt(\"(en15.1)\", 3.125E-02,   \"       31.2E-03\")\n+    call checkfmt(\"(en15.1)\", 9.375E-02,   \"       93.8E-03\")\n+    call checkfmt(\"(en15.2)\", 1.5625E-02,  \"      15.62E-03\")\n+    call checkfmt(\"(en15.2)\", 4.6875E-02,  \"      46.88E-03\")\n+    call checkfmt(\"(en15.3)\", 7.8125E-03,  \"      7.812E-03\")\n+    call checkfmt(\"(en15.3)\", 2.34375E-02, \"     23.438E-03\")\n+    call checkfmt(\"(en15.3)\", 9.765625E-04,\"    976.562E-06\")\n+    call checkfmt(\"(en15.6)\", 2.9296875E-03,\"   2.929688E-03\")\n+\n+    call checkfmt(\"(en15.1)\", -987350.,     \"     -987.4E+03\")\n+    call checkfmt(\"(en15.2)\", -98735.,      \"     -98.74E+03\")\n+    call checkfmt(\"(en15.3)\", -9873.5,      \"     -9.874E+03\")\n+    call checkfmt(\"(en15.1)\", -987650.,     \"     -987.6E+03\")\n+    call checkfmt(\"(en15.2)\", -98765.,      \"     -98.76E+03\")\n+    call checkfmt(\"(en15.3)\", -9876.5,      \"     -9.876E+03\")\n+    call checkfmt(\"(en15.1)\", -3.125E-02,   \"      -31.2E-03\")\n+    call checkfmt(\"(en15.1)\", -9.375E-02,   \"      -93.8E-03\")\n+    call checkfmt(\"(en15.2)\", -1.5625E-02,  \"     -15.62E-03\")\n+    call checkfmt(\"(en15.2)\", -4.6875E-02,  \"     -46.88E-03\")\n+    call checkfmt(\"(en15.3)\", -7.8125E-03,  \"     -7.812E-03\")\n+    call checkfmt(\"(en15.3)\", -2.34375E-02, \"    -23.438E-03\")\n+    call checkfmt(\"(en15.3)\", -9.765625E-04,\"   -976.562E-06\")\n+    call checkfmt(\"(en15.6)\", -2.9296875E-03,\"  -2.929688E-03\")\n+\n+    !print *, n_tst, n_cnt\n+    if (n_cnt /= 0) call abort\n+\n+contains\n+    subroutine checkfmt(fmt, x, cmp)\n+        use ISO_FORTRAN_ENV\n+        implicit none\n+        integer, parameter :: j(size(real_kinds)+4)=[REAL_KINDS, [4, 4, 4, 4]]\n+        integer :: i\n+        character(len=*), intent(in) :: fmt\n+        real, intent(in) :: x\n+        character(len=*), intent(in) :: cmp\n+        character(len=20) :: s\n+        do i=1,size(real_kinds)\n+          if (i == 1) then\n+            write(s, fmt) real(x,kind=j(1))\n+          else if (i == 2) then\n+            write(s, fmt) real(x,kind=j(2))\n+          else if (i == 3) then\n+            write(s, fmt) real(x,kind=j(3))\n+          else if (i == 4) then\n+            write(s, fmt) real(x,kind=j(4))\n+          end if\n+          n_tst = n_tst + 1\n+          if (s /= cmp) then\n+             print \"(a,1x,a,' expected: ',1x,a)\", fmt, s, cmp\n+             n_cnt = n_cnt + 1\n+           end if\n+        end do\n+        \n+    end subroutine\n+end program"}, {"sha": "4005df089193cbcc3efaf9a1af932ad303f5896b", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e185d7cee2261ee43266533a8fdbcc84e65e539/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e185d7cee2261ee43266533a8fdbcc84e65e539/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=4e185d7cee2261ee43266533a8fdbcc84e65e539", "patch": "@@ -1,3 +1,10 @@\n+2014-03-08  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR libgfortran/60128\n+\t* io/write_float.def (output_float): Remove unused variable\n+\tnzero_real. Replace a double space with a single one.\n+\t(determine_en_precision): Fix wrong handling of the EN format.\n+\n 2014-03-03  Jerry DeLisle  <jvdelisle@gcc.gnu>\n \n \tPR libfortran/60148"}, {"sha": "99f6ff8e83f851f4feb97d4c2175e816b9f29624", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e185d7cee2261ee43266533a8fdbcc84e65e539/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e185d7cee2261ee43266533a8fdbcc84e65e539/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=4e185d7cee2261ee43266533a8fdbcc84e65e539", "patch": "@@ -125,8 +125,6 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n   int nzero;\n   /* Number of digits after the decimal point.  */\n   int nafter;\n-  /* Number of zeros after the decimal point, whatever the precision.  */\n-  int nzero_real;\n   int leadzero;\n   int nblanks;\n   int ndigits, edigits;\n@@ -138,7 +136,6 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n   p = dtp->u.p.scale_factor;\n \n   rchar = '5';\n-  nzero_real = -1;\n \n   /* We should always know the field width and precision.  */\n   if (d < 0)\n@@ -191,7 +188,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \t      if (nafter < 0)\n \t\tnafter = 0;\n \t      nafter = d;\n-\t      nzero = nzero_real = 0;\n+\t      nzero = 0;\n \t    }\n \t  else /* p < 0  */\n \t    {\n@@ -211,14 +208,13 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \t\t  nafter = d + nbefore;\n \t\t  nbefore = 0;\n \t\t}\n-\t      nzero_real = nzero;\n \t      if (nzero > d)\n \t\tnzero = d;\n \t    }\n \t}\n       else\n \t{\n-\t  nzero = nzero_real = 0;\n+\t  nzero = 0;\n \t  nafter = d;\n \t}\n \n@@ -373,7 +369,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n   updown:\n \n   rchar = '0';\n-  if  (ft != FMT_F && w > 0 && d == 0 && p == 0)\n+  if (ft != FMT_F && w > 0 && d == 0 && p == 0)\n     nbefore = 1;\n   /* Scan for trailing zeros to see if we really need to round it.  */\n   for(i = nbefore + nafter; i < ndigits; i++)\n@@ -1153,14 +1149,36 @@ OUTPUT_FLOAT_FMT_G(16,L)\n /* EN format is tricky since the number of significant digits depends\n    on the magnitude.  Solve it by first printing a temporary value and\n    figure out the number of significant digits from the printed\n-   exponent.  */\n+   exponent.  Values y, 0.95*10.0**e <= y <10.0**e, are rounded to\n+   10.0**e even when the final result will not be rounded to 10.0**e.\n+   For these values the exponent returned by atoi has to be decremented\n+   by one. The values y in the ranges\n+       (1000.0-0.5*10.0**(-d))*10.0**(3*n) <= y < 10.0*(3*(n+1))  \n+        (100.0-0.5*10.0**(-d))*10.0**(3*n) <= y < 10.0*(3*n+2)\n+         (10.0-0.5*10.0**(-d))*10.0**(3*n) <= y < 10.0*(3*n+1)\n+   are correctly rounded respectively to 1.0...0*10.0*(3*(n+1)),\n+   100.0...0*10.0*(3*n), and 10.0...0*10.0*(3*n), where 0...0\n+   represents d zeroes, by the lines 279 to 297. */\n \n #define EN_PREC(x,y)\\\n {\\\n-    GFC_REAL_ ## x tmp;\t\t\t\t\\\n-    tmp = * (GFC_REAL_ ## x *)source;\t\t\t\t\\\n-    if (ISFINITE (y,tmp))\t\t\t\t\t\\\n-      nprinted = DTOA(y,0,tmp);\t\t\t\t\t\\\n+    volatile GFC_REAL_ ## x tmp, one = 1.0;\\\n+    tmp = * (GFC_REAL_ ## x *)source;\\\n+    if (ISFINITE (y,tmp))\\\n+      {\\\n+\tnprinted = DTOA(y,0,tmp);\\\n+\tint e = atoi (&buffer[4]);\\\n+\tif (buffer[1] == '1')\\\n+\t  {\\\n+\t    tmp = (calculate_exp_ ## x (-e)) * tmp;\\\n+\t    tmp = one - (tmp < 0 ? -tmp : tmp);\t\\\n+\t    if (tmp > 0)\\\n+\t      e = e - 1;\\\n+\t  }\\\n+\tnbefore = e%3;\\\n+\tif (nbefore < 0)\\\n+\t  nbefore = 3 + nbefore;\\\n+      }\\\n     else\\\n       nprinted = -1;\\\n }\\\n@@ -1172,6 +1190,7 @@ determine_en_precision (st_parameter_dt *dtp, const fnode *f,\n   int nprinted;\n   char buffer[10];\n   const size_t size = 10;\n+  int nbefore; /* digits before decimal point - 1.  */\n \n   switch (len)\n     {\n@@ -1204,16 +1223,6 @@ determine_en_precision (st_parameter_dt *dtp, const fnode *f,\n   if (nprinted == -1)\n     return -1;\n \n-  int e = atoi (&buffer[5]);\n-  int nbefore; /* digits before decimal point - 1.  */\n-  if (e >= 0)\n-    nbefore = e % 3;\n-  else\n-    {\n-      nbefore = (-e) % 3;\n-      if (nbefore != 0)\n-\tnbefore = 3 - nbefore;\n-    }\n   int prec = f->u.real.d + nbefore;\n   if (dtp->u.p.current_unit->round_status != ROUND_UNSPECIFIED\n       && dtp->u.p.current_unit->round_status != ROUND_PROCDEFINED)"}]}