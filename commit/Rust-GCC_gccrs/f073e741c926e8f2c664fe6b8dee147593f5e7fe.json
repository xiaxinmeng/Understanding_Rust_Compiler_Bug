{"sha": "f073e741c926e8f2c664fe6b8dee147593f5e7fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA3M2U3NDFjOTI2ZThmMmM2NjRmZTZiOGRlZTE0NzU5M2Y1ZTdmZQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-06-16T08:43:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:43:57Z"}, "message": "re PR ada/15613 (Accepts named parameters not last)\n\n2005-06-14  Robert Dewar  <dewar@adacore.com>\n\n\tPR ada/15613\n\n\t* par-ch2.adb (Scan_Pragma_Argument): New procedure\n\t(P_Pragma): Implement RM 2.8(4) check for no pos args after named args\n\nFrom-SVN: r101051", "tree": {"sha": "532aa5dc17f149b7ad5c0e479df59a37163b2c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/532aa5dc17f149b7ad5c0e479df59a37163b2c43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f073e741c926e8f2c664fe6b8dee147593f5e7fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f073e741c926e8f2c664fe6b8dee147593f5e7fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f073e741c926e8f2c664fe6b8dee147593f5e7fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f073e741c926e8f2c664fe6b8dee147593f5e7fe/comments", "author": null, "committer": null, "parents": [{"sha": "96f2e32fff1ec9d443e238bbeb131fc564810661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96f2e32fff1ec9d443e238bbeb131fc564810661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96f2e32fff1ec9d443e238bbeb131fc564810661"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "0790eadd4a3324dd972f47c7f8001b06e43f246b", "filename": "gcc/ada/par-ch2.adb", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f073e741c926e8f2c664fe6b8dee147593f5e7fe/gcc%2Fada%2Fpar-ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f073e741c926e8f2c664fe6b8dee147593f5e7fe/gcc%2Fada%2Fpar-ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch2.adb?ref=f073e741c926e8f2c664fe6b8dee147593f5e7fe", "patch": "@@ -33,7 +33,14 @@ package body Ch2 is\n \n    --  Local functions, used only in this chapter\n \n-   function P_Pragma_Argument_Association return Node_Id;\n+   procedure Scan_Pragma_Argument_Association\n+     (Identifier_Seen : in out Boolean;\n+      Association     : out Node_Id);\n+   --  Scans out a pragma argument association. Identifier_Seen is true on\n+   --  entry if a previous association had an identifier, and gets set True if\n+   --  the scanned association has an identifier (this is used to check the\n+   --  rule that no associations without identifiers can follow an association\n+   --  which has an identifier). The result is returned in Association.\n \n    ---------------------\n    -- 2.3  Identifier --\n@@ -55,11 +62,12 @@ package body Ch2 is\n \n       if Token = Tok_Identifier then\n \n-         --  Ada 2005 (AI-284): Compiling in Ada95 mode we notify\n-         --  that interface, overriding, and synchronized are\n-         --  new reserved words\n+         --  Ada 2005 (AI-284): Compiling in Ada95 mode we warn that INTERFACE,\n+         --  OVERRIDING, and SYNCHRONIZED are new reserved words.\n \n-         if Ada_Version = Ada_95 then\n+         if Ada_Version = Ada_95\n+           and then Warn_On_Ada_2005_Compatibility\n+         then\n             if Token_Name = Name_Overriding\n               or else Token_Name = Name_Synchronized\n               or else (Token_Name = Name_Interface\n@@ -231,6 +239,10 @@ package body Ch2 is\n       Arg_Count : Int := 0;\n       --  Number of argument associations processed\n \n+      Identifier_Seen : Boolean := False;\n+      --  Set True if an identifier is encountered for a pragma argument. Used\n+      --  to check that there are no more arguments without identifiers.\n+\n       Pragma_Node   : Node_Id;\n       Pragma_Name   : Name_Id;\n       Semicolon_Loc : Source_Ptr;\n@@ -305,7 +317,7 @@ package body Ch2 is\n \n          loop\n             Arg_Count := Arg_Count + 1;\n-            Assoc_Node := P_Pragma_Argument_Association;\n+            Scan_Pragma_Argument_Association (Identifier_Seen, Assoc_Node);\n \n             if Arg_Count = 2\n               and then (Interface_Check_Required or else Import_Check_Required)\n@@ -438,32 +450,41 @@ package body Ch2 is\n \n    --  Error recovery: cannot raise Error_Resync\n \n-   function P_Pragma_Argument_Association return Node_Id is\n+   procedure Scan_Pragma_Argument_Association\n+     (Identifier_Seen : in out Boolean;\n+      Association     : out Node_Id)\n+   is\n       Scan_State      : Saved_Scan_State;\n-      Pragma_Arg_Node : Node_Id;\n       Identifier_Node : Node_Id;\n \n    begin\n-      Pragma_Arg_Node := New_Node (N_Pragma_Argument_Association, Token_Ptr);\n-      Set_Chars (Pragma_Arg_Node, No_Name);\n+      Association := New_Node (N_Pragma_Argument_Association, Token_Ptr);\n+      Set_Chars (Association, No_Name);\n \n       if Token = Tok_Identifier then\n          Identifier_Node := Token_Node;\n          Save_Scan_State (Scan_State); -- at Identifier\n          Scan; -- past Identifier\n \n          if Token = Tok_Arrow then\n+            Identifier_Seen := True;\n             Scan; -- past arrow\n-            Set_Chars (Pragma_Arg_Node, Chars (Identifier_Node));\n+            Set_Chars (Association, Chars (Identifier_Node));\n             Delete_Node (Identifier_Node);\n+\n+            --  Case of argument with no identifier\n+\n          else\n             Restore_Scan_State (Scan_State); -- to Identifier\n+\n+            if Identifier_Seen then\n+               Error_Msg_SC\n+                 (\"|pragma argument identifier required here ('R'M' 2.8(4))\");\n+            end if;\n          end if;\n       end if;\n \n-      Set_Expression (Pragma_Arg_Node, P_Expression);\n-      return Pragma_Arg_Node;\n-\n-   end P_Pragma_Argument_Association;\n+      Set_Expression (Association, P_Expression);\n+   end Scan_Pragma_Argument_Association;\n \n end Ch2;"}]}