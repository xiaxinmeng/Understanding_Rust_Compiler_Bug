{"sha": "a31ed47cf034b86b88d1e8d6e76c708a8f695f63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMxZWQ0N2NmMDM0Yjg2Yjg4ZDFlOGQ2ZTc2YzcwOGE4ZjY5NWY2Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-05-20T21:34:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-05-20T21:34:35Z"}, "message": "re PR c++/57016 ([C++0x] ICE: unexpected expression '__is_final(hash<int>)' of kind trait_expr)\n\n\tPR c++/57016\n\t* pt.c (instantiation_dependent_r) [TRAIT_EXPR]: Only check type2\n\tif there is one.\n\nFrom-SVN: r199126", "tree": {"sha": "b147e4508ea94f0d360850c002643b026b5c6fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b147e4508ea94f0d360850c002643b026b5c6fa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a31ed47cf034b86b88d1e8d6e76c708a8f695f63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a31ed47cf034b86b88d1e8d6e76c708a8f695f63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a31ed47cf034b86b88d1e8d6e76c708a8f695f63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a31ed47cf034b86b88d1e8d6e76c708a8f695f63/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e5fba0ef6cc1b784f0a11f89e362973e706c602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5fba0ef6cc1b784f0a11f89e362973e706c602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5fba0ef6cc1b784f0a11f89e362973e706c602"}], "stats": {"total": 140, "additions": 139, "deletions": 1}, "files": [{"sha": "30e277b76f50164111e7045cb6898131ace846ec", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31ed47cf034b86b88d1e8d6e76c708a8f695f63/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31ed47cf034b86b88d1e8d6e76c708a8f695f63/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a31ed47cf034b86b88d1e8d6e76c708a8f695f63", "patch": "@@ -1,5 +1,9 @@\n 2013-05-20  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/57016\n+\t* pt.c (instantiation_dependent_r) [TRAIT_EXPR]: Only check type2\n+\tif there is one.\n+\n \tPR c++/57102\n \t* decl.c (fndecl_declared_return_type): Also look in\n \tDECL_SAVED_FUNCTION_DATA."}, {"sha": "903d529abc4a609416d15bb9604a7872cca33ddc", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31ed47cf034b86b88d1e8d6e76c708a8f695f63/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31ed47cf034b86b88d1e8d6e76c708a8f695f63/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a31ed47cf034b86b88d1e8d6e76c708a8f695f63", "patch": "@@ -20177,7 +20177,8 @@ instantiation_dependent_r (tree *tp, int *walk_subtrees,\n \n     case TRAIT_EXPR:\n       if (dependent_type_p (TRAIT_EXPR_TYPE1 (*tp))\n-\t  || dependent_type_p (TRAIT_EXPR_TYPE2 (*tp)))\n+\t  || (TRAIT_EXPR_TYPE2 (*tp)\n+\t      && dependent_type_p (TRAIT_EXPR_TYPE2 (*tp))))\n \treturn *tp;\n       *walk_subtrees = false;\n       return NULL_TREE;"}, {"sha": "9085b71a3d916daba652ffb2bcaf9ce1bbb385b5", "filename": "gcc/testsuite/g++.dg/cpp0x/traits1.C", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31ed47cf034b86b88d1e8d6e76c708a8f695f63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftraits1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31ed47cf034b86b88d1e8d6e76c708a8f695f63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftraits1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftraits1.C?ref=a31ed47cf034b86b88d1e8d6e76c708a8f695f63", "patch": "@@ -0,0 +1,133 @@\n+// PR c++/57016\n+// { dg-require-effective-target c++11 }\n+\n+template < typename _Tp, _Tp __v > struct integral_constant\n+{\n+  static constexpr _Tp value = __v;\n+};\n+template < bool, typename, typename > struct conditional;\n+template < typename ... >struct __and_;\n+template\n+  <\n+  typename\n+  _B1,\n+  typename\n+  _B2 > struct __and_ <_B1, _B2 >:conditional < _B1::value, _B2, _B1 >::type\n+{};\n+template < typename _Pp > struct __not_:integral_constant < bool, _Pp::value >\n+{};\n+template < typename > struct add_rvalue_reference;\n+template\n+  < typename _Tp > typename add_rvalue_reference < _Tp >::type declval ();\n+template < bool, typename _Iftrue, typename > struct conditional\n+{\n+  typedef _Iftrue type;\n+};\n+template < class, class > struct pair;\n+template < typename > class allocator;\n+template < typename, typename, typename > struct binary_function;\n+template < typename _Tp > struct equal_to:binary_function < _Tp, _Tp, bool >\n+{};\n+template < typename > struct hash;\n+template < >struct hash <int >\n+{};\n+template\n+  <\n+  typename,\n+  typename,\n+  typename,\n+  typename, typename, typename, typename, typename > struct _Hashtable_base;\n+template\n+  <\n+  typename,\n+  typename\n+  > struct __is_noexcept_hash:integral_constant < bool, noexcept ((declval)) >\n+{}\n+;\n+struct _Identity;\n+template < bool, bool _Constant_iterators, bool > struct _Hashtable_traits\n+ ;\n+struct _Mod_range_hashing;\n+struct _Default_ranged_hash;\n+struct _Prime_rehash_policy;\n+template\n+  <\n+  typename\n+  _Tp,\n+  typename\n+  _Hash\n+  >\n+  using\n+  __cache_default\n+  =\n+  __not_\n+  <\n+  __and_\n+  <\n+  integral_constant\n+  < bool, __is_final (_Hash) >, __is_noexcept_hash < _Tp, _Hash > >>;\n+template < typename _Key, typename _Value, typename, typename _ExtractKey, typename _Equal, typename _H1, typename _H2, typename, typename _RehashPolicy, typename _Traits > class _Hashtable:\n+_Hashtable_base\n+  < _Key, _Value, _ExtractKey, _Equal, _H1, _H2, _RehashPolicy, _Traits >\n+{}\n+;\n+template\n+  <\n+  bool\n+  _Cache > using __uset_traits = _Hashtable_traits < _Cache, true, true >;\n+template\n+  <\n+  typename\n+  _Value,\n+  typename\n+  _Hash\n+  =\n+  hash\n+  <\n+  _Value\n+  >,\n+  typename\n+  _Pred\n+  =\n+  equal_to\n+  <\n+  _Value\n+  >,\n+  typename\n+  _Alloc\n+  =\n+  allocator\n+  <\n+  _Value\n+  >,\n+  typename\n+  _Tr\n+  =\n+  __uset_traits\n+  <\n+  __cache_default\n+  <\n+  _Value,\n+  _Hash\n+  >::value\n+  >\n+  >\n+  using\n+  __uset_hashtable\n+  =\n+  _Hashtable\n+  <\n+  _Value,\n+  _Value,\n+  _Alloc,\n+  _Identity,\n+  _Pred,\n+  _Hash,\n+  _Mod_range_hashing, _Default_ranged_hash, _Prime_rehash_policy, _Tr >;\n+template < class _Value, class = hash < _Value > >class unordered_set\n+{\n+  typedef __uset_hashtable < _Value > iterator;\n+  template < typename > pair < iterator, bool > emplace ();\n+}\n+;\n+template class unordered_set < int >;"}]}