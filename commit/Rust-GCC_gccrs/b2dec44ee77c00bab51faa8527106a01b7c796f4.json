{"sha": "b2dec44ee77c00bab51faa8527106a01b7c796f4", "node_id": "C_kwDOANBUbNoAKGIyZGVjNDRlZTc3YzAwYmFiNTFmYWE4NTI3MTA2YTAxYjdjNzk2ZjQ", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-14T22:27:33Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-17T02:46:35Z"}, "message": "RISC-V: Rearrange the organization of declarations of RVV intrinsics [NFC]\n\nThis patch doesn't change any functionality, only rearrange the oraganzation.\nMake it to be consistent with RVV ISA. Add annotation for it to make codes\nmore readable.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv-vector-builtins-functions.def (vsetvlmax): Rearrange.\n\t(vsm): Ditto.\n\t(vsse): Ditto.\n\t(vsoxei64): Ditto.\n\t(vsub): Ditto.\n\t(vand): Ditto.\n\t(vor): Ditto.\n\t(vxor): Ditto.\n\t(vsll): Ditto.\n\t(vsra): Ditto.\n\t(vsrl): Ditto.\n\t(vmin): Ditto.\n\t(vmax): Ditto.\n\t(vminu): Ditto.\n\t(vmaxu): Ditto.\n\t(vmul): Ditto.\n\t(vmulh): Ditto.\n\t(vmulhu): Ditto.\n\t(vmulhsu): Ditto.\n\t(vdiv): Ditto.\n\t(vrem): Ditto.\n\t(vdivu): Ditto.\n\t(vremu): Ditto.\n\t(vnot): Ditto.\n\t(vsext): Ditto.\n\t(vzext): Ditto.\n\t(vwadd): Ditto.\n\t(vwsub): Ditto.\n\t(vwmul): Ditto.\n\t(vwmulu): Ditto.\n\t(vwmulsu): Ditto.\n\t(vwaddu): Ditto.\n\t(vwsubu): Ditto.\n\t(vsbc): Ditto.\n\t(vmsbc): Ditto.\n\t(vnsra): Ditto.\n\t(vmerge): Ditto.\n\t(vmv_v): Ditto.\n\t(vmsne): Ditto.\n\t(vmslt): Ditto.\n\t(vmsgt): Ditto.\n\t(vmsle): Ditto.\n\t(vmsge): Ditto.\n\t(vmsltu): Ditto.\n\t(vmsgtu): Ditto.\n\t(vmsleu): Ditto.\n\t(vmsgeu): Ditto.\n\t(vnmsac): Ditto.\n\t(vmadd): Ditto.\n\t(vnmsub): Ditto.\n\t(vwmacc): Ditto.\n\t(vsadd): Ditto.\n\t(vssub): Ditto.\n\t(vssubu): Ditto.\n\t(vaadd): Ditto.\n\t(vasub): Ditto.\n\t(vasubu): Ditto.\n\t(vsmul): Ditto.\n\t(vssra): Ditto.\n\t(vssrl): Ditto.\n\t(vnclip): Ditto.", "tree": {"sha": "e5972c1fd3173792b5a82ae994dd9843885cb3db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5972c1fd3173792b5a82ae994dd9843885cb3db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2dec44ee77c00bab51faa8527106a01b7c796f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2dec44ee77c00bab51faa8527106a01b7c796f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2dec44ee77c00bab51faa8527106a01b7c796f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2dec44ee77c00bab51faa8527106a01b7c796f4/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5804c20b13f28cf6c2e464003c338104bb508906", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5804c20b13f28cf6c2e464003c338104bb508906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5804c20b13f28cf6c2e464003c338104bb508906"}], "stats": {"total": 262, "additions": 161, "deletions": 101}, "files": [{"sha": "9bad1373bfd0a12a9e8b000615c919638f6b79a2", "filename": "gcc/config/riscv/riscv-vector-builtins-functions.def", "status": "modified", "additions": 161, "deletions": 101, "changes": 262, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2dec44ee77c00bab51faa8527106a01b7c796f4/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2dec44ee77c00bab51faa8527106a01b7c796f4/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-vector-builtins-functions.def?ref=b2dec44ee77c00bab51faa8527106a01b7c796f4", "patch": "@@ -37,15 +37,23 @@ along with GCC; see the file COPYING3. If not see\n #endif\n \n /* 6. Configuration-Setting Instructions.  */\n+\n DEF_RVV_FUNCTION (vsetvl, vsetvl, none_preds, i_none_size_size_ops)\n DEF_RVV_FUNCTION (vsetvlmax, vsetvlmax, none_preds, i_none_size_void_ops)\n+\n /* 7. Vector Loads and Stores. */\n+\n+// 7.4. Vector Unit-Stride Instructions\n DEF_RVV_FUNCTION (vle, loadstore, full_preds, all_v_scalar_const_ptr_ops)\n DEF_RVV_FUNCTION (vse, loadstore, none_m_preds, all_v_scalar_ptr_ops)\n DEF_RVV_FUNCTION (vlm, loadstore, none_preds, b_v_scalar_const_ptr_ops)\n DEF_RVV_FUNCTION (vsm, loadstore, none_preds, b_v_scalar_ptr_ops)\n+\n+// 7.5. Vector Strided Instructions\n DEF_RVV_FUNCTION (vlse, loadstore, full_preds, all_v_scalar_const_ptr_ptrdiff_ops)\n DEF_RVV_FUNCTION (vsse, loadstore, none_m_preds, all_v_scalar_ptr_ptrdiff_ops)\n+\n+// 7.6. Vector Indexed Instructions\n DEF_RVV_FUNCTION (vluxei8, indexed_loadstore, full_preds, all_v_scalar_const_ptr_uint8_index_ops)\n DEF_RVV_FUNCTION (vluxei16, indexed_loadstore, full_preds, all_v_scalar_const_ptr_uint16_index_ops)\n DEF_RVV_FUNCTION (vluxei32, indexed_loadstore, full_preds, all_v_scalar_const_ptr_uint32_index_ops)\n@@ -62,162 +70,214 @@ DEF_RVV_FUNCTION (vsoxei8, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uin\n DEF_RVV_FUNCTION (vsoxei16, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uint16_index_ops)\n DEF_RVV_FUNCTION (vsoxei32, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uint32_index_ops)\n DEF_RVV_FUNCTION (vsoxei64, indexed_loadstore, none_m_preds, all_v_scalar_ptr_uint64_index_ops)\n+\n+// TODO: 7.7. Unit-stride Fault-Only-First Loads\n+// TODO: 7.8. Vector Load/Store Segment Instructions\n+\n /* 11. Vector Integer Arithmetic Instructions.  */\n+\n+// 11.1. Vector Single-Width Integer Add and Subtract\n DEF_RVV_FUNCTION (vadd, alu, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vsub, alu, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vand, alu, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vor, alu, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vxor, alu, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vsll, alu, full_preds, iu_shift_vvv_ops)\n-DEF_RVV_FUNCTION (vsra, alu, full_preds, i_shift_vvv_ops)\n-DEF_RVV_FUNCTION (vsrl, alu, full_preds, u_shift_vvv_ops)\n-DEF_RVV_FUNCTION (vmin, alu, full_preds, i_vvv_ops)\n-DEF_RVV_FUNCTION (vmax, alu, full_preds, i_vvv_ops)\n-DEF_RVV_FUNCTION (vminu, alu, full_preds, u_vvv_ops)\n-DEF_RVV_FUNCTION (vmaxu, alu, full_preds, u_vvv_ops)\n-DEF_RVV_FUNCTION (vmul, alu, full_preds, iu_vvv_ops)\n-DEF_RVV_FUNCTION (vmulh, alu, full_preds, full_v_i_vvv_ops)\n-DEF_RVV_FUNCTION (vmulhu, alu, full_preds, full_v_u_vvv_ops)\n-DEF_RVV_FUNCTION (vmulhsu, alu, full_preds, full_v_i_su_vvv_ops)\n-DEF_RVV_FUNCTION (vdiv, alu, full_preds, i_vvv_ops)\n-DEF_RVV_FUNCTION (vrem, alu, full_preds, i_vvv_ops)\n-DEF_RVV_FUNCTION (vdivu, alu, full_preds, u_vvv_ops)\n-DEF_RVV_FUNCTION (vremu, alu, full_preds, u_vvv_ops)\n DEF_RVV_FUNCTION (vadd, alu, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vsub, alu, full_preds, iu_vvv_ops)\n DEF_RVV_FUNCTION (vsub, alu, full_preds, iu_vvx_ops)\n DEF_RVV_FUNCTION (vrsub, alu, full_preds, iu_vvx_ops)\n-DEF_RVV_FUNCTION (vand, alu, full_preds, iu_vvx_ops)\n-DEF_RVV_FUNCTION (vor, alu, full_preds, iu_vvx_ops)\n-DEF_RVV_FUNCTION (vxor, alu, full_preds, iu_vvx_ops)\n-DEF_RVV_FUNCTION (vsll, alu, full_preds, iu_shift_vvx_ops)\n-DEF_RVV_FUNCTION (vsra, alu, full_preds, i_shift_vvx_ops)\n-DEF_RVV_FUNCTION (vsrl, alu, full_preds, u_shift_vvx_ops)\n-DEF_RVV_FUNCTION (vmin, alu, full_preds, i_vvx_ops)\n-DEF_RVV_FUNCTION (vmax, alu, full_preds, i_vvx_ops)\n-DEF_RVV_FUNCTION (vminu, alu, full_preds, u_vvx_ops)\n-DEF_RVV_FUNCTION (vmaxu, alu, full_preds, u_vvx_ops)\n-DEF_RVV_FUNCTION (vmul, alu, full_preds, iu_vvx_ops)\n-DEF_RVV_FUNCTION (vmulh, alu, full_preds, full_v_i_vvx_ops)\n-DEF_RVV_FUNCTION (vmulhu, alu, full_preds, full_v_u_vvx_ops)\n-DEF_RVV_FUNCTION (vmulhsu, alu, full_preds, full_v_i_su_vvx_ops)\n-DEF_RVV_FUNCTION (vdiv, alu, full_preds, i_vvx_ops)\n-DEF_RVV_FUNCTION (vrem, alu, full_preds, i_vvx_ops)\n-DEF_RVV_FUNCTION (vdivu, alu, full_preds, u_vvx_ops)\n-DEF_RVV_FUNCTION (vremu, alu, full_preds, u_vvx_ops)\n DEF_RVV_FUNCTION (vneg, alu, full_preds, iu_v_ops)\n-DEF_RVV_FUNCTION (vnot, alu, full_preds, iu_v_ops)\n-DEF_RVV_FUNCTION (vsext, alu, full_preds, i_vf2_ops)\n-DEF_RVV_FUNCTION (vsext, alu, full_preds, i_vf4_ops)\n-DEF_RVV_FUNCTION (vsext, alu, full_preds, i_vf8_ops)\n-DEF_RVV_FUNCTION (vzext, alu, full_preds, u_vf2_ops)\n-DEF_RVV_FUNCTION (vzext, alu, full_preds, u_vf4_ops)\n-DEF_RVV_FUNCTION (vzext, alu, full_preds, u_vf8_ops)\n-DEF_RVV_FUNCTION (vwadd, widen_alu, full_preds, i_wvv_ops)\n-DEF_RVV_FUNCTION (vwsub, widen_alu, full_preds, i_wvv_ops)\n-DEF_RVV_FUNCTION (vwmul, alu, full_preds, i_wvv_ops)\n-DEF_RVV_FUNCTION (vwmulu, alu, full_preds, u_wvv_ops)\n-DEF_RVV_FUNCTION (vwmulsu, alu, full_preds, i_su_wvv_ops)\n+\n+// 11.2. Vector Widening Integer Add/Subtract\n DEF_RVV_FUNCTION (vwaddu, widen_alu, full_preds, u_wvv_ops)\n+DEF_RVV_FUNCTION (vwaddu, widen_alu, full_preds, u_wvx_ops)\n DEF_RVV_FUNCTION (vwsubu, widen_alu, full_preds, u_wvv_ops)\n+DEF_RVV_FUNCTION (vwsubu, widen_alu, full_preds, u_wvx_ops)\n+DEF_RVV_FUNCTION (vwadd, widen_alu, full_preds, i_wvv_ops)\n DEF_RVV_FUNCTION (vwadd, widen_alu, full_preds, i_wvx_ops)\n+DEF_RVV_FUNCTION (vwsub, widen_alu, full_preds, i_wvv_ops)\n DEF_RVV_FUNCTION (vwsub, widen_alu, full_preds, i_wvx_ops)\n-DEF_RVV_FUNCTION (vwmul, alu, full_preds, i_wvx_ops)\n-DEF_RVV_FUNCTION (vwmulu, alu, full_preds, u_wvx_ops)\n-DEF_RVV_FUNCTION (vwmulsu, alu, full_preds, i_su_wvx_ops)\n-DEF_RVV_FUNCTION (vwaddu, widen_alu, full_preds, u_wvx_ops)\n-DEF_RVV_FUNCTION (vwsubu, widen_alu, full_preds, u_wvx_ops)\n-DEF_RVV_FUNCTION (vwadd, widen_alu, full_preds, i_wwv_ops)\n-DEF_RVV_FUNCTION (vwsub, widen_alu, full_preds, i_wwv_ops)\n DEF_RVV_FUNCTION (vwaddu, widen_alu, full_preds, u_wwv_ops)\n+DEF_RVV_FUNCTION (vwaddu, widen_alu, full_preds, u_wwx_ops)\n DEF_RVV_FUNCTION (vwsubu, widen_alu, full_preds, u_wwv_ops)\n+DEF_RVV_FUNCTION (vwsubu, widen_alu, full_preds, u_wwx_ops)\n+DEF_RVV_FUNCTION (vwadd, widen_alu, full_preds, i_wwv_ops)\n DEF_RVV_FUNCTION (vwadd, widen_alu, full_preds, i_wwx_ops)\n+DEF_RVV_FUNCTION (vwsub, widen_alu, full_preds, i_wwv_ops)\n DEF_RVV_FUNCTION (vwsub, widen_alu, full_preds, i_wwx_ops)\n-DEF_RVV_FUNCTION (vwaddu, widen_alu, full_preds, u_wwx_ops)\n-DEF_RVV_FUNCTION (vwsubu, widen_alu, full_preds, u_wwx_ops)\n DEF_RVV_FUNCTION (vwcvt_x, alu, full_preds, i_x_x_v_ops)\n DEF_RVV_FUNCTION (vwcvtu_x, alu, full_preds, u_x_x_v_ops)\n+\n+// 11.3. Vector Integer Extension\n+DEF_RVV_FUNCTION (vzext, alu, full_preds, u_vf2_ops)\n+DEF_RVV_FUNCTION (vzext, alu, full_preds, u_vf4_ops)\n+DEF_RVV_FUNCTION (vzext, alu, full_preds, u_vf8_ops)\n+DEF_RVV_FUNCTION (vsext, alu, full_preds, i_vf2_ops)\n+DEF_RVV_FUNCTION (vsext, alu, full_preds, i_vf4_ops)\n+DEF_RVV_FUNCTION (vsext, alu, full_preds, i_vf8_ops)\n+\n+// 11.4. Vector Integer Add-with-Carry/Subtract-with-Borrow Instructions\n DEF_RVV_FUNCTION (vadc, no_mask_policy, tu_preds, iu_vvvm_ops)\n-DEF_RVV_FUNCTION (vsbc, no_mask_policy, tu_preds, iu_vvvm_ops)\n DEF_RVV_FUNCTION (vadc, no_mask_policy, tu_preds, iu_vvxm_ops)\n-DEF_RVV_FUNCTION (vsbc, no_mask_policy, tu_preds, iu_vvxm_ops)\n DEF_RVV_FUNCTION (vmadc, return_mask, none_preds, iu_mvvm_ops)\n-DEF_RVV_FUNCTION (vmsbc, return_mask, none_preds, iu_mvvm_ops)\n DEF_RVV_FUNCTION (vmadc, return_mask, none_preds, iu_mvxm_ops)\n-DEF_RVV_FUNCTION (vmsbc, return_mask, none_preds, iu_mvxm_ops)\n DEF_RVV_FUNCTION (vmadc, return_mask, none_preds, iu_mvv_ops)\n-DEF_RVV_FUNCTION (vmsbc, return_mask, none_preds, iu_mvv_ops)\n DEF_RVV_FUNCTION (vmadc, return_mask, none_preds, iu_mvx_ops)\n+DEF_RVV_FUNCTION (vsbc, no_mask_policy, tu_preds, iu_vvvm_ops)\n+DEF_RVV_FUNCTION (vsbc, no_mask_policy, tu_preds, iu_vvxm_ops)\n+DEF_RVV_FUNCTION (vmsbc, return_mask, none_preds, iu_mvvm_ops)\n+DEF_RVV_FUNCTION (vmsbc, return_mask, none_preds, iu_mvxm_ops)\n+DEF_RVV_FUNCTION (vmsbc, return_mask, none_preds, iu_mvv_ops)\n DEF_RVV_FUNCTION (vmsbc, return_mask, none_preds, iu_mvx_ops)\n+\n+// 11.5. Vector Bitwise Logical Instructions\n+DEF_RVV_FUNCTION (vand, alu, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vand, alu, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vor, alu, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vor, alu, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vxor, alu, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vxor, alu, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vnot, alu, full_preds, iu_v_ops)\n+\n+// 11.6. Vector Single-Width Shift Instructions\n+DEF_RVV_FUNCTION (vsll, alu, full_preds, iu_shift_vvv_ops)\n+DEF_RVV_FUNCTION (vsll, alu, full_preds, iu_shift_vvx_ops)\n+DEF_RVV_FUNCTION (vsra, alu, full_preds, i_shift_vvv_ops)\n+DEF_RVV_FUNCTION (vsra, alu, full_preds, i_shift_vvx_ops)\n+DEF_RVV_FUNCTION (vsrl, alu, full_preds, u_shift_vvv_ops)\n+DEF_RVV_FUNCTION (vsrl, alu, full_preds, u_shift_vvx_ops)\n+\n+// 11.7. Vector Narrowing Integer Right Shift Instructions\n DEF_RVV_FUNCTION (vnsrl, narrow_alu, full_preds, u_narrow_shift_vwv_ops)\n-DEF_RVV_FUNCTION (vnsra, narrow_alu, full_preds, i_narrow_shift_vwv_ops)\n DEF_RVV_FUNCTION (vnsrl, narrow_alu, full_preds, u_narrow_shift_vwx_ops)\n+DEF_RVV_FUNCTION (vnsra, narrow_alu, full_preds, i_narrow_shift_vwv_ops)\n DEF_RVV_FUNCTION (vnsra, narrow_alu, full_preds, i_narrow_shift_vwx_ops)\n DEF_RVV_FUNCTION (vncvt_x, narrow_alu, full_preds, iu_trunc_ops)\n-DEF_RVV_FUNCTION (vmerge, no_mask_policy, tu_preds, all_vvvm_ops)\n-DEF_RVV_FUNCTION (vmerge, no_mask_policy, tu_preds, iu_vvxm_ops)\n-DEF_RVV_FUNCTION (vmv_v, move, tu_preds, all_v_ops)\n-DEF_RVV_FUNCTION (vmv_v, move, tu_preds, iu_x_ops)\n+\n+// 11.8. Vector Integer Compare Instructions\n DEF_RVV_FUNCTION (vmseq, return_mask, none_m_mu_preds, iu_mvv_ops)\n-DEF_RVV_FUNCTION (vmsne, return_mask, none_m_mu_preds, iu_mvv_ops)\n-DEF_RVV_FUNCTION (vmslt, return_mask, none_m_mu_preds, i_mvv_ops)\n-DEF_RVV_FUNCTION (vmsgt, return_mask, none_m_mu_preds, i_mvv_ops)\n-DEF_RVV_FUNCTION (vmsle, return_mask, none_m_mu_preds, i_mvv_ops)\n-DEF_RVV_FUNCTION (vmsge, return_mask, none_m_mu_preds, i_mvv_ops)\n-DEF_RVV_FUNCTION (vmsltu, return_mask, none_m_mu_preds, u_mvv_ops)\n-DEF_RVV_FUNCTION (vmsgtu, return_mask, none_m_mu_preds, u_mvv_ops)\n-DEF_RVV_FUNCTION (vmsleu, return_mask, none_m_mu_preds, u_mvv_ops)\n-DEF_RVV_FUNCTION (vmsgeu, return_mask, none_m_mu_preds, u_mvv_ops)\n DEF_RVV_FUNCTION (vmseq, return_mask, none_m_mu_preds, iu_mvx_ops)\n+DEF_RVV_FUNCTION (vmsne, return_mask, none_m_mu_preds, iu_mvv_ops)\n DEF_RVV_FUNCTION (vmsne, return_mask, none_m_mu_preds, iu_mvx_ops)\n+DEF_RVV_FUNCTION (vmsltu, return_mask, none_m_mu_preds, u_mvv_ops)\n+DEF_RVV_FUNCTION (vmsltu, return_mask, none_m_mu_preds, u_mvx_ops)\n+DEF_RVV_FUNCTION (vmslt, return_mask, none_m_mu_preds, i_mvv_ops)\n DEF_RVV_FUNCTION (vmslt, return_mask, none_m_mu_preds, i_mvx_ops)\n-DEF_RVV_FUNCTION (vmsgt, return_mask, none_m_mu_preds, i_mvx_ops)\n+DEF_RVV_FUNCTION (vmsleu, return_mask, none_m_mu_preds, u_mvv_ops)\n+DEF_RVV_FUNCTION (vmsleu, return_mask, none_m_mu_preds, u_mvx_ops)\n+DEF_RVV_FUNCTION (vmsle, return_mask, none_m_mu_preds, i_mvv_ops)\n DEF_RVV_FUNCTION (vmsle, return_mask, none_m_mu_preds, i_mvx_ops)\n-DEF_RVV_FUNCTION (vmsge, return_mask, none_m_mu_preds, i_mvx_ops)\n-DEF_RVV_FUNCTION (vmsltu, return_mask, none_m_mu_preds, u_mvx_ops)\n+DEF_RVV_FUNCTION (vmsgtu, return_mask, none_m_mu_preds, u_mvv_ops)\n DEF_RVV_FUNCTION (vmsgtu, return_mask, none_m_mu_preds, u_mvx_ops)\n-DEF_RVV_FUNCTION (vmsleu, return_mask, none_m_mu_preds, u_mvx_ops)\n+DEF_RVV_FUNCTION (vmsgt, return_mask, none_m_mu_preds, i_mvv_ops)\n+DEF_RVV_FUNCTION (vmsgt, return_mask, none_m_mu_preds, i_mvx_ops)\n+DEF_RVV_FUNCTION (vmsgeu, return_mask, none_m_mu_preds, u_mvv_ops)\n DEF_RVV_FUNCTION (vmsgeu, return_mask, none_m_mu_preds, u_mvx_ops)\n+DEF_RVV_FUNCTION (vmsge, return_mask, none_m_mu_preds, i_mvv_ops)\n+DEF_RVV_FUNCTION (vmsge, return_mask, none_m_mu_preds, i_mvx_ops)\n+\n+// 11.9. Vector Integer Min/Max Instructions\n+DEF_RVV_FUNCTION (vminu, alu, full_preds, u_vvv_ops)\n+DEF_RVV_FUNCTION (vminu, alu, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vmin, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vmin, alu, full_preds, i_vvx_ops)\n+DEF_RVV_FUNCTION (vmaxu, alu, full_preds, u_vvv_ops)\n+DEF_RVV_FUNCTION (vmaxu, alu, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vmax, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vmax, alu, full_preds, i_vvx_ops)\n+\n+// 11.10. Vector Single-Width Integer Multiply Instructions\n+DEF_RVV_FUNCTION (vmul, alu, full_preds, iu_vvv_ops)\n+DEF_RVV_FUNCTION (vmul, alu, full_preds, iu_vvx_ops)\n+DEF_RVV_FUNCTION (vmulh, alu, full_preds, full_v_i_vvv_ops)\n+DEF_RVV_FUNCTION (vmulh, alu, full_preds, full_v_i_vvx_ops)\n+DEF_RVV_FUNCTION (vmulhu, alu, full_preds, full_v_u_vvv_ops)\n+DEF_RVV_FUNCTION (vmulhu, alu, full_preds, full_v_u_vvx_ops)\n+DEF_RVV_FUNCTION (vmulhsu, alu, full_preds, full_v_i_su_vvv_ops)\n+DEF_RVV_FUNCTION (vmulhsu, alu, full_preds, full_v_i_su_vvx_ops)\n+\n+// 11.11. Vector Integer Divide Instructions\n+DEF_RVV_FUNCTION (vdivu, alu, full_preds, u_vvv_ops)\n+DEF_RVV_FUNCTION (vdivu, alu, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vdiv, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vdiv, alu, full_preds, i_vvx_ops)\n+DEF_RVV_FUNCTION (vremu, alu, full_preds, u_vvv_ops)\n+DEF_RVV_FUNCTION (vremu, alu, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vrem, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vrem, alu, full_preds, i_vvx_ops)\n+\n+// 11.12. Vector Widening Integer Multiply Instructions\n+DEF_RVV_FUNCTION (vwmul, alu, full_preds, i_wvv_ops)\n+DEF_RVV_FUNCTION (vwmul, alu, full_preds, i_wvx_ops)\n+DEF_RVV_FUNCTION (vwmulu, alu, full_preds, u_wvv_ops)\n+DEF_RVV_FUNCTION (vwmulu, alu, full_preds, u_wvx_ops)\n+DEF_RVV_FUNCTION (vwmulsu, alu, full_preds, i_su_wvv_ops)\n+DEF_RVV_FUNCTION (vwmulsu, alu, full_preds, i_su_wvx_ops)\n+\n+// 11.13. Vector Single-Width Integer Multiply-Add Instructions\n DEF_RVV_FUNCTION (vmacc, alu, full_preds, iu_vvvv_ops)\n-DEF_RVV_FUNCTION (vnmsac, alu, full_preds, iu_vvvv_ops)\n-DEF_RVV_FUNCTION (vmadd, alu, full_preds, iu_vvvv_ops)\n-DEF_RVV_FUNCTION (vnmsub, alu, full_preds, iu_vvvv_ops)\n DEF_RVV_FUNCTION (vmacc, alu, full_preds, iu_vvxv_ops)\n+DEF_RVV_FUNCTION (vnmsac, alu, full_preds, iu_vvvv_ops)\n DEF_RVV_FUNCTION (vnmsac, alu, full_preds, iu_vvxv_ops)\n+DEF_RVV_FUNCTION (vmadd, alu, full_preds, iu_vvvv_ops)\n DEF_RVV_FUNCTION (vmadd, alu, full_preds, iu_vvxv_ops)\n+DEF_RVV_FUNCTION (vnmsub, alu, full_preds, iu_vvvv_ops)\n DEF_RVV_FUNCTION (vnmsub, alu, full_preds, iu_vvxv_ops)\n-DEF_RVV_FUNCTION (vwmacc, alu, full_preds, i_wwvv_ops)\n-DEF_RVV_FUNCTION (vwmacc, alu, full_preds, i_wwxv_ops)\n+\n+// 11.14. Vector Widening Integer Multiply-Add Instructions\n DEF_RVV_FUNCTION (vwmaccu, alu, full_preds, u_wwvv_ops)\n DEF_RVV_FUNCTION (vwmaccu, alu, full_preds, u_wwxv_ops)\n+DEF_RVV_FUNCTION (vwmacc, alu, full_preds, i_wwvv_ops)\n+DEF_RVV_FUNCTION (vwmacc, alu, full_preds, i_wwxv_ops)\n DEF_RVV_FUNCTION (vwmaccsu, alu, full_preds, i_su_wwvv_ops)\n DEF_RVV_FUNCTION (vwmaccsu, alu, full_preds, i_su_wwxv_ops)\n DEF_RVV_FUNCTION (vwmaccus, alu, full_preds, i_us_wwxv_ops)\n+\n+// 11.15. Vector Integer Merge Instructions\n+DEF_RVV_FUNCTION (vmerge, no_mask_policy, tu_preds, all_vvvm_ops)\n+DEF_RVV_FUNCTION (vmerge, no_mask_policy, tu_preds, iu_vvxm_ops)\n+\n+// 11.16 Vector Integer Move Instructions\n+DEF_RVV_FUNCTION (vmv_v, move, tu_preds, all_v_ops)\n+DEF_RVV_FUNCTION (vmv_v, move, tu_preds, iu_x_ops)\n+\n /* 12. Vector Fixed-Point Arithmetic Instructions. */\n-DEF_RVV_FUNCTION (vsadd, alu, full_preds, i_vvv_ops)\n-DEF_RVV_FUNCTION (vssub, alu, full_preds, i_vvv_ops)\n+\n+// 12.1. Vector Single-Width Saturating Add and Subtract\n DEF_RVV_FUNCTION (vsaddu, alu, full_preds, u_vvv_ops)\n-DEF_RVV_FUNCTION (vssubu, alu, full_preds, u_vvv_ops)\n-DEF_RVV_FUNCTION (vsadd, alu, full_preds, i_vvx_ops)\n-DEF_RVV_FUNCTION (vssub, alu, full_preds, i_vvx_ops)\n DEF_RVV_FUNCTION (vsaddu, alu, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vsadd, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vsadd, alu, full_preds, i_vvx_ops)\n+DEF_RVV_FUNCTION (vssubu, alu, full_preds, u_vvv_ops)\n DEF_RVV_FUNCTION (vssubu, alu, full_preds, u_vvx_ops)\n-DEF_RVV_FUNCTION (vaadd, alu, full_preds, i_vvv_ops)\n-DEF_RVV_FUNCTION (vasub, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vssub, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vssub, alu, full_preds, i_vvx_ops)\n+\n+// 12.2. Vector Single-Width Averaging Add and Subtract\n DEF_RVV_FUNCTION (vaaddu, alu, full_preds, u_vvv_ops)\n-DEF_RVV_FUNCTION (vasubu, alu, full_preds, u_vvv_ops)\n-DEF_RVV_FUNCTION (vsmul, alu, full_preds, full_v_i_vvv_ops)\n-DEF_RVV_FUNCTION (vssra, alu, full_preds, i_shift_vvv_ops)\n-DEF_RVV_FUNCTION (vssrl, alu, full_preds, u_shift_vvv_ops)\n-DEF_RVV_FUNCTION (vaadd, alu, full_preds, i_vvx_ops)\n-DEF_RVV_FUNCTION (vasub, alu, full_preds, i_vvx_ops)\n DEF_RVV_FUNCTION (vaaddu, alu, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vaadd, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vaadd, alu, full_preds, i_vvx_ops)\n+DEF_RVV_FUNCTION (vasubu, alu, full_preds, u_vvv_ops)\n DEF_RVV_FUNCTION (vasubu, alu, full_preds, u_vvx_ops)\n+DEF_RVV_FUNCTION (vasub, alu, full_preds, i_vvv_ops)\n+DEF_RVV_FUNCTION (vasub, alu, full_preds, i_vvx_ops)\n+\n+// 12.3. Vector Single-Width Fractional Multiply with Rounding and Saturation\n+DEF_RVV_FUNCTION (vsmul, alu, full_preds, full_v_i_vvv_ops)\n DEF_RVV_FUNCTION (vsmul, alu, full_preds, full_v_i_vvx_ops)\n-DEF_RVV_FUNCTION (vssra, alu, full_preds, i_shift_vvx_ops)\n+\n+// 12.4. Vector Single-Width Scaling Shift Instructions\n+DEF_RVV_FUNCTION (vssrl, alu, full_preds, u_shift_vvv_ops)\n DEF_RVV_FUNCTION (vssrl, alu, full_preds, u_shift_vvx_ops)\n+DEF_RVV_FUNCTION (vssra, alu, full_preds, i_shift_vvv_ops)\n+DEF_RVV_FUNCTION (vssra, alu, full_preds, i_shift_vvx_ops)\n+\n+// 12.5. Vector Narrowing Fixed-Point Clip Instructions\n DEF_RVV_FUNCTION (vnclipu, narrow_alu, full_preds, u_narrow_shift_vwv_ops)\n-DEF_RVV_FUNCTION (vnclip, narrow_alu, full_preds, i_narrow_shift_vwv_ops)\n DEF_RVV_FUNCTION (vnclipu, narrow_alu, full_preds, u_narrow_shift_vwx_ops)\n+DEF_RVV_FUNCTION (vnclip, narrow_alu, full_preds, i_narrow_shift_vwv_ops)\n DEF_RVV_FUNCTION (vnclip, narrow_alu, full_preds, i_narrow_shift_vwx_ops)\n \n+/* TODO: 13. Vector Floating-Point Instructions.  */\n+/* TODO: 14. Vector Reduction Operations.  */\n+/* TODO: 15. Vector Mask Instructions.  */\n+/* TODO: 16. Vector Permutation Instructions.  */\n+\n #undef DEF_RVV_FUNCTION"}]}