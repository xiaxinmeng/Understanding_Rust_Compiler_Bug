{"sha": "f764eeb8abf1ec50794ddb1f31bc57d025e29a3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc2NGVlYjhhYmYxZWM1MDc5NGRkYjFmMzFiYzU3ZDAyNWUyOWEzYw==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-18T13:07:04Z"}, "committer": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-18T13:07:04Z"}, "message": "Unified representation of macro invocation internal data - will be better for processing", "tree": {"sha": "edee12ce380362c51141a9d472f4abfa5509a4ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edee12ce380362c51141a9d472f4abfa5509a4ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f764eeb8abf1ec50794ddb1f31bc57d025e29a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f764eeb8abf1ec50794ddb1f31bc57d025e29a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f764eeb8abf1ec50794ddb1f31bc57d025e29a3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f764eeb8abf1ec50794ddb1f31bc57d025e29a3c/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0496b05eafd154500ec473e5ea26353dffd5cf79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0496b05eafd154500ec473e5ea26353dffd5cf79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0496b05eafd154500ec473e5ea26353dffd5cf79"}], "stats": {"total": 152, "additions": 98, "deletions": 54}, "files": [{"sha": "f0a39904e24cacf772e10f17ffbb664242ca4d3b", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f764eeb8abf1ec50794ddb1f31bc57d025e29a3c/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f764eeb8abf1ec50794ddb1f31bc57d025e29a3c/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=f764eeb8abf1ec50794ddb1f31bc57d025e29a3c", "patch": "@@ -1358,13 +1358,9 @@ TypeAlias::as_string () const\n \n   str += \"\\n Where clause: \";\n   if (!has_where_clause ())\n-    {\n       str += \"none\";\n-    }\n   else\n-    {\n       str += where_clause.as_string ();\n-    }\n \n   str += \"\\n Type: \" + existing_type->as_string ();\n \n@@ -1383,6 +1379,9 @@ MacroInvocationSemi::as_string () const\n \tstr += attr.as_string () + \"\\n\";\n     }\n \n+  str += invoc_data.as_string ();\n+\n+#if 0\n   str += \"\\n\" + path.as_string () + \"!\";\n \n   std::string tok_trees;\n@@ -1414,6 +1413,7 @@ MacroInvocationSemi::as_string () const\n \n       tok_trees += get_string_in_delims (s, delim_type);\n     }\n+#endif\n \n   return str;\n }\n@@ -1520,8 +1520,15 @@ MacroRulesDefinition::as_string () const\n std::string\n MacroInvocation::as_string () const\n {\n-  return \"MacroInvocation: \" + path.as_string () + \"!\"\n-\t + token_tree.as_string ();\n+  /*return \"MacroInvocation: \" + path.as_string () + \"!\"\n+\t + token_tree.as_string ();*/\n+  return \"MacroInvocation: \" + invoc_data.as_string ();\n+}\n+\n+std::string\n+MacroInvocData::as_string () const\n+{\n+  return path.as_string () + \"!\" + token_tree.as_string ();\n }\n \n std::string"}, {"sha": "4916e36fb7c7c8d09d19d001fa4223122c68cff5", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f764eeb8abf1ec50794ddb1f31bc57d025e29a3c/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f764eeb8abf1ec50794ddb1f31bc57d025e29a3c/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=f764eeb8abf1ec50794ddb1f31bc57d025e29a3c", "patch": "@@ -1329,6 +1329,25 @@ class ExternalItem\n   virtual ExternalItem *clone_external_item_impl () const = 0;\n };\n \n+/* Data structure to store the data used in macro invocations and macro \n+ * invocations with semicolons. */\n+struct MacroInvocData\n+{\n+private:\n+  SimplePath path;\n+  DelimTokenTree token_tree;\n+\n+public:\n+  std::string as_string () const;\n+\n+  MacroInvocData (SimplePath path, DelimTokenTree token_tree) \n+    : path (std::move (path)), token_tree (std::move (token_tree)) {}\n+  \n+  // Invalid if path is empty, so base stripping on that.\n+  void mark_for_strip () { path = SimplePath::create_empty (); }\n+  bool is_marked_for_strip () const { return path.is_empty (); }\n+};\n+\n /* A macro invocation item (or statement) AST node (i.e. semi-coloned macro\n  * invocation) */\n class MacroInvocationSemi : public MacroItem,\n@@ -1338,23 +1357,31 @@ class MacroInvocationSemi : public MacroItem,\n \t\t\t    public ExternalItem\n {\n   std::vector<Attribute> outer_attrs;\n+#if 0\n   SimplePath path;\n   // all delim types except curly must have invocation end with a semicolon\n   DelimType delim_type;\n   std::vector<std::unique_ptr<TokenTree> > token_trees;\n+#endif\n+  MacroInvocData invoc_data;\n   Location locus;\n \n public:\n   std::string as_string () const override;\n \n-  MacroInvocationSemi (SimplePath macro_path, DelimType delim_type,\n+  /*MacroInvocationSemi (SimplePath macro_path, DelimType delim_type,\n \t\t       std::vector<std::unique_ptr<TokenTree> > token_trees,\n \t\t       std::vector<Attribute> outer_attribs, Location locus)\n     : outer_attrs (std::move (outer_attribs)), path (std::move (macro_path)),\n       delim_type (delim_type), token_trees (std::move (token_trees)),\n       locus (locus)\n-  {}\n+  {}*/\n+  MacroInvocationSemi (MacroInvocData invoc_data, \n+            std::vector<Attribute> outer_attrs, Location locus) \n+    : outer_attrs (std::move (outer_attrs)), invoc_data (std::move (invoc_data)),\n+      locus (locus) {}\n \n+  /*\n   // Copy constructor with vector clone\n   MacroInvocationSemi (MacroInvocationSemi const &other)\n     : MacroItem (other), TraitItem (other), InherentImplItem (other),\n@@ -1364,8 +1391,9 @@ class MacroInvocationSemi : public MacroItem,\n     token_trees.reserve (other.token_trees.size ());\n     for (const auto &e : other.token_trees)\n       token_trees.push_back (e->clone_token_tree ());\n-  }\n+  }*/\n \n+  /*\n   // Overloaded assignment operator to vector clone\n   MacroInvocationSemi &operator= (MacroInvocationSemi const &other)\n   {\n@@ -1383,11 +1411,13 @@ class MacroInvocationSemi : public MacroItem,\n       token_trees.push_back (e->clone_token_tree ());\n \n     return *this;\n-  }\n+  }*/\n \n+  /*\n   // Move constructors\n   MacroInvocationSemi (MacroInvocationSemi &&other) = default;\n   MacroInvocationSemi &operator= (MacroInvocationSemi &&other) = default;\n+  */\n \n   void accept_vis (ASTVisitor &vis) override;\n \n@@ -1398,9 +1428,13 @@ class MacroInvocationSemi : public MacroItem,\n       clone_macro_invocation_semi_impl ());\n   }\n \n+  /*\n   // Invalid if path is empty, so base stripping on that.\n   void mark_for_strip () override { path = SimplePath::create_empty (); }\n   bool is_marked_for_strip () const override { return path.is_empty (); }\n+  */\n+  void mark_for_strip () override { invoc_data.mark_for_strip (); }\n+  bool is_marked_for_strip () const override { return invoc_data.is_marked_for_strip (); }\n \n   // TODO: this mutable getter seems really dodgy. Think up better way.\n   const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }"}, {"sha": "39715726ed8812f0ded6e717301ba05e97eaf847", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f764eeb8abf1ec50794ddb1f31bc57d025e29a3c/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f764eeb8abf1ec50794ddb1f31bc57d025e29a3c/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=f764eeb8abf1ec50794ddb1f31bc57d025e29a3c", "patch": "@@ -336,30 +336,32 @@ class MacroInvocation : public TypeNoBounds,\n \t\t\tpublic Pattern,\n \t\t\tpublic ExprWithoutBlock\n {\n-  SimplePath path;\n-  DelimTokenTree token_tree;\n+  /*SimplePath path;\n+  DelimTokenTree token_tree;*/\n+  MacroInvocData invoc_data;\n   Location locus;\n \n public:\n   std::string as_string () const override;\n \n-  MacroInvocation (SimplePath path, DelimTokenTree token_tree,\n+  /*MacroInvocation (SimplePath path, DelimTokenTree token_tree,\n \t\t   std::vector<Attribute> outer_attrs, Location locus)\n     : ExprWithoutBlock (std::move (outer_attrs)), path (std::move (path)),\n       token_tree (std::move (token_tree)), locus (locus)\n-  {}\n-\n+  {}*/\n+  MacroInvocation (MacroInvocData invoc_data, \n+        std::vector<Attribute> outer_attrs, Location locus) \n+    : ExprWithoutBlock (std::move (outer_attrs)), \n+      invoc_data (std::move (invoc_data)), locus (locus) {}\n+ \n   Location get_locus () const { return locus; }\n-  Location get_locus_slow () const override { return get_locus (); }\n+  Location get_locus_slow () const final override { return get_locus (); }\n \n   void accept_vis (ASTVisitor &vis) override;\n \n   // Invalid if path is empty, so base stripping on that.\n-  void mark_for_strip () override { path = SimplePath::create_empty (); }\n-  bool is_marked_for_strip () const override { return path.is_empty (); }\n-\n-  const SimplePath &get_path () const { return path; }\n-  SimplePath &get_path () { return path; }\n+  void mark_for_strip () override { invoc_data.mark_for_strip (); }\n+  bool is_marked_for_strip () const override { return invoc_data.is_marked_for_strip (); }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather"}, {"sha": "53b28518995f2de8c424a6223c94f9c8b9840507", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f764eeb8abf1ec50794ddb1f31bc57d025e29a3c/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f764eeb8abf1ec50794ddb1f31bc57d025e29a3c/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=f764eeb8abf1ec50794ddb1f31bc57d025e29a3c", "patch": "@@ -3553,6 +3553,12 @@ class AttrVisitor : public AST::ASTVisitor\n   }\n };\n \n+AST::Literal \n+MacroExpander::expand_cfg_macro (AST::MacroInvocData &invoc)\n+{\n+  return AST::Literal::create_error ();\n+}\n+\n void\n MacroExpander::expand_invoc (std::unique_ptr<AST::MacroInvocation> &invoc)\n {"}, {"sha": "67520905d10897366e1cdd99824fffcef7b4133c", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f764eeb8abf1ec50794ddb1f31bc57d025e29a3c/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f764eeb8abf1ec50794ddb1f31bc57d025e29a3c/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=f764eeb8abf1ec50794ddb1f31bc57d025e29a3c", "patch": "@@ -44,8 +44,8 @@ struct MacroExpander\n   void expand_cfg_attrs (std::vector<AST::Attribute> &attrs);\n   bool fails_cfg (std::vector<AST::Attribute> &attr);\n \n-  /* TODO: make it extend ASTVisitor so that individual items can be accessed\n-   * properly? */\n+  // Expand the data of a cfg! macro.\n+  AST::Literal expand_cfg_macro (AST::MacroInvocData &invoc);\n \n private:\n   AST::Crate &crate;"}, {"sha": "671565c86841579a6659f2bcce05714d0bf996af", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 26, "deletions": 31, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f764eeb8abf1ec50794ddb1f31bc57d025e29a3c/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f764eeb8abf1ec50794ddb1f31bc57d025e29a3c/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=f764eeb8abf1ec50794ddb1f31bc57d025e29a3c", "patch": "@@ -1514,6 +1514,7 @@ Parser<ManagedTokenSource>::parse_macro_invocation_semi (\n \t\t     t->get_token_description ());\n       return nullptr;\n     }\n+  Location tok_tree_locus = t->get_locus ();\n   lexer.skip_token ();\n \n   // parse actual token trees\n@@ -1538,6 +1539,9 @@ Parser<ManagedTokenSource>::parse_macro_invocation_semi (\n \n       t = lexer.peek_token ();\n     }\n+  \n+  AST::DelimTokenTree delim_tok_tree (delim_type, std::move (token_trees), tok_tree_locus);\n+  AST::MacroInvocData invoc_data (std::move (path), std::move (delim_tok_tree));\n \n   // parse end delimiters\n   t = lexer.peek_token ();\n@@ -1553,8 +1557,7 @@ Parser<ManagedTokenSource>::parse_macro_invocation_semi (\n \t    {\n \t      // as this is the end, allow recovery (probably) - may change\n \t      return std::unique_ptr<AST::MacroInvocationSemi> (\n-\t\tnew AST::MacroInvocationSemi (std::move (path), delim_type,\n-\t\t\t\t\t      std::move (token_trees),\n+\t\tnew AST::MacroInvocationSemi (std::move (invoc_data), \n \t\t\t\t\t      std::move (outer_attrs),\n \t\t\t\t\t      macro_locus));\n \t    }\n@@ -1567,8 +1570,7 @@ Parser<ManagedTokenSource>::parse_macro_invocation_semi (\n \t       lexer.peek_token ()->get_token_description ());\n \n       return std::unique_ptr<AST::MacroInvocationSemi> (\n-\tnew AST::MacroInvocationSemi (std::move (path), delim_type,\n-\t\t\t\t      std::move (token_trees),\n+\tnew AST::MacroInvocationSemi (std::move (invoc_data), \n \t\t\t\t      std::move (outer_attrs), macro_locus));\n     }\n   else\n@@ -1616,8 +1618,8 @@ Parser<ManagedTokenSource>::parse_macro_invocation (\n   Location macro_locus = macro_path.get_locus ();\n \n   return std::unique_ptr<AST::MacroInvocation> (\n-    new AST::MacroInvocation (std::move (macro_path),\n-\t\t\t      std::move (delim_tok_tree),\n+    new AST::MacroInvocation (AST::MacroInvocData (std::move (macro_path),\n+\t\t\t      std::move (delim_tok_tree)),\n \t\t\t      std::move (outer_attrs), macro_locus));\n }\n \n@@ -8826,10 +8828,8 @@ Parser<ManagedTokenSource>::parse_type ()\n \t      AST::DelimTokenTree tok_tree = parse_delim_token_tree ();\n \n \t      return std::unique_ptr<AST::MacroInvocation> (\n-\t\tnew AST::MacroInvocation (std::move (macro_path),\n-\t\t\t\t\t  std::move (tok_tree),\n-\t\t\t\t\t  std::vector<AST::Attribute> (),\n-\t\t\t\t\t  locus));\n+\t\tnew AST::MacroInvocation (AST::MacroInvocData (std::move (macro_path),\n+\t\t\t\t\t  std::move (tok_tree)), {}, locus));\n \t    }\n \t    case PLUS: {\n \t      // type param bounds\n@@ -9629,10 +9629,8 @@ Parser<ManagedTokenSource>::parse_type_no_bounds ()\n \t      AST::DelimTokenTree tok_tree = parse_delim_token_tree ();\n \n \t      return std::unique_ptr<AST::MacroInvocation> (\n-\t\tnew AST::MacroInvocation (std::move (macro_path),\n-\t\t\t\t\t  std::move (tok_tree),\n-\t\t\t\t\t  std::vector<AST::Attribute> (),\n-\t\t\t\t\t  locus));\n+\t\tnew AST::MacroInvocation (AST::MacroInvocData (std::move (macro_path),\n+\t\t\t\t\t  std::move (tok_tree)), {}, locus));\n \t    }\n \t    case PLUS: {\n \t      // type param bounds - not allowed, here for error message\n@@ -11397,25 +11395,24 @@ Parser<ManagedTokenSource>::parse_path_based_stmt_or_expr (\n \t     * fixed up via HACKs in semantic analysis (by checking whether it\n \t     * is the last elem in the vector). */\n \n+      AST::DelimTokenTree delim_tok_tree (type, std::move (token_trees),\n+\t\t\t\t\t\ttok_tree_loc);\n+      AST::MacroInvocData invoc_data (std::move (macro_path), std::move (delim_tok_tree));\n+\n \t    if (lexer.peek_token ()->get_id () == SEMICOLON)\n \t      {\n \t\tlexer.skip_token ();\n \n \t\tstd::unique_ptr<AST::MacroInvocationSemi> stmt (\n-\t\t  new AST::MacroInvocationSemi (std::move (macro_path), type,\n-\t\t\t\t\t\tstd::move (token_trees),\n+\t\t  new AST::MacroInvocationSemi (std::move (invoc_data),\n \t\t\t\t\t\tstd::move (outer_attrs),\n \t\t\t\t\t\tstmt_or_expr_loc));\n \t\treturn ExprOrStmt (std::move (stmt));\n \t      }\n \n \t    // otherwise, create macro invocation\n-\t    AST::DelimTokenTree delim_tok_tree (type, std::move (token_trees),\n-\t\t\t\t\t\ttok_tree_loc);\n-\n \t    std::unique_ptr<AST::MacroInvocation> expr (\n-\t      new AST::MacroInvocation (std::move (macro_path),\n-\t\t\t\t\tstd::move (delim_tok_tree),\n+\t      new AST::MacroInvocation (std::move (invoc_data),\n \t\t\t\t\tstd::move (outer_attrs),\n \t\t\t\t\tstmt_or_expr_loc));\n \t    return ExprOrStmt (std::move (expr));\n@@ -11424,8 +11421,7 @@ Parser<ManagedTokenSource>::parse_path_based_stmt_or_expr (\n \t  {\n \t    // tokens don't match opening delimiters, so produce error\n \t    rust_error_at (t2->get_locus (),\n-\t\t\t   \"unexpected token %qs - expecting closing \"\n-\t\t\t   \"delimiter %qs (for a \"\n+\t\t\t   \"unexpected token %qs - expecting closing delimiter %qs (for a \"\n \t\t\t   \"macro invocation)\",\n \t\t\t   t2->get_token_description (),\n \t\t\t   (type == AST::PARENS\n@@ -11697,25 +11693,24 @@ Parser<ManagedTokenSource>::parse_macro_invocation_maybe_semi (\n        * HACKs in semantic analysis (by checking whether it is the last elem in\n        * the vector). */\n \n+      AST::DelimTokenTree delim_tok_tree (type, std::move (token_trees),\n+\t\t\t\t\t  tok_tree_loc);\n+      AST::MacroInvocData invoc_data (std::move (macro_path), std::move (delim_tok_tree));\n+\n       if (lexer.peek_token ()->get_id () == SEMICOLON)\n \t{\n \t  lexer.skip_token ();\n \n \t  std::unique_ptr<AST::MacroInvocationSemi> stmt (\n-\t    new AST::MacroInvocationSemi (std::move (macro_path), type,\n-\t\t\t\t\t  std::move (token_trees),\n+\t    new AST::MacroInvocationSemi (std::move (invoc_data), \n \t\t\t\t\t  std::move (outer_attrs),\n \t\t\t\t\t  macro_locus));\n \t  return ExprOrStmt (std::move (stmt));\n \t}\n \n       // otherwise, create macro invocation\n-      AST::DelimTokenTree delim_tok_tree (type, std::move (token_trees),\n-\t\t\t\t\t  tok_tree_loc);\n-\n       std::unique_ptr<AST::MacroInvocation> expr (\n-\tnew AST::MacroInvocation (std::move (macro_path),\n-\t\t\t\t  std::move (delim_tok_tree),\n+\tnew AST::MacroInvocation (std::move (invoc_data),\n \t\t\t\t  std::move (outer_attrs), macro_locus));\n       return ExprOrStmt (std::move (expr));\n     }\n@@ -13926,7 +13921,7 @@ Parser<ManagedTokenSource>::parse_macro_invocation_partial (\n   Location macro_locus = converted_path.get_locus ();\n \n   return std::unique_ptr<AST::MacroInvocation> (\n-    new AST::MacroInvocation (std::move (converted_path), std::move (tok_tree),\n+    new AST::MacroInvocation (AST::MacroInvocData (std::move (converted_path), std::move (tok_tree)),\n \t\t\t      std::move (outer_attrs), macro_locus));\n }\n "}]}