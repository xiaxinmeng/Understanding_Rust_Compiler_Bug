{"sha": "d8d291f3367230fdfdacc9868b0aa01de1dabb13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhkMjkxZjMzNjcyMzBmZGZkYWNjOTg2OGIwYWEwMWRlMWRhYmIxMw==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-15T23:52:47Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-04-30T17:41:38Z"}, "message": "testsuite: aarch64: Add fusion tests for FP vml[as] intrinsics\n\nAdd compilation tests to make sure that the output of vmla/vmls\nfloating-point Neon intrinsics (fmul, fadd/fsub) is not fused into\nfmla/fmls instructions.\n\ngcc/testsuite/ChangeLog:\n\n2021-02-16  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vmla_float_not_fused.c:\n\tNew test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmls_float_not_fused.c:\n\tNew test.", "tree": {"sha": "8d80b10730051576ed7fbf56d3af1e4cbf13a83d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d80b10730051576ed7fbf56d3af1e4cbf13a83d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8d291f3367230fdfdacc9868b0aa01de1dabb13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d291f3367230fdfdacc9868b0aa01de1dabb13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d291f3367230fdfdacc9868b0aa01de1dabb13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d291f3367230fdfdacc9868b0aa01de1dabb13/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d388179a798c6528563873cbabd80a0e7272c013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d388179a798c6528563873cbabd80a0e7272c013", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d388179a798c6528563873cbabd80a0e7272c013"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "b14b25949bfe4615b8f8c173a128b6c73de3cf18", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmla_float_not_fused.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d291f3367230fdfdacc9868b0aa01de1dabb13/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmla_float_not_fused.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d291f3367230fdfdacc9868b0aa01de1dabb13/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmla_float_not_fused.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmla_float_not_fused.c?ref=d8d291f3367230fdfdacc9868b0aa01de1dabb13", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+\n+#include <arm_neon.h>\n+\n+float32x2_t foo_f32 (float32x2_t a, float32x2_t b, float32x2_t c)\n+{\n+  return vmla_f32 (a, b, c);\n+}\n+\n+float32x4_t fooq_f32 (float32x4_t a, float32x4_t b, float32x4_t c)\n+{\n+  return vmlaq_f32 (a, b, c);\n+}\n+\n+float32x2_t foo_n_f32 (float32x2_t a, float32x2_t b, float32_t c)\n+{\n+  return vmla_n_f32 (a, b, c);\n+}\n+\n+float32x4_t fooq_n_f32 (float32x4_t a, float32x4_t b, float32_t c)\n+{\n+  return vmlaq_n_f32 (a, b, c);\n+}\n+\n+float32x2_t foo_lane_f32 (float32x2_t a,\n+\t\t\t  float32x2_t b,\n+\t\t\t  float32x2_t v)\n+{\n+  return vmla_lane_f32 (a, b, v, 0);\n+}\n+\n+float32x4_t fooq_lane_f32 (float32x4_t a,\n+\t\t\t   float32x4_t b,\n+\t\t\t   float32x2_t v)\n+{\n+  return vmlaq_lane_f32 (a, b, v, 0);\n+}\n+\n+float32x2_t foo_laneq_f32 (float32x2_t a,\n+\t\t\t   float32x2_t b,\n+\t\t\t   float32x4_t v)\n+{\n+  return vmla_laneq_f32 (a, b, v, 0);\n+}\n+\n+float32x4_t fooq_laneq_f32 (float32x4_t a,\n+\t\t\t    float32x4_t b,\n+\t\t\t    float32x4_t v)\n+{\n+  return vmlaq_laneq_f32 (a, b, v, 0);\n+}\n+\n+float64x1_t foo_f64 (float64x1_t a, float64x1_t b, float64x1_t c)\n+{\n+  return vmla_f64 (a, b, c);\n+}\n+\n+float64x2_t fooq_f64 (float64x2_t a, float64x2_t b, float64x2_t c)\n+{\n+  return vmlaq_f64 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\t} 10} }  */\n+/* { dg-final { scan-assembler-times {\\tfadd\\t} 10} }  */"}, {"sha": "c6f62c59fffbd9ef9b8b26fa265f630d53a308e6", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmls_float_not_fused.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d291f3367230fdfdacc9868b0aa01de1dabb13/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmls_float_not_fused.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d291f3367230fdfdacc9868b0aa01de1dabb13/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmls_float_not_fused.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmls_float_not_fused.c?ref=d8d291f3367230fdfdacc9868b0aa01de1dabb13", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+\n+#include <arm_neon.h>\n+\n+float32x2_t foo_f32 (float32x2_t a, float32x2_t b, float32x2_t c)\n+{\n+  return vmls_f32 (a, b, c);\n+}\n+\n+float32x4_t fooq_f32 (float32x4_t a, float32x4_t b, float32x4_t c)\n+{\n+  return vmlsq_f32 (a, b, c);\n+}\n+\n+float32x2_t foo_n_f32 (float32x2_t a, float32x2_t b, float32_t c)\n+{\n+  return vmls_n_f32 (a, b, c);\n+}\n+\n+float32x4_t fooq_n_f32 (float32x4_t a, float32x4_t b, float32_t c)\n+{\n+  return vmlsq_n_f32 (a, b, c);\n+}\n+\n+float32x2_t foo_lane_f32 (float32x2_t a,\n+\t\t\t  float32x2_t b,\n+\t\t\t  float32x2_t v)\n+{\n+  return vmls_lane_f32 (a, b, v, 0);\n+}\n+\n+float32x4_t fooq_lane_f32 (float32x4_t a,\n+\t\t\t   float32x4_t b,\n+\t\t\t   float32x2_t v)\n+{\n+  return vmlsq_lane_f32 (a, b, v, 0);\n+}\n+\n+float32x2_t foo_laneq_f32 (float32x2_t a,\n+\t\t\t   float32x2_t b,\n+\t\t\t   float32x4_t v)\n+{\n+  return vmls_laneq_f32 (a, b, v, 0);\n+}\n+\n+float32x4_t fooq_laneq_f32 (float32x4_t a,\n+\t\t\t    float32x4_t b,\n+\t\t\t    float32x4_t v)\n+{\n+  return vmlsq_laneq_f32 (a, b, v, 0);\n+}\n+\n+float64x1_t foo_f64 (float64x1_t a, float64x1_t b, float64x1_t c)\n+{\n+  return vmls_f64 (a, b, c);\n+}\n+\n+float64x2_t fooq_f64 (float64x2_t a, float64x2_t b, float64x2_t c)\n+{\n+  return vmlsq_f64 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tfmul\\t} 10} }  */\n+/* { dg-final { scan-assembler-times {\\tfsub\\t} 10} }  */"}]}