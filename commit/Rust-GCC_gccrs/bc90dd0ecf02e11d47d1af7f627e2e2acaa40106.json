{"sha": "bc90dd0ecf02e11d47d1af7f627e2e2acaa40106", "node_id": "C_kwDOANBUbNoAKGJjOTBkZDBlY2YwMmUxMWQ0N2QxYWY3ZjYyN2UyZTJhY2FhNDAxMDY", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-25T20:04:49Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-25T20:04:49Z"}, "message": "c++: deleted fn and noexcept inst [PR101532, PR104225]\n\nHere when attempting to use B's implicitly deleted default constructor,\nmark_used rightfully returns false, but for the wrong reason: it\ntries to instantiate the synthesized noexcept specifier which then only\nsilently fails because get_defaulted_eh_spec suppresses diagnostics\nfor deleted functions.  This lack of diagnostics causes us to crash on\nthe first testcase below (thanks to the assert in finish_expr_stmt), and\nsilently accept the second testcase.\n\nTo fix this, this patch makes mark_used avoid attempting to instantiate\nthe noexcept specifier of a deleted function, so that we'll instead\ndirectly reject (and diagnose) the function due to its deletedness.\n\n\tPR c++/101532\n\tPR c++/104225\n\ngcc/cp/ChangeLog:\n\n\t* decl2.cc (mark_used): Don't consider maybe_instantiate_noexcept\n\ton a deleted function.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/nsdmi-template21.C: New test.\n\t* g++.dg/cpp0x/nsdmi-template21a.C: New test.", "tree": {"sha": "6c0327a58edac0215017c29454f4603a5cbbf1e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c0327a58edac0215017c29454f4603a5cbbf1e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc90dd0ecf02e11d47d1af7f627e2e2acaa40106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc90dd0ecf02e11d47d1af7f627e2e2acaa40106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc90dd0ecf02e11d47d1af7f627e2e2acaa40106", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc90dd0ecf02e11d47d1af7f627e2e2acaa40106/comments", "author": null, "committer": null, "parents": [{"sha": "fe5cee6f62a0b229d9d51616b7490331d39b5ddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe5cee6f62a0b229d9d51616b7490331d39b5ddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe5cee6f62a0b229d9d51616b7490331d39b5ddd"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "b68cf96fa81306f8ee4abfe98b95903ffe7b1881", "filename": "gcc/cp/decl2.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc90dd0ecf02e11d47d1af7f627e2e2acaa40106/gcc%2Fcp%2Fdecl2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc90dd0ecf02e11d47d1af7f627e2e2acaa40106/gcc%2Fcp%2Fdecl2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.cc?ref=bc90dd0ecf02e11d47d1af7f627e2e2acaa40106", "patch": "@@ -5774,6 +5774,7 @@ mark_used (tree decl, tsubst_flags_t complain)\n     used_types_insert (DECL_CONTEXT (decl));\n \n   if (TREE_CODE (decl) == FUNCTION_DECL\n+      && !DECL_DELETED_FN (decl)\n       && !maybe_instantiate_noexcept (decl, complain))\n     return false;\n "}, {"sha": "79d43a54153f6133c6fd69909ef196228b08671f", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-template21.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc90dd0ecf02e11d47d1af7f627e2e2acaa40106/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc90dd0ecf02e11d47d1af7f627e2e2acaa40106/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template21.C?ref=bc90dd0ecf02e11d47d1af7f627e2e2acaa40106", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/101532\n+// { dg-do compile { target c++11 } }\n+\n+struct A { private: ~A(); };\n+\n+template<class> struct B { A a = A(); }; // { dg-error \"private\" }\n+\n+B<int> b; // { dg-error \"deleted\" }"}, {"sha": "08fd37b8035fc5552a2cd6372f73846710a1708c", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-template21a.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc90dd0ecf02e11d47d1af7f627e2e2acaa40106/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template21a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc90dd0ecf02e11d47d1af7f627e2e2acaa40106/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template21a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template21a.C?ref=bc90dd0ecf02e11d47d1af7f627e2e2acaa40106", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/104225\n+// { dg-do compile { target c++11 } }\n+\n+struct A { private: ~A(); };\n+\n+template<class> struct B { A a = A(); }; // { dg-error \"private\" }\n+\n+int main() {\n+  new B<int>; // { dg-error \"deleted\" }\n+}"}]}