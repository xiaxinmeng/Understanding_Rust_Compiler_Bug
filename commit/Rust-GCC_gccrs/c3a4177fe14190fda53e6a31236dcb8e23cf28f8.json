{"sha": "c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNhNDE3N2ZlMTQxOTBmZGE1M2U2YTMxMjM2ZGNiOGUyM2NmMjhmOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-10-29T15:18:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-10-29T15:18:24Z"}, "message": "genopinit.c (optabs): Change lfloor_optab and lceil_optab to conversion optabs.\n\n2006-10-29  Richard Guenther  <rguenther@suse.de>\n\n\t* genopinit.c (optabs): Change lfloor_optab and lceil_optab\n\tto conversion optabs.\n\t* optabs.c (init_optabs): Initialize lfloor_optab and lceil_optab\n\tas conversion optab.\n\t* optabs.h (enum optab_index): Remove OTI_lfloor and OTI_lceil.\n\t(enum convert_optab_index): Add COI_lfloor and COI_lceil.\n\t(lfloor_optab, lceil_optab): Adjust defines.\n\t* builtins.c (expand_builtin_int_roundingfn): Adjust for\n\tlfloor and lceil optabs now being conversion optabs.\n\t* config/i386/i386-protos.h (ix86_expand_lfloorceil): Declare.\n\t* config/i386/i386.c (ix86_expand_sse_compare_and_jump):\n\tNew static helper function.\n\t(ix86_expand_lfloorceil): New function to expand lfloor and\n\tlceil inline.\n\t* config/i386/i386.md (lfloor<mode>2): Split into ...\n\t(lfloorxf<mode>2): ... x87 variant\n\t(lfloor<mode>di2, lfloor<mode>si2): ... and SSE variants\n\tusing ix86_expand_lfloorceil.\n\t(lceil<mode>2, lceilxf<mode>2, lceil<mode>di2, lceil<mode>si2):\n\tLikewise.\n\t* doc/md.texi (lfloorMN, lceilMN): Document.\n\n\t* gcc.target/i386/math-torture/lfloor.c: New testcase.\n\t* gcc.target/i386/math-torture/lceil.c: Likewise.\n\nFrom-SVN: r118143", "tree": {"sha": "600dc261e4509a381886cd337eccdaf4e4fccd41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/600dc261e4509a381886cd337eccdaf4e4fccd41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98c58757e67b0d47104439184673d3d468fde83c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98c58757e67b0d47104439184673d3d468fde83c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98c58757e67b0d47104439184673d3d468fde83c"}], "stats": {"total": 278, "additions": 236, "deletions": 42}, "files": [{"sha": "9289589ae7c4f7a7eb07d50b03fceb3356d7db7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "patch": "@@ -1,3 +1,27 @@\n+2006-10-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* genopinit.c (optabs): Change lfloor_optab and lceil_optab\n+\tto conversion optabs.\n+\t* optabs.c (init_optabs): Initialize lfloor_optab and lceil_optab\n+\tas conversion optab.\n+\t* optabs.h (enum optab_index): Remove OTI_lfloor and OTI_lceil.\n+\t(enum convert_optab_index): Add COI_lfloor and COI_lceil.\n+\t(lfloor_optab, lceil_optab): Adjust defines.\n+\t* builtins.c (expand_builtin_int_roundingfn): Adjust for\n+\tlfloor and lceil optabs now being conversion optabs.\n+\t* config/i386/i386-protos.h (ix86_expand_lfloorceil): Declare.\n+\t* config/i386/i386.c (ix86_expand_sse_compare_and_jump):\n+\tNew static helper function.\n+\t(ix86_expand_lfloorceil): New function to expand lfloor and\n+\tlceil inline.\n+\t* config/i386/i386.md (lfloor<mode>2): Split into ...\n+\t(lfloorxf<mode>2): ... x87 variant\n+\t(lfloor<mode>di2, lfloor<mode>si2): ... and SSE variants\n+\tusing ix86_expand_lfloorceil.\n+\t(lceil<mode>2, lceilxf<mode>2, lceil<mode>di2, lceil<mode>si2):\n+\tLikewise.\n+\t* doc/md.texi (lfloorMN, lceilMN): Document.\n+\n 2006-10-29  Richard Sandiford  <richard@codesourcery.com>\n \n \t* configure.ac (HAVE_AS_NO_SHARED): New AC_DEFINE.  Test for the"}, {"sha": "b7d23c379bd97deab06c6bfaa4ced55726963b34", "filename": "gcc/builtins.c", "status": "modified", "additions": 25, "deletions": 32, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "patch": "@@ -2222,7 +2222,7 @@ expand_builtin_sincos (tree exp)\n static rtx\n expand_builtin_int_roundingfn (tree exp, rtx target, rtx subtarget)\n {\n-  optab builtin_optab;\n+  convert_optab builtin_optab;\n   rtx op0, insns, tmp;\n   tree fndecl = get_callee_fndecl (exp);\n   tree arglist = TREE_OPERAND (exp, 1);\n@@ -2257,44 +2257,37 @@ expand_builtin_int_roundingfn (tree exp, rtx target, rtx subtarget)\n   /* Make a suitable register to place result in.  */\n   mode = TYPE_MODE (TREE_TYPE (exp));\n \n-  /* Before working hard, check whether the instruction is available.  */\n-  if (builtin_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing)\n-    {\n-      target = gen_reg_rtx (mode);\n-\n-      /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n-\t need to expand the argument again.  This way, we will not perform\n-\t side-effects more the once.  */\n-      narg = builtin_save_expr (arg);\n-      if (narg != arg)\n-\t{\n-\t  arg = narg;\n-\t  arglist = build_tree_list (NULL_TREE, arg);\n-\t  exp = build_function_call_expr (fndecl, arglist);\n-\t}\n-\n-      op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+  target = gen_reg_rtx (mode);\n \n-      start_sequence ();\n+  /* Wrap the computation of the argument in a SAVE_EXPR, as we may\n+     need to expand the argument again.  This way, we will not perform\n+     side-effects more the once.  */\n+  narg = builtin_save_expr (arg);\n+  if (narg != arg)\n+    {\n+      arg = narg;\n+      arglist = build_tree_list (NULL_TREE, arg);\n+      exp = build_function_call_expr (fndecl, arglist);\n+    }\n \n-      /* Compute into TARGET.\n-\t Set TARGET to wherever the result comes back.  */\n-      target = expand_unop (mode, builtin_optab, op0, target, 0);\n+  op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n \n-      if (target != 0)\n-\t{\n-\t  /* Output the entire sequence.  */\n-\t  insns = get_insns ();\n-\t  end_sequence ();\n-\t  emit_insn (insns);\n-\t  return target;\n-\t}\n+  start_sequence ();\n \n-      /* If we were unable to expand via the builtin, stop the sequence\n-\t (without outputting the insns).  */\n+  /* Compute into TARGET.  */\n+  if (expand_sfix_optab (target, op0, builtin_optab))\n+    {\n+      /* Output the entire sequence.  */\n+      insns = get_insns ();\n       end_sequence ();\n+      emit_insn (insns);\n+      return target;\n     }\n \n+  /* If we were unable to expand via the builtin, stop the sequence\n+     (without outputting the insns).  */\n+  end_sequence ();\n+\n   /* Fall back to floating point rounding optab.  */\n   fallback_fndecl = mathfn_built_in (TREE_TYPE (arg), fallback_fn);\n   /* We shouldn't get here on targets without TARGET_C99_FUNCTIONS."}, {"sha": "996dcdbd0979c6f61fd76afd72d8966bdaf1adc7", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "patch": "@@ -158,6 +158,7 @@ extern void ix86_emit_i387_log1p (rtx, rtx);\n extern enum rtx_code ix86_reverse_condition (enum rtx_code, enum machine_mode);\n \n extern void ix86_expand_lround (rtx, rtx);\n+extern void ix86_expand_lfloorceil (rtx, rtx, bool);\n \n #ifdef TREE_CODE\n extern void init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree);"}, {"sha": "0291a97a8aee94663d7622b424885e498a4f9e25", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "patch": "@@ -19246,6 +19246,36 @@ ix86_sse_copysign_to_positive (rtx result, rtx abs_value, rtx sign)\n \t\t\t  gen_rtx_IOR (mode, abs_value, sgn)));\n }\n \n+/* Expands a comparison of OP0 with OP1 using comparison code CODE,\n+   swapping the operands if SWAP_OPERANDS is true.  The expanded\n+   code is a forward jump to a newly created label in case the\n+   comparison is true.  The generated label rtx is returned.  */\n+static rtx\n+ix86_expand_sse_compare_and_jump (enum rtx_code code, rtx op0, rtx op1,\n+                                  bool swap_operands)\n+{\n+  rtx label, tmp;\n+\n+  if (swap_operands)\n+    {\n+      tmp = op0;\n+      op0 = op1;\n+      op1 = tmp;\n+    }\n+\n+  label = gen_label_rtx ();\n+  tmp = gen_rtx_REG (CCFPUmode, FLAGS_REG);\n+  emit_insn (gen_rtx_SET (VOIDmode, tmp,\n+\t\t\t  gen_rtx_COMPARE (CCFPUmode, op0, op1)));\n+  tmp = gen_rtx_fmt_ee (code, VOIDmode, tmp, const0_rtx);\n+  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n+\t\t\t      gen_rtx_LABEL_REF (VOIDmode, label), pc_rtx);\n+  tmp = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+  JUMP_LABEL (tmp) = label;\n+\n+  return label;\n+}\n+\n /* Expand SSE sequence for computing lround from OP1 storing\n    into OP0.  */\n void\n@@ -19276,4 +19306,37 @@ ix86_expand_lround (rtx op0, rtx op1)\n   expand_fix (op0, adj, 0);\n }\n \n+/* Expand SSE2 sequence for computing lround from OPERAND1 storing\n+   into OPERAND0.  */\n+void\n+ix86_expand_lfloorceil (rtx op0, rtx op1, bool do_floor)\n+{\n+  /* C code for the stuff we're doing below (for do_floor):\n+\txi = (long)op1;\n+        xi -= (double)xi > op1 ? 1 : 0;\n+        return xi;\n+   */\n+  enum machine_mode fmode = GET_MODE (op1);\n+  enum machine_mode imode = GET_MODE (op0);\n+  rtx ireg, freg, label;\n+\n+  /* reg = (long)op1 */\n+  ireg = gen_reg_rtx (imode);\n+  expand_fix (ireg, op1, 0);\n+\n+  /* freg = (double)reg */\n+  freg = gen_reg_rtx (fmode);\n+  expand_float (freg, ireg, 0);\n+\n+  /* ireg = (freg > op1) ? ireg - 1 : ireg */\n+  label = ix86_expand_sse_compare_and_jump (UNLE,\n+\t\t\t\t\t    freg, op1, !do_floor);\n+  expand_simple_binop (imode, do_floor ? MINUS : PLUS,\n+                       ireg, const1_rtx, ireg, 0, OPTAB_DIRECT);\n+  emit_label (label);\n+  LABEL_NUSES (label) = 1;\n+\n+  emit_move_insn (op0, ireg);\n+}\n+\n #include \"gt-i386.h\""}, {"sha": "abceb151c670104a706277a257b01c5b1c127c88", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "patch": "@@ -17598,7 +17598,7 @@\n \t      (use (match_dup 3))])]\n   \"\")\n \n-(define_expand \"lfloor<mode>2\"\n+(define_expand \"lfloorxf<mode>2\"\n   [(parallel [(set (match_operand:X87MODEI 0 \"nonimmediate_operand\" \"\")\n \t\t   (unspec:X87MODEI [(match_operand:XF 1 \"register_operand\" \"\")]\n \t\t    UNSPEC_FIST_FLOOR))\n@@ -17608,6 +17608,26 @@\n    && flag_unsafe_math_optimizations\"\n   \"\")\n \n+(define_expand \"lfloor<mode>di2\"\n+  [(match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+   (match_operand:SSEMODEF 1 \"register_operand\" \"\")]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH && TARGET_64BIT\n+   && !flag_trapping_math\"\n+{\n+  ix86_expand_lfloorceil (operand0, operand1, true);\n+  DONE;\n+})\n+\n+(define_expand \"lfloor<mode>si2\"\n+  [(match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+   (match_operand:SSEMODEF 1 \"register_operand\" \"\")]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n+   && !flag_trapping_math\"\n+{\n+  ix86_expand_lfloorceil (operand0, operand1, true);\n+  DONE;\n+})\n+\n ;; Rounding mode control word calculation could clobber FLAGS_REG.\n (define_insn_and_split \"frndintxf2_ceil\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n@@ -17839,7 +17859,7 @@\n \t      (use (match_dup 3))])]\n   \"\")\n \n-(define_expand \"lceil<mode>2\"\n+(define_expand \"lceilxf<mode>2\"\n   [(parallel [(set (match_operand:X87MODEI 0 \"nonimmediate_operand\" \"\")\n \t\t   (unspec:X87MODEI [(match_operand:XF 1 \"register_operand\" \"\")]\n \t\t    UNSPEC_FIST_CEIL))\n@@ -17849,6 +17869,26 @@\n    && flag_unsafe_math_optimizations\"\n   \"\")\n \n+(define_expand \"lceil<mode>di2\"\n+  [(match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+   (match_operand:SSEMODEF 1 \"register_operand\" \"\")]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH && TARGET_64BIT\n+   && !flag_trapping_math\"\n+{\n+  ix86_expand_lfloorceil (operand0, operand1, false);\n+  DONE;\n+})\n+\n+(define_expand \"lceil<mode>si2\"\n+  [(match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+   (match_operand:SSEMODEF 1 \"register_operand\" \"\")]\n+  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\n+   && !flag_trapping_math\"\n+{\n+  ix86_expand_lfloorceil (operand0, operand1, false);\n+  DONE;\n+})\n+\n ;; Rounding mode control word calculation could clobber FLAGS_REG.\n (define_insn_and_split \"frndintxf2_trunc\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")"}, {"sha": "e5f12c4b0bc0cf36536c46528e13f6a08fec9123", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "patch": "@@ -3714,6 +3714,18 @@ Convert operand 1 (valid for floating point mode @var{m}) to fixed\n point mode @var{n} as a signed number rounding to nearest and away\n from zero and store in operand 0 (which has mode @var{n}).\n \n+@cindex @code{lfloor@var{m}@var{n}2}\n+@item @samp{lfloor@var{m}2}\n+Convert operand 1 (valid for floating point mode @var{m}) to fixed\n+point mode @var{n} as a signed number rounding down and store in\n+operand 0 (which has mode @var{n}).\n+\n+@cindex @code{lceil@var{m}@var{n}2}\n+@item @samp{lceil@var{m}2}\n+Convert operand 1 (valid for floating point mode @var{m}) to fixed\n+point mode @var{n} as a signed number rounding up and store in\n+operand 0 (which has mode @var{n}).\n+\n @cindex @code{copysign@var{m}3} instruction pattern\n @item @samp{copysign@var{m}3}\n Store a value with the magnitude of operand 1 and the sign of operand"}, {"sha": "eb7a193dd95713aa470cfab576803e08ec257ab5", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "patch": "@@ -120,9 +120,9 @@ static const char * const optabs[] =\n   \"copysign_optab->handlers[$A].insn_code = CODE_FOR_$(copysign$F$a3$)\",\n   \"sqrt_optab->handlers[$A].insn_code = CODE_FOR_$(sqrt$a2$)\",\n   \"floor_optab->handlers[$A].insn_code = CODE_FOR_$(floor$a2$)\",\n-  \"lfloor_optab->handlers[$A].insn_code = CODE_FOR_$(lfloor$a2$)\",\n+  \"lfloor_optab->handlers[$B][$A].insn_code = CODE_FOR_$(lfloor$F$a$I$b2$)\",\n   \"ceil_optab->handlers[$A].insn_code = CODE_FOR_$(ceil$a2$)\",\n-  \"lceil_optab->handlers[$A].insn_code = CODE_FOR_$(lceil$a2$)\",\n+  \"lceil_optab->handlers[$B][$A].insn_code = CODE_FOR_$(lceil$F$a$I$b2$)\",\n   \"round_optab->handlers[$A].insn_code = CODE_FOR_$(round$a2$)\",\n   \"btrunc_optab->handlers[$A].insn_code = CODE_FOR_$(btrunc$a2$)\",\n   \"nearbyint_optab->handlers[$A].insn_code = CODE_FOR_$(nearbyint$a2$)\","}, {"sha": "4f9374aa132ecb1b8550696c62e65979bc19ac3c", "filename": "gcc/optabs.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "patch": "@@ -5299,9 +5299,7 @@ init_optabs (void)\n   parity_optab = init_optab (PARITY);\n   sqrt_optab = init_optab (SQRT);\n   floor_optab = init_optab (UNKNOWN);\n-  lfloor_optab = init_optab (UNKNOWN);\n   ceil_optab = init_optab (UNKNOWN);\n-  lceil_optab = init_optab (UNKNOWN);\n   round_optab = init_optab (UNKNOWN);\n   btrunc_optab = init_optab (UNKNOWN);\n   nearbyint_optab = init_optab (UNKNOWN);\n@@ -5366,6 +5364,8 @@ init_optabs (void)\n   ufloat_optab = init_convert_optab (UNSIGNED_FLOAT);\n   lrint_optab = init_convert_optab (UNKNOWN);\n   lround_optab = init_convert_optab (UNKNOWN);\n+  lfloor_optab = init_convert_optab (UNKNOWN);\n+  lceil_optab = init_convert_optab (UNKNOWN);\n \n   for (i = 0; i < NUM_MACHINE_MODES; i++)\n     {\n@@ -5489,6 +5489,10 @@ init_optabs (void)\n \t\t\t\t MODE_INT, MODE_FLOAT);\n   init_interclass_conv_libfuncs (lround_optab, \"lround\",\n \t\t\t\t MODE_INT, MODE_FLOAT);\n+  init_interclass_conv_libfuncs (lfloor_optab, \"lfloor\",\n+\t\t\t\t MODE_INT, MODE_FLOAT);\n+  init_interclass_conv_libfuncs (lceil_optab, \"lceil\",\n+\t\t\t\t MODE_INT, MODE_FLOAT);\n \n   /* sext_optab is also used for FLOAT_EXTEND.  */\n   init_intraclass_conv_libfuncs (sext_optab, \"extend\", MODE_FLOAT, true);"}, {"sha": "0f84c9828d53efe27a30a419939ac709844b803d", "filename": "gcc/optabs.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "patch": "@@ -189,9 +189,7 @@ enum optab_index\n   OTI_log1p,\n   /* Rounding functions */\n   OTI_floor,\n-  OTI_lfloor,\n   OTI_ceil,\n-  OTI_lceil,\n   OTI_btrunc,\n   OTI_round,\n   OTI_nearbyint,\n@@ -337,9 +335,7 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define log2_optab (optab_table[OTI_log2])\n #define log1p_optab (optab_table[OTI_log1p])\n #define floor_optab (optab_table[OTI_floor])\n-#define lfloor_optab (optab_table[OTI_lfloor])\n #define ceil_optab (optab_table[OTI_ceil])\n-#define lceil_optab (optab_table[OTI_lceil])\n #define btrunc_optab (optab_table[OTI_btrunc])\n #define round_optab (optab_table[OTI_round])\n #define nearbyint_optab (optab_table[OTI_nearbyint])\n@@ -407,6 +403,8 @@ enum convert_optab_index\n \n   COI_lrint,\n   COI_lround,\n+  COI_lfloor,\n+  COI_lceil,\n \n   COI_MAX\n };\n@@ -424,6 +422,8 @@ extern GTY(()) convert_optab convert_optab_table[COI_MAX];\n #define ufloat_optab (convert_optab_table[COI_ufloat])\n #define lrint_optab (convert_optab_table[COI_lrint])\n #define lround_optab (convert_optab_table[COI_lround])\n+#define lfloor_optab (convert_optab_table[COI_lfloor])\n+#define lceil_optab (convert_optab_table[COI_lceil])\n \n /* These arrays record the insn_code of insns that may be needed to\n    perform input and output reloads of special objects.  They provide a"}, {"sha": "caad33e4252fc88a15a3aa1467946ee4624c9fe6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "patch": "@@ -1,3 +1,8 @@\n+2006-10-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/math-torture/lfloor.c: New testcase.\n+\t* gcc.target/i386/math-torture/lceil.c: Likewise.\n+\n 2006-10-28  Tobias Burnus  <burnus@net-b.de>\n \n \tPR libgfortran/24313"}, {"sha": "d09847904e8a1b0ffb60a116b5ec6775cf7c088a", "filename": "gcc/testsuite/gcc.target/i386/math-torture/lceil.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Flceil.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Flceil.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Flceil.c?ref=c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do assemble } */\n+\n+long testlf (float x)\n+{\n+  return __builtin_lceilf (x);\n+}\n+long testl (double x)\n+{\n+  return __builtin_lceil (x);\n+}\n+long testll (long double x)\n+{\n+  return __builtin_lceill (x);\n+}\n+long long testllf (float x)\n+{\n+  return __builtin_llceilf (x);\n+}\n+long long testll_ (double x)\n+{\n+  return __builtin_llceil (x);\n+}\n+long long testlll (long double x)\n+{\n+  return __builtin_llceill (x);\n+}"}, {"sha": "2c2e96f2e538398a1e90778e96e9abedaf671b97", "filename": "gcc/testsuite/gcc.target/i386/math-torture/lfloor.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Flfloor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3a4177fe14190fda53e6a31236dcb8e23cf28f8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Flfloor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmath-torture%2Flfloor.c?ref=c3a4177fe14190fda53e6a31236dcb8e23cf28f8", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do assemble } */\n+\n+long testlf (float x)\n+{\n+  return __builtin_lfloorf (x);\n+}\n+long testl (double x)\n+{\n+  return __builtin_lfloor (x);\n+}\n+long testll (long double x)\n+{\n+  return __builtin_lfloorl (x);\n+}\n+long long testllf (float x)\n+{\n+  return __builtin_llfloorf (x);\n+}\n+long long testll_ (double x)\n+{\n+  return __builtin_llfloor (x);\n+}\n+long long testlll (long double x)\n+{\n+  return __builtin_llfloorl (x);\n+}"}]}