{"sha": "fcec20a7581be7e4a1aa34a4ce0f0316ba03d690", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNlYzIwYTc1ODFiZTdlNGExYWEzNGE0Y2UwZjAzMTZiYTAzZDY5MA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2005-04-05T11:08:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2005-04-05T11:08:55Z"}, "message": "memory, [...]: Use mutex to make _Sp_counted_base::add_ref_lock() thread-safe.\n\n\t* include/tr1/memory, include/tr1/boost_shared_ptr.h: Use mutex\n\tto make _Sp_counted_base::add_ref_lock() thread-safe. Check whether\n\tto destroy resources by testing for equality, not inequality. Add\n\tempty critical sections to solve memory visibility issues.\n\t* testsuite/tr1/2_general_utilities/memory/\n\tshared_ptr/cons/auto_ptr_neg.cc: Use dg-excess-errors instead of\n\texplicitly listing line numbers which need to be kept in sync.\n\t* testsuite/tr1/2_general_utilities/memory/\n\tshared_ptr/assign/auto_ptr_neg.cc: Same.\n\t* testsuite/tr1/2_general_utilities/memory/\n\tshared_ptr/assign/auto_ptr_rvalue_neg.cc: Same.\n\t* testsuite/tr1/2_general_utilities/memory/\n\tshared_ptr/cons/weak_ptr_expired.cc: Make XFAIL for consistency when\n\t-fno-exceptions.\n\t* testsuite/tr1/2_general_utilities/memory/\n\tenable_shared_from_this/not_shared.cc: Add explanatory comments.\n\t* testsuite/tr1/2_general_utilities/memory/\n\tenable_shared_from_this/not_shared2.cc: Same.\n\t* testsuite/tr1/2_general_utilities/memory/\n\tenable_shared_from_this/not_shared3.cc: Same.\n\nFrom-SVN: r97620", "tree": {"sha": "cd11923f6c07d5cfe3ca28c23d7985b110a02994", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd11923f6c07d5cfe3ca28c23d7985b110a02994"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1de2bc2a007b2a724960d20dd6bc7585ef6fe092", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1de2bc2a007b2a724960d20dd6bc7585ef6fe092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1de2bc2a007b2a724960d20dd6bc7585ef6fe092"}], "stats": {"total": 66, "additions": 52, "deletions": 14}, "files": [{"sha": "7461bd1e318943205de2163771f19bbe490b50f6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fcec20a7581be7e4a1aa34a4ce0f0316ba03d690", "patch": "@@ -1,3 +1,26 @@\n+2005-04-05  Jonathan Wakely  <redi@gcc.gnu.org>\n+\n+\t* include/tr1/memory, include/tr1/boost_shared_ptr.h: Use mutex\n+\tto make _Sp_counted_base::add_ref_lock() thread-safe. Check whether\n+\tto destroy resources by testing for equality, not inequality. Add\n+\tempty critical sections to solve memory visibility issues.\n+\t* testsuite/tr1/2_general_utilities/memory/\n+\tshared_ptr/cons/auto_ptr_neg.cc: Use dg-excess-errors instead of\n+\texplicitly listing line numbers which need to be kept in sync.\n+\t* testsuite/tr1/2_general_utilities/memory/\n+\tshared_ptr/assign/auto_ptr_neg.cc: Same.\n+\t* testsuite/tr1/2_general_utilities/memory/\n+\tshared_ptr/assign/auto_ptr_rvalue_neg.cc: Same.\n+\t* testsuite/tr1/2_general_utilities/memory/\n+\tshared_ptr/cons/weak_ptr_expired.cc: Make XFAIL for consistency when\n+\t-fno-exceptions.\n+\t* testsuite/tr1/2_general_utilities/memory/\n+\tenable_shared_from_this/not_shared.cc: Add explanatory comments.\n+\t* testsuite/tr1/2_general_utilities/memory/\n+\tenable_shared_from_this/not_shared2.cc: Same.\n+\t* testsuite/tr1/2_general_utilities/memory/\n+\tenable_shared_from_this/not_shared3.cc: Same.\n+\n 2005-04-05  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* acconfig.h: Delete macros already ACDEFINED."}, {"sha": "3426a4acebe4f3852f8c7dba06846d87af4e13b0", "filename": "libstdc++-v3/include/tr1/boost_shared_ptr.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h?ref=fcec20a7581be7e4a1aa34a4ce0f0316ba03d690", "patch": "@@ -131,19 +131,22 @@ class _Sp_counted_base\n   void\n   add_ref_lock()\n   {\n-    if (_M_use_count <= 0) // TODO not yet MT safe XXX\n+    __gnu_cxx::lock lock(_M_mutex);\n+    if (__gnu_cxx::__exchange_and_add(&_M_use_count, 1) == 0)\n     {\n+      _M_use_count = 0;\n       __throw_bad_weak_ptr();\n     }\n-    __gnu_cxx::__atomic_add(&_M_use_count, 1);\n   }\n \n   void\n   release() // nothrow\n   {\n-    if (__gnu_cxx::__exchange_and_add(&_M_use_count, -1) <= 1)\n+    if (__gnu_cxx::__exchange_and_add(&_M_use_count, -1) == 1)\n     {\n       dispose();\n+      __glibcxx_mutex_lock(_M_mutex);\n+      __glibcxx_mutex_unlock(_M_mutex);\n       weak_release();\n     }\n   }\n@@ -157,8 +160,10 @@ class _Sp_counted_base\n   void\n   weak_release() // nothrow\n   {\n-    if (__gnu_cxx::__exchange_and_add(&_M_weak_count, -1) <= 1)\n+    if (__gnu_cxx::__exchange_and_add(&_M_weak_count, -1) == 1)\n     {\n+      __glibcxx_mutex_lock(_M_mutex);\n+      __glibcxx_mutex_unlock(_M_mutex);\n       destroy();\n     }\n   }\n@@ -176,6 +181,7 @@ class _Sp_counted_base\n \n   _Atomic_word _M_use_count;        // #shared\n   _Atomic_word _M_weak_count;       // #weak + (#shared != 0)\n+  __gnu_cxx::mutex_type _M_mutex;\n };\n \n template <typename _Ptr, typename _Deleter>"}, {"sha": "294d4868a472109d14d7f6eb8389b56b572c5295", "filename": "libstdc++-v3/include/tr1/memory", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory?ref=fcec20a7581be7e4a1aa34a4ce0f0316ba03d690", "patch": "@@ -43,6 +43,7 @@\n #include <bits/gthr.h>\n #include <bits/atomicity.h>\n #include <bits/functexcept.h>\n+#include <bits/concurrence.h>\n #include <debug/debug.h>\n \n #include <tr1/boost_shared_ptr.h>"}, {"sha": "2c36c7ea08a43dcbaa1130ab7367b68f7a389fa1", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/memory/enable_shared_from_this/not_shared.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fenable_shared_from_this%2Fnot_shared.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fenable_shared_from_this%2Fnot_shared.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fenable_shared_from_this%2Fnot_shared.cc?ref=fcec20a7581be7e4a1aa34a4ce0f0316ba03d690", "patch": "@@ -39,10 +39,12 @@ test01()\n   }\n   catch (const std::tr1::bad_weak_ptr&)\n   {\n+    // Expected.\n     __throw_exception_again;\n   }\n   catch (...)\n   {\n+    // Failed.\n   }\n \n   return 0;"}, {"sha": "0043b33dfd4ce6b5c5d0148acefed7c7bc07b4ec", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/memory/enable_shared_from_this/not_shared2.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fenable_shared_from_this%2Fnot_shared2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fenable_shared_from_this%2Fnot_shared2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fenable_shared_from_this%2Fnot_shared2.cc?ref=fcec20a7581be7e4a1aa34a4ce0f0316ba03d690", "patch": "@@ -41,8 +41,13 @@ test01()\n   }\n   catch (const std::tr1::bad_weak_ptr&)\n   {\n+    // Expected.\n     __throw_exception_again;\n   }\n+  catch (...)\n+  {\n+    // Failed.\n+  }\n \n   return 0;\n }"}, {"sha": "c5e10d1a73ca99021abbeba0d920dcf5532cb35e", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/memory/enable_shared_from_this/not_shared3.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fenable_shared_from_this%2Fnot_shared3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fenable_shared_from_this%2Fnot_shared3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fenable_shared_from_this%2Fnot_shared3.cc?ref=fcec20a7581be7e4a1aa34a4ce0f0316ba03d690", "patch": "@@ -42,8 +42,13 @@ test01()\n   }\n   catch (const std::tr1::bad_weak_ptr&)\n   {\n+    // Expected.\n     __throw_exception_again;\n   }\n+  catch (...)\n+  {\n+    // Failed.\n+  }\n \n   return 0;\n }"}, {"sha": "587e8e66b8652b8a201f7c9564c472fdb6c6dc62", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/memory/shared_ptr/assign/auto_ptr_neg.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fassign%2Fauto_ptr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fassign%2Fauto_ptr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fassign%2Fauto_ptr_neg.cc?ref=fcec20a7581be7e4a1aa34a4ce0f0316ba03d690", "patch": "@@ -47,6 +47,4 @@ main()\n   test01();\n   return 0;\n }\n-// { dg-error \"In constructor\" \"\" { target *-*-* } 0 }\n-// { dg-error \"cannot convert\" \"\" { target *-*-* } 0 }\n-// { dg-error \"instantiated from\" \"\" { target *-*-* } 0 }\n+// { dg-excess-errors \"In constructor\" }"}, {"sha": "e9678b9300926414a403a875334954446c8a4ffa", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/memory/shared_ptr/assign/auto_ptr_rvalue_neg.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fassign%2Fauto_ptr_rvalue_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fassign%2Fauto_ptr_rvalue_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fassign%2Fauto_ptr_rvalue_neg.cc?ref=fcec20a7581be7e4a1aa34a4ce0f0316ba03d690", "patch": "@@ -46,5 +46,4 @@ main()\n   test01();\n   return 0;\n }\n-// { dg-error \"auto_ptr\" \"\" { target *-*-* } 0 }\n-// { dg-error \"shared_ptr\" \"\" { target *-*-* } 0 }\n+// { dg-excess-errors \"candidates are\" }"}, {"sha": "9eafc88deb9ced245e04409494be3151801717a1", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/memory/shared_ptr/cons/auto_ptr_neg.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fcons%2Fauto_ptr_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fcons%2Fauto_ptr_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fcons%2Fauto_ptr_neg.cc?ref=fcec20a7581be7e4a1aa34a4ce0f0316ba03d690", "patch": "@@ -45,6 +45,4 @@ main()\n   test01();\n   return 0;\n }\n-// { dg-error \"shared_ptr\" \"candidates are\" { target *-*-* } 478 }\n-\n-// { dg-error \"shared_ptr\" \"\" { target *-*-* } 468 }\n+// { dg-excess-errors \"candidates are\" }"}, {"sha": "63dcae492761c7a9fbc7ba414e3c33a6a17e66cf", "filename": "libstdc++-v3/testsuite/tr1/2_general_utilities/memory/shared_ptr/cons/weak_ptr_expired.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fcons%2Fweak_ptr_expired.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcec20a7581be7e4a1aa34a4ce0f0316ba03d690/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fcons%2Fweak_ptr_expired.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F2_general_utilities%2Fmemory%2Fshared_ptr%2Fcons%2Fweak_ptr_expired.cc?ref=fcec20a7581be7e4a1aa34a4ce0f0316ba03d690", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do run { xfail *-*-* } }\n // Copyright (C) 2005 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -34,20 +35,20 @@ test01()\n   std::tr1::shared_ptr<A> a1(new A);\n   std::tr1::weak_ptr<A> wa(a1);\n   a1.reset();\n+  VERIFY( wa.expired() );\n   try\n   {\n     std::tr1::shared_ptr<A> a2(wa);\n   }\n   catch (const std::tr1::bad_weak_ptr&)\n   {\n     // Expected.\n+      __throw_exception_again;\n   }\n   catch (...)\n   {\n     // Failed.\n-    __throw_exception_again;\n   }\n-  VERIFY( wa.expired() );\n \n   return 0;\n }"}]}