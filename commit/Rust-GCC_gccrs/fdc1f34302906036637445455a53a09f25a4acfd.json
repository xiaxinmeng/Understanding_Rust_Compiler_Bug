{"sha": "fdc1f34302906036637445455a53a09f25a4acfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRjMWYzNDMwMjkwNjAzNjYzNzQ0NTQ1NWE1M2EwOWYyNWE0YWNmZA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2019-07-12T13:50:49Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2019-07-12T13:50:49Z"}, "message": "introduce try/finally/else in gimplefe\n\nfor  gcc/c/ChangeLog\n\n\t* gimple-parser.c (c_parser_gimple_try_stmt): New.\n\t(c_parser_compound_statement): Call it.\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gcc.dg/gimplefe-43.c: New.\n\nFrom-SVN: r273443", "tree": {"sha": "6699885ac98338fa7078d87d30d5e4787d6ae1a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6699885ac98338fa7078d87d30d5e4787d6ae1a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdc1f34302906036637445455a53a09f25a4acfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc1f34302906036637445455a53a09f25a4acfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdc1f34302906036637445455a53a09f25a4acfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdc1f34302906036637445455a53a09f25a4acfd/comments", "author": null, "committer": null, "parents": [{"sha": "0d67cd380d37f2a28156d3430b9964a5df67a101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d67cd380d37f2a28156d3430b9964a5df67a101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d67cd380d37f2a28156d3430b9964a5df67a101"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "927fa914bfb6581b29dfb6fc9f272a33e85fca1e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc1f34302906036637445455a53a09f25a4acfd/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc1f34302906036637445455a53a09f25a4acfd/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=fdc1f34302906036637445455a53a09f25a4acfd", "patch": "@@ -1,3 +1,8 @@\n+2019-07-12  Alexandre Oliva <oliva@adacore.com>\n+\n+\t* gimple-parser.c (c_parser_gimple_try_stmt): New.\n+\t(c_parser_compound_statement): Call it.\n+\n 2019-07-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (c_parser_omp_clause_name): Handle order clause."}, {"sha": "4970ae1e9e086fb8aca2c533943ff3eb60fcca98", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc1f34302906036637445455a53a09f25a4acfd/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc1f34302906036637445455a53a09f25a4acfd/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=fdc1f34302906036637445455a53a09f25a4acfd", "patch": "@@ -117,6 +117,7 @@ static struct c_expr c_parser_gimple_postfix_expression_after_primary\n static void c_parser_gimple_declaration (gimple_parser &);\n static void c_parser_gimple_goto_stmt (gimple_parser &, location_t,\n \t\t\t\t       tree, gimple_seq *);\n+static void c_parser_gimple_try_stmt (gimple_parser &, gimple_seq *);\n static void c_parser_gimple_if_stmt (gimple_parser &, gimple_seq *);\n static void c_parser_gimple_switch_stmt (gimple_parser &, gimple_seq *);\n static void c_parser_gimple_return_stmt (gimple_parser &, gimple_seq *);\n@@ -407,6 +408,9 @@ c_parser_gimple_compound_statement (gimple_parser &parser, gimple_seq *seq)\n \tcase CPP_KEYWORD:\n \t  switch (c_parser_peek_token (parser)->keyword)\n \t    {\n+\t    case RID_AT_TRY:\n+\t      c_parser_gimple_try_stmt (parser, seq);\n+\t      break;\n \t    case RID_IF:\n \t      c_parser_gimple_if_stmt (parser, seq);\n \t      break;\n@@ -448,6 +452,14 @@ c_parser_gimple_compound_statement (gimple_parser &parser, gimple_seq *seq)\n \t      c_parser_gimple_label (parser, seq);\n \t      break;\n \t    }\n+\t  if (c_parser_next_token_is (parser, CPP_NAME)\n+\t      && c_parser_peek_token (parser)->id_kind == C_ID_ID\n+\t      && strcmp (IDENTIFIER_POINTER (c_parser_peek_token (parser)->value),\n+\t\t\t \"try\") == 0)\n+\t    {\n+\t      c_parser_gimple_try_stmt (parser, seq);\n+\t      break;\n+\t    }\n \t  /* Basic block specification.\n \t     __BB (index, ...)  */\n \t  if ((cfun->curr_properties & PROP_cfg)\n@@ -2092,6 +2104,55 @@ c_parser_gimple_paren_condition (gimple_parser &parser)\n   return cond;\n }\n \n+/* Parse gimple try statement.\n+\n+   try-statement:\n+     try { ... } finally { ... }\n+     try { ... } finally { ... } else { ... }\n+\n+   This could support try/catch as well, but it's not implemented yet.\n+ */\n+\n+static void\n+c_parser_gimple_try_stmt (gimple_parser &parser, gimple_seq *seq)\n+{\n+  gimple_seq tryseq = NULL;\n+  c_parser_consume_token (parser);\n+  c_parser_gimple_compound_statement (parser, &tryseq);\n+\n+  if ((c_parser_next_token_is (parser, CPP_KEYWORD)\n+       && c_parser_peek_token (parser)->keyword == RID_AT_FINALLY)\n+      || (c_parser_next_token_is (parser, CPP_NAME)\n+\t  && c_parser_peek_token (parser)->id_kind == C_ID_ID\n+\t  && strcmp (IDENTIFIER_POINTER (c_parser_peek_token (parser)->value),\n+\t\t     \"finally\") == 0))\n+    {\n+      gimple_seq finseq = NULL;\n+      c_parser_consume_token (parser);\n+      c_parser_gimple_compound_statement (parser, &finseq);\n+\n+      if (c_parser_next_token_is (parser, CPP_KEYWORD)\n+\t  && c_parser_peek_token (parser)->keyword == RID_ELSE)\n+\t{\n+\t  gimple_seq elsseq = NULL;\n+\t  c_parser_consume_token (parser);\n+\t  c_parser_gimple_compound_statement (parser, &elsseq);\n+\n+\t  geh_else *stmt = gimple_build_eh_else (finseq, elsseq);\n+\t  finseq = NULL;\n+\t  gimple_seq_add_stmt_without_update (&finseq, stmt);\n+\t}\n+\n+      gtry *stmt = gimple_build_try (tryseq, finseq, GIMPLE_TRY_FINALLY);\n+      gimple_seq_add_stmt_without_update (seq, stmt);\n+    }\n+  else if (c_parser_next_token_is (parser, CPP_KEYWORD)\n+      && c_parser_peek_token (parser)->keyword == RID_AT_CATCH)\n+    c_parser_error (parser, \"%<catch%> is not supported\");\n+  else\n+    c_parser_error (parser, \"expected %<finally%> or %<catch%>\");\n+}\n+\n /* Parse gimple if-else statement.\n \n    if-statement:"}, {"sha": "c2352005a370bcdd0104cd1655989949e20b55b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc1f34302906036637445455a53a09f25a4acfd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc1f34302906036637445455a53a09f25a4acfd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fdc1f34302906036637445455a53a09f25a4acfd", "patch": "@@ -1,3 +1,7 @@\n+2019-07-12  Alexandre Oliva <oliva@adacore.com>\n+\n+\t* gcc.dg/gimplefe-43.c: New.\n+\n 2019-07-12  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/vector-7.c: New testcase."}, {"sha": "5fd66e6dfa5cd099dce5238b98dedf8b518aafd7", "filename": "gcc/testsuite/gcc.dg/gimplefe-43.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdc1f34302906036637445455a53a09f25a4acfd/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdc1f34302906036637445455a53a09f25a4acfd/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgimplefe-43.c?ref=fdc1f34302906036637445455a53a09f25a4acfd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple\" } */\n+\n+void __GIMPLE foo()\n+{\n+  try\n+    {\n+      try\n+\t{\n+\t  ;\n+\t}\n+      finally\n+\t{\n+\t  ;\n+\t}\n+      else\n+\t{\n+\t  ;\n+\t}\n+    }\n+  finally\n+    {\n+      ;\n+    }\n+}"}]}