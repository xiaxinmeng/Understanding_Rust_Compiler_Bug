{"sha": "788113556899304501fd119f9c7ba93a74835c33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg4MTEzNTU2ODk5MzA0NTAxZmQxMTlmOWM3YmE5M2E3NDgzNWMzMw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2021-02-02T02:59:06Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2021-02-02T03:00:30Z"}, "message": "restore current_function_decl after re-gimplifying nested ADDR_EXPRs\n\nAda makes extensive use of nested functions, which turn all automatic\nvariables of the enclosing function that are used in nested ones into\nmembers of an artificial FRAME record type.\n\nThe address of a local variable is usually passed to asan marking\nfunctions without using a temporary.  asan_expand_mark_ifn will reject\nan ADDR_EXPRs if it's split out from the call into an SSA_NAMEs.\n\nTaking the address of a member of FRAME within a nested function was\nnot regarded as a gimple val: while introducing FRAME variables,\ncurrent_function_decl pointed to the outermost function, even while\nprocessing a nested function, so decl_address_invariant_p, checking\nthat the context of the variable is current_function_decl, returned\nfalse for such ADDR_EXPRs.\n\ndecl_address_invariant_p, called when determining whether an\nexpression is a legitimate gimple value, compares the context of\nautomatic variables with current_function_decl.  Some of the\ntree-nested function processing doesn't set current_function_decl, but\nADDR_EXPR-processing bits temporarily override it.  However, they\nrestore it before re-gimplifying, which causes even ADDR_EXPRs\nreferencing automatic variables in the FRAME struct of a nested\nfunction to not be regarded as address-invariant.\n\nThis patch moves the restores of current_function_decl in the\nADDR_EXPR-handling bits after the re-gimplification, so that the\ncorrect current_function_decl is used when testing for address\ninvariance.\n\n\nfor  gcc/ChangeLog\n\n\t* tree-nested.c (convert_nonlocal_reference_op): Move\n\tcurrent_function_decl restore after re-gimplification.\n\t(convert_local_reference_op): Likewise.\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gcc.dg/asan/nested-1.c: New.", "tree": {"sha": "1aa895bf65b6010f56d7c4d4d13440cdab74f5bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1aa895bf65b6010f56d7c4d4d13440cdab74f5bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/788113556899304501fd119f9c7ba93a74835c33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788113556899304501fd119f9c7ba93a74835c33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/788113556899304501fd119f9c7ba93a74835c33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/788113556899304501fd119f9c7ba93a74835c33/comments", "author": null, "committer": null, "parents": [{"sha": "8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a2750086d57d1a2251d9239fa4e6c2dc9ec3a86"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "87e842098077cfdb9cc5120c16307d0b8f6eb65f", "filename": "gcc/testsuite/gcc.dg/asan/nested-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788113556899304501fd119f9c7ba93a74835c33/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fnested-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788113556899304501fd119f9c7ba93a74835c33/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fnested-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fnested-1.c?ref=788113556899304501fd119f9c7ba93a74835c33", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=address\" } */\n+\n+int f(int i) {\n+  auto int h() {\n+    int r;\n+    int *p;\n+\n+    {\n+      int x[3];\n+\n+      auto int g() {\n+\treturn x[i];\n+      }\n+\n+      p = &r;\n+      *p = g();\n+    }\n+\n+    return *p;\n+  }\n+\n+  return h();\n+}"}, {"sha": "addd6eef9aba624f4fb1548bec54e3ad5c1c4749", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/788113556899304501fd119f9c7ba93a74835c33/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/788113556899304501fd119f9c7ba93a74835c33/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=788113556899304501fd119f9c7ba93a74835c33", "patch": "@@ -1214,14 +1214,14 @@ convert_nonlocal_reference_op (tree *tp, int *walk_subtrees, void *data)\n \t    save_context = current_function_decl;\n \t    current_function_decl = info->context;\n \t    recompute_tree_invariant_for_addr_expr (t);\n-\t    current_function_decl = save_context;\n \n \t    /* If the callback converted the address argument in a context\n \t       where we only accept variables (and min_invariant, presumably),\n \t       then compute the address into a temporary.  */\n \t    if (save_val_only)\n \t      *tp = gsi_gimplify_val ((struct nesting_info *) wi->info,\n \t\t\t\t      t, &wi->gsi);\n+\t    current_function_decl = save_context;\n \t  }\n       }\n       break;\n@@ -1969,13 +1969,13 @@ convert_local_reference_op (tree *tp, int *walk_subtrees, void *data)\n \t  save_context = current_function_decl;\n \t  current_function_decl = info->context;\n \t  recompute_tree_invariant_for_addr_expr (t);\n-\t  current_function_decl = save_context;\n \n \t  /* If we are in a context where we only accept values, then\n \t     compute the address into a temporary.  */\n \t  if (save_val_only)\n \t    *tp = gsi_gimplify_val ((struct nesting_info *) wi->info,\n \t\t\t\t    t, &wi->gsi);\n+\t  current_function_decl = save_context;\n \t}\n       break;\n "}]}