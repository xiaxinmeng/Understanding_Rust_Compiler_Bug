{"sha": "5c17adfb5d08e34da7a7f234dfc2ed1f0aaadaa9", "node_id": "C_kwDOANBUbNoAKDVjMTdhZGZiNWQwOGUzNGRhN2E3ZjIzNGRmYzJlZDFmMGFhYWRhYTk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-22T11:52:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-22T11:52:48Z"}, "message": "phiopt: Drop SSA_NAME_RANGE_INFO in maybe equal case [PR108166]\n\nThe following place in value_replacement is after proving that\nx == cst1 ? cst2 : x\nphi result is only used in a comparison with constant which doesn't\ncare if it compares cst1 or cst2 and replaces it with x.\nThe testcase is miscompiled because we have after the replacement\nincorrect range info for the phi result, we would need to\neffectively union the phi result range with cst1 (oarg in the code)\nbecause previously that constant might be missing in the range, but\nnewly it can appear (we've just verified that the single use stmt\nof the phi result doesn't care about that value in particular).\n\nThe following patch just resets the info, bootstrapped/regtested\non x86_64-linux and i686-linux, ok for trunk?\n\nAldy/Andrew, how would one instead union the SSA_NAME_RANGE_INFO\nwith some INTEGER_CST and store it back into SSA_NAME_RANGE_INFO\n(including adjusting non-zero bits and the like)?\n\n2022-12-22  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/108166\n\t* tree-ssa-phiopt.cc (value_replacement): For the maybe_equal_p\n\tcase turned into equal_p reset SSA_NAME_RANGE_INFO of phi result.\n\n\t* g++.dg/torture/pr108166.C: New test.", "tree": {"sha": "074a124b4bfb86b74decdc4e6542f241ae69808f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/074a124b4bfb86b74decdc4e6542f241ae69808f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c17adfb5d08e34da7a7f234dfc2ed1f0aaadaa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c17adfb5d08e34da7a7f234dfc2ed1f0aaadaa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c17adfb5d08e34da7a7f234dfc2ed1f0aaadaa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c17adfb5d08e34da7a7f234dfc2ed1f0aaadaa9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cb5d7cdbab8e5f8359764ef5f62d93c2bc88552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb5d7cdbab8e5f8359764ef5f62d93c2bc88552", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cb5d7cdbab8e5f8359764ef5f62d93c2bc88552"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "037fc275e3dc096869a61ac437bc391cef3cf5f8", "filename": "gcc/testsuite/g++.dg/torture/pr108166.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c17adfb5d08e34da7a7f234dfc2ed1f0aaadaa9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr108166.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c17adfb5d08e34da7a7f234dfc2ed1f0aaadaa9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr108166.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr108166.C?ref=5c17adfb5d08e34da7a7f234dfc2ed1f0aaadaa9", "patch": "@@ -0,0 +1,26 @@\n+// PR tree-optimization/108166\n+// { dg-do run }\n+\n+bool a, b;\n+int d, c;\n+\n+const int &\n+foo (const int &f, const int &g)\n+{\n+  return !f ? f : g;\n+}\n+\n+__attribute__((noipa)) void\n+bar (int)\n+{\n+}\n+\n+int\n+main ()\n+{\n+  c = foo (b, 0) > ((b ? d : b) ?: 8);\n+  a = b ? d : b;\n+  bar (a);\n+  if (a != 0)\n+    __builtin_abort ();\n+}"}, {"sha": "906b406970f108a8a6c59f0a9ff19234cb738c6c", "filename": "gcc/tree-ssa-phiopt.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c17adfb5d08e34da7a7f234dfc2ed1f0aaadaa9/gcc%2Ftree-ssa-phiopt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c17adfb5d08e34da7a7f234dfc2ed1f0aaadaa9/gcc%2Ftree-ssa-phiopt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.cc?ref=5c17adfb5d08e34da7a7f234dfc2ed1f0aaadaa9", "patch": "@@ -1491,6 +1491,12 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n \t\t  default:\n \t\t    break;\n \t\t  }\n+\t      if (equal_p)\n+\t\t/* After the optimization PHI result can have value\n+\t\t   which it couldn't have previously.\n+\t\t   We could instead of resetting it union the range\n+\t\t   info with oarg.  */\n+\t\treset_flow_sensitive_info (gimple_phi_result (phi));\n \t      if (equal_p && MAY_HAVE_DEBUG_BIND_STMTS)\n \t\t{\n \t\t  imm_use_iterator imm_iter;"}]}