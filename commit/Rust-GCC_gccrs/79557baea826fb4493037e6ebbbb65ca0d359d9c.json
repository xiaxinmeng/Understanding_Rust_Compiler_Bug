{"sha": "79557baea826fb4493037e6ebbbb65ca0d359d9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk1NTdiYWVhODI2ZmI0NDkzMDM3ZTZlYmJiYjY1Y2EwZDM1OWQ5Yw==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2017-05-09T14:19:47Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2017-05-09T14:19:47Z"}, "message": "[ARC] Add support for advanced mpy/mac instructions.\n\ngcc/\n2017-05-09  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.c (arc_conditional_register_usage): Handle ACCL,\n\tACCH registers.\n\t* config/arc/arc.md (mulsidi3): Use advanced mpy instructions when\n\tavailable.\n\t(umulsidi3): Likewise.\n\t(mulsidi3_700): Disable this pattern when we have advanced mpy\n\tinstructions.\n\t(umulsidi3_700): Likewise.\n\t(maddsidi4): New pattern.\n\t(macd, mac, mac_r, umaddsidi4, macdu, macu, macu_r): Likewise.\n\t(mpyd_arcv2hs, mpyd_imm_arcv2hs, mpydu_arcv2hs): Likewise.\n\t(mpydu_imm_arcv2hs): Likewise.\n\t* config/arc/predicates.md (accl_operand): New predicate.\n\nFrom-SVN: r247797", "tree": {"sha": "db53e1cab829adad394f0dff951fea3234c5d572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db53e1cab829adad394f0dff951fea3234c5d572"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79557baea826fb4493037e6ebbbb65ca0d359d9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79557baea826fb4493037e6ebbbb65ca0d359d9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79557baea826fb4493037e6ebbbb65ca0d359d9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79557baea826fb4493037e6ebbbb65ca0d359d9c/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7314bc17b9dde51f1eac83dc399d411f5fdd4a0"}], "stats": {"total": 345, "additions": 341, "deletions": 4}, "files": [{"sha": "d8982068a0194c2ed6c23fc1e20a0301b63c1cfa", "filename": "ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79557baea826fb4493037e6ebbbb65ca0d359d9c/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79557baea826fb4493037e6ebbbb65ca0d359d9c/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=79557baea826fb4493037e6ebbbb65ca0d359d9c", "patch": "@@ -1,3 +1,19 @@\n+2017-05-09  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_conditional_register_usage): Handle ACCL,\n+\tACCH registers.\n+\t* config/arc/arc.md (mulsidi3): Use advanced mpy instructions when\n+\tavailable.\n+\t(umulsidi3): Likewise.\n+\t(mulsidi3_700): Disable this pattern when we have advanced mpy\n+\tinstructions.\n+\t(umulsidi3_700): Likewise.\n+\t(maddsidi4): New pattern.\n+\t(macd, mac, mac_r, umaddsidi4, macdu, macu, macu_r): Likewise.\n+\t(mpyd_arcv2hs, mpyd_imm_arcv2hs, mpydu_arcv2hs): Likewise.\n+\t(mpydu_imm_arcv2hs): Likewise.\n+\t* config/arc/predicates.md (accl_operand): New predicate.\n+\n 2017-05-09  Claudiu Zissulescu  <claziss@synopsys.com>\n \t    Andrew Burgess <andrew.burgess@embecosm.com>\n "}, {"sha": "91c28e7355412b211c9141aa6d67d2e25ee79760", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79557baea826fb4493037e6ebbbb65ca0d359d9c/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79557baea826fb4493037e6ebbbb65ca0d359d9c/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=79557baea826fb4493037e6ebbbb65ca0d359d9c", "patch": "@@ -1786,8 +1786,9 @@ arc_conditional_register_usage (void)\n   arc_regno_reg_class[PROGRAM_COUNTER_REGNO] = GENERAL_REGS;\n \n   /*ARCV2 Accumulator.  */\n-  if (TARGET_V2\n-      && (TARGET_FP_DP_FUSED || TARGET_FP_SP_FUSED))\n+  if ((TARGET_V2\n+       && (TARGET_FP_DP_FUSED || TARGET_FP_SP_FUSED))\n+      || TARGET_PLUS_DMPY)\n   {\n     arc_regno_reg_class[ACCL_REGNO] = WRITABLE_CORE_REGS;\n     arc_regno_reg_class[ACCH_REGNO] = WRITABLE_CORE_REGS;"}, {"sha": "edb983f1b2d021981b4acc404e1606e8063e4d12", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 264, "deletions": 2, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79557baea826fb4493037e6ebbbb65ca0d359d9c/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79557baea826fb4493037e6ebbbb65ca0d359d9c/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=79557baea826fb4493037e6ebbbb65ca0d359d9c", "patch": "@@ -2157,6 +2157,18 @@\n   \"TARGET_ANY_MPY\"\n \"\n {\n+  if (TARGET_PLUS_MACD)\n+    {\n+     if (CONST_INT_P (operands[2]))\n+       {\n+\temit_insn (gen_mpyd_imm_arcv2hs (operands[0], operands[1], operands[2]));\n+       }\n+     else\n+       {\n+\temit_insn (gen_mpyd_arcv2hs (operands[0], operands[1], operands[2]));\n+       }\n+     DONE;\n+    }\n   if (TARGET_MPY)\n     {\n       operands[2] = force_reg (SImode, operands[2]);\n@@ -2237,7 +2249,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"%c\"))\n \t\t (sign_extend:DI (match_operand:SI 2 \"extend_operand\" \"cL\"))))]\n-  \"TARGET_MPY\"\n+  \"TARGET_MPY && !TARGET_PLUS_MACD\"\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n@@ -2390,6 +2402,18 @@\n \t\t (zero_extend:DI (match_operand:SI 2 \"nonmemory_operand\" \"\"))))]\n   \"\"\n {\n+  if (TARGET_PLUS_MACD)\n+    {\n+     if (CONST_INT_P (operands[2]))\n+       {\n+\temit_insn (gen_mpydu_imm_arcv2hs (operands[0], operands[1], operands[2]));\n+       }\n+     else\n+       {\n+\temit_insn (gen_mpydu_arcv2hs (operands[0], operands[1], operands[2]));\n+       }\n+     DONE;\n+    }\n   if (TARGET_MPY)\n     {\n       operands[2] = force_reg (SImode, operands[2]);\n@@ -2480,7 +2504,7 @@\n   [(set (match_operand:DI 0 \"dest_reg_operand\" \"=&r\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"%c\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"extend_operand\" \"cL\"))))]\n-  \"TARGET_MPY\"\n+  \"TARGET_MPY && !TARGET_PLUS_MACD\"\n   \"#\"\n   \"reload_completed\"\n   [(const_int 0)]\n@@ -6248,6 +6272,244 @@\n   \"\"\n   [(set_attr \"length\" \"0\")])\n \n+;; MAC and DMPY instructions\n+(define_insn_and_split \"maddsidi4\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(plus:DI\n+\t (mult:DI\n+\t  (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"%r\"))\n+\t  (sign_extend:DI (match_operand:SI 2 \"extend_operand\" \"ri\")))\n+\t (match_operand:DI 3 \"register_operand\" \"r\")))]\n+  \"TARGET_PLUS_DMPY\"\n+  \"#\"\n+  \"TARGET_PLUS_DMPY && reload_completed\"\n+  [(const_int 0)]\n+  \"{\n+   rtx acc_reg = gen_rtx_REG (DImode, ACC_REG_FIRST);\n+   emit_move_insn (acc_reg, operands[3]);\n+   if (TARGET_PLUS_MACD)\n+     emit_insn (gen_macd (operands[0], operands[1], operands[2]));\n+   else\n+     {\n+      emit_insn (gen_mac (operands[1], operands[2]));\n+      emit_move_insn (operands[0], acc_reg);\n+     }\n+   DONE;\n+   }\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"36\")])\n+\n+(define_insn \"macd\"\n+  [(set (match_operand:DI 0 \"even_register_operand\"\t       \"=Rcr,r,r\")\n+\t(plus:DI\n+\t (mult:DI\n+\t  (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"%0,c,c\"))\n+\t  (sign_extend:DI (match_operand:SI 2 \"extend_operand\" \" c,cI,Cal\")))\n+\t (reg:DI ARCV2_ACC)))\n+   (set (reg:DI ARCV2_ACC)\n+\t(plus:DI\n+\t (mult:DI (sign_extend:DI (match_dup 1))\n+\t\t  (sign_extend:DI (match_dup 2)))\n+\t (reg:DI ARCV2_ACC)))]\n+ \"TARGET_PLUS_MACD\"\n+ \"macd %0,%1,%2\"\n+  [(set_attr \"length\" \"4,4,8\")\n+   (set_attr \"type\" \"multi\")\n+   (set_attr \"predicable\" \"yes,no,no\")\n+   (set_attr \"cond\" \"canuse,nocond,nocond\")])\n+\n+(define_insn \"mac\"\n+  [(set (reg:DI ARCV2_ACC)\n+\t(plus:DI\n+\t (mult:DI (sign_extend:DI (match_operand:SI 0 \"register_operand\" \"%r,r\"))\n+\t\t  (sign_extend:DI (match_operand:SI 1 \"extend_operand\" \"rI,i\")))\n+\t (reg:DI ARCV2_ACC)))]\n+ \"TARGET_PLUS_DMPY\"\n+ \"mac 0,%0,%1\"\n+  [(set_attr \"length\" \"4,8\")\n+   (set_attr \"type\" \"multi\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"cond\" \"nocond\")])\n+\n+(define_peephole2\n+  [(set (reg:DI ARCV2_ACC)\n+\t(plus:DI\n+\t (mult:DI (sign_extend:DI (match_operand:SI 0 \"register_operand\" \"\"))\n+\t\t  (sign_extend:DI (match_operand:SI 1 \"extend_operand\" \"\")))\n+\t (reg:DI ARCV2_ACC)))\n+   (set (match_operand:SI 2 \"register_operand\" \"\")\n+\t(match_operand:SI 3 \"accl_operand\" \"\"))]\n+ \"TARGET_PLUS_DMPY\"\n+ [(const_int 0)]\n+ {\n+  emit_insn (gen_mac_r (operands[2], operands[0], operands[1]));\n+  DONE;\n+ })\n+\n+(define_insn \"mac_r\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(truncate:SI\n+\t (plus:DI\n+\t  (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"%r,r\"))\n+\t\t   (sign_extend:DI (match_operand:SI 2 \"extend_operand\" \"rI,i\")))\n+\t  (reg:DI ARCV2_ACC))))\n+   (clobber (reg:DI ARCV2_ACC))]\n+ \"TARGET_PLUS_DMPY\"\n+ \"mac %0,%1,%2\"\n+  [(set_attr \"length\" \"4,8\")\n+   (set_attr \"type\" \"multi\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"cond\" \"nocond\")])\n+\n+(define_insn_and_split \"umaddsidi4\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(plus:DI\n+\t (mult:DI\n+\t  (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"%r\"))\n+\t  (zero_extend:DI (match_operand:SI 2 \"extend_operand\" \"ri\")))\n+\t (match_operand:DI 3 \"register_operand\" \"r\")))]\n+  \"TARGET_PLUS_DMPY\"\n+  \"#\"\n+  \"TARGET_PLUS_DMPY && reload_completed\"\n+  [(const_int 0)]\n+  \"{\n+   rtx acc_reg = gen_rtx_REG (DImode, ACC_REG_FIRST);\n+   emit_move_insn (acc_reg, operands[3]);\n+   if (TARGET_PLUS_MACD)\n+     emit_insn (gen_macdu (operands[0], operands[1], operands[2]));\n+   else\n+     {\n+      emit_insn (gen_macu (operands[1], operands[2]));\n+      emit_move_insn (operands[0], acc_reg);\n+     }\n+   DONE;\n+   }\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"36\")])\n+\n+(define_insn \"macdu\"\n+  [(set (match_operand:DI 0 \"even_register_operand\"\t       \"=Rcr,r,r\")\n+\t(plus:DI\n+\t (mult:DI\n+\t  (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"%0,c,c\"))\n+\t  (zero_extend:DI (match_operand:SI 2 \"extend_operand\" \" c,cI,i\")))\n+\t (reg:DI ARCV2_ACC)))\n+   (set (reg:DI ARCV2_ACC)\n+\t(plus:DI\n+\t (mult:DI (zero_extend:DI (match_dup 1))\n+\t\t  (zero_extend:DI (match_dup 2)))\n+\t (reg:DI ARCV2_ACC)))]\n+ \"TARGET_PLUS_MACD\"\n+ \"macdu %0,%1,%2\"\n+  [(set_attr \"length\" \"4,4,8\")\n+   (set_attr \"type\" \"multi\")\n+   (set_attr \"predicable\" \"yes,no,no\")\n+   (set_attr \"cond\" \"canuse,nocond,nocond\")])\n+\n+(define_insn \"macu\"\n+  [(set (reg:DI ARCV2_ACC)\n+\t(plus:DI\n+\t (mult:DI (zero_extend:DI (match_operand:SI 0 \"register_operand\" \"%r,r\"))\n+\t\t  (zero_extend:DI (match_operand:SI 1 \"extend_operand\" \"rI,i\")))\n+\t (reg:DI ARCV2_ACC)))]\n+ \"TARGET_PLUS_DMPY\"\n+ \"macu 0,%0,%1\"\n+  [(set_attr \"length\" \"4,8\")\n+   (set_attr \"type\" \"multi\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"cond\" \"nocond\")])\n+\n+(define_peephole2\n+  [(set (reg:DI ARCV2_ACC)\n+\t(plus:DI\n+\t (mult:DI (zero_extend:DI (match_operand:SI 0 \"register_operand\" \"\"))\n+\t\t  (zero_extend:DI (match_operand:SI 1 \"extend_operand\" \"\")))\n+\t (reg:DI ARCV2_ACC)))\n+   (set (match_operand:SI 2 \"register_operand\" \"\")\n+\t(match_operand:SI 3 \"accl_operand\" \"\"))]\n+ \"TARGET_PLUS_DMPY\"\n+ [(const_int 0)]\n+ {\n+  emit_insn (gen_macu_r (operands[2], operands[0], operands[1]));\n+  DONE;\n+ })\n+\n+(define_insn \"macu_r\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+\t(truncate:SI\n+\t (plus:DI\n+\t  (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"%r,r\"))\n+\t\t   (zero_extend:DI (match_operand:SI 2 \"extend_operand\" \"rI,i\")))\n+\t  (reg:DI ARCV2_ACC))))\n+   (clobber (reg:DI ARCV2_ACC))]\n+ \"TARGET_PLUS_DMPY\"\n+ \"macu %0,%1,%2\"\n+  [(set_attr \"length\" \"4,8\")\n+   (set_attr \"type\" \"multi\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"cond\" \"nocond\")])\n+\n+(define_insn \"mpyd_arcv2hs\"\n+  [(set (match_operand:DI 0 \"even_register_operand\"\t\t\t\"=Rcr, r\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\"\t \"  0, c\"))\n+\t\t (sign_extend:DI (match_operand:SI 2 \"register_operand\"\t \"  c, c\"))))\n+   (set (reg:DI ARCV2_ACC)\n+\t(mult:DI\n+\t  (sign_extend:DI (match_dup 1))\n+\t  (sign_extend:DI (match_dup 2))))]\n+  \"TARGET_PLUS_MACD\"\n+  \"mpyd%? %0,%1,%2\"\n+  [(set_attr \"length\" \"4,4\")\n+  (set_attr \"iscompact\" \"false\")\n+  (set_attr \"type\" \"multi\")\n+  (set_attr \"predicable\" \"yes,no\")\n+  (set_attr \"cond\" \"canuse,nocond\")])\n+\n+(define_insn \"mpyd_imm_arcv2hs\"\n+  [(set (match_operand:DI 0 \"even_register_operand\"\t\t\t\"=Rcr, r,r,Rcr,\t r\")\n+\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\"\t \"  0, c,0,  0,\t c\"))\n+\t\t (match_operand 2\t\t    \"immediate_operand\"\t \"  L, L,I,Cal,Cal\")))\n+   (set (reg:DI ARCV2_ACC)\n+\t(mult:DI (sign_extend:DI (match_dup 1))\n+\t\t (match_dup 2)))]\n+  \"TARGET_PLUS_MACD\"\n+  \"mpyd%? %0,%1,%2\"\n+  [(set_attr \"length\" \"4,4,4,8,8\")\n+  (set_attr \"iscompact\" \"false\")\n+  (set_attr \"type\" \"multi\")\n+  (set_attr \"predicable\" \"yes,no,no,yes,no\")\n+  (set_attr \"cond\" \"canuse,nocond,nocond,canuse_limm,nocond\")])\n+\n+(define_insn \"mpydu_arcv2hs\"\n+  [(set (match_operand:DI 0 \"even_register_operand\"\t\t\t\"=Rcr, r\")\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\"\t \"  0, c\"))\n+\t\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"   c, c\"))))\n+   (set (reg:DI ARCV2_ACC)\n+\t(mult:DI (zero_extend:DI (match_dup 1))\n+\t\t (zero_extend:DI (match_dup 2))))]\n+  \"TARGET_PLUS_MACD\"\n+  \"mpydu%? %0,%1,%2\"\n+  [(set_attr \"length\" \"4,4\")\n+  (set_attr \"iscompact\" \"false\")\n+  (set_attr \"type\" \"multi\")\n+  (set_attr \"predicable\" \"yes,no\")\n+  (set_attr \"cond\" \"canuse,nocond\")])\n+\n+(define_insn \"mpydu_imm_arcv2hs\"\n+  [(set (match_operand:DI 0 \"even_register_operand\"\t\t\t\"=Rcr, r,r,Rcr,\t r\")\n+\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\"\t \"  0, c,0,  0,\t c\"))\n+\t\t (match_operand 2\t\t    \"immediate_operand\"\t \"  L, L,I,Cal,Cal\")))\n+   (set (reg:DI ARCV2_ACC)\n+\t(mult:DI (zero_extend:DI (match_dup 1))\n+\t\t (match_dup 2)))]\n+  \"TARGET_PLUS_MACD\"\n+  \"mpydu%? %0,%1,%2\"\n+  [(set_attr \"length\" \"4,4,4,8,8\")\n+  (set_attr \"iscompact\" \"false\")\n+  (set_attr \"type\" \"multi\")\n+  (set_attr \"predicable\" \"yes,no,no,yes,no\")\n+  (set_attr \"cond\" \"canuse,nocond,nocond,canuse_limm,nocond\")])\n+\n ;; include the arc-FPX instructions\n (include \"fpx.md\")\n "}, {"sha": "7ddec9149d1340d3b70d89fe9e686c27dfd8e7c4", "filename": "gcc/config/arc/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79557baea826fb4493037e6ebbbb65ca0d359d9c/gcc%2Fconfig%2Farc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79557baea826fb4493037e6ebbbb65ca0d359d9c/gcc%2Fconfig%2Farc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fpredicates.md?ref=79557baea826fb4493037e6ebbbb65ca0d359d9c", "patch": "@@ -697,6 +697,11 @@\n   (and (match_code \"reg\")\n        (match_test \"REGNO (op) == (TARGET_BIG_ENDIAN ? 58 : 59)\")))\n \n+(define_predicate \"accl_operand\"\n+  (and (match_code \"reg\")\n+       (match_test \"REGNO (op) == (TARGET_BIG_ENDIAN ? 59 : 58)\")\n+       (match_test \"TARGET_V2\")))\n+\n ; Unfortunately, we can not allow a const_int_operand before reload, because\n ; reload needs a non-void mode to guide it how to reload the inside of a\n ; {sign_}extend."}, {"sha": "1ec70b920d33f9ae9d2be81ba652fdab30d95c89", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79557baea826fb4493037e6ebbbb65ca0d359d9c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79557baea826fb4493037e6ebbbb65ca0d359d9c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79557baea826fb4493037e6ebbbb65ca0d359d9c", "patch": "@@ -1,3 +1,9 @@\n+2017-05-09  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/tmac-1.c: New file.\n+\t* gcc.target/arc/tmac-2.c: Likewise.\n+\t* gcc.target/arc/tmac.h: Likewise.\n+\n 2017-05-09  Claudiu Zissulescu  <claziss@synopsys.com>\n \t    Andrew Burgess <andrew.burgess@embecosm.com>\n "}, {"sha": "e59df5f6b592a7b72849f704f5d1dacfec8d0595", "filename": "gcc/testsuite/gcc.target/arc/tmac-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79557baea826fb4493037e6ebbbb65ca0d359d9c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftmac-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79557baea826fb4493037e6ebbbb65ca0d359d9c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftmac-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftmac-1.c?ref=79557baea826fb4493037e6ebbbb65ca0d359d9c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-skip-if \"\" { ! { clmcpu } } } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=archs -mmpy-option=8\" } */\n+\n+/* Test MAC operation for MPY_OPTION = 8.  */\n+#include \"tmac.h\"\n+\n+/* { dg-final { scan-assembler \"macd \" } } */\n+/* { dg-final { scan-assembler \"macdu\" } } */\n+/* { dg-final { scan-assembler \"mpyd \" } } */\n+/* { dg-final { scan-assembler \"mpydu\" } } */\n+"}, {"sha": "f0136bac3e6e1bb0efa8f73bd2e1b5511885a584", "filename": "gcc/testsuite/gcc.target/arc/tmac-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79557baea826fb4493037e6ebbbb65ca0d359d9c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftmac-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79557baea826fb4493037e6ebbbb65ca0d359d9c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftmac-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftmac-2.c?ref=79557baea826fb4493037e6ebbbb65ca0d359d9c", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-skip-if \"\" { ! { clmcpu } } } */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mcpu=archs -mmpy-option=7\" } */\n+\n+/* Test MAC operation for MPY_OPTION = 7.  */\n+#include \"tmac.h\"\n+\n+/* { dg-final { scan-assembler \"mac \" } } */\n+/* { dg-final { scan-assembler \"macu\" } } */\n+/* { dg-final { scan-assembler \"mpym \" } } */\n+/* { dg-final { scan-assembler \"mpymu\" } } */"}, {"sha": "86471e837964388563cd78f80d28e6b4a0feba07", "filename": "gcc/testsuite/gcc.target/arc/tmac.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79557baea826fb4493037e6ebbbb65ca0d359d9c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftmac.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79557baea826fb4493037e6ebbbb65ca0d359d9c/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftmac.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Ftmac.h?ref=79557baea826fb4493037e6ebbbb65ca0d359d9c", "patch": "@@ -0,0 +1,24 @@\n+/* Test MAC operations.  */\n+\n+long long foo (long long a, int b, int c)\n+{\n+  a += (long long )c * (long long )b;\n+  return a;\n+}\n+\n+long long foo1 (int b, int c)\n+{\n+  return (long long)c * (long long) b;\n+}\n+\n+long long foo3 (long long a, unsigned int b, unsigned int c)\n+{\n+  a += (unsigned long long )c * (unsigned long long )b;\n+  return a;\n+}\n+\n+long long foo4 (unsigned int b, unsigned int c)\n+{\n+  return (unsigned long long)c * (unsigned long long) b;\n+}\n+"}]}