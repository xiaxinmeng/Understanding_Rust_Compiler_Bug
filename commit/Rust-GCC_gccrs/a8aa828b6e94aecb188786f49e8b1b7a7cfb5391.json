{"sha": "a8aa828b6e94aecb188786f49e8b1b7a7cfb5391", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThhYTgyOGI2ZTk0YWVjYjE4ODc4NmY0OWU4YjFiN2E3Y2ZiNTM5MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-05-22T07:44:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-05-22T07:44:24Z"}, "message": "re PR tree-optimization/90450 (Hash function in gather_mem_refs_stmt does not match with mem_ref_hasher::equal)\n\n2019-05-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/90450\n\t* tree-ssa-loop-im.c (struct im_mem_ref): Add ref_decomposed.\n\t(mem_ref_hasher::equal): Check it.\n\t(mem_ref_alloc): Initialize it.\n\t(gather_mem_refs_stmt): Set it.\n\nFrom-SVN: r271503", "tree": {"sha": "b68c75f88f062d7110bdbfacbe02e98d55fd897b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b68c75f88f062d7110bdbfacbe02e98d55fd897b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8aa828b6e94aecb188786f49e8b1b7a7cfb5391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8aa828b6e94aecb188786f49e8b1b7a7cfb5391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8aa828b6e94aecb188786f49e8b1b7a7cfb5391", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8aa828b6e94aecb188786f49e8b1b7a7cfb5391/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e2c037d24c51e0333b1fad90c61d5526a963446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e2c037d24c51e0333b1fad90c61d5526a963446", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e2c037d24c51e0333b1fad90c61d5526a963446"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "ff5ffdd2f7625074b068d786015afb319cc06ab9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8aa828b6e94aecb188786f49e8b1b7a7cfb5391/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8aa828b6e94aecb188786f49e8b1b7a7cfb5391/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8aa828b6e94aecb188786f49e8b1b7a7cfb5391", "patch": "@@ -1,3 +1,11 @@\n+2019-05-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/90450\n+\t* tree-ssa-loop-im.c (struct im_mem_ref): Add ref_decomposed.\n+\t(mem_ref_hasher::equal): Check it.\n+\t(mem_ref_alloc): Initialize it.\n+\t(gather_mem_refs_stmt): Set it.\n+\n 2019-05-22  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-fold.c (arith_code_with_undefined_signed_overflow):"}, {"sha": "2064c2900fb79d7bc077f1fb837fa84562c9008c", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8aa828b6e94aecb188786f49e8b1b7a7cfb5391/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8aa828b6e94aecb188786f49e8b1b7a7cfb5391/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=a8aa828b6e94aecb188786f49e8b1b7a7cfb5391", "patch": "@@ -115,9 +115,10 @@ struct mem_ref_loc\n \n struct im_mem_ref\n {\n-  unsigned id : 31;\t\t/* ID assigned to the memory reference\n+  unsigned id : 30;\t\t/* ID assigned to the memory reference\n \t\t\t\t   (its index in memory_accesses.refs_list)  */\n   unsigned ref_canonical : 1;   /* Whether mem.ref was canonicalized.  */\n+  unsigned ref_decomposed : 1;  /* Whether the ref was hashed from mem.  */\n   hashval_t hash;\t\t/* Its hash value.  */\n \n   /* The memory access itself and associated caching of alias-oracle\n@@ -173,7 +174,8 @@ inline bool\n mem_ref_hasher::equal (const im_mem_ref *mem1, const ao_ref *obj2)\n {\n   if (obj2->max_size_known_p ())\n-    return (operand_equal_p (mem1->mem.base, obj2->base, 0)\n+    return (mem1->ref_decomposed\n+\t    && operand_equal_p (mem1->mem.base, obj2->base, 0)\n \t    && known_eq (mem1->mem.offset, obj2->offset)\n \t    && known_eq (mem1->mem.size, obj2->size)\n \t    && known_eq (mem1->mem.max_size, obj2->max_size)\n@@ -1389,6 +1391,7 @@ mem_ref_alloc (ao_ref *mem, unsigned hash, unsigned id)\n     ao_ref_init (&ref->mem, error_mark_node);\n   ref->id = id;\n   ref->ref_canonical = false;\n+  ref->ref_decomposed = false;\n   ref->hash = hash;\n   ref->stored = NULL;\n   bitmap_initialize (&ref->indep_loop, &lim_bitmap_obstack);\n@@ -1476,6 +1479,7 @@ gather_mem_refs_stmt (struct loop *loop, gimple *stmt)\n       HOST_WIDE_INT offset, size, max_size;\n       poly_int64 saved_maxsize = aor.max_size, mem_off;\n       tree mem_base;\n+      bool ref_decomposed;\n       if (aor.max_size_known_p ()\n \t  && aor.offset.is_constant (&offset)\n \t  && aor.size.is_constant (&size)\n@@ -1489,12 +1493,14 @@ gather_mem_refs_stmt (struct loop *loop, gimple *stmt)\n \t\t       aor.size)\n \t  && (mem_base = get_addr_base_and_unit_offset (aor.ref, &mem_off)))\n \t{\n+\t  ref_decomposed = true;\n \t  hash = iterative_hash_expr (ao_ref_base (&aor), 0);\n \t  hash = iterative_hash_host_wide_int (offset, hash);\n \t  hash = iterative_hash_host_wide_int (size, hash);\n \t}\n       else\n \t{\n+\t  ref_decomposed = false;\n \t  hash = iterative_hash_expr (aor.ref, 0);\n \t  aor.max_size = -1;\n \t}\n@@ -1543,6 +1549,7 @@ gather_mem_refs_stmt (struct loop *loop, gimple *stmt)\n \t{\n \t  id = memory_accesses.refs_list.length ();\n \t  ref = mem_ref_alloc (&aor, hash, id);\n+\t  ref->ref_decomposed = ref_decomposed;\n \t  memory_accesses.refs_list.safe_push (ref);\n \t  *slot = ref;\n "}]}