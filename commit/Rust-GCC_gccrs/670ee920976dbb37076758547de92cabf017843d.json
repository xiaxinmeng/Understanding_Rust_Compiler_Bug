{"sha": "670ee920976dbb37076758547de92cabf017843d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcwZWU5MjA5NzZkYmIzNzA3Njc1ODU0N2RlOTJjYWJmMDE3ODQzZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-03-20T14:58:42Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-03-20T14:58:42Z"}, "message": "Major cutover to using system.h:\n\n        * Makefile.in (alias.o, bitmap.o, c-aux-info.o, c-common.o,\n        c-decl.o, c-iterate.o, c-lang.o, c-lex.o, c-pragma.o, c-typeck.o,\n        caller-save.o, calls.o, collect2.o, combine.o, cse.o, dbxout.o,\n        dwarf2out.o, dwarfout.o, emit-rtl.o, except.o, explow.o, expmed.o,\n        expr.o, final.o, flow.o, function.o, getpwd.o, global.o,\n        integrate.o, jump.o, local-alloc.o, loop.o, optabs.o, pexecute.o,\n        prefix.o, print-rtl.o, print-tree.o, profile.o, real.o, recog.o,\n        reg-stack.o, regclass.o, regmove.o, reload.o, reload1.o, reorg.o,\n        rtl.o, rtlanal.o, sdbout.o, stmt.o, stor-layout.o, stupid.o,\n        tlink.o, toplev.o, tree.o, unroll.o, varasm.o, xcoffout.o): Depend\n        on system.h.\n        * alias.c, bitmap.c, c-aux-info.c, c-common.c, c-decl.c,\n        c-iterate.c, c-lang.c, c-lex.c, c-pragma.c, c-typeck.c,\n        caller-save.c, calls.c, collect2.c, combine.c, cse.c, dbxout.c,\n        dwarf2out.c, dwarfout.c, emit-rtl.c, except.c, explow.c, expmed.c,\n        expr.c, final.c, flow.c, function.c, gcc.c, getpwd.c, global.c,\n        integrate.c, jump.c, local-alloc.c, loop.c, optabs.c, pexecute.c,\n        prefix.c, print-rtl.c, print-tree.c, profile.c, real.c, recog.c,\n        reg-stack.c, regclass.c, regmove.c, reload.c, reload1.c, reorg.c,\n        rtl.c, rtlanal.c, sched.c, sdbout.c, stmt.c, stor-layout.c,\n        stupid.c, tlink.c, toplev.c, tree.c, unroll.c, varasm.c,\n        xcoffout.c: Include system.h.  Organize include ordering so\n        that stdarg/varargs comes before other system headers.  Remove\n        spurious casts of functions assured of a prototype in system.h.\n\nFrom-SVN: r18726", "tree": {"sha": "d54887798fa85070a1ff0f7331e43ef538f2f78e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d54887798fa85070a1ff0f7331e43ef538f2f78e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/670ee920976dbb37076758547de92cabf017843d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/670ee920976dbb37076758547de92cabf017843d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/670ee920976dbb37076758547de92cabf017843d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/670ee920976dbb37076758547de92cabf017843d/comments", "author": null, "committer": null, "parents": [{"sha": "1107c4b3ddb1932630ca4372701cf246192cf82e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1107c4b3ddb1932630ca4372701cf246192cf82e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1107c4b3ddb1932630ca4372701cf246192cf82e"}], "stats": {"total": 753, "additions": 228, "deletions": 525}, "files": [{"sha": "a05afa8781c1c152829ed29976f15f553e4acc46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -1,3 +1,31 @@\n+Fri Mar 20 17:36:23 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (alias.o, bitmap.o, c-aux-info.o, c-common.o,\n+\tc-decl.o, c-iterate.o, c-lang.o, c-lex.o, c-pragma.o, c-typeck.o,\n+\tcaller-save.o, calls.o, collect2.o, combine.o, cse.o, dbxout.o,\n+\tdwarf2out.o, dwarfout.o, emit-rtl.o, except.o, explow.o, expmed.o,\n+\texpr.o, final.o, flow.o, function.o, getpwd.o, global.o,\n+\tintegrate.o, jump.o, local-alloc.o, loop.o, optabs.o, pexecute.o,\n+\tprefix.o, print-rtl.o, print-tree.o, profile.o, real.o, recog.o,\n+\treg-stack.o, regclass.o, regmove.o, reload.o, reload1.o, reorg.o,\n+\trtl.o, rtlanal.o, sdbout.o, stmt.o, stor-layout.o, stupid.o,\n+\ttlink.o, toplev.o, tree.o, unroll.o, varasm.o, xcoffout.o): Depend\n+\ton system.h.\n+\n+\t* alias.c, bitmap.c, c-aux-info.c, c-common.c, c-decl.c,\n+\tc-iterate.c, c-lang.c, c-lex.c, c-pragma.c, c-typeck.c,\n+\tcaller-save.c, calls.c, collect2.c, combine.c, cse.c, dbxout.c,\n+\tdwarf2out.c, dwarfout.c, emit-rtl.c, except.c, explow.c, expmed.c,\n+\texpr.c, final.c, flow.c, function.c, gcc.c, getpwd.c, global.c,\n+\tintegrate.c, jump.c, local-alloc.c, loop.c, optabs.c, pexecute.c,\n+\tprefix.c, print-rtl.c, print-tree.c, profile.c, real.c, recog.c,\n+\treg-stack.c, regclass.c, regmove.c, reload.c, reload1.c, reorg.c,\n+\trtl.c, rtlanal.c, sched.c, sdbout.c, stmt.c, stor-layout.c,\n+\tstupid.c, tlink.c, toplev.c, tree.c, unroll.c, varasm.c,\n+\txcoffout.c: Include system.h.  Organize include ordering so\n+\tthat stdarg/varargs comes before other system headers.  Remove\n+\tspurious casts of functions assured of a prototype in system.h.\n+\n Fri Mar 20 11:19:40 1998  Stan Cox  <scox@equinox.cygnus.com>\n \n \t* reg-stack.c (pop_stack): Define. Pops any register on the"}, {"sha": "b5e9c3f58cf76d57f773c23cdef69c914e946d11", "filename": "gcc/Makefile.in", "status": "modified", "additions": 92, "deletions": 86, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -1238,16 +1238,19 @@ $(srcdir)/c-gperf.h: c-parse.gperf\n \t   $(srcdir)/c-parse.gperf >tmp-gperf.h\n \t $(srcdir)/move-if-change tmp-gperf.h $(srcdir)/c-gperf.h\n \n-c-decl.o : c-decl.c $(CONFIG_H) $(TREE_H) c-tree.h c-lex.h flags.h output.h\n-c-typeck.o : c-typeck.c $(CONFIG_H) $(TREE_H) c-tree.h flags.h output.h\n-c-lang.o : c-lang.c $(CONFIG_H) $(TREE_H)\n-c-lex.o : c-lex.c $(CONFIG_H) $(TREE_H) $(RTL_H) c-lex.h c-tree.h \\\n+c-decl.o : c-decl.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h flags.h \\\n+    output.h\n+c-typeck.o : c-typeck.c $(CONFIG_H) system.h $(TREE_H) c-tree.h flags.h \\\n+    output.h\n+c-lang.o : c-lang.c $(CONFIG_H) system.h $(TREE_H)\n+c-lex.o : c-lex.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) c-lex.h c-tree.h \\\n     $(srcdir)/c-parse.h input.h flags.h $(srcdir)/c-gperf.h c-pragma.h\n-c-aux-info.o : c-aux-info.c  $(CONFIG_H) $(TREE_H) c-tree.h flags.h\n-c-convert.o : c-convert.c $(CONFIG_H) $(TREE_H) flags.h\n-c-pragma.o: c-pragma.c $(CONFIG_H) $(TREE_H) except.h function.h \\\n+c-aux-info.o : c-aux-info.c  $(CONFIG_H) system.h $(TREE_H) c-tree.h flags.h\n+c-convert.o : c-convert.c $(CONFIG_H) system.h $(TREE_H) flags.h\n+c-pragma.o: c-pragma.c $(CONFIG_H) system.h $(TREE_H) except.h function.h \\\n     defaults.h c-pragma.h\n-c-iterate.o: c-iterate.c $(CONFIG_H) $(TREE_H) $(RTL_H) c-tree.h flags.h\n+c-iterate.o: c-iterate.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) c-tree.h \\\n+    flags.h\n \n # To make a configuration always use collect2, set USE_COLLECT2 to ld.\n ld: collect2\n@@ -1261,12 +1264,13 @@ collect2: collect2.o tlink.o hash.o cplus-dem.o underscore.o version.o \\\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ collect2.o tlink.o hash.o \\\n \t  cplus-dem.o underscore.o version.o choose-temp.o $(LIBS)\n \n-collect2.o : collect2.c $(CONFIG_H) gansidecl.h gstab.h obstack.h $(DEMANGLE_H)\n+collect2.o : collect2.c $(CONFIG_H) system.h gansidecl.h gstab.h obstack.h \\\n+\t$(DEMANGLE_H)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES)  \\\n \t-DTARGET_MACHINE=\\\"$(target_alias)\\\" $(MAYBE_USE_COLLECT2) \\\n \t-c `echo $(srcdir)/collect2.c | sed 's,^\\./,,'`\n \n-tlink.o: tlink.c $(DEMANGLE_H) hash.h $(CONFIG_H)\n+tlink.o: tlink.c $(DEMANGLE_H) hash.h $(CONFIG_H) system.h\n hash.o: hash.c hash.h\n cplus-dem.o: cplus-dem.c $(DEMANGLE_H)\n \n@@ -1287,7 +1291,7 @@ stamp-under: $(GCC_PASSES)\n \n # A file used by all variants of C.\n \n-c-common.o : c-common.c $(CONFIG_H) $(TREE_H) c-tree.h c-lex.h flags.h\n+c-common.o : c-common.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h flags.h\n \n # Language-independent files.\n \n@@ -1297,7 +1301,7 @@ DRIVER_DEFINES = \\\n   -DDEFAULT_TARGET_VERSION=\\\"$(version)\\\" \\\n   -DDEFAULT_TARGET_MACHINE=\\\"$(target_alias)\\\" \\\n   -DTOOLDIR_BASE_PREFIX=\\\"$(exec_prefix)/\\\"\n-gcc.o: gcc.c $(CONFIG_H) gansidecl.h system.h multilib.h Makefile \\\n+gcc.o: gcc.c $(CONFIG_H) system.h gansidecl.h multilib.h Makefile \\\n \t$(lang_specs_files)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n   $(DRIVER_DEFINES) \\\n@@ -1308,124 +1312,126 @@ dumpvers: dumpvers.c\n version.o: version.c\n obstack.o: obstack.c $(CONFIG_H)\n choose-temp.o: choose-temp.c $(CONFIG_H) gansidecl.h\n-pexecute.o: pexecute.c $(CONFIG_H) gansidecl.h\n-prefix.o: prefix.c $(CONFIG_H) gansidecl.h Makefile\n+pexecute.o: pexecute.c $(CONFIG_H) system.h gansidecl.h\n+prefix.o: prefix.c $(CONFIG_H) system.h gansidecl.h Makefile\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t-DPREFIX=\\\"$(prefix)\\\" \\\n \t  -c `echo $(srcdir)/prefix.c | sed 's,^\\./,,'`\n \n convert.o: convert.c $(CONFIG_H) $(TREE_H) flags.h convert.h\n \n-tree.o : tree.c $(CONFIG_H) $(TREE_H) flags.h function.h\n-print-tree.o : print-tree.c $(CONFIG_H) $(TREE_H)\n-stor-layout.o : stor-layout.c $(CONFIG_H) $(TREE_H) flags.h function.h\n-fold-const.o : fold-const.c $(CONFIG_H) $(TREE_H) flags.h system.h\n-toplev.o : toplev.c $(CONFIG_H) $(TREE_H) $(RTL_H) \\\n+tree.o : tree.c $(CONFIG_H) system.h $(TREE_H) flags.h function.h\n+print-tree.o : print-tree.c $(CONFIG_H) system.h $(TREE_H)\n+stor-layout.o : stor-layout.c $(CONFIG_H) system.h $(TREE_H) flags.h function.h\n+fold-const.o : fold-const.c $(CONFIG_H) system.h $(TREE_H) flags.h\n+toplev.o : toplev.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) \\\n    flags.h input.h insn-attr.h xcoffout.h defaults.h output.h \\\n    $(lang_options_files)\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(MAYBE_USE_COLLECT2) \\\n \t  -DTARGET_NAME=\\\"$(target_alias)\\\" \\\n \t  -c `echo $(srcdir)/toplev.c | sed 's,^\\./,,'`\n \n-rtl.o : rtl.c $(CONFIG_H) $(RTL_H)\n+rtl.o : rtl.c $(CONFIG_H) system.h $(RTL_H)\n \n-print-rtl.o : print-rtl.c $(CONFIG_H) $(RTL_H)\n-rtlanal.o : rtlanal.c $(CONFIG_H) $(RTL_H)\n+print-rtl.o : print-rtl.c $(CONFIG_H) system.h $(RTL_H)\n+rtlanal.o : rtlanal.c $(CONFIG_H) system.h $(RTL_H)\n \n-varasm.o : varasm.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h function.h \\\n-   defaults.h insn-codes.h expr.h hard-reg-set.h regs.h xcoffout.h \\\n-   output.h c-pragma.h\n-function.o : function.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \\\n-   insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h insn-config.h \\\n-   $(RECOG_H) output.h\n-stmt.o : stmt.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \\\n+varasm.o : varasm.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) flags.h \\\n+   function.h defaults.h insn-codes.h expr.h hard-reg-set.h regs.h \\\n+   xcoffout.h output.h c-pragma.h\n+function.o : function.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n+   function.h insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h \\\n+   insn-config.h $(RECOG_H) output.h\n+stmt.o : stmt.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h function.h  \\\n    insn-flags.h insn-config.h insn-codes.h hard-reg-set.h expr.h except.h \\\n    loop.h $(RECOG_H)  \n-except.o : except.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \\\n-   insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h insn-config.h \\\n-   $(RECOG_H) output.h except.h\n-expr.o : expr.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h regs.h \\\n-   insn-flags.h insn-codes.h expr.h insn-config.h $(RECOG_H) output.h \\\n+except.o : except.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n+   function.h insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h \\\n+   insn-config.h $(RECOG_H) output.h except.h\n+expr.o : expr.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h function.h \\\n+   regs.h insn-flags.h insn-codes.h expr.h insn-config.h $(RECOG_H) output.h \\\n    typeclass.h hard-reg-set.h\n-calls.o : calls.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h expr.h insn-codes.h \\\n-   insn-flags.h regs.h\n-expmed.o : expmed.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h  \\\n+calls.o : calls.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h expr.h \\\n+   insn-codes.h insn-flags.h regs.h\n+expmed.o : expmed.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h  \\\n    insn-flags.h insn-config.h insn-codes.h expr.h $(RECOG_H) real.h\n-explow.o : explow.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h hard-reg-set.h \\\n-   insn-config.h expr.h $(RECOG_H) insn-flags.h insn-codes.h\n-optabs.o : optabs.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h  \\\n+explow.o : explow.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n+   hard-reg-set.h insn-config.h expr.h $(RECOG_H) insn-flags.h insn-codes.h\n+optabs.o : optabs.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h  \\\n    insn-flags.h insn-config.h insn-codes.h expr.h $(RECOG_H) reload.h\n-dbxout.o : dbxout.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h regs.h \\\n+dbxout.o : dbxout.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) flags.h regs.h \\\n    insn-config.h reload.h gstab.h xcoffout.h defaults.h output.h\n-sdbout.o : sdbout.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h except.h \\\n+sdbout.o : sdbout.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) flags.h except.h \\\n    function.h expr.h output.h hard-reg-set.h regs.h defaults.h real.h \\\n    insn-config.h obstack.h xcoffout.h c-pragma.h\n-dwarfout.o : dwarfout.c $(CONFIG_H) $(TREE_H) $(RTL_H) dwarf.h flags.h \\\n-   insn-config.h reload.h output.h defaults.h\n-dwarf2out.o : dwarf2out.c $(CONFIG_H) $(TREE_H) $(RTL_H) dwarf2.h flags.h \\\n-   insn-config.h insn-codes.h reload.h output.h defaults.h hard-reg-set.h \\\n-   regs.h expr.h\n-xcoffout.o : xcoffout.c $(CONFIG_H) $(TREE_H) $(RTL_H) xcoffout.h flags.h\n-emit-rtl.o : emit-rtl.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h except.h \\\n-   function.h regs.h insn-config.h insn-codes.h $(RECOG_H) real.h expr.h \\\n-   obstack.h hard-reg-set.h\n-real.o : real.c $(CONFIG_H) $(TREE_H)\n-getpwd.o : getpwd.c $(CONFIG_H)\n-\n-integrate.o : integrate.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h integrate.h \\\n-   insn-flags.h insn-config.h insn-codes.h expr.h real.h regs.h function.h \\\n-   output.h $(RECOG_H) except.h\n-\n-jump.o : jump.c $(CONFIG_H) $(RTL_H) flags.h hard-reg-set.h regs.h \\\n+dwarfout.o : dwarfout.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) dwarf.h \\\n+   flags.h insn-config.h reload.h output.h defaults.h\n+dwarf2out.o : dwarf2out.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) dwarf2.h \\\n+   flags.h insn-config.h insn-codes.h reload.h output.h defaults.h \\\n+   hard-reg-set.h regs.h expr.h\n+xcoffout.o : xcoffout.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) xcoffout.h \\\n+   flags.h\n+emit-rtl.o : emit-rtl.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n+   except.h function.h regs.h insn-config.h insn-codes.h $(RECOG_H) real.h \\\n+   expr.h obstack.h hard-reg-set.h\n+real.o : real.c $(CONFIG_H) system.h $(TREE_H)\n+getpwd.o : getpwd.c $(CONFIG_H) system.h\n+\n+integrate.o : integrate.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n+   integrate.h insn-flags.h insn-config.h insn-codes.h expr.h real.h regs.h \\\n+   function.h output.h $(RECOG_H) except.h\n+\n+jump.o : jump.c $(CONFIG_H) system.h $(RTL_H) flags.h hard-reg-set.h regs.h \\\n    insn-config.h insn-codes.h insn-flags.h $(RECOG_H) expr.h real.h except.h\n-stupid.o : stupid.c $(CONFIG_H) $(RTL_H) regs.h hard-reg-set.h flags.h\n+stupid.o : stupid.c $(CONFIG_H) system.h $(RTL_H) regs.h hard-reg-set.h flags.h\n \n-cse.o : cse.c $(CONFIG_H) $(RTL_H) regs.h hard-reg-set.h flags.h real.h \\\n-   insn-config.h insn-codes.h $(RECOG_H) expr.h\n-profile.o : profile.c $(CONFIG_H) $(RTL_H) flags.h insn-flags.h gcov-io.h \\\n-   $(TREE_H) output.h regs.h\n-loop.o : loop.c $(CONFIG_H) $(RTL_H) flags.h loop.h insn-config.h \\\n+cse.o : cse.c $(CONFIG_H) system.h $(RTL_H) regs.h hard-reg-set.h flags.h \\\n+   real.h insn-config.h insn-codes.h $(RECOG_H) expr.h\n+profile.o : profile.c $(CONFIG_H) system.h $(RTL_H) flags.h insn-flags.h \\\n+   gcov-io.h $(TREE_H) output.h regs.h\n+loop.o : loop.c $(CONFIG_H) system.h $(RTL_H) flags.h loop.h insn-config.h \\\n    insn-flags.h insn-codes.h regs.h hard-reg-set.h $(RECOG_H) expr.h real.h\n-unroll.o : unroll.c $(CONFIG_H) $(RTL_H) insn-config.h insn-codes.h \\\n+unroll.o : unroll.c $(CONFIG_H) system.h $(RTL_H) insn-config.h insn-codes.h \\\n    integrate.h regs.h $(RECOG_H) flags.h expr.h loop.h\n-flow.o : flow.c $(CONFIG_H) $(RTL_H) flags.h insn-config.h \\\n+flow.o : flow.c $(CONFIG_H) system.h $(RTL_H) flags.h insn-config.h \\\n    $(BASIC_BLOCK_H) regs.h hard-reg-set.h output.h\n-combine.o : combine.c $(CONFIG_H) $(RTL_H) flags.h  \\\n+combine.o : combine.c $(CONFIG_H) system.h $(RTL_H) flags.h  \\\n    insn-config.h insn-flags.h insn-codes.h insn-attr.h regs.h expr.h \\\n    $(BASIC_BLOCK_H) $(RECOG_H) real.h hard-reg-set.h\n-regclass.o : regclass.c $(CONFIG_H) $(RTL_H) hard-reg-set.h flags.h \\\n+regclass.o : regclass.c $(CONFIG_H) system.h $(RTL_H) hard-reg-set.h flags.h \\\n    $(BASIC_BLOCK_H) regs.h insn-config.h $(RECOG_H) reload.h real.h\n-local-alloc.o : local-alloc.c $(CONFIG_H) $(RTL_H) flags.h $(BASIC_BLOCK_H) \\\n-   regs.h hard-reg-set.h insn-config.h $(RECOG_H) output.h\n-bitmap.o : bitmap.c $(CONFIG_H) $(RTL_H) flags.h $(BASIC_BLOCK_H) regs.h\n-global.o : global.c $(CONFIG_H) $(RTL_H) flags.h  \\\n+local-alloc.o : local-alloc.c $(CONFIG_H) system.h $(RTL_H) flags.h \\\n+   $(BASIC_BLOCK_H) regs.h hard-reg-set.h insn-config.h $(RECOG_H) output.h\n+bitmap.o : bitmap.c $(CONFIG_H) system.h $(RTL_H) flags.h $(BASIC_BLOCK_H) \\\n+   regs.h\n+global.o : global.c $(CONFIG_H) system.h $(RTL_H) flags.h  \\\n    $(BASIC_BLOCK_H) regs.h hard-reg-set.h insn-config.h output.h\n \n-reload.o : reload.c $(CONFIG_H) $(RTL_H) flags.h output.h expr.h\\\n+reload.o : reload.c $(CONFIG_H) system.h $(RTL_H) flags.h output.h expr.h\\\n    reload.h $(RECOG_H) hard-reg-set.h insn-config.h insn-codes.h regs.h real.h\n-reload1.o : reload1.c $(CONFIG_H) $(RTL_H) real.h flags.h expr.h \\\n+reload1.o : reload1.c $(CONFIG_H) system.h $(RTL_H) real.h flags.h expr.h \\\n    reload.h regs.h hard-reg-set.h insn-config.h insn-flags.h insn-codes.h \\\n    $(BASIC_BLOCK_H) $(RECOG_H) output.h\n-caller-save.o : caller-save.c $(CONFIG_H) $(RTL_H) flags.h \\\n+caller-save.o : caller-save.c $(CONFIG_H) system.h $(RTL_H) flags.h \\\n    regs.h hard-reg-set.h insn-codes.h insn-config.h $(BASIC_BLOCK_H) $(RECOG_H) \\\n    reload.h expr.h\n-reorg.o : reorg.c $(CONFIG_H) $(RTL_H) conditions.h hard-reg-set.h \\\n+reorg.o : reorg.c $(CONFIG_H) system.h $(RTL_H) conditions.h hard-reg-set.h \\\n    $(BASIC_BLOCK_H) regs.h insn-config.h insn-codes.h insn-attr.h \\\n    insn-flags.h $(RECOG_H) flags.h output.h expr.h\n-alias.o : alias.c $(CONFIG_H) $(RTL_H) flags.h hard-reg-set.h regs.h \\\n+alias.o : alias.c $(CONFIG_H) system.h $(RTL_H) flags.h hard-reg-set.h regs.h \\\n    insn-codes.h\n-regmove.o : regmove.c $(CONFIG_H) $(RTL_H) insn-config.h insn-codes.h \\\n-   recog.h output.h reload.h regs.h hard-reg-set.h flags.h expr.h insn-flags.h\n-$(SCHED_PREFIX)sched.o : $(SCHED_PREFIX)sched.c $(CONFIG_H) $(RTL_H) \\\n-\t$(BASIC_BLOCK_H) regs.h hard-reg-set.h flags.h insn-config.h \\\n-\tinsn-attr.h system.h\n-final.o : final.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h regs.h \\\n+regmove.o : regmove.c $(CONFIG_H) system.h $(RTL_H) insn-config.h \\\n+   insn-codes.h recog.h output.h reload.h regs.h hard-reg-set.h flags.h \\\n+   expr.h insn-flags.h\n+$(SCHED_PREFIX)sched.o : $(SCHED_PREFIX)sched.c $(CONFIG_H) system.h $(RTL_H) \\\n+   $(BASIC_BLOCK_H) regs.h hard-reg-set.h flags.h insn-config.h insn-attr.h\n+final.o : final.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h regs.h \\\n    $(RECOG_H) conditions.h insn-config.h insn-attr.h except.h real.h output.h \\\n    hard-reg-set.h insn-flags.h insn-codes.h gstab.h xcoffout.h defaults.h\n-recog.o : recog.c $(CONFIG_H) $(RTL_H)  \\\n+recog.o : recog.c $(CONFIG_H) system.h $(RTL_H)  \\\n    regs.h $(RECOG_H) hard-reg-set.h flags.h insn-config.h insn-attr.h \\\n    insn-flags.h insn-codes.h real.h\n-reg-stack.o : reg-stack.c $(CONFIG_H) $(RTL_H) $(TREE_H) \\\n+reg-stack.o : reg-stack.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) \\\n    regs.h hard-reg-set.h flags.h insn-config.h insn-flags.h\n \n $(out_object_file): $(out_file) $(CONFIG_H) $(TREE_H) \\"}, {"sha": "9f7537d4045080c075312ef68cf94aeba7d9cbde", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -20,16 +20,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-#ifdef HAVE_STRING_H\n-#include <string.h>\n-#else\n-#ifdef HAVE_STRINGS_H\n-#include <strings.h>\n-#endif\n-#endif\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"expr.h\"\n #include \"regs.h\""}, {"sha": "cefbf798283fcd7b95e70330a5151df8754a6a02", "filename": "gcc/bitmap.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -19,21 +19,13 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"flags.h\"\n #include \"obstack.h\"\n #include \"regs.h\"\n #include \"basic-block.h\"\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n-#ifdef NEED_DECLARATION_FREE\n-extern void free PROTO((void *));\n-#endif\n-\n /* Obstack to allocate bitmap elements from.  */\n static struct obstack bitmap_obstack;\n static int bitmap_obstack_init = FALSE;"}, {"sha": "2f2f8c213ba54d74333d65aad917d5063d6e5fb1", "filename": "gcc/c-aux-info.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-aux-info.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -22,14 +22,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n-#ifdef HAVE_STRING_H\n-# include <string.h>\n-#else\n-# ifdef HAVE_STRINGS_H\n-#  include <strings.h>\n-#endif\n-#endif\n+#include \"system.h\"\n #include \"flags.h\"\n #include \"tree.h\"\n #include \"c-tree.h\""}, {"sha": "952306e1a20db7e86de97d430c9c61d262e5541b", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -19,26 +19,12 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"tree.h\"\n #include \"c-lex.h\"\n #include \"c-tree.h\"\n #include \"flags.h\"\n #include \"obstack.h\"\n-#include <ctype.h>\n-\n-#ifdef HAVE_STRING_H\n-#include <string.h>\n-#else\n-#ifdef HAVE_STRINGS_H\n-#include <strings.h>\n-#endif\n-#endif\n-\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n \n #ifndef WCHAR_TYPE_SIZE\n #ifdef INT_TYPE_SIZE"}, {"sha": "bf5d3ac60804da80b4d5bf86ee0ea7a07ff7fe14", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -27,17 +27,13 @@ Boston, MA 02111-1307, USA.  */\n    line numbers.  For example, the CONST_DECLs for enum values.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n #include \"output.h\"\n #include \"c-tree.h\"\n #include \"c-lex.h\"\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n /* In grokdeclarator, distinguish syntactic contexts of declarators.  */\n enum decl_context\n { NORMAL,\t\t\t/* Ordinary declaration */"}, {"sha": "de6fd116873b662e33b392d802aba9f158e96a93", "filename": "gcc/c-iterate.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fc-iterate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fc-iterate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-iterate.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -1,5 +1,5 @@\n /* Build expressions with type checking for C compiler.\n-   Copyright (C) 1987, 88, 89, 92, 93, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92, 93, 96, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -24,7 +24,7 @@ Boston, MA 02111-1307, USA.  */\n    both their declarations and the expansion of statements using them.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"tree.h\"\n #include \"c-tree.h\"\n #include \"flags.h\"\n@@ -255,6 +255,8 @@ collect_iterators (exp, list)\n \t\tbreak;\n \t      case RTL_EXPR:\n \t\treturn list;\n+\t      default:\n+\t\tbreak;\n \t      }\n \t\t\n \t    for (i = 0; i < num_args; i++)"}, {"sha": "4b4a6840e35cf34dde08693ec3ff4ca3d3c7af54", "filename": "gcc/c-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -20,8 +20,8 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n+#include \"system.h\"\n #include \"tree.h\"\n-#include <stdio.h>\n #include \"input.h\"\n \n /* Each of the functions defined here"}, {"sha": "d32f7a833b194133d965e984ce7b1b36a7fd955a", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -19,20 +19,8 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n-\n-#include <stdio.h>\n-#include <errno.h>\n+#include \"system.h\"\n #include <setjmp.h>\n-#if HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-#ifdef HAVE_STRING_H\n-#include <string.h>\n-#else\n-#ifdef HAVE_STRINGS_H\n-#include <strings.h>\n-#endif\n-#endif\n \n #include \"rtl.h\"\n #include \"tree.h\"\n@@ -43,8 +31,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-parse.h\"\n #include \"c-pragma.h\"\n \n-#include <ctype.h>\n-\n /* MULTIBYTE_CHARS support only works for native compilers.\n    ??? Ideally what we want is to model widechar support after\n    the current floating point support.  */\n@@ -53,14 +39,9 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n #ifdef MULTIBYTE_CHARS\n-#include <stdlib.h>\n #include <locale.h>\n #endif\n \n-#ifndef errno\n-extern int errno;\n-#endif\n-\n #if USE_CPPLIB\n #include \"cpplib.h\"\n cpp_reader parse_in;"}, {"sha": "480daca02987d3ce61e5a4b99cda8808cc384067", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -19,7 +19,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"tree.h\"\n #include \"except.h\"\n #include \"function.h\""}, {"sha": "ad2833ec1618fcd4eff5fe64d1802a82995ed273", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -29,36 +29,16 @@ Boston, MA 02111-1307, USA.  */\n    like a strange sort of assignment).  */\n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"tree.h\"\n #include \"c-tree.h\"\n #include \"flags.h\"\n #include \"output.h\"\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n-#ifdef HAVE_STRING_H\n-#include <string.h>\n-#else\n-#ifdef HAVE_STRINGS_H\n-#include <strings.h>\n-#endif\n-#endif\n-\n /* Nonzero if we've already printed a \"missing braces around initializer\"\n    message within this initializer.  */\n static int missing_braces_mentioned;\n \n-#ifdef NEED_DECLARATION_INDEX\n-extern char *index ();\n-#endif\n-\n-#ifdef NEED_DECLARATION_RINDEX\n-extern char *rindex ();\n-#endif\n-\n static tree qualify_type\t\tPROTO((tree, tree));\n static int comp_target_types\t\tPROTO((tree, tree));\n static int function_types_compatible_p\tPROTO((tree, tree));"}, {"sha": "57dfbb8c91ef11854fb4fabf385f736a33a9c9ef", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -19,7 +19,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"insn-config.h\"\n #include \"flags.h\""}, {"sha": "bb9197a5f0e3265c4dc61feaa797fb78ebf4fbcb", "filename": "gcc/calls.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -19,17 +19,17 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n-#include \"rtl.h\"\n-#include \"tree.h\"\n-#include \"flags.h\"\n-#include \"expr.h\"\n-#include \"regs.h\"\n #ifdef __STDC__\n #include <stdarg.h>\n #else\n #include <varargs.h>\n #endif\n+#include \"system.h\"\n+#include \"rtl.h\"\n+#include \"tree.h\"\n+#include \"flags.h\"\n+#include \"expr.h\"\n+#include \"regs.h\"\n #include \"insn-flags.h\"\n \n /* Decide whether a function's arguments should be processed"}, {"sha": "1a26e5bd371479bc1ba4eabf0bf8e7bd173a7101", "filename": "gcc/collect2.c", "status": "modified", "additions": 5, "deletions": 47, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -26,40 +26,16 @@ Boston, MA 02111-1307, USA.  */\n /* Build tables of static constructors and destructors and run ld.  */\n \n #include \"config.h\"\n-#include <sys/types.h>\n-#include <stdio.h>\n-#include <ctype.h>\n-#include <errno.h>\n+#include \"system.h\"\n #include <signal.h>\n-#include <sys/file.h>\n #include <sys/stat.h>\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n-#ifdef HAVE_UNISTD_H\n-#include <unistd.h>\n-#endif\n-\n-#ifdef HAVE_STRING_H\n-#include <string.h>\n-#else\n-#ifdef HAVE_STRINGS_H\n-#include <strings.h>\n-#endif\n-#endif\n-\n #define COLLECT\n \n #include \"demangle.h\"\n #include \"obstack.h\"\n #include \"gansidecl.h\"\n \n-#ifndef errno\n-extern int errno;\n-#endif\n-\n #ifndef HAVE_STRERROR\n extern char *sys_errlist[];\n extern int sys_nerr;\n@@ -75,12 +51,6 @@ char *strerror();\n #define vfork fork\n #endif\n \n-#ifndef R_OK\n-#define R_OK 4\n-#define W_OK 2\n-#define X_OK 1\n-#endif\n-\n #ifndef WIFSIGNALED\n #define WIFSIGNALED(S) (((S) & 0xff) != 0 && ((S) & 0xff) != 0x7f)\n #endif\n@@ -272,7 +242,6 @@ char * temporary_firstobj;\n /* Defined in the automatically-generated underscore.c.  */\n extern int prepends_underscore;\n \n-extern char *getenv ();\n extern char *mktemp ();\n extern FILE *fdopen ();\n \n@@ -337,17 +306,6 @@ static int ignore_library\tPROTO((char *));\n char *xcalloc ();\n char *xmalloc ();\n \n-#ifdef NEED_DECLARATION_INDEX\n-extern char *index ();\n-#endif\n-\n-#ifdef NEED_DECLARATION_RINDEX\n-extern char *rindex ();\n-#endif\n-\n-#ifdef NEED_DECLARATION_FREE\n-extern void free ();\n-#endif\n \f\n #ifdef NO_DUP2\n int\n@@ -1028,8 +986,8 @@ main (argc, argv)\n      and a new one is installed (rare, but we should handle it).\n      ??? Hopefully references to COLLECT_NAME can be removed at some point.  */\n \n-  collect_name = (char *) getenv (\"COLLECT_NAME\");\n-  collect_names = (char *) getenv (\"COLLECT_NAMES\");\n+  collect_name = getenv (\"COLLECT_NAME\");\n+  collect_names = getenv (\"COLLECT_NAMES\");\n \n   p = (char *) xmalloc (strlen (\"COLLECT_NAMES=\")\n \t\t\t+ (collect_name ? strlen (collect_name) + 1 : 0)\n@@ -1055,7 +1013,7 @@ main (argc, argv)\n   sprintf (p, \"COLLECT_NAME=%s\", argv[0]);\n   putenv (p);\n \n-  p = (char *) getenv (\"COLLECT_GCC_OPTIONS\");\n+  p = getenv (\"COLLECT_GCC_OPTIONS\");\n   while (p && *p)\n     {\n       char *q = extract_string (&p);\n@@ -1272,7 +1230,7 @@ main (argc, argv)\n      AIX support needs to know if -shared has been specified before\n      parsing commandline arguments.  */\n \n-  p = (char *) getenv (\"COLLECT_GCC_OPTIONS\");\n+  p = getenv (\"COLLECT_GCC_OPTIONS\");\n   while (p && *p)\n     {\n       char *q = extract_string (&p);"}, {"sha": "8cb32dc67c696cd73e676c5e912d54a76faed50f", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -81,8 +81,8 @@ Boston, MA 02111-1307, USA.  */\n #include <varargs.h>\n #endif\n \n-/* Must precede rtl.h for FFS.  */\n-#include <stdio.h>\n+/* stdio.h must precede rtl.h for FFS.  */\n+#include \"system.h\"\n \n #include \"rtl.h\"\n #include \"flags.h\""}, {"sha": "823c6f0afaca240231e2bdfbaa55d7730b27d87b", "filename": "gcc/cse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -20,8 +20,8 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n-/* Must precede rtl.h for FFS.  */\n-#include <stdio.h>\n+/* stdio.h must precede rtl.h for FFS.  */\n+#include \"system.h\"\n \n #include \"rtl.h\"\n #include \"regs.h\""}, {"sha": "dffbd1924527ad62b251aa26aa3aaecef2031684", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -68,17 +68,7 @@ Boston, MA 02111-1307, USA.  */\n    For more on data type definitions, see `dbxout_type'.  */\n \n #include \"config.h\"\n-\n-#include <stdio.h>\n-#include <errno.h>\n-\n-#ifdef HAVE_STRING_H\n-#include <string.h>\n-#else\n-#ifdef HAVE_STRINGS_H\n-#include <strings.h>\n-#endif\n-#endif\n+#include \"system.h\"\n \n #include \"tree.h\"\n #include \"rtl.h\"\n@@ -89,10 +79,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"defaults.h\"\n #include \"output.h\" /* ASM_OUTPUT_SOURCE_LINE may refer to sdb functions.  */\n \n-#ifndef errno\n-extern int errno;\n-#endif\n-\n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\"\n #endif"}, {"sha": "56d2004027711a4047018d159b034dac02c03b3d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -27,18 +27,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    information.  */\n \n #include \"config.h\"\n+#include \"system.h\"\n #include \"defaults.h\"\n-#include <stdio.h>\n-#if HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-#ifdef HAVE_STRING_H\n-#include <string.h>\n-#else\n-#ifdef HAVE_STRINGS_H\n-#include <strings.h>\n-#endif\n-#endif\n #include \"tree.h\"\n #include \"flags.h\"\n #include \"rtl.h\""}, {"sha": "0f1e62bd28f91a37bfc08399e8cc59ad1f12bfcd", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -22,7 +22,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n \n #ifdef DWARF_DEBUGGING_INFO\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"dwarf.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n@@ -34,30 +34,11 @@ Boston, MA 02111-1307, USA.  */\n #include \"defaults.h\"\n \n #if defined(DWARF_TIMESTAMPS)\n-#if defined(POSIX)\n-#include <time.h>\n-#else /* !defined(POSIX) */\n-#include <sys/types.h>\n-#if defined(__STDC__)\n-extern time_t time (time_t *);\n-#else /* !defined(__STDC__) */\n-extern time_t time ();\n-#endif /* !defined(__STDC__) */\n+#if !defined(POSIX)\n+extern time_t time PROTO ((time_t *)); /* FIXME: use NEED_DECLARATION_TIME */\n #endif /* !defined(POSIX) */\n #endif /* defined(DWARF_TIMESTAMPS) */\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n-#ifdef HAVE_STRING_H\n-#include <string.h>\n-#else\n-#ifdef HAVE_STRINGS_H\n-#include <strings.h>\n-#endif\n-#endif\n-\n /* We cannot use <assert.h> in GCC source, since that would include\n    GCC's assert.h, which may not be compatible with the host compiler.  */\n #undef assert\n@@ -69,14 +50,6 @@ extern time_t time ();\n \n extern char *getpwd ();\n \n-#ifdef NEED_DECLARATION_INDEX\n-extern char *index ();\n-#endif\n-\n-#ifdef NEED_DECLARATION_RINDEX\n-extern char *rindex ();\n-#endif\n-\n /* IMPORTANT NOTE: Please see the file README.DWARF for important details\n    regarding the GNU implementation of Dwarf.  */\n "}, {"sha": "e6c07aae1f2562047e00c4a9f497fbdd54c00d71", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -35,12 +35,12 @@ Boston, MA 02111-1307, USA.  */\n    is the kind of rtx's they make and what arguments they use.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n #ifdef __STDC__\n #include <stdarg.h>\n #else\n #include <varargs.h>\n #endif\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"flags.h\""}, {"sha": "46795835b82c03d353a33046391e932d7b36ba10", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -390,7 +390,7 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"defaults.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n@@ -405,10 +405,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"output.h\"\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n /* One to use setjmp/longjmp method of generating code for exception\n    handling.  */\n "}, {"sha": "6b08946e687d4131610dbca27e5af7e76f75330b", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -20,7 +20,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"flags.h\""}, {"sha": "fc04b376398bb3c01a47912ddeb23337a6b37f48", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -21,7 +21,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"flags.h\""}, {"sha": "f1397c5ebac822c36c8a7a40eebfe3321d220e02", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -20,7 +20,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"machmode.h\"\n #include \"rtl.h\"\n #include \"tree.h\""}, {"sha": "74a6d15d74370062289ec2a77e265c9939800bb8", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -50,18 +50,7 @@ Boston, MA 02111-1307, USA.  */\n #else\n #include <varargs.h>\n #endif\n-#include <stdio.h>\n-#include <ctype.h>\n-#if HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-#ifdef HAVE_STRING_H\n-#include <string.h>\n-#else\n-#ifdef HAVE_STRINGS_H\n-#include <strings.h>\n-#endif\n-#endif\n+#include \"system.h\"\n \n #include \"tree.h\"\n #include \"rtl.h\""}, {"sha": "e5fe01058678515b882470ade359ad7ff3d2331a", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -109,8 +109,7 @@ Boston, MA 02111-1307, USA.  */\n    reg_n_calls_crosses and reg_basic_block.  */\n \f\n #include \"config.h\"\n-#include <sys/types.h>\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"basic-block.h\"\n #include \"insn-config.h\""}, {"sha": "062e631ed92dde9e467db795a862e5cbc4c7db45", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -39,10 +39,7 @@ Boston, MA 02111-1307, USA.  */\n    then scans all the RTL instructions so far generated to correct them.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"flags.h\""}, {"sha": "ab376553a6e49d4e36cd41dd69fe5a5edb651525", "filename": "gcc/gcc.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -33,17 +33,16 @@ compilation is specified by a string called a \"spec\".  */\n \f\n #include \"config.h\"\n \n-#include \"gansidecl.h\"\n-#include \"system.h\"\n-\n-#include <signal.h>\n-#include <sys/stat.h>\n #ifdef __STDC__\n #include <stdarg.h>\n #else\n #include <varargs.h>\n #endif\n+#include \"system.h\"\n+#include <signal.h>\n+#include <sys/stat.h>\n \n+#include \"gansidecl.h\"\n #include \"obstack.h\"\n \n \n@@ -4416,7 +4415,7 @@ main (argc, argv)\n \tfirst_time = FALSE;\n \tobstack_grow (&collect_obstack, \"'-\", 2);\n         q = switches[i].part1;\n-\twhile ((p = (char *) index (q,'\\'')))\n+\twhile ((p = index (q,'\\'')))\n           {\n             obstack_grow (&collect_obstack, q, p-q);\n             obstack_grow (&collect_obstack, \"'\\\\''\", 4);\n@@ -4429,7 +4428,7 @@ main (argc, argv)\n \t  {\n \t    obstack_grow (&collect_obstack, \" '\", 2);\n \t    q = *args;\n-\t    while ((p = (char *) index (q,'\\'')))\n+\t    while ((p = index (q,'\\'')))\n \t      {\n \t\tobstack_grow (&collect_obstack, q, p-q);\n \t\tobstack_grow (&collect_obstack, \"'\\\\''\", 4);"}, {"sha": "6830c164acf12aa50841ade400092dc7eca0a125", "filename": "gcc/getpwd.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fgetpwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fgetpwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgetpwd.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -1,21 +1,14 @@\n /* getpwd.c - get the working directory */\n \n #include \"config.h\"\n-\n-#include <errno.h>\n-#include <sys/types.h>\n+#include \"system.h\"\n #include <sys/stat.h>\n \n-#ifndef errno\n-extern int errno;\n-#endif\n-\n /* Virtually every UN*X system now in common use (except for pre-4.3-tahoe\n    BSD systems) now provides getcwd as called for by POSIX.  Allow for\n    the few exceptions to the general rule here.  */\n \n #if !(defined (POSIX) || defined (USG) || defined (VMS)) || defined (HAVE_GETWD)\n-#include <sys/param.h>\n extern char *getwd ();\n #define getcwd(buf,len) getwd(buf)\n #ifdef MAXPATHLEN\n@@ -29,10 +22,9 @@ extern char *getcwd ();\n #define GUESSPATHLEN 100\n #endif /* (defined (USG) || defined (VMS)) */\n \n-char *getenv ();\n char *xmalloc ();\n \n-#ifndef VMS\n+#if !(defined (VMS) || (defined(_WIN32) && !defined(__CYGWIN32__)))\n \n /* Get the working directory.  Use the PWD environment variable if it's\n    set correctly, since this is faster and gives more uniform answers\n@@ -80,7 +72,7 @@ getpwd ()\n   return p;\n }\n \n-#else\t/* VMS */\n+#else\t/* VMS || _WIN32 && !__CYGWIN32__ */\n \n #ifndef MAXPATHLEN\n #define MAXPATHLEN 255\n@@ -91,8 +83,13 @@ getpwd ()\n {\n   static char *pwd = 0;\n \n-  if (!pwd) pwd = getcwd (xmalloc (MAXPATHLEN+1), MAXPATHLEN+1);\n+  if (!pwd)\n+    pwd = getcwd (xmalloc (MAXPATHLEN + 1), MAXPATHLEN + 1\n+#ifdef VMS\n+\t\t  , 0\n+#endif\n+\t\t  );\n   return pwd;\n }\n \n-#endif\t/* VMS */\n+#endif\t/* VMS || _WIN32 && !__CYGWIN32__ */"}, {"sha": "0f8c143fcfbfd2ecee2d084995f2bba60f1421e4", "filename": "gcc/global.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -20,11 +20,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n-#include <stdio.h>\n-\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n+#include \"system.h\"\n \n #include \"rtl.h\"\n #include \"flags.h\""}, {"sha": "e6258b33b05bf4454aa5245d9020be37dfca4a61", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -21,11 +21,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n-#include <stdio.h>\n-\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n+#include \"system.h\"\n \n #include \"rtl.h\"\n #include \"tree.h\""}, {"sha": "e0d20a60caf21d148777b9039abf33dd178f244a", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -52,7 +52,7 @@ Boston, MA 02111-1307, USA.  */\n    from other passes as well.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"flags.h\"\n #include \"hard-reg-set.h\""}, {"sha": "cff332f5267d6aec823c6e3c4913e9e9c3152ce6", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -60,10 +60,7 @@ Boston, MA 02111-1307, USA.  */\n    here if their preferred class is likely to be used by spills.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"flags.h\"\n #include \"basic-block.h\""}, {"sha": "2a503324986486cd8e8329ac91e5500d0068f848", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -35,7 +35,7 @@ Boston, MA 02111-1307, USA.  */\n    while to do these things.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n #include \"expr.h\""}, {"sha": "e69b4a1756e4b4c8ba4c6aced586346ae72bbadf", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -20,7 +20,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n@@ -30,7 +30,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-config.h\"\n #include \"recog.h\"\n #include \"reload.h\"\n-#include <ctype.h>\n \n /* Each optab contains info on how this target machine\n    can perform a particular operation"}, {"sha": "45a5a8e665e3a36d132ecc4d57c58b8b38b5fb8c", "filename": "gcc/pexecute.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fpexecute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fpexecute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpexecute.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -27,11 +27,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #endif\n \n-#include <stdio.h>\n-#include <errno.h>\n-#ifdef HAVE_UNISTD_H\n-#include <unistd.h>\n-#endif\n+#include \"system.h\"\n \n #ifdef IN_GCC\n #include \"gansidecl.h\""}, {"sha": "f270172e5fa4ab9b3e2b6ee9d361be1d9726340f", "filename": "gcc/prefix.c", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -64,29 +64,18 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n-#include \"gansidecl.h\"\n #ifdef __STDC__\n #include <stdarg.h>\n #else\n #include <varargs.h>\n #endif\n-\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n-#ifdef HAVE_STRING_H\n-#include <string.h>\n-#else\n-#ifdef HAVE_STRINGS_H\n-#include <strings.h>\n-#endif\n-#endif\n-\n+#include \"system.h\"\n #ifdef _WIN32\n #include <windows.h>\n #endif\n \n+#include \"gansidecl.h\"\n+\n static char *get_key_value\tPROTO((char *));\n static char *translate_name\tPROTO((char *));\n static char *concat\t\tPVPROTO((char *, ...));\n@@ -97,8 +86,6 @@ static char *lookup_key\t\tPROTO((char *));\n static HKEY reg_key = (HKEY) INVALID_HANDLE_VALUE;\n #endif\n \n-extern char *getenv ();\n-\n /* Given KEY, as above, return its value.  */\n \n static char *"}, {"sha": "2bdc6122c8d97c5bacc998c39b9495fe688a82a8", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -20,8 +20,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n-#include <ctype.h>\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n \n "}, {"sha": "3d43d18b8a21dbc12b4d9a2c6664a09f934646f1", "filename": "gcc/print-tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -20,8 +20,8 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n+#include \"system.h\"\n #include \"tree.h\"\n-#include <stdio.h>\n \n extern char *mode_name[];\n "}, {"sha": "39a375ed54c270c877975b1db7e154ce16747e28", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -41,14 +41,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    achieve this, see Dain Sample's UC Berkeley thesis.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n-#ifdef HAVE_STRING_H\n-#include <string.h>\n-#else\n-#ifdef HAVE_STRINGS_H\n-#include <strings.h>\n-#endif\n-#endif\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"flags.h\"\n #include \"insn-flags.h\"\n@@ -60,7 +53,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"gcov-io.h\"\n \n extern char * xmalloc ();\n-extern void free ();\n \n /* One of these is dynamically created whenever we identify an arc in the\n    function.  */"}, {"sha": "29dcfcd4fa8ac43d549f74c3a528b29baac22de7", "filename": "gcc/real.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -21,14 +21,9 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n-#include <errno.h>\n+#include \"system.h\"\n #include \"tree.h\"\n \n-#ifndef errno\n-extern int errno;\n-#endif\n-\n /* To enable support of XFmode extended real floating point, define\n LONG_DOUBLE_TYPE_SIZE 96 in the tm.h file (m68k.h or i386.h).\n "}, {"sha": "ad9dff29d07bac40278deb9d6f8f02c4b25dc71f", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -20,7 +20,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"insn-config.h\"\n #include \"insn-attr.h\""}, {"sha": "3a2fe4301b1459bd11bd561f4911da435b2557c6", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -158,7 +158,7 @@ Boston, MA 02111-1307, USA.  */\n    */\n \f\n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"insn-config.h\""}, {"sha": "1114ba74cc8019adbd7f3580a930c399da61efa7", "filename": "gcc/regclass.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -24,10 +24,7 @@ Boston, MA 02111-1307, USA.  */\n    and a function init_reg_sets to initialize the tables.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n-#if HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n #include \"flags.h\""}, {"sha": "54a54b309a9b8816036eddba0701034a592fdfa9", "filename": "gcc/regmove.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -30,8 +30,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include <varargs.h>\n #endif\n \n-/* Must precede rtl.h for FFS.  */\n-#include <stdio.h>\n+/* stdio.h must precede rtl.h for FFS.  */\n+#include \"system.h\"\n \n #include \"rtl.h\"\n #include \"insn-config.h\""}, {"sha": "2783686fdb86d0097bb4534df1a413c2c039d3bf", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -88,7 +88,7 @@ a register with any other reload.  */\n #define REG_OK_STRICT\n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"insn-config.h\"\n #include \"insn-codes.h\""}, {"sha": "6b2720a113383e959a7c53333e93ade513b5f6c1", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -20,10 +20,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n-#include <stdio.h>\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n #include \"insn-config.h\""}, {"sha": "d74ba1040a90bb1998b95de818d898a9253a2108", "filename": "gcc/reorg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -116,7 +116,7 @@ Boston, MA 02111-1307, USA.  */\n    effect to the ARM, differing mostly in which insn is \"in charge\".   */\n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"expr.h\"\n #include \"insn-config.h\""}, {"sha": "4bed8c7221e36ecea7469feb2124ee6f53a0789f", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -20,11 +20,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n-#include <ctype.h>\n-#include <stdio.h>\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"real.h\"\n "}, {"sha": "ffd420e3c5aa9a5c139e90b4d18e62b9b49bed58", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -20,7 +20,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n \n static int rtx_addr_can_trap_p\tPROTO((rtx));"}, {"sha": "b539569dfb6ebfb23540f5b650c7b935f741f78f", "filename": "gcc/sched.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -118,10 +118,7 @@ Boston, MA 02111-1307, USA.  */\n    beginning of basic blocks that have been scheduled.  */\n \f\n #include \"config.h\"\n-#include <stdio.h>\n-#if HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"basic-block.h\"\n #include \"regs.h\""}, {"sha": "dcef9d8bd6cdfe5b6252da4c5a5d9e966558e44c", "filename": "gcc/sdbout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -44,7 +44,7 @@ AT&T C compiler.  From the example below I would conclude the following:\n \n #ifdef SDB_DEBUGGING_INFO\n \n-#include <stdio.h>\n+#include \"system.h\"\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"regs.h\""}, {"sha": "207a4adde4676c2ed813d4655c41be4d5c5ac386", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -34,13 +34,7 @@ Boston, MA 02111-1307, USA.  */\n    after parsing the then-clause.  */\n \n #include \"config.h\"\n-\n-#include <stdio.h>\n-#include <ctype.h>\n-\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n+#include \"system.h\"\n \n #include \"rtl.h\"\n #include \"tree.h\""}, {"sha": "3c940006bb099e95f3fc75139f02267f85b26892", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -20,7 +20,7 @@ Boston, MA 02111-1307, USA.  */\n \n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n \n #include \"tree.h\"\n #include \"flags.h\""}, {"sha": "3af13a104b0408fa276dcec1b05c3cbf72ce6ea6", "filename": "gcc/stupid.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fstupid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fstupid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstupid.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -43,11 +43,7 @@ Boston, MA 02111-1307, USA.  */\n    and assigned hard regs in priority order.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n-\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n+#include \"system.h\"\n \n #include \"rtl.h\"\n #include \"hard-reg-set.h\""}, {"sha": "06207dda135c30a6a8197ced9e7b15b6d3c956ec", "filename": "gcc/tlink.c", "status": "modified", "additions": 5, "deletions": 28, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -20,41 +20,18 @@ You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n-#include <stdio.h>\n-#include <ctype.h>\n #include \"config.h\"\n+#include \"system.h\"\n #include \"hash.h\"\n #include \"demangle.h\"\n \n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n-#ifdef HAVE_UNISTD_H\n-#include <unistd.h>\n-#endif\n-\n-#ifdef HAVE_STRING_H\n-#include <string.h>\n-#else\n-#ifdef HAVE_STRINGS_H\n-#include <strings.h>\n-#endif\n-#endif\n-\n #define MAX_ITERATIONS 17\n \n /* Obstack allocation and deallocation routines.  */\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n extern char * xmalloc PARAMS((unsigned));\n-#ifdef NEED_DECLARATION_FREE\n-extern void free ();\n-#endif\n-#ifdef NEED_DECLARATION_GETENV\n-extern char * getenv ();\n-#endif\n \n /* Defined in collect2.c.  */\n extern int vflag, debug;\n@@ -306,10 +283,10 @@ static char *\n frob_extension (s, ext)\n      char *s, *ext;\n {\n-  char *p = (char *) rindex (s, '/');\n+  char *p = rindex (s, '/');\n   if (! p)\n     p = s;\n-  p = (char *) rindex (p, '.');\n+  p = rindex (p, '.');\n   if (! p)\n     p = s + strlen (s);\n \n@@ -575,7 +552,7 @@ scan_linker_output (fname)\n \t/* Try a mangled name in `quotes'.  */\n \t{\n \t  demangled *dem = 0;\n-\t  p = (char *) index (q+1, '`');\n+\t  p = index (q+1, '`');\n \t  q = 0;\n \n #define MUL \"multiple definition of \"\n@@ -586,7 +563,7 @@ scan_linker_output (fname)\n \t      char *beg = p - sizeof (MUL) + 1;\n \t      *p = 0;\n \t      if (!strcmp (beg, MUL) || !strcmp (beg, UND))\n-\t\tp++, q = (char *) index (p, '\\'');\n+\t\tp++, q = index (p, '\\'');\n \t    }\n \t  if (q)\n \t    *q = 0, dem = demangled_hash_lookup (p, false);"}, {"sha": "5fbf36dedba81a7214f15be279d40efea9b61c73", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 34, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -29,43 +29,12 @@ Boston, MA 02111-1307, USA.  */\n #else\n #include <varargs.h>\n #endif\n-#include <stdio.h>\n+#undef FLOAT /* This is for hpux. They should change hpux.  */\n+#undef FFS  /* Some systems define this in param.h.  */\n+#include \"system.h\"\n #include <signal.h>\n #include <setjmp.h>\n-#include <sys/types.h>\n-#include <ctype.h>\n #include <sys/stat.h>\n-#undef FLOAT\n-#ifdef HAVE_SYS_PARAM_H\n-#include <sys/param.h>\n-#endif\n-#if HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-#ifdef HAVE_STRING_H\n-#include <string.h>\n-#else\n-#ifdef HAVE_STRINGS_H\n-#include <strings.h>\n-#endif\n-#endif\n-#ifdef HAVE_UNISTD_H\n-#include <unistd.h>\n-#endif\n-\n-#undef FLOAT /* This is for hpux. They should change hpux.  */\n-#undef FFS  /* Some systems define this in param.h.  */\n-\n-#ifdef TIME_WITH_SYS_TIME\n-# include <sys/time.h>\n-# include <time.h>\n-#else\n-# if HAVE_SYS_TIME_H\n-# include <sys/time.h>\n-# else\n-#  include <time.h>\n-#endif\n-#endif\n \n #ifdef HAVE_SYS_RESOURCE_H\n # include <sys/resource.h>"}, {"sha": "53f2da5dae25d475128a6d8d537df20b1982cab2", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -34,30 +34,18 @@ Boston, MA 02111-1307, USA.  */\n    by all passes of the compiler.  */\n \n #include \"config.h\"\n+#ifdef __STDC__\n+#include <stdarg.h>\n+#else\n+#include <varargs.h>\n+#endif\n+#include \"system.h\"\n #include <setjmp.h>\n #include \"flags.h\"\n #include \"tree.h\"\n #include \"except.h\"\n #include \"function.h\"\n #include \"obstack.h\"\n-#ifdef __STDC__\n-#include <stdarg.h>\n-#else\n-#include <varargs.h>\n-#endif\n-#include <stdio.h>\n-\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n-\n-#ifdef NEED_DECLARATION_FREE\n-extern void free PROTO((void *));\n-#endif\n-\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free"}, {"sha": "2191e0c3f27574eeb51efe9bf4b9fec9182a56ce", "filename": "gcc/unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -147,7 +147,7 @@ struct _factor { int factor, count; } factors[NUM_FACTORS]\n enum unroll_types { UNROLL_COMPLETELY, UNROLL_MODULO, UNROLL_NAIVE };\n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"rtl.h\"\n #include \"insn-config.h\"\n #include \"integrate.h\""}, {"sha": "42dca296f9ca12b150a847a6484fecb23f96ca86", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -27,10 +27,7 @@ Boston, MA 02111-1307, USA.  */\n    and are responsible for combining constants with the same value.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n-#ifdef HAVE_STDLIB_H\n-#include <stdlib.h>\n-#endif\n+#include \"system.h\"\n #include <setjmp.h>\n /* #include <stab.h> */\n #include \"rtl.h\"\n@@ -52,8 +49,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"xcoffout.h\"\n #endif\n \n-#include <ctype.h>\n-\n #ifndef TRAMPOLINE_ALIGNMENT\n #define TRAMPOLINE_ALIGNMENT FUNCTION_BOUNDARY\n #endif"}, {"sha": "90ed5e3da62f1f4b323a97e399743a855407f5fc", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/670ee920976dbb37076758547de92cabf017843d/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/670ee920976dbb37076758547de92cabf017843d/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=670ee920976dbb37076758547de92cabf017843d", "patch": "@@ -1,5 +1,5 @@\n /* Output xcoff-format symbol table information from GNU compiler.\n-   Copyright (C) 1992, 1994, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1994, 1995, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -24,10 +24,8 @@ Boston, MA 02111-1307, USA.  */\n    interface.  Many functions are very similar to their counterparts in\n    sdbout.c.  */\n \n-/* Include this first, because it may define MIN and MAX.  */\n-#include <stdio.h>\n-\n #include \"config.h\"\n+#include \"system.h\"\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"flags.h\"\n@@ -113,6 +111,9 @@ char *xcoff_lastfile;\n \n #define ASM_OUTPUT_LBE(FILE,LINENUM,BLOCKNUM) \\\n   fprintf (FILE, \"\\t.eb\\t%d\\n\", ABS_OR_RELATIVE_LINENO (LINENUM))\n+\n+static void assign_type_number\t\tPROTO((tree, char *, int));\n+static void xcoffout_block\t\tPROTO((tree, int, tree));\n \f\n /* Support routines for XCOFF debugging info.  */\n "}]}