{"sha": "72d0ef73d2cd46bda2f28e1866d637cfe8edb208", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJkMGVmNzNkMmNkNDZiZGEyZjI4ZTE4NjZkNjM3Y2ZlOGVkYjIwOA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-22T19:57:39Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-04-22T19:57:39Z"}, "message": "c++: Inherited constructor template arguments [PR94719]\n\nMy fix for PR94549 broke constraints_satisfied_p in the case where the inherited\nconstructor decl points to an instantiation of a constructor template coming\nfrom an instantiation of a class template.\n\nThis is because the DECL_TI_ARGS of the inherited constructor decl in this case\ncontains only the innermost level of template arguments (those for the\nconstructor template), but constraint satisfaction expects to have the full set\nof template arguments.  This causes template argument substitution during\nconstraint satisfaction to fail in various ways.\n\nOn the other hand, the DECL_TI_ARGS of the DECL_INHERITED_CTOR is a full set of\ntemplate arguments but with the innermost level still in its dependent form,\nwhich is the source of PR94549.  So if we could combine these two sets of\ntemplate arguments then we'd be golden.\n\nThis patch does just that, by effectively reverting the fix for PR94549 and\ninstead using add_outermost_template_args to combine the template arguments of\nthe inherited constructor decl with those of its DECL_INHERITED_CTOR.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94719\n\tPR c++/94549\n\t* constraint.cc (satisfy_declaration_constraints): If the inherited\n\tconstructor points to an instantiation of a constructor template,\n\tremember and use its attached template arguments.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94719\n\tPR c++/94549\n\t* g++.dg/cpp2a/concepts-inherit-ctor9.C: New test.", "tree": {"sha": "71668bcf94f988b25baebd3aad65073a58dbaf19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71668bcf94f988b25baebd3aad65073a58dbaf19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72d0ef73d2cd46bda2f28e1866d637cfe8edb208", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72d0ef73d2cd46bda2f28e1866d637cfe8edb208", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72d0ef73d2cd46bda2f28e1866d637cfe8edb208", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72d0ef73d2cd46bda2f28e1866d637cfe8edb208/comments", "author": null, "committer": null, "parents": [{"sha": "edfa7c684d329708dcee733fcb552bed9d931621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edfa7c684d329708dcee733fcb552bed9d931621", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edfa7c684d329708dcee733fcb552bed9d931621"}], "stats": {"total": 51, "additions": 46, "deletions": 5}, "files": [{"sha": "7380a20f132ce43cba619118085f97bb692d2ff9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d0ef73d2cd46bda2f28e1866d637cfe8edb208/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d0ef73d2cd46bda2f28e1866d637cfe8edb208/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=72d0ef73d2cd46bda2f28e1866d637cfe8edb208", "patch": "@@ -1,3 +1,11 @@\n+2020-04-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94719\n+\tPR c++/94549\n+\t* constraint.cc (satisfy_declaration_constraints): If the inherited\n+\tconstructor points to an instantiation of a constructor template,\n+\tremember and use its attached template arguments.\n+\n 2020-04-22  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR translation/94698"}, {"sha": "06161b8c8c4823a8ba87f22e6cfbe872e45973be", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d0ef73d2cd46bda2f28e1866d637cfe8edb208/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d0ef73d2cd46bda2f28e1866d637cfe8edb208/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=72d0ef73d2cd46bda2f28e1866d637cfe8edb208", "patch": "@@ -2736,12 +2736,17 @@ static tree\n satisfy_declaration_constraints (tree t, subst_info info)\n {\n   gcc_assert (DECL_P (t));\n+  const tree saved_t = t;\n \n-  if (!DECL_TEMPLATE_INFO (t))\n-    /* For inherited constructors without template information, consider\n-       the original declaration; it has the correct template information\n-       attached.  */\n-    t = strip_inheriting_ctors (t);\n+  /* For inherited constructors, consider the original declaration;\n+     it has the correct template information attached. */\n+  t = strip_inheriting_ctors (t);\n+  tree inh_ctor_targs = NULL_TREE;\n+  if (t != saved_t)\n+    if (tree ti = DECL_TEMPLATE_INFO (saved_t))\n+      /* The inherited constructor points to an instantiation of a constructor\n+\t template; remember its template arguments.  */\n+      inh_ctor_targs = TI_ARGS (ti);\n \n   /* Update the declaration for diagnostics.  */\n   info.in_decl = t;\n@@ -2761,6 +2766,8 @@ satisfy_declaration_constraints (tree t, subst_info info)\n       /* The initial parameter mapping is the complete set of\n \t template arguments substituted into the declaration.  */\n       args = TI_ARGS (ti);\n+      if (inh_ctor_targs)\n+\targs = add_outermost_template_args (args, inh_ctor_targs);\n     }\n   else\n     {"}, {"sha": "1115eb769681cb3a26f7f45500dab32a1b5c0c04", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d0ef73d2cd46bda2f28e1866d637cfe8edb208/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d0ef73d2cd46bda2f28e1866d637cfe8edb208/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72d0ef73d2cd46bda2f28e1866d637cfe8edb208", "patch": "@@ -1,3 +1,9 @@\n+2020-04-22  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/94719\n+\tPR c++/94549\n+\t* g++.dg/cpp2a/concepts-inherit-ctor9.C: New test.\n+\n 2020-04-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/93807"}, {"sha": "7d3201bff9f9537c80031724a0aca55c909d8a70", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-inherit-ctor9.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d0ef73d2cd46bda2f28e1866d637cfe8edb208/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d0ef73d2cd46bda2f28e1866d637cfe8edb208/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-inherit-ctor9.C?ref=72d0ef73d2cd46bda2f28e1866d637cfe8edb208", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/94719\n+// { dg-do compile { target concepts } }\n+\n+template<typename T>\n+struct bar\n+{\n+  template<int N = 5> requires (N == 5)\n+  bar() { }\n+};\n+\n+template<typename T>\n+struct foo : bar<T>\n+{\n+  using foo::bar::bar;\n+};\n+\n+void baz()\n+{\n+  foo<int>{};\n+}"}]}