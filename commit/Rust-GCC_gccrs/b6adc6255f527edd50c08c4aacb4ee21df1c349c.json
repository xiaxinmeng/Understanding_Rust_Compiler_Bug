{"sha": "b6adc6255f527edd50c08c4aacb4ee21df1c349c", "node_id": "C_kwDOANBUbNoAKGI2YWRjNjI1NWY1MjdlZGQ1MGMwOGM0YWFjYjRlZTIxZGYxYzM0OWM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-16T14:40:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-16T14:54:42Z"}, "message": "libstdc++: Fix tr1::variate_generator::engine_value_type\n\nThe tr1/5_numerical_facilities/random/variate_generator/37986.cc test\nfails for strict -std=c++98 mode because _Adaptor(const _Engine&) is\nill-formed in C++98 when _Engine is a reference type.\n\nRather than attempt to make the _Adaptor handle references and pointers,\njust strip references and pointers from the _Engine type before we adapt\nit. That removes the need for the _Adaptor<_Engine*> partial\nspecialization and avoids the reference-to-reference problem for c++98\nmode.\n\nWhile looking into this I noticed that the TR1 spec requires the\nvariate_generator<E,D>::engine_value_type to be the underlying engine\ntype, whereas we make it the _Adaptor<E> type that wraps the engine.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/tr1/random.h (__detail::_Adaptor::_BEngine): Remove.\n\t(__detail::_Adaptor::_M_g): Make public.\n\t(__detail::_Adaptor<_Engine*, _Dist>): Remove partial\n\tspecialization.\n\t(variate_generate::_Value): New helper to simplify handling of\n\t_Engine* and _Engine& template arguments.\n\t(variate_generate::engine_value_type): Define to underlying\n\tengine type, not adapted type.\n\t(variate_generate::engine()): Return underlying engine instead\n\tof adaptor.\n\t* testsuite/tr1/5_numerical_facilities/random/variate_generator/37986.cc:\n\tFix comment.\n\t* testsuite/tr1/5_numerical_facilities/random/variate_generator/requirements/typedefs.cc:\n\tCheck member typedefs have the correct types.", "tree": {"sha": "a8313e0e492b227698294727a138e8ddd46ed705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8313e0e492b227698294727a138e8ddd46ed705"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6adc6255f527edd50c08c4aacb4ee21df1c349c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6adc6255f527edd50c08c4aacb4ee21df1c349c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6adc6255f527edd50c08c4aacb4ee21df1c349c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6adc6255f527edd50c08c4aacb4ee21df1c349c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ad435f2a0d29486c917025dfa239b9b88c35a09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ad435f2a0d29486c917025dfa239b9b88c35a09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ad435f2a0d29486c917025dfa239b9b88c35a09"}], "stats": {"total": 166, "additions": 83, "deletions": 83}, "files": [{"sha": "6061649c5a48b598d2b9e22e7675f7a78566ed04", "filename": "libstdc++-v3/include/tr1/random.h", "status": "modified", "additions": 39, "deletions": 76, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adc6255f527edd50c08c4aacb4ee21df1c349c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adc6255f527edd50c08c4aacb4ee21df1c349c/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.h?ref=b6adc6255f527edd50c08c4aacb4ee21df1c349c", "patch": "@@ -81,9 +81,8 @@ namespace tr1\n     template<typename _Engine, typename _Distribution>\n       struct _Adaptor\n       { \n-\ttypedef typename remove_reference<_Engine>::type _BEngine;\n-\ttypedef typename _BEngine::result_type           _Engine_result_type;\n-\ttypedef typename _Distribution::input_type       result_type;\n+\ttypedef typename _Engine::result_type           _Engine_result_type;\n+\ttypedef typename _Distribution::input_type      result_type;\n \n       public:\n \t_Adaptor(const _Engine& __g)\n@@ -146,72 +145,8 @@ namespace tr1\n \t  return __return_value;\n \t}\n \n-      private:\n \t_Engine _M_g;\n       };\n-\n-    // Specialization for _Engine*.\n-    template<typename _Engine, typename _Distribution>\n-      struct _Adaptor<_Engine*, _Distribution>\n-      {\n-\ttypedef typename _Engine::result_type      _Engine_result_type;\n-\ttypedef typename _Distribution::input_type result_type;\n-\n-      public:\n-\t_Adaptor(_Engine* __g)\n-\t: _M_g(__g) { }\n-\n-\tresult_type\n-\tmin() const\n-\t{\n-\t  result_type __return_value;\n-\t  if (is_integral<_Engine_result_type>::value\n-\t      && is_integral<result_type>::value)\n-\t    __return_value = _M_g->min();\n-\t  else\n-\t    __return_value = result_type(0);\n-\t  return __return_value;\n-\t}\n-\n-\tresult_type\n-\tmax() const\n-\t{\n-\t  result_type __return_value;\n-\t  if (is_integral<_Engine_result_type>::value\n-\t      && is_integral<result_type>::value)\n-\t    __return_value = _M_g->max();\n-\t  else if (!is_integral<result_type>::value)\n-\t    __return_value = result_type(1);\n-\t  else\n-\t    __return_value = std::numeric_limits<result_type>::max() - 1;\n-\t  return __return_value;\n-\t}\n-\n-\tresult_type\n-\toperator()()\n-\t{\n-\t  result_type __return_value;\n-\t  if (is_integral<_Engine_result_type>::value\n-\t      && is_integral<result_type>::value)\n-\t    __return_value = (*_M_g)();\n-\t  else if (!is_integral<_Engine_result_type>::value\n-\t\t   && !is_integral<result_type>::value)\n-\t    __return_value = result_type((*_M_g)() - _M_g->min())\n-\t      / result_type(_M_g->max() - _M_g->min());\n-\t  else if (is_integral<_Engine_result_type>::value\n-\t\t   && !is_integral<result_type>::value)\n-\t    __return_value = result_type((*_M_g)() - _M_g->min())\n-\t      / result_type(_M_g->max() - _M_g->min() + result_type(1));\n-\t  else\n-\t    __return_value = ((((*_M_g)() - _M_g->min()) \n-\t\t\t       / (_M_g->max() - _M_g->min()))\n-\t\t\t      * std::numeric_limits<result_type>::max());\n-\t  return __return_value;\n-\t}\n-\n-      private:\n-\t_Engine* _M_g;\n-      };\n   } // namespace __detail\n \n   /**\n@@ -223,17 +158,45 @@ namespace tr1\n   template<typename _Engine, typename _Dist>\n     class variate_generator\n     {\n-      // Concept requirements.\n-      __glibcxx_class_requires(_Engine, _CopyConstructibleConcept)\n-      //  __glibcxx_class_requires(_Engine, _EngineConcept)\n-      //  __glibcxx_class_requires(_Dist, _EngineConcept)\n+      template<typename _Eng>\n+\tstruct _Value\n+\t{\n+\t  typedef _Eng type;\n+\n+\t  static const _Eng&\n+\t  _S_ref(const _Eng& __e) { return __e; }\n+\t};\n+\n+      template<typename _Eng>\n+\tstruct _Value<_Eng*>\n+\t{\n+\t  typedef _Eng type;\n+\n+\t  __attribute__((__nonnull__))\n+\t  static const _Eng&\n+\t  _S_ref(const _Eng* __e) { return *__e; }\n+\t};\n+\n+      template<typename _Eng>\n+\tstruct _Value<_Eng&>\n+\t{\n+\t  typedef _Eng type;\n+\n+\t  static const _Eng&\n+\t  _S_ref(const _Eng& __e) { return __e; }\n+\t};\n \n     public:\n       typedef _Engine                                engine_type;\n-      typedef __detail::_Adaptor<_Engine, _Dist>     engine_value_type;\n+      typedef typename _Value<_Engine>::type         engine_value_type;\n       typedef _Dist                                  distribution_type;\n       typedef typename _Dist::result_type            result_type;\n \n+      // Concept requirements.\n+      __glibcxx_class_requires(engine_value_type, _CopyConstructibleConcept)\n+      // __glibcxx_class_requires(_Engine, _EngineConcept)\n+      //  __glibcxx_class_requires(_Dist, _EngineConcept)\n+\n       // tr1:5.1.1 table 5.1 requirement\n       typedef typename __gnu_cxx::__enable_if<\n \tis_arithmetic<result_type>::value, result_type>::__type _IsValidType;\n@@ -246,7 +209,7 @@ namespace tr1\n        * the @p _Engine or @p _Dist objects.\n        */\n       variate_generator(engine_type __eng, distribution_type __dist)\n-      : _M_engine(__eng), _M_dist(__dist) { }\n+      : _M_engine(_Value<_Engine>::_S_ref(__eng)), _M_dist(__dist) { }\n \n       /**\n        * Gets the next generated value on the distribution.\n@@ -269,15 +232,15 @@ namespace tr1\n        */\n       engine_value_type&\n       engine()\n-      { return _M_engine; }\n+      { return _M_engine._M_g; }\n \n       /**\n        * Gets a const reference to the underlying uniform random number\n        * generator object.\n        */\n       const engine_value_type&\n       engine() const\n-      { return _M_engine; }\n+      { return _M_engine._M_g; }\n \n       /**\n        * Gets a reference to the underlying random distribution.\n@@ -308,7 +271,7 @@ namespace tr1\n       { return this->distribution().max(); }\n \n     private:\n-      engine_value_type _M_engine;\n+      __detail::_Adaptor<engine_value_type, _Dist> _M_engine;\n       distribution_type _M_dist;\n     };\n "}, {"sha": "a13094740e7623b2db7cd5f642a2eea2d3c2477a", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/variate_generator/37986.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adc6255f527edd50c08c4aacb4ee21df1c349c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fvariate_generator%2F37986.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adc6255f527edd50c08c4aacb4ee21df1c349c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fvariate_generator%2F37986.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fvariate_generator%2F37986.cc?ref=b6adc6255f527edd50c08c4aacb4ee21df1c349c", "patch": "@@ -21,7 +21,7 @@\n \n #include <tr1/random>\n \n-// libtsdc++/37986\n+// libstdc++/37986\n void test01()\n {\n   std::tr1::mt19937 mt;"}, {"sha": "a71c8ddfd817208caf2973cd8e867d2f569fd7e4", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/variate_generator/requirements/typedefs.cc", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6adc6255f527edd50c08c4aacb4ee21df1c349c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fvariate_generator%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6adc6255f527edd50c08c4aacb4ee21df1c349c/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fvariate_generator%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fvariate_generator%2Frequirements%2Ftypedefs.cc?ref=b6adc6255f527edd50c08c4aacb4ee21df1c349c", "patch": "@@ -23,19 +23,56 @@\n \n #include <tr1/random>\n \n+template<typename T, typename U> struct require_same; // not defined\n+template<typename T> struct require_same<T, T> { };\n+\n+typedef std::tr1::linear_congruential<unsigned long, 16807, 0, 2147483647> E;\n+typedef std::tr1::uniform_int<int> D;\n+\n void\n test01()\n {\n-  using namespace std::tr1;\n+  typedef std::tr1::variate_generator<E, D> test_type;\n+\n+  typedef test_type::engine_type       engine_type;\n+  typedef test_type::engine_value_type engine_value_type;\n+  typedef test_type::distribution_type distribution_type;\n+  typedef test_type::result_type       result_type;\n+\n+  require_same<engine_type, E> check_e;\n+  require_same<engine_value_type, E> check_ev;\n+  require_same<distribution_type, D> check_d;\n+  require_same<result_type, typename D::result_type> check_r;\n+}\n+\n+void\n+test02()\n+{\n+  typedef std::tr1::variate_generator<E&, D> test_type;\n \n-  typedef variate_generator\n-    <\n-    linear_congruential<unsigned long, 16807 , 0 , 2147483647>,\n-    uniform_int<int>\n-    > test_type;\n+  typedef test_type::engine_type       engine_type;\n+  typedef test_type::engine_value_type engine_value_type;\n+  typedef test_type::distribution_type distribution_type;\n+  typedef test_type::result_type       result_type;\n+\n+  require_same<engine_type, E&> check_e;\n+  require_same<engine_value_type, E> check_ev;\n+  require_same<distribution_type, D> check_d;\n+  require_same<result_type, typename D::result_type> check_r;\n+}\n+\n+void\n+test03()\n+{\n+  typedef std::tr1::variate_generator<E*, D> test_type;\n \n   typedef test_type::engine_type       engine_type;\n   typedef test_type::engine_value_type engine_value_type;\n   typedef test_type::distribution_type distribution_type;\n   typedef test_type::result_type       result_type;\n+\n+  require_same<engine_type, E*> check_e;\n+  require_same<engine_value_type, E> check_ev;\n+  require_same<distribution_type, D> check_d;\n+  require_same<result_type, typename D::result_type> check_r;\n }"}]}