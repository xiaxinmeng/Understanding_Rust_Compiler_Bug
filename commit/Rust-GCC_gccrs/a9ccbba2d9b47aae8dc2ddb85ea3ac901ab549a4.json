{"sha": "a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTljY2JiYTJkOWI0N2FhZThkYzJkZGI4NWVhM2FjOTAxYWI1NDlhNA==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-10-11T13:00:40Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-10-11T13:00:40Z"}, "message": "i386.md (any_fix): New iterator.\n\n        * config/i386/i386.md (any_fix): New iterator.\n        (fixsuffix): New attribute.\n        * config/i386/sse.md (VF1): Extened with wider modes.\n        (VI): Ditto.\n        (VI_AVX2): Ditto.\n        (VI8): Ditto.\n        (sseintvecmodelower): Ditto.\n        (ssescalarmode): Ditto.\n        (ssescalarnum): Ditto.\n        (VF1_128_256): New.\n        (ssexmmmode): Ditto.\n        (<fixsuffix>fix_truncv16sfv16si2): Ditto.\n        (<sse>_rcp<mode>2): Change iterator.\n        (rsqrt<mode>2): Ditto.\n        (<sse>_rsqrt<mode>2): Ditto.\n        (avx2_vec_dup<mode>): Ditto.\n        (<sse4_1>_round<ssemodesuffix>_sfix<avxsizesuffix>): Ditto.\n        (round<mode>2_sfix): Ditto.\n        (avx2_pbroadcast<mode>): Ditto.\n        (*andnot<mode>3): Handle XI mode.\n        (*<code><mode>3): Ditto.\n        (AVXTOSSEMODE): Removed.\n        (avx_vpermil<mode>): Changed to ...\n        (<sse2_avx_avx512f>_vpermil<mode>): This.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\nCo-Authored-By: Sergey Lega <sergey.s.lega@intel.com>\n\nFrom-SVN: r203429", "tree": {"sha": "6f32a36168a7e764a9e361afa62d2c2c263281b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f32a36168a7e764a9e361afa62d2c2c263281b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4/comments", "author": null, "committer": null, "parents": [{"sha": "2b1ebb0cfe7d39b18e44d583e57cfed5f2773f0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1ebb0cfe7d39b18e44d583e57cfed5f2773f0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b1ebb0cfe7d39b18e44d583e57cfed5f2773f0d"}], "stats": {"total": 156, "additions": 114, "deletions": 42}, "files": [{"sha": "9e94fdfe361acb370df00d8249638b907827699f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4", "patch": "@@ -1,3 +1,38 @@\n+2013-10-11  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Sergey Lega  <sergey.s.lega@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/i386.md (any_fix): New iterator.\n+\t(fixsuffix): New attribute.\n+\t* config/i386/sse.md (VF1): Extened with wider modes.\n+\t(VI): Ditto.\n+\t(VI_AVX2): Ditto.\n+\t(VI8): Ditto.\n+\t(sseintvecmodelower): Ditto.\n+\t(ssescalarmode): Ditto.\n+\t(ssescalarnum): Ditto.\n+\t(VF1_128_256): New.\n+\t(ssexmmmode): Ditto.\n+\t(<fixsuffix>fix_truncv16sfv16si2): Ditto.\n+\t(<sse>_rcp<mode>2): Change iterator.\n+\t(rsqrt<mode>2): Ditto.\n+\t(<sse>_rsqrt<mode>2): Ditto.\n+\t(avx2_vec_dup<mode>): Ditto.\n+\t(<sse4_1>_round<ssemodesuffix>_sfix<avxsizesuffix>): Ditto.\n+\t(round<mode>2_sfix): Ditto.\n+\t(avx2_pbroadcast<mode>): Ditto.\n+\t(*andnot<mode>3): Handle XI mode.\n+\t(*<code><mode>3): Ditto.\n+\t(AVXTOSSEMODE): Removed.\n+\t(avx_vpermil<mode>): Changed to ...\n+\t(<sse2_avx_avx512f>_vpermil<mode>): This.\n+\n 2013-10-11  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Sergey Lega  <sergey.s.lega@intel.com>"}, {"sha": "511af9590879dd4eba90056f0b764037d569513a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4", "patch": "@@ -827,6 +827,10 @@\n (define_code_attr s [(sign_extend \"s\") (zero_extend \"u\")])\n (define_code_attr u_bool [(sign_extend \"false\") (zero_extend \"true\")])\n \n+;; Used in signed and unsigned fix.\n+(define_code_iterator any_fix [fix unsigned_fix])\n+(define_code_attr fixsuffix [(fix \"\") (unsigned_fix \"u\")])\n+\n ;; All integer modes.\n (define_mode_iterator SWI1248x [QI HI SI DI])\n "}, {"sha": "aa9f1d1096a5361ccbb16b8a33450f0b83823184", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 75, "deletions": 42, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a9ccbba2d9b47aae8dc2ddb85ea3ac901ab549a4", "patch": "@@ -134,6 +134,10 @@\n \n ;; All SFmode vector float modes\n (define_mode_iterator VF1\n+  [(V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF])\n+\n+;; 128- and 256-bit SF vector modes\n+(define_mode_iterator VF1_128_256\n   [(V8SF \"TARGET_AVX\") V4SF])\n \n ;; All DFmode vector float modes\n@@ -154,16 +158,17 @@\n \n ;; All vector integer modes\n (define_mode_iterator VI\n-  [(V32QI \"TARGET_AVX\") V16QI\n+  [(V16SI \"TARGET_AVX512F\") (V8DI \"TARGET_AVX512F\")\n+   (V32QI \"TARGET_AVX\") V16QI\n    (V16HI \"TARGET_AVX\") V8HI\n    (V8SI \"TARGET_AVX\") V4SI\n    (V4DI \"TARGET_AVX\") V2DI])\n \n (define_mode_iterator VI_AVX2\n   [(V32QI \"TARGET_AVX2\") V16QI\n    (V16HI \"TARGET_AVX2\") V8HI\n-   (V8SI \"TARGET_AVX2\") V4SI\n-   (V4DI \"TARGET_AVX2\") V2DI])\n+   (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX2\") V4SI\n+   (V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX2\") V2DI])\n \n ;; All QImode vector integer modes\n (define_mode_iterator VI1\n@@ -175,7 +180,7 @@\n \n ;; All DImode vector integer modes\n (define_mode_iterator VI8\n-  [(V4DI \"TARGET_AVX\") V2DI])\n+  [(V8DI \"TARGET_AVX512F\") (V4DI \"TARGET_AVX\") V2DI])\n \n (define_mode_iterator VI1_AVX2\n   [(V32QI \"TARGET_AVX2\") V16QI])\n@@ -358,7 +363,8 @@\n    (V32QI \"V32QI\") (V16QI \"V16QI\")])\n \n (define_mode_attr sseintvecmodelower\n-  [(V8SF \"v8si\") (V4DF \"v4di\")\n+  [(V16SF \"v16si\")\n+   (V8SF \"v8si\") (V4DF \"v4di\")\n    (V4SF \"v4si\") (V2DF \"v2di\")\n    (V8SI \"v8si\") (V4DI \"v4di\")\n    (V4SI \"v4si\") (V2DI \"v2di\")\n@@ -393,10 +399,21 @@\n \n ;; Mapping of vector modes back to the scalar modes\n (define_mode_attr ssescalarmode\n-  [(V32QI \"QI\") (V16HI \"HI\") (V8SI \"SI\") (V4DI \"DI\")\n-   (V16QI \"QI\") (V8HI \"HI\") (V4SI \"SI\") (V2DI \"DI\")\n-   (V8SF \"SF\") (V4DF \"DF\")\n-   (V4SF \"SF\") (V2DF \"DF\")])\n+  [(V64QI \"QI\") (V32QI \"QI\") (V16QI \"QI\")\n+   (V32HI \"HI\") (V16HI \"HI\") (V8HI \"HI\")\n+   (V16SI \"SI\") (V8SI \"SI\")  (V4SI \"SI\")\n+   (V8DI \"DI\")  (V4DI \"DI\")  (V2DI \"DI\")\n+   (V16SF \"SF\") (V8SF \"SF\")  (V4SF \"SF\")\n+   (V8DF \"DF\")  (V4DF \"DF\")  (V2DF \"DF\")])\n+\n+;; Mapping of vector modes to the 128bit modes\n+(define_mode_attr ssexmmmode\n+  [(V64QI \"V16QI\") (V32QI \"V16QI\") (V16QI \"V16QI\")\n+   (V32HI \"V8HI\")  (V16HI \"V8HI\") (V8HI \"V8HI\")\n+   (V16SI \"V4SI\")  (V8SI \"V4SI\")  (V4SI \"V4SI\")\n+   (V8DI \"V2DI\")   (V4DI \"V2DI\")  (V2DI \"V2DI\")\n+   (V16SF \"V4SF\")  (V8SF \"V4SF\")  (V4SF \"V4SF\")\n+   (V8DF \"V2DF\")   (V4DF \"V2DF\")  (V2DF \"V2DF\")])\n \n ;; Pointer size override for scalar modes (Intel asm dialect)\n (define_mode_attr iptr\n@@ -408,8 +425,10 @@\n \n ;; Number of scalar elements in each vector type\n (define_mode_attr ssescalarnum\n-  [(V32QI \"32\") (V16HI \"16\") (V8SI \"8\") (V4DI \"4\")\n+  [(V64QI \"64\") (V16SI \"16\") (V8DI \"8\")\n+   (V32QI \"32\") (V16HI \"16\") (V8SI \"8\") (V4DI \"4\")\n    (V16QI \"16\") (V8HI \"8\") (V4SI \"4\") (V2DI \"2\")\n+   (V16SF \"16\") (V8DF \"8\")\n    (V8SF \"8\") (V4DF \"4\")\n    (V4SF \"4\") (V2DF \"2\")])\n \n@@ -1101,9 +1120,9 @@\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_insn \"<sse>_rcp<mode>2\"\n-  [(set (match_operand:VF1 0 \"register_operand\" \"=x\")\n-\t(unspec:VF1\n-\t  [(match_operand:VF1 1 \"nonimmediate_operand\" \"xm\")] UNSPEC_RCP))]\n+  [(set (match_operand:VF1_128_256 0 \"register_operand\" \"=x\")\n+\t(unspec:VF1_128_256\n+\t  [(match_operand:VF1_128_256 1 \"nonimmediate_operand\" \"xm\")] UNSPEC_RCP))]\n   \"TARGET_SSE\"\n   \"%vrcpps\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")\n@@ -1181,19 +1200,19 @@\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_expand \"rsqrt<mode>2\"\n-  [(set (match_operand:VF1 0 \"register_operand\")\n-\t(unspec:VF1\n-\t  [(match_operand:VF1 1 \"nonimmediate_operand\")] UNSPEC_RSQRT))]\n+  [(set (match_operand:VF1_128_256 0 \"register_operand\")\n+\t(unspec:VF1_128_256\n+\t  [(match_operand:VF1_128_256 1 \"nonimmediate_operand\")] UNSPEC_RSQRT))]\n   \"TARGET_SSE_MATH\"\n {\n   ix86_emit_swsqrtsf (operands[0], operands[1], <MODE>mode, true);\n   DONE;\n })\n \n (define_insn \"<sse>_rsqrt<mode>2\"\n-  [(set (match_operand:VF1 0 \"register_operand\" \"=x\")\n-\t(unspec:VF1\n-\t  [(match_operand:VF1 1 \"nonimmediate_operand\" \"xm\")] UNSPEC_RSQRT))]\n+  [(set (match_operand:VF1_128_256 0 \"register_operand\" \"=x\")\n+\t(unspec:VF1_128_256\n+\t  [(match_operand:VF1_128_256 1 \"nonimmediate_operand\" \"xm\")] UNSPEC_RSQRT))]\n   \"TARGET_SSE\"\n   \"%vrsqrtps\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sse\")\n@@ -2756,6 +2775,16 @@\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"<fixsuffix>fix_truncv16sfv16si2\"\n+  [(set (match_operand:V16SI 0 \"register_operand\" \"=v\")\n+\t(any_fix:V16SI\n+\t  (match_operand:V16SF 1 \"nonimmediate_operand\" \"vm\")))]\n+  \"TARGET_AVX512F\"\n+  \"vcvttps2<fixsuffix>dq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"XI\")])\n+\n (define_insn \"fix_truncv8sfv8si2\"\n   [(set (match_operand:V8SI 0 \"register_operand\" \"=x\")\n \t(fix:V8SI (match_operand:V8SF 1 \"nonimmediate_operand\" \"xm\")))]\n@@ -4216,8 +4245,8 @@\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"avx2_vec_dup<mode>\"\n-  [(set (match_operand:VF1 0 \"register_operand\" \"=x\")\n-\t(vec_duplicate:VF1\n+  [(set (match_operand:VF1_128_256 0 \"register_operand\" \"=x\")\n+\t(vec_duplicate:VF1_128_256\n \t  (vec_select:SF\n \t    (match_operand:V4SF 1 \"register_operand\" \"x\")\n \t    (parallel [(const_int 0)]))))]\n@@ -6499,12 +6528,18 @@\n \t  (match_operand:VI 2 \"nonimmediate_operand\" \"xm,vm\")))]\n   \"TARGET_SSE\"\n {\n-  static char buf[32];\n+  static char buf[64];\n   const char *ops;\n   const char *tmp;\n \n   switch (get_attr_mode (insn))\n     {\n+    case MODE_XI:\n+      gcc_assert (TARGET_AVX512F);\n+\n+      tmp = \"pandn<ssemodesuffix>\";\n+      break;\n+\n     case MODE_OI:\n       gcc_assert (TARGET_AVX2);\n     case MODE_TI:\n@@ -6584,12 +6619,17 @@\n   \"TARGET_SSE\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n-  static char buf[32];\n+  static char buf[64];\n   const char *ops;\n   const char *tmp;\n \n   switch (get_attr_mode (insn))\n     {\n+    case MODE_XI:\n+      gcc_assert (TARGET_AVX512F);\n+      tmp = \"p<logic><ssemodesuffix>\";\n+      break;\n+\n     case MODE_OI:\n       gcc_assert (TARGET_AVX2);\n     case MODE_TI:\n@@ -6598,6 +6638,8 @@\n       tmp = \"p<logic>\";\n       break;\n \n+   case MODE_V16SF:\n+      gcc_assert (TARGET_AVX512F);\n    case MODE_V8SF:\n       gcc_assert (TARGET_AVX);\n    case MODE_V4SF:\n@@ -9055,7 +9097,7 @@\n \n (define_expand \"<sse4_1>_round<ssemodesuffix>_sfix<avxsizesuffix>\"\n   [(match_operand:<sseintvecmode> 0 \"register_operand\")\n-   (match_operand:VF1 1 \"nonimmediate_operand\")\n+   (match_operand:VF1_128_256 1 \"nonimmediate_operand\")\n    (match_operand:SI 2 \"const_0_to_15_operand\")]\n   \"TARGET_ROUND\"\n {\n@@ -9164,7 +9206,7 @@\n \n (define_expand \"round<mode>2_sfix\"\n   [(match_operand:<sseintvecmode> 0 \"register_operand\")\n-   (match_operand:VF1 1 \"register_operand\")]\n+   (match_operand:VF1_128_256 1 \"register_operand\")]\n   \"TARGET_ROUND && !flag_trapping_math\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n@@ -10594,17 +10636,11 @@\n    (set_attr \"btver2_decode\" \"vector\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_mode_attr AVXTOSSEMODE\n-  [(V4DI \"V2DI\") (V2DI \"V2DI\")\n-   (V8SI \"V4SI\") (V4SI \"V4SI\")\n-   (V16HI \"V8HI\") (V8HI \"V8HI\")\n-   (V32QI \"V16QI\") (V16QI \"V16QI\")])\n-\n (define_insn \"avx2_pbroadcast<mode>\"\n   [(set (match_operand:VI 0 \"register_operand\" \"=x\")\n \t(vec_duplicate:VI\n \t  (vec_select:<ssescalarmode>\n-\t    (match_operand:<AVXTOSSEMODE> 1 \"nonimmediate_operand\" \"xm\")\n+\t    (match_operand:<ssexmmmode> 1 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)]))))]\n   \"TARGET_AVX2\"\n   \"vpbroadcast<ssemodesuffix>\\t{%1, %0|%0, %<iptr>1}\"\n@@ -10856,7 +10892,7 @@\n     = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (<ssescalarnum>, perm));\n })\n \n-(define_expand \"avx_vpermil<mode>\"\n+(define_expand \"<sse2_avx_avx512f>_vpermil<mode>\"\n   [(set (match_operand:VF1 0 \"register_operand\")\n \t(vec_select:VF1\n \t  (match_operand:VF1 1 \"nonimmediate_operand\")\n@@ -10866,16 +10902,13 @@\n   int mask = INTVAL (operands[2]);\n   rtx perm[<ssescalarnum>];\n \n-  perm[0] = GEN_INT (mask & 3);\n-  perm[1] = GEN_INT ((mask >> 2) & 3);\n-  perm[2] = GEN_INT ((mask >> 4) & 3);\n-  perm[3] = GEN_INT ((mask >> 6) & 3);\n-  if (<MODE>mode == V8SFmode)\n+  int i;\n+  for (i = 0; i < <ssescalarnum>; i = i + 4)\n     {\n-      perm[4] = GEN_INT ((mask & 3) + 4);\n-      perm[5] = GEN_INT (((mask >> 2) & 3) + 4);\n-      perm[6] = GEN_INT (((mask >> 4) & 3) + 4);\n-      perm[7] = GEN_INT (((mask >> 6) & 3) + 4);\n+      perm[i]     = GEN_INT (((mask >> 0) & 3) + i);\n+      perm[i + 1] = GEN_INT (((mask >> 2) & 3) + i);\n+      perm[i + 2] = GEN_INT (((mask >> 4) & 3) + i);\n+      perm[i + 3] = GEN_INT (((mask >> 6) & 3) + i);\n     }\n \n   operands[2]"}]}