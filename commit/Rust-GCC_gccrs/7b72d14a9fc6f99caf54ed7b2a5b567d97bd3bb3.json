{"sha": "7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I3MmQxNGE5ZmM2Zjk5Y2FmNTRlZDdiMmE1YjU2N2Q5N2JkM2JiMw==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2016-06-23T14:33:53Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2016-06-23T14:33:53Z"}, "message": "Add gcc-auto-profile script\n\nUsing autofdo is currently something difficult. It requires using the\nmodel specific branches taken event, which differs on different CPUs.\nThe example shown in the manual requires a special patched version of\nperf that is non standard, and also will likely not work everywhere.\n\nThis patch adds a new gcc-auto-profile script that figures out the\ncorrect event and runs perf.\n\nThis is needed to actually make use of autofdo in a generic way\nin the build system and in the test suite.\n\nSince maintaining the script would be somewhat tedious (needs changes\nevery time a new CPU comes out) I auto generated it from the online\nIntel event database. The script to do that is in contrib and can be\nrerun.\n\nRight now there is no test if perf works in configure. This\nwould vary depending on the build and target system, and since\nit currently doesn't work in virtualization and needs uptodate\nkernel it may often fail in common distribution build setups.\n\nSo far the script is not installed.\n\ngcc/:\n2016-06-23  Andi Kleen  <ak@linux.intel.com>\n\n\t* config/i386/gcc-auto-profile: New file.\n\ncontrib/:\n\n2016-06-23  Andi Kleen  <ak@linux.intel.com>\n\n\t* gen_autofdo_event.py: New file to regenerate\n\tgcc-auto-profile.\n\nFrom-SVN: r237731", "tree": {"sha": "216126c09cb0d4e822fbfb1aac9111a1067ecc67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/216126c09cb0d4e822fbfb1aac9111a1067ecc67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3/comments", "author": null, "committer": null, "parents": [{"sha": "60fa7862a0a1ad80f587cb29bcc8613a78303f90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60fa7862a0a1ad80f587cb29bcc8613a78303f90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60fa7862a0a1ad80f587cb29bcc8613a78303f90"}], "stats": {"total": 234, "additions": 234, "deletions": 0}, "files": [{"sha": "07019c2ccbe9b8940a5c3dc4d8361c55dc94501d", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3", "patch": "@@ -1,3 +1,8 @@\n+2016-06-23  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* gen_autofdo_event.py: New file to regenerate\n+\tgcc-auto-profile.\n+\n 2016-06-21  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* config-list.mk: Stop testing mep-elf."}, {"sha": "3865cbb2ee50780b8fa15d734df0883b58f6a46f", "filename": "contrib/gen_autofdo_event.py", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3/contrib%2Fgen_autofdo_event.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3/contrib%2Fgen_autofdo_event.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgen_autofdo_event.py?ref=7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3", "patch": "@@ -0,0 +1,155 @@\n+#!/usr/bin/python\n+# Generate Intel taken branches Linux perf event script for autofdo profiling.\n+\n+# Copyright (C) 2016 Free Software Foundation, Inc.\n+#\n+# GCC is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU General Public License as published by the Free\n+# Software Foundation; either version 3, or (at your option) any later\n+# version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+# WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.  */\n+\n+# Run it with perf record -b -e EVENT program ...\n+# The Linux Kernel needs to support the PMU of the current CPU, and\n+# It will likely not work in VMs.\n+# Add --all to print for all cpus, otherwise for current cpu.\n+# Add --script to generate shell script to run correct event.\n+#\n+# Requires internet (https) access. This may require setting up a proxy\n+# with export https_proxy=...\n+#\n+import urllib2\n+import sys\n+import json\n+import argparse\n+import collections\n+\n+baseurl = \"https://download.01.org/perfmon\"\n+\n+target_events = (u'BR_INST_RETIRED.NEAR_TAKEN',\n+                 u'BR_INST_EXEC.TAKEN',\n+                 u'BR_INST_RETIRED.TAKEN_JCC',\n+                 u'BR_INST_TYPE_RETIRED.COND_TAKEN')\n+\n+ap = argparse.ArgumentParser()\n+ap.add_argument('--all', '-a', help='Print for all CPUs', action='store_true')\n+ap.add_argument('--script', help='Generate shell script', action='store_true')\n+args = ap.parse_args()\n+\n+eventmap = collections.defaultdict(list)\n+\n+def get_cpu_str():\n+    with open('/proc/cpuinfo', 'r') as c:\n+        vendor, fam, model = None, None, None\n+        for j in c:\n+            n = j.split()\n+            if n[0] == 'vendor_id':\n+                vendor = n[2]\n+            elif n[0] == 'model' and n[1] == ':':\n+                model = int(n[2])\n+            elif n[0] == 'cpu' and n[1] == 'family':\n+                fam = int(n[3])\n+            if vendor and fam and model:\n+                return \"%s-%d-%X\" % (vendor, fam, model), model\n+    return None, None\n+\n+def find_event(eventurl, model):\n+    print >>sys.stderr, \"Downloading\", eventurl\n+    u = urllib2.urlopen(eventurl)\n+    events = json.loads(u.read())\n+    u.close()\n+\n+    found = 0\n+    for j in events:\n+        if j[u'EventName'] in target_events:\n+            event = \"cpu/event=%s,umask=%s/\" % (j[u'EventCode'], j[u'UMask'])\n+            if u'PEBS' in j and j[u'PEBS'] > 0:\n+                event += \"p\"\n+            if args.script:\n+                eventmap[event].append(model)\n+            else:\n+                print j[u'EventName'], \"event for model\", model, \"is\", event\n+            found += 1\n+    return found\n+\n+if not args.all:\n+    cpu, model = get_cpu_str()\n+    if not cpu:\n+        sys.exit(\"Unknown CPU type\")\n+\n+url = baseurl + \"/mapfile.csv\"\n+print >>sys.stderr, \"Downloading\", url\n+u = urllib2.urlopen(url)\n+found = 0\n+cpufound = 0\n+for j in u:\n+    n = j.rstrip().split(',')\n+    if len(n) >= 4 and (args.all or n[0] == cpu) and n[3] == \"core\":\n+        if args.all:\n+            vendor, fam, model = n[0].split(\"-\")\n+            model = int(model, 16)\n+        cpufound += 1\n+        found += find_event(baseurl + n[2], model)\n+u.close()\n+\n+if args.script:\n+    print '''#!/bin/sh\n+# Profile workload for gcc profile feedback (autofdo) using Linux perf.\n+# Auto generated. To regenerate for new CPUs run\n+# contrib/gen_autofdo_event.py --shell --all in gcc source\n+\n+# usages:\n+# gcc-auto-profile program             (profile program and children)\n+# gcc-auto-profile -a sleep X          (profile all for X secs, may need root)\n+# gcc-auto-profile -p PID sleep X      (profile PID)\n+# gcc-auto-profile --kernel -a sleep X (profile kernel)\n+# gcc-auto-profile --all -a sleep X    (profile kernel and user space)\n+\n+# Identify branches taken event for CPU.\n+#\n+\n+FLAGS=u\n+\n+if [ \"$1\" = \"--kernel\" ] ; then\n+  FLAGS=k\n+  shift\n+fi\n+if [ \"$1\" = \"--all\" ] ; then\n+  FLAGS=uk\n+  shift\n+fi\n+\n+if ! grep -q Intel /proc/cpuinfo ; then\n+  echo >&2 \"Only Intel CPUs supported\"\n+  exit 1\n+fi\n+\n+if grep -q hypervisor /proc/cpuinfo ; then\n+  echo >&2 \"Warning: branch profiling may not be functional in VMs\"\n+fi\n+\n+case `egrep -q \"^cpu family\\s*: 6\" /proc/cpuinfo &&\n+  egrep \"^model\\s*:\" /proc/cpuinfo | head -n1` in'''\n+    for event, mod in eventmap.iteritems():\n+        for m in mod[:-1]:\n+            print \"model*:\\ %s|\\\\\" % m\n+        print 'model*:\\ %s) E=\"%s$FLAGS\" ;;' % (mod[-1], event)\n+    print '''*)\n+echo >&2 \"Unknown CPU. Run contrib/gen_autofdo_event.py --all --script to update script.\"\n+\texit 1 ;;'''\n+    print \"esac\"\n+    print 'exec perf record -e $E -b \"$@\"'\n+\n+if cpufound == 0 and not args.all:\n+    sys.exit('CPU %s not found' % cpu)\n+\n+if found == 0:\n+    sys.exit('Branch event not found')"}, {"sha": "84df8a7417083dd9372c2f5f388aa4525eb64da0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3", "patch": "@@ -1,3 +1,7 @@\n+2016-06-23  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* config/i386/gcc-auto-profile: New file.\n+\n 2016-06-23  Martin Liska  <mliska@suse.cz>\n \n \tPR middle-end/71619"}, {"sha": "5da5c63cd845ccf14e9122dcef3bf00b34eea7c6", "filename": "gcc/config/i386/gcc-auto-profile", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3/gcc%2Fconfig%2Fi386%2Fgcc-auto-profile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3/gcc%2Fconfig%2Fi386%2Fgcc-auto-profile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgcc-auto-profile?ref=7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3", "patch": "@@ -0,0 +1,70 @@\n+#!/bin/sh\n+# profile workload for gcc profile feedback (autofdo) using Linux perf\n+# auto generated. to regenerate for new CPUs run\n+# contrib/gen_autofdo_event.py --shell --all in gcc source\n+\n+# usages:\n+# gcc-auto-profile program             (profile program and children)\n+# gcc-auto-profile -a sleep X          (profile all for X secs, may need root)\n+# gcc-auto-profile -p PID sleep X      (profile PID)\n+# gcc-auto-profile --kernel -a sleep X (profile kernel)\n+# gcc-auto-profile --all -a sleep X    (profile kernel and user space)\n+\n+# identify branches taken event for CPU\n+#\n+\n+FLAGS=u\n+\n+if [ \"$1\" = \"--kernel\" ] ; then\n+  FLAGS=k\n+  shift\n+fi\n+if [ \"$1\" = \"--all\" ] ; then\n+  FLAGS=uk\n+  shift\n+fi\n+\n+if ! grep -q Intel /proc/cpuinfo ; then\n+  echo >&2 \"Only Intel CPUs supported\"\n+  exit 1\n+fi\n+\n+if grep -q hypervisor /proc/cpuinfo ; then\n+  echo >&2 \"Warning: branch profiling may not be functional in VMs\"\n+fi\n+\n+case `egrep -q \"^cpu family\\s*: 6\" /proc/cpuinfo &&\n+  egrep \"^model\\s*:\" /proc/cpuinfo | head -n1` in\n+model*:\\ 55|\\\n+model*:\\ 77|\\\n+model*:\\ 76) E=\"cpu/event=0xC4,umask=0xFE/p$FLAGS\" ;;\n+model*:\\ 42|\\\n+model*:\\ 45|\\\n+model*:\\ 58|\\\n+model*:\\ 62|\\\n+model*:\\ 60|\\\n+model*:\\ 69|\\\n+model*:\\ 70|\\\n+model*:\\ 63|\\\n+model*:\\ 61|\\\n+model*:\\ 71|\\\n+model*:\\ 86|\\\n+model*:\\ 78|\\\n+model*:\\ 94) E=\"cpu/event=0xC4,umask=0x20/p$FLAGS\" ;;\n+model*:\\ 46|\\\n+model*:\\ 30|\\\n+model*:\\ 31|\\\n+model*:\\ 26|\\\n+model*:\\ 47|\\\n+model*:\\ 37|\\\n+model*:\\ 44) E=\"cpu/event=0x88,umask=0x40/p$FLAGS\" ;;\n+model*:\\ 28|\\\n+model*:\\ 38|\\\n+model*:\\ 39|\\\n+model*:\\ 54|\\\n+model*:\\ 53) E=\"cpu/event=0x88,umask=0x41/p$FLAGS\" ;;\n+*)\n+echo >&2 \"Unknown CPU. Run contrib/gen_autofdo_event.py --all --script to update script.\"\n+\texit 1 ;;\n+esac\n+exec perf record -e $E -b \"$@\""}]}