{"sha": "9ca147154074a0de548138b4e73477e94903a855", "node_id": "C_kwDOANBUbNoAKDljYTE0NzE1NDA3NGEwZGU1NDgxMzhiNGU3MzQ3N2U5NDkwM2E4NTU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-29T13:18:40Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-09-29T13:18:40Z"}, "message": "c++: implement __remove_cv, __remove_reference and __remove_cvref\n\nThis implements builtins for std::remove_cv, std::remove_reference and\nstd::remove_cvref using TRAIT_TYPE from the previous patch.\n\ngcc/c-family/ChangeLog:\n\n\t* c-common.cc (c_common_reswords): Add __remove_cv,\n\t__remove_reference and __remove_cvref.\n\t* c-common.h (enum rid): Add RID_REMOVE_CV, RID_REMOVE_REFERENCE\n\tand RID_REMOVE_CVREF.\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (diagnose_trait_expr): Handle CPTK_REMOVE_CV,\n\tCPTK_REMOVE_REFERENCE and CPTK_REMOVE_CVREF.\n\t* cp-objcp-common.cc (names_builtin_p): Likewise.\n\t* cp-tree.h (enum cp_trait_kind): Add CPTK_REMOVE_CV,\n\tCPTK_REMOVE_REFERENCE and CPTK_REMOVE_CVREF.\n\t* cxx-pretty-print.cc (pp_cxx_trait): Handle CPTK_REMOVE_CV,\n\tCPTK_REMOVE_REFERENCE and CPTK_REMOVE_CVREF.\n\t* parser.cc (cp_keyword_starts_decl_specifier_p): Return true\n\tfor RID_REMOVE_CV, RID_REMOVE_REFERENCE and RID_REMOVE_CVREF.\n\t(cp_parser_trait): Handle RID_REMOVE_CV, RID_REMOVE_REFERENCE\n\tand RID_REMOVE_CVREF.\n\t(cp_parser_simple_type_specifier): Likewise.\n\t* semantics.cc (finish_trait_type): Likewise.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/unique_ptr.h (unique_ptr<_Tp[], _Dp>): Remove\n\t__remove_cv and use __remove_cv_t instead.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/ext/has-builtin-1.C: Test existence of __remove_cv,\n\t__remove_reference and __remove_cvref.\n\t* g++.dg/ext/remove_cv.C: New test.\n\t* g++.dg/ext/remove_reference.C: New test.\n\t* g++.dg/ext/remove_cvref.C: New test.", "tree": {"sha": "689d3428db5ceea4aa86f800a8d59a1c8e9d300c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/689d3428db5ceea4aa86f800a8d59a1c8e9d300c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ca147154074a0de548138b4e73477e94903a855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca147154074a0de548138b4e73477e94903a855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ca147154074a0de548138b4e73477e94903a855", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca147154074a0de548138b4e73477e94903a855/comments", "author": null, "committer": null, "parents": [{"sha": "817e878a31671fcb68492bce35aa1ac87e08efdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/817e878a31671fcb68492bce35aa1ac87e08efdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/817e878a31671fcb68492bce35aa1ac87e08efdb"}], "stats": {"total": 162, "additions": 157, "deletions": 5}, "files": [{"sha": "6e0af863a493223246eb5e32041795e198c432ce", "filename": "gcc/c-family/c-common.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca147154074a0de548138b4e73477e94903a855/gcc%2Fc-family%2Fc-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca147154074a0de548138b4e73477e94903a855/gcc%2Fc-family%2Fc-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.cc?ref=9ca147154074a0de548138b4e73477e94903a855", "patch": "@@ -547,6 +547,9 @@ const struct c_common_resword c_common_reswords[] =\n \t\t\t\t\tD_CXXONLY },\n   { \"__reference_converts_from_temporary\", RID_REF_CONVERTS_FROM_TEMPORARY,\n \t\t\t\t\tD_CXXONLY },\n+  { \"__remove_cv\", RID_REMOVE_CV, D_CXXONLY },\n+  { \"__remove_reference\", RID_REMOVE_REFERENCE, D_CXXONLY },\n+  { \"__remove_cvref\", RID_REMOVE_CVREF, D_CXXONLY },\n \n   /* C++ transactional memory.  */\n   { \"synchronized\",\tRID_SYNCHRONIZED, D_CXX_OBJC | D_TRANSMEM },"}, {"sha": "d5c98d306ced973510c7c97acc9c690cede0920b", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca147154074a0de548138b4e73477e94903a855/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca147154074a0de548138b4e73477e94903a855/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=9ca147154074a0de548138b4e73477e94903a855", "patch": "@@ -187,6 +187,7 @@ enum rid\n   RID_IS_CONVERTIBLE,\t\tRID_IS_NOTHROW_CONVERTIBLE,\n   RID_REF_CONSTRUCTS_FROM_TEMPORARY,\n   RID_REF_CONVERTS_FROM_TEMPORARY,\n+  RID_REMOVE_CV, RID_REMOVE_REFERENCE, RID_REMOVE_CVREF,\n \n   /* C++11 */\n   RID_CONSTEXPR, RID_DECLTYPE, RID_NOEXCEPT, RID_NULLPTR, RID_STATIC_ASSERT,"}, {"sha": "ca73aff3f38c21fc3a82cf5313b34dd1566154ae", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca147154074a0de548138b4e73477e94903a855/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca147154074a0de548138b4e73477e94903a855/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=9ca147154074a0de548138b4e73477e94903a855", "patch": "@@ -3714,6 +3714,9 @@ diagnose_trait_expr (tree expr, tree args)\n     case CPTK_BASES:\n     case CPTK_DIRECT_BASES:\n     case CPTK_UNDERLYING_TYPE:\n+    case CPTK_REMOVE_CV:\n+    case CPTK_REMOVE_REFERENCE:\n+    case CPTK_REMOVE_CVREF:\n       /* We shouldn't see these non-expression traits.  */\n       gcc_unreachable ();\n     /* We deliberately omit the default case so that when adding a new"}, {"sha": "2d3f206b530869a79f137d82d84b2824d718b85c", "filename": "gcc/cp/cp-objcp-common.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca147154074a0de548138b4e73477e94903a855/gcc%2Fcp%2Fcp-objcp-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca147154074a0de548138b4e73477e94903a855/gcc%2Fcp%2Fcp-objcp-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.cc?ref=9ca147154074a0de548138b4e73477e94903a855", "patch": "@@ -467,6 +467,9 @@ names_builtin_p (const char *name)\n     case RID_IS_NOTHROW_CONVERTIBLE:\n     case RID_REF_CONSTRUCTS_FROM_TEMPORARY:\n     case RID_REF_CONVERTS_FROM_TEMPORARY:\n+    case RID_REMOVE_CV:\n+    case RID_REMOVE_REFERENCE:\n+    case RID_REMOVE_CVREF:\n       return true;\n     default:\n       break;"}, {"sha": "3cbcdf726caf7174a2fd80fabf4c3e4aedbd03c7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca147154074a0de548138b4e73477e94903a855/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca147154074a0de548138b4e73477e94903a855/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9ca147154074a0de548138b4e73477e94903a855", "patch": "@@ -1412,7 +1412,10 @@ enum cp_trait_kind\n   CPTK_IS_CONVERTIBLE,\n   CPTK_IS_NOTHROW_CONVERTIBLE,\n   CPTK_REF_CONSTRUCTS_FROM_TEMPORARY,\n-  CPTK_REF_CONVERTS_FROM_TEMPORARY\n+  CPTK_REF_CONVERTS_FROM_TEMPORARY,\n+  CPTK_REMOVE_CV,\n+  CPTK_REMOVE_REFERENCE,\n+  CPTK_REMOVE_CVREF,\n };\n \n /* The types that we are processing.  */"}, {"sha": "b91615439e40158e19ae0811bfe2f1c7ef2c3659", "filename": "gcc/cp/cxx-pretty-print.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca147154074a0de548138b4e73477e94903a855/gcc%2Fcp%2Fcxx-pretty-print.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca147154074a0de548138b4e73477e94903a855/gcc%2Fcp%2Fcxx-pretty-print.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.cc?ref=9ca147154074a0de548138b4e73477e94903a855", "patch": "@@ -2728,6 +2728,15 @@ pp_cxx_trait (cxx_pretty_printer *pp, tree t)\n     case CPTK_UNDERLYING_TYPE:\n       pp_cxx_ws_string (pp, \"__underlying_type\");\n       break;\n+    case CPTK_REMOVE_CV:\n+      pp_cxx_ws_string (pp, \"__remove_cv\");\n+      break;\n+    case CPTK_REMOVE_REFERENCE:\n+      pp_cxx_ws_string (pp, \"__remove_reference\");\n+      break;\n+    case CPTK_REMOVE_CVREF:\n+      pp_cxx_ws_string (pp, \"__remove_cvref\");\n+      break;\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "d592d783250ed154af3d44ad561182696f608dc1", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca147154074a0de548138b4e73477e94903a855/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca147154074a0de548138b4e73477e94903a855/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=9ca147154074a0de548138b4e73477e94903a855", "patch": "@@ -1147,6 +1147,9 @@ cp_keyword_starts_decl_specifier_p (enum rid keyword)\n       /* C++11 extensions.  */\n     case RID_DECLTYPE:\n     case RID_UNDERLYING_TYPE:\n+    case RID_REMOVE_CV:\n+    case RID_REMOVE_REFERENCE:\n+    case RID_REMOVE_CVREF:\n     case RID_CONSTEXPR:\n       /* C++20 extensions.  */\n     case RID_CONSTINIT:\n@@ -11027,6 +11030,18 @@ cp_parser_trait (cp_parser* parser, enum rid keyword)\n       kind = CPTK_REF_CONVERTS_FROM_TEMPORARY;\n       binary = true;\n       break;\n+    case RID_REMOVE_CV:\n+      kind = CPTK_REMOVE_CV;\n+      type = true;\n+      break;\n+    case RID_REMOVE_REFERENCE:\n+      kind = CPTK_REMOVE_REFERENCE;\n+      type = true;\n+      break;\n+    case RID_REMOVE_CVREF:\n+      kind = CPTK_REMOVE_CVREF;\n+      type = true;\n+      break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -19867,6 +19882,9 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n       return type;\n \n     case RID_UNDERLYING_TYPE:\n+    case RID_REMOVE_CV:\n+    case RID_REMOVE_REFERENCE:\n+    case RID_REMOVE_CVREF:\n       type = cp_parser_trait (parser, token->keyword);\n       if (decl_specs)\n \tcp_parser_set_decl_spec_type (decl_specs, type,"}, {"sha": "66ee2186a84e206de72445795eb7214ffa804340", "filename": "gcc/cp/semantics.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca147154074a0de548138b4e73477e94903a855/gcc%2Fcp%2Fsemantics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca147154074a0de548138b4e73477e94903a855/gcc%2Fcp%2Fsemantics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.cc?ref=9ca147154074a0de548138b4e73477e94903a855", "patch": "@@ -12240,6 +12240,16 @@ finish_trait_type (cp_trait_kind kind, tree type1, tree type2)\n     {\n     case CPTK_UNDERLYING_TYPE:\n       return finish_underlying_type (type1);\n+    case CPTK_REMOVE_CV:\n+      return cv_unqualified (type1);\n+    case CPTK_REMOVE_REFERENCE:\n+      if (TYPE_REF_P (type1))\n+\ttype1 = TREE_TYPE (type1);\n+      return type1;\n+    case CPTK_REMOVE_CVREF:\n+      if (TYPE_REF_P (type1))\n+\ttype1 = TREE_TYPE (type1);\n+      return cv_unqualified (type1);\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "f343e153e56c444af0e1cf776adb27a479ff2186", "filename": "gcc/testsuite/g++.dg/ext/has-builtin-1.C", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca147154074a0de548138b4e73477e94903a855/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas-builtin-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca147154074a0de548138b4e73477e94903a855/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas-builtin-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fhas-builtin-1.C?ref=9ca147154074a0de548138b4e73477e94903a855", "patch": "@@ -137,3 +137,12 @@\n #if !__has_builtin (__is_nothrow_convertible)\n # error \"__has_builtin (__is_nothrow_convertible) failed\"\n #endif\n+#if !__has_builtin (__remove_cv)\n+# error \"__has_builtin (__remove_cv) failed\"\n+#endif\n+#if !__has_builtin (__remove_reference)\n+# error \"__has_builtin (__remove_reference) failed\"\n+#endif\n+#if !__has_builtin (__remove_cvref)\n+# error \"__has_builtin (__remove_cvref) failed\"\n+#endif"}, {"sha": "cff7050e2ef22b5540a208c2ad0f43f3ef370961", "filename": "gcc/testsuite/g++.dg/ext/remove_cv.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca147154074a0de548138b4e73477e94903a855/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fremove_cv.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca147154074a0de548138b4e73477e94903a855/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fremove_cv.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fremove_cv.C?ref=9ca147154074a0de548138b4e73477e94903a855", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile { target c++11 } }\n+\n+#define SA(X) static_assert((X),#X)\n+\n+SA(__is_same(__remove_cv(void), void));\n+SA(__is_same(__remove_cv(int*), int*));\n+\n+SA(__is_same(__remove_cv(int&), int&));\n+SA(__is_same(__remove_cv(const int&), const int&));\n+SA(__is_same(__remove_cv(volatile int&), volatile int&));\n+SA(__is_same(__remove_cv(const volatile int&), const volatile int&));\n+\n+SA(__is_same(__remove_cv(int&&), int&&));\n+SA(__is_same(__remove_cv(const int&&), const int&&));\n+SA(__is_same(__remove_cv(volatile int&&), volatile int&&));\n+SA(__is_same(__remove_cv(const volatile int&&), const volatile int&&));\n+\n+SA(__is_same(__remove_cv(int[3]), int[3]));\n+SA(__is_same(__remove_cv(const int[3]), int[3]));\n+SA(__is_same(__remove_cv(volatile int[3]), int[3]));\n+SA(__is_same(__remove_cv(const volatile int[3]), int[3]));\n+\n+SA(__is_same(__remove_cv(int(int)), int(int)));\n+SA(__is_same(__remove_cv(int(*const)(int)), int(*)(int)));\n+SA(__is_same(__remove_cv(int(*volatile)(int)), int(*)(int)));\n+SA(__is_same(__remove_cv(int(*const volatile)(int)), int(*)(int)));\n+\n+template<class T> using const_non_volatile_t = const __remove_cv(T);\n+SA(__is_same(const_non_volatile_t<int>, const int));\n+SA(__is_same(const_non_volatile_t<volatile int>, const int));\n+SA(__is_same(const_non_volatile_t<int&>, int&));\n+SA(__is_same(const_non_volatile_t<const int&>, const int&));"}, {"sha": "109d54fadbc10a98d44e4c6f7b72ed2e9d389173", "filename": "gcc/testsuite/g++.dg/ext/remove_cvref.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca147154074a0de548138b4e73477e94903a855/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fremove_cvref.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca147154074a0de548138b4e73477e94903a855/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fremove_cvref.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fremove_cvref.C?ref=9ca147154074a0de548138b4e73477e94903a855", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile { target c++11 } }\n+\n+#define SA(X) static_assert((X),#X)\n+\n+SA(__is_same(__remove_cvref(void), void));\n+SA(__is_same(__remove_cvref(int*), int*));\n+\n+SA(__is_same(__remove_cvref(int&), int));\n+SA(__is_same(__remove_cvref(const int&), int));\n+SA(__is_same(__remove_cvref(volatile int&), int));\n+SA(__is_same(__remove_cvref(const volatile int&), int));\n+\n+SA(__is_same(__remove_cvref(int&&), int));\n+SA(__is_same(__remove_cvref(const int&&), int));\n+SA(__is_same(__remove_cvref(volatile int&&), int));\n+SA(__is_same(__remove_cvref(const volatile int&&), int));\n+\n+SA(__is_same(__remove_cvref(int[3]), int[3]));\n+SA(__is_same(__remove_cvref(const int[3]), int[3]));\n+SA(__is_same(__remove_cvref(volatile int[3]), int[3]));\n+SA(__is_same(__remove_cvref(const volatile int[3]), int[3]));\n+\n+SA(__is_same(__remove_cvref(int(int)), int(int)));\n+SA(__is_same(__remove_cvref(int(*const)(int)), int(*)(int)));\n+SA(__is_same(__remove_cvref(int(*volatile)(int)), int(*)(int)));\n+SA(__is_same(__remove_cvref(int(*const volatile)(int)), int(*)(int)));\n+\n+template<class T> using const_non_volatile_non_ref_t = const __remove_cvref(T);\n+SA(__is_same(const_non_volatile_non_ref_t<int>, const int));\n+SA(__is_same(const_non_volatile_non_ref_t<volatile int&>, const int));\n+SA(__is_same(const_non_volatile_non_ref_t<int&>, const int));\n+SA(__is_same(const_non_volatile_non_ref_t<const int&>, const int));"}, {"sha": "1a2580b523b62d52b08e25548097fe1a0dc508ab", "filename": "gcc/testsuite/g++.dg/ext/remove_reference.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca147154074a0de548138b4e73477e94903a855/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fremove_reference.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca147154074a0de548138b4e73477e94903a855/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fremove_reference.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fremove_reference.C?ref=9ca147154074a0de548138b4e73477e94903a855", "patch": "@@ -0,0 +1,32 @@\n+// { dg-do compile { target c++11 } }\n+\n+#define SA(X) static_assert((X),#X)\n+\n+SA(__is_same(__remove_reference(void), void));\n+SA(__is_same(__remove_reference(int*), int*));\n+\n+SA(__is_same(__remove_reference(int&), int));\n+SA(__is_same(__remove_reference(const int&), const int));\n+SA(__is_same(__remove_reference(volatile int&), volatile int));\n+SA(__is_same(__remove_reference(const volatile int&), const volatile int));\n+\n+SA(__is_same(__remove_reference(int&&), int));\n+SA(__is_same(__remove_reference(const int&&), const int));\n+SA(__is_same(__remove_reference(volatile int&&), volatile int));\n+SA(__is_same(__remove_reference(const volatile int&&), const volatile int));\n+\n+SA(__is_same(__remove_reference(int[3]), int[3]));\n+SA(__is_same(__remove_reference(const int[3]), const int[3]));\n+SA(__is_same(__remove_reference(volatile int[3]), volatile int[3]));\n+SA(__is_same(__remove_reference(const volatile int[3]), const volatile int[3]));\n+\n+SA(__is_same(__remove_reference(int(int)), int(int)));\n+SA(__is_same(__remove_reference(int(*const)(int)), int(*const)(int)));\n+SA(__is_same(__remove_reference(int(*volatile)(int)), int(*volatile)(int)));\n+SA(__is_same(__remove_reference(int(*const volatile)(int)), int(*const volatile)(int)));\n+\n+template<class T> using const_non_ref_t = const __remove_reference(T);\n+SA(__is_same(const_non_ref_t<int>, const int));\n+SA(__is_same(const_non_ref_t<volatile int&>, const volatile int));\n+SA(__is_same(const_non_ref_t<int&>, const int));\n+SA(__is_same(const_non_ref_t<const int&>, const int));"}, {"sha": "34c3a766179d77064b807b6e21b73437f8739786", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca147154074a0de548138b4e73477e94903a855/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca147154074a0de548138b4e73477e94903a855/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=9ca147154074a0de548138b4e73477e94903a855", "patch": "@@ -541,14 +541,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       __uniq_ptr_data<_Tp, _Dp> _M_t;\n \n-      template<typename _Up>\n-\tusing __remove_cv = typename remove_cv<_Up>::type;\n-\n       // like is_base_of<_Tp, _Up> but false if unqualified types are the same\n       template<typename _Up>\n \tusing __is_derived_Tp\n \t  = __and_< is_base_of<_Tp, _Up>,\n-\t\t    __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;\n+\t\t    __not_<is_same<__remove_cv_t<_Tp>, __remove_cv_t<_Up>>> >;\n \n     public:\n       using pointer\t  = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;"}]}