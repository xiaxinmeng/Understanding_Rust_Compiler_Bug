{"sha": "b8ebd779d58b4d16199b2b1fe70e37e4c3d38571", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhlYmQ3NzlkNThiNGQxNjE5OWIyYjFmZTcwZTM3ZTRjM2QzODU3MQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-05-06T19:51:19Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-05-06T19:51:19Z"}, "message": "unroll.c (loop_iterations): Don't sign-extend abs_diff; zero-extend it.\n\n* unroll.c (loop_iterations): Don't sign-extend abs_diff;\nzero-extend it.  Make abs_inc unsigned.\n\nFrom-SVN: r41886", "tree": {"sha": "d1e8dd7125f97466a3b431c8620b350ef00f92f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1e8dd7125f97466a3b431c8620b350ef00f92f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8ebd779d58b4d16199b2b1fe70e37e4c3d38571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ebd779d58b4d16199b2b1fe70e37e4c3d38571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8ebd779d58b4d16199b2b1fe70e37e4c3d38571", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ebd779d58b4d16199b2b1fe70e37e4c3d38571/comments", "author": null, "committer": null, "parents": [{"sha": "3c04502e2b0443114b2057dd2383308b3078cf7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c04502e2b0443114b2057dd2383308b3078cf7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c04502e2b0443114b2057dd2383308b3078cf7c"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "194bcc4148a0a8080d2219a9f210aeb16d67dc79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ebd779d58b4d16199b2b1fe70e37e4c3d38571/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ebd779d58b4d16199b2b1fe70e37e4c3d38571/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8ebd779d58b4d16199b2b1fe70e37e4c3d38571", "patch": "@@ -1,5 +1,8 @@\n 2001-05-06  Alexandre Oliva  <aoliva@redhat.com>\n \n+\t* unroll.c (loop_iterations): Don't sign-extend abs_diff;\n+\tzero-extend it.  Make abs_inc unsigned.\n+\n \t* optabs.c (expand_binop): Sign-extend xop0 and xop1 from the\n \twidest mode in narrowing and widening operations.\n "}, {"sha": "71c96f68987916008be8a4b115e5add9fb60190d", "filename": "gcc/unroll.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8ebd779d58b4d16199b2b1fe70e37e4c3d38571/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8ebd779d58b4d16199b2b1fe70e37e4c3d38571/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=b8ebd779d58b4d16199b2b1fe70e37e4c3d38571", "patch": "@@ -3451,7 +3451,8 @@ loop_iterations (loop)\n   rtx comparison, comparison_value;\n   rtx iteration_var, initial_value, increment, final_value;\n   enum rtx_code comparison_code;\n-  HOST_WIDE_INT abs_inc;\n+  HOST_WIDE_INT inc;\n+  unsigned HOST_WIDE_INT abs_inc;\n   unsigned HOST_WIDE_INT abs_diff;\n   int off_by_one;\n   int increment_dir;\n@@ -3951,18 +3952,27 @@ loop_iterations (loop)\n      so correct for that.  Note that abs_diff and n_iterations are\n      unsigned, because they can be as large as 2^n - 1.  */\n \n-  abs_inc = INTVAL (increment);\n-  if (abs_inc > 0)\n-    abs_diff = INTVAL (final_value) - INTVAL (initial_value);\n-  else if (abs_inc < 0)\n+  inc = INTVAL (increment);\n+  if (inc > 0)\n+    {\n+      abs_diff = INTVAL (final_value) - INTVAL (initial_value);\n+      abs_inc = inc;\n+    }\n+  else if (inc < 0)\n     {\n       abs_diff = INTVAL (initial_value) - INTVAL (final_value);\n-      abs_inc = -abs_inc;\n+      abs_inc = -inc;\n     }\n   else\n     abort ();\n \n-  abs_diff = trunc_int_for_mode (abs_diff, GET_MODE (iteration_var));\n+  /* Given that iteration_var is going to iterate over its own mode,\n+     not HOST_WIDE_INT, disregard higher bits that might have come\n+     into the picture due to sign extension of initial and final\n+     values.  */\n+  abs_diff &= ((unsigned HOST_WIDE_INT)1\n+\t       << (GET_MODE_BITSIZE (GET_MODE (iteration_var)) - 1)\n+\t       << 1) - 1;\n \n   /* For NE tests, make sure that the iteration variable won't miss\n      the final value.  If abs_diff mod abs_incr is not zero, then the"}]}