{"sha": "fb15e2bab5267213b8706fa6a29eeef94f62a524", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIxNWUyYmFiNTI2NzIxM2I4NzA2ZmE2YTI5ZWVlZjk0ZjYyYTUyNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-20T19:29:25Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-21T16:22:12Z"}, "message": "aarch64: Fix SVE ACLE handling of SImode pointers\n\nThis long-overdue patch promotes SImode pointers to DImode addresses,\navoiding various ICEs in the existing tests.\n\n2020-01-21  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve-builtins.h\n\t(function_expander::convert_to_pmode): Declare.\n\t* config/aarch64/aarch64-sve-builtins.cc\n\t(function_expander::convert_to_pmode): New function.\n\t(function_expander::get_contiguous_base): Use it.\n\t(function_expander::prepare_gather_address_operands): Likewise.\n\t* config/aarch64/aarch64-sve-builtins-sve2.cc\n\t(svwhilerw_svwhilewr_impl::expand): Likewise.", "tree": {"sha": "7babce9748b6b088d6d4baf6652971b0a91cfad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7babce9748b6b088d6d4baf6652971b0a91cfad6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb15e2bab5267213b8706fa6a29eeef94f62a524", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb15e2bab5267213b8706fa6a29eeef94f62a524", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb15e2bab5267213b8706fa6a29eeef94f62a524", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb15e2bab5267213b8706fa6a29eeef94f62a524/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c292cfe539cd7c060caad826d362ed5e845bfbef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c292cfe539cd7c060caad826d362ed5e845bfbef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c292cfe539cd7c060caad826d362ed5e845bfbef"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "63ff0bf0d83b716daa708127b4258349a586929f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb15e2bab5267213b8706fa6a29eeef94f62a524/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb15e2bab5267213b8706fa6a29eeef94f62a524/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb15e2bab5267213b8706fa6a29eeef94f62a524", "patch": "@@ -1,3 +1,14 @@\n+2020-01-21  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve-builtins.h\n+\t(function_expander::convert_to_pmode): Declare.\n+\t* config/aarch64/aarch64-sve-builtins.cc\n+\t(function_expander::convert_to_pmode): New function.\n+\t(function_expander::get_contiguous_base): Use it.\n+\t(function_expander::prepare_gather_address_operands): Likewise.\n+\t* config/aarch64/aarch64-sve-builtins-sve2.cc\n+\t(svwhilerw_svwhilewr_impl::expand): Likewise.\n+\n 2020-01-21  Szabolcs Nagy  <szabolcs.nagy@arm.com>\n \n \tPR target/92424"}, {"sha": "53b16511623699eee4b30a0dd73af32c7ef80663", "filename": "gcc/config/aarch64/aarch64-sve-builtins-sve2.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb15e2bab5267213b8706fa6a29eeef94f62a524/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb15e2bab5267213b8706fa6a29eeef94f62a524/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc?ref=fb15e2bab5267213b8706fa6a29eeef94f62a524", "patch": "@@ -442,6 +442,8 @@ class svwhilerw_svwhilewr_impl : public full_width_access\n   rtx\n   expand (function_expander &e) const OVERRIDE\n   {\n+    for (unsigned int i = 0; i < 2; ++i)\n+      e.args[i] = e.convert_to_pmode (e.args[i]);\n     return e.use_exact_insn (code_for_while (m_unspec, Pmode, e.gp_mode (0)));\n   }\n "}, {"sha": "3d1b610cfd6ebaa1d4805c99d0179660c248501e", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb15e2bab5267213b8706fa6a29eeef94f62a524/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb15e2bab5267213b8706fa6a29eeef94f62a524/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=fb15e2bab5267213b8706fa6a29eeef94f62a524", "patch": "@@ -2602,12 +2602,21 @@ function_expander::overlaps_input_p (rtx x)\n   return false;\n }\n \n+/* Convert ptr_mode value X to Pmode.  */\n+rtx\n+function_expander::convert_to_pmode (rtx x)\n+{\n+  if (ptr_mode == SImode)\n+    x = simplify_gen_unary (ZERO_EXTEND, DImode, x, SImode);\n+  return x;\n+}\n+\n /* Return the base address for a contiguous load or store function.\n    MEM_MODE is the mode of the addressed memory.  */\n rtx\n function_expander::get_contiguous_base (machine_mode mem_mode)\n {\n-  rtx base = args[1];\n+  rtx base = convert_to_pmode (args[1]);\n   if (mode_suffix_id == MODE_vnum)\n     {\n       /* Use the size of the memory mode for extending loads and truncating\n@@ -2814,9 +2823,7 @@ function_expander::prepare_gather_address_operands (unsigned int argno,\n     {\n       /* Scalar base, vector displacement.  This is the order that the md\n \t pattern wants.  */\n-      if (Pmode == SImode)\n-\targs[argno] = simplify_gen_unary (ZERO_EXTEND, DImode,\n-\t\t\t\t\t  args[argno], SImode);\n+      args[argno] = convert_to_pmode (args[argno]);\n       vector_type = displacement_vector_type ();\n       if (units == UNITS_elements && !scaled_p)\n \tshift_idx = argno + 1;"}, {"sha": "9513b4973683eae86fd68b51b84d2d65fce04e0f", "filename": "gcc/config/aarch64/aarch64-sve-builtins.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb15e2bab5267213b8706fa6a29eeef94f62a524/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb15e2bab5267213b8706fa6a29eeef94f62a524/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.h?ref=fb15e2bab5267213b8706fa6a29eeef94f62a524", "patch": "@@ -526,6 +526,7 @@ class function_expander : public function_call_info\n \n   bool overlaps_input_p (rtx);\n \n+  rtx convert_to_pmode (rtx);\n   rtx get_contiguous_base (machine_mode);\n   rtx get_fallback_value (machine_mode, unsigned int,\n \t\t\t  unsigned int, unsigned int &);"}]}