{"sha": "1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ1ZjMwMjFjMWNkNjU2NWY2MmJmN2ZiNDdhZDViNjBhZWEzY2NmMA==", "commit": {"author": {"name": "Ond\u0159ej B\u00edlka", "email": "neleai@seznam.cz", "date": "2013-07-21T16:17:52Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2013-07-21T16:17:52Z"}, "message": "pr41779.c: Fix typos.\n\n2013-07-21   Ond\u00c5\u0099ej B\u00c3\u00adlka  <neleai@seznam.cz>\n\n\t* c-c++-common/pr41779.c: Fix typos.\n\t* gcc.c-torture/compile/20031125-2.c: Likewise.\n\t* gcc.c-torture/compile/20040621-1.c: Likewise.\n\t* gcc.c-torture/execute/20020418-1.c: Likewise.\n\t* gcc.dg/20020108-1.c: Likewise.\n\t* gcc.dg/atomic-generic-aux.c: Likewise.\n\t* gcc.dg/builtin-complex-err-2.c: Likewise.\n\t* gcc.dg/decl-1.c: Likewise.\n\t* gcc.dg/di-sync-multithread.c: Likewise.\n\t* gcc.dg/format/c90-printf-1.c: Likewise.\n\t* gcc.dg/format/ms_c90-printf-1.c: Likewise.\n\t* gcc.dg/long-long-compare-1.c: Likewise.\n\t* gcc.dg/plugin/start_unit_plugin.c: Likewise.\n\t* gcc.dg/pr17055-1.c: Likewise.\n\t* gcc.dg/pr27095.c: Likewise.\n\t* gcc.dg/torture/fp-int-convert.h: Likewise.\n\t* gcc.dg/tree-prof/inliner-1.c: Likewise.\n\t* gcc.dg/tree-ssa/20030731-1.c: Likewise.\n\t* gcc.dg/tree-ssa/forwprop-6.c: Likewise.\n\t* gcc.dg/tree-ssa/ipa-cp-1.c: Likewise.\n\t* gcc.dg/tree-ssa/loop-19.c: Likewise.\n\t* gcc.dg/tree-ssa/loop-1.c: Likewise.\n\t* gcc.dg/tree-ssa/pr21001.c: Likewise.\n\t* gcc.dg/tree-ssa/pr42585.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dse-5.c: Likewise.\n\t* gcc.dg/vect/vect-cond-5.c: Likewise.\n\t* gcc.dg/weak/typeof-2.c: Likewise.\n\t* gcc.target/aarch64/aapcs64/abitest-common.h: Likewise.\n\t* gcc.target/arm/naked-1.c: Likewise.\n\t* gcc.target/i386/pr9771-1.c: Likewise.\n\t* gcc.target/sparc/sparc-constant-1.c: Likewise.\n\t* gcc.target/sparc/struct-ret-check.c: Likewise.\n\t* gcc.target/x86_64/abi/test_struct_returning.c: Likewise.\n\t* gfortran.dg/c_ptr_tests_8_funcs.c: Likewise.\n\t* objc-obj-c++-shared/objc-test-suite-next-encode-assist-impl.h: Likewise.\n\nFrom-SVN: r201098", "tree": {"sha": "3e03c9f934ec5aba4df346a00ca1eae121c626b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e03c9f934ec5aba4df346a00ca1eae121c626b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/comments", "author": {"login": "neleai", "id": 48067, "node_id": "MDQ6VXNlcjQ4MDY3", "avatar_url": "https://avatars.githubusercontent.com/u/48067?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neleai", "html_url": "https://github.com/neleai", "followers_url": "https://api.github.com/users/neleai/followers", "following_url": "https://api.github.com/users/neleai/following{/other_user}", "gists_url": "https://api.github.com/users/neleai/gists{/gist_id}", "starred_url": "https://api.github.com/users/neleai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neleai/subscriptions", "organizations_url": "https://api.github.com/users/neleai/orgs", "repos_url": "https://api.github.com/users/neleai/repos", "events_url": "https://api.github.com/users/neleai/events{/privacy}", "received_events_url": "https://api.github.com/users/neleai/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cad10e055f078039ad10c2582d18a4441f4c9cad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad10e055f078039ad10c2582d18a4441f4c9cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cad10e055f078039ad10c2582d18a4441f4c9cad"}], "stats": {"total": 108, "additions": 73, "deletions": 35}, "files": [{"sha": "4d4ba1d5ccf305a8d38b0ab4fae3e082fade59a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -1,3 +1,41 @@\n+2013-07-21   Ond\u00c5\u0099ej B\u00c3\u00adlka  <neleai@seznam.cz>\n+\n+\t* c-c++-common/pr41779.c: Fix typos.\n+\t* gcc.c-torture/compile/20031125-2.c: Likewise.\n+\t* gcc.c-torture/compile/20040621-1.c: Likewise.\n+\t* gcc.c-torture/execute/20020418-1.c: Likewise.\n+\t* gcc.dg/20020108-1.c: Likewise.\n+\t* gcc.dg/atomic-generic-aux.c: Likewise.\n+\t* gcc.dg/builtin-complex-err-2.c: Likewise.\n+\t* gcc.dg/decl-1.c: Likewise.\n+\t* gcc.dg/di-sync-multithread.c: Likewise.\n+\t* gcc.dg/format/c90-printf-1.c: Likewise.\n+\t* gcc.dg/format/ms_c90-printf-1.c: Likewise.\n+\t* gcc.dg/long-long-compare-1.c: Likewise.\n+\t* gcc.dg/plugin/start_unit_plugin.c: Likewise.\n+\t* gcc.dg/pr17055-1.c: Likewise.\n+\t* gcc.dg/pr27095.c: Likewise.\n+\t* gcc.dg/torture/fp-int-convert.h: Likewise.\n+\t* gcc.dg/tree-prof/inliner-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/20030731-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/forwprop-6.c: Likewise.\n+\t* gcc.dg/tree-ssa/ipa-cp-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/loop-19.c: Likewise.\n+\t* gcc.dg/tree-ssa/loop-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr21001.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr42585.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dse-5.c: Likewise.\n+\t* gcc.dg/vect/vect-cond-5.c: Likewise.\n+\t* gcc.dg/weak/typeof-2.c: Likewise.\n+\t* gcc.target/aarch64/aapcs64/abitest-common.h: Likewise.\n+\t* gcc.target/arm/naked-1.c: Likewise.\n+\t* gcc.target/i386/pr9771-1.c: Likewise.\n+\t* gcc.target/sparc/sparc-constant-1.c: Likewise.\n+\t* gcc.target/sparc/struct-ret-check.c: Likewise.\n+\t* gcc.target/x86_64/abi/test_struct_returning.c: Likewise.\n+\t* gfortran.dg/c_ptr_tests_8_funcs.c: Likewise.\n+\t* objc-obj-c++-shared/objc-test-suite-next-encode-assist-impl.h: Likewise.\n+\n 2013-07-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/56937"}, {"sha": "f80412c3a9f34e6bc02ab172f6f2123c8c5f4edc", "filename": "gcc/testsuite/c-c++-common/pr41779.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr41779.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr41779.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr41779.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -1,4 +1,4 @@\n-/* PR41779: Wconversion cannot see throught real*integer promotions. */\n+/* PR41779: Wconversion cannot see thought real*integer promotions. */\n /* { dg-do compile } */\n /* { dg-skip-if \"doubles are floats\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n /* { dg-options \"-std=c99 -Wconversion\" { target c } } */"}, {"sha": "fc16051a2d057ac2fd53138d131af0f6d760df4e", "filename": "gcc/testsuite/gcc.c-torture/compile/20031125-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031125-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031125-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20031125-2.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -1,7 +1,7 @@\n struct BlobSpan {\n \tint right;\n };\n-/* This test makes sure we don't accidently cause a bad insertion to occur\n+/* This test makes sure we don't accidentally cause a bad insertion to occur\n    by choosing the wrong variable name so that we end up with a use not\n    dominated by a def. */\n void render_blob_line(struct BlobSpan blobdata) {"}, {"sha": "cefa9cedf68037d649e1d52362feb2bd4685fa2e", "filename": "gcc/testsuite/gcc.c-torture/compile/20040621-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040621-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040621-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20040621-1.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -1,4 +1,4 @@\n-/* This test woudl cause partial redundancies too complex for PRE\n+/* This test would cause partial redundancies too complex for PRE\n    to insert using a single temporary due to them not being GIMPLE\n    expressions.  */\n int ssbgst (int c, int k)"}, {"sha": "4826ca88664c1ecd2b5a93c5340352ad737526c8", "filename": "gcc/testsuite/gcc.c-torture/execute/20020418-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020418-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020418-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020418-1.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -1,4 +1,4 @@\n-/* ifcvt accidently deletes a referenced label while generating\n+/* ifcvt accidentally deletes a referenced label while generating\n    conditional traps on machines having such patterns */\n \n struct foo { int a; };"}, {"sha": "89ffcaa12b9f552bb84a97fd8301f45bf77f5780", "filename": "gcc/testsuite/gcc.dg/20020108-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2F20020108-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2F20020108-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020108-1.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -1,7 +1,7 @@\n /* This testcase failed on i686 because (const_int -1) was changed into\n    (const_int 0xffff) when storing it into SImode pseudo, but was not\n    converted back to (const_int -1) when returning from store_expr,\n-   eventhough target was (subreg:HI (reg/v:SI indx)).  But (const_int 0xffff)\n+   even though target was (subreg:HI (reg/v:SI indx)).  But (const_int 0xffff)\n    is not valid general_operand in HImode.  */\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */"}, {"sha": "73e1ed85393c15a951734bcf1c0a521a6b876c43", "filename": "gcc/testsuite/gcc.dg/atomic-generic-aux.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-generic-aux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-generic-aux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-generic-aux.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -20,7 +20,7 @@ __atomic_exchange (size_t size, void *obj, void *val, void *ret, int model)\n \n \n /* Note that the external version of this routine has the boolean weak/strong\n-   parameter removed.  This is required by teh external library.  */\n+   parameter removed.  This is required by the external library.  */\n bool\n __atomic_compare_exchange (size_t size, void *obj, void *expected,\n \t\t\t   void *desired, int model1, int model2)"}, {"sha": "be5ff65fdab9e21d5dcc412f0afdd0a9ecee9e0f", "filename": "gcc/testsuite/gcc.dg/builtin-complex-err-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-complex-err-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-complex-err-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-complex-err-2.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -1,4 +1,4 @@\n-/* Test __builtin_complex errors.  Verify it does nto allow quiet\n+/* Test __builtin_complex errors.  Verify it does not allow quiet\n    creation of complex types in C90.  */\n /* { dg-do compile } */\n /* { dg-options \"-std=c90 -pedantic-errors\" } */"}, {"sha": "348bb92eb816041aca6a4c779741a51814779085", "filename": "gcc/testsuite/gcc.dg/decl-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-1.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -3,7 +3,7 @@\n    Source: Neil Booth, 12 Feb 2002.\n \n    In the declaration of proc, x must be parsed as a typedef name (C99\n-   6.7.5.3 p11.  Also see C89 DR #009, which was erroneously ommitted\n+   6.7.5.3 p11.  Also see C89 DR #009, which was erroneously omitted\n    from C99, and resubmitted as DR #249: if in a parameter\n    declaration, an identifier can be read as a typedef name or a\n    paramter name, it is read as a typedef name).  */"}, {"sha": "493f1e272016f83f0f2cef71202445b8731f532b", "filename": "gcc/testsuite/gcc.dg/di-sync-multithread.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fdi-sync-multithread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fdi-sync-multithread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdi-sync-multithread.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -66,8 +66,8 @@ worker (void* data)\n       /* OK, lets try and do some stuff to the workspace - by the end\n          of the main loop our area should be the same as it is now - i.e. 0.  */\n \n-      /* Push the arithmetic section upto 128 - one of the threads will\n-         case this to carry accross the 32bit boundary.  */\n+      /* Push the arithmetic section up to 128 - one of the threads will\n+         case this to carry across the 32bit boundary.  */\n       for (tmp2 = 0; tmp2 < 64; tmp2++)\n \t{\n \t  /* Add 2 using the two different adds.  */"}, {"sha": "93b7f80a16263e446865d3e4169cf19509aa0bba", "filename": "gcc/testsuite/gcc.dg/format/c90-printf-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -209,7 +209,7 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   */\n   printf (\"%s\", p); /* { dg-warning \"format\" \"bad argument types\" } */\n   /* The historical behavior is to allow signed / unsigned types\n-     interchangably as arguments.  For values representable in both types,\n+     interchangeably as arguments.  For values representable in both types,\n      such usage may be correct.  For now preserve the behavior of GCC\n      in such cases.\n   */"}, {"sha": "d2c839f615a68770312a4878f818cb4fdc7883b8", "filename": "gcc/testsuite/gcc.dg/format/ms_c90-printf-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fms_c90-printf-1.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -161,7 +161,7 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   */\n   printf (\"%s\", p); /* { dg-warning \"format\" \"bad argument types\" } */\n   /* The historical behavior is to allow signed / unsigned types\n-     interchangably as arguments.  For values representable in both types,\n+     interchangeably as arguments.  For values representable in both types,\n      such usage may be correct.  For now preserve the behavior of GCC\n      in such cases.\n   */"}, {"sha": "2c378602072f323890cb17850c9a454e3eba8088", "filename": "gcc/testsuite/gcc.dg/long-long-compare-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Flong-long-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Flong-long-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flong-long-compare-1.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -1,5 +1,5 @@\n /* Problem only noticed on SH for -mcbranchdi DImode comparison with constants.\n- * Target dependant failure but test valid for alls.  */\n+ * Target dependent failure but test valid for alls.  */\n /* { dg-do run } */\n /* { dg-options \"-O0\" } */\n /* { dg-options \"-O0 -mcbranchdi\" { target sh4-*-* } } */"}, {"sha": "852ab88bfc75ab1a77c36938af12cfa78e76cb3b", "filename": "gcc/testsuite/gcc.dg/plugin/start_unit_plugin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fstart_unit_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fstart_unit_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fstart_unit_plugin.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -1,7 +1,7 @@\n /* This plugin tests the correct operation of a PLUGIN_START_UNIT callback.\n  * By the time a PLUGIN_START_UNIT callback is invoked, the frontend \n  * initialization should have completed. At least the different *_type_nodes\n- * should have been created. This plugin creates an artifical global \n+ * should have been created. This plugin creates an artificial global \n  * interger variable.\n  * \n */"}, {"sha": "31037ab26632801538a0658b2513db652d40ca85", "filename": "gcc/testsuite/gcc.dg/pr17055-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17055-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17055-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17055-1.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -3,7 +3,7 @@\n /* { dg-options \"-O2 -ffast-math\" } */\n /* { dg-additional-options \"-fno-common\" { target hppa*-*-hpux* } } */\n \n-/* This test used to abort, beacuse we do an \"integer\" fold to zero, i.e.\n+/* This test used to abort, because we do an \"integer\" fold to zero, i.e.\n    x - x = (T)0 where T is the type of x.  Unfortunately, fold_convert\n    was unable to convert integer_zero_node to the appropriate vector type.  */\n "}, {"sha": "3fb490924a8602a1409d0ecad2ecf656f3e36f47", "filename": "gcc/testsuite/gcc.dg/pr27095.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27095.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27095.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27095.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-O2\" } */\n \n /* On MIPS, disable generating hints (R_MIPS_JALR) for PIC calls.  In addition\n-   to the load from the GOT this also contains the name of the funtion so for\n+   to the load from the GOT this also contains the name of the function so for\n    each call the function name would appear twice.  */\n /* { dg-options \"-O2 -mno-relax-pic-calls\" { target mips*-*-* } } */\n "}, {"sha": "8ac9c3de1ac945f7ff35a63ade19686610f7ba9e", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert.h?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -19,7 +19,7 @@ typedef unsigned long UTItype;\n    and unsigned integer types I and U and the floating-point type F,\n    where P is the binary precision of the floating point type.  We\n    test conversions of the values 0, 1, 0x7...f, 0x8...0, 0xf...f.  We\n-   also test conversions of values half way inbetween two\n+   also test conversions of values half way between two\n    representable values (rounding both ways), just above half way, and\n    just below half way.  */\n #define TEST_I_F(I, U, F, P)\t\t\t\t\t\\"}, {"sha": "e44887b529e6129d00141aa1fbb7bf2fb909798c", "filename": "gcc/testsuite/gcc.dg/tree-prof/inliner-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Finliner-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Finliner-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Finliner-1.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -36,7 +36,7 @@ main ()\n \n /* cold function should be inlined, while hot function should not.  \n    Look for \"cold_function () [tail call];\" call statement not for the\n-   declaration or other apperances of the string in dump.  */\n+   declaration or other appearances of the string in dump.  */\n /* { dg-final-use { scan-tree-dump \"cold_function ..;\" \"optimized\"} } */\n /* { dg-final-use { scan-tree-dump-not \"hot_function ..;\" \"optimized\"} } */\n /* { dg-final-use { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "f90acd078ecf6434fea823309a4906fff402d4a2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20030731-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030731-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030731-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20030731-1.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -56,7 +56,7 @@ store_expr (exp, target, want_value)\n     ;\n }\n \n-/* All paths to the test \"target != 0\" occuring in the final IF statement\n+/* All paths to the test \"target != 0\" occurring in the final IF statement\n    dereference target.  Thus target can not have the value zero at that\n    point and the test should have been eliminated.  */\n /* ??? The dominator walker (A) doesn't merge this data at joins and"}, {"sha": "4106b33162eed7a985dbcf29191e865e54ea1f62", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-6.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -22,7 +22,7 @@ void f(void)\n    particular situation before doing this transformation we have to\n    assure that a is killed by a dominating store via type float for\n    it to be valid.  Then we might as well handle the situation by\n-   value-numbering, removing the load alltogether.\n+   value-numbering, removing the load altogether.\n    ???  We now do this after CPP re-writes a into SSA form.  */\n /* { dg-final { scan-tree-dump-times \"VIEW_CONVERT_EXPR\" 1 \"forwprop1\" } } */\n /* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "5d087aa45dd3204d72db359555712b4e1fb4be0b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ipa-cp-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-cp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-cp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-cp-1.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -15,6 +15,6 @@ blah ()\n {\n   very_long_function (1);\n }\n-/* One appereance for dump, one self recursive call and one call from main.  */\n+/* One appearance for dump, one self recursive call and one call from main.  */\n /* { dg-final { scan-tree-dump-times \"very_long_function.constprop.0 \\\\(\\\\)\" 3 \"optimized\"} } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "91220d80cea37f3f7627aac3eaa972acf9035341", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -14,7 +14,7 @@\n /* { dg-options \"-O1 -ftree-loop-ivcanon -funroll-loops -fdump-tree-ivcanon-details -fdump-tree-cunroll-details -fdump-tree-optimized -static\" { target *-*-darwin* } } */\n \n /* On MIPS, disable generating hints (R_MIPS_JALR) for PIC calls.  In addition\n-   to the load from the GOT this also contains the name of the funtion so for\n+   to the load from the GOT this also contains the name of the function so for\n    each call the function name would appear twice.  */\n /* { dg-options \"-O1 -ftree-loop-ivcanon -funroll-loops -fdump-tree-ivcanon-details -fdump-tree-cunroll-details -fdump-tree-optimized -mno-relax-pic-calls\" { target mips*-*-* } } */\n __attribute__ ((pure))"}, {"sha": "74b60a054b71bebd5499ac0fbd77499aa093cf63", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-19.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -20,7 +20,7 @@ void tuned_STREAM_Copy()\n /* Check that the memory references are based on &a and &c, with appropriate\n    offsets.  Ideally, we would want each of them to appear once in the output.\n    However, due to a bug in jump threading, we end up peeling one iteration from\n-   the loop, which creates an additional occurence.  */\n+   the loop, which creates an additional occurrence.  */\n \n /* { dg-final { scan-tree-dump-times \"MEM.(base: &|symbol: )a,\" 2 \"optimized\" } } */\n /* { dg-final { scan-tree-dump-times \"MEM.(base: &|symbol: )c,\" 2 \"optimized\" } } */"}, {"sha": "888d609aea477afb6ea9fb8e0992ccaf3822c17b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21001.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21001.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21001.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21001.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -2,7 +2,7 @@\n    VRP did not insert ASSERT_EXPRs when the variable tested in a\n    COND_EXPR is a single-use variable.  By propagating the definition\n    of the single-use variable into the COND_EXPR, we can get useful\n-   range infomation out of the conditional.  */\n+   range information out of the conditional.  */\n \n /* { dg-do compile } */\n /* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-vrp1-details\" } */"}, {"sha": "f3d8459cc7d44b22c22302678b4a81f5b1063847", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr42585.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr42585.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr42585.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr42585.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -33,7 +33,7 @@ Cyc_string_ungetc (int ignore, struct _fat_ptr *sptr)\n \n /* The local aggregates . */\n /* Whether the structs are totally scalarized or not depends on the\n-   MOVE_RATIO macro defintion in the back end.  The scalarization will\n+   MOVE_RATIO macro definition in the back end.  The scalarization will\n    not take place when using small values for MOVE_RATIO.  */\n /* { dg-final { scan-tree-dump-times \"struct _fat_ptr _ans\" 0 \"optimized\" { target { ! \"arm*-*-* powerpc*-*-* s390*-*-* sh*-*-*\" } } } } */\n /* { dg-final { scan-tree-dump-times \"struct _fat_ptr _T2\" 0 \"optimized\" { target { ! \"arm*-*-* powerpc*-*-* s390*-*-* sh*-*-*\" } } } } */"}, {"sha": "76e2004b0eb01628d0559f998cf67e20722b06b8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-5.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -12,7 +12,7 @@ f1 (int i, int j, int k)\n   x = j; \n } \n \n-/* The assignment \"i = 3\" is partialy dead.  Our DSE pass doesn't handle\n+/* The assignment \"i = 3\" is partially dead.  Our DSE pass doesn't handle\n    detection of partially dead assignments.\n \n    There's two outputs which would indicate that the optimization was"}, {"sha": "e8adedbe411bae2b24ba65ee9124104d052db739", "filename": "gcc/testsuite/gcc.dg/vect/vect-cond-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-cond-5.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -53,7 +53,7 @@ int main ()\n   return 0;\n }\n \n-/* Double reduction with cond_expr is not supported, since eventhough the order \n+/* Double reduction with cond_expr is not supported, since even though the order \n    of computation is the same, but vector results should be reduced to scalar\n    result, which can'be done for cond_expr.  */\n /* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail *-*-* } } } */"}, {"sha": "45a12ebf918986ed29cbae92074e8e2e565fd6b4", "filename": "gcc/testsuite/gcc.dg/weak/typeof-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Ftypeof-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Ftypeof-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Ftypeof-2.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -33,7 +33,7 @@ int bar3 (int x)\n // { dg-final { scan-assembler \"baz2\" } }\n // { dg-final { scan-assembler-not \"baz2.*baz2.*baz2.*baz2.*baz2.*baz2\" } }\n // { dg-final { scan-assembler-not \"foo3\" } }\n-// SH targets put the funtion address into a constant pool and / or register,\n+// SH targets put the function address into a constant pool and / or register,\n // so it does not appear repeated (as much as expected) in the assembler.\n // { dg-final { global target_triplet } }\n // { dg-final { if [string match sh-*-* $target_triplet ] {return} } }"}, {"sha": "4e2ef0dace8ff934cbe513dbbb9953b77ee95b21", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/abitest-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Fabitest-common.h?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -86,7 +86,7 @@ extern void dumpregs () __asm(\"myfunc\");\n \n #ifdef RUNTIME_ENDIANNESS_CHECK\n #ifndef RUNTIME_ENDIANNESS_CHECK_FUNCTION_DEFINED\n-/* This helper funtion defined to detect whether there is any incompatibility\n+/* This helper function defined to detect whether there is any incompatibility\n    issue on endianness between compilation time and run-time environments.\n    TODO: review the implementation when the work of big-endian support in A64\n    GCC starts."}, {"sha": "fefffae8123ce8f0b95bb7a14b9251b4527bf2c1", "filename": "gcc/testsuite/gcc.target/arm/naked-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnaked-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnaked-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnaked-1.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O0\" } */\n /* Check that function arguments aren't assigned and copied to stack slots\n-   in naked functions.  This ususally happens at -O0 (presumably for\n+   in naked functions.  This usually happens at -O0 (presumably for\n    better debugging), but is highly undesirable if we haven't created\n    a stack frame.  */\n void __attribute__((naked))"}, {"sha": "520259c965c76014e17aefa3c3d30c4eecc936b6", "filename": "gcc/testsuite/gcc.target/i386/pr9771-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr9771-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr9771-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr9771-1.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -28,7 +28,7 @@ void foo()\n   *adr = save;\n }\n \n-/* This must not be inlined becuase main() requires the frame pointer\n+/* This must not be inlined because main() requires the frame pointer\n    for stack alignment.  */\n void test(void) __attribute__((noinline));\n void test(void)"}, {"sha": "a882ffbf37279abeff11e6bce722c87e8b00949e", "filename": "gcc/testsuite/gcc.target/sparc/sparc-constant-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsparc-constant-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsparc-constant-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsparc-constant-1.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -3,7 +3,7 @@\n /* { dg-do compile } */\n \n /* Verify that adding the constant 4096 is turned\n-   into substracting the constant -4096. */\n+   into subtracting the constant -4096. */\n \n int foo(int a)\n {"}, {"sha": "00307fe2978e4b240dc5d56f30ff59bf3df4175b", "filename": "gcc/testsuite/gcc.target/sparc/struct-ret-check.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fstruct-ret-check.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fstruct-ret-check.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fstruct-ret-check.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -96,7 +96,7 @@ int main (void)\n   /* If the caller does an unconditional adjustment it will skip\n      the mov, and then we can fail the test based on check's value \n      We pass a valid pointer to a save area in order to check if \n-     caller incorrectly wrote to the save area aswell. There may\n+     caller incorrectly wrote to the save area as well. There may\n      be a case where the unimp check and skip is correct, but the\n      write to the save area still occurs. */\n "}, {"sha": "2881f8ec856dd3dba97a8859a88cdd148a8ecf85", "filename": "gcc/testsuite/gcc.target/x86_64/abi/test_struct_returning.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Ftest_struct_returning.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Ftest_struct_returning.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Ftest_struct_returning.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -190,7 +190,7 @@ void check_all (Type class, unsigned long size)\n        is given to the f_* functions, otherwise a conforming program\n        could notice the struct changing already before the function returns.\n        This temporary struct could be anywhere.  For GCC it will be on\n-       stack, but noone is forbidding that it could be a static variable\n+       stack, but no one is forbidding that it could be a static variable\n        if there's no threading or proper locking.  Nobody in his right mind\n        will not use the stack for that.  */\n     case MEM: assert (*(unsigned char*)struct_addr == 42 && rdi == rax); break;"}, {"sha": "dceec33063c2f0c17f0c1efd9e8ff54d2d32f975", "filename": "gcc/testsuite/gfortran.dg/c_ptr_tests_8_funcs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_8_funcs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_8_funcs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_ptr_tests_8_funcs.c?ref=1d5f3021c1cd6565f62bf7fb47ad5b60aea3ccf0", "patch": "@@ -1,4 +1,4 @@\n-/* This file provides auxilliary functions for c_ptr_tests_8.  */\n+/* This file provides auxiliary functions for c_ptr_tests_8.  */\n \n #include <stdio.h>\n #include <stdlib.h>"}]}