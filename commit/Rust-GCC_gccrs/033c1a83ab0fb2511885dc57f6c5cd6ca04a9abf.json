{"sha": "033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMzYzFhODNhYjBmYjI1MTE4ODVkYzU3ZjZjNWNkNmNhMDRhOWFiZg==", "commit": {"author": {"name": "Marc Poulhi\u00e8s", "email": "dkm@kataplop.net", "date": "2021-04-26T20:28:29Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "dkm@kataplop.net", "date": "2021-05-18T19:13:22Z"}, "message": "Add support for 'unsupported' test cases in testsuite\n\nIntroduce an 'unsupported/' directory in the testsuite. It should contains tests\ncase for which the compiler currently has an incorrect behavior:\n- its accepts invalid input\n- it rejects valid input\n\nSome basic guidelines are provided in unsupported.exp.", "tree": {"sha": "186cb5cea83520e12b1419fb9758cccf1e2c5e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/186cb5cea83520e12b1419fb9758cccf1e2c5e2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf/comments", "author": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d71539414ca4e5edb51556b136b0b5eaee9a084", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d71539414ca4e5edb51556b136b0b5eaee9a084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d71539414ca4e5edb51556b136b0b5eaee9a084"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "306fca0b3c53101d426b2fa1828ce8f8fa7eee85", "filename": "gcc/testsuite/rust.test/unsupported/lifetime_param.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Flifetime_param.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Flifetime_param.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Flifetime_param.rs?ref=033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf", "patch": "@@ -0,0 +1,11 @@\n+// { dg-excess-errors \"warnings\" }\n+\n+// { dg-error \"lifetime not defined\" \"#359\" { xfail *-*-* } .+1 }\n+fn lifetime_undefined(t: &'a str) -> &'a str {\n+    t\n+}\n+\n+// { dg-error \"lifetime not defined\" \"#359\" { xfail *-*-* } .+1 }\n+fn lifetime_undefined_bis<'a>(t: &'a str)-> &'b str {\n+    t\n+}"}, {"sha": "48abcbee67c98b9ff91e2179b1f6ee209fb85849", "filename": "gcc/testsuite/rust.test/unsupported/slice1.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Fslice1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Fslice1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Fslice1.rs?ref=033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf", "patch": "@@ -0,0 +1,3 @@\n+fn foo (e: &str) -> &str {\n+    &\"\" // { dg-bogus \"cannot strip expression in this position - outer attributes not allowed\" \"#391\" { xfail *-*-* } }\n+}"}, {"sha": "a28729e6208fcbf861c60b82ec5c02031a5fee99", "filename": "gcc/testsuite/rust.test/unsupported/struct_field_vis.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Fstruct_field_vis.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Fstruct_field_vis.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Fstruct_field_vis.rs?ref=033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf", "patch": "@@ -0,0 +1,15 @@\n+// { dg-xfail-if \"pub visibility not supported #432\"  *-*-* }\n+\n+mod foomod {\n+    pub struct Foo {\n+        pub f: i32,\n+        pub g: u32,\n+    }\n+}\n+\n+fn test() -> foomod::Foo {\n+    foomod::Foo{\n+        f:1,\n+        g:3,\n+    }\n+}"}, {"sha": "82d19c689b0a9d614aff5fad466926da81317500", "filename": "gcc/testsuite/rust.test/unsupported/unsupported.exp", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Funsupported.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Funsupported.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Funsupported%2Funsupported.exp?ref=033c1a83ab0fb2511885dc57f6c5cd6ca04a9abf", "patch": "@@ -0,0 +1,62 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+\n+# These tests are used to keep track of known limitations :\n+# 1- tests that are incorrecly build instead of being rejected\n+# 2- tests that are build to an incorrect result\n+# 3- tests that are rejected instead of being correctly build\n+#\n+# Not currently supported here:\n+# - tests that are exhibiting incorrect behavior at runtime\n+#\n+# Here's how to annotate tests for each cases:\n+#\n+# 1- test is successfuly build instead of being rejected\n+#\n+# Expected behavior: a specific error rejecting the test\n+# Observed behavior: error not present\n+# Use dg-error and mark the test xfail and add reference to corresponding issue.\n+# { dg-error \"lifetime not defined\" \"#359\" { xfail *-*-* } }\n+#\n+# 2- test is successfuly build but result is incorrect\n+#\n+# Expected behavior: test is correctly build and has specific property\n+# Observed behavior: test is correctly build but is missing the specific property\n+# Depends on the property. For example, if the property can be checked in the assembly file, use dg-final + xfail.\n+# { dg-final { scan-assembler \"given_string_missing_in_assembly_\" \"#1234\" { xfail *-*-* } } }\n+#\n+# 3- test is rejected instead of being correctly build\n+#\n+# Expected behavior: test is successfully build\n+# Observed behavior: the test is rejected with an error\n+# Use dg-bogus + xfail to match the bogus error message, or use dg-xfail-if if it's harder to match a specific error.\n+\n+# Load support procs.\n+load_lib rust-dg.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+set saved-dg-do-what-default ${dg-do-what-default}\n+\n+set dg-do-what-default \"compile\"\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.rs]] \"\" \"\"\n+set dg-do-what-default ${saved-dg-do-what-default}\n+\n+# All done.\n+dg-finish"}]}