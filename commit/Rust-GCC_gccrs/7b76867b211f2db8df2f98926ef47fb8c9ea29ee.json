{"sha": "7b76867b211f2db8df2f98926ef47fb8c9ea29ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I3Njg2N2IyMTFmMmRiOGRmMmY5ODkyNmVmNDdmYjhjOWVhMjllZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-06-13T15:03:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-06-13T15:03:50Z"}, "message": "tree-vect-patterns.c (vect_recog_vector_vector_shift_pattern): Properly set vector type of the intermediate stmt.\n\n2018-06-13  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-patterns.c (vect_recog_vector_vector_shift_pattern):\n\tProperly set vector type of the intermediate stmt.\n\t* tree-vect-stmts.c (vectorizable_operation): The destination\n\tvar always has vectype_out type.\n\nFrom-SVN: r261553", "tree": {"sha": "10d8bb5c2d3fbea3cbe89fee0946176b7989804f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10d8bb5c2d3fbea3cbe89fee0946176b7989804f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b76867b211f2db8df2f98926ef47fb8c9ea29ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b76867b211f2db8df2f98926ef47fb8c9ea29ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b76867b211f2db8df2f98926ef47fb8c9ea29ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b76867b211f2db8df2f98926ef47fb8c9ea29ee/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92877928f020d69de397e600052ceb1c9d22c5e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92877928f020d69de397e600052ceb1c9d22c5e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92877928f020d69de397e600052ceb1c9d22c5e8"}], "stats": {"total": 23, "additions": 19, "deletions": 4}, "files": [{"sha": "8531f11d2af12d88444ff8b6ba35809ede840c9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b76867b211f2db8df2f98926ef47fb8c9ea29ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b76867b211f2db8df2f98926ef47fb8c9ea29ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b76867b211f2db8df2f98926ef47fb8c9ea29ee", "patch": "@@ -1,3 +1,10 @@\n+2018-06-13  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-patterns.c (vect_recog_vector_vector_shift_pattern):\n+\tProperly set vector type of the intermediate stmt.\n+\t* tree-vect-stmts.c (vectorizable_operation): The destination\n+\tvar always has vectype_out type.\n+\n 2018-06-13  Jeff Law  <law@redhat.com>\n \n \t* config/rl78/rl78.c (move_elim_pass): Use TDF_NONE rather than"}, {"sha": "74f08cf852862b53a41a624c73dec44d1cc939a3", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b76867b211f2db8df2f98926ef47fb8c9ea29ee/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b76867b211f2db8df2f98926ef47fb8c9ea29ee/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=7b76867b211f2db8df2f98926ef47fb8c9ea29ee", "patch": "@@ -2185,6 +2185,11 @@ vect_recog_vector_vector_shift_pattern (vec<gimple *> *stmts,\n \t\t\t\t       TYPE_PRECISION (TREE_TYPE (oprnd1)));\n \t      def = vect_recog_temp_ssa_var (TREE_TYPE (rhs1), NULL);\n \t      def_stmt = gimple_build_assign (def, BIT_AND_EXPR, rhs1, mask);\n+\t      stmt_vec_info new_stmt_info\n+\t\t= new_stmt_vec_info (def_stmt, vinfo);\n+\t      set_vinfo_for_stmt (def_stmt, new_stmt_info);\n+\t      STMT_VINFO_VECTYPE (new_stmt_info)\n+\t\t= get_vectype_for_scalar_type (TREE_TYPE (rhs1));\n \t      new_pattern_def_seq (stmt_vinfo, def_stmt);\n \t    }\n \t}"}, {"sha": "9f365e31e4954cfef25c814220fb0fda1c7e3d11", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b76867b211f2db8df2f98926ef47fb8c9ea29ee/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b76867b211f2db8df2f98926ef47fb8c9ea29ee/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=7b76867b211f2db8df2f98926ef47fb8c9ea29ee", "patch": "@@ -5981,16 +5981,19 @@ vectorizable_operation (gimple *stmt, gimple_stmt_iterator *gsi,\n     dump_printf_loc (MSG_NOTE, vect_location,\n                      \"transform binary/unary operation.\\n\");\n \n-  /* Handle def.  */\n-  vec_dest = vect_create_destination_var (scalar_dest, vectype);\n-\n   /* POINTER_DIFF_EXPR has pointer arguments which are vectorized as\n      vectors with unsigned elements, but the result is signed.  So, we\n      need to compute the MINUS_EXPR into vectype temporary and\n      VIEW_CONVERT_EXPR it into the final vectype_out result.  */\n   tree vec_cvt_dest = NULL_TREE;\n   if (orig_code == POINTER_DIFF_EXPR)\n-    vec_cvt_dest = vect_create_destination_var (scalar_dest, vectype_out);\n+    {\n+      vec_dest = vect_create_destination_var (scalar_dest, vectype);\n+      vec_cvt_dest = vect_create_destination_var (scalar_dest, vectype_out);\n+    }\n+  /* Handle def.  */\n+  else\n+    vec_dest = vect_create_destination_var (scalar_dest, vectype_out);\n \n   /* In case the vectorization factor (VF) is bigger than the number\n      of elements that we can fit in a vectype (nunits), we have to generate"}]}