{"sha": "44114dff15f7dd78e05b31920beee7d56a7dc03c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQxMTRkZmYxNWY3ZGQ3OGUwNWIzMTkyMGJlZWU3ZDU2YTdkYzAzYw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-08-01T09:02:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-01T09:02:44Z"}, "message": "checks.adb (Apply_Float_Conversion_Check): If the expression to be converted is a real literal and the target type has...\n\n2008-08-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* checks.adb (Apply_Float_Conversion_Check): If the expression to be\n\tconverted is a real literal and the target type has static bounds,\n\tperform the conversion exactly to prevent floating-point anomalies on\n\tsome targets.\n\nFrom-SVN: r138486", "tree": {"sha": "d764922d7874c29d0afee9da316ce2c0ab88b390", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d764922d7874c29d0afee9da316ce2c0ab88b390"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44114dff15f7dd78e05b31920beee7d56a7dc03c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44114dff15f7dd78e05b31920beee7d56a7dc03c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44114dff15f7dd78e05b31920beee7d56a7dc03c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44114dff15f7dd78e05b31920beee7d56a7dc03c/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b43112145089bb0bc42ac48dfb0900a73d47aef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b43112145089bb0bc42ac48dfb0900a73d47aef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b43112145089bb0bc42ac48dfb0900a73d47aef4"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "f55bd7cec75d9f6fa9be5282c236e41c3c8f81f0", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44114dff15f7dd78e05b31920beee7d56a7dc03c/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44114dff15f7dd78e05b31920beee7d56a7dc03c/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=44114dff15f7dd78e05b31920beee7d56a7dc03c", "patch": "@@ -1633,11 +1633,36 @@ package body Checks is\n          end;\n       end if;\n \n-      --  Get the bounds of the target type\n+      --  Get the (static) bounds of the target type\n \n       Ifirst := Expr_Value (LB);\n       Ilast  := Expr_Value (HB);\n \n+      --  A simple optimization: if the expression is a universal literal,\n+      --  we can do the comparison with the bounds and the conversion to\n+      --  an integer type statically. The range checks are unchanged.\n+\n+      if Nkind (Ck_Node) = N_Real_Literal\n+        and then Etype (Ck_Node) = Universal_Real\n+        and then Is_Integer_Type (Target_Typ)\n+        and then Nkind (Parent (Ck_Node)) = N_Type_Conversion\n+      then\n+         declare\n+            Int_Val : constant Uint := UR_To_Uint (Realval (Ck_Node));\n+\n+         begin\n+            if Int_Val <= Ilast and then Int_Val >= Ifirst then\n+\n+               --  Conversion is safe.\n+\n+               Rewrite (Parent (Ck_Node),\n+                 Make_Integer_Literal (Loc, UI_To_Int (Int_Val)));\n+               Analyze_And_Resolve (Parent (Ck_Node), Target_Typ);\n+               return;\n+            end if;\n+         end;\n+      end if;\n+\n       --  Check against lower bound\n \n       if Truncate and then Ifirst > 0 then"}]}