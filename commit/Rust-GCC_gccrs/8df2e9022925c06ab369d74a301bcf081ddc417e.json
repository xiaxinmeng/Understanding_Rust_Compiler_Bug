{"sha": "8df2e9022925c06ab369d74a301bcf081ddc417e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRmMmU5MDIyOTI1YzA2YWIzNjlkNzRhMzAxYmNmMDgxZGRjNDE3ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-08-01T12:39:57Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-08-01T12:39:57Z"}, "message": "decl.c (gnat_to_gnu_entity): Remove dead code.\n\n2008-08-01 \u00a0Eric Botcazou \u00a0<ebotcazou@adacore.com>\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: Remove dead\n\tcode. \u00a0Do not get full definition of deferred constants with address\n\tclause for a use. \u00a0Do not ignore deferred constant definitions with\n\taddress clause. \u00a0Ignore constant definitions already marked with the\n\terror node.\n\t<object>: Remove obsolete comment. \u00a0For a deferred constant with\n\taddress clause, get the initializer from the full view.\n\t* gcc-interface/trans.c (gnat_to_gnu) <N_Attribute_Definition_Clause>:\n\tRework and remove obsolete comment.\n\t<N_Object_Declaration>: For a deferred constant with address clause,\n\tmark the full view with the error node.\n\t* \u00a0gcc-interface/utils.c (convert_to_fat_pointer): Rework and fix\n\tformatting nits.\n\nFrom-SVN: r138513", "tree": {"sha": "f4efd12be81b0704af9d6a64d314a9b55e716b01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4efd12be81b0704af9d6a64d314a9b55e716b01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8df2e9022925c06ab369d74a301bcf081ddc417e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df2e9022925c06ab369d74a301bcf081ddc417e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8df2e9022925c06ab369d74a301bcf081ddc417e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df2e9022925c06ab369d74a301bcf081ddc417e/comments", "author": null, "committer": null, "parents": [{"sha": "5c3554b7ad2c8041a923228037141f83c9e70fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c3554b7ad2c8041a923228037141f83c9e70fc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c3554b7ad2c8041a923228037141f83c9e70fc6"}], "stats": {"total": 272, "additions": 213, "deletions": 59}, "files": [{"sha": "223723ff6c73d9355ef37e6dfc4db69b719e5342", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8df2e9022925c06ab369d74a301bcf081ddc417e", "patch": "@@ -1,3 +1,19 @@\n+2008-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: Remove dead\n+\tcode.  Do not get full definition of deferred constants with address\n+\tclause for a use.  Do not ignore deferred constant definitions with\n+\taddress clause.  Ignore constant definitions already marked with the\n+\terror node.\n+\t<object>: Remove obsolete comment.  For a deferred constant with\n+\taddress clause, get the initializer from the full view.\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Attribute_Definition_Clause>:\n+\tRework and remove obsolete comment.\n+\t<N_Object_Declaration>: For a deferred constant with address clause,\n+\tmark the full view with the error node.\n+\t* gcc-interface/utils.c (convert_to_fat_pointer): Rework and fix\n+\tformatting nits.\n+\n 2008-08-01  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* rtsfind.ads: Add block IO versions of stream routines for Strings."}, {"sha": "bc17235a8f2558aa67648545464fc53958e88a04", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 38, "deletions": 24, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=8df2e9022925c06ab369d74a301bcf081ddc417e", "patch": "@@ -367,12 +367,14 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n   switch (kind)\n     {\n     case E_Constant:\n-      /* If this is a use of a deferred constant, get its full\n-\t declaration.  */\n-      if (!definition && Present (Full_View (gnat_entity)))\n+      /* If this is a use of a deferred constant without address clause,\n+\t get its full definition.  */\n+      if (!definition\n+\t  && No (Address_Clause (gnat_entity))\n+\t  && Present (Full_View (gnat_entity)))\n \t{\n-\t  gnu_decl = gnat_to_gnu_entity (Full_View (gnat_entity),\n-\t\t\t\t\t gnu_expr, 0);\n+\t  gnu_decl\n+\t    = gnat_to_gnu_entity (Full_View (gnat_entity), gnu_expr, 0);\n \t  saved = true;\n \t  break;\n \t}\n@@ -391,25 +393,30 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t      != N_Allocator))\n \tgnu_expr = gnat_to_gnu (Expression (Declaration_Node (gnat_entity)));\n \n-      /* Ignore deferred constant definitions; they are processed fully in the\n-\t front-end.  For deferred constant references get the full definition.\n-\t On the other hand, constants that are renamings are handled like\n-\t variable renamings.  If No_Initialization is set, this is not a\n-\t deferred constant but a constant whose value is built manually.  */\n-      if (definition && !gnu_expr\n+      /* Ignore deferred constant definitions without address clause since\n+\t they are processed fully in the front-end.  If No_Initialization\n+\t is set, this is not a deferred constant but a constant whose value\n+\t is built manually.  And constants that are renamings are handled\n+\t like variables.  */\n+      if (definition\n+\t  && !gnu_expr\n+\t  && No (Address_Clause (gnat_entity))\n \t  && !No_Initialization (Declaration_Node (gnat_entity))\n \t  && No (Renamed_Object (gnat_entity)))\n \t{\n \t  gnu_decl = error_mark_node;\n \t  saved = true;\n \t  break;\n \t}\n-      else if (!definition && IN (kind, Incomplete_Or_Private_Kind)\n-\t       && Present (Full_View (gnat_entity)))\n+\n+      /* Ignore constant definitions already marked with the error node.  See\n+\t the N_Object_Declaration case of gnat_to_gnu for the rationale.  */\n+      if (definition\n+\t  && gnu_expr\n+\t  && present_gnu_tree (gnat_entity)\n+\t  && get_gnu_tree (gnat_entity) == error_mark_node)\n \t{\n-\t  gnu_decl =  gnat_to_gnu_entity (Full_View (gnat_entity),\n-\t\t\t\t\t  NULL_TREE, 0);\n-\t  saved = true;\n+\t  maybe_present = true;\n \t  break;\n \t}\n \n@@ -1037,17 +1044,17 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    && !Is_Imported (gnat_entity) && !gnu_expr)\n \t  gnu_expr = integer_zero_node;\n \n-\t/* If we are defining the object and it has an Address clause we must\n-\t   get the address expression from the saved GCC tree for the\n-\t   object if the object has a Freeze_Node.  Otherwise, we elaborate\n-\t   the address expression here since the front-end has guaranteed\n-\t   in that case that the elaboration has no effects.  Note that\n-\t   only the latter mechanism is currently in use.  */\n+\t/* If we are defining the object and it has an Address clause, we must\n+\t   either get the address expression from the saved GCC tree for the\n+\t   object if it has a Freeze node, or elaborate the address expression\n+\t   here since the front-end has guaranteed that the elaboration has no\n+\t   effects in this case.  */\n \tif (definition && Present (Address_Clause (gnat_entity)))\n \t  {\n \t    tree gnu_address\n-\t      = (present_gnu_tree (gnat_entity) ? get_gnu_tree (gnat_entity)\n-\t\t: gnat_to_gnu (Expression (Address_Clause (gnat_entity))));\n+\t      = present_gnu_tree (gnat_entity)\n+\t\t? get_gnu_tree (gnat_entity)\n+\t\t: gnat_to_gnu (Expression (Address_Clause (gnat_entity)));\n \n \t    save_gnu_tree (gnat_entity, NULL_TREE, false);\n \n@@ -1064,6 +1071,13 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t      || compile_time_known_address_p (Expression (Address_Clause\n \t\t\t\t\t\t\t   (gnat_entity)));\n \n+\t    /* If this is a deferred constant, the initializer is attached to\n+\t       the full view.  */\n+\t    if (kind == E_Constant && Present (Full_View (gnat_entity)))\n+\t      gnu_expr\n+\t\t= gnat_to_gnu\n+\t\t    (Expression (Declaration_Node (Full_View (gnat_entity))));\n+\n \t    /* If we don't have an initializing expression for the underlying\n \t       variable, the initializing expression for the pointer is the\n \t       specified address.  Otherwise, we have to make a COMPOUND_EXPR"}, {"sha": "43e6afb915a5303a4aeaeb638e061441ba09ee92", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=8df2e9022925c06ab369d74a301bcf081ddc417e", "patch": "@@ -3397,6 +3397,15 @@ gnat_to_gnu (Node_Id gnat_node)\n       if (type_annotate_only && gnu_expr && TREE_CODE (gnu_expr) == ERROR_MARK)\n \tgnu_expr = NULL_TREE;\n \n+      /* If this is a deferred constant with an address clause, we ignore the\n+\t full view since the clause is on the partial view and we cannot have\n+\t 2 different GCC trees for the object.  The only bits of the full view\n+\t we will use is the initializer, but it will be directly fetched.  */\n+      if (Ekind(gnat_temp) == E_Constant\n+\t  && Present (Address_Clause (gnat_temp))\n+\t  && Present (Full_View (gnat_temp)))\n+\tsave_gnu_tree (Full_View (gnat_temp), error_mark_node, true);\n+\n       if (No (Freeze_Node (gnat_temp)))\n \tgnat_to_gnu_entity (gnat_temp, gnu_expr, 1);\n       break;\n@@ -4541,21 +4550,22 @@ gnat_to_gnu (Node_Id gnat_node)\n     /***************************************************/\n \n     case N_Attribute_Definition_Clause:\n-\n       gnu_result = alloc_stmt_list ();\n \n-      /* The only one we need deal with is for 'Address.  For the others, SEM\n-\t puts the information elsewhere.  We need only deal with 'Address\n-\t if the object has a Freeze_Node (which it never will currently).  */\n-      if (Get_Attribute_Id (Chars (gnat_node)) != Attr_Address\n-\t  || No (Freeze_Node (Entity (Name (gnat_node)))))\n+      /* The only one we need to deal with is 'Address since, for the others,\n+\t the front-end puts the information elsewhere.  */\n+      if (Get_Attribute_Id (Chars (gnat_node)) != Attr_Address)\n+\tbreak;\n+\n+      /* And we only deal with 'Address if the object has a Freeze node.  */\n+      gnat_temp = Entity (Name (gnat_node));\n+      if (No (Freeze_Node (gnat_temp)))\n \tbreak;\n \n-      /* Get the value to use as the address and save it as the\n-\t equivalent for GNAT_TEMP.  When the object is frozen,\n-\t gnat_to_gnu_entity will do the right thing. */\n-      save_gnu_tree (Entity (Name (gnat_node)),\n-                     gnat_to_gnu (Expression (gnat_node)), true);\n+      /* Get the value to use as the address and save it as the equivalent\n+\t for the object.  When it is frozen, gnat_to_gnu_entity will do the\n+\t right thing.  */\n+      save_gnu_tree (gnat_temp, gnat_to_gnu (Expression (gnat_node)), true);\n       break;\n \n     case N_Enumeration_Representation_Clause:"}, {"sha": "dcf0558ec9db9e3de3eb3f2b817e1c290fbc8452", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=8df2e9022925c06ab369d74a301bcf081ddc417e", "patch": "@@ -3869,31 +3869,31 @@ update_pointer_to (tree old_type, tree new_type)\n     }\n }\n \f\n-/* Convert a pointer to a constrained array into a pointer to a fat\n-   pointer.  This involves making or finding a template.  */\n+/* Convert EXPR, a pointer to a constrained array, into a pointer to an\n+   unconstrained one.  This involves making or finding a template.  */\n \n static tree\n convert_to_fat_pointer (tree type, tree expr)\n {\n   tree template_type = TREE_TYPE (TREE_TYPE (TREE_CHAIN (TYPE_FIELDS (type))));\n-  tree template, template_addr;\n+  tree p_array_type = TREE_TYPE (TYPE_FIELDS (type));\n   tree etype = TREE_TYPE (expr);\n+  tree template;\n \n-  /* If EXPR is a constant of zero, we make a fat pointer that has a null\n-     pointer to the template and array.  */\n+  /* If EXPR is null, make a fat pointer that contains null pointers to the\n+     template and array.  */\n   if (integer_zerop (expr))\n     return\n       gnat_build_constructor\n \t(type,\n \t tree_cons (TYPE_FIELDS (type),\n-\t\t    convert (TREE_TYPE (TYPE_FIELDS (type)), expr),\n+\t\t    convert (p_array_type, expr),\n \t\t    tree_cons (TREE_CHAIN (TYPE_FIELDS (type)),\n \t\t\t       convert (build_pointer_type (template_type),\n \t\t\t\t\texpr),\n \t\t\t       NULL_TREE)));\n \n-  /* If EXPR is a thin pointer, make the template and data from the record.  */\n-\n+  /* If EXPR is a thin pointer, make template and data from the record..  */\n   else if (TYPE_THIN_POINTER_P (etype))\n     {\n       tree fields = TYPE_FIELDS (TREE_TYPE (etype));\n@@ -3909,30 +3909,31 @@ convert_to_fat_pointer (tree type, tree expr)\n \t\t\t     build_component_ref (expr, NULL_TREE,\n \t\t\t\t\t\t  TREE_CHAIN (fields), false));\n     }\n+\n+  /* Otherwise, build the constructor for the template.  */\n   else\n-    /* Otherwise, build the constructor for the template.  */\n     template = build_template (template_type, TREE_TYPE (etype), expr);\n \n-  template_addr = build_unary_op (ADDR_EXPR, NULL_TREE, template);\n-\n-  /* The result is a CONSTRUCTOR for the fat pointer.\n+  /* The final result is a constructor for the fat pointer.\n \n-     If expr is an argument of a foreign convention subprogram, the type it\n-     points to is directly the component type. In this case, the expression\n+     If EXPR is an argument of a foreign convention subprogram, the type it\n+     points to is directly the component type.  In this case, the expression\n      type may not match the corresponding FIELD_DECL type at this point, so we\n-     call \"convert\" here to fix that up if necessary. This type consistency is\n+     call \"convert\" here to fix that up if necessary.  This type consistency is\n      required, for instance because it ensures that possible later folding of\n-     component_refs against this constructor always yields something of the\n+     COMPONENT_REFs against this constructor always yields something of the\n      same type as the initial reference.\n \n-     Note that the call to \"build_template\" above is still fine, because it\n-     will only refer to the provided template_type in this case.  */\n-   return\n-     gnat_build_constructor\n-     (type, tree_cons (TYPE_FIELDS (type),\n- \t\t      convert (TREE_TYPE (TYPE_FIELDS (type)), expr),\n- \t\t      tree_cons (TREE_CHAIN (TYPE_FIELDS (type)),\n- \t\t\t\t template_addr, NULL_TREE)));\n+     Note that the call to \"build_template\" above is still fine because it\n+     will only refer to the provided TEMPLATE_TYPE in this case.  */\n+  return\n+    gnat_build_constructor\n+      (type,\n+       tree_cons (TYPE_FIELDS (type),\n+\t\t  convert (p_array_type, expr),\n+\t\t  tree_cons (TREE_CHAIN (TYPE_FIELDS (type)),\n+\t\t\t     build_unary_op (ADDR_EXPR, NULL_TREE, template),\n+\t\t\t     NULL_TREE)));\n }\n \f\n /* Convert to a thin pointer type, TYPE.  The only thing we know how to convert"}, {"sha": "cde9a26f0d902cd17cf20cd0666d7bf68e19b735", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8df2e9022925c06ab369d74a301bcf081ddc417e", "patch": "@@ -1,3 +1,11 @@\n+2008-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/deferred_const1.adb: New test.\n+\t* gnat.dg/deferred_const2.adb: Likewise.\n+\t* gnat.dg/deferred_const2_pkg.ad[sb]: New helper.\n+\t* gnat.dg/deferred_const3.adb: New test.\n+\t* gnat.dg/deferred_const3_pkg.ad[sb]: New helper.\n+\n 2008-08-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/36988"}, {"sha": "79b9f4a03259ff3c44c915f244ca26b10721af2d", "filename": "gcc/testsuite/gnat.dg/deferred_const1.adb", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const1.adb?ref=8df2e9022925c06ab369d74a301bcf081ddc417e", "patch": "@@ -0,0 +1,12 @@\n+-- { dg-do compile }\n+\n+with Text_IO; use Text_IO;\n+\n+procedure Deferred_Const1 is\n+  I : Integer := 16#20_3A_2D_28#;\n+  S : constant string(1..4);\n+  for S'address use I'address; -- { dg-warning \"constant overlays a variable\" } \n+  pragma Import (Ada, S);\n+begin\n+  Put_Line (S);\n+end;"}, {"sha": "ee06db79cc95ae7c2c7f216970fec02bfe808c4a", "filename": "gcc/testsuite/gnat.dg/deferred_const2.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const2.adb?ref=8df2e9022925c06ab369d74a301bcf081ddc417e", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-do run }\n+\n+with System; use System;\n+with Deferred_Const2_Pkg; use Deferred_Const2_Pkg;\n+\n+procedure Deferred_Const2 is\n+begin\n+  if I'Address /= S'Address then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "b81d448863bfe14f1d0bf4f6b3db373a9a89d097", "filename": "gcc/testsuite/gnat.dg/deferred_const2_pkg.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const2_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const2_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const2_pkg.adb?ref=8df2e9022925c06ab369d74a301bcf081ddc417e", "patch": "@@ -0,0 +1,11 @@\n+with System; use System;\n+\n+package body Deferred_Const2_Pkg is\n+\n+  procedure Dummy is begin null; end;\n+\n+begin\n+  if S'Address /= I'Address then\n+    raise Program_Error;\n+  end if;\n+end Deferred_Const2_Pkg;"}, {"sha": "c76e5fdb80201c646acb876d251885478b6c3fb4", "filename": "gcc/testsuite/gnat.dg/deferred_const2_pkg.ads", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const2_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const2_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const2_pkg.ads?ref=8df2e9022925c06ab369d74a301bcf081ddc417e", "patch": "@@ -0,0 +1,12 @@\n+package Deferred_Const2_Pkg is\n+\n+  I : Integer := 16#20_3A_2D_28#;\n+\n+  pragma Warnings (Off);\n+  S : constant string(1..4);\n+  for S'address use I'address;\n+  pragma Import (Ada, S);\n+\n+  procedure Dummy;\n+\n+end Deferred_Const2_Pkg;"}, {"sha": "84554d3063f0cf624e9c9de747fac710f0318565", "filename": "gcc/testsuite/gnat.dg/deferred_const3.adb", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const3.adb?ref=8df2e9022925c06ab369d74a301bcf081ddc417e", "patch": "@@ -0,0 +1,19 @@\n+-- { dg-do run }\n+\n+with System; use System;\n+with Deferred_Const3_Pkg; use Deferred_Const3_Pkg;\n+\n+procedure Deferred_Const3 is\n+begin\n+  if C1'Address /= C'Address then\n+    raise Program_Error;\n+  end if;\n+\n+  if C2'Address /= C'Address then\n+    raise Program_Error;\n+  end if;\n+\n+  if C3'Address /= C'Address then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "e865494454bae3ba22a7c455b3104a648df25150", "filename": "gcc/testsuite/gnat.dg/deferred_const3_pkg.adb", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const3_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const3_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const3_pkg.adb?ref=8df2e9022925c06ab369d74a301bcf081ddc417e", "patch": "@@ -0,0 +1,19 @@\n+with System; use System;\n+\n+package body Deferred_Const3_Pkg is\n+\n+  procedure Dummy is begin null; end;\n+\n+begin\n+  if C1'Address /= C'Address then\n+    raise Program_Error;\n+  end if;\n+\n+  if C2'Address /= C'Address then\n+    raise Program_Error;\n+  end if;\n+\n+  if C3'Address /= C'Address then\n+    raise Program_Error;\n+  end if;\n+end Deferred_Const3_Pkg;"}, {"sha": "de6af3d52acb04b79977c6b1a0d6160e046276d6", "filename": "gcc/testsuite/gnat.dg/deferred_const3_pkg.ads", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const3_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8df2e9022925c06ab369d74a301bcf081ddc417e/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const3_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdeferred_const3_pkg.ads?ref=8df2e9022925c06ab369d74a301bcf081ddc417e", "patch": "@@ -0,0 +1,21 @@\n+package Deferred_Const3_Pkg is\n+\n+  C : constant Natural := 1;\n+\n+  C1 : constant Natural := 1;\n+  for C1'Address use C'Address;\n+\n+  C2 : constant Natural;\n+  for C2'Address use C'Address;\n+\n+  C3 : constant Natural;\n+\n+  procedure Dummy;\n+\n+private\n+  C2 : constant Natural := 1;\n+\n+  C3 : constant Natural := 1;\n+  for C3'Address use C'Address;\n+\n+end Deferred_Const3_Pkg;"}]}