{"sha": "3bd8f4816fe24ef00641cde33dd13155b83db6e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JkOGY0ODE2ZmUyNGVmMDA2NDFjZGUzM2RkMTMxNTViODNkYjZlMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:19:54Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:19:54Z"}, "message": "[68/77] Use scalar_mode for is_int_mode/is_float_mode pairs\n\nThis patch uses scalar_mode for code that operates only on MODE_INT\nand MODE_FLOAT.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* omp-expand.c (expand_omp_atomic): Use is_int_mode, is_float_mode\n\tand scalar_mode.\n\t* tree-vect-stmts.c (get_vectype_for_scalar_type_and_size): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251519", "tree": {"sha": "15a160b63509849b48c344d86076730d54907975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15a160b63509849b48c344d86076730d54907975"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bd8f4816fe24ef00641cde33dd13155b83db6e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd8f4816fe24ef00641cde33dd13155b83db6e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bd8f4816fe24ef00641cde33dd13155b83db6e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd8f4816fe24ef00641cde33dd13155b83db6e1/comments", "author": null, "committer": null, "parents": [{"sha": "79052416a684cde121a3f70619c2eb12371be67a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79052416a684cde121a3f70619c2eb12371be67a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79052416a684cde121a3f70619c2eb12371be67a"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "14f379cd55c58ec7e402e51e1f2dbab65efcf028", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd8f4816fe24ef00641cde33dd13155b83db6e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd8f4816fe24ef00641cde33dd13155b83db6e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bd8f4816fe24ef00641cde33dd13155b83db6e1", "patch": "@@ -1,3 +1,11 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* omp-expand.c (expand_omp_atomic): Use is_int_mode, is_float_mode\n+\tand scalar_mode.\n+\t* tree-vect-stmts.c (get_vectype_for_scalar_type_and_size): Likewise.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "7e27ae0aa1a0d8826daca2a6acc88c1dc74f8870", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd8f4816fe24ef00641cde33dd13155b83db6e1/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd8f4816fe24ef00641cde33dd13155b83db6e1/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=3bd8f4816fe24ef00641cde33dd13155b83db6e1", "patch": "@@ -6739,17 +6739,18 @@ expand_omp_atomic (struct omp_region *region)\n       if (exact_log2 (align) >= index)\n \t{\n \t  /* Atomic load.  */\n+\t  scalar_mode smode;\n \t  if (loaded_val == stored_val\n-\t      && (GET_MODE_CLASS (TYPE_MODE (type)) == MODE_INT\n-\t\t  || GET_MODE_CLASS (TYPE_MODE (type)) == MODE_FLOAT)\n-\t      && GET_MODE_BITSIZE (TYPE_MODE (type)) <= BITS_PER_WORD\n+\t      && (is_int_mode (TYPE_MODE (type), &smode)\n+\t\t  || is_float_mode (TYPE_MODE (type), &smode))\n+\t      && GET_MODE_BITSIZE (smode) <= BITS_PER_WORD\n \t      && expand_omp_atomic_load (load_bb, addr, loaded_val, index))\n \t    return;\n \n \t  /* Atomic store.  */\n-\t  if ((GET_MODE_CLASS (TYPE_MODE (type)) == MODE_INT\n-\t       || GET_MODE_CLASS (TYPE_MODE (type)) == MODE_FLOAT)\n-\t      && GET_MODE_BITSIZE (TYPE_MODE (type)) <= BITS_PER_WORD\n+\t  if ((is_int_mode (TYPE_MODE (type), &smode)\n+\t       || is_float_mode (TYPE_MODE (type), &smode))\n+\t      && GET_MODE_BITSIZE (smode) <= BITS_PER_WORD\n \t      && store_bb == single_succ (load_bb)\n \t      && first_stmt (store_bb) == store\n \t      && expand_omp_atomic_store (load_bb, addr, loaded_val,"}, {"sha": "b8bf5d2b8b0345dcd751e03b2c813c8ce3abf6c8", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd8f4816fe24ef00641cde33dd13155b83db6e1/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd8f4816fe24ef00641cde33dd13155b83db6e1/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=3bd8f4816fe24ef00641cde33dd13155b83db6e1", "patch": "@@ -9046,18 +9046,16 @@ static tree\n get_vectype_for_scalar_type_and_size (tree scalar_type, unsigned size)\n {\n   tree orig_scalar_type = scalar_type;\n-  machine_mode inner_mode = TYPE_MODE (scalar_type);\n+  scalar_mode inner_mode;\n   machine_mode simd_mode;\n-  unsigned int nbytes = GET_MODE_SIZE (inner_mode);\n   int nunits;\n   tree vectype;\n \n-  if (nbytes == 0)\n+  if (!is_int_mode (TYPE_MODE (scalar_type), &inner_mode)\n+      && !is_float_mode (TYPE_MODE (scalar_type), &inner_mode))\n     return NULL_TREE;\n \n-  if (GET_MODE_CLASS (inner_mode) != MODE_INT\n-      && GET_MODE_CLASS (inner_mode) != MODE_FLOAT)\n-    return NULL_TREE;\n+  unsigned int nbytes = GET_MODE_SIZE (inner_mode);\n \n   /* For vector types of elements whose mode precision doesn't\n      match their types precision we use a element type of mode"}]}