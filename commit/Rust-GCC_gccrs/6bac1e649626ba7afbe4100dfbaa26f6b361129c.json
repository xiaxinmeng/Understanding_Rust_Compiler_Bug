{"sha": "6bac1e649626ba7afbe4100dfbaa26f6b361129c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJhYzFlNjQ5NjI2YmE3YWZiZTQxMDBkZmJhYTI2ZjZiMzYxMTI5Yw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1995-04-07T06:20:52Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1995-04-07T06:20:52Z"}, "message": "cpplib.c (SELF_DIR_DUMMY): New macro.\n\n* cpplib.c (SELF_DIR_DUMMY):  New macro.\n(do_include):  Don't pass searchptr to finclude if it is dsp,\nsince that is on the stack, and would cause a dangling pointer.\nIf handling #include_next, recognize SELF_DIR_DUMMY.\n\nFrom-SVN: r9320", "tree": {"sha": "87657b8c635c0412c37882856a32612717a80a63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87657b8c635c0412c37882856a32612717a80a63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bac1e649626ba7afbe4100dfbaa26f6b361129c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bac1e649626ba7afbe4100dfbaa26f6b361129c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bac1e649626ba7afbe4100dfbaa26f6b361129c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bac1e649626ba7afbe4100dfbaa26f6b361129c/comments", "author": null, "committer": null, "parents": [{"sha": "56c667474e64c95d8a69592d54b40db9f6ba29d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c667474e64c95d8a69592d54b40db9f6ba29d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56c667474e64c95d8a69592d54b40db9f6ba29d1"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "1ba96d820764bd110d3d0d86b3aed23f249e98a4", "filename": "gcc/cpplib.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bac1e649626ba7afbe4100dfbaa26f6b361129c/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bac1e649626ba7afbe4100dfbaa26f6b361129c/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=6bac1e649626ba7afbe4100dfbaa26f6b361129c", "patch": "@@ -358,6 +358,10 @@ struct file_name_list\n     int got_name_map;\n   };\n \n+/* If a buffer's dir field is SELF_DIR_DUMMY, it means the file was found\n+   via the same directory as the file that #included it. */\n+#define SELF_DIR_DUMMY ((struct file_name_list*)(~0))\n+\n /* #include \"file\" looks in source file dir, then stack. */\n /* #include <file> just looks in the stack. */\n /* -I directories are added to the end, then the defaults are added. */\n@@ -3338,7 +3342,9 @@ do_include (pfile, keyword, unused1, unused2)\n \t  {\n \t    /* fp->dir is null if the containing file was specified with\n \t       an absolute file name.  In that case, don't skip anything.  */\n-\t    if (fp->dir)\n+\t    if (fp->dir == SELF_DIR_DUMMY)\n+\t      search_start = CPP_OPTIONS (pfile)->include;\n+\t    else if (fp->dir)\n \t      search_start = fp->dir->next;\n \t    break;\n \t  }\n@@ -3580,7 +3586,7 @@ do_include (pfile, keyword, unused1, unused2)\n     \n     /* Actually process the file */\n     if (finclude (pfile, f, fname, is_system_include (pfile, fname),\n-\t\t  searchptr))\n+\t\t  searchptr != dsp ? searchptr : SELF_DIR_DUMMY))\n       {\n \toutput_line_command (pfile, 0, enter_file);\n \tpfile->only_seen_white = 2;\n@@ -5620,7 +5626,7 @@ open_include_file (filename, searchptr)\n    \"system\" include directories (as decided by the `is_system_include'\n    function above).\n    DIRPTR is the link in the dir path through which this file was found,\n-   or 0 if the file name was absolute.\n+   or 0 if the file name was absolute or via the current directory.\n    Return 1 on success, 0 on failure. */\n \n static int\n@@ -6241,7 +6247,7 @@ push_parse_file (pfile, fname)\n     pedwarn (\"file does not end in newline\");\n \n #endif\n-  if (finclude (pfile, f, fname, 0, 0))\n+  if (finclude (pfile, f, fname, 0, NULL_PTR))\n     output_line_command (pfile, 0, same_file);\n   return SUCCESS_EXIT_CODE;\n }"}]}