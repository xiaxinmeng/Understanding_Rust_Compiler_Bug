{"sha": "1b1f20cab9ba8fea71e43cecfe985eb60e2f59e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIxZjIwY2FiOWJhOGZlYTcxZTQzY2VjZmU5ODVlYjYwZTJmNTllNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-09-19T00:37:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-09-19T00:37:24Z"}, "message": "calls.c (store_one_arg): Rename default_align to parm_align; always adjust parm_align for downward padding.\n\n\t* calls.c (store_one_arg): Rename default_align to parm_align;\n\talways adjust parm_align for downward padding.\n\nFrom-SVN: r57292", "tree": {"sha": "1c0bdbce207c01a6f967dd988580a82b62456ac3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c0bdbce207c01a6f967dd988580a82b62456ac3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b1f20cab9ba8fea71e43cecfe985eb60e2f59e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b1f20cab9ba8fea71e43cecfe985eb60e2f59e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b1f20cab9ba8fea71e43cecfe985eb60e2f59e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b1f20cab9ba8fea71e43cecfe985eb60e2f59e7/comments", "author": null, "committer": null, "parents": [{"sha": "724838b9aa794141c9230c5d72316173752a9875", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/724838b9aa794141c9230c5d72316173752a9875", "html_url": "https://github.com/Rust-GCC/gccrs/commit/724838b9aa794141c9230c5d72316173752a9875"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "3a4be4e6d2dc1b05c5500c9607d10acd0772ca66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1f20cab9ba8fea71e43cecfe985eb60e2f59e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1f20cab9ba8fea71e43cecfe985eb60e2f59e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1b1f20cab9ba8fea71e43cecfe985eb60e2f59e7", "patch": "@@ -1,3 +1,8 @@\n+2002-09-18  Richard Henderson  <rth@redhat.com>\n+\n+\t* calls.c (store_one_arg): Rename default_align to parm_align;\n+\talways adjust parm_align for downward padding.\n+\n 2002-09-18  Richard Henderson  <rth@redhat.com>\n \n \t* toplev.c (backend_init): Move init_real_once invocation ..."}, {"sha": "97e7e045068b96dce2d8d7115c461d95849ae4e0", "filename": "gcc/calls.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1f20cab9ba8fea71e43cecfe985eb60e2f59e7/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1f20cab9ba8fea71e43cecfe985eb60e2f59e7/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=1b1f20cab9ba8fea71e43cecfe985eb60e2f59e7", "patch": "@@ -4491,21 +4491,14 @@ store_one_arg (arg, argblock, flags, variable_size, reg_parm_stack_space)\n     {\n       /* BLKmode, at least partly to be pushed.  */\n \n-      unsigned int default_align = PARM_BOUNDARY;\n+      unsigned int parm_align;\n       int excess;\n       rtx size_rtx;\n \n       /* Pushing a nonscalar.\n \t If part is passed in registers, PARTIAL says how much\n \t and emit_push_insn will take care of putting it there.  */\n \n-#ifdef ARGS_GROW_DOWNWARD\n-      /* When an argument is padded down, the block is not aligned to\n-\t PARM_BOUNDARY.  */\n-      if (FUNCTION_ARG_PADDING (arg->mode, TREE_TYPE (pval)) == downward)\n-\tdefault_align = BITS_PER_UNIT;\n-#endif\n-\n       /* Round its size up to a multiple\n \t of the allocation unit for arguments.  */\n \n@@ -4524,6 +4517,23 @@ store_one_arg (arg, argblock, flags, variable_size, reg_parm_stack_space)\n \t\t\t\t  NULL_RTX, TYPE_MODE (sizetype), 0);\n \t}\n \n+      /* Some types will require stricter alignment, which will be\n+\t provided for elsewhere in argument layout.  */\n+      parm_align = MAX (PARM_BOUNDARY, TYPE_ALIGN (TREE_TYPE (pval)));\n+\n+      /* When an argument is padded down, the block is aligned to\n+\t PARM_BOUNDARY, but the actual argument isn't.  */\n+      if (FUNCTION_ARG_PADDING (arg->mode, TREE_TYPE (pval)) == downward)\n+\t{\n+\t  if (arg->size.var)\n+\t    parm_align = BITS_PER_UNIT;\n+\t  else if (excess)\n+\t    {\n+\t      int excess_align = (excess & -excess) * BITS_PER_UNIT;\n+\t      parm_align = MIN (parm_align, excess_align);\n+\t    }\n+\t}\n+\n       if ((flags & ECF_SIBCALL) && GET_CODE (arg->value) == MEM)\n \t{\n \t  /* emit_push_insn might not work properly if arg->value and\n@@ -4581,17 +4591,15 @@ store_one_arg (arg, argblock, flags, variable_size, reg_parm_stack_space)\n           {\n \t    rtx size_rtx1 = GEN_INT (reg_parm_stack_space - arg->offset.constant);\n \t    emit_push_insn (arg->value, arg->mode, TREE_TYPE (pval), size_rtx1,\n-\t\t            MAX (default_align, TYPE_ALIGN (TREE_TYPE (pval))),\n-\t\t\t    partial, reg, excess, argblock,\n+\t\t            parm_align, partial, reg, excess, argblock,\n \t\t\t    ARGS_SIZE_RTX (arg->offset), reg_parm_stack_space,\n \t\t            ARGS_SIZE_RTX (arg->alignment_pad));\n \t  }\n \t}\n \t\n \n       emit_push_insn (arg->value, arg->mode, TREE_TYPE (pval), size_rtx,\n-\t\t      MAX (default_align, TYPE_ALIGN (TREE_TYPE (pval))),\n-\t\t      partial, reg, excess, argblock,\n+\t\t      parm_align, partial, reg, excess, argblock,\n \t\t      ARGS_SIZE_RTX (arg->offset), reg_parm_stack_space,\n \t\t      ARGS_SIZE_RTX (arg->alignment_pad));\n "}]}