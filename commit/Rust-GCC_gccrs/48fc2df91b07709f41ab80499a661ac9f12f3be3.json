{"sha": "48fc2df91b07709f41ab80499a661ac9f12f3be3", "node_id": "C_kwDOANBUbNoAKDQ4ZmMyZGY5MWIwNzcwOWY0MWFiODA0OTlhNjYxYWM5ZjEyZjNiZTM", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-05-12T11:26:34Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-05-12T15:10:07Z"}, "message": "privacy: Add base for privacy violation visitor", "tree": {"sha": "d2a79f14d860567cbd4c6d6a4367c440a0726ee4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2a79f14d860567cbd4c6d6a4367c440a0726ee4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48fc2df91b07709f41ab80499a661ac9f12f3be3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48fc2df91b07709f41ab80499a661ac9f12f3be3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48fc2df91b07709f41ab80499a661ac9f12f3be3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48fc2df91b07709f41ab80499a661ac9f12f3be3/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d374eb47de109af21faa0cfe9fd76a353d9bd06f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d374eb47de109af21faa0cfe9fd76a353d9bd06f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d374eb47de109af21faa0cfe9fd76a353d9bd06f"}], "stats": {"total": 892, "additions": 885, "deletions": 7}, "files": [{"sha": "f87ad5476226cdc95aa24ad2a8fb20543c3135fe", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=48fc2df91b07709f41ab80499a661ac9f12f3be3", "patch": "@@ -100,6 +100,7 @@ GRS_OBJS = \\\n     rust/rust-reachability.o \\\n     rust/rust-visibility-resolver.o \\\n     rust/rust-pub-restricted-visitor.o \\\n+    rust/rust-privacy-reporter.o \\\n     rust/rust-tyty.o \\\n     rust/rust-tyctx.o \\\n     rust/rust-tyty-bounds.o \\"}, {"sha": "dca5235806f9092da4fa3b96640f10e1a7394a5a", "filename": "gcc/rust/privacy/rust-privacy-check.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc?ref=48fc2df91b07709f41ab80499a661ac9f12f3be3", "patch": "@@ -23,6 +23,7 @@\n #include \"rust-name-resolver.h\"\n #include \"rust-visibility-resolver.h\"\n #include \"rust-pub-restricted-visitor.h\"\n+#include \"rust-privacy-reporter.h\"\n \n extern bool\n saw_errors (void);\n@@ -40,6 +41,7 @@ Resolver::resolve (HIR::Crate &crate)\n \n   VisibilityResolver (*mappings, *resolver).go (crate);\n   PubRestrictedVisitor (*mappings).go (crate);\n+  PrivacyReporter (*mappings, *resolver).go (crate);\n \n   auto visitor = ReachabilityVisitor (ctx, *ty_ctx);\n "}, {"sha": "ceafe91d8867e2cd2b88c22f3dd2ca68b35f2fc8", "filename": "gcc/rust/privacy/rust-privacy-common.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2Fprivacy%2Frust-privacy-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2Fprivacy%2Frust-privacy-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-common.h?ref=48fc2df91b07709f41ab80499a661ac9f12f3be3", "patch": "@@ -24,14 +24,16 @@ namespace Privacy {\n /**\n  * Visibility class related specifically to DefIds. This class allows defining\n  * the visibility of an item with regard to a specific module.\n+ *\n+ * Items are either public throughout a crate, or restricted to a specific\n+ * module. Private items are simply restricted to the current module.\n  */\n class ModuleVisibility\n {\n public:\n   enum Type\n   {\n     Unknown,\n-    Private,\n     Public,\n     Restricted,\n   };\n@@ -48,11 +50,6 @@ class ModuleVisibility\n     return ModuleVisibility (Type::Public, UNKNOWN_DEFID);\n   }\n \n-  static ModuleVisibility create_private ()\n-  {\n-    return ModuleVisibility (Type::Private, UNKNOWN_DEFID);\n-  }\n-\n   Type get_kind () const { return kind; }\n \n   const DefId &get_module_id () const { return module_id; }"}, {"sha": "4c18adb8615eecfaccd1b65ff402ee6b4c4a0af5", "filename": "gcc/rust/privacy/rust-privacy-reporter.cc", "status": "added", "additions": 645, "deletions": 0, "changes": 645, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.cc?ref=48fc2df91b07709f41ab80499a661ac9f12f3be3", "patch": "@@ -0,0 +1,645 @@\n+#include \"rust-privacy-reporter.h\"\n+#include \"rust-hir-expr.h\"\n+#include \"rust-hir-stmt.h\"\n+#include \"rust-hir-item.h\"\n+\n+namespace Rust {\n+namespace Privacy {\n+\n+PrivacyReporter::PrivacyReporter (Analysis::Mappings &mappings,\n+\t\t\t\t  Resolver::Resolver &resolver)\n+  : mappings (mappings), resolver (resolver),\n+    current_module (Optional<NodeId>::none ())\n+{}\n+\n+void\n+PrivacyReporter::go (HIR::Crate &crate)\n+{\n+  for (auto &item : crate.items)\n+    item->accept_vis (*this);\n+}\n+\n+static bool\n+is_child_module (NodeId current_module,\n+\t\t Optional<std::vector<NodeId> &> children)\n+{\n+  if (!children)\n+    return false;\n+\n+  // FIXME: This checks for one step - we need to go deeper\n+  for (auto &child : *children)\n+    if (child == current_module)\n+      return true;\n+\n+  return false;\n+}\n+\n+// FIXME: This function needs a lot of refactoring\n+void\n+PrivacyReporter::check_for_privacy_violation (const NodeId &use_id,\n+\t\t\t\t\t      const Location &locus)\n+{\n+  NodeId ref_node_id;\n+\n+  // FIXME: Don't assert here - we might be dealing with a type\n+  rust_assert (resolver.lookup_resolved_name (use_id, &ref_node_id));\n+\n+  ModuleVisibility vis;\n+\n+  // FIXME: Can we really return here if the item has no visibility?\n+  if (!mappings.lookup_visibility (ref_node_id, vis))\n+    return;\n+\n+  auto valid = true;\n+\n+  switch (vis.get_kind ())\n+    {\n+    case ModuleVisibility::Public:\n+      break;\n+      case ModuleVisibility::Restricted: {\n+\t// If we are in the crate, everything is restricted correctly, but we\n+\t// can't get a module for it\n+\tif (current_module.is_none ())\n+\t  return;\n+\n+\tauto module = mappings.lookup_defid (vis.get_module_id ());\n+\trust_assert (module != nullptr);\n+\n+\tauto mod_node_id = module->get_mappings ().get_nodeid ();\n+\n+\t// We are in the module referenced by the pub(restricted) visibility.\n+\t// This is valid\n+\tif (mod_node_id == current_module.get ())\n+\t  break;\n+\n+\tauto children = mappings.lookup_module_children (mod_node_id);\n+\n+\t// FIXME: This needs a LOT of TLC: hinting about the definition, a\n+\t// string to say if it's a module, function, type, etc...\n+\tif (!is_child_module (current_module.get (), children))\n+\t  valid = false;\n+      }\n+      break;\n+    case ModuleVisibility::Unknown:\n+      rust_unreachable ();\n+      break;\n+    }\n+\n+  if (!valid)\n+    rust_error_at (locus, \"definition is private in this context\");\n+}\n+\n+void\n+PrivacyReporter::visit (HIR::IdentifierExpr &ident_expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::Lifetime &lifetime)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::LifetimeParam &lifetime_param)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::PathInExpression &path)\n+{\n+  check_for_privacy_violation (path.get_mappings ().get_nodeid (),\n+\t\t\t       path.get_locus ());\n+}\n+\n+void\n+PrivacyReporter::visit (HIR::TypePathSegment &segment)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TypePathSegmentGeneric &segment)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TypePathSegmentFunction &segment)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TypePath &path)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::QualifiedPathInExpression &path)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::QualifiedPathInType &path)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::LiteralExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::BorrowExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::DereferenceExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ErrorPropagationExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::NegationExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ArithmeticOrLogicalExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ComparisonExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::LazyBooleanExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TypeCastExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::AssignmentExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::CompoundAssignmentExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::GroupedExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ArrayElemsValues &elems)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ArrayElemsCopied &elems)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ArrayExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ArrayIndexExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TupleExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TupleIndexExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::StructExprStruct &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::StructExprFieldIdentifier &field)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::StructExprFieldIdentifierValue &field)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::StructExprFieldIndexValue &field)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::StructExprStructFields &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::StructExprStructBase &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::CallExpr &expr)\n+{\n+  expr.get_fnexpr ()->accept_vis (*this);\n+\n+  // rust_assert (mappings.lookup_visibility (definition_id, def_vis));\n+  // check_for_privacy_violation (def_vis, expr.get_locus ());\n+}\n+\n+void\n+PrivacyReporter::visit (HIR::MethodCallExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::FieldAccessExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ClosureExprInner &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::BlockExpr &expr)\n+{\n+  for (auto &stmt : expr.get_statements ())\n+    stmt->accept_vis (*this);\n+\n+  auto &last_expr = expr.get_final_expr ();\n+  if (last_expr)\n+    last_expr->accept_vis (*this);\n+}\n+\n+void\n+PrivacyReporter::visit (HIR::ClosureExprInnerTyped &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ContinueExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::BreakExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::RangeFromToExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::RangeFromExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::RangeToExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::RangeFullExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::RangeFromToInclExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::RangeToInclExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ReturnExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::UnsafeBlockExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::LoopExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::WhileLoopExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::WhileLetLoopExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ForLoopExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::IfExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::IfExprConseqElse &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::IfExprConseqIf &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::IfExprConseqIfLet &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::IfLetExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::IfLetExprConseqElse &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::IfLetExprConseqIf &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::IfLetExprConseqIfLet &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::MatchExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::AwaitExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::AsyncBlockExpr &expr)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TypeParam &param)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::LifetimeWhereClauseItem &item)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TypeBoundWhereClauseItem &item)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::Module &module)\n+{\n+  auto old_module = current_module;\n+  current_module\n+    = Optional<NodeId>::some (module.get_mappings ().get_nodeid ());\n+\n+  for (auto &item : module.get_items ())\n+    item->accept_vis (*this);\n+\n+  current_module = old_module;\n+}\n+\n+void\n+PrivacyReporter::visit (HIR::ExternCrate &crate)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::UseTreeGlob &use_tree)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::UseTreeList &use_tree)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::UseTreeRebind &use_tree)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::UseDeclaration &use_decl)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::Function &function)\n+{\n+  function.get_definition ()->accept_vis (*this);\n+}\n+\n+void\n+PrivacyReporter::visit (HIR::TypeAlias &type_alias)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::StructStruct &struct_item)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TupleStruct &tuple_struct)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::EnumItem &item)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::EnumItemTuple &item)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::EnumItemStruct &item)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::EnumItemDiscriminant &item)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::Enum &enum_item)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::Union &union_item)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ConstantItem &const_item)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::StaticItem &static_item)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TraitItemFunc &item)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TraitItemConst &item)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TraitItemType &item)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::Trait &trait)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ImplBlock &impl)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ExternalStaticItem &item)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ExternalFunctionItem &item)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ExternBlock &block)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::LiteralPattern &pattern)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::IdentifierPattern &pattern)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::WildcardPattern &pattern)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::RangePatternBoundLiteral &bound)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::RangePatternBoundPath &bound)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::RangePatternBoundQualPath &bound)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::RangePattern &pattern)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ReferencePattern &pattern)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::StructPatternFieldTuplePat &field)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::StructPatternFieldIdentPat &field)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::StructPatternFieldIdent &field)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::StructPattern &pattern)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TupleStructItemsNoRange &tuple_items)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TupleStructItemsRange &tuple_items)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TupleStructPattern &pattern)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TuplePatternItemsMultiple &tuple_items)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TuplePatternItemsRanged &tuple_items)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TuplePattern &pattern)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::GroupedPattern &pattern)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::SlicePattern &pattern)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::EmptyStmt &stmt)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::LetStmt &stmt)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ExprStmtWithoutBlock &stmt)\n+{\n+  stmt.get_expr ()->accept_vis (*this);\n+}\n+\n+void\n+PrivacyReporter::visit (HIR::ExprStmtWithBlock &stmt)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TraitBound &bound)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ImplTraitType &type)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TraitObjectType &type)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ParenthesisedType &type)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ImplTraitTypeOneBound &type)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::TupleType &type)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::NeverType &type)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::RawPointerType &type)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ReferenceType &type)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::ArrayType &type)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::SliceType &type)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::InferredType &type)\n+{}\n+\n+void\n+PrivacyReporter::visit (HIR::BareFunctionType &type)\n+{}\n+\n+} // namespace Privacy\n+} // namespace Rust"}, {"sha": "fafcec1edac808465f65cf04e23ddd014b860913", "filename": "gcc/rust/privacy/rust-privacy-reporter.h", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-reporter.h?ref=48fc2df91b07709f41ab80499a661ac9f12f3be3", "patch": "@@ -0,0 +1,201 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_PRIVACY_REPORTER_H\n+#define RUST_PRIVACY_REPORTER_H\n+\n+#include \"rust-hir-map.h\"\n+#include \"rust-hir-visitor.h\"\n+#include \"rust-mapping-common.h\"\n+#include \"rust-name-resolver.h\"\n+\n+namespace Rust {\n+namespace Privacy {\n+\n+/**\n+ * This visitor visits all items and expressions of a crate and reports privacy\n+ * violations. It should be started after using the `VisibilityResolver` visitor\n+ * which resolves the visibilities of all items of a crate.\n+ */\n+class PrivacyReporter : public HIR::HIRFullVisitor\n+{\n+public:\n+  PrivacyReporter (Analysis::Mappings &mappings,\n+\t\t   Rust::Resolver::Resolver &resolver);\n+\n+  /**\n+   * Perform privacy error reporting on an entire crate\n+   */\n+  void go (HIR::Crate &crate);\n+\n+private:\n+  /**\n+   * Check if a given item's visibility is accessible from the current module.\n+   *\n+   * This function reports the errors it finds.\n+   *\n+   * @param use_id NodeId of the expression/statement referencing an item with\n+   * \t\ta visibility\n+   * @param locus Location of said expression/statement\n+   */\n+  void check_for_privacy_violation (const NodeId &use_id,\n+\t\t\t\t    const Location &locus);\n+\n+  virtual void visit (HIR::IdentifierExpr &ident_expr);\n+  virtual void visit (HIR::Lifetime &lifetime);\n+  virtual void visit (HIR::LifetimeParam &lifetime_param);\n+  virtual void visit (HIR::PathInExpression &path);\n+  virtual void visit (HIR::TypePathSegment &segment);\n+  virtual void visit (HIR::TypePathSegmentGeneric &segment);\n+  virtual void visit (HIR::TypePathSegmentFunction &segment);\n+  virtual void visit (HIR::TypePath &path);\n+  virtual void visit (HIR::QualifiedPathInExpression &path);\n+  virtual void visit (HIR::QualifiedPathInType &path);\n+  virtual void visit (HIR::LiteralExpr &expr);\n+  virtual void visit (HIR::BorrowExpr &expr);\n+  virtual void visit (HIR::DereferenceExpr &expr);\n+  virtual void visit (HIR::ErrorPropagationExpr &expr);\n+  virtual void visit (HIR::NegationExpr &expr);\n+  virtual void visit (HIR::ArithmeticOrLogicalExpr &expr);\n+  virtual void visit (HIR::ComparisonExpr &expr);\n+  virtual void visit (HIR::LazyBooleanExpr &expr);\n+  virtual void visit (HIR::TypeCastExpr &expr);\n+  virtual void visit (HIR::AssignmentExpr &expr);\n+  virtual void visit (HIR::CompoundAssignmentExpr &expr);\n+  virtual void visit (HIR::GroupedExpr &expr);\n+  virtual void visit (HIR::ArrayElemsValues &elems);\n+  virtual void visit (HIR::ArrayElemsCopied &elems);\n+  virtual void visit (HIR::ArrayExpr &expr);\n+  virtual void visit (HIR::ArrayIndexExpr &expr);\n+  virtual void visit (HIR::TupleExpr &expr);\n+  virtual void visit (HIR::TupleIndexExpr &expr);\n+  virtual void visit (HIR::StructExprStruct &expr);\n+  virtual void visit (HIR::StructExprFieldIdentifier &field);\n+  virtual void visit (HIR::StructExprFieldIdentifierValue &field);\n+  virtual void visit (HIR::StructExprFieldIndexValue &field);\n+  virtual void visit (HIR::StructExprStructFields &expr);\n+  virtual void visit (HIR::StructExprStructBase &expr);\n+  virtual void visit (HIR::CallExpr &expr);\n+  virtual void visit (HIR::MethodCallExpr &expr);\n+  virtual void visit (HIR::FieldAccessExpr &expr);\n+  virtual void visit (HIR::ClosureExprInner &expr);\n+  virtual void visit (HIR::BlockExpr &expr);\n+  virtual void visit (HIR::ClosureExprInnerTyped &expr);\n+  virtual void visit (HIR::ContinueExpr &expr);\n+  virtual void visit (HIR::BreakExpr &expr);\n+  virtual void visit (HIR::RangeFromToExpr &expr);\n+  virtual void visit (HIR::RangeFromExpr &expr);\n+  virtual void visit (HIR::RangeToExpr &expr);\n+  virtual void visit (HIR::RangeFullExpr &expr);\n+  virtual void visit (HIR::RangeFromToInclExpr &expr);\n+  virtual void visit (HIR::RangeToInclExpr &expr);\n+  virtual void visit (HIR::ReturnExpr &expr);\n+  virtual void visit (HIR::UnsafeBlockExpr &expr);\n+  virtual void visit (HIR::LoopExpr &expr);\n+  virtual void visit (HIR::WhileLoopExpr &expr);\n+  virtual void visit (HIR::WhileLetLoopExpr &expr);\n+  virtual void visit (HIR::ForLoopExpr &expr);\n+  virtual void visit (HIR::IfExpr &expr);\n+  virtual void visit (HIR::IfExprConseqElse &expr);\n+  virtual void visit (HIR::IfExprConseqIf &expr);\n+  virtual void visit (HIR::IfExprConseqIfLet &expr);\n+  virtual void visit (HIR::IfLetExpr &expr);\n+  virtual void visit (HIR::IfLetExprConseqElse &expr);\n+  virtual void visit (HIR::IfLetExprConseqIf &expr);\n+  virtual void visit (HIR::IfLetExprConseqIfLet &expr);\n+  virtual void visit (HIR::MatchExpr &expr);\n+  virtual void visit (HIR::AwaitExpr &expr);\n+  virtual void visit (HIR::AsyncBlockExpr &expr);\n+  virtual void visit (HIR::TypeParam &param);\n+  virtual void visit (HIR::LifetimeWhereClauseItem &item);\n+  virtual void visit (HIR::TypeBoundWhereClauseItem &item);\n+  virtual void visit (HIR::Module &module);\n+  virtual void visit (HIR::ExternCrate &crate);\n+  virtual void visit (HIR::UseTreeGlob &use_tree);\n+  virtual void visit (HIR::UseTreeList &use_tree);\n+  virtual void visit (HIR::UseTreeRebind &use_tree);\n+  virtual void visit (HIR::UseDeclaration &use_decl);\n+  virtual void visit (HIR::Function &function);\n+  virtual void visit (HIR::TypeAlias &type_alias);\n+  virtual void visit (HIR::StructStruct &struct_item);\n+  virtual void visit (HIR::TupleStruct &tuple_struct);\n+  virtual void visit (HIR::EnumItem &item);\n+  virtual void visit (HIR::EnumItemTuple &item);\n+  virtual void visit (HIR::EnumItemStruct &item);\n+  virtual void visit (HIR::EnumItemDiscriminant &item);\n+  virtual void visit (HIR::Enum &enum_item);\n+  virtual void visit (HIR::Union &union_item);\n+  virtual void visit (HIR::ConstantItem &const_item);\n+  virtual void visit (HIR::StaticItem &static_item);\n+  virtual void visit (HIR::TraitItemFunc &item);\n+  virtual void visit (HIR::TraitItemConst &item);\n+  virtual void visit (HIR::TraitItemType &item);\n+  virtual void visit (HIR::Trait &trait);\n+  virtual void visit (HIR::ImplBlock &impl);\n+  virtual void visit (HIR::ExternalStaticItem &item);\n+  virtual void visit (HIR::ExternalFunctionItem &item);\n+  virtual void visit (HIR::ExternBlock &block);\n+  virtual void visit (HIR::LiteralPattern &pattern);\n+  virtual void visit (HIR::IdentifierPattern &pattern);\n+  virtual void visit (HIR::WildcardPattern &pattern);\n+  virtual void visit (HIR::RangePatternBoundLiteral &bound);\n+  virtual void visit (HIR::RangePatternBoundPath &bound);\n+  virtual void visit (HIR::RangePatternBoundQualPath &bound);\n+  virtual void visit (HIR::RangePattern &pattern);\n+  virtual void visit (HIR::ReferencePattern &pattern);\n+  virtual void visit (HIR::StructPatternFieldTuplePat &field);\n+  virtual void visit (HIR::StructPatternFieldIdentPat &field);\n+  virtual void visit (HIR::StructPatternFieldIdent &field);\n+  virtual void visit (HIR::StructPattern &pattern);\n+  virtual void visit (HIR::TupleStructItemsNoRange &tuple_items);\n+  virtual void visit (HIR::TupleStructItemsRange &tuple_items);\n+  virtual void visit (HIR::TupleStructPattern &pattern);\n+  virtual void visit (HIR::TuplePatternItemsMultiple &tuple_items);\n+  virtual void visit (HIR::TuplePatternItemsRanged &tuple_items);\n+  virtual void visit (HIR::TuplePattern &pattern);\n+  virtual void visit (HIR::GroupedPattern &pattern);\n+  virtual void visit (HIR::SlicePattern &pattern);\n+  virtual void visit (HIR::EmptyStmt &stmt);\n+  virtual void visit (HIR::LetStmt &stmt);\n+  virtual void visit (HIR::ExprStmtWithoutBlock &stmt);\n+  virtual void visit (HIR::ExprStmtWithBlock &stmt);\n+  virtual void visit (HIR::TraitBound &bound);\n+  virtual void visit (HIR::ImplTraitType &type);\n+  virtual void visit (HIR::TraitObjectType &type);\n+  virtual void visit (HIR::ParenthesisedType &type);\n+  virtual void visit (HIR::ImplTraitTypeOneBound &type);\n+  virtual void visit (HIR::TupleType &type);\n+  virtual void visit (HIR::NeverType &type);\n+  virtual void visit (HIR::RawPointerType &type);\n+  virtual void visit (HIR::ReferenceType &type);\n+  virtual void visit (HIR::ArrayType &type);\n+  virtual void visit (HIR::SliceType &type);\n+  virtual void visit (HIR::InferredType &type);\n+  virtual void visit (HIR::BareFunctionType &type);\n+\n+  Analysis::Mappings &mappings;\n+  Rust::Resolver::Resolver &resolver;\n+\n+  // `None` means we're in the root module - the crate\n+  Optional<NodeId> current_module;\n+};\n+\n+} // namespace Privacy\n+} // namespace Rust\n+\n+#endif // !RUST_PRIVACY_REPORTER_H"}, {"sha": "e391653ea26f392daa19e5d52b88d7ac8ccb8a12", "filename": "gcc/rust/privacy/rust-pub-restricted-visitor.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2Fprivacy%2Frust-pub-restricted-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2Fprivacy%2Frust-pub-restricted-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-pub-restricted-visitor.cc?ref=48fc2df91b07709f41ab80499a661ac9f12f3be3", "patch": "@@ -31,6 +31,7 @@ PubRestrictedVisitor::is_restriction_valid (NodeId item_id,\n \n   // If there is no visibility in the mappings, then the item is private and\n   // does not contain any restriction\n+  // FIXME: Is that correct?\n   if (!mappings.lookup_visibility (item_id, visibility))\n     return true;\n "}, {"sha": "421dff0ef3dfb690b269c250b7970b909ae96b8b", "filename": "gcc/rust/privacy/rust-visibility-resolver.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc?ref=48fc2df91b07709f41ab80499a661ac9f12f3be3", "patch": "@@ -35,6 +35,8 @@ VisibilityResolver::go (HIR::Crate &crate)\n   mappings.insert_visibility (crate.get_mappings ().get_nodeid (),\n \t\t\t      ModuleVisibility::create_public ());\n \n+  current_module = crate.get_mappings ().get_defid ();\n+\n   for (auto &item : crate.items)\n     {\n       if (item->get_hir_kind () == HIR::Node::VIS_ITEM)\n@@ -103,7 +105,7 @@ VisibilityResolver::resolve_visibility (const HIR::Visibility &visibility,\n   switch (visibility.get_vis_type ())\n     {\n     case HIR::Visibility::PRIVATE:\n-      to_resolve = ModuleVisibility::create_private ();\n+      to_resolve = ModuleVisibility::create_restricted (current_module);\n       return true;\n     case HIR::Visibility::PUBLIC:\n       to_resolve = ModuleVisibility::create_public ();\n@@ -134,6 +136,9 @@ VisibilityResolver::resolve_and_update (const HIR::VisItem *item)\n void\n VisibilityResolver::visit (HIR::Module &mod)\n {\n+  auto old_module = current_module;\n+  current_module = mod.get_mappings ().get_defid ();\n+\n   for (auto &item : mod.get_items ())\n     {\n       if (item->get_hir_kind () == HIR::Node::VIS_ITEM)\n@@ -142,6 +147,8 @@ VisibilityResolver::visit (HIR::Module &mod)\n \t  vis_item->accept_vis (*this);\n \t}\n     }\n+\n+  current_module = old_module;\n }\n \n void"}, {"sha": "20a581c16d4a3a485e8917ddb3e2de2dd4dd920d", "filename": "gcc/rust/privacy/rust-visibility-resolver.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h?ref=48fc2df91b07709f41ab80499a661ac9f12f3be3", "patch": "@@ -94,6 +94,7 @@ class VisibilityResolver : public HIR::HIRVisItemVisitor\n private:\n   Analysis::Mappings &mappings;\n   Rust::Resolver::Resolver &resolver;\n+  DefId current_module;\n };\n \n } // namespace Privacy"}, {"sha": "56465400250f096b7811c57784e1fe545c8c2028", "filename": "gcc/rust/util/rust-optional.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2Futil%2Frust-optional.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Frust%2Futil%2Frust-optional.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-optional.h?ref=48fc2df91b07709f41ab80499a661ac9f12f3be3", "patch": "@@ -96,6 +96,7 @@ template <typename T> class Optional\n \n public:\n   Optional (const Optional &other) = default;\n+  Optional &operator= (const Optional &other) = default;\n   Optional (Optional &&other) = default;\n \n   static Optional<T> some (T value)"}, {"sha": "1cc83c04abe8c6568e3b8f81ec9f84db85087a77", "filename": "gcc/testsuite/rust/compile/privacy1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fprivacy1.rs?ref=48fc2df91b07709f41ab80499a661ac9f12f3be3", "patch": "@@ -0,0 +1,11 @@\n+mod orange {\n+    mod green {\n+        fn sain() {}\n+        pub fn doux() {}\n+    }\n+\n+    fn brown() {\n+        green::sain(); // { dg-error \"definition is private in this context\" }\n+        green::doux();\n+    }\n+}"}, {"sha": "d477385d761fb8093aa32685c489d6e42f8920bf", "filename": "gcc/testsuite/rust/compile/pub_restricted_3.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48fc2df91b07709f41ab80499a661ac9f12f3be3/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_3.rs?ref=48fc2df91b07709f41ab80499a661ac9f12f3be3", "patch": "@@ -0,0 +1,11 @@\n+// { dg-additional-options \"-w\" }\n+\n+mod foo {\n+    mod bar {\n+        pub(in foo) fn baz() {}\n+    }\n+\n+    fn baz() {\n+        bar::baz(); // no error, foo::bar::baz is public in foo\n+    }\n+}"}]}