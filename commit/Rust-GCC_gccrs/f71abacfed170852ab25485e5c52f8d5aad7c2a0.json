{"sha": "f71abacfed170852ab25485e5c52f8d5aad7c2a0", "node_id": "C_kwDOANBUbNoAKGY3MWFiYWNmZWQxNzA4NTJhYjI1NDg1ZTVjNTJmOGQ1YWFkN2MyYTA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-19T13:11:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-30T08:05:38Z"}, "message": "Use reachability analysis to improve uninit diagnostic\n\nThis patch does what the comment in uninit diagnostic suggests.\nWhen the value-numbering run done without optimizing figures there's\na fallthru path, consider blocks on it as always executed.\n\n\t* tree-ssa-uninit.cc (warn_uninitialized_vars): Pre-compute\n\tthe set of fallthru reachable blocks from function entry\n\tand use that to determine wlims.always_executed.", "tree": {"sha": "aa71d253d28d289d9948a9c85fd066ccceda1a2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa71d253d28d289d9948a9c85fd066ccceda1a2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f71abacfed170852ab25485e5c52f8d5aad7c2a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71abacfed170852ab25485e5c52f8d5aad7c2a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f71abacfed170852ab25485e5c52f8d5aad7c2a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71abacfed170852ab25485e5c52f8d5aad7c2a0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfaa6807defb18874e4c4b6b8608fe0afee7d7b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfaa6807defb18874e4c4b6b8608fe0afee7d7b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfaa6807defb18874e4c4b6b8608fe0afee7d7b8"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "c25fbe6381e77655b66618416a643b06029252ff", "filename": "gcc/tree-ssa-uninit.cc", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71abacfed170852ab25485e5c52f8d5aad7c2a0/gcc%2Ftree-ssa-uninit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71abacfed170852ab25485e5c52f8d5aad7c2a0/gcc%2Ftree-ssa-uninit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.cc?ref=f71abacfed170852ab25485e5c52f8d5aad7c2a0", "patch": "@@ -988,10 +988,43 @@ warn_uninitialized_vars (bool wmaybe_uninit)\n   wlimits wlims = { };\n   wlims.wmaybe_uninit = wmaybe_uninit;\n \n-  gimple_stmt_iterator gsi;\n-  basic_block bb;\n+  auto_bb_flag ft_reachable (cfun);\n+\n+  /* Mark blocks that are always executed when we ignore provably\n+     not executed edges.  */\n+  basic_block bb = single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n+  while (!(bb->flags & ft_reachable))\n+    {\n+      bb->flags |= ft_reachable;\n+      /* Find a single executable edge.  */\n+      edge_iterator ei;\n+      edge e, ee = NULL;\n+      FOR_EACH_EDGE (e, ei, bb->succs)\n+\tif (e->flags & EDGE_EXECUTABLE)\n+\t  {\n+\t    if (!ee)\n+\t      ee = e;\n+\t    else\n+\t      {\n+\t\tee = NULL;\n+\t\tbreak;\n+\t      }\n+\t  }\n+      if (ee)\n+\tbb = ee->dest;\n+      else\n+\t{\n+\t  bb = get_immediate_dominator (CDI_POST_DOMINATORS, bb);\n+\t  if (!bb || bb->index == EXIT_BLOCK)\n+\t    break;\n+\t}\n+    }\n+\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n+      wlims.always_executed = (bb->flags & ft_reachable);\n+      bb->flags &= ~ft_reachable;\n+\n       edge_iterator ei;\n       edge e;\n       FOR_EACH_EDGE (e, ei, bb->preds)\n@@ -1002,14 +1035,10 @@ warn_uninitialized_vars (bool wmaybe_uninit)\n       if (!e)\n \tcontinue;\n \n-      basic_block succ = single_succ (ENTRY_BLOCK_PTR_FOR_FN (cfun));\n-      /* ???  This could be improved when we use a greedy walk and have\n-\t some edges marked as not executable.  */\n-      wlims.always_executed = dominated_by_p (CDI_POST_DOMINATORS, succ, bb);\n-\n       if (wlims.always_executed)\n \twarn_uninit_phi_uses (bb);\n \n+      gimple_stmt_iterator gsi;\n       for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t{\n \t  gimple *stmt = gsi_stmt (gsi);\n@@ -1030,7 +1059,7 @@ warn_uninitialized_vars (bool wmaybe_uninit)\n \t  FOR_EACH_SSA_USE_OPERAND (use_p, stmt, op_iter, SSA_OP_USE)\n \t    {\n \t      /* BIT_INSERT_EXPR first operand should not be considered\n-\t         a use for the purpose of uninit warnings.  */\n+\t\t a use for the purpose of uninit warnings.  */\n \t      if (gassign *ass = dyn_cast <gassign *> (stmt))\n \t\t{\n \t\t  if (gimple_assign_rhs_code (ass) == BIT_INSERT_EXPR\n@@ -1041,7 +1070,7 @@ warn_uninitialized_vars (bool wmaybe_uninit)\n \t      if (wlims.always_executed)\n \t\twarn_uninit (OPT_Wuninitialized, use,\n \t\t\t     SSA_NAME_VAR (use), stmt);\n-\t      else if (wmaybe_uninit)\n+\t      else if (wlims.wmaybe_uninit)\n \t\twarn_uninit (OPT_Wmaybe_uninitialized, use,\n \t\t\t     SSA_NAME_VAR (use), stmt);\n \t    }"}]}