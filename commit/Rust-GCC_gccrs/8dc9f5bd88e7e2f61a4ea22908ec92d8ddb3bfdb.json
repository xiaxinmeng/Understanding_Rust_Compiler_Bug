{"sha": "8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRjOWY1YmQ4OGU3ZTJmNjFhNGVhMjI5MDhlYzkyZDhkZGIzYmZkYg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2010-07-12T21:06:06Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2010-07-12T21:06:06Z"}, "message": "spu.h (struct spu_builtin_description): Remove FNDECL member.\n\n\t* config/spu/spu.h (struct spu_builtin_description): Remove FNDECL\n\tmember.  Do not mark as GTY(()).\n\t* config/spu/spu.c (spu_builtins): Remove FNDECL initializer elements.\n\t(spu_builtin_decls): New static variable.\n\t(spu_builtin_decl): Use it instead of spu_builtins[].fndecl.\n\t(spu_init_builtins): Likewise.\n\t(spu_builtin_mul_widen_even): Likewise.\n\t(spu_builtin_mul_widen_odd): Likewise.\n\t(spu_builtin_mask_for_load): Likewise.\n\t(spu_builtin_vec_perm): Likewise.\n\t* config/spu/spu-c.c: Include \"target.h\".\n\t(spu_resolve_overloaded_builtin): Call targetm.builtin_decl instead\n\tof using spu_builtins[].fndecl.\n\nFrom-SVN: r162114", "tree": {"sha": "d22d640fbcecf17e93ad6bd09fcfa0303860d3cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d22d640fbcecf17e93ad6bd09fcfa0303860d3cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb/comments", "author": null, "committer": null, "parents": [{"sha": "248ce2f8d14c044c9c540a02f112c521a2e616b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248ce2f8d14c044c9c540a02f112c521a2e616b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/248ce2f8d14c044c9c540a02f112c521a2e616b0"}], "stats": {"total": 80, "additions": 42, "deletions": 38}, "files": [{"sha": "0b7b39e035324c6af2e8689a09b1e0466ea56d2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb", "patch": "@@ -1,3 +1,19 @@\n+2010-07-12  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* config/spu/spu.h (struct spu_builtin_description): Remove FNDECL\n+\tmember.  Do not mark as GTY(()).\n+\t* config/spu/spu.c (spu_builtins): Remove FNDECL initializer elements.\n+\t(spu_builtin_decls): New static variable.\n+\t(spu_builtin_decl): Use it instead of spu_builtins[].fndecl.\n+\t(spu_init_builtins): Likewise.\n+\t(spu_builtin_mul_widen_even): Likewise.\n+\t(spu_builtin_mul_widen_odd): Likewise.\n+\t(spu_builtin_mask_for_load): Likewise.\n+\t(spu_builtin_vec_perm): Likewise.\n+\t* config/spu/spu-c.c: Include \"target.h\".\n+\t(spu_resolve_overloaded_builtin): Call targetm.builtin_decl instead\n+\tof using spu_builtins[].fndecl.\n+\n 2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.c (mips_override_options): Make -mflip-mips16"}, {"sha": "1f22cd6fb7c10bfcd14f8acdd9031e00a8467495", "filename": "gcc/config/spu/spu-c.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb/gcc%2Fconfig%2Fspu%2Fspu-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb/gcc%2Fconfig%2Fspu%2Fspu-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-c.c?ref=8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb", "patch": "@@ -24,6 +24,7 @@\n #include \"c-family/c-pragma.h\"\n #include \"tm_p.h\"\n #include \"langhooks.h\"\n+#include \"target.h\"\n \f\n \n /* Keep the vector keywords handy for fast comparisons.  */\n@@ -111,7 +112,7 @@ spu_resolve_overloaded_builtin (location_t loc, tree fndecl, void *passed_args)\n   for (new_fcode = fcode + 1; spu_builtins[new_fcode].type == B_INTERNAL;\n        new_fcode++)\n     {\n-      tree decl = spu_builtins[new_fcode].fndecl;\n+      tree decl = targetm.builtin_decl (new_fcode, true);\n       tree params = TYPE_ARG_TYPES (TREE_TYPE (decl));\n       tree param;\n       bool all_scalar;"}, {"sha": "3e11001e2d5b22583a9a4a7c76d6fc5d9ea1aa54", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 23, "deletions": 34, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb", "patch": "@@ -5618,20 +5618,22 @@ extern GTY(()) struct spu_builtin_description spu_builtins[NUM_SPU_BUILTINS];\n \n struct spu_builtin_description spu_builtins[] = {\n #define DEF_BUILTIN(fcode, icode, name, type, params) \\\n-  {fcode, icode, name, type, params, NULL_TREE},\n+  {fcode, icode, name, type, params},\n #include \"spu-builtins.def\"\n #undef DEF_BUILTIN\n };\n \n-/* Returns the rs6000 builtin decl for CODE.  */\n+static GTY(()) tree spu_builtin_decls[NUM_SPU_BUILTINS];\n+\n+/* Returns the spu builtin decl for CODE.  */\n \n static tree\n spu_builtin_decl (unsigned code, bool initialize_p ATTRIBUTE_UNUSED)\n {           \n   if (code >= NUM_SPU_BUILTINS)\n     return error_mark_node;\n           \n-  return spu_builtins[code].fndecl;\n+  return spu_builtin_decls[code];\n }\n \n \n@@ -5709,14 +5711,14 @@ spu_init_builtins (void)\n       p = build_function_type (spu_builtin_types[d->parm[0]], p);\n \n       sprintf (name, \"__builtin_%s\", d->name);\n-      d->fndecl =\n+      spu_builtin_decls[i] =\n \tadd_builtin_function (name, p, END_BUILTINS + i, BUILT_IN_MD,\n \t\t\t      NULL, NULL_TREE);\n       if (d->fcode == SPU_MASK_FOR_LOAD)\n-\tTREE_READONLY (d->fndecl) = 1;\t\n+\tTREE_READONLY (spu_builtin_decls[i]) = 1;\t\n \n       /* These builtins don't throw.  */\n-      TREE_NOTHROW (d->fndecl) = 1;\n+      TREE_NOTHROW (spu_builtin_decls[i]) = 1;\n     }\n }\n \n@@ -6659,9 +6661,9 @@ spu_builtin_mul_widen_even (tree type)\n     {\n     case V8HImode:\n       if (TYPE_UNSIGNED (type))\n-\treturn spu_builtins[SPU_MULE_0].fndecl;\n+\treturn spu_builtin_decls[SPU_MULE_0];\n       else\n-\treturn spu_builtins[SPU_MULE_1].fndecl;\n+\treturn spu_builtin_decls[SPU_MULE_1];\n       break;\n     default:\n       return NULL_TREE;\n@@ -6676,9 +6678,9 @@ spu_builtin_mul_widen_odd (tree type)\n     {\n     case V8HImode:\n       if (TYPE_UNSIGNED (type))\n-\treturn spu_builtins[SPU_MULO_1].fndecl;\n+\treturn spu_builtin_decls[SPU_MULO_1];\n       else\n-\treturn spu_builtins[SPU_MULO_0].fndecl; \n+\treturn spu_builtin_decls[SPU_MULO_0]; \n       break;\n     default:\n       return NULL_TREE;\n@@ -6689,9 +6691,7 @@ spu_builtin_mul_widen_odd (tree type)\n static tree\n spu_builtin_mask_for_load (void)\n {\n-  struct spu_builtin_description *d = &spu_builtins[SPU_MASK_FOR_LOAD];\n-  gcc_assert (d);\n-  return d->fndecl;\n+  return spu_builtin_decls[SPU_MASK_FOR_LOAD];\n }\n \n /* Implement targetm.vectorize.builtin_vectorization_cost.  */\n@@ -6748,54 +6748,43 @@ spu_vector_alignment_reachable (const_tree type ATTRIBUTE_UNUSED, bool is_packed\n tree\n spu_builtin_vec_perm (tree type, tree *mask_element_type)\n {\n-  struct spu_builtin_description *d;\n-\n   *mask_element_type = unsigned_char_type_node;\n \n   switch (TYPE_MODE (type))\n     {\n     case V16QImode:\n       if (TYPE_UNSIGNED (type))\n-        d = &spu_builtins[SPU_SHUFFLE_0];\n+        return spu_builtin_decls[SPU_SHUFFLE_0];\n       else\n-        d = &spu_builtins[SPU_SHUFFLE_1];\n-      break;\n+        return spu_builtin_decls[SPU_SHUFFLE_1];\n \n     case V8HImode:\n       if (TYPE_UNSIGNED (type))\n-        d = &spu_builtins[SPU_SHUFFLE_2];\n+        return spu_builtin_decls[SPU_SHUFFLE_2];\n       else\n-        d = &spu_builtins[SPU_SHUFFLE_3];\n-      break;\n+        return spu_builtin_decls[SPU_SHUFFLE_3];\n \n     case V4SImode:\n       if (TYPE_UNSIGNED (type))\n-        d = &spu_builtins[SPU_SHUFFLE_4];\n+        return spu_builtin_decls[SPU_SHUFFLE_4];\n       else\n-        d = &spu_builtins[SPU_SHUFFLE_5];\n-      break;\n+        return spu_builtin_decls[SPU_SHUFFLE_5];\n \n     case V2DImode:\n       if (TYPE_UNSIGNED (type))\n-        d = &spu_builtins[SPU_SHUFFLE_6];\n+        return spu_builtin_decls[SPU_SHUFFLE_6];\n       else\n-        d = &spu_builtins[SPU_SHUFFLE_7];\n-      break;\n+        return spu_builtin_decls[SPU_SHUFFLE_7];\n \n     case V4SFmode:\n-      d = &spu_builtins[SPU_SHUFFLE_8];\n-      break;\n+      return spu_builtin_decls[SPU_SHUFFLE_8];\n \n     case V2DFmode:\n-      d = &spu_builtins[SPU_SHUFFLE_9];\n-      break;\n+      return spu_builtin_decls[SPU_SHUFFLE_9];\n \n     default:\n       return NULL_TREE;\n     }\n-\n-  gcc_assert (d);\n-  return d->fndecl;\n }\n \n /* Return the appropriate mode for a named address pointer.  */"}, {"sha": "1184227bf01fbc58101e293c4b64a3e2b1f81857", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=8dc9f5bd88e7e2f61a4ea22908ec92d8ddb3bfdb", "patch": "@@ -570,7 +570,7 @@ enum spu_builtin_type\n   B_INTERNAL\n };\n \n-struct GTY(()) spu_builtin_description\n+struct spu_builtin_description\n {\n   int fcode;\n   int icode;\n@@ -580,8 +580,6 @@ struct GTY(()) spu_builtin_description\n   /* The first element of parm is always the return type.  The rest\n      are a zero terminated list of parameters.  */\n   int parm[5];\n-\n-  tree fndecl;\n };\n \n extern struct spu_builtin_description spu_builtins[];"}]}