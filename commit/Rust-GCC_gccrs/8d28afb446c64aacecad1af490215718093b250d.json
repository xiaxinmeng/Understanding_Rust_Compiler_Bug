{"sha": "8d28afb446c64aacecad1af490215718093b250d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQyOGFmYjQ0NmM2NGFhY2VjYWQxYWY0OTAyMTU3MTgwOTNiMjUwZA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2012-12-10T11:09:12Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2012-12-10T11:09:12Z"}, "message": "neon.ml (opcode): Add Vrintn, Vrinta, Vrintp, Vrintm, Vrintz to type.\n\ngcc/ChangeLog\n\n2012-12-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/arm/neon.ml (opcode): Add Vrintn, Vrinta, Vrintp, Vrintm,\n\tVrintz to type.\n\t(type features): Add Requires_arch type constructor.\n\t(ops): Define Vrintn, Vrinta, Vrintp, Vrintm, Vrintz features.\n\t* config/arm/neon-docgen.ml (intrinsic_groups): Define Vrintn,\n\tVrinta, Vrintp, Vrintm, Vrintz, Vrintx.\n\t* config/arm/neon-testgen.ml (effective_target): Define check for \n\tRequires_arch 8.\n\t* config/arm/neon-gen.ml \n\t(print_feature_test_start): Handle Requires_arch.\n\t(print_feature_test_end): Likewise.\n\tAdd 2012 to Copyright notice.\n\t* doc/arm-neon-intrinsics.texi: Regenerate.\n\t* config/arm/arm_neon.h: Regenerate.\n\ngcc/testsuite/ChangeLog\n\n2012-12-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* gcc.target/arm/neon/vrndaf32.c: New test.\n\t* gcc.target/arm/neon/vrndqaf32.c: Likewise.\n\t* gcc.target/arm/neon/vrndf32.c: Likewise.\n\t* gcc.target/arm/neon/vrndqf32.c: Likewise.\n\t* gcc.target/arm/neon/vrndmf32.c: Likewise.\n\t* gcc.target/arm/neon/vrndqmf32.c: Likewise.\n\t* gcc.target/arm/neon/vrndnf32.c: Likewise.\n\t* gcc.target/arm/neon/vrndqnf32.c: Likewise.\n\t* gcc.target/arm/neon/vrndpf32.c: Likewise.\n\t* gcc.target/arm/neon/vrndqpf32.c: Likewise.\n\nFrom-SVN: r194353", "tree": {"sha": "854e946a1f54b8da71badc02e28af9e95555b195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/854e946a1f54b8da71badc02e28af9e95555b195"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d28afb446c64aacecad1af490215718093b250d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d28afb446c64aacecad1af490215718093b250d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d28afb446c64aacecad1af490215718093b250d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d28afb446c64aacecad1af490215718093b250d/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0da911e95e175f18749186a6cb46c36027188822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0da911e95e175f18749186a6cb46c36027188822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0da911e95e175f18749186a6cb46c36027188822"}], "stats": {"total": 498, "additions": 463, "deletions": 35}, "files": [{"sha": "249004e7dfc9929698ae04e91d35d60a2d14fa0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -1,3 +1,20 @@\n+2012-12-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/neon.ml (opcode): Add Vrintn, Vrinta, Vrintp, Vrintm,\n+\tVrintz to type.\n+\t(type features): Add Requires_arch type constructor.\n+\t(ops): Define Vrintn, Vrinta, Vrintp, Vrintm, Vrintz features.\n+\t* config/arm/neon-docgen.ml (intrinsic_groups): Define Vrintn,\n+\tVrinta, Vrintp, Vrintm, Vrintz, Vrintx.\n+\t* config/arm/neon-testgen.ml (effective_target): Define check for \n+\tRequires_arch 8.\n+\t* config/arm/neon-gen.ml \n+\t(print_feature_test_start): Handle Requires_arch.\n+\t(print_feature_test_end): Likewise.\n+\tAdd 2012 to Copyright notice.\n+\t* doc/arm-neon-intrinsics.texi: Regenerate.\n+\t* config/arm/arm_neon.h: Regenerate.\n+\n 2012-12-10 Kai Tietz  <ktietz@redhat.com>\n \n \t* stmt.c (expand_sjlj_dispatch_table): Fix off by one."}, {"sha": "a79c9221db353fd80c75b7aa0ed61b68f05e7d22", "filename": "gcc/config/arm/arm_neon.h", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Fconfig%2Farm%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Fconfig%2Farm%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_neon.h?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -1,7 +1,7 @@\n /* ARM NEON intrinsics include file. This file is generated automatically\n    using neon-gen.ml.  Please do not edit manually.\n \n-   Copyright (C) 2006, 2007, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2006, 2007, 2009, 2012 Free Software Foundation, Inc.\n    Contributed by CodeSourcery.\n \n    This file is part of GCC.\n@@ -1381,6 +1381,86 @@ vfmsq_f32 (float32x4_t __a, float32x4_t __b, float32x4_t __c)\n   return (float32x4_t)__builtin_neon_vfmsv4sf (__a, __b, __c, 3);\n }\n \n+#endif\n+#if __ARM_ARCH >= 8\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vrndn_f32 (float32x2_t __a)\n+{\n+  return (float32x2_t)__builtin_neon_vrintnv2sf (__a);\n+}\n+\n+#endif\n+#if __ARM_ARCH >= 8\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vrndqn_f32 (float32x4_t __a)\n+{\n+  return (float32x4_t)__builtin_neon_vrintnv4sf (__a);\n+}\n+\n+#endif\n+#if __ARM_ARCH >= 8\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vrnda_f32 (float32x2_t __a)\n+{\n+  return (float32x2_t)__builtin_neon_vrintav2sf (__a);\n+}\n+\n+#endif\n+#if __ARM_ARCH >= 8\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vrndqa_f32 (float32x4_t __a)\n+{\n+  return (float32x4_t)__builtin_neon_vrintav4sf (__a);\n+}\n+\n+#endif\n+#if __ARM_ARCH >= 8\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vrndp_f32 (float32x2_t __a)\n+{\n+  return (float32x2_t)__builtin_neon_vrintpv2sf (__a);\n+}\n+\n+#endif\n+#if __ARM_ARCH >= 8\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vrndqp_f32 (float32x4_t __a)\n+{\n+  return (float32x4_t)__builtin_neon_vrintpv4sf (__a);\n+}\n+\n+#endif\n+#if __ARM_ARCH >= 8\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vrndm_f32 (float32x2_t __a)\n+{\n+  return (float32x2_t)__builtin_neon_vrintmv2sf (__a);\n+}\n+\n+#endif\n+#if __ARM_ARCH >= 8\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vrndqm_f32 (float32x4_t __a)\n+{\n+  return (float32x4_t)__builtin_neon_vrintmv4sf (__a);\n+}\n+\n+#endif\n+#if __ARM_ARCH >= 8\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vrnd_f32 (float32x2_t __a)\n+{\n+  return (float32x2_t)__builtin_neon_vrintzv2sf (__a);\n+}\n+\n+#endif\n+#if __ARM_ARCH >= 8\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vrndq_f32 (float32x4_t __a)\n+{\n+  return (float32x4_t)__builtin_neon_vrintzv4sf (__a);\n+}\n+\n #endif\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vsub_s8 (int8x8_t __a, int8x8_t __b)"}, {"sha": "228de165603fb0c3c339bb9010cd29fa9e0299f1", "filename": "gcc/config/arm/neon-docgen.ml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Fconfig%2Farm%2Fneon-docgen.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Fconfig%2Farm%2Fneon-docgen.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon-docgen.ml?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -105,6 +105,11 @@ let intrinsic_groups =\n     \"Multiply-subtract\", single_opcode Vmls;\n     \"Fused-multiply-accumulate\", single_opcode Vfma;\n     \"Fused-multiply-subtract\", single_opcode Vfms;\n+    \"Round to integral (to nearest, ties to even)\", single_opcode Vrintn;\n+    \"Round to integral (to nearest, ties away from zero)\", single_opcode Vrinta;\n+    \"Round to integral (towards +Inf)\", single_opcode Vrintp;\n+    \"Round to integral (towards -Inf)\", single_opcode Vrintm;\n+    \"Round to integral (towards 0)\", single_opcode Vrintz;\n     \"Subtraction\", single_opcode Vsub;\n     \"Comparison (equal-to)\", single_opcode Vceq;\n     \"Comparison (greater-than-or-equal-to)\", single_opcode Vcge;"}, {"sha": "52ecb16ad8bf5197cdbe69921987ab8520158a6c", "filename": "gcc/config/arm/neon-gen.ml", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Fconfig%2Farm%2Fneon-gen.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Fconfig%2Farm%2Fneon-gen.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon-gen.ml?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -290,17 +290,21 @@ let print_feature_test_start features =\n   try\n     match List.find (fun feature ->\n                        match feature with Requires_feature _ -> true\n+                                        | Requires_arch _ -> true\n                                         | _ -> false)\n                      features with\n       Requires_feature feature -> \n         Format.printf \"#ifdef __ARM_FEATURE_%s@\\n\" feature\n+    | Requires_arch arch ->\n+        Format.printf \"#if __ARM_ARCH >= %d@\\n\" arch\n     | _ -> assert false\n   with Not_found -> assert true\n \n let print_feature_test_end features =\n   let feature =\n     List.exists (function Requires_feature x -> true\n-                                        |  _ -> false) features in\n+                          | Requires_arch x -> true\n+                          |  _ -> false) features in\n   if feature then Format.printf \"#endif@\\n\"\n \n \n@@ -437,7 +441,7 @@ let _ =\n \"/* ARM NEON intrinsics include file. This file is generated automatically\";\n \"   using neon-gen.ml.  Please do not edit manually.\";\n \"\";\n-\"   Copyright (C) 2006, 2007, 2009 Free Software Foundation, Inc.\";\n+\"   Copyright (C) 2006, 2007, 2009, 2012 Free Software Foundation, Inc.\";\n \"   Contributed by CodeSourcery.\";\n \"\";\n \"   This file is part of GCC.\";"}, {"sha": "f6c8d9a5183c339bbc4e13fc0d94b4e3fdcc1941", "filename": "gcc/config/arm/neon-testgen.ml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Fconfig%2Farm%2Fneon-testgen.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Fconfig%2Farm%2Fneon-testgen.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon-testgen.ml?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -162,9 +162,11 @@ let effective_target features =\n   try\n     match List.find (fun feature ->\n                        match feature with Requires_feature _ -> true\n+                                        | Requires_arch _ -> true\n                                         | _ -> false)\n                      features with\n       Requires_feature \"FMA\" -> \"arm_neonv2\"\n+    | Requires_arch 8 -> \"arm_v8_neon\"\n     | _ -> assert false\n   with Not_found -> \"arm_neon\"\n "}, {"sha": "5a5819fbc832a5505c9736faf93c66792642076a", "filename": "gcc/config/arm/neon.ml", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Fconfig%2Farm%2Fneon.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Fconfig%2Farm%2Fneon.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.ml?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -152,6 +152,11 @@ type opcode =\n   | Vqdmulh_n\n   | Vqdmulh_lane\n   (* Unary ops.  *)\n+  | Vrintn\n+  | Vrinta\n+  | Vrintp\n+  | Vrintm\n+  | Vrintz\n   | Vabs\n   | Vneg\n   | Vcls\n@@ -279,6 +284,7 @@ type features =\n   | Fixed_core_reg\n     (* Mark that the intrinsic requires __ARM_FEATURE_string to be defined.  *)\n   | Requires_feature of string\n+  | Requires_arch of int\n \n exception MixedMode of elts * elts\n \n@@ -812,6 +818,27 @@ let ops =\n     Vfms, [Requires_feature \"FMA\"], All (3, Dreg), \"vfms\", elts_same_io, [F32];\n     Vfms, [Requires_feature \"FMA\"], All (3, Qreg), \"vfmsQ\", elts_same_io, [F32];\n \n+    (* Round to integral. *)\n+    Vrintn, [Builtin_name \"vrintn\"; Requires_arch 8], Use_operands [| Dreg; Dreg |],\n+            \"vrndn\", elts_same_1, [F32];\n+    Vrintn, [Builtin_name \"vrintn\"; Requires_arch 8], Use_operands [| Qreg; Qreg |],\n+            \"vrndqn\", elts_same_1, [F32];\n+    Vrinta, [Builtin_name \"vrinta\"; Requires_arch 8], Use_operands [| Dreg; Dreg |],\n+            \"vrnda\", elts_same_1, [F32];\n+    Vrinta, [Builtin_name \"vrinta\"; Requires_arch 8], Use_operands [| Qreg; Qreg |],\n+            \"vrndqa\", elts_same_1, [F32];\n+    Vrintp, [Builtin_name \"vrintp\"; Requires_arch 8], Use_operands [| Dreg; Dreg |],\n+            \"vrndp\", elts_same_1, [F32];\n+    Vrintp, [Builtin_name \"vrintp\"; Requires_arch 8], Use_operands [| Qreg; Qreg |],\n+            \"vrndqp\", elts_same_1, [F32];\n+    Vrintm, [Builtin_name \"vrintm\"; Requires_arch 8], Use_operands [| Dreg; Dreg |],\n+            \"vrndm\", elts_same_1, [F32];\n+    Vrintm, [Builtin_name \"vrintm\"; Requires_arch 8], Use_operands [| Qreg; Qreg |],\n+            \"vrndqm\", elts_same_1, [F32];\n+    Vrintz, [Builtin_name \"vrintz\"; Requires_arch 8], Use_operands [| Dreg; Dreg |],\n+            \"vrnd\", elts_same_1, [F32];\n+    Vrintz, [Builtin_name \"vrintz\"; Requires_arch 8], Use_operands [| Qreg; Qreg |],\n+            \"vrndq\", elts_same_1, [F32];\n     (* Subtraction.  *)\n     Vsub, [], All (3, Dreg), \"vsub\", sign_invar_2, F32 :: su_8_32;\n     Vsub, [No_op], All (3, Dreg), \"vsub\", sign_invar_2,  [S64; U64];"}, {"sha": "4b0289ad8285d7eb3e3a628eea734ac2ed09a32d", "filename": "gcc/doc/arm-neon-intrinsics.texi", "status": "modified", "additions": 112, "deletions": 32, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Fdoc%2Farm-neon-intrinsics.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Fdoc%2Farm-neon-intrinsics.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Farm-neon-intrinsics.texi?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -1004,6 +1004,86 @@\n \n \n \n+@subsubsection Round to integral (to nearest, ties to even)\n+\n+@itemize @bullet\n+@item float32x2_t vrndn_f32 (float32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vrintn.f32 @var{d0}, @var{d0}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item float32x4_t vrndqn_f32 (float32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vrintn.f32 @var{q0}, @var{q0}}\n+@end itemize\n+\n+\n+\n+\n+@subsubsection Round to integral (to nearest, ties away from zero)\n+\n+@itemize @bullet\n+@item float32x2_t vrnda_f32 (float32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vrinta.f32 @var{d0}, @var{d0}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item float32x4_t vrndqa_f32 (float32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vrinta.f32 @var{q0}, @var{q0}}\n+@end itemize\n+\n+\n+\n+\n+@subsubsection Round to integral (towards +Inf)\n+\n+@itemize @bullet\n+@item float32x2_t vrndp_f32 (float32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vrintp.f32 @var{d0}, @var{d0}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item float32x4_t vrndqp_f32 (float32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vrintp.f32 @var{q0}, @var{q0}}\n+@end itemize\n+\n+\n+\n+\n+@subsubsection Round to integral (towards -Inf)\n+\n+@itemize @bullet\n+@item float32x2_t vrndm_f32 (float32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vrintm.f32 @var{d0}, @var{d0}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item float32x4_t vrndqm_f32 (float32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vrintm.f32 @var{q0}, @var{q0}}\n+@end itemize\n+\n+\n+\n+\n+@subsubsection Round to integral (towards 0)\n+\n+@itemize @bullet\n+@item float32x2_t vrnd_f32 (float32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vrintz.f32 @var{d0}, @var{d0}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item float32x4_t vrndq_f32 (float32x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vrintz.f32 @var{q0}, @var{q0}}\n+@end itemize\n+\n+\n+\n+\n @subsubsection Subtraction\n \n @itemize @bullet\n@@ -7217,12 +7297,6 @@\n \n @subsubsection Transpose elements\n \n-@itemize @bullet\n-@item uint32x2x2_t vtrn_u32 (uint32x2_t, uint32x2_t)\n-@*@emph{Form of expected instruction(s):} @code{vtrn.32 @var{d0}, @var{d1}}\n-@end itemize\n-\n-\n @itemize @bullet\n @item uint16x4x2_t vtrn_u16 (uint16x4_t, uint16x4_t)\n @*@emph{Form of expected instruction(s):} @code{vtrn.16 @var{d0}, @var{d1}}\n@@ -7236,38 +7310,44 @@\n \n \n @itemize @bullet\n-@item int32x2x2_t vtrn_s32 (int32x2_t, int32x2_t)\n-@*@emph{Form of expected instruction(s):} @code{vtrn.32 @var{d0}, @var{d1}}\n+@item int16x4x2_t vtrn_s16 (int16x4_t, int16x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vtrn.16 @var{d0}, @var{d1}}\n @end itemize\n \n \n @itemize @bullet\n-@item int16x4x2_t vtrn_s16 (int16x4_t, int16x4_t)\n+@item int8x8x2_t vtrn_s8 (int8x8_t, int8x8_t)\n+@*@emph{Form of expected instruction(s):} @code{vtrn.8 @var{d0}, @var{d1}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item poly16x4x2_t vtrn_p16 (poly16x4_t, poly16x4_t)\n @*@emph{Form of expected instruction(s):} @code{vtrn.16 @var{d0}, @var{d1}}\n @end itemize\n \n \n @itemize @bullet\n-@item int8x8x2_t vtrn_s8 (int8x8_t, int8x8_t)\n+@item poly8x8x2_t vtrn_p8 (poly8x8_t, poly8x8_t)\n @*@emph{Form of expected instruction(s):} @code{vtrn.8 @var{d0}, @var{d1}}\n @end itemize\n \n \n @itemize @bullet\n @item float32x2x2_t vtrn_f32 (float32x2_t, float32x2_t)\n-@*@emph{Form of expected instruction(s):} @code{vtrn.32 @var{d0}, @var{d1}}\n+@*@emph{Form of expected instruction(s):} @code{vuzp.32 @var{d0}, @var{d1}}\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x4x2_t vtrn_p16 (poly16x4_t, poly16x4_t)\n-@*@emph{Form of expected instruction(s):} @code{vtrn.16 @var{d0}, @var{d1}}\n+@item uint32x2x2_t vtrn_u32 (uint32x2_t, uint32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vuzp.32 @var{d0}, @var{d1}}\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x8x2_t vtrn_p8 (poly8x8_t, poly8x8_t)\n-@*@emph{Form of expected instruction(s):} @code{vtrn.8 @var{d0}, @var{d1}}\n+@item int32x2x2_t vtrn_s32 (int32x2_t, int32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vuzp.32 @var{d0}, @var{d1}}\n @end itemize\n \n \n@@ -7329,12 +7409,6 @@\n \n @subsubsection Zip elements\n \n-@itemize @bullet\n-@item uint32x2x2_t vzip_u32 (uint32x2_t, uint32x2_t)\n-@*@emph{Form of expected instruction(s):} @code{vzip.32 @var{d0}, @var{d1}}\n-@end itemize\n-\n-\n @itemize @bullet\n @item uint16x4x2_t vzip_u16 (uint16x4_t, uint16x4_t)\n @*@emph{Form of expected instruction(s):} @code{vzip.16 @var{d0}, @var{d1}}\n@@ -7348,38 +7422,44 @@\n \n \n @itemize @bullet\n-@item int32x2x2_t vzip_s32 (int32x2_t, int32x2_t)\n-@*@emph{Form of expected instruction(s):} @code{vzip.32 @var{d0}, @var{d1}}\n+@item int16x4x2_t vzip_s16 (int16x4_t, int16x4_t)\n+@*@emph{Form of expected instruction(s):} @code{vzip.16 @var{d0}, @var{d1}}\n @end itemize\n \n \n @itemize @bullet\n-@item int16x4x2_t vzip_s16 (int16x4_t, int16x4_t)\n+@item int8x8x2_t vzip_s8 (int8x8_t, int8x8_t)\n+@*@emph{Form of expected instruction(s):} @code{vzip.8 @var{d0}, @var{d1}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item poly16x4x2_t vzip_p16 (poly16x4_t, poly16x4_t)\n @*@emph{Form of expected instruction(s):} @code{vzip.16 @var{d0}, @var{d1}}\n @end itemize\n \n \n @itemize @bullet\n-@item int8x8x2_t vzip_s8 (int8x8_t, int8x8_t)\n+@item poly8x8x2_t vzip_p8 (poly8x8_t, poly8x8_t)\n @*@emph{Form of expected instruction(s):} @code{vzip.8 @var{d0}, @var{d1}}\n @end itemize\n \n \n @itemize @bullet\n @item float32x2x2_t vzip_f32 (float32x2_t, float32x2_t)\n-@*@emph{Form of expected instruction(s):} @code{vzip.32 @var{d0}, @var{d1}}\n+@*@emph{Form of expected instruction(s):} @code{vuzp.32 @var{d0}, @var{d1}}\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x4x2_t vzip_p16 (poly16x4_t, poly16x4_t)\n-@*@emph{Form of expected instruction(s):} @code{vzip.16 @var{d0}, @var{d1}}\n+@item uint32x2x2_t vzip_u32 (uint32x2_t, uint32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vuzp.32 @var{d0}, @var{d1}}\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x8x2_t vzip_p8 (poly8x8_t, poly8x8_t)\n-@*@emph{Form of expected instruction(s):} @code{vzip.8 @var{d0}, @var{d1}}\n+@item int32x2x2_t vzip_s32 (int32x2_t, int32x2_t)\n+@*@emph{Form of expected instruction(s):} @code{vuzp.32 @var{d0}, @var{d1}}\n @end itemize\n \n \n@@ -7939,13 +8019,13 @@\n \n @itemize @bullet\n @item uint64x2_t vld1q_dup_u64 (const uint64_t *)\n-@*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}, @var{d1}@}, [@var{r0}]}\n+@*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}@}, [@var{r0}]}\n @end itemize\n \n \n @itemize @bullet\n @item int64x2_t vld1q_dup_s64 (const int64_t *)\n-@*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}, @var{d1}@}, [@var{r0}]}\n+@*@emph{Form of expected instruction(s):} @code{vld1.64 @{@var{d0}@}, [@var{r0}]}\n @end itemize\n \n "}, {"sha": "57caf46ab3a69c797d02576fec8e3401ef2e84b6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -1,3 +1,16 @@\n+2012-12-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/arm/neon/vrndaf32.c: New test.\n+\t* gcc.target/arm/neon/vrndqaf32.c: Likewise.\n+\t* gcc.target/arm/neon/vrndf32.c: Likewise.\n+\t* gcc.target/arm/neon/vrndqf32.c: Likewise.\n+\t* gcc.target/arm/neon/vrndmf32.c: Likewise.\n+\t* gcc.target/arm/neon/vrndqmf32.c: Likewise.\n+\t* gcc.target/arm/neon/vrndnf32.c: Likewise.\n+\t* gcc.target/arm/neon/vrndqnf32.c: Likewise.\n+\t* gcc.target/arm/neon/vrndpf32.c: Likewise.\n+\t* gcc.target/arm/neon/vrndqpf32.c: Likewise.\n+\n 2012-12-09  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* gcc.misc-tests/gcov-12.c: Fix dg order."}, {"sha": "02ca465093c65047f741ce3e4fff6dc514d46ea3", "filename": "gcc/testsuite/gcc.target/arm/neon/vrndaf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndaf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndaf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndaf32.c?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vrndaf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vrndaf32 (void)\n+{\n+  float32x2_t out_float32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+\n+  out_float32x2_t = vrnda_f32 (arg0_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrinta\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b941657357e0ca8bba8b55055c0331085ade06ac", "filename": "gcc/testsuite/gcc.target/arm/neon/vrndf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndf32.c?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vrndf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vrndf32 (void)\n+{\n+  float32x2_t out_float32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+\n+  out_float32x2_t = vrnd_f32 (arg0_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintz\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7f4e90bf3395f32aaaa6c7e901f6ad810a4e1c07", "filename": "gcc/testsuite/gcc.target/arm/neon/vrndmf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndmf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndmf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndmf32.c?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vrndmf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vrndmf32 (void)\n+{\n+  float32x2_t out_float32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+\n+  out_float32x2_t = vrndm_f32 (arg0_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintm\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "df8e3e9343f04badc18c2c81dcbf48b4c7d8b9a3", "filename": "gcc/testsuite/gcc.target/arm/neon/vrndnf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndnf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndnf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndnf32.c?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vrndnf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vrndnf32 (void)\n+{\n+  float32x2_t out_float32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+\n+  out_float32x2_t = vrndn_f32 (arg0_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintn\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d3900cd78ffe27fc1ab36a001f2c6cf5f33b4f67", "filename": "gcc/testsuite/gcc.target/arm/neon/vrndpf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndpf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndpf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndpf32.c?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vrndpf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vrndpf32 (void)\n+{\n+  float32x2_t out_float32x2_t;\n+  float32x2_t arg0_float32x2_t;\n+\n+  out_float32x2_t = vrndp_f32 (arg0_float32x2_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintp\\.f32\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b7b5d73c4858422a35f16a116f35f543118797f4", "filename": "gcc/testsuite/gcc.target/arm/neon/vrndqaf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndqaf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndqaf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndqaf32.c?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vrndqaf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vrndqaf32 (void)\n+{\n+  float32x4_t out_float32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+\n+  out_float32x4_t = vrndqa_f32 (arg0_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrinta\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "08b4b45f64ddb77e1b63a86baae3791f88cfae9c", "filename": "gcc/testsuite/gcc.target/arm/neon/vrndqf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndqf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndqf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndqf32.c?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vrndqf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vrndqf32 (void)\n+{\n+  float32x4_t out_float32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+\n+  out_float32x4_t = vrndq_f32 (arg0_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintz\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6d16bfc933482911ebda63f86a8cc3c9551a0d35", "filename": "gcc/testsuite/gcc.target/arm/neon/vrndqmf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndqmf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndqmf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndqmf32.c?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vrndqmf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vrndqmf32 (void)\n+{\n+  float32x4_t out_float32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+\n+  out_float32x4_t = vrndqm_f32 (arg0_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintm\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b31ca95db42d9affe2bad2f255209abe65386980", "filename": "gcc/testsuite/gcc.target/arm/neon/vrndqnf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndqnf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndqnf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndqnf32.c?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vrndqnf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vrndqnf32 (void)\n+{\n+  float32x4_t out_float32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+\n+  out_float32x4_t = vrndqn_f32 (arg0_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintn\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "5c4a866906991e79c44d2193bdc375cf2fac693b", "filename": "gcc/testsuite/gcc.target/arm/neon/vrndqpf32.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndqpf32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d28afb446c64aacecad1af490215718093b250d/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndqpf32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvrndqpf32.c?ref=8d28afb446c64aacecad1af490215718093b250d", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vrndqpf32' ARM Neon intrinsic.  */\n+/* This file was autogenerated by neon-testgen.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_neon_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_v8_neon } */\n+\n+#include \"arm_neon.h\"\n+\n+void test_vrndqpf32 (void)\n+{\n+  float32x4_t out_float32x4_t;\n+  float32x4_t arg0_float32x4_t;\n+\n+  out_float32x4_t = vrndqp_f32 (arg0_float32x4_t);\n+}\n+\n+/* { dg-final { scan-assembler \"vrintp\\.f32\\[ \t\\]+\\[qQ\\]\\[0-9\\]+, \\[qQ\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}