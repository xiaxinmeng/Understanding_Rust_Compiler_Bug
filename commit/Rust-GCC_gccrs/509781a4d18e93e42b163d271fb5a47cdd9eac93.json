{"sha": "509781a4d18e93e42b163d271fb5a47cdd9eac93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA5NzgxYTRkMThlOTNlNDJiMTYzZDI3MWZiNWE0N2NkZDllYWM5Mw==", "commit": {"author": {"name": "Mark Elbrecht", "email": "snowball3@usa.net", "date": "1999-04-10T04:27:16Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-04-10T04:27:16Z"}, "message": "collect2.c (find_a_file): Use HAVE_DOS_BASED_FILE_SYSTEM in place of the DIR_SEPARATOR test.\n\n        * collect2.c (find_a_file): Use HAVE_DOS_BASED_FILE_SYSTEM in place\n        of the DIR_SEPARATOR test.\n        Consider any file starting with a drivename to be absolute.\n        If the absolute filename test fails and EXECUTABLE_SUFFIX is\n        defined, append EXECUTABLE_SUFFIX to the file and try again.\n        * cppinit.c (base_name): Use HAVE_DOS_BASED_FILE_SYSTEM\n        in place of __MSDOS__ and _WIN32.\n        * cppfiles.c (simplify_pathname): Likewise.\n        * gcc.c (IS_DIR_SEPARATOR): Define new macro. Returns true if a\n        character is a directory separator.\n        (find_a_file): Use it.\n        (convert_filename): Likewise.\n        (process_command): Likewise.\n        (do_spec_1): Likewise.\n        (is_directory): Likewise.\n        (main): Likewise.\n        * prefix.c (IS_DIR_SEPARATOR): Define. Tests whether a character is\n        a directory separator.\n        (translate_name): Use it.\n        (update_path): Change DIR_SEPARATOR_2 to DIR_SEPARATOR. Fix\n        warning in block where '/' is changed to DIR_SEPARATOR.\n        * i386/xm-djgpp.h (DIR_SEPARATOR): Set to '/'.\n        (DIR_SEPARATOR_2): New macro. Set to '\\'.\n        (HAVE_DOS_BASED_FILESYS): Define.\n        * i386/xm-mingw32.h: Updated copyright. Set\n        DIR_SEPARATOR_2 to '/'. Define HAVE_DOS_BASED_FILE_SYSTEM.\n        * i386/xm-os2.h: Likewise.\n        * winnt/xm-winnt.h: Likewise.\n        * i386/xm-dos.h: Likewise.  Add copyright.\n\nFrom-SVN: r26328", "tree": {"sha": "f18172ebf9899f2b5f68a983a1356b114443f93f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f18172ebf9899f2b5f68a983a1356b114443f93f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/509781a4d18e93e42b163d271fb5a47cdd9eac93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/509781a4d18e93e42b163d271fb5a47cdd9eac93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/509781a4d18e93e42b163d271fb5a47cdd9eac93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/509781a4d18e93e42b163d271fb5a47cdd9eac93/comments", "author": null, "committer": null, "parents": [{"sha": "c44033714b2800977881fdb85cc7662c89eafbf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c44033714b2800977881fdb85cc7662c89eafbf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c44033714b2800977881fdb85cc7662c89eafbf1"}], "stats": {"total": 219, "additions": 164, "deletions": 55}, "files": [{"sha": "0022e4a886297ebe245d5e1395bbeb1763629c50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=509781a4d18e93e42b163d271fb5a47cdd9eac93", "patch": "@@ -1,3 +1,35 @@\n+Sat Apr 10 05:14:50 1999  Mark Elbrecht  <snowball3@usa.net>\n+\n+\t* collect2.c (find_a_file): Use HAVE_DOS_BASED_FILE_SYSTEM in place\n+\tof the DIR_SEPARATOR test.\n+\tConsider any file starting with a drivename to be absolute.\n+\tIf the absolute filename test fails and EXECUTABLE_SUFFIX is \n+\tdefined, append EXECUTABLE_SUFFIX to the file and try again.\n+\t* cppinit.c (base_name): Use HAVE_DOS_BASED_FILE_SYSTEM \n+\tin place of __MSDOS__ and _WIN32.\n+\t* cppfiles.c (simplify_pathname): Likewise.\n+\t* gcc.c (IS_DIR_SEPARATOR): Define new macro. Returns true if a\n+\tcharacter is a directory separator.\n+\t(find_a_file): Use it.\n+\t(convert_filename): Likewise.\n+\t(process_command): Likewise.\n+\t(do_spec_1): Likewise.\n+\t(is_directory): Likewise.\n+\t(main): Likewise.\n+\t* prefix.c (IS_DIR_SEPARATOR): Define. Tests whether a character is\n+\ta directory separator.\n+\t(translate_name): Use it.\n+\t(update_path): Change DIR_SEPARATOR_2 to DIR_SEPARATOR. Fix \n+\twarning in block where '/' is changed to DIR_SEPARATOR.\n+\t* i386/xm-djgpp.h (DIR_SEPARATOR): Set to '/'.\n+\t(DIR_SEPARATOR_2): New macro. Set to '\\'.\n+\t(HAVE_DOS_BASED_FILESYS): Define.\n+\t* i386/xm-mingw32.h: Updated copyright. Set \n+\tDIR_SEPARATOR_2 to '/'. Define HAVE_DOS_BASED_FILE_SYSTEM.\n+\t* i386/xm-os2.h: Likewise.\n+\t* winnt/xm-winnt.h: Likewise.\n+\t* i386/xm-dos.h: Likewise.  Add copyright.\n+\n 1999-04-10  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* pdp11.h (TARGET_SWITCHES): Add option to vary assembler syntax."}, {"sha": "95a99a70e8b462c7cde5501324b0a1ffa9e4040d", "filename": "gcc/collect2.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=509781a4d18e93e42b163d271fb5a47cdd9eac93", "patch": "@@ -823,9 +823,8 @@ find_a_file (pprefix, name)\n   /* Determine the filename to execute (special case for absolute paths).  */\n \n   if (*name == '/'\n-#ifdef DIR_SEPARATOR\n-      || (DIR_SEPARATOR == '\\\\' && name[1] == ':'\n-      && (name[2] == DIR_SEPARATOR || name[2] == '/'))\n+#ifdef HAVE_DOS_BASED_FILE_SYSTEM\n+      || (*name && name[1] == ':')\n #endif\n       )\n     {\n@@ -839,6 +838,16 @@ find_a_file (pprefix, name)\n \t  return temp;\n \t}\n \n+#ifdef EXECUTABLE_SUFFIX\n+\t/* Some systems have a suffix for executable files.\n+\t   So try appending that.  */\n+      strcpy (temp, name);\n+\tstrcat (temp, EXECUTABLE_SUFFIX);\n+\t\n+\tif (access (temp, X_OK) == 0)\n+\t  return temp;\n+#endif\n+\n       if (debug)\n \tfprintf (stderr, \"  - failed to locate using absolute path\\n\");\n     }"}, {"sha": "50034fd071d5d8d33562c95ae0895bab307573c0", "filename": "gcc/config/i386/xm-djgpp.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-djgpp.h?ref=509781a4d18e93e42b163d271fb5a47cdd9eac93", "patch": "@@ -28,7 +28,11 @@ Boston, MA 02111-1307, USA.  */\n #define EXECUTABLE_SUFFIX \".exe\"\n \n /* Even though we support \"/\", allow \"\\\" since everybody tests both.  */\n-#define DIR_SEPARATOR '\\\\'\n+#define DIR_SEPARATOR '/'\n+#define DIR_SEPARATOR_2 '\\\\'\n+\n+/* Allow test for DOS drive names.  */\n+#define HAVE_DOS_BASED_FILESYSTEM\n \n #define NO_SYS_SIGLIST 1\n "}, {"sha": "4e1cb42c8c1138aed5a5171a1d32339d5c494881", "filename": "gcc/config/i386/xm-dos.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fconfig%2Fi386%2Fxm-dos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fconfig%2Fi386%2Fxm-dos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-dos.h?ref=509781a4d18e93e42b163d271fb5a47cdd9eac93", "patch": "@@ -1,10 +1,34 @@\n+/* Configuration for GNU C-compiler for Intel 80386 running DOS.\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n #include \"i386/xm-i386.h\"\n \n /* Use semicolons to separate elements of a path.  */\n #define PATH_SEPARATOR ';'\n \n /* Use backslashs to separate levels of directory.  */\n #define DIR_SEPARATOR '\\\\'\n+#define DIR_SEPARATOR_2 '/'\n+\n+/* Allow checks for drive names. */\n+#define HAVE_DOS_BASED_FILE_SYSTEM\n \n /* Suffix for executable file names.  */\n #define EXECUTABLE_SUFFIX \".exe\""}, {"sha": "6872580f33e444ebfa25e2cd4fcee2d15b906d73", "filename": "gcc/config/i386/xm-mingw32.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h?ref=509781a4d18e93e42b163d271fb5a47cdd9eac93", "patch": "@@ -1,6 +1,6 @@\n /* Configuration for GNU C-compiler for hosting on Windows32.\n    using GNU tools and the Windows32 API Library.\n-   Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -36,6 +36,12 @@ Boston, MA 02111-1307, USA. */\n \n /* Even though we support \"/\", allow \"\\\" since everybody tests both.  */\n #define DIR_SEPARATOR '\\\\'\n+#define DIR_SEPARATOR_2 '/'\n+\n+/* Mingw32 does not try to hide the underlying DOS-based file system\n+   like Cygwin does.  */\n+#define HAVE_DOS_BASED_FILE_SYSTEM\n+\n #define EXECUTABLE_SUFFIX \".exe\"\n \n #undef PATH_SEPARATOR"}, {"sha": "b8a5ad057a3a08072368c8481dff2ec9ec105afe", "filename": "gcc/config/i386/xm-os2.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fconfig%2Fi386%2Fxm-os2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fconfig%2Fi386%2Fxm-os2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-os2.h?ref=509781a4d18e93e42b163d271fb5a47cdd9eac93", "patch": "@@ -1,6 +1,6 @@\n /* Configuration for GNU compiler\n    for an Intel i386 or later processor running OS/2 2.x.\n-   Copyright (C) 1993, 1994, 1995, 1997, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1994, 1995, 1997, 1998, 1999 Free Software Foundation, Inc.\n    Contributed by Samuel Figueroa (figueroa@apple.com)\n \n This file is part of GNU CC.\n@@ -54,6 +54,12 @@ int spawnvp (int modeflag, char *path, char *argv[]);\n #ifndef DIR_SEPARATOR\n #define DIR_SEPARATOR '\\\\'\n #endif\n+#ifndef DIR_SEPARATOR_2\n+#define DIR_SEPARATOR_2 '/'\n+#endif\n+\n+/* Allow handling of drive names. */\n+#define HAVE_DOS_BASED_FILE_SYSTEM\n \n #define EXECUTABLE_SUFFIX \".exe\"\n "}, {"sha": "0bf8f87d62dddaaa5070f5cbc05c110efee01d28", "filename": "gcc/config/winnt/xm-winnt.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fconfig%2Fwinnt%2Fxm-winnt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fconfig%2Fwinnt%2Fxm-winnt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwinnt%2Fxm-winnt.h?ref=509781a4d18e93e42b163d271fb5a47cdd9eac93", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GNU compiler for processor running Windows NT 3.x.\n-   Copyright (C) 1993, 1995, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1995, 1997, 1999 Free Software Foundation, Inc.\n    Contributed by Douglas B. Rupp (drupp@cs.washington.edu)\n \n This file is part of GNU CC.\n@@ -47,7 +47,12 @@ Boston, MA 02111-1307, USA.  */\n #define OBJECT_SUFFIX \".obj\"\n #define EXECUTABLE_SUFFIX \".exe\"\n #define PATH_SEPARATOR ';'\n+\n #define DIR_SEPARATOR '\\\\'\n+#define DIR_SEPARATOR_2 '/'\n+\n+/* Allows checks for drive names.  */\n+#define HAVE_DOS_BASED_FILE_SYSTEM\n \n #define S_IRUSR 0000400\n #define S_IWUSR 0000200"}, {"sha": "6fd240787fdecbfa4c44faf6037225692b23df01", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=509781a4d18e93e42b163d271fb5a47cdd9eac93", "patch": "@@ -1168,7 +1168,7 @@ simplify_pathname (path)\n     char *base;\n     int absolute = 0;\n \n-#if defined _WIN32 || defined __MSDOS__\n+#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n     /* Convert all backslashes to slashes. */\n     for (from = path; *from; from++)\n \tif (*from == '\\\\') *from = '/';"}, {"sha": "73008008357f997bd7d2ed4c484e5592bfbcb148", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=509781a4d18e93e42b163d271fb5a47cdd9eac93", "patch": "@@ -430,7 +430,7 @@ base_name (fname)\n {\n   char *s = (char *)fname;\n   char *p;\n-#if defined (__MSDOS__) || defined (_WIN32)\n+#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n   if (ISALPHA (s[0]) && s[1] == ':') s += 2;\n   if ((p = rindex (s, '\\\\'))) s = p + 1;\n #elif defined VMS"}, {"sha": "f3bb55d1e4278434b22721a3717080cff3c64655", "filename": "gcc/gcc.c", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=509781a4d18e93e42b163d271fb5a47cdd9eac93", "patch": "@@ -66,6 +66,14 @@ compilation is specified by a string called a \"spec\".  */\n #define DIR_SEPARATOR '/'\n #endif\n \n+/* Define IS_DIR_SEPARATOR.  */\n+#ifndef DIR_SEPARATOR_2\n+# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n+#else /* DIR_SEPARATOR_2 */\n+# define IS_DIR_SEPARATOR(ch) \\\n+\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n+#endif /* DIR_SEPARATOR_2 */\n+\n static char dir_separator_str[] = {DIR_SEPARATOR, 0};\n \n #define obstack_chunk_alloc xmalloc\n@@ -1991,10 +1999,12 @@ find_a_file (pprefix, name, mode)\n \n   /* Determine the filename to execute (special case for absolute paths).  */\n \n-  if (*name == '/' || *name == DIR_SEPARATOR\n+  if (IS_DIR_SEPARATOR (*name)\n+#ifdef HAVE_DOS_BASED_FILESYSTEM\n       /* Check for disk name on MS-DOS-based systems.  */\n-      || (DIR_SEPARATOR == '\\\\' && name[1] == ':'\n-\t  && (name[2] == DIR_SEPARATOR || name[2] == '/')))\n+      || (name[0] && name[1] == ':' && IS_DIR_SEPARATOR (name[2]))\n+#endif\n+      )\n     {\n       if (access (name, mode) == 0)\n \t{\n@@ -2434,7 +2444,7 @@ convert_filename (name, do_exe)\n     return name;\n \n   for (i = len - 1; i >= 0; i--)\n-    if (name[i] == '/' || name[i] == DIR_SEPARATOR)\n+    if (IS_DIR_SEPARATOR (name[i]))\n       break;\n \n   for (i++; i < len; i++)\n@@ -2597,13 +2607,12 @@ process_command (argc, argv)\n     {\n       int len = strlen (gcc_exec_prefix);\n       if (len > (int) sizeof (\"/lib/gcc-lib/\")-1\n-\t  && (gcc_exec_prefix[len-1] == '/'\n-\t      || gcc_exec_prefix[len-1] == DIR_SEPARATOR))\n+\t  && (IS_DIR_SEPARATOR (gcc_exec_prefix[len-1])))\n \t{\n \t  temp = gcc_exec_prefix + len - sizeof (\"/lib/gcc-lib/\") + 1;\n-\t  if ((*temp == '/' || *temp == DIR_SEPARATOR)\n+\t  if (IS_DIR_SEPARATOR (*temp)\n \t      && strncmp (temp+1, \"lib\", 3) == 0\n-\t      && (temp[4] == '/' || temp[4] == DIR_SEPARATOR)\n+\t      && IS_DIR_SEPARATOR (temp[4])\n \t      && strncmp (temp+5, \"gcc-lib\", 7) == 0)\n \t    len -= sizeof (\"/lib/gcc-lib/\") - 1;\n \t}\n@@ -2630,7 +2639,7 @@ process_command (argc, argv)\n \t      strncpy (nstore, startp, endp-startp);\n \t      if (endp == startp)\n \t\tstrcpy (nstore, concat (\".\", dir_separator_str, NULL_PTR));\n-\t      else if (endp[-1] != '/' && endp[-1] != DIR_SEPARATOR)\n+\t      else if (!IS_DIR_SEPARATOR (endp[-1]))\n \t\t{\n \t\t  nstore[endp-startp] = DIR_SEPARATOR;\n \t\t  nstore[endp-startp+1] = 0;\n@@ -2664,7 +2673,7 @@ process_command (argc, argv)\n \t      strncpy (nstore, startp, endp-startp);\n \t      if (endp == startp)\n \t\tstrcpy (nstore, concat (\".\", dir_separator_str, NULL_PTR));\n-\t      else if (endp[-1] != '/' && endp[-1] != DIR_SEPARATOR)\n+\t      else if (!IS_DIR_SEPARATOR (endp[-1]))\n \t\t{\n \t\t  nstore[endp-startp] = DIR_SEPARATOR;\n \t\t  nstore[endp-startp+1] = 0;\n@@ -2697,7 +2706,7 @@ process_command (argc, argv)\n \t      strncpy (nstore, startp, endp-startp);\n \t      if (endp == startp)\n \t\tstrcpy (nstore, concat (\".\", dir_separator_str, NULL_PTR));\n-\t      else if (endp[-1] != '/' && endp[-1] != DIR_SEPARATOR)\n+\t      else if (!IS_DIR_SEPARATOR (endp[-1]))\n \t\t{\n \t\t  nstore[endp-startp] = DIR_SEPARATOR;\n \t\t  nstore[endp-startp+1] = 0;\n@@ -2902,12 +2911,10 @@ process_command (argc, argv)\n \t\t  int len = strlen (value);\n \t\t  if ((len == 7\n \t\t       || (len > 7\n-\t\t\t   && (value[len - 8] == '/'\n-\t\t\t       || value[len - 8] == DIR_SEPARATOR)))\n+\t\t\t   && (IS_DIR_SEPARATOR (value[len - 8]))))\n \t\t      && strncmp (value + len - 7, \"stage\", 5) == 0\n \t\t      && ISDIGIT (value[len - 2])\n-\t\t      && (value[len - 1] == '/'\n-\t\t\t  || value[len - 1] == DIR_SEPARATOR))\n+\t\t      && (IS_DIR_SEPARATOR (value[len - 1])))\n \t\t    {\n \t\t      if (len == 7)\n \t\t\tadd_prefix (&include_prefixes, \"include\", NULL_PTR,\n@@ -3074,7 +3081,7 @@ process_command (argc, argv)\n      directories, so that we can search both the user specified directory\n      and the standard place.  */\n \n-  if (*tooldir_prefix != '/' && *tooldir_prefix != DIR_SEPARATOR)\n+  if (!IS_DIR_SEPARATOR (*tooldir_prefix))\n     {\n       if (gcc_exec_prefix)\n \t{\n@@ -3525,7 +3532,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t  /* Relative directories always come from -B,\n \t\t     and it is better not to use them for searching\n \t\t     at run time.  In particular, stage1 loses  */\n-\t\t  if (pl->prefix[0] != '/' && pl->prefix[0] != DIR_SEPARATOR)\n+\t\t  if (!IS_DIR_SEPARATOR (pl->prefix[0]))\n \t\t    continue;\n #endif\n \t\t  /* Try subdirectory if there is one.  */\n@@ -3582,8 +3589,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t\t  buffer = (char *) xrealloc (buffer, bufsize);\n \t\t\t  strcpy (buffer, machine_suffix);\n \t\t\t  idx = strlen (buffer);\n-\t\t\t  if (buffer[idx - 1] == '/'\n-\t\t\t      || buffer[idx - 1] == DIR_SEPARATOR)\n+\t\t\t  if (IS_DIR_SEPARATOR (buffer[idx - 1]))\n \t\t\t    buffer[idx - 1] = 0;\n \t\t\t  do_spec_1 (buffer, 1, NULL_PTR);\n \t\t\t  /* Make this a separate argument.  */\n@@ -3604,8 +3610,7 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t\t  buffer = (char *) xrealloc (buffer, bufsize);\n \t\t\t  strcpy (buffer, pl->prefix);\n \t\t\t  idx = strlen (buffer);\n-\t\t\t  if (buffer[idx - 1] == '/'\n-\t\t\t      || buffer[idx - 1] == DIR_SEPARATOR)\n+\t\t\t  if (IS_DIR_SEPARATOR (buffer[idx - 1]))\n \t\t\t    buffer[idx - 1] = 0;\n \t\t\t  do_spec_1 (buffer, 1, NULL_PTR);\n \t\t\t  /* Make this a separate argument.  */\n@@ -4598,7 +4603,7 @@ is_directory (path1, path2, linker)\n   memcpy (path, path1, len1);\n   memcpy (path + len1, path2, len2);\n   cp = path + len1 + len2;\n-  if (cp[-1] != '/' && cp[-1] != DIR_SEPARATOR)\n+  if (!IS_DIR_SEPARATOR (cp[-1]))\n     *cp++ = DIR_SEPARATOR;\n   *cp++ = '.';\n   *cp = '\\0';\n@@ -4646,7 +4651,8 @@ main (argc, argv)\n   struct user_specs *uptr;\n \n   p = argv[0] + strlen (argv[0]);\n-  while (p != argv[0] && p[-1] != '/' && p[-1] != DIR_SEPARATOR) --p;\n+  while (p != argv[0] && !IS_DIR_SEPARATOR (p[-1]))\n+    --p;\n   programname = p;\n \n #ifdef HAVE_LC_MESSAGES\n@@ -4848,14 +4854,12 @@ main (argc, argv)\n \t standard_exec_prefix.  This lets us move the installed tree\n \t as a unit.  If GCC_EXEC_PREFIX is defined, base\n \t standard_startfile_prefix on that as well.  */\n-      if (*standard_startfile_prefix == '/'\n-\t  || *standard_startfile_prefix == DIR_SEPARATOR\n-\t  || *standard_startfile_prefix == '$'\n-#ifdef __MSDOS__\n-\t  /* Check for disk name on MS-DOS-based systems.  */\n+      if (IS_DIR_SEPARATOR (*standard_startfile_prefix)\n+\t    || *standard_startfile_prefix == '$'\n+#ifdef HAVE_DOS_BASED_FILESYSTEM\n+  \t    /* Check for disk name on MS-DOS-based systems.  */\n           || (standard_startfile_prefix[1] == ':'\n-\t      && (standard_startfile_prefix[2] == DIR_SEPARATOR\n-\t\t  || standard_startfile_prefix[2] == '/'))\n+\t      && (IS_DIR_SEPARATOR (standard_startfile_prefix[2])))\n #endif\n \t  )\n \tadd_prefix (&startfile_prefixes, standard_startfile_prefix, \"BINUTILS\",\n@@ -4884,7 +4888,7 @@ main (argc, argv)\n     }\n   else\n     {\n-      if (*standard_startfile_prefix != DIR_SEPARATOR && gcc_exec_prefix)\n+      if (!IS_DIR_SEPARATOR (*standard_startfile_prefix) && gcc_exec_prefix)\n \tadd_prefix (&startfile_prefixes,\n \t\t    concat (gcc_exec_prefix, machine_suffix,\n \t\t\t    standard_startfile_prefix, NULL_PTR),\n@@ -5046,7 +5050,7 @@ main (argc, argv)\n \n \t  input_basename = input_filename;\n \t  for (p = input_filename; *p; p++)\n-\t    if (*p == '/' || *p == DIR_SEPARATOR)\n+\t    if (IS_DIR_SEPARATOR (*p))\n \t      input_basename = p + 1;\n \n \t  /* Find a suffix starting with the last period,"}, {"sha": "8bf5696f07fa07df86ed72c061bc6c966009aac8", "filename": "gcc/prefix.c", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/509781a4d18e93e42b163d271fb5a47cdd9eac93/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=509781a4d18e93e42b163d271fb5a47cdd9eac93", "patch": "@@ -81,6 +81,17 @@ static char *lookup_key\t\tPROTO((char *));\n static HKEY reg_key = (HKEY) INVALID_HANDLE_VALUE;\n #endif\n \n+#ifndef DIR_SEPARATOR\n+# define IS_DIR_SEPARATOR(ch) ((ch) == '/')\n+#else /* DIR_SEPARATOR */\n+# ifndef DIR_SEPARATOR_2\n+#  define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n+# else /* DIR_SEPARATOR && DIR_SEPARATOR_2 */\n+#  define IS_DIR_SEPARATOR(ch) \\\n+\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n+# endif /* DIR_SEPARATOR && DIR_SEPARATOR_2 */\n+#endif /* DIR_SEPARATOR */\n+\n /* Given KEY, as above, return its value.  */\n \n static const char *\n@@ -241,11 +252,7 @@ translate_name (name)\n     return name;\n \n   for (keylen = 0;\n-       (name[keylen + 1] != 0 && name[keylen + 1] != '/'\n-#ifdef DIR_SEPARATOR\n-\t&& name[keylen + 1] != DIR_SEPARATOR\n-#endif\n-\t);\n+       (name[keylen + 1] != 0 && !IS_DIR_SEPARATOR (name[keylen + 1]));\n        keylen++)\n     ;\n \n@@ -268,11 +275,7 @@ translate_name (name)\n     prefix = PREFIX;\n \n   /* Remove any trailing directory separator from what we got.  */\n-  if (prefix[strlen (prefix) - 1] == '/'\n-#ifdef DIR_SEPARATOR\n-      || prefix[strlen (prefix) - 1] == DIR_SEPARATOR\n-#endif\n-      )\n+  if (IS_DIR_SEPARATOR (prefix[strlen (prefix) - 1]))\n     {\n       char * temp = save_string (prefix, strlen (prefix));\n       temp[strlen (temp) - 1] = 0;\n@@ -299,17 +302,33 @@ update_path (path, key)\n       while (path[0] == '@' || path[0] == '$')\n \tpath = translate_name (path);\n     }\n+\n+#ifdef DIR_SEPARATOR_2\n+  /* Convert DIR_SEPARATOR_2 to DIR_SEPARATOR. */\n+  if (DIR_SEPARATOR != DIR_SEPARATOR_2)\n+    {\n+      int i;\n+      int len = strlen (path);\n+      char *new_path = save_string (path, len);\n+      for (i = 0; i < len; i++)\n+        if (new_path[i] == DIR_SEPARATOR_2)\n+          new_path[i] = DIR_SEPARATOR;\n+      path = new_path;\n+    }\n+#endif\n       \n-#ifdef DIR_SEPARATOR\n+#if defined (DIR_SEPARATOR) && !defined (DIR_SEPARATOR_2)\n   if (DIR_SEPARATOR != '/')\n     {\n       int i;\n       int len = strlen (path);\n+      char *new_path = save_string (path, len);\n \n-      path = save_string (path, len);\n       for (i = 0; i < len; i++)\n-\tif (path[i] == '/')\n-\t  path[i] = DIR_SEPARATOR;\n+        if (new_path[i] == '/')\n+          new_path[i] = DIR_SEPARATOR;\n+\n+      path = new_path;\n     }\n #endif\n "}]}