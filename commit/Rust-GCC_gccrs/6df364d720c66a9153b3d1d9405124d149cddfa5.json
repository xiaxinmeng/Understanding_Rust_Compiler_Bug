{"sha": "6df364d720c66a9153b3d1d9405124d149cddfa5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRmMzY0ZDcyMGM2NmE5MTUzYjNkMWQ5NDA1MTI0ZDE0OWNkZGZhNQ==", "commit": {"author": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2006-08-19T21:05:59Z"}, "committer": {"name": "Erik Edelmann", "email": "eedelman@gcc.gnu.org", "date": "2006-08-19T21:05:59Z"}, "message": "re PR fortran/25217 (Derived type dummy argument having intent(out) attribute)\n\nfortran/\n2006-08-19  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        PR fortran/25217\n        * resolve.c (resolve_fl_variable): Set a default initializer for\n        derived types with INTENT(OUT) even if 'flag' is true.\n        * trans-expr.c (gfc_conv_function_call): Insert code to\n        reinitialize INTENT(OUT) arguments of derived type with default\n        initializers.\n\n\ntestsuite/\n2006-08-19  Erik Edelmann  <eedelman@gcc.gnu.org>\n\n        PR fortran/25217\n        * gfortran.dg/derived_init_2.f90: New.\n\nFrom-SVN: r116261", "tree": {"sha": "9ffd252da63b015eb650b5b5e804b45dbdf68a64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ffd252da63b015eb650b5b5e804b45dbdf68a64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6df364d720c66a9153b3d1d9405124d149cddfa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df364d720c66a9153b3d1d9405124d149cddfa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6df364d720c66a9153b3d1d9405124d149cddfa5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df364d720c66a9153b3d1d9405124d149cddfa5/comments", "author": null, "committer": null, "parents": [{"sha": "d58b0443ec5c1f1a434ac701aa41c0839a142ec2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58b0443ec5c1f1a434ac701aa41c0839a142ec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d58b0443ec5c1f1a434ac701aa41c0839a142ec2"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "c922b8d94d86edb77caee7fb64a04a589b9c1d52", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df364d720c66a9153b3d1d9405124d149cddfa5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df364d720c66a9153b3d1d9405124d149cddfa5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6df364d720c66a9153b3d1d9405124d149cddfa5", "patch": "@@ -1,3 +1,12 @@\n+2006-08-19  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\tPR fortran/25217\n+\t* resolve.c (resolve_fl_variable): Set a default initializer for\n+\tderived types with INTENT(OUT) even if 'flag' is true.\n+\t* trans-expr.c (gfc_conv_function_call): Insert code to\n+\treinitialize INTENT(OUT) arguments of derived type with default\n+\tinitializers.\n+\n 2006-08-15  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/25828"}, {"sha": "5c9786b74100c03c85fe4d6be78f7545970da0f0", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df364d720c66a9153b3d1d9405124d149cddfa5/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df364d720c66a9153b3d1d9405124d149cddfa5/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=6df364d720c66a9153b3d1d9405124d149cddfa5", "patch": "@@ -5232,8 +5232,8 @@ resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n     }\n \n   /* Assign default initializer.  */\n-  if (sym->ts.type == BT_DERIVED && !(sym->value || flag)\n-\t&& !sym->attr.pointer)\n+  if (sym->ts.type == BT_DERIVED && !sym->value && !sym->attr.pointer\n+      && !sym->attr.allocatable && (!flag || sym->attr.intent == INTENT_OUT))\n     sym->value = gfc_default_initializer (&sym->ts);\n \n   return SUCCESS;"}, {"sha": "4225b6930c3481fdc865a5425ecb39ec61c7e989", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df364d720c66a9153b3d1d9405124d149cddfa5/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df364d720c66a9153b3d1d9405124d149cddfa5/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=6df364d720c66a9153b3d1d9405124d149cddfa5", "patch": "@@ -2014,6 +2014,16 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n       gfc_add_block_to_block (&se->pre, &parmse.pre);\n       gfc_add_block_to_block (&post, &parmse.post);\n \n+      /* If an INTENT(OUT) dummy of derived type has a default\n+\t initializer, it must be (re)initialized here.  */\n+      if (fsym && fsym->attr.intent == INTENT_OUT && fsym->ts.type == BT_DERIVED\n+          && fsym->value)\n+\t{\n+\t  gcc_assert (!fsym->attr.allocatable);\n+\t  tmp = gfc_trans_assignment (e, fsym->value);\n+\t  gfc_add_expr_to_block (&se->pre, tmp);\n+\t}\n+\n       /* Character strings are passed as two parameters, a length and a\n          pointer.  */\n       if (parmse.string_length != NULL_TREE)"}, {"sha": "6f8ae4dd29bf866861ae1d6000ce0025fabbd24f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df364d720c66a9153b3d1d9405124d149cddfa5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df364d720c66a9153b3d1d9405124d149cddfa5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6df364d720c66a9153b3d1d9405124d149cddfa5", "patch": "@@ -1,3 +1,8 @@\n+2006-08-19  Erik Edelmann  <eedelman@gcc.gnu.org>\n+\n+\tPR fortran/25217\n+\t* gfortran.dg/derived_init_2.f90: New.\n+\n 2006-08-17  J\"orn Rennecke  <joern.rennecke@st.com>\n \n \t* gcc.c-torture/execute/pr28289.c: New test."}, {"sha": "381f13afbbce6cdf7b74dedeeb2e8861c6e71396", "filename": "gcc/testsuite/gfortran.dg/derived_init_2.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6df364d720c66a9153b3d1d9405124d149cddfa5/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_init_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6df364d720c66a9153b3d1d9405124d149cddfa5/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_init_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_init_2.f90?ref=6df364d720c66a9153b3d1d9405124d149cddfa5", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do run }\n+! PR 25217: INTENT(OUT) dummies of derived type with default initializers shall\n+! be (re)initialized upon procedure entry, unless they are ALLOCATABLE.\n+program main\n+\n+    implicit none\n+\n+    type :: drv\n+        integer :: a(3) = [ 1, 2, 3 ]\n+        character(3) :: s = \"abc\"\n+        real, pointer :: p => null()\n+    end type drv\n+    type(drv) :: aa\n+    type(drv), allocatable :: ab(:)\n+    real, target :: x\n+\n+    aa%a = [ 4, 5, 6]\n+    aa%s = \"def\"\n+    aa%p => x\n+    call sub(aa)\n+\n+    call sub2(ab)\n+\n+contains\n+\n+    subroutine sub(fa)\n+        type(drv), intent(out) :: fa\n+\n+        if (any(fa%a /= [ 1, 2, 3 ])) call abort()\n+        if (fa%s /= \"abc\") call abort()\n+        if (associated(fa%p)) call abort()\n+    end subroutine sub\n+\n+    subroutine sub2(fa)\n+        type(drv), allocatable, intent(out) :: fa(:)\n+    end subroutine sub2\n+\n+end program main"}]}