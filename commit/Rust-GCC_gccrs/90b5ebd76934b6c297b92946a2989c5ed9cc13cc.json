{"sha": "90b5ebd76934b6c297b92946a2989c5ed9cc13cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBiNWViZDc2OTM0YjZjMjk3YjkyOTQ2YTI5ODljNWVkOWNjMTNjYw==", "commit": {"author": {"name": "Roman Zhuykov", "email": "zhroma@ispras.ru", "date": "2020-03-10T16:47:53Z"}, "committer": {"name": "Roman Zhuykov", "email": "zhroma@ispras.ru", "date": "2020-03-10T16:47:53Z"}, "message": "minor: fix intendation in ddg.c\n\ngcc/ChangeLog:\n\t* ddg.c (create_ddg): Fix intendation.\n\t(set_recurrence_length): Likewise.\n\t(create_ddg_all_sccs): Likewise.", "tree": {"sha": "d1237e6dd104547a1bd79d3d4d7fcfa9e2d938f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1237e6dd104547a1bd79d3d4d7fcfa9e2d938f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90b5ebd76934b6c297b92946a2989c5ed9cc13cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b5ebd76934b6c297b92946a2989c5ed9cc13cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b5ebd76934b6c297b92946a2989c5ed9cc13cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b5ebd76934b6c297b92946a2989c5ed9cc13cc/comments", "author": {"login": "zhroma", "id": 23097573, "node_id": "MDQ6VXNlcjIzMDk3NTcz", "avatar_url": "https://avatars.githubusercontent.com/u/23097573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhroma", "html_url": "https://github.com/zhroma", "followers_url": "https://api.github.com/users/zhroma/followers", "following_url": "https://api.github.com/users/zhroma/following{/other_user}", "gists_url": "https://api.github.com/users/zhroma/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhroma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhroma/subscriptions", "organizations_url": "https://api.github.com/users/zhroma/orgs", "repos_url": "https://api.github.com/users/zhroma/repos", "events_url": "https://api.github.com/users/zhroma/events{/privacy}", "received_events_url": "https://api.github.com/users/zhroma/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zhroma", "id": 23097573, "node_id": "MDQ6VXNlcjIzMDk3NTcz", "avatar_url": "https://avatars.githubusercontent.com/u/23097573?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhroma", "html_url": "https://github.com/zhroma", "followers_url": "https://api.github.com/users/zhroma/followers", "following_url": "https://api.github.com/users/zhroma/following{/other_user}", "gists_url": "https://api.github.com/users/zhroma/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhroma/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhroma/subscriptions", "organizations_url": "https://api.github.com/users/zhroma/orgs", "repos_url": "https://api.github.com/users/zhroma/repos", "events_url": "https://api.github.com/users/zhroma/events{/privacy}", "received_events_url": "https://api.github.com/users/zhroma/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfd90eb9ed01f652cb253c57ed6d13e96e9a5f47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfd90eb9ed01f652cb253c57ed6d13e96e9a5f47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfd90eb9ed01f652cb253c57ed6d13e96e9a5f47"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "ca90147c3e1f7a25d91fac3c1aadc030cde2821b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b5ebd76934b6c297b92946a2989c5ed9cc13cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b5ebd76934b6c297b92946a2989c5ed9cc13cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90b5ebd76934b6c297b92946a2989c5ed9cc13cc", "patch": "@@ -1,3 +1,9 @@\n+2020-03-10  Roman Zhuykov  <zhroma@ispras.ru>\n+\n+\t* ddg.c (create_ddg): Fix intendation.\n+\t(set_recurrence_length): Likewise.\n+\t(create_ddg_all_sccs): Likewise.\n+\n 2020-03-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94088"}, {"sha": "ca8cb74823db23371c668ea81ef7796f9719eaeb", "filename": "gcc/ddg.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90b5ebd76934b6c297b92946a2989c5ed9cc13cc/gcc%2Fddg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90b5ebd76934b6c297b92946a2989c5ed9cc13cc/gcc%2Fddg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.c?ref=90b5ebd76934b6c297b92946a2989c5ed9cc13cc", "patch": "@@ -633,7 +633,7 @@ create_ddg (basic_block bb, int closing_branch_deps)\n       g->nodes[i].aux.count = -1;\n       g->nodes[i].max_dist = XCNEWVEC (int, num_nodes);\n       for (j = 0; j < num_nodes; j++)\n-         g->nodes[i].max_dist[j] = -1;\n+\tg->nodes[i].max_dist[j] = -1;\n \n       g->nodes[i++].insn = insn;\n       first_note = NULL;\n@@ -838,7 +838,7 @@ set_recurrence_length (ddg_scc_ptr scc)\n       int length = src->max_dist[dest->cuid];\n \n       if (length < 0)\n-        continue;\n+\tcontinue;\n \n       length += backarc->latency;\n       result = MAX (result, (length / distance));\n@@ -1069,8 +1069,8 @@ create_ddg_all_sccs (ddg_ptr g)\n \n       n->max_dist[k] = 0;\n       for (e = n->out; e; e = e->next_out)\n-        if (e->distance == 0 && g->nodes[e->dest->cuid].aux.count == n->aux.count)\n-          n->max_dist[e->dest->cuid] = e->latency;\n+\tif (e->distance == 0 && g->nodes[e->dest->cuid].aux.count == n->aux.count)\n+\t  n->max_dist[e->dest->cuid] = e->latency;\n     }\n \n   /* Run main Floid-Warshall loop.  We use only non-backarc edges\n@@ -1079,19 +1079,19 @@ create_ddg_all_sccs (ddg_ptr g)\n     {\n       scc = g->nodes[k].aux.count;\n       if (scc != -1)\n-        {\n-          for (i = 0; i < num_nodes; i++)\n-            if (g->nodes[i].aux.count == scc)\n-              for (j = 0; j < num_nodes; j++)\n-                if (g->nodes[j].aux.count == scc\n-                    && g->nodes[i].max_dist[k] >= 0\n-                    && g->nodes[k].max_dist[j] >= 0)\n-                  {\n-                    way = g->nodes[i].max_dist[k] + g->nodes[k].max_dist[j];\n-                    if (g->nodes[i].max_dist[j] < way)\n-                      g->nodes[i].max_dist[j] = way;\n-                  }\n-        }\n+\t{\n+\t  for (i = 0; i < num_nodes; i++)\n+\t    if (g->nodes[i].aux.count == scc)\n+\t      for (j = 0; j < num_nodes; j++)\n+\t\tif (g->nodes[j].aux.count == scc\n+\t\t    && g->nodes[i].max_dist[k] >= 0\n+\t\t    && g->nodes[k].max_dist[j] >= 0)\n+\t\t  {\n+\t\t    way = g->nodes[i].max_dist[k] + g->nodes[k].max_dist[j];\n+\t\t    if (g->nodes[i].max_dist[j] < way)\n+\t\t      g->nodes[i].max_dist[j] = way;\n+\t\t  }\n+\t}\n     }\n \n   /* Calculate recurrence_length using max_dist info.  */"}]}