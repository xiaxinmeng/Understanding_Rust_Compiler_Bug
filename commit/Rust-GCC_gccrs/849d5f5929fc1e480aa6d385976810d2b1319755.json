{"sha": "849d5f5929fc1e480aa6d385976810d2b1319755", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ5ZDVmNTkyOWZjMWU0ODBhYTZkMzg1OTc2ODEwZDJiMTMxOTc1NQ==", "commit": {"author": {"name": "Indu Bhagat", "email": "indu.bhagat@oracle.com", "date": "2021-09-07T18:18:54Z"}, "committer": {"name": "Indu Bhagat", "email": "indu.bhagat@oracle.com", "date": "2021-09-07T18:18:54Z"}, "message": "dwarf2out: Emit BTF in dwarf2out_finish for BPF CO-RE usecase\n\nDWARF generation is split between early and late phases when LTO is in effect.\nThis poses challenges for CTF/BTF generation especially if late debug info\ngeneration is desirable, as turns out to be the case for BPF CO-RE.\n\nThe approach taken here in this patch is:\n\n1. LTO is disabled for BPF CO-RE\nThe reason to disable LTO for BPF CO-RE is that if LTO is in effect, BPF CO-RE\nrelocations need to be generated in the LTO link phase _after_ the optimizations\nare done. This means we need to devise way to combine early and late BTF. At\nthis time, in absence of linker support for BTF sections, it makes sense to\nsteer clear of LTO for BPF CO-RE and bypass the issue.\n\n2. The BPF backend updates the write_symbols with BPF_WITH_CORE_DEBUG to convey\nthe case that BTF with CO-RE support needs to be generated.  This information\nis used by the debug info emission routines to defer the emission of BTF/CO-RE\nuntil dwarf2out_finish.\n\nSo, in other words,\n\ndwarf2out_early_finish\n  - Always emit CTF here.\n  - if (BTF && !BTF_WITH_CORE), emit BTF now.\n\ndwarf2out_finish\n  - if (BTF_WITH_CORE) emit BTF now.\n\ngcc/ChangeLog:\n\n\t* dwarf2ctf.c (ctf_debug_finalize): Make it static.\n\t(ctf_debug_early_finish): New definition.\n\t(ctf_debug_finish): Likewise.\n\t* dwarf2ctf.h (ctf_debug_finalize): Remove declaration.\n\t(ctf_debug_early_finish): New declaration.\n\t(ctf_debug_finish): Likewise.\n\t* dwarf2out.c (dwarf2out_finish): Invoke ctf_debug_finish.\n\t(dwarf2out_early_finish): Invoke ctf_debug_early_finish.", "tree": {"sha": "ec4980bc6c16c8ea09b4a18e4dbaa79a3eee6cb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec4980bc6c16c8ea09b4a18e4dbaa79a3eee6cb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/849d5f5929fc1e480aa6d385976810d2b1319755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/849d5f5929fc1e480aa6d385976810d2b1319755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/849d5f5929fc1e480aa6d385976810d2b1319755", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/849d5f5929fc1e480aa6d385976810d2b1319755/comments", "author": {"login": "ibhagatgnu", "id": 51812649, "node_id": "MDQ6VXNlcjUxODEyNjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/51812649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibhagatgnu", "html_url": "https://github.com/ibhagatgnu", "followers_url": "https://api.github.com/users/ibhagatgnu/followers", "following_url": "https://api.github.com/users/ibhagatgnu/following{/other_user}", "gists_url": "https://api.github.com/users/ibhagatgnu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibhagatgnu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibhagatgnu/subscriptions", "organizations_url": "https://api.github.com/users/ibhagatgnu/orgs", "repos_url": "https://api.github.com/users/ibhagatgnu/repos", "events_url": "https://api.github.com/users/ibhagatgnu/events{/privacy}", "received_events_url": "https://api.github.com/users/ibhagatgnu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibhagatgnu", "id": 51812649, "node_id": "MDQ6VXNlcjUxODEyNjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/51812649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibhagatgnu", "html_url": "https://github.com/ibhagatgnu", "followers_url": "https://api.github.com/users/ibhagatgnu/followers", "following_url": "https://api.github.com/users/ibhagatgnu/following{/other_user}", "gists_url": "https://api.github.com/users/ibhagatgnu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibhagatgnu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibhagatgnu/subscriptions", "organizations_url": "https://api.github.com/users/ibhagatgnu/orgs", "repos_url": "https://api.github.com/users/ibhagatgnu/repos", "events_url": "https://api.github.com/users/ibhagatgnu/events{/privacy}", "received_events_url": "https://api.github.com/users/ibhagatgnu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e29a9607faae320a92f19b38f0424037ac3bdbfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29a9607faae320a92f19b38f0424037ac3bdbfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e29a9607faae320a92f19b38f0424037ac3bdbfe"}], "stats": {"total": 67, "additions": 51, "deletions": 16}, "files": [{"sha": "b686bafda446cfdd2561e020f25051e8e4777dea", "filename": "gcc/dwarf2ctf.c", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849d5f5929fc1e480aa6d385976810d2b1319755/gcc%2Fdwarf2ctf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849d5f5929fc1e480aa6d385976810d2b1319755/gcc%2Fdwarf2ctf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2ctf.c?ref=849d5f5929fc1e480aa6d385976810d2b1319755", "patch": "@@ -917,6 +917,27 @@ gen_ctf_type (ctf_container_ref ctfc, dw_die_ref die)\n   return type_id;\n }\n \n+/* Prepare for output and write out the CTF debug information.  */\n+\n+static void\n+ctf_debug_finalize (const char *filename, bool btf)\n+{\n+  if (btf)\n+    {\n+      btf_output (filename);\n+      btf_finalize ();\n+    }\n+\n+  else\n+    {\n+      /* Emit the collected CTF information.  */\n+      ctf_output (filename);\n+\n+      /* Reset the CTF state.  */\n+      ctf_finalize ();\n+    }\n+}\n+\n bool\n ctf_do_die (dw_die_ref die)\n {\n@@ -966,24 +987,31 @@ ctf_debug_init_postprocess (bool btf)\n     btf_init_postprocess ();\n }\n \n-/* Prepare for output and write out the CTF debug information.  */\n+/* Early finish CTF/BTF debug info.  */\n \n void\n-ctf_debug_finalize (const char *filename, bool btf)\n+ctf_debug_early_finish (const char * filename)\n {\n-  if (btf)\n-    {\n-      btf_output (filename);\n-      btf_finalize ();\n-    }\n+  /* Emit CTF debug info early always.  */\n+  if (ctf_debug_info_level > CTFINFO_LEVEL_NONE\n+      /* Emit BTF debug info early if CO-RE relocations are not\n+\t required.  */\n+      || (btf_debuginfo_p () && !btf_with_core_debuginfo_p ()))\n+    ctf_debug_finalize (filename, btf_debuginfo_p ());\n+}\n \n-  else\n-    {\n-      /* Emit the collected CTF information.  */\n-      ctf_output (filename);\n+/* Finish CTF/BTF debug info emission.  */\n \n-      /* Reset the CTF state.  */\n-      ctf_finalize ();\n+void\n+ctf_debug_finish (const char * filename)\n+{\n+  /* Emit BTF debug info here when CO-RE relocations need to be generated.\n+     BTF with CO-RE relocations needs to be generated when CO-RE is in effect\n+     for the BPF target.  */\n+  if (btf_with_core_debuginfo_p ())\n+    {\n+      gcc_assert (btf_debuginfo_p ());\n+      ctf_debug_finalize (filename, btf_debuginfo_p ());\n     }\n }\n "}, {"sha": "9edbde0701ee0e02bdce409bdb92b01254a74221", "filename": "gcc/dwarf2ctf.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849d5f5929fc1e480aa6d385976810d2b1319755/gcc%2Fdwarf2ctf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849d5f5929fc1e480aa6d385976810d2b1319755/gcc%2Fdwarf2ctf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2ctf.h?ref=849d5f5929fc1e480aa6d385976810d2b1319755", "patch": "@@ -24,13 +24,15 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_DWARF2CTF_H 1\n \n #include \"dwarf2out.h\"\n+#include \"flags.h\"\n \n /* Debug Format Interface.  Used in dwarf2out.c.  */\n \n extern void ctf_debug_init (void);\n extern void ctf_debug_init_postprocess (bool);\n extern bool ctf_do_die (dw_die_ref);\n-extern void ctf_debug_finalize (const char *, bool);\n+extern void ctf_debug_early_finish (const char *);\n+extern void ctf_debug_finish (const char *);\n \n /* Wrappers for CTF/BTF to fetch information from GCC DWARF DIE.  Used in\n    ctfc.c."}, {"sha": "72cd1f5138002c62c497bbe6bfab7373e7ecdd3b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849d5f5929fc1e480aa6d385976810d2b1319755/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849d5f5929fc1e480aa6d385976810d2b1319755/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=849d5f5929fc1e480aa6d385976810d2b1319755", "patch": "@@ -31953,6 +31953,11 @@ dwarf2out_finish (const char *filename)\n   unsigned char checksum[16];\n   char dl_section_ref[MAX_ARTIFICIAL_LABEL_BYTES];\n \n+  /* Generate CTF/BTF debug info.  */\n+  if ((ctf_debug_info_level > CTFINFO_LEVEL_NONE\n+       || btf_debuginfo_p ()) && lang_GNU_C ())\n+    ctf_debug_finish (filename);\n+\n   /* Skip emitting DWARF if not required.  */\n   if (!dwarf_debuginfo_p ())\n     return;\n@@ -32856,8 +32861,8 @@ dwarf2out_early_finish (const char *filename)\n \tctf_debug_do_cu (node->die);\n       /* Post process the debug data in the CTF container if necessary.  */\n       ctf_debug_init_postprocess (btf_debuginfo_p ());\n-      /* Emit CTF/BTF debug info.  */\n-      ctf_debug_finalize (filename, btf_debuginfo_p ());\n+\n+      ctf_debug_early_finish (filename);\n     }\n \n   /* Do not generate DWARF assembler now when not producing LTO bytecode.  */"}]}