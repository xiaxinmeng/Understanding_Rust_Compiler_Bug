{"sha": "b3c90666df0131202f02ad1e4b1101c3b9287029", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNjOTA2NjZkZjAxMzEyMDJmMDJhZDFlNGIxMTAxYzNiOTI4NzAyOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-08-24T20:43:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-08-24T20:43:57Z"}, "message": "mips.h (ISA_HAS_INT_CONDMOVE): Delete.\n\n\t* config/mips/mips.h (ISA_HAS_INT_CONDMOVE): Delete.\n\t* config/mips/mips.c (print_operand): Fold %B/%b handling into %T/%t,\n\tusing the mode of the operand to decide between them.\n\t* config/mips/mips.md (MOVECC): New mode macro.\n\t(ccreg): New mode attribute.\n\t(*mov{si,di,sf,df}_on_{cc,si,di}): Name formerly unnamed patterns.\n\tRedefine using :GPR and :MOVECC.  Use %T and %t for the condition.\n\t(mov[sd]icc): Redefine using :GPR.\n\nFrom-SVN: r86515", "tree": {"sha": "042ef3503fcd81e676e26c73a40860f4b669477b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/042ef3503fcd81e676e26c73a40860f4b669477b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3c90666df0131202f02ad1e4b1101c3b9287029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3c90666df0131202f02ad1e4b1101c3b9287029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3c90666df0131202f02ad1e4b1101c3b9287029", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3c90666df0131202f02ad1e4b1101c3b9287029/comments", "author": null, "committer": null, "parents": [{"sha": "04550232324f75215c1bc5df69f71fe695d06386", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04550232324f75215c1bc5df69f71fe695d06386", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04550232324f75215c1bc5df69f71fe695d06386"}], "stats": {"total": 249, "additions": 57, "deletions": 192}, "files": [{"sha": "e37760c207ea7465325e36fd8cad99fadebbfd44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3c90666df0131202f02ad1e4b1101c3b9287029/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3c90666df0131202f02ad1e4b1101c3b9287029/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3c90666df0131202f02ad1e4b1101c3b9287029", "patch": "@@ -1,3 +1,14 @@\n+2004-08-24  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips.h (ISA_HAS_INT_CONDMOVE): Delete.\n+\t* config/mips/mips.c (print_operand): Fold %B/%b handling into %T/%t,\n+\tusing the mode of the operand to decide between them.\n+\t* config/mips/mips.md (MOVECC): New mode macro.\n+\t(ccreg): New mode attribute.\n+\t(*mov{si,di,sf,df}_on_{cc,si,di}): Name formerly unnamed patterns.\n+\tRedefine using :GPR and :MOVECC.  Use %T and %t for the condition.\n+\t(mov[sd]icc): Redefine using :GPR.\n+\n 2004-08-24  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips-protos.h (mips_emit_prefetch): Delete."}, {"sha": "795d11328e80cad93488d81fb3379dadabfae07e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3c90666df0131202f02ad1e4b1101c3b9287029/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3c90666df0131202f02ad1e4b1101c3b9287029/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=b3c90666df0131202f02ad1e4b1101c3b9287029", "patch": "@@ -4480,10 +4480,9 @@ mips_debugger_offset (rtx addr, HOST_WIDE_INT offset)\n    'F'  print part of opcode for a floating-point branch condition.\n    'N'  print part of opcode for a branch condition, inverted.\n    'W'  print part of opcode for a floating-point branch condition, inverted.\n-   'B'  print 'z' for EQ, 'n' for NE\n-   'b'  print 'n' for EQ, 'z' for NE\n-   'T'  print 'f' for EQ, 't' for NE\n-   't'  print 't' for EQ, 'f' for NE\n+   'T'  print 'f' for (eq:CC ...), 't' for (ne:CC ...),\n+\t      'z' for (eq:?I ...), 'n' for (ne:?I ...).\n+   't'  like 'T', but with the EQ/NE cases reversed\n    'Z'  print register and a comma, but print nothing for $fcc0\n    'R'  print the reloc associated with LO_SUM\n \n@@ -4772,14 +4771,11 @@ print_operand (FILE *file, rtx op, int letter)\n   else if (letter == 'd' || letter == 'x' || letter == 'X')\n     output_operand_lossage (\"invalid use of %%d, %%x, or %%X\");\n \n-  else if (letter == 'B')\n-    fputs (code == EQ ? \"z\" : \"n\", file);\n-  else if (letter == 'b')\n-    fputs (code == EQ ? \"n\" : \"z\", file);\n-  else if (letter == 'T')\n-    fputs (code == EQ ? \"f\" : \"t\", file);\n-  else if (letter == 't')\n-    fputs (code == EQ ? \"t\" : \"f\", file);\n+  else if (letter == 'T' || letter == 't')\n+    {\n+      int truth = (code == NE) == (letter == 'T');\n+      fputc (\"zfnt\"[truth * 2 + (GET_MODE (op) == CCmode)], file);\n+    }\n \n   else if (CONST_GP_P (op))\n     fputs (reg_names[GLOBAL_POINTER_REGNUM], file);"}, {"sha": "2b7928a573e641f9e13d170696366f3b4a1aaecb", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3c90666df0131202f02ad1e4b1101c3b9287029/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3c90666df0131202f02ad1e4b1101c3b9287029/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=b3c90666df0131202f02ad1e4b1101c3b9287029", "patch": "@@ -824,9 +824,6 @@ extern const struct mips_cpu_info *mips_tune_info;\n                                  && !TARGET_MIPS5500                    \\\n \t\t\t\t && !TARGET_MIPS16)\n \n-/* ISA has just the integer condition move instructions (movn,movz) */\n-#define ISA_HAS_INT_CONDMOVE     0\n-\n /* ISA has the mips4 FP condition code instructions: FP-compare to CC,\n    branch on CC, and move (both FP and non-FP) on CC.  */\n #define ISA_HAS_8CC\t\t(ISA_MIPS4\t\t\t\t\\"}, {"sha": "ef3e69a8c02f2798d2fa30396d2f8afb1a17a2d9", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 38, "deletions": 177, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3c90666df0131202f02ad1e4b1101c3b9287029/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3c90666df0131202f02ad1e4b1101c3b9287029/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=b3c90666df0131202f02ad1e4b1101c3b9287029", "patch": "@@ -293,6 +293,10 @@\n ;; pointer-sized quantities.  Exactly one of the two alternatives will match.\n (define_mode_macro P [(SI \"Pmode == SImode\") (DI \"Pmode == DImode\")])\n \n+;; This mode macro allows :MOVECC to be used anywhere that a\n+;; conditional-move-type condition is needed.\n+(define_mode_macro MOVECC [SI (DI \"TARGET_64BIT\") (CC \"TARGET_HARD_FLOAT\")])\n+\n ;; In GPR templates, a string like \"<d>subu\" will expand to \"subu\" in the\n ;; 32-bit version and \"dsubu\" in the 64-bit version.\n (define_mode_attr d [(SI \"\") (DI \"d\")])\n@@ -306,6 +310,10 @@\n ;; field but the equivalent daddiu has only a 5-bit field.\n (define_mode_attr si8_di5 [(SI \"8\") (DI \"5\")])\n \n+;; In MOVECC templates, this attribute gives the constraint to use\n+;; for the condition register.\n+(define_mode_attr ccreg [(SI \"d\") (DI \"d\") (CC \"z\")])\n+\n ;; This code macro allows all branch instructions to be generated from\n ;; a single define_expand template.\n (define_code_macro any_cond [unordered ordered unlt unge uneq ltgt unle ungt\n@@ -6019,207 +6027,60 @@ beq\\t%2,%.,1b\\;\\\n \f\n ;; MIPS4 Conditional move instructions.\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-\t(if_then_else:SI\n-\t (match_operator:SI 4 \"equality_operator\"\n-\t\t\t    [(match_operand:SI 1 \"register_operand\" \"d,d\")\n-\t\t\t     (const_int 0)])\n-\t (match_operand:SI 2 \"reg_or_0_operand\" \"dJ,0\")\n-\t (match_operand:SI 3 \"reg_or_0_operand\" \"0,dJ\")))]\n-  \"ISA_HAS_CONDMOVE || ISA_HAS_INT_CONDMOVE\"\n-  \"@\n-    mov%B4\\t%0,%z2,%1\n-    mov%b4\\t%0,%z3,%1\"\n-  [(set_attr \"type\" \"condmove\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-\t(if_then_else:SI\n-\t (match_operator:DI 4 \"equality_operator\"\n-\t\t\t    [(match_operand:DI 1 \"register_operand\" \"d,d\")\n-\t\t\t     (const_int 0)])\n-\t (match_operand:SI 2 \"reg_or_0_operand\" \"dJ,0\")\n-\t (match_operand:SI 3 \"reg_or_0_operand\" \"0,dJ\")))]\n-  \"ISA_HAS_CONDMOVE || ISA_HAS_INT_CONDMOVE\"\n-  \"@\n-    mov%B4\\t%0,%z2,%1\n-    mov%b4\\t%0,%z3,%1\"\n-  [(set_attr \"type\" \"condmove\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-\t(if_then_else:SI\n-\t (match_operator:CC 3 \"equality_operator\"\n-\t\t\t    [(match_operand:CC 4 \"register_operand\" \"z,z\")\n-\t\t\t     (const_int 0)])\n-\t (match_operand:SI 1 \"reg_or_0_operand\" \"dJ,0\")\n-\t (match_operand:SI 2 \"reg_or_0_operand\" \"0,dJ\")))]\n-  \"ISA_HAS_CONDMOVE && TARGET_HARD_FLOAT\"\n-  \"@\n-    mov%T3\\t%0,%z1,%4\n-    mov%t3\\t%0,%z2,%4\"\n-  [(set_attr \"type\" \"condmove\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-\t(if_then_else:DI\n-\t (match_operator:SI 4 \"equality_operator\"\n-\t\t\t    [(match_operand:SI 1 \"register_operand\" \"d,d\")\n-\t\t\t     (const_int 0)])\n-\t (match_operand:DI 2 \"reg_or_0_operand\" \"dJ,0\")\n-\t (match_operand:DI 3 \"reg_or_0_operand\" \"0,dJ\")))]\n-  \"(ISA_HAS_CONDMOVE || ISA_HAS_INT_CONDMOVE) && TARGET_64BIT\"\n-  \"@\n-    mov%B4\\t%0,%z2,%1\n-    mov%b4\\t%0,%z3,%1\"\n-  [(set_attr \"type\" \"condmove\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-\t(if_then_else:DI\n-\t (match_operator:DI 4 \"equality_operator\"\n-\t\t\t    [(match_operand:DI 1 \"register_operand\" \"d,d\")\n-\t\t\t     (const_int 0)])\n-\t (match_operand:DI 2 \"reg_or_0_operand\" \"dJ,0\")\n-\t (match_operand:DI 3 \"reg_or_0_operand\" \"0,dJ\")))]\n-  \"(ISA_HAS_CONDMOVE || ISA_HAS_INT_CONDMOVE) && TARGET_64BIT\"\n-  \"@\n-    mov%B4\\t%0,%z2,%1\n-    mov%b4\\t%0,%z3,%1\"\n-  [(set_attr \"type\" \"condmove\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-\t(if_then_else:DI\n-\t (match_operator:CC 3 \"equality_operator\"\n-\t\t\t    [(match_operand:CC 4 \"register_operand\" \"z,z\")\n-\t\t\t     (const_int 0)])\n-\t (match_operand:DI 1 \"reg_or_0_operand\" \"dJ,0\")\n-\t (match_operand:DI 2 \"reg_or_0_operand\" \"0,dJ\")))]\n-  \"ISA_HAS_CONDMOVE && TARGET_HARD_FLOAT && TARGET_64BIT\"\n-  \"@\n-    mov%T3\\t%0,%z1,%4\n-    mov%t3\\t%0,%z2,%4\"\n-  [(set_attr \"type\" \"condmove\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n-\t(if_then_else:SF\n-\t (match_operator:SI 4 \"equality_operator\"\n-\t\t\t    [(match_operand:SI 1 \"register_operand\" \"d,d\")\n-\t\t\t     (const_int 0)])\n-\t (match_operand:SF 2 \"register_operand\" \"f,0\")\n-\t (match_operand:SF 3 \"register_operand\" \"0,f\")))]\n-  \"ISA_HAS_CONDMOVE && TARGET_HARD_FLOAT\"\n+(define_insn \"*mov<GPR:mode>_on_<MOVECC:mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n+\t(if_then_else:GPR\n+\t (match_operator:MOVECC 4 \"equality_operator\"\n+\t\t[(match_operand:MOVECC 1 \"register_operand\" \"<ccreg>,<ccreg>\")\n+\t\t (const_int 0)])\n+\t (match_operand:GPR 2 \"reg_or_0_operand\" \"dJ,0\")\n+\t (match_operand:GPR 3 \"reg_or_0_operand\" \"0,dJ\")))]\n+  \"ISA_HAS_CONDMOVE\"\n   \"@\n-    mov%B4.s\\t%0,%2,%1\n-    mov%b4.s\\t%0,%3,%1\"\n+    mov%T4\\t%0,%z2,%1\n+    mov%t4\\t%0,%z3,%1\"\n   [(set_attr \"type\" \"condmove\")\n-   (set_attr \"mode\" \"SF\")])\n+   (set_attr \"mode\" \"<GPR:MODE>\")])\n \n-(define_insn \"\"\n+(define_insn \"*movsf_on_<MOVECC:mode>\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:SF\n-\t (match_operator:DI 4 \"equality_operator\"\n-\t\t\t    [(match_operand:DI 1 \"register_operand\" \"d,d\")\n-\t\t\t     (const_int 0)])\n+\t (match_operator:MOVECC 4 \"equality_operator\"\n+\t\t[(match_operand:MOVECC 1 \"register_operand\" \"<ccreg>,<ccreg>\")\n+\t\t (const_int 0)])\n \t (match_operand:SF 2 \"register_operand\" \"f,0\")\n \t (match_operand:SF 3 \"register_operand\" \"0,f\")))]\n   \"ISA_HAS_CONDMOVE && TARGET_HARD_FLOAT\"\n   \"@\n-    mov%B4.s\\t%0,%2,%1\n-    mov%b4.s\\t%0,%3,%1\"\n+    mov%T4.s\\t%0,%2,%1\n+    mov%t4.s\\t%0,%3,%1\"\n   [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n-\t(if_then_else:SF\n-\t (match_operator:CC 3 \"equality_operator\"\n-\t\t\t    [(match_operand:CC 4 \"register_operand\" \"z,z\")\n-\t\t\t     (const_int 0)])\n-\t (match_operand:SF 1 \"register_operand\" \"f,0\")\n-\t (match_operand:SF 2 \"register_operand\" \"0,f\")))]\n-  \"ISA_HAS_CONDMOVE && TARGET_HARD_FLOAT\"\n-  \"@\n-    mov%T3.s\\t%0,%1,%4\n-    mov%t3.s\\t%0,%2,%4\"\n-  [(set_attr \"type\" \"condmove\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n-\t(if_then_else:DF\n-\t (match_operator:SI 4 \"equality_operator\"\n-\t\t\t    [(match_operand:SI 1 \"register_operand\" \"d,d\")\n-\t\t\t     (const_int 0)])\n-\t (match_operand:DF 2 \"register_operand\" \"f,0\")\n-\t (match_operand:DF 3 \"register_operand\" \"0,f\")))]\n-  \"ISA_HAS_CONDMOVE && TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n-  \"@\n-    mov%B4.d\\t%0,%2,%1\n-    mov%b4.d\\t%0,%3,%1\"\n-  [(set_attr \"type\" \"condmove\")\n-   (set_attr \"mode\" \"DF\")])\n-\n-(define_insn \"\"\n+(define_insn \"*movdf_on_<MOVECC:mode>\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(if_then_else:DF\n-\t (match_operator:DI 4 \"equality_operator\"\n-\t\t\t    [(match_operand:DI 1 \"register_operand\" \"d,d\")\n-\t\t\t     (const_int 0)])\n+\t (match_operator:MOVECC 4 \"equality_operator\"\n+\t\t[(match_operand:MOVECC 1 \"register_operand\" \"<ccreg>,<ccreg>\")\n+\t\t (const_int 0)])\n \t (match_operand:DF 2 \"register_operand\" \"f,0\")\n \t (match_operand:DF 3 \"register_operand\" \"0,f\")))]\n   \"ISA_HAS_CONDMOVE && TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n   \"@\n-    mov%B4.d\\t%0,%2,%1\n-    mov%b4.d\\t%0,%3,%1\"\n-  [(set_attr \"type\" \"condmove\")\n-   (set_attr \"mode\" \"DF\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n-\t(if_then_else:DF\n-\t (match_operator:CC 3 \"equality_operator\"\n-\t\t\t    [(match_operand:CC 4 \"register_operand\" \"z,z\")\n-\t\t\t     (const_int 0)])\n-\t (match_operand:DF 1 \"register_operand\" \"f,0\")\n-\t (match_operand:DF 2 \"register_operand\" \"0,f\")))]\n-  \"ISA_HAS_CONDMOVE && TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT\"\n-  \"@\n-    mov%T3.d\\t%0,%1,%4\n-    mov%t3.d\\t%0,%2,%4\"\n+    mov%T4.d\\t%0,%2,%1\n+    mov%t4.d\\t%0,%3,%1\"\n   [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"DF\")])\n \n ;; These are the main define_expand's used to make conditional moves.\n \n-(define_expand \"movsicc\"\n-  [(set (match_dup 4) (match_operand 1 \"comparison_operator\"))\n-   (set (match_operand:SI 0 \"register_operand\")\n-\t(if_then_else:SI (match_dup 5)\n-\t\t\t (match_operand:SI 2 \"reg_or_0_operand\")\n-\t\t\t (match_operand:SI 3 \"reg_or_0_operand\")))]\n-  \"ISA_HAS_CONDMOVE || ISA_HAS_INT_CONDMOVE\"\n-{\n-  gen_conditional_move (operands);\n-  DONE;\n-})\n-\n-(define_expand \"movdicc\"\n+(define_expand \"mov<mode>cc\"\n   [(set (match_dup 4) (match_operand 1 \"comparison_operator\"))\n-   (set (match_operand:DI 0 \"register_operand\")\n-\t(if_then_else:DI (match_dup 5)\n-\t\t\t (match_operand:DI 2 \"reg_or_0_operand\")\n-\t\t\t (match_operand:DI 3 \"reg_or_0_operand\")))]\n-  \"(ISA_HAS_CONDMOVE || ISA_HAS_INT_CONDMOVE) && TARGET_64BIT\"\n+   (set (match_operand:GPR 0 \"register_operand\")\n+\t(if_then_else:GPR (match_dup 5)\n+\t\t\t  (match_operand:GPR 2 \"reg_or_0_operand\")\n+\t\t\t  (match_operand:GPR 3 \"reg_or_0_operand\")))]\n+  \"ISA_HAS_CONDMOVE\"\n {\n   gen_conditional_move (operands);\n   DONE;"}]}