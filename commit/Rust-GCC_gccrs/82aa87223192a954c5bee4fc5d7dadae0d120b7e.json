{"sha": "82aa87223192a954c5bee4fc5d7dadae0d120b7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJhYTg3MjIzMTkyYTk1NGM1YmVlNGZjNWQ3ZGFkYWUwZDEyMGI3ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-09-27T19:17:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-09-27T19:17:31Z"}, "message": "trans-types.c (gfc_type_for_size): Return wider type if no suitable narrower type has been found.\n\n\t* trans-types.c (gfc_type_for_size): Return wider type\n\tif no suitable narrower type has been found.\n\t(gfc_type_for_mode): Return NULL_TREE if gfc_type_for_size\n\treturned type doesn't have expected TYPE_MODE.\n\nFrom-SVN: r179290", "tree": {"sha": "8fe351ceea5fb4aa1c1e79248400f0b0802c3b84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fe351ceea5fb4aa1c1e79248400f0b0802c3b84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82aa87223192a954c5bee4fc5d7dadae0d120b7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82aa87223192a954c5bee4fc5d7dadae0d120b7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82aa87223192a954c5bee4fc5d7dadae0d120b7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82aa87223192a954c5bee4fc5d7dadae0d120b7e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c345757e00b62047a02d4f1349f31104aa07bd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c345757e00b62047a02d4f1349f31104aa07bd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c345757e00b62047a02d4f1349f31104aa07bd8"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "99d2d3c812ad0b92b7afceea15c124744a90794c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82aa87223192a954c5bee4fc5d7dadae0d120b7e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82aa87223192a954c5bee4fc5d7dadae0d120b7e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=82aa87223192a954c5bee4fc5d7dadae0d120b7e", "patch": "@@ -1,3 +1,10 @@\n+2011-09-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-types.c (gfc_type_for_size): Return wider type\n+\tif no suitable narrower type has been found.\n+\t(gfc_type_for_mode): Return NULL_TREE if gfc_type_for_size\n+\treturned type doesn't have expected TYPE_MODE.\n+\n 2011-09-26  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/50515"}, {"sha": "aa8e43bd8b80493bf65d9e36c7902e5a10825d63", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82aa87223192a954c5bee4fc5d7dadae0d120b7e/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82aa87223192a954c5bee4fc5d7dadae0d120b7e/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=82aa87223192a954c5bee4fc5d7dadae0d120b7e", "patch": "@@ -2791,18 +2791,29 @@ gfc_type_for_size (unsigned bits, int unsignedp)\n       if (bits == TYPE_PRECISION (intTI_type_node))\n \treturn intTI_type_node;\n #endif\n+\n+      if (bits <= TYPE_PRECISION (intQI_type_node))\n+\treturn intQI_type_node;\n+      if (bits <= TYPE_PRECISION (intHI_type_node))\n+\treturn intHI_type_node;\n+      if (bits <= TYPE_PRECISION (intSI_type_node))\n+\treturn intSI_type_node;\n+      if (bits <= TYPE_PRECISION (intDI_type_node))\n+\treturn intDI_type_node;\n+      if (bits <= TYPE_PRECISION (intTI_type_node))\n+\treturn intTI_type_node;\n     }\n   else\n     {\n-      if (bits == TYPE_PRECISION (unsigned_intQI_type_node))\n+      if (bits <= TYPE_PRECISION (unsigned_intQI_type_node))\n         return unsigned_intQI_type_node;\n-      if (bits == TYPE_PRECISION (unsigned_intHI_type_node))\n+      if (bits <= TYPE_PRECISION (unsigned_intHI_type_node))\n \treturn unsigned_intHI_type_node;\n-      if (bits == TYPE_PRECISION (unsigned_intSI_type_node))\n+      if (bits <= TYPE_PRECISION (unsigned_intSI_type_node))\n \treturn unsigned_intSI_type_node;\n-      if (bits == TYPE_PRECISION (unsigned_intDI_type_node))\n+      if (bits <= TYPE_PRECISION (unsigned_intDI_type_node))\n \treturn unsigned_intDI_type_node;\n-      if (bits == TYPE_PRECISION (unsigned_intTI_type_node))\n+      if (bits <= TYPE_PRECISION (unsigned_intTI_type_node))\n \treturn unsigned_intTI_type_node;\n     }\n \n@@ -2823,7 +2834,10 @@ gfc_type_for_mode (enum machine_mode mode, int unsignedp)\n   else if (GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT)\n     base = gfc_complex_types;\n   else if (SCALAR_INT_MODE_P (mode))\n-    return gfc_type_for_size (GET_MODE_PRECISION (mode), unsignedp);\n+    {\n+      tree type = gfc_type_for_size (GET_MODE_PRECISION (mode), unsignedp);\n+      return type != NULL_TREE && mode == TYPE_MODE (type) ? type : NULL_TREE;\n+    }\n   else if (VECTOR_MODE_P (mode))\n     {\n       enum machine_mode inner_mode = GET_MODE_INNER (mode);"}]}