{"sha": "6de7294fd4a37431a5c9df578feca6fece431077", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRlNzI5NGZkNGEzNzQzMWE1YzlkZjU3OGZlY2E2ZmVjZTQzMTA3Nw==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-05-14T09:41:41Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-05-14T09:41:41Z"}, "message": "re PR fortran/39996 (Double typing of function results not detected)\n\n2009-05-14  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/39996\n\t* decl.c (gfc_match_function_decl): Use gfc_add_type.\n\t* symbol.c (gfc_add_type): Better checking for duplicate types in\n\tfunction declarations. And: Always give an error for duplicte types,\n\tnot just a warning with -std=gnu.\n\n\n2009-05-14  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/39996\n\t* gfortran.dg/func_decl_2.f90: Modified (replacing warnings by errors).\n\t* gfortran.dg/duplicate_type_2.f90: Ditto.\n\t* gfortran.dg/duplicate_type_3.f90: New.\n\nFrom-SVN: r147528", "tree": {"sha": "edbab0228a5042dccc8a06bfbb493111b0df876c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edbab0228a5042dccc8a06bfbb493111b0df876c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6de7294fd4a37431a5c9df578feca6fece431077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de7294fd4a37431a5c9df578feca6fece431077", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6de7294fd4a37431a5c9df578feca6fece431077", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6de7294fd4a37431a5c9df578feca6fece431077/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1a029634255e159dc6817b24b6bcc6497fa400c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1a029634255e159dc6817b24b6bcc6497fa400c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1a029634255e159dc6817b24b6bcc6497fa400c"}], "stats": {"total": 123, "additions": 90, "deletions": 33}, "files": [{"sha": "c768fed0f96ac10a1e219e1b7d9d3fe36e7a2639", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de7294fd4a37431a5c9df578feca6fece431077/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de7294fd4a37431a5c9df578feca6fece431077/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6de7294fd4a37431a5c9df578feca6fece431077", "patch": "@@ -1,3 +1,11 @@\n+2009-05-14  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/39996\n+\t* decl.c (gfc_match_function_decl): Use gfc_add_type.\n+\t* symbol.c (gfc_add_type): Better checking for duplicate types in\n+\tfunction declarations. And: Always give an error for duplicte types,\n+\tnot just a warning with -std=gnu.\n+\n 2009-05-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/39865"}, {"sha": "6c6fa45a8c6b049cdcfae651a998285a3e06a88a", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de7294fd4a37431a5c9df578feca6fece431077/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de7294fd4a37431a5c9df578feca6fece431077/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=6de7294fd4a37431a5c9df578feca6fece431077", "patch": "@@ -4708,14 +4708,6 @@ gfc_match_function_decl (void)\n \t  || copy_prefix (&sym->attr, &sym->declared_at) == FAILURE)\n \tgoto cleanup;\n \n-      if (current_ts.type != BT_UNKNOWN && sym->ts.type != BT_UNKNOWN\n-\t  && !sym->attr.implicit_type)\n-\t{\n-\t  gfc_error (\"Function '%s' at %C already has a type of %s\", name,\n-\t\t     gfc_basic_typename (sym->ts.type));\n-\t  goto cleanup;\n-\t}\n-\n       /* Delay matching the function characteristics until after the\n \t specification block by signalling kind=-1.  */\n       sym->declared_at = old_loc;\n@@ -4726,12 +4718,17 @@ gfc_match_function_decl (void)\n \n       if (result == NULL)\n \t{\n-\t  sym->ts = current_ts;\n+          if (current_ts.type != BT_UNKNOWN\n+\t      && gfc_add_type (sym, &current_ts, &gfc_current_locus) == FAILURE)\n+\t    goto cleanup;\n \t  sym->result = sym;\n \t}\n       else\n \t{\n-\t  result->ts = current_ts;\n+          if (current_ts.type != BT_UNKNOWN\n+\t      && gfc_add_type (result, &current_ts, &gfc_current_locus)\n+\t\t == FAILURE)\n+\t    goto cleanup;\n \t  sym->result = result;\n \t}\n "}, {"sha": "67240ad6a0f13fcea464233a92f0b61125a23c6c", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de7294fd4a37431a5c9df578feca6fece431077/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de7294fd4a37431a5c9df578feca6fece431077/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=6de7294fd4a37431a5c9df578feca6fece431077", "patch": "@@ -1559,31 +1559,30 @@ gfc_try\n gfc_add_type (gfc_symbol *sym, gfc_typespec *ts, locus *where)\n {\n   sym_flavor flavor;\n+  bt type;\n \n   if (where == NULL)\n     where = &gfc_current_locus;\n \n-  if (sym->ts.type != BT_UNKNOWN)\n+  if (sym->result)\n+    type = sym->result->ts.type;\n+  else\n+    type = sym->ts.type;\n+\n+  if (sym->attr.result && type == BT_UNKNOWN && sym->ns->proc_name)\n+    type = sym->ns->proc_name->ts.type;\n+\n+  if (type != BT_UNKNOWN && !(sym->attr.function && sym->attr.implicit_type))\n     {\n-      const char *msg = \"Symbol '%s' at %L already has basic type of %s\";\n-      if (!(sym->ts.type == ts->type && sym->attr.result)\n-\t  || gfc_notification_std (GFC_STD_GNU) == ERROR\n-\t  || pedantic)\n-\t{\n-\t  gfc_error (msg, sym->name, where, gfc_basic_typename (sym->ts.type));\n-\t  return FAILURE;\n-\t}\n-      if (gfc_notify_std (GFC_STD_GNU, msg, sym->name, where,\n-\t      \t\t  gfc_basic_typename (sym->ts.type)) == FAILURE)\n-\treturn FAILURE;\n-      if (gfc_option.warn_surprising)\n-\tgfc_warning (msg, sym->name, where, gfc_basic_typename (sym->ts.type));\n+      gfc_error (\"Symbol '%s' at %L already has basic type of %s\", sym->name,\n+\t\t where, gfc_basic_typename (type));\n+      return FAILURE;\n     }\n \n   if (sym->attr.procedure && sym->ts.interface)\n     {\n-      gfc_error (\"Procedure '%s' at %L may not have basic type of %s\", sym->name, where,\n-\t\t gfc_basic_typename (ts->type));\n+      gfc_error (\"Procedure '%s' at %L may not have basic type of %s\",\n+\t\t sym->name, where, gfc_basic_typename (ts->type));\n       return FAILURE;\n     }\n "}, {"sha": "f22bcceed3ff16062b7f65a7e7f74aaf62d872a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de7294fd4a37431a5c9df578feca6fece431077/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de7294fd4a37431a5c9df578feca6fece431077/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6de7294fd4a37431a5c9df578feca6fece431077", "patch": "@@ -1,3 +1,10 @@\n+2009-05-14  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/39996\n+\t* gfortran.dg/func_decl_2.f90: Modified (replacing warnings by errors).\n+\t* gfortran.dg/duplicate_type_2.f90: Ditto.\n+\t* gfortran.dg/duplicate_type_3.f90: New.\n+\n 2009-05-14  Laurent GUERBY  <laurent@guerby.net>\n \t\n         * ada/acats/tests/c3/c38202a.ada: Use Impdef."}, {"sha": "0fd9258fe8098e7b77b0558f0fe65339118a31f5", "filename": "gcc/testsuite/gfortran.dg/duplicate_type_2.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de7294fd4a37431a5c9df578feca6fece431077/gcc%2Ftestsuite%2Fgfortran.dg%2Fduplicate_type_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de7294fd4a37431a5c9df578feca6fece431077/gcc%2Ftestsuite%2Fgfortran.dg%2Fduplicate_type_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fduplicate_type_2.f90?ref=6de7294fd4a37431a5c9df578feca6fece431077", "patch": "@@ -7,14 +7,14 @@\n \n INTEGER FUNCTION foo ()\n   IMPLICIT NONE\n-  INTEGER :: foo ! { dg-warning \"basic type of\" }\n-  INTEGER :: foo ! { dg-warning \"basic type of\" }\n+  INTEGER :: foo ! { dg-error \"basic type of\" }\n+  INTEGER :: foo ! { dg-error \"basic type of\" }\n   foo = 42\n END FUNCTION foo\n \n INTEGER FUNCTION bar () RESULT (x)\n   IMPLICIT NONE\n-  INTEGER :: x ! { dg-warning \"basic type of\" }\n+  INTEGER :: x ! { dg-error \"basic type of\" }\n \n   INTEGER :: y\n   INTEGER :: y ! { dg-error \"basic type of\" }"}, {"sha": "802029db0ca8fae8edee07defbed17f9635863da", "filename": "gcc/testsuite/gfortran.dg/duplicate_type_3.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de7294fd4a37431a5c9df578feca6fece431077/gcc%2Ftestsuite%2Fgfortran.dg%2Fduplicate_type_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de7294fd4a37431a5c9df578feca6fece431077/gcc%2Ftestsuite%2Fgfortran.dg%2Fduplicate_type_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fduplicate_type_3.f90?ref=6de7294fd4a37431a5c9df578feca6fece431077", "patch": "@@ -0,0 +1,48 @@\n+! { dg-do compile }\n+!\n+! PR 39996: Double typing of function results not detected\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+  interface\n+    real function A ()\n+    end function\n+  end interface\n+  real :: A  ! { dg-error \"already has basic type of\" }\n+\n+  real :: B\n+  interface\n+    real function B ()  ! { dg-error \"already has basic type of\" }\n+    end function  ! { dg-error \"Expecting END INTERFACE statement\" }\n+  end interface\n+\n+  interface\n+    function C ()\n+      real :: C\n+    end function\n+  end interface\n+  real :: C  ! { dg-error \"already has basic type of\" }\n+\n+  real :: D\n+  interface\n+    function D ()\n+      real :: D  ! { dg-error \"already has basic type of\" }\n+    end function\n+  end interface\n+\n+  interface\n+    function E () result (s)\n+      real ::s\n+    end function\n+  end interface\n+  real :: E  ! { dg-error \"already has basic type of\" }\n+\n+  real :: F\n+  interface\n+    function F () result (s)\n+      real ::s  ! { dg-error \"already has basic type of\" }\n+    end function F\n+  end interface\n+\n+end\n+"}, {"sha": "658883e65e21bd279fc7389195e5a685b4fba3ab", "filename": "gcc/testsuite/gfortran.dg/func_decl_2.f90", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6de7294fd4a37431a5c9df578feca6fece431077/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_decl_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6de7294fd4a37431a5c9df578feca6fece431077/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_decl_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunc_decl_2.f90?ref=6de7294fd4a37431a5c9df578feca6fece431077", "patch": "@@ -1,8 +1,6 @@\n ! { dg-do compile }\n ! Test fix for PR16943 in which the double typing of\n-! N caused an error.  This is a common extension to the\n-! F95 standard, so the error is only thrown for -std=f95\n-! or -pedantic.\n+! N caused an error.\n !\n ! Contributed by Paul Thomas  <pault@gcc.gnu.org>\n !\n@@ -14,7 +12,7 @@ program bug8\n \n     integer function bugf(M) result (N) \n       integer, intent (in) :: M \n-      integer :: N ! { dg-warning \"already has basic type of INTEGER\" }\n+      integer :: N ! { dg-error \"already has basic type of INTEGER\" }\n       N = M \n       return \n     end function bugf"}]}