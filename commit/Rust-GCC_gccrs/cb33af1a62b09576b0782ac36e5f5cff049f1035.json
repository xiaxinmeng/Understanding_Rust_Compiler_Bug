{"sha": "cb33af1a62b09576b0782ac36e5f5cff049f1035", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IzM2FmMWE2MmIwOTU3NmIwNzgyYWMzNmU1ZjVjZmYwNDlmMTAzNQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-05-25T17:53:25Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-05-25T23:26:47Z"}, "message": "fully populate the export list from range_cache, not gori_compute.\n\nRanger wants to prepopulate all the export blocks so that it has an initial\ninvariant set of names. GORI consumers shouldn't be penalized for ranger\nrequirements.  This way any gori client remains lightweight.\n\n\t* gimple-range-cache.cc (ranger_cache::ranger_cache):  Move initial\n\texport cache filling to here.\n\t* gimple-range-gori.cc (gori_compute::gori_compute) : From Here.", "tree": {"sha": "09a6f1ef76a92b51c748a0b019199e604d05f771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09a6f1ef76a92b51c748a0b019199e604d05f771"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb33af1a62b09576b0782ac36e5f5cff049f1035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb33af1a62b09576b0782ac36e5f5cff049f1035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb33af1a62b09576b0782ac36e5f5cff049f1035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb33af1a62b09576b0782ac36e5f5cff049f1035/comments", "author": null, "committer": null, "parents": [{"sha": "28ceee1b91f48b5ab09cbd20ea6a9de6ea137af8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28ceee1b91f48b5ab09cbd20ea6a9de6ea137af8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28ceee1b91f48b5ab09cbd20ea6a9de6ea137af8"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "8ad76048272fccce6d12c13034263f9e137d6c09", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb33af1a62b09576b0782ac36e5f5cff049f1035/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb33af1a62b09576b0782ac36e5f5cff049f1035/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=cb33af1a62b09576b0782ac36e5f5cff049f1035", "patch": "@@ -618,6 +618,16 @@ ranger_cache::ranger_cache (gimple_ranger &q) : query (q)\n   m_poor_value_list.safe_grow_cleared (20);\n   m_poor_value_list.truncate (0);\n   m_temporal = new temporal_cache;\n+  unsigned x, lim = last_basic_block_for_fn (cfun);\n+  // Calculate outgoing range info upfront.  This will fully populate the\n+  // m_maybe_variant bitmap which will help eliminate processing of names\n+  // which never have their ranges adjusted.\n+  for (x = 0; x < lim ; x++)\n+    {\n+      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, x);\n+      if (bb)\n+\texports (bb);\n+    }\n }\n \n ranger_cache::~ranger_cache ()"}, {"sha": "e30049edfbd8c79035bf35d15c85e16cbc126812", "filename": "gcc/gimple-range-gori.cc", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb33af1a62b09576b0782ac36e5f5cff049f1035/gcc%2Fgimple-range-gori.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb33af1a62b09576b0782ac36e5f5cff049f1035/gcc%2Fgimple-range-gori.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-gori.cc?ref=cb33af1a62b09576b0782ac36e5f5cff049f1035", "patch": "@@ -458,16 +458,6 @@ gori_compute::gori_compute ()\n   // Create a boolean_type true and false range.\n   m_bool_zero = int_range<2> (boolean_false_node, boolean_false_node);\n   m_bool_one = int_range<2> (boolean_true_node, boolean_true_node);\n-  unsigned x, lim = last_basic_block_for_fn (cfun);\n-  // Calculate outgoing range info upfront.  This will fully populate the\n-  // m_maybe_variant bitmap which will help eliminate processing of names\n-  // which never have their ranges adjusted.\n-  for (x = 0; x < lim ; x++)\n-    {\n-      basic_block bb = BASIC_BLOCK_FOR_FN (cfun, x);\n-      if (bb)\n-\texports (bb);\n-    }\n }\n \n // Provide a default of VARYING for all incoming SSA names."}]}