{"sha": "1d3121af3ad1eb7eb240b0b949d4b57415497463", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQzMTIxYWYzYWQxZWI3ZWIyNDBiMGI5NDlkNGI1NzQxNTQ5NzQ2Mw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-02-23T17:39:16Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-02-23T17:39:16Z"}, "message": "Add test coverage for _Pragma (PR preprocessor 69126, 69543, 69558)\n\nWe had some regressions in the ability for _Pragma to disable a warning\n(PR preprocessor/69126, PR preprocessor/69543, PR preprocessor/69558).\n\nThis patch attempts to add more test coverage for this, for the\nvarious combinations of:\n  - various warnings:\n    -Wunused-variable\n    -Wuninitialized\n    -Wdeprecated-declarations\n  - various combinations of location of _Pragma relative to location of\n    the warning:\n     - _Pragma is in a macro, warning isn't a macro\n     - neither is in a macro\n     - _Pragma isnt't in a macro, warning is in a macro\n     - in different macros\n     - both in the same macro\n  - C vs C++ frontend.\n\nIt adds some XFAILs:\n  - pr69543-1.c for C++ (fixed in the followup patch)\n  - pr69543-3.c for both C and C++\n  - pr69543-4.c for both C and C++\n  - pr69558.c for C++ (moving it from gcc.dg to c-c++-common,\n    marking it as xfail for C++ for now)\n\ngcc/testsuite/ChangeLog:\n\tPR preprocessor/69126\n\tPR preprocessor/69543\n\tPR preprocessor/69558\n\t* c-c++-common/pr69126.c (MACRO_1, test_1): New.\n\t(f): Rename to...\n\t(test_2): ...this, and add leading comment.\n\t(MACRO_3, test_3): New.\n\t(MACRO_4A, MACRO_4B, test_4): New.\n\t(MACRO): Rename to...\n\t(MACRO_5): ...this.\n\t(g): Rename to...\n\t(test_5): ...this, updating for renaming of MACRO, and\n\tadd leading comment.\n\t* c-c++-common/pr69543-1.c: New.\n\t* c-c++-common/pr69543-2.c: New.\n\t* c-c++-common/pr69543-3.c: New.\n\t* c-c++-common/pr69543-4.c: New.\n\t* c-c++-common/pr69558-1.c: New.\n\t* c-c++-common/pr69558-2.c: New.\n\t* c-c++-common/pr69558-3.c: New.\n\t* c-c++-common/pr69558-4.c: New.\n\t* gcc.dg/pr69558.c: Move to...\n\t* c-c++-common/pr69558.c: ...here.  Add dg-bogus directives, with\n\txfail for c++.\n\nFrom-SVN: r233637", "tree": {"sha": "2b0e5b41b39ca244918d39ae1b70451ff04f3ed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b0e5b41b39ca244918d39ae1b70451ff04f3ed9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d3121af3ad1eb7eb240b0b949d4b57415497463", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3121af3ad1eb7eb240b0b949d4b57415497463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d3121af3ad1eb7eb240b0b949d4b57415497463", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3121af3ad1eb7eb240b0b949d4b57415497463/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f6dd5930f5fc05b5727dd435a6604cb2dace883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f6dd5930f5fc05b5727dd435a6604cb2dace883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f6dd5930f5fc05b5727dd435a6604cb2dace883"}], "stats": {"total": 259, "additions": 252, "deletions": 7}, "files": [{"sha": "96007ce3217597d367d510352826def92f95b742", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d3121af3ad1eb7eb240b0b949d4b57415497463", "patch": "@@ -1,3 +1,30 @@\n+2016-02-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/69126\n+\tPR preprocessor/69543\n+\tPR preprocessor/69558\n+\t* c-c++-common/pr69126.c (MACRO_1, test_1): New.\n+\t(f): Rename to...\n+\t(test_2): ...this, and add leading comment.\n+\t(MACRO_3, test_3): New.\n+\t(MACRO_4A, MACRO_4B, test_4): New.\n+\t(MACRO): Rename to...\n+\t(MACRO_5): ...this.\n+\t(g): Rename to...\n+\t(test_5): ...this, updating for renaming of MACRO, and\n+\tadd leading comment.\n+\t* c-c++-common/pr69543-1.c: New.\n+\t* c-c++-common/pr69543-2.c: New.\n+\t* c-c++-common/pr69543-3.c: New.\n+\t* c-c++-common/pr69543-4.c: New.\n+\t* c-c++-common/pr69558-1.c: New.\n+\t* c-c++-common/pr69558-2.c: New.\n+\t* c-c++-common/pr69558-3.c: New.\n+\t* c-c++-common/pr69558-4.c: New.\n+\t* gcc.dg/pr69558.c: Move to...\n+\t* c-c++-common/pr69558.c: ...here.  Add dg-bogus directives, with\n+\txfail for c++.\n+\n 2016-02-23  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* c-c++-common/goacc/kernels-counter-vars-function-scope.c: Adjust"}, {"sha": "52c96ebe18969780fccda4c3ee5a62acce123379", "filename": "gcc/testsuite/c-c++-common/pr69126.c", "status": "modified", "additions": 61, "deletions": 4, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69126.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69126.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69126.c?ref=1d3121af3ad1eb7eb240b0b949d4b57415497463", "patch": "@@ -1,22 +1,79 @@\n /* { dg-options \"-Wunused-variable\" } */\n \n+/* Verify that ignoring -Wunused-variable works, for various placements\n+   of the variable and the _Pragma.  */\n+\n+/* Test 1: the _Pragma is in a macro, but the affected code isn't.  */\n+\n+#pragma GCC diagnostic push\n+\n+#define MACRO_1 \\\n+    _Pragma(\"GCC diagnostic ignored \\\"-Wunused-variable\\\"\")\n+\n+int test_1()\n+{\n+    _Pragma(\"GCC diagnostic ignored \\\"-Wunused-variable\\\"\")\n+    int x;\n+    return 0;\n+}\n+#pragma GCC diagnostic pop\n+\n+\n+/* Test 2: neither the _Pragma nor the affected code are in a macro.  */\n+\n+#pragma GCC diagnostic push\n+int test_2()\n+{\n+    _Pragma(\"GCC diagnostic ignored \\\"-Wunused-variable\\\"\")\n+    int x;\n+    return 0;\n+}\n+#pragma GCC diagnostic pop\n+\n+\n+/* Test 3: the _Pragma isn't in a macro, but the affected code is.  */\n+\n+#define MACRO_3 \\\n+    int x;\n+\n #pragma GCC diagnostic push\n-int f()\n+int test_3()\n {\n     _Pragma(\"GCC diagnostic ignored \\\"-Wunused-variable\\\"\")\n+    MACRO_3\n+    return 0;\n+}\n+#pragma GCC diagnostic pop\n+\n+\n+/* Test 4: the _Pragma and the affected code are in different macros.  */\n+\n+#pragma GCC diagnostic push\n+#define MACRO_4A \\\n+    _Pragma(\"GCC diagnostic ignored \\\"-Wunused-variable\\\"\")\n+\n+#define MACRO_4B \\\n     int x;\n+\n+int test_4()\n+{\n+    MACRO_4A;\n+    MACRO_4B\n     return 0;\n }\n #pragma GCC diagnostic pop\n \n+\n+/* Test 5: both the _Pragma and the affected code are in the same macro.  */\n+\n #pragma GCC diagnostic push\n-#define MACRO \\\n+#define MACRO_5 \\\n     _Pragma(\"GCC diagnostic ignored \\\"-Wunused-variable\\\"\") \\\n     int x;\n \n-int g()\n+int test_5()\n {\n-    MACRO;\n+    MACRO_5;\n     return 0;\n }\n #pragma GCC diagnostic pop"}, {"sha": "bfb52705d764b670726d535f7da5751ceab2b861", "filename": "gcc/testsuite/c-c++-common/pr69543-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-1.c?ref=1d3121af3ad1eb7eb240b0b949d4b57415497463", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+/* Verify disabling a warning, where the _Pragma is within\n+   a macro, but the affected code is *not* in a macro.  */\n+\n+/* TODO: XFAIL: why does g++ still emit a warning here? (works for C).  */\n+\n+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\t\\\n+    _Pragma (\"GCC diagnostic push\") \\\n+    _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\\\n+    _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")\n+# define YY_IGNORE_MAYBE_UNINITIALIZED_END \\\n+    _Pragma (\"GCC diagnostic pop\")\n+\n+void test (char yylval)\n+{\n+  char *yyvsp;\n+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n+  *++yyvsp = yylval; /* { dg-bogus \"used uninitialized\" \"\" { xfail { c++ } } } */\n+  YY_IGNORE_MAYBE_UNINITIALIZED_END\n+}"}, {"sha": "4099fb2555f1a224c852f4195ea28678cae9e674", "filename": "gcc/testsuite/c-c++-common/pr69543-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-2.c?ref=1d3121af3ad1eb7eb240b0b949d4b57415497463", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+/* Verify disabling a warning, where both the _Pragma and the\n+   affected code are *not* in a macro.  */\n+\n+void test (char yylval)\n+{\n+  char *yyvsp;\n+  _Pragma (\"GCC diagnostic push\")\n+  _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\n+  _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")\n+  *++yyvsp = yylval;\n+  _Pragma (\"GCC diagnostic pop\")\n+}"}, {"sha": "fcf750cc05d37d87965dca5ed8ea8cb37d41a44c", "filename": "gcc/testsuite/c-c++-common/pr69543-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-3.c?ref=1d3121af3ad1eb7eb240b0b949d4b57415497463", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+/* Verify disabling a warning, where the _Pragma is in regular code,\n+   but the affected code is within a macro.  */\n+\n+/* TODO: XFAIL: both C and C++ erroneously fail to suppress the warning\n+   The warning is reported at the macro definition location, rather than\n+   the macro expansion location.  */\n+\n+#define WARNABLE_CODE *++yyvsp = yylval; /* { dg-bogus \"used uninitialized\" \"\" { xfail *-*-* } } */\n+\n+void test (char yylval)\n+{\n+  char *yyvsp; /* { dg-bogus \"declared here\" \"\" { xfail *-*-* } } */\n+  _Pragma (\"GCC diagnostic push\")\n+  _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\n+  _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")\n+  WARNABLE_CODE\n+  _Pragma (\"GCC diagnostic pop\")\n+}"}, {"sha": "cd71e7e118822e7c5df4f3713a2f5515b63662e4", "filename": "gcc/testsuite/c-c++-common/pr69543-4.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69543-4.c?ref=1d3121af3ad1eb7eb240b0b949d4b57415497463", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-options \"-Wuninitialized\" } */\n+\n+/* Verify disabling a warning, where both the _Pragma and the\n+   affected code are within (different) macros.  */\n+\n+/* TODO: XFAIL: both C and C++ erroneously fail to suppress the warning\n+   The warning is reported at the macro definition location, rather than\n+   the macro expansion location.  */\n+\n+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\t\\\n+    _Pragma (\"GCC diagnostic push\") \\\n+    _Pragma (\"GCC diagnostic ignored \\\"-Wuninitialized\\\"\")\\\n+    _Pragma (\"GCC diagnostic ignored \\\"-Wmaybe-uninitialized\\\"\")\n+# define YY_IGNORE_MAYBE_UNINITIALIZED_END \\\n+    _Pragma (\"GCC diagnostic pop\")\n+\n+#define WARNABLE_CODE *++yyvsp = yylval; /* { dg-bogus \"used uninitialized\" \"\" { xfail *-*-* } } */\n+\n+void test (char yylval)\n+{\n+  char *yyvsp; /* { dg-bogus \"declared here\" \"\" { xfail *-*-* } } */\n+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN\n+  WARNABLE_CODE\n+  YY_IGNORE_MAYBE_UNINITIALIZED_END\n+}"}, {"sha": "57ac4904d3120ffda431f7be779e396b99e69604", "filename": "gcc/testsuite/c-c++-common/pr69558-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558-1.c?ref=1d3121af3ad1eb7eb240b0b949d4b57415497463", "patch": "@@ -0,0 +1,21 @@\n+/* PR c/69558 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wdeprecated-declarations\" } */\n+\n+/* Verify disabling -Wdeprecated-declarations, where the _Pragma is in a\n+   macro, but the affected code is *not* in a macro.  */\n+\n+#define A \\\n+  _Pragma (\"GCC diagnostic push\") \\\n+  _Pragma (\"GCC diagnostic ignored \\\"-Wdeprecated-declarations\\\"\")\n+#define B \\\n+  _Pragma (\"GCC diagnostic pop\")\n+\n+__attribute__((deprecated)) void foo (void);\n+\n+void bar (void)\n+{\n+  A\n+  foo ();\n+  B\n+}"}, {"sha": "83ae6470a362dc2c19b166537819a80e0f5d2a56", "filename": "gcc/testsuite/c-c++-common/pr69558-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558-2.c?ref=1d3121af3ad1eb7eb240b0b949d4b57415497463", "patch": "@@ -0,0 +1,16 @@\n+/* PR c/69558 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wdeprecated-declarations\" } */\n+\n+/* Verify disabling -Wdeprecated-declarations, where neither the _Pragma nor\n+   the affected code are in macros.  */\n+\n+__attribute__((deprecated)) void foo (void);\n+\n+void bar (void)\n+{\n+  _Pragma (\"GCC diagnostic push\")\n+  _Pragma (\"GCC diagnostic ignored \\\"-Wdeprecated-declarations\\\"\")\n+  foo ();\n+  _Pragma (\"GCC diagnostic pop\")\n+}"}, {"sha": "45c38a9d9cecf5f0b7f113aa07f305b5e072f689", "filename": "gcc/testsuite/c-c++-common/pr69558-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558-3.c?ref=1d3121af3ad1eb7eb240b0b949d4b57415497463", "patch": "@@ -0,0 +1,19 @@\n+/* PR c/69558 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wdeprecated-declarations\" } */\n+\n+/* Verify disabling -Wdeprecated-declarations, where the _Pragma is not\n+   in a macro, but the affected code *is*.  */\n+\n+#define C \\\n+  foo ();\n+\n+__attribute__((deprecated)) void foo (void);\n+\n+void bar (void)\n+{\n+  _Pragma (\"GCC diagnostic push\")\n+  _Pragma (\"GCC diagnostic ignored \\\"-Wdeprecated-declarations\\\"\")\n+  C\n+  _Pragma (\"GCC diagnostic pop\")\n+}"}, {"sha": "02d526e09bed2060bb3d11949545b36f9b148b9b", "filename": "gcc/testsuite/c-c++-common/pr69558-4.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558-4.c?ref=1d3121af3ad1eb7eb240b0b949d4b57415497463", "patch": "@@ -0,0 +1,23 @@\n+/* PR c/69558 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wdeprecated-declarations\" } */\n+\n+/* Verify disabling -Wdeprecated-declarations, where the _Pragma and the\n+   affected code are in different macros.  */\n+\n+#define A \\\n+  _Pragma (\"GCC diagnostic push\") \\\n+  _Pragma (\"GCC diagnostic ignored \\\"-Wdeprecated-declarations\\\"\")\n+#define B \\\n+  _Pragma (\"GCC diagnostic pop\")\n+#define C \\\n+  foo ();\n+\n+__attribute__((deprecated)) void foo (void);\n+\n+void bar (void)\n+{\n+  A\n+  C\n+  B\n+}"}, {"sha": "102d72c276efc884c04c762f324769acc67da0e4", "filename": "gcc/testsuite/c-c++-common/pr69558.c", "status": "renamed", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d3121af3ad1eb7eb240b0b949d4b57415497463/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69558.c?ref=1d3121af3ad1eb7eb240b0b949d4b57415497463", "patch": "@@ -2,16 +2,18 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wdeprecated-declarations\" } */\n \n+/* TODO: XFAIL for g++ (works for C).  */\n+\n #define A \\\n   _Pragma (\"GCC diagnostic push\") \\\n   _Pragma (\"GCC diagnostic ignored \\\"-Wdeprecated-declarations\\\"\")\n #define B \\\n   _Pragma (\"GCC diagnostic pop\")\n #define C(x) \\\n   A \\\n-  static inline void bar (void) { x (); } \\\n+  static inline void bar (void) { x (); } /* { dg-bogus \"in definition of|deprecated\" \"\" { xfail { c++ } } } */ \\\n   B\n \n-__attribute__((deprecated)) void foo (void); /* { dg-bogus \"declared here\" } */\n+__attribute__((deprecated)) void foo (void); /* { dg-bogus \"declared here\" \"\" { xfail { c++ } } } */\n \n-C (foo) /* { dg-bogus \"is deprecated\" } */\n+C (foo) /* { dg-bogus \"is deprecated\"  \"\" { xfail { c++ } } } */", "previous_filename": "gcc/testsuite/gcc.dg/pr69558.c"}]}