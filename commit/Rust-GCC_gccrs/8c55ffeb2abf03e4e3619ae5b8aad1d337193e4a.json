{"sha": "8c55ffeb2abf03e4e3619ae5b8aad1d337193e4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM1NWZmZWIyYWJmMDNlNGUzNjE5YWU1YjhhYWQxZDMzNzE5M2U0YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-11-21T23:36:31Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-11-21T23:36:31Z"}, "message": "i386.c (ix86_expand_special_args_builtin): Use ix86_zero_extend_to_Pmode where appropriate.\n\n\t* config/i386/i386.c (ix86_expand_special_args_builtin): Use\n\tix86_zero_extend_to_Pmode where appropriate.\n\t(ix86_expand_builtin): Ditto.\n\nFrom-SVN: r205236", "tree": {"sha": "dcc8fbd467b95dbe7e94e88422403c95177fec5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcc8fbd467b95dbe7e94e88422403c95177fec5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c55ffeb2abf03e4e3619ae5b8aad1d337193e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c55ffeb2abf03e4e3619ae5b8aad1d337193e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c55ffeb2abf03e4e3619ae5b8aad1d337193e4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c55ffeb2abf03e4e3619ae5b8aad1d337193e4a/comments", "author": null, "committer": null, "parents": [{"sha": "51b83fdd47de99a9f3927890924c92a1f9c2d8be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51b83fdd47de99a9f3927890924c92a1f9c2d8be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51b83fdd47de99a9f3927890924c92a1f9c2d8be"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "e472888c3fb23323d1222a6c3abdd29fe234b6ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c55ffeb2abf03e4e3619ae5b8aad1d337193e4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c55ffeb2abf03e4e3619ae5b8aad1d337193e4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c55ffeb2abf03e4e3619ae5b8aad1d337193e4a", "patch": "@@ -1,3 +1,9 @@\n+2013-11-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_expand_special_args_builtin): Use\n+\tix86_zero_extend_to_Pmode where appropriate.\n+\t(ix86_expand_builtin): Ditto.\n+\n 2013-11-21  Cary Coutant  <ccoutant@google.com>\n \n \t* dwarf2out.c (want_pubnames): Don't do pubnames for -g1.\n@@ -96,8 +102,7 @@\n 2013-11-21  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/59058\n-\t* tree-loop-distribution.c (struct partition_s): Add plus_one\n-\tmember.\n+\t* tree-loop-distribution.c (struct partition_s): Add plus_one member.\n \t(build_size_arg_loc): Apply niter adjustment here.\n \t(generate_memset_builtin): Adjust.\n \t(generate_memcpy_builtin): Likewise.\n@@ -145,13 +150,13 @@\n \n 2013-11-20  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* gimplify.h (gimplify_hasher : typed_free_remove, struct gimplify_ctx):\n+\t* gimplify.h (gimplify_hasher:typed_free_remove, struct gimplify_ctx):\n \tMove to gimplify.c.\n \t(free_gimplify_stack): Add prototype.\n \t* gimplify.c (gimplify_hasher:typed_free_remove): Relocate here.\n \t(struct gimplify_ctx): Relocate here.\n \t(gimplify_ctxp): Make static.\n-\t(ctx_pool, ctx_alloc, ctx_free, free_gimplify_stack): New.  Manage a \n+\t(ctx_pool, ctx_alloc, ctx_free, free_gimplify_stack): New.  Manage a\n \tlist of struct gimplify_ctx.\n \t(push_gimplify_context): Add default parameters and allocate a struct\n \tfrom the pool.\n@@ -184,8 +189,7 @@\n \tnew pseudos.\n \t(lra_create_new_reg_with_unique_value): Pass new argument value.\n \t(lra_emit_add, lra_emit_move): Ditto.\n-\t* lra-constraints.c (in_class_p): Add check for move for a new\n-\tinsn.\n+\t* lra-constraints.c (in_class_p): Add check for move for a new insn.\n \t(change_class): Rename to lra_change_class.  Move to lra-int.h.\n \t(get_reload_reg, narrow_reload_pseudo_class): Adjust calls of\n \tchange_class.\n@@ -279,7 +283,8 @@\n \n 2013-11-20  Jan Hubicka  <jh@suse.cz>\n \n-\t* opts.c (finish_options): Imply -ffat-lto-objects with -fno-use-linker-plugin.\n+\t* opts.c (finish_options): Imply -ffat-lto-objects with\n+\t-fno-use-linker-plugin.\n \t* common.opt (fuse-linker-plugin): Add var.\n \n 2013-11-20  Ilya Enkovich  <ilya.enkovich@intel.com>\n@@ -373,8 +378,7 @@\n \tRemove inline and related attributes.\n \t(__TM_nesting_depth, __TM_is_user_abort, __TM_is_named_user_abort)\n \t(__TM_is_illegal, __TM_is_footprint_exceeded)\n-\t(__TM_is_nested_too_deep, __TM_is_conflict): Fix format value\n-\tcheck.\n+\t(__TM_is_nested_too_deep, __TM_is_conflict): Fix format value check.\n \n 2013-11-20  Richard Biener  <rguenther@suse.de>\n \n@@ -394,8 +398,7 @@\n \n \t* gcc/config/aarch64/aarch64-builtins.c\n \t(aarch64_simd_itype): Remove.\n-\t(aarch64_simd_builtin_datum): Remove itype, add\n-\tqualifiers pointer.\n+\t(aarch64_simd_builtin_datum): Remove itype, add qualifiers pointer.\n \t(VAR1): Use qualifiers.\n \t(aarch64_build_scalar_type): New.\n \t(aarch64_build_vector_type): Likewise."}, {"sha": "60e1b0f164d575e385887cd74f1293bc73bcb0f5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c55ffeb2abf03e4e3619ae5b8aad1d337193e4a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c55ffeb2abf03e4e3619ae5b8aad1d337193e4a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8c55ffeb2abf03e4e3619ae5b8aad1d337193e4a", "patch": "@@ -32577,7 +32577,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       gcc_assert (target == 0);\n       if (memory)\n \t{\n-\t  op = force_reg (Pmode, convert_to_mode (Pmode, op, 1));\n+\t  op = ix86_zero_extend_to_Pmode (op);\n \t  target = gen_rtx_MEM (tmode, op);\n \t}\n       else\n@@ -32622,7 +32622,7 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \t  if (i == memory)\n \t    {\n \t      /* This must be the memory operand.  */\n-\t      op = force_reg (Pmode, convert_to_mode (Pmode, op, 1));\n+\t      op = ix86_zero_extend_to_Pmode (op);\n \t      op = gen_rtx_MEM (mode, op);\n \t      gcc_assert (GET_MODE (op) == mode\n \t\t\t  || GET_MODE (op) == VOIDmode);\n@@ -32870,7 +32870,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       mode1 = insn_data[icode].operand[1].mode;\n       mode2 = insn_data[icode].operand[2].mode;\n \n-      op0 = force_reg (Pmode, convert_to_mode (Pmode, op0, 1));\n+      op0 = ix86_zero_extend_to_Pmode (op0);\n       op0 = gen_rtx_MEM (mode1, op0);\n \n       if (!insn_data[icode].operand[0].predicate (op0, mode0))\n@@ -32902,7 +32902,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \top0 = expand_normal (arg0);\n \ticode = CODE_FOR_sse2_clflush;\n \tif (!insn_data[icode].operand[0].predicate (op0, Pmode))\n-\t  op0 = force_reg (Pmode, convert_to_mode (Pmode, op0, 1));\n+\t  op0 = ix86_zero_extend_to_Pmode (op0);\n \n \temit_insn (gen_sse2_clflush (op0));\n \treturn 0;\n@@ -32915,7 +32915,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       op1 = expand_normal (arg1);\n       op2 = expand_normal (arg2);\n       if (!REG_P (op0))\n-\top0 = force_reg (Pmode, convert_to_mode (Pmode, op0, 1));\n+\top0 = ix86_zero_extend_to_Pmode (op0);\n       if (!REG_P (op1))\n \top1 = copy_to_mode_reg (SImode, op1);\n       if (!REG_P (op2))\n@@ -33172,7 +33172,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       op0 = expand_normal (arg0);\n       icode = CODE_FOR_lwp_llwpcb;\n       if (!insn_data[icode].operand[0].predicate (op0, Pmode))\n-\top0 = force_reg (Pmode, convert_to_mode (Pmode, op0, 1));\n+\top0 = ix86_zero_extend_to_Pmode (op0);\n       emit_insn (gen_lwp_llwpcb (op0));\n       return 0;\n \n@@ -33468,7 +33468,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       /* Force memory operand only with base register here.  But we\n \t don't want to do it on memory operand for other builtin\n \t functions.  */\n-      op1 = force_reg (Pmode, convert_to_mode (Pmode, op1, 1));\n+      op1 = ix86_zero_extend_to_Pmode (op1);\n \n       if (!insn_data[icode].operand[1].predicate (op0, mode0))\n \top0 = copy_to_mode_reg (mode0, op0);"}]}