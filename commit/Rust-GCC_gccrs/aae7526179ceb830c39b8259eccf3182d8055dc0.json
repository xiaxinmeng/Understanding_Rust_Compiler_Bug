{"sha": "aae7526179ceb830c39b8259eccf3182d8055dc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFlNzUyNjE3OWNlYjgzMGMzOWI4MjU5ZWNjZjMxODJkODA1NWRjMA==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-03-28T06:33:41Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1992-03-28T06:33:41Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r609", "tree": {"sha": "44dfd289059e790b5ad3d744f693271a5e5500c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44dfd289059e790b5ad3d744f693271a5e5500c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aae7526179ceb830c39b8259eccf3182d8055dc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae7526179ceb830c39b8259eccf3182d8055dc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aae7526179ceb830c39b8259eccf3182d8055dc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae7526179ceb830c39b8259eccf3182d8055dc0/comments", "author": null, "committer": null, "parents": [{"sha": "79aa53464280cdb3e282289fd0827ee11afac6b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79aa53464280cdb3e282289fd0827ee11afac6b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79aa53464280cdb3e282289fd0827ee11afac6b1"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "21eee4845b901622ba65c6fed4f5012ae18eabf7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae7526179ceb830c39b8259eccf3182d8055dc0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae7526179ceb830c39b8259eccf3182d8055dc0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=aae7526179ceb830c39b8259eccf3182d8055dc0", "patch": "@@ -614,6 +614,8 @@ function_prologue (file, size)\n   register int regno;\n   int limit;\n   rtx xops[4];\n+  int pic_reg_used = flag_pic && (current_function_uses_pic_offset_table\n+\t\t\t\t  || current_function_uses_const_pool);\n \n   xops[0] = stack_pointer_rtx;\n   xops[1] = frame_pointer_rtx;\n@@ -639,14 +641,13 @@ function_prologue (file, size)\n   limit = (frame_pointer_needed ? FRAME_POINTER_REGNUM : STACK_POINTER_REGNUM);\n   for (regno = limit - 1; regno >= 0; regno--)\n     if ((regs_ever_live[regno] && ! call_used_regs[regno])\n-\t|| (current_function_uses_pic_offset_table\n-\t    && regno == PIC_OFFSET_TABLE_REGNUM))\n+\t|| (regno == PIC_OFFSET_TABLE_REGNUM && pic_reg_used))\n       {\n \txops[0] = gen_rtx (REG, SImode, regno);\n \toutput_asm_insn (\"push%L0 %0\", xops);\n       }\n \n-  if (current_function_uses_pic_offset_table)\n+  if (pic_reg_used)\n     {\n       xops[0] = pic_offset_table_rtx;\n       xops[1] = (rtx) gen_label_rtx ();\n@@ -675,6 +676,8 @@ simple_386_epilogue ()\n   int nregs = 0;\n   int reglimit = (frame_pointer_needed\n \t\t  ? FRAME_POINTER_REGNUM : STACK_POINTER_REGNUM);\n+  int pic_reg_used = flag_pic && (current_function_uses_pic_offset_table\n+\t\t\t\t  || current_function_uses_const_pool);\n \n #ifdef NON_SAVING_SETJMP\n   if (NON_SAVING_SETJMP && current_function_calls_setjmp)\n@@ -686,8 +689,7 @@ simple_386_epilogue ()\n \n   for (regno = reglimit - 1; regno >= 0; regno--)\n     if ((regs_ever_live[regno] && ! call_used_regs[regno])\n-\t|| (current_function_uses_pic_offset_table\n-\t    && regno == PIC_OFFSET_TABLE_REGNUM))\n+\t|| (regno == PIC_OFFSET_TABLE_REGNUM && pic_reg_used))\n       nregs++;\n \n   return nregs == 0 || ! frame_pointer_needed;\n@@ -706,6 +708,8 @@ function_epilogue (file, size)\n   register int nregs, limit;\n   int offset;\n   rtx xops[3];\n+  int pic_reg_used = flag_pic && (current_function_uses_pic_offset_table\n+\t\t\t\t  || current_function_uses_const_pool);\n \n   /* Compute the number of registers to pop */\n \n@@ -717,8 +721,7 @@ function_epilogue (file, size)\n \n   for (regno = limit - 1; regno >= 0; regno--)\n     if ((regs_ever_live[regno] && ! call_used_regs[regno])\n-\t|| (current_function_uses_pic_offset_table\n-\t    && regno == PIC_OFFSET_TABLE_REGNUM))\n+\t|| (regno == PIC_OFFSET_TABLE_REGNUM && pic_reg_used))\n       nregs++;\n \n   /* sp is often  unreliable so we must go off the frame pointer,\n@@ -744,8 +747,7 @@ function_epilogue (file, size)\n \n       for (regno = 0; regno < limit; regno++)\n \tif ((regs_ever_live[regno] && ! call_used_regs[regno])\n-\t    || (current_function_uses_pic_offset_table\n-\t\t&& regno == PIC_OFFSET_TABLE_REGNUM))\n+\t    || (regno == PIC_OFFSET_TABLE_REGNUM && pic_reg_used))\n \t  {\n \t    xops[0] = gen_rtx (REG, SImode, regno);\n \t    output_asm_insn (\"pop%L0 %0\", xops);\n@@ -754,8 +756,7 @@ function_epilogue (file, size)\n   else\n     for (regno = 0; regno < limit; regno++)\n       if ((regs_ever_live[regno] && ! call_used_regs[regno])\n-\t  || (current_function_uses_pic_offset_table\n-\t      && regno == PIC_OFFSET_TABLE_REGNUM))\n+\t  || (regno == PIC_OFFSET_TABLE_REGNUM && pic_reg_used))\n \t{\n \t  xops[0] = gen_rtx (REG, SImode, regno);\n \t  xops[1] = adj_offsettable_operand (AT_BP (Pmode), offset);"}, {"sha": "303b1da19bda988596ed7f76ef06ac154e7f1f44", "filename": "gcc/output.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae7526179ceb830c39b8259eccf3182d8055dc0/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae7526179ceb830c39b8259eccf3182d8055dc0/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=aae7526179ceb830c39b8259eccf3182d8055dc0", "patch": "@@ -138,6 +138,9 @@ extern int flag_pic;\n /* This is nonzero if the current function uses pic_offset_table_rtx.  */\n extern int current_function_uses_pic_offset_table;\n \n+/* This is nonzero if the current function uses the constant pool.  */\n+extern int current_function_uses_const_pool;\n+\n /* The line number of the beginning of the current function.\n    sdbout.c needs this so that it can output relative linenumbers.  */\n "}]}