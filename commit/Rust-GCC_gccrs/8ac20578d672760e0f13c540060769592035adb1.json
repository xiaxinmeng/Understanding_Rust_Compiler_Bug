{"sha": "8ac20578d672760e0f13c540060769592035adb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFjMjA1NzhkNjcyNzYwZTBmMTNjNTQwMDYwNzY5NTkyMDM1YWRiMQ==", "commit": {"author": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-10-04T00:01:16Z"}, "committer": {"name": "James Van Artsdalen", "email": "jrv@gnu.org", "date": "1993-10-04T00:01:16Z"}, "message": "(ASM_OUTPUT_DOUBLE,ASM_OUTPUT_FLOAT): Use REAL_VALUE_ macros.\n\n(ASM_OUTPUT_LONG_DOUBLE): New macro.\n\nFrom-SVN: r5575", "tree": {"sha": "eddaaaf5ae97a33c798526c27764641bed65c90c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eddaaaf5ae97a33c798526c27764641bed65c90c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ac20578d672760e0f13c540060769592035adb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac20578d672760e0f13c540060769592035adb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ac20578d672760e0f13c540060769592035adb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac20578d672760e0f13c540060769592035adb1/comments", "author": null, "committer": null, "parents": [{"sha": "4a37b9392544c7d61c43b7b3fd0dc1ffd5fd37be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a37b9392544c7d61c43b7b3fd0dc1ffd5fd37be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a37b9392544c7d61c43b7b3fd0dc1ffd5fd37be"}], "stats": {"total": 95, "additions": 65, "deletions": 30}, "files": [{"sha": "22592803f6705ca91588e53d0aa534f85e0c55a1", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac20578d672760e0f13c540060769592035adb1/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac20578d672760e0f13c540060769592035adb1/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=8ac20578d672760e0f13c540060769592035adb1", "patch": "@@ -756,47 +756,57 @@ while (0)\n    Use \"word\" pseudos to avoid printing NaNs, infinity, etc.  */\n \n /* This is how to output an assembler line defining a `double' constant.  */\n-\n #undef\tASM_OUTPUT_DOUBLE\n-\n-#ifndef\tCROSS_COMPILE\n #define\tASM_OUTPUT_DOUBLE(STREAM, VALUE)\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     long value_long[2];\t\t\t\t\t\t\t\\\n+    char dstr[30];\t\t\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, value_long);\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\t.long\\t0x%08lx\\t\\t# %.20g\\n\\t.long\\t0x%08lx\\n\",\t\\\n-\t   value_long[0], VALUE, value_long[1]);\t\t\t\\\n+    REAL_VALUE_TO_DECIMAL (VALUE, \"%.20g\", dstr);\t\t\t\\\n+    if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n+      fprintf (STREAM, \"\\t.long\\t0x%08x\\t\\t# %s\\n\\t.long\\t0x%08x\\n\",\t\\\n+\t   value_long[0], dstr, value_long[1]);\t\t\t\t\\\n+     else\t\t\t\t\t\t\t\t\\\n+      fprintf (STREAM, \"\\t.long\\t0x%08lx\\t\\t# %s\\n\\t.long\\t0x%08lx\\n\",\t\\\n+\t   value_long[0], dstr, value_long[1]);\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n \n-#else\n-#define\tASM_OUTPUT_DOUBLE(STREAM, VALUE)\t\t\t\t\\\n-  fprintf (STREAM, \"\\t.double\\t%.20g\\n\", VALUE)\n-#endif\n-\n /* This is how to output an assembler line defining a `float' constant.  */\n-\n #undef\tASM_OUTPUT_FLOAT\n-\n-#ifndef\tCROSS_COMPILE\n #define\tASM_OUTPUT_FLOAT(STREAM, VALUE)\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n     long value_long;\t\t\t\t\t\t\t\\\n+    char dstr[30];\t\t\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_SINGLE (VALUE, value_long);\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    fprintf (STREAM, \"\\t.long\\t0x%08lx\\t\\t# %.12g (float)\\n\",\t\t\\\n-\t   value_long, VALUE);\t\t\t\t\t\t\\\n+    REAL_VALUE_TO_DECIMAL (VALUE, \"%.12g\", dstr);\t\t\t\\\n+    if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n+      fprintf (STREAM, \"\\t.long\\t0x%08x\\t\\t# %s (float)\\n\",\t\t\\\n+\t   value_long, dstr);\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\t\\\n+      fprintf (STREAM, \"\\t.long\\t0x%08lx\\t\\t# %s (float)\\n\",\t\t\\\n+\t   value_long, dstr);\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)\n \n-#else\n-#define\tASM_OUTPUT_FLOAT(STREAM, VALUE)\t\t\t\t\t\\\n-  fprintf (STREAM, \"\\t.float\\t%.12g\\n\", VALUE)\n-#endif\n-\n+/* This is how to output an assembler line for a `long double' constant.  */\n+#undef ASM_OUTPUT_LONG_DOUBLE\n+#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\t\\\n+do { long l[3];\t\t\t\t\t\t\t\t\\\n+     char dstr[30];\t\t\t\t\t\t\t\\\n+     REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n+     REAL_VALUE_TO_DECIMAL (VALUE, \"%.20g\", dstr);\t\t\t\\\n+     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n+      fprintf (FILE,\t\t\t\t\t\t\t\\\n+      \"\\t.long\\t0x%08x\\t\\t# %s\\n\\t.long\\t0x%08x\\n\\t.long\\t0x%08x\\n\",\t\\\n+      l[0], dstr, l[1], l[2]); \t\t\t\t\t\t\\\n+     else\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE,\t\t\t\t\t\t\t\\\n+      \"\\t.long\\t0x%08lx\\t\\t# %s\\n\\t.long\\t0x%08lx\\n\\t.long\\t0x%08lx\\n\",\t\\\n+      l[0], dstr, l[1], l[2]); \t\t\t\t\t\t\\\n+   } while (0)\n \n /* Generate calls to memcpy, etc., not bcopy, etc. */\n #define TARGET_MEM_FUNCTIONS"}, {"sha": "2a0a829c39a172b8e98388ac82888c2bd696f3c3", "filename": "gcc/config/i386/sysv4.h", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ac20578d672760e0f13c540060769592035adb1/gcc%2Fconfig%2Fi386%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ac20578d672760e0f13c540060769592035adb1/gcc%2Fconfig%2Fi386%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv4.h?ref=8ac20578d672760e0f13c540060769592035adb1", "patch": "@@ -39,9 +39,6 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define CPP_PREDEFINES \\\n   \"-Di386 -Dunix -D__svr4__ -Asystem(unix) -Asystem(svr4) -Acpu(i386) -Amachine(i386)\"\n \n-/* If the host and target formats match, output the floats as hex.  */\n-#if HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT\n-#if defined (HOST_WORDS_BIG_ENDIAN) == WORDS_BIG_ENDIAN\n /* This is how to output assembly code to define a `float' constant.\n    We always have to use a .long pseudo-op to do this because the native\n    SVR4 ELF assembler is buggy and it generates incorrect values when we\n@@ -51,7 +48,10 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\t\\\n do { long value;\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_SINGLE ((VALUE), value);\t\t\t\\\n-     fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value);\t\t\t\\\n+     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n+         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value);\t\t\\\n+     else\t\t\t\t\t\t\t\t\\\n+         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value);\t\t\\\n    } while (0)\n \n /* This is how to output assembly code to define a `double' constant.\n@@ -63,11 +63,36 @@ do { long value;\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n do { long value[2];\t\t\t\t\t\t\t\\\n      REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), value);\t\t\t\\\n-     fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[0]);\t\t\t\\\n-     fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[1]);\t\t\t\\\n+     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n+       {\t\t\t\t\t\t\t\t\\\n+         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n+         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n+       }\t\t\t\t\t\t\t\t\\\n+     else\t\t\t\t\t\t\t\t\\\n+       {\t\t\t\t\t\t\t\t\\\n+         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n+         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n+       }\t\t\t\t\t\t\t\t\\\n+   } while (0)\n+\n+\n+#undef ASM_OUTPUT_LONG_DOUBLE\n+#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)\t\t\t\t\\\n+do { long value[3];\t\t\t\t\t\t\t\\\n+     REAL_VALUE_TO_TARGET_LONG_DOUBLE ((VALUE), value);\t\t\t\\\n+     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n+       {\t\t\t\t\t\t\t\t\\\n+         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[0]);\t\t\\\n+         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[1]);\t\t\\\n+         fprintf((FILE), \"%s\\t0x%x\\n\", ASM_LONG, value[2]);\t\t\\\n+       }\t\t\t\t\t\t\t\t\\\n+     else\t\t\t\t\t\t\t\t\\\n+       {\t\t\t\t\t\t\t\t\\\n+         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n+         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n+         fprintf((FILE), \"%s\\t0x%lx\\n\", ASM_LONG, value[2]);\t\t\\\n+       }\t\t\t\t\t\t\t\t\\\n    } while (0)\n-#endif /* word order matches */\n-#endif /* HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT */\n \n /* Output at beginning of assembler file.  */\n /* The .file command should always begin the output.  */"}]}