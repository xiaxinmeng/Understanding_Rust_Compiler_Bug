{"sha": "ae3952715ce92cb6baac6d2b883c9a29a70cb1d9", "node_id": "C_kwDOANBUbNoAKGFlMzk1MjcxNWNlOTJjYjZiYWFjNmQyYjg4M2M5YTI5YTcwY2IxZDk", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-09-09T15:48:45Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-07T08:36:30Z"}, "message": "ada: Tune layout after switching to Ada 2022 aggregate syntax\n\nWhitespace cleanup only.\n\ngcc/ada/\n\n\t* libgnarl/s-interr.adb: Tune whitespace.", "tree": {"sha": "e2bcfccfaea9171a19935c886f124d8b89af4af4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2bcfccfaea9171a19935c886f124d8b89af4af4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae3952715ce92cb6baac6d2b883c9a29a70cb1d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae3952715ce92cb6baac6d2b883c9a29a70cb1d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae3952715ce92cb6baac6d2b883c9a29a70cb1d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae3952715ce92cb6baac6d2b883c9a29a70cb1d9/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8b69d43875557a42feef5f595ec9f3a31e09317", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b69d43875557a42feef5f595ec9f3a31e09317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8b69d43875557a42feef5f595ec9f3a31e09317"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "2fbb1406936751e2d5882209d31c33cf61487c0e", "filename": "gcc/ada/libgnarl/s-interr.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae3952715ce92cb6baac6d2b883c9a29a70cb1d9/gcc%2Fada%2Flibgnarl%2Fs-interr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae3952715ce92cb6baac6d2b883c9a29a70cb1d9/gcc%2Fada%2Flibgnarl%2Fs-interr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-interr.adb?ref=ae3952715ce92cb6baac6d2b883c9a29a70cb1d9", "patch": "@@ -109,8 +109,8 @@ package body System.Interrupts is\n          Static      : Boolean);\n \n       entry Detach_Handler\n-        (Interrupt   : Interrupt_ID;\n-         Static      : Boolean);\n+        (Interrupt : Interrupt_ID;\n+         Static    : Boolean);\n \n       entry Bind_Interrupt_To_Entry\n         (T         : Task_Id;\n@@ -174,15 +174,14 @@ package body System.Interrupts is\n    pragma Atomic_Components (Ignored);\n    --  True iff the corresponding interrupt is blocked in the process level\n \n-   Last_Unblocker :\n-     array (Interrupt_ID'Range) of Task_Id := [others => Null_Task];\n+   Last_Unblocker : array (Interrupt_ID'Range) of Task_Id :=\n+                      [others => Null_Task];\n    pragma Atomic_Components (Last_Unblocker);\n    --  Holds the ID of the last Task which Unblocked this Interrupt. It\n    --  contains Null_Task if no tasks have ever requested the Unblocking\n    --  operation or the Interrupt is currently Blocked.\n \n-   Server_ID : array (Interrupt_ID'Range) of Task_Id :=\n-                 [others => Null_Task];\n+   Server_ID : array (Interrupt_ID'Range) of Task_Id := [others => Null_Task];\n    pragma Atomic_Components (Server_ID);\n    --  Holds the Task_Id of the Server_Task for each interrupt. Task_Id is\n    --  needed to accomplish locking per Interrupt base. Also is needed to"}]}