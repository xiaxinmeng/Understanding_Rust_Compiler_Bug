{"sha": "7ca83c36622cf9f0cc00ba993784b2f7db662ae9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NhODNjMzY2MjJjZjlmMGNjMDBiYTk5Mzc4NGIyZjdkYjY2MmFlOQ==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2018-07-17T15:51:12Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2018-07-17T15:51:12Z"}, "message": "fold-vec-unpack-char.c: New.\n\n\n[testsuite]\n\n2018-07-06  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-unpack-char.c: New.\n\t* gcc.target/powerpc/fold-vec-unpack-float.c: New.\n\t* gcc.target/powerpc/fold-vec-unpack-int.c: New.\n\t* gcc.target/powerpc/fold-vec-unpack-pixel.c: New.\n\t* gcc.target/powerpc/fold-vec-unpack-short.c: New.\n\nFrom-SVN: r262827", "tree": {"sha": "4911d84713bcb39a61ecbf538b443a0fb2a98f87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4911d84713bcb39a61ecbf538b443a0fb2a98f87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ca83c36622cf9f0cc00ba993784b2f7db662ae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ca83c36622cf9f0cc00ba993784b2f7db662ae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ca83c36622cf9f0cc00ba993784b2f7db662ae9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ca83c36622cf9f0cc00ba993784b2f7db662ae9/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2eab53d155b103b9e6890a8d6581220ce7dc037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2eab53d155b103b9e6890a8d6581220ce7dc037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2eab53d155b103b9e6890a8d6581220ce7dc037"}], "stats": {"total": 161, "additions": 161, "deletions": 0}, "files": [{"sha": "bcedfc5c8bb3da999010fdc18765af71036a7900", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca83c36622cf9f0cc00ba993784b2f7db662ae9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca83c36622cf9f0cc00ba993784b2f7db662ae9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7ca83c36622cf9f0cc00ba993784b2f7db662ae9", "patch": "@@ -1,3 +1,11 @@\n+2018-07-17  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-unpack-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-unpack-float.c: New.\n+\t* gcc.target/powerpc/fold-vec-unpack-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-unpack-pixel.c: New.\n+\t* gcc.target/powerpc/fold-vec-unpack-short.c: New.\n+\n 2018-07-17  David Edelsohn <dje.gcc@gmail.com>\n \n \t* gcc.target/powerpc/pr57150.c: Require longdouble128."}, {"sha": "7f4b3721b20f5409b6a8c973bad14b4c4ef8dfdd", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-unpack-char.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca83c36622cf9f0cc00ba993784b2f7db662ae9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-unpack-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca83c36622cf9f0cc00ba993784b2f7db662ae9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-unpack-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-unpack-char.c?ref=7ca83c36622cf9f0cc00ba993784b2f7db662ae9", "patch": "@@ -0,0 +1,36 @@\n+/* Verify that overloaded built-ins for vec_unpackh and vec_unpackl with char\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool short\n+testbc_l (vector bool char vbc2)\n+{\n+  return vec_unpackl (vbc2);\n+}\n+\n+vector signed short\n+testsc_l (vector signed char vsc2)\n+{\n+  return vec_unpackl (vsc2);\n+}\n+\n+vector bool short\n+testbc_h (vector bool char vbc2)\n+{\n+  return vec_unpackh (vbc2);\n+}\n+\n+vector signed short\n+testsc_h (vector signed char vsc2)\n+{\n+  return vec_unpackh (vsc2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vupkhsb\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vupklsb\" 2 } } */\n+"}, {"sha": "78e8eb35e73b8435c198201e79a4eefc652bfcaf", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-unpack-float.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca83c36622cf9f0cc00ba993784b2f7db662ae9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-unpack-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca83c36622cf9f0cc00ba993784b2f7db662ae9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-unpack-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-unpack-float.c?ref=7ca83c36622cf9f0cc00ba993784b2f7db662ae9", "patch": "@@ -0,0 +1,23 @@\n+/* Verify that overloaded built-ins for vec_unpackh and vec_unpackl with float\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector double\n+testf_l (vector float vf2)\n+{\n+  return vec_unpackl (vf2);\n+}\n+\n+vector double\n+testf_h (vector float vf2)\n+{\n+  return vec_unpackh (vf2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xxsldwi\" 4 } } */\n+/* { dg-final { scan-assembler-times \"xvcvspdp\" 2 } } */"}, {"sha": "621c4eb250de399f5cdc002c92be3662eda107fd", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-unpack-int.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca83c36622cf9f0cc00ba993784b2f7db662ae9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-unpack-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca83c36622cf9f0cc00ba993784b2f7db662ae9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-unpack-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-unpack-int.c?ref=7ca83c36622cf9f0cc00ba993784b2f7db662ae9", "patch": "@@ -0,0 +1,35 @@\n+/* Verify that overloaded built-ins for vec_unpackh and vec_unpackl with int\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool long long\n+testbi_l (vector bool int vbi2)\n+{\n+  return vec_unpackl (vbi2);\n+}\n+\n+vector signed long long\n+testsi_l (vector signed int vsi2)\n+{\n+  return vec_unpackl (vsi2);\n+}\n+\n+vector bool long long\n+testbi_h (vector bool int vbi2)\n+{\n+  return vec_unpackh (vbi2);\n+}\n+\n+vector signed long long\n+testsi_h (vector signed int vsi2)\n+{\n+  return vec_unpackh (vsi2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vupkhsw\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vupklsw\" 2 } } */"}, {"sha": "8e7d11026e96995815668d1bb34b0156d58e2ecd", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-unpack-pixel.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca83c36622cf9f0cc00ba993784b2f7db662ae9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-unpack-pixel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca83c36622cf9f0cc00ba993784b2f7db662ae9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-unpack-pixel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-unpack-pixel.c?ref=7ca83c36622cf9f0cc00ba993784b2f7db662ae9", "patch": "@@ -0,0 +1,23 @@\n+/* Verify that overloaded built-ins for vec_unpackh and vec_unpackl with pixel\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector unsigned int\n+testf_el (vector pixel vpx2)\n+{\n+  return vec_unpackl (vpx2);\n+}\n+\n+vector unsigned int\n+testf_eh (vector pixel vpx2)\n+{\n+  return vec_unpackh (vpx2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vupkhpx\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vupklpx\" 1 } } */"}, {"sha": "da5101271f420b18142a35bed49cb5269571bea2", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-unpack-short.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ca83c36622cf9f0cc00ba993784b2f7db662ae9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-unpack-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ca83c36622cf9f0cc00ba993784b2f7db662ae9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-unpack-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-unpack-short.c?ref=7ca83c36622cf9f0cc00ba993784b2f7db662ae9", "patch": "@@ -0,0 +1,36 @@\n+/* Verify that overloaded built-ins for vec_unpackh and vec_unpackl with int\n+   inputs produce the right code.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector bool int\n+testbi_el (vector bool short vbs2)\n+{\n+  return vec_unpackl (vbs2);\n+}\n+\n+vector signed int\n+testsi_el (vector signed short vss2)\n+{\n+  return vec_unpackl (vss2);\n+}\n+\n+vector bool int\n+testbi_eh (vector bool short vbs2)\n+{\n+  return vec_unpackh (vbs2);\n+}\n+\n+vector signed int\n+testsi_eh (vector signed short vss2)\n+{\n+  return vec_unpackh (vss2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vupkhsh\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vupklsh\" 2 } } */\n+"}]}