{"sha": "d55f9d230f0c8734abdee29d1cb2325ac409cc7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU1ZjlkMjMwZjBjODczNGFiZGVlMjlkMWNiMjMyNWFjNDA5Y2M3Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2006-02-08T09:58:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2006-02-08T09:58:55Z"}, "message": "lb1sf68.asm (__divsf3, [...]): Return a correctly signed zero.\n\n\t* gcc/config/m68k/lb1sf68.asm (__divsf3, __divdf3, __mulsf3,\n\t__muldf3): Return a correctly signed zero.\n\nFrom-SVN: r110744", "tree": {"sha": "b09fecba95a9b9def552c0696ebdca275d2f0dcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b09fecba95a9b9def552c0696ebdca275d2f0dcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d55f9d230f0c8734abdee29d1cb2325ac409cc7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d55f9d230f0c8734abdee29d1cb2325ac409cc7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d55f9d230f0c8734abdee29d1cb2325ac409cc7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d55f9d230f0c8734abdee29d1cb2325ac409cc7b/comments", "author": null, "committer": null, "parents": [{"sha": "bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbbe4e7bf7238db3f5f37febee19b354dfe6a330", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbbe4e7bf7238db3f5f37febee19b354dfe6a330"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "fa18763855b7bac2308b1dc3ffcd8dfac1627599", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d55f9d230f0c8734abdee29d1cb2325ac409cc7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d55f9d230f0c8734abdee29d1cb2325ac409cc7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d55f9d230f0c8734abdee29d1cb2325ac409cc7b", "patch": "@@ -1,3 +1,8 @@\n+2006-02-08  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* gcc/config/m68k/lb1sf68.asm (__divsf3, __divdf3, __mulsf3,\n+\t__muldf3): Return a correctly signed zero.\n+\n 2006-02-08  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* passes.c (register_one_dump_file): Accept the current properties\n@@ -7,8 +12,9 @@\n \t(register_dump_files_1): ... this one.  Do not modify the pass\n \tstructure.\n \t(next_pass_1): Cosmetic fix.\n-\t(execute_todo): Keep second parameter only.  Use curr_properties instead\n-\tof fetching it from the pass structure.  Check and set last_verified.\n+\t(execute_todo): Keep second parameter only.  Use curr_properties\n+\tinstead of fetching it from the pass structure.  Check and set\n+\tlast_verified.\n \t(execute_one_pass): Handle TODO_set_props.  Use curr_properties\n \tinstead of fetching it from the pass structure.  Fix calls to\n \texecute_todo.  Update curr_properties and initialize .vcg RTL dump"}, {"sha": "716ff059d2532fb81dfa08f272ffcaae269ef8f1", "filename": "gcc/config/m68k/lb1sf68.asm", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d55f9d230f0c8734abdee29d1cb2325ac409cc7b/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d55f9d230f0c8734abdee29d1cb2325ac409cc7b/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm?ref=d55f9d230f0c8734abdee29d1cb2325ac409cc7b", "patch": "@@ -1671,16 +1671,16 @@ Lmuldf$b$0:\n #ifndef __mcoldfire__\n \texg\td2,d0\t\t| put b (==0) into d0-d1\n \texg\td3,d1\t\t| and a (with sign bit cleared) into d2-d3\n+\tmovel\ta0,d0\t\t| set result sign\n #else\n-\tmovel\td2,d7\n-\tmovel\td0,d2\n-\tmovel\td7,d0\n-\tmovel\td3,d7\n+\tmovel\td0,d2\t\t| put a into d2-d3\n \tmovel\td1,d3\n-\tmovel\td7,d1\n+\tmovel\ta0,d0\t\t| put result zero into d0-d1\n+\tmovq\tIMM(0),d1\n #endif\n \tbra\t1f\n Lmuldf$a$0:\n+\tmovel\ta0,d0\t\t| set result sign\n \tmovel\ta6@(16),d2\t| put b into d2-d3 again\n \tmovel\ta6@(20),d3\t|\n \tbclr\tIMM (31),d2\t| clear sign bit\n@@ -1958,7 +1958,7 @@ Ldivdf$inop:\n Ldivdf$a$0:\n | If a is zero check to see whether b is zero also. In that case return\n | NaN; then check if b is NaN, and return NaN also in that case. Else\n-| return zero.\n+| return a properly signed zero.\n \tmoveq\tIMM (DIVIDE),d5\n \tbclr\tIMM (31),d2\t|\n \tmovel\td2,d4\t\t| \n@@ -1969,8 +1969,8 @@ Ldivdf$a$0:\n \tblt\t1f\t\t|\n \ttstl\td3\t\t|\n \tbne\tLd$inop\t\t|\n-1:\tmovel\tIMM (0),d0\t| else return zero\n-\tmovel\td0,d1\t\t| \n+1:\tmovel\ta0,d0\t\t| else return signed zero\n+\tmoveq\tIMM(0),d1\t| \n \tPICLEA\tSYM (_fpCCR),a0\t| clear exception flags\n \tmovew\tIMM (0),a0@\t|\n #ifndef __mcoldfire__\n@@ -3230,15 +3230,15 @@ Lmulsf$inf:\n | or NaN, in which case we return NaN.\n Lmulsf$b$0:\n | Here d1 (==b) is zero.\n-\tmovel\td1,d0\t\t| put b into d0 (just a zero)\n \tmovel\ta6@(8),d1\t| get a again to check for non-finiteness\n \tbra\t1f\n Lmulsf$a$0:\n \tmovel\ta6@(12),d1\t| get b again to check for non-finiteness\n 1:\tbclr\tIMM (31),d1\t| clear sign bit \n \tcmpl\tIMM (INFINITY),d1 | and check for a large exponent\n \tbge\tLf$inop\t\t| if b is +/-INFINITY or NaN return NaN\n-\tPICLEA\tSYM (_fpCCR),a0\t| else return zero\n+\tmovel\td7,d0\t\t| else return signed zero\n+\tPICLEA\tSYM (_fpCCR),a0\t|\n \tmovew\tIMM (0),a0@\t| \n #ifndef __mcoldfire__\n \tmoveml\tsp@+,d2-d7\t| \n@@ -3432,12 +3432,12 @@ Ldivsf$a$0:\n \tmoveq\tIMM (DIVIDE),d5\n | If a is zero check to see whether b is zero also. In that case return\n | NaN; then check if b is NaN, and return NaN also in that case. Else\n-| return zero.\n+| return a properly signed zero.\n \tandl\tIMM (0x7fffffff),d1\t| clear sign bit and test b\n \tbeq\tLf$inop\t\t\t| if b is also zero return NaN\n \tcmpl\tIMM (INFINITY),d1\t| check for NaN\n \tbhi\tLf$inop\t\t\t| \n-\tmovel\tIMM (0),d0\t\t| else return zero\n+\tmovel\td7,d0\t\t\t| else return signed zero\n \tPICLEA\tSYM (_fpCCR),a0\t\t|\n \tmovew\tIMM (0),a0@\t\t|\n #ifndef __mcoldfire__"}]}