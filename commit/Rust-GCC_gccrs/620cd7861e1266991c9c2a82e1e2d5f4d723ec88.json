{"sha": "620cd7861e1266991c9c2a82e1e2d5f4d723ec88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIwY2Q3ODYxZTEyNjY5OTFjOWMyYTgyZTFlMmQ1ZjRkNzIzZWM4OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-27T21:13:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-06-01T15:35:47Z"}, "message": "c++: -Wdeprecated-copy and #pragma diagnostic [PR94492]\n\n-Wdeprecated-copy was depending only on the state of the warning at the\npoint where we call the function, making it hard to use #pragma diagnostic\nto suppress the warning for a particular implicitly declared function.\n\nBut checking whether the warning is enabled at the location of the implicit\ndeclaration turned out to be a bit complicated; option_enabled only tests\nwhether it was enabled at the start of compilation, the actual test only\nexisted in the middle of diagnostic_report_diagnostic.  So this patch\nfactors it out and adds a new warning_enabled function to diagnostic.h.\n\ngcc/ChangeLog:\n\n\tPR c++/94492\n\t* diagnostic.h (warning_enabled_at): Declare.\n\t* diagnostic.c (diagnostic_enabled): Factor out from...\n\t(diagnostic_report_diagnostic): ...here.\n\t(warning_enabled_at): New.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94492\n\t* decl2.c (cp_warn_deprecated_use): Check warning_enabled_at.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94492\n\t* g++.dg/cpp0x/depr-copy4.C: New test.", "tree": {"sha": "107b4735c89087ccbfe98dedeff16a1841bc7ba2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/107b4735c89087ccbfe98dedeff16a1841bc7ba2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/620cd7861e1266991c9c2a82e1e2d5f4d723ec88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/620cd7861e1266991c9c2a82e1e2d5f4d723ec88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/620cd7861e1266991c9c2a82e1e2d5f4d723ec88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/620cd7861e1266991c9c2a82e1e2d5f4d723ec88/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18b88412069f51433e1b4f440d3c035bfc7b5cca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b88412069f51433e1b4f440d3c035bfc7b5cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18b88412069f51433e1b4f440d3c035bfc7b5cca"}], "stats": {"total": 111, "additions": 80, "deletions": 31}, "files": [{"sha": "e46fded908af833b0013c9fa8764c4038489148e", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/620cd7861e1266991c9c2a82e1e2d5f4d723ec88/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/620cd7861e1266991c9c2a82e1e2d5f4d723ec88/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=620cd7861e1266991c9c2a82e1e2d5f4d723ec88", "patch": "@@ -5499,10 +5499,10 @@ cp_warn_deprecated_use (tree decl, tsubst_flags_t complain)\n       && DECL_NONSTATIC_MEMBER_FUNCTION_P (decl)\n       && copy_fn_p (decl))\n     {\n-      if (warn_deprecated_copy\n-\t  /* Don't warn about system library classes (c++/86342).  */\n-\t  && (!DECL_IN_SYSTEM_HEADER (decl)\n-\t      || global_dc->dc_warn_system_headers))\n+      /* Don't warn if the flag was disabled around the class definition\n+\t (c++/94492).  */\n+      if (warning_enabled_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\t      OPT_Wdeprecated_copy))\n \t{\n \t  auto_diagnostic_group d;\n \t  tree ctx = DECL_CONTEXT (decl);"}, {"sha": "d58586f25265d8c3e4f5b78c5b59c5d66c661732", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 58, "deletions": 27, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/620cd7861e1266991c9c2a82e1e2d5f4d723ec88/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/620cd7861e1266991c9c2a82e1e2d5f4d723ec88/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=620cd7861e1266991c9c2a82e1e2d5f4d723ec88", "patch": "@@ -1122,6 +1122,62 @@ print_option_information (diagnostic_context *context,\n     }\n }\n \n+/* Returns whether a DIAGNOSTIC should be printed, and adjusts diagnostic->kind\n+   as appropriate for #pragma GCC diagnostic and -Werror=foo.  */\n+\n+static bool\n+diagnostic_enabled (diagnostic_context *context,\n+\t\t    diagnostic_info *diagnostic)\n+{\n+  /* Diagnostics with no option or -fpermissive are always enabled.  */\n+  if (!diagnostic->option_index\n+      || diagnostic->option_index == permissive_error_option (context))\n+    return true;\n+\n+  /* This tests if the user provided the appropriate -Wfoo or\n+     -Wno-foo option.  */\n+  if (! context->option_enabled (diagnostic->option_index,\n+\t\t\t\t context->lang_mask,\n+\t\t\t\t context->option_state))\n+    return false;\n+\n+  /* This tests for #pragma diagnostic changes.  */\n+  diagnostic_t diag_class\n+    = update_effective_level_from_pragmas (context, diagnostic);\n+\n+  /* This tests if the user provided the appropriate -Werror=foo\n+     option.  */\n+  if (diag_class == DK_UNSPECIFIED\n+      && (context->classify_diagnostic[diagnostic->option_index]\n+\t  != DK_UNSPECIFIED))\n+    diagnostic->kind\n+      = context->classify_diagnostic[diagnostic->option_index];\n+\n+  /* This allows for future extensions, like temporarily disabling\n+     warnings for ranges of source code.  */\n+  if (diagnostic->kind == DK_IGNORED)\n+    return false;\n+\n+  return true;\n+}\n+\n+/* Returns whether warning OPT is enabled at LOC.  */\n+\n+bool\n+warning_enabled_at (location_t loc, int opt)\n+{\n+  if (!diagnostic_report_warnings_p (global_dc, loc))\n+    return false;\n+\n+  rich_location richloc (line_table, loc);\n+  diagnostic_info diagnostic = {};\n+  diagnostic.option_index = opt;\n+  diagnostic.richloc = &richloc;\n+  diagnostic.message.m_richloc = &richloc;\n+  diagnostic.kind = DK_WARNING;\n+  return diagnostic_enabled (global_dc, &diagnostic);\n+}\n+\n /* Report a diagnostic message (an error or a warning) as specified by\n    DC.  This function is *the* subroutine in terms of which front-ends\n    should implement their specific diagnostic handling modules.  The\n@@ -1172,33 +1228,8 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n       && diagnostic->kind == DK_WARNING)\n     diagnostic->kind = DK_ERROR;\n \n-  if (diagnostic->option_index\n-      && diagnostic->option_index != permissive_error_option (context))\n-    {\n-      /* This tests if the user provided the appropriate -Wfoo or\n-\t -Wno-foo option.  */\n-      if (! context->option_enabled (diagnostic->option_index,\n-\t\t\t\t     context->lang_mask,\n-\t\t\t\t     context->option_state))\n-\treturn false;\n-\n-      /* This tests for #pragma diagnostic changes.  */\n-      diagnostic_t diag_class\n-\t= update_effective_level_from_pragmas (context, diagnostic);\n-\n-      /* This tests if the user provided the appropriate -Werror=foo\n-\t option.  */\n-      if (diag_class == DK_UNSPECIFIED\n-\t  && (context->classify_diagnostic[diagnostic->option_index]\n-\t      != DK_UNSPECIFIED))\n-\tdiagnostic->kind\n-\t  = context->classify_diagnostic[diagnostic->option_index];\n-\n-      /* This allows for future extensions, like temporarily disabling\n-\t warnings for ranges of source code.  */\n-      if (diagnostic->kind == DK_IGNORED)\n-\treturn false;\n-    }\n+  if (!diagnostic_enabled (context, diagnostic))\n+    return false;\n \n   if (diagnostic->kind != DK_NOTE && diagnostic->kind != DK_ICE)\n     diagnostic_check_max_errors (context);"}, {"sha": "1b9d6b1f64d685f8006226dcb66a683256dc734e", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/620cd7861e1266991c9c2a82e1e2d5f4d723ec88/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/620cd7861e1266991c9c2a82e1e2d5f4d723ec88/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=620cd7861e1266991c9c2a82e1e2d5f4d723ec88", "patch": "@@ -515,4 +515,6 @@ extern int num_digits (int);\n extern json::value *json_from_expanded_location (diagnostic_context *context,\n \t\t\t\t\t\t location_t loc);\n \n+extern bool warning_enabled_at (location_t, int);\n+\n #endif /* ! GCC_DIAGNOSTIC_H */"}, {"sha": "42852a7055847ee27ab2c1a2b8e4c321734088aa", "filename": "gcc/testsuite/g++.dg/cpp0x/depr-copy4.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/620cd7861e1266991c9c2a82e1e2d5f4d723ec88/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdepr-copy4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/620cd7861e1266991c9c2a82e1e2d5f4d723ec88/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdepr-copy4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdepr-copy4.C?ref=620cd7861e1266991c9c2a82e1e2d5f4d723ec88", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/94492\n+// { dg-additional-options -Wdeprecated-copy }\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wdeprecated-copy\"\n+struct expr\n+{\n+    int a, b;\n+    expr& operator=(const expr&) { return *this; }\n+};\n+#pragma GCC diagnostic pop\n+\n+expr foo(expr e)\n+{\n+    return e;\n+}"}]}