{"sha": "ae422ccd65c72f713ffb33319a8bc5436d8bc858", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU0MjJjY2Q2NWM3MmY3MTNmZmIzMzMxOWE4YmM1NDM2ZDhiYzg1OA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-10-15T18:24:27Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-10-15T18:24:27Z"}, "message": "In libobjc/: 2010-10-15 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-10-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n        * Protocol.m: Include objc/runtime.h and\n        objc-private/module-abi-8.h instead of objc/objc-api.h.  Do not\n        repeat Protocol's instance variables.\n        (struct objc_method_description_list): Do not define here.\n        ([-conformsTo:]): Reimplemented on top of protocol_conformsTo().\n        ([descriptionForInstanceMethod:]): Use sel_isEqual() to compare\n        selectors directly instead of getting names and then using strcmp.\n        ([descriptionForClassMethod:]): Same change.\n        ([-isEqual:]): Reimplemented on top of protocol_isEqual().\n        * protocols.c (protocol_getMethodDescription): Use sel_isEqual()\n        to compare selectors directly instead of getting names and then\n        using strcmp.\n        * objc/Protocol.h: Updated comments.\n\nFrom-SVN: r165517", "tree": {"sha": "6404e56954993f5feee47c733780ccc60be5b419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6404e56954993f5feee47c733780ccc60be5b419"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae422ccd65c72f713ffb33319a8bc5436d8bc858", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae422ccd65c72f713ffb33319a8bc5436d8bc858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae422ccd65c72f713ffb33319a8bc5436d8bc858", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae422ccd65c72f713ffb33319a8bc5436d8bc858/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e2e1d4d8c891c1e4b17681436afe98722862d241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2e1d4d8c891c1e4b17681436afe98722862d241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2e1d4d8c891c1e4b17681436afe98722862d241"}], "stats": {"total": 117, "additions": 38, "deletions": 79}, "files": [{"sha": "9ae38383ffe7c3bf3b1857f253b1e1aa3a43ea54", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae422ccd65c72f713ffb33319a8bc5436d8bc858/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae422ccd65c72f713ffb33319a8bc5436d8bc858/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=ae422ccd65c72f713ffb33319a8bc5436d8bc858", "patch": "@@ -1,3 +1,19 @@\n+2010-10-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* Protocol.m: Include objc/runtime.h and\n+\tobjc-private/module-abi-8.h instead of objc/objc-api.h.  Do not\n+\trepeat Protocol's instance variables.\n+\t(struct objc_method_description_list): Do not define here.\n+\t([-conformsTo:]): Reimplemented on top of protocol_conformsTo().\n+\t([descriptionForInstanceMethod:]): Use sel_isEqual() to compare\n+\tselectors directly instead of getting names and then using strcmp.\n+\t([descriptionForClassMethod:]): Same change.\n+\t([-isEqual:]): Reimplemented on top of protocol_isEqual().\n+\t* protocols.c (protocol_getMethodDescription): Use sel_isEqual()\n+\tto compare selectors directly instead of getting names and then\n+\tusing strcmp.\n+\t* objc/Protocol.h: Updated comments.\n+\t\n 2010-10-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* init.c (__objc_init_protocol): New function which fixes up a"}, {"sha": "27c5c7643294b86d6f4862bb32a3ed79a6c54520", "filename": "libobjc/Protocol.m", "status": "modified", "additions": 9, "deletions": 70, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae422ccd65c72f713ffb33319a8bc5436d8bc858/libobjc%2FProtocol.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae422ccd65c72f713ffb33319a8bc5436d8bc858/libobjc%2FProtocol.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FProtocol.m?ref=ae422ccd65c72f713ffb33319a8bc5436d8bc858", "patch": "@@ -1,5 +1,5 @@\n /* This file contains the implementation of class Protocol.\n-   Copyright (C) 1993, 2004, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 2004, 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC. \n \n@@ -23,69 +23,33 @@\n <http://www.gnu.org/licenses/>.  */ \n \n #include \"objc-private/common.h\"\n+#include \"objc/runtime.h\"\n+#include \"objc-private/module-abi-8.h\"\n #include \"objc/Protocol.h\"\n-#include \"objc/objc-api.h\"\n-\n-/* Method description list */\n-struct objc_method_description_list {\n-        int count;\n-        struct objc_method_description list[1];\n-};\n \n \n @implementation Protocol\n-{\n-@private\n-        char *protocol_name;\n-        struct objc_protocol_list *protocol_list;\n-        struct objc_method_description_list *instance_methods, *class_methods; \n-}\n-\n-/* Obtaining attributes intrinsic to the protocol */\n \n - (const char *)name\n {\n   return protocol_name;\n }\n \n-/* Testing protocol conformance */\n-\n - (BOOL) conformsTo: (Protocol *)aProtocolObject\n {\n-  size_t i;\n-  struct objc_protocol_list* proto_list;\n-\n-  if (aProtocolObject == nil)\n-    return NO;\n-\n-  if (!strcmp(aProtocolObject->protocol_name, self->protocol_name))\n-    return YES;\n-\n-  for (proto_list = protocol_list; proto_list; proto_list = proto_list->next)\n-    {\n-      for (i=0; i < proto_list->count; i++)\n-\t{\n-\t  if ([proto_list->list[i] conformsTo: aProtocolObject])\n-\t    return YES;\n-\t}\n-    }\n-\n-  return NO;\n+  return protocol_conformsToProtocol (self, aProtocolObject);\n }\n \n-/* Looking up information specific to a protocol */\n-\n - (struct objc_method_description *) descriptionForInstanceMethod:(SEL)aSel\n {\n   int i;\n   struct objc_protocol_list* proto_list;\n-  const char* name = sel_get_name (aSel);\n   struct objc_method_description *result;\n \n   if (instance_methods)\n     for (i = 0; i < instance_methods->count; i++)\n       {\n-\tif (!strcmp (sel_get_name (instance_methods->list[i].name), name))\n+\tif (sel_isEqual (instance_methods->list[i].name, aSel))\n \t  return &(instance_methods->list[i]);\n       }\n \n@@ -95,7 +59,7 @@ - (struct objc_method_description *) descriptionForInstanceMethod:(SEL)aSel\n       for (j=0; j < proto_list->count; j++)\n \t{\n \t  if ((result = [proto_list->list[j]\n-\t\t\t descriptionForInstanceMethod: aSel]))\n+\t\t\t\t   descriptionForInstanceMethod: aSel]))\n \t    return result;\n \t}\n     }\n@@ -107,13 +71,12 @@ - (struct objc_method_description *) descriptionForClassMethod:(SEL)aSel;\n {\n   int i;\n   struct objc_protocol_list* proto_list;\n-  const char* name = sel_get_name (aSel);\n   struct objc_method_description *result;\n \n   if (class_methods)\n     for (i = 0; i < class_methods->count; i++)\n       {\n-\tif (!strcmp (sel_get_name (class_methods->list[i].name), name))\n+\tif (sel_isEqual (class_methods->list[i].name, aSel))\n \t  return &(class_methods->list[i]);\n       }\n \n@@ -123,7 +86,7 @@ - (struct objc_method_description *) descriptionForClassMethod:(SEL)aSel;\n       for (j=0; j < proto_list->count; j++)\n \t{\n \t  if ((result = [proto_list->list[j]\n-\t\t\t descriptionForClassMethod: aSel]))\n+\t\t\t\t   descriptionForClassMethod: aSel]))\n \t    return result;\n \t}\n     }\n@@ -149,33 +112,9 @@ - (unsigned) hash\n   return hash;\n }\n \n-/*\n- * Equality between formal protocols is only formal (nothing to do\n- * with actually checking the list of methods they have!).  Two formal\n- * Protocols are equal if and only if they have the same name.\n- *\n- * Please note (for comparisons with other implementations) that\n- * checking the names is equivalent to checking that Protocol A\n- * conforms to Protocol B and Protocol B conforms to Protocol A,\n- * because this happens iff they have the same name.  If they have\n- * different names, A conforms to B if and only if A includes B, but\n- * the situation where A includes B and B includes A is a circular\n- * dependency between Protocols which is forbidden by the compiler, so\n- * A conforms to B and B conforms to A with A and B having different\n- * names is an impossible case.\n- */\n - (BOOL) isEqual: (id)obj\n {\n-  if (obj == self)\n-    return YES;\n-\n-  if ([obj isKindOf: [Protocol class]])\n-    {\n-      if (strcmp (protocol_name, ((Protocol *)obj)->protocol_name) == 0)\n-\treturn YES;\n-    }\n-\n-  return NO;\n+  return protocol_isEqual (self, obj);\n }\n @end\n "}, {"sha": "ad4bbd33d95e8baa73108dfdaa545c95ef870b33", "filename": "libobjc/objc/Protocol.h", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae422ccd65c72f713ffb33319a8bc5436d8bc858/libobjc%2Fobjc%2FProtocol.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae422ccd65c72f713ffb33319a8bc5436d8bc858/libobjc%2Fobjc%2FProtocol.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2FProtocol.h?ref=ae422ccd65c72f713ffb33319a8bc5436d8bc858", "patch": "@@ -35,21 +35,24 @@ extern \"C\" {\n @interface Protocol : Object\n {\n @private\n-        char *protocol_name;\n-        struct objc_protocol_list *protocol_list;\n-        struct objc_method_description_list *instance_methods, *class_methods; \n+  char *protocol_name;\n+  struct objc_protocol_list *protocol_list;\n+  struct objc_method_description_list *instance_methods, *class_methods; \n }\n \n-/* Obtaining attributes intrinsic to the protocol */\n+/* The following methods have been replaced by\n+     protocol_getName()\n+     protocol_conformsToProtocol()\n+     protocol_getMethodDescription()\n+*/\n \n+/* Obtaining attributes intrinsic to the protocol */\n - (const char *)name;\n \n /* Testing protocol conformance */\n-\n - (BOOL) conformsTo: (Protocol *)aProtocolObject;\n \n /* Looking up information specific to a protocol */\n-\n - (struct objc_method_description *) descriptionForInstanceMethod:(SEL)aSel;\n - (struct objc_method_description *) descriptionForClassMethod:(SEL)aSel;\n "}, {"sha": "421e566e9121ef49855726a98096c9ca254d78b5", "filename": "libobjc/protocols.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae422ccd65c72f713ffb33319a8bc5436d8bc858/libobjc%2Fprotocols.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae422ccd65c72f713ffb33319a8bc5436d8bc858/libobjc%2Fprotocols.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fprotocols.c?ref=ae422ccd65c72f713ffb33319a8bc5436d8bc858", "patch": "@@ -358,7 +358,6 @@ struct objc_method_description protocol_getMethodDescription (Protocol *protocol\n \t\t\t\t\t\t\t      BOOL instanceMethod)\n {\n   struct objc_method_description no_result = { NULL, NULL };\n-  const char* selector_name;\n   struct objc_method_description_list *methods;\n   int i;\n \n@@ -372,8 +371,6 @@ struct objc_method_description protocol_getMethodDescription (Protocol *protocol\n   if (protocol->class_pointer != objc_lookupClass (\"Protocol\"))\n     return no_result;\n \n-  selector_name = sel_getName (selector);\n-\n   if (instanceMethod)\n     methods = ((struct objc_protocol *)protocol)->instance_methods;\n   else\n@@ -383,8 +380,12 @@ struct objc_method_description protocol_getMethodDescription (Protocol *protocol\n     {\n       for (i = 0; i < methods->count; i++)\n \t{\n+\t  if (sel_isEqual (methods->list[i].name, selector))\n+\t    return methods->list[i];\n+\t  /*\n \t  if (strcmp (sel_getName (methods->list[i].name), selector_name) == 0)\n \t    return methods->list[i];\n+\t  */\n \t}\n     }\n "}]}