{"sha": "c009da4ff82c5dcc50b0384e52720c405e425aad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAwOWRhNGZmODJjNWRjYzUwYjAzODRlNTI3MjBjNDA1ZTQyNWFhZA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-17T21:05:40Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-04-17T21:05:40Z"}, "message": "(CPP_SPECS): Define and use _ABI64 instead of _MIPS_SIM_ABI64.\n\n(CPP_SPECS): Define and use _ABI64 instead of\n_MIPS_SIM_ABI64.\n(SETUP_INCOMING_VARARGS): Set MEM_IN_STRUCT_P if big endian target.\n\nFrom-SVN: r9398", "tree": {"sha": "884eafb74cf92e03985362e639a10f0827ccaa96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/884eafb74cf92e03985362e639a10f0827ccaa96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c009da4ff82c5dcc50b0384e52720c405e425aad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c009da4ff82c5dcc50b0384e52720c405e425aad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c009da4ff82c5dcc50b0384e52720c405e425aad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c009da4ff82c5dcc50b0384e52720c405e425aad/comments", "author": null, "committer": null, "parents": [{"sha": "e340018d59ced3ea94209a8c28ba6330865eb18d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e340018d59ced3ea94209a8c28ba6330865eb18d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e340018d59ced3ea94209a8c28ba6330865eb18d"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "6ecb79ecee043a9f73e7ac7ae5fdee3cd4f5d17e", "filename": "gcc/config/mips/abi64.h", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c009da4ff82c5dcc50b0384e52720c405e425aad/gcc%2Fconfig%2Fmips%2Fabi64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c009da4ff82c5dcc50b0384e52720c405e425aad/gcc%2Fconfig%2Fmips%2Fabi64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fabi64.h?ref=c009da4ff82c5dcc50b0384e52720c405e425aad", "patch": "@@ -52,9 +52,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n %{!mips1: %{!mips2: %{!mips3: %{!mips4: -D_MIPS_ISA=_MIPS_ISA_MIPS4}}}} \\\n %{mips1: -D_MIPS_SIM=_MIPS_SIM_ABI32}\t\\\n %{mips2: -D_MIPS_SIM=_MIPS_SIM_ABI32}\t\\\n-%{mips3: -D_MIPS_SIM=_MIPS_SIM_ABI64}\t\\\n-%{mips4: -D_MIPS_SIM=_MIPS_SIM_ABI64}\t\\\n-%{!mips1: %{!mips2: %{!mips3: %{!mips4: -D_MIPS_SIM=_MIPS_SIM_ABI64}}}}\t\\\n+%{mips3: -D_ABI64=3 -D_MIPS_SIM=_ABI64}\t\\\n+%{mips4: -D_ABI64=3 -D_MIPS_SIM=_ABI64}\t\\\n+%{!mips1: %{!mips2: %{!mips3: %{!mips4: -D_ABI64=3 -D_MIPS_SIM=_ABI64}}}}\t\\\n %{!mint64: -D_MIPS_SZINT=32}%{mint64: -D_MIPS_SZINT=64} \\\n %{mips1: -D_MIPS_SZLONG=32}%{mips2: -D_MIPS_SZLONG=32}  \\\n %{!mips1:%{!mips2: -D_MIPS_SZLONG=64}}\t\t\t\\\n@@ -137,14 +137,23 @@ extern struct rtx_def *mips_function_value ();\n \t   - ! current_function_varargs) * UNITS_PER_WORD;\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       if (! (NO_RTL))\t\t\t\t\t\t\t\\\n-\tmove_block_from_reg\t\t\t\t\t\t\\\n-\t  ((CUM).arg_words + GP_ARG_FIRST + ! current_function_varargs,\t\\\n-\t   gen_rtx (MEM, BLKmode,\t\t\t\t\t\\\n-\t\t    plus_constant (virtual_incoming_args_rtx,\t\t\\\n-\t\t\t\t   - PRETEND_SIZE)),\t\t\t\\\n-\t   (MAX_ARGS_IN_REGISTERS - (CUM).arg_words\t\t\t\\\n-\t    - ! current_function_varargs),\t\t\t\t\\\n-\t   PRETEND_SIZE);\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  rtx mem = gen_rtx (MEM, BLKmode,\t\t\t\t\\\n+\t\t\t     plus_constant (virtual_incoming_args_rtx,\t\\\n+\t\t\t\t\t    - PRETEND_SIZE));\t\t\\\n+\t  /* va_arg is an array access in this case, which causes it to \\\n+\t     get MEM_IN_STRUCT_P set.  We must set it here so that the\t\\\n+\t     insn scheduler won't assume that these stores can't \t\\\n+\t     possibly overlap with the va_arg loads.  */\t\t\\\n+\t  if (BYTES_BIG_ENDIAN)\t\t\t\t\t\t\\\n+\t    MEM_IN_STRUCT_P (mem) = 1;\t\t\t\t\t\\\n+\t  move_block_from_reg\t\t\t\t\t\t\\\n+\t    ((CUM).arg_words + GP_ARG_FIRST + ! current_function_varargs, \\\n+\t     mem,\t\t\t\t\t\t\t\\\n+\t     (MAX_ARGS_IN_REGISTERS - (CUM).arg_words\t\t\t\\\n+\t      - ! current_function_varargs),\t\t\t\t\\\n+\t     PRETEND_SIZE);\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n "}]}