{"sha": "f61f9b28793d94060ce858e5f8a080db91785779", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYxZjliMjg3OTNkOTQwNjBjZTg1OGU1ZjhhMDgwZGI5MTc4NTc3OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-25T14:10:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-27T09:07:37Z"}, "message": "Add debug (slp_tree) and dump infrastructure for this\n\nThis adds an alternate debug_dump_context similar to the one for\nselftests but for interactive debugging routines.  This allows\nto share code between user-visible dumping via the dump_* API\nand those debugging routines.  The primary driver was SLP node\ndumping which wasn't accessible from inside a gdb session up to\nnow.\n\n2020-05-27  Richard Biener  <rguenther@suse.de>\n\n\t* dump-context.h (debug_dump_context): New class.\n\t(dump_context): Make it friend.\n\t* dumpfile.c (debug_dump_context::debug_dump_context):\n\tImplement.\n\t(debug_dump_context::~debug_dump_context): Likewise.\n\t* tree-vect-slp.c: Include dump-context.h.\n\t(vect_print_slp_tree): Dump a single SLP node.\n\t(debug): New overload for slp_tree.\n\t(vect_print_slp_graph): Rename from vect_print_slp_tree and\n\tuse that.\n\t(vect_analyze_slp_instance): Adjust.", "tree": {"sha": "209e3957dcd0f54f72ea7ba599123b063db4430a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/209e3957dcd0f54f72ea7ba599123b063db4430a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f61f9b28793d94060ce858e5f8a080db91785779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61f9b28793d94060ce858e5f8a080db91785779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f61f9b28793d94060ce858e5f8a080db91785779", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61f9b28793d94060ce858e5f8a080db91785779/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baff22c48bdee9cb644b7336bf6f20f799531507", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baff22c48bdee9cb644b7336bf6f20f799531507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baff22c48bdee9cb644b7336bf6f20f799531507"}], "stats": {"total": 96, "additions": 84, "deletions": 12}, "files": [{"sha": "3f72cc932a9fb459de83fe51b33758b0f5efad0a", "filename": "gcc/dump-context.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61f9b28793d94060ce858e5f8a080db91785779/gcc%2Fdump-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61f9b28793d94060ce858e5f8a080db91785779/gcc%2Fdump-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdump-context.h?ref=f61f9b28793d94060ce858e5f8a080db91785779", "patch": "@@ -29,6 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n \n class optrecord_json_writer;\n namespace selftest { class temp_dump_context; }\n+class debug_dump_context;\n \n /* A class for handling the various dump_* calls.\n \n@@ -42,6 +43,7 @@ namespace selftest { class temp_dump_context; }\n class dump_context\n {\n   friend class selftest::temp_dump_context;\n+  friend class debug_dump_context;\n \n  public:\n   static dump_context &get () { return *s_current; }\n@@ -195,6 +197,25 @@ class dump_pretty_printer : public pretty_printer\n   auto_vec<stashed_item> m_stashed_items;\n };\n \n+/* An RAII-style class for use in debug dumpers for temporarily using a\n+   different dump_context.  It enables full details and outputs to\n+   stderr instead of the currently active dump_file.  */\n+\n+class debug_dump_context\n+{\n+ public:\n+  debug_dump_context ();\n+  ~debug_dump_context ();\n+\n+ private:\n+  dump_context m_context;\n+  dump_context *m_saved;\n+  dump_flags_t m_saved_flags;\n+  dump_flags_t m_saved_pflags;\n+  FILE *m_saved_file;\n+};\n+\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "5d61946fc49a902cde3aff9ad035f99849ed96c7", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61f9b28793d94060ce858e5f8a080db91785779/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61f9b28793d94060ce858e5f8a080db91785779/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=f61f9b28793d94060ce858e5f8a080db91785779", "patch": "@@ -2078,6 +2078,34 @@ enable_rtl_dump_file (void)\n   return num_enabled > 0;\n }\n \n+/* debug_dump_context's ctor.  Temporarily override the dump_context\n+   (to forcibly enable output to stderr).  */\n+\n+debug_dump_context::debug_dump_context ()\n+: m_context (),\n+  m_saved (&dump_context::get ()),\n+  m_saved_flags (dump_flags),\n+  m_saved_pflags (pflags),\n+  m_saved_file (dump_file)\n+{\n+  set_dump_file (stderr);\n+  dump_context::s_current = &m_context;\n+  pflags = dump_flags = MSG_ALL_KINDS | MSG_ALL_PRIORITIES;\n+  dump_context::get ().refresh_dumps_are_enabled ();\n+}\n+\n+/* debug_dump_context's dtor.  Restore the saved dump_context.  */\n+\n+debug_dump_context::~debug_dump_context ()\n+{\n+  set_dump_file (m_saved_file);\n+  dump_context::s_current = m_saved;\n+  dump_flags = m_saved_flags;\n+  pflags = m_saved_pflags;\n+  dump_context::get ().refresh_dumps_are_enabled ();\n+}\n+\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "c0c9afd0bd2884ba9bc7c6de967fb937364de6ce", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61f9b28793d94060ce858e5f8a080db91785779/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61f9b28793d94060ce858e5f8a080db91785779/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=f61f9b28793d94060ce858e5f8a080db91785779", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"vec-perm-indices.h\"\n #include \"gimple-fold.h\"\n #include \"internal-fn.h\"\n+#include \"dump-context.h\"\n \n \n /* Initialize a SLP node.  */\n@@ -1579,20 +1580,17 @@ vect_build_slp_tree_2 (vec_info *vinfo,\n   return node;\n }\n \n-/* Dump a slp tree NODE using flags specified in DUMP_KIND.  */\n+/* Dump a single SLP tree NODE.  */\n \n static void\n vect_print_slp_tree (dump_flags_t dump_kind, dump_location_t loc,\n-\t\t     slp_tree node, hash_set<slp_tree> &visited)\n+\t\t     slp_tree node)\n {\n   unsigned i, j;\n-  stmt_vec_info stmt_info;\n   slp_tree child;\n+  stmt_vec_info stmt_info;\n   tree op;\n \n-  if (visited.add (node))\n-    return;\n-\n   dump_metadata_t metadata (dump_kind, loc.get_impl_location ());\n   dump_user_location_t user_loc = loc.get_user_location ();\n   dump_printf_loc (metadata, user_loc, \"node%s %p (max_nunits=%u, refcnt=%u)\\n\",\n@@ -1626,16 +1624,41 @@ vect_print_slp_tree (dump_flags_t dump_kind, dump_location_t loc,\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n     dump_printf (dump_kind, \" %p\", (void *)child);\n   dump_printf (dump_kind, \"\\n\");\n+}\n+\n+DEBUG_FUNCTION void\n+debug (slp_tree node)\n+{\n+  debug_dump_context ctx;\n+  vect_print_slp_tree (MSG_NOTE,\n+\t\t       dump_location_t::from_location_t (UNKNOWN_LOCATION),\n+\t\t       node);\n+}\n+\n+/* Dump a slp tree NODE using flags specified in DUMP_KIND.  */\n+\n+static void\n+vect_print_slp_graph (dump_flags_t dump_kind, dump_location_t loc,\n+\t\t      slp_tree node, hash_set<slp_tree> &visited)\n+{\n+  unsigned i;\n+  slp_tree child;\n+\n+  if (visited.add (node))\n+    return;\n+\n+  vect_print_slp_tree (dump_kind, loc, node);\n+\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n-    vect_print_slp_tree (dump_kind, loc, child, visited);\n+    vect_print_slp_graph (dump_kind, loc, child, visited);\n }\n \n static void\n-vect_print_slp_tree (dump_flags_t dump_kind, dump_location_t loc,\n-\t\t     slp_tree node)\n+vect_print_slp_graph (dump_flags_t dump_kind, dump_location_t loc,\n+\t\t      slp_tree entry)\n {\n   hash_set<slp_tree> visited;\n-  vect_print_slp_tree (dump_kind, loc, node, visited);\n+  vect_print_slp_graph (dump_kind, loc, entry, visited);\n }\n \n /* Mark the tree rooted at NODE with PURE_SLP.  */\n@@ -2240,8 +2263,8 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t    {\n \t      dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t       \"Final SLP tree for instance:\\n\");\n-\t      vect_print_slp_tree (MSG_NOTE, vect_location,\n-\t\t\t\t   SLP_INSTANCE_TREE (new_instance));\n+\t      vect_print_slp_graph (MSG_NOTE, vect_location,\n+\t\t\t\t    SLP_INSTANCE_TREE (new_instance));\n \t    }\n \n \t  return true;"}]}