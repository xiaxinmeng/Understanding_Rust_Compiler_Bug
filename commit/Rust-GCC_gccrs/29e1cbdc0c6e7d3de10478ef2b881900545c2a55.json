{"sha": "29e1cbdc0c6e7d3de10478ef2b881900545c2a55", "node_id": "C_kwDOANBUbNoAKDI5ZTFjYmRjMGM2ZTdkM2RlMTA0NzhlZjJiODgxOTAwNTQ1YzJhNTU", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@embecosm.com", "date": "2021-11-24T13:15:06Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@embecosm.com", "date": "2021-11-24T13:15:06Z"}, "message": "PR middle-end/103059: reload: Also accept ASHIFT with indexed addressing\n\nCorrect a `vax-netbsdelf' target regression ultimately caused by commit\nc605a8bf9270 (\"VAX: Accept ASHIFT in address expressions\") (needed for\nLRA) and as of commit 4a960d548b7d (\"Avoid invalid loop transformations\nin jump threading registry.\") causing a build error in libgcc:\n\n.../libgcc/libgcov-driver.c: In function 'gcov_do_dump':\n.../libgcc/libgcov-driver.c:686:1: error: insn does not satisfy its constraints:\n  686 | }\n      | ^\n(insn 2051 2050 2052 185 (set (reg/f:SI 0 %r0 [555])\n        (plus:SI (ashift:SI (mem/c:SI (plus:SI (reg/f:SI 13 %fp)\n                        (const_int -28 [0xffffffffffffffe4])) [40 %sfp+-28 S4 A32])\n                (const_int 3 [0x3]))\n            (plus:SI (reg/v/f:SI 9 %r9 [orig:176 fn_buffer ] [176])\n                (const_int 24 [0x18])))) \".../libgcc/libgcov-driver.c\":172:40 614 {movaddrdi}\n     (nil))\nduring RTL pass: postreload\n.../libgcc/libgcov-driver.c:686:1: internal compiler error: in extract_constrain_insn, at recog.c:2670\n0x1122a5ff _fatal_insn(char const*, rtx_def const*, char const*, int, char const*)\n\t.../gcc/rtl-error.c:108\n0x1122a697 _fatal_insn_not_found(rtx_def const*, char const*, int, char const*)\n\t.../gcc/rtl-error.c:118\n0x111b5f2f extract_constrain_insn(rtx_insn*)\n\t.../gcc/recog.c:2670\n0x11143eef reload_cse_simplify_operands\n\t.../gcc/postreload.c:407\n0x11142fdb reload_cse_simplify\n\t.../gcc/postreload.c:132\n0x11143533 reload_cse_regs_1\n\t.../gcc/postreload.c:238\n0x11142ce7 reload_cse_regs\n\t.../gcc/postreload.c:66\n0x1114af33 execute\n\t.../gcc/postreload.c:2355\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nPlease include the complete backtrace with any bug report.\nSee <https://gcc.gnu.org/bugs/> for instructions.\n\nThis is because reload does not recognize the ASHIFT form of scaled\nindexed addressing that the offending commit enabled the backend to\nproduce, and as seen in the RTL above lets the pseudo holding the\nindex part become the original memory reference rather than reloading it\ninto a hard register.\n\nFix it then by adding said form to reload, removing the build failure\nand numerous similar regressions throughout `vax-netbsdelf' test suites\nrun with the source as at right before the build regression.\n\nCf. <https://gcc.gnu.org/pipermail/gcc-patches/2021-March/567256.html>,\nand commit 6b3034eaba83 (\"lra: Canonicalize mult to shift in address\nreloads\").\n\n\tgcc/\n\tPR middle-end/103059\n\t* reload.c (find_reloads_address_1): Also accept the ASHIFT form\n\tof indexed addressing.\n\t(find_reloads): Adjust accordingly.", "tree": {"sha": "373a9ab4d7538ab50f3524ed6844263f7b145de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/373a9ab4d7538ab50f3524ed6844263f7b145de6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29e1cbdc0c6e7d3de10478ef2b881900545c2a55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e1cbdc0c6e7d3de10478ef2b881900545c2a55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29e1cbdc0c6e7d3de10478ef2b881900545c2a55", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e1cbdc0c6e7d3de10478ef2b881900545c2a55/comments", "author": {"login": "maciej-w-rozycki", "id": 117297942, "node_id": "U_kgDOBv3TFg", "avatar_url": "https://avatars.githubusercontent.com/u/117297942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maciej-w-rozycki", "html_url": "https://github.com/maciej-w-rozycki", "followers_url": "https://api.github.com/users/maciej-w-rozycki/followers", "following_url": "https://api.github.com/users/maciej-w-rozycki/following{/other_user}", "gists_url": "https://api.github.com/users/maciej-w-rozycki/gists{/gist_id}", "starred_url": "https://api.github.com/users/maciej-w-rozycki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maciej-w-rozycki/subscriptions", "organizations_url": "https://api.github.com/users/maciej-w-rozycki/orgs", "repos_url": "https://api.github.com/users/maciej-w-rozycki/repos", "events_url": "https://api.github.com/users/maciej-w-rozycki/events{/privacy}", "received_events_url": "https://api.github.com/users/maciej-w-rozycki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "maciej-w-rozycki", "id": 117297942, "node_id": "U_kgDOBv3TFg", "avatar_url": "https://avatars.githubusercontent.com/u/117297942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/maciej-w-rozycki", "html_url": "https://github.com/maciej-w-rozycki", "followers_url": "https://api.github.com/users/maciej-w-rozycki/followers", "following_url": "https://api.github.com/users/maciej-w-rozycki/following{/other_user}", "gists_url": "https://api.github.com/users/maciej-w-rozycki/gists{/gist_id}", "starred_url": "https://api.github.com/users/maciej-w-rozycki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/maciej-w-rozycki/subscriptions", "organizations_url": "https://api.github.com/users/maciej-w-rozycki/orgs", "repos_url": "https://api.github.com/users/maciej-w-rozycki/repos", "events_url": "https://api.github.com/users/maciej-w-rozycki/events{/privacy}", "received_events_url": "https://api.github.com/users/maciej-w-rozycki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6180f5c8d6d1dc7b6634c41a46f0f8f5ca2e5b9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6180f5c8d6d1dc7b6634c41a46f0f8f5ca2e5b9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6180f5c8d6d1dc7b6634c41a46f0f8f5ca2e5b9d"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "190db6ac47f20d9eb33020c8e8014af8aa9cc004", "filename": "gcc/reload.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29e1cbdc0c6e7d3de10478ef2b881900545c2a55/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29e1cbdc0c6e7d3de10478ef2b881900545c2a55/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=29e1cbdc0c6e7d3de10478ef2b881900545c2a55", "patch": "@@ -2846,10 +2846,11 @@ find_reloads (rtx_insn *insn, int replace, int ind_levels, int live_known,\n \t\t\t\t    i, operand_type[i], ind_levels, insn);\n \n \t  /* If we now have a simple operand where we used to have a\n-\t     PLUS or MULT, re-recognize and try again.  */\n+\t     PLUS or MULT or ASHIFT, re-recognize and try again.  */\n \t  if ((OBJECT_P (*recog_data.operand_loc[i])\n \t       || GET_CODE (*recog_data.operand_loc[i]) == SUBREG)\n \t      && (GET_CODE (recog_data.operand[i]) == MULT\n+\t\t  || GET_CODE (recog_data.operand[i]) == ASHIFT\n \t\t  || GET_CODE (recog_data.operand[i]) == PLUS))\n \t    {\n \t      INSN_CODE (insn) = -1;\n@@ -5562,7 +5563,8 @@ find_reloads_address_1 (machine_mode mode, addr_space_t as,\n \t    return 1;\n \t  }\n \n-\tif (code0 == MULT || code0 == SIGN_EXTEND || code0 == TRUNCATE\n+\tif (code0 == MULT || code0 == ASHIFT\n+\t    || code0 == SIGN_EXTEND || code0 == TRUNCATE\n \t    || code0 == ZERO_EXTEND || code1 == MEM)\n \t  {\n \t    find_reloads_address_1 (mode, as, orig_op0, 1, PLUS, SCRATCH,\n@@ -5573,7 +5575,8 @@ find_reloads_address_1 (machine_mode mode, addr_space_t as,\n \t\t\t\t    insn);\n \t  }\n \n-\telse if (code1 == MULT || code1 == SIGN_EXTEND || code1 == TRUNCATE\n+\telse if (code1 == MULT || code1 == ASHIFT\n+\t\t || code1 == SIGN_EXTEND || code1 == TRUNCATE\n \t\t || code1 == ZERO_EXTEND || code0 == MEM)\n \t  {\n \t    find_reloads_address_1 (mode, as, orig_op0, 0, PLUS, code1,"}]}