{"sha": "9ba4312712a96eba938c9d280e57f71929cdef41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJhNDMxMjcxMmE5NmViYTkzOGM5ZDI4MGU1N2Y3MTkyOWNkZWY0MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-09-20T09:42:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-09-20T09:42:40Z"}, "message": "re PR target/91269 (unaligned floating-point register with -mcpu=niagara4 -fcall-used-g6)\n\n\tPR target/91269\n\t* config/sparc/sparc.h (HARD_REGNO_CALLER_SAVE_MODE): Define.\n\nFrom-SVN: r275994", "tree": {"sha": "6204d8828d33e6b5d14284045d4b2ba91cd1d8fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6204d8828d33e6b5d14284045d4b2ba91cd1d8fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ba4312712a96eba938c9d280e57f71929cdef41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba4312712a96eba938c9d280e57f71929cdef41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ba4312712a96eba938c9d280e57f71929cdef41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba4312712a96eba938c9d280e57f71929cdef41/comments", "author": null, "committer": null, "parents": [{"sha": "522da4c233cb626f66e413dabb86a0a78adaafce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522da4c233cb626f66e413dabb86a0a78adaafce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/522da4c233cb626f66e413dabb86a0a78adaafce"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "c841fffa7f71aee9f0273a095101c07c9894c3c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba4312712a96eba938c9d280e57f71929cdef41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba4312712a96eba938c9d280e57f71929cdef41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9ba4312712a96eba938c9d280e57f71929cdef41", "patch": "@@ -1,3 +1,8 @@\n+2019-09-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/91269\n+\t* config/sparc/sparc.h (HARD_REGNO_CALLER_SAVE_MODE): Define.\n+\n 2019-09-20  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/91822"}, {"sha": "d14741846f573bb7ed336d632df24c27a7624fef", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba4312712a96eba938c9d280e57f71929cdef41/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba4312712a96eba938c9d280e57f71929cdef41/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=9ba4312712a96eba938c9d280e57f71929cdef41", "patch": "@@ -711,6 +711,13 @@ along with GCC; see the file COPYING3.  If not see\n    register window instruction in the prologue.  */\n #define HARD_REGNO_RENAME_OK(FROM, TO) ((FROM) != 1)\n \n+/* Select a register mode required for caller save of hard regno REGNO.\n+   Contrary to what is documented, the default is not the smallest suitable\n+   mode but the largest suitable mode for the given (REGNO, NREGS) pair and\n+   it quickly creates paradoxical subregs that can be problematic.  */\n+#define HARD_REGNO_CALLER_SAVE_MODE(REGNO, NREGS, MODE) \\\n+  ((MODE) == VOIDmode ? choose_hard_reg_mode (REGNO, NREGS, false) : (MODE))\n+\n /* Specify the registers used for certain standard purposes.\n    The values of these macros are register numbers.  */\n "}, {"sha": "8e1b4be2c012d89189963f6184731e6a6bcb0703", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba4312712a96eba938c9d280e57f71929cdef41/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba4312712a96eba938c9d280e57f71929cdef41/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9ba4312712a96eba938c9d280e57f71929cdef41", "patch": "@@ -1,3 +1,7 @@\n+2019-09-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/pr91269.c: New test.\n+\n 2019-09-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.dg/typedef-var-1.c: New test."}, {"sha": "8c03ba8dab23cbad85a524a8085ce378c42f3dec", "filename": "gcc/testsuite/gcc.dg/pr91269.c", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ba4312712a96eba938c9d280e57f71929cdef41/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91269.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ba4312712a96eba938c9d280e57f71929cdef41/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91269.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91269.c?ref=9ba4312712a96eba938c9d280e57f71929cdef41", "patch": "@@ -0,0 +1,70 @@\n+/* PR target/91269 */\n+/* Testcase by Sergei Trofimovich <slyfox@inbox.ru> */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -Wno-int-conversion\" }  */\n+/* { dg-additional-options \"-fcall-used-g6 -fPIE -mcpu=niagara4\" { target sparc*-*-* } } */\n+\n+struct m;\n+\n+enum { a = 2 };\n+int b[1];\n+int d[2715];\n+int e, f, h;\n+enum { i = 2 } j;\n+inline int c(int k) {\n+  char *cp;\n+  if (k >= 62 && k <= 247)\n+    cp = b[k];\n+  if (cp)\n+    return 65533;\n+  return 2;\n+}\n+inline int g(int k) {\n+  if (k < sizeof(d))\n+    return e;\n+  return 0;\n+}\n+\n+int u(struct m*, char*, char*);\n+\n+int l(struct m *k, char n, long o, int *p) {\n+  int q, flags = j, r, s, lasttwo = *p;\n+  char inptr, outptr;\n+  while (inptr) {\n+    if (__builtin_expect(h, 0))\n+      break;\n+    unsigned ch = inptr;\n+    if (lasttwo) {\n+      long need = lasttwo >> 3;\n+      if (__builtin_expect(need > n, 0))\n+        break;\n+    } else if (s == i) {\n+      long t = c(ch);\n+      if (t != 65533) {\n+        int jch = g(ch);\n+        if (jch & 8)\n+          continue;\n+      }\n+    }\n+    if (ch <= 5)\n+      ;\n+    else {\n+      long t = c(ch);\n+      if (t != 65533)\n+        ;\n+      else {\n+        switch (f >> 8)\n+        case 79:\n+          q = f == 20308 || f == 20350;\n+        if (q)\n+          if (j)\n+            r = u(k, &inptr, &outptr);\n+        s = *p;\n+        if (r)\n+          if (o && flags & a)\n+            break;\n+      }\n+    }\n+  }\n+}"}]}