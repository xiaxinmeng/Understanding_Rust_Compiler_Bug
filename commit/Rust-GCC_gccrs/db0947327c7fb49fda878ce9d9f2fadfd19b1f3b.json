{"sha": "db0947327c7fb49fda878ce9d9f2fadfd19b1f3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIwOTQ3MzI3YzdmYjQ5ZmRhODc4Y2U5ZDlmMmZhZGZkMTliMWYzYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-02-12T18:30:50Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-02-12T18:30:50Z"}, "message": "[multiple changes]\n\n2011-02-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/tr1/cmath (fabs): Define.\n\t* include/tr1/complex (acos, asin, atan): Avoid duplicate definitions\n\tin C++0x mode.\n\n2011-02-12  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* testsuite/tr1/headers/c++200x/complex.cc: New.\n\nFrom-SVN: r170083", "tree": {"sha": "0d65c0fc3d14361ba33a737f05ed54960acede9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d65c0fc3d14361ba33a737f05ed54960acede9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db0947327c7fb49fda878ce9d9f2fadfd19b1f3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db0947327c7fb49fda878ce9d9f2fadfd19b1f3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db0947327c7fb49fda878ce9d9f2fadfd19b1f3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db0947327c7fb49fda878ce9d9f2fadfd19b1f3b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ef828bc548bc2b47d6a20e6ccb3d3dc67d0aaec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ef828bc548bc2b47d6a20e6ccb3d3dc67d0aaec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ef828bc548bc2b47d6a20e6ccb3d3dc67d0aaec"}], "stats": {"total": 73, "additions": 69, "deletions": 4}, "files": [{"sha": "7e1445de48a83c9a4f15176314e078c8a9f09812", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0947327c7fb49fda878ce9d9f2fadfd19b1f3b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0947327c7fb49fda878ce9d9f2fadfd19b1f3b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=db0947327c7fb49fda878ce9d9f2fadfd19b1f3b", "patch": "@@ -1,3 +1,13 @@\n+2011-02-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/tr1/cmath (fabs): Define.\n+\t* include/tr1/complex (acos, asin, atan): Avoid duplicate definitions\n+\tin C++0x mode.\n+\n+2011-02-12  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* testsuite/tr1/headers/c++200x/complex.cc: New.\n+\n 2011-02-11  Johannes Singler  <singler@kit.edu>\n \n \tPR libstdc++/47433"}, {"sha": "21bdee8865406e6d96cd27099758d216b0478c64", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0947327c7fb49fda878ce9d9f2fadfd19b1f3b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0947327c7fb49fda878ce9d9f2fadfd19b1f3b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=db0947327c7fb49fda878ce9d9f2fadfd19b1f3b", "patch": "@@ -1,6 +1,7 @@\n // TR1 cmath -*- C++ -*-\n \n-// Copyright (C) 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -575,7 +576,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return expm1(__type(__x));\n     }\n \n-  using std::fabs;\n+  // Note: we deal with fabs in a special way, because an using std::fabs\n+  // would bring in also the overloads for complex types, which in C++0x\n+  // mode have a different return type.\n+  using ::fabs;\n+\n+  inline float\n+  fabs(float __x)\n+  { return __builtin_fabsf(__x); }\n+\n+  inline long double\n+  fabs(long double __x)\n+  { return __builtin_fabsl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+    fabs(_Tp __x)\n+    { return __builtin_fabs(__x); }\n \n   inline float\n   fdim(float __x, float __y)"}, {"sha": "fc213b8f1d586c32d2445b0cc19d09a5185351d4", "filename": "libstdc++-v3/include/tr1/complex", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0947327c7fb49fda878ce9d9f2fadfd19b1f3b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0947327c7fb49fda878ce9d9f2fadfd19b1f3b/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex?ref=db0947327c7fb49fda878ce9d9f2fadfd19b1f3b", "patch": "@@ -1,6 +1,7 @@\n // TR1 complex -*- C++ -*-\n \n-// Copyright (C) 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007, 2008, 2009, 2010, 2011\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -44,16 +45,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n-  // Forward declarations.\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+  using std::acos;\n+  using std::asin;\n+  using std::atan;\n+#else\n   template<typename _Tp> std::complex<_Tp> acos(const std::complex<_Tp>&);\n   template<typename _Tp> std::complex<_Tp> asin(const std::complex<_Tp>&);\n   template<typename _Tp> std::complex<_Tp> atan(const std::complex<_Tp>&);\n+#endif\n \n   template<typename _Tp> std::complex<_Tp> acosh(const std::complex<_Tp>&);\n   template<typename _Tp> std::complex<_Tp> asinh(const std::complex<_Tp>&);\n   template<typename _Tp> std::complex<_Tp> atanh(const std::complex<_Tp>&);\n+\n+  // The std::fabs return type in C++0x mode is different (just _Tp).\n   template<typename _Tp> std::complex<_Tp> fabs(const std::complex<_Tp>&);\n \n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n   template<typename _Tp>\n     inline std::complex<_Tp>\n     __complex_acos(const std::complex<_Tp>& __z)\n@@ -170,6 +179,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { return __complex_atan(__z); }\n #endif\n \n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n   template<typename _Tp>\n     std::complex<_Tp>\n     __complex_acosh(const std::complex<_Tp>& __z)"}, {"sha": "1df97013acaf2596ca15b8f1840ca4f4bf69273d", "filename": "libstdc++-v3/testsuite/tr1/headers/c++200x/complex.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db0947327c7fb49fda878ce9d9f2fadfd19b1f3b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders%2Fc%2B%2B200x%2Fcomplex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db0947327c7fb49fda878ce9d9f2fadfd19b1f3b/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders%2Fc%2B%2B200x%2Fcomplex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders%2Fc%2B%2B200x%2Fcomplex.cc?ref=db0947327c7fb49fda878ce9d9f2fadfd19b1f3b", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// check for duplicates of complex overloads of acos, asin, atan and fabs\n+\n+#include <complex>\n+#include <tr1/cmath>\n+#include <tr1/complex>\n+"}]}