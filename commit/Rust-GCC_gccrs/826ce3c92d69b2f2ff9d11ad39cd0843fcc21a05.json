{"sha": "826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI2Y2UzYzkyZDY5YjJmMmZmOWQxMWFkMzljZDA4NDNmY2MyMWEwNQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-10T14:26:31Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-04-12T21:39:45Z"}, "message": "Add impl mappings to inherent impl items\n\nWhen lowering impl blocks to HIR we keep track of all the inherent impl\nitems for lookup later but we also need to be able to reverse lookup impl\nitems back to their respective impl block.", "tree": {"sha": "5e428fb5db30734fc1e453c60317e6e27aef1554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e428fb5db30734fc1e453c60317e6e27aef1554"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fa740f4ff0475809edd45de9fb03b12e1f2a389", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa740f4ff0475809edd45de9fb03b12e1f2a389", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa740f4ff0475809edd45de9fb03b12e1f2a389"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "18ead3c788b5192d30dd3f9b4070f89c1d304bf4", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05", "patch": "@@ -360,12 +360,14 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n     std::vector<std::unique_ptr<HIR::InherentImplItem> > impl_items;\n+    std::vector<HirId> impl_item_ids;\n     for (auto &impl_item : impl_block.get_impl_items ())\n       {\n \tHIR::InherentImplItem *lowered\n \t  = ASTLowerImplItem::translate (impl_item.get (),\n \t\t\t\t\t mapping.get_hirid ());\n \timpl_items.push_back (std::unique_ptr<HIR::InherentImplItem> (lowered));\n+\timpl_item_ids.push_back (lowered->get_impl_mappings ().get_hirid ());\n       }\n \n     translated\n@@ -381,6 +383,13 @@ class ASTLoweringItem : public ASTLoweringBase\n \t\t\t       translated);\n     mappings->insert_location (crate_num, mapping.get_hirid (),\n \t\t\t       impl_block.get_locus ());\n+\n+    for (auto &impl_item_id : impl_item_ids)\n+      {\n+\tmappings->insert_impl_item_mapping (impl_item_id,\n+\t\t\t\t\t    static_cast<HIR::InherentImpl *> (\n+\t\t\t\t\t      translated));\n+      }\n   }\n \n private:"}, {"sha": "d6f9fc0c72dfbe95bedaef1463044d6abe6ab822", "filename": "gcc/rust/hir/tree/rust-hir-path.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-path.h?ref=826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05", "patch": "@@ -255,6 +255,12 @@ class PathPattern : public Pattern\n       }\n   }\n \n+  size_t get_num_segments () const { return segments.size (); }\n+\n+  std::vector<PathExprSegment> &get_segments () { return segments; }\n+\n+  PathExprSegment &get_root_seg () { return segments.at (0); }\n+\n   PathExprSegment get_final_segment () const { return segments.back (); }\n };\n "}, {"sha": "0dcbd4f03c79aca4a8fc30f735d67e68a20b1413", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05", "patch": "@@ -524,5 +524,24 @@ Mappings::resolve_nodeid_to_stmt (CrateNum crate, NodeId id, HIR::Stmt **stmt)\n   return resolved_stmt != nullptr;\n }\n \n+void\n+Mappings::iterate_impl_items (\n+  std::function<bool (HirId, HIR::InherentImplItem *, HIR::InherentImpl *)> cb)\n+{\n+  for (auto it = hirImplItemMappings.begin (); it != hirImplItemMappings.end ();\n+       it++)\n+    {\n+      for (auto iy = it->second.begin (); iy != it->second.end (); iy++)\n+\t{\n+\t  auto id = iy->first;\n+\t  auto impl_item = iy->second.second;\n+\t  auto impl = lookup_associated_impl (\n+\t    impl_item->get_impl_mappings ().get_hirid ());\n+\t  if (!cb (id, impl_item, impl))\n+\t    return;\n+\t}\n+    }\n+}\n+\n } // namespace Analysis\n } // namespace Rust"}, {"sha": "9777ee341bc1eac26d224efdf178fd3ebd6239dc", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=826ce3c92d69b2f2ff9d11ad39cd0843fcc21a05", "patch": "@@ -158,20 +158,24 @@ class Mappings\n     return hirNodesWithinCrate[crate];\n   }\n \n-  void\n-  iterate_impl_items (std::function<bool (HirId, HIR::InherentImplItem *)> cb)\n+  void insert_impl_item_mapping (HirId impl_item_id, HIR::InherentImpl *impl)\n   {\n-    for (auto it = hirImplItemMappings.begin ();\n-\t it != hirImplItemMappings.end (); it++)\n-      {\n-\tfor (auto iy = it->second.begin (); iy != it->second.end (); iy++)\n-\t  {\n-\t    if (!cb (iy->first, iy->second.second))\n-\t      return;\n-\t  }\n-      }\n+    rust_assert (hirImplItemsToImplMappings.find (impl_item_id)\n+\t\t == hirImplItemsToImplMappings.end ());\n+    hirImplItemsToImplMappings[impl_item_id] = impl;\n   }\n \n+  HIR::InherentImpl *lookup_associated_impl (HirId impl_item_id)\n+  {\n+    auto lookup = hirImplItemsToImplMappings.find (impl_item_id);\n+    rust_assert (lookup != hirImplItemsToImplMappings.end ());\n+    return lookup->second;\n+  }\n+\n+  void iterate_impl_items (\n+    std::function<bool (HirId, HIR::InherentImplItem *, HIR::InherentImpl *)>\n+      cb);\n+\n private:\n   Mappings ();\n \n@@ -198,6 +202,7 @@ class Mappings\n \t   std::map<HirId, std::pair<HirId, HIR::InherentImplItem *> > >\n     hirImplItemMappings;\n   std::map<CrateNum, std::map<HirId, HIR::SelfParam *> > hirSelfParamMappings;\n+  std::map<HirId, HIR::InherentImpl *> hirImplItemsToImplMappings;\n \n   // location info\n   std::map<CrateNum, std::map<NodeId, Location> > locations;"}]}