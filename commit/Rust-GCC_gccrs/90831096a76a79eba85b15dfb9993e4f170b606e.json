{"sha": "90831096a76a79eba85b15dfb9993e4f170b606e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA4MzEwOTZhNzZhNzllYmE4NWIxNWRmYjk5OTNlNGYxNzBiNjA2ZQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-05-02T21:05:54Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-05-02T21:05:54Z"}, "message": "make several functions in the scheduler take rtx_insn *\n\ngcc/ChangeLog:\n\n2015-05-02  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* haifa-sched.c: Change the type of some variables to rtx_insn *.\n\t* sched-deps.c: Likewise.\n\t* sched-int.h: Likewise.\n\t* sched-rgn.c: Likewise.\n\t* sel-sched.c: Likewise.\n\nFrom-SVN: r222737", "tree": {"sha": "bab7612e2587a7c7f917668fd39e52f1d50ae446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bab7612e2587a7c7f917668fd39e52f1d50ae446"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90831096a76a79eba85b15dfb9993e4f170b606e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90831096a76a79eba85b15dfb9993e4f170b606e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90831096a76a79eba85b15dfb9993e4f170b606e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90831096a76a79eba85b15dfb9993e4f170b606e/comments", "author": null, "committer": null, "parents": [{"sha": "0bd5850c9bb05d1e6221ffaa428728fbf3764e7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd5850c9bb05d1e6221ffaa428728fbf3764e7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd5850c9bb05d1e6221ffaa428728fbf3764e7a"}], "stats": {"total": 72, "additions": 40, "deletions": 32}, "files": [{"sha": "3490771fd9c2de7d03dd3156437ac0f01d231f68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90831096a76a79eba85b15dfb9993e4f170b606e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90831096a76a79eba85b15dfb9993e4f170b606e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90831096a76a79eba85b15dfb9993e4f170b606e", "patch": "@@ -1,3 +1,11 @@\n+2015-05-02  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* haifa-sched.c: Change the type of some variables to rtx_insn *.\n+\t* sched-deps.c: Likewise.\n+\t* sched-int.h: Likewise.\n+\t* sched-rgn.c: Likewise.\n+\t* sel-sched.c: Likewise.\n+\n 2015-05-02  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \tto rtx_insn *."}, {"sha": "e899746c9a68b880cc146f34a24a2e9db03dc8cb", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90831096a76a79eba85b15dfb9993e4f170b606e/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90831096a76a79eba85b15dfb9993e4f170b606e/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=90831096a76a79eba85b15dfb9993e4f170b606e", "patch": "@@ -881,7 +881,7 @@ static int early_queue_to_ready (state_t, struct ready_list *);\n /* The following functions are used to implement multi-pass scheduling\n    on the first cycle.  */\n static rtx_insn *ready_remove (struct ready_list *, int);\n-static void ready_remove_insn (rtx);\n+static void ready_remove_insn (rtx_insn *);\n \n static void fix_inter_tick (rtx_insn *, rtx_insn *);\n static int fix_tick_ready (rtx_insn *);\n@@ -894,7 +894,7 @@ static void extend_h_i_d (void);\n static void init_h_i_d (rtx_insn *);\n static int haifa_speculate_insn (rtx_insn *, ds_t, rtx *);\n static void generate_recovery_code (rtx_insn *);\n-static void process_insn_forw_deps_be_in_spec (rtx, rtx_insn *, ds_t);\n+static void process_insn_forw_deps_be_in_spec (rtx_insn *, rtx_insn *, ds_t);\n static void begin_speculative_block (rtx_insn *);\n static void add_to_speculative_block (rtx_insn *);\n static void init_before_recovery (basic_block *);\n@@ -1390,7 +1390,7 @@ static rtx_insn *last_scheduled_insn;\n    block, or the prev_head of the scheduling block.  Used by\n    rank_for_schedule, so that insns independent of the last scheduled\n    insn will be preferred over dependent instructions.  */\n-static rtx last_nondebug_scheduled_insn;\n+static rtx_insn *last_nondebug_scheduled_insn;\n \n /* Pointer that iterates through the list of unscheduled insns if we\n    have a dbg_cnt enabled.  It always points at an insn prior to the\n@@ -1598,7 +1598,7 @@ contributes_to_priority_p (dep_t dep)\n /* Compute the number of nondebug deps in list LIST for INSN.  */\n \n static int\n-dep_list_size (rtx insn, sd_list_types_def list)\n+dep_list_size (rtx_insn *insn, sd_list_types_def list)\n {\n   sd_iterator_def sd_it;\n   dep_t dep;\n@@ -2787,7 +2787,7 @@ rank_for_schedule (const void *x, const void *y)\n     {\n       dep_t dep1;\n       dep_t dep2;\n-      rtx last = last_nondebug_scheduled_insn;\n+      rtx_insn *last = last_nondebug_scheduled_insn;\n \n       /* Classify the instructions into three classes:\n          1) Data dependent on last schedule insn.\n@@ -3032,7 +3032,7 @@ ready_remove (struct ready_list *ready, int index)\n \n /* Remove INSN from the ready list.  */\n static void\n-ready_remove_insn (rtx insn)\n+ready_remove_insn (rtx_insn *insn)\n {\n   int i;\n \n@@ -3287,7 +3287,7 @@ sched_setup_bb_reg_pressure_info (basic_block bb, rtx_insn *after)\n    only be scheduled once their control dependency is resolved.  */\n \n static void\n-check_clobbered_conditions (rtx insn)\n+check_clobbered_conditions (rtx_insn *insn)\n {\n   HARD_REG_SET t;\n   int i;\n@@ -4309,7 +4309,7 @@ struct haifa_saved_data\n   state_t curr_state;\n \n   rtx_insn *last_scheduled_insn;\n-  rtx last_nondebug_scheduled_insn;\n+  rtx_insn *last_nondebug_scheduled_insn;\n   rtx_insn *nonscheduled_insns_begin;\n   int cycle_issued_insns;\n \n@@ -4339,7 +4339,7 @@ static struct haifa_saved_data *backtrack_queue;\n /* For every dependency of INSN, set the FEEDS_BACKTRACK_INSN bit according\n    to SET_P.  */\n static void\n-mark_backtrack_feeds (rtx insn, int set_p)\n+mark_backtrack_feeds (rtx_insn *insn, int set_p)\n {\n   sd_iterator_def sd_it;\n   dep_t dep;\n@@ -4485,7 +4485,7 @@ undo_replacements_for_backtrack (struct haifa_saved_data *save)\n    queued nowhere.  */\n \n static void\n-unschedule_insns_until (rtx insn)\n+unschedule_insns_until (rtx_insn *insn)\n {\n   auto_vec<rtx_insn *> recompute_vec;\n \n@@ -5133,7 +5133,7 @@ queue_to_ready (struct ready_list *ready)\n {\n   rtx_insn *insn;\n   rtx_insn_list *link;\n-  rtx skip_insn;\n+  rtx_insn *skip_insn;\n \n   q_ptr = NEXT_Q (q_ptr);\n \n@@ -5142,7 +5142,7 @@ queue_to_ready (struct ready_list *ready)\n        nonscheduled insn.  */\n     skip_insn = first_nonscheduled_insn ();\n   else\n-    skip_insn = NULL_RTX;\n+    skip_insn = NULL;\n \n   /* Add all pending insns that can be scheduled without stalls to the\n      ready list.  */\n@@ -5237,7 +5237,7 @@ queue_to_ready (struct ready_list *ready)\n    addition) depending on user flags and target hooks.  */\n \n static bool\n-ok_for_early_queue_removal (rtx insn)\n+ok_for_early_queue_removal (rtx_insn *insn)\n {\n   if (targetm.sched.is_costly_dependence)\n     {\n@@ -6467,7 +6467,7 @@ schedule_block (basic_block *target_bb, state_t init_state)\n \n   /* We start inserting insns after PREV_HEAD.  */\n   last_scheduled_insn = prev_head;\n-  last_nondebug_scheduled_insn = NULL_RTX;\n+  last_nondebug_scheduled_insn = NULL;\n   nonscheduled_insns_begin = NULL;\n \n   gcc_assert ((NOTE_P (last_scheduled_insn)\n@@ -7799,7 +7799,7 @@ generate_recovery_code (rtx_insn *insn)\n    Tries to add speculative dependencies of type FS between instructions\n    in deps_list L and TWIN.  */\n static void\n-process_insn_forw_deps_be_in_spec (rtx insn, rtx_insn *twin, ds_t fs)\n+process_insn_forw_deps_be_in_spec (rtx_insn *insn, rtx_insn *twin, ds_t fs)\n {\n   sd_iterator_def sd_it;\n   dep_t dep;"}, {"sha": "b6130eed1c55491d9710b8e21bf7f39d1255ca74", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90831096a76a79eba85b15dfb9993e4f170b606e/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90831096a76a79eba85b15dfb9993e4f170b606e/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=90831096a76a79eba85b15dfb9993e4f170b606e", "patch": "@@ -503,7 +503,7 @@ static void add_dependence_list (rtx_insn *, rtx_insn_list *, int,\n static void add_dependence_list_and_free (struct deps_desc *, rtx_insn *,\n \t\t\t\t\t  rtx_insn_list **, int, enum reg_note,\n \t\t\t\t\t  bool);\n-static void delete_all_dependences (rtx);\n+static void delete_all_dependences (rtx_insn *);\n static void chain_to_prev_insn (rtx_insn *);\n \n static void flush_pending_lists (struct deps_desc *, rtx_insn *, int, int);\n@@ -1621,7 +1621,7 @@ add_dependence_list_and_free (struct deps_desc *deps, rtx_insn *insn,\n    occurrences removed.  */\n \n static int\n-remove_from_dependence_list (rtx insn, rtx_insn_list **listp)\n+remove_from_dependence_list (rtx_insn *insn, rtx_insn_list **listp)\n {\n   int removed = 0;\n \n@@ -1642,7 +1642,7 @@ remove_from_dependence_list (rtx insn, rtx_insn_list **listp)\n \n /* Same as above, but process two lists at once.  */\n static int\n-remove_from_both_dependence_lists (rtx insn,\n+remove_from_both_dependence_lists (rtx_insn *insn,\n \t\t\t\t   rtx_insn_list **listp,\n \t\t\t\t   rtx_expr_list **exprp)\n {\n@@ -1667,7 +1667,7 @@ remove_from_both_dependence_lists (rtx insn,\n \n /* Clear all dependencies for an insn.  */\n static void\n-delete_all_dependences (rtx insn)\n+delete_all_dependences (rtx_insn *insn)\n {\n   sd_iterator_def sd_it;\n   dep_t dep;\n@@ -2211,7 +2211,7 @@ mark_insn_reg_clobber (rtx reg, const_rtx setter, void *data)\n \n /* Set up reg pressure info related to INSN.  */\n void\n-init_insn_reg_pressure_info (rtx insn)\n+init_insn_reg_pressure_info (rtx_insn *insn)\n {\n   int i, len;\n   enum reg_class cl;\n@@ -3531,7 +3531,7 @@ sched_analyze_insn (struct deps_desc *deps, rtx x, rtx_insn *insn)\n /* FIXME: Why can't this function just use flags_from_decl_or_type and\n    test for ECF_NORETURN?  */\n static bool\n-call_may_noreturn_p (rtx insn)\n+call_may_noreturn_p (rtx_insn *insn)\n {\n   rtx call;\n \n@@ -3594,7 +3594,7 @@ call_may_noreturn_p (rtx insn)\n    instruction of that group.  */\n \n static bool\n-chain_to_prev_insn_p (rtx insn)\n+chain_to_prev_insn_p (rtx_insn *insn)\n {\n   rtx prev, x;\n \n@@ -3844,7 +3844,7 @@ sched_analyze (struct deps_desc *deps, rtx_insn *head, rtx_insn *tail)\n /* Helper for sched_free_deps ().\n    Delete INSN's (RESOLVED_P) backward dependencies.  */\n static void\n-delete_dep_nodes_in_back_deps (rtx insn, bool resolved_p)\n+delete_dep_nodes_in_back_deps (rtx_insn *insn, bool resolved_p)\n {\n   sd_iterator_def sd_it;\n   dep_t dep;"}, {"sha": "c93412e0108f42cfed1b372c7705e7cde64e2426", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90831096a76a79eba85b15dfb9993e4f170b606e/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90831096a76a79eba85b15dfb9993e4f170b606e/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=90831096a76a79eba85b15dfb9993e4f170b606e", "patch": "@@ -1345,7 +1345,7 @@ extern void init_deps_global (void);\n extern void finish_deps_global (void);\n extern void deps_analyze_insn (struct deps_desc *, rtx_insn *);\n extern void remove_from_deps (struct deps_desc *, rtx_insn *);\n-extern void init_insn_reg_pressure_info (rtx);\n+extern void init_insn_reg_pressure_info (rtx_insn *);\n \n extern dw_t get_dep_weak (ds_t, ds_t);\n extern ds_t set_dep_weak (ds_t, ds_t, dw_t);"}, {"sha": "f2d5438d31a5b45c3d1289ce27ac5b33046777ac", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90831096a76a79eba85b15dfb9993e4f170b606e/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90831096a76a79eba85b15dfb9993e4f170b606e/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=90831096a76a79eba85b15dfb9993e4f170b606e", "patch": "@@ -240,10 +240,10 @@ static edgeset *ancestor_edges;\n static int check_live_1 (int, rtx);\n static void update_live_1 (int, rtx);\n static int is_pfree (rtx, int, int);\n-static int find_conditional_protection (rtx, int);\n+static int find_conditional_protection (rtx_insn *, int);\n static int is_conditionally_protected (rtx, int, int);\n static int is_prisky (rtx, int, int);\n-static int is_exception_free (rtx, int, int);\n+static int is_exception_free (rtx_insn *, int, int);\n \n static bool sets_likely_spilled (rtx);\n static void sets_likely_spilled_1 (rtx, const_rtx, void *);\n@@ -1841,7 +1841,7 @@ check_live (rtx_insn *insn, int src)\n    block src to trg.  */\n \n static void\n-update_live (rtx insn, int src)\n+update_live (rtx_insn *insn, int src)\n {\n   /* Find the registers set by instruction.  */\n   if (GET_CODE (PATTERN (insn)) == SET\n@@ -1882,7 +1882,7 @@ set_spec_fed (rtx load_insn)\n branch depending on insn, that guards the speculative load.  */\n \n static int\n-find_conditional_protection (rtx insn, int load_insn_bb)\n+find_conditional_protection (rtx_insn *insn, int load_insn_bb)\n {\n   sd_iterator_def sd_it;\n   dep_t dep;\n@@ -2042,7 +2042,7 @@ is_prisky (rtx load_insn, int bb_src, int bb_trg)\n    and 0 otherwise.  */\n \n static int\n-is_exception_free (rtx insn, int bb_src, int bb_trg)\n+is_exception_free (rtx_insn *insn, int bb_src, int bb_trg)\n {\n   int insn_class = haifa_classify_insn (insn);\n "}, {"sha": "7daeec3b2bf6bed892bad9d918f0b7b4016f7f51", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90831096a76a79eba85b15dfb9993e4f170b606e/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90831096a76a79eba85b15dfb9993e4f170b606e/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=90831096a76a79eba85b15dfb9993e4f170b606e", "patch": "@@ -614,7 +614,7 @@ advance_one_cycle (fence_t fence)\n /* Returns true when SUCC in a fallthru bb of INSN, possibly\n    skipping empty basic blocks.  */\n static bool\n-in_fallthru_bb_p (rtx insn, rtx succ)\n+in_fallthru_bb_p (rtx_insn *insn, rtx succ)\n {\n   basic_block bb = BLOCK_FOR_INSN (insn);\n   edge e;\n@@ -1853,7 +1853,7 @@ create_speculation_check (expr_t c_expr, ds_t check_ds, insn_t orig_insn)\n \n /* True when INSN is a \"regN = regN\" copy.  */\n static bool\n-identical_copy_p (rtx insn)\n+identical_copy_p (rtx_insn *insn)\n {\n   rtx lhs, rhs, pat;\n \n@@ -5830,7 +5830,7 @@ move_op_after_merge_succs (cmpd_local_params_p lp, void *sparams)\n /* Track bookkeeping copies created, insns scheduled, and blocks for\n    rescheduling when INSN is found by move_op.  */\n static void\n-track_scheduled_insns_and_blocks (rtx insn)\n+track_scheduled_insns_and_blocks (rtx_insn *insn)\n {\n   /* Even if this insn can be a copy that will be removed during current move_op,\n      we still need to count it as an originator.  */"}]}