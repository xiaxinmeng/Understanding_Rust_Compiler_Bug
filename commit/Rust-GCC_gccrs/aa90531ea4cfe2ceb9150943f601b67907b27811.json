{"sha": "aa90531ea4cfe2ceb9150943f601b67907b27811", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE5MDUzMWVhNGNmZTJjZWI5MTUwOTQzZjYwMWI2NzkwN2IyNzgxMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-12-20T12:50:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-12-20T12:50:09Z"}, "message": "gimple-parser.c (c_parser_gimple_compound_statement): Improve error recovery.\n\n2016-12-20  Richard Biener  <rguenther@suse.de>\n\n\tc/\n\t* gimple-parser.c (c_parser_gimple_compound_statement): Improve\n\terror recovery.\n\t(c_parser_gimple_statement): Only build assigns for non-error\n\tstmts.\n\t(c_parser_gimple_postfix_expression_after): Improve error recovery.\n\nFrom-SVN: r243823", "tree": {"sha": "b17f175f4b6ac771ecf38e0e1ec41fec8a0f3803", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b17f175f4b6ac771ecf38e0e1ec41fec8a0f3803"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa90531ea4cfe2ceb9150943f601b67907b27811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa90531ea4cfe2ceb9150943f601b67907b27811", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa90531ea4cfe2ceb9150943f601b67907b27811", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa90531ea4cfe2ceb9150943f601b67907b27811/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a676a9a8c5a0dbd81ebcd294afd153b7f62171d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a676a9a8c5a0dbd81ebcd294afd153b7f62171d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a676a9a8c5a0dbd81ebcd294afd153b7f62171d6"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "e17674f899ca715cca3af8a1777653013626e46f", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa90531ea4cfe2ceb9150943f601b67907b27811/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa90531ea4cfe2ceb9150943f601b67907b27811/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=aa90531ea4cfe2ceb9150943f601b67907b27811", "patch": "@@ -1,3 +1,11 @@\n+2016-12-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-parser.c (c_parser_gimple_compound_statement): Improve\n+\terror recovery.\n+\t(c_parser_gimple_statement): Only build assigns for non-error\n+\tstmts.\n+\t(c_parser_gimple_postfix_expression_after): Improve error recovery.\n+\n 2016-12-14  Martin Jambor  <mjambor@suse.cz>\n \n \t* c-parser.c: Include omp-general.h and omp-offload.h instead of"}, {"sha": "b7cef93a291085eb19c7ff72c0d6f6a80fc68e40", "filename": "gcc/c/gimple-parser.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa90531ea4cfe2ceb9150943f601b67907b27811/gcc%2Fc%2Fgimple-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa90531ea4cfe2ceb9150943f601b67907b27811/gcc%2Fc%2Fgimple-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fgimple-parser.c?ref=aa90531ea4cfe2ceb9150943f601b67907b27811", "patch": "@@ -215,7 +215,7 @@ c_parser_gimple_compound_statement (c_parser *parser, gimple_seq *seq)\n expr_stmt:\n \t  c_parser_gimple_statement (parser, seq);\n \t  if (! c_parser_require (parser, CPP_SEMICOLON, \"expected %<;%>\"))\n-\t    return return_p;\n+\t    c_parser_skip_until_found (parser, CPP_SEMICOLON, NULL);\n \t}\n     }\n   c_parser_consume_token (parser);\n@@ -327,9 +327,12 @@ c_parser_gimple_statement (c_parser *parser, gimple_seq *seq)\n     case CPP_NOT:\n     case CPP_MULT: /* pointer deref */\n       rhs = c_parser_gimple_unary_expression (parser);\n-      assign = gimple_build_assign (lhs.value, rhs.value);\n-      gimple_set_location (assign, loc);\n-      gimple_seq_add_stmt (seq, assign);\n+      if (rhs.value != error_mark_node)\n+\t{\n+\t  assign = gimple_build_assign (lhs.value, rhs.value);\n+\t  gimple_set_location (assign, loc);\n+\t  gimple_seq_add_stmt (seq, assign);\n+\t}\n       return;\n \n     default:;\n@@ -385,10 +388,13 @@ c_parser_gimple_statement (c_parser *parser, gimple_seq *seq)\n       && lookup_name (c_parser_peek_token (parser)->value))\n     {\n       rhs = c_parser_gimple_unary_expression (parser);\n-      gimple *call = gimple_build_call_from_tree (rhs.value);\n-      gimple_call_set_lhs (call, lhs.value);\n-      gimple_seq_add_stmt (seq, call);\n-      gimple_set_location (call, loc);\n+      if (rhs.value != error_mark_node)\n+\t{\n+\t  gimple *call = gimple_build_call_from_tree (rhs.value);\n+\t  gimple_call_set_lhs (call, lhs.value);\n+\t  gimple_seq_add_stmt (seq, call);\n+\t  gimple_set_location (call, loc);\n+\t}\n       return;\n     }\n \n@@ -802,7 +808,10 @@ c_parser_gimple_postfix_expression_after_primary (c_parser *parser,\n \t    tree idx = c_parser_gimple_unary_expression (parser).value;\n \n \t    if (! c_parser_require (parser, CPP_CLOSE_SQUARE, \"expected %<]%>\"))\n-\t      break;\n+\t      {\n+\t\tc_parser_skip_until_found (parser, CPP_CLOSE_SQUARE, NULL);\n+\t\tbreak;\n+\t      }\n \n \t    start = expr.get_start ();\n \t    finish = c_parser_tokens_buf (parser, 0)->location;"}]}