{"sha": "74166aabeb7f22990476b1169bba031b8323ee92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQxNjZhYWJlYjdmMjI5OTA0NzZiMTE2OWJiYTAzMWI4MzIzZWU5Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-14T15:15:34Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-14T15:15:34Z"}, "message": "[AArch64] Support vectorising with multiple vector sizes\n\nThis patch makes the vectoriser try mixtures of 64-bit and 128-bit\nvector modes on AArch64.  It fixes some existing XFAILs and allows\nkernel 24 from the Livermore Loops test to be vectorised (by using\na mixture of V2DF and V2SI).\n\n2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_vectorize_related_mode): New\n\tfunction.\n\t(aarch64_autovectorize_vector_modes): Also add V4HImode and V2SImode.\n\t(TARGET_VECTORIZE_RELATED_MODE): Define.\n\ngcc/testsuite/\n\t* gcc.dg/vect/vect-outer-4f.c: Expect the test to pass on aarch64\n\ttargets.\n\t* gcc.dg/vect/vect-outer-4g.c: Likewise.\n\t* gcc.dg/vect/vect-outer-4k.c: Likewise.\n\t* gcc.dg/vect/vect-outer-4l.c: Likewise.\n\t* gfortran.dg/vect/vect-8.f90: Expect kernel 24 to be vectorized\n\tfor aarch64.\n\t* gcc.target/aarch64/vect_mixed_sizes_1.c: New test.\n\t* gcc.target/aarch64/vect_mixed_sizes_2.c: Likewise.\n\t* gcc.target/aarch64/vect_mixed_sizes_3.c: Likewise.\n\t* gcc.target/aarch64/vect_mixed_sizes_4.c: Likewise.\n\nFrom-SVN: r278243", "tree": {"sha": "4219985f8055da7225a0e6d9ab44d4e80c365f7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4219985f8055da7225a0e6d9ab44d4e80c365f7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74166aabeb7f22990476b1169bba031b8323ee92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74166aabeb7f22990476b1169bba031b8323ee92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74166aabeb7f22990476b1169bba031b8323ee92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74166aabeb7f22990476b1169bba031b8323ee92/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a55d8232df3dd4f7a3f5b70025074c3919b802a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a55d8232df3dd4f7a3f5b70025074c3919b802a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a55d8232df3dd4f7a3f5b70025074c3919b802a6"}], "stats": {"total": 153, "additions": 147, "deletions": 6}, "files": [{"sha": "7515ee1d4bf23c111513b1ee63b559b54c868ff5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74166aabeb7f22990476b1169bba031b8323ee92", "patch": "@@ -1,3 +1,10 @@\n+2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_vectorize_related_mode): New\n+\tfunction.\n+\t(aarch64_autovectorize_vector_modes): Also add V4HImode and V2SImode.\n+\t(TARGET_VECTORIZE_RELATED_MODE): Define.\n+\n 2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (vec_info::mode_set): New typedef."}, {"sha": "ec0643daaa5251e1a3aa21795aab24f503ccc402", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=74166aabeb7f22990476b1169bba031b8323ee92", "patch": "@@ -1822,6 +1822,30 @@ aarch64_sve_int_mode (machine_mode mode)\n   return aarch64_sve_data_mode (int_mode, GET_MODE_NUNITS (mode)).require ();\n }\n \n+/* Implement TARGET_VECTORIZE_RELATED_MODE.  */\n+\n+static opt_machine_mode\n+aarch64_vectorize_related_mode (machine_mode vector_mode,\n+\t\t\t\tscalar_mode element_mode,\n+\t\t\t\tpoly_uint64 nunits)\n+{\n+  unsigned int vec_flags = aarch64_classify_vector_mode (vector_mode);\n+\n+  /* Prefer to use 1 128-bit vector instead of 2 64-bit vectors.  */\n+  if ((vec_flags & VEC_ADVSIMD)\n+      && known_eq (nunits, 0U)\n+      && known_eq (GET_MODE_BITSIZE (vector_mode), 64U)\n+      && maybe_ge (GET_MODE_BITSIZE (element_mode)\n+\t\t   * GET_MODE_NUNITS (vector_mode), 128U))\n+    {\n+      machine_mode res = aarch64_simd_container_mode (element_mode, 128);\n+      if (VECTOR_MODE_P (res))\n+\treturn res;\n+    }\n+\n+  return default_vectorize_related_mode (vector_mode, element_mode, nunits);\n+}\n+\n /* Implement TARGET_PREFERRED_ELSE_VALUE.  For binary operations,\n    prefer to use the first arithmetic operand as the else value if\n    the else value doesn't matter, since that exactly matches the SVE\n@@ -15916,8 +15940,27 @@ aarch64_autovectorize_vector_modes (vector_modes *modes, bool)\n {\n   if (TARGET_SVE)\n     modes->safe_push (VNx16QImode);\n+\n+  /* Try using 128-bit vectors for all element types.  */\n   modes->safe_push (V16QImode);\n+\n+  /* Try using 64-bit vectors for 8-bit elements and 128-bit vectors\n+     for wider elements.  */\n   modes->safe_push (V8QImode);\n+\n+  /* Try using 64-bit vectors for 16-bit elements and 128-bit vectors\n+     for wider elements.\n+\n+     TODO: We could support a limited form of V4QImode too, so that\n+     we use 32-bit vectors for 8-bit elements.  */\n+  modes->safe_push (V4HImode);\n+\n+  /* Try using 64-bit vectors for 32-bit elements and 128-bit vectors\n+     for 64-bit elements.\n+\n+     TODO: We could similarly support limited forms of V2QImode and V2HImode\n+     for this case.  */\n+  modes->safe_push (V2SImode);\n }\n \n /* Implement TARGET_MANGLE_TYPE.  */\n@@ -21786,6 +21829,8 @@ aarch64_libgcc_floating_mode_supported_p\n #define TARGET_VECTORIZE_VEC_PERM_CONST \\\n   aarch64_vectorize_vec_perm_const\n \n+#undef TARGET_VECTORIZE_RELATED_MODE\n+#define TARGET_VECTORIZE_RELATED_MODE aarch64_vectorize_related_mode\n #undef TARGET_VECTORIZE_GET_MASK_MODE\n #define TARGET_VECTORIZE_GET_MASK_MODE aarch64_get_mask_mode\n #undef TARGET_VECTORIZE_EMPTY_MASK_IS_EXPENSIVE"}, {"sha": "c1fa46589420d056523d7d607975addcb86090c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74166aabeb7f22990476b1169bba031b8323ee92", "patch": "@@ -1,3 +1,17 @@\n+2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/vect-outer-4f.c: Expect the test to pass on aarch64\n+\ttargets.\n+\t* gcc.dg/vect/vect-outer-4g.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-4k.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-4l.c: Likewise.\n+\t* gfortran.dg/vect/vect-8.f90: Expect kernel 24 to be vectorized\n+\tfor aarch64.\n+\t* gcc.target/aarch64/vect_mixed_sizes_1.c: New test.\n+\t* gcc.target/aarch64/vect_mixed_sizes_2.c: Likewise.\n+\t* gcc.target/aarch64/vect_mixed_sizes_3.c: Likewise.\n+\t* gcc.target/aarch64/vect_mixed_sizes_4.c: Likewise.\n+\n 2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/vect/vect-tail-nomask-1.c: Update expected epilogue"}, {"sha": "a88014a2fbff02590810737754b2b13224f544b9", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4f.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4f.c?ref=74166aabeb7f22990476b1169bba031b8323ee92", "patch": "@@ -65,4 +65,4 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail { ! aarch64*-*-* } } } } */"}, {"sha": "a88014a2fbff02590810737754b2b13224f544b9", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4g.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4g.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4g.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4g.c?ref=74166aabeb7f22990476b1169bba031b8323ee92", "patch": "@@ -65,4 +65,4 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail { ! aarch64*-*-* } } } } */"}, {"sha": "a88014a2fbff02590810737754b2b13224f544b9", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4k.c?ref=74166aabeb7f22990476b1169bba031b8323ee92", "patch": "@@ -65,4 +65,4 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail { ! aarch64*-*-* } } } } */"}, {"sha": "4f95c652ee30d5c4c3d127b0afe08a7f7689d3d7", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-4l.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4l.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4l.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-4l.c?ref=74166aabeb7f22990476b1169bba031b8323ee92", "patch": "@@ -65,4 +65,4 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail { ! aarch64*-*-* } } } }*/"}, {"sha": "fe490cfbf3f2566cb11702da98c8f72a5f5adf88", "filename": "gcc/testsuite/gcc.target/aarch64/vect_mixed_sizes_1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_1.c?ref=74166aabeb7f22990476b1169bba031b8323ee92", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#include <stdint.h>\n+\n+void\n+f (int64_t *x, int64_t *y, int32_t *z, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      x[i] += y[i];\n+      z[i] += z[i - 2];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.2d,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.2s,} 1 } } */"}, {"sha": "1fe69cad259242be282b5370be16cf93a32a24f0", "filename": "gcc/testsuite/gcc.target/aarch64/vect_mixed_sizes_2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_2.c?ref=74166aabeb7f22990476b1169bba031b8323ee92", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#include <stdint.h>\n+\n+void\n+f (int32_t *x, int32_t *y, int16_t *z, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      x[i] += y[i];\n+      z[i] += z[i - 4];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.4s,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.4h,} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\tv[0-9]+\\.2s,} } } */"}, {"sha": "1290772216eb3e05b19e3d9e04c10f0197a83439", "filename": "gcc/testsuite/gcc.target/aarch64/vect_mixed_sizes_3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_3.c?ref=74166aabeb7f22990476b1169bba031b8323ee92", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#include <stdint.h>\n+\n+void\n+f (int16_t *x, int16_t *y, int8_t *z, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      x[i] += y[i];\n+      z[i] += z[i - 8];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.8h,} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.8b,} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tadd\\tv[0-9]+\\.4h,} } } */"}, {"sha": "768ea8c71643f81ae170a97a313754b341b778d0", "filename": "gcc/testsuite/gcc.target/aarch64/vect_mixed_sizes_4.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_mixed_sizes_4.c?ref=74166aabeb7f22990476b1169bba031b8323ee92", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#include <stdint.h>\n+\n+void\n+f (int64_t *x, int64_t *y, int8_t *z, int n)\n+{\n+  for (int i = 0; i < n; ++i)\n+    {\n+      x[i] += y[i];\n+      z[i] += z[i - 8];\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.2d,} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tadd\\tv[0-9]+\\.8b,} 1 } } */"}, {"sha": "6f10c7e586fe8d1d90a45a5fe8d117d4b2a9f0e5", "filename": "gcc/testsuite/gfortran.dg/vect/vect-8.f90", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74166aabeb7f22990476b1169bba031b8323ee92/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90?ref=74166aabeb7f22990476b1169bba031b8323ee92", "patch": "@@ -704,5 +704,6 @@ SUBROUTINE kernel(tk)\n RETURN\n END SUBROUTINE kernel\n \n-! { dg-final { scan-tree-dump-times \"vectorized 22 loops\" 1 \"vect\" { target vect_intdouble_cvt } } }\n-! { dg-final { scan-tree-dump-times \"vectorized 17 loops\" 1 \"vect\" { target { ! vect_intdouble_cvt } } } }\n+! { dg-final { scan-tree-dump-times \"vectorized 23 loops\" 1 \"vect\" { target aarch64*-*-* } } }\n+! { dg-final { scan-tree-dump-times \"vectorized 22 loops\" 1 \"vect\" { target { vect_intdouble_cvt && { ! aarch64*-*-* } } } } }\n+! { dg-final { scan-tree-dump-times \"vectorized 17 loops\" 1 \"vect\" { target { { ! vect_intdouble_cvt } && { ! aarch64*-*-* } } } } }"}]}