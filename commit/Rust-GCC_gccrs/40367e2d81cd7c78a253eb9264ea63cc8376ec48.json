{"sha": "40367e2d81cd7c78a253eb9264ea63cc8376ec48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAzNjdlMmQ4MWNkN2M3OGEyNTNlYjkyNjRlYTYzY2M4Mzc2ZWM0OA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-02-26T12:50:52Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-02-26T12:50:52Z"}, "message": "h8300-protos.h: Add a prototype for compute_logical_op_length.\n\n\t* config/h8300/h8300-protos.h: Add a prototype for\n\tcompute_logical_op_length.\n\t* config/h8300/h8300.c (compute_logical_op_length): New.\n\t* config/h8300/h8300.md (anonymous logical patterns): Use\n\tcompute_logical_op_length for length.\n\nFrom-SVN: r50055", "tree": {"sha": "a18125fe1a843dd653604bb4f97b1398deaf7a90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a18125fe1a843dd653604bb4f97b1398deaf7a90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40367e2d81cd7c78a253eb9264ea63cc8376ec48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40367e2d81cd7c78a253eb9264ea63cc8376ec48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40367e2d81cd7c78a253eb9264ea63cc8376ec48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40367e2d81cd7c78a253eb9264ea63cc8376ec48/comments", "author": null, "committer": null, "parents": [{"sha": "64ee51e0ba631964e33c56902d9cc07ee9c6316c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64ee51e0ba631964e33c56902d9cc07ee9c6316c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64ee51e0ba631964e33c56902d9cc07ee9c6316c"}], "stats": {"total": 157, "additions": 145, "deletions": 12}, "files": [{"sha": "670aafd4375d8b390b9103f2013be2eacd987145", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40367e2d81cd7c78a253eb9264ea63cc8376ec48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40367e2d81cd7c78a253eb9264ea63cc8376ec48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40367e2d81cd7c78a253eb9264ea63cc8376ec48", "patch": "@@ -1,3 +1,11 @@\n+2002-02-26  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300-protos.h: Add a prototype for\n+\tcompute_logical_op_length.\n+\t* config/h8300/h8300.c (compute_logical_op_length): New.\n+\t* config/h8300/h8300.md (anonymous logical patterns): Use\n+\tcompute_logical_op_length for length.\n+\n 2002-02-26  Aldy Hernandez  <aldyh@redhat.com>\n \n         * dwarf2out.c (modified_type_die): Do not call type_main_variant"}, {"sha": "cebcb5b4f25f667033a019c4a8f3e5ea24fe982b", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40367e2d81cd7c78a253eb9264ea63cc8376ec48/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40367e2d81cd7c78a253eb9264ea63cc8376ec48/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=40367e2d81cd7c78a253eb9264ea63cc8376ec48", "patch": "@@ -36,6 +36,8 @@ extern void final_prescan_insn PARAMS ((rtx, rtx *, int));\n extern int do_movsi PARAMS ((rtx[]));\n extern void notice_update_cc PARAMS ((rtx, rtx));\n extern const char *output_logical_op PARAMS ((enum machine_mode, int, rtx *));\n+extern unsigned int compute_logical_op_length PARAMS ((enum machine_mode,\n+\t\t\t\t\t\t       enum rtx_code, rtx *));\n extern int expand_a_shift PARAMS ((enum machine_mode, int, rtx[]));\n extern int expand_a_rotate PARAMS ((enum rtx_code, rtx[]));\n extern int fix_bit_operand PARAMS ((rtx *, int, enum rtx_code));"}, {"sha": "d09068cfd8bf51ef724f1ef6b58255162bc22062", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40367e2d81cd7c78a253eb9264ea63cc8376ec48/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40367e2d81cd7c78a253eb9264ea63cc8376ec48/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=40367e2d81cd7c78a253eb9264ea63cc8376ec48", "patch": "@@ -1627,6 +1627,117 @@ output_logical_op (mode, code, operands)\n     }\n   return \"\";\n }\n+\n+unsigned int\n+compute_logical_op_length (mode, code, operands)\n+     enum machine_mode mode;\n+     enum rtx_code code;\n+     rtx *operands;\n+{\n+  /* Pretend that every byte is affected if both operands are registers.  */\n+  unsigned HOST_WIDE_INT intval =\n+    (unsigned HOST_WIDE_INT) ((GET_CODE (operands[2]) == CONST_INT)\n+\t\t\t      ? INTVAL (operands[2]) : 0x55555555);\n+  /* The determinant of the algorithm.  If we perform an AND, 0\n+     affects a bit.  Otherwise, 1 affects a bit.  */\n+  unsigned HOST_WIDE_INT det = (code != AND) ? intval : ~intval;\n+  /* Insn length.  */\n+  unsigned int length = 0;\n+\n+  switch (mode)\n+    {\n+    case HImode:\n+      /* First, see if we can finish with one insn.  */\n+      if ((TARGET_H8300H || TARGET_H8300S)\n+\t  && ((det & 0x00ff) != 0)\n+\t  && ((det & 0xff00) != 0))\n+\t{\n+\t  if (REG_P (operands[2]))\n+\t    length += 2;\n+\t  else\n+\t    length += 4;\n+\t}\n+      else\n+\t{\n+\t  /* Take care of the lower byte.  */\n+\t  if ((det & 0x00ff) != 0)\n+\t    length += 2;\n+\n+\t  /* Take care of the upper byte.  */\n+\t  if ((det & 0xff00) != 0)\n+\t    length += 2;\n+\t}\n+      break;\n+    case SImode:\n+      /* First, see if we can finish with one insn.\n+\n+\t If code is either AND or XOR, we exclude two special cases,\n+\t 0xffffff00 and 0xffff00ff, because insns like sub.w or not.w\n+\t can do a better job.  */\n+      if ((TARGET_H8300H || TARGET_H8300S)\n+\t  && ((det & 0x0000ffff) != 0)\n+\t  && ((det & 0xffff0000) != 0)\n+\t  && (code == IOR || det != 0xffffff00)\n+\t  && (code == IOR || det != 0xffff00ff))\n+\t{\n+\t  if (REG_P (operands[2]))\n+\t    length += 4;\n+\t  else\n+\t    length += 6;\n+\t}\n+      else\n+\t{\n+\t  /* Take care of the lower and upper words individually.  For\n+\t     each word, we try different methods in the order of\n+\n+\t     1) the special insn (in case of AND or XOR),\n+\t     2) the word-wise insn, and\n+\t     3) The byte-wise insn.  */\n+\t  if ((det & 0x0000ffff) == 0x0000ffff\n+\t      && (TARGET_H8300 ? (code == AND) : (code != IOR)))\n+\t    {\n+\t      length += 2;\n+\t    }\n+\t  else if ((TARGET_H8300H || TARGET_H8300S)\n+\t\t   && ((det & 0x000000ff) != 0)\n+\t\t   && ((det & 0x0000ff00) != 0))\n+\t    {\n+\t      length += 4;\n+\t    }\n+\t  else\n+\t    {\n+\t      if ((det & 0x000000ff) != 0)\n+\t\tlength += 2;\n+\n+\t      if ((det & 0x0000ff00) != 0)\n+\t\tlength += 2;\n+\t    }\n+\n+\t  if ((det & 0xffff0000) == 0xffff0000\n+\t      && (TARGET_H8300 ? (code == AND) : (code != IOR)))\n+\t    {\n+\t      length += 2;\n+\t    }\n+\t  else if (TARGET_H8300H || TARGET_H8300S)\n+\t    {\n+\t      if ((det & 0xffff0000) != 0)\n+\t\tlength += 4;\n+\t    }\n+\t  else\n+\t    {\n+\t      if ((det & 0x00ff0000) != 0)\n+\t\tlength += 2;\n+\n+\t      if ((det & 0xff000000) != 0)\n+\t\tlength += 2;\n+\t    }\n+\t}\n+      break;\n+    default:\n+      abort ();\n+    }\n+  return length;\n+}\n \f\n /* Shifts.\n "}, {"sha": "a711d2985d8e2a24f43b2e31901a692f0aa9e5bb", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40367e2d81cd7c78a253eb9264ea63cc8376ec48/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40367e2d81cd7c78a253eb9264ea63cc8376ec48/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=40367e2d81cd7c78a253eb9264ea63cc8376ec48", "patch": "@@ -1039,7 +1039,8 @@\n \t\t(match_operand:HI 2 \"nonmemory_operand\" \"rn\")))]\n   \"TARGET_H8300\"\n   \"* return output_logical_op (HImode, AND, operands);\"\n-  [(set_attr \"length\" \"4\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_logical_op_length (HImode, AND, operands)\"))\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"\"\n@@ -1048,7 +1049,8 @@\n \t\t(match_operand:HI 2 \"nonmemory_operand\" \"r,n\")))]\n   \"TARGET_H8300H || TARGET_H8300S\"\n   \"* return output_logical_op (HImode, AND, operands);\"\n-  [(set_attr \"length\" \"2,4\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_logical_op_length (HImode, AND, operands)\"))\n    (set_attr \"cc\" \"set_znv,clobber\")])\n \n (define_insn \"*andorhi3\"\n@@ -1083,7 +1085,8 @@\n \t\t(match_operand:SI 2 \"nonmemory_operand\" \"rn\")))]\n   \"TARGET_H8300\"\n   \"* return output_logical_op (SImode, AND, operands);\"\n-  [(set_attr \"length\" \"8\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_logical_op_length (SImode, AND, operands)\"))\n    (set_attr \"cc\" \"clobber\")])\n \n (define_insn \"\"\n@@ -1092,7 +1095,8 @@\n \t\t(match_operand:SI 2 \"nonmemory_operand\" \"r,n\")))]\n   \"TARGET_H8300H || TARGET_H8300S\"\n   \"* return output_logical_op (SImode, AND, operands);\"\n-  [(set_attr \"length\" \"4,6\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_logical_op_length (SImode, AND, operands)\"))\n    (set_attr \"cc\" \"set_znv,clobber\")])\n \n ;; ----------------------------------------------------------------------\n@@ -1147,7 +1151,8 @@\n \t\t(match_operand:HI 2 \"general_operand\" \"J,rn\")))]\n   \"TARGET_H8300\"\n   \"* return output_logical_op (HImode, IOR, operands);\"\n-  [(set_attr \"length\" \"2,4\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_logical_op_length (HImode, IOR, operands)\"))\n    (set_attr \"cc\" \"clobber,clobber\")])\n \n (define_insn \"\"\n@@ -1156,7 +1161,8 @@\n \t\t(match_operand:HI 2 \"general_operand\" \"J,r,n\")))]\n   \"TARGET_H8300H || TARGET_H8300S\"\n   \"* return output_logical_op (HImode, IOR, operands);\"\n-  [(set_attr \"length\" \"2,2,4\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_logical_op_length (HImode, IOR, operands)\"))\n    (set_attr \"cc\" \"clobber,set_znv,clobber\")])\n \n (define_expand \"iorsi3\"\n@@ -1172,7 +1178,8 @@\n \t\t(match_operand:SI 2 \"nonmemory_operand\" \"J,rn\")))]\n   \"TARGET_H8300\"\n   \"* return output_logical_op (SImode, IOR, operands);\"\n-  [(set_attr \"length\" \"2,8\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_logical_op_length (SImode, IOR, operands)\"))\n    (set_attr \"cc\" \"clobber,clobber\")])\n \n (define_insn \"\"\n@@ -1181,7 +1188,8 @@\n \t\t(match_operand:SI 2 \"nonmemory_operand\" \"J,r,n\")))]\n   \"TARGET_H8300H || TARGET_H8300S\"\n   \"* return output_logical_op (SImode, IOR, operands);\"\n-  [(set_attr \"length\" \"2,4,6\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_logical_op_length (SImode, IOR, operands)\"))\n    (set_attr \"cc\" \"clobber,set_znv,clobber\")])\n \n ;; ----------------------------------------------------------------------\n@@ -1236,7 +1244,8 @@\n \t\t(match_operand:HI 2 \"nonmemory_operand\" \"J,rn\")))]\n   \"TARGET_H8300\"\n   \"* return output_logical_op (HImode, XOR, operands);\"\n-  [(set_attr \"length\" \"2,4\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_logical_op_length (HImode, XOR, operands)\"))\n    (set_attr \"cc\" \"clobber,clobber\")])\n \n (define_insn \"\"\n@@ -1245,7 +1254,8 @@\n \t\t(match_operand:HI 2 \"nonmemory_operand\" \"J,r,n\")))]\n   \"TARGET_H8300H || TARGET_H8300S\"\n   \"* return output_logical_op (HImode, XOR, operands);\"\n-  [(set_attr \"length\" \"2,2,4\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_logical_op_length (HImode, XOR, operands)\"))\n    (set_attr \"cc\" \"clobber,set_znv,clobber\")])\n \n (define_expand \"xorsi3\"\n@@ -1261,7 +1271,8 @@\n \t\t(match_operand:SI 2 \"nonmemory_operand\" \"J,rn\")))]\n   \"TARGET_H8300\"\n   \"* return output_logical_op (SImode, XOR, operands);\"\n-  [(set_attr \"length\" \"2,8\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_logical_op_length (SImode, XOR, operands)\"))\n    (set_attr \"cc\" \"clobber,clobber\")])\n \n (define_insn \"\"\n@@ -1270,7 +1281,8 @@\n \t\t(match_operand:SI 2 \"nonmemory_operand\" \"J,r,n\")))]\n   \"TARGET_H8300H || TARGET_H8300S\"\n   \"* return output_logical_op (SImode, XOR, operands);\"\n-  [(set_attr \"length\" \"2,4,6\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_logical_op_length (SImode, XOR, operands)\"))\n    (set_attr \"cc\" \"clobber,set_znv,clobber\")])\n \f\n ;; ----------------------------------------------------------------------"}]}