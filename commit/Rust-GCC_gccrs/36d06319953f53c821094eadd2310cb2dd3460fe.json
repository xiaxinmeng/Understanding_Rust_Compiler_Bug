{"sha": "36d06319953f53c821094eadd2310cb2dd3460fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZkMDYzMTk5NTNmNTNjODIxMDk0ZWFkZDIzMTBjYjJkZDM0NjBmZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-05-05T18:49:39Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-05-05T18:49:39Z"}, "message": "compiler: Use backend interface for set and use temporaries.\n\nFrom-SVN: r210077", "tree": {"sha": "126773431519ae5c336b2b7f61849c6f57c086bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/126773431519ae5c336b2b7f61849c6f57c086bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36d06319953f53c821094eadd2310cb2dd3460fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d06319953f53c821094eadd2310cb2dd3460fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36d06319953f53c821094eadd2310cb2dd3460fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d06319953f53c821094eadd2310cb2dd3460fe/comments", "author": null, "committer": null, "parents": [{"sha": "92a87cb7ff2c62403af3fe5d229d51af660c6c73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a87cb7ff2c62403af3fe5d229d51af660c6c73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92a87cb7ff2c62403af3fe5d229d51af660c6c73"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "c52b3968c2c3227de80ea9911c2b4dfd69acbed1", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36d06319953f53c821094eadd2310cb2dd3460fe/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36d06319953f53c821094eadd2310cb2dd3460fe/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=36d06319953f53c821094eadd2310cb2dd3460fe", "patch": "@@ -890,16 +890,16 @@ Set_and_use_temporary_expression::do_address_taken(bool)\n tree\n Set_and_use_temporary_expression::do_get_tree(Translate_context* context)\n {\n-  Bvariable* bvar = this->statement_->get_backend_variable(context);\n-  tree var_tree = var_to_tree(bvar);\n-  tree expr_tree = this->expr_->get_tree(context);\n-  if (var_tree == error_mark_node || expr_tree == error_mark_node)\n-    return error_mark_node;\n   Location loc = this->location();\n-  return build2_loc(loc.gcc_location(), COMPOUND_EXPR, TREE_TYPE(var_tree),\n-\t\t    build2_loc(loc.gcc_location(), MODIFY_EXPR, void_type_node,\n-\t\t\t       var_tree, expr_tree),\n-\t\t    var_tree);\n+  Gogo* gogo = context->gogo();\n+  Bvariable* bvar = this->statement_->get_backend_variable(context);\n+  Bexpression* var_ref = gogo->backend()->var_expression(bvar, loc);\n+\n+  Bexpression* bexpr = tree_to_expr(this->expr_->get_tree(context));\n+  Bstatement* set = gogo->backend()->assignment_statement(var_ref, bexpr, loc);\n+  var_ref = gogo->backend()->var_expression(bvar, loc);\n+  Bexpression* ret = gogo->backend()->compound_expression(set, var_ref, loc);\n+  return expr_to_tree(ret);\n }\n \n // Dump."}]}