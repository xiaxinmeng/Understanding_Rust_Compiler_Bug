{"sha": "de397a3d0a7388314eab3f1ddfb0062d0375bb08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUzOTdhM2QwYTczODgzMTRlYWIzZjFkZGZiMDA2MmQwMzc1YmIwOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T18:05:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T18:05:19Z"}, "message": "restrict.ads, [...] (Restriction_Active): Now returns False if only a restriction warning is active for the given restriction.\n\n2006-10-31  Arnaud Charlet  <charlet@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\n\t* restrict.ads, restrict.adb (Restriction_Active): Now returns False if\n\tonly a restriction warning is active for the given restriction. This is\n\tdesirable because we do not want to modify code in the case where only\n\ta warning is set.\n\t(Set_Profile_Restrictions): Make sure that a Profile_Warnings never\n\tcauses overriding of real restrictions.\n\tTake advantage of new No_Restrictions constant.\n\n\t* raise.h: (__gnat_set_globals): Change profile.\n\nFrom-SVN: r118295", "tree": {"sha": "7e8babcc62128fb11dce00aba20ff8ee49859956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e8babcc62128fb11dce00aba20ff8ee49859956"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de397a3d0a7388314eab3f1ddfb0062d0375bb08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de397a3d0a7388314eab3f1ddfb0062d0375bb08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de397a3d0a7388314eab3f1ddfb0062d0375bb08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de397a3d0a7388314eab3f1ddfb0062d0375bb08/comments", "author": null, "committer": null, "parents": [{"sha": "d3879a5ac87281a37f1dacb36c4ce3bfa6c329e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3879a5ac87281a37f1dacb36c4ce3bfa6c329e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3879a5ac87281a37f1dacb36c4ce3bfa6c329e2"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "b62f2309466427afcf8aba92d49a4ba6217f4222", "filename": "gcc/ada/raise.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de397a3d0a7388314eab3f1ddfb0062d0375bb08/gcc%2Fada%2Fraise.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de397a3d0a7388314eab3f1ddfb0062d0375bb08/gcc%2Fada%2Fraise.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise.h?ref=de397a3d0a7388314eab3f1ddfb0062d0375bb08", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2005, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2006, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -64,10 +64,7 @@ extern void __gnat_free\t\t\t(void *);\n extern void *__gnat_realloc\t\t(void *, __SIZE_TYPE__);\n extern void __gnat_finalize\t\t(void);\n extern void set_gnat_exit_status\t(int);\n-extern void __gnat_set_globals\t\t(int, int,\n-\t\t\t\t\t\t char, char, char, char,\n-\t\t\t\t\t\t char *, char *,\n-\t\t\t\t\t\t int, int, int, int, int, int);\n+extern void __gnat_set_globals\t\t(void);\n extern void __gnat_initialize\t\t(void *);\n extern void __gnat_init_float\t\t(void);\n extern void __gnat_install_handler\t(void);"}, {"sha": "93fd6f0b0454018bffdad707f22716d473169297", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de397a3d0a7388314eab3f1ddfb0062d0375bb08/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de397a3d0a7388314eab3f1ddfb0062d0375bb08/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=de397a3d0a7388314eab3f1ddfb0062d0375bb08", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -484,7 +484,7 @@ package body Restrict is\n \n    function Restriction_Active (R : All_Restrictions) return Boolean is\n    begin\n-      return Restrictions.Set (R);\n+      return Restrictions.Set (R) and then not Restriction_Warnings (R);\n    end Restriction_Active;\n \n    ---------------------\n@@ -570,13 +570,27 @@ package body Restrict is\n    begin\n       for J in R'Range loop\n          if R (J) then\n-            if J in All_Boolean_Restrictions then\n-               Set_Restriction (J, N);\n-            else\n-               Set_Restriction (J, N, V (J));\n-            end if;\n+            declare\n+               Already_Restricted : constant Boolean := Restriction_Active (J);\n+\n+            begin\n+               --  Set the restriction\n+\n+               if J in All_Boolean_Restrictions then\n+                  Set_Restriction (J, N);\n+               else\n+                  Set_Restriction (J, N, V (J));\n+               end if;\n+\n+               --  Set warning flag, except that we do not set the warning\n+               --  flag if the restriction was already active and this is\n+               --  the warning case. That avoids a warning overriding a real\n+               --  restriction, which should never happen.\n \n-            Restriction_Warnings (J) := Warn;\n+               if not (Warn and Already_Restricted) then\n+                  Restriction_Warnings (J) := Warn;\n+               end if;\n+            end;\n          end if;\n       end loop;\n    end Set_Profile_Restrictions;\n@@ -607,12 +621,11 @@ package body Restrict is\n          Restrictions_Loc (R) := Sloc (N);\n       end if;\n \n-      --  Record the restriction if we are in the main unit,\n-      --  or in the extended main unit. The reason that we\n-      --  test separately for Main_Unit is that gnat.adc is\n-      --  processed with Current_Sem_Unit = Main_Unit, but\n-      --  nodes in gnat.adc do not appear to be the extended\n-      --  main source unit (they probably should do ???)\n+      --  Record the restriction if we are in the main unit, or in the extended\n+      --  main unit. The reason that we test separately for Main_Unit is that\n+      --  gnat.adc is processed with Current_Sem_Unit = Main_Unit, but nodes in\n+      --  gnat.adc do not appear to be in the extended main source unit (they\n+      --  probably should do ???)\n \n       if Current_Sem_Unit = Main_Unit\n         or else In_Extended_Main_Source_Unit (N)\n@@ -698,7 +711,7 @@ package body Restrict is\n          end if;\n       end loop;\n \n-      --  Entry is in table\n+      --  Entry is not currently in table\n \n       No_Dependence.Append ((Unit, Warn));\n    end Set_Restriction_No_Dependence;"}, {"sha": "063de24955e8b9fb2400e96779f7bca5d533b83f", "filename": "gcc/ada/restrict.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de397a3d0a7388314eab3f1ddfb0062d0375bb08/gcc%2Fada%2Frestrict.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de397a3d0a7388314eab3f1ddfb0062d0375bb08/gcc%2Fada%2Frestrict.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.ads?ref=de397a3d0a7388314eab3f1ddfb0062d0375bb08", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@ with Uintp;  use Uintp;\n \n package Restrict is\n \n-   Restrictions : Restrictions_Info;\n+   Restrictions : Restrictions_Info := No_Restrictions;\n    --  This variable records restrictions found in any units in the main\n    --  extended unit, and in the case of restrictions checked for partition\n    --  consistency, restrictions found in any with'ed units, parent specs\n@@ -50,7 +50,7 @@ package Restrict is\n    --  pragma, and a value of System_Location is used for restrictions\n    --  set from package Standard by the processing in Targparm.\n \n-   Main_Restrictions : Restrictions_Info;\n+   Main_Restrictions : Restrictions_Info := No_Restrictions;\n    --  This variable records only restrictions found in any units of the\n    --  main extended unit. These are the variables used for ali file output,\n    --  since we want the binder to be able to accurately diagnose inter-unit\n@@ -243,7 +243,9 @@ package Restrict is\n    pragma Inline (Restriction_Active);\n    --  Determines if a given restriction is active. This call should only be\n    --  used where the compiled code depends on whether the restriction is\n-   --  active. Always use Check_Restriction to record a violation.\n+   --  active. Always use Check_Restriction to record a violation. Note that\n+   --  this returns False if we only have a Restriction_Warnings set, since\n+   --  restriction warnings should never affect generated code.\n \n    function Restricted_Profile return Boolean;\n    --  Tests if set of restrictions corresponding to Profile (Restricted) is"}]}