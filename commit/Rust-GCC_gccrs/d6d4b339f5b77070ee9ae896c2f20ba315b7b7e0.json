{"sha": "d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZkNGIzMzlmNWI3NzA3MGVlOWFlODk2YzJmMjBiYTMxNWI3YjdlMA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-02T21:21:33Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-03-04T03:44:35Z"}, "message": "libstdc++: Add a move-only testsuite iterator type\n\nThis adds a move-only testsuite iterator wrapper to <testsuite_iterators.h>\nwhich will be used in the tests for LWG 3355.  The tests for LWG 3389 and 3390\nare adjusted to use this new iterator wrapper.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/util/testsuite_iterators.h (input_iterator_wrapper_nocopy):\n\tNew testsuite iterator.\n\t* testsuite/24_iterators/counted_iterator/lwg3389.cc: Use it.\n\t* testsuite/24_iterators/move_iterator/lwg3390.cc: Likewise.", "tree": {"sha": "f8dcc2fce2e8444e5e009902613f0fade57cf0ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8dcc2fce2e8444e5e009902613f0fade57cf0ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0/comments", "author": null, "committer": null, "parents": [{"sha": "05779e2c89e06d09a6b685797e87723f7906a5ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05779e2c89e06d09a6b685797e87723f7906a5ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05779e2c89e06d09a6b685797e87723f7906a5ce"}], "stats": {"total": 103, "additions": 37, "deletions": 66}, "files": [{"sha": "1d68f7ceaace3a29a6971ce437ddbad3fcbba528", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0", "patch": "@@ -1,5 +1,10 @@\n 2020-03-04  Patrick Palka  <ppalka@redhat.com>\n \n+\t* testsuite/util/testsuite_iterators.h (input_iterator_wrapper_nocopy):\n+\tNew testsuite iterator.\n+\t* testsuite/24_iterators/counted_iterator/lwg3389.cc: use it.\n+\t* testsuite/24_iterators/move_iterator/lwg3390.cc: Likewise.\n+\n \t* include/bits/ranges_uninitialized.h\n \t(uninitialized_copy_fn::operator()): Pass a reference type as the first\n \targument to is_nothrow_assignable_v."}, {"sha": "8b9bf53f6c5af57853831189b73ed3e2b1f4bb61", "filename": "libstdc++-v3/testsuite/24_iterators/counted_iterator/lwg3389.cc", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcounted_iterator%2Flwg3389.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcounted_iterator%2Flwg3389.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcounted_iterator%2Flwg3389.cc?ref=d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0", "patch": "@@ -23,44 +23,13 @@\n #include <testsuite_iterators.h>\n \n using __gnu_test::test_range;\n-using __gnu_test::input_iterator_wrapper;\n-\n-template<typename T>\n-struct move_only_wrapper : input_iterator_wrapper<T>\n-{\n-  using input_iterator_wrapper<T>::input_iterator_wrapper;\n-\n-  move_only_wrapper()\n-    : input_iterator_wrapper<T>(nullptr, nullptr)\n-  { }\n-\n-  move_only_wrapper(const move_only_wrapper&) = delete;\n-  move_only_wrapper&\n-  operator=(const move_only_wrapper&) = delete;\n-\n-  move_only_wrapper(move_only_wrapper&&) = default;\n-  move_only_wrapper&\n-  operator=(move_only_wrapper&&) = default;\n-\n-  using input_iterator_wrapper<T>::operator++;\n-\n-  move_only_wrapper&\n-  operator++()\n-  {\n-    input_iterator_wrapper<T>::operator++();\n-    return *this;\n-  }\n-};\n-\n-static_assert(std::input_iterator<move_only_wrapper<int>>);\n-static_assert(!std::forward_iterator<move_only_wrapper<int>>);\n-static_assert(!std::copyable<move_only_wrapper<int>>);\n+using __gnu_test::input_iterator_wrapper_nocopy;\n \n // LWG 3389\n void\n test01()\n {\n   int x[] = {1,2,3,4};\n-  test_range<int, move_only_wrapper> rx(x);\n+  test_range<int, input_iterator_wrapper_nocopy> rx(x);\n   auto it = std::counted_iterator(rx.begin(), 2);\n }"}, {"sha": "7e9f4a0d0cce71f161be838cb083cbd05104dab1", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/lwg3390.cc", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Flwg3390.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Flwg3390.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Flwg3390.cc?ref=d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0", "patch": "@@ -23,44 +23,13 @@\n #include <testsuite_iterators.h>\n \n using __gnu_test::test_range;\n-using __gnu_test::input_iterator_wrapper;\n-\n-template<typename T>\n-struct move_only_wrapper : input_iterator_wrapper<T>\n-{\n-  using input_iterator_wrapper<T>::input_iterator_wrapper;\n-\n-  move_only_wrapper()\n-    : input_iterator_wrapper<T>(nullptr, nullptr)\n-  { }\n-\n-  move_only_wrapper(const move_only_wrapper&) = delete;\n-  move_only_wrapper&\n-  operator=(const move_only_wrapper&) = delete;\n-\n-  move_only_wrapper(move_only_wrapper&&) = default;\n-  move_only_wrapper&\n-  operator=(move_only_wrapper&&) = default;\n-\n-  using input_iterator_wrapper<T>::operator++;\n-\n-  move_only_wrapper&\n-  operator++()\n-  {\n-    input_iterator_wrapper<T>::operator++();\n-    return *this;\n-  }\n-};\n-\n-static_assert(std::input_iterator<move_only_wrapper<int>>);\n-static_assert(!std::forward_iterator<move_only_wrapper<int>>);\n-static_assert(!std::copyable<move_only_wrapper<int>>);\n+using __gnu_test::input_iterator_wrapper_nocopy;\n \n // LWG 3390\n void\n test01()\n {\n   int x[] = {1,2,3,4};\n-  test_range<int, move_only_wrapper> rx(x);\n+  test_range<int, input_iterator_wrapper_nocopy> rx(x);\n   auto it = std::make_move_iterator(rx.begin());\n }"}, {"sha": "e47b2b03e4088c6d0efbf2cc64a01048faff87e9", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=d6d4b339f5b77070ee9ae896c2f20ba315b7b7e0", "patch": "@@ -674,6 +674,34 @@ namespace __gnu_test\n       { return iter -= n; }\n     };\n \n+  // A move-only input iterator type.\n+  template<typename T>\n+    struct input_iterator_wrapper_nocopy : input_iterator_wrapper<T>\n+    {\n+      using input_iterator_wrapper<T>::input_iterator_wrapper;\n+\n+      input_iterator_wrapper_nocopy()\n+\t: input_iterator_wrapper<T>(nullptr, nullptr)\n+      { }\n+\n+      input_iterator_wrapper_nocopy(const input_iterator_wrapper_nocopy&) = delete;\n+      input_iterator_wrapper_nocopy&\n+      operator=(const input_iterator_wrapper_nocopy&) = delete;\n+\n+      input_iterator_wrapper_nocopy(input_iterator_wrapper_nocopy&&) = default;\n+      input_iterator_wrapper_nocopy&\n+      operator=(input_iterator_wrapper_nocopy&&) = default;\n+\n+      using input_iterator_wrapper<T>::operator++;\n+\n+      input_iterator_wrapper_nocopy&\n+      operator++()\n+      {\n+\tinput_iterator_wrapper<T>::operator++();\n+\treturn *this;\n+      }\n+    };\n+\n   // A type meeting the minimum std::range requirements\n   template<typename T, template<typename> class Iter>\n     class test_range"}]}