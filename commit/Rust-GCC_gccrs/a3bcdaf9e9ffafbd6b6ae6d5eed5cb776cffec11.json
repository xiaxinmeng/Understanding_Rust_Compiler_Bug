{"sha": "a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNiY2RhZjllOWZmYWZiZDZiNmFlNmQ1ZWVkNWNiNzc2Y2ZmZWMxMQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2000-09-05T21:57:23Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-09-05T21:57:23Z"}, "message": "natPlainDatagramSocketImpl.cc: Change various `JvThrow' calls to `throw'.\n\n2000-09-05  Bryce McKinlay  <bryce@albatross.co.nz>\n\n\t* java/net/natPlainDatagramSocketImpl.cc: Change various `JvThrow'\n\tcalls to `throw'.\n\t(send): Undo last patch.\n\tRemove the label only.\n\t(mcastGrp): Ditto.\n\t* java/net/natPlainSocketImpl.cc: Change various `JvThrow' calls to\n\t`throw'.\n\t* java/net/natInetAdress.cc: Ditto.\n\nFrom-SVN: r36165", "tree": {"sha": "1391087a45850c663d5247b3a668632e9b580159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1391087a45850c663d5247b3a668632e9b580159"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11/comments", "author": null, "committer": null, "parents": [{"sha": "2f31ed7e8857e32683c7111ae8a4671089e3a740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f31ed7e8857e32683c7111ae8a4671089e3a740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f31ed7e8857e32683c7111ae8a4671089e3a740"}], "stats": {"total": 194, "additions": 114, "deletions": 80}, "files": [{"sha": "9088206d7cff57826877dfbdac7f83f13f32f5c7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11", "patch": "@@ -1,3 +1,14 @@\n+2000-09-05  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\t* java/net/natPlainDatagramSocketImpl.cc: Change various `JvThrow'\n+\tcalls to `throw'.\n+\t(send): Undo last patch. \n+\tRemove the label only.\n+\t(mcastGrp): Ditto.\n+\t* java/net/natPlainSocketImpl.cc: Change various `JvThrow' calls to \n+\t`throw'.\n+\t* java/net/natInetAdress.cc: Ditto.\n+\n 2000-09-05  Tom Tromey  <tromey@cygnus.com>\n \n \t* doc/cni.sgml: Updated from master copy."}, {"sha": "d8db576f5065d0e9acd3593656bd1a1248b75939", "filename": "libjava/java/net/natInetAddress.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11/libjava%2Fjava%2Fnet%2FnatInetAddress.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11/libjava%2Fjava%2Fnet%2FnatInetAddress.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatInetAddress.cc?ref=a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11", "patch": "@@ -256,7 +256,7 @@ java::net::InetAddress::lookup (jstring host, java::net::InetAddress* iaddr,\n       if (ex != NULL)\n \t{\n \t  if (iaddr == NULL || iaddr->address == NULL)\n-\t    JvThrow (ex);\n+\t    throw ex;\n \t  hptr = NULL;\n \t}\n     }\n@@ -268,7 +268,7 @@ java::net::InetAddress::lookup (jstring host, java::net::InetAddress* iaddr,\n \t  return NULL;\n \t}\n       else\n-\tJvThrow (new java::net::UnknownHostException(host));\n+\tthrow new java::net::UnknownHostException(host);\n     }\n   int count;\n   if (all)"}, {"sha": "0ea5ab16be4796d900761523c562d99a701160cb", "filename": "libjava/java/net/natPlainDatagramSocketImpl.cc", "status": "modified", "additions": 56, "deletions": 40, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainDatagramSocketImpl.cc?ref=a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11", "patch": "@@ -60,62 +60,72 @@ extern java::lang::Class IntegerClass;\n void\n java::net::PlainDatagramSocketImpl::create ()\n {\n-  JvThrow (new SocketException (JvNewStringLatin1 (\"DatagramSocketImpl.create: unimplemented\")));\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.create: unimplemented\"));\n }\n \n void\n java::net::PlainDatagramSocketImpl::bind (jint, java::net::InetAddress *)\n {\n-  JvThrow (new BindException (JvNewStringLatin1 (\"DatagramSocketImpl.bind: unimplemented\")));\n+  throw new BindException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.bind: unimplemented\"));\n }\n \n jint\n java::net::PlainDatagramSocketImpl::peek (java::net::InetAddress *)\n {\n-  JvThrow (new java::io::IOException (JvNewStringLatin1 (\"DatagramSocketImpl.peek: unimplemented\")));\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.peek: unimplemented\"));\n }\n \n void\n java::net::PlainDatagramSocketImpl::send (java::net::DatagramPacket *)\n {\n-  JvThrow (new java::io::IOException (JvNewStringLatin1 (\"DatagramSocketImpl.send: unimplemented\")));\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.send: unimplemented\"));\n }\n \n void\n java::net::PlainDatagramSocketImpl::receive (java::net::DatagramPacket *)\n {\n-  JvThrow (new java::io::IOException (JvNewStringLatin1 (\"DatagramSocketImpl.receive: unimplemented\")));\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.receive: unimplemented\"));\n }\n \n void\n java::net::PlainDatagramSocketImpl::setTimeToLive (jint)\n {\n-  JvThrow (new java::io::IOException (JvNewStringLatin1 (\"DatagramSocketImpl.setTimeToLive: unimplemented\")));\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.setTimeToLive: unimplemented\"));\n }\n \n jint\n java::net::PlainDatagramSocketImpl::getTimeToLive ()\n {\n-  JvThrow (new java::io::IOException (JvNewStringLatin1 (\"DatagramSocketImpl.getTimeToLive: unimplemented\")));\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.getTimeToLive: unimplemented\"));\n }\n \n void\n java::net::PlainDatagramSocketImpl::mcastGrp (java::net::InetAddress *,\n \t\t\t\t\t      jboolean)\n {\n-  JvThrow (new java::io::IOException (JvNewStringLatin1 (\"DatagramSocketImpl.mcastGrp: unimplemented\")));\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.mcastGrp: unimplemented\"));\n }\n \n void\n java::net::PlainDatagramSocketImpl::setOption (jint, java::lang::Object *)\n {\n-  JvThrow (new SocketException (JvNewStringLatin1 (\"DatagramSocketImpl.setOption: unimplemented\")));\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.setOption: unimplemented\"));\n }\n \n java::lang::Object *\n java::net::PlainDatagramSocketImpl::getOption (jint)\n {\n-  JvThrow (new SocketException (JvNewStringLatin1 (\"DatagramSocketImpl.getOption: unimplemented\")));\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"DatagramSocketImpl.getOption: unimplemented\"));\n }\n \n #else /* DISABLE_JAVA_NET */\n@@ -161,7 +171,7 @@ java::net::PlainDatagramSocketImpl::create ()\n   if (sock < 0)\n     {\n       char* strerr = strerror (errno);\n-      JvThrow (new java::net::SocketException (JvNewStringUTF (strerr)));\n+      throw new java::net::SocketException (JvNewStringUTF (strerr));\n     }\n   fnum = sock;\n   fd = new java::io::FileDescriptor (sock);\n@@ -214,7 +224,7 @@ java::net::PlainDatagramSocketImpl::bind (jint lport,\n     }\n  error:\n   char* strerr = strerror (errno);\n-  JvThrow (new java::net::BindException (JvNewStringUTF (strerr)));\n+  throw new java::net::BindException (JvNewStringUTF (strerr));\n }\n \n jint\n@@ -252,7 +262,7 @@ java::net::PlainDatagramSocketImpl::peek (java::net::InetAddress *i)\n   return rport;\n  error:\n   char* strerr = strerror (errno);\n-  JvThrow (new java::io::IOException (JvNewStringUTF (strerr)));\n+  throw new java::io::IOException (JvNewStringUTF (strerr));\n }\n \n void\n@@ -287,6 +297,9 @@ java::net::PlainDatagramSocketImpl::send (java::net::DatagramPacket *p)\n \n   if (::sendto (fnum, (char *) dbytes, p->getLength(), 0, ptr, len) >= 0)\n     return;\n+\n+  char* strerr = strerror (errno);\n+  throw new java::io::IOException (JvNewStringUTF (strerr));\n }\n \n void\n@@ -311,7 +324,7 @@ java::net::PlainDatagramSocketImpl::receive (java::net::DatagramPacket *p)\n       if ((retval = _Jv_select (fnum + 1, &rset, NULL, NULL, &tv)) < 0)\n \tgoto error;\n       else if (retval == 0)\n-\tJvThrow (new java::io::InterruptedIOException ());\n+\tthrow new java::io::InterruptedIOException ();\n     }\n \n   retlen =\n@@ -345,7 +358,7 @@ java::net::PlainDatagramSocketImpl::receive (java::net::DatagramPacket *p)\n   return;\n  error:\n   char* strerr = strerror (errno);\n-  JvThrow (new java::io::IOException (JvNewStringUTF (strerr)));\n+  throw new java::io::IOException (JvNewStringUTF (strerr));\n }\n \n void\n@@ -358,7 +371,7 @@ java::net::PlainDatagramSocketImpl::setTimeToLive (jint ttl)\n     return;\n \n   char* strerr = strerror (errno);\n-  JvThrow (new java::io::IOException (JvNewStringUTF (strerr)));\n+  throw new java::io::IOException (JvNewStringUTF (strerr));\n }\n \n jint\n@@ -371,7 +384,7 @@ java::net::PlainDatagramSocketImpl::getTimeToLive ()\n     return ((int) val) & 0xFF;\n \n   char* strerr = strerror (errno);\n-  JvThrow (new java::io::IOException (JvNewStringUTF (strerr)));\n+  throw new java::io::IOException (JvNewStringUTF (strerr));\n }\n \n void\n@@ -415,8 +428,11 @@ java::net::PlainDatagramSocketImpl::mcastGrp (java::net::InetAddress *inetaddr,\n   else\n     throw new java::net::SocketException (JvNewStringUTF (\"invalid length\"));\n \n-  if (::setsockopt (fnum, level, opname, ptr, len) == 0)\n+  if (::setsockopt (fnum, level, opname, ptr, len) != 0)\n     return;\n+\n+  char* strerr = strerror (errno);\n+  throw new java::io::IOException (JvNewStringUTF (strerr));\n }\n \n void\n@@ -443,12 +459,12 @@ java::net::PlainDatagramSocketImpl::setOption (jint optID,\n   switch (optID) \n     {\n       case _Jv_TCP_NODELAY_ :\n-        JvThrow (new java::net::SocketException (\n-          JvNewStringUTF (\"TCP_NODELAY not valid for UDP\")));      \n+        throw new java::net::SocketException (\n+          JvNewStringUTF (\"TCP_NODELAY not valid for UDP\"));\n         return;\n       case _Jv_SO_LINGER_ :\n-        JvThrow (new java::net::SocketException (\n-          JvNewStringUTF (\"SO_LINGER not valid for UDP\")));      \n+        throw new java::net::SocketException (\n+          JvNewStringUTF (\"SO_LINGER not valid for UDP\"));\n         return;\n       case _Jv_SO_SNDBUF_ :\n       case _Jv_SO_RCVBUF_ :\n@@ -458,8 +474,8 @@ java::net::PlainDatagramSocketImpl::setOption (jint optID,\n         if (::setsockopt (fnum, SOL_SOCKET, opt, (char *) &val, val_len) != 0)\n \t  goto error;    \n #else\n-        JvThrow (new java::lang::InternalError (\n-          JvNewStringUTF (\"SO_RCVBUF/SO_SNDBUF not supported\")));\n+        throw new java::lang::InternalError (\n+          JvNewStringUTF (\"SO_RCVBUF/SO_SNDBUF not supported\"));\n #endif \n         return;\n       case _Jv_SO_REUSEADDR_ :\n@@ -468,13 +484,13 @@ java::net::PlainDatagramSocketImpl::setOption (jint optID,\n \t    val_len) != 0)\n \t  goto error;\n #else\n-        JvThrow (new java::lang::InternalError (\n-          JvNewStringUTF (\"SO_REUSEADDR not supported\")));\n+        throw new java::lang::InternalError (\n+          JvNewStringUTF (\"SO_REUSEADDR not supported\"));\n #endif \n \treturn;\n       case _Jv_SO_BINDADDR_ :\n-        JvThrow (new java::net::SocketException (\n-          JvNewStringUTF (\"SO_BINDADDR: read only option\")));\n+        throw new java::net::SocketException (\n+          JvNewStringUTF (\"SO_BINDADDR: read only option\"));\n         return;\n       case _Jv_IP_MULTICAST_IF_ :\n \tunion InAddr u;\n@@ -521,7 +537,7 @@ java::net::PlainDatagramSocketImpl::setOption (jint optID,\n \n  error:\n   char* strerr = strerror (errno);\n-  JvThrow (new java::net::SocketException (JvNewStringUTF (strerr)));\n+  throw new java::net::SocketException (JvNewStringUTF (strerr));\n }\n \n java::lang::Object *\n@@ -535,13 +551,13 @@ java::net::PlainDatagramSocketImpl::getOption (jint optID)\n   switch (optID)\n     {\n       case _Jv_TCP_NODELAY_ :\n-        JvThrow (new java::net::SocketException (\n-          JvNewStringUTF (\"TCP_NODELAY not valid for UDP\")));      \n+        throw new java::net::SocketException (\n+          JvNewStringUTF (\"TCP_NODELAY not valid for UDP\"));\n         break;\n \n       case _Jv_SO_LINGER_ :\n-        JvThrow (new java::net::SocketException (\n-          JvNewStringUTF (\"SO_LINGER not valid for UDP\")));      \n+        throw new java::net::SocketException (\n+          JvNewStringUTF (\"SO_LINGER not valid for UDP\"));\n         break;    \n       case _Jv_SO_RCVBUF_ :\n       case _Jv_SO_SNDBUF_ :\n@@ -553,8 +569,8 @@ java::net::PlainDatagramSocketImpl::getOption (jint optID)\n         else\n \t  return new java::lang::Integer (val);\n #else\n-        JvThrow (new java::lang::InternalError (\n-          JvNewStringUTF (\"SO_RCVBUF/SO_SNDBUF not supported\")));\n+        throw new java::lang::InternalError (\n+          JvNewStringUTF (\"SO_RCVBUF/SO_SNDBUF not supported\"));\n #endif    \n \tbreak;\n       case _Jv_SO_BINDADDR_:\n@@ -589,8 +605,8 @@ java::net::PlainDatagramSocketImpl::getOption (jint optID)\n \t  goto error;\n \treturn new java::lang::Boolean (val != 0);\n #else\n-        JvThrow (new java::lang::InternalError (\n-          JvNewStringUTF (\"SO_REUSEADDR not supported\")));\n+        throw new java::lang::InternalError (\n+          JvNewStringUTF (\"SO_REUSEADDR not supported\"));\n #endif \n \tbreak;\n       case _Jv_IP_MULTICAST_IF_ :\n@@ -608,8 +624,8 @@ java::net::PlainDatagramSocketImpl::getOption (jint optID)\n \n \treturn java::net::InetAddress::getByName (JvNewStringLatin1 (bytes));\n #else\n-\tJvThrow (new java::net::SocketException (\n-\t  JvNewStringUTF (\"IP_MULTICAST_IF: not available - no inet_ntoa()\")));\n+\tthrow new java::net::SocketException (\n+\t  JvNewStringUTF (\"IP_MULTICAST_IF: not available - no inet_ntoa()\"));\n #endif\n \tbreak;\n       case _Jv_SO_TIMEOUT_ :\n@@ -621,7 +637,7 @@ java::net::PlainDatagramSocketImpl::getOption (jint optID)\n \n  error:\n   char* strerr = strerror (errno);\n-  JvThrow (new java::net::SocketException (JvNewStringUTF (strerr)));\n+  throw new java::net::SocketException (JvNewStringUTF (strerr));\n }\n \n #endif /* DISABLE_JAVA_NET */"}, {"sha": "ff7d8a3452f088f151279015f9e739aaddb3b402", "filename": "libjava/java/net/natPlainSocketImpl.cc", "status": "modified", "additions": 45, "deletions": 38, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FnatPlainSocketImpl.cc?ref=a3bcdaf9e9ffafbd6b6ae6d5eed5cb776cffec11", "patch": "@@ -57,43 +57,50 @@ extern java::lang::Class BooleanClass;\n void\n java::net::PlainSocketImpl::create (jboolean)\n {\n-  JvThrow (new java::io::IOException (JvNewStringLatin1 (\"SocketImpl.create: unimplemented\")));\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"SocketImpl.create: unimplemented\"));\n }\n \n void\n java::net::PlainSocketImpl::bind (java::net::InetAddress *, jint)\n {\n-  JvThrow (new BindException (JvNewStringLatin1 (\"SocketImpl.bind: unimplemented\")));\n+  throw new BindException (\n+    JvNewStringLatin1 (\"SocketImpl.bind: unimplemented\"));\n }\n \n void\n java::net::PlainSocketImpl::connect (java::net::InetAddress *, jint)\n {\n-  JvThrow (new ConnectException (JvNewStringLatin1 (\"SocketImpl.connect: unimplemented\")));\n+  throw new ConnectException (\n+    JvNewStringLatin1 (\"SocketImpl.connect: unimplemented\"));\n }\n \n void\n java::net::PlainSocketImpl::listen (jint)\n {\n-  JvThrow (new java::io::IOException (JvNewStringLatin1 (\"SocketImpl.listen: unimplemented\")));\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"SocketImpl.listen: unimplemented\"));\n }\n \n void\n java::net::PlainSocketImpl::accept (java::net::PlainSocketImpl *)\n {\n-  JvThrow (new java::io::IOException (JvNewStringLatin1 (\"SocketImpl.accept: unimplemented\")));\n+  throw new java::io::IOException (\n+    JvNewStringLatin1 (\"SocketImpl.accept: unimplemented\"));\n }\n \n void\n java::net::PlainSocketImpl::setOption (jint, java::lang::Object *)\n {\n-  JvThrow (new SocketException (JvNewStringLatin1 (\"SocketImpl.setOption: unimplemented\")));\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"SocketImpl.setOption: unimplemented\"));\n }\n \n java::lang::Object *\n java::net::PlainSocketImpl::getOption (jint)\n {\n-  JvThrow (new SocketException (JvNewStringLatin1 (\"SocketImpl.getOption: unimplemented\")));\n+  throw new SocketException (\n+    JvNewStringLatin1 (\"SocketImpl.getOption: unimplemented\"));\n }\n \n #else /* DISABLE_JAVA_NET */\n@@ -117,7 +124,7 @@ java::net::PlainSocketImpl::create (jboolean stream)\n   if (sock < 0)\n     {\n       char* strerr = strerror (errno);\n-      JvThrow (new java::io::IOException (JvNewStringUTF (strerr)));\n+      throw new java::io::IOException (JvNewStringUTF (strerr));\n     }\n   fnum = sock;\n   fd = new java::io::FileDescriptor (sock);\n@@ -172,7 +179,7 @@ java::net::PlainSocketImpl::bind (java::net::InetAddress *host, jint lport)\n     }\n  error:\n   char* strerr = strerror (errno);\n-  JvThrow (new java::net::BindException (JvNewStringUTF (strerr)));\n+  throw new java::net::BindException (JvNewStringUTF (strerr));\n }\n \n void\n@@ -218,7 +225,7 @@ java::net::PlainSocketImpl::connect (java::net::InetAddress *host, jint rport)\n   return;  \n  error:\n   char* strerr = strerror (errno);\n-  JvThrow (new java::net::ConnectException (JvNewStringUTF (strerr)));\n+  throw new java::net::ConnectException (JvNewStringUTF (strerr));\n }\n \n void\n@@ -227,7 +234,7 @@ java::net::PlainSocketImpl::listen (jint backlog)\n   if (::listen (fnum, backlog) != 0)\n     {\n       char* strerr = strerror (errno);\n-      JvThrow (new java::io::IOException (JvNewStringUTF (strerr)));\n+      throw new java::io::IOException (JvNewStringUTF (strerr));\n     }\n }\n \n@@ -251,8 +258,8 @@ java::net::PlainSocketImpl::accept (java::net::PlainSocketImpl *s)\n       if ((retval = _Jv_select (fnum + 1, &rset, NULL, NULL, &tv)) < 0)\n \tgoto error;\n       else if (retval == 0)\n-\tJvThrow (new java::io::InterruptedIOException (\n-\t         JvNewStringUTF(\"Accept timed out\")));\n+\tthrow new java::io::InterruptedIOException (\n+\t         JvNewStringUTF(\"Accept timed out\"));\n     }\n \n   new_socket = ::accept (fnum, (sockaddr*) &u, &addrlen);\n@@ -285,7 +292,7 @@ java::net::PlainSocketImpl::accept (java::net::PlainSocketImpl *s)\n   return;\n  error:\n   char* strerr = strerror (errno);\n-  JvThrow (new java::io::IOException (JvNewStringUTF (strerr)));\n+  throw new java::io::IOException (JvNewStringUTF (strerr));\n }\n \n void\n@@ -323,8 +330,8 @@ java::net::PlainSocketImpl::setOption (jint optID, java::lang::Object *value)\n \t    val_len) != 0)\n \t  goto error;    \n #else\n-        JvThrow (new java::lang::InternalError (\n-          JvNewStringUTF (\"TCP_NODELAY not supported\")));      \n+        throw new java::lang::InternalError (\n+          JvNewStringUTF (\"TCP_NODELAY not supported\"));\n #endif /* TCP_NODELAY */\n         return;\n       case _Jv_SO_LINGER_ :\n@@ -336,8 +343,8 @@ java::net::PlainSocketImpl::setOption (jint optID, java::lang::Object *value)\n \t    sizeof(l_val)) != 0)\n \t  goto error;    \n #else\n-        JvThrow (new java::lang::InternalError (\n-          JvNewStringUTF (\"SO_LINGER not supported\")));      \n+        throw new java::lang::InternalError (\n+          JvNewStringUTF (\"SO_LINGER not supported\"));\n #endif /* SO_LINGER */\n         return;\n       case _Jv_SO_SNDBUF_ :\n@@ -348,21 +355,21 @@ java::net::PlainSocketImpl::setOption (jint optID, java::lang::Object *value)\n         if (::setsockopt (fnum, SOL_SOCKET, opt, (char *) &val, val_len) != 0)\n \t  goto error;    \n #else\n-        JvThrow (new java::lang::InternalError (\n-          JvNewStringUTF (\"SO_RCVBUF/SO_SNDBUF not supported\")));\n+        throw new java::lang::InternalError (\n+          JvNewStringUTF (\"SO_RCVBUF/SO_SNDBUF not supported\"));\n #endif \n         return;\n       case _Jv_SO_BINDADDR_ :\n-        JvThrow (new java::net::SocketException (\n-          JvNewStringUTF (\"SO_BINDADDR: read only option\")));\n+        throw new java::net::SocketException (\n+          JvNewStringUTF (\"SO_BINDADDR: read only option\"));\n         return;\n       case _Jv_IP_MULTICAST_IF_ :\n-        JvThrow (new java::net::SocketException (\n-          JvNewStringUTF (\"IP_MULTICAST_IF: not valid for TCP\")));\n+        throw new java::net::SocketException (\n+          JvNewStringUTF (\"IP_MULTICAST_IF: not valid for TCP\"));\n         return;\n       case _Jv_SO_REUSEADDR_ :\n-        JvThrow (new java::net::SocketException (\n-          JvNewStringUTF (\"SO_REUSEADDR: not valid for TCP\")));\n+        throw new java::net::SocketException (\n+          JvNewStringUTF (\"SO_REUSEADDR: not valid for TCP\"));\n         return;\n       case _Jv_SO_TIMEOUT_ :\n \ttimeout = val;\n@@ -373,7 +380,7 @@ java::net::PlainSocketImpl::setOption (jint optID, java::lang::Object *value)\n \n  error:\n   char* strerr = strerror (errno);\n-  JvThrow (new java::net::SocketException (JvNewStringUTF (strerr)));\n+  throw new java::net::SocketException (JvNewStringUTF (strerr));\n }\n \n java::lang::Object *\n@@ -396,8 +403,8 @@ java::net::PlainSocketImpl::getOption (jint optID)\n         else\n \t  return new java::lang::Boolean (val != 0);\n #else\n-        JvThrow (new java::lang::InternalError (\n-          JvNewStringUTF (\"TCP_NODELAY not supported\")));      \n+        throw new java::lang::InternalError (\n+          JvNewStringUTF (\"TCP_NODELAY not supported\"));\n #endif       \n         break;\n \n@@ -411,8 +418,8 @@ java::net::PlainSocketImpl::getOption (jint optID)\n         else\n \t  return new java::lang::Boolean ((__java_boolean)false);\n #else\n-        JvThrow (new java::lang::InternalError (\n-          JvNewStringUTF (\"SO_LINGER not supported\")));      \n+        throw new java::lang::InternalError (\n+          JvNewStringUTF (\"SO_LINGER not supported\"));\n #endif\n         break;    \n       case _Jv_SO_RCVBUF_ :\n@@ -425,8 +432,8 @@ java::net::PlainSocketImpl::getOption (jint optID)\n         else\n \t  return new java::lang::Integer (val);\n #else\n-        JvThrow (new java::lang::InternalError (\n-          JvNewStringUTF (\"SO_RCVBUF/SO_SNDBUF not supported\")));\n+        throw new java::lang::InternalError (\n+          JvNewStringUTF (\"SO_RCVBUF/SO_SNDBUF not supported\"));\n #endif    \n \tbreak;\n       case _Jv_SO_BINDADDR_:\n@@ -456,12 +463,12 @@ java::net::PlainSocketImpl::getOption (jint optID)\n \treturn localAddress;\n \tbreak;\n       case _Jv_IP_MULTICAST_IF_ :\n-\tJvThrow (new java::net::SocketException (\n-\t  JvNewStringUTF (\"IP_MULTICAST_IF: not valid for TCP\")));\n+\tthrow new java::net::SocketException (\n+\t  JvNewStringUTF (\"IP_MULTICAST_IF: not valid for TCP\"));\n \tbreak;\n       case _Jv_SO_REUSEADDR_ :\n-\tJvThrow (new java::net::SocketException (\n-\t  JvNewStringUTF (\"SO_REUSEADDR: not valid for TCP\")));\n+\tthrow new java::net::SocketException (\n+\t  JvNewStringUTF (\"SO_REUSEADDR: not valid for TCP\"));\n \tbreak;\n       case _Jv_SO_TIMEOUT_ :\n \treturn new java::lang::Integer (timeout);\n@@ -472,7 +479,7 @@ java::net::PlainSocketImpl::getOption (jint optID)\n \n  error:\n   char* strerr = strerror (errno);\n-  JvThrow (new java::net::SocketException (JvNewStringUTF (strerr)));\n+  throw new java::net::SocketException (JvNewStringUTF (strerr));\n }\n \n #endif /* DISABLE_JAVA_NET */"}]}