{"sha": "91a19652f8199bfad17f77d91e9f3bfe24efc5f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFhMTk2NTJmODE5OWJmYWQxN2Y3N2Q5MWU5ZjNiZmUyNGVmYzVmMA==", "commit": {"author": {"name": "Naveen H.S", "email": "naveen.S@kpitcummins.com", "date": "2010-08-27T23:29:41Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2010-08-27T23:29:41Z"}, "message": "sh.c (push_regs): Emit movml for interrupt handler when possible.\n\n\t* config/sh/sh.c (push_regs): Emit movml for interrupt handler\n\twhen possible.\n\t(sh_expand_epilogue): Likewise.\n\t* config/sh/sh.md (movml_push_banked): New insn.\n\t(movml_pop_banked): Likewise.\n\t* gcc.dg/attr-isr.c: Skip test for -m2a.  Don't\trun on sh2a*-*-*.\n\n\nCo-Authored-By: Kaz Kojima <kkojima@gcc.gnu.org>\n\nFrom-SVN: r163602", "tree": {"sha": "7c71ab51c02bd0b1b964e45c1e9be52994d291db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c71ab51c02bd0b1b964e45c1e9be52994d291db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91a19652f8199bfad17f77d91e9f3bfe24efc5f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a19652f8199bfad17f77d91e9f3bfe24efc5f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91a19652f8199bfad17f77d91e9f3bfe24efc5f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a19652f8199bfad17f77d91e9f3bfe24efc5f0/comments", "author": null, "committer": null, "parents": [{"sha": "f8045c4158f628673fdb4b1b42cf210bd516b486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8045c4158f628673fdb4b1b42cf210bd516b486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8045c4158f628673fdb4b1b42cf210bd516b486"}], "stats": {"total": 131, "additions": 124, "deletions": 7}, "files": [{"sha": "bce04c4305238e644e8e3bbe8d54e4a11b47f3ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a19652f8199bfad17f77d91e9f3bfe24efc5f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a19652f8199bfad17f77d91e9f3bfe24efc5f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91a19652f8199bfad17f77d91e9f3bfe24efc5f0", "patch": "@@ -1,3 +1,12 @@\n+2010-08-27  Naveen H.S  <naveen.S@kpitcummins.com>\n+\t    Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (push_regs): Emit movml for interrupt handler\n+\twhen possible.\n+\t(sh_expand_epilogue): Likewise.\n+\t* config/sh/sh.md (movml_push_banked): New insn.\n+\t(movml_pop_banked): Likewise.\n+\n 2010-08-28  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* genautomata.c (gen_regexp_repeat, gen_regexp_allof,"}, {"sha": "d693351ecb4459ee436ee29eddad841783a1346a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 75, "deletions": 6, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a19652f8199bfad17f77d91e9f3bfe24efc5f0/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a19652f8199bfad17f77d91e9f3bfe24efc5f0/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=91a19652f8199bfad17f77d91e9f3bfe24efc5f0", "patch": "@@ -6407,9 +6407,50 @@ push_regs (HARD_REG_SET *mask, int interrupt_handler)\n \n   /* Push banked registers last to improve delay slot opportunities.  */\n   if (interrupt_handler)\n-    for (i = FIRST_BANKED_REG; i <= LAST_BANKED_REG; i++)\n-      if (TEST_HARD_REG_BIT (*mask, i))\n-\tpush (i);\n+    {\n+      bool use_movml = false;\n+\n+      if (TARGET_SH2A)\n+\t{\n+\t  unsigned int count = 0;\n+\n+\t  for (i = FIRST_BANKED_REG; i <= LAST_BANKED_REG; i++)\n+\t    if (TEST_HARD_REG_BIT (*mask, i))\n+\t      count++;\n+\t    else\n+\t      break;\n+\n+\t  /* Use movml when all banked registers are pushed.  */\n+\t  if (count == LAST_BANKED_REG - FIRST_BANKED_REG + 1)\n+\t    use_movml = true;\n+\t}\n+\n+      if (use_movml)\n+\t{\n+\t  rtx x, mem, reg, set;\n+\t  rtx sp_reg = gen_rtx_REG (SImode, STACK_POINTER_REGNUM);\n+\n+\t  /* We must avoid scheduling multiple store insn with another\n+\t     insns.  */\n+\t  emit_insn (gen_blockage ());\n+\t  x = gen_movml_push_banked (sp_reg);\n+\t  x = frame_insn (x);\n+\t  for (i = FIRST_BANKED_REG; i <= LAST_BANKED_REG; i++)\n+\t    {\n+\t      mem = gen_rtx_MEM (SImode, plus_constant (sp_reg, i * 4));\n+\t      reg = gen_rtx_REG (SImode, i);\n+\t      add_reg_note (x, REG_CFA_OFFSET, gen_rtx_SET (SImode, mem, reg));\n+\t    }\n+\n+\t  set = gen_rtx_SET (SImode, sp_reg, plus_constant (sp_reg, - 32));\n+\t  add_reg_note (x, REG_CFA_ADJUST_CFA, set);\n+\t  emit_insn (gen_blockage ());\n+\t}\n+      else\n+\tfor (i = FIRST_BANKED_REG; i <= LAST_BANKED_REG; i++)\n+\t  if (TEST_HARD_REG_BIT (*mask, i))\n+\t    push (i);\n+    }\n \n   /* Don't push PR register for an ISR with RESBANK attribute assigned.  */\n   if (TEST_HARD_REG_BIT (*mask, PR_REG) && !sh_cfun_resbank_handler_p ())\n@@ -7347,9 +7388,37 @@ sh_expand_epilogue (bool sibcall_p)\n \t delay slot. RTE switches banks before the ds instruction.  */\n       if (current_function_interrupt)\n \t{\n-\t  for (i = LAST_BANKED_REG; i >= FIRST_BANKED_REG; i--)\n-\t    if (TEST_HARD_REG_BIT (live_regs_mask, i))\n-\t      pop (i);\n+\t  bool use_movml = false;\n+\n+\t  if (TARGET_SH2A)\n+\t    {\n+\t      unsigned int count = 0;\n+\n+\t      for (i = FIRST_BANKED_REG; i <= LAST_BANKED_REG; i++)\n+\t\tif (TEST_HARD_REG_BIT (live_regs_mask, i))\n+\t\t  count++;\n+\t\telse\n+\t\t  break;\n+\n+\t      /* Use movml when all banked register are poped.  */\n+\t      if (count == LAST_BANKED_REG - FIRST_BANKED_REG + 1)\n+\t\tuse_movml = true;\n+\t    }\n+\n+\t  if (use_movml)\n+\t    {\n+\t      rtx sp_reg = gen_rtx_REG (SImode, STACK_POINTER_REGNUM);\n+\n+\t      /* We must avoid scheduling multiple load insn with another\n+\t\t insns.  */\n+\t      emit_insn (gen_blockage ());\n+\t      emit_insn (gen_movml_pop_banked (sp_reg));\n+\t      emit_insn (gen_blockage ());\n+\t    }\n+\t  else\n+\t    for (i = LAST_BANKED_REG; i >= FIRST_BANKED_REG; i--)\n+\t      if (TEST_HARD_REG_BIT (live_regs_mask, i))\n+\t\tpop (i);\n \n \t  last_reg = FIRST_PSEUDO_REGISTER - LAST_BANKED_REG - 1;\n \t}"}, {"sha": "dd63f63136fced60ee4866952eb7079a2d77bc83", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a19652f8199bfad17f77d91e9f3bfe24efc5f0/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a19652f8199bfad17f77d91e9f3bfe24efc5f0/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=91a19652f8199bfad17f77d91e9f3bfe24efc5f0", "patch": "@@ -9216,6 +9216,39 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   \"\"\n   [(set_attr \"length\" \"0\")])\n \f\n+;; Define movml instructions for SH2A target.  Currently they are\n+;; used to push and pop all banked registers only.\n+\n+(define_insn \"movml_push_banked\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t  (plus (match_dup 0) (const_int -32)))\n+   (set (mem:SI (plus:SI (match_dup 0) (const_int 28))) (reg:SI R7_REG))\n+   (set (mem:SI (plus:SI (match_dup 0) (const_int 24))) (reg:SI R6_REG))\n+   (set (mem:SI (plus:SI (match_dup 0) (const_int 20))) (reg:SI R5_REG))\n+   (set (mem:SI (plus:SI (match_dup 0) (const_int 16))) (reg:SI R4_REG))\n+   (set (mem:SI (plus:SI (match_dup 0) (const_int 12))) (reg:SI R3_REG))\n+   (set (mem:SI (plus:SI (match_dup 0) (const_int 8))) (reg:SI R2_REG))\n+   (set (mem:SI (plus:SI (match_dup 0) (const_int 4))) (reg:SI R1_REG))\n+   (set (mem:SI (plus:SI (match_dup 0) (const_int 0))) (reg:SI R0_REG))]\n+  \"TARGET_SH2A && REGNO (operands[0]) == 15\"\n+  \"movml.l\\tr7,@-r15\"\n+  [(set_attr \"in_delay_slot\" \"no\")])\n+\n+(define_insn \"movml_pop_banked\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t  (plus (match_dup 0) (const_int 32)))\n+   (set (reg:SI R0_REG) (mem:SI (plus:SI (match_dup 0) (const_int -32))))\n+   (set (reg:SI R1_REG) (mem:SI (plus:SI (match_dup 0) (const_int -28))))\n+   (set (reg:SI R2_REG) (mem:SI (plus:SI (match_dup 0) (const_int -24))))\n+   (set (reg:SI R3_REG) (mem:SI (plus:SI (match_dup 0) (const_int -20))))\n+   (set (reg:SI R4_REG) (mem:SI (plus:SI (match_dup 0) (const_int -16))))\n+   (set (reg:SI R5_REG) (mem:SI (plus:SI (match_dup 0) (const_int -12))))\n+   (set (reg:SI R6_REG) (mem:SI (plus:SI (match_dup 0) (const_int -8))))\n+   (set (reg:SI R7_REG) (mem:SI (plus:SI (match_dup 0) (const_int -4))))]\n+  \"TARGET_SH2A && REGNO (operands[0]) == 15\"\n+  \"movml.l\\t@r15+,r7\"\n+  [(set_attr \"in_delay_slot\" \"no\")])\n+\f\n ;; ------------------------------------------------------------------------\n ;; Scc instructions\n ;; ------------------------------------------------------------------------"}, {"sha": "3cf65f34ae22dd0eb68ca0fb8298f089a9e61940", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a19652f8199bfad17f77d91e9f3bfe24efc5f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a19652f8199bfad17f77d91e9f3bfe24efc5f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=91a19652f8199bfad17f77d91e9f3bfe24efc5f0", "patch": "@@ -1,3 +1,8 @@\n+2010-08-27  Naveen H.S  <naveen.S@kpitcummins.com>\n+\t    Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* gcc.dg/attr-isr.c: Skip test for -m2a.  Don't\trun on sh2a*-*-*.\n+\n 2010-08-23  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/ppc-fpconv-1.c: New test for integer to"}, {"sha": "1373c15f44adb80cc03b3f722b7815edd62c67fa", "filename": "gcc/testsuite/gcc.dg/attr-isr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a19652f8199bfad17f77d91e9f3bfe24efc5f0/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-isr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a19652f8199bfad17f77d91e9f3bfe24efc5f0/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-isr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-isr.c?ref=91a19652f8199bfad17f77d91e9f3bfe24efc5f0", "patch": "@@ -1,4 +1,5 @@\n-/* { dg-do compile { target { { sh-*-* sh[1234ble]*-*-* } && nonpic } } } */\n+/* { dg-do compile { target { { { sh-*-* sh[1234ble]*-*-* } && { ! sh2a*-*-* } } && nonpic } } } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m2a*\" } { \"\" } } */\n /* { dg-options \"-O\" } */\n extern void foo ();\n "}]}