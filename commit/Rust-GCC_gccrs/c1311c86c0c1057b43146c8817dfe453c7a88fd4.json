{"sha": "c1311c86c0c1057b43146c8817dfe453c7a88fd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzEzMTFjODZjMGMxMDU3YjQzMTQ2Yzg4MTdkZmU0NTNjN2E4OGZkNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2016-08-03T17:26:51Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-08-03T17:26:51Z"}, "message": "nvptx.c (nvptx_declare_function_name): Round frame size to DImode boundary.\n\n\tgcc/\n\t* config/nvptx/nvptx.c (nvptx_declare_function_name): Round frame\n\tsize to DImode boundary.\n\t(nvptx_propagate): Likewise.\n\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/crash-1.c: New.\n\nFrom-SVN: r239086", "tree": {"sha": "29f0919ef5bd3f0b99f39f7f69700e3f71b2f081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29f0919ef5bd3f0b99f39f7f69700e3f71b2f081"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1311c86c0c1057b43146c8817dfe453c7a88fd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1311c86c0c1057b43146c8817dfe453c7a88fd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1311c86c0c1057b43146c8817dfe453c7a88fd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1311c86c0c1057b43146c8817dfe453c7a88fd4/comments", "author": null, "committer": null, "parents": [{"sha": "0bd9bdb4dbc21dbdef0955db2645df9e97f83c82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bd9bdb4dbc21dbdef0955db2645df9e97f83c82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bd9bdb4dbc21dbdef0955db2645df9e97f83c82"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "2223290bd53469d4a56cf024be0aab2adc1fdf76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1311c86c0c1057b43146c8817dfe453c7a88fd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1311c86c0c1057b43146c8817dfe453c7a88fd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1311c86c0c1057b43146c8817dfe453c7a88fd4", "patch": "@@ -1,3 +1,9 @@\n+2016-08-03  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* config/nvptx/nvptx.c (nvptx_declare_function_name): Round frame\n+\tsize to DImode boundary.\n+\t(nvptx_propagate): Likewise.\n+\n 2016-08-03  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/rs6000.h (SLOW_UNALIGNED_ACCESS): Make scalar"}, {"sha": "4d87ead20f39aeec039d8f94b73104856f3ff4c6", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1311c86c0c1057b43146c8817dfe453c7a88fd4/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1311c86c0c1057b43146c8817dfe453c7a88fd4/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=c1311c86c0c1057b43146c8817dfe453c7a88fd4", "patch": "@@ -1037,11 +1037,14 @@ nvptx_declare_function_name (FILE *file, const char *name, const_tree decl)\n     init_frame (file, STACK_POINTER_REGNUM,\n \t\tUNITS_PER_WORD, crtl->outgoing_args_size);\n \n-  /* Declare a local variable for the frame.  */\n+  /* Declare a local variable for the frame.  Force its size to be\n+     DImode-compatible.  */\n   HOST_WIDE_INT sz = get_frame_size ();\n   if (sz || cfun->machine->has_chain)\n     init_frame (file, FRAME_POINTER_REGNUM,\n-\t\tcrtl->stack_alignment_needed / BITS_PER_UNIT, sz);\n+\t\tcrtl->stack_alignment_needed / BITS_PER_UNIT,\n+\t\t(sz + GET_MODE_SIZE (DImode) - 1)\n+\t\t& ~(HOST_WIDE_INT)(GET_MODE_SIZE (DImode) - 1));\n \n   /* Declare the pseudos we have as ptx registers.  */\n   int maxregs = max_reg_num ();\n@@ -3266,8 +3269,9 @@ nvptx_propagate (basic_block block, rtx_insn *insn, propagate_mask rw,\n       rtx pred = NULL_RTX;\n       rtx_code_label *label = NULL;\n \n-      gcc_assert (!(fs & (GET_MODE_SIZE (DImode) - 1)));\n-      fs /= GET_MODE_SIZE (DImode);\n+      /* The frame size might not be DImode compatible, but the frame\n+\t array's declaration will be.  So it's ok to round up here.  */\n+      fs = (fs + GET_MODE_SIZE (DImode) - 1) / GET_MODE_SIZE (DImode);\n       /* Detect single iteration loop. */\n       if (fs == 1)\n \tfs = 0;"}, {"sha": "850188fb660c8c640e8f8ce0a06e6ad416b5048a", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1311c86c0c1057b43146c8817dfe453c7a88fd4/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1311c86c0c1057b43146c8817dfe453c7a88fd4/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c1311c86c0c1057b43146c8817dfe453c7a88fd4", "patch": "@@ -1,3 +1,7 @@\n+2016-08-03  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/crash-1.c: New.\n+\n 2016-07-15  Cesar Philippidis  <cesar@codesourcery.com>\n \n \t* testsuite/libgomp.oacc-c-c++-common/zero_length_subarrays.c: New"}, {"sha": "a75a81765c66007509eb01e438f656eb66242785", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/crash-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1311c86c0c1057b43146c8817dfe453c7a88fd4/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcrash-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1311c86c0c1057b43146c8817dfe453c7a88fd4/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcrash-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fcrash-1.c?ref=c1311c86c0c1057b43146c8817dfe453c7a88fd4", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O0\" } */\n+\n+/* ICEd in nvptx backend due to unexpected frame size.  */\n+#pragma acc routine worker\n+void\n+worker_matmul (int *c, int i)\n+{\n+  int j;\n+\n+#pragma acc loop\n+  for (j = 0; j < 4; j++)\n+    c[j] = j;\n+}\n+\n+\n+int\n+main ()\n+{\n+  int c[4];\n+\n+#pragma acc parallel \n+  {\n+    worker_matmul (c, 0);\n+  }\n+  \n+  return 0;\n+}"}]}