{"sha": "843f104d5bc6d1f9b4b3f56c3a4e4278e608827f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQzZjEwNGQ1YmM2ZDFmOWI0YjNmNTZjM2E0ZTQyNzhlNjA4ODI3Zg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2019-10-04T21:56:14Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2019-10-04T21:56:14Z"}, "message": "Add strftime format checking support for C2x %OB and %Ob (bug 82752).\n\nC2x adds strftime %OB and %Ob formats, for alternative forms of month\nnames (for mainly Slavic languages where a month name on its own is\ndeclined differently from a month name together with a date within\nthat month).  This patch adds corresponding format checking support.\n(glibc support for these formats was added in glibc 2.27.)\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\n\tPR c/82752\ngcc/c-family:\n\t* c-format.c (C_STD_VER): Handle C2x.\n\t(C_STD_NAME): Likewise.\n\t(strftime_flag_specs): Add 'O' modifier with 'p' flag.\n\t(time_char_table): Use separate entry for 'B' and 'b', with 'O'\n\tmodifier allowed and 'p' flag.\n\t* c-format.h (enum format_std_version): Add STD_C2X.\n\t(struct format_char_info): Mention 'p' in comment on flags2.\n\ngcc/testsuite:\n\t* gcc.dg/format/c2x-strftime-1.c: New test.\n\nFrom-SVN: r276605", "tree": {"sha": "ea451e764d55e6941bf945e7254076fc1e531b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea451e764d55e6941bf945e7254076fc1e531b97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/843f104d5bc6d1f9b4b3f56c3a4e4278e608827f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843f104d5bc6d1f9b4b3f56c3a4e4278e608827f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/843f104d5bc6d1f9b4b3f56c3a4e4278e608827f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/843f104d5bc6d1f9b4b3f56c3a4e4278e608827f/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daa94de24b9afdf21c636532e53561aa3713910b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daa94de24b9afdf21c636532e53561aa3713910b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daa94de24b9afdf21c636532e53561aa3713910b"}], "stats": {"total": 49, "additions": 44, "deletions": 5}, "files": [{"sha": "1ebc4d9f764e1460d8d0b671aa869f882ee967bf", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843f104d5bc6d1f9b4b3f56c3a4e4278e608827f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843f104d5bc6d1f9b4b3f56c3a4e4278e608827f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=843f104d5bc6d1f9b4b3f56c3a4e4278e608827f", "patch": "@@ -1,3 +1,14 @@\n+2019-10-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/82752\n+\t* c-format.c (C_STD_VER): Handle C2x.\n+\t(C_STD_NAME): Likewise.\n+\t(strftime_flag_specs): Add 'O' modifier with 'p' flag.\n+\t(time_char_table): Use separate entry for 'B' and 'b', with 'O'\n+\tmodifier allowed and 'p' flag.\n+\t* c-format.h (enum format_std_version): Add STD_C2X.\n+\t(struct format_char_info): Mention 'p' in comment on flags2.\n+\n 2019-10-01  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-opts.c (c_diagnostic_finalizer): Temporarily clear prefix when"}, {"sha": "3c291ca45003904a6713d5d16fa468285da13d2e", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843f104d5bc6d1f9b4b3f56c3a4e4278e608827f/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843f104d5bc6d1f9b4b3f56c3a4e4278e608827f/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=843f104d5bc6d1f9b4b3f56c3a4e4278e608827f", "patch": "@@ -404,9 +404,11 @@ decode_format_attr (const_tree fntype, tree atname, tree args,\n /* The C standard version we are checking formats against when pedantic.  */\n #define C_STD_VER\t\t((int) (c_dialect_cxx ()\t\t   \\\n \t\t\t\t ? CPLUSPLUS_STD_VER\t\t\t   \\\n-\t\t\t\t : (flag_isoc99\t\t\t\t   \\\n-\t\t\t\t    ? STD_C99\t\t\t\t   \\\n-\t\t\t\t    : (flag_isoc94 ? STD_C94 : STD_C89))))\n+\t\t\t\t : (flag_isoc2x\t\t\t\t   \\\n+\t\t\t\t    ? STD_C2X\t\t\t\t   \\\n+\t\t\t\t    : (flag_isoc99\t\t\t   \\\n+\t\t\t\t       ? STD_C99\t\t\t   \\\n+\t\t\t\t       : (flag_isoc94 ? STD_C94 : STD_C89)))))\n /* The name to give to the standard version we are warning about when\n    pedantic.  FEATURE_VER is the version in which the feature warned out\n    appeared, which is higher than C_STD_VER.  */\n@@ -415,7 +417,9 @@ decode_format_attr (const_tree fntype, tree atname, tree args,\n \t\t\t\t    : \"ISO C++11\")\t\t\\\n \t\t\t\t : ((FEATURE_VER) == STD_EXT\t\\\n \t\t\t\t    ? \"ISO C\"\t\t\t\\\n-\t\t\t\t    : \"ISO C90\"))\n+\t\t\t\t    : ((FEATURE_VER) == STD_C2X\t\\\n+\t\t\t\t       ? \"ISO C17\"\t\t\\\n+\t\t\t\t       : \"ISO C90\")))\n /* Adjust a C standard version, which may be STD_C9L, to account for\n    -Wno-long-long.  Returns other standard versions unchanged.  */\n #define ADJ_STD(VER)\t\t((int) ((VER) == STD_C9L\t\t      \\\n@@ -653,6 +657,7 @@ static const format_flag_spec strftime_flag_specs[] =\n   { 'E', 0,   0, 0, N_(\"'E' modifier\"), N_(\"the 'E' strftime modifier\"),      STD_C99 },\n   { 'O', 0,   0, 0, N_(\"'O' modifier\"), N_(\"the 'O' strftime modifier\"),      STD_C99 },\n   { 'O', 'o', 0, 0, NULL,               N_(\"the 'O' modifier\"),               STD_EXT },\n+  { 'O', 'p', 0, 0, NULL,               N_(\"the 'O' modifier\"),               STD_C2X },\n   { 0, 0, 0, 0, NULL, NULL, STD_C89 }\n };\n \n@@ -887,7 +892,8 @@ static const format_char_info scan_char_table[] =\n static const format_char_info time_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n-  { \"ABZab\",\t\t0, STD_C89, NOLENGTHS, \"^#\",     \"\",   NULL },\n+  { \"AZa\",\t\t0, STD_C89, NOLENGTHS, \"^#\",     \"\",   NULL },\n+  { \"Bb\",\t\t0, STD_C89, NOLENGTHS, \"O^#\",    \"p\",  NULL },\n   { \"cx\",\t\t0, STD_C89, NOLENGTHS, \"E\",      \"3\",  NULL },\n   { \"HIMSUWdmw\",\t0, STD_C89, NOLENGTHS, \"-_0Ow\",  \"\",   NULL },\n   { \"j\",\t\t0, STD_C89, NOLENGTHS, \"-_0Ow\",  \"o\",  NULL },"}, {"sha": "15a3153cfd3bdff571c2951c0481d545798a47ff", "filename": "gcc/c-family/c-format.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843f104d5bc6d1f9b4b3f56c3a4e4278e608827f/gcc%2Fc-family%2Fc-format.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843f104d5bc6d1f9b4b3f56c3a4e4278e608827f/gcc%2Fc-family%2Fc-format.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.h?ref=843f104d5bc6d1f9b4b3f56c3a4e4278e608827f", "patch": "@@ -48,6 +48,7 @@ enum format_std_version\n   STD_C94,\n   STD_C9L, /* C99, but treat as C89 if -Wno-long-long.  */\n   STD_C99,\n+  STD_C2X,\n   STD_EXT\n };\n \n@@ -149,6 +150,7 @@ struct format_char_info\n      two digit year formats, \"3\" for strftime formats giving two digit\n      years in some locales, \"4\" for \"2\" which becomes \"3\" with an \"E\" modifier,\n      \"o\" if use of strftime \"O\" is a GNU extension beyond C99,\n+     \"p\" if use of strftime \"O\" is a C2x feature,\n      \"W\" if the argument is a pointer which is dereferenced and written into,\n      \"R\" if the argument is a pointer which is dereferenced and read from,\n      \"i\" for printf integer formats where the '0' flag is ignored with"}, {"sha": "46245216b9066bb10f293fe252f340ab9fd96837", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843f104d5bc6d1f9b4b3f56c3a4e4278e608827f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843f104d5bc6d1f9b4b3f56c3a4e4278e608827f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=843f104d5bc6d1f9b4b3f56c3a4e4278e608827f", "patch": "@@ -1,3 +1,8 @@\n+2019-10-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/82752\n+\t* gcc.dg/format/c2x-strftime-1.c: New test.\n+\n 2019-10-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/91977"}, {"sha": "c6e7619e8a455bd68809e07451a4b8ef0bafa30f", "filename": "gcc/testsuite/gcc.dg/format/c2x-strftime-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/843f104d5bc6d1f9b4b3f56c3a4e4278e608827f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-strftime-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/843f104d5bc6d1f9b4b3f56c3a4e4278e608827f/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-strftime-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc2x-strftime-1.c?ref=843f104d5bc6d1f9b4b3f56c3a4e4278e608827f", "patch": "@@ -0,0 +1,15 @@\n+/* Test for strftime formats.  Formats using C2x features.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (char *s, size_t m, const struct tm *tp)\n+{\n+  strftime (s, m, \"%Ob\", tp);\n+  strftime (s, m, \"%OB\", tp);\n+  /* It's not clear that %h equivalence to %b means %Oh is equivalent\n+     to %Ob; here we expect %Oh to be diagnosed.  */\n+  strftime (s, m, \"%Oh\", tp); /* { dg-warning \"flag|modifier\" \"bad %Oh\" } */\n+}"}]}