{"sha": "346b302d09c1e6db56d9fe69048acb32fbb97845", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ2YjMwMmQwOWMxZTZkYjU2ZDlmZTY5MDQ4YWNiMzJmYmI5Nzg0NQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-15T12:42:12Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-10-22T08:10:50Z"}, "message": "Implement no_stack_protector attribute.\n\ngcc/ChangeLog:\n\n2020-05-18  Martin Liska  <mliska@suse.cz>\n\n\tPR c/94722\n\t* cfgexpand.c (stack_protect_decl_phase):\n\tGuard with lookup_attribute(\"no_stack_protector\") at\n\tvarious places.\n\t(expand_used_vars): Likewise here.\n\t* doc/extend.texi: Document no_stack_protector attribute.\n\ngcc/ada/ChangeLog:\n\n2020-05-18  Martin Liska  <mliska@suse.cz>\n\n\tPR c/94722\n\t* gcc-interface/utils.c (handle_no_stack_protect_attribute):\n\tNew.\n\t(handle_stack_protect_attribute): Add error message for a\n\tno_stack_protector function.\n\ngcc/c-family/ChangeLog:\n\n2020-05-18  Martin Liska  <mliska@suse.cz>\n\n\tPR c/94722\n\t* c-attribs.c (handle_no_stack_protect_function_attribute): New.\n\t(handle_stack_protect_attribute): Add error message for a\n\tno_stack_protector function.\n\ngcc/testsuite/ChangeLog:\n\n2020-05-18  Martin Liska  <mliska@suse.cz>\n\n\tPR c/94722\n\t* g++.dg/no-stack-protector-attr-2.C: New test.\n\t* g++.dg/no-stack-protector-attr-3.C: New test.\n\t* g++.dg/no-stack-protector-attr.C: New test.", "tree": {"sha": "dc5b9b9594325c30b81f676d19c75dbc3a34343f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc5b9b9594325c30b81f676d19c75dbc3a34343f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/346b302d09c1e6db56d9fe69048acb32fbb97845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346b302d09c1e6db56d9fe69048acb32fbb97845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/346b302d09c1e6db56d9fe69048acb32fbb97845", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346b302d09c1e6db56d9fe69048acb32fbb97845/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a99796b85c93fe9d61ee52fc3a38b8698709479", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a99796b85c93fe9d61ee52fc3a38b8698709479", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a99796b85c93fe9d61ee52fc3a38b8698709479"}], "stats": {"total": 195, "additions": 154, "deletions": 41}, "files": [{"sha": "d50872f81b0e5818b7a17202dd04ccc06879c42e", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346b302d09c1e6db56d9fe69048acb32fbb97845/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346b302d09c1e6db56d9fe69048acb32fbb97845/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=346b302d09c1e6db56d9fe69048acb32fbb97845", "patch": "@@ -92,6 +92,7 @@ static tree handle_nonnull_attribute (tree *, tree, tree, int, bool *);\n static tree handle_sentinel_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);\n static tree handle_stack_protect_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_no_stack_protector_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noinline_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noclone_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noicf_attribute (tree *, tree, tree, int, bool *);\n@@ -116,6 +117,13 @@ static const struct attribute_spec::exclusions attr_cold_hot_exclusions[] =\n   { NULL  , false, false, false }\n };\n \n+static const struct attribute_spec::exclusions attr_stack_protect_exclusions[] =\n+{\n+  { \"stack_protect\", true, false, false },\n+  { \"no_stack_protector\", true, false, false },\n+  { NULL, false, false, false },\n+};\n+\n /* Fake handler for attributes we don't properly support, typically because\n    they'd require dragging a lot of the common-c front-end circuitry.  */\n static tree fake_attribute_handler (tree *, tree, tree, int, bool *);\n@@ -141,7 +149,11 @@ const struct attribute_spec gnat_internal_attribute_table[] =\n   { \"noreturn\",     0, 0,  true,  false, false, false,\n     handle_noreturn_attribute, NULL },\n   { \"stack_protect\",0, 0, true,  false, false, false,\n-    handle_stack_protect_attribute, NULL },\n+    handle_stack_protect_attribute,\n+    attr_stack_protect_exclusions },\n+  { \"no_stack_protector\",0, 0, true,  false, false, false,\n+    handle_no_stack_protector_attribute,\n+    attr_stack_protect_exclusions },\n   { \"noinline\",     0, 0,  true,  false, false, false,\n     handle_noinline_attribute, NULL },\n   { \"noclone\",      0, 0,  true,  false, false, false,\n@@ -6560,6 +6572,23 @@ handle_stack_protect_attribute (tree *node, tree name, tree, int,\n   return NULL_TREE;\n }\n \n+/* Handle a \"no_stack_protector\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_no_stack_protector_attribute (tree *node, tree name, tree, int,\n+\t\t\t\t   bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+\n /* Handle a \"noinline\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "a3b2b3d58bdc68107ce1a0e1b7d1655fb47772cb", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346b302d09c1e6db56d9fe69048acb32fbb97845/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346b302d09c1e6db56d9fe69048acb32fbb97845/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=346b302d09c1e6db56d9fe69048acb32fbb97845", "patch": "@@ -65,6 +65,8 @@ static tree handle_no_sanitize_undefined_attribute (tree *, tree, tree, int,\n static tree handle_asan_odr_indicator_attribute (tree *, tree, tree, int,\n \t\t\t\t\t\t bool *);\n static tree handle_stack_protect_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_no_stack_protector_function_attribute (tree *, tree,\n+\t\t\t\t\t\t\ttree, int, bool *);\n static tree handle_noinline_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noclone_attribute (tree *, tree, tree, int, bool *);\n static tree handle_nocf_check_attribute (tree *, tree, tree, int, bool *);\n@@ -248,6 +250,14 @@ static const struct attribute_spec::exclusions attr_noinit_exclusions[] =\n   ATTR_EXCL (NULL, false, false, false),\n };\n \n+static const struct attribute_spec::exclusions attr_stack_protect_exclusions[] =\n+{\n+  ATTR_EXCL (\"stack_protect\", true, false, false),\n+  ATTR_EXCL (\"no_stack_protector\", true, false, false),\n+  ATTR_EXCL (NULL, false, false, false),\n+};\n+\n+\n /* Table of machine-independent attributes common to all C-like languages.\n \n    Current list of processed common attributes: nonnull.  */\n@@ -275,7 +285,11 @@ const struct attribute_spec c_common_attribute_table[] =\n   { \"volatile\",               0, 0, true,  false, false, false,\n \t\t\t      handle_noreturn_attribute, NULL },\n   { \"stack_protect\",          0, 0, true,  false, false, false,\n-\t\t\t      handle_stack_protect_attribute, NULL },\n+\t\t\t      handle_stack_protect_attribute,\n+\t\t\t      attr_stack_protect_exclusions },\n+  { \"no_stack_protector\",     0, 0, true, false, false, false,\n+\t\t\t      handle_no_stack_protector_function_attribute,\n+\t\t\t      attr_stack_protect_exclusions },\n   { \"noinline\",               0, 0, true,  false, false, false,\n \t\t\t      handle_noinline_attribute,\n \t                      attr_noinline_exclusions },\n@@ -1156,6 +1170,22 @@ handle_stack_protect_attribute (tree *node, tree name, tree, int,\n   return NULL_TREE;\n }\n \n+/* Handle a \"no_stack_protector\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_no_stack_protector_function_attribute (tree *node, tree name, tree,\n+\t\t\t\t\t      int, bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) != FUNCTION_DECL)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"noipa\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "f3f17d38f9eda2e0144b1ddf84d88611a5fd8b38", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 43, "deletions": 39, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346b302d09c1e6db56d9fe69048acb32fbb97845/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346b302d09c1e6db56d9fe69048acb32fbb97845/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=346b302d09c1e6db56d9fe69048acb32fbb97845", "patch": "@@ -1831,11 +1831,12 @@ stack_protect_decl_phase (tree decl)\n   if (bits & SPCT_HAS_SMALL_CHAR_ARRAY)\n     has_short_buffer = true;\n \n-  if (flag_stack_protect == SPCT_FLAG_ALL\n-      || flag_stack_protect == SPCT_FLAG_STRONG\n-      || (flag_stack_protect == SPCT_FLAG_EXPLICIT\n-\t  && lookup_attribute (\"stack_protect\",\n-\t\t\t       DECL_ATTRIBUTES (current_function_decl))))\n+  tree attribs = DECL_ATTRIBUTES (current_function_decl);\n+  if (!lookup_attribute (\"no_stack_protector\", attribs)\n+      && (flag_stack_protect == SPCT_FLAG_ALL\n+\t  || flag_stack_protect == SPCT_FLAG_STRONG\n+\t  || (flag_stack_protect == SPCT_FLAG_EXPLICIT\n+\t      && lookup_attribute (\"stack_protect\", attribs))))\n     {\n       if ((bits & (SPCT_HAS_SMALL_CHAR_ARRAY | SPCT_HAS_LARGE_CHAR_ARRAY))\n \t  && !(bits & SPCT_HAS_AGGREGATE))\n@@ -2136,6 +2137,7 @@ expand_used_vars (void)\n      set are actually used by the optimized function.  Lay them out.  */\n   expand_used_vars_for_block (outer_block, true);\n \n+  tree attribs = DECL_ATTRIBUTES (current_function_decl);\n   if (stack_vars_num > 0)\n     {\n       bool has_addressable_vars = false;\n@@ -2145,10 +2147,10 @@ expand_used_vars (void)\n       /* If stack protection is enabled, we don't share space between\n \t vulnerable data and non-vulnerable data.  */\n       if (flag_stack_protect != 0\n+\t  && !lookup_attribute (\"no_stack_protector\", attribs)\n \t  && (flag_stack_protect != SPCT_FLAG_EXPLICIT\n \t      || (flag_stack_protect == SPCT_FLAG_EXPLICIT\n-\t\t  && lookup_attribute (\"stack_protect\",\n-\t\t\t\t       DECL_ATTRIBUTES (current_function_decl)))))\n+\t\t  && lookup_attribute (\"stack_protect\", attribs))))\n \thas_addressable_vars = add_stack_protection_conflicts ();\n \n       if (flag_stack_protect == SPCT_FLAG_STRONG && has_addressable_vars)\n@@ -2161,38 +2163,40 @@ expand_used_vars (void)\n \tdump_stack_var_partition ();\n     }\n \n-  switch (flag_stack_protect)\n-    {\n-    case SPCT_FLAG_ALL:\n-      create_stack_guard ();\n-      break;\n \n-    case SPCT_FLAG_STRONG:\n-      if (gen_stack_protect_signal\n-\t  || cfun->calls_alloca\n-\t  || has_protected_decls\n-\t  || lookup_attribute (\"stack_protect\",\n-\t\t\t       DECL_ATTRIBUTES (current_function_decl)))\n+  if (!lookup_attribute (\"no_stack_protector\", attribs))\n+    switch (flag_stack_protect)\n+      {\n+      case SPCT_FLAG_ALL:\n \tcreate_stack_guard ();\n-      break;\n+\tbreak;\n \n-    case SPCT_FLAG_DEFAULT:\n-      if (cfun->calls_alloca\n-\t  || has_protected_decls\n-\t  || lookup_attribute (\"stack_protect\",\n-\t\t\t       DECL_ATTRIBUTES (current_function_decl)))\n-\tcreate_stack_guard ();\n-      break;\n+      case SPCT_FLAG_STRONG:\n+\tif (gen_stack_protect_signal\n+\t    || cfun->calls_alloca\n+\t    || has_protected_decls\n+\t    || lookup_attribute (\"stack_protect\",\n+\t\t\t\t DECL_ATTRIBUTES (current_function_decl)))\n+\t  create_stack_guard ();\n+\tbreak;\n \n-    case SPCT_FLAG_EXPLICIT:\n-      if (lookup_attribute (\"stack_protect\",\n-\t\t\t    DECL_ATTRIBUTES (current_function_decl)))\n-\tcreate_stack_guard ();\n-      break;\n+      case SPCT_FLAG_DEFAULT:\n+\tif (cfun->calls_alloca\n+\t    || has_protected_decls\n+\t    || lookup_attribute (\"stack_protect\",\n+\t\t\t\t DECL_ATTRIBUTES (current_function_decl)))\n+\t  create_stack_guard ();\n+\tbreak;\n \n-    default:\n-      break;\n-    }\n+      case SPCT_FLAG_EXPLICIT:\n+\tif (lookup_attribute (\"stack_protect\",\n+\t\t\t      DECL_ATTRIBUTES (current_function_decl)))\n+\t  create_stack_guard ();\n+\tbreak;\n+\n+      default:\n+\tbreak;\n+      }\n \n   /* Assign rtl to each variable based on these partitions.  */\n   if (stack_vars_num > 0)\n@@ -2213,11 +2217,11 @@ expand_used_vars (void)\n \t  expand_stack_vars (stack_protect_decl_phase_1, &data);\n \n \t  /* Phase 2 contains other kinds of arrays.  */\n-\t  if (flag_stack_protect == SPCT_FLAG_ALL\n-\t      || flag_stack_protect == SPCT_FLAG_STRONG\n-\t      || (flag_stack_protect == SPCT_FLAG_EXPLICIT\n-\t\t  && lookup_attribute (\"stack_protect\",\n-\t\t\t\t       DECL_ATTRIBUTES (current_function_decl))))\n+\t  if (!lookup_attribute (\"no_stack_protector\", attribs)\n+\t      && (flag_stack_protect == SPCT_FLAG_ALL\n+\t\t  || flag_stack_protect == SPCT_FLAG_STRONG\n+\t\t  || (flag_stack_protect == SPCT_FLAG_EXPLICIT\n+\t\t      && lookup_attribute (\"stack_protect\", attribs))))\n \t    expand_stack_vars (stack_protect_decl_phase_2, &data);\n \t}\n "}, {"sha": "4a7c85822a72c75dd0a7e824a320e6f4a5d60f9e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346b302d09c1e6db56d9fe69048acb32fbb97845/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346b302d09c1e6db56d9fe69048acb32fbb97845/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=346b302d09c1e6db56d9fe69048acb32fbb97845", "patch": "@@ -3680,6 +3680,10 @@ This attribute adds stack protection code to the function if\n flags @option{-fstack-protector}, @option{-fstack-protector-strong}\n or @option{-fstack-protector-explicit} are set.\n \n+@item no_stack_protector\n+@cindex @code{no_stack_protector} function attribute\n+This attribute prevents stack protection code for the function.\n+\n @item target (@var{string}, @dots{})\n @cindex @code{target} function attribute\n Multiple target back ends implement the @code{target} attribute"}, {"sha": "6db6fef58d1e85ac255d917e4db8f9fda22ded17", "filename": "gcc/testsuite/g++.dg/no-stack-protector-attr-2.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346b302d09c1e6db56d9fe69048acb32fbb97845/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fno-stack-protector-attr-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346b302d09c1e6db56d9fe69048acb32fbb97845/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fno-stack-protector-attr-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fno-stack-protector-attr-2.C?ref=346b302d09c1e6db56d9fe69048acb32fbb97845", "patch": "@@ -0,0 +1,7 @@\n+/* PR c/94722 */\n+/* { dg-do compile } */\n+\n+int __attribute__((no_stack_protector, stack_protect)) c() /* { dg-warning \"ignoring attribute 'stack_protect' because it conflicts with attribute 'no_stack_protector'\" } */\n+{\n+  return 0;\n+}"}, {"sha": "dd9cd4991b665598fc238f1e21485b8fcf2f9efd", "filename": "gcc/testsuite/g++.dg/no-stack-protector-attr-3.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346b302d09c1e6db56d9fe69048acb32fbb97845/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fno-stack-protector-attr-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346b302d09c1e6db56d9fe69048acb32fbb97845/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fno-stack-protector-attr-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fno-stack-protector-attr-3.C?ref=346b302d09c1e6db56d9fe69048acb32fbb97845", "patch": "@@ -0,0 +1,23 @@\n+/* PR c/94722 */\n+/* Test that stack protection is disabled via no_stack_protector attribute. */\n+\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -fstack-protector-explicit\" } */\n+\n+/* { dg-do compile } */\n+\n+int __attribute__((no_stack_protector)) foo()\n+{\n+  int a;\n+  char b[34];\n+  return 0;\n+}\n+\n+int __attribute__((stack_protect)) bar()\n+{\n+  int a;\n+  char b[34];\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"stack_chk_fail\" 1 } } */"}, {"sha": "e5105bf9478f5ace24c0e07a856f773e6aaee145", "filename": "gcc/testsuite/g++.dg/no-stack-protector-attr.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/346b302d09c1e6db56d9fe69048acb32fbb97845/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fno-stack-protector-attr.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/346b302d09c1e6db56d9fe69048acb32fbb97845/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fno-stack-protector-attr.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fno-stack-protector-attr.C?ref=346b302d09c1e6db56d9fe69048acb32fbb97845", "patch": "@@ -0,0 +1,16 @@\n+/* PR c/94722 */\n+/* Test that stack protection is disabled via no_stack_protector attribute. */\n+\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -fstack-protector-all\" } */\n+\n+/* { dg-do compile } */\n+\n+int __attribute__((no_stack_protector)) c()\n+{\n+  int a;\n+  char b[34];\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"stack_chk_fail\" } } */"}]}