{"sha": "d7c5bbe6af7189a95d1e4f2d4171fd8b53e826b3", "node_id": "C_kwDOANBUbNoAKGQ3YzViYmU2YWY3MTg5YTk1ZDFlNGYyZDQxNzFmZDhiNTNlODI2YjM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-26T08:45:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-26T08:45:21Z"}, "message": "Merge #1166\n\n1166: Support inference of generic parameters on paths behind reference's r=philberty a=philberty\n\nWe used a hack in the parser to turn simple cases such as &Foo(..) into:\r\n\r\n  BorrowExpr\r\n    CallExpr(\r\n      IdentifierExpr + <Argument-expressions>))\r\n\r\nThe IdentifierExpr here is parsed as a PathExpression but to simplify\r\nthings at the time it seemed logic to see these as identifier expressions\r\nbut this is actually a Path and we need to be careful about generic\r\narguments here. Identifiers are simply identifiers and must not be changed\r\nor coherence of inference variables will become a jumble of inference\r\nvariables trying to infer one another inside purely generic code.\r\n\r\nThis patch leaves the PathInExpressions as Path's instead of trying to be\r\nclever and turn them into identifiers.\r\n\r\nFixes #1165\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "88cf4a3e201420dde427f004471c6898fea54af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88cf4a3e201420dde427f004471c6898fea54af5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7c5bbe6af7189a95d1e4f2d4171fd8b53e826b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiZ7EhCRBK7hj4Ov3rIwAA7wAIAAIS+8H2KBvyS/Is5GOfzA9V\nr2mQMub+x29TG7VxWlsoI8MHe4B8ZC8bl5HrKN62ccC0SeIFN5/ebu3PItXL+HkR\nBxC4K8dRw4uWc8qMbisYjKJD/dTn8HyJv/VYcCxP3zyit2Imjl2LsM1ELQF16W2/\nLx8LDtZBZTzYypdwf49z7ScL3sgDSaAdyjb6Z64sMoEVUMwavUeMh1NoKqDiYjC4\nCo7Be56eN5T6/7dpZuNN1X76gtQFGxQvq/Pxm01TJiay6gSHM9Uw7PXL3xjGW4/a\nroMi+l6D79AoYmFlcpXloZYE8luDIZRxyNhFo/ZBoqzYQ1nVuyTL/J0U3Ksks84=\n=TI+Z\n-----END PGP SIGNATURE-----\n", "payload": "tree 88cf4a3e201420dde427f004471c6898fea54af5\nparent b74044fb6278e373da607a8f1f5df2193ce27d65\nparent e69e162462c6fb3d886460d96ce649207b7c9e3f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1650962721 +0000\ncommitter GitHub <noreply@github.com> 1650962721 +0000\n\nMerge #1166\n\n1166: Support inference of generic parameters on paths behind reference's r=philberty a=philberty\n\nWe used a hack in the parser to turn simple cases such as &Foo(..) into:\r\n\r\n  BorrowExpr\r\n    CallExpr(\r\n      IdentifierExpr + <Argument-expressions>))\r\n\r\nThe IdentifierExpr here is parsed as a PathExpression but to simplify\r\nthings at the time it seemed logic to see these as identifier expressions\r\nbut this is actually a Path and we need to be careful about generic\r\narguments here. Identifiers are simply identifiers and must not be changed\r\nor coherence of inference variables will become a jumble of inference\r\nvariables trying to infer one another inside purely generic code.\r\n\r\nThis patch leaves the PathInExpressions as Path's instead of trying to be\r\nclever and turn them into identifiers.\r\n\r\nFixes #1165\r\n\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7c5bbe6af7189a95d1e4f2d4171fd8b53e826b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7c5bbe6af7189a95d1e4f2d4171fd8b53e826b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7c5bbe6af7189a95d1e4f2d4171fd8b53e826b3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b74044fb6278e373da607a8f1f5df2193ce27d65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74044fb6278e373da607a8f1f5df2193ce27d65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74044fb6278e373da607a8f1f5df2193ce27d65"}, {"sha": "e69e162462c6fb3d886460d96ce649207b7c9e3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e69e162462c6fb3d886460d96ce649207b7c9e3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e69e162462c6fb3d886460d96ce649207b7c9e3f"}], "stats": {"total": 25, "additions": 5, "deletions": 20}, "files": [{"sha": "6715a778233f6789df0ebc037375ba84bc4652ff", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7c5bbe6af7189a95d1e4f2d4171fd8b53e826b3/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7c5bbe6af7189a95d1e4f2d4171fd8b53e826b3/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=d7c5bbe6af7189a95d1e4f2d4171fd8b53e826b3", "patch": "@@ -12591,16 +12591,6 @@ Parser<ManagedTokenSource>::null_denotation (const_TokenPtr tok,\n \t      // struct/enum expr struct\n \t      if (!restrictions.can_be_struct_expr && !not_a_block)\n \t\t{\n-\t\t  // assume path is returned if not single segment\n-\t\t  if (path.is_single_segment ())\n-\t\t    {\n-\t\t      // have to return an identifier expression or something\n-\t\t      /* HACK: may have to become permanent, but this is my\n-\t\t       * current identifier expression */\n-\t\t      return std::unique_ptr<AST::IdentifierExpr> (\n-\t\t\tnew AST::IdentifierExpr (tok->get_str (), {},\n-\t\t\t\t\t\t tok->get_locus ()));\n-\t\t    }\n \t\t  // HACK: add outer attrs to path\n \t\t  path.set_outer_attrs (std::move (outer_attrs));\n \t\t  return std::unique_ptr<AST::PathInExpression> (\n@@ -12613,16 +12603,6 @@ Parser<ManagedTokenSource>::null_denotation (const_TokenPtr tok,\n \t    // struct/enum expr tuple\n \t    if (!restrictions.can_be_struct_expr)\n \t      {\n-\t\t// assume path is returned if not single segment\n-\t\tif (path.is_single_segment ())\n-\t\t  {\n-\t\t    // have to return an identifier expression or something, idk\n-\t\t    /* HACK: may have to become permanent, but this is my\n-\t\t     * current identifier expression */\n-\t\t    return std::unique_ptr<AST::IdentifierExpr> (\n-\t\t      new AST::IdentifierExpr (tok->get_str (), {},\n-\t\t\t\t\t       tok->get_locus ()));\n-\t\t  }\n \t\t// HACK: add outer attrs to path\n \t\tpath.set_outer_attrs (std::move (outer_attrs));\n \t\treturn std::unique_ptr<AST::PathInExpression> ("}, {"sha": "f5889698d70e5a8aad2cca17c6e113dd7cc438f6", "filename": "gcc/testsuite/rust/compile/issue-1165.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7c5bbe6af7189a95d1e4f2d4171fd8b53e826b3/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1165.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7c5bbe6af7189a95d1e4f2d4171fd8b53e826b3/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1165.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1165.rs?ref=d7c5bbe6af7189a95d1e4f2d4171fd8b53e826b3", "patch": "@@ -0,0 +1,5 @@\n+struct Foo<T>(T);\n+\n+fn main() {\n+    &Foo(123);\n+}"}]}