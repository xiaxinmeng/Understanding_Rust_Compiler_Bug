{"sha": "d327113612c1b089eee87f04cd517b7f7103c1ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDMyNzExMzYxMmMxYjA4OWVlZTg3ZjA0Y2Q1MTdiN2Y3MTAzYzFlYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-05-22T09:24:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-05-22T09:24:24Z"}, "message": "sem_ch4.adb (Analyze_Call): In Ada2012 an incomplete type from a limited view may appear in the profile of...\n\n\t* sem_ch4.adb (Analyze_Call): In Ada2012 an incomplete type from a\n\tlimited view may appear in the profile of a function, and a call to\n\tthat function in another unit in which the full view is available must\n\tuse this full view to spurious type errors at the point of call.\n\t* inline.adb (Analyze_Inlined_Bodies): Remove restriction on loading\n\tof parent body with a with clause for the main unit.\n\t* gcc-interface/decl.c (defer_limited_with_list): Document new usage.\n\t(gnat_to_gnu_entity) <E_Access_Type>: Handle completed Taft Amendment\n\ttypes declared in external units like types from limited with clauses.\n\tAdjust final processing of defer_limited_with_list accordingly.\n\t* gcc-interface/trans.c (gnat_to_gnu) < N_Selected_Component>: Try\n\tagain to translate the prefix after the field if it is incomplete.\n\nFrom-SVN: r248321", "tree": {"sha": "5b660c58c813d8aea1e713136d95cb2b70afe62d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b660c58c813d8aea1e713136d95cb2b70afe62d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d327113612c1b089eee87f04cd517b7f7103c1ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d327113612c1b089eee87f04cd517b7f7103c1ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d327113612c1b089eee87f04cd517b7f7103c1ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d327113612c1b089eee87f04cd517b7f7103c1ea/comments", "author": null, "committer": null, "parents": [{"sha": "4c24ec6d58db238f64bda456ebdb0b5c82347d78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c24ec6d58db238f64bda456ebdb0b5c82347d78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c24ec6d58db238f64bda456ebdb0b5c82347d78"}], "stats": {"total": 264, "additions": 154, "deletions": 110}, "files": [{"sha": "945218bae91dedbb142e60f7ae067f2ca6b03484", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d327113612c1b089eee87f04cd517b7f7103c1ea", "patch": "@@ -1,3 +1,19 @@\n+2017-05-22  Ed Schonberg  <schonberg@adacore.com>\n+            Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Call): In Ada2012 an incomplete type from a\n+\tlimited view may appear in the profile of a function, and a call to\n+\tthat function in another unit in which the full view is available must\n+\tuse this full view to spurious type errors at the point of call.\n+\t* inline.adb (Analyze_Inlined_Bodies): Remove restriction on loading\n+\tof parent body with a with clause for the main unit.\n+\t* gcc-interface/decl.c (defer_limited_with_list): Document new usage.\n+\t(gnat_to_gnu_entity) <E_Access_Type>: Handle completed Taft Amendment\n+\ttypes declared in external units like types from limited with clauses.\n+\tAdjust final processing of defer_limited_with_list accordingly.\n+\t* gcc-interface/trans.c (gnat_to_gnu) < N_Selected_Component>: Try\n+\tagain to translate the prefix after the field if it is incomplete.\n+\n 2017-05-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_field): Do not enforce strict"}, {"sha": "91a03cd631bfbbd1edd565c089d047eac2871af0", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=d327113612c1b089eee87f04cd517b7f7103c1ea", "patch": "@@ -101,8 +101,8 @@ struct incomplete\n static int defer_incomplete_level = 0;\n static struct incomplete *defer_incomplete_list;\n \n-/* This variable is used to delay expanding From_Limited_With types until the\n-   end of the spec.  */\n+/* This variable is used to delay expanding types coming from a limited with\n+   clause and completed Taft Amendment types until the end of the spec.  */\n static struct incomplete *defer_limited_with_list;\n \n typedef struct subst_pair_d {\n@@ -3580,6 +3580,14 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \tconst bool is_from_limited_with\n \t  = (IN (Ekind (gnat_desig_equiv), Incomplete_Kind)\n \t     && From_Limited_With (gnat_desig_equiv));\n+\t/* Whether it is a completed Taft Amendment type.  Such a type is to\n+\t   be treated as coming from a limited with clause if it is not in\n+\t   the main unit, i.e. we break potential circularities here in case\n+\t   the body of an external unit is loaded for inter-unit inlining.  */\n+        const bool is_completed_taft_type\n+\t  = (IN (Ekind (gnat_desig_equiv), Incomplete_Kind)\n+\t     && Has_Completion_In_Body (gnat_desig_equiv)\n+\t     && Present (Full_View (gnat_desig_equiv)));\n \t/* The \"full view\" of the designated type.  If this is an incomplete\n \t   entity from a limited with, treat its non-limited view as the full\n \t   view.  Otherwise, if this is an incomplete or private type, use the\n@@ -3646,13 +3654,14 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \n \t/* Get the type of the thing we are to point to and build a pointer to\n \t   it.  If it is a reference to an incomplete or private type with a\n-\t   full view that is a record or an array, make a dummy type node and\n-\t   get the actual type later when we have verified it is safe.  */\n+\t   full view that is a record, an array or an access, make a dummy type\n+\t   and get the actual type later when we have verified it is safe.  */\n \telse if ((!in_main_unit\n \t\t  && !present_gnu_tree (gnat_desig_equiv)\n \t\t  && Present (gnat_desig_full)\n \t\t  && (Is_Record_Type (gnat_desig_full)\n-\t\t      || Is_Array_Type (gnat_desig_full)))\n+\t\t      || Is_Array_Type (gnat_desig_full)\n+\t\t      || Is_Access_Type (gnat_desig_full)))\n \t\t /* Likewise if this is a reference to a record, an array or a\n \t\t    subprogram type and we are to defer elaborating incomplete\n \t\t    types.  We do this because this access type may be the full\n@@ -3763,7 +3772,9 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t    save_gnu_tree (gnat_entity, gnu_decl, false);\n \t    saved = true;\n \n-\t    if (defer_incomplete_level == 0 && !is_from_limited_with)\n+\t    if (defer_incomplete_level == 0\n+\t\t&& !is_from_limited_with\n+\t\t&& !is_completed_taft_type)\n \t      {\n \t\tupdate_pointer_to (TYPE_MAIN_VARIANT (gnu_desig_type),\n \t\t\t\t   gnat_to_gnu_type (gnat_desig_equiv));\n@@ -3772,7 +3783,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t      {\n \t\tstruct incomplete *p = XNEW (struct incomplete);\n \t\tstruct incomplete **head\n-\t\t  = (is_from_limited_with\n+\t\t  = (is_from_limited_with || is_completed_taft_type\n \t\t     ? &defer_limited_with_list : &defer_incomplete_list);\n \n \t\tp->old_type = gnu_desig_type;\n@@ -4766,7 +4777,9 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t  }\n \n       for (p = defer_limited_with_list; p; p = p->next)\n-\tif (p->old_type && Non_Limited_View (p->full_type) == gnat_entity)\n+\tif (p->old_type\n+\t    && (Non_Limited_View (p->full_type) == gnat_entity\n+\t\t|| Full_View (p->full_type) == gnat_entity))\n \t  {\n \t    update_pointer_to (TYPE_MAIN_VARIANT (p->old_type),\n \t\t\t       TREE_TYPE (gnu_decl));"}, {"sha": "2542626d0ca86cdf382be189aef898495616828d", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=d327113612c1b089eee87f04cd517b7f7103c1ea", "patch": "@@ -6413,7 +6413,6 @@ gnat_to_gnu (Node_Id gnat_node)\n \tEntity_Id gnat_prefix = Prefix (gnat_node);\n \tEntity_Id gnat_field = Entity (Selector_Name (gnat_node));\n \ttree gnu_prefix = gnat_to_gnu (gnat_prefix);\n-\ttree gnu_field;\n \n \tgnu_prefix = maybe_implicit_deref (gnu_prefix);\n \n@@ -6442,8 +6441,19 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t\t\t       NULL_TREE, gnu_prefix);\n \telse\n \t  {\n-\t    gnu_field = gnat_to_gnu_field_decl (gnat_field);\n-\n+\t    tree gnu_field = gnat_to_gnu_field_decl (gnat_field);\n+\n+\t    /* If the prefix has incomplete type, try again to translate it.\n+\t       The idea is that the translation of the field just above may\n+\t       have completed it through gnat_to_gnu_entity, in case it is\n+\t       the dereference of an access to Taft Amendment type used in\n+\t       the instantiation of a generic body from an external unit.  */\n+\t    if (!COMPLETE_TYPE_P (TREE_TYPE (gnu_prefix)))\n+\t      {\n+\t\tgnu_prefix = gnat_to_gnu (gnat_prefix);\n+\t\tgnu_prefix = maybe_implicit_deref (gnu_prefix);\n+\t      }\n+\t\t\n \t    gnu_result\n \t      = build_component_ref (gnu_prefix, gnu_field,\n \t\t\t\t     (Nkind (Parent (gnat_node))"}, {"sha": "9f2539a6b62340d1f881687db39e047f4e535cfa", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 1, "deletions": 89, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=d327113612c1b089eee87f04cd517b7f7103c1ea", "patch": "@@ -667,57 +667,6 @@ package body Inline is\n          Table_Name           => \"Pending_Inlined\");\n       --  The workpile used to compute the transitive closure\n \n-      function Is_Ancestor_Of_Main\n-        (U_Name : Entity_Id;\n-         Nam    : Node_Id) return Boolean;\n-      --  Determine whether the unit whose body is loaded is an ancestor of\n-      --  the main unit, and has a with_clause on it. The body is not\n-      --  analyzed yet, so the check is purely lexical: the name of the with\n-      --  clause is a selected component, and names of ancestors must match.\n-\n-      -------------------------\n-      -- Is_Ancestor_Of_Main --\n-      -------------------------\n-\n-      function Is_Ancestor_Of_Main\n-        (U_Name : Entity_Id;\n-         Nam    : Node_Id) return Boolean\n-      is\n-         Pref : Node_Id;\n-\n-      begin\n-         if Nkind (Nam) /= N_Selected_Component then\n-            return False;\n-\n-         else\n-            if Chars (Selector_Name (Nam)) /=\n-               Chars (Cunit_Entity (Main_Unit))\n-            then\n-               return False;\n-            end if;\n-\n-            Pref := Prefix (Nam);\n-            if Nkind (Pref) = N_Identifier then\n-\n-               --  Par is an ancestor of Par.Child.\n-\n-               return Chars (Pref) = Chars (U_Name);\n-\n-            elsif Nkind (Pref) = N_Selected_Component\n-              and then Chars (Selector_Name (Pref)) = Chars (U_Name)\n-            then\n-               --  Par.Child is an ancestor of Par.Child.Grand.\n-\n-               return True;   --  should check that ancestor match\n-\n-            else\n-               --  A is an ancestor of A.B.C if it is an ancestor of A.B\n-\n-               return Is_Ancestor_Of_Main (U_Name, Pref);\n-            end if;\n-         end if;\n-      end Is_Ancestor_Of_Main;\n-\n    --  Start of processing for Analyze_Inlined_Bodies\n \n    begin\n@@ -766,7 +715,7 @@ package body Inline is\n                begin\n                   if not Is_Loaded (Bname) then\n                      Style_Check := False;\n-                     Load_Needed_Body (Comp_Unit, OK, Do_Analyze => False);\n+                     Load_Needed_Body (Comp_Unit, OK);\n \n                      if not OK then\n \n@@ -780,43 +729,6 @@ package body Inline is\n                         Error_Msg_File_1 :=\n                           Get_File_Name (Bname, Subunit => False);\n                         Error_Msg_N (\"\\but file{ was not found!??\", Comp_Unit);\n-\n-                     else\n-                        --  If the package to be inlined is an ancestor unit of\n-                        --  the main unit, and it has a semantic dependence on\n-                        --  it, the inlining cannot take place to prevent an\n-                        --  elaboration circularity. The desired body is not\n-                        --  analyzed yet, to prevent the completion of Taft\n-                        --  amendment types that would lead to elaboration\n-                        --  circularities in gigi.\n-\n-                        declare\n-                           U_Id      : constant Entity_Id :=\n-                                         Defining_Entity (Unit (Comp_Unit));\n-                           Body_Unit : constant Node_Id :=\n-                                         Library_Unit (Comp_Unit);\n-                           Item      : Node_Id;\n-\n-                        begin\n-                           Item := First (Context_Items (Body_Unit));\n-                           while Present (Item) loop\n-                              if Nkind (Item) = N_With_Clause\n-                                and then\n-                                  Is_Ancestor_Of_Main (U_Id, Name (Item))\n-                              then\n-                                 Set_Is_Inlined (U_Id, False);\n-                                 exit;\n-                              end if;\n-\n-                              Next (Item);\n-                           end loop;\n-\n-                           --  If no suspicious with_clauses, analyze the body\n-\n-                           if Is_Inlined (U_Id) then\n-                              Semantics (Body_Unit);\n-                           end if;\n-                        end;\n                      end if;\n                   end if;\n                end;"}, {"sha": "3b0717cf86aff5b7f45d4a970d908d5ef5f56bd7", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=d327113612c1b089eee87f04cd517b7f7103c1ea", "patch": "@@ -1469,18 +1469,26 @@ package body Sem_Ch4 is\n          --  can also happen when the function declaration appears before the\n          --  full view of the type (which is legal in Ada 2012) and the call\n          --  appears in a different unit, in which case the incomplete view\n-         --  must be replaced with the full view to prevent subsequent type\n-         --  errors.\n+         --  must be replaced with the full view (or the non-limited view)\n+         --  to prevent subsequent type errors. Note that the usual install/\n+         --  removal of limited_with clauses is not sufficient to handle this\n+         --  case, because the limited view may have been captured is another\n+         --  compilation unit that defines the current function.\n+\n+         if Is_Incomplete_Type (Etype (N)) then\n+            if Present (Full_View (Etype (N))) then\n+               if Is_Entity_Name (Nam) then\n+                  Set_Etype (Nam, Full_View (Etype (N)));\n+                  Set_Etype (Entity (Nam), Full_View (Etype (N)));\n+               end if;\n \n-         if Is_Incomplete_Type (Etype (N))\n-           and then Present (Full_View (Etype (N)))\n-         then\n-            if Is_Entity_Name (Nam) then\n-               Set_Etype (Nam, Full_View (Etype (N)));\n-               Set_Etype (Entity (Nam), Full_View (Etype (N)));\n-            end if;\n+               Set_Etype (N, Full_View (Etype (N)));\n \n-            Set_Etype (N, Full_View (Etype (N)));\n+            elsif From_Limited_With (Etype (N))\n+              and then Present (Non_Limited_View (Etype (N)))\n+            then\n+               Set_Etype (N, Non_Limited_View (Etype (N)));\n+            end if;\n          end if;\n       end if;\n    end Analyze_Call;"}, {"sha": "b058621f0e4850a849ac7584c977e6dd22e2b472", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d327113612c1b089eee87f04cd517b7f7103c1ea", "patch": "@@ -1,3 +1,10 @@\n+2017-05-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/limited_with5.ad[sb]: New test.\n+\t* gnat.dg/limited_with5_pkg.ad[sb]: New helper.\n+\t* gnat.dg/limited_with6.ad[sb]: New test.\n+\t* gnat.dg/limited_with6_pkg.ad[sb]: New helper.\n+\n 2017-05-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/volatile1.ads: Remove obsolete errors."}, {"sha": "c3bf270b35e742f5e5a36dc306b4b9dd93e0e75d", "filename": "gcc/testsuite/gnat.dg/limited_with5.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with5.adb?ref=d327113612c1b089eee87f04cd517b7f7103c1ea", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -gnatn -Winline\" }\n+\n+package body Limited_With5 is\n+  procedure Doit (Obj : Limited_With5_Pkg.T) is\n+  begin\n+    if Limited_With5_Pkg.Get_Expression_Support (Obj) > Sup_T'(100) then\n+      raise Program_Error;\n+    end if;\n+  end Doit;\n+end Limited_With5;"}, {"sha": "4a242a04e114fd00351576d5fe2de3d9d65bc106", "filename": "gcc/testsuite/gnat.dg/limited_with5.ads", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with5.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with5.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with5.ads?ref=d327113612c1b089eee87f04cd517b7f7103c1ea", "patch": "@@ -0,0 +1,6 @@\n+with Limited_With5_Pkg;\n+\n+package Limited_With5 is\n+  type Sup_T is new Integer;\n+  procedure Doit (Obj : Limited_With5_Pkg.T);\n+end Limited_With5;"}, {"sha": "785f84e91fda2f80c621d3da4fe376ac0b42f5e7", "filename": "gcc/testsuite/gnat.dg/limited_with5_pkg.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with5_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with5_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with5_pkg.adb?ref=d327113612c1b089eee87f04cd517b7f7103c1ea", "patch": "@@ -0,0 +1,8 @@\n+with Limited_With5;\n+\n+package body Limited_With5_Pkg is\n+  function Get_Expression_Support (Obj : T) return Limited_With5.Sup_T is\n+  begin\n+    return Limited_With5.Sup_T (Obj + 1);\n+  end Get_Expression_Support;\n+end Limited_With5_Pkg;"}, {"sha": "e048653a873cd3d03141ffaac86a94c7b64182a0", "filename": "gcc/testsuite/gnat.dg/limited_with5_pkg.ads", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with5_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with5_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with5_pkg.ads?ref=d327113612c1b089eee87f04cd517b7f7103c1ea", "patch": "@@ -0,0 +1,8 @@\n+limited with Limited_With5;\n+\n+package Limited_With5_Pkg is\n+  type T is limited private;\n+  function Get_Expression_Support (Obj : T) return Limited_With5.Sup_T with Inline;\n+private\n+  type T is new Integer;\n+end Limited_With5_Pkg;"}, {"sha": "972b47231e8f968b625310adc0f2aa392bda1a11", "filename": "gcc/testsuite/gnat.dg/limited_with6.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with6.adb?ref=d327113612c1b089eee87f04cd517b7f7103c1ea", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -gnatn -Winline\" }\n+\n+package body Limited_With6 is\n+  procedure Doit (Obj : Limited_With6_Pkg.T) is\n+  begin\n+    if Limited_With6_Pkg.Get_Expression_Support (Obj) > Sup_T'(100) then\n+      raise Program_Error;\n+    end if;\n+  end Doit;\n+end Limited_With6;"}, {"sha": "05b9cc9fa408e03e1c600dbb0ae9ae9376140089", "filename": "gcc/testsuite/gnat.dg/limited_with6.ads", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with6.ads?ref=d327113612c1b089eee87f04cd517b7f7103c1ea", "patch": "@@ -0,0 +1,10 @@\n+with Limited_With6_Pkg;\n+\n+package Limited_With6 is\n+  type Sup_T is new Integer;\n+  procedure Doit (Obj : Limited_With6_Pkg.T);\n+\n+  type Rec is record\n+    A : Limited_With6_Pkg.Taft_Ptr;\n+  end record;\n+end Limited_With6;"}, {"sha": "46db471446b36fbd1092fc603ffa541d02548b83", "filename": "gcc/testsuite/gnat.dg/limited_with6_pkg.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with6_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with6_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with6_pkg.adb?ref=d327113612c1b089eee87f04cd517b7f7103c1ea", "patch": "@@ -0,0 +1,10 @@\n+with Limited_With6;\n+\n+package body Limited_With6_Pkg is\n+  function Get_Expression_Support (Obj : T) return Limited_With6.Sup_T is\n+  begin\n+    return Limited_With6.Sup_T (Obj + 1);\n+  end Get_Expression_Support;\n+\n+  type TT is access all Limited_With6.Rec;\n+end Limited_With6_Pkg;"}, {"sha": "4eab8682635b2480e31b042ffe46a0450cee2632", "filename": "gcc/testsuite/gnat.dg/limited_with6_pkg.ads", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with6_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d327113612c1b089eee87f04cd517b7f7103c1ea/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with6_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Flimited_with6_pkg.ads?ref=d327113612c1b089eee87f04cd517b7f7103c1ea", "patch": "@@ -0,0 +1,14 @@\n+limited with Limited_With6;\n+\n+package Limited_With6_Pkg is\n+  type T is limited private;\n+  function Get_Expression_Support (Obj : T) return Limited_With6.Sup_T with Inline;\n+\n+  type Taft_Ptr is private;\n+\n+private\n+  type T is new Integer;\n+\n+  type TT;\n+  type Taft_Ptr is access TT;\n+end Limited_With6_Pkg;"}]}