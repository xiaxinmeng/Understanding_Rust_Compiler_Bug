{"sha": "9a53101caadae1b5c8d791d247b05268ee4f7f92", "node_id": "C_kwDOANBUbNoAKDlhNTMxMDFjYWFkYWUxYjVjOGQ3OTFkMjQ3YjA1MjY4ZWU0ZjdmOTI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-13T07:35:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-05-16T06:23:39Z"}, "message": "Add MIN/MAX folding from fold_cond_expr_with_comparison to match.pd\n\nThe following adds MIN/MAX folding from fold_cond_expr_with_comparison\nto the part GIMPLE of match.pd, leaving the GENERIC part in\nfold-const.cc since that's constrainted on frontend specific things\nI did not want to carry to match.pd.\n\nThe effect becomes appearant when we no longer can rely on GENERIC\nfolding of COND_EXPRs in gcc.dg/tree-ssa/pr92834.c and\ngcc.dg/tree-ssa/pr94786.c.\n\n2022-05-13  Richard Biener  <rguenther@suse.de>\n\n\t* match.pd (A cmp B ? A : B -> min/max): New patterns\n\tcarried over from fold_cond_expr_with_comparison.", "tree": {"sha": "040afa50012036ba4b92a2438df74d3bd7bb2764", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/040afa50012036ba4b92a2438df74d3bd7bb2764"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a53101caadae1b5c8d791d247b05268ee4f7f92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a53101caadae1b5c8d791d247b05268ee4f7f92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a53101caadae1b5c8d791d247b05268ee4f7f92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a53101caadae1b5c8d791d247b05268ee4f7f92/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c4b5c519f0df37e4903992644cc29682721bc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69c4b5c519f0df37e4903992644cc29682721bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69c4b5c519f0df37e4903992644cc29682721bc1"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "0995055fcb51cd6fa66e2ec2a260b924849f8638", "filename": "gcc/match.pd", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a53101caadae1b5c8d791d247b05268ee4f7f92/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a53101caadae1b5c8d791d247b05268ee4f7f92/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=9a53101caadae1b5c8d791d247b05268ee4f7f92", "patch": "@@ -4450,6 +4450,52 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t(op (min @X { wide_int_to_tree (from_type, real_c1); })\n \t    { wide_int_to_tree (from_type, c2); })))))))))\n \n+#if GIMPLE\n+/* A >= B ? A : B -> max (A, B) and friends.  The code is still\n+   in fold_cond_expr_with_comparison for GENERIC folding with\n+   some extra constraints.  */\n+(for cmp (eq ne le lt unle unlt ge gt unge ungt uneq ltgt)\n+ (simplify\n+  (cond (cmp:c (nop_convert1?@c0 @0) (nop_convert2?@c1 @1))\n+        (convert3? @0) (convert4? @1))\n+  (if (!HONOR_SIGNED_ZEROS (type)\n+       && ((INTEGRAL_TYPE_P (type)\n+\t    /* Allow widening conversions of the data.  */\n+\t    && TYPE_PRECISION (TREE_TYPE (@0)) <= TYPE_PRECISION (type)\n+\t    && TYPE_PRECISION (TREE_TYPE (@1)) <= TYPE_PRECISION (type))\n+\t   || (tree_nop_conversion_p (type, TREE_TYPE (@0))\n+\t       && tree_nop_conversion_p (type, TREE_TYPE (@1)))))\n+   (switch\n+    (if (cmp == EQ_EXPR)\n+     (if (VECTOR_TYPE_P (type))\n+      (view_convert @c1)\n+      (convert @c1)))\n+    (if (cmp == NE_EXPR)\n+     (if (VECTOR_TYPE_P (type))\n+      (view_convert @c0)\n+      (convert @c0)))\n+    (if (cmp == LE_EXPR || cmp == UNLE_EXPR || cmp == LT_EXPR || cmp == UNLT_EXPR)\n+     (if (!HONOR_NANS (type))\n+      (if (VECTOR_TYPE_P (type))\n+       (view_convert (min @c0 @c1))\n+       (convert (min @c0 @c1)))))\n+    (if (cmp == GE_EXPR || cmp == UNGE_EXPR || cmp == GT_EXPR || cmp == UNGT_EXPR)\n+     (if (!HONOR_NANS (type))\n+      (if (VECTOR_TYPE_P (type))\n+       (view_convert (max @c0 @c1))\n+       (convert (max @c0 @c1)))))\n+    (if (cmp == UNEQ_EXPR)\n+     (if (!HONOR_NANS (type))\n+      (if (VECTOR_TYPE_P (type))\n+       (view_convert @c1)\n+       (convert @c1))))\n+    (if (cmp == LTGT_EXPR)\n+     (if (!HONOR_NANS (type))\n+      (if (VECTOR_TYPE_P (type))\n+       (view_convert @c0)\n+       (convert @c0))))))))\n+#endif\n+\n /* X != C1 ? -X : C2 simplifies to -X when -C1 == C2.  */\n (simplify\n  (cond (ne @0 INTEGER_CST@1) (negate@3 @0) INTEGER_CST@2)"}]}