{"sha": "8128cccfcf38a5b55f4f2a9fce020609fe997c09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEyOGNjY2ZjZjM4YTViNTVmNGYyYTlmY2UwMjA2MDlmZTk5N2MwOQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2002-11-18T20:43:40Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-11-18T20:43:40Z"}, "message": "re PR preprocessor/8524 (_Pragma within macros is improperly expanded)\n\n\tPR preprocessor/8524\n\t* cpplib.c (run_directive): Remove previous kludge to _Pragma.\n\tAdd a new one in its place, which hopefully works.\n\t(skip_rest_of_line): Change test for bottom-of-context-stack.\ntestsuite:\n\t* gcc.dg/cpp/_Pragma5.c: New test.\n\nFrom-SVN: r59232", "tree": {"sha": "3d1d5d6ac428187c5574b5b150f66ff68b5f2568", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d1d5d6ac428187c5574b5b150f66ff68b5f2568"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8128cccfcf38a5b55f4f2a9fce020609fe997c09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8128cccfcf38a5b55f4f2a9fce020609fe997c09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8128cccfcf38a5b55f4f2a9fce020609fe997c09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8128cccfcf38a5b55f4f2a9fce020609fe997c09/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "951992020587ab735079e9c4d8706a16ffeba84f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/951992020587ab735079e9c4d8706a16ffeba84f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/951992020587ab735079e9c4d8706a16ffeba84f"}], "stats": {"total": 71, "additions": 49, "deletions": 22}, "files": [{"sha": "13371e2c6e8f6aec86190263ca8658f123d1aff4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8128cccfcf38a5b55f4f2a9fce020609fe997c09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8128cccfcf38a5b55f4f2a9fce020609fe997c09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8128cccfcf38a5b55f4f2a9fce020609fe997c09", "patch": "@@ -1,3 +1,10 @@\n+2002-11-18  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\tPR preprocessor/8524\n+\t* cpplib.c (run_directive): Remove previous kludge to _Pragma.\n+\tAdd a new one in its place, which hopefully works.\n+\t(skip_rest_of_line): Change test for bottom-of-context-stack.\n+\n Mon Nov 18 21:29:03 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (addqi_1_slp): Fix output template."}, {"sha": "7092cc002f8670602432bdf9c1d78aa752dd3fa3", "filename": "gcc/cpplib.c", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8128cccfcf38a5b55f4f2a9fce020609fe997c09/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8128cccfcf38a5b55f4f2a9fce020609fe997c09/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=8128cccfcf38a5b55f4f2a9fce020609fe997c09", "patch": "@@ -207,7 +207,7 @@ skip_rest_of_line (pfile)\n      cpp_reader *pfile;\n {\n   /* Discard all stacked contexts.  */\n-  while (pfile->context != &pfile->base_context)\n+  while (pfile->context->prev)\n     _cpp_pop_context (pfile);\n \n   /* Sweep up all tokens remaining on the line.  */\n@@ -1277,9 +1277,6 @@ destringize_and_run (pfile, in)\n {\n   const unsigned char *src, *limit;\n   char *dest, *result;\n-  cpp_context saved_context;\n-  cpp_context *saved_cur_context;\n-  unsigned int saved_line;\n \n   dest = result = alloca (in->len + 1);\n   for (src = in->text, limit = src + in->len; src < limit;)\n@@ -1291,24 +1288,29 @@ destringize_and_run (pfile, in)\n     }\n   *dest = '\\0';\n \n-  /* FIXME.  All this saving is a horrible kludge to handle the case\n-     when we're in a macro expansion.\n-\n-     A better strategy it to not convert _Pragma to #pragma if doing\n-     preprocessed output, but to just pass it through as-is, unless it\n-     is a CPP pragma in which case is should be processed normally.\n-     When compiling the preprocessed output the _Pragma should be\n-     handled.  This will be become necessary when we move to\n-     line-at-a-time lexing since we will be macro-expanding the line\n-     before outputting / compiling it.  */\n-  saved_line = pfile->line;\n-  saved_context = pfile->base_context;\n-  saved_cur_context = pfile->context;\n-  pfile->context = &pfile->base_context;\n-  run_directive (pfile, T_PRAGMA, result, dest - result);\n-  pfile->context = saved_cur_context;\n-  pfile->base_context = saved_context;\n-  pfile->line = saved_line;\n+  /* Ugh; an awful kludge.  We are really not set up to be lexing\n+     tokens when in the middle of a macro expansion.  Use a new\n+     context to force cpp_get_token to lex, and so skip_rest_of_line\n+     doesn't go beyond the end of the text.  Also, remember the\n+     current lexing position so we can return to it later.\n+\n+     Something like line-at-a-time lexing should remove the need for\n+     this.  */\n+  {\n+    cpp_context *saved_context = pfile->context;\n+    cpp_token *saved_cur_token = pfile->cur_token;\n+    tokenrun *saved_cur_run = pfile->cur_run;\n+\n+    pfile->context = xnew (cpp_context);\n+    pfile->context->macro = 0;\n+    pfile->context->prev = 0;\n+    run_directive (pfile, T_PRAGMA, result, dest - result);\n+    free (pfile->context);\n+    pfile->context = saved_context;\n+    pfile->cur_token = saved_cur_token;\n+    pfile->cur_run = saved_cur_run;\n+    pfile->line--;\n+  }\n \n   /* See above comment.  For the moment, we'd like\n "}, {"sha": "b1448b0abd7a3b4a6025bafc7fb3f178bf1bc6fe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8128cccfcf38a5b55f4f2a9fce020609fe997c09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8128cccfcf38a5b55f4f2a9fce020609fe997c09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8128cccfcf38a5b55f4f2a9fce020609fe997c09", "patch": "@@ -1,3 +1,7 @@\n+2002-11-18  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* gcc.dg/cpp/_Pragma5.c: New test.\n+\n 2002-11-18  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gcc.c-torture/execute/20021118-2.c: New test."}, {"sha": "ace50412cc61cff7a6767d64a962a0747fd2b3cd", "filename": "gcc/testsuite/gcc.dg/cpp/_Pragma5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8128cccfcf38a5b55f4f2a9fce020609fe997c09/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8128cccfcf38a5b55f4f2a9fce020609fe997c09/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma5.c?ref=8128cccfcf38a5b55f4f2a9fce020609fe997c09", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do preprocess } */\n+\n+/* Based on Debian GNATS PR 8524.  17 Nov 2002.  */\n+\n+#define ALPHA(A) alpha_ ## A\n+#define BETA(B) beta_ ## B\n+#define GAMMA(C) _Pragma(\"moose\") ALPHA(C) BETA(C)\n+GAMMA(baz);\n+\n+/*\n+   { dg-final { if ![file exists _Pragma5.i] { return }                   } }\n+   { dg-final { if { [grep _Pragma5.i \"alpha_baz beta_baz;\"] != \"\" } { return }  } }\n+   { dg-final { fail \"_Pragma5.c: _Pragma in macro\"                       } }\n+*/"}]}