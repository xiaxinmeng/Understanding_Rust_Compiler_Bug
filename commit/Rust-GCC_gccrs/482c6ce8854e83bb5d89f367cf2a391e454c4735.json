{"sha": "482c6ce8854e83bb5d89f367cf2a391e454c4735", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgyYzZjZTg4NTRlODNiYjVkODlmMzY3Y2YyYTM5MWU0NTRjNDczNQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-07-27T14:02:27Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-07-27T14:02:27Z"}, "message": "builtins.c (fold_fixed_mathfn): When long and long long are the same size...\n\n\n\t* builtins.c (fold_fixed_mathfn): When long and long long are the\n\tsame size, canonicalize llceil*, llfloor*, llround* and llrint*\n\tfunctions to their lceil*, lfloor*, lround* and lrint* forms.\n\n\t* gcc.dg/builtins-55.c: New test case.\n\nFrom-SVN: r115775", "tree": {"sha": "8f719633623f288ed24eae0d3489f6505aeb6a66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f719633623f288ed24eae0d3489f6505aeb6a66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/482c6ce8854e83bb5d89f367cf2a391e454c4735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/482c6ce8854e83bb5d89f367cf2a391e454c4735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/482c6ce8854e83bb5d89f367cf2a391e454c4735", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/482c6ce8854e83bb5d89f367cf2a391e454c4735/comments", "author": null, "committer": null, "parents": [{"sha": "721cedf2517390c2fd7b7f2c3272177ff1a50f10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/721cedf2517390c2fd7b7f2c3272177ff1a50f10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/721cedf2517390c2fd7b7f2c3272177ff1a50f10"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "aedce7272dc27dfd85975d677f150dfe29845fef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/482c6ce8854e83bb5d89f367cf2a391e454c4735/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/482c6ce8854e83bb5d89f367cf2a391e454c4735/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=482c6ce8854e83bb5d89f367cf2a391e454c4735", "patch": "@@ -1,3 +1,9 @@\n+2006-07-27  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (fold_fixed_mathfn): When long and long long are the\n+\tsame size, canonicalize llceil*, llfloor*, llround* and llrint*\n+\tfunctions to their lceil*, lfloor*, lround* and lrint* forms.\n+\n 2006-07-27  Kazuhiro Inaoka  <inaoka.kazuhiro@renesas.com>\n \n \tPR gcc/28508"}, {"sha": "47c61cdb1332d376a092bf6f8aa2bd7aebd6bfc4", "filename": "gcc/builtins.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/482c6ce8854e83bb5d89f367cf2a391e454c4735/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/482c6ce8854e83bb5d89f367cf2a391e454c4735/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=482c6ce8854e83bb5d89f367cf2a391e454c4735", "patch": "@@ -6772,6 +6772,42 @@ fold_fixed_mathfn (tree fndecl, tree arglist)\n \t  return build_function_call_expr (decl, arglist);\n \t}\n     }\n+\n+  /* Canonicalize llround (x) to lround (x) on LP64 targets where\n+     sizeof (long long) == sizeof (long).  */\n+  if (TYPE_PRECISION (long_long_integer_type_node)\n+      == TYPE_PRECISION (long_integer_type_node))\n+    {\n+      tree newfn = NULL_TREE;\n+      switch (fcode)\n+\t{\n+\tCASE_FLT_FN (BUILT_IN_LLCEIL):\n+\t  newfn = mathfn_built_in (TREE_TYPE (arg), BUILT_IN_LCEIL);\n+\t  break;\n+\n+\tCASE_FLT_FN (BUILT_IN_LLFLOOR):\n+\t  newfn = mathfn_built_in (TREE_TYPE (arg), BUILT_IN_LFLOOR);\n+\t  break;\n+\n+\tCASE_FLT_FN (BUILT_IN_LLROUND):\n+\t  newfn = mathfn_built_in (TREE_TYPE (arg), BUILT_IN_LROUND);\n+\t  break;\n+\n+\tCASE_FLT_FN (BUILT_IN_LLRINT):\n+\t  newfn = mathfn_built_in (TREE_TYPE (arg), BUILT_IN_LRINT);\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+\n+      if (newfn)\n+\t{\n+\t  tree newcall = build_function_call_expr (newfn, arglist);\n+\t  return fold_convert (TREE_TYPE (TREE_TYPE (fndecl)), newcall);\n+\t}\n+    }\n+\n   return 0;\n }\n "}, {"sha": "cc0bc146f90c839e9a766c1eea14d1d7858b864e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/482c6ce8854e83bb5d89f367cf2a391e454c4735/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/482c6ce8854e83bb5d89f367cf2a391e454c4735/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=482c6ce8854e83bb5d89f367cf2a391e454c4735", "patch": "@@ -1,3 +1,7 @@\n+2006-07-27  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/builtins-55.c: New test case.\n+\n 2006-07-26  Zdenek Dvorak <dvorakz@suse.cz>\n \n \tPR rtl-optimization/27907"}, {"sha": "d804f290e008d356ae2a58aebeb54f2fee51478b", "filename": "gcc/testsuite/gcc.dg/builtins-55.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/482c6ce8854e83bb5d89f367cf2a391e454c4735/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-55.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/482c6ce8854e83bb5d89f367cf2a391e454c4735/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-55.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-55.c?ref=482c6ce8854e83bb5d89f367cf2a391e454c4735", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+/* { dg-options \"-ffast-math -mmacosx-version-min=10.3\" { target powerpc-*-darwin* } } */\n+/* { dg-options \"-O2 -ffast-math -std=c99\" { target *-*-solaris2* } } */\n+\n+#include \"builtins-config.h\"\n+\n+void link_error (void);\n+\n+extern long lround(double);\n+extern long lrint(double);\n+\n+extern long long llround(double);\n+extern long long llrint(double);\n+\n+extern long lroundf(float);\n+extern long lrintf(float);\n+\n+extern long long llroundf(float);\n+extern long long llrintf(float);\n+\n+extern long lroundl(long double);\n+extern long lrintl(long double);\n+\n+extern long long llroundl(long double);\n+extern long long llrintl(long double);\n+\n+\n+void test(double x)\n+{\n+#ifdef HAVE_C99_RUNTIME\n+  if (sizeof(long) != sizeof(long long))\n+    return;\n+\n+  if (lround(x) != llround(x))\n+    link_error();\n+  if (lrint(x) != llrint(x))\n+    link_error();\n+#endif\n+}\n+\n+void testf(float x)\n+{\n+#ifdef HAVE_C99_RUNTIME\n+  if (sizeof(long) != sizeof(long long))\n+    return;\n+\n+  if (lroundf(x) != llroundf(x))\n+    link_error();\n+  if (lrintf(x) != llrintf(x))\n+    link_error();\n+#endif\n+}\n+\n+void testl(long double x)\n+{\n+#ifdef HAVE_C99_RUNTIME\n+  if (sizeof(long) != sizeof(long long))\n+    return;\n+\n+  if (lroundl(x) != llroundl(x))\n+    link_error();\n+  if (lrintl(x) != llrintl(x))\n+    link_error();\n+#endif\n+}\n+\n+int main()\n+{\n+  test(0.0);\n+  testf(0.0);\n+  testl(0.0);\n+  return 0;\n+}\n+"}]}