{"sha": "7e60c24caa1ca27e9360ecea605db219a5c951c1", "node_id": "C_kwDOANBUbNoAKDdlNjBjMjRjYWExY2EyN2U5MzYwZWNlYTYwNWRiMjE5YTVjOTUxYzE", "commit": {"author": {"name": "chenglulu", "email": "chenglulu@loongson.cn", "date": "2021-11-27T07:02:46Z"}, "committer": {"name": "Chenghua Xu", "email": "paul.hua.gm@gmail.com", "date": "2022-03-29T09:43:35Z"}, "message": "LoongArch Port: Builtin macros.\n\n2022-03-29  Chenghua Xu  <xuchenghua@loongson.cn>\n\t    Lulu Cheng  <chenglulu@loongson.cn>\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch-c.cc", "tree": {"sha": "4ba6085742ee25987ea132333155cdfc4aab7690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ba6085742ee25987ea132333155cdfc4aab7690"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e60c24caa1ca27e9360ecea605db219a5c951c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e60c24caa1ca27e9360ecea605db219a5c951c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e60c24caa1ca27e9360ecea605db219a5c951c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e60c24caa1ca27e9360ecea605db219a5c951c1/comments", "author": {"login": "chenglulu326", "id": 88083425, "node_id": "MDQ6VXNlcjg4MDgzNDI1", "avatar_url": "https://avatars.githubusercontent.com/u/88083425?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenglulu326", "html_url": "https://github.com/chenglulu326", "followers_url": "https://api.github.com/users/chenglulu326/followers", "following_url": "https://api.github.com/users/chenglulu326/following{/other_user}", "gists_url": "https://api.github.com/users/chenglulu326/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenglulu326/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenglulu326/subscriptions", "organizations_url": "https://api.github.com/users/chenglulu326/orgs", "repos_url": "https://api.github.com/users/chenglulu326/repos", "events_url": "https://api.github.com/users/chenglulu326/events{/privacy}", "received_events_url": "https://api.github.com/users/chenglulu326/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChenghuaXu", "id": 87753117, "node_id": "MDQ6VXNlcjg3NzUzMTE3", "avatar_url": "https://avatars.githubusercontent.com/u/87753117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChenghuaXu", "html_url": "https://github.com/ChenghuaXu", "followers_url": "https://api.github.com/users/ChenghuaXu/followers", "following_url": "https://api.github.com/users/ChenghuaXu/following{/other_user}", "gists_url": "https://api.github.com/users/ChenghuaXu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChenghuaXu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChenghuaXu/subscriptions", "organizations_url": "https://api.github.com/users/ChenghuaXu/orgs", "repos_url": "https://api.github.com/users/ChenghuaXu/repos", "events_url": "https://api.github.com/users/ChenghuaXu/events{/privacy}", "received_events_url": "https://api.github.com/users/ChenghuaXu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2aca9d5b92723ee3e34b011902582e8738208695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aca9d5b92723ee3e34b011902582e8738208695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aca9d5b92723ee3e34b011902582e8738208695"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "d6e3e19f0493b958af9b85807fbdabc014a6f89a", "filename": "gcc/config/loongarch/loongarch-c.cc", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e60c24caa1ca27e9360ecea605db219a5c951c1/gcc%2Fconfig%2Floongarch%2Floongarch-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e60c24caa1ca27e9360ecea605db219a5c951c1/gcc%2Fconfig%2Floongarch%2Floongarch-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch-c.cc?ref=7e60c24caa1ca27e9360ecea605db219a5c951c1", "patch": "@@ -0,0 +1,109 @@\n+/* LoongArch-specific code for C family languages.\n+   Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#define IN_TARGET_CODE 1\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"c-family/c-common.h\"\n+#include \"cpplib.h\"\n+\n+#define preprocessing_asm_p() (cpp_get_options (pfile)->lang == CLK_ASM)\n+#define builtin_define(TXT) cpp_define (pfile, TXT)\n+#define builtin_assert(TXT) cpp_assert (pfile, TXT)\n+\n+/* Define preprocessor macros for the -march and -mtune options.\n+   PREFIX is either _LOONGARCH_ARCH or _LOONGARCH_TUNE, INFO is\n+   the selected processor.  If INFO's canonical name is \"foo\",\n+   define PREFIX to be \"foo\", and define an additional macro\n+   PREFIX_FOO.  */\n+#define LARCH_CPP_SET_PROCESSOR(PREFIX, CPU_TYPE)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      char *macro, *p;\t\t\t\t\t\t\t\\\n+      int cpu_type = (CPU_TYPE);\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      macro = concat ((PREFIX), \"_\",\t\t\t\t\t\\\n+\t\t      loongarch_cpu_strings[cpu_type], NULL);\t\t\\\n+      for (p = macro; *p != 0; p++)\t\t\t\t\t\\\n+\t*p = TOUPPER (*p);\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      builtin_define (macro);\t\t\t\t\t\t\\\n+      builtin_define_with_value ((PREFIX),\t\t\t\t\\\n+\t\t\t\t loongarch_cpu_strings[cpu_type], 1);\t\\\n+      free (macro);\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+void\n+loongarch_cpu_cpp_builtins (cpp_reader *pfile)\n+{\n+  builtin_assert (\"machine=loongarch\");\n+  builtin_assert (\"cpu=loongarch\");\n+  builtin_define (\"__loongarch__\");\n+\n+  LARCH_CPP_SET_PROCESSOR (\"_LOONGARCH_ARCH\", LARCH_ACTUAL_ARCH);\n+  LARCH_CPP_SET_PROCESSOR (\"_LOONGARCH_TUNE\", LARCH_ACTUAL_TUNE);\n+\n+  /* Base architecture / ABI.  */\n+  if (TARGET_64BIT)\n+    {\n+      builtin_define (\"__loongarch_grlen=64\");\n+      builtin_define (\"__loongarch64\");\n+    }\n+\n+  if (TARGET_ABI_LP64)\n+    {\n+      builtin_define (\"_ABILP64=3\");\n+      builtin_define (\"_LOONGARCH_SIM=_ABILP64\");\n+      builtin_define (\"__loongarch_lp64\");\n+    }\n+\n+  /* These defines reflect the ABI in use, not whether the\n+     FPU is directly accessible.  */\n+  if (TARGET_DOUBLE_FLOAT_ABI)\n+    builtin_define (\"__loongarch_double_float=1\");\n+  else if (TARGET_SINGLE_FLOAT_ABI)\n+    builtin_define (\"__loongarch_single_float=1\");\n+\n+  if (TARGET_DOUBLE_FLOAT_ABI || TARGET_SINGLE_FLOAT_ABI)\n+    builtin_define (\"__loongarch_hard_float=1\");\n+  else\n+    builtin_define (\"__loongarch_soft_float=1\");\n+\n+\n+  /* ISA Extensions.  */\n+  if (TARGET_DOUBLE_FLOAT)\n+    builtin_define (\"__loongarch_frlen=64\");\n+  else if (TARGET_SINGLE_FLOAT)\n+    builtin_define (\"__loongarch_frlen=32\");\n+  else\n+    builtin_define (\"__loongarch_frlen=0\");\n+\n+  /* Native Data Sizes.  */\n+  builtin_define_with_int_value (\"_LOONGARCH_SZINT\", INT_TYPE_SIZE);\n+  builtin_define_with_int_value (\"_LOONGARCH_SZLONG\", LONG_TYPE_SIZE);\n+  builtin_define_with_int_value (\"_LOONGARCH_SZPTR\", POINTER_SIZE);\n+  builtin_define_with_int_value (\"_LOONGARCH_FPSET\", 32);\n+  builtin_define_with_int_value (\"_LOONGARCH_SPFPSET\", 32);\n+\n+}"}]}