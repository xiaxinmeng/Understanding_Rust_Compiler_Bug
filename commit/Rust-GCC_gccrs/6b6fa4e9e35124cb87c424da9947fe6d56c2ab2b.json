{"sha": "6b6fa4e9e35124cb87c424da9947fe6d56c2ab2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI2ZmE0ZTllMzUxMjRjYjg3YzQyNGRhOTk0N2ZlNmQ1NmMyYWIyYg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2008-01-03T22:59:48Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2008-01-03T22:59:48Z"}, "message": "re PR tree-optimization/34458 (ICE in int_cst_value, at tree.c:8047 at -O3)\n\n2008-01-03  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tRevert fix for PR tree-optimization/34458.\n\nFrom-SVN: r131308", "tree": {"sha": "5250b2886e7f3ff0ad700a413e64d1ba9e6a6070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5250b2886e7f3ff0ad700a413e64d1ba9e6a6070"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b6fa4e9e35124cb87c424da9947fe6d56c2ab2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6fa4e9e35124cb87c424da9947fe6d56c2ab2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6fa4e9e35124cb87c424da9947fe6d56c2ab2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6fa4e9e35124cb87c424da9947fe6d56c2ab2b/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2726bafeee02a584d1ceb8bd1a50544b348590ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2726bafeee02a584d1ceb8bd1a50544b348590ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2726bafeee02a584d1ceb8bd1a50544b348590ec"}], "stats": {"total": 61, "additions": 22, "deletions": 39}, "files": [{"sha": "92c7fd2fad36089fd0e0b9c807f7b326f5d44bba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6fa4e9e35124cb87c424da9947fe6d56c2ab2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6fa4e9e35124cb87c424da9947fe6d56c2ab2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b6fa4e9e35124cb87c424da9947fe6d56c2ab2b", "patch": "@@ -1,3 +1,7 @@\n+2008-01-03  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tRevert fix for PR tree-optimization/34458.\n+\n 2008-01-03  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR tree-optimization/34458"}, {"sha": "58aaae22f34ad132a4b2d80db212906c1d77e864", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6fa4e9e35124cb87c424da9947fe6d56c2ab2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6fa4e9e35124cb87c424da9947fe6d56c2ab2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b6fa4e9e35124cb87c424da9947fe6d56c2ab2b", "patch": "@@ -1,3 +1,7 @@\n+2008-01-03  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tRevert fix for PR tree-optimization/34458.\n+\n 2008-01-03  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR tree-optimization/34458"}, {"sha": "df757bf51d7ff4afcfed1da07e15183cfc2581c8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr34458.c", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2726bafeee02a584d1ceb8bd1a50544b348590ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr34458.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2726bafeee02a584d1ceb8bd1a50544b348590ec/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr34458.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr34458.c?ref=2726bafeee02a584d1ceb8bd1a50544b348590ec", "patch": "@@ -1,14 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O3\" } */\n-\n-struct A\n-{\n-  int x[8];\n-};\n-\n-void foo(struct A* p, long long j)\n-{\n-  int i;\n-  for (i = 0; i < 2; ++i)\n-    p->x[i+j+1] = p->x[i+j];\n-}"}, {"sha": "88f6347f777d8afd7ba8adec05999bc118285c2e", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6fa4e9e35124cb87c424da9947fe6d56c2ab2b/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6fa4e9e35124cb87c424da9947fe6d56c2ab2b/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=6b6fa4e9e35124cb87c424da9947fe6d56c2ab2b", "patch": "@@ -1817,17 +1817,6 @@ analyze_siv_subscript_cst_affine (tree chrec_a,\n     }\n }\n \n-/* Return the HWI converted value of X.  */\n-\n-static inline HOST_WIDE_INT\n-dd_int_cst_value (tree x)\n-{\n-  if (TYPE_PRECISION (TREE_TYPE (x)) > HOST_BITS_PER_WIDE_INT)\n-    x = fold_convert (integer_type_node, x);\n-\n-  return int_cst_value (x);\n-}\n-\n /* Helper recursive function for initializing the matrix A.  Returns\n    the initial value of CHREC.  */\n \n@@ -1837,9 +1826,9 @@ initialize_matrix_A (lambda_matrix A, tree chrec, unsigned index, int mult)\n   gcc_assert (chrec);\n \n   if (TREE_CODE (chrec) != POLYNOMIAL_CHREC)\n-    return dd_int_cst_value (chrec);\n+    return int_cst_value (chrec);\n \n-  A[index][0] = mult * dd_int_cst_value (CHREC_RIGHT (chrec));\n+  A[index][0] = mult * int_cst_value (CHREC_RIGHT (chrec));\n   return initialize_matrix_A (A, CHREC_LEFT (chrec), index + 1, mult);\n }\n \n@@ -1924,9 +1913,9 @@ compute_overlap_steps_for_affine_1_2 (tree chrec_a, tree chrec_b,\n   affine_fn ova1, ova2, ovb;\n   tree last_conflicts_xz, last_conflicts_yz, last_conflicts_xyz;\n \n-  step_x = dd_int_cst_value (CHREC_RIGHT (CHREC_LEFT (chrec_a)));\n-  step_y = dd_int_cst_value (CHREC_RIGHT (chrec_a));\n-  step_z = dd_int_cst_value (CHREC_RIGHT (chrec_b));\n+  step_x = int_cst_value (CHREC_RIGHT (CHREC_LEFT (chrec_a)));\n+  step_y = int_cst_value (CHREC_RIGHT (chrec_a));\n+  step_z = int_cst_value (CHREC_RIGHT (chrec_b));\n \n   niter_x = \n     estimated_loop_iterations_int (get_chrec_loop (CHREC_LEFT (chrec_a)),\n@@ -2097,8 +2086,8 @@ analyze_subscript_affine_affine (tree chrec_a,\n \t  niter_b = estimated_loop_iterations_int (get_chrec_loop (chrec_b),\n \t\t\t\t\t\t   false);\n \t  niter = MIN (niter_a, niter_b);\n-\t  step_a = dd_int_cst_value (CHREC_RIGHT (chrec_a));\n-\t  step_b = dd_int_cst_value (CHREC_RIGHT (chrec_b));\n+\t  step_a = int_cst_value (CHREC_RIGHT (chrec_a));\n+\t  step_b = int_cst_value (CHREC_RIGHT (chrec_b));\n \n \t  compute_overlap_steps_for_affine_univar (niter, step_a, step_b, \n \t\t\t\t\t\t   &ova, &ovb, \n@@ -2763,7 +2752,7 @@ build_classic_dist_vector_1 (struct data_dependence_relation *ddr,\n \t      return false;\n \t    }\n \t  \n-\t  dist = dd_int_cst_value (SUB_DISTANCE (subscript));\n+\t  dist = int_cst_value (SUB_DISTANCE (subscript));\n \n \t  /* This is the subscript coupling test.  If we have already\n \t     recorded a distance for this loop (a distance coming from\n@@ -2858,8 +2847,8 @@ add_multivariate_self_dist (struct data_dependence_relation *ddr, tree c_2)\n \n   /* For \"{{0, +, 2}_1, +, 3}_2\" the distance vector is (3, -2).  */\n   dist_v = lambda_vector_new (DDR_NB_LOOPS (ddr));\n-  v1 = dd_int_cst_value (CHREC_RIGHT (c_1));\n-  v2 = dd_int_cst_value (CHREC_RIGHT (c_2));\n+  v1 = int_cst_value (CHREC_RIGHT (c_1));\n+  v2 = int_cst_value (CHREC_RIGHT (c_2));\n   cd = gcd (v1, v2);\n   v1 /= cd;\n   v2 /= cd;\n@@ -3286,22 +3275,22 @@ init_omega_eq_with_af (omega_pb pb, unsigned eq,\n \t  return false;\n \n \tvar_idx = index_in_loop_nest (var, DDR_LOOP_NEST (ddr));\n-\tpb->eqs[eq].coef[offset + var_idx + 1] = dd_int_cst_value (right);\n+\tpb->eqs[eq].coef[offset + var_idx + 1] = int_cst_value (right);\n \n \t/* Compute the innermost loop index.  */\n \tDDR_INNER_LOOP (ddr) = MAX (DDR_INNER_LOOP (ddr), var_idx);\n \n \tif (offset == 0)\n \t  pb->eqs[eq].coef[var_idx + DDR_NB_LOOPS (ddr) + 1] \n-\t    += dd_int_cst_value (right);\n+\t    += int_cst_value (right);\n \n \tswitch (TREE_CODE (left))\n \t  {\n \t  case POLYNOMIAL_CHREC:\n \t    return init_omega_eq_with_af (pb, eq, offset, left, ddr);\n \n \t  case INTEGER_CST:\n-\t    pb->eqs[eq].coef[0] += dd_int_cst_value (left);\n+\t    pb->eqs[eq].coef[0] += int_cst_value (left);\n \t    return true;\n \n \t  default:\n@@ -3310,7 +3299,7 @@ init_omega_eq_with_af (omega_pb pb, unsigned eq,\n       }\n \n     case INTEGER_CST:\n-      pb->eqs[eq].coef[0] += dd_int_cst_value (access_fun);\n+      pb->eqs[eq].coef[0] += int_cst_value (access_fun);\n       return true;\n \n     default:"}]}