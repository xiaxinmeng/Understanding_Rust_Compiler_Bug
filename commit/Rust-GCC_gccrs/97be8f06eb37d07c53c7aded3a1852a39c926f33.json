{"sha": "97be8f06eb37d07c53c7aded3a1852a39c926f33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdiZThmMDZlYjM3ZDA3YzUzYzdhZGVkM2ExODUyYTM5YzkyNmYzMw==", "commit": {"author": {"name": "Stan Cox", "email": "scox@cygnus.com", "date": "1998-03-30T14:35:36Z"}, "committer": {"name": "Stan Cox", "email": "scox@gcc.gnu.org", "date": "1998-03-30T14:35:36Z"}, "message": "gcc.c, cccp.c, cpplib.c, collect2.c (GET_ENVIRONMENT): Added.\n\nFrom-SVN: r18914", "tree": {"sha": "e9313a22370c8c46b8e43007c4f114a4f0b8718a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9313a22370c8c46b8e43007c4f114a4f0b8718a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97be8f06eb37d07c53c7aded3a1852a39c926f33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97be8f06eb37d07c53c7aded3a1852a39c926f33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97be8f06eb37d07c53c7aded3a1852a39c926f33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97be8f06eb37d07c53c7aded3a1852a39c926f33/comments", "author": null, "committer": null, "parents": [{"sha": "216be67c6f0c10191f0625806ce085e7bfa71c87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/216be67c6f0c10191f0625806ce085e7bfa71c87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/216be67c6f0c10191f0625806ce085e7bfa71c87"}], "stats": {"total": 70, "additions": 56, "deletions": 14}, "files": [{"sha": "89538bd47fd1a95807a136d2bcd94c0dbbf2ffa6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97be8f06eb37d07c53c7aded3a1852a39c926f33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97be8f06eb37d07c53c7aded3a1852a39c926f33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97be8f06eb37d07c53c7aded3a1852a39c926f33", "patch": "@@ -1,3 +1,14 @@\n+Mon Mar 30 13:11:05 1998  Stan Cox  <scox@cygnus.com>\n+\n+\t* libgcc2.c: (__main, __do_global_dtors, __do_global_ctors):\n+\tFor __CYGWIN32__ use the versions in winsup/dcrt0.cc.\n+\t\n+\t* gcc.c, cccp.c, cpplib.c, collect2.c (GET_ENVIRONMENT): Added.\n+\tcygwin32 can override this to allow both unix and win32 style PATHs.\n+\n+\t* i386/xm-cygwin32.h (GET_ENVIRONMENT): Defined to allow win32\n+\tstyle environment paths.\n+\t\n Mon Mar 30 14:43:20 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n         * Makefile.in (cppalloc.o, cpperror.o, cppexp.o, cpphash.o,"}, {"sha": "ac7ae8a99e1350bae803bfd227b2b15e446dcd88", "filename": "gcc/cccp.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97be8f06eb37d07c53c7aded3a1852a39c926f33/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97be8f06eb37d07c53c7aded3a1852a39c926f33/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=97be8f06eb37d07c53c7aded3a1852a39c926f33", "patch": "@@ -83,6 +83,10 @@ extern char *rindex ();\n extern char *getenv ();\n #endif\n \n+#ifndef GET_ENVIRONMENT\n+#define GET_ENVIRONMENT(ENV_VALUE,ENV_NAME) ENV_VALUE = getenv (ENV_NAME)\n+#endif\n+\n #if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 7)\n # define __attribute__(x)\n #endif\n@@ -1705,7 +1709,7 @@ main (argc, argv)\n   /* Some people say that CPATH should replace the standard include dirs,\n      but that seems pointless: it comes before them, so it overrides them\n      anyway.  */\n-  cp = getenv (\"CPATH\");\n+  GET_ENVIRONMENT (cp, \"CPATH\");\n   if (cp && ! no_standard_includes)\n     path_include (cp);\n \n@@ -1888,16 +1892,16 @@ main (argc, argv)\n     switch ((objc << 1) + cplusplus)\n       {\n       case 0:\n-\tepath = getenv (\"C_INCLUDE_PATH\");\n+\tGET_ENVIRONMENT (epath, \"C_INCLUDE_PATH\");\n \tbreak;\n       case 1:\n-\tepath = getenv (\"CPLUS_INCLUDE_PATH\");\n+\tGET_ENVIRONMENT (epath, \"CPLUS_INCLUDE_PATH\");\n \tbreak;\n       case 2:\n-\tepath = getenv (\"OBJC_INCLUDE_PATH\");\n+\tGET_ENVIRONMENT (epath, \"OBJC_INCLUDE_PATH\");\n \tbreak;\n       case 3:\n-\tepath = getenv (\"OBJCPLUS_INCLUDE_PATH\");\n+\tGET_ENVIRONMENT (epath, \"OBJCPLUS_INCLUDE_PATH\");\n \tbreak;\n       }\n     /* If the environment var for this language is set,"}, {"sha": "c83b076351a1984a0858ae0b6890ecf4a20ed65a", "filename": "gcc/config/i386/xm-cygwin32.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97be8f06eb37d07c53c7aded3a1852a39c926f33/gcc%2Fconfig%2Fi386%2Fxm-cygwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97be8f06eb37d07c53c7aded3a1852a39c926f33/gcc%2Fconfig%2Fi386%2Fxm-cygwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-cygwin32.h?ref=97be8f06eb37d07c53c7aded3a1852a39c926f33", "patch": "@@ -31,6 +31,25 @@ Boston, MA 02111-1307, USA. */\n /* Even though we support \"/\", allow \"\\\" since everybody tests both.  */\n #define DIR_SEPARATOR '\\\\'\n \n+/* If we allow both '/' and '\\' as dir separators, then\n+   allow both unix and win32 PATH syntax */\n+#undef GET_ENVIRONMENT\n+#define GET_ENVIRONMENT(ENV_VALUE,ENV_NAME)                   \\\n+{                                                             \\\n+  char *epath;                                                \\\n+  char *win32epath;                                           \\\n+                                                              \\\n+  epath = win32epath = getenv (ENV_NAME);                     \\\n+  /* if we have a posix path list, convert to win32 path list */ \\\n+  if (epath != NULL && *epath != 0 && cygwin32_posix_path_list_p (epath)) \\\n+    {                                                         \\\n+      win32epath = (char *) xmalloc                           \\\n+      (cygwin32_posix_to_win32_path_list_buf_size (epath));   \\\n+      cygwin32_posix_to_win32_path_list (epath, win32epath);  \\\n+    }                                                         \\\n+   ENV_VALUE = win32epath;                                    \\\n+}\n+\n #define PATH_SEPARATOR ';'\n \n /* This is needed so that protoize will compile.  */"}, {"sha": "8528861282a64a4a7d1f0a94639bbc52c991c7b4", "filename": "gcc/cpplib.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97be8f06eb37d07c53c7aded3a1852a39c926f33/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97be8f06eb37d07c53c7aded3a1852a39c926f33/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=97be8f06eb37d07c53c7aded3a1852a39c926f33", "patch": "@@ -39,6 +39,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #include \"cpphash.h\"\n #include \"gansidecl.h\"\n \n+#ifndef GET_ENVIRONMENT\n+#define GET_ENVIRONMENT(ENV_VALUE,ENV_NAME) ENV_VALUE = getenv (ENV_NAME)\n+#endif\n+\n extern char *update_path ();\n \n #ifndef O_RDONLY\n@@ -5691,7 +5695,7 @@ cpp_start_read (pfile, fname)\n   /* Some people say that CPATH should replace the standard include dirs,\n      but that seems pointless: it comes before them, so it overrides them\n      anyway.  */\n-  p = (char *) getenv (\"CPATH\");\n+  GET_ENVIRONMENT (p, \"CPATH\");\n   if (p != 0 && ! opts->no_standard_includes)\n     path_include (pfile, p);\n \n@@ -5821,16 +5825,16 @@ cpp_start_read (pfile, fname)\n     switch ((opts->objc << 1) + opts->cplusplus)\n       {\n       case 0:\n-\tepath = getenv (\"C_INCLUDE_PATH\");\n+\tGET_ENVIRONMENT (epath, \"C_INCLUDE_PATH\");\n \tbreak;\n       case 1:\n-\tepath = getenv (\"CPLUS_INCLUDE_PATH\");\n+\tGET_ENVIRONMENT (epath, \"CPLUS_INCLUDE_PATH\");\n \tbreak;\n       case 2:\n-\tepath = getenv (\"OBJC_INCLUDE_PATH\");\n+\tGET_ENVIRONMENT (epath, \"OBJC_INCLUDE_PATH\");\n \tbreak;\n       case 3:\n-\tepath = getenv (\"OBJCPLUS_INCLUDE_PATH\");\n+\tGET_ENVIRONMENT (epath, \"OBJCPLUS_INCLUDE_PATH\");\n \tbreak;\n       }\n     /* If the environment var for this language is set,"}, {"sha": "ac0b36c10bce7ae75402460a657a67126cc1c92c", "filename": "gcc/gcc.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97be8f06eb37d07c53c7aded3a1852a39c926f33/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97be8f06eb37d07c53c7aded3a1852a39c926f33/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=97be8f06eb37d07c53c7aded3a1852a39c926f33", "patch": "@@ -122,6 +122,10 @@ static char dir_separator_str[] = {DIR_SEPARATOR, 0};\n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n \n+#ifndef GET_ENVIRONMENT\n+#define GET_ENVIRONMENT(ENV_VALUE,ENV_NAME) ENV_VALUE = getenv (ENV_NAME)\n+#endif\n+\n extern char *choose_temp_base PROTO((void));\n \n #ifndef HAVE_STRERROR\n@@ -2358,7 +2362,7 @@ process_command (argc, argv)\n   int have_o = 0;\n   int lang_n_infiles = 0;\n \n-  gcc_exec_prefix = getenv (\"GCC_EXEC_PREFIX\");\n+  GET_ENVIRONMENT (gcc_exec_prefix, \"GCC_EXEC_PREFIX\");\n \n   n_switches = 0;\n   n_infiles = 0;\n@@ -2400,7 +2404,7 @@ process_command (argc, argv)\n   /* COMPILER_PATH and LIBRARY_PATH have values\n      that are lists of directory names with colons.  */\n \n-  temp = getenv (\"COMPILER_PATH\");\n+  GET_ENVIRONMENT (temp, \"COMPILER_PATH\");\n   if (temp)\n     {\n       char *startp, *endp;\n@@ -2434,7 +2438,7 @@ process_command (argc, argv)\n \t}\n     }\n \n-  temp = getenv (\"LIBRARY_PATH\");\n+  GET_ENVIRONMENT (temp, \"LIBRARY_PATH\");\n   if (temp && *cross_compile == '0')\n     {\n       char *startp, *endp;\n@@ -2467,7 +2471,7 @@ process_command (argc, argv)\n     }\n \n   /* Use LPATH like LIBRARY_PATH (for the CMU build program).  */\n-  temp = getenv (\"LPATH\");\n+  GET_ENVIRONMENT (temp, \"LPATH\");\n   if (temp && *cross_compile == '0')\n     {\n       char *startp, *endp;"}]}