{"sha": "fbd7665360d259434f378f68cb2680b17d6cab57", "node_id": "C_kwDOANBUbNoAKGZiZDc2NjUzNjBkMjU5NDM0ZjM3OGY2OGNiMjY4MGIxN2Q2Y2FiNTc", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-07-01T00:40:00Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-07-01T22:45:34Z"}, "message": "compiler: use correct init order for multi-value initialization\n\nUse the correct initialization order for\n\nvar a = c\nvar b, c = x.(bool)\n\nThe global c is initialized by the preinit of b, but were missing a\ndependency of c on b, so a would be initialized to the zero value of c\nrather than the correct value.\n\nSimply adding the dependency of c on b didn't work because the preinit\nof b refers to c, so that appeared circular.  So this patch changes\nthe init order to skip dependencies that only appear on the left hand\nside of assignments in preinit blocks.\n\nDoing that didn't work because the write barrier pass can transform \"a\n= b\" into code like \"gcWriteBarrier(&a, b)\" that is not obviously a\nsimple assigment.  So this patch moves the collection of dependencies\nto just after lowering, before the write barriers are inserted.\n\nMaking those changes permit relaxing the requirement that we don't\nwarn about self-dependency in preinit blocks, so now we correctly warn\nfor\n\nvar a, b any = b.(bool)\n\nThe test case is https://go.dev/cl/415238.\n\nFixes golang/go#53619\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/415594", "tree": {"sha": "ceac82da99be61210976ee3c8882b435fdf72668", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ceac82da99be61210976ee3c8882b435fdf72668"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbd7665360d259434f378f68cb2680b17d6cab57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd7665360d259434f378f68cb2680b17d6cab57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbd7665360d259434f378f68cb2680b17d6cab57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd7665360d259434f378f68cb2680b17d6cab57/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1697806fdf25285b924251b0d785324775e9b905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1697806fdf25285b924251b0d785324775e9b905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1697806fdf25285b924251b0d785324775e9b905"}], "stats": {"total": 248, "additions": 150, "deletions": 98}, "files": [{"sha": "7b1d3011fffe93eeed5fffa47e3caee133c71425", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd7665360d259434f378f68cb2680b17d6cab57/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd7665360d259434f378f68cb2680b17d6cab57/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=fbd7665360d259434f378f68cb2680b17d6cab57", "patch": "@@ -1,4 +1,4 @@\n-ac438edc5335f69c95df9342f43712ad2f61ad66\n+6479d5976c5d848ec6f5843041275723a00006b0\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "1512770af2913a91c2738dc1943ecfb226dc8097", "filename": "gcc/go/gofrontend/go.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd7665360d259434f378f68cb2680b17d6cab57/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd7665360d259434f378f68cb2680b17d6cab57/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo.cc?ref=fbd7665360d259434f378f68cb2680b17d6cab57", "patch": "@@ -146,6 +146,9 @@ go_parse_input_files(const char** filenames, unsigned int filename_count,\n   if (only_check_syntax)\n     return;\n \n+  // Record global variable initializer dependencies.\n+  ::gogo->record_global_init_refs();\n+\n   // Do simple deadcode elimination.\n   ::gogo->remove_deadcode();\n "}, {"sha": "9197eef3e38e1c4359e20f6616391bb0675f2ed3", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 111, "deletions": 91, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd7665360d259434f378f68cb2680b17d6cab57/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd7665360d259434f378f68cb2680b17d6cab57/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=fbd7665360d259434f378f68cb2680b17d6cab57", "patch": "@@ -1086,8 +1086,8 @@ class Find_vars : public Traverse\n \n  public:\n   Find_vars()\n-    : Traverse(traverse_expressions),\n-      vars_(), seen_objects_()\n+    : Traverse(traverse_expressions | traverse_statements),\n+      vars_(), seen_objects_(), lhs_is_ref_(false)\n   { }\n \n   // An iterator through the variables found, after the traversal.\n@@ -1104,11 +1104,16 @@ class Find_vars : public Traverse\n   int\n   expression(Expression**);\n \n+  int\n+  statement(Block*, size_t* index, Statement*);\n+\n  private:\n   // Accumulated variables.\n   Vars vars_;\n   // Objects we have already seen.\n   Seen_objects seen_objects_;\n+  // Whether an assignment to a variable counts as a reference.\n+  bool lhs_is_ref_;\n };\n \n // Collect global variables referenced by EXPR.  Look through function\n@@ -1164,7 +1169,11 @@ Find_vars::expression(Expression** pexpr)\n \t  if (ins.second)\n \t    {\n \t      // This is the first time we have seen this name.\n-\t      if (f->func_value()->block()->traverse(this) == TRAVERSE_EXIT)\n+\t      bool hold = this->lhs_is_ref_;\n+\t      this->lhs_is_ref_ = true;\n+\t      int r = f->func_value()->block()->traverse(this);\n+\t      this->lhs_is_ref_ = hold;\n+\t      if (r == TRAVERSE_EXIT)\n \t\treturn TRAVERSE_EXIT;\n \t    }\n \t}\n@@ -1192,6 +1201,29 @@ Find_vars::expression(Expression** pexpr)\n   return TRAVERSE_CONTINUE;\n }\n \n+// Check a statement while searching for variables.  This is where we\n+// skip variables on the left hand side of assigments if appropriate.\n+\n+int\n+Find_vars::statement(Block*, size_t*, Statement* s)\n+{\n+  if (this->lhs_is_ref_)\n+    return TRAVERSE_CONTINUE;\n+  Assignment_statement* as = s->assignment_statement();\n+  if (as == NULL)\n+    return TRAVERSE_CONTINUE;\n+\n+  // Only traverse subexpressions of the LHS.\n+  if (as->lhs()->traverse_subexpressions(this) == TRAVERSE_EXIT)\n+    return TRAVERSE_EXIT;\n+\n+  Expression* rhs = as->rhs();\n+  if (Expression::traverse(&rhs, this) == TRAVERSE_EXIT)\n+    return TRAVERSE_EXIT;\n+\n+  return TRAVERSE_SKIP_COMPONENTS;\n+}\n+\n // Return true if EXPR, PREINIT, or DEP refers to VAR.\n \n static bool\n@@ -1230,11 +1262,11 @@ class Var_init\n {\n  public:\n   Var_init()\n-    : var_(NULL), init_(NULL), refs_(NULL), dep_count_(0)\n+    : var_(NULL), init_(NULL), dep_count_(0)\n   { }\n \n   Var_init(Named_object* var, Bstatement* init)\n-    : var_(var), init_(init), refs_(NULL), dep_count_(0)\n+    : var_(var), init_(init), dep_count_(0)\n   { }\n \n   // Return the variable.\n@@ -1247,19 +1279,6 @@ class Var_init\n   init() const\n   { return this->init_; }\n \n-  // Add a reference.\n-  void\n-  add_ref(Named_object* var);\n-\n-  // The variables which this variable's initializers refer to.\n-  const std::vector<Named_object*>*\n-  refs()\n-  { return this->refs_; }\n-\n-  // Clear the references, if any.\n-  void\n-  clear_refs();\n-\n   // Return the number of remaining dependencies.\n   size_t\n   dep_count() const\n@@ -1280,36 +1299,12 @@ class Var_init\n   Named_object* var_;\n   // The backend initialization statement.\n   Bstatement* init_;\n-  // Variables this refers to.\n-  std::vector<Named_object*>* refs_;\n   // The number of initializations this is dependent on.  A variable\n   // initialization should not be emitted if any of its dependencies\n   // have not yet been resolved.\n   size_t dep_count_;\n };\n \n-// Add a reference.\n-\n-void\n-Var_init::add_ref(Named_object* var)\n-{\n-  if (this->refs_ == NULL)\n-    this->refs_ = new std::vector<Named_object*>;\n-  this->refs_->push_back(var);\n-}\n-\n-// Clear the references, if any.\n-\n-void\n-Var_init::clear_refs()\n-{\n-  if (this->refs_ != NULL)\n-    {\n-      delete this->refs_;\n-      this->refs_ = NULL;\n-    }\n-}\n-\n // For comparing Var_init keys in a map.\n \n inline bool\n@@ -1324,7 +1319,7 @@ typedef std::list<Var_init> Var_inits;\n // variable V2 then we initialize V1 after V2.\n \n static void\n-sort_var_inits(Gogo* gogo, Var_inits* var_inits)\n+sort_var_inits(Var_inits* var_inits)\n {\n   if (var_inits->empty())\n     return;\n@@ -1337,33 +1332,13 @@ sort_var_inits(Gogo* gogo, Var_inits* var_inits)\n   Init_deps init_deps;\n   bool init_loop = false;\n \n-  // Compute all variable references.\n+  // Map from variable to Var_init.\n   for (Var_inits::iterator pvar = var_inits->begin();\n        pvar != var_inits->end();\n        ++pvar)\n     {\n       Named_object* var = pvar->var();\n       var_to_init[var] = &*pvar;\n-\n-      Find_vars find_vars;\n-      Expression* init = var->var_value()->init();\n-      if (init != NULL)\n-\tExpression::traverse(&init, &find_vars);\n-      if (var->var_value()->has_pre_init())\n-\tvar->var_value()->preinit()->traverse(&find_vars);\n-      Named_object* dep = gogo->var_depends_on(var->var_value());\n-      if (dep != NULL)\n-\t{\n-\t  Expression* dinit = dep->var_value()->init();\n-\t  if (dinit != NULL)\n-\t    Expression::traverse(&dinit, &find_vars);\n-\t  if (dep->var_value()->has_pre_init())\n-\t    dep->var_value()->preinit()->traverse(&find_vars);\n-\t}\n-      for (Find_vars::const_iterator p = find_vars.begin();\n-\t   p != find_vars.end();\n-\t   ++p)\n-\tpvar->add_ref(*p);\n     }\n \n   // Add dependencies to init_deps, and check for cycles.\n@@ -1373,7 +1348,8 @@ sort_var_inits(Gogo* gogo, Var_inits* var_inits)\n     {\n       Named_object* var = pvar->var();\n \n-      const std::vector<Named_object*>* refs = pvar->refs();\n+      const std::vector<Named_object*>* refs =\n+\tpvar->var()->var_value()->init_refs();\n       if (refs == NULL)\n \tcontinue;\n       for (std::vector<Named_object*>::const_iterator pdep = refs->begin();\n@@ -1383,19 +1359,11 @@ sort_var_inits(Gogo* gogo, Var_inits* var_inits)\n \t  Named_object* dep = *pdep;\n \t  if (var == dep)\n \t    {\n-\t      // This is a reference from a variable to itself, which\n-\t      // may indicate a loop.  We only report an error if\n-\t      // there is an initializer and there is no dependency.\n-\t      // When there is no initializer, it means that the\n-\t      // preinitializer sets the variable, which will appear\n-\t      // to be a loop here.\n-\t      if (var->var_value()->init() != NULL\n-\t\t  && gogo->var_depends_on(var->var_value()) == NULL)\n-\t\tgo_error_at(var->location(),\n-\t\t\t    (\"initialization expression for %qs \"\n-\t\t\t     \"depends upon itself\"),\n-\t\t\t    var->message_name().c_str());\n-\n+\t      // This is a reference from a variable to itself.\n+\t      go_error_at(var->location(),\n+\t\t\t  (\"initialization expression for %qs \"\n+\t\t\t   \"depends upon itself\"),\n+\t\t\t  var->message_name().c_str());\n \t      continue;\n \t    }\n \n@@ -1412,7 +1380,8 @@ sort_var_inits(Gogo* gogo, Var_inits* var_inits)\n \t  pvar->add_dependency();\n \n \t  // Check for cycles.\n-\t  const std::vector<Named_object*>* deprefs = dep_init->refs();\n+\t  const std::vector<Named_object*>* deprefs =\n+\t    dep_init->var()->var_value()->init_refs();\n \t  if (deprefs == NULL)\n \t    continue;\n \t  for (std::vector<Named_object*>::const_iterator pdepdep =\n@@ -1437,10 +1406,6 @@ sort_var_inits(Gogo* gogo, Var_inits* var_inits)\n     }\n \n   var_to_init.clear();\n-  for (Var_inits::iterator pvar = var_inits->begin();\n-       pvar != var_inits->end();\n-       ++pvar)\n-    pvar->clear_refs();\n \n   // If there are no dependencies then the declaration order is sorted.\n   if (!init_deps.empty() && !init_loop)\n@@ -1748,7 +1713,7 @@ Gogo::write_globals()\n   // workable order.\n   if (!var_inits.empty())\n     {\n-      sort_var_inits(this, &var_inits);\n+      sort_var_inits(&var_inits);\n       for (Var_inits::const_iterator p = var_inits.begin();\n            p != var_inits.end();\n            ++p)\n@@ -3840,6 +3805,51 @@ Gogo::check_types_in_block(Block* block)\n   block->traverse(&traverse);\n }\n \n+// For each global variable defined in the current package, record the\n+// set of variables that its initializer depends on.  We do this after\n+// lowering so that all unknown names are resolved to their final\n+// locations.  We do this before write barrier insertion because that\n+// makes it harder to distinguish references from assignments in\n+// preinit blocks.\n+\n+void\n+Gogo::record_global_init_refs()\n+{\n+  Bindings* bindings = this->package_->bindings();\n+  for (Bindings::const_definitions_iterator pb = bindings->begin_definitions();\n+       pb != bindings->end_definitions();\n+       pb++)\n+    {\n+      Named_object* no = *pb;\n+      if (!no->is_variable())\n+\tcontinue;\n+\n+      Variable* var = no->var_value();\n+      go_assert(var->is_global());\n+\n+      Find_vars find_vars;\n+      Expression* init = var->init();\n+      if (init != NULL)\n+\tExpression::traverse(&init, &find_vars);\n+      if (var->has_pre_init())\n+\tvar->preinit()->traverse(&find_vars);\n+      Named_object* dep = this->var_depends_on(var);\n+      if (dep != NULL)\n+\t{\n+\t  Expression* dinit = dep->var_value()->init();\n+\t  if (dinit != NULL)\n+\t    Expression::traverse(&dinit, &find_vars);\n+\t  if (dep->var_value()->has_pre_init())\n+\t    dep->var_value()->preinit()->traverse(&find_vars);\n+\t}\n+\n+      for (Find_vars::const_iterator pv = find_vars.begin();\n+\t   pv != find_vars.end();\n+\t   ++pv)\n+\tvar->add_init_ref(*pv);\n+    }\n+}\n+\n // A traversal class which finds all the expressions which must be\n // evaluated in order within a statement or larger expression.  This\n // is used to implement the rules about order of evaluation.\n@@ -7422,16 +7432,16 @@ Variable::Variable(Type* type, Expression* init, bool is_global,\n \t\t   bool is_parameter, bool is_receiver,\n \t\t   Location location)\n   : type_(type), init_(init), preinit_(NULL), location_(location),\n-    embeds_(NULL), backend_(NULL), is_global_(is_global),\n-    is_parameter_(is_parameter), is_closure_(false), is_receiver_(is_receiver),\n-    is_varargs_parameter_(false), is_global_sink_(false), is_used_(false),\n-    is_address_taken_(false), is_non_escaping_address_taken_(false),\n-    seen_(false), init_is_lowered_(false), init_is_flattened_(false),\n+    toplevel_decl_(NULL), init_refs_(NULL), embeds_(NULL), backend_(NULL),\n+    is_global_(is_global), is_parameter_(is_parameter), is_closure_(false),\n+    is_receiver_(is_receiver), is_varargs_parameter_(false),\n+    is_global_sink_(false), is_used_(false), is_address_taken_(false),\n+    is_non_escaping_address_taken_(false), seen_(false),\n+    init_is_lowered_(false), init_is_flattened_(false),\n     type_from_init_tuple_(false), type_from_range_index_(false),\n     type_from_range_value_(false), type_from_chan_element_(false),\n     is_type_switch_var_(false), determined_type_(false),\n-    in_unique_section_(false), is_referenced_by_inline_(false),\n-    toplevel_decl_(NULL)\n+    in_unique_section_(false), is_referenced_by_inline_(false)\n {\n   go_assert(type != NULL || init != NULL);\n   go_assert(!is_parameter || init == NULL);\n@@ -7921,6 +7931,16 @@ Variable::get_init_block(Gogo* gogo, Named_object* function,\n   return block_stmt;\n }\n \n+// Add an initializer reference.\n+\n+void\n+Variable::add_init_ref(Named_object* var)\n+{\n+  if (this->init_refs_ == NULL)\n+    this->init_refs_ = new std::vector<Named_object*>;\n+  this->init_refs_->push_back(var);\n+}\n+\n // Export the variable\n \n void"}, {"sha": "433fdaebb66215a17c331a396404fc9e9619fe58", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd7665360d259434f378f68cb2680b17d6cab57/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd7665360d259434f378f68cb2680b17d6cab57/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=fbd7665360d259434f378f68cb2680b17d6cab57", "patch": "@@ -842,6 +842,11 @@ class Gogo\n   void\n   check_return_statements();\n \n+  // Gather references from global variables initializers to other\n+  // variables.\n+  void\n+  record_global_init_refs();\n+\n   // Remove deadcode.\n   void\n   remove_deadcode();\n@@ -2333,6 +2338,15 @@ class Variable\n     this->toplevel_decl_ = s;\n   }\n \n+  // Note that the initializer of this global variable refers to VAR.\n+  void\n+  add_init_ref(Named_object* var);\n+\n+  // The variables that this variable's initializers refer to.\n+  const std::vector<Named_object*>*\n+  init_refs() const\n+  { return this->init_refs_; }\n+\n   // Traverse the initializer expression.\n   int\n   traverse_expression(Traverse*, unsigned int traverse_mask);\n@@ -2389,6 +2403,12 @@ class Variable\n   Block* preinit_;\n   // Location of variable definition.\n   Location location_;\n+  // The top-level declaration for this variable. Only used for local\n+  // variables. Must be a Temporary_statement if not NULL.\n+  Statement* toplevel_decl_;\n+  // Variables that the initializer of a global variable refers to.\n+  // Used for initializer ordering.\n+  std::vector<Named_object*>* init_refs_;\n   // Any associated go:embed comments.\n   std::vector<std::string>* embeds_;\n   // Backend representation.\n@@ -2439,9 +2459,6 @@ class Variable\n   // True if this variable is referenced from an inlined body that\n   // will be put into the export data.\n   bool is_referenced_by_inline_ : 1;\n-  // The top-level declaration for this variable. Only used for local\n-  // variables. Must be a Temporary_statement if not NULL.\n-  Statement* toplevel_decl_;\n };\n \n // A variable which is really the name for a function return value, or"}, {"sha": "a3c6f630a093ac9edc84693915027697f69b5368", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd7665360d259434f378f68cb2680b17d6cab57/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd7665360d259434f378f68cb2680b17d6cab57/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=fbd7665360d259434f378f68cb2680b17d6cab57", "patch": "@@ -1977,7 +1977,11 @@ Parse::init_vars_from_map(const Typed_identifier_list* vars, Type* type,\n   else if (!val_no->is_sink())\n     {\n       if (val_no->is_variable())\n-\tval_no->var_value()->add_preinit_statement(this->gogo_, s);\n+\t{\n+\t  val_no->var_value()->add_preinit_statement(this->gogo_, s);\n+\t  if (no->is_variable())\n+\t    this->gogo_->record_var_depends_on(no->var_value(), val_no);\n+\t}\n     }\n   else if (!no->is_sink())\n     {\n@@ -2044,7 +2048,11 @@ Parse::init_vars_from_receive(const Typed_identifier_list* vars, Type* type,\n   else if (!val_no->is_sink())\n     {\n       if (val_no->is_variable())\n-\tval_no->var_value()->add_preinit_statement(this->gogo_, s);\n+\t{\n+\t  val_no->var_value()->add_preinit_statement(this->gogo_, s);\n+\t  if (no->is_variable())\n+\t    this->gogo_->record_var_depends_on(no->var_value(), val_no);\n+\t}\n     }\n   else if (!no->is_sink())\n     {\n@@ -2110,7 +2118,11 @@ Parse::init_vars_from_type_guard(const Typed_identifier_list* vars,\n   else if (!val_no->is_sink())\n     {\n       if (val_no->is_variable())\n-\tval_no->var_value()->add_preinit_statement(this->gogo_, s);\n+\t{\n+\t  val_no->var_value()->add_preinit_statement(this->gogo_, s);\n+\t  if (no->is_variable())\n+\t    this->gogo_->record_var_depends_on(no->var_value(), val_no);\n+\t}\n     }\n   else if (!no->is_sink())\n     {"}]}