{"sha": "71743a68ece25642e8f00467bc2e0ac58fb0b970", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE3NDNhNjhlY2UyNTY0MmU4ZjAwNDY3YmMyZTBhYzU4ZmIwYjk3MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-09-16T16:28:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-09-16T16:28:31Z"}, "message": "less_or_equal.cc: New.\n\n2011-09-16  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/23_containers/array/comparison_operators/\n\tless_or_equal.cc: New.\n\t* testsuite/23_containers/array/comparison_operators/\n\tgreater_or_equal.cc: Likewise.\n\t* testsuite/23_containers/array/comparison_operators/less.cc: Likewise.\n\t* testsuite/23_containers/array/comparison_operators/equal.cc: Likewise.\n\t* testsuite/23_containers/array/comparison_operators/not_equal.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/comparison_operators/greater.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/iterators/end_is_one_past.cc: Likewise.\n\t* testsuite/23_containers/array/capacity/empty.cc: Likewise.\n\t* testsuite/23_containers/array/capacity/max_size.cc: Likewise.\n\t* testsuite/23_containers/array/capacity/size.cc: Likewise.\n\t* testsuite/23_containers/array/tuple_interface/tuple_element.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/tuple_interface/tuple_size.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/element_access/at_out_of_range.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/element_access/back.cc: Likewise.\n\t* testsuite/23_containers/array/element_access/front.cc: Likewise.\n\t* testsuite/23_containers/array/element_access/data.cc: Likewise.\n\t* testsuite/23_containers/array/cons/aggregate_initialization.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/requirements/zero_sized_arrays.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/requirements/contiguous.cc: Likewise.\n\t* testsuite/23_containers/array/requirements/member_swap.cc: Likewise.\n\t* testsuite/23_containers/array/specialized_algorithms/swap.cc:\n\tLikewise.\n\t* testsuite/23_containers/array/constexpr_get.cc: Move...\n\t* testsuite/23_containers/array/tuple_interface/constexpr_get.cc:\n\t... here.\n\t* testsuite/23_containers/array/requirements/get.cc: Move...\n\t* testsuite/23_containers/array/tuple_interface/get: ... here.\n\t* testsuite/23_containers/array/at_neg.cc: Move...\n\t* testsuite/23_containers/array/element_access: ... here.\n\t* testsuite/23_containers/array/requirements/constexpr_functions.cc:\n\tMove...\n\t* testsuite/23_containers/array/capacity: ... here.\n\t* testsuite/23_containers/array/requirements/\n\tconstexpr_element_access.cc: Move...\n\t* testsuite/23_containers/array/element_access: ... here.\n\n\t* testsuite/20_util/duration/cons/1_neg.cc: Avoid -Wall warnings.\n\t* testsuite/20_util/tuple/creation_functions/constexpr.cc: Likewise.\n\t* testsuite/20_util/pair/make_pair/constexpr.cc: Likewise.\n\t* testsuite/20_util/time_point/nonmember/constexpr.cc: Likewise.\n\t* testsuite/23_containers/bitset/operations/constexpr.cc: Likewise.\n\n\t* testsuite/20_util/duration/cons/1_neg.cc: Discard bogus warning.\n\t* testsuite/20_util/forward/1_neg.cc: Likewise.\n\nFrom-SVN: r178911", "tree": {"sha": "32b1d4298414ff85e9a71edc3abc043770b3148f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32b1d4298414ff85e9a71edc3abc043770b3148f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71743a68ece25642e8f00467bc2e0ac58fb0b970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71743a68ece25642e8f00467bc2e0ac58fb0b970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71743a68ece25642e8f00467bc2e0ac58fb0b970", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71743a68ece25642e8f00467bc2e0ac58fb0b970/comments", "author": null, "committer": null, "parents": [{"sha": "adb0401dac41c81571722312d4586b2693f95aa6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb0401dac41c81571722312d4586b2693f95aa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb0401dac41c81571722312d4586b2693f95aa6"}], "stats": {"total": 1072, "additions": 1052, "deletions": 20}, "files": [{"sha": "910fafcb242f3e98422a2e246d97d00279d4b347", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -1,3 +1,59 @@\n+2011-09-16  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/23_containers/array/comparison_operators/\n+\tless_or_equal.cc: New.\n+\t* testsuite/23_containers/array/comparison_operators/\n+\tgreater_or_equal.cc: Likewise.\n+\t* testsuite/23_containers/array/comparison_operators/less.cc: Likewise.\n+\t* testsuite/23_containers/array/comparison_operators/equal.cc: Likewise.\n+\t* testsuite/23_containers/array/comparison_operators/not_equal.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/comparison_operators/greater.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/iterators/end_is_one_past.cc: Likewise.\n+\t* testsuite/23_containers/array/capacity/empty.cc: Likewise.\n+\t* testsuite/23_containers/array/capacity/max_size.cc: Likewise.\n+\t* testsuite/23_containers/array/capacity/size.cc: Likewise.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_element.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/tuple_interface/tuple_size.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/element_access/at_out_of_range.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/element_access/back.cc: Likewise.\n+\t* testsuite/23_containers/array/element_access/front.cc: Likewise.\n+\t* testsuite/23_containers/array/element_access/data.cc: Likewise.\n+\t* testsuite/23_containers/array/cons/aggregate_initialization.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/requirements/zero_sized_arrays.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/requirements/contiguous.cc: Likewise.\n+\t* testsuite/23_containers/array/requirements/member_swap.cc: Likewise.\n+\t* testsuite/23_containers/array/specialized_algorithms/swap.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/array/constexpr_get.cc: Move...\n+\t* testsuite/23_containers/array/tuple_interface/constexpr_get.cc:\n+\t... here.\n+\t* testsuite/23_containers/array/requirements/get.cc: Move...\n+\t* testsuite/23_containers/array/tuple_interface/get: ... here.\n+\t* testsuite/23_containers/array/at_neg.cc: Move...\n+\t* testsuite/23_containers/array/element_access: ... here.\n+\t* testsuite/23_containers/array/requirements/constexpr_functions.cc:\n+\tMove...\n+\t* testsuite/23_containers/array/capacity: ... here.\n+\t* testsuite/23_containers/array/requirements/\n+\tconstexpr_element_access.cc: Move...\n+\t* testsuite/23_containers/array/element_access: ... here.\n+\n+\t* testsuite/20_util/duration/cons/1_neg.cc: Avoid -Wall warnings.\n+\t* testsuite/20_util/tuple/creation_functions/constexpr.cc: Likewise.\n+\t* testsuite/20_util/pair/make_pair/constexpr.cc: Likewise.\n+\t* testsuite/20_util/time_point/nonmember/constexpr.cc: Likewise.\n+\t* testsuite/23_containers/bitset/operations/constexpr.cc: Likewise.\n+\n+\t* testsuite/20_util/duration/cons/1_neg.cc: Discard bogus warning.\n+\t* testsuite/20_util/forward/1_neg.cc: Likewise.\n+\n 2011-09-15  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/tuple (make_tuple, forward_as_tuple): Declare constexpr."}, {"sha": "b6dd874588d37e87ec788be35ecafc3136316124", "filename": "libstdc++-v3/testsuite/20_util/duration/cons/1_neg.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fcons%2F1_neg.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -2,7 +2,7 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-require-cstdint \"\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation\n+// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,3 +38,7 @@ test02()\n   duration<int, std::milli> d2_copy(d2); // { dg-error \"no matching|no type\" }\n }\n \n+// { dg-prune-output \"include\" }\n+\n+// Discard a bogus warning showing up with -Wall.\n+// { dg-prune-output \"suggest parentheses around\" }"}, {"sha": "dbcaa66a8c9a782218ea1138f81b190f9221be87", "filename": "libstdc++-v3/testsuite/20_util/forward/1_neg.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fforward%2F1_neg.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -41,3 +41,5 @@ void g()\n   std::shared_ptr<A> sp1 = factory<A>(2, 1.414); // { dg-error \"required from here\" }\n }\n \n+// Discard a bogus warning showing up with -Wall.\n+// { dg-prune-output \"control reaches end of\" }"}, {"sha": "749c61b8156f0283b138ed19aa34431b45f9e976", "filename": "libstdc++-v3/testsuite/20_util/pair/make_pair/constexpr.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fmake_pair%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fmake_pair%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fmake_pair%2Fconstexpr.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -18,7 +18,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n // NOTE: This makes use of the fact that we know how moveable\n // is implemented on pair, and also vector. If the implementation \n // changes this test may begin to fail.\n@@ -31,7 +30,7 @@ test1()\n {\n   bool test __attribute__((unused)) = true;\n   typedef std::pair<int, float> pair_type;\n-  constexpr pair_type p1 = std::make_pair(22, 22.222);\n+  constexpr pair_type p1 __attribute__((unused)) = std::make_pair(22, 22.222);\n }\n \n int "}, {"sha": "5c5090927db97e292b47dd34f9547a7694a5b485", "filename": "libstdc++-v3/testsuite/20_util/time_point/nonmember/constexpr.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Fnonmember%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Fnonmember%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftime_point%2Fnonmember%2Fconstexpr.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -35,11 +35,11 @@ int main()\n   constexpr duration<int> d0(12);\n   constexpr duration<int> d1(3);\n \n-  constexpr auto r1 = t1 + d0;\n-  constexpr auto r2 = d1 + t2;\n+  constexpr auto r1 __attribute__((unused)) = t1 + d0;\n+  constexpr auto r2 __attribute__((unused)) = d1 + t2;\n \n-  constexpr auto r3 = t1 - d0;\n-  constexpr auto r4 = t2 - t3;\n+  constexpr auto r3 __attribute__((unused)) = t1 - d0;\n+  constexpr auto r4 __attribute__((unused)) = t2 - t3;\n \n   return 0;\n }"}, {"sha": "bf2a8573abfd9fa0b664fbf1d6c21d2f5c5e18a5", "filename": "libstdc++-v3/testsuite/20_util/tuple/creation_functions/constexpr.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcreation_functions%2Fconstexpr.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -34,12 +34,14 @@ test_make_tuple()\n {\n   {\n     typedef std::tuple<int, float> tuple_type;\n-    constexpr tuple_type p1 = std::make_tuple(22, 22.222);\n+    constexpr tuple_type p1 __attribute__((unused))\n+      = std::make_tuple(22, 22.222);\n   }\n \n   {\n     typedef std::tuple<int, float, int> tuple_type;\n-    constexpr tuple_type p1 = std::make_tuple(22, 22.222, 77799);\n+    constexpr tuple_type p1 __attribute__((unused))\n+      = std::make_tuple(22, 22.222, 77799);\n   }\n }\n \n@@ -50,13 +52,15 @@ test_get()\n   {\n     typedef std::tuple<int, float> tuple_type;\n     constexpr tuple_type t1 { 55, 77.77 };\n-    constexpr auto var = std::get<1>(t1);\n+    constexpr auto var __attribute__((unused))\n+      = std::get<1>(t1);\n   }\n \n   {\n     typedef std::tuple<int, float, int> tuple_type;\n     constexpr tuple_type t1 { 55, 77.77, 99 };\n-    constexpr auto var = std::get<2>(t1);\n+    constexpr auto var __attribute__((unused))\n+      = std::get<2>(t1);\n   }\n }\n \n@@ -69,7 +73,7 @@ test_tuple_cat()\n \n   constexpr tuple_type1 t1 { 55, 77.77 };\n   constexpr tuple_type2 t2 { 55, 99, 77.77 };\n-  constexpr auto cat1 = std::tuple_cat(t1, t2);\n+  constexpr auto cat1 __attribute__((unused)) = std::tuple_cat(t1, t2);\n }\n \n int"}, {"sha": "3dcb2968718c56bea0afae4f8d32366f5c9fe2bf", "filename": "libstdc++-v3/testsuite/23_containers/array/capacity/constexpr_functions.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcapacity%2Fconstexpr_functions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcapacity%2Fconstexpr_functions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcapacity%2Fconstexpr_functions.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "previous_filename": "libstdc++-v3/testsuite/23_containers/array/requirements/constexpr_functions.cc"}, {"sha": "534c2236b361f80e44bbb5ba625df58828152af4", "filename": "libstdc++-v3/testsuite/23_containers/array/capacity/empty.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcapacity%2Fempty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcapacity%2Fempty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcapacity%2Fempty.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    const size_t len = 5;\n+    typedef std::array<int, len> array_type;\n+    array_type a = { { 0, 1, 2, 3, 4 } };\n+\n+    VERIFY( a.empty() == false );\n+  }\n+\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    const size_t len = 0;\n+    typedef std::array<int, len> array_type;\n+    array_type a;\n+\n+    VERIFY( a.empty() == true );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a9edb8aab03a62ee60522dab0e720e9cf02a429d", "filename": "libstdc++-v3/testsuite/23_containers/array/capacity/max_size.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcapacity%2Fmax_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcapacity%2Fmax_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcapacity%2Fmax_size.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    const size_t len = 5;\n+    typedef std::array<int, len> array_type;\n+    array_type a = { { 0, 1, 2, 3, 4 } };\n+\n+    VERIFY( a.max_size() == len );\n+  }\n+\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    const size_t len = 0;\n+    typedef std::array<int, len> array_type;\n+    array_type a;\n+\n+    VERIFY( a.max_size() == len );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "adfe43b13578f1546a7389eafc95543d8aa6824a", "filename": "libstdc++-v3/testsuite/23_containers/array/capacity/size.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcapacity%2Fsize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcapacity%2Fsize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcapacity%2Fsize.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    const size_t len = 5;\n+    typedef std::array<int, len> array_type;\n+    array_type a = { { 0, 1, 2, 3, 4 } };\n+\n+    VERIFY( a.size() == len );\n+  }\n+\n+  {\n+    bool test __attribute__((unused)) = true;\n+\n+    const size_t len = 0;\n+    typedef std::array<int, len> array_type;\n+    array_type a;\n+\n+    VERIFY( a.size() == len );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2bc4174db2a200959f7874d6743a0ac7e66574c0", "filename": "libstdc++-v3/testsuite/23_containers/array/comparison_operators/equal.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fequal.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  const size_t len = 5;\n+  typedef std::array<int, len> array_type;\n+  bool test __attribute__((unused)) = true;\n+  array_type a = { { 0, 1, 2, 3, 4 } };\n+  array_type b = { { 0, 1, 2, 3, 4 } };\n+  array_type c = { { 0, 1, 2, 3 } };\n+\n+  VERIFY( a == b );\n+  VERIFY( !(a == c) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "dc30102c52a7e790aad37e844fc9d9e9f911d679", "filename": "libstdc++-v3/testsuite/23_containers/array/comparison_operators/greater.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fgreater.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fgreater.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fgreater.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  const size_t len = 5;\n+  typedef std::array<int, len> array_type;\n+  bool test __attribute__((unused)) = true;\n+  array_type a = { { 0, 1, 2, 3, 4 } };\n+  array_type b = { { 0, 1, 2, 3, 4 } };\n+  array_type c = { { 0, 1, 2, 3, 7 } };\n+\n+  VERIFY( !(a > b) );\n+  VERIFY( c > a );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "96a4e42a61f3d9d6c8f66dae84222e32d3290501", "filename": "libstdc++-v3/testsuite/23_containers/array/comparison_operators/greater_or_equal.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fgreater_or_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fgreater_or_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fgreater_or_equal.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  const size_t len = 5;\n+  typedef std::array<int, len> array_type;\n+  bool test __attribute__((unused)) = true;\n+  array_type a = { { 0, 1, 2, 3, 4 } };\n+  array_type b = { { 0, 1, 2, 3, 4 } };\n+  array_type c = { { 0, 1, 2, 3, 7 } };\n+\n+  VERIFY( a >= b );\n+  VERIFY( c >= a );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bd64e03598715f612c234630e81fa34a8dfa5665", "filename": "libstdc++-v3/testsuite/23_containers/array/comparison_operators/less.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fless.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fless.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fless.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  const size_t len = 5;\n+  typedef std::array<int, len> array_type;\n+  bool test __attribute__((unused)) = true;\n+  array_type a = { { 0, 1, 2, 3, 4 } };\n+  array_type b = { { 0, 1, 2, 3, 4 } };\n+  array_type c = { { 0, 1, 2, 3, 7 } };\n+\n+  VERIFY( !(a < b) );\n+  VERIFY( a < c );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2644948f9c8817c73855c4c602298a596284cde7", "filename": "libstdc++-v3/testsuite/23_containers/array/comparison_operators/less_or_equal.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fless_or_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fless_or_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fless_or_equal.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  const size_t len = 5;\n+  typedef std::array<int, len> array_type;\n+  bool test __attribute__((unused)) = true;\n+  array_type a = { { 0, 1, 2, 3, 4 } };\n+  array_type b = { { 0, 1, 2, 3, 4 } };\n+  array_type c = { { 0, 1, 2, 3, 7 } };\n+\n+  VERIFY( a <= b );\n+  VERIFY( a <= c );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "81d3e0e3447ee4ae95fa22b327b5590b0c895941", "filename": "libstdc++-v3/testsuite/23_containers/array/comparison_operators/not_equal.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fnot_equal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fnot_equal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcomparison_operators%2Fnot_equal.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  const size_t len = 5;\n+  typedef std::array<int, len> array_type;\n+  bool test __attribute__((unused)) = true;\n+  array_type a = { { 0, 1, 2, 3, 4 } };\n+  array_type b = { { 0, 1, 2, 3, 4 } };\n+  array_type c = { { 0, 1, 2, 3 } };\n+\n+  VERIFY( !(a != b) );\n+  VERIFY( a != c );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "04959dceecc45299510147a42bc95d8eb559be44", "filename": "libstdc++-v3/testsuite/23_containers/array/cons/aggregate_initialization.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcons%2Faggregate_initialization.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcons%2Faggregate_initialization.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fcons%2Faggregate_initialization.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+\n+void\n+test01() \n+{ \n+  typedef std::array<int, 5> array_type;\n+\n+  array_type a = { { 0, 1, 2, 3, 4 } };\n+  array_type b = { { 0, 1, 2, 3 } };\n+\n+  a = b;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4b3814f3b12788a2ba7133b28a0b90d73b5ab238", "filename": "libstdc++-v3/testsuite/23_containers/array/element_access/at_neg.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fat_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fat_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fat_neg.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -26,6 +26,6 @@ int main()\n   // exception end up in a terminate handler which eventually exits,\n   // or abort. (Depending on -fno-exceptions.)\n   constexpr std::array<int, 3> a{{1, 2, 3}};\n-  auto i = a.at(4); \n+  auto i __attribute__((unused)) = a.at(4); \n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/23_containers/array/at_neg.cc"}, {"sha": "4508fe277cd4cf10c97be4e379fb06307bb99a08", "filename": "libstdc++-v3/testsuite/23_containers/array/element_access/at_out_of_range.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fat_out_of_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fat_out_of_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fat_out_of_range.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const size_t len = 5;\n+  typedef std::array<int, len> array_type;\n+  array_type a = { { 0, 1, 2, 3, 4 } };\n+\n+  try\n+    {\n+      a.at(len);\n+      VERIFY( false );\n+    }\n+  catch(std::out_of_range& obj)\n+    {\n+      // Expected.\n+      VERIFY( true );\n+    }\n+  catch(...)\n+    {\n+      // Failed.\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ac916f4d0ac1a59ae32a18c5cbd69be8a35bbb97", "filename": "libstdc++-v3/testsuite/23_containers/array/element_access/back.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fback.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fback.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fback.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+\n+  const size_t len = 5;\n+  typedef std::array<int, len> array_type;\n+\n+  {\n+    array_type a = { { 0, 1, 2, 3, 4 } };\n+    int& ri = a.back();\n+    VERIFY( ri == 4 );\n+  }\n+\n+  {\n+    const array_type ca = { { 4, 3, 2, 1, 0 } };\n+    const int& cri = ca.back();\n+    VERIFY( cri == 0 );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c2f301adcd4b7cb27867a425672b83cb15795a99", "filename": "libstdc++-v3/testsuite/23_containers/array/element_access/constexpr_element_access.cc", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fconstexpr_element_access.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fconstexpr_element_access.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fconstexpr_element_access.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -24,8 +24,8 @@ int main()\n {\n   // array\n   typedef std::array<std::size_t, 6> array_type;\n-  constexpr array_type a = { 0, 55, 66, 99, 4115, 2 };\n-  constexpr auto v1 = a[1];\n-  constexpr auto v2 = a.at(2);\n+  constexpr array_type a = { { 0, 55, 66, 99, 4115, 2 } };\n+  constexpr auto v1 __attribute__((unused)) = a[1];\n+  constexpr auto v2 __attribute__((unused)) = a.at(2);\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/23_containers/array/requirements/constexpr_element_access.cc"}, {"sha": "2387b4632f516519a7db6caa6af8dca202bad7fc", "filename": "libstdc++-v3/testsuite/23_containers/array/element_access/data.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fdata.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fdata.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Fdata.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+\n+  const size_t len = 5;\n+  typedef std::array<int, len> array_type;\n+\n+  {\n+    array_type a = { { 0, 1, 2, 3, 4 } };\n+    int* pi = a.data();\n+    VERIFY( *pi == 0 );\n+  }\n+\n+  {\n+    const array_type ca = { { 4, 3, 2, 1, 0 } };\n+    const int* pci = ca.data();\n+    VERIFY( *pci == 4 );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5b2c022edfe04d84799baa86d2633a465437bcbe", "filename": "libstdc++-v3/testsuite/23_containers/array/element_access/front.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Ffront.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Ffront.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Felement_access%2Ffront.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+\n+  const size_t len = 5;\n+  typedef std::array<int, len> array_type;\n+\n+  {\n+    array_type a = { { 0, 1, 2, 3, 4 } };\n+    int& ri = a.front();\n+    VERIFY( ri == 0 );\n+  }\n+\n+  {\n+    const array_type ca = { { 4, 3, 2, 1, 0 } };\n+    const int& cri = ca.front();\n+    VERIFY( cri == 4 );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fcc482a221a6614e277ed4657218e17d5c5c82a5", "filename": "libstdc++-v3/testsuite/23_containers/array/iterators/end_is_one_past.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fiterators%2Fend_is_one_past.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fiterators%2Fend_is_one_past.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fiterators%2Fend_is_one_past.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,42 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const size_t len = 5;\n+  typedef std::array<int, len> array_type;\n+  array_type a = { { 0, 1, 2, 3, 4 } };\n+\n+  array_type::iterator b = a.begin();\n+  array_type::iterator e = a.end();\n+\n+  VERIFY( e != (b + a.size() - 1) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b6c970b0e2fc95ad4cdd628267158e3dcc59c3d0", "filename": "libstdc++-v3/testsuite/23_containers/array/requirements/contiguous.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fcontiguous.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fcontiguous.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fcontiguous.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,43 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const size_t len = 5;\n+  typedef std::array<int, len> array_type;\n+  array_type a = { { 0, 1, 2, 3, 4 } };\n+\n+  // &a[n] == &a[0] + n for all 0 <= n < N.\n+  for (size_t i = 0; i < len; ++i)\n+    {\n+      VERIFY( &a[i] == &a[0] + i );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "1f6d0e8d61ab7abb57f33d0c9354e6a7cc6ad62d", "filename": "libstdc++-v3/testsuite/23_containers/array/requirements/member_swap.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fmember_swap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fmember_swap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fmember_swap.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+\n+  const size_t len = 5;\n+  typedef std::array<int, len> array_type;\n+\n+  array_type a = { { 0, 1, 2, 3, 4 } };\n+  const array_type a_ref = a;\n+\n+  array_type b = { { 4, 3, 2, 1, 0 } };\n+  const array_type b_ref = b;\n+\n+  a.swap(b);\n+  VERIFY( a == b_ref );\n+  VERIFY( b == a_ref );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ed29e2a1eafa62c6160800748b79c9398b3c1937", "filename": "libstdc++-v3/testsuite/23_containers/array/requirements/zero_sized_arrays.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fzero_sized_arrays.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fzero_sized_arrays.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fzero_sized_arrays.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,59 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  const size_t len = 0;\n+  typedef std::array<int, len> array_type;\n+\n+  // 1: ?\n+  array_type a = { };\n+\n+  // 2\n+  array_type b;\n+\n+  // 3\n+  // begin() == end()\n+  VERIFY( a.begin() == a.end() );\n+  VERIFY( b.begin() == b.end() );\n+\n+  // 4: ?\n+  // begin() == end() == unique value.\n+  {\n+    typedef std::array<long, len> array_type1;\n+    typedef std::array<char, len> array_type2;\n+    array_type1 one;\n+    array_type2 two;\n+    void* v1 = one.begin();\n+    void* v2 = two.begin();\n+    VERIFY( v1 != v2 );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8bf77eed89d3eeef9d9bac7e1dd5a2d2da63897f", "filename": "libstdc++-v3/testsuite/23_containers/array/specialized_algorithms/swap.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fspecialized_algorithms%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fspecialized_algorithms%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Fspecialized_algorithms%2Fswap.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+\n+  const size_t len = 5;\n+  typedef std::array<int, len> array_type;\n+\n+  array_type a = { { 0, 1, 2, 3, 4 } };\n+  const array_type a_ref = a;\n+\n+  array_type b = { { 4, 3, 2, 1, 0 } };\n+  const array_type b_ref = b;\n+\n+  std::swap(a, b);\n+  VERIFY( a == b_ref );\n+  VERIFY( b == a_ref );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3346ffd34487a68be0cc773acaa0f70941f084b6", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/constexpr_get.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fconstexpr_get.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fconstexpr_get.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fconstexpr_get.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "previous_filename": "libstdc++-v3/testsuite/23_containers/array/constexpr_get.cc"}, {"sha": "1919aade3b03b4f0225a12fd947cc3bc8338de09", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/get.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Fget.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "previous_filename": "libstdc++-v3/testsuite/23_containers/array/requirements/get.cc"}, {"sha": "fac21a1aca70739eef4d1e96fa706e5a8ba28554", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_element.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_element.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  {\n+    const size_t len = 3;\n+    typedef array<int, len> array_type;\n+    VERIFY( (is_same<tuple_element<0, array_type>::type, int>::value == true) );\n+    VERIFY( (is_same<tuple_element<1, array_type>::type, int>::value == true) );\n+    VERIFY( (is_same<tuple_element<2, array_type>::type, int>::value == true) );\n+  }\n+\n+  {\n+    const size_t len = 0;\n+    typedef array<int, len> array_type;\n+    VERIFY( (is_same<tuple_element<0, array_type>::type, int>::value == true) );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "f69dceaac7611053507a087b11237bd6b880c43e", "filename": "libstdc++-v3/testsuite/23_containers/array/tuple_interface/tuple_size.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Ftuple_interface%2Ftuple_size.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  {\n+    const size_t len = 5;\n+    typedef array<int, len> array_type;\n+    VERIFY( tuple_size<array_type>::value == 5 );\n+  }\n+\n+  {\n+    const size_t len = 0;\n+    typedef array<float, len> array_type;\n+    VERIFY( tuple_size<array_type>::value == 0 );\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fc171c8238f5b3bc222b49d82114956f4a9ecf67", "filename": "libstdc++-v3/testsuite/23_containers/bitset/operations/constexpr.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Foperations%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71743a68ece25642e8f00467bc2e0ac58fb0b970/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Foperations%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset%2Foperations%2Fconstexpr.cc?ref=71743a68ece25642e8f00467bc2e0ac58fb0b970", "patch": "@@ -26,15 +26,15 @@ int main()\n   typedef std::_Base_bitset<6> bitset_base;\n   constexpr bitset_base base = bitset_base();\n \n-  constexpr auto r1 = base._M_getword(2);\n+  constexpr auto r1 __attribute__((unused)) = base._M_getword(2);\n   // constexpr auto r2 = base._M_getdata(); // error, pointer to this\n-  auto r2 = base._M_getdata(); \n-  constexpr auto r3 = base._M_hiword();\n+  auto r2 __attribute__((unused)) = base._M_getdata(); \n+  constexpr auto r3 __attribute__((unused)) = base._M_hiword();\n \n   // bitset operators\n   typedef std::bitset<6> bitset_type;\n   constexpr bitset_type a = bitset_type();\n-  constexpr auto v = a[0];\n+  constexpr auto v __attribute__((unused)) = a[0];\n \n   return 0;\n }"}]}