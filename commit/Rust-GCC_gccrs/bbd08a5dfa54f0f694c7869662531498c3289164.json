{"sha": "bbd08a5dfa54f0f694c7869662531498c3289164", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJkMDhhNWRmYTU0ZjBmNjk0Yzc4Njk2NjI1MzE0OThjMzI4OTE2NA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-04-17T13:56:15Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-04-17T13:56:15Z"}, "message": "Fix IPA memory leaks.\n\n\t* ipa-cp.c (ipcp_driver): Release prev_edge_clone.\n\t* ipa-icf.c (sem_item_optimizer::subdivide_classes_by_sensitive_refs):\n\tRelease symbol_compare_collection.\n\t* ipa-reference.c: Add TODO that a vector should be released.\n\nFrom-SVN: r222180", "tree": {"sha": "b8ea62df3ba560f4617a94213a69ec7fe5ce7aa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8ea62df3ba560f4617a94213a69ec7fe5ce7aa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbd08a5dfa54f0f694c7869662531498c3289164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbd08a5dfa54f0f694c7869662531498c3289164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbd08a5dfa54f0f694c7869662531498c3289164", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbd08a5dfa54f0f694c7869662531498c3289164/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c11cdefbd1b1170deaaea321f919e3d04cbf25af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c11cdefbd1b1170deaaea321f919e3d04cbf25af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c11cdefbd1b1170deaaea321f919e3d04cbf25af"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "75c3ef358b8427da89e1274c1ef2a646b3c18abd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd08a5dfa54f0f694c7869662531498c3289164/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd08a5dfa54f0f694c7869662531498c3289164/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbd08a5dfa54f0f694c7869662531498c3289164", "patch": "@@ -1,3 +1,9 @@\n+2015-04-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-icf.c (sem_item_optimizer::subdivide_classes_by_sensitive_refs):\n+\tRelease symbol_compare_collection.\n+\t* ipa-reference.c: Add TODO that a vector should be released.\n+\n 2015-04-17  Sivanupandi Pitchumani <Pitchumani.Sivanupandi@atmel.com>\n \n \tPR target/65296"}, {"sha": "a72ac2ee4825065a5aa36d32b0453db531e7538b", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd08a5dfa54f0f694c7869662531498c3289164/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd08a5dfa54f0f694c7869662531498c3289164/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=bbd08a5dfa54f0f694c7869662531498c3289164", "patch": "@@ -2712,6 +2712,9 @@ sem_item_optimizer::subdivide_classes_by_equality (bool in_wpa)\n unsigned\n sem_item_optimizer::subdivide_classes_by_sensitive_refs ()\n {\n+  typedef hash_map <symbol_compare_collection *, vec <sem_item *>,\n+    symbol_compare_hashmap_traits> subdivide_hash_map;\n+\n   unsigned newly_created_classes = 0;\n \n   for (hash_table <congruence_class_group_hash>::iterator it = m_classes.begin ();\n@@ -2726,19 +2729,23 @@ sem_item_optimizer::subdivide_classes_by_sensitive_refs ()\n \n \t  if (c->members.length() > 1)\n \t    {\n-\t      hash_map <symbol_compare_collection *, vec <sem_item *>,\n-\t\tsymbol_compare_hashmap_traits> split_map;\n+\t      subdivide_hash_map split_map;\n \n \t      for (unsigned j = 0; j < c->members.length (); j++)\n \t        {\n \t\t  sem_item *source_node = c->members[j];\n \n \t\t  symbol_compare_collection *collection = new symbol_compare_collection (source_node->node);\n \n-\t\t  vec <sem_item *> *slot = &split_map.get_or_insert (collection);\n+\t\t  bool existed;\n+\t\t  vec <sem_item *> *slot = &split_map.get_or_insert (collection,\n+\t\t\t\t\t\t\t\t     &existed);\n \t\t  gcc_checking_assert (slot);\n \n \t\t  slot->safe_push (source_node);\n+\n+\t\t  if (existed)\n+\t\t    delete collection;\n \t        }\n \n \t       /* If the map contains more than one key, we have to split the map\n@@ -2747,9 +2754,8 @@ sem_item_optimizer::subdivide_classes_by_sensitive_refs ()\n \t        {\n \t\t  bool first_class = true;\n \n-\t\t  hash_map <symbol_compare_collection *, vec <sem_item *>,\n-\t\t  symbol_compare_hashmap_traits>::iterator it2 = split_map.begin ();\n-\t\t  for (; it2 != split_map.end (); ++it2)\n+\t\t  for (subdivide_hash_map::iterator it2 = split_map.begin ();\n+\t\t       it2 != split_map.end (); ++it2)\n \t\t    {\n \t\t      congruence_class *new_cls;\n \t\t      new_cls = new congruence_class (class_id++);\n@@ -2772,6 +2778,14 @@ sem_item_optimizer::subdivide_classes_by_sensitive_refs ()\n \t\t        }\n \t\t    }\n \t\t}\n+\n+\t      /* Release memory.  */\n+\t      for (subdivide_hash_map::iterator it2 = split_map.begin ();\n+\t\t   it2 != split_map.end (); ++it2)\n+\t\t{\n+\t\t  delete (*it2).first;\n+\t\t  (*it2).second.release ();\n+\t\t}\n \t    }\n \t  }\n "}, {"sha": "a420cb2042b4084f5c18c8e00087054f67ede462", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd08a5dfa54f0f694c7869662531498c3289164/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd08a5dfa54f0f694c7869662531498c3289164/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=bbd08a5dfa54f0f694c7869662531498c3289164", "patch": "@@ -150,6 +150,7 @@ static struct cgraph_node_hook_list *node_removal_hook_holder;\n    Indexed by UID of call graph nodes.  */\n static vec<ipa_reference_vars_info_t> ipa_reference_vars_vector;\n \n+/* TODO: find a place where we should release the vector.  */\n static vec<ipa_reference_optimization_summary_t> ipa_reference_opt_sum_vector;\n \n /* Return the ipa_reference_vars structure starting from the cgraph NODE.  */"}]}