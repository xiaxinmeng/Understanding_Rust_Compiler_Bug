{"sha": "2ec855f1f74eb35dc8e2909b837ff7d8888d2220", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVjODU1ZjFmNzRlYjM1ZGM4ZTI5MDliODM3ZmY3ZDg4ODhkMjIyMA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2008-11-22T18:18:05Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2008-11-22T18:18:05Z"}, "message": "re PR fortran/38160 (C Binding: Kind parameter checking too strict and too late)\n\n2008-11-22  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/38160\n        * trans-types.c (gfc_validate_c_kind): Remove function.\n        * decl.c (gfc_match_kind_spec): Add C kind parameter check.\n          (verify_bind_c_derived_type): Remove gfc_validate_c_kind call.\n          (verify_c_interop_param): Update call.\n        * gfortran.h (verify_bind_c_derived_type): Update prototype.\n          (gfc_validate_c_kind): Remove.\n        * symbol.c (verify_bind_c_derived_type): Update verify_c_interop\n        * call.\n        * resolve.c (gfc_iso_c_func_interface): Ditto.\n\n2008-11-22  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/38160\n        * gfortran.dg/bind_c_usage_18.f90: New test.\n        * gfortran.dg/c_kind_tests_2.f03: Update dg-messages.\n        * gfortran.dg/interop_params.f03: Ditto.\n\nFrom-SVN: r142124", "tree": {"sha": "9b55d331fc080cfba7104b909bfed362f85a302e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b55d331fc080cfba7104b909bfed362f85a302e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ec855f1f74eb35dc8e2909b837ff7d8888d2220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec855f1f74eb35dc8e2909b837ff7d8888d2220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ec855f1f74eb35dc8e2909b837ff7d8888d2220", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d50ba211c7363f3f693a33a0000219af56fc46e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d50ba211c7363f3f693a33a0000219af56fc46e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d50ba211c7363f3f693a33a0000219af56fc46e"}], "stats": {"total": 122, "additions": 70, "deletions": 52}, "files": [{"sha": "46cec41972a2db4f589de4d828c9814ebc025185", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2ec855f1f74eb35dc8e2909b837ff7d8888d2220", "patch": "@@ -1,3 +1,15 @@\n+2008-11-12  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/38160\n+\t* trans-types.c (gfc_validate_c_kind): Remove function.\n+\t* decl.c (gfc_match_kind_spec): Add C kind parameter check.\n+\t(verify_bind_c_derived_type): Remove gfc_validate_c_kind call.\n+\t(verify_c_interop_param): Update call.\n+\t* gfortran.h (verify_bind_c_derived_type): Update prototype.\n+\t(gfc_validate_c_kind): Remove.\n+\t* symbol.c (verify_bind_c_derived_type): Update verify_c_interop call.\n+\t* resolve.c (gfc_iso_c_func_interface): Ditto.\n+\n 2008-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libfortran/37839"}, {"sha": "dabbafa68c65bd698d840033f2dd3f42be83140d", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=2ec855f1f74eb35dc8e2909b837ff7d8888d2220", "patch": "@@ -918,7 +918,7 @@ verify_c_interop_param (gfc_symbol *sym)\n       if (sym->ns->proc_name->attr.is_bind_c == 1)\n \t{\n \t  is_c_interop =\n-\t    (verify_c_interop (&(sym->ts), sym->name, &(sym->declared_at))\n+\t    (verify_c_interop (&(sym->ts))\n \t     == SUCCESS ? 1 : 0);\n \n \t  if (is_c_interop != 1)\n@@ -1982,6 +1982,17 @@ gfc_match_kind_spec (gfc_typespec *ts, bool kind_expr_only)\n       return MATCH_ERROR;\n     }\n \n+  /* Warn if, e.g., c_int is used for a REAL variable, but not\n+     if, e.g., c_double is used for COMPLEX as the standard\n+     explicitly says that the kind type parameter for complex and real\n+     variable is the same, i.e. c_float == c_float_complex.  */\n+  if (ts->f90_type != BT_UNKNOWN && ts->f90_type != ts->type\n+      && !((ts->f90_type == BT_REAL && ts->type == BT_COMPLEX)\n+\t   || (ts->f90_type == BT_COMPLEX && ts->type == BT_REAL)))\n+    gfc_error_now (\"C kind type parameter is for type %s but type at %L \"\n+\t\t   \"is %s\", gfc_basic_typename (ts->f90_type), &where,\n+\t\t   gfc_basic_typename (ts->type));\n+\n   gfc_gobble_whitespace ();\n   if ((c = gfc_next_ascii_char ()) != ')'\n       && (ts->type != BT_CHARACTER || c != ','))\n@@ -3299,29 +3310,8 @@ set_com_block_bind_c (gfc_common_head *com_block, int is_bind_c)\n /* Verify that the given gfc_typespec is for a C interoperable type.  */\n \n gfc_try\n-verify_c_interop (gfc_typespec *ts, const char *name, locus *where)\n+verify_c_interop (gfc_typespec *ts)\n {\n-  gfc_try t;\n-\n-  /* Make sure the kind used is appropriate for the type.\n-     The f90_type is unknown if an integer constant was\n-     used (e.g., real(4), bind(c) :: myFloat).  */\n-  if (ts->f90_type != BT_UNKNOWN)\n-    {\n-      t = gfc_validate_c_kind (ts);\n-      if (t != SUCCESS)\n-        {\n-          /* Print an error, but continue parsing line.  */\n-          gfc_error_now (\"C kind parameter is for type %s but \"\n-                         \"symbol '%s' at %L is of type %s\",\n-                         gfc_basic_typename (ts->f90_type),\n-                         name, where, \n-                         gfc_basic_typename (ts->type));\n-        }\n-    }\n-\n-  /* Make sure the kind is C interoperable.  This does not care about the\n-     possible error above.  */\n   if (ts->type == BT_DERIVED && ts->derived != NULL)\n     return (ts->derived->ts.is_c_interop ? SUCCESS : FAILURE);\n   else if (ts->is_c_interop != 1)\n@@ -3396,8 +3386,7 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n      the given ts (current_ts), so look in both.  */\n   if (tmp_sym->ts.type != BT_UNKNOWN || ts->type != BT_UNKNOWN) \n     {\n-      if (verify_c_interop (&(tmp_sym->ts), tmp_sym->name,\n-                            &(tmp_sym->declared_at)) != SUCCESS)\n+      if (verify_c_interop (&(tmp_sym->ts)) != SUCCESS)\n \t{\n \t  /* See if we're dealing with a sym in a common block or not.\t*/\n \t  if (is_in_common == 1)"}, {"sha": "d5d28f24fbc2c61afaf6f92c1bb99440965aa11a", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2ec855f1f74eb35dc8e2909b837ff7d8888d2220", "patch": "@@ -2215,7 +2215,6 @@ arith gfc_check_integer_range (mpz_t p, int kind);\n bool gfc_check_character_range (gfc_char_t, int);\n \n /* trans-types.c */\n-gfc_try gfc_validate_c_kind (gfc_typespec *);\n gfc_try gfc_check_any_c_kind (gfc_typespec *);\n int gfc_validate_kind (bt, int, bool);\n extern int gfc_index_integer_kind;\n@@ -2319,7 +2318,7 @@ gfc_symbol *gfc_new_symbol (const char *, gfc_namespace *);\n int gfc_find_symbol (const char *, gfc_namespace *, int, gfc_symbol **);\n int gfc_find_sym_tree (const char *, gfc_namespace *, int, gfc_symtree **);\n int gfc_get_symbol (const char *, gfc_namespace *, gfc_symbol **);\n-gfc_try verify_c_interop (gfc_typespec *, const char *name, locus *where);\n+gfc_try verify_c_interop (gfc_typespec *);\n gfc_try verify_c_interop_param (gfc_symbol *);\n gfc_try verify_bind_c_sym (gfc_symbol *, gfc_typespec *, int, gfc_common_head *);\n gfc_try verify_bind_c_derived_type (gfc_symbol *);"}, {"sha": "0f0644f0d83417c391f348006318c96f52eef397", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=2ec855f1f74eb35dc8e2909b837ff7d8888d2220", "patch": "@@ -2073,10 +2073,7 @@ gfc_iso_c_func_interface (gfc_symbol *sym, gfc_actual_arglist *args,\n             }\n \n           /* See if we have interoperable type and type param.  */\n-          if (verify_c_interop (arg_ts,\n-\t\t\t\t(parent_ref ? parent_ref->u.c.component->name \n-\t\t\t\t : args_sym->name), \n-                                &(args->expr->where)) == SUCCESS\n+          if (verify_c_interop (arg_ts) == SUCCESS\n               || gfc_check_any_c_kind (arg_ts) == SUCCESS)\n             {\n               if (args_sym->attr.target == 1)"}, {"sha": "4e81b89e2b042c3efdadc0f84021ca780ba476b9", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=2ec855f1f74eb35dc8e2909b837ff7d8888d2220", "patch": "@@ -3395,8 +3395,7 @@ verify_bind_c_derived_type (gfc_symbol *derived_sym)\n       else\n \t{\n \t  /* Grab the typespec for the given component and test the kind.  */ \n-\t  is_c_interop = verify_c_interop (&(curr_comp->ts), curr_comp->name,\n-                                           &(curr_comp->loc));\n+\t  is_c_interop = verify_c_interop (&(curr_comp->ts));\n \t  \n \t  if (is_c_interop != SUCCESS)\n \t    {"}, {"sha": "de629646ec8703113b01b88c660a7edb38aeee8c", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=2ec855f1f74eb35dc8e2909b837ff7d8888d2220", "patch": "@@ -117,20 +117,6 @@ int gfc_numeric_storage_size;\n int gfc_character_storage_size;\n \n \n-/* Validate that the f90_type of the given gfc_typespec is valid for\n-   the type it represents.  The f90_type represents the Fortran types\n-   this C kind can be used with.  For example, c_int has a f90_type of\n-   BT_INTEGER and c_float has a f90_type of BT_REAL.  Returns FAILURE\n-   if a mismatch occurs between ts->f90_type and ts->type; SUCCESS if\n-   they match.  */\n-\n-gfc_try\n-gfc_validate_c_kind (gfc_typespec *ts)\n-{\n-   return ((ts->type == ts->f90_type) ? SUCCESS : FAILURE);\n-}\n-\n-\n gfc_try\n gfc_check_any_c_kind (gfc_typespec *ts)\n {"}, {"sha": "3b5fae63cab6b5b15447bca576a4cb89a194afd5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ec855f1f74eb35dc8e2909b837ff7d8888d2220", "patch": "@@ -1,3 +1,10 @@\n+2008-11-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/38160\n+\t* gfortran.dg/bind_c_usage_18.f90: New test.\n+\t* gfortran.dg/c_kind_tests_2.f03: Update dg-messages.\n+\t* gfortran.dg/interop_params.f03: Ditto.\n+\n 2008-11-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/38222"}, {"sha": "30534cca9a98d7e2c5a17b3c2b1809b57d71668a", "filename": "gcc/testsuite/gfortran.dg/bind_c_usage_18.f90", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_usage_18.f90?ref=2ec855f1f74eb35dc8e2909b837ff7d8888d2220", "patch": "@@ -0,0 +1,29 @@\n+! { dg-do compile }\n+!\n+! PR fortran/38160\n+!\n+\n+subroutine foo(x,y,z,a) bind(c) ! { dg-warning \"but may not be C interoperable\" }\n+  use iso_c_binding\n+  implicit none\n+  integer(4) :: x\n+  integer(c_float) :: y ! { dg-error \"C kind type parameter is for type REAL\" }\n+  complex(c_float) :: z ! OK, c_float == c_float_complex\n+  real(c_float_complex) :: a ! OK, c_float == c_float_complex\n+end subroutine foo\n+\n+use iso_c_binding\n+implicit none\n+integer, parameter :: it = c_int\n+integer, parameter :: dt = c_double\n+complex(c_int), target    :: z1  ! { dg-error \"C kind type parameter is for type INTEGER\" }\n+complex(it), target       :: z2  ! { dg-error \"C kind type parameter is for type INTEGER\" }\n+complex(c_double), target :: z3  ! OK\n+complex(dt), target       :: z4  ! OK\n+type(c_ptr) :: ptr\n+\n+ptr = c_loc(z1)\n+ptr = c_loc(z2)\n+ptr = c_loc(z3)\n+ptr = c_loc(z4)\n+end"}, {"sha": "ced31a554ba831e897343e6fc89a814d7edc323e", "filename": "gcc/testsuite/gfortran.dg/c_kind_tests_2.f03", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_tests_2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_tests_2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_tests_2.f03?ref=2ec855f1f74eb35dc8e2909b837ff7d8888d2220", "patch": "@@ -4,11 +4,11 @@ module c_kind_tests_2\n \n   integer, parameter :: myF = c_float\n   real(myF), bind(c) :: myCFloat\n-  integer(myF), bind(c) :: myCInt ! { dg-error \"is for type REAL\" }\n+  integer(myF), bind(c) :: myCInt       ! { dg-error \"is for type REAL\" }\n   integer(c_double), bind(c) :: myCInt2 ! { dg-error \"is for type REAL\" }\n \n   integer, parameter :: myI = c_int\n-  real(myI) :: myReal\n+  real(myI) :: myReal             ! { dg-error \"is for type INTEGER\" }\n   real(myI), bind(c) :: myCFloat2 ! { dg-error \"is for type INTEGER\" }\n-  real(4), bind(c) :: myFloat ! { dg-warning \"may not be a C interoperable\" }\n+  real(4), bind(c) :: myFloat     ! { dg-warning \"may not be a C interoperable\" }\n end module c_kind_tests_2"}, {"sha": "96c7d5cef166fd73b741d0daaa088dd28af1ddcb", "filename": "gcc/testsuite/gfortran.dg/interop_params.f03", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ftestsuite%2Fgfortran.dg%2Finterop_params.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ec855f1f74eb35dc8e2909b837ff7d8888d2220/gcc%2Ftestsuite%2Fgfortran.dg%2Finterop_params.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterop_params.f03?ref=2ec855f1f74eb35dc8e2909b837ff7d8888d2220", "patch": "@@ -13,8 +13,8 @@ subroutine test_0(my_f90_int) bind(c) ! { dg-warning \"may not be C interoperable\n     integer, value :: my_f90_int \n   end subroutine test_0\n \n-  subroutine test_1(my_f90_real) bind(c) ! { dg-error \"is for type INTEGER\" } \n-    real(c_int), value :: my_f90_real \n+  subroutine test_1(my_f90_real) bind(c)\n+    real(c_int), value :: my_f90_real    ! { dg-error \"is for type INTEGER\" }\n   end subroutine test_1\n \n   subroutine test_2(my_type) bind(c) ! { dg-error \"is not C interoperable\" }"}]}