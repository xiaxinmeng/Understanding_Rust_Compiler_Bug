{"sha": "84088dc4bb6a546c896a068dc201463493babf43", "node_id": "C_kwDOANBUbNoAKDg0MDg4ZGM0YmI2YTU0NmM4OTZhMDY4ZGMyMDE0NjM0OTNiYWJmNDM", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-11T08:07:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-11T19:34:16Z"}, "message": "libstdc++: Fix std::match_results::end() for failed matches [PR102667]\n\nThe end() function needs to consider whether the underlying vector is\nempty, not whether the match_results object is empty. That's because the\nunderlying vector will always contain at least three elements for a\nmatch_results object that is \"ready\". It contains three extra elements\nwhich are stored in the vector but are not considered part of sequence,\nand so should not be part of the [begin(),end()) range.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/102667\n\t* include/bits/regex.h (match_result::empty()): Optimize by\n\tcalling the base function directly.\n\t(match_results::end()): Check _Base_type::empty() not empty().\n\t* testsuite/28_regex/match_results/102667.C: New test.", "tree": {"sha": "1b9cda7ec87970a26092a41745ce184fd3907ce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b9cda7ec87970a26092a41745ce184fd3907ce6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84088dc4bb6a546c896a068dc201463493babf43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84088dc4bb6a546c896a068dc201463493babf43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84088dc4bb6a546c896a068dc201463493babf43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84088dc4bb6a546c896a068dc201463493babf43/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "008e7397dad971c03c08fc1b0a4a98fddccaaed8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/008e7397dad971c03c08fc1b0a4a98fddccaaed8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/008e7397dad971c03c08fc1b0a4a98fddccaaed8"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "bf02bff7c4921bd66a94a8174f37e45bddbf2d76", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84088dc4bb6a546c896a068dc201463493babf43/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84088dc4bb6a546c896a068dc201463493babf43/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=84088dc4bb6a546c896a068dc201463493babf43", "patch": "@@ -1828,7 +1828,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       _GLIBCXX_NODISCARD bool\n       empty() const noexcept\n-      { return size() == 0; }\n+      { return _Unchecked::size() <= 3; }\n \n       ///@}\n \n@@ -1946,7 +1946,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       const_iterator\n       end() const noexcept\n-      { return _Base_type::end() - (empty() ? 0 : 3); }\n+      { return _Base_type::end() - (_Base_type::empty() ? 0 : 3); }\n \n       /**\n        * @brief Gets an iterator to one-past-the-end of the collection."}, {"sha": "9e38c9edaa44c04a1f8eceed6022e3f770e0e4dd", "filename": "libstdc++-v3/testsuite/28_regex/match_results/102667.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84088dc4bb6a546c896a068dc201463493babf43/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2F102667.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84088dc4bb6a546c896a068dc201463493babf43/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2F102667.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fmatch_results%2F102667.C?ref=84088dc4bb6a546c896a068dc201463493babf43", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do run { target c++11 } }\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::cmatch sm;\n+  VERIFY( sm.empty() );\n+  VERIFY( sm.size() == 0 );\n+  VERIFY( sm.begin() == sm.end() );  // PR libstdc++/83600\n+\n+  bool matched = std::regex_match(\"a\", sm, std::regex(\"b\"));\n+  VERIFY( ! matched );\n+  VERIFY( sm.ready() );\n+  VERIFY( sm.empty() );\n+  VERIFY( sm.size() == 0 );\n+  VERIFY( sm.begin() == sm.end() ); // PR libstdc++/102667\n+\n+  matched = std::regex_match(\"a\", sm, std::regex(\"a\"));\n+  VERIFY( matched );\n+  VERIFY( sm.ready() );\n+  VERIFY( ! sm.empty() );\n+  VERIFY( sm.size() == 1 );\n+  VERIFY( (sm.end() - sm.begin()) == 1 );\n+\n+  matched = std::regex_search(\"abcd\", sm, std::regex(\"(b)(c)\"));\n+  VERIFY( matched );\n+  VERIFY( sm.ready() );\n+  VERIFY( ! sm.empty() );\n+  VERIFY( sm.size() == 3 );\n+  VERIFY( (sm.end() - sm.begin()) == 3 );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}