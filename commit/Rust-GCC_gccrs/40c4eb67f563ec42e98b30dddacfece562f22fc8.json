{"sha": "40c4eb67f563ec42e98b30dddacfece562f22fc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBjNGViNjdmNTYzZWM0MmU5OGIzMGRkZGFjZmVjZTU2MmYyMmZjOA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-11-11T20:04:58Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2020-11-13T07:34:49Z"}, "message": "Move vr_values out of vrp_prop into execute_vrp so it can be shared.\n\nvr_values is being shared among the propagator and the folder and\npassed around.  I've pulled it out from the propagator so it can be\npassed around to each, instead of being publicly accessible from the\npropagator.\n\ngcc/ChangeLog:\n\n\t* tree-vrp.c (class vrp_prop): Rename vr_values to m_vr_values.\n\t(vrp_prop::vrp_prop): New.\n\t(vrp_prop::initialize): Rename vr_values to m_vr_values.\n\t(vrp_prop::visit_stmt): Same.\n\t(vrp_prop::visit_phi): Same.\n\t(vrp_prop::finalize): Same.\n\t(execute_vrp): Instantiate vrp_vr_values and pass it to folder\n\tand propagator.", "tree": {"sha": "3a264f01e12c8f731ad1f286fac07afc63777060", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a264f01e12c8f731ad1f286fac07afc63777060"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40c4eb67f563ec42e98b30dddacfece562f22fc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c4eb67f563ec42e98b30dddacfece562f22fc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40c4eb67f563ec42e98b30dddacfece562f22fc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40c4eb67f563ec42e98b30dddacfece562f22fc8/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "022b99bcba5a3516d4de732f156cbd684c8e812d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/022b99bcba5a3516d4de732f156cbd684c8e812d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/022b99bcba5a3516d4de732f156cbd684c8e812d"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "81bbaefd64217750dfc87a6e11c6d88de8fb75e7", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40c4eb67f563ec42e98b30dddacfece562f22fc8/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40c4eb67f563ec42e98b30dddacfece562f22fc8/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=40c4eb67f563ec42e98b30dddacfece562f22fc8", "patch": "@@ -3817,15 +3817,19 @@ vrp_asserts::remove_range_assertions ()\n class vrp_prop : public ssa_propagation_engine\n {\n public:\n-  enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) FINAL OVERRIDE;\n-  enum ssa_prop_result visit_phi (gphi *) FINAL OVERRIDE;\n-\n-  struct function *fun;\n+  vrp_prop (vr_values *v)\n+    : ssa_propagation_engine (),\n+      m_vr_values (v) { }\n \n   void initialize (struct function *);\n   void finalize ();\n \n-  class vr_values vr_values;\n+  enum ssa_prop_result visit_stmt (gimple *, edge *, tree *) FINAL OVERRIDE;\n+  enum ssa_prop_result visit_phi (gphi *) FINAL OVERRIDE;\n+\n+private:\n+  struct function *fun;\n+  vr_values *m_vr_values;\n };\n \n /* Initialization required by ssa_propagate engine.  */\n@@ -3845,7 +3849,7 @@ vrp_prop::initialize (struct function *fn)\n \t  if (!stmt_interesting_for_vrp (phi))\n \t    {\n \t      tree lhs = PHI_RESULT (phi);\n-\t      vr_values.set_def_to_varying (lhs);\n+\t      m_vr_values->set_def_to_varying (lhs);\n \t      prop_set_simulate_again (phi, false);\n \t    }\n \t  else\n@@ -3864,7 +3868,7 @@ vrp_prop::initialize (struct function *fn)\n \t    prop_set_simulate_again (stmt, true);\n \t  else if (!stmt_interesting_for_vrp (stmt))\n \t    {\n-\t      vr_values.set_defs_to_varying (stmt);\n+\t      m_vr_values->set_defs_to_varying (stmt);\n \t      prop_set_simulate_again (stmt, false);\n \t    }\n \t  else\n@@ -3887,11 +3891,11 @@ vrp_prop::visit_stmt (gimple *stmt, edge *taken_edge_p, tree *output_p)\n {\n   tree lhs = gimple_get_lhs (stmt);\n   value_range_equiv vr;\n-  vr_values.extract_range_from_stmt (stmt, taken_edge_p, output_p, &vr);\n+  m_vr_values->extract_range_from_stmt (stmt, taken_edge_p, output_p, &vr);\n \n   if (*output_p)\n     {\n-      if (vr_values.update_value_range (*output_p, &vr))\n+      if (m_vr_values->update_value_range (*output_p, &vr))\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n@@ -3926,7 +3930,7 @@ vrp_prop::visit_stmt (gimple *stmt, edge *taken_edge_p, tree *output_p)\n \t    use_operand_p use_p;\n \t    enum ssa_prop_result res = SSA_PROP_VARYING;\n \n-\t    vr_values.set_def_to_varying (lhs);\n+\t    m_vr_values->set_def_to_varying (lhs);\n \n \t    FOR_EACH_IMM_USE_FAST (use_p, iter, lhs)\n \t      {\n@@ -3956,9 +3960,9 @@ vrp_prop::visit_stmt (gimple *stmt, edge *taken_edge_p, tree *output_p)\n \t\t   {REAL,IMAG}PART_EXPR uses at all,\n \t\t   return SSA_PROP_VARYING.  */\n \t\tvalue_range_equiv new_vr;\n-\t\tvr_values.extract_range_basic (&new_vr, use_stmt);\n+\t\tm_vr_values->extract_range_basic (&new_vr, use_stmt);\n \t\tconst value_range_equiv *old_vr\n-\t\t  = vr_values.get_value_range (use_lhs);\n+\t\t  = m_vr_values->get_value_range (use_lhs);\n \t\tif (!old_vr->equal_p (new_vr, /*ignore_equivs=*/false))\n \t\t  res = SSA_PROP_INTERESTING;\n \t\telse\n@@ -3980,7 +3984,7 @@ vrp_prop::visit_stmt (gimple *stmt, edge *taken_edge_p, tree *output_p)\n \n   /* All other statements produce nothing of interest for VRP, so mark\n      their outputs varying and prevent further simulation.  */\n-  vr_values.set_defs_to_varying (stmt);\n+  m_vr_values->set_defs_to_varying (stmt);\n \n   return (*taken_edge_p) ? SSA_PROP_INTERESTING : SSA_PROP_VARYING;\n }\n@@ -3994,8 +3998,8 @@ vrp_prop::visit_phi (gphi *phi)\n {\n   tree lhs = PHI_RESULT (phi);\n   value_range_equiv vr_result;\n-  vr_values.extract_range_from_phi_node (phi, &vr_result);\n-  if (vr_values.update_value_range (lhs, &vr_result))\n+  m_vr_values->extract_range_from_phi_node (phi, &vr_result);\n+  if (m_vr_values->update_value_range (lhs, &vr_result))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n@@ -4024,12 +4028,12 @@ vrp_prop::finalize ()\n   size_t i;\n \n   /* We have completed propagating through the lattice.  */\n-  vr_values.set_lattice_propagation_complete ();\n+  m_vr_values->set_lattice_propagation_complete ();\n \n   if (dump_file)\n     {\n       fprintf (dump_file, \"\\nValue ranges after VRP:\\n\\n\");\n-      vr_values.dump_all_value_ranges (dump_file);\n+      m_vr_values->dump_all_value_ranges (dump_file);\n       fprintf (dump_file, \"\\n\");\n     }\n \n@@ -4040,7 +4044,7 @@ vrp_prop::finalize ()\n       if (!name)\n \tcontinue;\n \n-      const value_range_equiv *vr = vr_values.get_value_range (name);\n+      const value_range_equiv *vr = m_vr_values->get_value_range (name);\n       if (!name || !vr->constant_p ())\n \tcontinue;\n \n@@ -4468,7 +4472,6 @@ vrp_simplify_cond_using_ranges (vr_values *query, gcond *stmt)\n static unsigned int\n execute_vrp (struct function *fun, bool warn_array_bounds_p)\n {\n-\n   loop_optimizer_init (LOOPS_NORMAL | LOOPS_HAVE_RECORDED_EXITS);\n   rewrite_into_loop_closed_ssa (NULL, TODO_update_ssa);\n   scev_initialize ();\n@@ -4484,13 +4487,15 @@ execute_vrp (struct function *fun, bool warn_array_bounds_p)\n   /* For visiting PHI nodes we need EDGE_DFS_BACK computed.  */\n   mark_dfs_back_edges ();\n \n-  class vrp_prop vrp_prop;\n+  vr_values vrp_vr_values;\n+\n+  class vrp_prop vrp_prop (&vrp_vr_values);\n   vrp_prop.initialize (fun);\n   vrp_prop.ssa_propagate ();\n \n   /* Instantiate the folder here, so that edge cleanups happen at the\n      end of this function.  */\n-  vrp_folder folder (&vrp_prop.vr_values);\n+  vrp_folder folder (&vrp_vr_values);\n   vrp_prop.finalize ();\n \n   /* If we're checking array refs, we want to merge information on\n@@ -4509,13 +4514,13 @@ execute_vrp (struct function *fun, bool warn_array_bounds_p)\n \n   if (warn_array_bounds && warn_array_bounds_p)\n     {\n-      array_bounds_checker array_checker (fun, &vrp_prop.vr_values);\n+      array_bounds_checker array_checker (fun, &vrp_vr_values);\n       array_checker.check ();\n     }\n \n   /* We must identify jump threading opportunities before we release\n      the datastructures built by VRP.  */\n-  vrp_jump_threader threader (fun, &vrp_prop.vr_values);\n+  vrp_jump_threader threader (fun, &vrp_vr_values);\n   threader.thread_jumps ();\n \n   /* A comparison of an SSA_NAME against a constant where the SSA_NAME\n@@ -4530,7 +4535,7 @@ execute_vrp (struct function *fun, bool warn_array_bounds_p)\n     {\n       gimple *last = last_stmt (bb);\n       if (last && gimple_code (last) == GIMPLE_COND)\n-\tvrp_simplify_cond_using_ranges (&vrp_prop.vr_values,\n+\tvrp_simplify_cond_using_ranges (&vrp_vr_values,\n \t\t\t\t\tas_a <gcond *> (last));\n     }\n "}]}