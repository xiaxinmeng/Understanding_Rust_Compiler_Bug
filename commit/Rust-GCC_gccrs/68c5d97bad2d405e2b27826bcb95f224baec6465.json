{"sha": "68c5d97bad2d405e2b27826bcb95f224baec6465", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhjNWQ5N2JhZDJkNDA1ZTJiMjc4MjZiY2I5NWYyMjRiYWVjNjQ2NQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2012-03-09T08:25:05Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-03-09T08:25:05Z"}, "message": "compiler: Be more careful to follow GENERIC type rules.\n\n\t* go-gcc.cc (Gcc_backend::assignment_statement): Convert the rhs\n\tto the lhs type if necessary.\n\nFrom-SVN: r185128", "tree": {"sha": "bd0a2765d69acdf83a414c1a6f425dc3adc2543d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd0a2765d69acdf83a414c1a6f425dc3adc2543d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68c5d97bad2d405e2b27826bcb95f224baec6465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c5d97bad2d405e2b27826bcb95f224baec6465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c5d97bad2d405e2b27826bcb95f224baec6465", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c5d97bad2d405e2b27826bcb95f224baec6465/comments", "author": null, "committer": null, "parents": [{"sha": "762c279900efedc1407c3c38d98601ddbff575ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762c279900efedc1407c3c38d98601ddbff575ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/762c279900efedc1407c3c38d98601ddbff575ae"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "f779e9b89cf3934f1bd9622f9f67603837824aa3", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c5d97bad2d405e2b27826bcb95f224baec6465/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c5d97bad2d405e2b27826bcb95f224baec6465/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=68c5d97bad2d405e2b27826bcb95f224baec6465", "patch": "@@ -1,3 +1,8 @@\n+2012-03-09  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-gcc.cc (Gcc_backend::assignment_statement): Convert the rhs\n+\tto the lhs type if necessary.\n+\n 2012-03-08  Ian Lance Taylor  <iant@google.com>\n \n \t* go-gcc.cc (Gcc_backend::init_statement): Don't initialize a"}, {"sha": "96c171835c420e4efc55412fec087f9ab9dfddc7", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c5d97bad2d405e2b27826bcb95f224baec6465/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c5d97bad2d405e2b27826bcb95f224baec6465/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=68c5d97bad2d405e2b27826bcb95f224baec6465", "patch": "@@ -918,6 +918,30 @@ Gcc_backend::assignment_statement(Bexpression* lhs, Bexpression* rhs,\n     return this->compound_statement(this->expression_statement(lhs),\n \t\t\t\t    this->expression_statement(rhs));\n \n+  // Sometimes the same unnamed Go type can be created multiple times\n+  // and thus have multiple tree representations.  Make sure this does\n+  // not confuse the middle-end.\n+  if (TREE_TYPE(lhs_tree) != TREE_TYPE(rhs_tree))\n+    {\n+      tree lhs_type_tree = TREE_TYPE(lhs_tree);\n+      gcc_assert(TREE_CODE(lhs_type_tree) == TREE_CODE(TREE_TYPE(rhs_tree)));\n+      if (POINTER_TYPE_P(lhs_type_tree)\n+\t  || INTEGRAL_TYPE_P(lhs_type_tree)\n+\t  || SCALAR_FLOAT_TYPE_P(lhs_type_tree)\n+\t  || COMPLEX_FLOAT_TYPE_P(lhs_type_tree))\n+\trhs_tree = fold_convert_loc(location.gcc_location(), lhs_type_tree,\n+\t\t\t\t    rhs_tree);\n+      else if (TREE_CODE(lhs_type_tree) == RECORD_TYPE\n+\t       || TREE_CODE(lhs_type_tree) == ARRAY_TYPE)\n+\t{\n+\t  gcc_assert(int_size_in_bytes(lhs_type_tree)\n+\t\t     == int_size_in_bytes(TREE_TYPE(rhs_tree)));\n+\t  rhs_tree = fold_build1_loc(location.gcc_location(),\n+\t\t\t\t     VIEW_CONVERT_EXPR,\n+\t\t\t\t     lhs_type_tree, rhs_tree);\n+\t}\n+    }\n+\n   return this->make_statement(fold_build2_loc(location.gcc_location(),\n                                               MODIFY_EXPR,\n \t\t\t\t\t      void_type_node,"}, {"sha": "90cf6f32dab1eca9466526f90b5a4f0ed9f8ae0b", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68c5d97bad2d405e2b27826bcb95f224baec6465/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68c5d97bad2d405e2b27826bcb95f224baec6465/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=68c5d97bad2d405e2b27826bcb95f224baec6465", "patch": "@@ -205,9 +205,6 @@ Expression::convert_for_assignment(Translate_context* context, Type* lhs_type,\n \t\t\t\t   Type* rhs_type, tree rhs_tree,\n \t\t\t\t   Location location)\n {\n-  if (lhs_type == rhs_type)\n-    return rhs_tree;\n-\n   if (lhs_type->is_error() || rhs_type->is_error())\n     return error_mark_node;\n \n@@ -220,7 +217,7 @@ Expression::convert_for_assignment(Translate_context* context, Type* lhs_type,\n   if (lhs_type_tree == error_mark_node)\n     return error_mark_node;\n \n-  if (lhs_type->interface_type() != NULL)\n+  if (lhs_type != rhs_type && lhs_type->interface_type() != NULL)\n     {\n       if (rhs_type->interface_type() == NULL)\n \treturn Expression::convert_type_to_interface(context, lhs_type,\n@@ -231,7 +228,7 @@ Expression::convert_for_assignment(Translate_context* context, Type* lhs_type,\n \t\t\t\t\t\t\t  rhs_type, rhs_tree,\n \t\t\t\t\t\t\t  false, location);\n     }\n-  else if (rhs_type->interface_type() != NULL)\n+  else if (lhs_type != rhs_type && rhs_type->interface_type() != NULL)\n     return Expression::convert_interface_to_type(context, lhs_type, rhs_type,\n \t\t\t\t\t\t rhs_tree, location);\n   else if (lhs_type->is_slice_type() && rhs_type->is_nil_type())\n@@ -289,10 +286,16 @@ Expression::convert_for_assignment(Translate_context* context, Type* lhs_type,\n \t   || (TREE_CODE(lhs_type_tree) == ARRAY_TYPE\n \t       && TREE_CODE(TREE_TYPE(rhs_tree)) == ARRAY_TYPE))\n     {\n+      // Avoid confusion from zero sized variables which may be\n+      // represented as non-zero-sized.\n+      if (int_size_in_bytes(lhs_type_tree) == 0\n+\t  || int_size_in_bytes(TREE_TYPE(rhs_tree)) == 0)\n+\treturn rhs_tree;\n+\n       // This conversion must be permitted by Go, or we wouldn't have\n       // gotten here.\n       go_assert(int_size_in_bytes(lhs_type_tree)\n-\t\t == int_size_in_bytes(TREE_TYPE(rhs_tree)));\n+\t\t== int_size_in_bytes(TREE_TYPE(rhs_tree)));\n       return fold_build1_loc(location.gcc_location(), VIEW_CONVERT_EXPR,\n                              lhs_type_tree, rhs_tree);\n     }"}]}