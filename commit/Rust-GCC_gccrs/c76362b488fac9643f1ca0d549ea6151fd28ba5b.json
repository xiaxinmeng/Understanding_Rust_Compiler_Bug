{"sha": "c76362b488fac9643f1ca0d549ea6151fd28ba5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc2MzYyYjQ4OGZhYzk2NDNmMWNhMGQ1NDllYTYxNTFmZDI4YmE1Yg==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2004-02-09T21:18:45Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2004-02-09T21:18:45Z"}, "message": "re PR libstdc++/5625 ([mips] exception unwinding creates invalid pointer on mips)\n\nPR libstdc++/5625\n* builtin-types.def (BT_WORD, BT_FN_WORD_PTR): New.\n* builtins.c (expand_builtin): Handle BUILT_IN_EXTEND_POINTER.\n* builtins.def (BUILT_IN_EXTEND_POINTER): New.\n* except.c (expand_builtin_extend_pointer): New.\n* except.h (expand_builtin_extend_pointer): Declare.\n\nFrom-SVN: r77554", "tree": {"sha": "7bf9232584860975a8b2d86f90808c9c7d818aa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bf9232584860975a8b2d86f90808c9c7d818aa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c76362b488fac9643f1ca0d549ea6151fd28ba5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c76362b488fac9643f1ca0d549ea6151fd28ba5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c76362b488fac9643f1ca0d549ea6151fd28ba5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c76362b488fac9643f1ca0d549ea6151fd28ba5b/comments", "author": null, "committer": null, "parents": [{"sha": "d886a0416470d04610d04f4af3b401532ea9cd4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d886a0416470d04610d04f4af3b401532ea9cd4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d886a0416470d04610d04f4af3b401532ea9cd4f"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "6ba6220195b5e6cb8e98164df6ef7ff68168d433", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76362b488fac9643f1ca0d549ea6151fd28ba5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76362b488fac9643f1ca0d549ea6151fd28ba5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c76362b488fac9643f1ca0d549ea6151fd28ba5b", "patch": "@@ -1,3 +1,12 @@\n+2004-02-09  James E Wilson  <wilson@specifixinc.com>\n+\n+\tPR libstdc++/5625\n+\t* builtin-types.def (BT_WORD, BT_FN_WORD_PTR): New.\n+\t* builtins.c (expand_builtin): Handle BUILT_IN_EXTEND_POINTER.\n+\t* builtins.def (BUILT_IN_EXTEND_POINTER): New.\n+\t* except.c (expand_builtin_extend_pointer): New.\n+\t* except.h (expand_builtin_extend_pointer): Declare.\n+\n 2004-02-09  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (rs6000_emit_move): Remove splitting slow"}, {"sha": "bf236cf0d23e0da3403847493c4566813caebe90", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76362b488fac9643f1ca0d549ea6151fd28ba5b/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76362b488fac9643f1ca0d549ea6151fd28ba5b/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=c76362b488fac9643f1ca0d549ea6151fd28ba5b", "patch": "@@ -64,6 +64,7 @@ DEF_PRIMITIVE_TYPE (BT_INT, integer_type_node)\n DEF_PRIMITIVE_TYPE (BT_UNSIGNED, unsigned_type_node)\n DEF_PRIMITIVE_TYPE (BT_LONG, long_integer_type_node)\n DEF_PRIMITIVE_TYPE (BT_LONGLONG, long_long_integer_type_node)\n+DEF_PRIMITIVE_TYPE (BT_WORD, (*lang_hooks.types.type_for_mode) (word_mode, 0))\n DEF_PRIMITIVE_TYPE (BT_FLOAT, float_type_node)\n DEF_PRIMITIVE_TYPE (BT_INTMAX, intmax_type_node)\n DEF_PRIMITIVE_TYPE (BT_DOUBLE, double_type_node)\n@@ -142,6 +143,7 @@ DEF_FUNCTION_TYPE_1 (BT_FN_DOUBLE_CONST_STRING, BT_DOUBLE, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_LONGDOUBLE_CONST_STRING,\n \t\t     BT_LONGDOUBLE, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_1 (BT_FN_STRING_CONST_STRING, BT_STRING, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_1 (BT_FN_WORD_PTR, BT_WORD, BT_PTR)\n \n DEF_FUNCTION_TYPE_2 (BT_FN_VOID_PTR_INT, BT_VOID, BT_PTR, BT_INT)\n DEF_FUNCTION_TYPE_2 (BT_FN_STRING_STRING_CONST_STRING, "}, {"sha": "2fdc370fc0f5b984f277b3ffc1a8bbb216583974", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76362b488fac9643f1ca0d549ea6151fd28ba5b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76362b488fac9643f1ca0d549ea6151fd28ba5b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c76362b488fac9643f1ca0d549ea6151fd28ba5b", "patch": "@@ -5539,6 +5539,9 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_EH_RETURN_DATA_REGNO:\n       return expand_builtin_eh_return_data_regno (arglist);\n #endif\n+    case BUILT_IN_EXTEND_POINTER:\n+      return expand_builtin_extend_pointer (TREE_VALUE (arglist));\n+\n     case BUILT_IN_VA_START:\n     case BUILT_IN_STDARG_START:\n       return expand_builtin_va_start (arglist);"}, {"sha": "d8c772fc0761c7de6d12dcff2a35dd289b8f7c66", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76362b488fac9643f1ca0d549ea6151fd28ba5b/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76362b488fac9643f1ca0d549ea6151fd28ba5b/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=c76362b488fac9643f1ca0d549ea6151fd28ba5b", "patch": "@@ -516,6 +516,7 @@ DEF_GCC_BUILTIN        (BUILT_IN_EH_RETURN, \"eh_return\", BT_FN_VOID_PTRMODE_PTR,\n DEF_GCC_BUILTIN        (BUILT_IN_EH_RETURN_DATA_REGNO, \"eh_return_data_regno\", BT_FN_INT_INT, ATTR_NULL)\n DEF_LIB_BUILTIN        (BUILT_IN_EXIT, \"exit\", BT_FN_VOID_INT, ATTR_NORETURN_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_EXPECT, \"expect\", BT_FN_LONG_LONG_LONG, ATTR_NULL)\n+DEF_GCC_BUILTIN        (BUILT_IN_EXTEND_POINTER, \"extend_pointer\", BT_FN_WORD_PTR, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_EXTRACT_RETURN_ADDR, \"extract_return_addr\", BT_FN_PTR_PTR, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_FRAME_ADDRESS, \"frame_address\", BT_FN_PTR_UNSIGNED, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_FROB_RETURN_ADDR, \"frob_return_addr\", BT_FN_PTR_PTR, ATTR_NULL)"}, {"sha": "5d85e512358c22eb022ef17ab914ba49ac986e11", "filename": "gcc/except.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76362b488fac9643f1ca0d549ea6151fd28ba5b/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76362b488fac9643f1ca0d549ea6151fd28ba5b/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=c76362b488fac9643f1ca0d549ea6151fd28ba5b", "patch": "@@ -3076,6 +3076,26 @@ expand_eh_return (void)\n \n   emit_label (around_label);\n }\n+\n+/* Convert a ptr_mode address ADDR_TREE to a Pmode address controlled by\n+   POINTERS_EXTEND_UNSIGNED and return it.  */\n+\n+rtx\n+expand_builtin_extend_pointer (tree addr_tree)\n+{\n+  rtx addr = expand_expr (addr_tree, NULL_RTX, ptr_mode, 0);\n+  int extend;\n+\n+#ifdef POINTERS_EXTEND_UNSIGNED\n+  extend = POINTERS_EXTEND_UNSIGNED;\n+#else\n+  /* The previous EH code did an unsigned extend by default, so we do this also\n+     for consistency.  */\n+  extend = 1;\n+#endif\n+\n+  return convert_modes (word_mode, ptr_mode, addr, extend);\n+}\n \f\n /* In the following functions, we represent entries in the action table\n    as 1-based indices.  Special cases are:"}, {"sha": "5093a65059a8fbd1316886a8c563c3911089ddab", "filename": "gcc/except.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76362b488fac9643f1ca0d549ea6151fd28ba5b/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76362b488fac9643f1ca0d549ea6151fd28ba5b/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=c76362b488fac9643f1ca0d549ea6151fd28ba5b", "patch": "@@ -117,6 +117,7 @@ extern rtx expand_builtin_frob_return_addr (tree);\n extern rtx expand_builtin_dwarf_sp_column (void);\n extern void expand_builtin_eh_return (tree, tree);\n extern void expand_eh_return (void);\n+extern rtx expand_builtin_extend_pointer (tree);\n extern rtx get_exception_pointer (struct function *);\n extern int duplicate_eh_regions (struct function *, struct inline_remap *);\n "}]}