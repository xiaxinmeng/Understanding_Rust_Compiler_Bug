{"sha": "eb581af430ff929eb43e2fbf871e9a92e25780c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI1ODFhZjQzMGZmOTI5ZWI0M2UyZmJmODcxZTlhOTJlMjU3ODBjNQ==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2018-03-29T00:06:31Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@gcc.gnu.org", "date": "2018-03-29T00:06:31Z"}, "message": "re PR target/84912 (__builtin_divde* produce Internal Compiler Error when compiled -m32)\n\n\tPR target/84912\n\t* config/rs6000/rs6000.h (RS6000_BTM_POWERPC64): New define.\n\t(RS6000_BTM_COMMON): Add RS6000_BTM_POWERPC64.\n\t* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Add support\n\tfor RS6000_BTM_POWERPC64.\n\t(rs6000_invalid_builtin): Add handling for RS6000_BTM_POWERPC64\n\t(rs6000_builtin_mask_names): Add RS6000_BTM_POWERPC64.\n\t* config/rs6000/rs6000-builtin.def (BU_P7_POWERPC64_MISC_2): New macro\n\tdefinition.\n\t(DIVDE): Use it.\n\t(DIVDEU): Likewise.\n\nFrom-SVN: r258943", "tree": {"sha": "22a74be11bfec563f65594b6d47ed41ae6db92c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22a74be11bfec563f65594b6d47ed41ae6db92c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb581af430ff929eb43e2fbf871e9a92e25780c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb581af430ff929eb43e2fbf871e9a92e25780c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb581af430ff929eb43e2fbf871e9a92e25780c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb581af430ff929eb43e2fbf871e9a92e25780c5/comments", "author": null, "committer": null, "parents": [{"sha": "604e36ed96b2136fc24edecf675235c39fcfd6de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604e36ed96b2136fc24edecf675235c39fcfd6de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604e36ed96b2136fc24edecf675235c39fcfd6de"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "828916d1cf881e88e2d2066d1fb0448211504726", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb581af430ff929eb43e2fbf871e9a92e25780c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb581af430ff929eb43e2fbf871e9a92e25780c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb581af430ff929eb43e2fbf871e9a92e25780c5", "patch": "@@ -1,4 +1,18 @@\n-2018-03-20 Carl Love  <cel@us.ibm.com>\n+2018-03-28  Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/84912\n+\t* config/rs6000/rs6000.h (RS6000_BTM_POWERPC64): New define.\n+\t(RS6000_BTM_COMMON): Add RS6000_BTM_POWERPC64.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_mask_calculate): Add support\n+\tfor RS6000_BTM_POWERPC64.\n+\t(rs6000_invalid_builtin): Add handling for RS6000_BTM_POWERPC64\n+\t(rs6000_builtin_mask_names): Add RS6000_BTM_POWERPC64.\n+\t* config/rs6000/rs6000-builtin.def (BU_P7_POWERPC64_MISC_2): New macro\n+\tdefinition.\n+\t(DIVDE): Use it.\n+\t(DIVDEU): Likewise.\n+\n+2018-03-28 Carl Love  <cel@us.ibm.com>\n \n \tRevert\n \t2017-09-27  Carl Love  <cel@us.ibm.com>"}, {"sha": "37f170d233f77e7d663613dc874582db2170c863", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb581af430ff929eb43e2fbf871e9a92e25780c5/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb581af430ff929eb43e2fbf871e9a92e25780c5/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=eb581af430ff929eb43e2fbf871e9a92e25780c5", "patch": "@@ -635,6 +635,15 @@\n \t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n \t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n \n+#define BU_P7_POWERPC64_MISC_2(ENUM, NAME, ATTR, ICODE)\t\t\t\\\n+  RS6000_BUILTIN_2 (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n+\t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n+\t\t    RS6000_BTM_POPCNTD\t\t\t\t\t\\\n+\t\t    | RS6000_BTM_POWERPC64,\t\t/* MASK */\t\\\n+\t\t    (RS6000_BTC_ ## ATTR\t\t/* ATTR */\t\\\n+\t\t     | RS6000_BTC_BINARY),\t\t\t\t\\\n+\t\t    CODE_FOR_ ## ICODE)\t\t\t/* ICODE */\n+\n #define BU_P7_MISC_X(ENUM, NAME, ATTR)\t\t\t\t\t\\\n   RS6000_BUILTIN_X (MISC_BUILTIN_ ## ENUM,\t\t/* ENUM */\t\\\n \t\t    \"__builtin_\" NAME,\t\t\t/* NAME */\t\\\n@@ -2297,8 +2306,8 @@ BU_P9V_OVERLOAD_1 (VCTZLSBB,\t\"vctzlsbb\")\n /* 2 argument extended divide functions added in ISA 2.06.  */\n BU_P7_MISC_2 (DIVWE,\t\t\"divwe\",\tCONST,\tdive_si)\n BU_P7_MISC_2 (DIVWEU,\t\t\"divweu\",\tCONST,\tdiveu_si)\n-BU_P7_MISC_2 (DIVDE,\t\t\"divde\",\tCONST,\tdive_di)\n-BU_P7_MISC_2 (DIVDEU,\t\t\"divdeu\",\tCONST,\tdiveu_di)\n+BU_P7_POWERPC64_MISC_2 (DIVDE,\t\"divde\",\tCONST,\tdive_di)\n+BU_P7_POWERPC64_MISC_2 (DIVDEU,\t\"divdeu\",\tCONST,\tdiveu_di)\n \n /* 1 argument DFP (decimal floating point) functions added in ISA 2.05.  */\n BU_DFP_MISC_1 (DXEX,\t\t\"dxex\",\t\tCONST,\tdfp_dxex_dd)"}, {"sha": "49ce4edebc301d01f0aec4ec9f4124250128a486", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb581af430ff929eb43e2fbf871e9a92e25780c5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb581af430ff929eb43e2fbf871e9a92e25780c5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=eb581af430ff929eb43e2fbf871e9a92e25780c5", "patch": "@@ -3916,6 +3916,7 @@ rs6000_builtin_mask_calculate (void)\n \t  | ((TARGET_P9_MISC)\t\t    ? RS6000_BTM_P9_MISC   : 0)\n \t  | ((TARGET_MODULO)\t\t    ? RS6000_BTM_MODULO    : 0)\n \t  | ((TARGET_64BIT)\t\t    ? RS6000_BTM_64BIT     : 0)\n+\t  | ((TARGET_POWERPC64)\t\t    ? RS6000_BTM_POWERPC64 : 0)\n \t  | ((TARGET_CRYPTO)\t\t    ? RS6000_BTM_CRYPTO\t   : 0)\n \t  | ((TARGET_HTM)\t\t    ? RS6000_BTM_HTM\t   : 0)\n \t  | ((TARGET_DFP)\t\t    ? RS6000_BTM_DFP\t   : 0)\n@@ -15952,6 +15953,11 @@ rs6000_invalid_builtin (enum rs6000_builtins fncode)\n \t   name);\n   else if ((fnmask & RS6000_BTM_FLOAT128) != 0)\n     error (\"builtin function %qs requires the %qs option\", name, \"-mfloat128\");\n+  else if ((fnmask & (RS6000_BTM_POPCNTD | RS6000_BTM_POWERPC64))\n+\t   == (RS6000_BTM_POPCNTD | RS6000_BTM_POWERPC64))\n+    error (\"builtin function %qs requires the %qs (or newer), and \"\n+\t   \"%qs or %qs options\",\n+\t   name, \"-mcpu=power7\", \"-m64\", \"-mpowerpc64\");\n   else\n     error (\"builtin function %qs is not supported with the current options\",\n \t   name);\n@@ -36653,6 +36659,7 @@ static struct rs6000_opt_mask const rs6000_builtin_mask_names[] =\n   { \"hard-dfp\",\t\t RS6000_BTM_DFP,\tfalse, false },\n   { \"hard-float\",\t RS6000_BTM_HARD_FLOAT,\tfalse, false },\n   { \"long-double-128\",\t RS6000_BTM_LDBL128,\tfalse, false },\n+  { \"powerpc64\",\t RS6000_BTM_POWERPC64,  false, false },\n   { \"float128\",\t\t RS6000_BTM_FLOAT128,   false, false },\n   { \"float128-hw\",\t RS6000_BTM_FLOAT128_HW,false, false },\n };"}, {"sha": "d93ba5d8e2c3d1c8efc1b37ebe33e5bd65f5d87f", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb581af430ff929eb43e2fbf871e9a92e25780c5/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb581af430ff929eb43e2fbf871e9a92e25780c5/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=eb581af430ff929eb43e2fbf871e9a92e25780c5", "patch": "@@ -2506,6 +2506,7 @@ extern int frame_pointer_needed;\n #define RS6000_BTM_HARD_FLOAT\tMASK_SOFT_FLOAT\t/* Hardware floating point.  */\n #define RS6000_BTM_LDBL128\tMASK_MULTIPLE\t/* 128-bit long double.  */\n #define RS6000_BTM_64BIT\tMASK_64BIT\t/* 64-bit addressing.  */\n+#define RS6000_BTM_POWERPC64\tMASK_POWERPC64\t/* 64-bit registers.  */\n #define RS6000_BTM_FLOAT128\tMASK_FLOAT128_KEYWORD /* IEEE 128-bit float.  */\n #define RS6000_BTM_FLOAT128_HW\tMASK_FLOAT128_HW /* IEEE 128-bit float h/w.  */\n \n@@ -2526,6 +2527,7 @@ extern int frame_pointer_needed;\n \t\t\t\t | RS6000_BTM_DFP\t\t\t\\\n \t\t\t\t | RS6000_BTM_HARD_FLOAT\t\t\\\n \t\t\t\t | RS6000_BTM_LDBL128\t\t\t\\\n+\t\t\t\t | RS6000_BTM_POWERPC64\t\t\t\\\n \t\t\t\t | RS6000_BTM_FLOAT128\t\t\t\\\n \t\t\t\t | RS6000_BTM_FLOAT128_HW)\n "}]}