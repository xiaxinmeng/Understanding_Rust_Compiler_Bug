{"sha": "05f23918fa15005e945818fdfb9f602353193871", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVmMjM5MThmYTE1MDA1ZTk0NTgxOGZkZmI5ZjYwMjM1MzE5Mzg3MQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2015-03-20T17:43:48Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2015-03-20T17:43:48Z"}, "message": "re PR rtl-optimization/64366 (Segmentation fault in remove_pseudos)\n\n2015-03-20  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/64366\n\t* lra.c (lra_update_insn_regno_info): Consider regs in\n\tCALL_INSN_FUNCTION_USAGE memory.\n\n2015-03-20  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/64366\n\t* gcc.target/sh/pr64366.c: New.\n\nFrom-SVN: r221541", "tree": {"sha": "c2a933c296dcdeac6a15c8a08b09cb1030a56ed8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2a933c296dcdeac6a15c8a08b09cb1030a56ed8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05f23918fa15005e945818fdfb9f602353193871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f23918fa15005e945818fdfb9f602353193871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05f23918fa15005e945818fdfb9f602353193871", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f23918fa15005e945818fdfb9f602353193871/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e251e8157e03185147aae03265bae837a54042a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e251e8157e03185147aae03265bae837a54042a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e251e8157e03185147aae03265bae837a54042a5"}], "stats": {"total": 154, "additions": 153, "deletions": 1}, "files": [{"sha": "e15dfc83b8e412ac01cb944e145b72ecb2cdaa56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f23918fa15005e945818fdfb9f602353193871/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f23918fa15005e945818fdfb9f602353193871/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05f23918fa15005e945818fdfb9f602353193871", "patch": "@@ -1,3 +1,9 @@\n+2015-03-20  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/64366\n+\t* lra.c (lra_update_insn_regno_info): Consider regs in\n+\tCALL_INSN_FUNCTION_USAGE memory.\n+\n 2015-03-20  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/64715"}, {"sha": "269a0f14f74737aa14d4b6e5cf334de28c60261b", "filename": "gcc/lra.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f23918fa15005e945818fdfb9f602353193871/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f23918fa15005e945818fdfb9f602353193871/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=05f23918fa15005e945818fdfb9f602353193871", "patch": "@@ -1633,7 +1633,8 @@ lra_update_insn_regno_info (rtx_insn *insn)\n   lra_insn_recog_data_t data;\n   struct lra_static_insn_data *static_data;\n   enum rtx_code code;\n-\n+  rtx link;\n+  \n   if (! INSN_P (insn))\n     return;\n   data = lra_get_insn_recog_data (insn);\n@@ -1648,6 +1649,18 @@ lra_update_insn_regno_info (rtx_insn *insn)\n   if ((code = GET_CODE (PATTERN (insn))) == CLOBBER || code == USE)\n     add_regs_to_insn_regno_info (data, XEXP (PATTERN (insn), 0), uid,\n \t\t\t\t code == USE ? OP_IN : OP_OUT, false);\n+  if (CALL_P (insn))\n+    /* On some targets call insns can refer to pseudos in memory in\n+       CALL_INSN_FUNCTION_USAGE list.  Process them in order to\n+       consider their occurrences in calls for different\n+       transformations (e.g. inheritance) with given pseudos.  */\n+    for (link = CALL_INSN_FUNCTION_USAGE (insn);\n+\t link != NULL_RTX;\n+\t link = XEXP (link, 1))\n+      if (((code = GET_CODE (XEXP (link, 0))) == USE || code == CLOBBER)\n+\t  && MEM_P (XEXP (XEXP (link, 0), 0)))\n+\tadd_regs_to_insn_regno_info (data, XEXP (XEXP (link, 0), 0), uid,\n+\t\t\t\t     code == USE ? OP_IN : OP_OUT, false);\n   if (NONDEBUG_INSN_P (insn))\n     setup_insn_reg_info (data, freq);\n }"}, {"sha": "ff3c3836c0e693c2f04e2627a6b4b3e298aab079", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f23918fa15005e945818fdfb9f602353193871/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f23918fa15005e945818fdfb9f602353193871/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05f23918fa15005e945818fdfb9f602353193871", "patch": "@@ -1,3 +1,8 @@\n+2015-03-20  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/64366\n+\t* gcc.target/sh/pr64366.c: New.\n+\n 2015-03-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/48324"}, {"sha": "bff4b990b6abd3a70c11f2feac7dcc21ce5e7480", "filename": "gcc/testsuite/gcc.target/sh/pr64366.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f23918fa15005e945818fdfb9f602353193871/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64366.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f23918fa15005e945818fdfb9f602353193871/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64366.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr64366.c?ref=05f23918fa15005e945818fdfb9f602353193871", "patch": "@@ -0,0 +1,128 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -m4 -ml -mlra\" } */\n+\n+typedef int int8_t __attribute__ ((__mode__ (__QI__)));\n+typedef int int16_t __attribute__ ((__mode__ (__HI__)));\n+typedef int int32_t __attribute__ ((__mode__ (__SI__)));\n+typedef int int64_t __attribute__ ((__mode__ (__DI__)));\n+typedef unsigned char uint8_t;\n+typedef unsigned short int uint16_t;\n+typedef unsigned int uint32_t;\n+__extension__ typedef unsigned long long int uint64_t;\n+typedef int intptr_t;\n+typedef struct BigStruct{\n+  uint8_t a;\n+  int8_t b;\n+  uint16_t c;\n+  int16_t d;\n+  uint32_t e;\n+  int32_t f;\n+  uint64_t g;\n+  int64_t h;\n+  float i;\n+  double j;\n+  long double k;\n+  char* l;\n+  uint8_t m;\n+  int8_t n;\n+  uint16_t o;\n+  int16_t p;\n+  uint32_t q;\n+  int32_t r;\n+  uint64_t s;\n+  int64_t t;\n+  float u;\n+  double v;\n+  long double w;\n+  char* x;\n+  uint8_t y;\n+  int8_t z;\n+  uint16_t aa;\n+  int16_t bb;\n+  uint32_t cc;\n+  int32_t dd;\n+  uint64_t ee;\n+  int64_t ff;\n+  float gg;\n+  double hh;\n+  long double ii;\n+  char* jj;\n+  uint8_t kk;\n+  int8_t ll;\n+  uint16_t mm;\n+  int16_t nn;\n+  uint32_t oo;\n+  int32_t pp;\n+  uint64_t qq;\n+  int64_t rr;\n+  float ss;\n+  double tt;\n+  long double uu;\n+  char* vv;\n+  uint8_t ww;\n+  int8_t xx;\n+}  BigStruct;\n+\n+extern void foobar();\n+\n+void\n+test_large_fn (uint8_t ui8_1, int8_t si8_1, uint16_t ui16_1, int16_t si16_1,\n+\t       uint32_t ui32_1, int32_t si32_1, uint64_t ui64_1, int64_t si64_1,\n+\t       float f_1, double d_1, long double ld_1, char* p_1,\n+\t       uint8_t ui8_2, int8_t si8_2, uint16_t ui16_2, int16_t si16_2,\n+\t       uint32_t ui32_2, int32_t si32_2, uint64_t ui64_2, int64_t si64_2,\n+\t       float f_2, double d_2, long double ld_2, char* p_2,\n+\t       uint8_t ui8_3, int8_t si8_3, uint16_t ui16_3, int16_t si16_3,\n+\t       uint32_t ui32_3, int32_t si32_3, uint64_t ui64_3, int64_t si64_3,\n+\t       float f_3, double d_3, long double ld_3, char* p_3,\n+\t       uint8_t ui8_4, int8_t si8_4, uint16_t ui16_4, int16_t si16_4,\n+\t       uint32_t ui32_4, int32_t si32_4, uint64_t ui64_4, int64_t si64_4,\n+\t       float f_4, double d_4, long double ld_4, char* p_4,\n+\t       uint8_t ui8_5, int8_t si8_5)\n+{\n+    BigStruct retVal =\n+      {\n+\tui8_1 + 1, si8_1 + 1, ui16_1 + 1, si16_1 + 1,\n+\tui32_1 + 1, si32_1 + 1, ui64_1 + 1, si64_1 + 1,\n+\tf_1 + 1, d_1 + 1, ld_1 + 1, (char*)((intptr_t)p_1 + 1),\n+\tui8_2 + 2, si8_2 + 2, ui16_2 + 2, si16_2 + 2,\n+\tui32_2 + 2, si32_2 + 2, ui64_2 + 2, si64_2 + 2,\n+\tf_2 + 2, d_2 + 2, ld_2 + 2, (char*)((intptr_t)p_2 + 2),\n+\tui8_3 + 3, si8_3 + 3, ui16_3 + 3, si16_3 + 3,\n+\tui32_3 + 3, si32_3 + 3, ui64_3 + 3, si64_3 + 3,\n+\tf_3 + 3, d_3 + 3, ld_3 + 3, (char*)((intptr_t)p_3 + 3),\n+\tui8_4 + 4, si8_4 + 4, ui16_4 + 4, si16_4 + 4,\n+\tui32_4 + 4, si32_4 + 4, ui64_4 + 4, si64_4 + 4,\n+\tf_4 + 4, d_4 + 4, ld_4 + 4, (char*)((intptr_t)p_4 + 4),\n+\tui8_5 + 5, si8_5 + 5\n+      };\n+\n+    foobar (\"%\" \"u\" \" %\" \"d\" \" %hu %hd %u %d %\" \"ll\" \"u\" \" %\" \"ll\" \"d\"\n+\t      \" %.0f %.0f %.0Lf %#lx \" \"%\" \"u\" \" %\" \"d\" \" %hu %hd %u %d %\"\n+\t      \"ll\" \"u\" \" %\" \"ll\" \"d\" \" %.0f %.0f %.0Lf %#lx \" \"%\" \"u\"\n+\t      \" %\" \"d\" \" %hu %hd %u %d %\" \"ll\" \"u\" \" %\" \"ll\" \"d\"\n+\t      \" %.0f %.0f %.0Lf %#lx \" \"%\" \"u\" \" %\" \"d\" \" %hu %hd %u %d %\"\n+\t      \"ll\" \"u\" \" %\" \"ll\" \"d\" \" %.0f %.0f %.0Lf %#lx %\" \"u\" \" %\"\n+\t      \"d\" \": \" \"%\" \"u\" \" %\" \"d\" \" %hu %hd %u %d %\" \"ll\" \"u\" \" %\"\n+\t      \"ll\" \"d\" \" %.0f %.0f %.0Lf %#lx \" \"%\" \"u\" \" %\" \"d\"\n+\t      \" %hu %hd %u %d %\" \"ll\" \"u\" \" %\" \"ll\" \"d\" \" %.0f %.0f %.0Lf %#lx \"\n+\t      \"%\" \"u\" \" %\" \"d\" \" %hu %hd %u %d %\" \"ll\" \"u\" \" %\" \"ll\" \"d\"\n+\t      \" %.0f %.0f %.0Lf %#lx \" \"%\" \"u\" \" %\" \"d\" \" %hu %hd %u %d %\"\n+\t    \"ll\" \"u\" \" %\" \"ll\" \"d\" \" %.0f %.0f %.0Lf %#lx %\" \"u\" \" %\" \"d\" \"\\n\",\n+\t    ui8_1, si8_1, ui16_1, si16_1, ui32_1, si32_1, ui64_1, si64_1,\n+\t    f_1, d_1, ld_1, (unsigned long)p_1, ui8_2, si8_2, ui16_2, si16_2,\n+\t    ui32_2, si32_2, ui64_2, si64_2, f_2, d_2, ld_2, (unsigned long)p_2,\n+\t    ui8_3, si8_3, ui16_3, si16_3, ui32_3, si32_3, ui64_3, si64_3, f_3,\n+\t    d_3, ld_3, (unsigned long)p_3, ui8_4, si8_4, ui16_4, si16_4, ui32_4,\n+\t    si32_4, ui64_4, si64_4, f_4, d_4, ld_4, (unsigned long)p_4, ui8_5,\n+\t    si8_5, retVal.a, retVal.b, retVal.c, retVal.d, retVal.e, retVal.f,\n+\t    retVal.g, retVal.h, retVal.i, retVal.j, retVal.k,\n+\t    (unsigned long)retVal.l, retVal.m, retVal.n, retVal.o, retVal.p,\n+\t    retVal.q, retVal.r, retVal.s, retVal.t, retVal.u, retVal.v,\n+\t    retVal.w, (unsigned long)retVal.x, retVal.y, retVal.z, retVal.aa,\n+\t    retVal.bb, retVal.cc, retVal.dd, retVal.ee, retVal.ff, retVal.gg,\n+\t    retVal.hh, retVal.ii, (unsigned long)retVal.jj, retVal.kk,\n+\t    retVal.ll, retVal.mm, retVal.nn, retVal.oo, retVal.pp, retVal.qq,\n+\t    retVal.rr, retVal.ss, retVal.tt, retVal.uu, (unsigned long)retVal.vv,\n+\t    retVal.ww, retVal.xx);\n+}"}]}