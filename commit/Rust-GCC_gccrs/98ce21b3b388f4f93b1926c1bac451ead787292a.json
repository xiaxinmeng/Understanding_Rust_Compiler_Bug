{"sha": "98ce21b3b388f4f93b1926c1bac451ead787292a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThjZTIxYjNiMzg4ZjRmOTNiMTkyNmMxYmFjNDUxZWFkNzg3MjkyYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-12-12T02:58:23Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-12-12T02:58:23Z"}, "message": "except.c (sjlj_find_directly_reachable_regions): Don't consider RNL_BLOCKED a directly reachable region.\n\n        * except.c (sjlj_find_directly_reachable_regions): Don't\n        consider RNL_BLOCKED a directly reachable region.\n        (sjlj_assign_call_site_values): Trust directly_reachable.\n        (sjlj_emit_dispatch_table): Likewise.\n\nFrom-SVN: r47915", "tree": {"sha": "4292226e086fb8d5382778d1c1ba94f359a5aa97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4292226e086fb8d5382778d1c1ba94f359a5aa97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98ce21b3b388f4f93b1926c1bac451ead787292a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ce21b3b388f4f93b1926c1bac451ead787292a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ce21b3b388f4f93b1926c1bac451ead787292a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ce21b3b388f4f93b1926c1bac451ead787292a/comments", "author": null, "committer": null, "parents": [{"sha": "eb15deddff31c90b3bdab910bfd9330565087042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb15deddff31c90b3bdab910bfd9330565087042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb15deddff31c90b3bdab910bfd9330565087042"}], "stats": {"total": 93, "additions": 51, "deletions": 42}, "files": [{"sha": "95d55b1e84d94edea57decf0031dcd1e6005240a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 41, "deletions": 34, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ce21b3b388f4f93b1926c1bac451ead787292a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ce21b3b388f4f93b1926c1bac451ead787292a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98ce21b3b388f4f93b1926c1bac451ead787292a", "patch": "@@ -1,3 +1,10 @@\n+2001-12-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* except.c (sjlj_find_directly_reachable_regions): Don't\n+\tconsider RNL_BLOCKED a directly reachable region.\n+\t(sjlj_assign_call_site_values): Trust directly_reachable.\n+\t(sjlj_emit_dispatch_table): Likewise.\n+\n 2001-12-11  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.md (divmodsi_internal_er): Split, so that\n@@ -22,9 +29,9 @@\n \n 2001-12-11  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * output.h (regno_uninitialized): Make argument unsigned.\n+\t* output.h (regno_uninitialized): Make argument unsigned.\n \n-        * flow.c (regno_uninitialized): Make regno unsigned.\n+\t* flow.c (regno_uninitialized): Make regno unsigned.\n \n 2001-12-11  David O'Brien  <obrien@FreeBSD.org>\n \n@@ -69,8 +76,8 @@\n \n 2001-12-11  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * flow.c (find_regno_partial): Indent properly.  Add a default to\n-        switch.\n+\t* flow.c (find_regno_partial): Indent properly.  Add a default to\n+\tswitch.\n \n 2001-12-11  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n@@ -300,7 +307,7 @@ Sun Dec  9 18:40:07 2001  Douglas B. Rupp  <rupp@gnat.com>\n \t* ia64.md: Add missing braces.\n \t* rs6000-protos.h (s8bit_cint_operand): Prototype.\n \t* s390.h (INITIAL_ELIMINATION_OFFSET): Add abort clause in\n-        if-else statement.\n+\tif-else statement.\n \t* stormy16.h (REG_CLASS_CONTENTS): Add missing braces.\n \t* v850.h (OUTPUT_ADDR_CONST_EXTRA): Don't issue a `return'.\n \t* dbxout.c (dbxout_source_file): Move a variable into the scope\n@@ -336,17 +343,17 @@ Sun Dec  9 18:40:07 2001  Douglas B. Rupp  <rupp@gnat.com>\n 2001-10-08  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* c-common.h (rid): Add RID_CHOOSE_EXPR and\n-        RID_TYPES_COMPATIBLE_P.\n+\tRID_TYPES_COMPATIBLE_P.\n \n-        * c-parse.in (reswords): Add __builtin_choose_expr.\n-        Add __builtin_types_compatible_p.\n-        Add CHOOSE_EXPR token.\n+\t* c-parse.in (reswords): Add __builtin_choose_expr.\n+\tAdd __builtin_types_compatible_p.\n+\tAdd CHOOSE_EXPR token.\n \tAdd TYPES_COMPATIBLE_P token.\n-        Add production for CHOOSE_EXPR.\n-        Add production for TYPES_COMPATIBLE_P.\n+\tAdd production for CHOOSE_EXPR.\n+\tAdd production for TYPES_COMPATIBLE_P.\n \n-        * doc/extend.texi (__builtin_choose_expr): Add documentation.\n-        (__builtin_types_compatible_p): Likewise.\n+\t* doc/extend.texi (__builtin_choose_expr): Add documentation.\n+\t(__builtin_types_compatible_p): Likewise.\n \n 2001-12-08  David Edelsohn  <edelsohn@gnu.org>\n \n@@ -404,19 +411,19 @@ Sun Dec  9 18:40:07 2001  Douglas B. Rupp  <rupp@gnat.com>\n \n 2001-12-07  Dale Johannesen  <dalej@apple.com>\n \n-        * config/rs6000/darwin.h: Set MAX_LONG_TYPE_SIZE to 32.\n-        * config/rs6000/rs6000.c (rs6000_emit_move): In Darwin-\n-        specific codegen, eliminate a register copy.\n-        (print_operand_address): Add support for Darwin's lo16(constant)\n+\t* config/rs6000/darwin.h: Set MAX_LONG_TYPE_SIZE to 32.\n+\t* config/rs6000/rs6000.c (rs6000_emit_move): In Darwin-\n+\tspecific codegen, eliminate a register copy.\n+\t(print_operand_address): Add support for Darwin's lo16(constant)\n \tsyntax.\n-        (rs6000_machopic_legitimize_pic_address): Fix darwin-specific\n-        generation of addresses within very large data objects.\n-        (s8bit_cint_operand):  New.\n-        * config/rs6000/rs6000.md: Remove \"iu\" reference for 750/7400.\n-        Move \"mtjmpr\" to correct functional unit for 750/7400/7450.\n-        Add imul2 and imul3 insn types for multiplication by 16- and\n+\t(rs6000_machopic_legitimize_pic_address): Fix darwin-specific\n+\tgeneration of addresses within very large data objects.\n+\t(s8bit_cint_operand):  New.\n+\t* config/rs6000/rs6000.md: Remove \"iu\" reference for 750/7400.\n+\tMove \"mtjmpr\" to correct functional unit for 750/7400/7450.\n+\tAdd imul2 and imul3 insn types for multiplication by 16- and\n \t8-bit constants.\n-        Change tablejump patterns to strongly discourage using LR\n+\tChange tablejump patterns to strongly discourage using LR\n \trather than CTR.\n \tAdd %lo16 patterns for Darwin loads and stores.\n \n@@ -440,9 +447,9 @@ Sun Dec  9 18:40:07 2001  Douglas B. Rupp  <rupp@gnat.com>\n \n \t* doc/extend.texi (Variable Attributes): Document vector_size.\n \n-        * attribs.c (c_common_attribute_table): Add vector_size.\n+\t* attribs.c (c_common_attribute_table): Add vector_size.\n \t(handle_vector_size_attribute): New.\n-        (vector_size_helper): New.\n+\t(vector_size_helper): New.\n \t(decl_attributes): Relayout the decl after calculating attribs.\n \n 2001-12-07  Joseph S. Myers  <jsm28@cam.ac.uk>\n@@ -482,7 +489,7 @@ Fri Dec  7 07:06:17 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n 2001-12-06  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* rs6000.h (PRE_GCC3_DWARF_FRAME_REGISTERS): New.\n-        (DWARF_FRAME_REGISTERS): Delete.\n+\t(DWARF_FRAME_REGISTERS): Delete.\n \n 2001-12-06  Janis Johnson  <janis187@us.ibm.com>\n \n@@ -501,14 +508,14 @@ Fri Dec  7 07:06:17 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \tFixes PR libf2c/4826.\n \n 2001-12-06  Aldy Hernandez  <aldyh@redhat.com>\n-            Richard Henderson  <rth@redhat.com>\n+\t    Richard Henderson  <rth@redhat.com>\n \n \t* doc/tm.texi (DWARF_FRAME_REGISTERS): Add documentation.\n-        (PRE_GCC3_DWARF_FRAME_REGISTERS): Same.\n+\t(PRE_GCC3_DWARF_FRAME_REGISTERS): Same.\n \n-        * unwind-dw2.c (__frame_state_for): Change DWARF_FRAME_REGISTERS\n-        to PRE_GCC3_DWARF_FRAME_REGISTERS.\n-        (frame_state): Same.\n+\t* unwind-dw2.c (__frame_state_for): Change DWARF_FRAME_REGISTERS\n+\tto PRE_GCC3_DWARF_FRAME_REGISTERS.\n+\t(frame_state): Same.\n \t(PRE_GCC3_DWARF_FRAME_REGISTERS): Define if not already defined.\n \n 2001-12-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n@@ -563,9 +570,9 @@ Thu Dec  6 09:24:12 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n 2001-12-06  Nick Clifton  <nickc@cambridge.redhat.com>\n \n \t* config/arm/arm.c (load_multiple_sequence): Pass pointer to\n-        RTX when calling alter_subreg().\n+\tRTX when calling alter_subreg().\n \t(store_multiple_sequence): Pass pointer to RTX when calling\n-        alter_subreg().\n+\talter_subreg().\n \n Thu Dec  6 06:55:13 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n "}, {"sha": "98e5e24f948df4f4dcbdd5f256bf04b6704430ab", "filename": "gcc/except.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98ce21b3b388f4f93b1926c1bac451ead787292a/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98ce21b3b388f4f93b1926c1bac451ead787292a/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=98ce21b3b388f4f93b1926c1bac451ead787292a", "patch": "@@ -2014,6 +2014,7 @@ sjlj_find_directly_reachable_regions (lp_info)\n   for (insn = get_insns (); insn ; insn = NEXT_INSN (insn))\n     {\n       struct eh_region *region;\n+      enum reachable_code rc;\n       tree type_thrown;\n       rtx note;\n \n@@ -2035,11 +2036,14 @@ sjlj_find_directly_reachable_regions (lp_info)\n \n       /* Find the first containing region that might handle the exception.\n \t That's the landing pad to which we will transfer control.  */\n+      rc = RNL_NOT_CAUGHT;\n       for (; region; region = region->outer)\n-\tif (reachable_next_level (region, type_thrown, 0) != RNL_NOT_CAUGHT)\n-\t  break;\n-\n-      if (region)\n+\t{\n+\t  rc = reachable_next_level (region, type_thrown, 0);\n+\t  if (rc != RNL_NOT_CAUGHT)\n+\t    break;\n+\t}\n+      if (rc == RNL_MAYBE_CAUGHT || rc == RNL_CAUGHT)\n \t{\n \t  lp_info[region->region_number].directly_reachable = 1;\n \t  found_one = true;\n@@ -2086,8 +2090,7 @@ sjlj_assign_call_site_values (dispatch_label, lp_info)\n \n   index = 0;\n   for (i = cfun->eh->last_region_number; i > 0; --i)\n-    if (lp_info[i].directly_reachable\n-\t&& lp_info[i].action_index >= 0)\n+    if (lp_info[i].directly_reachable)\n       lp_info[i].dispatch_index = index++;\n \n   /* Finally: assign call-site values.  If dwarf2 terms, this would be\n@@ -2316,8 +2319,7 @@ sjlj_emit_dispatch_table (dispatch_label, lp_info)\n   first_reachable = 0;\n   for (i = cfun->eh->last_region_number; i > 0; --i)\n     {\n-      if (! lp_info[i].directly_reachable\n-\t  || lp_info[i].action_index < 0)\n+      if (! lp_info[i].directly_reachable)\n \tcontinue;\n \n       if (! first_reachable)"}]}