{"sha": "d200a49f5c83fa0f2e7332aecf69b6ab4a51b052", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIwMGE0OWY1YzgzZmEwZjJlNzMzMmFlY2Y2OWI2YWI0YTUxYjA1Mg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2019-11-12T19:31:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-11-12T19:31:04Z"}, "message": "re PR ipa/92471 ([ICE] lto1 segmentation fault: ipa-profile.c ipa_get_cs_argument_count (args=0x0))\n\n\tPR ipa/92471\n\t* ipa-profile.c (check_argument_count): Break out from ...;\n\twatch for missing summaries.\n\t(ipa_profile): Here.\n\nFrom-SVN: r278100", "tree": {"sha": "08a1dc9c03274e22ed1b88ba948c5682c9589934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08a1dc9c03274e22ed1b88ba948c5682c9589934"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d200a49f5c83fa0f2e7332aecf69b6ab4a51b052", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d200a49f5c83fa0f2e7332aecf69b6ab4a51b052", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d200a49f5c83fa0f2e7332aecf69b6ab4a51b052", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d200a49f5c83fa0f2e7332aecf69b6ab4a51b052/comments", "author": null, "committer": null, "parents": [{"sha": "1cf83d35b8cc41e88504b38e7f4d182ee1476003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf83d35b8cc41e88504b38e7f4d182ee1476003", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cf83d35b8cc41e88504b38e7f4d182ee1476003"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "5cd93c625414afd18c0caa75cae5421043019deb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d200a49f5c83fa0f2e7332aecf69b6ab4a51b052/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d200a49f5c83fa0f2e7332aecf69b6ab4a51b052/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d200a49f5c83fa0f2e7332aecf69b6ab4a51b052", "patch": "@@ -1,3 +1,10 @@\n+2019-11-12  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/92471\n+\t* ipa-profile.c (check_argument_count): Break out from ...;\n+\twatch for missing summaries.\n+\t(ipa_profile): Here.\n+\n 2019-11-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/92412"}, {"sha": "cd354d1a73eec307c704211d12d0b9251251d120", "filename": "gcc/ipa-profile.c", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d200a49f5c83fa0f2e7332aecf69b6ab4a51b052/gcc%2Fipa-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d200a49f5c83fa0f2e7332aecf69b6ab4a51b052/gcc%2Fipa-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-profile.c?ref=d200a49f5c83fa0f2e7332aecf69b6ab4a51b052", "patch": "@@ -476,6 +476,27 @@ ipa_propagate_frequency (struct cgraph_node *node)\n   return changed;\n }\n \n+/* Check that number of arguments of N agrees with E.\n+   Be conservative when summaries are not present.  */\n+\n+static bool\n+check_argument_count (struct cgraph_node *n, struct cgraph_edge *e)\n+{\n+  if (!ipa_node_params_sum || !ipa_edge_args_sum)\n+    return true;\n+  class ipa_node_params *info = IPA_NODE_REF (n->function_symbol ());\n+  if (!info)\n+    return true;\n+  ipa_edge_args *e_info = IPA_EDGE_REF (e);\n+  if (!e)\n+    return true;\n+  if (ipa_get_param_count (info) != ipa_get_cs_argument_count (e_info)\n+      && (ipa_get_param_count (info) >= ipa_get_cs_argument_count (e_info)\n+\t  || !stdarg_p (TREE_TYPE (n->decl))))\n+    return false;\n+  return true;\n+}\n+\n /* Simple ipa profile pass propagating frequencies across the callgraph.  */\n \n static unsigned int\n@@ -599,14 +620,7 @@ ipa_profile (void)\n \t\t\t\t \"Not speculating: target is overwritable \"\n \t\t\t\t \"and can be discarded.\\n\");\n \t\t    }\n-\t\t  else if (ipa_node_params_sum && ipa_edge_args_sum\n-\t\t\t   && (!vec_safe_is_empty\n-\t\t\t       (IPA_NODE_REF (n2)->descriptors))\n-\t\t\t   && ipa_get_param_count (IPA_NODE_REF (n2))\n-\t\t\t      != ipa_get_cs_argument_count (IPA_EDGE_REF (e))\n-\t\t\t    && (ipa_get_param_count (IPA_NODE_REF (n2))\n-\t\t\t\t>= ipa_get_cs_argument_count (IPA_EDGE_REF (e))\n-\t\t\t\t|| !stdarg_p (TREE_TYPE (n2->decl))))\n+\t\t  else if (check_argument_count (n2, e))\n \t\t    {\n \t\t      nmismatch++;\n \t\t      if (dump_file)"}]}