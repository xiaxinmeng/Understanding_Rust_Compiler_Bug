{"sha": "e9c06563626f034b29c8ccb35b01632a3fede753", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTljMDY1NjM2MjZmMDM0YjI5YzhjY2IzNWIwMTYzMmEzZmVkZTc1Mw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-08-19T20:08:14Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-08-19T20:08:14Z"}, "message": "[multiple changes]\n\n2007-08-18  Tobias Burnus  <burnus@net-b.de>\n\n\t* gfortran.h (gfc_is_intrinsic_typename): Add declaration.\n\t* symbol.c (gfc_is_intrinsic_typename): New function.\n\t* parse.c (decode_statement): Check for space in ABSTRACT INTERFACE.\n\t(parse_interface): Use gfc_is_intrinsic_typename.\n\t* decl.c (gfc_match_derived_decl): Ditto.\n\t* module.c (gfc_match_use): Use gcc_unreachable() for\n\tINTERFACE_ABSTRACT in switch().\n\n2007-08-19  Tobias Burnus  <burnus@net-b.de>\n\n\t* gfortran.dg/interface_abstract_2.f90: New.\n\t* gfortran.dg/interface_abstract_1.f90: Fix typo.\n\nFrom-SVN: r127626", "tree": {"sha": "219c86311ab4522bd317eeca819f1b984e6769a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/219c86311ab4522bd317eeca819f1b984e6769a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9c06563626f034b29c8ccb35b01632a3fede753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c06563626f034b29c8ccb35b01632a3fede753", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9c06563626f034b29c8ccb35b01632a3fede753", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c06563626f034b29c8ccb35b01632a3fede753/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "434548f64ffd76cb2a8390935b2179d1a5a421e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/434548f64ffd76cb2a8390935b2179d1a5a421e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/434548f64ffd76cb2a8390935b2179d1a5a421e2"}], "stats": {"total": 74, "additions": 53, "deletions": 21}, "files": [{"sha": "ed172470f4c2b399e25365e836b32777f9f3a33a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e9c06563626f034b29c8ccb35b01632a3fede753", "patch": "@@ -1,3 +1,13 @@\n+2007-08-18  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.h (gfc_is_intrinsic_typename): Add declaration.\n+\t* symbol.c (gfc_is_intrinsic_typename): New function.\n+\t* parse.c (decode_statement): Check for space in ABSTRACT INTERFACE.\n+\t(parse_interface): Use gfc_is_intrinsic_typename.\n+\t* decl.c (gfc_match_derived_decl): Ditto.\n+\t* module.c (gfc_match_use): Use gcc_unreachable() for\n+\tINTERFACE_ABSTRACT in switch().\n+\n 2007-08-18  Roger Sayle  <roger@eyesopen.com>\n \n \t* primary.c (match_logical_constant_string): New function to match"}, {"sha": "eb1e4236a3b500980fb58556f98fa78f02c02ddd", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=e9c06563626f034b29c8ccb35b01632a3fede753", "patch": "@@ -5468,17 +5468,8 @@ gfc_match_derived_decl (void)\n   if (m != MATCH_YES)\n     return m;\n \n-  /* Make sure the name isn't the name of an intrinsic type.  The\n-     'double {precision,complex}' types don't get past the name\n-     matcher, unless they're written as a single word or in fixed\n-     form.  */\n-  if (strcmp (name, \"integer\") == 0\n-      || strcmp (name, \"real\") == 0\n-      || strcmp (name, \"character\") == 0\n-      || strcmp (name, \"logical\") == 0\n-      || strcmp (name, \"complex\") == 0\n-      || strcmp (name, \"doubleprecision\") == 0\n-      || strcmp (name, \"doublecomplex\") == 0)\n+  /* Make sure the name is not the name of an intrinsic type.  */\n+  if (gfc_is_intrinsic_typename (name))\n     {\n       gfc_error (\"Type name '%s' at %C cannot be the same as an intrinsic \"\n \t\t \"type\", name);"}, {"sha": "01b9d93330d97b9494da6421be7293c5d97c66c5", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=e9c06563626f034b29c8ccb35b01632a3fede753", "patch": "@@ -2056,6 +2056,7 @@ try gfc_add_new_implicit_range (int, int);\n try gfc_merge_new_implicit (gfc_typespec *);\n void gfc_set_implicit_none (void);\n void gfc_check_function_type (gfc_namespace *);\n+bool gfc_is_intrinsic_typename (const char *);\n \n gfc_typespec *gfc_get_default_type (gfc_symbol *, gfc_namespace *);\n try gfc_set_default_type (gfc_symbol *, int, gfc_namespace *);"}, {"sha": "00f3674b597be22d3229d54609bf0b28542d5021", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=e9c06563626f034b29c8ccb35b01632a3fede753", "patch": "@@ -599,7 +599,6 @@ gfc_match_use (void)\n       switch (type)\n \t{\n \tcase INTERFACE_NAMELESS:\n-\tcase INTERFACE_ABSTRACT:\n \t  gfc_error (\"Missing generic specification in USE statement at %C\");\n \t  goto cleanup;\n \n@@ -659,6 +658,9 @@ gfc_match_use (void)\n \tcase INTERFACE_INTRINSIC_OP:\n \t  new->operator = operator;\n \t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n \t}\n \n       if (gfc_match_eos () == MATCH_YES)"}, {"sha": "835b05a97e20a68bf9fce52f7d378f1cb9ebf72e", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=e9c06563626f034b29c8ccb35b01632a3fede753", "patch": "@@ -172,7 +172,8 @@ decode_statement (void)\n   switch (c)\n     {\n     case 'a':\n-      match (\"abstract interface\", gfc_match_abstract_interface, ST_INTERFACE);\n+      match (\"abstract% interface\", gfc_match_abstract_interface,\n+\t     ST_INTERFACE);\n       match (\"allocate\", gfc_match_allocate, ST_ALLOCATE);\n       match (\"allocatable\", gfc_match_allocatable, ST_ATTR_DECL);\n       match (\"assign\", gfc_match_assign, ST_LABEL_ASSIGNMENT);\n@@ -1799,13 +1800,10 @@ parse_interface (void)\n   if (current_interface.type == INTERFACE_ABSTRACT)\n     {\n       gfc_new_block->attr.abstract = 1;\n-      if (!strcmp(gfc_new_block->name,\"integer\")\n-\t  || !strcmp(gfc_new_block->name,\"real\")\n-\t  || !strcmp(gfc_new_block->name,\"complex\")\n-\t  || !strcmp(gfc_new_block->name,\"character\")\n-\t  || !strcmp(gfc_new_block->name,\"logical\"))\n-\tgfc_error (\"Name of ABSTRACT INTERFACE at %C cannot be the same as \"\n-\t\t   \"an intrinsic type: %s\",gfc_new_block->name);\n+      if (gfc_is_intrinsic_typename (gfc_new_block->name))\n+\tgfc_error (\"Name '%s' of ABSTRACT INTERFACE at %C \"\n+\t\t   \"cannot be the same as an intrinsic type\",\n+\t\t   gfc_new_block->name);\n     }\n \n   push_state (&s2, new_state, gfc_new_block);"}, {"sha": "6f91e75eab8f9a01cf4b40760323bd89964558ae", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=e9c06563626f034b29c8ccb35b01632a3fede753", "patch": "@@ -2909,6 +2909,24 @@ gfc_traverse_ns (gfc_namespace *ns, void (*func) (gfc_symbol *))\n }\n \n \n+/* Return TRUE when name is the name of an intrinsic type.  */\n+\n+bool\n+gfc_is_intrinsic_typename (const char *name)\n+{\n+  if (strcmp (name, \"integer\") == 0\n+      || strcmp (name, \"real\") == 0\n+      || strcmp (name, \"character\") == 0\n+      || strcmp (name, \"logical\") == 0\n+      || strcmp (name, \"complex\") == 0\n+      || strcmp (name, \"doubleprecision\") == 0\n+      || strcmp (name, \"doublecomplex\") == 0)\n+    return true;\n+  else\n+    return false;\n+}\n+\n+\n /* Return TRUE if the symbol is an automatic variable.  */\n \n static bool"}, {"sha": "871df930c0ebadb8fe4524d7bfe05682686600fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e9c06563626f034b29c8ccb35b01632a3fede753", "patch": "@@ -1,3 +1,8 @@\n+2007-08-19  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/interface_abstract_2.f90: New.\n+\t* gfortran.dg/interface_abstract_1.f90: Fix typo.\n+\n 2007-08-19  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* gcc.dg/vect/vect-117.c: Change inner-loop bound to"}, {"sha": "afb3d6a2aac515c32adb3117348f70ceba9c3827", "filename": "gcc/testsuite/gfortran.dg/interface_abstract_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_abstract_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_abstract_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_abstract_1.f90?ref=e9c06563626f034b29c8ccb35b01632a3fede753", "patch": "@@ -9,7 +9,7 @@ subroutine two() bind(C)\n   end subroutine two\n   subroutine three() bind(C,name=\"three\") ! { dg-error \"NAME not allowed on BIND.C. for ABSTRACT INTERFACE\" }\n   end subroutine three ! { dg-error \"Expecting END INTERFACE statement\" }\n-  subroutine real() ! { dg-error \"cannot be be the same as an intrinsic type\" }\n+  subroutine real() ! { dg-error \"cannot be the same as an intrinsic type\" }\n   end subroutine real\n end interface\n end"}, {"sha": "5eb5a0e53f466020e97d26415fc9cfa324b5076d", "filename": "gcc/testsuite/gfortran.dg/interface_abstract_2.f90", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_abstract_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c06563626f034b29c8ccb35b01632a3fede753/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_abstract_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_abstract_2.f90?ref=e9c06563626f034b29c8ccb35b01632a3fede753", "patch": "@@ -0,0 +1,7 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+abstract interface ! { dg-error \"Fortran 2003: ABSTRACT INTERFACE\" }\n+  subroutine two()\n+  end subroutine two\n+end interface ! { dg-error \"Expecting END PROGRAM statement\" }\n+end"}]}