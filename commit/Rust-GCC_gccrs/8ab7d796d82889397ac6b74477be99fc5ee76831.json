{"sha": "8ab7d796d82889397ac6b74477be99fc5ee76831", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFiN2Q3OTZkODI4ODkzOTdhYzZiNzQ0NzdiZTk5ZmM1ZWU3NjgzMQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-06-14T15:19:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-06-14T15:19:04Z"}, "message": "re PR tree-optimization/44508 (libgomp.fortran/vla1.f90 ICE on s390)\n\n\tPR tree-optimization/44508\n\t* tree-ssa-propagate.h (substitute_and_fold): Add DO_DCE\n\targument.\n\t* tree-ssa-propagate.c (substitute_and_fold): If !DO_DCE,\n\tdon't eliminate trivially dead stmts.\n\t* tree-vrp.c (vrp_finalize): Pass false as last argument\n\tto substitute_and_fold.\n\t* tree-ssa-copy.c (fini_copy_prop): Pass true as last argument\n\tto substitute_and_fold.\n\t* tree-ssa-ccp.c (ccp_finalize): Likewise.\n\n\t* gcc.dg/tree-ssa/pr21086.c: Adjust.\n\nFrom-SVN: r160749", "tree": {"sha": "2b10d5795fae249a32a7b7b093a1cd54da5bdfdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b10d5795fae249a32a7b7b093a1cd54da5bdfdb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ab7d796d82889397ac6b74477be99fc5ee76831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab7d796d82889397ac6b74477be99fc5ee76831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ab7d796d82889397ac6b74477be99fc5ee76831", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ab7d796d82889397ac6b74477be99fc5ee76831/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cec010e49d84d5aad737fc040dc693615f81e78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cec010e49d84d5aad737fc040dc693615f81e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cec010e49d84d5aad737fc040dc693615f81e78"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "b7c8aecdbd1d450b9151ed53cdb27e338d1b9308", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab7d796d82889397ac6b74477be99fc5ee76831/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab7d796d82889397ac6b74477be99fc5ee76831/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ab7d796d82889397ac6b74477be99fc5ee76831", "patch": "@@ -1,5 +1,16 @@\n 2010-06-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/44508\n+\t* tree-ssa-propagate.h (substitute_and_fold): Add DO_DCE\n+\targument.\n+\t* tree-ssa-propagate.c (substitute_and_fold): If !DO_DCE,\n+\tdon't eliminate trivially dead stmts.\n+\t* tree-vrp.c (vrp_finalize): Pass false as last argument\n+\tto substitute_and_fold.\n+\t* tree-ssa-copy.c (fini_copy_prop): Pass true as last argument\n+\tto substitute_and_fold.\n+\t* tree-ssa-ccp.c (ccp_finalize): Likewise.\n+\n \tPR bootstrap/44509\n \t* c-config-lang.in (gtfiles): Add c-family/c-cppbuiltin.c.\n \t* c-family/c-cppbuiltin.c: Include gt-c-family-c-cppbuiltin.h."}, {"sha": "4492f0dde4873363d5e00fb3bd57a416ab07f7cc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab7d796d82889397ac6b74477be99fc5ee76831/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab7d796d82889397ac6b74477be99fc5ee76831/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8ab7d796d82889397ac6b74477be99fc5ee76831", "patch": "@@ -1,5 +1,8 @@\n 2010-06-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/44508\n+\t* gcc.dg/tree-ssa/pr21086.c: Adjust.\n+\n \tPR bootstrap/44509\n \t* gcc.dg/pr44509.c: New test.\n "}, {"sha": "f924d26cca2d8bbc82d1e32fc7bccace82227199", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21086.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab7d796d82889397ac6b74477be99fc5ee76831/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab7d796d82889397ac6b74477be99fc5ee76831/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21086.c?ref=8ab7d796d82889397ac6b74477be99fc5ee76831", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1 -fdump-tree-dce1\" } */\n \n int\n foo (int *p)\n@@ -16,8 +16,9 @@ foo (int *p)\n }\n \n /* Target with fno-delete-null-pointer-checks should not fold checks */\n-/* { dg-final { scan-tree-dump-times \"Folding predicate \" 1 \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n+/* { dg-final { scan-tree-dump \"Folding predicate \" \"vrp1\" { target { ! keeps_null_pointer_checks } } } } */\n /* { dg-final { scan-tree-dump-times \"Folding predicate \" 0 \"vrp1\" { target {   keeps_null_pointer_checks } } } } */\n-/* { dg-final { scan-tree-dump-not \"b_. =\" \"vrp1\" { target { ! avr-*-* } } } } */\n-/* { dg-final { scan-tree-dump \"b_. =\" \"vrp1\" { target { avr-*-* } } } } */\n+/* { dg-final { scan-tree-dump-not \"b_. =\" \"dce1\" { target { ! avr-*-* } } } } */\n+/* { dg-final { scan-tree-dump \"b_. =\" \"dce1\" { target { avr-*-* } } } } */\n /* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"dce1\" } } */"}, {"sha": "2b6139b8fe279fab20ee26710e12bb128cb0f1f5", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab7d796d82889397ac6b74477be99fc5ee76831/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab7d796d82889397ac6b74477be99fc5ee76831/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=8ab7d796d82889397ac6b74477be99fc5ee76831", "patch": "@@ -682,7 +682,7 @@ ccp_finalize (void)\n \n   do_dbg_cnt ();\n   /* Perform substitutions based on the known constant values.  */\n-  something_changed = substitute_and_fold (const_val, ccp_fold_stmt);\n+  something_changed = substitute_and_fold (const_val, ccp_fold_stmt, true);\n \n   free (const_val);\n   const_val = NULL;"}, {"sha": "87d896842f9706f6b9cb6cd347755ad3e906a3ef", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab7d796d82889397ac6b74477be99fc5ee76831/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab7d796d82889397ac6b74477be99fc5ee76831/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=8ab7d796d82889397ac6b74477be99fc5ee76831", "patch": "@@ -854,7 +854,7 @@ fini_copy_prop (void)\n \tduplicate_ssa_name_ptr_info (tmp[i].value, SSA_NAME_PTR_INFO (var));\n     }\n \n-  substitute_and_fold (tmp, NULL);\n+  substitute_and_fold (tmp, NULL, true);\n \n   free (cached_last_copy_of);\n   free (copy_of);"}, {"sha": "5f2ecce08b6251460eded901d0a0df0967feda5d", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab7d796d82889397ac6b74477be99fc5ee76831/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab7d796d82889397ac6b74477be99fc5ee76831/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=8ab7d796d82889397ac6b74477be99fc5ee76831", "patch": "@@ -964,10 +964,13 @@ replace_phi_args_in (gimple phi, prop_value_t *prop_value)\n    If FOLD_FN is non-NULL the function will be invoked on all statements\n    before propagating values for pass specific simplification.\n \n+   DO_DCE is true if trivially dead stmts can be removed.\n+\n    Return TRUE when something changed.  */\n \n bool\n-substitute_and_fold (prop_value_t *prop_value, ssa_prop_fold_stmt_fn fold_fn)\n+substitute_and_fold (prop_value_t *prop_value, ssa_prop_fold_stmt_fn fold_fn,\n+\t\t     bool do_dce)\n {\n   basic_block bb;\n   bool something_changed = false;\n@@ -1012,8 +1015,12 @@ substitute_and_fold (prop_value_t *prop_value, ssa_prop_fold_stmt_fn fold_fn)\n \t    continue;\n \n \t  /* No point propagating into a stmt whose result is not used,\n-\t     but instead we might be able to remove a trivially dead stmt.  */\n-\t  if (gimple_get_lhs (stmt)\n+\t     but instead we might be able to remove a trivially dead stmt.\n+\t     Don't do this when called from VRP, since the SSA_NAME which\n+\t     is going to be released could be still referenced in VRP\n+\t     ranges.  */\n+\t  if (do_dce\n+\t      && gimple_get_lhs (stmt)\n \t      && TREE_CODE (gimple_get_lhs (stmt)) == SSA_NAME\n \t      && has_zero_uses (gimple_get_lhs (stmt))\n \t      && !stmt_could_throw_p (stmt)"}, {"sha": "029d28a2650f78f21f84f3df18c2a03706d9bdbf", "filename": "gcc/tree-ssa-propagate.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab7d796d82889397ac6b74477be99fc5ee76831/gcc%2Ftree-ssa-propagate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab7d796d82889397ac6b74477be99fc5ee76831/gcc%2Ftree-ssa-propagate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.h?ref=8ab7d796d82889397ac6b74477be99fc5ee76831", "patch": "@@ -1,6 +1,6 @@\n /* Data structures and function declarations for the SSA value propagation\n    engine.\n-   Copyright (C) 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2007, 2008, 2010 Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>\n \n This file is part of GCC.\n@@ -120,6 +120,6 @@ bool valid_gimple_call_p (tree);\n void move_ssa_defining_stmt_for_defs (gimple, gimple);\n bool update_call_from_tree (gimple_stmt_iterator *, tree);\n bool stmt_makes_single_store (gimple);\n-bool substitute_and_fold (prop_value_t *, ssa_prop_fold_stmt_fn);\n+bool substitute_and_fold (prop_value_t *, ssa_prop_fold_stmt_fn, bool);\n \n #endif /* _TREE_SSA_PROPAGATE_H  */"}, {"sha": "cce24706a1ee92f65e2ca8e0c982665ad8da165c", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ab7d796d82889397ac6b74477be99fc5ee76831/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ab7d796d82889397ac6b74477be99fc5ee76831/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=8ab7d796d82889397ac6b74477be99fc5ee76831", "patch": "@@ -7343,7 +7343,7 @@ vrp_finalize (void)\n       single_val_range = NULL;\n     }\n \n-  substitute_and_fold (single_val_range, vrp_fold_stmt);\n+  substitute_and_fold (single_val_range, vrp_fold_stmt, false);\n \n   if (warn_array_bounds)\n     check_all_array_refs ();"}]}