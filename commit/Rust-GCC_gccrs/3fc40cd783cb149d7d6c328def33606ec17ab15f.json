{"sha": "3fc40cd783cb149d7d6c328def33606ec17ab15f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZjNDBjZDc4M2NiMTQ5ZDdkNmMzMjhkZWYzMzYwNmVjMTdhYjE1Zg==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-10-09T20:47:26Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-10-09T20:47:26Z"}, "message": "[multiple changes]\n\n2017-10-09  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_unit.adb (Find_Enclosing_Scope): Do not treat a block statement\n\tas a scoping construct when it is byproduct of exception handling.\n\n2017-10-09  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sinfo.ads: Update table Is_Syntactic_Field to reflect the nature of\n\tsemantic field Target of node N_Call_Marker.\n\n2017-10-09  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Allocator): Reject properly an allocator that\n\tattempts to copy a limited value, when the allocator is the expression\n\tin an expression function.\n\n2017-10-09  Joel Brobecker  <brobecker@adacore.com>\n\n\t* doc/share/conf.py: Tell the style checker that this is a Python\n\tfragment, and therefore that pyflakes should not be run to validate\n\tthis file.\n\n2017-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* einfo.ads (Is_Boolean_Type): Add pragma Inline.\n\t(Is_Entity_Name): Likewise.\n\t(Is_String_Type): Likewise.\n\t* sem_type.adb (Full_View_Covers): Do not test Is_Private_Type here\n\tand remove useless comparisons on the base types.\n\t(Covers): Use simple tests for Standard_Void_Type.  Move up cheap tests\n\ton T2.  Always test Is_Private_Type before Full_View_Covers.\n\n2017-10-09  Bob Duff  <duff@adacore.com>\n\n\t* exp_ch4.adb: Minor refactoring.\n\nFrom-SVN: r253568", "tree": {"sha": "5464e584db086ae7844c699ab4fedf3aea926122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5464e584db086ae7844c699ab4fedf3aea926122"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fc40cd783cb149d7d6c328def33606ec17ab15f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc40cd783cb149d7d6c328def33606ec17ab15f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fc40cd783cb149d7d6c328def33606ec17ab15f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc40cd783cb149d7d6c328def33606ec17ab15f/comments", "author": null, "committer": null, "parents": [{"sha": "367601d1238a0b997ec9321ab2c58e5557d972c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/367601d1238a0b997ec9321ab2c58e5557d972c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/367601d1238a0b997ec9321ab2c58e5557d972c2"}], "stats": {"total": 742, "additions": 418, "deletions": 324}, "files": [{"sha": "6b70bf1352b5443adeb736ae7a37a5043b336ec6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -1,3 +1,39 @@\n+2017-10-09  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_unit.adb (Find_Enclosing_Scope): Do not treat a block statement\n+\tas a scoping construct when it is byproduct of exception handling.\n+\n+2017-10-09  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sinfo.ads: Update table Is_Syntactic_Field to reflect the nature of\n+\tsemantic field Target of node N_Call_Marker.\n+\n+2017-10-09  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Allocator): Reject properly an allocator that\n+\tattempts to copy a limited value, when the allocator is the expression\n+\tin an expression function.\n+\n+2017-10-09  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* doc/share/conf.py: Tell the style checker that this is a Python\n+\tfragment, and therefore that pyflakes should not be run to validate\n+\tthis file.\n+\n+2017-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Is_Boolean_Type): Add pragma Inline.\n+\t(Is_Entity_Name): Likewise.\n+\t(Is_String_Type): Likewise.\n+\t* sem_type.adb (Full_View_Covers): Do not test Is_Private_Type here\n+\tand remove useless comparisons on the base types.\n+\t(Covers): Use simple tests for Standard_Void_Type.  Move up cheap tests\n+\ton T2.  Always test Is_Private_Type before Full_View_Covers.\n+\n+2017-10-09  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch4.adb: Minor refactoring.\n+\n 2017-10-09  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_ch3.adb (Replace_Components): Browse the list of discriminants,"}, {"sha": "e6fafcfaec071dd08647db660019c18b3404e270", "filename": "gcc/ada/doc/share/conf.py", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fdoc%2Fshare%2Fconf.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fdoc%2Fshare%2Fconf.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fshare%2Fconf.py?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -1,4 +1,5 @@\n # -*- coding: utf-8 -*-\n+# Style_Check:Python_Fragment (meaning no pyflakes check)\n #\n # GNAT build configuration file\n "}, {"sha": "d20440bcbf287961d2992efecbc5f31005d0d47b", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -9470,9 +9470,12 @@ package Einfo is\n \n    pragma Inline (Base_Type);\n    pragma Inline (Is_Base_Type);\n+   pragma Inline (Is_Boolean_Type);\n    pragma Inline (Is_Controlled);\n+   pragma Inline (Is_Entity_Name);\n    pragma Inline (Is_Package_Or_Generic_Package);\n    pragma Inline (Is_Packed_Array);\n+   pragma Inline (Is_String_Type);\n    pragma Inline (Is_Subprogram_Or_Generic_Subprogram);\n    pragma Inline (Is_Volatile);\n    pragma Inline (Is_Wrapper_Package);"}, {"sha": "9faed933b9f9dfd0b8c872640b0023143dc904c3", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -4125,25 +4125,6 @@ package body Exp_Aggr is\n    -- Convert_To_Assignments --\n    ----------------------------\n \n-   function Is_Build_In_Place_Aggregate_Return (N : Node_Id) return Boolean is\n-      P : Node_Id := Parent (N);\n-   begin\n-      while Nkind (P) = N_Qualified_Expression loop\n-         P := Parent (P);\n-      end loop;\n-\n-      if Nkind (P) = N_Simple_Return_Statement then\n-         null;\n-      elsif Nkind (Parent (P)) = N_Extended_Return_Statement then\n-         P := Parent (P);\n-      else\n-         return False;\n-      end if;\n-\n-      return Is_Build_In_Place_Function\n-        (Return_Applies_To (Return_Statement_Entity (P)));\n-   end Is_Build_In_Place_Aggregate_Return;\n-\n    procedure Convert_To_Assignments (N : Node_Id; Typ : Entity_Id) is\n       Loc  : constant Source_Ptr := Sloc (N);\n       T    : Entity_Id;\n@@ -4176,8 +4157,9 @@ package body Exp_Aggr is\n             Unc_Decl :=\n               not Is_Entity_Name (Object_Definition (Parent_Node))\n                 or else (Nkind (N) = N_Aggregate\n-                           and then Has_Discriminants\n-                             (Entity (Object_Definition (Parent_Node))))\n+                          and then\n+                            Has_Discriminants\n+                              (Entity (Object_Definition (Parent_Node))))\n                 or else Is_Class_Wide_Type\n                           (Entity (Object_Definition (Parent_Node)));\n          end if;\n@@ -6671,8 +6653,8 @@ package body Exp_Aggr is\n    --  individual assignments to the given components.\n \n    procedure Expand_N_Extension_Aggregate (N : Node_Id) is\n-      Loc : constant Source_Ptr := Sloc (N);\n       A   : constant Node_Id    := Ancestor_Part (N);\n+      Loc : constant Source_Ptr := Sloc (N);\n       Typ : constant Entity_Id  := Etype (N);\n \n    begin\n@@ -7476,6 +7458,33 @@ package body Exp_Aggr is\n       return False;\n    end Has_Default_Init_Comps;\n \n+   ----------------------------------------\n+   -- Is_Build_In_Place_Aggregate_Return --\n+   ----------------------------------------\n+\n+   function Is_Build_In_Place_Aggregate_Return (N : Node_Id) return Boolean is\n+      P : Node_Id := Parent (N);\n+\n+   begin\n+      while Nkind (P) = N_Qualified_Expression loop\n+         P := Parent (P);\n+      end loop;\n+\n+      if Nkind (P) = N_Simple_Return_Statement then\n+         null;\n+\n+      elsif Nkind (Parent (P)) = N_Extended_Return_Statement then\n+         P := Parent (P);\n+\n+      else\n+         return False;\n+      end if;\n+\n+      return\n+        Is_Build_In_Place_Function\n+          (Return_Applies_To (Return_Statement_Entity (P)));\n+   end Is_Build_In_Place_Aggregate_Return;\n+\n    --------------------------\n    -- Is_Delayed_Aggregate --\n    --------------------------"}, {"sha": "29e79dcead94b3f0a590f0f4a14cdba5d92a4e10", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -1712,7 +1712,8 @@ package body Exp_Ch3 is\n       Set_Tag   : Entity_Id := Empty;\n \n       function Build_Assignment\n-        (Id : Entity_Id; Default : Node_Id) return List_Id;\n+        (Id      : Entity_Id;\n+         Default : Node_Id) return List_Id;\n       --  Build an assignment statement that assigns the default expression to\n       --  its corresponding record component if defined. The left-hand side of\n       --  the assignment is marked Assignment_OK so that initialization of\n@@ -1785,10 +1786,11 @@ package body Exp_Ch3 is\n       ----------------------\n \n       function Build_Assignment\n-        (Id : Entity_Id; Default : Node_Id) return List_Id\n+        (Id      : Entity_Id;\n+         Default : Node_Id) return List_Id\n       is\n          Default_Loc : constant Source_Ptr := Sloc (Default);\n-         Typ   : constant Entity_Id := Underlying_Type (Etype (Id));\n+         Typ         : constant Entity_Id  := Underlying_Type (Etype (Id));\n \n          Adj_Call : Node_Id;\n          Exp      : Node_Id   := Default;\n@@ -1871,7 +1873,7 @@ package body Exp_Ch3 is\n \n          if Kind = N_Attribute_Reference\n            and then Nam_In (Attribute_Name (Default), Name_Unchecked_Access,\n-                                                Name_Unrestricted_Access)\n+                                                      Name_Unrestricted_Access)\n            and then Is_Entity_Name (Prefix (Default))\n            and then Is_Type (Entity (Prefix (Default)))\n            and then Entity (Prefix (Default)) = Rec_Type\n@@ -1915,9 +1917,8 @@ package body Exp_Ch3 is\n                 Expression =>\n                   Unchecked_Convert_To (RTE (RE_Tag),\n                     New_Occurrence_Of\n-                      (Node\n-                        (First_Elmt\n-                          (Access_Disp_Table (Underlying_Type (Typ)))),\n+                      (Node (First_Elmt (Access_Disp_Table (Underlying_Type\n+                         (Typ)))),\n                        Default_Loc))));\n          end if;\n \n@@ -6328,7 +6329,7 @@ package body Exp_Ch3 is\n          elsif Nkind (Expr_Q) = N_Reference\n            and then Is_Build_In_Place_Function_Call (Prefix (Expr_Q))\n            and then not Is_Expanded_Build_In_Place_Call\n-             (Unqual_Conv (Prefix (Expr_Q)))\n+                          (Unqual_Conv (Prefix (Expr_Q)))\n          then\n             Make_Build_In_Place_Call_In_Anonymous_Context (Prefix (Expr_Q));\n \n@@ -6611,7 +6612,8 @@ package body Exp_Ch3 is\n                --  allocated in place, delay checks until assignments are\n                --  made, because the discriminants are not initialized.\n \n-               if Nkind (Expr) = N_Allocator and then No_Initialization (Expr)\n+               if Nkind (Expr) = N_Allocator\n+                 and then No_Initialization (Expr)\n                then\n                   null;\n \n@@ -6649,9 +6651,9 @@ package body Exp_Ch3 is\n \n             if Is_Build_In_Place_Result_Type (Typ)\n               and then Nkind (Parent (N)) = N_Extended_Return_Statement\n-              and then not Is_Definite_Subtype\n-                (Etype (Return_Applies_To\n-                         (Return_Statement_Entity (Parent (N)))))\n+              and then\n+                not Is_Definite_Subtype (Etype (Return_Applies_To\n+                      (Return_Statement_Entity (Parent (N)))))\n             then\n                null;\n "}, {"sha": "770341ce9eb713d50dcff3e4b02d3fba4c32870f", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 73, "deletions": 72, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -5451,12 +5451,10 @@ package body Exp_Ch4 is\n       Typ   : constant Entity_Id  := Etype (N);\n \n       Actions : List_Id;\n-      Cnn     : Entity_Id;\n       Decl    : Node_Id;\n       Expr    : Node_Id;\n       New_If  : Node_Id;\n       New_N   : Node_Id;\n-      Ptr_Typ : Entity_Id;\n \n    begin\n       --  Check for MINIMIZED/ELIMINATED overflow mode\n@@ -5560,65 +5558,66 @@ package body Exp_Ch4 is\n          Process_If_Case_Statements (N, Then_Actions (N));\n          Process_If_Case_Statements (N, Else_Actions (N));\n \n-         --  Generate:\n-         --    type Ann is access all Typ;\n-\n-         Ptr_Typ := Make_Temporary (Loc, 'A');\n-\n-         Insert_Action (N,\n-           Make_Full_Type_Declaration (Loc,\n-             Defining_Identifier => Ptr_Typ,\n-             Type_Definition     =>\n-               Make_Access_To_Object_Definition (Loc,\n-                 All_Present        => True,\n-                 Subtype_Indication => New_Occurrence_Of (Typ, Loc))));\n+         declare\n+            Cnn     : constant Entity_Id := Make_Temporary (Loc, 'C', N);\n+            Ptr_Typ : constant Entity_Id := Make_Temporary (Loc, 'A');\n+         begin\n+            --  Generate:\n+            --    type Ann is access all Typ;\n \n-         --  Generate:\n-         --    Cnn : Ann;\n+            Insert_Action (N,\n+              Make_Full_Type_Declaration (Loc,\n+                Defining_Identifier => Ptr_Typ,\n+                Type_Definition     =>\n+                  Make_Access_To_Object_Definition (Loc,\n+                    All_Present        => True,\n+                    Subtype_Indication => New_Occurrence_Of (Typ, Loc))));\n \n-         Cnn := Make_Temporary (Loc, 'C', N);\n+            --  Generate:\n+            --    Cnn : Ann;\n \n-         Decl :=\n-           Make_Object_Declaration (Loc,\n-             Defining_Identifier => Cnn,\n-             Object_Definition   => New_Occurrence_Of (Ptr_Typ, Loc));\n+            Decl :=\n+              Make_Object_Declaration (Loc,\n+                Defining_Identifier => Cnn,\n+                Object_Definition   => New_Occurrence_Of (Ptr_Typ, Loc));\n \n-         --  Generate:\n-         --    if Cond then\n-         --       Cnn := <Thenx>'Unrestricted_Access;\n-         --    else\n-         --       Cnn := <Elsex>'Unrestricted_Access;\n-         --    end if;\n+            --  Generate:\n+            --    if Cond then\n+            --       Cnn := <Thenx>'Unrestricted_Access;\n+            --    else\n+            --       Cnn := <Elsex>'Unrestricted_Access;\n+            --    end if;\n \n-         New_If :=\n-           Make_Implicit_If_Statement (N,\n-             Condition       => Relocate_Node (Cond),\n-             Then_Statements => New_List (\n-               Make_Assignment_Statement (Sloc (Thenx),\n-                 Name       => New_Occurrence_Of (Cnn, Sloc (Thenx)),\n-                 Expression =>\n-                   Make_Attribute_Reference (Loc,\n-                     Prefix         => Relocate_Node (Thenx),\n-                     Attribute_Name => Name_Unrestricted_Access))),\n+            New_If :=\n+              Make_Implicit_If_Statement (N,\n+                Condition       => Relocate_Node (Cond),\n+                Then_Statements => New_List (\n+                  Make_Assignment_Statement (Sloc (Thenx),\n+                    Name       => New_Occurrence_Of (Cnn, Sloc (Thenx)),\n+                    Expression =>\n+                      Make_Attribute_Reference (Loc,\n+                        Prefix         => Relocate_Node (Thenx),\n+                        Attribute_Name => Name_Unrestricted_Access))),\n \n-             Else_Statements => New_List (\n-               Make_Assignment_Statement (Sloc (Elsex),\n-                 Name       => New_Occurrence_Of (Cnn, Sloc (Elsex)),\n-                 Expression =>\n-                   Make_Attribute_Reference (Loc,\n-                     Prefix         => Relocate_Node (Elsex),\n-                     Attribute_Name => Name_Unrestricted_Access))));\n+                Else_Statements => New_List (\n+                  Make_Assignment_Statement (Sloc (Elsex),\n+                    Name       => New_Occurrence_Of (Cnn, Sloc (Elsex)),\n+                    Expression =>\n+                      Make_Attribute_Reference (Loc,\n+                        Prefix         => Relocate_Node (Elsex),\n+                        Attribute_Name => Name_Unrestricted_Access))));\n \n-         --  Preserve the original context for which the if statement is being\n-         --  generated. This is needed by the finalization machinery to prevent\n-         --  the premature finalization of controlled objects found within the\n-         --  if statement.\n+            --  Preserve the original context for which the if statement is\n+            --  being generated. This is needed by the finalization machinery\n+            --  to prevent the premature finalization of controlled objects\n+            --  found within the if statement.\n \n-         Set_From_Conditional_Expression (New_If);\n+            Set_From_Conditional_Expression (New_If);\n \n-         New_N :=\n-           Make_Explicit_Dereference (Loc,\n-             Prefix => New_Occurrence_Of (Cnn, Loc));\n+            New_N :=\n+              Make_Explicit_Dereference (Loc,\n+                Prefix => New_Occurrence_Of (Cnn, Loc));\n+         end;\n \n       --  If the result is an unconstrained array and the if expression is in a\n       --  context other than the initializing expression of the declaration of\n@@ -5677,31 +5676,33 @@ package body Exp_Ch4 is\n \n             --  and replace the if expression by a reference to Cnn\n \n-            Cnn := Make_Temporary (Loc, 'C', N);\n-\n-            Decl :=\n-              Make_Object_Declaration (Loc,\n-                Defining_Identifier => Cnn,\n-                Object_Definition   => New_Occurrence_Of (Typ, Loc));\n+            declare\n+               Cnn : constant Node_Id := Make_Temporary (Loc, 'C', N);\n+            begin\n+               Decl :=\n+                 Make_Object_Declaration (Loc,\n+                   Defining_Identifier => Cnn,\n+                   Object_Definition   => New_Occurrence_Of (Typ, Loc));\n \n-            New_If :=\n-              Make_Implicit_If_Statement (N,\n-                Condition       => Relocate_Node (Cond),\n+               New_If :=\n+                 Make_Implicit_If_Statement (N,\n+                   Condition       => Relocate_Node (Cond),\n \n-                Then_Statements => New_List (\n-                  Make_Assignment_Statement (Sloc (Thenx),\n-                    Name       => New_Occurrence_Of (Cnn, Sloc (Thenx)),\n-                    Expression => Relocate_Node (Thenx))),\n+                   Then_Statements => New_List (\n+                     Make_Assignment_Statement (Sloc (Thenx),\n+                       Name       => New_Occurrence_Of (Cnn, Sloc (Thenx)),\n+                       Expression => Relocate_Node (Thenx))),\n \n-                Else_Statements => New_List (\n-                  Make_Assignment_Statement (Sloc (Elsex),\n-                    Name       => New_Occurrence_Of (Cnn, Sloc (Elsex)),\n-                    Expression => Relocate_Node (Elsex))));\n+                   Else_Statements => New_List (\n+                     Make_Assignment_Statement (Sloc (Elsex),\n+                       Name       => New_Occurrence_Of (Cnn, Sloc (Elsex)),\n+                       Expression => Relocate_Node (Elsex))));\n \n-            Set_Assignment_OK (Name (First (Then_Statements (New_If))));\n-            Set_Assignment_OK (Name (First (Else_Statements (New_If))));\n+               Set_Assignment_OK (Name (First (Then_Statements (New_If))));\n+               Set_Assignment_OK (Name (First (Else_Statements (New_If))));\n \n-            New_N := New_Occurrence_Of (Cnn, Loc);\n+               New_N := New_Occurrence_Of (Cnn, Loc);\n+            end;\n \n          --  Regular path using Expression_With_Actions\n "}, {"sha": "9d2f652f11983ab4fa745c3ffef27b06cc7d348d", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -175,15 +175,16 @@ package body Exp_Ch5 is\n       Advance   : out Node_Id;\n       New_Loop  : out Node_Id)\n    is\n-      Loc      : constant Source_Ptr := Sloc (N);\n-      Stats    : constant List_Id    := Statements (N);\n-      Typ      : constant Entity_Id  := Base_Type (Etype (Container));\n+      Loc   : constant Source_Ptr := Sloc (N);\n+      Stats : constant List_Id    := Statements (N);\n+      Typ   : constant Entity_Id  := Base_Type (Etype (Container));\n+\n+      Has_Element_Op : constant Entity_Id :=\n+                         Get_Iterable_Type_Primitive (Typ, Name_Has_Element);\n \n       First_Op : Entity_Id;\n       Next_Op  : Entity_Id;\n \n-      Has_Element_Op : constant Entity_Id :=\n-                   Get_Iterable_Type_Primitive (Typ, Name_Has_Element);\n    begin\n       --  Use the proper set of primitives depending on the direction of\n       --  iteration. The legality of a reverse iteration has been checked\n@@ -196,7 +197,6 @@ package body Exp_Ch5 is\n       else\n          First_Op := Get_Iterable_Type_Primitive (Typ, Name_First);\n          Next_Op  := Get_Iterable_Type_Primitive (Typ, Name_Next);\n-         null;\n       end if;\n \n       --  Declaration for Cursor"}, {"sha": "6c27741d37cbf70c8f0d92f068b0d4b9b49c4350", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 58, "deletions": 57, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -2251,10 +2251,12 @@ package body Exp_Ch6 is\n \n    procedure Expand_Call (N : Node_Id) is\n       Post_Call : List_Id;\n+\n    begin\n-      pragma Assert\n-        (Nkind_In (N, N_Function_Call, N_Procedure_Call_Statement,\n-                      N_Entry_Call_Statement));\n+      pragma Assert (Nkind_In (N, N_Entry_Call_Statement,\n+                                  N_Function_Call,\n+                                  N_Procedure_Call_Statement));\n+\n       Expand_Call_Helper (N, Post_Call);\n       Insert_Post_Call_Actions (N, Post_Call);\n    end Expand_Call;\n@@ -4333,8 +4335,8 @@ package body Exp_Ch6 is\n          if not Is_Build_In_Place_Function_Call (Call_Node)\n            and then\n              (No (First_Formal (Subp))\n-                or else\n-                  not Is_Concurrent_Record_Type (Etype (First_Formal (Subp))))\n+               or else\n+                 not Is_Concurrent_Record_Type (Etype (First_Formal (Subp))))\n          then\n             Expand_Ctrl_Function_Call (Call_Node);\n \n@@ -4343,15 +4345,14 @@ package body Exp_Ch6 is\n          --  intermediate result after its use.\n \n          elsif Is_Build_In_Place_Function_Call (Call_Node)\n-           and then\n-             Nkind_In (Parent (Unqual_Conv (Call_Node)),\n-                       N_Attribute_Reference,\n-                       N_Function_Call,\n-                       N_Indexed_Component,\n-                       N_Object_Renaming_Declaration,\n-                       N_Procedure_Call_Statement,\n-                       N_Selected_Component,\n-                       N_Slice)\n+           and then Nkind_In (Parent (Unqual_Conv (Call_Node)),\n+                              N_Attribute_Reference,\n+                              N_Function_Call,\n+                              N_Indexed_Component,\n+                              N_Object_Renaming_Declaration,\n+                              N_Procedure_Call_Statement,\n+                              N_Selected_Component,\n+                              N_Slice)\n          then\n             Establish_Transient_Scope (Call_Node, Sec_Stack => True);\n          end if;\n@@ -6447,8 +6448,8 @@ package body Exp_Ch6 is\n \n       pragma Assert\n         (Comes_From_Extended_Return_Statement (N)\n-           or else not Is_Build_In_Place_Function_Call (Exp)\n-           or else Is_Build_In_Place_Function (Scope_Id));\n+          or else not Is_Build_In_Place_Function_Call (Exp)\n+          or else Is_Build_In_Place_Function (Scope_Id));\n \n       if not Comes_From_Extended_Return_Statement (N)\n         and then Is_Build_In_Place_Function (Scope_Id)\n@@ -7325,11 +7326,7 @@ package body Exp_Ch6 is\n          raise Program_Error;\n       end if;\n \n-      declare\n-         Result : constant Boolean := Is_Build_In_Place_Function (Function_Id);\n-      begin\n-         return Result;\n-      end;\n+      return Is_Build_In_Place_Function (Function_Id);\n    end Is_Build_In_Place_Function_Call;\n \n    -----------------------\n@@ -7765,7 +7762,7 @@ package body Exp_Ch6 is\n       Return_Obj_Access := Make_Temporary (Loc, 'R');\n       Set_Etype (Return_Obj_Access, Acc_Type);\n       Set_Can_Never_Be_Null (Acc_Type, False);\n-      --  It gets initialized to null, so we can't have that.\n+      --  It gets initialized to null, so we can't have that\n \n       --  When the result subtype is constrained, the return object is\n       --  allocated on the caller side, and access to it is passed to the\n@@ -8101,10 +8098,10 @@ package body Exp_Ch6 is\n      (Assign        : Node_Id;\n       Function_Call : Node_Id)\n    is\n-      Lhs          : constant Node_Id := Name (Assign);\n-      Func_Call    : constant Node_Id := Unqual_Conv (Function_Call);\n-      Func_Id      : Entity_Id;\n+      Func_Call    : constant Node_Id    := Unqual_Conv (Function_Call);\n+      Lhs          : constant Node_Id    := Name (Assign);\n       Loc          : constant Source_Ptr := Sloc (Function_Call);\n+      Func_Id      : Entity_Id;\n       Obj_Decl     : Node_Id;\n       Obj_Id       : Entity_Id;\n       Ptr_Typ      : Entity_Id;\n@@ -8178,8 +8175,9 @@ package body Exp_Ch6 is\n       --  Add a conversion if it's the wrong type\n \n       if Etype (New_Expr) /= Ptr_Typ then\n-         New_Expr := Make_Unchecked_Type_Conversion (Loc,\n-           New_Occurrence_Of (Ptr_Typ, Loc), New_Expr);\n+         New_Expr :=\n+           Make_Unchecked_Type_Conversion (Loc,\n+             New_Occurrence_Of (Ptr_Typ, Loc), New_Expr);\n       end if;\n \n       Obj_Id := Make_Temporary (Loc, 'R', New_Expr);\n@@ -8207,6 +8205,10 @@ package body Exp_Ch6 is\n       function Get_Function_Id (Func_Call : Node_Id) return Entity_Id;\n       --  Get the value of Function_Id, below\n \n+      ---------------------\n+      -- Get_Function_Id --\n+      ---------------------\n+\n       function Get_Function_Id (Func_Call : Node_Id) return Entity_Id is\n       begin\n          if Is_Entity_Name (Name (Func_Call)) then\n@@ -8220,30 +8222,31 @@ package body Exp_Ch6 is\n          end if;\n       end Get_Function_Id;\n \n-      Func_Call       : constant Node_Id   := Unqual_Conv (Function_Call);\n-      Function_Id     : constant Entity_Id := Get_Function_Id (Func_Call);\n-      Result_Subt     : constant Entity_Id := Etype (Function_Id);\n+      --  Local variables\n \n-      Obj_Def_Id : constant Entity_Id  := Defining_Identifier (Obj_Decl);\n-      Obj_Typ    : constant Entity_Id  := Etype (Obj_Def_Id);\n-      Encl_Func  : constant Entity_Id  := Enclosing_Subprogram (Obj_Def_Id);\n-      Loc        : constant Source_Ptr := Sloc (Function_Call);\n-      Obj_Loc    : constant Source_Ptr := Sloc (Obj_Decl);\n+      Func_Call   : constant Node_Id    := Unqual_Conv (Function_Call);\n+      Function_Id : constant Entity_Id  := Get_Function_Id (Func_Call);\n+      Loc         : constant Source_Ptr := Sloc (Function_Call);\n+      Obj_Loc     : constant Source_Ptr := Sloc (Obj_Decl);\n+      Obj_Def_Id  : constant Entity_Id  := Defining_Identifier (Obj_Decl);\n+      Obj_Typ     : constant Entity_Id  := Etype (Obj_Def_Id);\n+      Encl_Func   : constant Entity_Id  := Enclosing_Subprogram (Obj_Def_Id);\n+      Result_Subt : constant Entity_Id  := Etype (Function_Id);\n \n       Call_Deref      : Node_Id;\n       Caller_Object   : Node_Id;\n       Def_Id          : Entity_Id;\n+      Designated_Type : Entity_Id;\n       Fmaster_Actual  : Node_Id := Empty;\n       Pool_Actual     : Node_Id;\n-      Designated_Type : Entity_Id;\n       Ptr_Typ         : Entity_Id;\n       Ptr_Typ_Decl    : Node_Id;\n       Pass_Caller_Acc : Boolean := False;\n       Res_Decl        : Node_Id;\n \n       Definite : constant Boolean :=\n                    Caller_Known_Size (Func_Call, Result_Subt)\n-                   and then not Is_Class_Wide_Type (Obj_Typ);\n+                     and then not Is_Class_Wide_Type (Obj_Typ);\n       --  In the case of \"X : T'Class := F(...);\", where F returns a\n       --  Caller_Known_Size (specific) tagged type, we treat it as\n       --  indefinite, because the code for the Definite case below sets the\n@@ -8300,9 +8303,7 @@ package body Exp_Ch6 is\n       --  the result object is in a different (transient) scope, so won't cause\n       --  freezing.\n \n-      if Definite\n-        and then not Is_Return_Object (Obj_Def_Id)\n-      then\n+      if Definite and then not Is_Return_Object (Obj_Def_Id) then\n          Insert_After_And_Analyze (Obj_Decl, Ptr_Typ_Decl);\n       else\n          Insert_Action (Obj_Decl, Ptr_Typ_Decl);\n@@ -8330,8 +8331,8 @@ package body Exp_Ch6 is\n          Pass_Caller_Acc := True;\n \n          --  When the enclosing function has a BIP_Alloc_Form formal then we\n-         --  pass it along to the callee (such as when the enclosing\n-         --  function has an unconstrained or tagged result type).\n+         --  pass it along to the callee (such as when the enclosing function\n+         --  has an unconstrained or tagged result type).\n \n          if Needs_BIP_Alloc_Form (Encl_Func) then\n             if RTE_Available (RE_Root_Storage_Pool_Ptr) then\n@@ -8376,9 +8377,8 @@ package body Exp_Ch6 is\n            Make_Unchecked_Type_Conversion (Loc,\n              Subtype_Mark =>\n                New_Occurrence_Of\n-                 (Etype\n-                    (Build_In_Place_Formal\n-                      (Function_Id, BIP_Object_Access)),\n+                 (Etype (Build_In_Place_Formal\n+                    (Function_Id, BIP_Object_Access)),\n                   Loc),\n              Expression   =>\n                New_Occurrence_Of\n@@ -8487,18 +8487,18 @@ package body Exp_Ch6 is\n       Set_Etype (Def_Id, Ptr_Typ);\n       Set_Is_Known_Non_Null (Def_Id);\n \n-      if Nkind_In\n-        (Function_Call, N_Type_Conversion, N_Unchecked_Type_Conversion)\n+      if Nkind_In (Function_Call, N_Type_Conversion,\n+                                  N_Unchecked_Type_Conversion)\n       then\n          Res_Decl :=\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => Def_Id,\n              Constant_Present    => True,\n              Object_Definition   => New_Occurrence_Of (Ptr_Typ, Loc),\n              Expression          =>\n-             Make_Unchecked_Type_Conversion (Loc,\n-                New_Occurrence_Of (Ptr_Typ, Loc),\n-                Make_Reference (Loc, Relocate_Node (Func_Call))));\n+               Make_Unchecked_Type_Conversion (Loc,\n+                 New_Occurrence_Of (Ptr_Typ, Loc),\n+                 Make_Reference (Loc, Relocate_Node (Func_Call))));\n       else\n          Res_Decl :=\n            Make_Object_Declaration (Loc,\n@@ -8515,9 +8515,8 @@ package body Exp_Ch6 is\n       --  itself the return expression of an enclosing BIP function, then mark\n       --  the object as having no initialization.\n \n-      if Definite\n-        and then not Is_Return_Object (Obj_Def_Id)\n-      then\n+      if Definite and then not Is_Return_Object (Obj_Def_Id) then\n+\n          --  The related object declaration is encased in a transient block\n          --  because the build-in-place function call contains at least one\n          --  nested function call that produces a controlled transient\n@@ -8552,9 +8551,9 @@ package body Exp_Ch6 is\n          Rewrite (Obj_Decl,\n            Make_Object_Renaming_Declaration (Obj_Loc,\n              Defining_Identifier => Make_Temporary (Obj_Loc, 'D'),\n-             Subtype_Mark =>\n+             Subtype_Mark        =>\n                New_Occurrence_Of (Designated_Type, Obj_Loc),\n-             Name => Call_Deref));\n+             Name                => Call_Deref));\n \n          --  At this point, Defining_Identifier (Obj_Decl) is no longer equal\n          --  to Obj_Def_Id.\n@@ -9261,7 +9260,7 @@ package body Exp_Ch6 is\n          then\n             On_Object_Declaration := True;\n             return\n-               Unqual_BIP_Function_Call (Expression (Parent (Entity (Expr))));\n+              Unqual_BIP_Function_Call (Expression (Parent (Entity (Expr))));\n \n          --  Recurse to handle calls to displace the pointer to the object to\n          --  reference a secondary dispatch table.\n@@ -9294,7 +9293,9 @@ package body Exp_Ch6 is\n \n    begin\n       if Nkind (Expr) = N_Identifier and then No (Entity (Expr)) then\n-         --  Can happen for X'Elab_Spec in the binder-generated file.\n+\n+         --  Can happen for X'Elab_Spec in the binder-generated file\n+\n          return Empty;\n       end if;\n "}, {"sha": "b1ab606f055169b80e305a0ed81ca14efbc17389", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -651,9 +651,8 @@ package body Exp_Util is\n       --  stack.\n \n       elsif Is_RTE (Pool_Id, RE_SS_Pool)\n-        or else\n-          (Nkind (Expr) = N_Allocator\n-             and then Is_RTE (Storage_Pool (Expr), RE_SS_Pool))\n+        or else (Nkind (Expr) = N_Allocator\n+                  and then Is_RTE (Storage_Pool (Expr), RE_SS_Pool))\n       then\n          return;\n "}, {"sha": "677d59999dd595c611167161c067aa8b984b0a60", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -3019,17 +3019,20 @@ package body Sem_Aggr is\n          return False;\n       end Valid_Ancestor_Type;\n \n+      ------------------------------\n+      -- Transform_BIP_Assignment --\n+      ------------------------------\n+\n       procedure Transform_BIP_Assignment (Typ : Entity_Id) is\n-         Loc : constant Source_Ptr := Sloc (N);\n-         Def_Id : constant Entity_Id := Make_Temporary (Loc, 'Y', A);\n-         Obj_Decl : constant Node_Id :=\n-           Make_Object_Declaration\n-             (Loc,\n-              Defining_Identifier => Def_Id,\n-              Constant_Present => True,\n-              Object_Definition => New_Occurrence_Of (Typ, Loc),\n-              Expression => A,\n-              Has_Init_Expression => True);\n+         Loc      : constant Source_Ptr := Sloc (N);\n+         Def_Id   : constant Entity_Id  := Make_Temporary (Loc, 'Y', A);\n+         Obj_Decl : constant Node_Id    :=\n+                      Make_Object_Declaration (Loc,\n+                        Defining_Identifier => Def_Id,\n+                        Constant_Present    => True,\n+                        Object_Definition   => New_Occurrence_Of (Typ, Loc),\n+                        Expression          => A,\n+                        Has_Init_Expression => True);\n       begin\n          Set_Etype (Def_Id, Typ);\n          Set_Ancestor_Part (N, New_Occurrence_Of (Def_Id, Loc));"}, {"sha": "564ff0dfc0aba74c19e506e13f6f10fd0f443358", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -13193,17 +13193,16 @@ package body Sem_Ch13 is\n            or else No (First_Formal (Entity (N)))\n            or else Etype (First_Formal (Entity (N))) /= Typ\n          then\n-            Error_Msg_N (\"iterable primitive must be local function name \"\n-                         & \"whose first formal is an iterable type\", N);\n+            Error_Msg_N\n+              (\"iterable primitive must be local function name whose first \"\n+               & \"formal is an iterable type\", N);\n             return;\n          end if;\n \n          Ent := Entity (N);\n-         F1 := First_Formal (Ent);\n+         F1  := First_Formal (Ent);\n \n-         if Nam = Name_First\n-           or else Nam = Name_Last\n-         then\n+         if Nam = Name_First or else Nam = Name_Last then\n \n             --  First or Last (Container) => Cursor\n \n@@ -13242,6 +13241,7 @@ package body Sem_Ch13 is\n             --  Has_Element (Container, Cursor) => Boolean\n \n             F2 := Next_Formal (F1);\n+\n             if Etype (F2) /= Cursor\n               or else Etype (Ent) /= Standard_Boolean\n               or else Present (Next_Formal (F2))\n@@ -13258,15 +13258,14 @@ package body Sem_Ch13 is\n             then\n                Error_Msg_N (\"no match for Element iterable primitive\", N);\n             end if;\n-            null;\n \n          else\n             raise Program_Error;\n          end if;\n \n       else\n-         --  Overloaded case: find subprogram with proper signature.\n-         --  Caller will report error if no match is found.\n+         --  Overloaded case: find subprogram with proper signature. Caller\n+         --  will report error if no match is found.\n \n          declare\n             I  : Interp_Index;\n@@ -14108,10 +14107,8 @@ package body Sem_Ch13 is\n       elsif No (Has_Element_Id) then\n          Error_Msg_N (\"match for Has_Element primitive not found\", ASN);\n \n-      elsif No (Element_Id)\n-        or else No (Last_Id)\n-      then\n-         null;  --  Optional.\n+      elsif No (Element_Id) or else No (Last_Id) then\n+         null;  --  optional\n       end if;\n    end Validate_Iterable_Aspect;\n "}, {"sha": "c163aab8e7863c429c918c1ed2392545e751cbcd", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -10255,10 +10255,11 @@ package body Sem_Ch3 is\n          Set_Is_Limited_Record (Def_Id, Is_Limited_Record (T));\n \n          if Has_Discrs\n-            and then not Is_Empty_Elmt_List (Elist)\n-            and then not For_Access\n+           and then not Is_Empty_Elmt_List (Elist)\n+           and then not For_Access\n          then\n             Create_Constrained_Components (Def_Id, Related_Nod, T, Elist);\n+\n          elsif not For_Access then\n             Set_Cloned_Subtype (Def_Id, T);\n          end if;\n@@ -10288,11 +10289,10 @@ package body Sem_Ch3 is\n          --  Add_Global_Declaration in this case. This can happen if we have a\n          --  build-in-place library function.\n \n-         if (Nkind (Nod) in N_Entity\n-               and then Is_Compilation_Unit (Nod))\n+         if (Nkind (Nod) in N_Entity and then Is_Compilation_Unit (Nod))\n            or else\n              (Nkind (Nod) = N_Defining_Program_Unit_Name\n-                and then Is_Compilation_Unit (Defining_Identifier (Nod)))\n+               and then Is_Compilation_Unit (Defining_Identifier (Nod)))\n          then\n             Add_Global_Declaration (IR);\n          else\n@@ -11828,14 +11828,14 @@ package body Sem_Ch3 is\n \n                   else\n                      Error_Msg_N\n-                       (\"illegal context for call\"\n-                          & \" to function with limited result\", Exp);\n+                       (\"illegal context for call to function with limited \"\n+                        & \"result\", Exp);\n                   end if;\n \n                else\n                   Error_Msg_N\n-                    (\"initialization of limited object requires aggregate \"\n-                      & \"or function call\",  Exp);\n+                    (\"initialization of limited object requires aggregate or \"\n+                     & \"function call\",  Exp);\n                end if;\n             end if;\n          end if;"}, {"sha": "8c92669876c545ffe050425797ca7c873a9145cb", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 97, "deletions": 75, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -141,72 +141,6 @@ package body Sem_Ch5 is\n       --  assignment statements that are really initializations. These are\n       --  marked No_Ctrl_Actions.\n \n-      function Should_Transform_BIP_Assignment\n-        (Typ : Entity_Id) return Boolean\n-      is\n-         Result : Boolean;\n-      begin\n-         if Expander_Active\n-           and then not Is_Limited_View (Typ)\n-           and then Is_Build_In_Place_Result_Type (Typ)\n-           and then not No_Ctrl_Actions (N)\n-         then\n-            --  This function is called early, before name resolution is\n-            --  complete, so we have to deal with things that might turn into\n-            --  function calls later. N_Function_Call and N_Op nodes are the\n-            --  obvious case. An N_Identifier or N_Expanded_Name is a\n-            --  parameterless function call if it denotes a function.\n-            --  Finally, an attribute reference can be a function call.\n-\n-            case Nkind (Unqual_Conv (Rhs)) is\n-               when N_Function_Call | N_Op =>\n-                  Result := True;\n-               when N_Identifier | N_Expanded_Name =>\n-                  case Ekind (Entity (Unqual_Conv (Rhs))) is\n-                     when E_Function | E_Operator =>\n-                        Result := True;\n-                     when others =>\n-                        Result := False;\n-                  end case;\n-               when N_Attribute_Reference =>\n-                  Result := Attribute_Name (Unqual_Conv (Rhs)) = Name_Input;\n-                  --  T'Input will turn into a call whose result type is T\n-               when others =>\n-                  Result := False;\n-            end case;\n-         else\n-            Result := False;\n-         end if;\n-         return Result;\n-      end Should_Transform_BIP_Assignment;\n-\n-      procedure Transform_BIP_Assignment (Typ : Entity_Id) is\n-         --  Tranform \"X : [constant] T := F (...);\" into:\n-         --\n-         --     Temp : constant T := F (...);\n-         --     X := Temp;\n-\n-         Loc : constant Source_Ptr := Sloc (N);\n-         Def_Id : constant Entity_Id := Make_Temporary (Loc, 'Y', Rhs);\n-         Obj_Decl : constant Node_Id :=\n-           Make_Object_Declaration\n-             (Loc,\n-              Defining_Identifier => Def_Id,\n-              Constant_Present => True,\n-              Object_Definition => New_Occurrence_Of (Typ, Loc),\n-              Expression => Rhs,\n-              Has_Init_Expression => True);\n-      begin\n-         Set_Etype (Def_Id, Typ);\n-         Set_Expression (N, New_Occurrence_Of (Def_Id, Loc));\n-\n-         --  At this point, Rhs is no longer equal to Expression (N), so:\n-\n-         Rhs := Expression (N);\n-\n-         Insert_Action (N, Obj_Decl);\n-      end Transform_BIP_Assignment;\n-\n       -------------------------------\n       -- Diagnose_Non_Variable_Lhs --\n       -------------------------------\n@@ -314,6 +248,7 @@ package body Sem_Ch5 is\n          Opnd_Type : in out Entity_Id)\n       is\n          Decl : Node_Id;\n+\n       begin\n          Require_Entity (Opnd);\n \n@@ -331,9 +266,9 @@ package body Sem_Ch5 is\n                       or else\n                         (Ekind (Entity (Opnd)) = E_Variable\n                           and then Nkind (Parent (Entity (Opnd))) =\n-                                            N_Object_Renaming_Declaration\n+                                     N_Object_Renaming_Declaration\n                           and then Nkind (Parent (Parent (Entity (Opnd)))) =\n-                                            N_Accept_Statement))\n+                                     N_Accept_Statement))\n          then\n             Opnd_Type := Get_Actual_Subtype (Opnd);\n \n@@ -364,6 +299,93 @@ package body Sem_Ch5 is\n          end if;\n       end Set_Assignment_Type;\n \n+      -------------------------------------\n+      -- Should_Transform_BIP_Assignment --\n+      -------------------------------------\n+\n+      function Should_Transform_BIP_Assignment\n+        (Typ : Entity_Id) return Boolean\n+      is\n+         Result : Boolean;\n+\n+      begin\n+         if Expander_Active\n+           and then not Is_Limited_View (Typ)\n+           and then Is_Build_In_Place_Result_Type (Typ)\n+           and then not No_Ctrl_Actions (N)\n+         then\n+            --  This function is called early, before name resolution is\n+            --  complete, so we have to deal with things that might turn into\n+            --  function calls later. N_Function_Call and N_Op nodes are the\n+            --  obvious case. An N_Identifier or N_Expanded_Name is a\n+            --  parameterless function call if it denotes a function.\n+            --  Finally, an attribute reference can be a function call.\n+\n+            case Nkind (Unqual_Conv (Rhs)) is\n+               when N_Function_Call\n+                  | N_Op\n+               =>\n+                  Result := True;\n+\n+               when N_Expanded_Name\n+                  | N_Identifier\n+               =>\n+                  case Ekind (Entity (Unqual_Conv (Rhs))) is\n+                     when E_Function\n+                        | E_Operator\n+                     =>\n+                        Result := True;\n+\n+                     when others =>\n+                        Result := False;\n+                  end case;\n+\n+               when N_Attribute_Reference =>\n+                  Result := Attribute_Name (Unqual_Conv (Rhs)) = Name_Input;\n+                  --  T'Input will turn into a call whose result type is T\n+\n+               when others =>\n+                  Result := False;\n+            end case;\n+         else\n+            Result := False;\n+         end if;\n+\n+         return Result;\n+      end Should_Transform_BIP_Assignment;\n+\n+      ------------------------------\n+      -- Transform_BIP_Assignment --\n+      ------------------------------\n+\n+      procedure Transform_BIP_Assignment (Typ : Entity_Id) is\n+\n+         --  Tranform \"X : [constant] T := F (...);\" into:\n+         --\n+         --     Temp : constant T := F (...);\n+         --     X := Temp;\n+\n+         Loc      : constant Source_Ptr := Sloc (N);\n+         Def_Id   : constant Entity_Id  := Make_Temporary (Loc, 'Y', Rhs);\n+         Obj_Decl : constant Node_Id    :=\n+                      Make_Object_Declaration (Loc,\n+                        Defining_Identifier => Def_Id,\n+                        Constant_Present    => True,\n+                        Object_Definition   => New_Occurrence_Of (Typ, Loc),\n+                        Expression          => Rhs,\n+                        Has_Init_Expression => True);\n+\n+      begin\n+         Set_Etype (Def_Id, Typ);\n+         Set_Expression (N, New_Occurrence_Of (Def_Id, Loc));\n+\n+         --  At this point, Rhs is no longer equal to Expression (N), so:\n+\n+         Rhs := Expression (N);\n+\n+         Insert_Action (N, Obj_Decl);\n+      end Transform_BIP_Assignment;\n+\n       --  Local variables\n \n       T1 : Entity_Id;\n@@ -524,22 +546,21 @@ package body Sem_Ch5 is\n          end if;\n       end if;\n \n-      --  Deal with build-in-place calls for nonlimited types.\n-      --  We don't do this later, because resolving the rhs\n-      --  tranforms it incorrectly for build-in-place.\n+      --  Deal with build-in-place calls for nonlimited types. We don't do this\n+      --  later, because resolving the rhs tranforms it incorrectly for build-\n+      --  in-place.\n \n       if Should_Transform_BIP_Assignment (Typ => T1) then\n          Transform_BIP_Assignment (Typ => T1);\n       end if;\n+\n       pragma Assert (not Should_Transform_BIP_Assignment (Typ => T1));\n \n       --  The resulting assignment type is T1, so now we will resolve the left\n       --  hand side of the assignment using this determined type.\n \n       Resolve (Lhs, T1);\n \n-      --  Cases where Lhs is not a variable\n-\n       --  Cases where Lhs is not a variable. In an instance or an inlined body\n       --  no need for further check because assignment was legal in template.\n \n@@ -1941,8 +1962,9 @@ package body Sem_Ch5 is\n             if Is_Array_Type (Typ)\n               or else Is_Reversible_Iterator (Typ)\n               or else\n-                  (Present (Find_Aspect (Typ, Aspect_Iterable))\n-                    and then Present\n+                (Present (Find_Aspect (Typ, Aspect_Iterable))\n+                  and then\n+                    Present\n                       (Get_Iterable_Type_Primitive (Typ, Name_Previous)))\n             then\n                null;"}, {"sha": "dc00cf9f2497df0b5304775c2facf02db106b20a", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -281,14 +281,6 @@ package body Sem_Ch7 is\n          --  If we haven't already traversed Node, then mark it and traverse\n          --  it.\n \n-         procedure Scan_Subprogram_Refs (Node : Node_Id) is\n-         begin\n-            if not Traversed_Table.Get (Node) then\n-               Traversed_Table.Set (Node, True);\n-               Traverse_And_Scan_Subprogram_Refs (Node);\n-            end if;\n-         end Scan_Subprogram_Refs;\n-\n          --------------------\n          -- Has_Referencer --\n          --------------------\n@@ -533,6 +525,18 @@ package body Sem_Ch7 is\n             return OK;\n          end Scan_Subprogram_Ref;\n \n+         --------------------------\n+         -- Scan_Subprogram_Refs --\n+         --------------------------\n+\n+         procedure Scan_Subprogram_Refs (Node : Node_Id) is\n+         begin\n+            if not Traversed_Table.Get (Node) then\n+               Traversed_Table.Set (Node, True);\n+               Traverse_And_Scan_Subprogram_Refs (Node);\n+            end if;\n+         end Scan_Subprogram_Refs;\n+\n          --  Local variables\n \n          Discard : Boolean;"}, {"sha": "68c1a0892a64c0f04cb2ca12970d0d5571144fb1", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -4834,10 +4834,18 @@ package body Sem_Res is\n          --  are explicitly marked as coming from source but do not need to be\n          --  checked for limited initialization. To exclude this case, ensure\n          --  that the parent of the allocator is a source node.\n+         --  The return statement constructed for an Expression_Function does\n+         --  not come from source but requires a limited check.\n \n          if Is_Limited_Type (Etype (E))\n            and then Comes_From_Source (N)\n-           and then Comes_From_Source (Parent (N))\n+           and then\n+             (Comes_From_Source (Parent (N))\n+               or else\n+                 (Ekind (Current_Scope) = E_Function\n+                   and then Nkind\n+                     (Original_Node (Unit_Declaration_Node (Current_Scope)))\n+                       = N_Expression_Function))\n            and then not In_Instance_Body\n          then\n             if not OK_For_Limited_Init (Etype (E), Expression (E)) then"}, {"sha": "05315852511f5846aa25d5575fd64f4b56cebfe4", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -761,15 +761,19 @@ package body Sem_Type is\n \n       function Full_View_Covers (Typ1, Typ2 : Entity_Id) return Boolean is\n       begin\n-         return\n-           Is_Private_Type (Typ1)\n-             and then\n-              ((Present (Full_View (Typ1))\n-                 and then Covers (Full_View (Typ1), Typ2))\n-                or else (Present (Underlying_Full_View (Typ1))\n-                          and then Covers (Underlying_Full_View (Typ1), Typ2))\n-                or else Base_Type (Typ1) = Typ2\n-                or else Base_Type (Typ2) = Typ1);\n+         if Present (Full_View (Typ1))\n+           and then Covers (Full_View (Typ1), Typ2)\n+         then\n+            return True;\n+\n+         elsif Present (Underlying_Full_View (Typ1))\n+           and then Covers (Underlying_Full_View (Typ1), Typ2)\n+         then\n+            return True;\n+\n+         else\n+            return False;\n+         end if;\n       end Full_View_Covers;\n \n       -----------------\n@@ -825,7 +829,7 @@ package body Sem_Type is\n       --  Standard_Void_Type is a special entity that has some, but not all,\n       --  properties of types.\n \n-      if (T1 = Standard_Void_Type) /= (T2 = Standard_Void_Type) then\n+      if T1 = Standard_Void_Type or else T2 = Standard_Void_Type then\n          return False;\n       end if;\n \n@@ -892,8 +896,8 @@ package body Sem_Type is\n         or else (T2 = Universal_Real    and then Is_Real_Type (T1))\n         or else (T2 = Universal_Fixed   and then Is_Fixed_Point_Type (T1))\n         or else (T2 = Any_Fixed         and then Is_Fixed_Point_Type (T1))\n-        or else (T2 = Any_String        and then Is_String_Type (T1))\n         or else (T2 = Any_Character     and then Is_Character_Type (T1))\n+        or else (T2 = Any_String        and then Is_String_Type (T1))\n         or else (T2 = Any_Access        and then Is_Access_Type (T1))\n       then\n          return True;\n@@ -916,9 +920,9 @@ package body Sem_Type is\n       --  task_type or protected_type that implements the interface.\n \n       elsif Ada_Version >= Ada_2005\n+        and then Is_Concurrent_Type (T2)\n         and then Is_Class_Wide_Type (T1)\n         and then Is_Interface (Etype (T1))\n-        and then Is_Concurrent_Type (T2)\n         and then Interface_Present_In_Ancestor\n                    (Typ => BT2, Iface => Etype (T1))\n       then\n@@ -928,9 +932,9 @@ package body Sem_Type is\n       --  object T2 implementing T1.\n \n       elsif Ada_Version >= Ada_2005\n+        and then Is_Tagged_Type (T2)\n         and then Is_Class_Wide_Type (T1)\n         and then Is_Interface (Etype (T1))\n-        and then Is_Tagged_Type (T2)\n       then\n          if Interface_Present_In_Ancestor (Typ   => T2,\n                                            Iface => Etype (T1))\n@@ -1183,19 +1187,16 @@ package body Sem_Type is\n       --  whether a partial and a full view match. Verify that types are\n       --  legal, to prevent cascaded errors.\n \n-      elsif In_Instance\n-        and then (Full_View_Covers (T1, T2) or else Full_View_Covers (T2, T1))\n-      then\n-         return True;\n-\n-      elsif Is_Type (T2)\n-        and then Is_Generic_Actual_Type (T2)\n+      elsif Is_Private_Type (T1)\n+        and then (In_Instance\n+                   or else (Is_Type (T2) and then Is_Generic_Actual_Type (T2)))\n         and then Full_View_Covers (T1, T2)\n       then\n          return True;\n \n-      elsif Is_Type (T1)\n-        and then Is_Generic_Actual_Type (T1)\n+      elsif Is_Private_Type (T2)\n+        and then (In_Instance\n+                   or else (Is_Type (T1) and then Is_Generic_Actual_Type (T1)))\n         and then Full_View_Covers (T2, T1)\n       then\n          return True;"}, {"sha": "f003ef5a8acc1c11d794eefb5c7db948fe919589", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -7929,13 +7929,21 @@ package body Sem_Util is\n \n             --  Special cases\n \n-            --  Blocks, loops, and return statements have artificial scopes\n+            --  Blocks carry either a source or an internally-generated scope,\n+            --  unless the block is a byproduct of exception handling.\n \n-            when N_Block_Statement\n-               | N_Loop_Statement\n-            =>\n+            when N_Block_Statement =>\n+               if not Exception_Junk (Par) then\n+                  return Entity (Identifier (Par));\n+               end if;\n+\n+            --  Loops carry an internally-generated scope\n+\n+            when N_Loop_Statement =>\n                return Entity (Identifier (Par));\n \n+            --  Extended return statements carry an internally-generated scope\n+\n             when N_Extended_Return_Statement =>\n                return Return_Statement_Entity (Par);\n \n@@ -19511,13 +19519,13 @@ package body Sem_Util is\n          N := Next (Actual_Id);\n \n          if Nkind (N) = N_Parameter_Association then\n+\n             --  In case of a build-in-place call, the call will no longer be a\n             --  call; it will have been rewritten.\n \n-            if Nkind_In (Parent (Actual_Id),\n-                         N_Entry_Call_Statement,\n-                         N_Function_Call,\n-                         N_Procedure_Call_Statement)\n+            if Nkind_In (Parent (Actual_Id), N_Entry_Call_Statement,\n+                                             N_Function_Call,\n+                                             N_Procedure_Call_Statement)\n             then\n                return First_Named_Actual (Parent (Actual_Id));\n             else\n@@ -23257,16 +23265,15 @@ package body Sem_Util is\n          return \"unknown subprogram\";\n       end if;\n \n-      if Nkind (Ent) = N_Defining_Program_Unit_Name then\n-\n-         --  If the subprogram is a child unit, use its simple name to\n-         --  start the construction of the fully qualified name.\n+      --  If the subprogram is a child unit, use its simple name to start the\n+      --  construction of the fully qualified name.\n \n+      if Nkind (Ent) = N_Defining_Program_Unit_Name then\n          Append_Entity_Name (Buf, Defining_Identifier (Ent));\n-\n       else\n          Append_Entity_Name (Buf, Ent);\n       end if;\n+\n       return +Buf;\n    end Subprogram_Name;\n "}, {"sha": "247d127982d5c5220048c16093130e003d7d380a", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fc40cd783cb149d7d6c328def33606ec17ab15f/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=3fc40cd783cb149d7d6c328def33606ec17ab15f", "patch": "@@ -13009,7 +13009,7 @@ package Sinfo is\n         5 => False),  --  SCIL_Tag_Value (Node5-Sem)\n \n      N_Call_Marker =>\n-       (1 => True,    --  Target (Node1-Sem)\n+       (1 => False,   --  Target (Node1-Sem)\n         2 => False,   --  unused\n         3 => False,   --  unused\n         4 => False,   --  unused"}]}