{"sha": "3b06d379028526625f4b9e0cf5d5f5137de950d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IwNmQzNzkwMjg1MjY2MjVmNGI5ZTBjZjVkNWY1MTM3ZGU5NTBkNA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-06-28T10:52:46Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-06-28T10:52:46Z"}, "message": "system.h: Poison GCC_EXCEPT_H for front-end files.\n\ngcc/ChangeLog:\n2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n\n\t* system.h: Poison GCC_EXCEPT_H for front-end files.\n\n\t* langhooks.h (struct lang_hooks): Add eh_protect_cleanup_actions\n\tlanghook.\n\t* langhooks-def.h (LANG_HOOKS_EH_PROTECT_CLEANUP_ACTIONS) New.\n\tDefine to NULL by default.\n\t* except.h: Define GCC_EXCEPT_H.\n\t(doing_eh): Remove prototype.\n\t(init_eh, init_eh_for_function): Move prototypes to toplev.h.\n\t(lang_protect_cleanup_actions): Remove.\n\t* except.c (lang_protect_cleanup_actions): Remove.\n\t(doing_eh): Remove.\n\t(gen_eh_region): Don't check doing_eh here.\n\t* toplev.h (init_eh, init_eh_for_function_): Moved from except.h.\n\t* tree-eh.c (honor_protect_cleanup_actions): Use new langhook\n\tinstead of lang_protect_cleanup_actions.\n\t* omp-low.c (maybe_catch_exception): Likewise.\n\t* Makefile.in: Update dependencies.\n\ngcc/c-family/ChangeLog:\n2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n\n\t* c-cppbuiltin.c: Do not include except.h.\n\ngcc/objc/ChangeLog:\n2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n\n\t* objc-act.c: Do not include except.h.\n\ngcc/cp/ChangeLog:\n2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n\n\t* init.c: Do not include except.h.\n\t* decl.c: Likewise.\n\t* expr.c: Likewise.\n\t* cp-lang.c: Likewise.\n\t* pt.c: Likewise.\n\t* semantics.c: Likewise.\n\t* decl2.c: Likewise.\n\t* except.c: Likewise.\n\t(init_exception_processing): Do not set the removed\n\tlang_protect_cleanup_actions here.\n\t(cp_protect_cleanup_actions): Make non-static and remove prototype.\n\t(doing_eh): New, moved from except.c but removed the do_warning flag.\n\t(expand_start_catch_block): Update doing_eh call.\n\t(expand_end_catch_block): Likewise.\n\t(build_throw): Likewise.\n\t* cp-tree.h: Prototype cp_protect_cleanup_actions.\n\t* cp-objcp-common.h: Set LANG_HOOKS_EH_PROTECT_CLEANUP_ACTIONS to\n\tcp_protect_cleanup_actions.\n\t* Make-lang.in: Update dependencies.\n\ngcc/objcp/ChangeLog:\n2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n\n\t* objcp-lang.c: Do not include except.h.\n\t* Make-lang.in: Update dependencies.\n\ngcc/java/ChangeLog:\n2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n\n\t* lang.c: Do not include except.h\n\t* except.c: Likewise.\n\t(doing_eh): New, moved from except.c (in gcc/) but removed the\n\tdo_warning flag.\n\t(maybe_start_try): Update doing_eh call.\n\t* Make-lang.in: Update dependencies.\n\ngcc/ada/ChangeLog:\n2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n\n\t* gcc-interface/misc.c: Do not include except.h.\n\t* gcc-interface/Make-lang.in: Update dependencies.\n\ngcc/fortran/ChangeLog:\n2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n\n\t* Make-lang.in: Update dependencies.\n\nFrom-SVN: r161484", "tree": {"sha": "e5d19eb8eea815fc1117fd2ff13d0744588da0cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5d19eb8eea815fc1117fd2ff13d0744588da0cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b06d379028526625f4b9e0cf5d5f5137de950d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b06d379028526625f4b9e0cf5d5f5137de950d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b06d379028526625f4b9e0cf5d5f5137de950d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b06d379028526625f4b9e0cf5d5f5137de950d4/comments", "author": null, "committer": null, "parents": [{"sha": "6d41cd02387ab457b69206742af9edb8977f725d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d41cd02387ab457b69206742af9edb8977f725d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d41cd02387ab457b69206742af9edb8977f725d"}], "stats": {"total": 284, "additions": 184, "deletions": 100}, "files": [{"sha": "7b5976187e9fa7f8c7f1a02b7b6713c28d816ec9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -1,3 +1,24 @@\n+2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* system.h: Poison GCC_EXCEPT_H for front-end files.\n+\n+\t* langhooks.h (struct lang_hooks): Add eh_protect_cleanup_actions\n+\tlanghook.\n+\t* langhooks-def.h (LANG_HOOKS_EH_PROTECT_CLEANUP_ACTIONS) New.\n+\tDefine to NULL by default.\n+\t* except.h: Define GCC_EXCEPT_H.\n+\t(doing_eh): Remove prototype.\n+\t(init_eh, init_eh_for_function): Move prototypes to toplev.h.\n+\t(lang_protect_cleanup_actions): Remove.\n+\t* except.c (lang_protect_cleanup_actions): Remove.\n+\t(doing_eh): Remove.\n+\t(gen_eh_region): Don't check doing_eh here.\n+\t* toplev.h (init_eh, init_eh_for_function_): Moved from except.h.\n+\t* tree-eh.c (honor_protect_cleanup_actions): Use new langhook\n+\tinstead of lang_protect_cleanup_actions.\n+\t* omp-low.c (maybe_catch_exception): Likewise.\n+\t* Makefile.in: Update dependencies.\n+\n 2010-06-28  Bingfeng Mei <bmei@broadcom.com>\n \n         * cgraph.h (struct varpool_node): new used_from_object_file flag."}, {"sha": "aa3f74d2683169b9452d5caf3160fe93e2c45f4f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -2081,7 +2081,7 @@ c-family/c-common.o : c-family/c-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \n c-family/c-cppbuiltin.o : c-family/c-cppbuiltin.c $(CONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(TM_H) $(TREE_H) version.h $(C_COMMON_H) $(C_PRAGMA_H) \\\n-\t$(FLAGS_H) $(TOPLEV_H) output.h $(EXCEPT_H) $(TREE_H) $(TARGET_H) \\\n+\t$(FLAGS_H) $(TOPLEV_H) output.h $(TREE_H) $(TARGET_H) \\\n \t$(TM_P_H) $(BASEVER) debug.h $(CPP_ID_DATA_H)\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n \t\t-DBASEVER=$(BASEVER_s) $< $(OUTPUT_OPTION)\n@@ -2283,26 +2283,26 @@ lto-cgraph.o: lto-cgraph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h   \\\n    $(TM_H) $(TOPLEV_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) input.h \\\n    $(HASHTAB_H) langhooks.h $(BASIC_BLOCK_H) \\\n    $(TREE_FLOW_H) $(CGRAPH_H) $(FUNCTION_H) $(GGC_H) $(DIAGNOSTIC_CORE_H) \\\n-   except.h $(TIMEVAR_H) output.h pointer-set.h $(LTO_STREAMER_H) $(GCOV_IO_H)\n+   $(EXCEPT_H) $(TIMEVAR_H) output.h pointer-set.h $(LTO_STREAMER_H) $(GCOV_IO_H)\n lto-streamer-in.o: lto-streamer-in.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TOPLEV_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) input.h \\\n    $(HASHTAB_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(TREE_PASS_H) $(CGRAPH_H) \\\n    $(FUNCTION_H) $(GGC_H) $(DIAGNOSTIC_H) libfuncs.h $(EXCEPT_H) debug.h \\\n-   $(TIMEVAR_H) output.h $(IPA_UTILS_H) $(LTO_STREAMER_H)\n+   $(TIMEVAR_H) output.h $(IPA_UTILS_H) $(LTO_STREAMER_H) toplev.h\n lto-streamer-out.o : lto-streamer-out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TOPLEV_H) $(TREE_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) input.h \\\n    $(HASHTAB_H) $(BASIC_BLOCK_H) tree-iterator.h \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) $(CGRAPH_H) $(FUNCTION_H) $(GGC_H) \\\n-   $(DIAGNOSTIC_CORE_H) except.h $(LTO_STREAMER_H) $(TOPLEV_H)\n+   $(DIAGNOSTIC_CORE_H) $(EXCEPT_H) $(LTO_STREAMER_H) $(TOPLEV_H)\n lto-section-in.o: lto-section-in.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TOPLEV_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) input.h \\\n    $(HASHTAB_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(CGRAPH_H) $(FUNCTION_H) \\\n-   $(GGC_H) $(DIAGNOSTIC_CORE_H) except.h $(TIMEVAR_H) output.h \\\n+   $(GGC_H) $(DIAGNOSTIC_CORE_H) $(EXCEPT_H) $(TIMEVAR_H) output.h \\\n    $(LTO_STREAMER_H) lto-compress.h\n lto-section-out.o : lto-section-out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TOPLEV_H) $(TREE_H) $(EXPR_H) $(PARAMS_H) input.h \\\n    $(HASHTAB_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(TREE_PASS_H) \\\n-   $(CGRAPH_H) $(FUNCTION_H) $(GGC_H) except.h pointer-set.h \\\n+   $(CGRAPH_H) $(FUNCTION_H) $(GGC_H) $(EXCEPT_H) pointer-set.h \\\n    $(BITMAP_H) langhooks.h $(LTO_STREAMER_H) lto-compress.h\n lto-symtab.o: lto-symtab.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    toplev.h $(TREE_H) $(GIMPLE_H) $(GGC_H) $(LAMBDA_H) $(HASHTAB_H) \\\n@@ -4419,7 +4419,7 @@ PLUGIN_HEADERS = $(TREE_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   $(host_xm_file_list) $(host_xm_include_list) $(xm_include_list) \\\n   intl.h $(PLUGIN_VERSION_H) $(DIAGNOSTIC_H) $(C_COMMON_H) $(C_PRETTY_PRINT_H) \\\n   tree-iterator.h $(PLUGIN_H) $(TREE_FLOW_H) langhooks.h incpath.h debug.h \\\n-  except.h tree-ssa-sccvn.h real.h output.h $(IPA_UTILS_H) \\\n+  $(EXCEPT_H) tree-ssa-sccvn.h real.h output.h $(IPA_UTILS_H) \\\n   $(C_PRAGMA_H)  $(CPPLIB_H)  $(FUNCTION_H) \\\n   cppdefault.h flags.h $(MD5_H) params.def params.h prefix.h tree-inline.h \\\n   $(IPA_PROP_H) $(RTL_H) $(TM_P_H) $(CFGLOOP_H) $(EMIT_RTL_H) version.h"}, {"sha": "4046a3a1e8966883e1259ae9e6d15c56e0c92b6e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -1,3 +1,8 @@\n+2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* gcc-interface/misc.c: Do not include except.h.\n+\t* gcc-interface/Make-lang.in: Update dependencies.\n+\n 2010-06-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c: Include tree-flow.h."}, {"sha": "095ae08bbad2eb97ff805514dff6833263a7fd9a", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -1244,7 +1244,7 @@ ada/decl.o : ada/gcc-interface/decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \n ada/misc.o : ada/gcc-interface/misc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(DIAGNOSTIC_H) $(TARGET_H) $(FUNCTION_H) \\\n-   $(FLAGS_H) debug.h toplev.h $(EXCEPT_H) langhooks.h \\\n+   $(FLAGS_H) debug.h toplev.h langhooks.h \\\n    $(LANGHOOKS_DEF_H) opts.h options.h $(TREE_INLINE_H) $(PLUGIN_H) \\\n    ada/gcc-interface/ada.h ada/adadecode.h ada/types.h ada/atree.h \\\n    ada/elists.h ada/namet.h ada/nlists.h ada/stringt.h ada/uintp.h ada/fe.h \\"}, {"sha": "4033173d78249556215ec731045094460ab9caa5", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -25,7 +25,7 @@\n \n /* This file contains parts of the compiler that are required for interfacing\n    with GCC but otherwise do nothing and parts of Gigi that need to know\n-   about RTL.  */\n+   about GIMPLE.  */\n \n #include \"config.h\"\n #include \"system.h\"\n@@ -44,7 +44,6 @@\n #include \"options.h\"\n #include \"plugin.h\"\n #include \"function.h\"\t/* For pass_by_reference.  */\n-#include \"except.h\"\t/* For USING_SJLJ_EXCEPTIONS.  */\n \n #include \"ada.h\"\n #include \"adadecode.h\""}, {"sha": "5b575ee1b3d791aa7f8b5d1ed515eb076ee70266", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -1,3 +1,7 @@\n+2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* c-cppbuiltin.c: Do not include except.h.\n+\n 2010-06-24  Andi Kleen  <ak@linux.intel.com>\n \n         * c-common.c (warn_for_omitted_condop): New."}, {"sha": "fbace227195b29303cb85bd8a5a17bea5462c9e5", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -28,7 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-common.h\"\n #include \"c-pragma.h\"\n #include \"output.h\"\n-#include \"except.h\"\t\t/* For USING_SJLJ_EXCEPTIONS.  */\n #include \"debug.h\"\t\t/* For dwarf2out_do_cfi_asm.  */\n #include \"toplev.h\"\n #include \"tm_p.h\"\t\t/* For TARGET_CPU_CPP_BUILTINS & friends.  */"}, {"sha": "3b5f1bd82de5c26262f86b9a25bf6a5c94137d8d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -1,3 +1,25 @@\n+2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* init.c: Do not include except.h.\n+\t* decl.c: Likewise.\n+\t* expr.c: Likewise.\n+\t* cp-lang.c: Likewise.\n+\t* pt.c: Likewise.\n+\t* semantics.c: Likewise.\n+\t* decl2.c: Likewise.\n+\t* except.c: Likewise.\n+\t(init_exception_processing): Do not set the removed\n+\tlang_protect_cleanup_actions here.\n+\t(cp_protect_cleanup_actions): Make non-static and remove prototype.\n+\t(doing_eh): New, moved from except.c but removed the do_warning flag.\n+\t(expand_start_catch_block): Update doing_eh call.\n+\t(expand_end_catch_block): Likewise.\n+\t(build_throw): Likewise.\n+\t* cp-tree.h: Prototype cp_protect_cleanup_actions.\n+\t* cp-objcp-common.h: Set LANG_HOOKS_EH_PROTECT_CLEANUP_ACTIONS to\n+\tcp_protect_cleanup_actions.\n+\t* Make-lang.in: Update dependencies.\n+\n 2010-06-26  Jason Merrill  <jason@redhat.com>\n \n \t* call.c (add_function_candidate): Set LOOKUP_COPY_PARM for any"}, {"sha": "f664c78f12f580afe3c1135a9bc0d3de0a96210f", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -249,14 +249,14 @@ cp/lex.o: cp/lex.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n   $(C_PRAGMA_H) toplev.h output.h input.h cp/operators.def $(TM_P_H)\n cp/cp-lang.o: cp/cp-lang.c $(CXX_TREE_H) $(TM_H) toplev.h debug.h langhooks.h \\\n   $(LANGHOOKS_DEF_H) $(C_COMMON_H) gtype-cp.h gt-cp-cp-lang.h \\\n-  cp/cp-objcp-common.h $(EXPR_H) $(EXCEPT_H)\n+  cp/cp-objcp-common.h $(EXPR_H)\n cp/decl.o: cp/decl.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) cp/decl.h \\\n-  output.h $(EXCEPT_H) toplev.h $(HASHTAB_H) $(RTL_H) \\\n+  output.h toplev.h $(HASHTAB_H) $(RTL_H) \\\n   cp/operators.def $(TM_P_H) $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(C_PRAGMA_H) \\\n   debug.h gt-cp-decl.h $(TIMEVAR_H) $(TREE_FLOW_H) $(TARGET_H) $(PLUGIN_H) \\\n   intl.h tree-iterator.h $(SPLAY_TREE_H)\n cp/decl2.o: cp/decl2.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) cp/decl.h \\\n-  output.h $(EXCEPT_H) toplev.h $(C_COMMON_H) gt-cp-decl2.h $(CGRAPH_H) \\\n+  output.h toplev.h $(C_COMMON_H) gt-cp-decl2.h $(CGRAPH_H) \\\n   $(C_PRAGMA_H) $(TREE_DUMP_H) intl.h $(TARGET_H) $(GIMPLE_H) $(POINTER_SET_H) \\\n   $(SPLAY_TREE_H) c-family/c-ada-spec.h\n cp/cp-objcp-common.o : cp/cp-objcp-common.c $(CONFIG_H) $(SYSTEM_H) \\\n@@ -288,19 +288,17 @@ cp/tree.o: cp/tree.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h \\\n cp/ptree.o: cp/ptree.c $(CXX_TREE_H) $(TM_H)\n cp/rtti.o: cp/rtti.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h convert.h \\\n   $(TARGET_H) $(C_PRAGMA_H) gt-cp-rtti.h intl.h\n-cp/except.o: cp/except.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) $(EXCEPT_H) \\\n+cp/except.o: cp/except.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n   toplev.h cp/cfns.h $(TREE_INLINE_H) $(TARGET_H)\n-cp/expr.o: cp/expr.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) \\\n-  toplev.h $(EXCEPT_H) $(TM_P_H)\n+cp/expr.o: cp/expr.c $(CXX_TREE_H) $(TM_H) $(FLAGS_H) toplev.h $(TM_P_H)\n cp/pt.o: cp/pt.c $(CXX_TREE_H) $(TM_H) cp/decl.h cp/cp-objcp-common.h \\\n-  toplev.h $(EXCEPT_H) $(TREE_INLINE_H) pointer-set.h gt-cp-pt.h \\\n-  vecprim.h intl.h\n+  toplev.h $(TREE_INLINE_H) pointer-set.h gt-cp-pt.h vecprim.h intl.h\n cp/error.o: cp/error.c $(CXX_TREE_H) $(TM_H) toplev.h $(DIAGNOSTIC_H) \\\n   $(FLAGS_H) $(REAL_H) $(LANGHOOKS_DEF_H) $(CXX_PRETTY_PRINT_H) \\\n   tree-diagnostic.h tree-pretty-print.h\n cp/repo.o: cp/repo.c $(CXX_TREE_H) $(TM_H) toplev.h $(DIAGNOSTIC_CORE_H) \\\n   gt-cp-repo.h\n-cp/semantics.o: cp/semantics.c $(CXX_TREE_H) $(TM_H) $(EXCEPT_H) toplev.h \\\n+cp/semantics.o: cp/semantics.c $(CXX_TREE_H) $(TM_H) toplev.h \\\n   $(FLAGS_H) output.h $(RTL_H) $(TIMEVAR_H) \\\n   $(TREE_INLINE_H) $(CGRAPH_H) $(TARGET_H) $(C_COMMON_H) $(GIMPLE_H) \\\n   bitmap.h gt-cp-semantics.h"}, {"sha": "fb687b81685f6d0733669e8e4f68f7864ebc8673", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -32,7 +32,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\n #include \"cp-objcp-common.h\"\n #include \"hashtab.h\"\n-#include \"except.h\"\n \n enum c_language_kind c_language = clk_cxx;\n static void cp_init_ts (void);"}, {"sha": "f2d4aa1cceb85c5c7bd6b6b9e6722c12e180e859", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -143,4 +143,7 @@ extern bool cp_function_decl_explicit_p (tree decl);\n #undef LANG_HOOKS_EH_USE_CXA_END_CLEANUP\n #define LANG_HOOKS_EH_USE_CXA_END_CLEANUP true\n \n+#undef LANG_HOOKS_EH_PROTECT_CLEANUP_ACTIONS\n+#define LANG_HOOKS_EH_PROTECT_CLEANUP_ACTIONS cp_protect_cleanup_actions\n+\n #endif /* GCC_CP_OBJCP_COMMON */"}, {"sha": "285dac73c81c95cf92f42e35a32a2c4e6d6bd0b7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -4855,6 +4855,7 @@ extern tree eh_type_info\t\t\t(tree);\n extern tree begin_eh_spec_block\t\t\t(void);\n extern void finish_eh_spec_block\t\t(tree, tree);\n extern tree build_eh_type_type\t\t\t(tree);\n+extern tree cp_protect_cleanup_actions\t\t(void);\n \n /* in expr.c */\n extern tree cplus_expand_constant\t\t(tree);"}, {"sha": "48d2b69075291b5f95bcd0bf881e80f0b76b7ff1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -40,7 +40,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"decl.h\"\n #include \"intl.h\"\n #include \"output.h\"\n-#include \"except.h\"\n #include \"toplev.h\"\n #include \"hashtab.h\"\n #include \"tm_p.h\""}, {"sha": "1e088e0464ac622dd92092356d5d40428d156415", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -37,7 +37,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cp-tree.h\"\n #include \"decl.h\"\n #include \"output.h\"\n-#include \"except.h\"\n #include \"toplev.h\"\n #include \"timevar.h\"\n #include \"cpplib.h\""}, {"sha": "79bab76cc5a3a9df1e4767d7cb96b5bb7e31b552", "filename": "gcc/cp/except.c", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -31,7 +31,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cp-tree.h\"\n #include \"flags.h\"\n #include \"output.h\"\n-#include \"except.h\"\n #include \"toplev.h\"\n #include \"tree-inline.h\"\n #include \"tree-iterator.h\"\n@@ -50,7 +49,6 @@ static tree wrap_cleanups_r (tree *, int *, void *);\n static int complete_ptr_ref_or_void_ptr_p (tree, tree);\n static bool is_admissible_throw_operand (tree);\n static int can_convert_eh (tree, tree);\n-static tree cp_protect_cleanup_actions (void);\n \n /* Sets up all the global eh stuff that needs to be initialized at the\n    start of compilation.  */\n@@ -72,14 +70,12 @@ init_exception_processing (void)\n   tmp = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n   call_unexpected_node\n     = push_throw_library_fn (get_identifier (\"__cxa_call_unexpected\"), tmp);\n-\n-  lang_protect_cleanup_actions = &cp_protect_cleanup_actions;\n }\n \n /* Returns an expression to be executed if an unhandled exception is\n    propagated out of a cleanup region.  */\n \n-static tree\n+tree\n cp_protect_cleanup_actions (void)\n {\n   /* [except.terminate]\n@@ -407,6 +403,30 @@ initialize_handler_parm (tree decl, tree exp)\n \t\t  LOOKUP_ONLYCONVERTING|DIRECT_BIND);\n }\n \n+\f\n+/* Routine to see if exception handling is turned on.\n+   DO_WARN is nonzero if we want to inform the user that exception\n+   handling is turned off.\n+\n+   This is used to ensure that -fexceptions has been specified if the\n+   compiler tries to use any exception-specific functions.  */\n+\n+static inline int\n+doing_eh (void)\n+{\n+  if (! flag_exceptions)\n+    {\n+      static int warned = 0;\n+      if (! warned)\n+\t{\n+\t  error (\"exception handling disabled, use -fexceptions to enable\");\n+\t  warned = 1;\n+\t}\n+      return 0;\n+    }\n+  return 1;\n+}\n+\n /* Call this to start a catch block.  DECL is the catch parameter.  */\n \n tree\n@@ -415,7 +435,7 @@ expand_start_catch_block (tree decl)\n   tree exp;\n   tree type, init;\n \n-  if (! doing_eh (1))\n+  if (! doing_eh ())\n     return NULL_TREE;\n \n   /* Make sure this declaration is reasonable.  */\n@@ -494,7 +514,7 @@ expand_start_catch_block (tree decl)\n void\n expand_end_catch_block (void)\n {\n-  if (! doing_eh (1))\n+  if (! doing_eh ())\n     return;\n \n   /* The exception being handled is rethrown if control reaches the end of\n@@ -641,7 +661,7 @@ build_throw (tree exp)\n \treturn error_mark_node;\n     }\n \n-  if (! doing_eh (1))\n+  if (! doing_eh ())\n     return error_mark_node;\n \n   if (exp && decl_is_java_type (TREE_TYPE (exp), 1))"}, {"sha": "681834d9a377cfa77d6ee803c3ccebd6afa0744e", "filename": "gcc/cp/expr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexpr.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -28,7 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"cp-tree.h\"\n #include \"toplev.h\"\n-#include \"except.h\"\n #include \"tm_p.h\"\n \n /* Expand C++-specific constants.  Currently, this means PTRMEM_CST.  */"}, {"sha": "30808b233cea2f8f159132e127bdd25c1d430749", "filename": "gcc/cp/init.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -30,7 +30,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cp-tree.h\"\n #include \"flags.h\"\n #include \"output.h\"\n-#include \"except.h\"\n #include \"toplev.h\"\n #include \"target.h\"\n "}, {"sha": "863218d68a90e354079bee7d34738410304c4ff1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -40,7 +40,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"decl.h\"\n #include \"output.h\"\n-#include \"except.h\"\n #include \"toplev.h\"\n #include \"timevar.h\"\n #include \"tree-iterator.h\""}, {"sha": "e750937dfe1bb52d1665819b8493f1e5f691c8fb", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -33,7 +33,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-family/c-common.h\"\n #include \"tree-inline.h\"\n #include \"tree-mudflap.h\"\n-#include \"except.h\"\n #include \"toplev.h\"\n #include \"flags.h\"\n #include \"output.h\""}, {"sha": "285d4a657e805b416b0b03c08a455d148104038c", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -40,7 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n \n    During pass_lower_eh (tree-eh.c) we record the nested structure\n    of the TRY nodes in EH_REGION nodes in CFUN->EH->REGION_TREE.\n-   We expand the lang_protect_cleanup_actions hook into MUST_NOT_THROW\n+   We expand the eh_protect_cleanup_actions langhook into MUST_NOT_THROW\n    regions at this time.  We can then flatten the statements within\n    the TRY nodes to straight-line code.  Statements that had been within\n    TRY nodes that can throw are recorded within CFUN->EH->THROW_STMT_TABLE,\n@@ -150,10 +150,6 @@ along with GCC; see the file COPYING3.  If not see\n #define EH_RETURN_DATA_REGNO(N) INVALID_REGNUM\n #endif\n \n-/* Protect cleanup actions with must-not-throw regions, with a call\n-   to the given failure handler.  */\n-tree (*lang_protect_cleanup_actions) (void);\n-\n static GTY(()) int call_site_base;\n static GTY ((param_is (union tree_node)))\n   htab_t type_to_runtime_map;\n@@ -202,30 +198,6 @@ static int sjlj_size_of_call_site_table (void);\n static void dw2_output_call_site_table (int, int);\n static void sjlj_output_call_site_table (void);\n \n-\f\n-/* Routine to see if exception handling is turned on.\n-   DO_WARN is nonzero if we want to inform the user that exception\n-   handling is turned off.\n-\n-   This is used to ensure that -fexceptions has been specified if the\n-   compiler tries to use any exception-specific functions.  */\n-\n-int\n-doing_eh (int do_warn)\n-{\n-  if (! flag_exceptions)\n-    {\n-      static int warned = 0;\n-      if (! warned && do_warn)\n-\t{\n-\t  error (\"exception handling disabled, use -fexceptions to enable\");\n-\t  warned = 1;\n-\t}\n-      return 0;\n-    }\n-  return 1;\n-}\n-\n \f\n void\n init_eh (void)\n@@ -345,10 +317,6 @@ gen_eh_region (enum eh_region_type type, eh_region outer)\n {\n   eh_region new_eh;\n \n-#ifdef ENABLE_CHECKING\n-  gcc_assert (doing_eh (0));\n-#endif\n-\n   /* Insert a new blank region as a leaf in the tree.  */\n   new_eh = ggc_alloc_cleared_eh_region_d ();\n   new_eh->type = type;"}, {"sha": "72fd76ef646a66867b5845795e5fa55e5fec1003", "filename": "gcc/except.h", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -19,6 +19,13 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+/* No include guards here, but define an include file marker anyway, so\n+   that the compiler can keep track of where this file is included.  This\n+   is e.g. used to avoid including this file in front-end specific files.  */\n+#ifndef GCC_EXCEPT_H\n+#  define GCC_EXCEPT_H\n+#endif\n+\n #include \"hashtab.h\"\n #include \"vecprim.h\"\n #include \"vecir.h\"\n@@ -222,14 +229,10 @@ struct GTY(()) eh_status\n };\n \n \n-/* Test: is exception handling turned on?  */\n-extern int doing_eh (int);\n-\n /* Invokes CALLBACK for every exception handler label.  Only used by old\n    loop hackery; should not be used by new code.  */\n extern void for_each_eh_label (void (*) (rtx));\n \n-extern void init_eh (void);\n extern void init_eh_for_function (void);\n \n extern void remove_eh_landing_pad (eh_landing_pad);\n@@ -287,14 +290,6 @@ extern void assign_filter_values (void);\n extern eh_region get_eh_region_from_rtx (const_rtx);\n extern eh_landing_pad get_eh_landing_pad_from_rtx (const_rtx);\n \n-/* If non-NULL, this is a function that returns a function decl to be\n-   executed if an unhandled exception is propagated out of a cleanup\n-   region.  For example, in C++, an exception thrown by a destructor\n-   during stack unwinding is required to result in a call to\n-   `std::terminate', so the C++ version of this function returns a\n-   FUNCTION_DECL for `std::terminate'.  */\n-extern tree (*lang_protect_cleanup_actions) (void);\n-\n struct GTY(()) throw_stmt_node {\n   gimple stmt;\n   int lp_nr;"}, {"sha": "fc8445c784dfa71fa87173bb5a52841eadc31b6f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -1,3 +1,7 @@\n+2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* Make-lang.in: Update dependencies.\n+\n 2010-06-27  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* gfortran.h (gfc_code): Split backend_decl field into cycle_label"}, {"sha": "2a8c791c445e6b005cc3e18a5162a9472a09cfa0", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -336,7 +336,7 @@ GFORTRAN_TRANS_DEPS = fortran/gfortran.h fortran/libgfortran.h \\\n fortran/f95-lang.o: $(GFORTRAN_TRANS_DEPS) fortran/mathbuiltins.def \\\n   gt-fortran-f95-lang.h gtype-fortran.h $(CGRAPH_H) $(TARGET_H) fortran/cpp.h \\\n   $(BUILTINS_DEF) fortran/types.def \\\n-  libfuncs.h expr.h except.h\n+  libfuncs.h expr.h\n fortran/scanner.o: toplev.h fortran/cpp.h\n fortran/convert.o: $(GFORTRAN_TRANS_DEPS)\n fortran/trans.o: $(GFORTRAN_TRANS_DEPS) tree-iterator.h"}, {"sha": "0d50a7f44393fff20fc9ee8c5c0494d169b22670", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -1,3 +1,12 @@\n+2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* lang.c: Do not include except.h\n+\t* except.c: Likewise.\n+\t(doing_eh): New, moved from except.c (in gcc/) but removed the\n+\tdo_warning flag.\n+\t(maybe_start_try): Update doing_eh call.\n+\t* Make-lang.in: Update dependencies.\n+\n 2010-06-23  Anatoly Sokolov  <aesok@post.ru>\n \n \t* decl.c (java_init_decl_processing): Use double_int_to_tree instead"}, {"sha": "5e240ed0743d4acd0324dc30cdec47dca0d40987", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -285,7 +285,7 @@ java/decl.o: java/decl.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h \\\n   libfuncs.h java/java-except.h $(GGC_H) $(REAL_H) gt-java-decl.h \\\n   $(TARGET_H) $(CGRAPH_H) langhooks.h\n java/except.o: java/except.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h $(REAL_H) \\\n-  java/javaop.h java/java-opcodes.h except.h java/java-except.h \\\n+  java/javaop.h java/java-opcodes.h java/java-except.h \\\n   toplev.h $(SYSTEM_H) coretypes.h\n java/expr.o: java/expr.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h $(REAL_H) \\\n   java/javaop.h java/java-opcodes.h \\\n@@ -302,7 +302,7 @@ java/jvgenmain.o: java/jvgenmain.c $(CONFIG_H) $(JAVA_TREE_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) intl.h\n java/lang.o: java/lang.c $(CONFIG_H) $(JAVA_TREE_H) java/jcf.h input.h \\\n   toplev.h $(SYSTEM_H) coretypes.h $(TM_H) $(DIAGNOSTIC_H) \\\n-  langhooks.h $(LANGHOOKS_DEF_H) gt-java-lang.h opts.h options.h $(EXCEPT_H)\n+  langhooks.h $(LANGHOOKS_DEF_H) gt-java-lang.h opts.h options.h\n java/mangle.o: java/mangle.c $(CONFIG_H) java/jcf.h $(JAVA_TREE_H) $(SYSTEM_H) \\\n   coretypes.h $(TM_H) toplev.h $(GGC_H) gt-java-mangle.h $(LANGHOOKS_DEF_H)\n java/mangle_name.o: java/mangle_name.c $(CONFIG_H) java/jcf.h $(JAVA_TREE_H) \\"}, {"sha": "2c3aead1a4cc42f046b0cbf04359f2230073da59", "filename": "gcc/java/except.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -31,7 +31,6 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"javaop.h\"\n #include \"java-opcodes.h\"\n #include \"jcf.h\"\n-#include \"except.h\"\t/* for doing_eh.  */\n #include \"java-except.h\"\n #include \"toplev.h\"\n #include \"tree-iterator.h\"\n@@ -565,6 +564,29 @@ check_start_handlers (struct eh_range *range, int pc)\n }\n \n \n+/* Routine to see if exception handling is turned on.\n+   DO_WARN is nonzero if we want to inform the user that exception\n+   handling is turned off.\n+\n+   This is used to ensure that -fexceptions has been specified if the\n+   compiler tries to use any exception-specific functions.  */\n+\n+static inline int\n+doing_eh (void)\n+{\n+  if (! flag_exceptions)\n+    {\n+      static int warned = 0;\n+      if (! warned)\n+\t{\n+\t  error (\"exception handling disabled, use -fexceptions to enable\");\n+\t  warned = 1;\n+\t}\n+      return 0;\n+    }\n+  return 1;\n+}\n+\n static struct eh_range *current_range;\n \n /* Emit any start-of-try-range starting at start_pc and ending after\n@@ -574,7 +596,7 @@ void\n maybe_start_try (int start_pc, int end_pc)\n {\n   struct eh_range *range;\n-  if (! doing_eh (1))\n+  if (! doing_eh ())\n     return;\n \n   range = find_handler (start_pc);"}, {"sha": "6c31947c6a492cf2171c9660c8ddb74ca6a0c392", "filename": "gcc/java/lang.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -43,7 +43,6 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"tree-dump.h\"\n #include \"opts.h\"\n #include \"options.h\"\n-#include \"except.h\"\t/* For USING_SJLJ_EXCEPTIONS.  */\n \n static bool java_init (void);\n static void java_finish (void);"}, {"sha": "68085c72c9ef7bca8dc838f11267f70a88d8898f", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -110,6 +110,7 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n #define LANG_HOOKS_INIT_TS\t\tlhd_do_nothing\n #define LANG_HOOKS_EH_PERSONALITY\tlhd_gcc_personality\n #define LANG_HOOKS_EH_RUNTIME_TYPE\tlhd_pass_through_t\n+#define LANG_HOOKS_EH_PROTECT_CLEANUP_ACTIONS\tNULL\n #define LANG_HOOKS_EH_USE_CXA_END_CLEANUP\tfalse\n #define LANG_HOOKS_DEEP_UNSHARING\tfalse\n \n@@ -299,6 +300,7 @@ extern void lhd_end_section (void);\n   LANG_HOOKS_EXPR_TO_DECL, \\\n   LANG_HOOKS_EH_PERSONALITY, \\\n   LANG_HOOKS_EH_RUNTIME_TYPE, \\\n+  LANG_HOOKS_EH_PROTECT_CLEANUP_ACTIONS, \\\n   LANG_HOOKS_EH_USE_CXA_END_CLEANUP, \\\n   LANG_HOOKS_DEEP_UNSHARING \\\n }"}, {"sha": "483a8dcdd7728063489e8d0afdbf8b5e7a371120", "filename": "gcc/langhooks.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -446,6 +446,14 @@ struct lang_hooks\n   /* Map a type to a runtime object to match type.  */\n   tree (*eh_runtime_type) (tree);\n \n+  /* If non-NULL, this is a function that returns a function decl to be\n+     executed if an unhandled exception is propagated out of a cleanup\n+     region.  For example, in C++, an exception thrown by a destructor\n+     during stack unwinding is required to result in a call to\n+     `std::terminate', so the C++ version of this function returns a\n+     FUNCTION_DECL for `std::terminate'.  */\n+  tree (*eh_protect_cleanup_actions) (void);\n+\n   /* True if this language uses __cxa_end_cleanup when the ARM EABI\n      is enabled.  */\n   bool eh_use_cxa_end_cleanup;"}, {"sha": "099bc6595acf0a4823bd31d65706a0c5839b2ba2", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -1,3 +1,7 @@\n+2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* objc-act.c: Do not include except.h.\n+\n 2010-06-08  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n \n \t* objc-act.h (ALLOC_OBJC_TYPE_LANG_SPECIFIC): Use typed GC"}, {"sha": "45b1020762914b1d642fe6a6585a742b9b77c80b", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -59,7 +59,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"objc-act.h\"\n #include \"input.h\"\n-#include \"except.h\"\t/* For USING_SJLJ_EXCEPTIONS.  */\n #include \"function.h\"\n #include \"output.h\"\n #include \"toplev.h\""}, {"sha": "109d2327ed6c306183451b803824cf2d2eb0ae7b", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -1,3 +1,8 @@\n+2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* objcp-lang.c: Do not include except.h.\n+\t* Make-lang.in: Update dependencies.\n+\n 2010-06-25  Joseph Myers  <joseph@codesourcery.com>\n \n \t* lang-specs.h: Remove +e handling."}, {"sha": "22dc30f366ef39092e3ed3f99f127f2a4a8eef0d", "filename": "gcc/objcp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fobjcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fobjcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FMake-lang.in?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -73,7 +73,7 @@ cc1objplus$(exeext): $(OBJCXX_OBJS) cc1objplus-checksum.o $(BACKEND) $(LIBDEPS)\n objcp/objcp-lang.o : objcp/objcp-lang.c \\\n   $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(CXX_TREE_H) \\\n   $(C_COMMON_H) $(LANGHOOKS_DEF_H) objc/objc-act.h cp/cp-objcp-common.h \\\n-  gtype-objcp.h $(EXCEPT_H)\n+  gtype-objcp.h\n \n objcp/objcp-decl.o : objcp/objcp-decl.c \\\n    $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(CXX_TREE_H) \\"}, {"sha": "70a605bb87e35dfd2d19171361e356f319454d72", "filename": "gcc/objcp/objcp-lang.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fobjcp%2Fobjcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fobjcp%2Fobjcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2Fobjcp-lang.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -30,7 +30,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n #include \"cp-objcp-common.h\"\n-#include \"except.h\"\t/* For USING_SJLJ_EXCEPTIONS.  */\n \n enum c_language_kind c_language = clk_objcxx;\n static void objcxx_init_ts (void);"}, {"sha": "53309ad02a90c2bd6dfca6e58daa7ac80bda01f9", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -3112,8 +3112,8 @@ maybe_catch_exception (gimple_seq body)\n   if (!flag_exceptions)\n     return body;\n \n-  if (lang_protect_cleanup_actions)\n-    decl = lang_protect_cleanup_actions ();\n+  if (lang_hooks.eh_protect_cleanup_actions != NULL)\n+    decl = lang_hooks.eh_protect_cleanup_actions ();\n   else\n     decl = built_in_decls[BUILT_IN_TRAP];\n "}, {"sha": "af3dd3a64e7d863032bbfb1294345440e42e257c", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -799,7 +799,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n /* Front ends should never have to include middle-end headers.  Enforce\n    this by poisoning the header double-include protection defines.  */\n #ifdef IN_GCC_FRONTEND\n-#pragma GCC poison GCC_RTL_H\n+#pragma GCC poison GCC_RTL_H GCC_EXCEPT_H\n #endif\n \n /* Note: not all uses of the `index' token (e.g. variable names and"}, {"sha": "2424fd1769574ae0d63b926bd6ca002ea3e886db", "filename": "gcc/toplev.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -49,6 +49,11 @@ extern void init_optimization_passes (void);\n extern void finish_optimization_passes (void);\n extern bool enable_rtl_dump_file (void);\n \n+/* In except.c.  Initialize exception handling.  This is used by the Ada\n+   and LTO front ends to initialize EH \"on demand\".  See lto-streamer-in.c\n+   and ada/gcc-interface/misc.c.  */\n+extern void init_eh (void);\n+\n extern void announce_function (tree);\n \n extern void error_for_asm (const_rtx, const char *, ...) ATTRIBUTE_GCC_DIAG(2,3);"}, {"sha": "3a6292c1b2ffdee4b02e65805da73bc61932b6e9", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b06d379028526625f4b9e0cf5d5f5137de950d4/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=3b06d379028526625f4b9e0cf5d5f5137de950d4", "patch": "@@ -951,12 +951,12 @@ lower_try_finally_fallthru_label (struct leh_tf_state *tf)\n   return label;\n }\n \n-/* A subroutine of lower_try_finally.  If lang_protect_cleanup_actions\n-   returns non-null, then the language requires that the exception path out\n-   of a try_finally be treated specially.  To wit: the code within the\n-   finally block may not itself throw an exception.  We have two choices here.\n-   First we can duplicate the finally block and wrap it in a must_not_throw\n-   region.  Second, we can generate code like\n+/* A subroutine of lower_try_finally.  If the eh_protect_cleanup_actions\n+   langhook returns non-null, then the language requires that the exception\n+   path out of a try_finally be treated specially.  To wit: the code within\n+   the finally block may not itself throw an exception.  We have two choices\n+   here. First we can duplicate the finally block and wrap it in a\n+   must_not_throw region.  Second, we can generate code like\n \n \ttry {\n \t  finally_block;\n@@ -983,9 +983,9 @@ honor_protect_cleanup_actions (struct leh_state *outer_state,\n   gimple x;\n \n   /* First check for nothing to do.  */\n-  if (lang_protect_cleanup_actions == NULL)\n+  if (lang_hooks.eh_protect_cleanup_actions == NULL)\n     return;\n-  protect_cleanup_actions = lang_protect_cleanup_actions ();\n+  protect_cleanup_actions = lang_hooks.eh_protect_cleanup_actions ();\n   if (protect_cleanup_actions == NULL)\n     return;\n "}]}