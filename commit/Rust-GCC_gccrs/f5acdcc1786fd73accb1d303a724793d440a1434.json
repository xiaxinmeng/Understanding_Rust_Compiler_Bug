{"sha": "f5acdcc1786fd73accb1d303a724793d440a1434", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVhY2RjYzE3ODZmZDczYWNjYjFkMzAzYTcyNDc5M2Q0NDBhMTQzNA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-05-11T18:42:41Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-05-11T18:42:41Z"}, "message": "Initial revision\n\nFrom-SVN: r9622", "tree": {"sha": "47e2af076b3a94570a0b10fd93875d079c8e2db7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47e2af076b3a94570a0b10fd93875d079c8e2db7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5acdcc1786fd73accb1d303a724793d440a1434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5acdcc1786fd73accb1d303a724793d440a1434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5acdcc1786fd73accb1d303a724793d440a1434", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5acdcc1786fd73accb1d303a724793d440a1434/comments", "author": null, "committer": null, "parents": [{"sha": "6ae1498b9b51d10a7da1a091d030995d0b2ad05b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae1498b9b51d10a7da1a091d030995d0b2ad05b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ae1498b9b51d10a7da1a091d030995d0b2ad05b"}], "stats": {"total": 245, "additions": 245, "deletions": 0}, "files": [{"sha": "fba67c3280dac6dbd0aa8624c95c5149579c0095", "filename": "gcc/config/mips/netbsd.h", "status": "added", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5acdcc1786fd73accb1d303a724793d440a1434/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5acdcc1786fd73accb1d303a724793d440a1434/gcc%2Fconfig%2Fmips%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fnetbsd.h?ref=f5acdcc1786fd73accb1d303a724793d440a1434", "patch": "@@ -0,0 +1,229 @@\n+/* Definitions for DECstation running BSD as target machine for GNU compiler.\n+   Copyright (C) 1993 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#define DECSTATION\n+\n+/* Look for the include files in the system-defined places.  */\n+\n+#undef GPLUSPLUS_INCLUDE_DIR\n+#define GPLUSPLUS_INCLUDE_DIR \"/usr/include/g++\"\n+\n+#undef GCC_INCLUDE_DIR\n+#define GCC_INCLUDE_DIR \"/usr/include\"\n+\n+#undef INCLUDE_DEFAULTS\n+#define INCLUDE_DEFAULTS\t\t\\\n+  {\t\t\t\t\t\\\n+    { GPLUSPLUS_INCLUDE_DIR, 1, 1 },\t\\\n+    { GCC_INCLUDE_DIR, 0, 0 },\t\t\\\n+    { 0, 0, 0 }\t\t\t\t\\\n+  }\n+\n+/* Under NetBSD, the normal location of the various *crt*.o files is the\n+   /usr/lib directory.  */\n+\n+#undef STANDARD_STARTFILE_PREFIX\n+#define STANDARD_STARTFILE_PREFIX \"/usr/lib/\"\n+\n+/* Provide a LINK_SPEC appropriate for NetBSD.  Here we provide support\n+   for the special GCC options -static, -assert, and -nostdlib.  */\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \\\n+  \"%{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} \\\n+   %{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp %{static:-Bstatic} %{assert*}\"\n+\n+/* We have atexit(3) and strerror(3).  */\n+\n+#define HAVE_ATEXIT\n+#define HAVE_STRERROR\n+\n+/* Implicit library calls should use memcpy, not bcopy, etc.  */\n+\n+#define TARGET_MEM_FUNCTIONS\n+\n+/* Define mips-specific netbsd predefines... */\n+#ifndef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-D__ANSI_COMPAT \\\n+-DMIPSEL -DR3000 -DSYSTYPE_BSD -D_SYSTYPE_BSD -D__NetBSD__ -Dmips \\\n+-D__NO_LEADING_UNDERSCORES__ -D__GP_SUPPORT__ \\\n+-Dunix -D_R3000 \\\n+-Asystem(unix) -Asystem(NetBSD) -Amachine(mips)\"\n+#endif\n+\n+/* Always uses gas.  */\n+#ifndef ASM_SPEC\n+#define ASM_SPEC \"\\\n+%{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} %{v} \\\n+%{noasmopt:-O0} \\\n+%{!noasmopt:%{O:-O2} %{O1:-O2} %{O2:-O2} %{O3:-O3}} \\\n+%{g} %{g0} %{g1} %{g2} %{g3} \\\n+%{ggdb:-g} %{ggdb0:-g0} %{ggdb1:-g1} %{ggdb2:-g2} %{ggdb3:-g3} \\\n+%{gstabs:-g} %{gstabs0:-g0} %{gstabs1:-g1} %{gstabs2:-g2} %{gstabs3:-g3} \\\n+%{gstabs+:-g} %{gstabs+0:-g0} %{gstabs+1:-g1} %{gstabs+2:-g2} %{gstabs+3:-g3} \\\n+%{gcoff:-g} %{gcoff0:-g0} %{gcoff1:-g1} %{gcoff2:-g2} %{gcoff3:-g3}\"\n+#endif\n+\n+#ifndef CPP_SPEC\n+#define CPP_SPEC \"\\\n+%{posix:-D_POSIX_SOURCE} \\\n+%{mlong64:-D__SIZE_TYPE__=long\\\\ unsigned\\\\ int -D__PTRDIFF_TYPE__=long\\\\ int} \\\n+%{!mlong64:-D__SIZE_TYPE__=unsigned\\\\ int -D__PTRDIFF_TYPE__=int} \\\n+%{mips3:-U__mips -D__mips=3}\"\n+#endif\n+\n+#define LIB_SPEC \"%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}\"\n+#define STARTFILE_SPEC \"\"\n+\n+#ifndef MACHINE_TYPE\n+#define MACHINE_TYPE \"NetBSD/pmax\"\n+#endif\n+\n+#define TARGET_DEFAULT MASK_GAS\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n+#define LOCAL_LABEL_PREFIX\t\".\"\n+\n+#include \"mips/mips.h\"\n+\n+/*\n+ * Some imports from svr4.h in support of shared libraries.\n+ * Currently, we need the DECLARE_OBJECT_SIZE stuff.\n+ */\n+\n+/* Define the strings used for the special svr4 .type and .size directives.\n+   These strings generally do not vary from one system running svr4 to\n+   another, but if a given system (e.g. m88k running svr) needs to use\n+   different pseudo-op names for these, they may be overridden in the\n+   file which includes this one.  */\n+\n+#undef TYPE_ASM_OP\n+#undef SIZE_ASM_OP\n+#undef WEAK_ASM_OP\n+#define TYPE_ASM_OP\t\".type\"\n+#define SIZE_ASM_OP\t\".size\"\n+#define WEAK_ASM_OP\t\".weak\"\n+\n+/* The following macro defines the format used to output the second\n+   operand of the .type assembler directive.  Different svr4 assemblers\n+   expect various different forms for this operand.  The one given here\n+   is just a default.  You may need to override it in your machine-\n+   specific tm.h file (depending upon the particulars of your assembler).  */\n+\n+#undef TYPE_OPERAND_FMT\n+#define TYPE_OPERAND_FMT\t\"@%s\"\n+\n+/* Write the extra assembler code needed to declare a function's result.\n+   Most svr4 assemblers don't require any special declaration of the\n+   result value, but there are exceptions.  */\n+\n+#ifndef ASM_DECLARE_RESULT\n+#define ASM_DECLARE_RESULT(FILE, RESULT)\n+#endif\n+\n+/* These macros generate the special .type and .size directives which\n+   are used to set the corresponding fields of the linker symbol table\n+   entries in an ELF object file under SVR4.  These macros also output\n+   the starting labels for the relevant functions/objects.  */\n+\n+/* Write the extra assembler code needed to declare a function properly.\n+   Some svr4 assemblers need to also have something extra said about the\n+   function's return value.  We allow for that here.  */\n+\n+#undef ASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    putc (',', FILE);\t\t\t\t\t\t\t\\\n+    fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n+    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+    ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n+    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Write the extra assembler code needed to declare an object properly.  */\n+\n+#undef ASM_DECLARE_OBJECT_NAME\n+#define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    putc (',', FILE);\t\t\t\t\t\t\t\\\n+    fprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\t\\\n+    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+    size_directive_output = 0;\t\t\t\t\t\t\\\n+    if (!flag_inhibit_size_directive && DECL_SIZE (DECL))\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tsize_directive_output = 1;\t\t\t\t\t\\\n+\tfprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+\tassemble_name (FILE, NAME);\t\t\t\t\t\\\n+\tfprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL)));\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Output the size directive for a decl in rest_of_decl_compilation\n+   in the case where we did not do so before the initializer.\n+   Once we find the error_mark_node, we know that the value of\n+   size_directive_output was set\n+   by ASM_DECLARE_OBJECT_NAME when it was run for the same decl.  */\n+\n+#undef ASM_FINISH_DECLARE_OBJECT\n+#define ASM_FINISH_DECLARE_OBJECT(FILE, DECL, TOP_LEVEL, AT_END)\t \\\n+do {\t\t\t\t\t\t\t\t\t \\\n+     char *name = XSTR (XEXP (DECL_RTL (DECL), 0), 0);\t\t\t \\\n+     if (!flag_inhibit_size_directive && DECL_SIZE (DECL)\t\t \\\n+         && ! AT_END && TOP_LEVEL\t\t\t\t\t \\\n+\t && DECL_INITIAL (DECL) == error_mark_node\t\t\t \\\n+\t && !size_directive_output)\t\t\t\t\t \\\n+       {\t\t\t\t\t\t\t\t \\\n+\t size_directive_output = 1;\t\t\t\t\t \\\n+\t fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t \\\n+\t assemble_name (FILE, name);\t\t\t\t\t \\\n+\t fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (DECL))); \\\n+       }\t\t\t\t\t\t\t\t \\\n+   } while (0)\n+\n+/* This is how to declare the size of a function.  */\n+\n+#undef ASM_DECLARE_FUNCTION_SIZE\n+#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (!flag_inhibit_size_directive)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+        char label[256];\t\t\t\t\t\t\\\n+\tstatic int labelno;\t\t\t\t\t\t\\\n+\tlabelno++;\t\t\t\t\t\t\t\\\n+\tASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\t\\\n+\tASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n+\tfprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\t\\\n+\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n+        fprintf (FILE, \",\");\t\t\t\t\t\t\\\n+\tassemble_name (FILE, label);\t\t\t\t\t\\\n+        fprintf (FILE, \"-\");\t\t\t\t\t\t\\\n+\tassemble_name (FILE, (FNAME));\t\t\t\t\t\\\n+\tputc ('\\n', FILE);\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Since gas and gld are standard on NetBSD, we don't need these */\n+#undef ASM_FINAL_SPEC\n+#undef STARTFILE_SPEC\n+"}, {"sha": "ed1709cc0442c966746603d2eff258d7c007da37", "filename": "gcc/config/mips/x-netbsd", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5acdcc1786fd73accb1d303a724793d440a1434/gcc%2Fconfig%2Fmips%2Fx-netbsd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5acdcc1786fd73accb1d303a724793d440a1434/gcc%2Fconfig%2Fmips%2Fx-netbsd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fx-netbsd?ref=f5acdcc1786fd73accb1d303a724793d440a1434", "patch": "@@ -0,0 +1,16 @@\n+# Don't run fixproto\n+STMP_FIXPROTO =\n+\n+# We don't need GCC's own include files.\n+USER_H = $(srcdir)/ginclude/stdarg.h $(srcdir)/ginclude/varargs.h \\\n+\t $(srcdir)/ginclude/va-mips.h\n+XLIMITS_H =\n+\n+# We don't need even the files GCC insists we need.\n+GENINCLUDES = Makefile.in\n+\n+# A lot of stuff needs to go elsewhere.\n+includedir=$(exec_prefix)/include\n+infodir=$(exec_prefix)/share/info\n+tooldir=$(libdir)/cross/$(target)\n+mandir=$(exec_prefix)/share/man/man1"}]}