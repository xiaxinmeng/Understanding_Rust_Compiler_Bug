{"sha": "16e764a7f44bbc29254f041fe0f3064cce65b994", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZlNzY0YTdmNDRiYmMyOTI1NGYwNDFmZTBmMzA2NGNjZTY1Yjk5NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-19T12:59:27Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-19T12:59:27Z"}, "message": "[multiple changes]\n\n2016-04-19  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Resolve_Attribute, case 'Access): Freeze\n\toverloadable entity if originally overloaded.\n\n2016-04-19  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_aggr.adb, exp_ch3.adb, exp_ch7.adb, exp_ch9.adb, exp_code.adb,\n\texp_fixd.adb, namet.adb, osint.adb, osint.ads, par-ch2.adb,\n\tsem_ch10.adb, sem_ch12.adb, sem_disp.adb, sem_elab.adb, sem_elim.adb\n\tsem_util.adb, styleg.adb, styleg.ads, stylesw.ads: Minor code\n\tclean up.\n\nFrom-SVN: r235194", "tree": {"sha": "a83fb2e298eb4d43738609e6f7a59356edfce6ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a83fb2e298eb4d43738609e6f7a59356edfce6ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16e764a7f44bbc29254f041fe0f3064cce65b994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16e764a7f44bbc29254f041fe0f3064cce65b994", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16e764a7f44bbc29254f041fe0f3064cce65b994", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16e764a7f44bbc29254f041fe0f3064cce65b994/comments", "author": null, "committer": null, "parents": [{"sha": "4754d4e86afb974d0316a2b2793029f4407d762f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4754d4e86afb974d0316a2b2793029f4407d762f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4754d4e86afb974d0316a2b2793029f4407d762f"}], "stats": {"total": 158, "additions": 87, "deletions": 71}, "files": [{"sha": "08a4ef41d5fc076e872744e388cc0649ac3683e4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -1,3 +1,16 @@\n+2016-04-19  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Resolve_Attribute, case 'Access): Freeze\n+\toverloadable entity if originally overloaded.\n+\n+2016-04-19  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_aggr.adb, exp_ch3.adb, exp_ch7.adb, exp_ch9.adb, exp_code.adb,\n+\texp_fixd.adb, namet.adb, osint.adb, osint.ads, par-ch2.adb,\n+\tsem_ch10.adb, sem_ch12.adb, sem_disp.adb, sem_elab.adb, sem_elim.adb\n+\tsem_util.adb, styleg.adb, styleg.ads, stylesw.ads: Minor code\n+\tclean up.\n+\n 2016-04-19  Arnaud Charlet  <charlet@adacore.com>\n \n \t* sem_util.adb (Copy_Node_With_Replacement):"}, {"sha": "2ad72bdf5bfd93e0c3c77f547625923782ccf99e", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -317,7 +317,7 @@ package body Exp_Aggr is\n       --  This avoids running away with attempts to convert huge aggregates,\n       --  which hit memory limits in the backend.\n \n-      function Component_Count (T : Entity_Id) return Int;\n+      function Component_Count (T : Entity_Id) return Nat;\n       --  The limit is applied to the total number of components that the\n       --  aggregate will have, which is the number of static expressions\n       --  that will appear in the flattened array. This requires a recursive\n@@ -327,8 +327,8 @@ package body Exp_Aggr is\n       -- Component_Count --\n       ---------------------\n \n-      function Component_Count (T : Entity_Id) return Int is\n-         Res  : Int := 0;\n+      function Component_Count (T : Entity_Id) return Nat is\n+         Res  : Nat := 0;\n          Comp : Entity_Id;\n \n       begin\n@@ -351,7 +351,7 @@ package body Exp_Aggr is\n                Hi : constant Node_Id :=\n                  Type_High_Bound (Etype (First_Index (T)));\n \n-               Siz : constant Int := Component_Count (Component_Type (T));\n+               Siz : constant Nat := Component_Count (Component_Type (T));\n \n             begin\n                if not Compile_Time_Known_Value (Lo)\n@@ -6164,8 +6164,8 @@ package body Exp_Aggr is\n                First_Comp   : Node_Id;\n                Discriminant : Entity_Id;\n                Decl         : Node_Id;\n-               Num_Disc     : Int := 0;\n-               Num_Gird     : Int := 0;\n+               Num_Disc     : Nat := 0;\n+               Num_Gird     : Nat := 0;\n \n                procedure Prepend_Stored_Values (T : Entity_Id);\n                --  Scan the list of stored discriminants of the type, and add"}, {"sha": "7df4830edebd4c9edf5aae8ba3a27fb46258f25d", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -1720,7 +1720,7 @@ package body Exp_Ch3 is\n       Decls     : constant List_Id  := New_List;\n       Discr_Map : constant Elist_Id := New_Elmt_List;\n       Loc       : constant Source_Ptr := Sloc (Rec_Ent);\n-      Counter   : Int := 0;\n+      Counter   : Nat := 0;\n       Proc_Id   : Entity_Id;\n       Rec_Type  : Entity_Id;\n       Set_Tag   : Entity_Id := Empty;"}, {"sha": "04f28a6da4d8b1e46c1d608fcf271645e3f2cf44", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -1096,7 +1096,7 @@ package body Exp_Ch7 is\n       --    Jump_Alts\n \n       Counter_Id  : Entity_Id := Empty;\n-      Counter_Val : Int       := 0;\n+      Counter_Val : Nat       := 0;\n       --  Name and value of the state counter\n \n       Decls : List_Id := No_List;\n@@ -1725,7 +1725,7 @@ package body Exp_Ch7 is\n          Spec    : Node_Id;\n          Typ     : Entity_Id;\n \n-         Old_Counter_Val : Int;\n+         Old_Counter_Val : Nat;\n          --  This variable is used to determine whether a nested package or\n          --  instance contains at least one controlled object.\n "}, {"sha": "11b614b2483a317d017f07c11f635873594d49b3", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -74,7 +74,7 @@ package body Exp_Ch9 is\n    --  families of 128K should be reasonable in all cases, and is a documented\n    --  implementation restriction.\n \n-   Entry_Family_Bound : constant Int := 2**16;\n+   Entry_Family_Bound : constant Pos := 2**16;\n \n    -----------------------\n    -- Local Subprograms --\n@@ -9492,7 +9492,7 @@ package body Exp_Ch9 is\n             Entry_Count_Expr   : constant Node_Id :=\n                                    Build_Entry_Count_Expression\n                                      (Prot_Typ, Cdecls, Loc);\n-            Num_Attach_Handler : Int := 0;\n+            Num_Attach_Handler : Nat := 0;\n             Protection_Subtype : Node_Id;\n             Ritem              : Node_Id;\n \n@@ -10578,7 +10578,7 @@ package body Exp_Ch9 is\n       Delay_Val      : Entity_Id;\n       Delay_Index    : Entity_Id;\n       Delay_Min      : Entity_Id;\n-      Delay_Num      : Int := 1;\n+      Delay_Num      : Pos := 1;\n       Delay_Alt_List : List_Id := New_List;\n       Delay_List     : constant List_Id := New_List;\n       D              : Entity_Id;\n@@ -10588,7 +10588,7 @@ package body Exp_Ch9 is\n       Guard_Open     : Entity_Id;\n \n       End_Lab        : Node_Id;\n-      Index          : Int := 1;\n+      Index          : Pos := 1;\n       Lab            : Node_Id;\n       Num_Alts       : Int;\n       Num_Accept     : Nat := 0;"}, {"sha": "6fbe544930e569dab365c846a0b2d550bd8036f7", "filename": "gcc/ada/exp_code.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fexp_code.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fexp_code.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_code.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -188,7 +188,7 @@ package body Exp_Code is\n    --  and not modified by Clobber_Get_Next. Empty if clobber string was in\n    --  error (resulting in no clobber arguments being returned).\n \n-   Clobber_Ptr : Nat;\n+   Clobber_Ptr : Pos;\n    --  Pointer to current character of string. Initialized to 1 by the call\n    --  to Clobber_Setup, and then updated by Clobber_Get_Next.\n "}, {"sha": "97bc99b8370038cbf7df43692767b46904da454e", "filename": "gcc/ada/exp_fixd.adb", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fexp_fixd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fexp_fixd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_fixd.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -404,15 +404,15 @@ package body Exp_Fixd is\n      (N       : Node_Id;\n       X, Y, Z : Node_Id) return Node_Id\n    is\n-      Y_Size : constant Int := UI_To_Int (Esize (Etype (Y)));\n-      Z_Size : constant Int := UI_To_Int (Esize (Etype (Z)));\n+      Y_Size : constant Nat := UI_To_Int (Esize (Etype (Y)));\n+      Z_Size : constant Nat := UI_To_Int (Esize (Etype (Z)));\n       Expr   : Node_Id;\n \n    begin\n       --  If denominator fits in 64 bits, we can build the operations directly\n       --  without causing any intermediate overflow, so that's what we do.\n \n-      if Int'Max (Y_Size, Z_Size) <= 32 then\n+      if Nat'Max (Y_Size, Z_Size) <= 32 then\n          return\n            Build_Divide (N, X, Build_Multiply (N, Y, Z));\n \n@@ -473,11 +473,11 @@ package body Exp_Fixd is\n    is\n       Loc    : constant Source_Ptr := Sloc (N);\n \n-      X_Size : constant Int := UI_To_Int (Esize (Etype (X)));\n-      Y_Size : constant Int := UI_To_Int (Esize (Etype (Y)));\n-      Z_Size : constant Int := UI_To_Int (Esize (Etype (Z)));\n+      X_Size : constant Nat := UI_To_Int (Esize (Etype (X)));\n+      Y_Size : constant Nat := UI_To_Int (Esize (Etype (Y)));\n+      Z_Size : constant Nat := UI_To_Int (Esize (Etype (Z)));\n \n-      QR_Siz : Int;\n+      QR_Siz : Nat;\n       QR_Typ : Entity_Id;\n \n       Nnn : Entity_Id;\n@@ -489,7 +489,7 @@ package body Exp_Fixd is\n    begin\n       --  Find type that will allow computation of numerator\n \n-      QR_Siz := Int'Max (X_Size, 2 * Int'Max (Y_Size, Z_Size));\n+      QR_Siz := Nat'Max (X_Size, 2 * Nat'Max (Y_Size, Z_Size));\n \n       if QR_Siz <= 16 then\n          QR_Typ := Standard_Integer_16;\n@@ -499,7 +499,7 @@ package body Exp_Fixd is\n          QR_Typ := Standard_Integer_64;\n \n       --  For more than 64, bits, we use the 64-bit integer defined in\n-      --  Interfaces, so that it can be handled by the runtime routine\n+      --  Interfaces, so that it can be handled by the runtime routine.\n \n       else\n          QR_Typ := RTE (RE_Integer_64);\n@@ -784,15 +784,15 @@ package body Exp_Fixd is\n      (N       : Node_Id;\n       X, Y, Z : Node_Id) return Node_Id\n    is\n-      X_Size : constant Int := UI_To_Int (Esize (Etype (X)));\n-      Y_Size : constant Int := UI_To_Int (Esize (Etype (Y)));\n+      X_Size : constant Nat := UI_To_Int (Esize (Etype (X)));\n+      Y_Size : constant Nat := UI_To_Int (Esize (Etype (Y)));\n       Expr   : Node_Id;\n \n    begin\n       --  If numerator fits in 64 bits, we can build the operations directly\n       --  without causing any intermediate overflow, so that's what we do.\n \n-      if Int'Max (X_Size, Y_Size) <= 32 then\n+      if Nat'Max (X_Size, Y_Size) <= 32 then\n          return\n            Build_Divide (N, Build_Multiply (N, X, Y), Z);\n \n@@ -850,11 +850,11 @@ package body Exp_Fixd is\n    is\n       Loc    : constant Source_Ptr := Sloc (N);\n \n-      X_Size : constant Int := UI_To_Int (Esize (Etype (X)));\n-      Y_Size : constant Int := UI_To_Int (Esize (Etype (Y)));\n-      Z_Size : constant Int := UI_To_Int (Esize (Etype (Z)));\n+      X_Size : constant Nat := UI_To_Int (Esize (Etype (X)));\n+      Y_Size : constant Nat := UI_To_Int (Esize (Etype (Y)));\n+      Z_Size : constant Nat := UI_To_Int (Esize (Etype (Z)));\n \n-      QR_Siz : Int;\n+      QR_Siz : Nat;\n       QR_Typ : Entity_Id;\n \n       Nnn : Entity_Id;\n@@ -866,7 +866,7 @@ package body Exp_Fixd is\n    begin\n       --  Find type that will allow computation of numerator\n \n-      QR_Siz := Int'Max (X_Size, 2 * Int'Max (Y_Size, Z_Size));\n+      QR_Siz := Nat'Max (X_Size, 2 * Nat'Max (Y_Size, Z_Size));\n \n       if QR_Siz <= 16 then\n          QR_Typ := Standard_Integer_16;\n@@ -876,7 +876,7 @@ package body Exp_Fixd is\n          QR_Typ := Standard_Integer_64;\n \n       --  For more than 64, bits, we use the 64-bit integer defined in\n-      --  Interfaces, so that it can be handled by the runtime routine\n+      --  Interfaces, so that it can be handled by the runtime routine.\n \n       else\n          QR_Typ := RTE (RE_Integer_64);"}, {"sha": "520ce6a244f51459593d1e726471722c08986abf", "filename": "gcc/ada/namet.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fnamet.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fnamet.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -610,13 +610,13 @@ package body Namet is\n       --  N'th entry is the number of chains of length N, except last entry,\n       --  which is the number of chains of length F'Last or more.\n \n-      Max_Chain_Length : Int := 0;\n+      Max_Chain_Length : Nat := 0;\n       --  Maximum length of all chains\n \n-      Probes : Int := 0;\n+      Probes : Nat := 0;\n       --  Used to compute average number of probes\n \n-      Nsyms : Int := 0;\n+      Nsyms : Nat := 0;\n       --  Number of symbols in table\n \n       Verbosity : constant Int range 1 .. 3 := 1;\n@@ -647,7 +647,7 @@ package body Namet is\n \n          else\n             declare\n-               C : Int;\n+               C : Nat;\n                N : Name_Id;\n                S : Int;\n "}, {"sha": "7567d179c29c8b9ebe1c52087f158effb617005d", "filename": "gcc/ada/osint.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fosint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fosint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -157,7 +157,7 @@ package body Osint is\n    EOL : constant Character := ASCII.LF;\n    --  End of line character\n \n-   Number_File_Names : Int := 0;\n+   Number_File_Names : Nat := 0;\n    --  Number of file names found on command line and placed in File_Names\n \n    Look_In_Primary_Directory_For_Current_Main : Boolean := False;\n@@ -2094,7 +2094,7 @@ package body Osint is\n    -- Number_Of_Files --\n    ---------------------\n \n-   function Number_Of_Files return Int is\n+   function Number_Of_Files return Nat is\n    begin\n       return Number_File_Names;\n    end Number_Of_Files;"}, {"sha": "a96e83ea8e78fecaf2ffe938fa5899f7a72cdb6e", "filename": "gcc/ada/osint.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fosint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fosint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.ads?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -120,7 +120,7 @@ package Osint is\n    --  lower case form, so that two environment variable names compare equal if\n    --  they refer to the same environment variable.\n \n-   function Number_Of_Files return Int;\n+   function Number_Of_Files return Nat;\n    --  Gives the total number of filenames found on the command line\n \n    No_Index : constant := -1;"}, {"sha": "06f74cdec3a90751e7745bd2a0d08d645aa494ca", "filename": "gcc/ada/par-ch2.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fpar-ch2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fpar-ch2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch2.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -230,7 +230,7 @@ package body Ch2 is\n       Import_Check_Required : Boolean := False;\n       --  Set True if check of pragma IMPORT is required\n \n-      Arg_Count : Int := 0;\n+      Arg_Count : Nat := 0;\n       --  Number of argument associations processed\n \n       Identifier_Seen : Boolean := False;"}, {"sha": "17f06f3e4833a9e0430ea7c65c05caff7a2b0793", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -10087,15 +10087,18 @@ package body Sem_Attr is\n                      Get_Next_Interp (Index, It);\n                   end loop;\n \n-               --  If Prefix is a subprogram name, this reference freezes:\n+                  --  If Prefix is a subprogram name, this reference freezes,\n+                  --  but not if within spec expression mode\n+\n+                  if not In_Spec_Expression then\n+                     Freeze_Before (N, Entity (P));\n+                  end if;\n \n                --    If it is a type, there is nothing to resolve.\n                --    If it is an object, complete its resolution.\n \n                elsif Is_Overloadable (Entity (P)) then\n \n-                  --  Avoid insertion of freeze actions in spec expression mode\n-\n                   if not In_Spec_Expression then\n                      Freeze_Before (N, Entity (P));\n                   end if;"}, {"sha": "aee7fd3d2a490fb4dffd599ad7d74b3275ca9451", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -2008,7 +2008,7 @@ package body Sem_Ch10 is\n       Par_Unit : constant Entity_Id := Current_Scope;\n \n       Lib_Spec        : Node_Id := Library_Unit (Lib_Unit);\n-      Num_Scopes      : Int := 0;\n+      Num_Scopes      : Nat := 0;\n       Use_Clauses     : array (1 .. Scope_Stack.Last) of Node_Id;\n       Enclosing_Child : Entity_Id := Empty;\n       Svg             : constant Suppress_Record := Scope_Suppress;"}, {"sha": "40433fd2e7a260043ab97c7e68f7f02224872934", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -1088,8 +1088,8 @@ package body Sem_Ch12 is\n       --  name of the formal.\n \n       Is_Named_Assoc : Boolean;\n-      Num_Matched    : Int := 0;\n-      Num_Actuals    : Int := 0;\n+      Num_Matched    : Nat := 0;\n+      Num_Actuals    : Nat := 0;\n \n       Others_Present : Boolean := False;\n       Others_Choice  : Node_Id := Empty;\n@@ -4406,17 +4406,17 @@ package body Sem_Ch12 is\n       --  to provide a clean environment for analysis of the inlined body will\n       --  eliminate any previously set SPARK_Mode.\n \n-      Scope_Stack_Depth : constant Int :=\n+      Scope_Stack_Depth : constant Pos :=\n                             Scope_Stack.Last - Scope_Stack.First + 1;\n \n       Use_Clauses  : array (1 .. Scope_Stack_Depth) of Node_Id;\n       Instances    : array (1 .. Scope_Stack_Depth) of Entity_Id;\n       Inner_Scopes : array (1 .. Scope_Stack_Depth) of Entity_Id;\n       Curr_Scope   : Entity_Id := Empty;\n       List         : Elist_Id;\n-      Num_Inner    : Int := 0;\n-      Num_Scopes   : Int := 0;\n-      N_Instances  : Int := 0;\n+      Num_Inner    : Nat := 0;\n+      Num_Scopes   : Nat := 0;\n+      N_Instances  : Nat := 0;\n       Removed      : Boolean := False;\n       S            : Entity_Id;\n       Vis          : Boolean;\n@@ -11606,15 +11606,15 @@ package body Sem_Ch12 is\n          I2 : Node_Id;\n          T2 : Entity_Id;\n \n-         function Formal_Dimensions return Int;\n+         function Formal_Dimensions return Nat;\n          --  Count number of dimensions in array type formal\n \n          -----------------------\n          -- Formal_Dimensions --\n          -----------------------\n \n-         function Formal_Dimensions return Int is\n-            Num   : Int := 0;\n+         function Formal_Dimensions return Nat is\n+            Num   : Nat := 0;\n             Index : Node_Id;\n \n          begin\n@@ -13348,7 +13348,7 @@ package body Sem_Ch12 is\n    procedure Preanalyze_Actuals (N : Node_Id; Inst : Entity_Id := Empty) is\n       Assoc : Node_Id;\n       Act   : Node_Id;\n-      Errs  : constant Int := Serious_Errors_Detected;\n+      Errs  : constant Nat := Serious_Errors_Detected;\n \n       Cur : Entity_Id := Empty;\n       --  Current homograph of the instance name"}, {"sha": "8aee9a05b92c5fbac51f2e9fc5b174ecded3789a", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -2132,7 +2132,7 @@ package body Sem_Disp is\n       --  table, but it would be awfully heavy, and there is no way that we\n       --  could reasonably exceed this value.\n \n-      N : Int := 0;\n+      N : Nat := 0;\n       --  Number of entries in Result\n \n       Parent_Op : Entity_Id;"}, {"sha": "bdc88c148d6a3f6867b74391c8eed4b3d6ad88e2", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -1233,8 +1233,8 @@ package body Sem_Elab is\n       --  then the body of the generic will be in the earlier instance.\n \n       declare\n-         D1 : constant Int := Instantiation_Depth (Sloc (Ent));\n-         D2 : constant Int := Instantiation_Depth (Sloc (N));\n+         D1 : constant Nat := Instantiation_Depth (Sloc (Ent));\n+         D2 : constant Nat := Instantiation_Depth (Sloc (N));\n \n       begin\n          if D1 > D2 then"}, {"sha": "b784f6d75342661bf065f91769a00141e1c6e3df", "filename": "gcc/ada/sem_elim.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fsem_elim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fsem_elim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elim.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -574,7 +574,7 @@ package body Sem_Elim is\n                      --------------------\n \n                      function Line_Num_Match return Boolean is\n-                        N : Int := 0;\n+                        N : Nat := 0;\n \n                      begin\n                         if Idx = 0 then"}, {"sha": "29d2e42592d6d391ca9a332f4b0677e740fc9440", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -5638,7 +5638,7 @@ package body Sem_Util is\n       then\n          declare\n             Root1, Root2   : Node_Id;\n-            Depth1, Depth2 : Int := 0;\n+            Depth1, Depth2 : Nat := 0;\n \n          begin\n             Root1 := Prefix (A1);"}, {"sha": "58fd3fd3e05263e238dd00ae359442faaa55bd24", "filename": "gcc/ada/styleg.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fstyleg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fstyleg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyleg.adb?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -717,7 +717,7 @@ package body Styleg is\n    --  In check max line length mode (-gnatym), the line length must\n    --  not exceed the permitted maximum value.\n \n-   procedure Check_Line_Max_Length (Len : Int) is\n+   procedure Check_Line_Max_Length (Len : Nat) is\n    begin\n       if Style_Check_Max_Line_Length then\n          if Len > Style_Max_Line_Length then\n@@ -741,10 +741,10 @@ package body Styleg is\n    --  In check DOS line terminators node (-gnatyd), the line terminator\n    --  must be a single LF, without a following CR.\n \n-   procedure Check_Line_Terminator (Len : Int) is\n+   procedure Check_Line_Terminator (Len : Nat) is\n       S : Source_Ptr;\n \n-      L : Int := Len;\n+      L : Nat := Len;\n       --  Length of line (adjusted down for blanks at end of line)\n \n    begin"}, {"sha": "141c11435783d74f4ca243d9e18b1bcd34eebe26", "filename": "gcc/ada/styleg.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fstyleg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fstyleg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstyleg.ads?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -109,12 +109,12 @@ package Styleg is\n    procedure Check_Left_Paren;\n    --  Called after scanning out a left parenthesis to check spacing\n \n-   procedure Check_Line_Max_Length (Len : Int);\n+   procedure Check_Line_Max_Length (Len : Nat);\n    --  Called with Scan_Ptr pointing to the first line terminator character\n    --  terminating the current line. Used to check for appropriate line length.\n    --  The parameter Len is the length of the current line.\n \n-   procedure Check_Line_Terminator (Len : Int);\n+   procedure Check_Line_Terminator (Len : Nat);\n    --  Called with Scan_Ptr pointing to the first line terminator terminating\n    --  the current line, used to check for appropriate line terminator usage.\n    --  The parameter Len is the length of the current line."}, {"sha": "7dc3e604961a4b4c5c0dc61a08892746cd62af86", "filename": "gcc/ada/stylesw.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fstylesw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16e764a7f44bbc29254f041fe0f3064cce65b994/gcc%2Fada%2Fstylesw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstylesw.ads?ref=16e764a7f44bbc29254f041fe0f3064cce65b994", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -275,12 +275,12 @@ package Stylesw is\n    --  not allowed to enclose entire expressions in tests in parentheses\n    --  (C style), e.g. if (x = y) then ... is not allowed.\n \n-   Style_Max_Line_Length : Int := 0;\n+   Style_Max_Line_Length : Nat := 0;\n    --  Value used to check maximum line length. Gets reset as a result of\n    --  use of -gnatym or -gnatyMnnn switches. This value is only read if\n    --  Style_Check_Max_Line_Length is True.\n \n-   Style_Max_Nesting_Level : Int := 0;\n+   Style_Max_Nesting_Level : Nat := 0;\n    --  Value used to check maximum nesting level. Gets reset as a result\n    --  of use of the -gnatyLnnn switch. This value is only read if\n    --  Style_Check_Max_Nesting_Level is True."}]}