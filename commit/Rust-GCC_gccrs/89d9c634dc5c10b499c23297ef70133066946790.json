{"sha": "89d9c634dc5c10b499c23297ef70133066946790", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlkOWM2MzRkYzVjMTBiNDk5YzIzMjk3ZWY3MDEzMzA2Njk0Njc5MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-11-20T20:20:45Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-11-20T21:43:25Z"}, "message": "dwarf2: ICE with local class in unused function [PR97918]\n\nHere, since we only mention bar<B>, we never emit debug information for it.\nBut we do emit debug information for H<J>::h, so we need to refer to the\ndebug info for bar<B>::J even though there is no bar<B>.  We deal with this\nsort of thing in dwarf2out with the limbo_die_list; parentless dies like J\nget attached to the CU at EOF.  But here, we were flushing the limbo list,\nthen generating the template argument DIE for H<J> that refers to J, which\nadds J to the limbo list, too late to be flushed.  So let's flush a little\nlater.\n\ngcc/ChangeLog:\n\n\tPR c++/97918\n\t* dwarf2out.c (dwarf2out_early_finish): flush_limbo_die_list\n\tafter gen_scheduled_generic_parms_dies.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97918\n\t* g++.dg/debug/localclass2.C: New test.", "tree": {"sha": "a0e5fe1224bc29a3697b75b65134a0758323455c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0e5fe1224bc29a3697b75b65134a0758323455c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89d9c634dc5c10b499c23297ef70133066946790", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d9c634dc5c10b499c23297ef70133066946790", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89d9c634dc5c10b499c23297ef70133066946790", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d9c634dc5c10b499c23297ef70133066946790/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27c5416fc8a4c2b33a0d6b6a26da2518791e0464", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c5416fc8a4c2b33a0d6b6a26da2518791e0464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c5416fc8a4c2b33a0d6b6a26da2518791e0464"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "07e1a9218329ff48bdcd167ad4189877aac39e54", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d9c634dc5c10b499c23297ef70133066946790/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d9c634dc5c10b499c23297ef70133066946790/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=89d9c634dc5c10b499c23297ef70133066946790", "patch": "@@ -32169,13 +32169,13 @@ dwarf2out_early_finish (const char *filename)\n      emit full debugging info for them.  */\n   retry_incomplete_types ();\n \n+  gen_scheduled_generic_parms_dies ();\n+  gen_remaining_tmpl_value_param_die_attribute ();\n+\n   /* The point here is to flush out the limbo list so that it is empty\n      and we don't need to stream it for LTO.  */\n   flush_limbo_die_list ();\n \n-  gen_scheduled_generic_parms_dies ();\n-  gen_remaining_tmpl_value_param_die_attribute ();\n-\n   /* Add DW_AT_linkage_name for all deferred DIEs.  */\n   for (limbo_die_node *node = deferred_asm_name; node; node = node->next)\n     {"}, {"sha": "3dd7cae322ddec7188e65cb59b62b0459e0a89aa", "filename": "gcc/testsuite/g++.dg/debug/localclass2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d9c634dc5c10b499c23297ef70133066946790/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Flocalclass2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d9c634dc5c10b499c23297ef70133066946790/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Flocalclass2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Flocalclass2.C?ref=89d9c634dc5c10b499c23297ef70133066946790", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/97918\n+// { dg-additional-options \"-g -O -flto\" }\n+// { dg-do compile { target c++11 } }\n+\n+namespace { class A {}; }\n+class B {};\n+template <typename T> struct H {\n+  constexpr static unsigned h = 0;\n+};\n+\n+template <typename T> A bar ()\n+{\n+  struct J {\n+    static void foo();\n+  };\n+  H<J>();\n+  return A ();\n+}\n+\n+void fn ()\n+{\n+  bar<B>;\t\t\t// only mentions the function\n+}"}]}