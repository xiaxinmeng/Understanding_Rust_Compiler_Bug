{"sha": "32fb22af5dcbf2e72fe9834f99ded8b499f53a8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJmYjIyYWY1ZGNiZjJlNzJmZTk4MzRmOTlkZWQ4YjQ5OWY1M2E4Zg==", "commit": {"author": {"name": "Sa Liu", "email": "saliu@de.ibm.com", "date": "2006-12-12T04:55:50Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2006-12-12T04:55:50Z"}, "message": "spu.opt (mfixed-range): New option.\n\n\t* config/spu/spu.opt (mfixed-range): New option.\n\t* config/spu/spu.h (spu_fixed_range_string): Declare.\n\t* config/spu/spu.c (spu_override_options): Handle -mfixed-range.\n\t(fix_range): New function.\n\t* doc/invoke.texi (SPU Options): Document -mfixed-range.\n\t* testsuite/gcc.target/spu/fixed-range.c: New.\n\t* testsuite/gcc.target/spu/fixed-range-bad.c: Ditto.\n\nCo-Authored-By: Ben Elliston <bje@au.ibm.com>\n\nFrom-SVN: r119768", "tree": {"sha": "3faa171f696e2d48c4722c0d8353e7120b66e8c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3faa171f696e2d48c4722c0d8353e7120b66e8c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f/comments", "author": {"login": "sa-liu", "id": 47213938, "node_id": "MDQ6VXNlcjQ3MjEzOTM4", "avatar_url": "https://avatars.githubusercontent.com/u/47213938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sa-liu", "html_url": "https://github.com/sa-liu", "followers_url": "https://api.github.com/users/sa-liu/followers", "following_url": "https://api.github.com/users/sa-liu/following{/other_user}", "gists_url": "https://api.github.com/users/sa-liu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sa-liu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sa-liu/subscriptions", "organizations_url": "https://api.github.com/users/sa-liu/orgs", "repos_url": "https://api.github.com/users/sa-liu/repos", "events_url": "https://api.github.com/users/sa-liu/events{/privacy}", "received_events_url": "https://api.github.com/users/sa-liu/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8b494895e3993083dc2900deeb1107c1746d48f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b494895e3993083dc2900deeb1107c1746d48f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b494895e3993083dc2900deeb1107c1746d48f3"}], "stats": {"total": 105, "additions": 104, "deletions": 1}, "files": [{"sha": "4c150cc4c3476740338a7133d974071c0b1770f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32fb22af5dcbf2e72fe9834f99ded8b499f53a8f", "patch": "@@ -1,3 +1,14 @@\n+2006-12-12  Sa Liu  <saliu@de.ibm.com>\n+\t    Ben Elliston  <bje@au.ibm.com>\n+\n+\t* config/spu/spu.opt (mfixed-range): New option.\n+\t* config/spu/spu.h (spu_fixed_range_string): Declare.\n+\t* config/spu/spu.c (spu_override_options): Handle -mfixed-range.\n+\t(fix_range): New function.\n+\t* doc/invoke.texi (SPU Options): Document -mfixed-range.\n+\t* testsuite/gcc.target/spu/fixed-range.c: New.\n+\t* testsuite/gcc.target/spu/fixed-range-bad.c: Ditto.\n+\n 2006-12-11  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/17982"}, {"sha": "52c8e9ce9cb03d69c610eda55925949dd204ad03", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=32fb22af5dcbf2e72fe9834f99ded8b499f53a8f", "patch": "@@ -128,6 +128,7 @@ static unsigned char spu_rtx_costs (rtx x, int code, int outer_code,\n static unsigned char spu_function_ok_for_sibcall (tree decl, tree exp);\n static void spu_init_libfuncs (void);\n static bool spu_return_in_memory (tree type, tree fntype);\n+static void fix_range (const char *);\n \n extern const char *reg_names[];\n rtx spu_compare_op0, spu_compare_op1;\n@@ -264,6 +265,9 @@ spu_override_options (void)\n \n   if (align_functions < 8)\n     align_functions = 8;\n+\n+  if (spu_fixed_range_string)\n+    fix_range (spu_fixed_range_string);\n }\n \f\n /* Handle an attribute requiring a FUNCTION_DECL; arguments as in\n@@ -3574,6 +3578,68 @@ mem_is_padded_component_ref (rtx x)\n   return 0;\n }\n \n+/* Parse the -mfixed-range= option string.  */\n+static void\n+fix_range (const char *const_str)\n+{\n+  int i, first, last;\n+  char *str, *dash, *comma;\n+  \n+  /* str must be of the form REG1'-'REG2{,REG1'-'REG} where REG1 and\n+     REG2 are either register names or register numbers.  The effect\n+     of this option is to mark the registers in the range from REG1 to\n+     REG2 as ``fixed'' so they won't be used by the compiler.  */\n+  \n+  i = strlen (const_str);\n+  str = (char *) alloca (i + 1);\n+  memcpy (str, const_str, i + 1);\n+  \n+  while (1)\n+    {\n+      dash = strchr (str, '-');\n+      if (!dash)\n+\t{\n+\t  warning (0, \"value of -mfixed-range must have form REG1-REG2\");\n+\t  return;\n+\t}\n+      *dash = '\\0';\n+      comma = strchr (dash + 1, ',');\n+      if (comma)\n+\t*comma = '\\0';\n+      \n+      first = decode_reg_name (str);\n+      if (first < 0)\n+\t{\n+\t  warning (0, \"unknown register name: %s\", str);\n+\t  return;\n+\t}\n+      \n+      last = decode_reg_name (dash + 1);\n+      if (last < 0)\n+\t{\n+\t  warning (0, \"unknown register name: %s\", dash + 1);\n+\t  return;\n+\t}\n+      \n+      *dash = '-';\n+      \n+      if (first > last)\n+\t{\n+\t  warning (0, \"%s-%s is an empty range\", str, dash + 1);\n+\t  return;\n+\t}\n+      \n+      for (i = first; i <= last; ++i)\n+\tfixed_regs[i] = call_used_regs[i] = 1;\n+\n+      if (!comma)\n+\tbreak;\n+\n+      *comma = ',';\n+      str = comma + 1;\n+    }\n+}\n+\n int\n spu_valid_move (rtx * ops)\n {"}, {"sha": "923ca75ac7410db3280b5ddc28bd975e53353f8a", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=32fb22af5dcbf2e72fe9834f99ded8b499f53a8f", "patch": "@@ -24,6 +24,7 @@\n #define OVERRIDE_OPTIONS spu_override_options()\n \n extern int target_flags;\n+extern const char *spu_fixed_range_string;\n \n /* Default target_flags if no switches specified.  */\n #ifndef TARGET_DEFAULT"}, {"sha": "6c3ab59b63d38fd494cd8a4150ebf43afbf62d8e", "filename": "gcc/config/spu/spu.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f/gcc%2Fconfig%2Fspu%2Fspu.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f/gcc%2Fconfig%2Fspu%2Fspu.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.opt?ref=32fb22af5dcbf2e72fe9834f99ded8b499f53a8f", "patch": "@@ -52,3 +52,6 @@ mlarge-mem\n Target Report RejectNegative Mask(LARGE_MEM)\n Generate code for 32 bit addressing\n \n+mfixed-range=\n+Target RejectNegative Joined Var(spu_fixed_range_string)\n+Specify range of registers to make fixed"}, {"sha": "2d28e8509e1e3644b7f122fd99e6cd17856b89ad", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=32fb22af5dcbf2e72fe9834f99ded8b499f53a8f", "patch": "@@ -733,7 +733,8 @@ See RS/6000 and PowerPC Options.\n @gccoptlist{-mwarn-reloc -merror-reloc @gol\n -msafe-dma -munsafe-dma @gol\n -mbranch-hints @gol\n--msmall-mem -mlarge-mem -mstdmain}\n+-msmall-mem -mlarge-mem -mstdmain @gol\n+-mfixed-range=@var{register-range}}\n \n @emph{System V Options}\n @gccoptlist{-Qy  -Qn  -YP,@var{paths}  -Ym,@var{dir}}\n@@ -12909,6 +12910,14 @@ With @option{-mstdmain}, GCC will link your program against startup\n code that assumes a C99-style interface to @code{main}, including a\n local copy of @code{argv} strings.\n \n+@item -mfixed-range=@var{register-range}\n+@opindex mfixed-range\n+Generate code treating the given register range as fixed registers.\n+A fixed register is one that the register allocator can not use.  This is\n+useful when compiling kernel code.  A register range is specified as\n+two registers separated by a dash.  Multiple register ranges can be\n+specified separated by a comma.\n+\n @end table\n \n @node System V Options"}, {"sha": "eeef122cbffc918db8145f0cc4e78cd1f0b9294d", "filename": "gcc/testsuite/gcc.target/spu/fixed-range-bad.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Ffixed-range-bad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Ffixed-range-bad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Ffixed-range-bad.c?ref=32fb22af5dcbf2e72fe9834f99ded8b499f53a8f", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfixed-range=1-x\" } */\n+/* { dg-error \"unknown register name\" \"\" { target spu-*-* } 0 } */\n+\n+int i;"}, {"sha": "8dcb7fe4c251392e1241e984cb917b45619127e0", "filename": "gcc/testsuite/gcc.target/spu/fixed-range.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Ffixed-range.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32fb22af5dcbf2e72fe9834f99ded8b499f53a8f/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Ffixed-range.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Ffixed-range.c?ref=32fb22af5dcbf2e72fe9834f99ded8b499f53a8f", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mfixed-range=1-20\" } */\n+/* { dg-final { scan-assembler \"lqd.*21\" } } */\n+\n+int foo (int i)\n+{\n+  return i;\n+}"}]}