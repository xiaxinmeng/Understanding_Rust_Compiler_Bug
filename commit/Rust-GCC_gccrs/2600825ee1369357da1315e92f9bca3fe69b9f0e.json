{"sha": "2600825ee1369357da1315e92f9bca3fe69b9f0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYwMDgyNWVlMTM2OTM1N2RhMTMxNWU5MmY5YmNhM2ZlNjliOWYwZQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2001-10-05T15:21:35Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2001-10-05T15:21:35Z"}, "message": "Adler32.java: Merge with Classpath\n\n\t* java/util/zip/Adler32.java: Merge with Classpath\n\t* java/util/zip/CRC32.java: Ditto\n\t* java/util/zip/Checksum.java: Ditto\n\t* java/util/zip/DataFormatException.java: Ditto\n\t* java/util/zip/ZipException.java: Ditto\n\nFrom-SVN: r46035", "tree": {"sha": "c9459fab54de3e6eecd0a0042778b45554b49b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9459fab54de3e6eecd0a0042778b45554b49b19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2600825ee1369357da1315e92f9bca3fe69b9f0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2600825ee1369357da1315e92f9bca3fe69b9f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2600825ee1369357da1315e92f9bca3fe69b9f0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2600825ee1369357da1315e92f9bca3fe69b9f0e/comments", "author": null, "committer": null, "parents": [{"sha": "e62bad3dc9c202d2ff549ed6a9bf459842544a66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e62bad3dc9c202d2ff549ed6a9bf459842544a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e62bad3dc9c202d2ff549ed6a9bf459842544a66"}], "stats": {"total": 186, "additions": 134, "deletions": 52}, "files": [{"sha": "2144b2ac84c3b304baceffb2872e1c59be24b7e4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2600825ee1369357da1315e92f9bca3fe69b9f0e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2600825ee1369357da1315e92f9bca3fe69b9f0e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2600825ee1369357da1315e92f9bca3fe69b9f0e", "patch": "@@ -1,3 +1,11 @@\n+2001-10-05  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/util/zip/Adler32.java: Merge with Classpath\n+\t* java/util/zip/CRC32.java: Ditto\n+\t* java/util/zip/Checksum.java: Ditto\n+\t* java/util/zip/DataFormatException.java: Ditto\n+\t* java/util/zip/ZipException.java: Ditto\n+\n 2001-10-04  Martin Kahlert  <martin.kahlert@infineon.com>\n \n \t* jni.cc (_Jv_JNI_DeleteLocalRef): Use correct frame size"}, {"sha": "0ced8f021879abf57c908d6f5485e3ad4054cd9a", "filename": "libjava/java/util/zip/Adler32.java", "status": "modified", "additions": 99, "deletions": 32, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2600825ee1369357da1315e92f9bca3fe69b9f0e/libjava%2Fjava%2Futil%2Fzip%2FAdler32.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2600825ee1369357da1315e92f9bca3fe69b9f0e/libjava%2Fjava%2Futil%2Fzip%2FAdler32.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FAdler32.java?ref=2600825ee1369357da1315e92f9bca3fe69b9f0e", "patch": "@@ -1,13 +1,13 @@\n-/* Adler.java - Computes Adler32 data checksum of a data stream\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+/* Adler32.java - Computes Adler32 data checksum of a data stream\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -34,74 +34,132 @@\n  */\n \n /**\n- * Computes Adler32 data checksum of a data stream.\n- * The actual Adler32 algorithm is described in RFC 1950\n- * (ZLIB Compressed Data Format Specification version 3.3).\n- * Can be used to get the CRC32 over a stream if used with checked input/output\n- * streams.\n+ * Computes Adler32 checksum for a stream of data. An Adler32 \n+ * checksum is not as reliable as a CRC32 checksum, but a lot faster to \n+ * compute.\n+ *<p>\n+ * The specification for Adler32 may be found in RFC 1950.\n+ * (ZLIB Compressed Data Format Specification version 3.3)\n+ *<p>\n+ *<p>\n+ * From that document:\n+ *<p>\n+ *      \"ADLER32 (Adler-32 checksum)\n+ *       This contains a checksum value of the uncompressed data\n+ *       (excluding any dictionary data) computed according to Adler-32\n+ *       algorithm. This algorithm is a 32-bit extension and improvement\n+ *       of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073\n+ *       standard. \n+ *<p>\n+ *       Adler-32 is composed of two sums accumulated per byte: s1 is\n+ *       the sum of all bytes, s2 is the sum of all s1 values. Both sums\n+ *       are done modulo 65521. s1 is initialized to 1, s2 to zero.  The\n+ *       Adler-32 checksum is stored as s2*65536 + s1 in most-\n+ *       significant-byte first (network) order.\"\n+ *<p>\n+ * \"8.2. The Adler-32 algorithm\n+ *<p>\n+ *    The Adler-32 algorithm is much faster than the CRC32 algorithm yet\n+ *    still provides an extremely low probability of undetected errors.\n+ *<p>\n+ *    The modulo on unsigned long accumulators can be delayed for 5552\n+ *    bytes, so the modulo operation time is negligible.  If the bytes\n+ *    are a, b, c, the second sum is 3a + 2b + c + 3, and so is position\n+ *    and order sensitive, unlike the first sum, which is just a\n+ *    checksum.  That 65521 is prime is important to avoid a possible\n+ *    large class of two-byte errors that leave the check unchanged.\n+ *    (The Fletcher checksum uses 255, which is not prime and which also\n+ *    makes the Fletcher check insensitive to single byte changes 0 <->\n+ *    255.)\n+ *<p>\n+ *    The sum s1 is initialized to 1 instead of zero to make the length\n+ *    of the sequence part of s2, so that the length does not have to be\n+ *   checked separately. (Any sequence of zeroes has a Fletcher\n+ *    checksum of zero.)\"\n+ *\n+ * @author John Leuner, Per Bothner\n+ * @since JDK 1.1\n  *\n  * @see InflaterInputStream\n  * @see InflaterOutputStream\n- *\n- * @author Per Bothner\n- * @date April 6, 1999.\n  */\n public class Adler32 implements Checksum\n {\n \n   /** largest prime smaller than 65536 */\n-  private static int BASE = 65521;\n- \n-  private int s1;\n-  private int s2;\n+  private static final int BASE = 65521;\n+\n+  private int checksum; //we do all in int.\n+\n+  //Note that java doesn't have unsigned integers,\n+  //so we have to be careful with what arithmetic \n+  //we do. We return the checksum as a long to \n+  //avoid sign confusion.\n \n   /**\n-   * Creates an Adler32 data checksum.\n+   * Creates a new instance of the <code>Adler32</code> class. \n+   * The checksum starts off with a value of 1. \n    */\n   public Adler32 ()\n   {\n     reset();\n   }\n \n   /**\n-   * Resets the Adler32 data checksum as if no update was ever called.\n+   * Resets the Adler32 checksum to the initial value.\n    */\n-  public void reset () { s1 = 1;  s2 = 0; }\n+  public void reset () \n+  {\n+    checksum = 1; //Initialize to 1    \n+  }\n \n   /**\n-   * Adds one byte to the data checksum.\n+   * Updates the checksum with the byte b. \n    *\n    * @param bval the data value to add. The high byte of the int is ignored.\n    */\n   public void update (int bval)\n   {\n+    //We could make a length 1 byte array and call update again, but I\n+    //would rather not have that overhead\n+    int s1 = checksum & 0xffff;\n+    int s2 = checksum >>> 16;\n+    \n     s1 = (s1 + (bval & 0xFF)) % BASE;\n     s2 = (s1 + s2) % BASE;\n+    \n+    checksum = (s2 << 16) + s1;\n   }\n \n   /**\n-   * Adds the complete byte array to the data checksum.\n+   * Updates the checksum with the bytes taken from the array. \n+   * \n+   * @param buffer an array of bytes\n    */\n   public void update (byte[] buffer)\n   {\n     update(buffer, 0, buffer.length);\n   }\n \n   /**\n-   * Adds the byte array to the data checksum.\n-   *\n-   * @param buf the buffer which contains the data\n-   * @param off the offset in the buffer where the data starts\n-   * @param len the length of the data\n+   * Updates the checksum with the bytes taken from the array. \n+   * \n+   * @param buf an array of bytes\n+   * @param off the start of the data used for this update\n+   * @param len the number of bytes to use for this update\n    */\n   public void update (byte[] buf, int off, int len)\n   {\n-    int s1 = this.s1;\n-    int s2 = this.s2;\n+    //(By Per Bothner)\n+    int s1 = checksum & 0xffff;\n+    int s2 = checksum >>> 16;\n+\n     while (len > 0)\n       {\n-\t// We can defer the modulo operation.\n-\tint n = 4000;\n+\t// We can defer the modulo operation:\n+\t// s1 maximally grows from 65521 to 65521 + 255 * 3800\n+\t// s2 maximally grows by 3800 * median(s1) = 2090079800 < 2^31\n+\tint n = 3800;\n \tif (n > len)\n \t  n = len;\n \tlen -= n;\n@@ -113,15 +171,24 @@ public void update (byte[] buf, int off, int len)\n \ts1 %= BASE;\n \ts2 %= BASE;\n       }\n-    this.s1 = s1;\n-    this.s2 = s2;\n+\n+    /*Old implementation, borrowed from somewhere:\n+    int n;\n+    \n+    while (len-- > 0) {\n+\n+      s1 = (s1 + (bs[offset++] & 0xff)) % BASE; \n+      s2 = (s2 + s1) % BASE;\n+    }*/\n+    \n+    checksum = (s2 << 16) | s1;\n   }\n \n   /**\n    * Returns the Adler32 data checksum computed so far.\n    */\n   public long getValue()\n   {\n-    return ((long) s2 << 16) + s1;\n+    return (long) checksum & 0xffffffffL;\n   }\n }"}, {"sha": "f35b7723a50f4cacd3ccc81f51b73dcc0c435777", "filename": "libjava/java/util/zip/CRC32.java", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2600825ee1369357da1315e92f9bca3fe69b9f0e/libjava%2Fjava%2Futil%2Fzip%2FCRC32.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2600825ee1369357da1315e92f9bca3fe69b9f0e/libjava%2Fjava%2Futil%2Fzip%2FCRC32.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FCRC32.java?ref=2600825ee1369357da1315e92f9bca3fe69b9f0e", "patch": "@@ -1,13 +1,13 @@\n /* CRC32.java - Computes CRC32 data checksum of a data stream\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999. 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -41,7 +41,7 @@\n  * streams.\n  *\n  * @see InflaterInputStream\n- * @see InflaterOutputStream\n+ * @see DeflaterOutputStream\n  *\n  * @author Per Bothner\n  * @date April 1, 1999.\n@@ -86,6 +86,12 @@ public long getValue ()\n    */\n   public void reset () { crc = 0; }\n \n+  /**\n+   * Updates the checksum with the int bval. \n+   *\n+   * @param bval (the byte is taken as the lower 8 bits of bval)\n+   */\n+\n   public void update (int bval)\n   {\n     int c = ~crc;"}, {"sha": "520c3bbf2f5039c1297e1c60346dbb3fc9e14260", "filename": "libjava/java/util/zip/Checksum.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2600825ee1369357da1315e92f9bca3fe69b9f0e/libjava%2Fjava%2Futil%2Fzip%2FChecksum.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2600825ee1369357da1315e92f9bca3fe69b9f0e/libjava%2Fjava%2Futil%2Fzip%2FChecksum.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FChecksum.java?ref=2600825ee1369357da1315e92f9bca3fe69b9f0e", "patch": "@@ -1,13 +1,13 @@\n /* Checksum.java - Interface to compute a data checksum\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -43,7 +43,7 @@\n  * @see CheckedOutputStream\n  *\n  * @author Per Bothner\n- * @date January 9, 1999.\n+ * @author Jochen Hoenicke\n  */\n public interface Checksum\n {"}, {"sha": "b1c044e814bc16c3c8be3cf2facf5597358737c2", "filename": "libjava/java/util/zip/DataFormatException.java", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2600825ee1369357da1315e92f9bca3fe69b9f0e/libjava%2Fjava%2Futil%2Fzip%2FDataFormatException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2600825ee1369357da1315e92f9bca3fe69b9f0e/libjava%2Fjava%2Futil%2Fzip%2FDataFormatException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FDataFormatException.java?ref=2600825ee1369357da1315e92f9bca3fe69b9f0e", "patch": "@@ -1,13 +1,13 @@\n /* DataformatException.java - Exception thrown when compressed data is corrupt\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -26,17 +26,16 @@\n \n package java.util.zip;\n \n-/**\n- * @author Tom Tromey\n- * @date May 17, 1999\n- */\n-\n /* Written using on-line Java Platform 1.2 API Specification.\n  * Believed complete and correct.\n  */\n \n /**\n  * Exception thrown when compressed data is corrupt.\n+ *\n+ * @author Tom Tromey\n+ * @author John Leuner\n+ * @since JDK 1.1\n  */\n public class DataFormatException extends Exception\n {"}, {"sha": "fc39abf4ec0d5167e06700f733beb69c5e05be1b", "filename": "libjava/java/util/zip/ZipException.java", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2600825ee1369357da1315e92f9bca3fe69b9f0e/libjava%2Fjava%2Futil%2Fzip%2FZipException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2600825ee1369357da1315e92f9bca3fe69b9f0e/libjava%2Fjava%2Futil%2Fzip%2FZipException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipException.java?ref=2600825ee1369357da1315e92f9bca3fe69b9f0e", "patch": "@@ -1,13 +1,13 @@\n /* ZipException.java - Exception representing a zip related error\n-   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n GNU Classpath is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -26,15 +26,17 @@\n \n package java.util.zip;\n \n-/**\n- * @author Per Bothner\n- * @date January 9, 1999.\n- */\n-\n /* Written using on-line Java Platform 1.2 API Specification.\n  * Believed complete and correct.\n  */\n \n+/**\n+ * Is thrown during the creation or input of a zip file.\n+ *\n+ * @author Jochen Hoenicke\n+ * @author Per Bothner\n+ * @since JDK 1.1\n+ */\n public class ZipException extends java.io.IOException\n {\n   public ZipException ()"}]}