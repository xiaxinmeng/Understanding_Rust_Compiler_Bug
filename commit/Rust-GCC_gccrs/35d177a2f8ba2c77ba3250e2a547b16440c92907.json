{"sha": "35d177a2f8ba2c77ba3250e2a547b16440c92907", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVkMTc3YTJmOGJhMmM3N2JhMzI1MGUyYTU0N2IxNjQ0MGM5MjkwNw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2006-02-21T19:21:21Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2006-02-21T19:21:21Z"}, "message": "defaults.h (CFA_FRAME_BASE_OFFSET): Define.\n\n* defaults.h (CFA_FRAME_BASE_OFFSET): Define.\n* config/ia64/ia64.h (CFA_FRAME_BASE_OFFSET): Override.\n* doc/tm.texi (CFA_FRAME_BASE_OFFSET): Document.\n* dwarf2out.c (build_cfa_loc): New offset parameter.  Add it\nto the result of the expression.\n(def_cfa_1): Adjust.\n(frame_pointer_cfa_offset): Rename to...\n(frame_pointer_fb_offset): ... this.  Adjust all uses.\n(convert_cfa_to_loc_list): Rename to...\n(convert_cfa_to_fb_loc_list): ... this.  New offset parameter.\nPass it on to build_cfa_loc.\n(compute_frame_pointer_to_cfa_displacement): Rename to...\n(compute_frame_pointer_to_fb_displacement): ... this.  New\noffset parameter.  Use it in computation.\n(gen_subprogram_die): Compute cfa_fb_offset with the new\nmacro, and use it to compute the fb loc list and the\ndisplacement.\n\nFrom-SVN: r111341", "tree": {"sha": "e9cc90cb640c50debe56c3107b49f06cdd5cd24d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9cc90cb640c50debe56c3107b49f06cdd5cd24d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35d177a2f8ba2c77ba3250e2a547b16440c92907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d177a2f8ba2c77ba3250e2a547b16440c92907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35d177a2f8ba2c77ba3250e2a547b16440c92907", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d177a2f8ba2c77ba3250e2a547b16440c92907/comments", "author": null, "committer": null, "parents": [{"sha": "529490b41a1139f73cda48ff9bb72517f7cfa514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/529490b41a1139f73cda48ff9bb72517f7cfa514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/529490b41a1139f73cda48ff9bb72517f7cfa514"}], "stats": {"total": 112, "additions": 80, "deletions": 32}, "files": [{"sha": "8f6d7aa2f5a71135d6aa095a6993ddee3eca268d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d177a2f8ba2c77ba3250e2a547b16440c92907/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d177a2f8ba2c77ba3250e2a547b16440c92907/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35d177a2f8ba2c77ba3250e2a547b16440c92907", "patch": "@@ -1,3 +1,23 @@\n+2006-02-21  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* defaults.h (CFA_FRAME_BASE_OFFSET): Define.\n+\t* config/ia64/ia64.h (CFA_FRAME_BASE_OFFSET): Override.\n+\t* doc/tm.texi (CFA_FRAME_BASE_OFFSET): Document.\n+\t* dwarf2out.c (build_cfa_loc): New offset parameter.  Add it\n+\tto the result of the expression.\n+\t(def_cfa_1): Adjust.\n+\t(frame_pointer_cfa_offset): Rename to...\n+\t(frame_pointer_fb_offset): ... this.  Adjust all uses.\n+\t(convert_cfa_to_loc_list): Rename to...\n+\t(convert_cfa_to_fb_loc_list): ... this.  New offset parameter.\n+\tPass it on to build_cfa_loc.\n+\t(compute_frame_pointer_to_cfa_displacement): Rename to...\n+\t(compute_frame_pointer_to_fb_displacement): ... this.  New\n+\toffset parameter.  Use it in computation.\n+\t(gen_subprogram_die): Compute cfa_fb_offset with the new\n+\tmacro, and use it to compute the fb loc list and the\n+\tdisplacement.\n+\n 2006-02-21  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/predicates.md (cc_operand): Delete predicate.  All uses"}, {"sha": "0e036dede93a99e5bc4608f2d1fdce1f233b3e16", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d177a2f8ba2c77ba3250e2a547b16440c92907/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d177a2f8ba2c77ba3250e2a547b16440c92907/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=35d177a2f8ba2c77ba3250e2a547b16440c92907", "patch": "@@ -1020,6 +1020,9 @@ enum reg_class\n    pointer.  */\n #define INCOMING_FRAME_SP_OFFSET STACK_POINTER_OFFSET\n \n+/* We shorten debug info by using CFA-16 as DW_AT_frame_base.  */\n+#define CFA_FRAME_BASE_OFFSET(FUNDECL) (-INCOMING_FRAME_SP_OFFSET)\n+\n \f\n /* Register That Address the Stack Frame.  */\n "}, {"sha": "a82a7230dc211ac4eef3fc692410e2ad72d099fc", "filename": "gcc/defaults.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d177a2f8ba2c77ba3250e2a547b16440c92907/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d177a2f8ba2c77ba3250e2a547b16440c92907/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=35d177a2f8ba2c77ba3250e2a547b16440c92907", "patch": "@@ -889,6 +889,11 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #define ARG_POINTER_CFA_OFFSET(FNDECL) FIRST_PARM_OFFSET (FNDECL)\n #endif\n \n+/* On most machines, we use the CFA as DW_AT_frame_base.  */\n+#ifndef CFA_FRAME_BASE_OFFSET\n+#define CFA_FRAME_BASE_OFFSET(FNDECL) 0\n+#endif\n+\n /* The offset from the incoming value of %sp to the top of the stack frame\n    for the current function.  */\n #ifndef INCOMING_FRAME_SP_OFFSET"}, {"sha": "dd5786730655cfa2354a7a37941dff1c8ad96c05", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d177a2f8ba2c77ba3250e2a547b16440c92907/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d177a2f8ba2c77ba3250e2a547b16440c92907/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=35d177a2f8ba2c77ba3250e2a547b16440c92907", "patch": "@@ -3043,6 +3043,13 @@ of @code{FRAME_POINTER_CFA_OFFSET} and @code{ARG_POINTER_CFA_OFFSET}\n should be defined.\n @end defmac\n \n+@defmac CFA_FRAME_BASE_OFFSET (@var{fundecl})\n+If defined, a C expression whose value is an integer giving the offset\n+in bytes from the canonical frame address (cfa) to the frame base used\n+in DWARF 2 debug information.  The default is zero.  A different value\n+may reduce the size of debug information on some ports.\n+@end defmac\n+\n @node Exception Handling\n @subsection Exception Handling Support\n @cindex exception handling"}, {"sha": "568a3804f502f3afbf4965c18ace59bc79353971", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 45, "deletions": 32, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35d177a2f8ba2c77ba3250e2a547b16440c92907/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35d177a2f8ba2c77ba3250e2a547b16440c92907/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=35d177a2f8ba2c77ba3250e2a547b16440c92907", "patch": "@@ -344,7 +344,7 @@ static void output_cfa_loc (dw_cfi_ref);\n static void get_cfa_from_loc_descr (dw_cfa_location *,\n \t\t\t\t    struct dw_loc_descr_struct *);\n static struct dw_loc_descr_struct *build_cfa_loc\n- (dw_cfa_location *);\n+  (dw_cfa_location *, HOST_WIDE_INT);\n static void def_cfa_1 (const char *, dw_cfa_location *);\n \n /* How to start an assembler comment.  */\n@@ -805,7 +805,7 @@ def_cfa_1 (const char *label, dw_cfa_location *loc_p)\n       struct dw_loc_descr_struct *loc_list;\n \n       cfi->dw_cfi_opc = DW_CFA_def_cfa_expression;\n-      loc_list = build_cfa_loc (&loc);\n+      loc_list = build_cfa_loc (&loc, 0);\n       cfi->dw_cfi_oprnd1.dw_cfi_loc = loc_list;\n     }\n \n@@ -3390,14 +3390,17 @@ output_cfa_loc (dw_cfi_ref cfi)\n   output_loc_sequence (loc);\n }\n \n-/* This function builds a dwarf location descriptor sequence from\n-   a dw_cfa_location.  */\n+/* This function builds a dwarf location descriptor sequence from a\n+   dw_cfa_location, adding the given OFFSET to the result of the\n+   expression.  */\n \n static struct dw_loc_descr_struct *\n-build_cfa_loc (dw_cfa_location *cfa)\n+build_cfa_loc (dw_cfa_location *cfa, HOST_WIDE_INT offset)\n {\n   struct dw_loc_descr_struct *head, *tmp;\n \n+  offset += cfa->offset;\n+\n   if (cfa->indirect)\n     {\n       if (cfa->base_offset)\n@@ -3415,23 +3418,23 @@ build_cfa_loc (dw_cfa_location *cfa)\n       head->dw_loc_oprnd1.val_class = dw_val_class_const;\n       tmp = new_loc_descr (DW_OP_deref, 0, 0);\n       add_loc_descr (&head, tmp);\n-      if (cfa->offset != 0)\n+      if (offset != 0)\n \t{\n-\t  tmp = new_loc_descr (DW_OP_plus_uconst, cfa->offset, 0);\n+\t  tmp = new_loc_descr (DW_OP_plus_uconst, offset, 0);\n \t  add_loc_descr (&head, tmp);\n \t}\n     }\n   else\n     {\n-      if (cfa->offset == 0)\n+      if (offset == 0)\n \tif (cfa->reg <= 31)\n \t  head = new_loc_descr (DW_OP_reg0 + cfa->reg, 0, 0);\n \telse\n \t  head = new_loc_descr (DW_OP_regx, cfa->reg, 0);\n       else if (cfa->reg <= 31)\n-\thead = new_loc_descr (DW_OP_breg0 + cfa->reg, cfa->offset, 0);\n+\thead = new_loc_descr (DW_OP_breg0 + cfa->reg, offset, 0);\n       else\n-\thead = new_loc_descr (DW_OP_bregx, cfa->reg, cfa->offset);\n+\thead = new_loc_descr (DW_OP_bregx, cfa->reg, offset);\n     }\n \n   return head;\n@@ -3930,9 +3933,9 @@ static GTY(()) int label_num;\n \n #ifdef DWARF2_DEBUGGING_INFO\n \n-/* Offset from the \"steady-state frame pointer\" to the CFA,\n+/* Offset from the \"steady-state frame pointer\" to the frame base,\n    within the current function.  */\n-static HOST_WIDE_INT frame_pointer_cfa_offset;\n+static HOST_WIDE_INT frame_pointer_fb_offset;\n \n /* Forward declarations for functions defined in this file.  */\n \n@@ -8644,7 +8647,7 @@ based_loc_descr (rtx reg, HOST_WIDE_INT offset)\n \t    }\n \t  gcc_assert (elim == (frame_pointer_needed ? hard_frame_pointer_rtx\n \t\t      : stack_pointer_rtx));\n-          offset += frame_pointer_cfa_offset;\n+          offset += frame_pointer_fb_offset;\n \n           return new_loc_descr (DW_OP_fbreg, offset, 0);\n \t}\n@@ -10303,12 +10306,14 @@ tree_add_const_value_attribute (dw_die_ref var_die, tree decl)\n     add_const_value_attribute (var_die, rtl);\n }\n \n-/* Convert the CFI instructions for the current function into a location\n-   list.  This is used for DW_AT_frame_base when we targeting a dwarf2\n-   consumer that does not support the dwarf3 DW_OP_call_frame_cfa.  */\n+/* Convert the CFI instructions for the current function into a\n+   location list.  This is used for DW_AT_frame_base when we targeting\n+   a dwarf2 consumer that does not support the dwarf3\n+   DW_OP_call_frame_cfa.  OFFSET is a constant to be added to all CFA\n+   expressions.  */\n \n static dw_loc_list_ref\n-convert_cfa_to_loc_list (void)\n+convert_cfa_to_fb_loc_list (HOST_WIDE_INT offset)\n {\n   dw_fde_ref fde;\n   dw_loc_list_ref list, *list_tail;\n@@ -10345,8 +10350,9 @@ convert_cfa_to_loc_list (void)\n       case DW_CFA_advance_loc4:\n \tif (!cfa_equal_p (&last_cfa, &next_cfa))\n \t  {\n-\t    *list_tail = new_loc_list (build_cfa_loc (&last_cfa), start_label,\n-\t\t\t\t       last_label, section, list == NULL);\n+\t    *list_tail = new_loc_list (build_cfa_loc (&last_cfa, offset),\n+\t\t\t\t       start_label, last_label, section,\n+\t\t\t\t       list == NULL);\n \n \t    list_tail = &(*list_tail)->dw_loc_next;\n \t    last_cfa = next_cfa;\n@@ -10370,32 +10376,35 @@ convert_cfa_to_loc_list (void)\n \n   if (!cfa_equal_p (&last_cfa, &next_cfa))\n     {\n-      *list_tail = new_loc_list (build_cfa_loc (&last_cfa), start_label,\n-\t\t\t\t last_label, section, list == NULL);\n+      *list_tail = new_loc_list (build_cfa_loc (&last_cfa, offset),\n+\t\t\t\t start_label, last_label, section,\n+\t\t\t\t list == NULL);\n       list_tail = &(*list_tail)->dw_loc_next;\n       start_label = last_label;\n     }\n-  *list_tail = new_loc_list (build_cfa_loc (&next_cfa), start_label,\n-\t\t\t     fde->dw_fde_end, section, list == NULL);\n+  *list_tail = new_loc_list (build_cfa_loc (&next_cfa, offset),\n+\t\t\t     start_label, fde->dw_fde_end, section,\n+\t\t\t     list == NULL);\n \n   return list;\n }\n \n-/* Compute a displacement from the \"steady-state frame pointer\" to\n-   the CFA, and store it in frame_pointer_cfa_offset.  */\n+/* Compute a displacement from the \"steady-state frame pointer\" to the\n+   frame base (often the same as the CFA), and store it in\n+   frame_pointer_fb_offset.  OFFSET is added to the displacement\n+   before the latter is negated.  */\n \n static void\n-compute_frame_pointer_to_cfa_displacement (void)\n+compute_frame_pointer_to_fb_displacement (HOST_WIDE_INT offset)\n {\n-  HOST_WIDE_INT offset;\n   rtx reg, elim;\n \n #ifdef FRAME_POINTER_CFA_OFFSET\n   reg = frame_pointer_rtx;\n-  offset = FRAME_POINTER_CFA_OFFSET (current_function_decl);\n+  offset += FRAME_POINTER_CFA_OFFSET (current_function_decl);\n #else\n   reg = arg_pointer_rtx;\n-  offset = ARG_POINTER_CFA_OFFSET (current_function_decl);\n+  offset += ARG_POINTER_CFA_OFFSET (current_function_decl);\n #endif\n \n   elim = eliminate_regs (reg, VOIDmode, NULL_RTX);\n@@ -10407,7 +10416,7 @@ compute_frame_pointer_to_cfa_displacement (void)\n   gcc_assert (elim == (frame_pointer_needed ? hard_frame_pointer_rtx\n \t\t       : stack_pointer_rtx));\n \n-  frame_pointer_cfa_offset = -offset;\n+  frame_pointer_fb_offset = -offset;\n }\n \n /* Generate a DW_AT_name attribute given some string value to be included as\n@@ -11607,6 +11616,8 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n     }\n   else if (!DECL_EXTERNAL (decl))\n     {\n+      HOST_WIDE_INT cfa_fb_offset;\n+\n       if (!old_die || !get_AT (old_die, DW_AT_inline))\n \tequate_decl_number_to_die (decl, subr_die);\n \n@@ -11643,6 +11654,8 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n       add_AT_fde_ref (subr_die, DW_AT_MIPS_fde, current_funcdef_fde);\n #endif\n \n+      cfa_fb_offset = CFA_FRAME_BASE_OFFSET (decl);\n+\n       /* We define the \"frame base\" as the function's CFA.  This is more\n \t convenient for several reasons: (1) It's stable across the prologue\n \t and epilogue, which makes it better than just a frame pointer,\n@@ -11656,7 +11669,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t consumers that understand it; fall back to \"pure\" dwarf2 and\n \t convert the CFA data into a location list.  */\n       {\n-\tdw_loc_list_ref list = convert_cfa_to_loc_list ();\n+\tdw_loc_list_ref list = convert_cfa_to_fb_loc_list (cfa_fb_offset);\n \tif (list->dw_loc_next)\n \t  add_AT_loc_list (subr_die, DW_AT_frame_base, list);\n \telse\n@@ -11668,7 +11681,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n \t will reference in the rtl; the later is what we've told the \n \t debugger about.  We'll need to adjust all frame_base references\n \t by this displacement.  */\n-      compute_frame_pointer_to_cfa_displacement ();\n+      compute_frame_pointer_to_fb_displacement (cfa_fb_offset);\n \n       if (cfun->static_chain_decl)\n \tadd_AT_location_description (subr_die, DW_AT_static_link,"}]}