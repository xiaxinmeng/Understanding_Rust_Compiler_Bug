{"sha": "2d3ca8b7219003d4504d49aec0bff1566391a69a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQzY2E4YjcyMTkwMDNkNDUwNGQ0OWFlYzBiZmYxNTY2MzkxYTY5YQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-03-11T10:49:13Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2008-03-11T10:49:13Z"}, "message": "re PR libfortran/32812 (random_seed and date_and_time)\n\n\tPR libfortran/32812\n\t* intrinsics/random.c (scramble_seed, unscramble_seed): New\n\tfunctions.\n\t(random_seed_i4): Scramble the seed the user gives us before\n\tstoring it, and unscramble it when we return it back later.\n\nFrom-SVN: r133104", "tree": {"sha": "9465714d2574c68cfa85ff97a809f30a6e00bd63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9465714d2574c68cfa85ff97a809f30a6e00bd63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d3ca8b7219003d4504d49aec0bff1566391a69a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d3ca8b7219003d4504d49aec0bff1566391a69a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d3ca8b7219003d4504d49aec0bff1566391a69a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d3ca8b7219003d4504d49aec0bff1566391a69a/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ffe34d9f7823398e9937858cfdfbbd33e2d9130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ffe34d9f7823398e9937858cfdfbbd33e2d9130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ffe34d9f7823398e9937858cfdfbbd33e2d9130"}], "stats": {"total": 51, "additions": 47, "deletions": 4}, "files": [{"sha": "2ada2632c36f8aad14db72a25f46ffabc43d9cb4", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3ca8b7219003d4504d49aec0bff1566391a69a/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3ca8b7219003d4504d49aec0bff1566391a69a/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=2d3ca8b7219003d4504d49aec0bff1566391a69a", "patch": "@@ -1,3 +1,11 @@\n+2008-03-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR libfortran/32812\n+\t* intrinsics/random.c (scramble_seed, unscramble_seed): New\n+\tfunctions.\n+\t(random_seed_i4): Scramble the seed the user gives us before\n+\tstoring it, and unscramble it when we return it back later.\n+\n 2008-03-05  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR libfortran/35293"}, {"sha": "360e6ec22bab622146bada2f93428cd2626d3226", "filename": "libgfortran/intrinsics/random.c", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d3ca8b7219003d4504d49aec0bff1566391a69a/libgfortran%2Fintrinsics%2Frandom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d3ca8b7219003d4504d49aec0bff1566391a69a/libgfortran%2Fintrinsics%2Frandom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Frandom.c?ref=2d3ca8b7219003d4504d49aec0bff1566391a69a", "patch": "@@ -639,6 +639,29 @@ arandom_r16 (gfc_array_r16 *x)\n \n #endif\n \n+\n+\n+static void\n+scramble_seed (unsigned char *dest, unsigned char *src, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    dest[(i % 2) * (size / 2) + i / 2] = src[i];\n+}\n+\n+\n+static void\n+unscramble_seed (unsigned char *dest, unsigned char *src, int size)\n+{\n+  int i;\n+\n+  for (i = 0; i < size; i++)\n+    dest[i] = src[(i % 2) * (size / 2) + i / 2];\n+}\n+\n+\n+\n /* random_seed is used to seed the PRNG with either a default\n    set of seeds or user specified set of seeds.  random_seed\n    must be called with no argument or exactly one argument.  */\n@@ -647,6 +670,7 @@ void\n random_seed_i4 (GFC_INTEGER_4 *size, gfc_array_i4 *put, gfc_array_i4 *get)\n {\n   int i;\n+  unsigned char seed[4*kiss_size];\n \n   __gthread_mutex_lock (&random_lock);\n \n@@ -673,9 +697,15 @@ random_seed_i4 (GFC_INTEGER_4 *size, gfc_array_i4 *put, gfc_array_i4 *get)\n       if (((put->dim[0].ubound + 1 - put->dim[0].lbound)) < kiss_size)\n         runtime_error (\"Array size of PUT is too small.\");\n \n-      /*  This code now should do correct strides.  */\n+      /*  We copy the seed given by the user.  */\n       for (i = 0; i < kiss_size; i++)\n-\tkiss_seed[i] = (GFC_UINTEGER_4) put->data[i * put->dim[0].stride];\n+\tmemcpy (seed + i * sizeof(GFC_UINTEGER_4),\n+\t\t&(put->data[(kiss_size - 1 - i) * put->dim[0].stride]),\n+\t\tsizeof(GFC_UINTEGER_4));\n+\n+      /* We put it after scrambling the bytes, to paper around users who\n+\t provide seeds with quality only in the lower or upper part.  */\n+      scramble_seed ((unsigned char *) kiss_seed, seed, 4*kiss_size);\n     }\n \n   /* Return the seed to GET data.  */\n@@ -689,9 +719,14 @@ random_seed_i4 (GFC_INTEGER_4 *size, gfc_array_i4 *put, gfc_array_i4 *get)\n       if (((get->dim[0].ubound + 1 - get->dim[0].lbound)) < kiss_size)\n \truntime_error (\"Array size of GET is too small.\");\n \n-      /*  This code now should do correct strides.  */\n+      /* Unscramble the seed.  */\n+      unscramble_seed (seed, (unsigned char *) kiss_seed, 4*kiss_size);\n+\n+      /*  Then copy it back to the user variable.  */\n       for (i = 0; i < kiss_size; i++)\n-        get->data[i * get->dim[0].stride] = (GFC_INTEGER_4) kiss_seed[i];\n+       memcpy (&(get->data[(kiss_size - 1 - i) * get->dim[0].stride]),\n+               seed + i * sizeof(GFC_UINTEGER_4),\n+               sizeof(GFC_UINTEGER_4));\n     }\n \n   __gthread_mutex_unlock (&random_lock);"}]}