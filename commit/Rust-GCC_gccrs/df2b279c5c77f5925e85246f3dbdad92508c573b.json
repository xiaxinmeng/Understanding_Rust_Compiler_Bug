{"sha": "df2b279c5c77f5925e85246f3dbdad92508c573b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYyYjI3OWM1Yzc3ZjU5MjVlODUyNDZmM2RiZGFkOTI1MDhjNTczYg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2014-03-06T08:35:40Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2014-03-06T08:35:40Z"}, "message": "t-msp430 (LIB2ADD): Add lib2hw_mul.S\n\n\t* config/msp430/t-msp430 (LIB2ADD): Add lib2hw_mul.S\n\t* config/msp430/lib2hw_mul.S: New: Hardware multiply routines.\n\nFrom-SVN: r208374", "tree": {"sha": "15f90c3e85fee134dd900caa2d3c50879f276d89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15f90c3e85fee134dd900caa2d3c50879f276d89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df2b279c5c77f5925e85246f3dbdad92508c573b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2b279c5c77f5925e85246f3dbdad92508c573b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2b279c5c77f5925e85246f3dbdad92508c573b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2b279c5c77f5925e85246f3dbdad92508c573b/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "80662856d25b4819a2323c1cbcdf35df85e3dfa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80662856d25b4819a2323c1cbcdf35df85e3dfa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80662856d25b4819a2323c1cbcdf35df85e3dfa2"}], "stats": {"total": 232, "additions": 232, "deletions": 0}, "files": [{"sha": "0b908d9be783f38513241929583360b16d10a5cd", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2b279c5c77f5925e85246f3dbdad92508c573b/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2b279c5c77f5925e85246f3dbdad92508c573b/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=df2b279c5c77f5925e85246f3dbdad92508c573b", "patch": "@@ -1,3 +1,8 @@\n+2014-03-06  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/msp430/t-msp430 (LIB2ADD): Add lib2hw_mul.S\n+\t* config/msp430/lib2hw_mul.S: New: Hardware multiply routines.\n+\n 2014-02-28  Joey Ye  <joey.ye@arm.com>\n \n \tPR libgcc/60166"}, {"sha": "7c83323ed5e38437e1252ca37ba98f70bb8a69a0", "filename": "libgcc/config/msp430/lib2hw_mul.S", "status": "added", "additions": 226, "deletions": 0, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2b279c5c77f5925e85246f3dbdad92508c573b/libgcc%2Fconfig%2Fmsp430%2Flib2hw_mul.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2b279c5c77f5925e85246f3dbdad92508c573b/libgcc%2Fconfig%2Fmsp430%2Flib2hw_mul.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmsp430%2Flib2hw_mul.S?ref=df2b279c5c77f5925e85246f3dbdad92508c573b", "patch": "@@ -0,0 +1,226 @@\n+;   Copyright (C) 2014 Free Software Foundation, Inc.\n+;   Contributed by Red Hat.\n+; \n+; This file is free software; you can redistribute it and/or modify it\n+; under the terms of the GNU General Public License as published by the\n+; Free Software Foundation; either version 3, or (at your option) any\n+; later version.\n+; \n+; This file is distributed in the hope that it will be useful, but\n+; WITHOUT ANY WARRANTY; without even the implied warranty of\n+; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+; General Public License for more details.\n+; \n+; Under Section 7 of GPL version 3, you are granted additional\n+; permissions described in the GCC Runtime Library Exception, version\n+; 3.1, as published by the Free Software Foundation.\n+;\n+; You should have received a copy of the GNU General Public License and\n+; a copy of the GCC Runtime Library Exception along with this program;\n+; see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+; <http://www.gnu.org/licenses/>.\n+\n+.macro start_func name\n+\t.pushsection .text.\\name,\"ax\",@progbits\n+\t.align 2\n+\t.global \\name\n+\t.type \\name , @function\n+\\name:\n+\tPUSH.W\tsr\t\t\t; Save current interrupt state\n+\tDINT\t\t\t\t; Disable interrupts\n+\tNOP\t\t\t\t; Account for latency\n+.endm\n+\n+.macro end_func name\n+#ifdef __MSP430X_LARGE__\n+\tPOP.W  sr\n+        RETA\n+#else\n+\tRETI\n+#endif\n+\t.size \\name , . - \\name\n+\t.popsection\n+.endm\n+\n+.macro mult16 OP1, OP2, RESULT\n+;* * 16-bit hardware multiply:  int16 = int16 * int16\n+;*  \n+;*   - Operand 1 is in R12\n+;*   - Operand 2 is in R13\n+;*   - Result is in R12\n+;*\n+;* To ensure that the multiply is performed atomically, interrupts are\n+;* disabled upon routine entry.  Interrupt state is restored upon exit.\n+;*\n+;*   Registers used:  R12, R13\n+;*\n+;* Macro arguments are the memory locations of the hardware registers.\n+\t\n+\tMOV.W\tr12, &\\OP1\t\t; Load operand 1 into multiplier\n+\tMOV.W\tr13, &\\OP2\t\t; Load operand 2 which triggers MPY\n+\tMOV.W\t&\\RESULT, r12\t\t; Move result into return register\n+.endm\n+\n+.macro mult1632 OP1, OP2, RESULT_LO, RESULT_HI\n+;* * 16-bit hardware multiply with a 32-bit result:\n+;*\tint32 = int16 * int16\n+;* \tuint32 = uint16 * uint16\n+;*  \n+;*   - Operand 1 is in R12\n+;*   - Operand 2 is in R13\n+;*   - Result is in R12, R13\n+;*\n+;* To ensure that the multiply is performed atomically, interrupts are\n+;* disabled upon routine entry.  Interrupt state is restored upon exit.\n+;*\n+;*   Registers used:  R12, R13\n+;*\n+;* Macro arguments are the memory locations of the hardware registers.\n+\t\n+\tMOV.W\tr12, &\\OP1\t\t; Load operand 1 into multiplier\n+\tMOV.W\tr13, &\\OP2\t\t; Load operand 2 which triggers MPY\n+\tMOV.W\t&\\RESULT_LO, r12\t; Move low result into return register\n+\tMOV.W\t&\\RESULT_HI, r13\t; Move high result into return register\n+.endm\n+\n+.macro mult32 OP1, OP2, MAC_OP1, MAC_OP2, RESULT_LO, RESULT_HI\n+;* * 32-bit hardware multiply with a 32-bit result using 16 multiply and accumulate:\n+;*\tint32 = int32 * int32\n+;*  \n+;*   - Operand 1 is in R12, R13\n+;*   - Operand 2 is in R14, R15\n+;*   - Result    is in R12, R13\n+;*\n+;* To ensure that the multiply is performed atomically, interrupts are\n+;* disabled upon routine entry.  Interrupt state is restored upon exit.\n+;*\n+;*   Registers used:  R12, R13, R14, R15\n+;*\n+;* Macro arguments are the memory locations of the hardware registers.\n+\t\n+\tMOV.W\tr12, &\\OP1\t\t; Load operand 1 Low into multiplier\n+\tMOV.W\tr14, &\\OP2\t\t; Load operand 2 Low which triggers MPY\n+\tMOV.W\tr12, &\\MAC_OP1\t\t; Load operand 1 Low into mac\n+\tMOV.W   &\\RESULT_LO, r12\t; Low 16-bits of result ready for return\n+\tMOV.W   &\\RESULT_HI, &\\RESULT_LO; MOV intermediate mpy high into low\n+\tMOV.W\tr15, &\\MAC_OP2\t\t; Load operand 2 High, trigger MAC\n+\tMOV.W\tr13, &\\MAC_OP1\t\t; Load operand 1 High\n+\tMOV.W\tr14, &\\MAC_OP2\t\t; Load operand 2 Lo, trigger MAC\n+\tMOV.W\t&\\RESULT_LO, r13        ; Upper 16-bits result ready for return\n+.endm\n+\n+\n+.macro mult32_hw  OP1_LO  OP1_HI  OP2_LO  OP2_HI  RESULT_LO  RESULT_HI\n+;* * 32-bit hardware multiply with a 32-bit result\n+;*\tint32 = int32 * int32\n+;*  \n+;*   - Operand 1 is in R12, R13\n+;*   - Operand 2 is in R14, R15\n+;*   - Result    is in R12, R13\n+;*\n+;* To ensure that the multiply is performed atomically, interrupts are\n+;* disabled upon routine entry.  Interrupt state is restored upon exit.\n+;*\n+;*   Registers used:  R12, R13, R14, R15\n+;*\n+;* Macro arguments are the memory locations of the hardware registers.\n+\t\n+\tMOV.W\tr12, &\\OP1_LO\t\t; Load operand 1 Low into multiplier\n+\tMOV.W\tr13, &\\OP1_HI\t\t; Load operand 1 High into multiplier\n+\tMOV.W\tr14, &\\OP2_LO\t\t; Load operand 2 Low into multiplier\n+\tMOV.W\tr15, &\\OP2_HI\t\t; Load operand 2 High, trigger MPY\n+\tMOV.W\t&\\RESULT_LO, r12\t; Ready low 16-bits for return\n+\tMOV.W   &\\RESULT_HI, r13\t; Ready high 16-bits for return\n+.endm\n+\n+.macro mult3264_hw  OP1_LO  OP1_HI  OP2_LO  OP2_HI  RES0 RES1 RES2 RES3\n+;* * 32-bit hardware multiply with a 64-bit result\n+;*\tint64 = int32 * int32\n+;*\tuint64 = uint32 * uint32\n+;*  \n+;*   - Operand 1 is in R12, R13\n+;*   - Operand 2 is in R14, R15\n+;*   - Result    is in R12, R13, R14, R15\n+;*\n+;* To ensure that the multiply is performed atomically, interrupts are\n+;* disabled upon routine entry.  Interrupt state is restored upon exit.\n+;*\n+;*   Registers used:  R12, R13, R14, R15\n+;*\n+;* Macro arguments are the memory locations of the hardware registers.\n+\t\n+\tMOV.W\tr12, &\\OP1_LO\t\t; Load operand 1 Low into multiplier\n+\tMOV.W\tr13, &\\OP1_HI\t\t; Load operand 1 High into multiplier\n+\tMOV.W\tr14, &\\OP2_LO\t\t; Load operand 2 Low into multiplier\n+\tMOV.W\tr15, &\\OP2_HI\t\t; Load operand 2 High, trigger MPY\n+\tMOV.W\t&\\RES0, R12\t\t; Ready low 16-bits for return\n+\tMOV.W   &\\RES1, R13\t\t; \n+\tMOV.W\t&\\RES2, R14\t\t; \n+\tMOV.W   &\\RES3, R15\t\t; Ready high 16-bits for return\n+.endm\n+\n+\n+;;  First generation MSP430 hardware multiplies ....\n+\n+.set MPY_OP1,   0x0130\n+.set MPY_OP1_S, 0x0132\n+.set MAC_OP1, \t0x0134\n+.set MPY_OP2, \t0x0138\n+.set MAC_OP2, \t0x0138\n+.set RESULT_LO, 0x013A\n+.set RESULT_HI, 0x013C\n+\t\n+\tstart_func __mulhi2\n+\tmult16 MPY_OP1, MPY_OP2, RESULT_LO\n+\tend_func __mulhi2\n+\n+\tstart_func __mulsihi2\n+\tmult1632 MPY_OP1_S, MPY_OP2, RESULT_LO, RESULT_HI\n+\tend_func __mulsihi2\n+\n+\tstart_func __umulsihi2\n+\tmult1632 MPY_OP1, MPY_OP2, RESULT_LO, RESULT_HI\n+\tend_func __umulsihi2\n+\n+\tstart_func __mulsi2\n+\tmult32 MPY_OP1, MPY_OP2, MAC_OP1, MAC_OP2, RESULT_LO, RESULT_HI\n+\tend_func __mulsi2\n+\n+\tstart_func __mulsi2_hw32\n+\tmult32_hw 0x0140, 0x0142, 0x0150, 0x0152, 0x0154, 0x0156\n+\tend_func __mulsi2_hw32\n+\n+\tstart_func __muldisi2_hw32\n+\tmult3264_hw 0x0144, 0x146, 0x0150, 0x0152, 0x0154, 0x0156, 0x0158, 0x015A\n+\tend_func __muldisi2_hw32\n+\n+\tstart_func __umuldisi2_hw32\n+\tmult3264_hw 0x0140, 0x142, 0x0150, 0x0152, 0x0154, 0x0156, 0x0158, 0x015A\n+\tend_func __umuldisi2_hw32\n+\t\n+/* The F5xxx series of MCUs support the same 16-bit hardware\n+   multiply, but it is accessed from different memory registers.  */\n+\t\n+\tstart_func __mulhi2_f5\n+\tmult16 0x04C0, 0x04C8, 0x04CA\n+\tend_func __mulhi2_f5\n+\n+\tstart_func __mulsihi2_f5\n+\tmult1632 0x04C2, 0x04C8, 0x04CA, 0x04CC\n+\tend_func __mulsihi2_f5\n+\t\n+\tstart_func __umulsihi2_f5\n+\tmult1632 0x04C0, 0x04C8, 0x04CA, 0x04CC\n+\tend_func __umulsihi2_f5\n+\n+\tstart_func __mulsi2_f5\n+\tmult32_hw 0x04D0, 0x04D2, 0x04E0, 0x04E2, 0x04E4, 0x04E6\n+\tend_func __mulsi2_f5\n+\t\n+\tstart_func __muldisi2_f5\n+\tmult3264_hw 0x04D4, 0x04D6, 0x04E0, 0x04E2, 0x04E4, 0x04E6, 0x04E8, 0x04EA\n+\tend_func __muldisi2_f5\n+\t\n+\tstart_func __umuldisi2_f5\n+\tmult3264_hw 0x04D0, 0x04D2, 0x04E0, 0x04E2, 0x04E4, 0x04E6, 0x04E8, 0x04EA\n+\tend_func __umuldisi2_f5"}, {"sha": "7a7b68007a51172315f8c8333858433427840d16", "filename": "libgcc/config/msp430/t-msp430", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2b279c5c77f5925e85246f3dbdad92508c573b/libgcc%2Fconfig%2Fmsp430%2Ft-msp430", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2b279c5c77f5925e85246f3dbdad92508c573b/libgcc%2Fconfig%2Fmsp430%2Ft-msp430", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmsp430%2Ft-msp430?ref=df2b279c5c77f5925e85246f3dbdad92508c573b", "patch": "@@ -35,6 +35,7 @@ LIB2ADD = \\\n \t$(srcdir)/config/msp430/srai.S \\\n \t$(srcdir)/config/msp430/srli.S \\\n \t$(srcdir)/config/msp430/cmpsi2.S \\\n+\t$(srcdir)/config/msp430/lib2hw_mul.S \\\n \t$(srcdir)/config/msp430/floatunhisf.c \\\n \t$(srcdir)/config/msp430/floatunhidf.c \\\n \t$(srcdir)/config/msp430/floathidf.c \\"}]}