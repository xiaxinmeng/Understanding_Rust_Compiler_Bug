{"sha": "4cfdaeb2755121ac1069f09898def56469b0fb51", "node_id": "C_kwDOANBUbNoAKDRjZmRhZWIyNzU1MTIxYWMxMDY5ZjA5ODk4ZGVmNTY0NjliMGZiNTE", "commit": {"author": {"name": "Jos\u00e9 Rui Faustino de Sousa", "email": "jrfsousa@gmail.com", "date": "2022-10-18T20:29:59Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-10-21T18:17:43Z"}, "message": "Fortran: Add missing TKR initialization to class variables [PR100097, PR100098]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/100097\n\tPR fortran/100098\n\t* trans-array.cc (gfc_trans_class_array): New function to\n\tinitialize class descriptor's TKR information.\n\t* trans-array.h (gfc_trans_class_array): Add function prototype.\n\t* trans-decl.cc (gfc_trans_deferred_vars): Add calls to the new\n\tfunction for both pointers and allocatables.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/100097\n\tPR fortran/100098\n\t* gfortran.dg/PR100097.f90: New test.\n\t* gfortran.dg/PR100098.f90: New test.", "tree": {"sha": "f99a46e71c1126e3092037e4b8ae23eea8d46c17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f99a46e71c1126e3092037e4b8ae23eea8d46c17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cfdaeb2755121ac1069f09898def56469b0fb51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cfdaeb2755121ac1069f09898def56469b0fb51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cfdaeb2755121ac1069f09898def56469b0fb51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cfdaeb2755121ac1069f09898def56469b0fb51/comments", "author": {"login": "jrfsousa", "id": 56982651, "node_id": "MDQ6VXNlcjU2OTgyNjUx", "avatar_url": "https://avatars.githubusercontent.com/u/56982651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrfsousa", "html_url": "https://github.com/jrfsousa", "followers_url": "https://api.github.com/users/jrfsousa/followers", "following_url": "https://api.github.com/users/jrfsousa/following{/other_user}", "gists_url": "https://api.github.com/users/jrfsousa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrfsousa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrfsousa/subscriptions", "organizations_url": "https://api.github.com/users/jrfsousa/orgs", "repos_url": "https://api.github.com/users/jrfsousa/repos", "events_url": "https://api.github.com/users/jrfsousa/events{/privacy}", "received_events_url": "https://api.github.com/users/jrfsousa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5792208f5124f687376f25798668d105d7ddb270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5792208f5124f687376f25798668d105d7ddb270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5792208f5124f687376f25798668d105d7ddb270"}], "stats": {"total": 140, "additions": 139, "deletions": 1}, "files": [{"sha": "514cb057afb6d404295a4042ed0fac0311b8425f", "filename": "gcc/fortran/trans-array.cc", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cfdaeb2755121ac1069f09898def56469b0fb51/gcc%2Ffortran%2Ftrans-array.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cfdaeb2755121ac1069f09898def56469b0fb51/gcc%2Ffortran%2Ftrans-array.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.cc?ref=4cfdaeb2755121ac1069f09898def56469b0fb51", "patch": "@@ -11125,6 +11125,52 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n }\n \n \n+/* Initialize class descriptor's TKR infomation.  */\n+\n+void\n+gfc_trans_class_array (gfc_symbol * sym, gfc_wrapped_block * block)\n+{\n+  tree type, etype;\n+  tree tmp;\n+  tree descriptor;\n+  stmtblock_t init;\n+  locus loc;\n+  int rank;\n+\n+  /* Make sure the frontend gets these right.  */\n+  gcc_assert (sym->ts.type == BT_CLASS && CLASS_DATA (sym)\n+\t      && (CLASS_DATA (sym)->attr.class_pointer\n+\t\t  || CLASS_DATA (sym)->attr.allocatable));\n+\n+  gcc_assert (VAR_P (sym->backend_decl)\n+\t      || TREE_CODE (sym->backend_decl) == PARM_DECL);\n+\n+  if (sym->attr.dummy)\n+    return;\n+\n+  descriptor = gfc_class_data_get (sym->backend_decl);\n+  type = TREE_TYPE (descriptor);\n+\n+  if (type == NULL || !GFC_DESCRIPTOR_TYPE_P (type))\n+    return;\n+\n+  gfc_save_backend_locus (&loc);\n+  gfc_set_backend_locus (&sym->declared_at);\n+  gfc_init_block (&init);\n+\n+  rank = CLASS_DATA (sym)->as ? (CLASS_DATA (sym)->as->rank) : (0);\n+  gcc_assert (rank>=0);\n+  tmp = gfc_conv_descriptor_dtype (descriptor);\n+  etype = gfc_get_element_type (type);\n+  tmp = fold_build2_loc (input_location, MODIFY_EXPR, TREE_TYPE (tmp), tmp,\n+\t\t\t gfc_get_dtype_rank_type (rank, etype));\n+  gfc_add_expr_to_block (&init, tmp);\n+\n+  gfc_add_init_cleanup (block, gfc_finish_block (&init), NULL_TREE);\n+  gfc_restore_backend_locus (&loc);\n+}\n+\n+\n /* NULLIFY an allocatable/pointer array on function entry, free it on exit.\n    Do likewise, recursively if necessary, with the allocatable components of\n    derived types.  This function is also called for assumed-rank arrays, which"}, {"sha": "cd2b3d9f2f052b0184e368614c3f252d635a3f74", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cfdaeb2755121ac1069f09898def56469b0fb51/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cfdaeb2755121ac1069f09898def56469b0fb51/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=4cfdaeb2755121ac1069f09898def56469b0fb51", "patch": "@@ -69,6 +69,8 @@ tree gfc_check_pdt_dummy (gfc_symbol *, tree, int, gfc_actual_arglist *);\n \n tree gfc_alloc_allocatable_for_assignment (gfc_loopinfo*, gfc_expr*, gfc_expr*);\n \n+/* Add initialization for class descriptors  */\n+void gfc_trans_class_array (gfc_symbol *, gfc_wrapped_block *);\n /* Add initialization for deferred arrays.  */\n void gfc_trans_deferred_array (gfc_symbol *, gfc_wrapped_block *);\n /* Generate an initializer for a static pointer or allocatable array.  */"}, {"sha": "63515b9072a2163ef9246e5799e01b43f1cf48b3", "filename": "gcc/fortran/trans-decl.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cfdaeb2755121ac1069f09898def56469b0fb51/gcc%2Ffortran%2Ftrans-decl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cfdaeb2755121ac1069f09898def56469b0fb51/gcc%2Ffortran%2Ftrans-decl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.cc?ref=4cfdaeb2755121ac1069f09898def56469b0fb51", "patch": "@@ -4835,7 +4835,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n       else if ((!sym->attr.dummy || sym->ts.deferred)\n \t\t&& (sym->ts.type == BT_CLASS\n \t\t&& CLASS_DATA (sym)->attr.class_pointer))\n-\tcontinue;\n+\tgfc_trans_class_array (sym, block);\n       else if ((!sym->attr.dummy || sym->ts.deferred)\n \t\t&& (sym->attr.allocatable\n \t\t    || (sym->attr.pointer && sym->attr.result)\n@@ -4919,6 +4919,10 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t\t  tmp = NULL_TREE;\n \t\t}\n \n+\t      /* Initialize descriptor's TKR information.  */\n+\t      if (sym->ts.type == BT_CLASS)\n+\t\tgfc_trans_class_array (sym, block);\n+\n \t      /* Deallocate when leaving the scope. Nullifying is not\n \t\t needed.  */\n \t      if (!sym->attr.result && !sym->attr.dummy && !sym->attr.pointer"}, {"sha": "f927d293e2c32f3829a248e8b81f52784d3662e0", "filename": "gcc/testsuite/gfortran.dg/PR100097.f90", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cfdaeb2755121ac1069f09898def56469b0fb51/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100097.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cfdaeb2755121ac1069f09898def56469b0fb51/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100097.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100097.f90?ref=4cfdaeb2755121ac1069f09898def56469b0fb51", "patch": "@@ -0,0 +1,41 @@\n+! { dg-do run }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! Test the fix for PR100097\n+!\n+\n+program main_p\n+  implicit none\n+\n+  class(*), pointer     :: bar_p(:)\n+  class(*), allocatable :: bar_a(:)\n+\n+  call foo_p(bar_p)\n+  call foo_a(bar_a)\n+\n+contains\n+\n+  subroutine foo_p(that)\n+    class(*), pointer, intent(out) :: that(..)\n+\n+    select rank(that)\n+    rank(1)\n+    rank default\n+      stop 1\n+    end select\n+  end subroutine foo_p\n+\n+  subroutine foo_a(that)\n+    class(*), allocatable, intent(out) :: that(..)\n+\n+    select rank(that)\n+    rank(1)\n+    rank default\n+      stop 2\n+    end select\n+  end subroutine foo_a\n+\n+end program main_p\n+\n+! { dg-final { scan-tree-dump \"bar_a._data.dtype = \\\\{.* .rank=1,.*\\\\}\" \"original\" } }\n+! { dg-final { scan-tree-dump \"bar_p._data.dtype = \\\\{.* .rank=1,.*\\\\}\" \"original\" } }"}, {"sha": "26ac0c88425e80acefdf95e50156711e78532268", "filename": "gcc/testsuite/gfortran.dg/PR100098.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cfdaeb2755121ac1069f09898def56469b0fb51/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100098.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cfdaeb2755121ac1069f09898def56469b0fb51/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100098.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100098.f90?ref=4cfdaeb2755121ac1069f09898def56469b0fb51", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do run }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! Test the fix for PR100098\n+!\n+\n+program main_p\n+  implicit none\n+\n+  type :: foo_t\n+    integer :: i\n+  end type foo_t\n+\n+  class(foo_t), pointer     :: bar_p(:)\n+  class(foo_t), allocatable :: bar_a(:)\n+\n+  call foo_p(bar_p)\n+  call foo_a(bar_a)\n+\n+contains\n+\n+  subroutine foo_p(that)\n+    class(foo_t), pointer, intent(out) :: that(..)\n+\n+    select rank(that)\n+    rank(1)\n+    rank default\n+      stop 1\n+    end select\n+  end subroutine foo_p\n+\n+  subroutine foo_a(that)\n+    class(foo_t), allocatable, intent(out) :: that(..)\n+\n+    select rank(that)\n+    rank(1)\n+    rank default\n+      stop 2\n+    end select\n+  end subroutine foo_a\n+\n+end program main_p\n+\n+! { dg-final { scan-tree-dump \"bar_a._data.dtype = \\\\{.* .rank=1,.*\\\\}\" \"original\" } }\n+! { dg-final { scan-tree-dump \"bar_p._data.dtype = \\\\{.* .rank=1,.*\\\\}\" \"original\" } }"}]}