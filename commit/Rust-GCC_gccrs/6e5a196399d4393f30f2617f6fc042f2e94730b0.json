{"sha": "6e5a196399d4393f30f2617f6fc042f2e94730b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU1YTE5NjM5OWQ0MzkzZjMwZjI2MTdmNmZjMDQyZjJlOTQ3MzBiMA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-01-21T22:00:43Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-01-31T17:17:10Z"}, "message": "libstdc++: Always return a sentinel<I> from __gnu_test::test_range::end()\n\nIt seems that in practice std::sentinel_for<I, I> is always true, and so the\ntest_range container doesn't help us detect bugs in ranges code in which we\nwrongly assume that a sentinel can be manipulated like an iterator.  Make the\ntest_range range more strict by having end() unconditionally return a\nsentinel<I>, and adjust some tests accordingly.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/24_iterators/range_operations/distance.cc: Do not assume\n\ttest_range::end() returns the same type as test_range::begin().\n\t* testsuite/24_iterators/range_operations/next.cc: Likewise.\n\t* testsuite/24_iterators/range_operations/prev.cc: Likewise.\n\t* testsuite/util/testsuite_iterators.h (__gnu_test::test_range::end):\n\tAlways return a sentinel<I>.", "tree": {"sha": "5a02ad819e4c2b3bcfa4184195b80398c4a3da18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a02ad819e4c2b3bcfa4184195b80398c4a3da18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e5a196399d4393f30f2617f6fc042f2e94730b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5a196399d4393f30f2617f6fc042f2e94730b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e5a196399d4393f30f2617f6fc042f2e94730b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e5a196399d4393f30f2617f6fc042f2e94730b0/comments", "author": null, "committer": null, "parents": [{"sha": "b92709388b9aee52db3cd7c227818e0ecccda2e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92709388b9aee52db3cd7c227818e0ecccda2e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b92709388b9aee52db3cd7c227818e0ecccda2e5"}], "stats": {"total": 152, "additions": 88, "deletions": 64}, "files": [{"sha": "966e7dfc3cc6dc0557d2dcf69e889e9bf0093e53", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5a196399d4393f30f2617f6fc042f2e94730b0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5a196399d4393f30f2617f6fc042f2e94730b0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6e5a196399d4393f30f2617f6fc042f2e94730b0", "patch": "@@ -1,3 +1,12 @@\n+2020-01-31  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* testsuite/24_iterators/range_operations/distance.cc: Do not assume\n+\ttest_range::end() returns the same type as test_range::begin().\n+\t* testsuite/24_iterators/range_operations/next.cc: Likewise.\n+\t* testsuite/24_iterators/range_operations/prev.cc: Likewise.\n+\t* testsuite/util/testsuite_iterators.h (__gnu_test::test_range::end):\n+\tAlways return a sentinel<I>.\n+\n 2020-01-29  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/92895"}, {"sha": "cf251b04ec5a151daccce596012a712668692563", "filename": "libstdc++-v3/testsuite/24_iterators/range_operations/distance.cc", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5a196399d4393f30f2617f6fc042f2e94730b0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2Fdistance.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5a196399d4393f30f2617f6fc042f2e94730b0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2Fdistance.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2Fdistance.cc?ref=6e5a196399d4393f30f2617f6fc042f2e94730b0", "patch": "@@ -39,13 +39,17 @@ test01()\n   test_range<int, random_access_iterator_wrapper> c(a);\n   VERIFY( std::ranges::distance(c) == 10 );\n \n-  auto b = c.begin(), e = c.end();\n+  auto b = c.begin();\n+  auto e = c.end();\n+  auto ei = std::ranges::next(b, e);\n   VERIFY( std::ranges::distance(b, e) == 10 );\n-  VERIFY( std::ranges::distance(e, b) == -10 );\n+  VERIFY( std::ranges::distance(ei, b) == -10 );\n \n-  const auto cb = b, ce = e;\n+  const auto cb = b;\n+  const auto ce = e;\n+  const auto cei = ei;\n   VERIFY( std::ranges::distance(cb, ce) == 10 );\n-  VERIFY( std::ranges::distance(ce, cb) == -10 );\n+  VERIFY( std::ranges::distance(cei, cb) == -10 );\n \n   test_sized_range<int, random_access_iterator_wrapper> c2(a);\n   VERIFY( std::ranges::distance(c2) == 10 );\n@@ -60,10 +64,12 @@ test02()\n   test_range<int, bidirectional_iterator_wrapper> c(a);\n   VERIFY( std::ranges::distance(c) == 2 );\n \n-  auto b = c.begin(), e = c.end();\n+  auto b = c.begin();\n+  auto e = c.end();\n   VERIFY( std::ranges::distance(b, e) == 2 );\n \n-  const auto cb = b, ce = e;\n+  const auto cb = b;\n+  const auto ce = e;\n   VERIFY( std::ranges::distance(cb, ce) == 2 );\n \n   test_sized_range<int, bidirectional_iterator_wrapper> c2(a);\n@@ -77,10 +83,12 @@ test03()\n   test_range<int, forward_iterator_wrapper> c(a);\n   VERIFY( std::ranges::distance(c) == 3 );\n \n-  auto b = c.begin(), e = c.end();\n+  auto b = c.begin();\n+  auto e = c.end();\n   VERIFY( std::ranges::distance(b, e) == 3 );\n \n-  const auto cb = b, ce = e;\n+  const auto cb = b;\n+  const auto ce = e;\n   VERIFY( std::ranges::distance(cb, ce) == 3 );\n \n   test_sized_range<int, forward_iterator_wrapper> c2(a);\n@@ -99,11 +107,13 @@ test04()\n   VERIFY( std::ranges::distance(c) == 0 );\n \n   c = test_range<int, input_iterator_wrapper>(a);\n-  auto b = c.begin(), e = c.end();\n+  auto b = c.begin();\n+  auto e = c.end();\n   VERIFY( std::ranges::distance(b, e) == 4 );\n \n   test_range<int, input_iterator_wrapper> c2(a);\n-  const auto cb = c2.begin(), ce = c2.end();\n+  const auto cb = c2.begin();\n+  const auto ce = c2.end();\n   VERIFY( std::ranges::distance(cb, ce) == 4 );\n \n   test_sized_range<int, input_iterator_wrapper> c3(a);"}, {"sha": "91baba1d978781bf3cfd6c9711cdd9a411a822e4", "filename": "libstdc++-v3/testsuite/24_iterators/range_operations/next.cc", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5a196399d4393f30f2617f6fc042f2e94730b0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2Fnext.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5a196399d4393f30f2617f6fc042f2e94730b0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2Fnext.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2Fnext.cc?ref=6e5a196399d4393f30f2617f6fc042f2e94730b0", "patch": "@@ -36,27 +36,28 @@ test01()\n   test_range<int, random_access_iterator_wrapper> r(a);\n   auto begin = r.begin();\n   auto end = r.end();\n+  auto endi = std::ranges::next(begin, end);\n   VERIFY( *std::ranges::next(begin) == 1 );\n   VERIFY(  std::ranges::next(begin, 0) == begin );\n   VERIFY( *std::ranges::next(begin, 1) == 1 );\n   VERIFY( *std::ranges::next(begin, 3) == 3 );\n-  VERIFY( *std::ranges::next(end, -4) == 6 );\n+  VERIFY( *std::ranges::next(endi, -4) == 6 );\n   VERIFY(  std::ranges::next(begin, begin) == begin );\n   VERIFY(  std::ranges::next(begin, end) == end );\n-  VERIFY(  std::ranges::next(end, end) == end );\n-  VERIFY(  std::ranges::next(end, begin) == begin );\n+  VERIFY(  std::ranges::next(endi, end) == end );\n+  VERIFY(  std::ranges::next(endi, begin) == begin );\n   VERIFY(  std::ranges::next(begin, 0, begin) == begin );\n   VERIFY(  std::ranges::next(begin, 5, begin) == begin );\n   VERIFY(  std::ranges::next(begin, -5, begin) == begin );\n   VERIFY(  std::ranges::next(begin, 0, end) == begin );\n   VERIFY( *std::ranges::next(begin, 5, end) == 5 );\n   VERIFY(  std::ranges::next(begin, 55, end) == end );\n-  VERIFY(  std::ranges::next(end, 0, end) == end );\n-  VERIFY(  std::ranges::next(end, -5, end) == end );\n-  VERIFY(  std::ranges::next(end, -55, end) == end );\n-  VERIFY(  std::ranges::next(end, 0, begin) == end );\n-  VERIFY( *std::ranges::next(end, -5, begin) == 5 );\n-  VERIFY(  std::ranges::next(end, -55, begin) == begin );\n+  VERIFY(  std::ranges::next(endi, 0, end) == end );\n+  VERIFY(  std::ranges::next(endi, -5, end) == end );\n+  VERIFY(  std::ranges::next(endi, -55, end) == end );\n+  VERIFY(  std::ranges::next(endi, 0, begin) == end );\n+  VERIFY( *std::ranges::next(endi, -5, begin) == 5 );\n+  VERIFY(  std::ranges::next(endi, -55, begin) == begin );\n }\n \n void\n@@ -66,27 +67,28 @@ test02()\n   test_range<int, bidirectional_iterator_wrapper> r(a);\n   auto begin = r.begin();\n   auto end = r.end();\n+  auto endi = std::ranges::next(begin, end);\n   VERIFY( *std::ranges::next(begin) == 1 );\n   VERIFY(  std::ranges::next(begin, 0) == begin );\n   VERIFY( *std::ranges::next(begin, 1) == 1 );\n   VERIFY( *std::ranges::next(begin, 3) == 3 );\n-  VERIFY( *std::ranges::next(end, -4) == 6 );\n+  VERIFY( *std::ranges::next(endi, -4) == 6 );\n   VERIFY(  std::ranges::next(begin, begin) == begin );\n   VERIFY(  std::ranges::next(begin, end) == end );\n-  VERIFY(  std::ranges::next(end, end) == end );\n-  VERIFY(  std::ranges::next(end, begin) == begin );\n+  VERIFY(  std::ranges::next(endi, end) == end );\n+  VERIFY(  std::ranges::next(endi, begin) == begin );\n   VERIFY(  std::ranges::next(begin, 0, begin) == begin );\n   VERIFY(  std::ranges::next(begin, 5, begin) == begin );\n   VERIFY(  std::ranges::next(begin, -5, begin) == begin );\n   VERIFY(  std::ranges::next(begin, 0, end) == begin );\n   VERIFY( *std::ranges::next(begin, 5, end) == 5 );\n   VERIFY(  std::ranges::next(begin, 55, end) == end );\n-  VERIFY(  std::ranges::next(end, 0, end) == end );\n-  VERIFY(  std::ranges::next(end, -5, end) == end );\n-  VERIFY(  std::ranges::next(end, -55, end) == end );\n-  VERIFY(  std::ranges::next(end, 0, begin) == end );\n-  VERIFY( *std::ranges::next(end, -5, begin) == 5 );\n-  VERIFY(  std::ranges::next(end, -55, begin) == begin );\n+  VERIFY(  std::ranges::next(endi, 0, end) == end );\n+  VERIFY(  std::ranges::next(endi, -5, end) == end );\n+  VERIFY(  std::ranges::next(endi, -55, end) == end );\n+  VERIFY(  std::ranges::next(endi, 0, begin) == end );\n+  VERIFY( *std::ranges::next(endi, -5, begin) == 5 );\n+  VERIFY(  std::ranges::next(endi, -55, begin) == begin );\n }\n \n void\n@@ -96,23 +98,24 @@ test03()\n   test_range<int, forward_iterator_wrapper> r(a);\n   auto begin = r.begin();\n   auto end = r.end();\n+  auto endi = std::ranges::next(begin, end);\n   VERIFY( *std::ranges::next(begin) == 1 );\n   VERIFY(  std::ranges::next(begin, 0) == begin );\n   VERIFY( *std::ranges::next(begin, 1) == 1 );\n   VERIFY( *std::ranges::next(begin, 3) == 3 );\n   VERIFY(  std::ranges::next(begin, begin) == begin );\n   VERIFY(  std::ranges::next(begin, end) == end );\n-  VERIFY(  std::ranges::next(end, end) == end );\n+  VERIFY(  std::ranges::next(endi, end) == end );\n   VERIFY(  std::ranges::next(begin, 0, begin) == begin );\n   VERIFY(  std::ranges::next(begin, 5, begin) == begin );\n   VERIFY(  std::ranges::next(begin, -5, begin) == begin );\n   VERIFY(  std::ranges::next(begin, 0, end) == begin );\n   VERIFY( *std::ranges::next(begin, 5, end) == 5 );\n   VERIFY(  std::ranges::next(begin, 55, end) == end );\n-  VERIFY(  std::ranges::next(end, 0, end) == end );\n-  VERIFY(  std::ranges::next(end, 5, end) == end );\n-  VERIFY(  std::ranges::next(end, 55, end) == end );\n-  VERIFY(  std::ranges::next(end, 0, begin) == end );\n+  VERIFY(  std::ranges::next(endi, 0, end) == end );\n+  VERIFY(  std::ranges::next(endi, 5, end) == end );\n+  VERIFY(  std::ranges::next(endi, 55, end) == end );\n+  VERIFY(  std::ranges::next(endi, 0, begin) == end );\n }\n \n void\n@@ -141,6 +144,9 @@ test04()\n   test_range<int, input_iterator_wrapper> r2(a);\n   begin = r2.begin();\n   end = r2.end();\n+  auto endi = std::ranges::next(begin, end);\n+  // reset single-pass input range\n+  r2.bounds.first = a;\n   iter = std::ranges::next(begin, 0, begin);\n   VERIFY( *iter == 0 );\n   iter = std::ranges::next(begin, 5, begin);\n@@ -149,15 +155,15 @@ test04()\n   VERIFY( *iter == 0 );\n   iter = std::ranges::next(begin, 0, end);\n   VERIFY( *iter == 0 );\n-  iter = std::ranges::next(end, 0, begin);\n+  iter = std::ranges::next(endi, 0, begin);\n   VERIFY( iter == end );\n   iter = std::ranges::next(begin, 5, end); // invalidates begin\n   VERIFY( *iter == 5 );\n   iter = std::ranges::next(iter, 55, end);\n   VERIFY( iter == end );\n-  iter = std::ranges::next(end, 0, end);\n+  iter = std::ranges::next(endi, 0, end);\n   VERIFY( iter == end );\n-  iter = std::ranges::next(end, 5, end);\n+  iter = std::ranges::next(endi, 5, end);\n   VERIFY( iter == end );\n }\n "}, {"sha": "70064b1b810b8c6c05632ce48bb82457fca02d85", "filename": "libstdc++-v3/testsuite/24_iterators/range_operations/prev.cc", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5a196399d4393f30f2617f6fc042f2e94730b0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2Fprev.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5a196399d4393f30f2617f6fc042f2e94730b0/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2Fprev.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2Fprev.cc?ref=6e5a196399d4393f30f2617f6fc042f2e94730b0", "patch": "@@ -36,23 +36,24 @@ test01()\n   test_range<int, random_access_iterator_wrapper> r(a);\n   auto begin = r.begin();\n   auto end = r.end();\n-  VERIFY( *std::ranges::prev(end) == 9 );\n+  auto endi = std::ranges::next(begin, end);\n+  VERIFY( *std::ranges::prev(endi) == 9 );\n   VERIFY(  std::ranges::prev(begin, 0) == begin );\n-  VERIFY( *std::ranges::prev(end, 1) == 9 );\n-  VERIFY( *std::ranges::prev(end, 3) == 7 );\n+  VERIFY( *std::ranges::prev(endi, 1) == 9 );\n+  VERIFY( *std::ranges::prev(endi, 3) == 7 );\n   VERIFY( *std::ranges::prev(begin, -4) == 4 );\n   VERIFY(  std::ranges::prev(begin, 0, begin) == begin );\n   VERIFY(  std::ranges::prev(begin, 5, begin) == begin );\n   VERIFY(  std::ranges::prev(begin, -5, begin) == begin );\n-  VERIFY(  std::ranges::prev(begin, 0, end) == begin );\n-  VERIFY( *std::ranges::prev(end, 5, begin) == 5 );\n-  VERIFY(  std::ranges::prev(end, 55, begin) == begin );\n-  VERIFY(  std::ranges::prev(end, 0, end) == end );\n-  VERIFY(  std::ranges::prev(end, -5, end) == end );\n-  VERIFY(  std::ranges::prev(end, -55, end) == end );\n-  VERIFY(  std::ranges::prev(end, 0, begin) == end );\n-  VERIFY( *std::ranges::prev(begin, -5, end) == 5 );\n-  VERIFY(  std::ranges::prev(begin, -55, end) == end );\n+  VERIFY(  std::ranges::prev(begin, 0, endi) == begin );\n+  VERIFY( *std::ranges::prev(endi, 5, begin) == 5 );\n+  VERIFY(  std::ranges::prev(endi, 55, begin) == begin );\n+  VERIFY(  std::ranges::prev(endi, 0, endi) == end );\n+  VERIFY(  std::ranges::prev(endi, -5, endi) == end );\n+  VERIFY(  std::ranges::prev(endi, -55, endi) == end );\n+  VERIFY(  std::ranges::prev(endi, 0, begin) == end );\n+  VERIFY( *std::ranges::prev(begin, -5, endi) == 5 );\n+  VERIFY(  std::ranges::prev(begin, -55, endi) == end );\n }\n \n void\n@@ -62,23 +63,24 @@ test02()\n   test_range<int, bidirectional_iterator_wrapper> r(a);\n   auto begin = r.begin();\n   auto end = r.end();\n-  VERIFY( *std::ranges::prev(end) == 9 );\n+  auto endi = std::ranges::next(begin, end);\n+  VERIFY( *std::ranges::prev(endi) == 9 );\n   VERIFY(  std::ranges::prev(begin, 0) == begin );\n-  VERIFY( *std::ranges::prev(end, 1) == 9 );\n-  VERIFY( *std::ranges::prev(end, 3) == 7 );\n+  VERIFY( *std::ranges::prev(endi, 1) == 9 );\n+  VERIFY( *std::ranges::prev(endi, 3) == 7 );\n   VERIFY( *std::ranges::prev(begin, -4) == 4 );\n   VERIFY(  std::ranges::prev(begin, 0, begin) == begin );\n   VERIFY(  std::ranges::prev(begin, 5, begin) == begin );\n   VERIFY(  std::ranges::prev(begin, -5, begin) == begin );\n-  VERIFY(  std::ranges::prev(begin, 0, end) == begin );\n-  VERIFY( *std::ranges::prev(end, 5, begin) == 5 );\n-  VERIFY(  std::ranges::prev(end, 55, begin) == begin );\n-  VERIFY(  std::ranges::prev(end, 0, end) == end );\n-  VERIFY(  std::ranges::prev(end, -5, end) == end );\n-  VERIFY(  std::ranges::prev(end, -55, end) == end );\n-  VERIFY(  std::ranges::prev(end, 0, begin) == end );\n-  VERIFY( *std::ranges::prev(begin, -5, end) == 5 );\n-  VERIFY(  std::ranges::prev(begin, -55, end) == end );\n+  VERIFY(  std::ranges::prev(begin, 0, endi) == begin );\n+  VERIFY( *std::ranges::prev(endi, 5, begin) == 5 );\n+  VERIFY(  std::ranges::prev(endi, 55, begin) == begin );\n+  VERIFY(  std::ranges::prev(endi, 0, endi) == end );\n+  VERIFY(  std::ranges::prev(endi, -5, endi) == end );\n+  VERIFY(  std::ranges::prev(endi, -55, endi) == end );\n+  VERIFY(  std::ranges::prev(endi, 0, begin) == end );\n+  VERIFY( *std::ranges::prev(begin, -5, endi) == 5 );\n+  VERIFY(  std::ranges::prev(begin, -55, endi) == end );\n }\n \n template<typename T>"}, {"sha": "6887d806a31ae3de54037ffa0a00d6f1310853c2", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e5a196399d4393f30f2617f6fc042f2e94730b0/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e5a196399d4393f30f2617f6fc042f2e94730b0/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=6e5a196399d4393f30f2617f6fc042f2e94730b0", "patch": "@@ -710,10 +710,7 @@ namespace __gnu_test\n       auto end() &\n       {\n \tusing I = decltype(get_iterator(bounds.last));\n-\tif constexpr (std::sentinel_for<I, I>)\n-\t  return get_iterator(bounds.last);\n-\telse\n-\t  return sentinel<I>{bounds.last};\n+\treturn sentinel<I>{bounds.last};\n       }\n \n       typename Iter<T>::ContainerType bounds;"}]}