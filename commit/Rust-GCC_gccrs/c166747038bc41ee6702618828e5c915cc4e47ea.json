{"sha": "c166747038bc41ee6702618828e5c915cc4e47ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE2Njc0NzAzOGJjNDFlZTY3MDI2MTg4MjhlNWM5MTVjYzRlNDdlYQ==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2004-06-30T17:58:21Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2004-06-30T17:58:21Z"}, "message": "Conditionally compile support for --enable-mapped_location.\n\n\t* input.h:  #include line-map.h for source_location typedef.\n\t(BUILTINS_LOCATION, UNKNOWN_LOCATION, expand_location,\n\tLOCATION_FILE, LOCATION_LINE):  New macros and functions.\n\t(expanded_location, source_locus):  New typedefs.\n\t(push_srcloc):  Change parameter list if USE_MAPPED_LOCATION.\n\t* rtl.def (NOTE, ASM_OPERANDS):  Modify specifcation, if\n\tUSE_MAPPED_LOCATION.\n\t* rtl.h (NOTE_DELETED_LABEL_NAME):  New macro.\n\t(NOTE_SOURCE_LOCATION, NOTE_EXPNDED_LOCATION, SET_INSN_DELETED):\n\tNew conditional macros.\n\t(ASM_OPERANDS_SOURCE_FILE, ASM_OPERANDS_SOURCE_LINE):  Replace\n\tby ASM_OPERANDS_SOURCE_LOCATION if USE_MAPPED_LOCATION.\n\t* tree.h (EXPR_LOCATION, SET_EXPR_LOCATION, EXPR_HAS_LOCATION,\n\tEXPR_LOCUS, SET_EXPR_LOCUS, EXPR_FILENAME, EXPR_LINENO,\n\tDECL_IS_BUILTIN):  New macros, most depending on USE_MAPPED__LOCATION.\n\t(tree_exp):  Change type of locus to use new source_locus typedef.\n\t* tree.c (build1_stat):  Use SET_EXPR_LOCATION.\n\t(annotate_with_locus, annotate_with_file_line):  Conditionalize.\n\t(expand_location):  New function.\n\t* toplev.c (unknown_location):  New static, when USE_MAPPED_LOCATION.\n\t(push_srcloc, pop_loc):  Adjust parameter handling.\n\t(process_options):  Don't set input_filename by itself.\n\t(lang_dependent_init):  Save, set input_location to <built-in>.\n\t(warn_deprecated_use):  Use expand_location.\n\nFrom-SVN: r83918", "tree": {"sha": "bf7c0b00dcfa76e28cdeb61f5339d2924ef9dc16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf7c0b00dcfa76e28cdeb61f5339d2924ef9dc16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c166747038bc41ee6702618828e5c915cc4e47ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c166747038bc41ee6702618828e5c915cc4e47ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c166747038bc41ee6702618828e5c915cc4e47ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c166747038bc41ee6702618828e5c915cc4e47ea/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5674962f18be68ae4b22042b09fd251ccd09ed1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5674962f18be68ae4b22042b09fd251ccd09ed1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5674962f18be68ae4b22042b09fd251ccd09ed1"}], "stats": {"total": 250, "additions": 219, "deletions": 31}, "files": [{"sha": "4ea3627550de36b5b5ebda1f8cd9dcf502388321", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c166747038bc41ee6702618828e5c915cc4e47ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c166747038bc41ee6702618828e5c915cc4e47ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c166747038bc41ee6702618828e5c915cc4e47ea", "patch": "@@ -1,3 +1,31 @@\n+2004-06-30  Per Bothner  <per@bothner.com>\n+\n+\tConditionally compile support for --enable-mapped_location.\n+\t* input.h:  #include line-map.h for source_location typedef.\n+\t(BUILTINS_LOCATION, UNKNOWN_LOCATION, expand_location,\n+\tLOCATION_FILE, LOCATION_LINE):  New macros and functions.\n+\t(expanded_location, source_locus):  New typedefs.\n+\t(push_srcloc):  Change parameter list if USE_MAPPED_LOCATION.\n+\t* rtl.def (NOTE, ASM_OPERANDS):  Modify specifcation, if\n+\tUSE_MAPPED_LOCATION.\n+\t* rtl.h (NOTE_DELETED_LABEL_NAME):  New macro.\n+\t(NOTE_SOURCE_LOCATION, NOTE_EXPNDED_LOCATION, SET_INSN_DELETED):\n+\tNew conditional macros.\n+\t(ASM_OPERANDS_SOURCE_FILE, ASM_OPERANDS_SOURCE_LINE):  Replace\n+\tby ASM_OPERANDS_SOURCE_LOCATION if USE_MAPPED_LOCATION.\n+\t* tree.h (EXPR_LOCATION, SET_EXPR_LOCATION, EXPR_HAS_LOCATION,\n+\tEXPR_LOCUS, SET_EXPR_LOCUS, EXPR_FILENAME, EXPR_LINENO,\n+\tDECL_IS_BUILTIN):  New macros, most depending on USE_MAPPED__LOCATION.\n+\t(tree_exp):  Change type of locus to use new source_locus typedef.\n+\t* tree.c (build1_stat):  Use SET_EXPR_LOCATION.\n+\t(annotate_with_locus, annotate_with_file_line):  Conditionalize.\n+\t(expand_location):  New function.\n+\t* toplev.c (unknown_location):  New static, when USE_MAPPED_LOCATION.\n+\t(push_srcloc, pop_loc):  Adjust parameter handling.\n+\t(process_options):  Don't set input_filename by itself.\n+\t(lang_dependent_init):  Save, set input_location to <built-in>.\n+\t(warn_deprecated_use):  Use expand_location.\n+\n 2004-06-30  Richard Sandiford  <rsandifo@redhat.com>\n \t    Eric Christopher  <echristo@redhat.com>\n "}, {"sha": "f34c74e908a70b3b269393b8df8337f0f9f426e8", "filename": "gcc/input.h", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c166747038bc41ee6702618828e5c915cc4e47ea/gcc%2Finput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c166747038bc41ee6702618828e5c915cc4e47ea/gcc%2Finput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.h?ref=c166747038bc41ee6702618828e5c915cc4e47ea", "patch": "@@ -22,19 +22,41 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #ifndef GCC_INPUT_H\n #define GCC_INPUT_H\n \n+#include \"line-map.h\"\n extern struct line_maps line_table;\n \n-/* The data structure used to record a location in a translation unit.  */\n-/* Long-term, we want to get rid of this and typedef fileline location_t.  */\n-struct location_s GTY (())\n+/* The location for declarations in \"<built-in>\" */\n+#define BUILTINS_LOCATION ((source_location) 2)\n+\n+typedef struct location_s GTY(())\n {\n   /* The name of the source file involved.  */\n   const char *file;\n \n   /* The line-location in the source file.  */\n   int line;\n-};\n+\n+  /* FUTURE (but confuses gentype): int column. */\n+} expanded_location;\n+\n+#ifdef USE_MAPPED_LOCATION\n+\n+extern expanded_location expand_location (source_location);\n+\n+#define UNKNOWN_LOCATION ((source_location) 0)\n+typedef source_location location_t; /* deprecated typedef */\n+typedef source_location source_locus; /* to be removed */\n+\n+#else /* ! USE_MAPPED_LOCATION */\n+\n typedef struct location_s location_t;\n+typedef location_t *source_locus;\n+\n+#define expand_location(FILELINE) (FILELINE)\n+extern location_t unknown_location;\n+#define UNKNOWN_LOCATION unknown_location\n+\n+#endif /* ! USE_MAPPED_LOCATION */\n \n struct file_stack\n {\n@@ -46,8 +68,18 @@ struct file_stack\n extern const char *main_input_filename;\n \n extern location_t input_location;\n-#define input_line (input_location.line)\n-#define input_filename (input_location.file)\n+#ifdef USE_MAPPED_LOCATION\n+extern void push_srcloc (location_t);\n+#else /* ! USE_MAPPED_LOCATION */\n+extern void push_srcloc (const char *name, int line);\n+#endif /* ! USE_MAPPED_LOCATION */\n+extern void pop_srcloc (void);\n+\n+#define LOCATION_FILE(LOC) ((expand_location (LOC)).file)\n+#define LOCATION_LINE(LOC) ((expand_location (LOC)).line)\n+\n+#define input_line LOCATION_LINE(input_location)\n+#define input_filename LOCATION_FILE(input_location)\n \n /* Stack of currently pending input files.\n    The line member is not accurate for the innermost file on the stack.  */\n@@ -56,7 +88,4 @@ extern struct file_stack *input_file_stack;\n /* Incremented on each change to input_file_stack.  */\n extern int input_file_stack_tick;\n \n-extern void push_srcloc (const char *name, int line);\n-extern void pop_srcloc (void);\n-\n #endif"}, {"sha": "6881b6fdb6ff3aed535958703c2b43415e52a1f4", "filename": "gcc/rtl.def", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c166747038bc41ee6702618828e5c915cc4e47ea/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c166747038bc41ee6702618828e5c915cc4e47ea/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=c166747038bc41ee6702618828e5c915cc4e47ea", "patch": "@@ -640,11 +640,19 @@ DEF_RTL_EXPR(BARRIER, \"barrier\", \"iuu000000\", RTX_EXTRA)\n    7: is the user-given name of the label, if any.  */\n DEF_RTL_EXPR(CODE_LABEL, \"code_label\", \"iuuB00is\", RTX_EXTRA)\n \n+#ifdef USE_MAPPED_LOCATION\n+/* Say where in the code a source line starts, for symbol table's sake.\n+   Operand:\n+   4: unused if line number > 0, note-specific data otherwise.\n+   5: line number if > 0, enum note_insn otherwise.\n+   6: CODE_LABEL_NUMBER if line number == NOTE_INSN_DELETED_LABEL.  */\n+#else\n /* Say where in the code a source line starts, for symbol table's sake.\n    Operand:\n    4: filename, if line number > 0, note-specific data otherwise.\n    5: line number if > 0, enum note_insn otherwise.\n    6: unique number if line number == note_insn_deleted_label.  */\n+#endif\n DEF_RTL_EXPR(NOTE, \"note\", \"iuuB0ni\", RTX_EXTRA)\n \n /* ----------------------------------------------------------------------\n@@ -671,6 +679,20 @@ DEF_RTL_EXPR(PARALLEL, \"parallel\", \"E\", RTX_EXTRA)\n      as a convenient way to hold a string.  */\n DEF_RTL_EXPR(ASM_INPUT, \"asm_input\", \"s\", RTX_EXTRA)\n \n+#ifdef USE_MAPPED_LOCATION\n+/* An assembler instruction with operands.\n+   1st operand is the instruction template.\n+   2nd operand is the constraint for the output.\n+   3rd operand is the number of the output this expression refers to.\n+     When an insn stores more than one value, a separate ASM_OPERANDS\n+     is made for each output; this integer distinguishes them.\n+   4th is a vector of values of input operands.\n+   5th is a vector of modes and constraints for the input operands.\n+     Each element is an ASM_INPUT containing a constraint string\n+     and whose mode indicates the mode of the input operand.\n+   6th is the source line number.  */\n+DEF_RTL_EXPR(ASM_OPERANDS, \"asm_operands\", \"ssiEEi\", RTX_EXTRA)\n+#else\n /* An assembler instruction with operands.\n    1st operand is the instruction template.\n    2nd operand is the constraint for the output.\n@@ -684,6 +706,7 @@ DEF_RTL_EXPR(ASM_INPUT, \"asm_input\", \"s\", RTX_EXTRA)\n    6th is the name of the containing source file.\n    7th is the source line number.  */\n DEF_RTL_EXPR(ASM_OPERANDS, \"asm_operands\", \"ssiEEsi\", RTX_EXTRA)\n+#endif\n \n /* A machine-specific operation.\n    1st operand is a vector of operands being used by the operation so that"}, {"sha": "6013087327ca4fb4f0ee92ccbd15fb7064b72554", "filename": "gcc/rtl.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c166747038bc41ee6702618828e5c915cc4e47ea/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c166747038bc41ee6702618828e5c915cc4e47ea/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c166747038bc41ee6702618828e5c915cc4e47ea", "patch": "@@ -914,7 +914,22 @@ extern const char * const reg_note_name[];\n \n /* Opaque data.  */\n #define NOTE_DATA(INSN)\t        RTL_CHECKC1 (INSN, 4, NOTE)\n+#define NOTE_DELETED_LABEL_NAME(INSN) XCSTR (INSN, 4, NOTE)\n+#ifdef USE_MAPPED_LOCATION\n+#define NOTE_SOURCE_LOCATION(INSN) XCUINT (INSN, 5, NOTE)\n+#define NOTE_EXPANDED_LOCATION(XLOC, INSN)\t\\\n+  (XLOC) = expand_location (NOTE_SOURCE_LOCATION (INSN))\n+#define SET_INSN_DELETED(INSN) \\\n+  (PUT_CODE (INSN, NOTE), NOTE_LINE_NUMBER (INSN) = NOTE_INSN_DELETED)\n+#else\n+#define NOTE_EXPANDED_LOCATION(XLOC, INSN)\t\\\n+  ((XLOC).file = NOTE_SOURCE_FILE (INSN),\t\\\n+   (XLOC).line = NOTE_LINE_NUMBER (INSN))\n #define NOTE_SOURCE_FILE(INSN)\tXCSTR (INSN, 4, NOTE)\n+#define SET_INSN_DELETED(INSN) \\\n+  (PUT_CODE (INSN, NOTE),  NOTE_SOURCE_FILE (INSN) = 0, \\\n+   NOTE_LINE_NUMBER (INSN) = NOTE_INSN_DELETED)\n+#endif\n #define NOTE_BLOCK(INSN)\tXCTREE (INSN, 4, NOTE)\n #define NOTE_EH_HANDLER(INSN)\tXCINT (INSN, 4, NOTE)\n #define NOTE_BASIC_BLOCK(INSN)\tXCBBDEF (INSN, 4, NOTE)\n@@ -1247,8 +1262,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n   XSTR (XCVECEXP (RTX, 4, N, ASM_OPERANDS), 0)\n #define ASM_OPERANDS_INPUT_MODE(RTX, N)  \\\n   GET_MODE (XCVECEXP (RTX, 4, N, ASM_OPERANDS))\n+#ifdef USE_MAPPED_LOCATION\n+#define ASM_OPERANDS_SOURCE_LOCATION(RTX) XCUINT (RTX, 5, ASM_OPERANDS)\n+#else\n #define ASM_OPERANDS_SOURCE_FILE(RTX) XCSTR (RTX, 5, ASM_OPERANDS)\n #define ASM_OPERANDS_SOURCE_LINE(RTX) XCINT (RTX, 6, ASM_OPERANDS)\n+#endif\n \n /* 1 if RTX is a mem and we should keep the alias set for this mem\n    unchanged when we access a component.  Set to 1, or example, when we\n@@ -2001,6 +2020,11 @@ extern GTY(()) rtx return_address_pointer_rtx;\n \n #ifndef NO_GENRTL_H\n #include \"genrtl.h\"\n+#ifndef USE_MAPPED_LOCATION\n+#undef gen_rtx_ASM_OPERANDS\n+#define gen_rtx_ASM_OPERANDS(MODE, ARG0, ARG1, ARG2, ARG3, ARG4, LOC) \\\n+  gen_rtx_fmt_ssiEEsi (ASM_OPERANDS, (MODE), (ARG0), (ARG1), (ARG2), (ARG3), (ARG4), (LOC).file, (LOC).line)\n+#endif\n #endif\n \n /* There are some RTL codes that require special attention; the"}, {"sha": "e318ac31c676f8f066feadf9b00dda3f4f0cc0cf", "filename": "gcc/toplev.c", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c166747038bc41ee6702618828e5c915cc4e47ea/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c166747038bc41ee6702618828e5c915cc4e47ea/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c166747038bc41ee6702618828e5c915cc4e47ea", "patch": "@@ -140,6 +140,10 @@ static const char **save_argv;\n \n const char *main_input_filename;\n \n+#ifndef USE_MAPPED_LOCATION\n+location_t unknown_location = { NULL, 0 };\n+#endif\n+\n /* Used to enable -fvar-tracking, -fweb and -frename-registers according\n    to optimize and default_debug_hooks in process_options ().  */\n #define AUTODETECT_FLAG_VAR_TRACKING 2\n@@ -879,9 +883,12 @@ warn_deprecated_use (tree node)\n     return;\n \n   if (DECL_P (node))\n-    warning (\"`%s' is deprecated (declared at %s:%d)\",\n-\t     IDENTIFIER_POINTER (DECL_NAME (node)),\n-\t     DECL_SOURCE_FILE (node), DECL_SOURCE_LINE (node));\n+    {\n+      expanded_location xloc = expand_location (DECL_SOURCE_LOCATION (node));\n+      warning (\"`%s' is deprecated (declared at %s:%d)\",\n+\t       IDENTIFIER_POINTER (DECL_NAME (node)),\n+\t       xloc.file, xloc.line);\n+    }\n   else if (TYPE_P (node))\n     {\n       const char *what = NULL;\n@@ -893,19 +900,24 @@ warn_deprecated_use (tree node)\n \t       && DECL_NAME (TYPE_NAME (node)))\n \twhat = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (node)));\n \n-      if (what)\n+      if (decl)\n \t{\n-\t  if (decl)\n+\t  expanded_location xloc\n+\t    = expand_location (DECL_SOURCE_LOCATION (decl));\n+\t  if (what)\n \t    warning (\"`%s' is deprecated (declared at %s:%d)\", what,\n-\t\t     DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl));\n+\t\t       xloc.file, xloc.line);\n \t  else\n-\t    warning (\"`%s' is deprecated\", what);\n+\t    warning (\"type is deprecated (declared at %s:%d)\",\n+\t\t     xloc.file, xloc.line);\n \t}\n-      else if (decl)\n-\twarning (\"type is deprecated (declared at %s:%d)\",\n-\t\t DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl));\n       else\n-\twarning (\"type is deprecated\");\n+\t{\n+\t  if (what)\n+\t    warning (\"type is deprecated\");\n+\t  else\n+\t    warning (\"`%s' is deprecated\", what);\n+\t}\n     }\n }\n \n@@ -914,15 +926,23 @@ warn_deprecated_use (tree node)\n    INPUT_LOCATION accordingly.  */\n \n void\n+#ifdef USE_MAPPED_LOCATION\n+push_srcloc (location_t fline)\n+#else\n push_srcloc (const char *file, int line)\n+#endif\n {\n   struct file_stack *fs;\n \n   fs = xmalloc (sizeof (struct file_stack));\n   fs->location = input_location;\n   fs->next = input_file_stack;\n+#ifdef USE_MAPPED_LOCATION\n+  input_location = fline;\n+#else\n   input_filename = file;\n   input_line = line;\n+#endif\n   input_file_stack = fs;\n   input_file_stack_tick++;\n }\n@@ -1607,7 +1627,9 @@ process_options (void)\n      sets the original filename if appropriate (e.g. foo.i -> foo.c)\n      so we can correctly initialize debug output.  */\n   no_backend = lang_hooks.post_options (&main_input_filename);\n+#ifndef USE_MAPPED_LOCATION\n   input_filename = main_input_filename;\n+#endif\n \n #ifdef OVERRIDE_OPTIONS\n   /* Some machines may reject certain combinations of options.  */\n@@ -1928,12 +1950,20 @@ backend_init (void)\n static int\n lang_dependent_init (const char *name)\n {\n+  location_t save_loc = input_location;\n   if (dump_base_name == 0)\n     dump_base_name = name ? name : \"gccdump\";\n \n   /* Other front-end initialization.  */\n+#ifdef USE_MAPPED_LOCATION\n+  input_location = BUILTINS_LOCATION;\n+#else\n+  input_filename = \"<built-in>\";\n+  input_line = 0;\n+#endif\n   if (lang_hooks.init () == 0)\n     return 0;\n+  input_location = save_loc;\n \n   init_asm_output (name);\n "}, {"sha": "d34414be66bf119b686c363bf5096bdf99d61341", "filename": "gcc/tree.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c166747038bc41ee6702618828e5c915cc4e47ea/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c166747038bc41ee6702618828e5c915cc4e47ea/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c166747038bc41ee6702618828e5c915cc4e47ea", "patch": "@@ -2438,7 +2438,11 @@ build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n   TREE_SET_CODE (t, code);\n \n   TREE_TYPE (t) = type;\n+#ifdef USE_MAPPED_LOCATION\n+  SET_EXPR_LOCATION (t, UNKNOWN_LOCATION);\n+#else\n   SET_EXPR_LOCUS (t, NULL);\n+#endif\n   TREE_COMPLEXITY (t) = 0;\n   TREE_OPERAND (t, 0) = node;\n   TREE_BLOCK (t) = NULL_TREE;\n@@ -2748,7 +2752,28 @@ build_block (tree vars, tree tags ATTRIBUTE_UNUSED, tree subblocks,\n   return block;\n }\n \n+#if 1 /* ! defined(USE_MAPPED_LOCATION) */\n+/* ??? gengtype doesn't handle conditionals */\n static GTY(()) tree last_annotated_node;\n+#endif\n+\n+#ifdef USE_MAPPED_LOCATION\n+\n+expanded_location\n+expand_location (source_location loc)\n+{\n+  expanded_location xloc;\n+  if (loc == 0) { xloc.file = NULL; xloc.line = 0; }\n+  else\n+    {\n+      const struct line_map *map = linemap_lookup (&line_table, loc);\n+      xloc.file = map->to_file;\n+      xloc.line = SOURCE_LINE (map, loc);\n+    };\n+  return xloc;\n+}\n+\n+#else\n \n /* Record the exact location where an expression or an identifier were\n    encountered.  */\n@@ -2792,6 +2817,7 @@ annotate_with_locus (tree node, location_t locus)\n {\n   annotate_with_file_line (node, locus.file, locus.line);\n }\n+#endif\n \f\n /* Return a declaration like DDECL except that its DECL_ATTRIBUTES\n    is ATTRIBUTE.  */"}, {"sha": "4c4a27583a3ea08bebf917b869286685fb6ec2f6", "filename": "gcc/tree.h", "status": "modified", "additions": 39, "deletions": 11, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c166747038bc41ee6702618828e5c915cc4e47ea/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c166747038bc41ee6702618828e5c915cc4e47ea/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=c166747038bc41ee6702618828e5c915cc4e47ea", "patch": "@@ -1073,6 +1073,31 @@ struct tree_vec GTY(())\n /* In a LOOP_EXPR node.  */\n #define LOOP_EXPR_BODY(NODE) TREE_OPERAND_CHECK_CODE (NODE, LOOP_EXPR, 0)\n \n+#ifdef USE_MAPPED_LOCATION\n+/* The source location of this expression.  Non-tree_exp nodes such as\n+   decls and constants can be shared among multiple locations, so\n+   return nothing.  */\n+#define EXPR_LOCATION(NODE)\t\t\t\t\t\\\n+  (IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (NODE)))\t\\\n+   ? (NODE)->exp.locus\t\t\t\t\t\t\\\n+   : UNKNOWN_LOCATION)\n+#define SET_EXPR_LOCATION(NODE, FROM) \\\n+  (EXPR_CHECK (NODE)->exp.locus = (FROM))\n+#define EXPR_HAS_LOCATION(NODE) (EXPR_LOCATION (NODE) != UNKNOWN_LOCATION)\n+/* EXPR_LOCUS and SET_EXPR_LOCUS are deprecated. */\n+#define EXPR_LOCUS(NODE)\t\t\t\t\t\\\n+  (IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (NODE)))\t\\\n+   ? &(NODE)->exp.locus\t\t\t\t\t\t\\\n+   : (location_t *)NULL)\n+#define SET_EXPR_LOCUS(NODE, FROM) \\\n+  do { source_location *loc_tmp = FROM; \\\n+       EXPR_CHECK (NODE)->exp.locus \\\n+       = loc_tmp == NULL ? UNKNOWN_LOCATION : *loc_tmp; } while (0)\n+#define EXPR_FILENAME(NODE) \\\n+  LOCATION_FILE (EXPR_CHECK (NODE)->exp.locus)\n+#define EXPR_LINENO(NODE) \\\n+  LOCATION_LINE (EXPR_CHECK (NODE)->exp.locus)\n+#else\n /* The source location of this expression.  Non-tree_exp nodes such as\n    decls and constants can be shared among multiple locations, so\n    return nothing.  */\n@@ -1082,19 +1107,14 @@ struct tree_vec GTY(())\n    : (location_t *)NULL)\n #define SET_EXPR_LOCUS(NODE, FROM) \\\n   (EXPR_CHECK (NODE)->exp.locus = (FROM))\n+#define SET_EXPR_LOCATION(NODE, FROM) annotate_with_locus (NODE, FROM)\n #define EXPR_FILENAME(NODE) \\\n   (EXPR_CHECK (NODE)->exp.locus->file)\n #define EXPR_LINENO(NODE) \\\n   (EXPR_CHECK (NODE)->exp.locus->line)\n-#ifdef USE_MAPPED_LOCATION\n-#define EXPR_LOCATION(NODE)\t\t\t\t\t\\\n-  (IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (NODE)))\t\\\n-   ? (NODE)->exp.locus\t\t\t\t\t\t\\\n-   : UNKNOWN_LOCATION)\n-#define EXPR_HAS_LOCATION(NODE) (EXPR_LOCATION (NODE) != UNKNOWN_LOCATION)\n-#else\n-#define EXPR_LOCATION(NODE) (*EXPR_LOCUS (NODE))\n #define EXPR_HAS_LOCATION(NODE) (EXPR_LOCUS (NODE) != NULL)\n+#define EXPR_LOCATION(NODE) \\\n+  (EXPR_HAS_LOCATION(NODE) ? *(NODE)->exp.locus : UNKNOWN_LOCATION)\n #endif\n \n /* In a TARGET_EXPR node.  */\n@@ -1172,7 +1192,7 @@ struct tree_vec GTY(())\n struct tree_exp GTY(())\n {\n   struct tree_common common;\n-  location_t *locus;\n+  source_locus locus;\n   int complexity;\n   tree block;\n   tree GTY ((special (\"tree_exp\"),\n@@ -1773,8 +1793,14 @@ struct tree_type GTY(())\n    function that is declared first and then defined later), this\n    information should refer to the definition.  */\n #define DECL_SOURCE_LOCATION(NODE) (DECL_CHECK (NODE)->decl.locus)\n-#define DECL_SOURCE_FILE(NODE) (DECL_SOURCE_LOCATION (NODE).file)\n-#define DECL_SOURCE_LINE(NODE) (DECL_SOURCE_LOCATION (NODE).line)\n+#define DECL_SOURCE_FILE(NODE) LOCATION_FILE (DECL_SOURCE_LOCATION (NODE))\n+#define DECL_SOURCE_LINE(NODE) LOCATION_LINE (DECL_SOURCE_LOCATION (NODE))\n+#ifdef USE_MAPPED_LOCATION\n+#define DECL_IS_BUILTIN(DECL) \\\n+  (DECL_SOURCE_LOCATION (DECL) <= BUILTINS_LOCATION)\n+#else\n+#define DECL_IS_BUILTIN(DECL) (DECL_SOURCE_LINE(DECL) == 0)\n+#endif\n /* Holds the size of the datum, in bits, as a tree expression.\n    Need not be constant.  */\n #define DECL_SIZE(NODE) (DECL_CHECK (NODE)->decl.size)\n@@ -2665,8 +2691,10 @@ extern tree build_tree_list_stat (tree, tree MEM_STAT_DECL);\n extern tree build_decl_stat (enum tree_code, tree, tree MEM_STAT_DECL);\n #define build_decl(c,t,q) build_decl_stat (c,t,q MEM_STAT_INFO)\n extern tree build_block (tree, tree, tree, tree, tree);\n+#ifndef USE_MAPPED_LOCATION\n extern void annotate_with_file_line (tree, const char *, int);\n extern void annotate_with_locus (tree, location_t);\n+#endif\n extern tree build_empty_stmt (void);\n \n /* Construct various nodes representing data types.  */"}]}