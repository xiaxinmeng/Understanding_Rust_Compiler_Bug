{"sha": "887e3058154e47cb5b35ea2548ba6805b4879833", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg3ZTMwNTgxNTRlNDdjYjViMzVlYTI1NDhiYTY4MDViNDg3OTgzMw==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@arthur.rhein-neckar.de", "date": "1998-08-04T15:21:08Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "1998-08-04T15:21:08Z"}, "message": "libioP.h: Use __PMT in typedefs.\n\n* libioP.h: Use __PMT in typedefs.\n* strfile.h: Likewise.\n\nFrom-SVN: r21610", "tree": {"sha": "3ac96496eefd0269cae493da0e30d34a0c77e8de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ac96496eefd0269cae493da0e30d34a0c77e8de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/887e3058154e47cb5b35ea2548ba6805b4879833", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/887e3058154e47cb5b35ea2548ba6805b4879833", "html_url": "https://github.com/Rust-GCC/gccrs/commit/887e3058154e47cb5b35ea2548ba6805b4879833", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/887e3058154e47cb5b35ea2548ba6805b4879833/comments", "author": null, "committer": null, "parents": [{"sha": "e4a84209743bde2f3de26ed67193708e98224f7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a84209743bde2f3de26ed67193708e98224f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4a84209743bde2f3de26ed67193708e98224f7f"}], "stats": {"total": 53, "additions": 29, "deletions": 24}, "files": [{"sha": "6a6ae3500d89492c8db820f2f602e585388eb5f3", "filename": "libio/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887e3058154e47cb5b35ea2548ba6805b4879833/libio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887e3058154e47cb5b35ea2548ba6805b4879833/libio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2FChangeLog?ref=887e3058154e47cb5b35ea2548ba6805b4879833", "patch": "@@ -1,3 +1,8 @@\n+1998-08-03  Andreas Jaeger  <aj@arthur.rhein-neckar.de>\n+\n+\t* libioP.h: Use __PMT in typedefs.\n+\t* strfile.h: Likewise.\n+\n 1998-06-29  Ulrich Drepper  <drepper@cygnus.com>\n \n \t* libio.h: Rewrite __PMT change so that it works with platforms"}, {"sha": "d41c46619f0ac491133f15930b63ef788ef61988", "filename": "libio/libioP.h", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887e3058154e47cb5b35ea2548ba6805b4879833/libio%2FlibioP.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887e3058154e47cb5b35ea2548ba6805b4879833/libio%2FlibioP.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2FlibioP.h?ref=887e3058154e47cb5b35ea2548ba6805b4879833", "patch": "@@ -91,20 +91,20 @@ extern \"C\" {\n /* The 'finish' function does any final cleaning up of an _IO_FILE object.\n    It does not delete (free) it, but does everything else to finalize it/\n    It matches the streambuf::~streambuf virtual destructor.  */\n-typedef void (*_IO_finish_t) __P ((_IO_FILE *, int)); /* finalize */\n+typedef void (*_IO_finish_t) __PMT ((_IO_FILE *, int)); /* finalize */\n #define _IO_FINISH(FP) JUMP1 (__finish, FP, 0)\n \n /* The 'overflow' hook flushes the buffer.\n    The second argument is a character, or EOF.\n    It matches the streambuf::overflow virtual function. */\n-typedef int (*_IO_overflow_t) __P ((_IO_FILE *, int));\n+typedef int (*_IO_overflow_t) __PMT ((_IO_FILE *, int));\n #define _IO_OVERFLOW(FP, CH) JUMP1 (__overflow, FP, CH)\n \n /* The 'underflow' hook tries to fills the get buffer.\n    It returns the next character (as an unsigned char) or EOF.  The next\n    character remains in the get buffer, and the get position is not changed.\n    It matches the streambuf::underflow virtual function. */\n-typedef int (*_IO_underflow_t) __P ((_IO_FILE *));\n+typedef int (*_IO_underflow_t) __PMT ((_IO_FILE *));\n #define _IO_UNDERFLOW(FP) JUMP0 (__underflow, FP)\n \n /* The 'uflow' hook returns the next character in the input stream\n@@ -116,20 +116,20 @@ typedef int (*_IO_underflow_t) __P ((_IO_FILE *));\n \n /* The 'pbackfail' hook handles backing up.\n    It matches the streambuf::pbackfail virtual function. */\n-typedef int (*_IO_pbackfail_t) __P ((_IO_FILE *, int));\n+typedef int (*_IO_pbackfail_t) __PMT ((_IO_FILE *, int));\n #define _IO_PBACKFAIL(FP, CH) JUMP1 (__pbackfail, FP, CH)\n \n /* The 'xsputn' hook writes upto N characters from buffer DATA.\n    Returns the number of character actually written.\n    It matches the streambuf::xsputn virtual function. */\n-typedef _IO_size_t (*_IO_xsputn_t) __P ((_IO_FILE *FP, const void *DATA,\n+typedef _IO_size_t (*_IO_xsputn_t) __PMT ((_IO_FILE *FP, const void *DATA,\n \t\t\t\t\t _IO_size_t N));\n #define _IO_XSPUTN(FP, DATA, N) JUMP2 (__xsputn, FP, DATA, N)\n \n /* The 'xsgetn' hook reads upto N characters into buffer DATA.\n    Returns the number of character actually read.\n    It matches the streambuf::xsgetn virtual function. */\n-typedef _IO_size_t (*_IO_xsgetn_t) __P ((_IO_FILE *FP, void *DATA,\n+typedef _IO_size_t (*_IO_xsgetn_t) __PMT ((_IO_FILE *FP, void *DATA,\n \t\t\t\t\t _IO_size_t N));\n #define _IO_XSGETN(FP, DATA, N) JUMP2 (__xsgetn, FP, DATA, N)\n \n@@ -139,10 +139,10 @@ typedef _IO_size_t (*_IO_xsgetn_t) __P ((_IO_FILE *FP, void *DATA,\n    It matches the streambuf::seekoff virtual function.\n    It is also used for the ANSI fseek function. */\n #if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n-typedef _IO_fpos64_t (*_IO_seekoff_t) __P ((_IO_FILE *FP, _IO_off64_t OFF,\n+typedef _IO_fpos64_t (*_IO_seekoff_t) __PMT ((_IO_FILE *FP, _IO_off64_t OFF,\n \t\t\t\t\t  int DIR, int MODE));\n #else\n-typedef _IO_fpos_t (*_IO_seekoff_t) __P ((_IO_FILE *FP, _IO_off_t OFF,\n+typedef _IO_fpos_t (*_IO_seekoff_t) __PMT ((_IO_FILE *FP, _IO_off_t OFF,\n \t\t\t\t\t  int DIR, int MODE));\n #endif\n #define _IO_SEEKOFF(FP, OFF, DIR, MODE) JUMP3 (__seekoff, FP, OFF, DIR, MODE)\n@@ -153,27 +153,27 @@ typedef _IO_fpos_t (*_IO_seekoff_t) __P ((_IO_FILE *FP, _IO_off_t OFF,\n    It is also used for the ANSI fgetpos and fsetpos functions.  */\n /* The _IO_seek_cur and _IO_seek_end options are not allowed. */\n #if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n-typedef _IO_fpos64_t (*_IO_seekpos_t) __P ((_IO_FILE *, _IO_fpos64_t, int));\n+typedef _IO_fpos64_t (*_IO_seekpos_t) __PMT ((_IO_FILE *, _IO_fpos64_t, int));\n #else\n-typedef _IO_fpos_t (*_IO_seekpos_t) __P ((_IO_FILE *, _IO_fpos_t, int));\n+typedef _IO_fpos_t (*_IO_seekpos_t) __PMT ((_IO_FILE *, _IO_fpos_t, int));\n #endif\n #define _IO_SEEKPOS(FP, POS, FLAGS) JUMP2 (__seekpos, FP, POS, FLAGS)\n \n /* The 'setbuf' hook gives a buffer to the file.\n    It matches the streambuf::setbuf virtual function. */\n-typedef _IO_FILE* (*_IO_setbuf_t) __P ((_IO_FILE *, char *, _IO_ssize_t));\n+typedef _IO_FILE* (*_IO_setbuf_t) __PMT ((_IO_FILE *, char *, _IO_ssize_t));\n #define _IO_SETBUF(FP, BUFFER, LENGTH) JUMP2 (__setbuf, FP, BUFFER, LENGTH)\n \n /* The 'sync' hook attempts to synchronize the internal data structures\n    of the file with the external state.\n    It matches the streambuf::sync virtual function. */\n-typedef int (*_IO_sync_t) __P ((_IO_FILE *));\n+typedef int (*_IO_sync_t) __PMT ((_IO_FILE *));\n #define _IO_SYNC(FP) JUMP0 (__sync, FP)\n \n /* The 'doallocate' hook is used to tell the file to allocate a buffer.\n    It matches the streambuf::doallocate virtual function, which is not\n    in the ANSI/ISO C++ standard, but is part traditional implementations. */\n-typedef int (*_IO_doallocate_t) __P ((_IO_FILE *));\n+typedef int (*_IO_doallocate_t) __PMT ((_IO_FILE *));\n #define _IO_DOALLOCATE(FP) JUMP0 (__doallocate, FP)\n \n /* The following four hooks (sysread, syswrite, sysclose, sysseek, and\n@@ -191,51 +191,51 @@ typedef int (*_IO_doallocate_t) __P ((_IO_FILE *));\n    an existing buffer.  It generalizes the Unix read(2) function.\n    It matches the streambuf::sys_read virtual function, which is\n    specific to this implementation. */\n-typedef _IO_ssize_t (*_IO_read_t) __P ((_IO_FILE *, void *, _IO_ssize_t));\n+typedef _IO_ssize_t (*_IO_read_t) __PMT ((_IO_FILE *, void *, _IO_ssize_t));\n #define _IO_SYSREAD(FP, DATA, LEN) JUMP2 (__read, FP, DATA, LEN)\n \n /* The 'syswrite' hook is used to write data from an existing buffer\n    to an external file.  It generalizes the Unix write(2) function.\n    It matches the streambuf::sys_write virtual function, which is\n    specific to this implementation. */\n-typedef _IO_ssize_t (*_IO_write_t) __P ((_IO_FILE *,const void *,_IO_ssize_t));\n+typedef _IO_ssize_t (*_IO_write_t) __PMT ((_IO_FILE *,const void *,_IO_ssize_t));\n #define _IO_SYSWRITE(FP, DATA, LEN) JUMP2 (__write, FP, DATA, LEN)\n \n /* The 'sysseek' hook is used to re-position an external file.\n    It generalizes the Unix lseek(2) function.\n    It matches the streambuf::sys_seek virtual function, which is\n    specific to this implementation. */\n #if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n-typedef _IO_fpos64_t (*_IO_seek_t) __P ((_IO_FILE *, _IO_off64_t, int));\n+typedef _IO_fpos64_t (*_IO_seek_t) __PMT ((_IO_FILE *, _IO_off64_t, int));\n #else\n-typedef _IO_fpos_t (*_IO_seek_t) __P ((_IO_FILE *, _IO_off_t, int));\n+typedef _IO_fpos_t (*_IO_seek_t) __PMT ((_IO_FILE *, _IO_off_t, int));\n #endif\n #define _IO_SYSSEEK(FP, OFFSET, MODE) JUMP2 (__seek, FP, OFFSET, MODE)\n \n /* The 'sysclose' hook is used to finalize (close, finish up) an\n    external file.  It generalizes the Unix close(2) function.\n    It matches the streambuf::sys_close virtual function, which is\n    specific to this implementation. */\n-typedef int (*_IO_close_t) __P ((_IO_FILE *)); /* finalize */\n+typedef int (*_IO_close_t) __PMT ((_IO_FILE *)); /* finalize */\n #define _IO_SYSCLOSE(FP) JUMP0 (__close, FP)\n \n /* The 'sysstat' hook is used to get information about an external file\n    into a struct stat buffer.  It generalizes the Unix fstat(2) call.\n    It matches the streambuf::sys_stat virtual function, which is\n    specific to this implementation. */\n-typedef int (*_IO_stat_t) __P ((_IO_FILE *, void *));\n+typedef int (*_IO_stat_t) __PMT ((_IO_FILE *, void *));\n #define _IO_SYSSTAT(FP, BUF) JUMP1 (__stat, FP, BUF)\n \n #if _G_IO_IO_FILE_VERSION == 0x20001\n /* The 'showmany' hook can be used to get an image how much input is\n    available.  In many cases the answer will be 0 which means unknown\n    but some cases one can provide real information.  */\n-typedef int (*_IO_showmanyc_t) __P ((_IO_FILE *));\n+typedef int (*_IO_showmanyc_t) __PMT ((_IO_FILE *));\n #define _IO_SHOWMANYC(FP) JUMP0 (__showmanyc, FP)\n \n /* The 'imbue' hook is used to get information about the currently\n    installed locales.  */\n-typedef void (*_IO_imbue_t) __P ((_IO_FILE *, void *));\n+typedef void (*_IO_imbue_t) __PMT ((_IO_FILE *, void *));\n #define _IO_IMBUE(FP, LOCALE) JUMP1 (__imbue, FP, LOCALE)\n #endif\n \n@@ -450,7 +450,7 @@ extern int _IO_outfloat __P ((double __value, _IO_FILE *__sb, int __type,\n \t\t\t      int __sign_mode, int __fill));\n \n extern _IO_FILE *_IO_list_all;\n-extern void (*_IO_cleanup_registration_needed) __P ((void));\n+extern void (*_IO_cleanup_registration_needed) __PMT ((void));\n \n #ifndef EOF\n # define EOF (-1)"}, {"sha": "5a33dca22d99ae67ce47371fa92ae10dc6fafe3c", "filename": "libio/strfile.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/887e3058154e47cb5b35ea2548ba6805b4879833/libio%2Fstrfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/887e3058154e47cb5b35ea2548ba6805b4879833/libio%2Fstrfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fstrfile.h?ref=887e3058154e47cb5b35ea2548ba6805b4879833", "patch": "@@ -28,8 +28,8 @@\n Merge into  libio.h ?\n #endif\n \n-typedef void *(*_IO_alloc_type) __P ((_IO_size_t));\n-typedef void (*_IO_free_type) __P ((void*));\n+typedef void *(*_IO_alloc_type) __PMT ((_IO_size_t));\n+typedef void (*_IO_free_type) __PMT ((void*));\n \n struct _IO_str_fields\n {"}]}