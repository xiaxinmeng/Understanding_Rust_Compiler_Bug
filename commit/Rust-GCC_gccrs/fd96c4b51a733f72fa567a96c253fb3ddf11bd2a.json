{"sha": "fd96c4b51a733f72fa567a96c253fb3ddf11bd2a", "node_id": "C_kwDOANBUbNoAKGZkOTZjNGI1MWE3MzNmNzJmYTU2N2E5NmMyNTNmYjNkZGYxMWJkMmE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-27T00:16:58Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-27T00:16:58Z"}, "message": "Daily bump.", "tree": {"sha": "7aa07b372bdc5f5a6815cc6881051ad56a14ec9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aa07b372bdc5f5a6815cc6881051ad56a14ec9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a/comments", "author": null, "committer": null, "parents": [{"sha": "e75da2ace6b6f634237259ef62cfb2d3d34adb10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75da2ace6b6f634237259ef62cfb2d3d34adb10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e75da2ace6b6f634237259ef62cfb2d3d34adb10"}], "stats": {"total": 432, "additions": 431, "deletions": 1}, "files": [{"sha": "f0963bbf4a47e460016a377b6dcbe05608a40a6d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 343, "deletions": 0, "changes": 343, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd96c4b51a733f72fa567a96c253fb3ddf11bd2a", "patch": "@@ -1,3 +1,346 @@\n+2022-07-26  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR c/106016\n+\t* expr.cc (count_type_elements): Handle OPAQUE_TYPE.\n+\n+2022-07-26  Lulu Cheng  <chenglulu@loongson.cn>\n+\n+\t* config/loongarch/loongarch-opts.cc: Modify the output message string\n+\tof the warning.\n+\n+2022-07-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/tm.texi.in: Fix placement of defmac.\n+\t* doc/tm.texi: Copy.\n+\n+2022-07-26  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/tm.texi.in: Fix cross @defmac and @hook.\n+\t* doc/tm.texi: Copy.\n+\n+2022-07-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/106444\n+\t* value-range-pretty-print.cc (vrange_printer::visit): Handle\n+\tlegacy ranges.\n+\t(vrange_printer::print_irange_bound): Work on wide_int's.\n+\t* value-range-pretty-print.h (print_irange_bound): Same.\n+\t* value-range.cc (irange::get_nonzero_bits): Handle legacy ranges.\n+\n+2022-07-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-alias.cc (ptr_derefs_may_alias_p): If ptr1\n+\tpoints to a constant continue checking ptr2.\n+\n+2022-07-26  Andrew Carlotti  <Andrew.Carlotti@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.cc\n+\t(MODE_d_bf16, MODE_d_f16, MODE_d_f32, MODE_d_f64, MODE_d_s8)\n+\t(MODE_d_s16, MODE_d_s32, MODE_d_s64, MODE_d_u8, MODE_d_u16)\n+\t(MODE_d_u32, MODE_d_u64, MODE_d_p8, MODE_d_p16, MODE_d_p64)\n+\t(MODE_q_bf16, MODE_q_f16, MODE_q_f32, MODE_q_f64, MODE_q_s8)\n+\t(MODE_q_s16, MODE_q_s32, MODE_q_s64, MODE_q_u8, MODE_q_u16)\n+\t(MODE_q_u32, MODE_q_u64, MODE_q_p8, MODE_q_p16, MODE_q_p64)\n+\t(MODE_q_p128): Define macro to map to corresponding mode name.\n+\t(QUAL_bf16, QUAL_f16, QUAL_f32, QUAL_f64, QUAL_s8, QUAL_s16)\n+\t(QUAL_s32, QUAL_s64, QUAL_u8, QUAL_u16, QUAL_u32, QUAL_u64)\n+\t(QUAL_p8, QUAL_p16, QUAL_p64, QUAL_p128): Define macro to map to\n+\tcorresponding qualifier name.\n+\t(LENGTH_d, LENGTH_q): Define macro to map to \"\" or \"q\" suffix.\n+\t(SIMD_INTR_MODE, SIMD_INTR_QUAL, SIMD_INTR_LENGTH_CHAR): Macro\n+\tfunctions for the above mappings\n+\t(VREINTERPRET_BUILTIN2, VREINTERPRET_BUILTINS1, VREINTERPRET_BUILTINS)\n+\t(VREINTERPRETQ_BUILTIN2, VREINTERPRETQ_BUILTINS1)\n+\t(VREINTERPRETQ_BUILTINS, VREINTERPRET_BUILTIN)\n+\t(AARCH64_SIMD_VREINTERPRET_BUILTINS): New macros to create definitions\n+\tfor all vreinterpret intrinsics\n+\t(enum aarch64_builtins): Add vreinterpret function codes\n+\t(aarch64_init_simd_intrinsics): New\n+\t(handle_arm_neon_h): Improved comment.\n+\t(aarch64_general_fold_builtin): Fold vreinterpret calls\n+\t* config/aarch64/arm_neon.h\n+\t(vreinterpret_p8_f16, vreinterpret_p8_f64, vreinterpret_p8_s8)\n+\t(vreinterpret_p8_s16, vreinterpret_p8_s32, vreinterpret_p8_s64)\n+\t(vreinterpret_p8_f32, vreinterpret_p8_u8, vreinterpret_p8_u16)\n+\t(vreinterpret_p8_u32, vreinterpret_p8_u64, vreinterpret_p8_p16)\n+\t(vreinterpret_p8_p64, vreinterpretq_p8_f64, vreinterpretq_p8_s8)\n+\t(vreinterpretq_p8_s16, vreinterpretq_p8_s32, vreinterpretq_p8_s64)\n+\t(vreinterpretq_p8_f16, vreinterpretq_p8_f32, vreinterpretq_p8_u8)\n+\t(vreinterpretq_p8_u16, vreinterpretq_p8_u32, vreinterpretq_p8_u64)\n+\t(vreinterpretq_p8_p16, vreinterpretq_p8_p64, vreinterpretq_p8_p128)\n+\t(vreinterpret_p16_f16, vreinterpret_p16_f64, vreinterpret_p16_s8)\n+\t(vreinterpret_p16_s16, vreinterpret_p16_s32, vreinterpret_p16_s64)\n+\t(vreinterpret_p16_f32, vreinterpret_p16_u8, vreinterpret_p16_u16)\n+\t(vreinterpret_p16_u32, vreinterpret_p16_u64, vreinterpret_p16_p8)\n+\t(vreinterpret_p16_p64, vreinterpretq_p16_f64, vreinterpretq_p16_s8)\n+\t(vreinterpretq_p16_s16, vreinterpretq_p16_s32, vreinterpretq_p16_s64)\n+\t(vreinterpretq_p16_f16, vreinterpretq_p16_f32, vreinterpretq_p16_u8)\n+\t(vreinterpretq_p16_u16, vreinterpretq_p16_u32, vreinterpretq_p16_u64)\n+\t(vreinterpretq_p16_p8, vreinterpretq_p16_p64, vreinterpretq_p16_p128)\n+\t(vreinterpret_p64_f16, vreinterpret_p64_f64, vreinterpret_p64_s8)\n+\t(vreinterpret_p64_s16, vreinterpret_p64_s32, vreinterpret_p64_s64)\n+\t(vreinterpret_p64_f32, vreinterpret_p64_u8, vreinterpret_p64_u16)\n+\t(vreinterpret_p64_u32, vreinterpret_p64_u64, vreinterpret_p64_p8)\n+\t(vreinterpret_p64_p16, vreinterpretq_p64_f64, vreinterpretq_p64_s8)\n+\t(vreinterpretq_p64_s16, vreinterpretq_p64_s32, vreinterpretq_p64_s64)\n+\t(vreinterpretq_p64_f16, vreinterpretq_p64_f32, vreinterpretq_p64_p128)\n+\t(vreinterpretq_p64_u8, vreinterpretq_p64_u16, vreinterpretq_p64_p16)\n+\t(vreinterpretq_p64_u32, vreinterpretq_p64_u64, vreinterpretq_p64_p8)\n+\t(vreinterpretq_p128_p8, vreinterpretq_p128_p16, vreinterpretq_p128_f16)\n+\t(vreinterpretq_p128_f32, vreinterpretq_p128_p64, vreinterpretq_p128_s64)\n+\t(vreinterpretq_p128_u64, vreinterpretq_p128_s8, vreinterpretq_p128_s16)\n+\t(vreinterpretq_p128_s32, vreinterpretq_p128_u8, vreinterpretq_p128_u16)\n+\t(vreinterpretq_p128_u32, vreinterpret_f16_f64, vreinterpret_f16_s8)\n+\t(vreinterpret_f16_s16, vreinterpret_f16_s32, vreinterpret_f16_s64)\n+\t(vreinterpret_f16_f32, vreinterpret_f16_u8, vreinterpret_f16_u16)\n+\t(vreinterpret_f16_u32, vreinterpret_f16_u64, vreinterpret_f16_p8)\n+\t(vreinterpret_f16_p16, vreinterpret_f16_p64, vreinterpretq_f16_f64)\n+\t(vreinterpretq_f16_s8, vreinterpretq_f16_s16, vreinterpretq_f16_s32)\n+\t(vreinterpretq_f16_s64, vreinterpretq_f16_f32, vreinterpretq_f16_u8)\n+\t(vreinterpretq_f16_u16, vreinterpretq_f16_u32, vreinterpretq_f16_u64)\n+\t(vreinterpretq_f16_p8, vreinterpretq_f16_p128, vreinterpretq_f16_p16)\n+\t(vreinterpretq_f16_p64, vreinterpret_f32_f16, vreinterpret_f32_f64)\n+\t(vreinterpret_f32_s8, vreinterpret_f32_s16, vreinterpret_f32_s32)\n+\t(vreinterpret_f32_s64, vreinterpret_f32_u8, vreinterpret_f32_u16)\n+\t(vreinterpret_f32_u32, vreinterpret_f32_u64, vreinterpret_f32_p8)\n+\t(vreinterpret_f32_p16, vreinterpret_f32_p64, vreinterpretq_f32_f16)\n+\t(vreinterpretq_f32_f64, vreinterpretq_f32_s8, vreinterpretq_f32_s16)\n+\t(vreinterpretq_f32_s32, vreinterpretq_f32_s64, vreinterpretq_f32_u8)\n+\t(vreinterpretq_f32_u16, vreinterpretq_f32_u32, vreinterpretq_f32_u64)\n+\t(vreinterpretq_f32_p8, vreinterpretq_f32_p16, vreinterpretq_f32_p64)\n+\t(vreinterpretq_f32_p128, vreinterpret_f64_f16, vreinterpret_f64_f32)\n+\t(vreinterpret_f64_p8, vreinterpret_f64_p16, vreinterpret_f64_p64)\n+\t(vreinterpret_f64_s8, vreinterpret_f64_s16, vreinterpret_f64_s32)\n+\t(vreinterpret_f64_s64, vreinterpret_f64_u8, vreinterpret_f64_u16)\n+\t(vreinterpret_f64_u32, vreinterpret_f64_u64, vreinterpretq_f64_f16)\n+\t(vreinterpretq_f64_f32, vreinterpretq_f64_p8, vreinterpretq_f64_p16)\n+\t(vreinterpretq_f64_p64, vreinterpretq_f64_s8, vreinterpretq_f64_s16)\n+\t(vreinterpretq_f64_s32, vreinterpretq_f64_s64, vreinterpretq_f64_u8)\n+\t(vreinterpretq_f64_u16, vreinterpretq_f64_u32, vreinterpretq_f64_u64)\n+\t(vreinterpret_s64_f16, vreinterpret_s64_f64, vreinterpret_s64_s8)\n+\t(vreinterpret_s64_s16, vreinterpret_s64_s32, vreinterpret_s64_f32)\n+\t(vreinterpret_s64_u8, vreinterpret_s64_u16, vreinterpret_s64_u32)\n+\t(vreinterpret_s64_u64, vreinterpret_s64_p8, vreinterpret_s64_p16)\n+\t(vreinterpret_s64_p64, vreinterpretq_s64_f64, vreinterpretq_s64_s8)\n+\t(vreinterpretq_s64_s16, vreinterpretq_s64_s32, vreinterpretq_s64_f16)\n+\t(vreinterpretq_s64_f32, vreinterpretq_s64_u8, vreinterpretq_s64_u16)\n+\t(vreinterpretq_s64_u32, vreinterpretq_s64_u64, vreinterpretq_s64_p8)\n+\t(vreinterpretq_s64_p16, vreinterpretq_s64_p64, vreinterpretq_s64_p128)\n+\t(vreinterpret_u64_f16, vreinterpret_u64_f64, vreinterpret_u64_s8)\n+\t(vreinterpret_u64_s16, vreinterpret_u64_s32, vreinterpret_u64_s64)\n+\t(vreinterpret_u64_f32, vreinterpret_u64_u8, vreinterpret_u64_u16)\n+\t(vreinterpret_u64_u32, vreinterpret_u64_p8, vreinterpret_u64_p16)\n+\t(vreinterpret_u64_p64, vreinterpretq_u64_f64, vreinterpretq_u64_s8)\n+\t(vreinterpretq_u64_s16, vreinterpretq_u64_s32, vreinterpretq_u64_s64)\n+\t(vreinterpretq_u64_f16, vreinterpretq_u64_f32, vreinterpretq_u64_u8)\n+\t(vreinterpretq_u64_u16, vreinterpretq_u64_u32, vreinterpretq_u64_p8)\n+\t(vreinterpretq_u64_p16, vreinterpretq_u64_p64, vreinterpretq_u64_p128)\n+\t(vreinterpret_s8_f16, vreinterpret_s8_f64, vreinterpret_s8_s16)\n+\t(vreinterpret_s8_s32, vreinterpret_s8_s64, vreinterpret_s8_f32)\n+\t(vreinterpret_s8_u8, vreinterpret_s8_u16, vreinterpret_s8_u32)\n+\t(vreinterpret_s8_u64, vreinterpret_s8_p8, vreinterpret_s8_p16)\n+\t(vreinterpret_s8_p64, vreinterpretq_s8_f64, vreinterpretq_s8_s16)\n+\t(vreinterpretq_s8_s32, vreinterpretq_s8_s64, vreinterpretq_s8_f16)\n+\t(vreinterpretq_s8_f32, vreinterpretq_s8_u8, vreinterpretq_s8_u16)\n+\t(vreinterpretq_s8_u32, vreinterpretq_s8_u64, vreinterpretq_s8_p8)\n+\t(vreinterpretq_s8_p16, vreinterpretq_s8_p64, vreinterpretq_s8_p128)\n+\t(vreinterpret_s16_f16, vreinterpret_s16_f64, vreinterpret_s16_s8)\n+\t(vreinterpret_s16_s32, vreinterpret_s16_s64, vreinterpret_s16_f32)\n+\t(vreinterpret_s16_u8, vreinterpret_s16_u16, vreinterpret_s16_u32)\n+\t(vreinterpret_s16_u64, vreinterpret_s16_p8, vreinterpret_s16_p16)\n+\t(vreinterpret_s16_p64, vreinterpretq_s16_f64, vreinterpretq_s16_s8)\n+\t(vreinterpretq_s16_s32, vreinterpretq_s16_s64, vreinterpretq_s16_f16)\n+\t(vreinterpretq_s16_f32, vreinterpretq_s16_u8, vreinterpretq_s16_u16)\n+\t(vreinterpretq_s16_u32, vreinterpretq_s16_u64, vreinterpretq_s16_p8)\n+\t(vreinterpretq_s16_p16, vreinterpretq_s16_p64, vreinterpretq_s16_p128)\n+\t(vreinterpret_s32_f16, vreinterpret_s32_f64, vreinterpret_s32_s8)\n+\t(vreinterpret_s32_s16, vreinterpret_s32_s64, vreinterpret_s32_f32)\n+\t(vreinterpret_s32_u8, vreinterpret_s32_u16, vreinterpret_s32_u32)\n+\t(vreinterpret_s32_u64, vreinterpret_s32_p8, vreinterpret_s32_p16)\n+\t(vreinterpret_s32_p64, vreinterpretq_s32_f64, vreinterpretq_s32_s8)\n+\t(vreinterpretq_s32_s16, vreinterpretq_s32_s64, vreinterpretq_s32_f16)\n+\t(vreinterpretq_s32_f32, vreinterpretq_s32_u8, vreinterpretq_s32_u16)\n+\t(vreinterpretq_s32_u32, vreinterpretq_s32_u64, vreinterpretq_s32_p8)\n+\t(vreinterpretq_s32_p16, vreinterpretq_s32_p64, vreinterpretq_s32_p128)\n+\t(vreinterpret_u8_f16, vreinterpret_u8_f64, vreinterpret_u8_s8)\n+\t(vreinterpret_u8_s16, vreinterpret_u8_s32, vreinterpret_u8_s64)\n+\t(vreinterpret_u8_f32, vreinterpret_u8_u16, vreinterpret_u8_u32)\n+\t(vreinterpret_u8_u64, vreinterpret_u8_p8, vreinterpret_u8_p16)\n+\t(vreinterpret_u8_p64, vreinterpretq_u8_f64, vreinterpretq_u8_s8)\n+\t(vreinterpretq_u8_s16, vreinterpretq_u8_s32, vreinterpretq_u8_s64)\n+\t(vreinterpretq_u8_f16, vreinterpretq_u8_f32, vreinterpretq_u8_u16)\n+\t(vreinterpretq_u8_u32, vreinterpretq_u8_u64, vreinterpretq_u8_p8)\n+\t(vreinterpretq_u8_p16, vreinterpretq_u8_p64, vreinterpretq_u8_p128)\n+\t(vreinterpret_u16_f16, vreinterpret_u16_f64, vreinterpret_u16_s8)\n+\t(vreinterpret_u16_s16, vreinterpret_u16_s32, vreinterpret_u16_s64)\n+\t(vreinterpret_u16_f32, vreinterpret_u16_u8, vreinterpret_u16_u32)\n+\t(vreinterpret_u16_u64, vreinterpret_u16_p8, vreinterpret_u16_p16)\n+\t(vreinterpret_u16_p64, vreinterpretq_u16_f64, vreinterpretq_u16_s8)\n+\t(vreinterpretq_u16_s16, vreinterpretq_u16_s32, vreinterpretq_u16_s64)\n+\t(vreinterpretq_u16_f16, vreinterpretq_u16_f32, vreinterpretq_u16_u8)\n+\t(vreinterpretq_u16_u32, vreinterpretq_u16_u64, vreinterpretq_u16_p8)\n+\t(vreinterpretq_u16_p16, vreinterpretq_u16_p64, vreinterpretq_u16_p128)\n+\t(vreinterpret_u32_f16, vreinterpret_u32_f64, vreinterpret_u32_s8)\n+\t(vreinterpret_u32_s16, vreinterpret_u32_s32, vreinterpret_u32_s64)\n+\t(vreinterpret_u32_f32, vreinterpret_u32_u8, vreinterpret_u32_u16)\n+\t(vreinterpret_u32_u64, vreinterpret_u32_p8, vreinterpret_u32_p16)\n+\t(vreinterpret_u32_p64, vreinterpretq_u32_f64, vreinterpretq_u32_s8)\n+\t(vreinterpretq_u32_s16, vreinterpretq_u32_s32, vreinterpretq_u32_s64)\n+\t(vreinterpretq_u32_f16, vreinterpretq_u32_f32, vreinterpretq_u32_u8)\n+\t(vreinterpretq_u32_u16, vreinterpretq_u32_u64, vreinterpretq_u32_p8)\n+\t(vreinterpretq_u32_p16, vreinterpretq_u32_p64, vreinterpretq_u32_p128)\n+\t(vreinterpretq_f64_p128, vreinterpretq_p128_f64, vreinterpret_bf16_u8)\n+\t(vreinterpret_bf16_u16, vreinterpret_bf16_u32, vreinterpret_bf16_u64)\n+\t(vreinterpret_bf16_s8, vreinterpret_bf16_s16, vreinterpret_bf16_s32)\n+\t(vreinterpret_bf16_s64, vreinterpret_bf16_p8, vreinterpret_bf16_p16)\n+\t(vreinterpret_bf16_p64, vreinterpret_bf16_f16, vreinterpret_bf16_f32)\n+\t(vreinterpret_bf16_f64, vreinterpretq_bf16_u8, vreinterpretq_bf16_u16)\n+\t(vreinterpretq_bf16_u32, vreinterpretq_bf16_u64, vreinterpretq_bf16_s8)\n+\t(vreinterpretq_bf16_s16, vreinterpretq_bf16_s32, vreinterpretq_bf16_s64)\n+\t(vreinterpretq_bf16_p8, vreinterpretq_bf16_p16, vreinterpretq_bf16_p64)\n+\t(vreinterpretq_bf16_p128, vreinterpretq_bf16_f16)\n+\t(vreinterpretq_bf16_f32, vreinterpretq_bf16_f64, vreinterpret_s8_bf16)\n+\t(vreinterpret_s16_bf16, vreinterpret_s32_bf16, vreinterpret_s64_bf16)\n+\t(vreinterpret_u8_bf16, vreinterpret_u16_bf16, vreinterpret_u32_bf16)\n+\t(vreinterpret_u64_bf16, vreinterpret_f16_bf16, vreinterpret_f32_bf16)\n+\t(vreinterpret_f64_bf16, vreinterpret_p8_bf16, vreinterpret_p16_bf16)\n+\t(vreinterpret_p64_bf16, vreinterpretq_s8_bf16, vreinterpretq_s16_bf16)\n+\t(vreinterpretq_s32_bf16, vreinterpretq_s64_bf16, vreinterpretq_u8_bf16)\n+\t(vreinterpretq_u16_bf16, vreinterpretq_u32_bf16, vreinterpretq_u64_bf16)\n+\t(vreinterpretq_f16_bf16, vreinterpretq_f32_bf16, vreinterpretq_f64_bf16)\n+\t(vreinterpretq_p8_bf16, vreinterpretq_p16_bf16, vreinterpretq_p64_bf16)\n+\t(vreinterpretq_p128_bf16): Delete\n+\n+2022-07-26  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.cc\n+\t(aarch64_simd_builtin_std_type): Rename to...\n+\t(aarch64_int_or_fp_type): ...this, and allow irrelevant qualifiers.\n+\t(aarch64_lookup_simd_builtin_type): Rename to...\n+\t(aarch64_simd_builtin_type): ...this. Add const/pointer\n+\tsupport, and extract table lookup to...\n+\t(aarch64_lookup_simd_type_in_table): ...this function.\n+\t(aarch64_init_crc32_builtins): Update to use aarch64_simd_builtin_type.\n+\t(aarch64_init_fcmla_laneq_builtins): Ditto.\n+\t(aarch64_init_simd_builtin_functions): Ditto.\n+\n+2022-07-26  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.cc\n+\t(aarch64_general_gimple_fold_builtin): Add combine.\n+\n+2022-07-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106189\n+\t* gimple-array-bounds.cc (array_bounds_checker::check_mem_ref):\n+\tDivide using offset_ints.\n+\n+2022-07-26  Lulu Cheng  <chenglulu@loongson.cn>\n+\n+\t* common/config/loongarch/loongarch-common.cc:\n+\tEnable '-fsection-anchors' when O1 and more advanced optimization.\n+\t* config/loongarch/genopts/loongarch.opt.in: Add new option\n+\t'-mexplicit-relocs', and enable by default.\n+\t* config/loongarch/loongarch-protos.h (loongarch_split_move_insn_p):\n+\tDelete function declaration.\n+\t(loongarch_split_move_insn): Delete function declaration.\n+\t(loongarch_split_symbol_type): Add function declaration.\n+\t* config/loongarch/loongarch.cc (enum loongarch_address_type):\n+\tAdd new address type 'ADDRESS_LO_SUM'.\n+\t(loongarch_classify_symbolic_expression): New function definitions.\n+\tClassify the base of symbolic expression X, given that X appears in\n+\tcontext CONTEXT.\n+\t(loongarch_symbol_insns): Add a judgment condition TARGET_EXPLICIT_RELOCS.\n+\t(loongarch_split_symbol_type): New function definitions.\n+\tDetermines whether the symbol load should be split into two instructions.\n+\t(loongarch_valid_lo_sum_p): New function definitions.\n+\tReturn true if a LO_SUM can address a value of mode MODE when the LO_SUM\n+\tsymbol has type SYMBOL_TYPE.\n+\t(loongarch_classify_address): Add handling of 'LO_SUM'.\n+\t(loongarch_address_insns): Add handling of 'ADDRESS_LO_SUM'.\n+\t(loongarch_signed_immediate_p): Sort code.\n+\t(loongarch_12bit_offset_address_p): Return true if address type is ADDRESS_LO_SUM.\n+\t(loongarch_const_insns): Add handling of 'HIGH'.\n+\t(loongarch_split_move_insn_p): Add the static attribute to the function.\n+\t(loongarch_emit_set): New function definitions.\n+\t(loongarch_call_tls_get_addr): Add symbol handling when defining TARGET_EXPLICIT_RELOCS.\n+\t(loongarch_legitimize_tls_address): Add symbol handling when defining the\n+\tTARGET_EXPLICIT_RELOCS macro.\n+\t(loongarch_split_symbol): New function definitions. Split symbol.\n+\t(loongarch_legitimize_address): Add codes see if the address can split into a high part\n+\tand a LO_SUM.\n+\t(loongarch_legitimize_const_move): Add codes split moves of symbolic constants into\n+\thigh and low.\n+\t(loongarch_split_move_insn): Delete function definitions.\n+\t(loongarch_output_move): Add support for HIGH and LO_SUM.\n+\t(loongarch_print_operand_reloc): New function definitions.\n+\tPrint symbolic operand OP, which is part of a HIGH or LO_SUM in context CONTEXT.\n+\t(loongarch_memmodel_needs_release_fence): Sort code.\n+\t(loongarch_print_operand): Rearrange alphabetical order and add H and L to support HIGH\n+\tand LOW output.\n+\t(loongarch_print_operand_address): Add handling of 'ADDRESS_LO_SUM'.\n+\t(TARGET_MIN_ANCHOR_OFFSET): Define macro to -IMM_REACH/2.\n+\t(TARGET_MAX_ANCHOR_OFFSET): Define macro to IMM_REACH/2-1.\n+\t* config/loongarch/loongarch.md (movti): Delete the template.\n+\t(*movti): Delete the template.\n+\t(movtf): Delete the template.\n+\t(*movtf): Delete the template.\n+\t(*low<mode>): New template of normal symbol low address.\n+\t(@tls_low<mode>): New template of tls symbol low address.\n+\t(@ld_from_got<mode>): New template load address from got table.\n+\t(@ori_l_lo12<mode>): New template.\n+\t* config/loongarch/loongarch.opt: Update from loongarch.opt.in.\n+\t* config/loongarch/predicates.md: Add support for symbol_type HIGH.\n+\n+2022-07-26  Lulu Cheng  <chenglulu@loongson.cn>\n+\n+\t* config/loongarch/constraints.md (a): Delete the constraint.\n+\t(b): A constant call not local address.\n+\t(h): Delete the constraint.\n+\t(t): Delete the constraint.\n+\t* config/loongarch/loongarch-opts.cc (loongarch_config_target):\n+\tRemove cModel type support other than normal.\n+\t* config/loongarch/loongarch-protos.h (enum loongarch_symbol_type):\n+\tAdd new symbol type 'SYMBOL_PCREL', 'SYMBOL_TLS_IE' and 'SYMBOL_TLS_LE'.\n+\t(loongarch_split_symbol): Delete useless function declarations.\n+\t(loongarch_split_symbol_type): Delete useless function declarations.\n+\t* config/loongarch/loongarch.cc (enum loongarch_address_type):\n+\tDelete unnecessary comment information.\n+\t(loongarch_symbol_binds_local_p): Modified the judgment order of label\n+\tand symbol.\n+\t(loongarch_classify_symbol): Return symbol type. If symbol is a label,\n+\tor symbol is a local symbol return SYMBOL_PCREL. If is a tls symbol,\n+\treturn SYMBOL_TLS. If is a not local symbol return SYMBOL_GOT_DISP.\n+\t(loongarch_symbolic_constant_p): Add handling of 'SYMBOL_TLS_IE'\n+\t'SYMBOL_TLS_LE' and 'SYMBOL_PCREL'.\n+\t(loongarch_symbol_insns): Add handling of 'SYMBOL_TLS_IE' 'SYMBOL_TLS_LE'\n+\tand 'SYMBOL_PCREL'.\n+\t(loongarch_address_insns): Sort code.\n+\t(loongarch_12bit_offset_address_p): Sort code.\n+\t(loongarch_14bit_shifted_offset_address_p): Sort code.\n+\t(loongarch_call_tls_get_addr): Sort code.\n+\t(loongarch_legitimize_tls_address): Sort code.\n+\t(loongarch_output_move): Remove schema support for cmodel other than normal.\n+\t(loongarch_memmodel_needs_release_fence): Sort code.\n+\t(loongarch_print_operand): Sort code.\n+\t* config/loongarch/loongarch.h (LARCH_U12BIT_OFFSET_P):\n+\tRename to LARCH_12BIT_OFFSET_P.\n+\t(LARCH_12BIT_OFFSET_P): New macro.\n+\t* config/loongarch/loongarch.md: Reimplement the function call. Remove schema\n+\tsupport for cmodel other than normal.\n+\t* config/loongarch/predicates.md (is_const_call_weak_symbol): Delete this predicate.\n+\t(is_const_call_plt_symbol): Delete this predicate.\n+\t(is_const_call_global_noplt_symbol): Delete this predicate.\n+\t(is_const_call_no_local_symbol): New predicate, determines whether it is a local\n+\tsymbol or label.\n+\n+2022-07-26  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/106091\n+\t* config/rs6000/rs6000-p8swap.cc (replace_swapped_aligned_store): Copy\n+\tREG_EH_REGION when replacing one store insn having it.\n+\t(replace_swapped_aligned_load): Likewise.\n+\n 2022-07-25  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* Makefile.in (OBJS): Add range-op-float.o."}, {"sha": "b7375eb6cba2b41dfe049e7ea551d3631864e630", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=fd96c4b51a733f72fa567a96c253fb3ddf11bd2a", "patch": "@@ -1 +1 @@\n-20220726\n+20220727"}, {"sha": "6c883b75684a35b58a42922c3c4b81e9fc37335f", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=fd96c4b51a733f72fa567a96c253fb3ddf11bd2a", "patch": "@@ -1,3 +1,14 @@\n+2022-07-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106319\n+\t* store.cc (store::set_value): Don't strip away casts if the\n+\tregion has NULL type.\n+\n+2022-07-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region.h (code_region::get_element): Remove stray decl.\n+\t(function_region::get_element): Likewise.\n+\n 2022-07-25  Martin Liska  <mliska@suse.cz>\n \n \t* sm-fd.cc: Run dos2unix and fix coding style issues."}, {"sha": "a5ed51a294e8be3b176da2c8f815815f7bb87b8d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fd96c4b51a733f72fa567a96c253fb3ddf11bd2a", "patch": "@@ -1,3 +1,9 @@\n+2022-07-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106311\n+\t* pt.cc (redeclare_class_template): Check DECL_P before accessing\n+\tDECL_SOURCE_LOCATION.\n+\n 2022-07-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/106230"}, {"sha": "acd60ffbf7c50a902d89163ddae81eb554977279", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fd96c4b51a733f72fa567a96c253fb3ddf11bd2a", "patch": "@@ -1,3 +1,9 @@\n+2022-07-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103504\n+\t* interface.cc (get_sym_storage_size): Array bounds and character\n+\tlength can only be of integer type.\n+\n 2022-07-21  Martin Liska  <mliska@suse.cz>\n \n \t* intrinsic.texi: Remove trailing dots for 2 Fortran fns."}, {"sha": "c846ad47be9c996390f0a94c2e741e975aebfdf9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd96c4b51a733f72fa567a96c253fb3ddf11bd2a", "patch": "@@ -1,3 +1,63 @@\n+2022-07-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106319\n+\t* gcc.dg/analyzer/stdarg-types-3.c: New test.\n+\t* gcc.dg/analyzer/stdarg-types-4.c: New test.\n+\n+2022-07-26  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103504\n+\t* gfortran.dg/pr103504.f90: New test.\n+\n+2022-07-26  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\tPR c/106016\n+\t* gcc.target/powerpc/pr106016.c: New test.\n+\n+2022-07-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/106311\n+\t* g++.dg/template/redecl5.C: New test.\n+\n+2022-07-26  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/106444\n+\t* gcc.dg/tree-ssa/evrp4.c: Adjust.\n+\n+2022-07-26  Andrew Carlotti  <andrew.carlotti@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/combine.c:\n+\tNew test.\n+\n+2022-07-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106189\n+\t* gcc.dg/pr106189.c: New testcase.\n+\n+2022-07-26  Lulu Cheng  <chenglulu@loongson.cn>\n+\n+\t* gcc.target/loongarch/func-call-1.c: Add build option '-mno-explicit-relocs'.\n+\t* gcc.target/loongarch/func-call-2.c: Add build option '-mno-explicit-relocs'.\n+\t* gcc.target/loongarch/func-call-3.c: Add build option '-mno-explicit-relocs'.\n+\t* gcc.target/loongarch/func-call-4.c: Add build option '-mno-explicit-relocs'.\n+\t* gcc.target/loongarch/func-call-5.c: New test.\n+\t* gcc.target/loongarch/func-call-6.c: New test.\n+\t* gcc.target/loongarch/func-call-7.c: New test.\n+\t* gcc.target/loongarch/func-call-8.c: New test.\n+\t* gcc.target/loongarch/relocs-symbol-noaddend.c: New test.\n+\n+2022-07-26  Lulu Cheng  <chenglulu@loongson.cn>\n+\n+\t* gcc.target/loongarch/func-call-1.c: New test.\n+\t* gcc.target/loongarch/func-call-2.c: New test.\n+\t* gcc.target/loongarch/func-call-3.c: New test.\n+\t* gcc.target/loongarch/func-call-4.c: New test.\n+\n+2022-07-26  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/106091\n+\t* gcc.target/powerpc/pr106091.c: New test.\n+\n 2022-07-26  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/106230"}, {"sha": "b309c68928663a3d91a7a097eaee616c09714bea", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd96c4b51a733f72fa567a96c253fb3ddf11bd2a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fd96c4b51a733f72fa567a96c253fb3ddf11bd2a", "patch": "@@ -1,3 +1,7 @@\n+2022-07-26  Thomas Rodgers  <trodgers@redhat.com>\n+\n+\t* include/bits/atomic_wait.h (__atomic_spin): Merge spin loops.\n+\n 2022-07-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/100823"}]}