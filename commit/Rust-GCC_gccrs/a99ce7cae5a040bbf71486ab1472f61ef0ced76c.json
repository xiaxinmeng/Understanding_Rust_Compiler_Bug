{"sha": "a99ce7cae5a040bbf71486ab1472f61ef0ced76c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk5Y2U3Y2FlNWEwNDBiYmY3MTQ4NmFiMTQ3MmY2MWVmMGNlZDc2Yw==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-04-16T18:34:58Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1999-04-16T18:34:58Z"}, "message": "InputStreamReader.java (<init>): Set super.in correctly.\n\n\ufffd\n\t* java/io/InputStreamReader.java (<init>):  Set super.in correctly.\n\t* java/io/OutputStreamWriter.java (<init>):  Set super.in correctly.\n\t(writeChars):  Don't be quite so eager to flush.\n\t* java/io/PrintStream.java:  Rewrite.  Now more similar to\n\tOutputStreamWriter, using explicit UnicodeToBytes converter.\n\tAlso, autoflush does not need to flush so often.\n\t* java/lang/natString.cc (getBytes):  More efficient algorithm.\n \t(init(jbyteArray,jint,jint,jstring)):  More efficient.\n\nFrom-SVN: r26508", "tree": {"sha": "af9a42630599d2dc82750451124788780e12b5a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af9a42630599d2dc82750451124788780e12b5a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a99ce7cae5a040bbf71486ab1472f61ef0ced76c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a99ce7cae5a040bbf71486ab1472f61ef0ced76c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a99ce7cae5a040bbf71486ab1472f61ef0ced76c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a99ce7cae5a040bbf71486ab1472f61ef0ced76c/comments", "author": null, "committer": null, "parents": [{"sha": "78638e240e2d91aa5d0cad91b49e82dae74d6a7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78638e240e2d91aa5d0cad91b49e82dae74d6a7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78638e240e2d91aa5d0cad91b49e82dae74d6a7c"}], "stats": {"total": 79, "additions": 56, "deletions": 23}, "files": [{"sha": "a5984856dfff6e6c01a9ab265b9944fa71fccc4b", "filename": "libjava/java/lang/natString.cc", "status": "modified", "additions": 56, "deletions": 23, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a99ce7cae5a040bbf71486ab1472f61ef0ced76c/libjava%2Fjava%2Flang%2FnatString.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a99ce7cae5a040bbf71486ab1472f61ef0ced76c/libjava%2Fjava%2Flang%2FnatString.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatString.cc?ref=a99ce7cae5a040bbf71486ab1472f61ef0ced76c", "patch": "@@ -24,6 +24,8 @@ details.  */\n #include <java/io/OutputStreamWriter.h>\n #include <java/io/ByteArrayInputStream.h>\n #include <java/io/InputStreamReader.h>\n+#include <gnu/gcj/convert/UnicodeToBytes.h>\n+#include <gnu/gcj/convert/BytesToUnicode.h>\n #include <jvm.h>\n \n static jstring* strhash = NULL;\n@@ -381,21 +383,33 @@ java::lang::String::init (jbyteArray bytes, jint offset, jint count,\n   if (offset < 0 || count < 0 || offset + count < 0\n       || offset + count > data_size)\n     JvThrow (new StringIndexOutOfBoundsException);\n-\n-  java::io::ByteArrayInputStream *b\n-    = new java::io::ByteArrayInputStream (bytes, offset, count);\n-  java::io::InputStreamReader *ir\n-    = new java::io::InputStreamReader (b, encoding);\n-  // FIXME: we allocate too much here in some cases.\n   jcharArray array = JvNewCharArray (count);\n-  data = array;\n-  boffset = (char *) elements (array) - (char *) array;\n-  // FIXME: this can throw IOException.\n-  this->count = ir->read(array, 0, count);\n-\n-  // In case read() doesn't read anything, change -1 for EOF to a count of 0.\n-  if (this->count < 0)\n-    this->count = 0;\n+  gnu::gcj::convert::BytesToUnicode *converter\n+    = gnu::gcj::convert::BytesToUnicode::getDecoder(encoding);\n+  jint outpos = 0;\n+  int avail = count;\n+  converter->setInput(bytes, offset, offset+count);\n+  while (converter->inpos < converter->inlength)\n+    {\n+      int done = converter->read(array, outpos, avail);\n+      if (done == 0)\n+\t{\n+\t  jint new_size = 2 * (outpos + avail);\n+\t  jcharArray new_array = JvNewCharArray (new_size);\n+\t  memcpy (elements (new_array), elements (array),\n+\t\t  outpos * sizeof(jchar));\n+\t  array = new_array;\n+\t  avail = new_size - outpos;\n+\t}\n+      else\n+\t{\n+\t  outpos += done;\n+\t  avail -= done;\n+\t}\n+    }\n+  this->data = array;\n+  this->boffset = (char *) elements (array) - (char *) array;\n+  this->count = outpos;\n }\n \n jboolean\n@@ -448,15 +462,34 @@ java::lang::String::getChars(jint srcBegin, jint srcEnd,\n jbyteArray\n java::lang::String::getBytes (jstring enc)\n {\n-  java::io::ByteArrayOutputStream *os\n-    = new java::io::ByteArrayOutputStream(length ());\n-  java::io::OutputStreamWriter *ow\n-    = new java::io::OutputStreamWriter(os, enc);\n-\n-  ow->write(this, 0, length ());\n-  ow->flush();\n-\n-  return os->toByteArray();\n+  jint todo = length();\n+  jint buflen = todo;\n+  jbyteArray buffer = JvNewByteArray(todo);\n+  jint bufpos = 0;\n+  jint offset = 0;\n+  gnu::gcj::convert::UnicodeToBytes *converter\n+    = gnu::gcj::convert::UnicodeToBytes::getEncoder(enc);\n+  while (todo > 0)\n+    {\n+      converter->setOutput(buffer, bufpos);\n+      int converted = converter->write(this, offset, todo, NULL);\n+      if (converted == 0)\n+\t{\n+\t  jbyteArray newbuffer = JvNewByteArray(2 * buflen);\n+\t  memcpy (elements (newbuffer), elements (buffer), bufpos);\n+\t  buffer = newbuffer;\n+\t}\n+      else\n+\t{\n+\t  offset += converted;\n+\t  todo -= converted;\n+\t}\n+    }\n+  if (bufpos == buflen)\n+    return buffer;\n+  jbyteArray result = JvNewByteArray(bufpos);\n+  memcpy (elements (result), elements (buffer), bufpos);\n+  return result;\n }\n \n void"}]}