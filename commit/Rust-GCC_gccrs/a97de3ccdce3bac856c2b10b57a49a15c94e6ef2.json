{"sha": "a97de3ccdce3bac856c2b10b57a49a15c94e6ef2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk3ZGUzY2NkY2UzYmFjODU2YzJiMTBiNTdhNDlhMTVjOTRlNmVmMg==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2017-12-29T19:25:31Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2017-12-29T19:25:31Z"}, "message": "re PR fortran/83560 (list-directed formatting of INTEGER is missing plus on output when output open with SIGN='PLUS')\n\n2017-12-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n        PR libgfortran/83560\n        * io/write.c (write_integer): Modify to use write_decimal.\n        For namelist mode, suppress leading blanks and emit them as\n        trailing blanks. Change parameter from len to kind for better\n        readability. (nml_write_obj): Fix comment style.\n\nFrom-SVN: r256034", "tree": {"sha": "ebc23eb7b1f0bba3d667758b205b94effcac8d84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebc23eb7b1f0bba3d667758b205b94effcac8d84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a97de3ccdce3bac856c2b10b57a49a15c94e6ef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a97de3ccdce3bac856c2b10b57a49a15c94e6ef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a97de3ccdce3bac856c2b10b57a49a15c94e6ef2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a97de3ccdce3bac856c2b10b57a49a15c94e6ef2/comments", "author": null, "committer": null, "parents": [{"sha": "459e77b859a96bc4dd3cfd53895c8dccfa0de679", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/459e77b859a96bc4dd3cfd53895c8dccfa0de679", "html_url": "https://github.com/Rust-GCC/gccrs/commit/459e77b859a96bc4dd3cfd53895c8dccfa0de679"}], "stats": {"total": 101, "additions": 51, "deletions": 50}, "files": [{"sha": "695f9d34621dcfc42c6a2eeeb4eab8ec7bf12ca0", "filename": "gcc/testsuite/gfortran.dg/integer_plus.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a97de3ccdce3bac856c2b10b57a49a15c94e6ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_plus.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a97de3ccdce3bac856c2b10b57a49a15c94e6ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_plus.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finteger_plus.f90?ref=a97de3ccdce3bac856c2b10b57a49a15c94e6ef2", "patch": "@@ -0,0 +1,12 @@\n+! { dg-run run )\n+! PR83560 list-directed formatting of INTEGER is missing plus on output\n+! when output open with SIGN='PLUS'\n+character(64) :: astring\n+i=789\n+open(unit=10, status='scratch', sign='plus')\n+write(10,*) i\n+rewind(10)\n+read(10,*) astring\n+close (10)\n+if (astring.ne.'+789') call abort\n+end"}, {"sha": "9e5692abe6aa6f38a9358a8597afbe2045db2f31", "filename": "gcc/testsuite/gfortran.dg/namelist_53.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a97de3ccdce3bac856c2b10b57a49a15c94e6ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_53.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a97de3ccdce3bac856c2b10b57a49a15c94e6ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_53.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_53.f90?ref=a97de3ccdce3bac856c2b10b57a49a15c94e6ef2", "patch": "@@ -5,5 +5,5 @@\n   n = 123\n   line = \"\"\n   write(line,nml=stuff)\n-  if (line.ne.\"&STUFF  N=        123,  /\") call abort\n+  if (line.ne.\"&STUFF  N=123        ,  /\") print *, line\n   end "}, {"sha": "a110fa0d840559282cef258f76d35a9cd1041631", "filename": "gcc/testsuite/gfortran.dg/namelist_57.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a97de3ccdce3bac856c2b10b57a49a15c94e6ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_57.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a97de3ccdce3bac856c2b10b57a49a15c94e6ef2/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_57.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_57.f90?ref=a97de3ccdce3bac856c2b10b57a49a15c94e6ef2", "patch": "@@ -7,6 +7,6 @@\n   line = \"\"\n   write(line,nml=stuff)\n   if (line(1) .ne. \"&STUFF\") call abort\n-  if (line(2) .ne. \" N=        123,\") call abort\n+  if (line(2) .ne. \" N=123        ,\") call abort\n   if (line(3) .ne. \" /\") call abort\n   end "}, {"sha": "e94df2c75bd76b802b83ab4ddc007f62b2594925", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a97de3ccdce3bac856c2b10b57a49a15c94e6ef2/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a97de3ccdce3bac856c2b10b57a49a15c94e6ef2/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=a97de3ccdce3bac856c2b10b57a49a15c94e6ef2", "patch": "@@ -1,3 +1,11 @@\n+2017-12-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/83560\n+\t* io/write.c (write_integer): Modify to use write_decimal.\n+\tFor namelist mode, suppress leading blanks and emit them as\n+\ttrailing blanks. Change parameter from len to kind for better\n+\treadability. (nml_write_obj): Fix comment style.\n+\n 2017-12-16  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/81937"}, {"sha": "19e53ebdeb8925c0a724663df79250ee263ce858", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 29, "deletions": 48, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a97de3ccdce3bac856c2b10b57a49a15c94e6ef2/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a97de3ccdce3bac856c2b10b57a49a15c94e6ef2/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=a97de3ccdce3bac856c2b10b57a49a15c94e6ef2", "patch": "@@ -870,8 +870,11 @@ write_decimal (st_parameter_dt *dtp, const fnode *f, const char *source,\n \t  goto done;\n \t}\n \n-      memset4 (p4, ' ', nblank);\n-      p4 += nblank;\n+      if (!dtp->u.p.namelist_mode)\n+\t{\n+\t  memset4 (p4, ' ', nblank);\n+\t  p4 += nblank;\n+\t}\n \n       switch (sign)\n \t{\n@@ -890,6 +893,12 @@ write_decimal (st_parameter_dt *dtp, const fnode *f, const char *source,\n \n       memcpy4 (p4, q, digits);\n       return;\n+\n+      if (dtp->u.p.namelist_mode)\n+\t{\n+\t  p4 += digits;\n+\t  memset4 (p4, ' ', nblank);\n+\t}\n     }\n \n   if (nblank < 0)\n@@ -898,8 +907,11 @@ write_decimal (st_parameter_dt *dtp, const fnode *f, const char *source,\n       goto done;\n     }\n \n-  memset (p, ' ', nblank);\n-  p += nblank;\n+  if (!dtp->u.p.namelist_mode)\n+    {\n+      memset (p, ' ', nblank);\n+      p += nblank;\n+    }\n \n   switch (sign)\n     {\n@@ -918,6 +930,12 @@ write_decimal (st_parameter_dt *dtp, const fnode *f, const char *source,\n \n   memcpy (p, q, digits);\n \n+  if (dtp->u.p.namelist_mode)\n+    {\n+      p += digits;\n+      memset (p, ' ', nblank);\n+    }\n+\n  done:\n   return;\n }\n@@ -1300,17 +1318,12 @@ write_logical (st_parameter_dt *dtp, const char *source, int length)\n /* Write a list-directed integer value.  */\n \n static void\n-write_integer (st_parameter_dt *dtp, const char *source, int length)\n+write_integer (st_parameter_dt *dtp, const char *source, int kind)\n {\n-  char *p;\n-  const char *q;\n-  int digits;\n   int width;\n-  char itoa_buf[GFC_ITOA_BUF_SIZE];\n-\n-  q = gfc_itoa (extract_int (source, length), itoa_buf, sizeof (itoa_buf));\n+  fnode f;\n \n-  switch (length)\n+  switch (kind)\n     {\n     case 1:\n       width = 4;\n@@ -1332,41 +1345,9 @@ write_integer (st_parameter_dt *dtp, const char *source, int length)\n       width = 0;\n       break;\n     }\n-\n-  digits = strlen (q);\n-\n-  if (width < digits)\n-    width = digits;\n-  p = write_block (dtp, width);\n-  if (p == NULL)\n-    return;\n-\n-  if (unlikely (is_char4_unit (dtp)))\n-    {\n-      gfc_char4_t *p4 = (gfc_char4_t *) p;\n-      if (dtp->u.p.no_leading_blank)\n-\t{\n-\t  memcpy4 (p4, q, digits);\n-\t  memset4 (p4 + digits, ' ', width - digits);\n-\t}\n-      else\n-\t{\n-\t  memset4 (p4, ' ', width - digits);\n-\t  memcpy4 (p4 + width - digits, q, digits);\n-\t}\n-      return;\n-    }\n-\n-  if (dtp->u.p.no_leading_blank)\n-    {\n-      memcpy (p, q, digits);\n-      memset (p + digits, ' ', width - digits);\n-    }\n-  else\n-    {\n-      memset (p, ' ', width - digits);\n-      memcpy (p + width - digits, q, digits);\n-    }\n+  f.u.integer.w = width;\n+  f.u.integer.m = -1;\n+  write_decimal (dtp, &f, source, kind, (void *) gfc_itoa);\n }\n \n \n@@ -2254,7 +2235,7 @@ nml_write_obj (st_parameter_dt *dtp, namelist_info *obj, index_type offset,\n \t\t  dtp->u.p.current_unit->child_dtio++;\n \t\t  if (obj->type == BT_DERIVED)\n \t\t    {\n-\t\t      // build a class container\n+\t\t      /* Build a class container.  */\n \t\t      gfc_class list_obj;\n \t\t      list_obj.data = p;\n \t\t      list_obj.vptr = obj->vtable;"}]}