{"sha": "8006eaa65647718c378ea8c97c47908c9b2e34c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAwNmVhYTY1NjQ3NzE4YzM3OGVhOGM5N2M0NzkwOGM5YjJlMzRjNQ==", "commit": {"author": {"name": "Adrian Straetling", "email": "straetling@de.ibm.com", "date": "2005-10-04T18:07:28Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-10-04T18:07:28Z"}, "message": "s390.md (\"TDSI\",\"DP\"): New mode macros.\n\n2005-10-04  Adrian Straetling  <straetling@de.ibm.com>\n\n\t* config/s390/s390.md (\"TDSI\",\"DP\"): New mode macros.\n\t(\"TE\",\"tg\"): New mode attributes.\n\t(\"sync_compare_and_swap<mode>\"): Replace with a define_expand.\n\t(\"sync_compare_and_swap<mode>_cc\"): Replace GPR with TDSI.\n\t(\"*sync_compare_and_swap<mode>_cc\"): Replace with one pattern for\n\tdword_mode and one for GPRmode.\n\nFrom-SVN: r104952", "tree": {"sha": "f60cea704c6338d6e2bba5330a107945ed5b795a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f60cea704c6338d6e2bba5330a107945ed5b795a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8006eaa65647718c378ea8c97c47908c9b2e34c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8006eaa65647718c378ea8c97c47908c9b2e34c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8006eaa65647718c378ea8c97c47908c9b2e34c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8006eaa65647718c378ea8c97c47908c9b2e34c5/comments", "author": null, "committer": null, "parents": [{"sha": "cbc43ae091a468f438f851e454ac4454bb89f476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc43ae091a468f438f851e454ac4454bb89f476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbc43ae091a468f438f851e454ac4454bb89f476"}], "stats": {"total": 78, "additions": 58, "deletions": 20}, "files": [{"sha": "f627c97eb118937906c5b388dd10d3f91fddb7a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8006eaa65647718c378ea8c97c47908c9b2e34c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8006eaa65647718c378ea8c97c47908c9b2e34c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8006eaa65647718c378ea8c97c47908c9b2e34c5", "patch": "@@ -1,3 +1,12 @@\n+2005-10-04  Adrian Straetling  <straetling@de.ibm.com>\n+\n+\t* config/s390/s390.md (\"TDSI\",\"DP\"): New mode macros.\n+\t(\"TE\",\"tg\"): New mode attributes.\n+\t(\"sync_compare_and_swap<mode>\"): Replace with a define_expand.\n+\t(\"sync_compare_and_swap<mode>_cc\"): Replace GPR with TDSI.\n+\t(\"*sync_compare_and_swap<mode>_cc\"): Replace with one pattern for\n+\tdword_mode and one for GPRmode.\n+\n 2005-10-04  Ian Lance Taylor  <ian@airs.com>\n \n \tPR preprocessor/13726"}, {"sha": "514b6a7ab24b4c3ad49e0dfc7a2b89f23aa99354", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 49, "deletions": 20, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8006eaa65647718c378ea8c97c47908c9b2e34c5/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8006eaa65647718c378ea8c97c47908c9b2e34c5/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=8006eaa65647718c378ea8c97c47908c9b2e34c5", "patch": "@@ -278,13 +278,18 @@\n ;; same template.\n (define_mode_macro FPR     [DF SF])\n \n+;; These mode macros allow 31-bit and 64-bit TDSI patterns to be generated\n+;; from the same template.\n+(define_mode_macro TDSI [(TI \"TARGET_64BIT\") DI SI])\n+\n ;; These mode macros allow 31-bit and 64-bit GPR patterns to be generated\n ;; from the same template.\n (define_mode_macro GPR [(DI \"TARGET_64BIT\") SI])\n (define_mode_macro DSI [DI SI])\n \n ;; This mode macro allows :P to be used for patterns that operate on\n ;; pointer-sized quantities.  Exactly one of the two alternatives will match.\n+(define_mode_macro DP  [(TI \"TARGET_64BIT\") (DI \"!TARGET_64BIT\")])\n (define_mode_macro P [(DI \"TARGET_64BIT\") (SI \"!TARGET_64BIT\")])\n \n ;; This mode macro allows the QI and HI patterns to be defined from\n@@ -327,10 +332,18 @@\n ;; in \"RRE\" for DImode and \"RR\" for SImode.\n (define_mode_attr E [(DI \"E\") (SI \"\")])\n \n+;; This attribute handles differences in the instruction 'type' and will result\n+;; in \"RSE\" for TImode and \"RS\" for DImode.\n+(define_mode_attr TE [(TI \"E\") (DI \"\")])\n+\n ;; In GPR templates, a string like \"lc<g>r\" will expand to \"lcgr\" in DImode\n ;; and \"lcr\" in SImode.\n (define_mode_attr g [(DI \"g\") (SI \"\")])\n \n+;; In DP templates, a string like \"cds<g>\" will expand to \"cdsg\" in TImode\n+;; and \"cds\" in DImode.\n+(define_mode_attr tg [(TI \"g\") (DI \"\")])\n+\n ;; In GPR templates, a string like \"c<gf>dbr\" will expand to \"cgdbr\" in DImode\n ;; and \"cfdbr\" in SImode.\n (define_mode_attr gf [(DI \"g\") (SI \"f\")])\n@@ -7130,42 +7143,58 @@\n ; compare and swap patterns.\n ;\n \n-(define_insn \"sync_compare_and_swap<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n-        (match_operand:GPR 1 \"memory_operand\" \"+Q\"))\n-   (set (match_dup 1)\n-\t(unspec_volatile:GPR\n-\t  [(match_dup 1)\n-\t   (match_operand:GPR 2 \"register_operand\" \"0\")\n-\t   (match_operand:GPR 3 \"register_operand\" \"r\")]\n-\t  UNSPECV_CAS))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"\"\n-  \"cs<g>\\t%0,%3,%S1\"\n-  [(set_attr \"op_type\" \"RS<E>\")\n-   (set_attr \"type\"   \"sem\")])\n+(define_expand \"sync_compare_and_swap<mode>\"\n+  [(parallel\n+    [(set (match_operand:TDSI 0 \"register_operand\" \"\")\n+\t  (match_operand:TDSI 1 \"memory_operand\" \"\"))\n+     (set (match_dup 1)\n+\t  (unspec_volatile:TDSI\n+\t    [(match_dup 1)\n+\t     (match_operand:TDSI 2 \"register_operand\" \"\")\n+\t     (match_operand:TDSI 3 \"register_operand\" \"\")]\n+\t    UNSPECV_CAS))\n+     (set (reg:CCZ1 CC_REGNUM)\n+\t  (compare:CCZ1 (match_dup 1) (match_dup 2)))])]\n+  \"\")\n \n (define_expand \"sync_compare_and_swap_cc<mode>\"\n   [(parallel\n-    [(set (match_operand:GPR 0 \"register_operand\" \"\")\n-          (match_operand:GPR 1 \"memory_operand\" \"\"))\n+    [(set (match_operand:TDSI 0 \"register_operand\" \"\")\n+\t  (match_operand:TDSI 1 \"memory_operand\" \"\"))\n      (set (match_dup 1)\n-\t  (unspec_volatile:GPR\n+\t  (unspec_volatile:TDSI\n \t    [(match_dup 1)\n-\t     (match_operand:GPR 2 \"register_operand\" \"\")\n-\t     (match_operand:GPR 3 \"register_operand\" \"\")]\n+\t     (match_operand:TDSI 2 \"register_operand\" \"\")\n+\t     (match_operand:TDSI 3 \"register_operand\" \"\")]\n \t    UNSPECV_CAS))\n      (set (match_dup 4)\n \t  (compare:CCZ1 (match_dup 1) (match_dup 2)))])]\n   \"\"\n {\n+  /* Emulate compare.  */\n   operands[4] = gen_rtx_REG (CCZ1mode, CC_REGNUM);\n   s390_compare_op0 = operands[1];\n   s390_compare_op1 = operands[2];\n   s390_compare_emitted = operands[4];\n })\n \n-(define_insn \"*sync_compare_and_swap_cc<mode>\"\n+(define_insn \"*sync_compare_and_swap<mode>\"\n+  [(set (match_operand:DP 0 \"register_operand\" \"=r\")\n+\t(match_operand:DP 1 \"memory_operand\" \"+Q\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:DP\n+\t  [(match_dup 1)\n+\t   (match_operand:DP 2 \"register_operand\" \"0\")\n+\t   (match_operand:DP 3 \"register_operand\" \"r\")]\n+\t  UNSPECV_CAS))\n+   (set (reg:CCZ1 CC_REGNUM)\n+\t(compare:CCZ1 (match_dup 1) (match_dup 2)))]\n+  \"\"\n+  \"cds<tg>\\t%0,%3,%S1\"\n+  [(set_attr \"op_type\" \"RS<TE>\")\n+   (set_attr \"type\"   \"sem\")])\n+\n+(define_insn \"*sync_compare_and_swap<mode>\"\n   [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n \t(match_operand:GPR 1 \"memory_operand\" \"+Q\"))\n    (set (match_dup 1)"}]}