{"sha": "72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI2MTJlNGU5ZTBlYjVkZDdkN2NiMGZjNTUxNzBjZGI3MDI2YTk1Mg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-03-24T14:01:54Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-03-24T14:01:54Z"}, "message": "S/390: arch12: Add vllezlf instruction.\n\nThis adds support for the vector load element and zero instruction and\nmakes sure it is used when initializing vectors with elements while\nsetting the rest to 0.\n\ngcc/ChangeLog:\n\n2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390.c (s390_expand_vec_init): Use vllezl\n\tinstruction if possible.\n\t* config/s390/vector.md (vec_halfnumelts): New mode\n\tattribute.\n\t(\"*vec_vllezlf<mode>\"): New pattern.\n\ngcc/testsuite/ChangeLog:\n\n2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/vxe/vllezlf-1.c: New test.\n\nFrom-SVN: r246455", "tree": {"sha": "5329e1fc551da9e003eb34ffe96282597a13ca29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5329e1fc551da9e003eb34ffe96282597a13ca29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952/comments", "author": null, "committer": null, "parents": [{"sha": "6c7774d15e15fab2314593a74a85e742cd147647", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7774d15e15fab2314593a74a85e742cd147647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c7774d15e15fab2314593a74a85e742cd147647"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "8f742aafff101ab4e13544bc99850f4a297ae39f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952", "patch": "@@ -1,3 +1,11 @@\n+2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.c (s390_expand_vec_init): Use vllezl\n+\tinstruction if possible.\n+\t* config/s390/vector.md (vec_halfnumelts): New mode\n+\tattribute.\n+\t(\"*vec_vllezlf<mode>\"): New pattern.\n+\n 2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/vector.md (\"popcountv16qi2\", \"popcountv8hi2\")"}, {"sha": "e8003233165387c37b0a7a0ad760130581b3ca03", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952", "patch": "@@ -6552,6 +6552,34 @@ s390_expand_vec_init (rtx target, rtx vals)\n       return;\n     }\n \n+  /* Use vector load logical element and zero.  */\n+  if (TARGET_VXE && (mode == V4SImode || mode == V4SFmode))\n+    {\n+      bool found = true;\n+\n+      x = XVECEXP (vals, 0, 0);\n+      if (memory_operand (x, inner_mode))\n+\t{\n+\t  for (i = 1; i < n_elts; ++i)\n+\t    found = found && XVECEXP (vals, 0, i) == const0_rtx;\n+\n+\t  if (found)\n+\t    {\n+\t      machine_mode half_mode = (inner_mode == SFmode\n+\t\t\t\t\t? V2SFmode : V2SImode);\n+\t      emit_insn (gen_rtx_SET (target,\n+\t\t\t      gen_rtx_VEC_CONCAT (mode,\n+\t\t\t\t\t\t  gen_rtx_VEC_CONCAT (half_mode,\n+\t\t\t\t\t\t\t\t      x,\n+\t\t\t\t\t\t\t\t      const0_rtx),\n+\t\t\t\t\t\t  gen_rtx_VEC_CONCAT (half_mode,\n+\t\t\t\t\t\t\t\t      const0_rtx,\n+\t\t\t\t\t\t\t\t      const0_rtx))));\n+\t      return;\n+\t    }\n+\t}\n+    }\n+\n   /* We are about to set the vector elements one by one.  Zero out the\n      full register first in order to help the data flow framework to\n      detect it as full VR set.  */"}, {"sha": "6a726a30e30fd95180dbb34c45fe51ca468b65f5", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952", "patch": "@@ -44,6 +44,7 @@\n (define_mode_iterator VI_HW_HSD [V8HI  V4SI V2DI])\n (define_mode_iterator VI_HW_HS  [V8HI  V4SI])\n (define_mode_iterator VI_HW_QH  [V16QI V8HI])\n+(define_mode_iterator VI_HW_4   [V4SI V4SF])\n \n ; All integer vector modes supported in a vector register + TImode\n (define_mode_iterator VIT [V1QI V2QI V4QI V8QI V16QI V1HI V2HI V4HI V8HI V1SI V2SI V4SI V1DI V2DI V1TI TI])\n@@ -127,6 +128,9 @@\n    (V2DI \"V2SI\")\n    (V2DF \"V2SF\")])\n \n+(define_mode_attr vec_halfnumelts\n+  [(V4SF \"V2SF\") (V4SI \"V2SI\")])\n+\n ; The comparisons not setting CC iterate over the rtx code.\n (define_code_iterator VFCMP_HW_OP [eq gt ge])\n (define_code_attr asm_fcmp_op [(eq \"e\") (gt \"h\") (ge \"he\")])\n@@ -451,6 +455,19 @@\n   DONE;\n })\n \n+(define_insn \"*vec_vllezlf<mode>\"\n+  [(set (match_operand:VI_HW_4              0 \"register_operand\" \"=v\")\n+\t(vec_concat:VI_HW_4\n+\t (vec_concat:<vec_halfnumelts>\n+\t  (match_operand:<non_vec> 1 \"memory_operand\"    \"R\")\n+\t  (const_int 0))\n+\t (vec_concat:<vec_halfnumelts>\n+\t  (const_int 0)\n+\t  (const_int 0))))]\n+  \"TARGET_VXE\"\n+  \"vllezlf\\t%v0,%1\"\n+  [(set_attr \"op_type\" \"VRX\")])\n+\n ; Replicate from vector element\n ; vrepb, vreph, vrepf, vrepg\n (define_insn \"*vec_splat<mode>\""}, {"sha": "4405d367e77699f4c1a9bace8f8658218bed771a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952", "patch": "@@ -1,3 +1,7 @@\n+2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/vxe/vllezlf-1.c: New test.\n+\n 2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/vxe/popcount-1.c: New test."}, {"sha": "14ea4f7e40820d34d86473a949c8b7c82b17b5af", "filename": "gcc/testsuite/gcc.target/s390/vxe/vllezlf-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvxe%2Fvllezlf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvxe%2Fvllezlf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvxe%2Fvllezlf-1.c?ref=72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952", "patch": "@@ -0,0 +1,30 @@\n+/* Make sure the vector load and zero instruction is being used for\n+   initializing a 32 bit vector with the first element taken from\n+   memory.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -mzarch -march=arch12 --save-temps\" } */\n+/* { dg-require-effective-target s390_vxe } */\n+\n+typedef unsigned int       uv4si __attribute__((vector_size(16)));\n+\n+uv4si __attribute__((noinline))\n+foo (int *a)\n+{\n+  return (uv4si){ *a, 0, 0, 0 };\n+}\n+\n+int\n+main ()\n+{\n+  int b = 4;\n+  uv4si a = (uv4si){ 1, 2, 3, 4 };\n+\n+  a = foo (&b);\n+\n+  if (a[0] != 4 || a[1] != 0 || a[2] != 0 || a[3] != 0)\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+/* { dg-final { scan-assembler-times \"vllezlf\\t%v24,0\\\\(%r2\\\\)\" 1 } } */"}]}