{"sha": "89ac11d833317faa6c74bee89ddbe18ae93fe272", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlhYzExZDgzMzMxN2ZhYTZjNzRiZWU4OWRkYmUxOGFlOTNmZTI3Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-21T15:46:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-21T15:46:25Z"}, "message": "re PR target/53399 (\"*ffs\" pattern generates wrong code with BMI enabled)\n\n\tPR target/53399\n\t* config/i386/i386.md (ffs<mode>2): Generate CCCmode compare\n\tfor TARGET_BMI.\n\t(ffssi2_no_cmove): Ditto.\n\t(*ffs<mode>_1): Remove insn pattern.\n\t(*tzcnt<mode>_1): New insn pattern.\n\t(*bsf<mode>1): Ditto.\n\nFrom-SVN: r187722", "tree": {"sha": "c9d5c232390be3b1203c79f171d2c205e2aa3cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9d5c232390be3b1203c79f171d2c205e2aa3cd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89ac11d833317faa6c74bee89ddbe18ae93fe272", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ac11d833317faa6c74bee89ddbe18ae93fe272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89ac11d833317faa6c74bee89ddbe18ae93fe272", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ac11d833317faa6c74bee89ddbe18ae93fe272/comments", "author": null, "committer": null, "parents": [{"sha": "94ccc95d412bb6a8765737ad153a780bc03d6294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ccc95d412bb6a8765737ad153a780bc03d6294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ccc95d412bb6a8765737ad153a780bc03d6294"}], "stats": {"total": 106, "additions": 60, "deletions": 46}, "files": [{"sha": "dc7b1cd9d164af642710394d69d856cc21c73512", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ac11d833317faa6c74bee89ddbe18ae93fe272/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ac11d833317faa6c74bee89ddbe18ae93fe272/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89ac11d833317faa6c74bee89ddbe18ae93fe272", "patch": "@@ -1,3 +1,13 @@\n+2012-05-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/53399\n+\t* config/i386/i386.md (ffs<mode>2): Generate CCCmode compare\n+\tfor TARGET_BMI.\n+\t(ffssi2_no_cmove): Ditto.\n+\t(*ffs<mode>_1): Remove insn pattern.\n+\t(*tzcnt<mode>_1): New insn pattern.\n+\t(*bsf<mode>1): Ditto.\n+\n 2012-05-21  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-dfa.c (add_referenced_var): Do not walk DECL_INITIAL for\n@@ -70,7 +80,7 @@\n \n 2012-05-21  Razya Ladelsky  <razya@il.ibm.com>\n \n-\t* tree-parloops.c : Add myself to contributors, update \n+\t* tree-parloops.c : Add myself to contributors, update\n \tTODO list, add link to wiki.\n \n 2012-05-21  Alan Modra  <amodra@gmail.com>\n@@ -126,8 +136,9 @@\n \tcall_val_symref_64bit, call_val_reg_pic, call_val_reg_64bit): Likewise.\n \n 2012-05-20  Razya Ladelsky  <razya@il.ibm.com>\n-\t\n-\t* tree-parloops.c (gen_parallel_loop): Change many_iterations_cond for outer loops.\n+\n+\t* tree-parloops.c (gen_parallel_loop): Change many_iterations_cond\n+\tfor outer loops.\n \n 2012-05-18  Jan Hubicka  <jh@suse.cz>\n \n@@ -145,7 +156,8 @@\n \n 2012-05-18  Jan Hubicka  <jh@suse.cz>\n \n-\t* cgraphunit.c (handle_alias_pairs): Cleanup; handle all types of aliases.\n+\t* cgraphunit.c (handle_alias_pairs): Cleanup; handle all types of\n+\taliases.\n \n 2012-05-18  Jan Hubicka  <jh@suse.cz>\n \n@@ -205,15 +217,13 @@\n \n \t* cgraphunit.c (varpool_finalize_decl): Allow external decls.\n \t(mark_functions_to_output): Fix sanity check.\n-\t* ipa.c (function_and_variable_visibility): Remove TREE_STATIC\n-\tcheck.\n+\t* ipa.c (function_and_variable_visibility): Remove TREE_STATIC check.\n \n 2012-05-18  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-flow.h (mark_symbols_for_renaming): Remove.\n \t* tree-dfa.c (mark_symbols_for_renaming): Likewise.\n-\t* tree-inline.c (copy_edges_for_bb): Do not mark symbols for\n-\trenaming.\n+\t* tree-inline.c (copy_edges_for_bb): Do not mark symbols for renaming.\n \t(copy_debug_stmt): Likewise.\n \t(expand_call_inline): Likewise.\n \t(declare_return_variable): Mark the return variable for renaming\n@@ -248,13 +258,14 @@\n \n 2012-05-17  Jan Hubicka  <jh@suse.cz>\n \n-\t* lto-symtab.c (lto_symtab_resolve_symbols): Preffer decl with constructor\n-\tover decl without.\n+\t* lto-symtab.c (lto_symtab_resolve_symbols): Preffer decl with\n+\tconstructor over decl without.\n \t* cgraph.c (cgraph_remove_node): Clear also body of unanalyzed nodes.\n \t* cgraph.h (varpool_can_remove_if_no_refs): Handle external correctly.\n-\t* cgraphunit.c (process_function_and_variable_attributes): Finalize \n+\t* cgraphunit.c (process_function_and_variable_attributes): Finalize\n \textrnal decls.\n-\t(mark_functions_to_output): Also accept bodies for functions with clones.\n+\t(mark_functions_to_output): Also accept bodies for functions with\n+\tclones.\n \t(output_in_order): Skip external vars.\n \t* lto-cgraph.c (lto_output_node): External functions are never in other\n \tpartition.\n@@ -287,8 +298,7 @@\n \n 2012-05-17  Kwok Cheung Yeung  <kcy@codesourcery.com>\n \n-\t* config/m68k/m68k-devices.def: Add 51ag, 51je, 51jf, 51jg, 51mm,\n-\t51qm.\n+\t* config/m68k/m68k-devices.def: Add 51ag, 51je, 51jf, 51jg, 51mm, 51qm.\n \t* config/m68k/m68k-tables.opt: Regenerated.\n \t* doc/invoke.texi (M680x0 Options): Document.\n \n@@ -468,7 +478,7 @@\n \n 2012-05-15  Tristan Gingold  <gingold@adacore.com>\n \n-      * tree-ssa-strlen.c (get_string_length): Convert lhs if needed.\n+\t* tree-ssa-strlen.c (get_string_length): Convert lhs if needed.\n \n 2012-05-15  Richard Guenther  <rguenther@suse.de>\n \n@@ -496,8 +506,7 @@\n \n 2012-05-15  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \n-\t* doc/md.texi (fma): Define to only be applicable for single\n-\trounding.\n+\t* doc/md.texi (fma): Define to only be applicable for single rounding.\n \n 2012-05-14  Uros Bizjak  <ubizjak@gmail.com>\n \n@@ -552,7 +561,7 @@\n \t* config/avr/avr.c (avr_const_address_lo16): Remove.\n \t(avr_assemble_integer):  Print \".byte lo8(x)\",\n \t\".byte hi8(x)\", \".byte hh8(x)\" instead of emit an assembler\n-\t.warning if 3-byte address is assembled. \n+\t.warning if 3-byte address is assembled.\n \t* doc/extend.texi (AVR Named Address Spaces): Document that\n \tbinutils 2.23 is needed to assemble 3-byte addresses.\n "}, {"sha": "a2e6a52a8b60a10965ba4be58397cd01dacb65a5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ac11d833317faa6c74bee89ddbe18ae93fe272/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ac11d833317faa6c74bee89ddbe18ae93fe272/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=89ac11d833317faa6c74bee89ddbe18ae93fe272", "patch": "@@ -12132,26 +12132,31 @@\n \n (define_expand \"ffs<mode>2\"\n   [(set (match_dup 2) (const_int -1))\n-   (parallel [(set (reg:CCZ FLAGS_REG)\n-\t\t   (compare:CCZ\n-\t\t     (match_operand:SWI48 1 \"nonimmediate_operand\")\n-\t\t     (const_int 0)))\n+   (parallel [(set (match_dup 3) (match_dup 4))\n \t      (set (match_operand:SWI48 0 \"register_operand\")\n-\t\t   (ctz:SWI48 (match_dup 1)))])\n+\t\t   (ctz:SWI48\n+\t\t     (match_operand:SWI48 1 \"nonimmediate_operand\")))])\n    (set (match_dup 0) (if_then_else:SWI48\n-\t\t\t(eq (reg:CCZ FLAGS_REG) (const_int 0))\n+\t\t\t(eq (match_dup 3) (const_int 0))\n \t\t\t(match_dup 2)\n \t\t\t(match_dup 0)))\n    (parallel [(set (match_dup 0) (plus:SWI48 (match_dup 0) (const_int 1)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"\"\n {\n+  enum machine_mode flags_mode;\n+\n   if (<MODE>mode == SImode && !TARGET_CMOVE)\n     {\n       emit_insn (gen_ffssi2_no_cmove (operands[0], operands [1]));\n       DONE;\n     }\n+\n+  flags_mode = TARGET_BMI ? CCCmode : CCZmode;\n+\n   operands[2] = gen_reg_rtx (<MODE>mode);\n+  operands[3] = gen_rtx_REG (flags_mode, FLAGS_REG);\n+  operands[4] = gen_rtx_COMPARE (flags_mode, operands[1], const0_rtx);\n })\n \n (define_insn_and_split \"ffssi2_no_cmove\"\n@@ -12162,49 +12167,49 @@\n   \"!TARGET_CMOVE\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(parallel [(set (reg:CCZ FLAGS_REG)\n-\t\t   (compare:CCZ (match_dup 1) (const_int 0)))\n+  [(parallel [(set (match_dup 4) (match_dup 5))\n \t      (set (match_dup 0) (ctz:SI (match_dup 1)))])\n    (set (strict_low_part (match_dup 3))\n-\t(eq:QI (reg:CCZ FLAGS_REG) (const_int 0)))\n+\t(eq:QI (match_dup 4) (const_int 0)))\n    (parallel [(set (match_dup 2) (neg:SI (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])\n    (parallel [(set (match_dup 0) (ior:SI (match_dup 0) (match_dup 2)))\n \t      (clobber (reg:CC FLAGS_REG))])\n    (parallel [(set (match_dup 0) (plus:SI (match_dup 0) (const_int 1)))\n \t      (clobber (reg:CC FLAGS_REG))])]\n {\n+  enum machine_mode flags_mode = TARGET_BMI ? CCCmode : CCZmode;\n+\n   operands[3] = gen_lowpart (QImode, operands[2]);\n+  operands[4] = gen_rtx_REG (flags_mode, FLAGS_REG);\n+  operands[5] = gen_rtx_COMPARE (flags_mode, operands[1], const0_rtx);\n+\n   ix86_expand_clear (operands[2]);\n })\n \n-(define_insn \"*ffs<mode>_1\"\n+(define_insn \"*tzcnt<mode>_1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(compare:CCC (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+\t\t     (const_int 0)))\n+   (set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(ctz:SWI48 (match_dup 1)))]\n+  \"TARGET_BMI\"\n+  \"tzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"alu1\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"prefix_rep\" \"1\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*bsf<mode>_1\"\n   [(set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n \t\t     (const_int 0)))\n    (set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(ctz:SWI48 (match_dup 1)))]\n   \"\"\n-{\n-  if (TARGET_BMI)\n-    return \"tzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n-  else if (optimize_function_for_size_p (cfun))\n-    ;\n-  else if (TARGET_GENERIC)\n-    /* tzcnt expands to rep;bsf and we can use it even if !TARGET_BMI.  */\n-    return \"rep; bsf{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n-\n-  return \"bsf{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n-}\n+  \"bsf{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n-   (set (attr \"prefix_rep\")\n-     (if_then_else\n-       (ior (match_test \"TARGET_BMI\")\n-\t    (and (not (match_test \"optimize_function_for_size_p (cfun)\"))\n-\t\t (match_test \"TARGET_GENERIC\")))\n-       (const_string \"1\")\n-       (const_string \"0\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"ctz<mode>2\""}]}