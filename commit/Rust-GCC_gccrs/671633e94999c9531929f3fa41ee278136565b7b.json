{"sha": "671633e94999c9531929f3fa41ee278136565b7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcxNjMzZTk0OTk5Yzk1MzE5MjlmM2ZhNDFlZTI3ODEzNjU2NWI3Yg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2007-10-19T19:01:58Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2007-10-19T19:01:58Z"}, "message": "re PR tree-optimization/23820 (ICE in lambda_loopnest_to_gcc_loopnest, at lambda-code.c:1982)\n\n2007-10-19  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR tree-optimization/23820\n\tPR tree-optimization/24309\n\tPR tree-optimization/33766\n\t* testsuite/gcc.dg/tree-ssa/pr23820.c: New.\n\t* testsuite/gcc.dg/tree-ssa/pr24309.c: New.\n\t* testsuite/gcc.dg/tree-ssa/pr33766.c: New.\n\t* testsuite/gcc.dg/tree-ssa/ltrans-3.c: XFAILed.\n\t* tree-loop-linear.c (perfect_loop_nest_depth): New.\n\t(linear_transform_loops): Use perfect_loop_nest_depth.\n\t* lambda-code.c (perfect_nest_p): Outer loops in perfect nests \n\tshould have a single condition: their exit.\n\nFrom-SVN: r129494", "tree": {"sha": "65725d390db5c25a995bac2ec0111aaf66e74f84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65725d390db5c25a995bac2ec0111aaf66e74f84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/671633e94999c9531929f3fa41ee278136565b7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/671633e94999c9531929f3fa41ee278136565b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/671633e94999c9531929f3fa41ee278136565b7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/671633e94999c9531929f3fa41ee278136565b7b/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23e8722aedfa0fbde8325a8bc5ca3394ff03d13d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e8722aedfa0fbde8325a8bc5ca3394ff03d13d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23e8722aedfa0fbde8325a8bc5ca3394ff03d13d"}], "stats": {"total": 172, "additions": 135, "deletions": 37}, "files": [{"sha": "57d7f6febf8a9dd5c350b58df5c085202c0074ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671633e94999c9531929f3fa41ee278136565b7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671633e94999c9531929f3fa41ee278136565b7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=671633e94999c9531929f3fa41ee278136565b7b", "patch": "@@ -1,3 +1,17 @@\n+2007-10-19  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR tree-optimization/23820\n+\tPR tree-optimization/24309\n+\tPR tree-optimization/33766\n+\t* testsuite/gcc.dg/tree-ssa/pr23820.c: New.\n+\t* testsuite/gcc.dg/tree-ssa/pr24309.c: New.\n+\t* testsuite/gcc.dg/tree-ssa/pr33766.c: New.\n+\t* testsuite/gcc.dg/tree-ssa/ltrans-3.c: XFAILed.\n+\t* tree-loop-linear.c (perfect_loop_nest_depth): New.\n+\t(linear_transform_loops): Use perfect_loop_nest_depth.\n+\t* lambda-code.c (perfect_nest_p): Outer loops in perfect nests \n+\tshould have a single condition: their exit.\n+\n 2007-10-19  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/33816"}, {"sha": "db92bc9e2e4cc61d802945e24341c0e6f984ba13", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671633e94999c9531929f3fa41ee278136565b7b/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671633e94999c9531929f3fa41ee278136565b7b/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=671633e94999c9531929f3fa41ee278136565b7b", "patch": "@@ -1972,32 +1972,42 @@ perfect_nest_p (struct loop *loop)\n   size_t i;\n   tree exit_cond;\n \n+  /* Loops at depth 0 are perfect nests.  */\n   if (!loop->inner)\n     return true;\n+\n   bbs = get_loop_body (loop);\n   exit_cond = get_loop_exit_condition (loop);\n+\n   for (i = 0; i < loop->num_nodes; i++)\n     {\n       if (bbs[i]->loop_father == loop)\n \t{\n \t  block_stmt_iterator bsi;\n+\n \t  for (bsi = bsi_start (bbs[i]); !bsi_end_p (bsi); bsi_next (&bsi))\n \t    {\n \t      tree stmt = bsi_stmt (bsi);\n+\n+\t      if (TREE_CODE (stmt) == COND_EXPR\n+\t\t  && exit_cond != stmt)\n+\t\tgoto non_perfectly_nested;\n+\n \t      if (stmt == exit_cond\n \t\t  || not_interesting_stmt (stmt)\n \t\t  || stmt_is_bumper_for_loop (loop, stmt))\n \t\tcontinue;\n+\n+\t    non_perfectly_nested:\n \t      free (bbs);\n \t      return false;\n \t    }\n \t}\n     }\n+\n   free (bbs);\n-  /* See if the inner loops are perfectly nested as well.  */\n-  if (loop->inner)    \n-    return perfect_nest_p (loop->inner);\n-  return true;\n+\n+  return perfect_nest_p (loop->inner);\n }\n \n /* Replace the USES of X in STMT, or uses with the same step as X with Y."}, {"sha": "5f2f5ca13343c2858a77f04508af0adfc530c4f4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ltrans-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671633e94999c9531929f3fa41ee278136565b7b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671633e94999c9531929f3fa41ee278136565b7b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fltrans-3.c?ref=671633e94999c9531929f3fa41ee278136565b7b", "patch": "@@ -17,5 +17,5 @@ int foo(int N, int *res)\n       *res = sum + N;\n }\n \n-/* { dg-final { scan-tree-dump-times \"transformed loop\" 1 \"ltrans\"} } */ \n+/* { dg-final { scan-tree-dump-times \"transformed loop\" 1 \"ltrans\" { xfail *-*-* } } } */ \n /* { dg-final { cleanup-tree-dump \"ltrans\" } } */"}, {"sha": "ee855e139418b5fd7faff3553789599b1fca0438", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23820.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671633e94999c9531929f3fa41ee278136565b7b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23820.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671633e94999c9531929f3fa41ee278136565b7b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23820.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23820.c?ref=671633e94999c9531929f3fa41ee278136565b7b", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-loop-linear\" } */\n+\n+int t [2][4];\n+\n+void foo (void)\n+{\n+  int i, j, k, v;\n+  float e;\n+  for (;;)\n+    {\n+      v = 0;\n+      for (j = 0; j < 2; j ++)\n+        {\n+          for (k = 2; k < 4; k ++)\n+            {\n+              e = 0.0;\n+              for (i = 0; i < 4; i ++)\n+                e += t [j][i];\n+              if (e)\n+                v = j;\n+            }\n+        }\n+      t [v][0] = 0;\n+    }\n+}"}, {"sha": "b50e7a8ca7a17a92c517a355cb0ca4f477a59a24", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr24309.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671633e94999c9531929f3fa41ee278136565b7b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr24309.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671633e94999c9531929f3fa41ee278136565b7b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr24309.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr24309.c?ref=671633e94999c9531929f3fa41ee278136565b7b", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-loop-linear\" } */\n+\n+float weight[10];\n+void lsp_weight_quant(float *x, char *cdbk)\n+{\n+   int i,j;\n+   float dist;\n+   int best_id=0;\n+   for (i=0;i<16;i++)\n+   {\n+      for (j=0;j<10;j++)\n+         dist=dist+weight[j];\n+      if (dist<0)\n+         best_id=i;\n+   }\n+   x[j] = cdbk[best_id*10+j];\n+}"}, {"sha": "f6bb50615a0e78184a49c9190fd59b91f0f8367a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr33766.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671633e94999c9531929f3fa41ee278136565b7b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33766.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671633e94999c9531929f3fa41ee278136565b7b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33766.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr33766.c?ref=671633e94999c9531929f3fa41ee278136565b7b", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-loop-linear\" } */\n+\n+float\n+fxt1_quantize_ALPHA1()\n+{\n+        int j1;\n+        int i;\n+        float *tv;\n+        for (j1 = 1; j1; j1++) {\n+                float e;\n+                for (i = 1; i; i++)\n+                        e = tv[i];\n+                if (e)\n+                        i = j1;\n+        }\n+        return tv[i];\n+}\n+"}, {"sha": "88a77dd228ce31fb822e7759efa48609f3b5030b", "filename": "gcc/tree-loop-linear.c", "status": "modified", "additions": 43, "deletions": 32, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/671633e94999c9531929f3fa41ee278136565b7b/gcc%2Ftree-loop-linear.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/671633e94999c9531929f3fa41ee278136565b7b/gcc%2Ftree-loop-linear.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-linear.c?ref=671633e94999c9531929f3fa41ee278136565b7b", "patch": "@@ -244,6 +244,46 @@ try_interchange_loops (lambda_trans_matrix trans,\n   return trans;\n }\n \n+/* Return the number of nested loops in LOOP_NEST, or 0 if the loops\n+   are not perfectly nested.  */\n+\n+static unsigned int\n+perfect_loop_nest_depth (struct loop *loop_nest)\n+{\n+  struct loop *temp;\n+  unsigned int depth = 1;\n+\n+  /* If it's not a loop nest, we don't want it.  We also don't handle\n+     sibling loops properly, which are loops of the following form:\n+\n+     | for (i = 0; i < 50; i++)\n+     |   {\n+     |     for (j = 0; j < 50; j++)\n+     |       {\n+     |        ...\n+     |       }\n+     |     for (j = 0; j < 50; j++)\n+     |       {\n+     |        ...\n+     |       }\n+     |   }\n+  */\n+\n+  if (!loop_nest->inner || !single_exit (loop_nest))\n+    return 0;\n+\n+  for (temp = loop_nest->inner; temp; temp = temp->inner)\n+    {\n+      /* If we have a sibling loop or multiple exit edges, jump ship.  */\n+      if (temp->next || !single_exit (temp))\n+\treturn 0;\n+\n+      depth++;\n+    }\n+\n+  return depth;\n+}\n+\n /* Perform a set of linear transforms on loops.  */\n \n void\n@@ -263,47 +303,18 @@ linear_transform_loops (void)\n       unsigned int depth = 0;\n       VEC (ddr_p, heap) *dependence_relations;\n       VEC (data_reference_p, heap) *datarefs;\n-      struct loop *temp;\n       lambda_loopnest before, after;\n       lambda_trans_matrix trans;\n-      bool problem = false;\n       struct obstack lambda_obstack;\n       gcc_obstack_init (&lambda_obstack);\n \n-      /* If it's not a loop nest, we don't want it.\n-         We also don't handle sibling loops properly, \n-         which are loops of the following form:\n-         for (i = 0; i < 50; i++)\n-           {\n-             for (j = 0; j < 50; j++)\n-               {\n-\t        ...\n-               }\n-             for (j = 0; j < 50; j++)\n-               {\n-                ...\n-               }\n-           } */\n-      if (!loop_nest->inner || !single_exit (loop_nest))\n+      depth = perfect_loop_nest_depth (loop_nest);\n+      if (depth == 0)\n \tcontinue;\n+\n       VEC_truncate (tree, oldivs, 0);\n       VEC_truncate (tree, invariants, 0);\n-      depth = 1;\n-      for (temp = loop_nest->inner; temp; temp = temp->inner)\n-\t{\n-\t  /* If we have a sibling loop or multiple exit edges, jump ship.  */\n-\t  if (temp->next || !single_exit (temp))\n-\t    {\n-\t      problem = true;\n-\t      break;\n-\t    }\n-\t  depth ++;\n-\t}\n-      if (problem)\n-\tcontinue;\n \n-      /* Analyze data references and dependence relations using scev.  */      \n- \n       datarefs = VEC_alloc (data_reference_p, heap, 10);\n       dependence_relations = VEC_alloc (ddr_p, heap, 10 * 10);\n       compute_data_dependences_for_loop (loop_nest, true, &datarefs,"}]}