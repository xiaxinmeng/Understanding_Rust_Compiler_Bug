{"sha": "a5ac3982bc53a972881bed634e3cc3dfa2141656", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVhYzM5ODJiYzUzYTk3Mjg4MWJlZDYzNGUzY2MzZGZhMjE0MTY1Ng==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-12-15T16:59:56Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-12-15T16:59:56Z"}, "message": "re PR c++/13243 (Segfault on illegal template construct)\n\n\tPR c++/13243\n\tPR c++/12573\n\t* parser.c (cp_parser_postfix_expression): Tighten handling of\n\tintegral constant expressions.\n\t(cp_parser_unary_expression): Likewise.\n\t* pt.c (value_dependent_expression_p): Remove handling for\n\tCOMPONENT_REFs.\n\n\tPR c++/13243\n\tPR c++/12573\n\t* g++.dg/template/crash14.C: New test.\n\t* g++.dg/template/dependent-expr3.C: Add dg-error markers.\n\nFrom-SVN: r74637", "tree": {"sha": "1e3f242ddcd945a05ffef4f4b0b0b1386d9d20c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e3f242ddcd945a05ffef4f4b0b0b1386d9d20c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5ac3982bc53a972881bed634e3cc3dfa2141656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5ac3982bc53a972881bed634e3cc3dfa2141656", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5ac3982bc53a972881bed634e3cc3dfa2141656", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5ac3982bc53a972881bed634e3cc3dfa2141656/comments", "author": null, "committer": null, "parents": [{"sha": "ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca13fb7f5daa9b61ed9c94c74c326ca437ef6b78"}], "stats": {"total": 112, "additions": 82, "deletions": 30}, "files": [{"sha": "5e4e82433436ad61ba0e2592e1a1b73522e8b071", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ac3982bc53a972881bed634e3cc3dfa2141656/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ac3982bc53a972881bed634e3cc3dfa2141656/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a5ac3982bc53a972881bed634e3cc3dfa2141656", "patch": "@@ -1,3 +1,13 @@\n+2003-12-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13243\n+\tPR c++/12573\n+\t* parser.c (cp_parser_postfix_expression): Tighten handling of\n+\tintegral constant expressions.\n+\t(cp_parser_unary_expression): Likewise.\n+\t* pt.c (value_dependent_expression_p): Remove handling for\n+\tCOMPONENT_REFs.\n+\n 2003-12-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* class.c (add_method): Disallow destructor for java classes."}, {"sha": "a74e33a59e99bb88bf31440f530f1b5314bccc79", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 60, "deletions": 25, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ac3982bc53a972881bed634e3cc3dfa2141656/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ac3982bc53a972881bed634e3cc3dfa2141656/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=a5ac3982bc53a972881bed634e3cc3dfa2141656", "patch": "@@ -3637,6 +3637,15 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n \t    postfix_expression \n \t      = grok_array_decl (postfix_expression, index);\n \t    idk = CP_ID_KIND_NONE;\n+\t    /* Array references are not permitted in\n+\t       constant-expressions.  */\n+\t    if (parser->constant_expression_p)\n+\t      {\n+\t\tif (!parser->allow_non_constant_expression_p)\n+\t\t  postfix_expression \n+\t\t    = cp_parser_non_constant_expression (\"an array reference\");\n+\t\tparser->non_constant_expression_p = true;\n+\t      }\n \t  }\n \t  break;\n \n@@ -3658,7 +3667,11 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n \t    if (parser->constant_expression_p)\n \t      {\n \t\tif (!parser->allow_non_constant_expression_p)\n-\t\t  return cp_parser_non_constant_expression (\"a function call\");\n+\t\t  {\n+\t\t    postfix_expression \n+\t\t      = cp_parser_non_constant_expression (\"a function call\");\n+\t\t    break;\n+\t\t  }\n \t\tparser->non_constant_expression_p = true;\n \t      }\n \n@@ -3737,6 +3750,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n \t    bool dependent_p;\n \t    bool template_p;\n \t    tree scope = NULL_TREE;\n+\t    enum cpp_ttype token_type = token->type;\n \n \t    /* If this is a `->' operator, dereference the pointer.  */\n \t    if (token->type == CPP_DEREF)\n@@ -3839,42 +3853,53 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p)\n \t       object on the left-hand side of the `.' or `->'\n \t       operator.  */\n \t    parser->context->object_type = NULL_TREE;\n+\t    /* These operators may not appear in constant-expressions.  */\n+\t    if (parser->constant_expression_p)\n+\t      {\n+\t\tif (!parser->allow_non_constant_expression_p)\n+\t\t  postfix_expression \n+\t\t    = (cp_parser_non_constant_expression \n+\t\t       (token_type == CPP_DEREF ? \"'->'\" : \"`.'\"));\n+\t\tparser->non_constant_expression_p = true;\n+\t      }\n \t  }\n \t  break;\n \n \tcase CPP_PLUS_PLUS:\n \t  /* postfix-expression ++  */\n \t  /* Consume the `++' token.  */\n \t  cp_lexer_consume_token (parser->lexer);\n+\t  /* Generate a representation for the complete expression.  */\n+\t  postfix_expression \n+\t    = finish_increment_expr (postfix_expression, \n+\t\t\t\t     POSTINCREMENT_EXPR);\n \t  /* Increments may not appear in constant-expressions.  */\n \t  if (parser->constant_expression_p)\n \t    {\n \t      if (!parser->allow_non_constant_expression_p)\n-\t\treturn cp_parser_non_constant_expression (\"an increment\");\n+\t\tpostfix_expression \n+\t\t  = cp_parser_non_constant_expression (\"an increment\");\n \t      parser->non_constant_expression_p = true;\n \t    }\n-\t  /* Generate a representation for the complete expression.  */\n-\t  postfix_expression \n-\t    = finish_increment_expr (postfix_expression, \n-\t\t\t\t     POSTINCREMENT_EXPR);\n \t  idk = CP_ID_KIND_NONE;\n \t  break;\n \n \tcase CPP_MINUS_MINUS:\n \t  /* postfix-expression -- */\n \t  /* Consume the `--' token.  */\n \t  cp_lexer_consume_token (parser->lexer);\n+\t  /* Generate a representation for the complete expression.  */\n+\t  postfix_expression \n+\t    = finish_increment_expr (postfix_expression, \n+\t\t\t\t     POSTDECREMENT_EXPR);\n \t  /* Decrements may not appear in constant-expressions.  */\n \t  if (parser->constant_expression_p)\n \t    {\n \t      if (!parser->allow_non_constant_expression_p)\n-\t\treturn cp_parser_non_constant_expression (\"a decrement\");\n+\t\tpostfix_expression \n+\t\t  = cp_parser_non_constant_expression (\"a decrement\");\n \t      parser->non_constant_expression_p = true;\n \t    }\n-\t  /* Generate a representation for the complete expression.  */\n-\t  postfix_expression \n-\t    = finish_increment_expr (postfix_expression, \n-\t\t\t\t     POSTDECREMENT_EXPR);\n \t  idk = CP_ID_KIND_NONE;\n \t  break;\n \n@@ -4217,6 +4242,8 @@ cp_parser_unary_expression (cp_parser *parser, bool address_p)\n   if (unary_operator != ERROR_MARK)\n     {\n       tree cast_expression;\n+      tree expression = error_mark_node;\n+      const char *non_constant_p = NULL;\n \n       /* Consume the operator token.  */\n       token = cp_lexer_consume_token (parser->lexer);\n@@ -4227,32 +4254,40 @@ cp_parser_unary_expression (cp_parser *parser, bool address_p)\n       switch (unary_operator)\n \t{\n \tcase INDIRECT_REF:\n-\t  return build_x_indirect_ref (cast_expression, \"unary *\");\n-\t  \n+\t  non_constant_p = \"`*'\";\n+\t  expression = build_x_indirect_ref (cast_expression, \"unary *\");\n+\t  break;\n+\n \tcase ADDR_EXPR:\n+\t  non_constant_p = \"`&'\";\n+\t  /* Fall through.  */\n \tcase BIT_NOT_EXPR:\n-\t  return build_x_unary_op (unary_operator, cast_expression);\n-\t  \n+\t  expression = build_x_unary_op (unary_operator, cast_expression);\n+\t  break;\n+\n \tcase PREINCREMENT_EXPR:\n \tcase PREDECREMENT_EXPR:\n-\t  if (parser->constant_expression_p)\n-\t    {\n-\t      if (!parser->allow_non_constant_expression_p)\n-\t\treturn cp_parser_non_constant_expression (PREINCREMENT_EXPR\n-\t\t\t\t\t\t\t  ? \"an increment\"\n-\t\t\t\t\t\t\t  : \"a decrement\");\n-\t      parser->non_constant_expression_p = true;\n-\t    }\n+\t  non_constant_p = (unary_operator == PREINCREMENT_EXPR\n+\t\t\t    ? \"`++'\" : \"`--'\");\n \t  /* Fall through.  */\n \tcase CONVERT_EXPR:\n \tcase NEGATE_EXPR:\n \tcase TRUTH_NOT_EXPR:\n-\t  return finish_unary_op_expr (unary_operator, cast_expression);\n+\t  expression = finish_unary_op_expr (unary_operator, cast_expression);\n+\t  break;\n \n \tdefault:\n \t  abort ();\n-\t  return error_mark_node;\n \t}\n+\n+      if (non_constant_p && parser->constant_expression_p)\n+\t{\n+\t  if (!parser->allow_non_constant_expression_p)\n+\t    return cp_parser_non_constant_expression (non_constant_p);\n+\t  parser->non_constant_expression_p = true;\n+\t}\n+\n+      return expression;\n     }\n \n   return cp_parser_postfix_expression (parser, address_p);"}, {"sha": "553d4f7d3183fd40448410f54b3eaa1ec3d8ca36", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ac3982bc53a972881bed634e3cc3dfa2141656/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ac3982bc53a972881bed634e3cc3dfa2141656/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=a5ac3982bc53a972881bed634e3cc3dfa2141656", "patch": "@@ -11714,9 +11714,6 @@ value_dependent_expression_p (tree expression)\n     }\n   if (TREE_CODE (expression) == SCOPE_REF)\n     return dependent_scope_ref_p (expression, value_dependent_expression_p);\n-  if (TREE_CODE (expression) == COMPONENT_REF)\n-    return (value_dependent_expression_p (TREE_OPERAND (expression, 0))\n-\t    || value_dependent_expression_p (TREE_OPERAND (expression, 1)));\n   /* A constant expression is value-dependent if any subexpression is\n      value-dependent.  */\n   if (IS_EXPR_CODE_CLASS (TREE_CODE_CLASS (TREE_CODE (expression))))"}, {"sha": "dd5e215b1926b5b085d38dbbb94dcb29f492d369", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ac3982bc53a972881bed634e3cc3dfa2141656/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ac3982bc53a972881bed634e3cc3dfa2141656/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a5ac3982bc53a972881bed634e3cc3dfa2141656", "patch": "@@ -1,3 +1,10 @@\n+2003-12-15  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/13243\n+\tPR c++/12573\n+\t* g++.dg/template/crash14.C: New test.\n+\t* g++.dg/template/dependent-expr3.C: Add dg-error markers.\n+\n 2003-12-15  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.dg/other/java1.C: New test."}, {"sha": "7b3af045fa9e5fb6bddf87f33ec0d93e9a459917", "filename": "gcc/testsuite/g++.dg/template/crash14.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ac3982bc53a972881bed634e3cc3dfa2141656/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ac3982bc53a972881bed634e3cc3dfa2141656/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash14.C?ref=a5ac3982bc53a972881bed634e3cc3dfa2141656", "patch": "@@ -0,0 +1,3 @@\n+template <int T> class foo { public: foo() { } class Z { };};\n+template <int I[2]> void dep7(foo<I[0]> *) { } // { dg-error \"\" }\n+"}, {"sha": "2e8b805ead80787797b916025e8b9744b8d31f5f", "filename": "gcc/testsuite/g++.dg/template/dependent-expr3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ac3982bc53a972881bed634e3cc3dfa2141656/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ac3982bc53a972881bed634e3cc3dfa2141656/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr3.C?ref=a5ac3982bc53a972881bed634e3cc3dfa2141656", "patch": "@@ -9,6 +9,6 @@ template <typename K> struct Y : K {\n };\n \n template <class T> struct Z {\n-  S< (bool)(&static_cast<Y<T> *>(0)->x == 0) >\n-    s;\n+  S< (bool)(&static_cast<Y<T> *>(0)->x == 0) > // { dg-error \"\" }\n+  s; // { dg-error \"\" }\n };"}]}