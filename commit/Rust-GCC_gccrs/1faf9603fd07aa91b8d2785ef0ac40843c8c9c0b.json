{"sha": "1faf9603fd07aa91b8d2785ef0ac40843c8c9c0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZhZjk2MDNmZDA3YWE5MWI4ZDI3ODVlZjBhYzQwODQzYzhjOWMwYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-06T19:56:45Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-06T19:56:45Z"}, "message": "(do_include): Don't do fprintf's if inhibit_warnings.\n\nRenamed system_header_p to angle_brackets.  Use is_system_include.\n(is_system_include): New function.\n(redundant_include_p) : Renamed from lookup_include.\n\nFrom-SVN: r1468", "tree": {"sha": "ba5a1241db5c57e696751ade53750916a19524ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba5a1241db5c57e696751ade53750916a19524ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1faf9603fd07aa91b8d2785ef0ac40843c8c9c0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1faf9603fd07aa91b8d2785ef0ac40843c8c9c0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1faf9603fd07aa91b8d2785ef0ac40843c8c9c0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1faf9603fd07aa91b8d2785ef0ac40843c8c9c0b/comments", "author": null, "committer": null, "parents": [{"sha": "e5d70561615053783f54a504b3bafa6aa31d9e0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5d70561615053783f54a504b3bafa6aa31d9e0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5d70561615053783f54a504b3bafa6aa31d9e0d"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "93f77027ca784a2001ee405095709d169c3aa589", "filename": "gcc/cccp.c", "status": "modified", "additions": 40, "deletions": 13, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1faf9603fd07aa91b8d2785ef0ac40843c8c9c0b/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1faf9603fd07aa91b8d2785ef0ac40843c8c9c0b/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=1faf9603fd07aa91b8d2785ef0ac40843c8c9c0b", "patch": "@@ -202,7 +202,8 @@ static void pfatal_with_name ();\n static void perror_with_name ();\n static void print_containing_files ();\n static int lookup_import ();\n-static int lookup_include ();\n+static int redundant_include_p ();\n+static is_system_include ();\n static int check_preconditions ();\n static void pcfinclude ();\n static void pcstring_used ();\n@@ -3620,14 +3621,14 @@ do_include (buf, limit, op, keyword)\n   int retried = 0;\t\t/* Have already tried macro\n \t\t\t\t   expanding the include line*/\n   FILE_BUF trybuf;\t\t/* It got expanded into here */\n-  int system_header_p = 0;\t/* 0 for \"...\", 1 for <...> */\n+  int angle_brackets = 0;\t/* 0 for \"...\", 1 for <...> */\n   int pcf = -1;\n   char *pcfbuf;\n   int pcfbuflimit;\n   int pcfnum;\n   f= -1;\t\t\t/* JF we iz paranoid! */\n \n-  if (importing && warn_import\n+  if (importing && warn_import && !inhibit_warnings\n       && !instack[indepth].system_header_p && !import_warning) {\n     import_warning = 1;\n     warning (\"using `#import' is not recommended\");\n@@ -3703,7 +3704,7 @@ do_include (buf, limit, op, keyword)\n     fend = fbeg;\n     while (fend != limit && *fend != '>') fend++;\n     if (*fend == '>' && fend + 1 == limit) {\n-      system_header_p = 1;\n+      angle_brackets = 1;\n       /* If -I-, start with the first -I dir after the -I-.  */\n       if (first_bracket_include)\n \tsearch_start = first_bracket_include;\n@@ -3755,7 +3756,7 @@ do_include (buf, limit, op, keyword)\n   if (*fbeg == '/') {\n     strncpy (fname, fbeg, flen);\n     fname[flen] = 0;\n-    if (lookup_include (fname))\n+    if (redundant_include_p (fname))\n       return 0;\n     if (importing)\n       f = lookup_import (fname);\n@@ -3799,7 +3800,7 @@ do_include (buf, limit, op, keyword)\n \tf = open (fname, O_RDONLY, 0666);\n       if (f == -2)\n \treturn 0;\t\t\t/* Already included this file */\n-      if (lookup_include (fname)) {\n+      if (redundant_include_p (fname)) {\n \tclose (f);\n \treturn 0;\n       }\n@@ -3816,13 +3817,13 @@ do_include (buf, limit, op, keyword)\n     error_from_errno (fname);\n \n     /* For -M, add this file to the dependencies.  */\n-    if (print_deps > (system_header_p || (system_include_depth > 0))) {\n+    if (print_deps > (angle_brackets || (system_include_depth > 0))) {\n       /* Break the line before this.  */\n       deps_output (\"\", 0);\n \n       /* If it was requested as a system header file,\n \t then assume it belongs in the first place to look for such.  */\n-      if (system_header_p) {\n+      if (angle_brackets) {\n \tfor (searchptr = search_start; searchptr; searchptr = searchptr->next) {\n \t  if (searchptr->fname) {\n \t    if (searchptr->fname[0] == 0)\n@@ -3869,7 +3870,7 @@ do_include (buf, limit, op, keyword)\n       ptr->fname = savestring (fname);\n \n       /* For -M, add this file to the dependencies.  */\n-      if (print_deps > (system_header_p || (system_include_depth > 0))) {\n+      if (print_deps > (angle_brackets || (system_include_depth > 0))) {\n \tdeps_output (\"\", 0);\n \tdeps_output (fname, 0);\n \tdeps_output (\" \", 0);\n@@ -3880,7 +3881,7 @@ do_include (buf, limit, op, keyword)\n     if (print_include_names)\n       fprintf (stderr, \"%s\\n\", fname);\n \n-    if (system_header_p)\n+    if (angle_brackets)\n       system_include_depth++;\n \n     /* Actually process the file.  */\n@@ -3925,9 +3926,9 @@ do_include (buf, limit, op, keyword)\n       pcfinclude (pcfbuf, pcfbuflimit, fname, op);\n     }\n     else\n-      finclude (f, fname, op, system_header_p, searchptr);\n+      finclude (f, fname, op, is_system_include (fname), searchptr);\n \n-    if (system_header_p)\n+    if (angle_brackets)\n       system_include_depth--;\n   }\n   return 0;\n@@ -3938,7 +3939,7 @@ do_include (buf, limit, op, keyword)\n    to make a repeated include do nothing.  */\n \n static int\n-lookup_include (name)\n+redundant_include_p (name)\n      char *name;\n {\n   struct file_name_list *l = all_include_files;\n@@ -3950,6 +3951,32 @@ lookup_include (name)\n   return 0;\n }\n \n+/* Return nonzero if the given FILENAME is an absolute pathname which\n+   designates a file within one of the known \"system\" include file\n+   directories.  We assume here that if the given FILENAME looks like\n+   it is the name of a file which resides either directly in a \"system\"\n+   include file directory, or within any subdirectory thereof, then the\n+   given file must be a \"system\" include file.  This function tells us\n+   if we should suppress pedantic errors/warnings for the given FILENAME.  */\n+\n+static int\n+is_system_include (filename)\n+    register char *filename;\n+{\n+  struct file_name_list *searchptr;\n+\n+  for (searchptr = first_bracket_include; searchptr;\n+       searchptr = searchptr->next)\n+    if (searchptr->fname) {\n+      register char *sys_dir = searchptr->fname;\n+      register unsigned length = strlen (sys_dir);\n+\n+      if (! strncmp (sys_dir, filename, length) && filename[length] == '/')\n+\treturn 1;\n+    }\n+  return 0;\n+}\n+\f\n /* Process the contents of include file FNAME, already open on descriptor F,\n    with output to OP.\n    SYSTEM_HEADER_P is 1 if this file was specified using <...>."}]}