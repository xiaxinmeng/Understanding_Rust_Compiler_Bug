{"sha": "a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcwMmM5YjllZWMzY2Y2N2RjMjA1NDYyYzlkN2JhNWI2ZDYyY2RjOA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2017-01-13T10:11:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-13T10:11:17Z"}, "message": "exp_util.adb (Insert_Actions): Handle Iterated_Component_Association.\n\n2017-01-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_util.adb (Insert_Actions): Handle Iterated_Component_Association.\n\t* par-ch3.adb (P_Discrete_Choice_List): An\n\tIterated_Component_Association is an array aggregate component.\n\t* par-ch4.adb (P_Iterated_Component_Association): New procedure.\n\t(Is_Quantified_Expression): New function that performs a lookahead\n\tto distinguish quantified expressions from iterated component\n\tassociations.\n\t(P_Aggregate_Or_Paren_Expr): Recognize iterated component\n\tassociations.\n\t(P_Unparen_Cond_Case_Quant_Expression, P_Primary): Ditto.\n\t* sem.adb (Analyze): Handle Iterated_Component_Association.\n\t* sem_aggr.adb (Resolve_Array_Aggregate): Dummy handling of iterated\n\tcomponent associations.\n\t* sinfo.ads, sinfo.adb: Entries for for\n\tN_Iterated_Component_Association and its fields.\n\t* sprint.adb (Sprint_Node_Actual): Handle\n\tN_Iterated_Component_Association.\n\nFrom-SVN: r244403", "tree": {"sha": "0e1601684725cc6bbea28850d03387ce6dcc00bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e1601684725cc6bbea28850d03387ce6dcc00bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0acd830b7e91e5b2d0e20fd0f5770544fd5f16ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0acd830b7e91e5b2d0e20fd0f5770544fd5f16ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0acd830b7e91e5b2d0e20fd0f5770544fd5f16ab"}], "stats": {"total": 271, "additions": 212, "deletions": 59}, "files": [{"sha": "9fe36adafe51037aa6bc4828a47b5bc30ed7d5a4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8", "patch": "@@ -1,3 +1,23 @@\n+2017-01-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_util.adb (Insert_Actions): Handle Iterated_Component_Association.\n+\t* par-ch3.adb (P_Discrete_Choice_List): An\n+\tIterated_Component_Association is an array aggregate component.\n+\t* par-ch4.adb (P_Iterated_Component_Association): New procedure.\n+\t(Is_Quantified_Expression): New function that performs a lookahead\n+\tto distinguish quantified expressions from iterated component\n+\tassociations.\n+\t(P_Aggregate_Or_Paren_Expr): Recognize iterated component\n+\tassociations.\n+\t(P_Unparen_Cond_Case_Quant_Expression, P_Primary): Ditto.\n+\t* sem.adb (Analyze): Handle Iterated_Component_Association.\n+\t* sem_aggr.adb (Resolve_Array_Aggregate): Dummy handling of iterated\n+\tcomponent associations.\n+\t* sinfo.ads, sinfo.adb: Entries for for\n+\tN_Iterated_Component_Association and its fields.\n+\t* sprint.adb (Sprint_Node_Actual): Handle\n+\tN_Iterated_Component_Association.\n+\n 2017-01-13  Justin Squirek  <squirek@adacore.com>\n \n \t* sem_ch12.adb (Analyze_Package_Instantiation): Move disabiling"}, {"sha": "8ab95d0db5ad101ab7c475a41f5340da07b0b2b7", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 40, "deletions": 39, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8", "patch": "@@ -5715,49 +5715,50 @@ package body Exp_Util is\n             --  at the end of the loop actions, to respect the order in which\n             --  they are to be elaborated.\n \n-            when\n-               N_Component_Association =>\n-                  if Nkind (Parent (P)) = N_Aggregate\n-                    and then Present (Loop_Actions (P))\n-                  then\n-                     if Is_Empty_List (Loop_Actions (P)) then\n-                        Set_Loop_Actions (P, Ins_Actions);\n-                        Analyze_List (Ins_Actions);\n-\n-                     else\n-                        declare\n-                           Decl : Node_Id;\n-\n-                        begin\n-                           --  Check whether these actions were generated by a\n-                           --  declaration that is part of the loop_ actions\n-                           --  for the component_association.\n-\n-                           Decl := Assoc_Node;\n-                           while Present (Decl) loop\n-                              exit when Parent (Decl) = P\n-                                and then Is_List_Member (Decl)\n-                                and then\n-                                  List_Containing (Decl) = Loop_Actions (P);\n-                              Decl := Parent (Decl);\n-                           end loop;\n-\n-                           if Present (Decl) then\n-                              Insert_List_Before_And_Analyze\n-                                (Decl, Ins_Actions);\n-                           else\n-                              Insert_List_After_And_Analyze\n-                                (Last (Loop_Actions (P)), Ins_Actions);\n-                           end if;\n-                        end;\n-                     end if;\n-\n-                     return;\n+            when N_Component_Association\n+               | N_Iterated_Component_Association\n+            =>\n+               if Nkind (Parent (P)) = N_Aggregate\n+                 and then Present (Loop_Actions (P))\n+               then\n+                  if Is_Empty_List (Loop_Actions (P)) then\n+                     Set_Loop_Actions (P, Ins_Actions);\n+                     Analyze_List (Ins_Actions);\n \n                   else\n-                     null;\n+                     declare\n+                        Decl : Node_Id;\n+\n+                     begin\n+                        --  Check whether these actions were generated by a\n+                        --  declaration that is part of the loop_ actions for\n+                        --  the component_association.\n+\n+                        Decl := Assoc_Node;\n+                        while Present (Decl) loop\n+                           exit when Parent (Decl) = P\n+                             and then Is_List_Member (Decl)\n+                             and then\n+                               List_Containing (Decl) = Loop_Actions (P);\n+                           Decl := Parent (Decl);\n+                        end loop;\n+\n+                        if Present (Decl) then\n+                           Insert_List_Before_And_Analyze\n+                             (Decl, Ins_Actions);\n+                        else\n+                           Insert_List_After_And_Analyze\n+                             (Last (Loop_Actions (P)), Ins_Actions);\n+                        end if;\n+                     end;\n                   end if;\n \n+                  return;\n+\n+               else\n+                  null;\n+               end if;\n+\n             --  Another special case, an attribute denoting a procedure call\n \n             when"}, {"sha": "b7ab2ad3534c55fd3f3fff1964a14d268aee3ea8", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3852,6 +3852,10 @@ package body Ch3 is\n          end if;\n \n          if Token = Tok_Comma then\n+            if Nkind (Expr_Node) = N_Iterated_Component_Association then\n+               return Choices;\n+            end if;\n+\n             Scan; -- past comma\n \n             if Token = Tok_Vertical_Bar then"}, {"sha": "64402a598d36246196bae3f85d3bcb1942a588ec", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 102, "deletions": 18, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -76,6 +76,7 @@ package body Ch4 is\n    function P_Aggregate_Or_Paren_Expr                 return Node_Id;\n    function P_Allocator                               return Node_Id;\n    function P_Case_Expression_Alternative             return Node_Id;\n+   function P_Iterated_Component_Association          return Node_Id;\n    function P_Record_Or_Array_Component_Association   return Node_Id;\n    function P_Factor                                  return Node_Id;\n    function P_Primary                                 return Node_Id;\n@@ -1260,6 +1261,10 @@ package body Ch4 is\n       --  Called if <> is encountered as positional aggregate element. Issues\n       --  error message and sets Expr_Node to Error.\n \n+      function Is_Quantified_Expression return Boolean;\n+      --  The presence of iterated component associations requires a one\n+      --  token lookahead to distinguish it from quantified expressions.\n+\n       ---------------\n       -- Box_Error --\n       ---------------\n@@ -1281,6 +1286,22 @@ package body Ch4 is\n          Expr_Node := Error;\n       end Box_Error;\n \n+      ------------------------------\n+      -- Is_Quantified_Expression --\n+      ------------------------------\n+\n+      function Is_Quantified_Expression return Boolean is\n+         Maybe      : Boolean;\n+         Scan_State : Saved_Scan_State;\n+\n+      begin\n+         Save_Scan_State (Scan_State);\n+         Scan;   --  past FOR\n+         Maybe := Token = Tok_All or else Token = Tok_Some;\n+         Restore_Scan_State (Scan_State);  --  to FOR\n+         return Maybe;\n+      end Is_Quantified_Expression;\n+\n    --  Start of processing for P_Aggregate_Or_Paren_Expr\n \n    begin\n@@ -1309,7 +1330,7 @@ package body Ch4 is\n \n       --  Quantified expression\n \n-      elsif Token = Tok_For then\n+      elsif Token = Tok_For and then Is_Quantified_Expression then\n          Expr_Node := P_Quantified_Expression;\n          T_Right_Paren;\n          Set_Paren_Count (Expr_Node, Paren_Count (Expr_Node) + 1);\n@@ -1338,6 +1359,11 @@ package body Ch4 is\n             else\n                Restore_Scan_State (Scan_State); -- to NULL that must be expr\n             end if;\n+\n+         elsif Token = Tok_For then\n+            Aggregate_Node := New_Node (N_Aggregate, Lparen_Sloc);\n+            Expr_Node := P_Iterated_Component_Association;\n+            goto Aggregate;\n          end if;\n \n          --  Scan expression, handling box appearing as positional argument\n@@ -1425,7 +1451,7 @@ package body Ch4 is\n       end if;\n \n       --  Prepare to scan list of component associations\n-\n+      <<Aggregate>>\n       Expr_List  := No_List; -- don't set yet, maybe all named entries\n       Assoc_List := No_List; -- don't set yet, maybe all positional entries\n \n@@ -1515,7 +1541,7 @@ package body Ch4 is\n          --  wrong, so let's get out now, before we start eating up stuff\n          --  that doesn't belong to us.\n \n-         if Token in Token_Class_Eterm then\n+         if Token in Token_Class_Eterm and then Token /= Tok_For then\n             Error_Msg_AP\n               (\"expecting expression or component association\");\n             exit;\n@@ -1527,11 +1553,15 @@ package body Ch4 is\n             Box_Error;\n \n          --  Otherwise initiate for reentry to top of loop by scanning an\n-         --  initial expression, unless the first token is OTHERS.\n+         --  initial expression, unless the first token is OTHERS or FOR,\n+         --  which indicates an iterated component association.\n \n          elsif Token = Tok_Others then\n             Expr_Node := Empty;\n \n+         elsif Token = Tok_For then\n+            Expr_Node := P_Iterated_Component_Association;\n+\n          else\n             Save_Scan_State (Scan_State); -- at start of expression\n             Expr_Node := P_Expression_Or_Range_Attribute_If_OK;\n@@ -1562,6 +1592,7 @@ package body Ch4 is\n    --  ARRAY_COMPONENT_ASSOCIATION ::=\n    --    DISCRETE_CHOICE_LIST => EXPRESSION\n    --  | DISCRETE_CHOICE_LIST => <>\n+   --  | ITERATED_COMPONENT_ASSOCIATION\n \n    --  Note: this routine only handles the named cases, including others.\n    --  Cases where the component choice list is not present have already\n@@ -2718,12 +2749,21 @@ package body Ch4 is\n                   return Error;\n \n                elsif Ada_Version >= Ada_2012 then\n-                  Node1 := P_Quantified_Expression;\n+                  Save_Scan_State (Scan_State);\n+                  Scan;   --  past FOR\n \n-                  if not (Lparen and then Token = Tok_Right_Paren) then\n-                     Error_Msg\n-                      (\"quantified expression must be parenthesized\",\n-                        Sloc (Node1));\n+                  if Token = Tok_All or else Token = Tok_Some  then\n+                     Restore_Scan_State (Scan_State);  -- To FOR\n+                     Node1 := P_Quantified_Expression;\n+\n+                     if not (Lparen and then Token = Tok_Right_Paren) then\n+                        Error_Msg\n+                          (\"quantified expression must be parenthesized\",\n+                           Sloc (Node1));\n+                     end if;\n+                  else\n+                     Restore_Scan_State (Scan_State);  -- To FOR\n+                     Node1 := P_Iterated_Component_Association;\n                   end if;\n \n                   return Node1;\n@@ -2786,7 +2826,7 @@ package body Ch4 is\n          raise Error_Resync;\n       end if;\n \n-      Scan; -- past SOME\n+      Scan; -- past ALL or SOME\n       I_Spec := P_Loop_Parameter_Specification;\n \n       if Nkind (I_Spec) = N_Loop_Parameter_Specification then\n@@ -3172,12 +3212,40 @@ package body Ch4 is\n       return Case_Alt_Node;\n    end P_Case_Expression_Alternative;\n \n+   --------------------------------------\n+   -- P_Iterated_Component_Association --\n+   --------------------------------------\n+\n+   --  ITERATED_COMPONENT_ASSOCIATION ::=\n+   --    for DEFINING_IDENTIFIER in DISCRETE_CHOICE_LIST => EXPRESSION\n+\n+   function P_Iterated_Component_Association return Node_Id is\n+      Assoc_Node : Node_Id;\n+\n+   begin\n+      Scan;  --  past FOR\n+      Assoc_Node :=\n+        New_Node (N_Iterated_Component_Association, Prev_Token_Ptr);\n+      Set_Defining_Identifier (Assoc_Node, P_Defining_Identifier);\n+      T_In;\n+      Set_Discrete_Choices (Assoc_Node, P_Discrete_Choice_List);\n+      TF_Arrow;\n+      Set_Expression (Assoc_Node, P_Expression);\n+      return Assoc_Node;\n+   end P_Iterated_Component_Association;\n+\n    ---------------------\n    -- P_If_Expression --\n    ---------------------\n \n-   function P_If_Expression return Node_Id is\n+   --  IF_EXPRESSION ::=\n+   --    if CONDITION then DEPENDENT_EXPRESSION\n+   --                {elsif CONDITION then DEPENDENT_EXPRESSION}\n+   --                [else DEPENDENT_EXPRESSION]\n+\n+   --  DEPENDENT_EXPRESSION ::= EXPRESSION\n \n+   function P_If_Expression return Node_Id is\n       function P_If_Expression_Internal\n         (Loc  : Source_Ptr;\n          Cond : Node_Id) return Node_Id;\n@@ -3355,7 +3423,9 @@ package body Ch4 is\n \n    function P_Unparen_Cond_Case_Quant_Expression return Node_Id is\n       Lparen : constant Boolean := Prev_Token = Tok_Left_Paren;\n-      Result : Node_Id;\n+\n+      Result     : Node_Id;\n+      Scan_State : Saved_Scan_State;\n \n    begin\n       --  Case expression\n@@ -3376,14 +3446,28 @@ package body Ch4 is\n             Error_Msg_N (\"if expression must be parenthesized!\", Result);\n          end if;\n \n-      --  Quantified expression\n+      --  Quantified expression or iterated component association\n \n       elsif Token = Tok_For then\n-         Result := P_Quantified_Expression;\n \n-         if not (Lparen and then Token = Tok_Right_Paren) then\n-            Error_Msg_N\n-              (\"quantified expression must be parenthesized!\", Result);\n+         Save_Scan_State (Scan_State);\n+         Scan;  --  past FOR\n+\n+         if Token = Tok_All or else Token = Tok_Some then\n+            Restore_Scan_State (Scan_State);\n+            Result := P_Quantified_Expression;\n+\n+            if not (Lparen and then Token = Tok_Right_Paren) then\n+               Error_Msg_N\n+                 (\"quantified expression must be parenthesized!\", Result);\n+            end if;\n+\n+         else\n+            --  If no quantifier keyword, this is an iterated component in\n+            --  an aggregate.\n+\n+            Restore_Scan_State (Scan_State);\n+            Result := P_Iterated_Component_Association;\n          end if;\n \n       --  No other possibility should exist (caller was supposed to check)"}, {"sha": "74d77ab24907cfefc780de4a5ff77c3e43b121f0", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8", "patch": "@@ -698,6 +698,7 @@ package body Sem is\n               N_Function_Specification                 |\n               N_Generic_Association                    |\n               N_Index_Or_Discriminant_Constraint       |\n+              N_Iterated_Component_Association         |\n               N_Iteration_Scheme                       |\n               N_Mod_Clause                             |\n               N_Modular_Type_Definition                |"}, {"sha": "be2fd901940d0d483b778dbe6114459f8b2f33fe", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8", "patch": "@@ -2475,7 +2475,11 @@ package body Sem_Aggr is\n                Check_Can_Never_Be_Null (Etype (N), Expr);\n             end if;\n \n-            if not Resolve_Aggr_Expr (Expr, Single_Elmt => True) then\n+            if Nkind (Expr) = N_Iterated_Component_Association then\n+               Error_Msg_N (\"iterated association not implemented yet\", Expr);\n+               return Failure;\n+\n+            elsif not Resolve_Aggr_Expr (Expr, Single_Elmt => True) then\n                return Failure;\n             end if;\n "}, {"sha": "dbe51ec33c66056994fcce2c54b86108db69a761", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8", "patch": "@@ -790,6 +790,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Full_Type_Declaration\n         or else NT (N).Nkind = N_Implicit_Label_Declaration\n         or else NT (N).Nkind = N_Incomplete_Type_Declaration\n+        or else NT (N).Nkind = N_Iterated_Component_Association\n         or else NT (N).Nkind = N_Iterator_Specification\n         or else NT (N).Nkind = N_Loop_Parameter_Specification\n         or else NT (N).Nkind = N_Number_Declaration\n@@ -879,6 +880,7 @@ package body Sinfo is\n       pragma Assert (False\n         or else NT (N).Nkind = N_Case_Expression_Alternative\n         or else NT (N).Nkind = N_Case_Statement_Alternative\n+        or else NT (N).Nkind = N_Iterated_Component_Association\n         or else NT (N).Nkind = N_Variant);\n       return List4 (N);\n    end Discrete_Choices;\n@@ -1268,6 +1270,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Expression_Function\n         or else NT (N).Nkind = N_Expression_With_Actions\n         or else NT (N).Nkind = N_Free_Statement\n+        or else NT (N).Nkind = N_Iterated_Component_Association\n         or else NT (N).Nkind = N_Mod_Clause\n         or else NT (N).Nkind = N_Modular_Type_Definition\n         or else NT (N).Nkind = N_Number_Declaration\n@@ -4086,6 +4089,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Full_Type_Declaration\n         or else NT (N).Nkind = N_Implicit_Label_Declaration\n         or else NT (N).Nkind = N_Incomplete_Type_Declaration\n+        or else NT (N).Nkind = N_Iterated_Component_Association\n         or else NT (N).Nkind = N_Iterator_Specification\n         or else NT (N).Nkind = N_Loop_Parameter_Specification\n         or else NT (N).Nkind = N_Number_Declaration\n@@ -4175,6 +4179,7 @@ package body Sinfo is\n       pragma Assert (False\n         or else NT (N).Nkind = N_Case_Expression_Alternative\n         or else NT (N).Nkind = N_Case_Statement_Alternative\n+        or else NT (N).Nkind = N_Iterated_Component_Association\n         or else NT (N).Nkind = N_Variant);\n       Set_List4_With_Parent (N, Val);\n    end Set_Discrete_Choices;\n@@ -4555,6 +4560,7 @@ package body Sinfo is\n         or else NT (N).Nkind = N_Expression_Function\n         or else NT (N).Nkind = N_Expression_With_Actions\n         or else NT (N).Nkind = N_Free_Statement\n+        or else NT (N).Nkind = N_Iterated_Component_Association\n         or else NT (N).Nkind = N_Mod_Clause\n         or else NT (N).Nkind = N_Modular_Type_Definition\n         or else NT (N).Nkind = N_Number_Declaration"}, {"sha": "588d02e3d16eba78b571e3ee7395fdbcb0a7f36c", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8", "patch": "@@ -4098,8 +4098,24 @@ package Sinfo is\n \n       --  ARRAY_COMPONENT_ASSOCIATION ::=\n       --    DISCRETE_CHOICE_LIST => EXPRESSION\n+      --  | ITERATED_COMPONENT_ASSOCIATION\n \n       --  See Record_Component_Association (4.3.1) for node structure\n+      --  The iterated_component_association is introduced into the\n+      --  Corrigendum of Ada_2012 by AI12-061.\n+\n+      ------------------------------------------\n+      -- 4.3.3 Iterated component Association --\n+      ------------------------------------------\n+\n+      --  ITERATED_COMPONENT_ASSOCIATION ::=\n+      --    for DEFINING_IDENTIFIER in DISCRETE_CHOICE_LIST => EXPRESSION\n+\n+      --  N_Iterated_Component_Association\n+      --  Sloc points to FOR\n+      --  Defining_Identifier (Node1)\n+      --  Expression (Node3)\n+      --  Discrete_Choices (List4)\n \n       --------------------------------------------------\n       -- 4.4  Expression/Relation/Term/Factor/Primary --\n@@ -8645,6 +8661,7 @@ package Sinfo is\n       N_Generic_Association,\n       N_Handled_Sequence_Of_Statements,\n       N_Index_Or_Discriminant_Constraint,\n+      N_Iterated_Component_Association,\n       N_Itype_Reference,\n       N_Label,\n       N_Modular_Type_Definition,\n@@ -11463,6 +11480,13 @@ package Sinfo is\n         4 => False,   --  unused\n         5 => False),  --  unused\n \n+     N_Iterated_Component_Association =>\n+       (1 => True,    --  Defining_Identifier (Node1)\n+        2 => False,   --  unused\n+        3 => True,    --  Expression (Node3)\n+        4 => True,    --  Discrete_Choices (List4)\n+        5 => False),  --  unused\n+\n      N_Extension_Aggregate =>\n        (1 => True,    --  Expressions (List1)\n         2 => True,    --  Component_Associations (List2)"}, {"sha": "bf85f01651699709d271c6954fa0c3e54e73b552", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=a702c9b9eec3cf67dc205462c9d7ba5b6d62cdc8", "patch": "@@ -1328,6 +1328,15 @@ package body Sprint is\n                Sprint_Node (Expression (Node));\n             end if;\n \n+         when N_Iterated_Component_Association =>\n+            Set_Debug_Sloc;\n+            Write_Str (\" for \");\n+            Write_Id (Defining_Identifier (Node));\n+            Write_Str (\" in \");\n+            Sprint_Bar_List (Choices (Node));\n+            Write_Str (\" => \");\n+            Sprint_Node (Expression (Node));\n+\n          when N_Component_Clause =>\n             Write_Indent;\n             Sprint_Node (Component_Name (Node));"}]}