{"sha": "ee7bfbe5eb70a23bbf3a2cedfdcbd2ea1a20c3f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU3YmZiZTVlYjcwYTIzYmJmM2EyY2VkZmRjYmQyZWExYTIwYzNmMg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-31T20:20:55Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-08-31T22:31:14Z"}, "message": "analyzer: gather builtin/internal fn handling into switch statements\n\nClean up this code in preparation for fixing PR analyzer/96798.\n\ngcc/analyzer/ChangeLog:\n\t* region-model.cc (region_model::on_call_pre): Gather handling of\n\tbuiltins and of internal fns into switch statements.  Handle\n\t\"alloca\" and BUILT_IN_ALLOCA_WITH_ALIGN.", "tree": {"sha": "3082cb4bc252247f73a38558d377765992b8b382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3082cb4bc252247f73a38558d377765992b8b382"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee7bfbe5eb70a23bbf3a2cedfdcbd2ea1a20c3f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee7bfbe5eb70a23bbf3a2cedfdcbd2ea1a20c3f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee7bfbe5eb70a23bbf3a2cedfdcbd2ea1a20c3f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee7bfbe5eb70a23bbf3a2cedfdcbd2ea1a20c3f2/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18056e45db1c75aa209fa9a756395ddceb867a88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18056e45db1c75aa209fa9a756395ddceb867a88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18056e45db1c75aa209fa9a756395ddceb867a88"}], "stats": {"total": 48, "additions": 40, "deletions": 8}, "files": [{"sha": "ec5094cac282c677578508d34bfd1d7858d79279", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee7bfbe5eb70a23bbf3a2cedfdcbd2ea1a20c3f2/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee7bfbe5eb70a23bbf3a2cedfdcbd2ea1a20c3f2/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=ee7bfbe5eb70a23bbf3a2cedfdcbd2ea1a20c3f2", "patch": "@@ -652,18 +652,50 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt)\n \t in region-model-impl-calls.cc.\n \t Having them split out into separate functions makes it easier\n \t to put breakpoints on the handling of specific functions.  */\n-      if (is_named_call_p (callee_fndecl, \"malloc\", call, 1))\n+\n+      if (fndecl_built_in_p (callee_fndecl)\n+\t  && gimple_builtin_call_types_compatible_p (call, callee_fndecl))\n+\tswitch (DECL_UNCHECKED_FUNCTION_CODE (callee_fndecl))\n+\t  {\n+\t  default:\n+\t    break;\n+\t  case BUILT_IN_ALLOCA:\n+\t  case BUILT_IN_ALLOCA_WITH_ALIGN:\n+\t    return impl_call_alloca (cd);\n+\t  case BUILT_IN_CALLOC:\n+\t    return impl_call_calloc (cd);\n+\t  case BUILT_IN_EXPECT:\n+\t  case BUILT_IN_EXPECT_WITH_PROBABILITY:\n+\t    return impl_call_builtin_expect (cd);\n+\t  case BUILT_IN_FREE:\n+\t    /* Handle in \"on_call_post\".  */\n+\t    break;\n+\t  case BUILT_IN_MALLOC:\n+\t    return impl_call_malloc (cd);\n+\t  case BUILT_IN_MEMSET:\n+\t    impl_call_memset (cd);\n+\t    return false;\n+\t    break;\n+\t  case BUILT_IN_STRLEN:\n+\t    if (impl_call_strlen (cd))\n+\t      return false;\n+\t    break;\n+\t  }\n+      else if (gimple_call_internal_p (call))\n+\tswitch (gimple_call_internal_fn (call))\n+\t  {\n+\t  default:\n+\t    break;\n+\t  case IFN_BUILTIN_EXPECT:\n+\t    return impl_call_builtin_expect (cd);\n+\t  }\n+      else if (is_named_call_p (callee_fndecl, \"malloc\", call, 1))\n \treturn impl_call_malloc (cd);\n       else if (is_named_call_p (callee_fndecl, \"calloc\", call, 2))\n \treturn impl_call_calloc (cd);\n-      else if (is_named_call_p (callee_fndecl, \"__builtin_alloca\", call, 1))\n+      else if (is_named_call_p (callee_fndecl, \"alloca\", call, 1))\n \treturn impl_call_alloca (cd);\n-      else if (gimple_call_builtin_p (call, BUILT_IN_EXPECT)\n-\t       || gimple_call_builtin_p (call, BUILT_IN_EXPECT_WITH_PROBABILITY)\n-\t       || gimple_call_internal_p (call, IFN_BUILTIN_EXPECT))\n-\treturn impl_call_builtin_expect (cd);\n-      else if (is_named_call_p (callee_fndecl, \"memset\", call, 3)\n-\t       || gimple_call_builtin_p (call, BUILT_IN_MEMSET))\n+      else if (is_named_call_p (callee_fndecl, \"memset\", call, 3))\n \t{\n \t  impl_call_memset (cd);\n \t  return false;"}]}