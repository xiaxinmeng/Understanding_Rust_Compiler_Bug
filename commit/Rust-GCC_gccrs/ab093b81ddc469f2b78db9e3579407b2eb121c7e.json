{"sha": "ab093b81ddc469f2b78db9e3579407b2eb121c7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIwOTNiODFkZGM0NjlmMmI3OGRiOWUzNTc5NDA3YjJlYjEyMWM3ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-01-14T23:27:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-01-14T23:27:59Z"}, "message": "mips.h (HI_AND_FP_REGS): New register class.\n\n        * config/mips/mips.h (HI_AND_FP_REGS): New register class.\n        (CLASS_CANNOT_CHANGE_MODE): Disallow HI in little-endian mode.\n\nFrom-SVN: r48852", "tree": {"sha": "44fb44581c807db3e71b798bdd32bb57b32bf0de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44fb44581c807db3e71b798bdd32bb57b32bf0de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab093b81ddc469f2b78db9e3579407b2eb121c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab093b81ddc469f2b78db9e3579407b2eb121c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab093b81ddc469f2b78db9e3579407b2eb121c7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab093b81ddc469f2b78db9e3579407b2eb121c7e/comments", "author": null, "committer": null, "parents": [{"sha": "d300f51fd3c83d282616e32fa5a132217f83997f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d300f51fd3c83d282616e32fa5a132217f83997f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d300f51fd3c83d282616e32fa5a132217f83997f"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "0f70375f877ddf29c3ae3f5e1667f737c8e806a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab093b81ddc469f2b78db9e3579407b2eb121c7e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab093b81ddc469f2b78db9e3579407b2eb121c7e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab093b81ddc469f2b78db9e3579407b2eb121c7e", "patch": "@@ -1,3 +1,8 @@\n+2002-01-14  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/mips/mips.h (HI_AND_FP_REGS): New register class.\n+\t(CLASS_CANNOT_CHANGE_MODE): Disallow HI in little-endian mode.\n+\n 2002-01-14  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* reload1.c (reload_combine): Pass reg_sum replacement through"}, {"sha": "a6e572e04a8644a64b5ebab10640e6bac109eb54", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab093b81ddc469f2b78db9e3579407b2eb121c7e/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab093b81ddc469f2b78db9e3579407b2eb121c7e/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=ab093b81ddc469f2b78db9e3579407b2eb121c7e", "patch": "@@ -1942,6 +1942,7 @@ enum reg_class\n   HI_AND_GR_REGS,\t\t/* union classes */\n   LO_AND_GR_REGS,\n   HILO_AND_GR_REGS,\n+  HI_AND_FP_REGS,\n   ST_REGS,\t\t\t/* status registers (fp status) */\n   ALL_REGS,\t\t\t/* all registers */\n   LIM_REG_CLASSES\t\t/* max value + 1 */\n@@ -1971,6 +1972,7 @@ enum reg_class\n   \"HI_AND_GR_REGS\",\t\t\t\t\t\t\t\\\n   \"LO_AND_GR_REGS\",\t\t\t\t\t\t\t\\\n   \"HILO_AND_GR_REGS\",\t\t\t\t\t\t\t\\\n+  \"HI_AND_FP_REGS\",\t\t\t\t\t\t\t\\\n   \"ST_REGS\",\t\t\t\t\t\t\t\t\\\n   \"ALL_REGS\"\t\t\t\t\t\t\t\t\\\n }\n@@ -2002,6 +2004,7 @@ enum reg_class\n   { 0xffffffff, 0x00000000, 0x00000001 },\t/* union classes */     \\\n   { 0xffffffff, 0x00000000, 0x00000002 },\t\t\t\t\\\n   { 0xffffffff, 0x00000000, 0x00000004 },\t\t\t\t\\\n+  { 0x00000000, 0xffffffff, 0x00000001 },\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x000007f8 },\t/* status registers */\t\\\n   { 0xffffffff, 0xffffffff, 0x000007ff }\t/* all registers */\t\\\n }\n@@ -2229,10 +2232,19 @@ extern enum reg_class mips_char_to_class[256];\n    : CLASS_UNITS (MODE, UNITS_PER_WORD))\n \n /* If defined, gives a class of registers that cannot be used as the\n-   operand of a SUBREG that changes the mode of the object illegally.  */\n+   operand of a SUBREG that changes the mode of the object illegally.\n \n-#define CLASS_CANNOT_CHANGE_MODE \\\n-  (TARGET_FLOAT64 && ! TARGET_64BIT ? FP_REGS : NO_REGS)\n+   When FP regs are larger than integer regs... Er, anyone remember what\n+   goes wrong?\n+\n+   In little-endian mode, the hi-lo registers are numbered backwards,\n+   so (subreg:SI (reg:DI hi) 0) gets the high word instead of the low\n+   word as intended.  */\n+\n+#define CLASS_CANNOT_CHANGE_MODE\t\t\t\t\t\\\n+  (TARGET_BIG_ENDIAN\t\t\t\t\t\t\t\\\n+   ? (TARGET_FLOAT64 && ! TARGET_64BIT ? FP_REGS : NO_REGS)\t\t\\\n+   : (TARGET_FLOAT64 && ! TARGET_64BIT ? HI_AND_FP_REGS : HI_REG))\n \n /* Defines illegal mode changes for CLASS_CANNOT_CHANGE_MODE.  */\n "}]}