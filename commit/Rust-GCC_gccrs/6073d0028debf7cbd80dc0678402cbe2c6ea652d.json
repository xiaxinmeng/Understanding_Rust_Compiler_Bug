{"sha": "6073d0028debf7cbd80dc0678402cbe2c6ea652d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA3M2QwMDI4ZGViZjdjYmQ4MGRjMDY3ODQwMmNiZTJjNmVhNjUyZA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-09-20T21:48:31Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-09-20T21:48:31Z"}, "message": "rs6000: Don't touch below the stack pointer (PR77687)\n\nWith the 32-bit SVR4 ABI we don't have a red zone, so we have to restore\nthe callee-saved registers before we restore the stack pointer.\n\nThe previous fix for this PR failed in two ways, for huge frames: first,\nwe use a negative offset from r11 in that case, so the (mem:BLK 11) access\ndoes no good; second, sched does not handle accesses to mem:BLK correctly\nin this case (does not make dependencies).\n\nThis patch fixes it by doing a store to (mem:BLK (scratch)) instead.\nThis means no unrelated (not to stack) loads/stores can be moved over the\nstack restore either, but so be it.\n\n\n\tPR target/77687\n\t* config/rs6000/rs6000.md (stack_restore_tie): Store to a scratch\n\taddress instead of to r1 and r11.\n\ngcc/testsuite/\n\tPR target/77687\n\t* gcc.target/powerpc/pr77687.c: New testcase.\n\nFrom-SVN: r253033", "tree": {"sha": "fc2fcb802e5a5fb4290674455ed642597118e67b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc2fcb802e5a5fb4290674455ed642597118e67b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6073d0028debf7cbd80dc0678402cbe2c6ea652d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6073d0028debf7cbd80dc0678402cbe2c6ea652d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6073d0028debf7cbd80dc0678402cbe2c6ea652d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6073d0028debf7cbd80dc0678402cbe2c6ea652d/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9283471ba0d8b605a5ddf8cbd2814d81d4dd8550", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9283471ba0d8b605a5ddf8cbd2814d81d4dd8550", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9283471ba0d8b605a5ddf8cbd2814d81d4dd8550"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "371b7902f3772e7ab0cc8d474d21caa263137081", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6073d0028debf7cbd80dc0678402cbe2c6ea652d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6073d0028debf7cbd80dc0678402cbe2c6ea652d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6073d0028debf7cbd80dc0678402cbe2c6ea652d", "patch": "@@ -1,3 +1,9 @@\n+2017-09-20  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/77687\n+\t* config/rs6000/rs6000.md (stack_restore_tie): Store to a scratch\n+\taddress instead of to r1 and r11.\n+\n 2017-09-20  Sebastian Peryt  <sebastian.peryt@intel.com>\n \n \t* config.gcc: Support \"knm\"."}, {"sha": "13ba743812476e6587403b2c80c80ba6d9ee5d8b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6073d0028debf7cbd80dc0678402cbe2c6ea652d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6073d0028debf7cbd80dc0678402cbe2c6ea652d/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=6073d0028debf7cbd80dc0678402cbe2c6ea652d", "patch": "@@ -13161,14 +13161,12 @@\n \n ; Some 32-bit ABIs do not have a red zone, so the stack deallocation has to\n ; stay behind all restores from the stack, it cannot be reordered to before\n-; one.  See PR77687.  This insn is an add or mr, and a stack_tie on the\n-; operands of that.\n+; one.  See PR77687.  This insn is an add or mr, and a memory clobber.\n (define_insn \"stack_restore_tie\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(plus:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"O,rI\")))\n-   (set (mem:BLK (match_dup 0)) (const_int 0))\n-   (set (mem:BLK (match_dup 1)) (const_int 0))]\n+   (set (mem:BLK (scratch)) (const_int 0))]\n   \"TARGET_32BIT\"\n   \"@\n    mr %0,%1"}, {"sha": "eebb33d0b96d272093caa52b570c14c3bb4fcac0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6073d0028debf7cbd80dc0678402cbe2c6ea652d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6073d0028debf7cbd80dc0678402cbe2c6ea652d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6073d0028debf7cbd80dc0678402cbe2c6ea652d", "patch": "@@ -1,3 +1,8 @@\n+2017-09-19  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/77687\n+\t* gcc.target/powerpc/pr77687.c: New testcase.\n+\n 2017-09-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tP0409R2 - allow lambda capture [=, this]"}, {"sha": "95b27ae99e4127db256463d66582efd847d34e08", "filename": "gcc/testsuite/gcc.target/powerpc/pr77687.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6073d0028debf7cbd80dc0678402cbe2c6ea652d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr77687.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6073d0028debf7cbd80dc0678402cbe2c6ea652d/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr77687.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr77687.c?ref=6073d0028debf7cbd80dc0678402cbe2c6ea652d", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-options \"-std=gnu99 -O2\" } */\n+/* { dg-final { scan-assembler-not {\\mmr r?1,r?11\\M.*11.*\\mblr\\M} } } */\n+\n+/* PR77687: We used to do stack accesses (via r11) after restoring r1.  */\n+\n+void g(int, char *);\n+const char * dum = \"hello\";\n+\n+void f(int x)\n+{\n+       char big[200000];\n+ start:\n+       g(x, big);\n+       g(x, big);\n+       register void *p asm(\"r11\") = &&start;\n+       asm(\"\" : : \"r\"(p));\n+       asm(\"\" : : :\"r28\");\n+       asm(\"\" : : :\"r29\");\n+       asm(\"\" : : :\"r30\");\n+}"}]}