{"sha": "fdeeef7f2aed05eb2757871391693f555d866533", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRlZWVmN2YyYWVkMDVlYjI3NTc4NzEzOTE2OTNmNTU1ZDg2NjUzMw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2005-06-08T17:29:44Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-06-08T17:29:44Z"}, "message": "re PR libstdc++/21955 (std::stringbuf vs. in_avail)\n\n\n2005-06-08  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/21955\n\t* include/std/std_sstream.h (basic_stringbuf::showmanyc): Add.\n\tRemove unnecessary this->_M_mode decoration.\n\t* include/bits/fstream.tcc: Adjust line spacing.\n\t* testsuite/27_io/basic_streambuf/in_avail/char/1.cc: New, test\n\tbase class behavior.\n\t* testsuite/27_io/basic_streambuf/in_avail/wchar_t/1.cc: Same.\n\t* testsuite/27_io/basic_stringbuf/in_avail/char/21955.cc: New.\n\t* testsuite/27_io/basic_stringbuf/in_avail/char/1.cc: Match\n\tfilebuf behavior.\n\t* testsuite/27_io/basic_stringbuf/in_avail/wchar_t/1.cc: Same.\n\t* testsuite/27_io/basic_stringbuf/str/wchar_t/1.cc: Same.\n\t* testsuite/27_io/basic_stringbuf/str/char/1.cc: Same.\n\t* testsuite/27_io/basic_streambuf/in_avail/char/9701-3.cc: Move...\n\t* testsuite/27_io/basic_filebuf/in_avail/char/9701-3.cc: ...here.\n\nFrom-SVN: r100770", "tree": {"sha": "3d40a9b1cf39b61c1b41528d779cb747f7eb263c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d40a9b1cf39b61c1b41528d779cb747f7eb263c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdeeef7f2aed05eb2757871391693f555d866533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdeeef7f2aed05eb2757871391693f555d866533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdeeef7f2aed05eb2757871391693f555d866533", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdeeef7f2aed05eb2757871391693f555d866533/comments", "author": null, "committer": null, "parents": [{"sha": "7a9430c092d4b224dc946274119561a027da61f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a9430c092d4b224dc946274119561a027da61f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a9430c092d4b224dc946274119561a027da61f1"}], "stats": {"total": 234, "additions": 183, "deletions": 51}, "files": [{"sha": "a4fb4c8fbad55e80222d8e8297ea673276456fc3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fdeeef7f2aed05eb2757871391693f555d866533", "patch": "@@ -1,3 +1,21 @@\n+2005-06-08  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/21955\n+\t* include/std/std_sstream.h (basic_stringbuf::showmanyc): Add.\n+\tRemove unnecessary this->_M_mode decoration.\n+\t* include/bits/fstream.tcc: Adjust line spacing.\t\n+\t* testsuite/27_io/basic_streambuf/in_avail/char/1.cc: New, test\n+\tbase class behavior.\n+\t* testsuite/27_io/basic_streambuf/in_avail/wchar_t/1.cc: Same.\n+\t* testsuite/27_io/basic_stringbuf/in_avail/char/21955.cc: New.\n+\t* testsuite/27_io/basic_stringbuf/in_avail/char/1.cc: Match\n+\tfilebuf behavior.\n+\t* testsuite/27_io/basic_stringbuf/in_avail/wchar_t/1.cc: Same.\n+\t* testsuite/27_io/basic_stringbuf/str/wchar_t/1.cc: Same.\n+\t* testsuite/27_io/basic_stringbuf/str/char/1.cc: Same.\n+\t* testsuite/27_io/basic_streambuf/in_avail/char/9701-3.cc: Move...\n+\t* testsuite/27_io/basic_filebuf/in_avail/char/9701-3.cc: ...here.\n+\t\n 2005-06-07  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* acinclude.m4 (GLIBCXX_ENABLE_C99): Use C++ compiler for complex"}, {"sha": "0228322f2ea57b5d87d9f63a16b113294b647a70", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=fdeeef7f2aed05eb2757871391693f555d866533", "patch": "@@ -203,8 +203,7 @@ namespace std\n \t    return traits_type::to_int_type(*this->gptr());\n \n \t  // Get and convert input sequence.\n-\t  const size_t __buflen = _M_buf_size > 1\n-\t                          ? _M_buf_size - 1 : 1;\n+\t  const size_t __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;\n \n \t  // Will be set to true if ::read() returns 0 indicating EOF.\n \t  bool __got_eof = false;"}, {"sha": "52c416f85b922c5cda10cb4571cedf577cea46f6", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=fdeeef7f2aed05eb2757871391693f555d866533", "patch": "@@ -1,6 +1,6 @@\n // String based streams -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -127,16 +127,18 @@ namespace std\n       __string_type\n       str() const\n       {\n+\t__string_type __ret;\n \tif (this->pptr())\n \t  {\n \t    // The current egptr() may not be the actual string end.\n \t    if (this->pptr() > this->egptr())\n-\t      return __string_type(this->pbase(), this->pptr());\n+\t      __ret = __string_type(this->pbase(), this->pptr());\n \t    else\n- \t      return __string_type(this->pbase(), this->egptr());\n+ \t      __ret = __string_type(this->pbase(), this->egptr());\n \t  }\n \telse\n-\t  return _M_string;\n+\t  __ret = _M_string;\n+\treturn __ret;\n       }\n \n       /**\n@@ -151,22 +153,33 @@ namespace std\n       {\n \t// Cannot use _M_string = __s, since v3 strings are COW.\n \t_M_string.assign(__s.data(), __s.size());\n-\t_M_stringbuf_init(this->_M_mode);\n+\t_M_stringbuf_init(_M_mode);\n       }\n \n     protected:\n       // Common initialization code goes here.\n       void\n       _M_stringbuf_init(ios_base::openmode __mode)\n       {\n-\tthis->_M_mode = __mode;\n-\n+\t_M_mode = __mode;\n \t__size_type __len = 0;\n-\tif (this->_M_mode & (ios_base::ate | ios_base::app))\n+\tif (_M_mode & (ios_base::ate | ios_base::app))\n \t  __len = _M_string.size();\n \t_M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);\n       }\n \n+      virtual streamsize\n+      showmanyc()\n+      { \n+\tstreamsize __ret = -1;\n+\tif (_M_mode & ios_base::in)\n+\t  {\n+\t    _M_update_egptr();\n+\t    __ret = this->egptr() - this->gptr();\n+\t  }\n+\treturn __ret;\n+      }\n+\n       virtual int_type\n       underflow();\n \n@@ -223,8 +236,8 @@ namespace std\n       void\n       _M_sync(char_type* __base, __size_type __i, __size_type __o)\n       {\n-\tconst bool __testin = this->_M_mode & ios_base::in;\n-\tconst bool __testout = this->_M_mode & ios_base::out;\n+\tconst bool __testin = _M_mode & ios_base::in;\n+\tconst bool __testout = _M_mode & ios_base::out;\n \tchar_type* __end = __base + _M_string.size();\n \n \tif (__testin)\n@@ -252,8 +265,7 @@ namespace std\n       void\n       _M_update_egptr()\n       {\n-\tconst bool __testin = this->_M_mode & ios_base::in;\n-\n+\tconst bool __testin = _M_mode & ios_base::in;\n \tif (this->pptr() && this->pptr() > this->egptr())\n \t  if (__testin)\n \t    this->setg(this->eback(), this->gptr(), this->pptr());"}, {"sha": "5dc68c62b9a8be2035037a7383a41ea43ac2a514", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/in_avail/char/9701-3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fin_avail%2Fchar%2F9701-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fin_avail%2Fchar%2F9701-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fin_avail%2Fchar%2F9701-3.cc?ref=fdeeef7f2aed05eb2757871391693f555d866533", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/in_avail/char/9701-3.cc"}, {"sha": "ee9a81c816d586a2f36fc6299968f91e202f589a", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/in_avail/char/1.cc", "status": "renamed", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fin_avail%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fin_avail%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fin_avail%2Fchar%2F1.cc?ref=fdeeef7f2aed05eb2757871391693f555d866533", "patch": "@@ -1,4 +1,6 @@\n-// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+// 2005-06-07 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -16,44 +18,37 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-// 27.5.2.2.3 Get area\n+// 27.8.1.4 Overridden virtual functions\n \n #include <fstream>\n #include <testsuite_hooks.h>\n \n-class Derived_fbuf : public std::wfilebuf\n-{\n-public:\n-  const char_type* pub_egptr() const\n-  { return egptr(); }\n+typedef std::basic_streambuf<char> \tstreambuf_type;\n \n-  const char_type* pub_gptr() const\n-  { return gptr(); }\n+struct testbuf : streambuf_type\n+{\n+  testbuf() { }\n };\n \n-// libstdc++/9701 (in_avail)\n-void test01()\n+void test05() \n {\n-  using namespace std;\n-  bool test __attribute__((unused)) = true;\n-  const char* name = \"tmp_file1_w\";\n+  typedef streambuf_type::int_type \tint_type;\n+  typedef streambuf_type::traits_type \ttraits_type;\n+  typedef streambuf_type::pos_type \tpos_type;\n+  typedef streambuf_type::off_type \toff_type;\n+  typedef size_t \t\t\tsize_type;\n \n-  Derived_fbuf df2;\n-  df2.open(name, ios_base::in | ios_base::out | ios_base::trunc);\n-\n-  df2.sputn(L\"Comomoc\", 7);\n-\n-  df2.pubseekoff(0, ios_base::beg);\n-  df2.sbumpc();\n-  df2.sputbackc(L't');\n+  bool test __attribute__((unused)) = true;\n+  std::streamoff  \t\t\tstrmof_1, strmof_2;\n+  testbuf\tsb01;\n \n-  VERIFY( df2.pub_gptr() < df2.pub_egptr() );\n-  VERIFY( df2.in_avail() == df2.pub_egptr() - df2.pub_gptr() );\n+  // int in_avail()\n+  strmof_1 = sb01.in_avail();\n+  VERIFY( strmof_1  == 0 ); \n }\n \n-int\n-main()\n+int main() \n {\n-  test01();\n+  test05();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/in_avail/wchar_t/9701-3.cc"}, {"sha": "fd10c0b0d9d584586a9f6a9b221329bd8056ca95", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/in_avail/wchar_t/1.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fin_avail%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fin_avail%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fin_avail%2Fwchar_t%2F1.cc?ref=fdeeef7f2aed05eb2757871391693f555d866533", "patch": "@@ -0,0 +1,54 @@\n+// 2005-06-07 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+typedef std::basic_streambuf<wchar_t> \tstreambuf_type;\n+\n+struct testbuf : streambuf_type\n+{\n+  testbuf() { }\n+};\n+\n+void test05() \n+{\n+  typedef streambuf_type::int_type \tint_type;\n+  typedef streambuf_type::traits_type \ttraits_type;\n+  typedef streambuf_type::pos_type \tpos_type;\n+  typedef streambuf_type::off_type \toff_type;\n+  typedef size_t \t\t\tsize_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  std::streamoff  \t\t\tstrmof_1, strmof_2;\n+  testbuf\tsb01;\n+\n+  // int in_avail()\n+  strmof_1 = sb01.in_avail();\n+  VERIFY( strmof_1  == 0 ); \n+}\n+\n+int main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "5833c9652c933f5c7da7302e003c0469b6a9eada", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/in_avail/char/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fin_avail%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fin_avail%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fin_avail%2Fchar%2F1.cc?ref=fdeeef7f2aed05eb2757871391693f555d866533", "patch": "@@ -1,6 +1,6 @@\n // 981208 bkoz test functionality of basic_stringbuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -43,8 +43,8 @@ void test04()\n   VERIFY( strmof_1 == static_cast<std::streamoff>(str_01.length()) );\n   VERIFY( strmof_2 == static_cast<std::streamoff>(str_02.length()) );\n   strmof_1 = strb_03.in_avail(); \n-  // zero cuz write-only, or eof()? zero, from showmany\n-  VERIFY( strmof_1 == 0 ); \n+  // zero cuz write-only, or eof() to match basic_filebuf\n+  VERIFY( strmof_1 == -1 ); \n }\n \n int main()"}, {"sha": "023418cfd64988a405bb4c48981ef9db856b1670", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/in_avail/char/21955.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fin_avail%2Fchar%2F21955.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fin_avail%2Fchar%2F21955.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fin_avail%2Fchar%2F21955.cc?ref=fdeeef7f2aed05eb2757871391693f555d866533", "patch": "@@ -0,0 +1,54 @@\n+// 2005-06-07 Benjamin Kosnik\n+\n+// Copyright (C) 2005\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <stdexcept>\n+\n+double  \n+test_stringstream()\n+{\n+  double result;\n+  char* source = \"1918\"; \n+  std::stringstream s;\n+  s << source;\n+\n+  std::string tmp = s.str();\n+  std::streambuf* sb = s.rdbuf();\n+  int i = sb->in_avail();\n+\n+  if (i)\n+    {\n+      s >> result;\n+    }\n+  else\n+    {\n+      throw std::runtime_error(\"conversion failed\");\n+    }\n+  return result;\n+}\n+\n+\n+int main ()\n+{\n+  test_stringstream();\n+  return 0;\n+}"}, {"sha": "346a4db1baf658269ee8c0643204055418581381", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/in_avail/wchar_t/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fin_avail%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fin_avail%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fin_avail%2Fwchar_t%2F1.cc?ref=fdeeef7f2aed05eb2757871391693f555d866533", "patch": "@@ -1,6 +1,6 @@\n // 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -43,8 +43,8 @@ void test04()\n   VERIFY( strmof_1 == static_cast<std::streamoff>(str_01.length()) );\n   VERIFY( strmof_2 == static_cast<std::streamoff>(str_02.length()) );\n   strmof_1 = strb_03.in_avail(); \n-  // zero cuz write-only, or eof()? zero, from showmany\n-  VERIFY( strmof_1 == 0 ); \n+  // zero cuz write-only, or eof() to match basic_filebuf\n+  VERIFY( strmof_1 == -1 ); \n }\n \n int main()"}, {"sha": "d788f1274c2bd2a1891098e643692d03cc7c600b", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/str/char/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fchar%2F1.cc?ref=fdeeef7f2aed05eb2757871391693f555d866533", "patch": "@@ -1,6 +1,6 @@\n // 981208 bkoz test functionality of basic_stringbuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -45,7 +45,7 @@ void test03()\n   std::streamsize d1 = strb_01.in_avail();\n   std::streamsize d2 = strb_03.in_avail();\n   VERIFY( d1 ); // non-zero\n-  VERIFY( !d2 ); // zero, cuz ios_base::out\n+  VERIFY( d2 == -1 ); // -1, cuz ios_base::out\n   VERIFY( d1 != d2 ); //these should be the same\n   VERIFY( static_cast<std::streamsize>(str_01.length()) == d1 );  \n   VERIFY( strb_01.str() == strb_03.str() ); //ditto"}, {"sha": "cc0e0ab2dcddb2967479dc3dd118f56af7dca04b", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/str/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdeeef7f2aed05eb2757871391693f555d866533/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fstr%2Fwchar_t%2F1.cc?ref=fdeeef7f2aed05eb2757871391693f555d866533", "patch": "@@ -1,6 +1,6 @@\n // 981208 bkoz test functionality of basic_stringbuf for char_type == wchar_t\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -45,7 +45,7 @@ void test03()\n   std::streamsize d1 = strb_01.in_avail();\n   std::streamsize d2 = strb_03.in_avail();\n   VERIFY( d1 ); // non-zero\n-  VERIFY( !d2 ); // zero, cuz ios_base::out\n+  VERIFY( d2 == -1 ); // -1, cuz ios_base::out\n   VERIFY( d1 != d2 ); //these should be the same\n   VERIFY( static_cast<std::streamsize>(str_01.length()) == d1 );  \n   VERIFY( strb_01.str() == strb_03.str() ); //ditto"}]}