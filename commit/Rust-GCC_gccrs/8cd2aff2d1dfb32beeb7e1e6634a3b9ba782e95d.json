{"sha": "8cd2aff2d1dfb32beeb7e1e6634a3b9ba782e95d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNkMmFmZjJkMWRmYjMyYmVlYjdlMWU2NjM0YTNiOWJhNzgyZTk1ZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-12T11:42:18Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-03-12T11:42:18Z"}, "message": "Add prototypes for static functions.\n\n(jump_optimize, delete_insn): Use GET_RTX_CLASS to test for insns.\n(mark_jump_label): Delete dead code.\n(delete_computation, redirect_tablejump): No longer static.\n\nFrom-SVN: r6753", "tree": {"sha": "e0e420da6cbfa1847e6943168bcfbbe89ce9c8cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0e420da6cbfa1847e6943168bcfbbe89ce9c8cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cd2aff2d1dfb32beeb7e1e6634a3b9ba782e95d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd2aff2d1dfb32beeb7e1e6634a3b9ba782e95d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cd2aff2d1dfb32beeb7e1e6634a3b9ba782e95d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd2aff2d1dfb32beeb7e1e6634a3b9ba782e95d/comments", "author": null, "committer": null, "parents": [{"sha": "ef903ecaa925f7a3479b9c9e5d735b56c640ddf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef903ecaa925f7a3479b9c9e5d735b56c640ddf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef903ecaa925f7a3479b9c9e5d735b56c640ddf6"}], "stats": {"total": 42, "additions": 16, "deletions": 26}, "files": [{"sha": "e5d287677ea859bdd3508f34ca671a3365e46303", "filename": "gcc/jump.c", "status": "modified", "additions": 16, "deletions": 26, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd2aff2d1dfb32beeb7e1e6634a3b9ba782e95d/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd2aff2d1dfb32beeb7e1e6634a3b9ba782e95d/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=8cd2aff2d1dfb32beeb7e1e6634a3b9ba782e95d", "patch": "@@ -103,19 +103,16 @@ int can_reach_end;\n \n static int cross_jump_death_matters = 0;\n \n-static int duplicate_loop_exit_test ();\n-void redirect_tablejump ();\n-static int delete_labelref_insn ();\n-static void mark_jump_label ();\n-void delete_jump ();\n-void delete_computation ();\n-static void delete_from_jump_chain ();\n-static int tension_vector_labels ();\n-static void find_cross_jump ();\n-static void do_cross_jump ();\n-static int jump_back_p ();\n-\n-extern rtx gen_jump ();\n+static int duplicate_loop_exit_test\tPROTO((rtx));\n+static void find_cross_jump\t\tPROTO((rtx, rtx, int, rtx *, rtx *));\n+static void do_cross_jump\t\tPROTO((rtx, rtx, rtx));\n+static int jump_back_p\t\t\tPROTO((rtx, rtx));\n+static int tension_vector_labels\tPROTO((rtx, int));\n+static void mark_jump_label\t\tPROTO((rtx, rtx, int));\n+static void delete_computation\t\tPROTO((rtx));\n+static void delete_from_jump_chain\tPROTO((rtx));\n+static int delete_labelref_insn\t\tPROTO((rtx, rtx, int));\n+static void redirect_tablejump\t\tPROTO((rtx, rtx));\n \f\n /* Delete no-op jumps and optimize jumps to jumps\n    and jumps around jumps.\n@@ -210,8 +207,7 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n      also make a chain of all returns.  */\n \n   for (insn = f; insn; insn = NEXT_INSN (insn))\n-    if ((GET_CODE (insn) == JUMP_INSN || GET_CODE (insn) == INSN\n-\t || GET_CODE (insn) == CALL_INSN)\n+    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n \t&& ! INSN_DELETED_P (insn))\n       {\n \tmark_jump_label (PATTERN (insn), insn, cross_jump);\n@@ -3081,13 +3077,8 @@ mark_jump_label (x, insn, cross_jump)\n \t\t    || ! (GET_CODE (next) == JUMP_INSN\n \t\t\t  && (GET_CODE (PATTERN (next)) == ADDR_VEC\n \t\t\t      || GET_CODE (PATTERN (next)) == ADDR_DIFF_VEC)))\n-\t\t  {\n-\t\t    REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_LABEL, label,\n-\t\t\t\t\t\tREG_NOTES (insn));\n-\t\t    /* Record in the note whether label is nonlocal.  */\n-\t\t    LABEL_REF_NONLOCAL_P (REG_NOTES (insn))\n-\t\t      = LABEL_REF_NONLOCAL_P (x);\n-\t\t  }\n+\t\t  REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_LABEL, label,\n+\t\t\t\t\t      REG_NOTES (insn));\n \t      }\n \t  }\n \treturn;\n@@ -3147,7 +3138,7 @@ delete_jump (insn)\n    On machines with CC0, if CC0 is used in this insn, we may be able to\n    delete the insn that set it.  */\n \n-void\n+static void\n delete_computation (insn)\n      rtx insn;\n {\n@@ -3361,8 +3352,7 @@ delete_insn (insn)\n     {\n       register RTX_CODE code;\n       while (next != 0\n-\t     && ((code = GET_CODE (next)) == INSN\n-\t\t || code == JUMP_INSN || code == CALL_INSN\n+\t     && (GET_RTX_CLASS (code = GET_CODE (next)) == 'i'\n \t\t || code == NOTE\n \t\t || (code == CODE_LABEL && INSN_DELETED_P (next))))\n \t{\n@@ -3677,7 +3667,7 @@ redirect_exp (loc, olabel, nlabel, insn)\n    before the jump references that label and delete it and logical successors\n    too.  */\n \n-void\n+static void\n redirect_tablejump (jump, nlabel)\n      rtx jump, nlabel;\n {"}]}