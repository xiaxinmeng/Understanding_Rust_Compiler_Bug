{"sha": "d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZmZjg1NzVmODYxZWUwYzhlNzNiNWQ1YzlmZTkwYTgxNDhjOWY4ZA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@apple.com", "date": "2005-04-26T00:50:31Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2005-04-26T00:50:31Z"}, "message": "darwin.c (darwin_encode_section_info): Always set MACHO_SYMBOL_STATIC for all ! TREE_PUBLIC symbols.\n\n        * config/darwin.c (darwin_encode_section_info): Always set\n        MACHO_SYMBOL_STATIC for all ! TREE_PUBLIC symbols.\n\n\n        * objc.dg/fix-and-continue-1.m: Add.\n\nFrom-SVN: r98755", "tree": {"sha": "69d310537455ae26ab8d4c59afb14ba65a644e41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69d310537455ae26ab8d4c59afb14ba65a644e41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d/comments", "author": null, "committer": null, "parents": [{"sha": "2653bb0c120ca2454c2d9af1b94674ad0c5e9732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2653bb0c120ca2454c2d9af1b94674ad0c5e9732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2653bb0c120ca2454c2d9af1b94674ad0c5e9732"}], "stats": {"total": 127, "additions": 112, "deletions": 15}, "files": [{"sha": "51a79503f1ff96721ff0ab769b770fe3bbb89678", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d", "patch": "@@ -1,3 +1,8 @@\n+2005-04-25  Mike Stump  <mrs@apple.com>\n+\n+\t* config/darwin.c (darwin_encode_section_info): Always set\n+\tMACHO_SYMBOL_STATIC for all ! TREE_PUBLIC symbols.\n+\n 2005-04-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* collect2.c, gcc.c, gcov-dump.c, gcov.c, gen-protos.c,"}, {"sha": "cd8ba35f1cf556a4813a107af4acf87ce00602be", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d", "patch": "@@ -55,26 +55,26 @@ Boston, MA 02111-1307, USA.  */\n    running program and replace existing functions and methods of that\n    translation unit with with versions of those functions and methods\n    from the newly compiled translation unit.  The new functions access\n-   the existing static data from the old translation unit, if the data\n-   existed in the unit to be replaced, and from the new translation\n-   unit, for new data.\n+   the existing static symbols from the old translation unit, if the\n+   symbol existed in the unit to be replaced, and from the new\n+   translation unit, otherwise.\n \n    The changes are to insert 5 nops at the beginning of all functions\n-   and to use indirection to get at static duration data.  The 5 nops\n+   and to use indirection to get at static symbols.  The 5 nops\n    are required by consumers of the generated code.  Currently, gdb\n    uses this to patch in a jump to the overriding function, this\n    allows all uses of the old name to forward to the replacement,\n    including existing function pointers and virtual methods.  See\n    rs6000_emit_prologue for the code that handles the nop insertions.\n  \n    The added indirection allows gdb to redirect accesses to static\n-   duration data from the newly loaded translation unit to the\n-   existing data, if any.  @code{static} data is special and is\n-   handled by setting the second word in the .non_lazy_symbol_pointer\n-   data structure to the address of the data.  See indirect_data for\n-   the code that handles the extra indirection, and\n-   machopic_output_indirection and its use of MACHO_SYMBOL_STATIC for\n-   the code that handles @code{static} data indirection.  */\n+   symbols from the newly loaded translation unit to the existing\n+   symbol, if any.  @code{static} symbols are special and are handled by\n+   setting the second word in the .non_lazy_symbol_pointer data\n+   structure to symbol.  See indirect_data for the code that handles\n+   the extra indirection, and machopic_output_indirection and its use\n+   of MACHO_SYMBOL_STATIC for the code that handles @code{static}\n+   symbol indirection.  */\n \n \n int\n@@ -911,7 +911,7 @@ machopic_output_indirection (void **slot, void *data)\n \t the non-lazy symbol pointer data structure when they are\n \t defined.  This allows the runtime to rebind newer instances\n \t of the translation unit with the original instance of the\n-\t data.  */\n+\t symbol.  */\n \n       if ((SYMBOL_REF_FLAGS (symbol) & MACHO_SYMBOL_STATIC)\n \t  && machopic_symbol_defined_p (symbol))\n@@ -987,9 +987,7 @@ darwin_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)\n \t      && DECL_INITIAL (decl) != error_mark_node)))\n     SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_FLAG_DEFINED;\n \n-  if (TREE_CODE (decl) == VAR_DECL\n-      && indirect_data (sym_ref)\n-      && ! TREE_PUBLIC (decl))\n+  if (! TREE_PUBLIC (decl))\n     SYMBOL_REF_FLAGS (sym_ref) |= MACHO_SYMBOL_STATIC;\n }\n "}, {"sha": "5efc74bb8a68be21a817060289d017642f041cb7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d", "patch": "@@ -1,3 +1,7 @@\n+2005-04-25  Mike Stump  <mrs@apple.com>\n+\n+\t* objc.dg/fix-and-continue-1.m: Add.\n+\n 2005-04-25  Roger Sayle  <roger@eyesopen.com>\n \n \tPR c++/20995"}, {"sha": "49250c2d84f058b0f4484ab65fee7118c6e07afb", "filename": "gcc/testsuite/objc.dg/fix-and-continue-1.m", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ffix-and-continue-1.m?ref=d6ff8575f861ee0c8e73b5d5c9fe90a8148c9f8d", "patch": "@@ -0,0 +1,90 @@\n+/* Fix and continue should not interfere with computation of\n+   local (static) function addresses.  */\n+/* Author: Ziemowit Laski <zlaski@apple.com> */\n+   \n+/* { dg-do run  { target *-*-darwin* } } */\n+/* { dg-options \"-mfix-and-continue\" } */\n+\n+#include <objc/Object.h>\n+#include <stdlib.h>\n+\n+@class MyTarget, MySet;\n+\n+int global_value = 0;\n+\n+@interface MyTargetBuildContext : Object\n+{\n+  MyTarget * _target;\n+  unsigned _cacheInvalDisableCount;\n+  BOOL _cacheInvalidationNeeded;\n+  unsigned short _isCreatingDependencies:1;\n+  unsigned short _isCreatingHeadermap:1;\n+  unsigned short _haveAddedIdleTimeInvoc:1;\n+  BOOL _hasSetUpBuildSettings;\n+}\n+- (id)initWithTarget:(MyTarget *)target;\n+- (MyTarget *)target;\n+@end\n+\n+@interface MyTargetBuildContext (PrivateMethods)\n++ (MySet *)_headerFileExtensions;\n+@end\n+\n+@interface MyCountedSet: Object {\n+@public\n+  int cardinality;\n+}\n+- (id)init;\n+- (id)sortedArrayUsingFunction:(int (*)(id, id, void *))comparator with:(int)value;\n+@end\n+\n+@implementation MyCountedSet\n+- (id)init {\n+  cardinality = 5;\n+  global_value = 17;\n+  return self;\n+}\n+- (id)sortedArrayUsingFunction:(int (*)(id, id, void *))comparator with:(int)value {\n+  if(value == comparator(self, self, self))\n+    return self;\n+  return nil;\n+}  \n+@end\n+\n+@implementation MyTargetBuildContext : Object\n+- (id)initWithTarget:(MyTarget *)target\n+{\n+  self = [super init];\n+  return self;\n+}\n+- (MyTarget *)target\n+{\n+  return _target;\n+}\n+\n+static int _MyCompareObjectsByDecreasingSetCount (id object1, id object2, MyCountedSet * countedSet)\n+{\n+  global_value = 5;\n+  return countedSet->cardinality;\n+}\n++ (MySet *)_headerFileExtensions\n+{\n+  MySet * _headerFileExtensions = 0;\n+  return _headerFileExtensions;\n+}\n+- (void)_recomputeHeadermap\n+{\n+  MyCountedSet *set = [MyCountedSet new];\n+  int (*functionPointer)(id, id, void *) = (int (*)(id, id, void *))_MyCompareObjectsByDecreasingSetCount;\n+  id result = [set sortedArrayUsingFunction:functionPointer with:5];\n+}\n+@end\n+\n+int main(void) {\n+  MyTargetBuildContext *ctx = [MyTargetBuildContext new];\n+  [ctx _recomputeHeadermap];\n+  if (global_value != 5)\n+    abort();\n+\n+  return 0;\n+}"}]}