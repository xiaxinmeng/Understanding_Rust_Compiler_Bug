{"sha": "e14651de00285582a6a6fb4a15e43055f1bbd9b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE0NjUxZGUwMDI4NTU4MmE2YTZmYjRhMTVlNDMwNTVmMWJiZDliNw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2011-11-01T21:48:22Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2011-11-01T21:48:22Z"}, "message": "re PR tree-optimization/50908 (building emacs-23.3; gives msg: indent.c:1140:1: internal compiler error: in verify_dominators, at dominance.c:1041)\n\n2011-11-01  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/50908\n\t* gcc.dg/pr50908.c: New test.\n\t* gcc.dg/pr50908-2.c: Same.\n\t* gcc.dg/pr50908-3.c: Same.\n\nFrom-SVN: r180746", "tree": {"sha": "55414247249da974c02500b289ef85c80a37b122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55414247249da974c02500b289ef85c80a37b122"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e14651de00285582a6a6fb4a15e43055f1bbd9b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14651de00285582a6a6fb4a15e43055f1bbd9b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e14651de00285582a6a6fb4a15e43055f1bbd9b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14651de00285582a6a6fb4a15e43055f1bbd9b7/comments", "author": null, "committer": null, "parents": [{"sha": "c2a8964176acaf6c08c68c1dfa34234bd63ba5be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a8964176acaf6c08c68c1dfa34234bd63ba5be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a8964176acaf6c08c68c1dfa34234bd63ba5be"}], "stats": {"total": 274, "additions": 274, "deletions": 0}, "files": [{"sha": "a1079322db2fd8f9d602b7b66227c84d45dc7803", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14651de00285582a6a6fb4a15e43055f1bbd9b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14651de00285582a6a6fb4a15e43055f1bbd9b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e14651de00285582a6a6fb4a15e43055f1bbd9b7", "patch": "@@ -1,3 +1,10 @@\n+2011-11-01  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/50908\n+\t* gcc.dg/pr50908.c: New test.\n+\t* gcc.dg/pr50908-2.c: Same.\n+\t* gcc.dg/pr50908-3.c: Same.\n+\n 2011-11-01  Ira Rosen  <ira.rosen@linaro.org>\n \n \t* gcc.dg/vect/no-scevccp-outer-6-global.c: Expect to vectorize"}, {"sha": "bffea335a706161edadef59879bef3b852f100f2", "filename": "gcc/testsuite/gcc.dg/pr50908-2.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14651de00285582a6a6fb4a15e43055f1bbd9b7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50908-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14651de00285582a6a6fb4a15e43055f1bbd9b7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50908-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50908-2.c?ref=e14651de00285582a6a6fb4a15e43055f1bbd9b7", "patch": "@@ -0,0 +1,80 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-tail-merge\" } */\n+\n+typedef struct rtx_def *rtx;\n+enum debug_info_levels\n+{\n+  ARM_FLOAT_ABI_SOFT, ARM_FLOAT_ABI_SOFTFP, ARM_FLOAT_ABI_HARD\n+};\n+struct gcc_options\n+{\n+  int x_target_flags;\n+};\n+extern struct gcc_options global_options;\n+extern int arm_arch_thumb2;\n+enum rtx_code\n+{\n+  UNSPEC, UNSPEC_VOLATILE, ADDR_VEC, SET, CLOBBER, CALL, RETURN,\n+    SIMPLE_RETURN, EH_RETURN, TRAP_IF, CONST_INT, CONST_FIXED, CONST_DOUBLE,\n+    CONST_VECTOR, CONST_STRING, CONST, PC, REG, SCRATCH, SUBREG,\n+    STRICT_LOW_PART, CONCAT, CONCATN, MEM, LABEL_REF, SYMBOL_REF, CC0,\n+    IF_THEN_ELSE, COMPARE, PLUS, MINUS, NEG, MULT, SS_MULT, US_MULT, DIV,\n+    SS_DIV, US_DIV, MOD, UDIV, UMOD, AND, IOR, XOR, NOT, ASHIFT, ROTATE,\n+    ASHIFTRT, LSHIFTRT, ROTATERT, PRE_DEC, PRE_INC, POST_DEC, POST_INC,\n+    PRE_MODIFY, POST_MODIFY, NE, EQ, GE, GT, LE, LT, GEU, GTU, LEU, LTU,\n+    UNORDERED, ORDERED, UNEQ, UNGE, UNGT, UNLE, UNLT, LTGT, SIGN_EXTEND,\n+    ZERO_EXTEND, TRUNCATE, FLOAT_EXTEND, FLOAT_TRUNCATE, FLOAT, FIX,\n+    UNSIGNED_FLOAT, UNSIGNED_FIX, SIGN_EXTRACT, ZERO_EXTRACT, HIGH, LO_SUM,\n+    VEC_MERGE, VEC_SELECT, VEC_CONCAT, VEC_DUPLICATE, SS_PLUS, US_PLUS,\n+    SS_MINUS, SS_NEG, US_NEG, SS_ABS, SS_ASHIFT, US_ASHIFT, US_MINUS,\n+    SS_TRUNCATE, US_TRUNCATE, FMA, VAR_LOCATION, DEBUG_IMPLICIT_PTR,\n+    ENTRY_VALUE, DEBUG_PARAMETER_REF, LAST_AND_UNUSED_RTX_CODE\n+};\n+union rtunion_def\n+{\n+};\n+struct rtx_def\n+{\n+  enum rtx_code code:16;\n+}\n+builtin_info_type;\n+enum constraint_num\n+{\n+  CONSTRAINT__UNKNOWN =\n+    0, CONSTRAINT_f, CONSTRAINT_t, CONSTRAINT_v, CONSTRAINT_w, CONSTRAINT_x,\n+    CONSTRAINT_y, CONSTRAINT_z, CONSTRAINT_l, CONSTRAINT_h, CONSTRAINT_j,\n+    CONSTRAINT_Pj, CONSTRAINT_PJ, CONSTRAINT_k, CONSTRAINT_b, CONSTRAINT_c,\n+    CONSTRAINT_I, CONSTRAINT_J, CONSTRAINT_K, CONSTRAINT_L, CONSTRAINT_M,\n+    CONSTRAINT_N, CONSTRAINT_O, CONSTRAINT_Pa, CONSTRAINT_Pb, CONSTRAINT_Pc,\n+    CONSTRAINT_Pd, CONSTRAINT_Ps, CONSTRAINT_Pt, CONSTRAINT_Pu, CONSTRAINT_Pv,\n+    CONSTRAINT_Pw, CONSTRAINT_Px, CONSTRAINT_Py, CONSTRAINT_G, CONSTRAINT_H,\n+    CONSTRAINT_Dz, CONSTRAINT_Da, CONSTRAINT_Db, CONSTRAINT_Dc, CONSTRAINT_Di,\n+    CONSTRAINT_Dn, CONSTRAINT_Dl, CONSTRAINT_DL, CONSTRAINT_Dv, CONSTRAINT_Dy,\n+    CONSTRAINT_Ut, CONSTRAINT_Uv, CONSTRAINT_Uy, CONSTRAINT_Un, CONSTRAINT_Um,\n+    CONSTRAINT_Us, CONSTRAINT_Uq, CONSTRAINT_Q, CONSTRAINT_Uu, CONSTRAINT_Uw,\n+    CONSTRAINT__LIMIT\n+};\n+typedef struct VEC_char_base\n+{\n+}\n+VEC_int_heap;\n+static inline int\n+satisfies_constraint_j (rtx op)\n+{\n+  long long ival = 0;\n+  return ((((!((global_options.x_target_flags & (1 << 14)) != 0))\n+\t    || arm_arch_thumb2) && arm_arch_thumb2))\n+    && ((((enum rtx_code) (op)->code) == HIGH)\n+\t|| ((((enum rtx_code) (op)->code) == CONST_INT)\n+\t    && (((ival & 0xffff0000) == 0))));\n+}\n+\n+int\n+constraint_satisfied_p (rtx op, enum constraint_num c)\n+{\n+  switch (c)\n+    {\n+    case CONSTRAINT_j:\n+      return satisfies_constraint_j (op);\n+    }\n+}"}, {"sha": "60db03dae8559f3890e1d8ac0f09795c2ee367e6", "filename": "gcc/testsuite/gcc.dg/pr50908-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14651de00285582a6a6fb4a15e43055f1bbd9b7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50908-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14651de00285582a6a6fb4a15e43055f1bbd9b7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50908-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50908-3.c?ref=e14651de00285582a6a6fb4a15e43055f1bbd9b7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-tail-merge\" } */\n+\n+extern int v1;\n+extern int v2;\n+\n+void\n+f ()\n+{\n+  if (v2 || v1)\n+    (!(v1)) ? (void) 0 : (void) g ();\n+}"}, {"sha": "75341f8f105bc53f207ddb64ed769d69fa926d74", "filename": "gcc/testsuite/gcc.dg/pr50908.c", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e14651de00285582a6a6fb4a15e43055f1bbd9b7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50908.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e14651de00285582a6a6fb4a15e43055f1bbd9b7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50908.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr50908.c?ref=e14651de00285582a6a6fb4a15e43055f1bbd9b7", "patch": "@@ -0,0 +1,175 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -ftree-tail-merge\" } */\n+\n+enum Lisp_Type\n+{\n+  Lisp_Int0 = 0, Lisp_Int1 = 4, Lisp_Symbol = 2, Lisp_Misc = 3, Lisp_String =\n+    1, Lisp_Vectorlike = 5, Lisp_Cons = 6, Lisp_Float = 7,\n+};\n+typedef long Lisp_Object;\n+enum pvec_type\n+{\n+  PVEC_NORMAL_VECTOR = 0, PVEC_PROCESS = 0x200, PVEC_FRAME =\n+    0x400, PVEC_COMPILED = 0x800, PVEC_WINDOW =\n+    0x1000, PVEC_WINDOW_CONFIGURATION = 0x2000, PVEC_SUBR =\n+    0x4000, PVEC_CHAR_TABLE = 0x8000, PVEC_BOOL_VECTOR =\n+    0x10000, PVEC_BUFFER = 0x20000, PVEC_HASH_TABLE = 0x40000, PVEC_TERMINAL =\n+    0x80000, PVEC_SUB_CHAR_TABLE = 0x100000, PVEC_FONT =\n+    0x200000, PVEC_OTHER = 0x400000, PVEC_TYPE_MASK = 0x7ffe00\n+};\n+struct Lisp_Vector\n+{\n+  unsigned long size;\n+};\n+struct Lisp_Char_Table\n+{\n+  Lisp_Object defalt;\n+  Lisp_Object ascii;\n+};\n+struct Lisp_Sub_Char_Table\n+{\n+  Lisp_Object contents[1];\n+};\n+extern Lisp_Object Qnil, Qt, Qquote, Qlambda, Qsubr, Qunbound;\n+struct buffer_text\n+{\n+  unsigned char *beg;\n+  long gpt_byte;\n+  long gap_size;\n+};\n+struct buffer\n+{\n+  struct buffer_text *text;\n+  struct region_cache *width_run_cache;\n+  Lisp_Object tab_width;\n+  Lisp_Object ctl_arrow;\n+};\n+extern struct buffer *current_buffer;\n+extern Lisp_Object Vchar_width_table;\n+struct frame\n+{\n+  long text_lines, text_cols;\n+};\n+struct window\n+{\n+  Lisp_Object frame;\n+};\n+extern Lisp_Object Vtruncate_partial_width_windows;\n+extern struct Lisp_Char_Table *window_display_table (struct window *);\n+struct position *\n+compute_motion (from, fromvpos, fromhpos, did_motion, to, tovpos, tohpos,\n+\t\twidth, hscroll, tab_offset, win)\n+     long from, fromvpos, fromhpos, to, tovpos, tohpos;\n+     struct window *win;\n+{\n+  register long hpos = fromhpos;\n+  register long pos;\n+  long pos_byte;\n+  register int c = 0;\n+  register struct Lisp_Char_Table *dp = window_display_table (win);\n+  long wide_column_end_hpos = 0;\n+  long continuation_glyph_width;\n+  while (1)\n+    {\n+      if (hpos > width)\n+\t{\n+\t  int total_width = width + continuation_glyph_width;\n+\t  if (!((Vtruncate_partial_width_windows) == (Qnil))\n+\t      && (total_width <\n+\t\t  (((void) 0,\n+\t\t    (struct frame\n+\t\t     *) ((long) (((win)->frame) & ~((((long) 1) << 3) -\n+\t\t\t\t\t\t    1)))))->text_cols))\n+\t    {\n+\t      if (pos <= to)\n+\t\t{\n+\t\t  pos = find_before_next_newline (pos, to, 1);\n+\t\t}\n+\t      if (wide_column_end_hpos > width)\n+\t\t{\n+\t\t  hpos -= width;\n+\t\t}\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  Lisp_Object charvec;\n+\t  c =\n+\t    *(((((pos_byte)) >=\n+\t\t(current_buffer->text->gpt_byte) ? (current_buffer->text->\n+\t\t\t\t\t\t    gap_size) : 0) +\n+\t       ((pos_byte)) + (current_buffer->text->beg) - ((1))));\n+\t  if (current_buffer->width_run_cache)\n+\t    {\n+\t      if (((((enum Lisp_Type) (((unsigned long) ((charvec))) &\n+\t\t\t\t       ((((long) 1) << 3) - 1))) ==\n+\t\t    Lisp_Vectorlike)\n+\t\t   &&\n+\t\t   !(((void) 0,\n+\t\t      (struct Lisp_Vector\n+\t\t       *) ((long) ((charvec) & ~((((long) 1) << 3) - 1))))->\n+\t\t     size & ((((unsigned long) 1 << (64 - 1)) >> 1)))))\n+\t\t{\n+\t\t  unsigned char *ptr;\n+\t\t  int bytes, width, wide_column;\n+\t\t  do\n+\t\t    {\n+\t\t      if ((!((*ptr) & 0x80) ? 1 : !((*ptr) & 0x20) ? 2 :\n+\t\t\t   !((*ptr) & 0x10) ? 3 : !((*ptr) & 0x08) ? 4 : 5) !=\n+\t\t\t  bytes)\n+\t\t\twidth = bytes * 4;\n+\t\t      else\n+\t\t\t{\n+\t\t\t  if (dp != 0\n+\t\t\t      &&\n+\t\t\t      ((((enum\n+\t\t\t\t  Lisp_Type) (((unsigned\n+\t\t\t\t\t\tlong) (((((unsigned) (c) <\n+\t\t\t\t\t\t\t  0x80)\n+\t\t\t\t\t\t\t ? ((((dp)->ascii) ==\n+\t\t\t\t\t\t\t     (Qnil)) ? (dp)->\n+\t\t\t\t\t\t\t    defalt\n+\t\t\t\t\t\t\t    : (((((enum\n+\t\t\t\t\t\t\t\t   Lisp_Type)\n+\t\t\t\t\t\t\t\t  (((unsigned\n+\t\t\t\t\t\t\t\t     long) (((dp)->ascii))) & ((((long) 1) << 3) - 1))) == Lisp_Vectorlike) && (((((void) 0, (struct Lisp_Vector *) ((long) (((dp)->ascii) & ~((((long) 1) << 3) - 1))))->size & (((((unsigned long) 1 << (64 - 1)) >> 1)) | (PVEC_SUB_CHAR_TABLE)))) == (((((unsigned long) 1 << (64 - 1)) >> 1)) | (PVEC_SUB_CHAR_TABLE)))) ? ((void) 0, (struct Lisp_Sub_Char_Table *) ((long) (((dp)->ascii) & ~((((long) 1) << 3) - 1))))->contents[c] : (dp)->ascii)) : disp_char_vector ((dp), (c)))))) & ((((long) 1) << 3) - 1))) == Lisp_Vectorlike) && !(((void) 0, (struct Lisp_Vector *) ((long) (((((unsigned) (c) < 0x80) ? ((((dp)->ascii) == (Qnil)) ? (dp)->defalt : (((((enum Lisp_Type) (((unsigned long) (((dp)->ascii))) & ((((long) 1) << 3) - 1))) == Lisp_Vectorlike) && (((((void) 0, (struct Lisp_Vector *) ((long) (((dp)->ascii) & ~((((long) 1) << 3) - 1))))->size & (((((unsigned long) 1 << (64 - 1)) >> 1)) | (PVEC_SUB_CHAR_TABLE)))) == (((((unsigned long) 1 << (64 - 1)) >> 1)) | (PVEC_SUB_CHAR_TABLE)))) ? ((void) 0, (struct Lisp_Sub_Char_Table *) ((long) (((dp)->ascii) & ~((((long) 1) << 3) - 1))))->contents[c] : (dp)->ascii)) : disp_char_vector ((dp), (c)))) & ~((((long) 1) << 3) - 1))))->size & ((((unsigned long) 1 << (64 - 1)) >> 1)))))\n+\t\t\t    width =\n+\t\t\t      ((void) 0,\n+\t\t\t       (struct Lisp_Vector\n+\t\t\t\t*) ((long) (((((unsigned) (c) <\n+\t\t\t\t\t       0x80) ? ((((dp)->ascii) ==\n+\t\t\t\t\t\t\t (Qnil)) ? (dp)->\n+\t\t\t\t\t\t\tdefalt\n+\t\t\t\t\t\t\t: (((((enum\n+\t\t\t\t\t\t\t       Lisp_Type) (((unsigned long) (((dp)->ascii))) & ((((long) 1) << 3) - 1))) == Lisp_Vectorlike) && (((((void) 0, (struct Lisp_Vector *) ((long) (((dp)->ascii) & ~((((long) 1) << 3) - 1))))->size & (((((unsigned long) 1 << (64 - 1)) >> 1)) | (PVEC_SUB_CHAR_TABLE)))) == (((((unsigned long) 1 << (64 - 1)) >> 1)) | (PVEC_SUB_CHAR_TABLE)))) ? ((void) 0, (struct Lisp_Sub_Char_Table *) ((long) (((dp)->ascii) & ~((((long) 1) << 3) - 1))))->contents[c] : (dp)->ascii)) : disp_char_vector ((dp), (c)))) & ~((((long) 1) << 3) - 1))))->size;\n+\t\t\t  else\n+\t\t\t    width =\n+\t\t\t      (((unsigned) (c) < 0x80) ? (c <\n+\t\t\t\t\t\t\t  0x20 ? (c ==\n+\t\t\t\t\t\t\t\t  '\\t'\n+\t\t\t\t\t\t\t\t  ? ((((long)\n+\t\t\t\t\t\t\t\t       (current_buffer->\n+\t\t\t\t\t\t\t\t\ttab_width))\n+\t\t\t\t\t\t\t\t      >> (3 -\n+\t\t\t\t\t\t\t\t\t  1)))\n+\t\t\t\t\t\t\t\t  : (c ==\n+\t\t\t\t\t\t\t\t     '\\n' ? 0\n+\t\t\t\t\t\t\t\t     : (((current_buffer->ctl_arrow) == (Qnil)) ? 4 : 2))) : (c < 0x7f ? 1 : ((((current_buffer->ctl_arrow) == (Qnil)) ? 4 : 2)))) : (((long) ((((unsigned) (c) < 0x80) ? (\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t       {\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t       Lisp_Object\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t       _val;\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t       _val;}\n+\t\t\t):\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchar_table_ref ((Vchar_width_table), (c))))) >> (3 - 1)));\n+\t\t\t  if (width > 1)\n+\t\t\t    wide_column = width;\n+\t\t\t}\n+\t\t    }\n+\t\t  while (0);\n+\t\t  if (wide_column)\n+\t\t    wide_column_end_hpos = hpos + wide_column;\n+\t\t}\n+\t    }\n+\t}\n+    }\n+}"}]}