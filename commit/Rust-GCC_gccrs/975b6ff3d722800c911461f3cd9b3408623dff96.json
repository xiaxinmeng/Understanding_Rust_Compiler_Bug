{"sha": "975b6ff3d722800c911461f3cd9b3408623dff96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc1YjZmZjNkNzIyODAwYzkxMTQ2MWYzY2Q5YjM0MDg2MjNkZmY5Ng==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-22T13:36:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-22T13:36:46Z"}, "message": "re PR tree-optimization/58497 (SLP vectorizes identical operations)\n\n2015-10-22  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/58497\n\t* tree-vect-generic.c (ssa_uniform_vector_p): New helper.\n\t(expand_vector_operations_1): Use it.  Lower operations on\n\tall uniform vectors to scalar operations if the HW supports it.\n\n\t* gcc.dg/tree-ssa/vector-5.c: New testcase.\n\nFrom-SVN: r229173", "tree": {"sha": "0c7f7637d1a8957491ab525f81731c05eee52b6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c7f7637d1a8957491ab525f81731c05eee52b6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/975b6ff3d722800c911461f3cd9b3408623dff96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975b6ff3d722800c911461f3cd9b3408623dff96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/975b6ff3d722800c911461f3cd9b3408623dff96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975b6ff3d722800c911461f3cd9b3408623dff96/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90a7a1b5b2c551158ccddbaad17d8b8021faa409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90a7a1b5b2c551158ccddbaad17d8b8021faa409", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90a7a1b5b2c551158ccddbaad17d8b8021faa409"}], "stats": {"total": 78, "additions": 69, "deletions": 9}, "files": [{"sha": "9383e1c1c92ff3abae82aebeba78c39d67117fad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975b6ff3d722800c911461f3cd9b3408623dff96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975b6ff3d722800c911461f3cd9b3408623dff96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=975b6ff3d722800c911461f3cd9b3408623dff96", "patch": "@@ -1,3 +1,10 @@\n+2015-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58497\n+\t* tree-vect-generic.c (ssa_uniform_vector_p): New helper.\n+\t(expand_vector_operations_1): Use it.  Lower operations on\n+\tall uniform vectors to scalar operations if the HW supports it.\n+\n 2015-10-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/19049"}, {"sha": "2ea3d941331856f8ab818e59201e4cada4336c11", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975b6ff3d722800c911461f3cd9b3408623dff96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975b6ff3d722800c911461f3cd9b3408623dff96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=975b6ff3d722800c911461f3cd9b3408623dff96", "patch": "@@ -1,3 +1,8 @@\n+2015-10-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58497\n+\t* gcc.dg/tree-ssa/vector-5.c: New testcase.\n+\n 2015-10-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/19049"}, {"sha": "33350cbfe8fbda4abddd7e3375b2a560aae570a9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vector-5.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975b6ff3d722800c911461f3cd9b3408623dff96/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975b6ff3d722800c911461f3cd9b3408623dff96/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-5.c?ref=975b6ff3d722800c911461f3cd9b3408623dff96", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+typedef int v4si __attribute__((vector_size(4*sizeof (int))));\n+\n+v4si v;\n+int foo (int i)\n+{\n+  v4si v1 = (v4si) { i, i, i, i };\n+  v4si v2 = (v4si) { 3, 3, 3, 3 };\n+  v = v1 * v2;\n+}\n+\n+/* The operation should be carried out as scalar op.  */\n+/* { dg-final { scan-tree-dump-times \" \\* 3;\" 1 \"optimized\" } } */"}, {"sha": "20053839d2b2a0b1c0fe61cbc6497fd99c17ff40", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975b6ff3d722800c911461f3cd9b3408623dff96/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975b6ff3d722800c911461f3cd9b3408623dff96/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=975b6ff3d722800c911461f3cd9b3408623dff96", "patch": "@@ -1339,6 +1339,23 @@ lower_vec_perm (gimple_stmt_iterator *gsi)\n   update_stmt (gsi_stmt (*gsi));\n }\n \n+/* If OP is a uniform vector return the element it is a splat from.  */\n+\n+static tree\n+ssa_uniform_vector_p (tree op)\n+{\n+  if (TREE_CODE (op) == VECTOR_CST\n+      || TREE_CODE (op) == CONSTRUCTOR)\n+    return uniform_vector_p (op);\n+  if (TREE_CODE (op) == SSA_NAME)\n+    {\n+      gimple *def_stmt = SSA_NAME_DEF_STMT (op);\n+      if (gimple_assign_single_p (def_stmt))\n+\treturn uniform_vector_p (gimple_assign_rhs1 (def_stmt));\n+    }\n+  return NULL_TREE;\n+}\n+\n /* Return type in which CODE operation with optab OP can be\n    computed.  */\n \n@@ -1505,6 +1522,29 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n   if (TREE_CODE (type) != VECTOR_TYPE)\n     return;\n \n+  /* If the vector operation is operating on all same vector elements\n+     implement it with a scalar operation and a splat if the target\n+     supports the scalar operation.  */\n+  tree srhs1, srhs2 = NULL_TREE;\n+  if ((srhs1 = ssa_uniform_vector_p (rhs1)) != NULL_TREE\n+      && (rhs2 == NULL_TREE\n+\t  || (srhs2 = ssa_uniform_vector_p (rhs2)) != NULL_TREE)\n+      /* As we query direct optabs restrict to non-convert operations.  */\n+      && TYPE_MODE (TREE_TYPE (type)) == TYPE_MODE (TREE_TYPE (srhs1)))\n+    {\n+      op = optab_for_tree_code (code, TREE_TYPE (type), optab_scalar);\n+      if (optab_handler (op, TYPE_MODE (TREE_TYPE (type))) != CODE_FOR_nothing)\n+\t{\n+\t  tree slhs = make_ssa_name (TREE_TYPE (srhs1));\n+\t  gimple *repl = gimple_build_assign (slhs, code, srhs1, srhs2);\n+\t  gsi_insert_before (gsi, repl, GSI_SAME_STMT);\n+\t  gimple_assign_set_rhs_from_tree (gsi,\n+\t\t\t\t\t   build_vector_from_val (type, slhs));\n+\t  update_stmt (stmt);\n+\t  return;\n+\t}\n+    }\n+ \n   /* A scalar operation pretending to be a vector one.  */\n   if (VECTOR_BOOLEAN_TYPE_P (type)\n       && !VECTOR_MODE_P (TYPE_MODE (type))\n@@ -1554,15 +1594,8 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n       if (VECTOR_INTEGER_TYPE_P (TREE_TYPE (rhs2)))\n         {\n           tree first;\n-\t  gimple *def_stmt;\n-\n-          if ((TREE_CODE (rhs2) == VECTOR_CST\n-\t       && (first = uniform_vector_p (rhs2)) != NULL_TREE)\n-\t      || (TREE_CODE (rhs2) == SSA_NAME\n-\t\t  && (def_stmt = SSA_NAME_DEF_STMT (rhs2))\n-\t\t  && gimple_assign_single_p (def_stmt)\n-\t\t  && (first = uniform_vector_p\n-\t\t      (gimple_assign_rhs1 (def_stmt))) != NULL_TREE))\n+\n+          if ((first = ssa_uniform_vector_p (rhs2)) != NULL_TREE)\n             {\n               gimple_assign_set_rhs2 (stmt, first);\n               update_stmt (stmt);"}]}