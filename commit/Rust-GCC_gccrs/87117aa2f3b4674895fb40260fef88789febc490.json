{"sha": "87117aa2f3b4674895fb40260fef88789febc490", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcxMTdhYTJmM2I0Njc0ODk1ZmI0MDI2MGZlZjg4Nzg5ZmViYzQ5MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-01-06T15:32:16Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-01-06T15:32:16Z"}, "message": "re PR libstdc++/9151 (std::setprecision limited to 16 digits when outputting a double to a stream)\n\n2003-01-06  Paolo Carlini  <pcarlini@unitus.it>\n\n\tPR libstdc++/9151\n\t* include/bits/locale_facets.cc (num_put::_M_convert_float):\n\tLimit __prec to digits10 + 2, not digits10 + 1, taking into\n\taccount the possibility of %{g,G} conversion specifiers\n\tinside _S_format_float.\n\t* testsuite/27_io/ostream_inserter_arith.cc (test06): Add.\n\nFrom-SVN: r60939", "tree": {"sha": "7a6edb9e5546ea45fea46f825c0ce925a1bea593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a6edb9e5546ea45fea46f825c0ce925a1bea593"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87117aa2f3b4674895fb40260fef88789febc490", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87117aa2f3b4674895fb40260fef88789febc490", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87117aa2f3b4674895fb40260fef88789febc490", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87117aa2f3b4674895fb40260fef88789febc490/comments", "author": null, "committer": null, "parents": [{"sha": "8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de6a6df286fe3e4cd06063fb6cfaf98b6c80e62"}], "stats": {"total": 40, "additions": 37, "deletions": 3}, "files": [{"sha": "4f9d78d2ab3b62150b092d0021ae93515611d404", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87117aa2f3b4674895fb40260fef88789febc490/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87117aa2f3b4674895fb40260fef88789febc490/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=87117aa2f3b4674895fb40260fef88789febc490", "patch": "@@ -1,3 +1,12 @@\n+2003-01-06  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tPR libstdc++/9151\n+\t* include/bits/locale_facets.cc (num_put::_M_convert_float):\n+\tLimit __prec to digits10 + 2, not digits10 + 1, taking into\n+\taccount the possibility of %{g,G} conversion specifiers\n+\tinside _S_format_float.\n+\t* testsuite/27_io/ostream_inserter_arith.cc (test06): Add.\n+\n 2003-01-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* testsuite/lib/libstdc++-v3-dg.exp (libstdc++-v3-init,"}, {"sha": "26915e71c9e1b6a1d390f49888b0fae02ae6be71", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87117aa2f3b4674895fb40260fef88789febc490/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87117aa2f3b4674895fb40260fef88789febc490/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=87117aa2f3b4674895fb40260fef88789febc490", "patch": "@@ -622,9 +622,14 @@ namespace std\n       _M_convert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,\n \t\t       _ValueT __v) const\n       {\n-\t// Note: digits10 is rounded down.  We need to add 1 to ensure\n+\t// Note: digits10 is rounded down: we need to add 1 to ensure\n \t// we get the full available precision.\n-\tconst int __max_digits = numeric_limits<_ValueT>::digits10 + 1;\n+\t// Then, in general, one more 1 needs to be added since, when the\n+\t// %{g,G} conversion specifiers are chosen inside _S_format_float, the\n+\t// precision field is \"the maximum number of significant digits\", *not*\n+\t// the \"number of digits to appear after the decimal point\", as happens\n+\t// for %{e,E,f,F} (C99, 7.19.6.1,4).\n+\tconst int __max_digits = numeric_limits<_ValueT>::digits10 + 2;\n \tstreamsize __prec = __io.precision();\n \n \tif (__prec > static_cast<streamsize>(__max_digits))"}, {"sha": "e4e618d68d86b84bc49966f4f3adb76d11092367", "filename": "libstdc++-v3/testsuite/27_io/ostream_inserter_arith.cc", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87117aa2f3b4674895fb40260fef88789febc490/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87117aa2f3b4674895fb40260fef88789febc490/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fostream_inserter_arith.cc?ref=87117aa2f3b4674895fb40260fef88789febc490", "patch": "@@ -368,7 +368,26 @@ test05()\n   istringstream istr (sval);\n   double d;\n   istr >> d;\n-  VERIFY (abs(pi-d)/pi < DBL_EPSILON);\n+  VERIFY( abs(pi-d)/pi < DBL_EPSILON );\n+  return 0;\n+}\n+\n+\n+// libstdc++/9151\n+int\n+test06()\n+{\n+  int prec = numeric_limits<double>::digits10 + 2;\n+  double oval = numeric_limits<double>::min();\n+\n+  stringstream ostr;\n+  ostr.precision(prec);\n+  ostr << oval;\n+  string sval = ostr.str();\n+  istringstream istr (sval);\n+  double ival;\n+  istr >> ival;\n+  VERIFY( abs(oval-ival)/oval < DBL_EPSILON ); \n   return 0;\n }\n \n@@ -380,6 +399,7 @@ main()\n   test03();\n   test04();\n   test05();\n+  test06();\n #ifdef TEST_NUMPUT_VERBOSE\n   cout << \"Test passed!\" << endl;\n #endif"}]}