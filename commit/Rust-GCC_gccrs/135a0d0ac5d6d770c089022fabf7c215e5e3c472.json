{"sha": "135a0d0ac5d6d770c089022fabf7c215e5e3c472", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM1YTBkMGFjNWQ2ZDc3MGMwODkwMjJmYWJmN2MyMTVlNWUzYzQ3Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-10-08T09:22:16Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-10-08T09:22:16Z"}, "message": "future (uses_allocator<packaged_task<>,>): Add; minor formatting tweaks.\n\n2010-10-08  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/future (uses_allocator<packaged_task<>,>): Add;\n\tminor formatting tweaks.\n\nFrom-SVN: r165151", "tree": {"sha": "9efbd061d0799ded4c9d4e07af5eb5f2b9c51c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9efbd061d0799ded4c9d4e07af5eb5f2b9c51c4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/135a0d0ac5d6d770c089022fabf7c215e5e3c472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135a0d0ac5d6d770c089022fabf7c215e5e3c472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/135a0d0ac5d6d770c089022fabf7c215e5e3c472", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135a0d0ac5d6d770c089022fabf7c215e5e3c472/comments", "author": null, "committer": null, "parents": [{"sha": "5f262d13207ecf0e799fd10c479d14a7808ce9ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f262d13207ecf0e799fd10c479d14a7808ce9ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f262d13207ecf0e799fd10c479d14a7808ce9ae"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "532547bf84b62dadc15b2b532720bb9c13b3c155", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a0d0ac5d6d770c089022fabf7c215e5e3c472/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a0d0ac5d6d770c089022fabf7c215e5e3c472/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=135a0d0ac5d6d770c089022fabf7c215e5e3c472", "patch": "@@ -1,3 +1,8 @@\n+2010-10-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/future (uses_allocator<packaged_task<>,>): Add;\n+\tminor formatting tweaks.\n+\n 2010-10-08  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/std/future: Enable allocator support."}, {"sha": "ff566983ca28810810697a8d6f53a52435449370", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135a0d0ac5d6d770c089022fabf7c215e5e3c472/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135a0d0ac5d6d770c089022fabf7c215e5e3c472/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=135a0d0ac5d6d770c089022fabf7c215e5e3c472", "patch": "@@ -233,7 +233,7 @@ namespace std\n         }\n \n         __allocator_type _M_alloc;\n-    };\n+      };\n \n     template<typename _Res, typename _Allocator>\n       static typename _Ptr<_Result_alloc<_Res, _Allocator>>::type\n@@ -243,7 +243,7 @@ namespace std\n         typename __result_type::__allocator_type __a2(__a);\n         __result_type* __p = __a2.allocate(1);\n         __try\n-        {\n+\t{\n           __a2.construct(__p, __a);\n         }\n         __catch(...)\n@@ -843,7 +843,7 @@ namespace std\n       template<typename _Allocator>\n         promise(allocator_arg_t, const _Allocator& __a)\n         : _M_future(std::allocate_shared<_State>(__a)),\n-        _M_storage(__future_base::_S_allocate_result<_Res>(__a))\n+\t  _M_storage(__future_base::_S_allocate_result<_Res>(__a))\n         { }\n \n       promise(const promise&) = delete;\n@@ -904,6 +904,11 @@ namespace std\n     swap(promise<_Res>& __x, promise<_Res>& __y)\n     { __x.swap(__y); }\n \n+  template<typename _Res, typename _Alloc>\n+    struct uses_allocator<promise<_Res>, _Alloc>\n+    : public true_type { };\n+\n+\n   /// Partial specialization for promise<R&>\n   template<typename _Res>\n     class promise<_Res&>\n@@ -930,7 +935,7 @@ namespace std\n       template<typename _Allocator>\n         promise(allocator_arg_t, const _Allocator& __a)\n         : _M_future(std::allocate_shared<_State>(__a)),\n-        _M_storage(__future_base::_S_allocate_result<_Res&>(__a))\n+\t  _M_storage(__future_base::_S_allocate_result<_Res&>(__a))\n         { }\n \n       promise(const promise&) = delete;\n@@ -1002,11 +1007,10 @@ namespace std\n \t_M_storage(std::move(__rhs._M_storage))\n       { }\n \n-\n       template<typename _Allocator>\n         promise(allocator_arg_t, const _Allocator& __a)\n         : _M_future(std::allocate_shared<_State>(__a)),\n-        _M_storage(__future_base::_S_allocate_result<void>(__a))\n+\t  _M_storage(__future_base::_S_allocate_result<void>(__a))\n         { }\n \n       promise(const promise&) = delete;\n@@ -1076,9 +1080,6 @@ namespace std\n     _M_future->_M_set_result(std::move(__setter));\n   }\n \n-  template<typename _Res, class Alloc>\n-    struct uses_allocator<promise<_Res>, Alloc> : true_type  { };\n-\n \n   template<typename _StateT, typename _Res>\n     struct __future_base::_Task_setter\n@@ -1129,8 +1130,8 @@ namespace std\n \n       template<typename _Func, typename _Alloc>\n         _Task_state(_Func&& __task, const _Alloc& __a)\n-        : _M_result(_S_allocate_result<_Res>(__a))\n-        , _M_task(allocator_arg, __a, std::move(__task))\n+        : _M_result(_S_allocate_result<_Res>(__a)),\n+\t  _M_task(allocator_arg, __a, std::move(__task))\n         { }\n \n       void\n@@ -1248,7 +1249,12 @@ namespace std\n     swap(packaged_task<_Res(_ArgTypes...)>& __x,\n \t packaged_task<_Res(_ArgTypes...)>& __y)\n     { __x.swap(__y); }\n- \n+\n+  template<typename _Res, typename _Alloc>\n+    struct uses_allocator<packaged_task<_Res>, _Alloc>\n+    : public true_type { };\n+\n+\n   template<typename _Res>\n     class __future_base::_Deferred_state : public __future_base::_State\n     {"}]}