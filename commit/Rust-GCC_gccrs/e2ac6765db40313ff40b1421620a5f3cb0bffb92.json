{"sha": "e2ac6765db40313ff40b1421620a5f3cb0bffb92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJhYzY3NjVkYjQwMzEzZmY0MGIxNDIxNjIwYTVmM2NiMGJmZmI5Mg==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2017-04-03T15:57:06Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2017-04-03T15:57:06Z"}, "message": "Implement std::is_aggregate.\n\n* include/std/type_traits (is_aggregate, is_aggregate_v): New.\n* testsuite/20_util/is_aggregate/requirements/explicit_instantiation.cc:\nNew.\n* testsuite/20_util/is_aggregate/requirements/typedefs.cc: Likewise.\n* testsuite/20_util/is_aggregate/value.cc: Likewise.\n\nFrom-SVN: r246651", "tree": {"sha": "7941f90cdbf925871677ed76ad45965db02ea248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7941f90cdbf925871677ed76ad45965db02ea248"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2ac6765db40313ff40b1421620a5f3cb0bffb92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2ac6765db40313ff40b1421620a5f3cb0bffb92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2ac6765db40313ff40b1421620a5f3cb0bffb92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2ac6765db40313ff40b1421620a5f3cb0bffb92/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fff80893baad08414ee4332655f4ed5f557ae73a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fff80893baad08414ee4332655f4ed5f557ae73a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fff80893baad08414ee4332655f4ed5f557ae73a"}], "stats": {"total": 186, "additions": 186, "deletions": 0}, "files": [{"sha": "62c8288644ae2b7cf6bf9bb1679ee716796619e3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ac6765db40313ff40b1421620a5f3cb0bffb92/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ac6765db40313ff40b1421620a5f3cb0bffb92/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e2ac6765db40313ff40b1421620a5f3cb0bffb92", "patch": "@@ -1,3 +1,12 @@\n+2017-04-03  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement std::is_aggregate.\n+\t* include/std/type_traits (is_aggregate, is_aggregate_v): New.\n+\t* testsuite/20_util/is_aggregate/requirements/explicit_instantiation.cc:\n+\tNew.\n+\t* testsuite/20_util/is_aggregate/requirements/typedefs.cc: Likewise.\n+\t* testsuite/20_util/is_aggregate/value.cc: Likewise.\n+\n 2017-03-29  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tAdjust optional's pretty printer for LWG 2900."}, {"sha": "8ea280125e650f313f3c7ab65b77f42505f902b8", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ac6765db40313ff40b1421620a5f3cb0bffb92/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ac6765db40313ff40b1421620a5f3cb0bffb92/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=e2ac6765db40313ff40b1421620a5f3cb0bffb92", "patch": "@@ -3062,6 +3062,26 @@ template <typename _From, typename _To>\n #endif\n #undef _GLIBCXX_NO_BUILTIN_HAS_UNIQ_OBJ_REP\n \n+#ifdef __has_builtin\n+# if !__has_builtin(__is_aggregate)\n+// Try not to break non-GNU compilers that don't support the built-in:\n+#  define _GLIBCXX_NO_BUILTIN_IS_AGGREGATE 1\n+# endif\n+#endif\n+\n+#ifndef _GLIBCXX_NO_BUILTIN_IS_AGGREGATE\n+#define __cpp_lib_is_aggregate 201703\n+  /// is_aggregate\n+  template<typename _Tp>\n+    struct is_aggregate\n+    : bool_constant<__is_aggregate(remove_cv_t<_Tp>)> { };\n+\n+  /// is_aggregate_v\n+  template<typename _Tp>\n+    inline constexpr bool is_aggregate_v = is_aggregate<_Tp>::value;\n+#endif\n+#undef _GLIBCXX_NO_BUILTIN_IS_AGGREGATE\n+\n #endif // C++17\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "4c189cdc0c33fe768e1cffc4259b3f4bc6063b5d", "filename": "libstdc++-v3/testsuite/20_util/is_aggregate/requirements/explicit_instantiation.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ac6765db40313ff40b1421620a5f3cb0bffb92/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_aggregate%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ac6765db40313ff40b1421620a5f3cb0bffb92/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_aggregate%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_aggregate%2Frequirements%2Fexplicit_instantiation.cc?ref=e2ac6765db40313ff40b1421620a5f3cb0bffb92", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++1z\" }\n+// { dg-do compile { target c++1z } }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_aggregate<test_type>;\n+}"}, {"sha": "4b0358ccc90c5282dd4ec76ccc34e3c75969b9ad", "filename": "libstdc++-v3/testsuite/20_util/is_aggregate/requirements/typedefs.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ac6765db40313ff40b1421620a5f3cb0bffb92/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_aggregate%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ac6765db40313ff40b1421620a5f3cb0bffb92/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_aggregate%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_aggregate%2Frequirements%2Ftypedefs.cc?ref=e2ac6765db40313ff40b1421620a5f3cb0bffb92", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=gnu++1z\" }\n+// { dg-do compile { target c++1z } }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_aggregate<int>\ttest_type;\n+  static_assert( std::is_same<test_type::value_type, bool>::value );\n+  typedef std::integral_constant<bool, test_type{}()> bool_type;\n+  static_assert( std::is_same<test_type::type, bool_type>::value );\n+}"}, {"sha": "6168d9c39c70b98fb5d843134e4fcfbf644d5f48", "filename": "libstdc++-v3/testsuite/20_util/is_aggregate/value.cc", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2ac6765db40313ff40b1421620a5f3cb0bffb92/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_aggregate%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2ac6765db40313ff40b1421620a5f3cb0bffb92/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_aggregate%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_aggregate%2Fvalue.cc?ref=e2ac6765db40313ff40b1421620a5f3cb0bffb92", "patch": "@@ -0,0 +1,96 @@\n+// { dg-options \"-std=gnu++1z\" }\n+// { dg-do compile { target c++1z } }\n+\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+#include <tuple>\n+\n+template <class... T> void pos()\n+{\n+  static_assert((std::is_aggregate_v<T> &&...));\n+}\n+\n+template <class... T> void neg()\n+{\n+  static_assert((!std::is_aggregate_v<T> &&...));\n+}\n+\n+void test01()\n+{\n+  using namespace __gnu_test;\n+  using __gnu_test::test_category;\n+  using std::is_aggregate;\n+\n+  // Positive tests.\n+  static_assert(test_category<is_aggregate,\n+\t\tClassType>(true), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tUnionType>(true), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tSLType>(true), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tNoexceptMoveAssignClass>(true), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tunsigned[3]>(true), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tunsigned[3][2]>(true), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tunsigned[]>(true), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tunsigned[][2]>(true), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tEnumType[3]>(true), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tEnumType[3][2]>(true), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tEnumType[]>(true), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tEnumType[][2]>(true), \"\");\n+  pos<ClassType, UnionType, SLType, NoexceptMoveAssignClass,\n+      unsigned[3], unsigned[3][2], unsigned[], unsigned[][3]>();\n+\n+  // Negative tests.\n+  static_assert(test_category<is_aggregate,\n+\t\tAbstractClass>(false), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tPolymorphicClass>(false), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tExplicitClass>(false), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tchar>(false), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tunsigned char>(false), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tsigned char>(false), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tunsigned>(false), \"\");\n+  static_assert(test_category<is_aggregate,\n+                bool>(false), \"\");\n+  static_assert(test_category<is_aggregate,\n+                float>(false), \"\");\n+  static_assert(test_category<is_aggregate,\n+                double>(false), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tEnumType>(false), \"\");\n+  static_assert(test_category<is_aggregate,\n+\t\tvoid>(false), \"\");\n+  neg<AbstractClass, PolymorphicClass, ExplicitClass, char, unsigned,\n+      bool, float, double, void>();\n+}"}]}