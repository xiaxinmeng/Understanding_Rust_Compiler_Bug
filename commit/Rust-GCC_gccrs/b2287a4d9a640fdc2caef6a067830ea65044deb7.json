{"sha": "b2287a4d9a640fdc2caef6a067830ea65044deb7", "node_id": "C_kwDOANBUbNoAKGIyMjg3YTRkOWE2NDBmZGMyY2FlZjZhMDY3ODMwZWE2NTA0NGRlYjc", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-09T00:13:18Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-20T17:29:35Z"}, "message": "c++: ICE with -fno-elide-constructors and trivial fn [PR101073]\n\nIn constexpr-nsdmi3.C, with -fno-elide-constructors, we don't elide\nthe Y::Y(const Y&) call used to initialize o.c.  So store_init_value\n-> cxx_constant_init must constexpr-evaluate the call to Y::Y(const Y&)\nin cxx_eval_call_expression.  It's a trivial function, so we do the\n\"Shortcut trivial constructor/op=\" code and rather than evaluating\nthe function, we just create an assignment\n\n  o.c = *(const struct Y &) (const struct Y *) &(&<PLACEHOLDER_EXPR struct X>)->b\n\nwhich is a MODIFY_EXPR, so the preeval code in cxx_eval_store_expression\nclears .ctor and .object, therefore we can't replace the PLACEHOLDER_EXPR\nwhereupon we crash at\n\n      /* A placeholder without a referent.  We can get here when\n         checking whether NSDMIs are noexcept, or in massage_init_elt;\n         just say it's non-constant for now.  */\n      gcc_assert (ctx->quiet);\n\nThe PLACEHOLDER_EXPR can also be on the LHS as in constexpr-nsdmi10.C.\nI don't think we can do much here, but I noticed that the whole\ntrivial_fn_p (fun) block is only entered when -fno-elide-constructors.\nThis is true since GCC 9; it wasn't easy to bisect what changes made it\nso, but r240845 is probably one of them.  -fno-elide-constructors is an\noption for experiments only so it's not clear to me why we'd still want\nto shortcut trivial constructor/op=.  I propose to remove the code and\nadd a checking assert to make sure we're not getting a trivial_fn_p\nunless -fno-elide-constructors.\n\n\tPR c++/101073\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (cxx_eval_call_expression): Replace shortcutting trivial\n\tconstructor/op= with a checking assert.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-nsdmi3.C: New test.\n\t* g++.dg/cpp1y/constexpr-nsdmi10.C: New test.", "tree": {"sha": "e7ad2d9875dcbd7b463a442fa801044a6ad23cf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7ad2d9875dcbd7b463a442fa801044a6ad23cf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2287a4d9a640fdc2caef6a067830ea65044deb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2287a4d9a640fdc2caef6a067830ea65044deb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2287a4d9a640fdc2caef6a067830ea65044deb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2287a4d9a640fdc2caef6a067830ea65044deb7/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb920f561e983c64d146f173dc4ebc098441a962", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb920f561e983c64d146f173dc4ebc098441a962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb920f561e983c64d146f173dc4ebc098441a962"}], "stats": {"total": 60, "additions": 38, "deletions": 22}, "files": [{"sha": "b4d3e95bbd59d2b5920f270a22d57e1b426a8835", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2287a4d9a640fdc2caef6a067830ea65044deb7/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2287a4d9a640fdc2caef6a067830ea65044deb7/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=b2287a4d9a640fdc2caef6a067830ea65044deb7", "patch": "@@ -2866,28 +2866,9 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n       ctx = &new_ctx;\n     }\n \n-  /* Shortcut trivial constructor/op=.  */\n-  if (trivial_fn_p (fun))\n-    {\n-      tree init = NULL_TREE;\n-      if (call_expr_nargs (t) == 2)\n-\tinit = convert_from_reference (get_nth_callarg (t, 1));\n-      else if (TREE_CODE (t) == AGGR_INIT_EXPR\n-\t       && AGGR_INIT_ZERO_FIRST (t))\n-\tinit = build_zero_init (DECL_CONTEXT (fun), NULL_TREE, false);\n-      if (init)\n-\t{\n-\t  tree op = get_nth_callarg (t, 0);\n-\t  if (is_dummy_object (op))\n-\t    op = ctx->object;\n-\t  else\n-\t    op = build1 (INDIRECT_REF, TREE_TYPE (TREE_TYPE (op)), op);\n-\t  tree set = build2 (MODIFY_EXPR, TREE_TYPE (op), op, init);\n-\t  new_ctx.call = &new_call;\n-\t  return cxx_eval_constant_expression (&new_ctx, set, lval,\n-\t\t\t\t\t       non_constant_p, overflow_p);\n-\t}\n-    }\n+  /* We used to shortcut trivial constructor/op= here, but nowadays\n+     we can only get a trivial function here with -fno-elide-constructors.  */\n+  gcc_checking_assert (!trivial_fn_p (fun) || !flag_elide_constructors);\n \n   bool non_constant_args = false;\n   new_call.bindings"}, {"sha": "ec1c4e533877ee42b33e7639c0e626952b05bd66", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-nsdmi3.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2287a4d9a640fdc2caef6a067830ea65044deb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nsdmi3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2287a4d9a640fdc2caef6a067830ea65044deb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nsdmi3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-nsdmi3.C?ref=b2287a4d9a640fdc2caef6a067830ea65044deb7", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/101073\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-fno-elide-constructors\" }\n+\n+struct Y\n+{\n+  int a;\n+};\n+\n+struct X\n+{\n+  Y b = Y{1};\n+  Y c = this->b;\n+};\n+\n+constexpr X o = { };\n+static_assert(o.b.a == 1 && o.c.a == 1, \"\");"}, {"sha": "35cb8acc15b5e44bd22472a81361d73eaf1dba5f", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-nsdmi10.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2287a4d9a640fdc2caef6a067830ea65044deb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2287a4d9a640fdc2caef6a067830ea65044deb7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-nsdmi10.C?ref=b2287a4d9a640fdc2caef6a067830ea65044deb7", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/101073\n+// { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-fno-elide-constructors\" }\n+// A copy of constexpr-nsdmi9.C.\n+\n+struct Y\n+{\n+  int a;\n+};\n+\n+struct X\n+{\n+  Y b = (c={5});\n+  Y c = (b={1});\n+};\n+\n+constexpr X o = { };\n+static_assert(o.b.a == 1 && o.c.a == 1, \"\");"}]}