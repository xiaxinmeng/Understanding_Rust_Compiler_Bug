{"sha": "9a977ce3605e8b8ad92fd351bb90bc6445e8e92b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE5NzdjZTM2MDVlOGI4YWQ5MmZkMzUxYmI5MGJjNjQ0NWU4ZTkyYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-06-18T14:34:50Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-06-18T14:34:50Z"}, "message": "decl.c (duplicate_decls): Consistently use DECL_SOURCE_LOCATION in errors about redefined default...\n\n2018-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (duplicate_decls): Consistently use DECL_SOURCE_LOCATION\n\tin errors about redefined default arguments; tidy.\n\nFrom-SVN: r261702", "tree": {"sha": "cc83dbf50b444b91d8c261d214e914ad6152c3ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc83dbf50b444b91d8c261d214e914ad6152c3ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a977ce3605e8b8ad92fd351bb90bc6445e8e92b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a977ce3605e8b8ad92fd351bb90bc6445e8e92b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a977ce3605e8b8ad92fd351bb90bc6445e8e92b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a977ce3605e8b8ad92fd351bb90bc6445e8e92b/comments", "author": null, "committer": null, "parents": [{"sha": "5f9bda14580c475eabae3b82f96041932e2e6402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f9bda14580c475eabae3b82f96041932e2e6402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f9bda14580c475eabae3b82f96041932e2e6402"}], "stats": {"total": 112, "additions": 64, "deletions": 48}, "files": [{"sha": "c3b5bc628b0c6c07cf30e224f56db9814f9ca858", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a977ce3605e8b8ad92fd351bb90bc6445e8e92b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a977ce3605e8b8ad92fd351bb90bc6445e8e92b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9a977ce3605e8b8ad92fd351bb90bc6445e8e92b", "patch": "@@ -1,3 +1,8 @@\n+2018-06-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (duplicate_decls): Consistently use DECL_SOURCE_LOCATION\n+\tin errors about redefined default arguments; tidy.\n+\n 2018-06-16  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \t* constexpr.c (potential_constant_expression_1): Handle ABSU_EXPR."}, {"sha": "cc2d513a7a1b61abe313e7d63e87ad518f93c473", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 59, "deletions": 48, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a977ce3605e8b8ad92fd351bb90bc6445e8e92b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a977ce3605e8b8ad92fd351bb90bc6445e8e92b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9a977ce3605e8b8ad92fd351bb90bc6445e8e92b", "patch": "@@ -1319,6 +1319,8 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n   int olddecl_friend = 0, types_match = 0, hidden_friend = 0;\n   int new_defines_function = 0;\n   tree new_template_info;\n+  location_t olddecl_loc = DECL_SOURCE_LOCATION (olddecl);\n+  location_t newdecl_loc = DECL_SOURCE_LOCATION (newdecl);\n \n   if (newdecl == olddecl)\n     return olddecl;\n@@ -1342,13 +1344,15 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n       if (TREE_CODE (newdecl) == TEMPLATE_DECL\n \t  && TREE_CODE (olddecl) != TEMPLATE_DECL\n \t  && check_raw_literal_operator (olddecl))\n-\terror (\"literal operator template %q+D conflicts with\"\n-\t       \" raw literal operator %qD\", newdecl, olddecl);\n+\terror_at (newdecl_loc,\n+\t\t  \"literal operator template %qD conflicts with\"\n+\t\t  \" raw literal operator %qD\", newdecl, olddecl);\n       else if (TREE_CODE (newdecl) != TEMPLATE_DECL\n \t       && TREE_CODE (olddecl) == TEMPLATE_DECL\n \t       && check_raw_literal_operator (newdecl))\n-\terror (\"raw literal operator %q+D conflicts with\"\n-\t       \" literal operator template %qD\", newdecl, olddecl);\n+\terror_at (newdecl_loc,\n+\t\t  \"raw literal operator %qD conflicts with\"\n+\t\t  \" literal operator template %qD\", newdecl, olddecl);\n     }\n \n   /* True to merge attributes between the declarations, false to\n@@ -1366,10 +1370,10 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n       && diagnose_mismatched_attributes (olddecl, newdecl))\n     {\n       if (DECL_INITIAL (olddecl))\n-\tinform (DECL_SOURCE_LOCATION (olddecl),\n+\tinform (olddecl_loc,\n \t\t\"previous definition of %qD was here\", olddecl);\n       else\n-\tinform (DECL_SOURCE_LOCATION (olddecl),\n+\tinform (olddecl_loc,\n \t\t\"previous declaration of %qD was here\", olddecl);\n     }\n \n@@ -1386,7 +1390,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t    {\n \t      if (TREE_PUBLIC (newdecl)\n \t\t  && CP_DECL_CONTEXT (newdecl) == global_namespace)\n-\t\twarning_at (DECL_SOURCE_LOCATION (newdecl),\n+\t\twarning_at (newdecl_loc,\n \t\t\t    OPT_Wbuiltin_declaration_mismatch,\n \t\t\t    \"built-in function %qD declared as non-function\",\n \t\t\t    newdecl);\n@@ -1398,7 +1402,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t     bad choice of name.  */\n \t  if (! TREE_PUBLIC (newdecl))\n \t    {\n-\t      warning_at (DECL_SOURCE_LOCATION (newdecl),\n+\t      warning_at (newdecl_loc,\n \t\t\t  OPT_Wshadow, \n \t\t\t  DECL_BUILT_IN (olddecl)\n \t\t\t  ? G_(\"shadowing built-in function %q#D\")\n@@ -1409,20 +1413,21 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  /* If the built-in is not ansi, then programs can override\n \t     it even globally without an error.  */\n \t  else if (! DECL_BUILT_IN (olddecl))\n-\t    warning_at (DECL_SOURCE_LOCATION (newdecl), 0,\n+\t    warning_at (newdecl_loc, 0,\n \t\t\t\"library function %q#D redeclared as non-function %q#D\",\n \t\t\tolddecl, newdecl);\n \t  else\n-\t    error (\"declaration of %q+#D conflicts with built-in \"\n-\t\t   \"declaration %q#D\", newdecl, olddecl);\n+\t    error_at (newdecl_loc,\n+\t\t      \"declaration of %q#D conflicts with built-in \"\n+\t\t      \"declaration %q#D\", newdecl, olddecl);\n \t  return NULL_TREE;\n \t}\n       else if (DECL_OMP_DECLARE_REDUCTION_P (olddecl))\n \t{\n \t  gcc_assert (DECL_OMP_DECLARE_REDUCTION_P (newdecl));\n-\t  error_at (DECL_SOURCE_LOCATION (newdecl),\n+\t  error_at (newdecl_loc,\n \t\t    \"redeclaration of %<pragma omp declare reduction%>\");\n-\t  inform (DECL_SOURCE_LOCATION (olddecl),\n+\t  inform (olddecl_loc,\n \t\t  \"previous %<pragma omp declare reduction%> declaration\");\n \t  return error_mark_node;\n \t}\n@@ -1481,7 +1486,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n next_arg:;\n \t\t}\n \n-\t      warning_at (DECL_SOURCE_LOCATION (newdecl),\n+\t      warning_at (newdecl_loc,\n \t\t\t  OPT_Wbuiltin_declaration_mismatch,\n \t\t\t  \"declaration of %q#D conflicts with built-in \"\n \t\t\t  \"declaration %q#D\", newdecl, olddecl);\n@@ -1510,16 +1515,16 @@ next_arg:;\n \t\t    {\n \t\t      if (DECL_INITIAL (newdecl))\n \t\t\t{\n-\t\t\t  error_at (DECL_SOURCE_LOCATION (newdecl),\n+\t\t\t  error_at (newdecl_loc,\n \t\t\t\t    \"definition of %q#D ambiguates built-in \"\n \t\t\t\t    \"declaration %q#D\", newdecl, olddecl);\n \t\t\t  return error_mark_node;\n \t\t\t}\n-\t\t      if (permerror (DECL_SOURCE_LOCATION (newdecl),\n+\t\t      if (permerror (newdecl_loc,\n \t\t\t\t     \"new declaration %q#D ambiguates built-in\"\n \t\t\t\t     \" declaration %q#D\", newdecl, olddecl)\n \t\t\t  && flag_permissive)\n-\t\t\tinform (DECL_SOURCE_LOCATION (newdecl),\n+\t\t\tinform (newdecl_loc,\n \t\t\t\t\"ignoring the %q#D declaration\", newdecl);\n \t\t      return flag_permissive ? olddecl : error_mark_node;\n \t\t    }\n@@ -1528,7 +1533,7 @@ next_arg:;\n \t      /* A near match; override the builtin.  */\n \n \t      if (TREE_PUBLIC (newdecl))\n-\t\twarning_at (DECL_SOURCE_LOCATION (newdecl),\n+\t\twarning_at (newdecl_loc,\n \t\t\t    OPT_Wbuiltin_declaration_mismatch,\n \t\t\t    \"new declaration %q#D ambiguates built-in \"\n \t\t\t    \"declaration %q#D\", newdecl, olddecl);\n@@ -1624,7 +1629,7 @@ next_arg:;\n       error (\"%q#D redeclared as different kind of symbol\", newdecl);\n       if (TREE_CODE (olddecl) == TREE_LIST)\n \tolddecl = TREE_VALUE (olddecl);\n-      inform (DECL_SOURCE_LOCATION (olddecl),\n+      inform (olddecl_loc,\n \t      \"previous declaration %q#D\", olddecl);\n \n       return error_mark_node;\n@@ -1644,8 +1649,9 @@ next_arg:;\n \t  if (TREE_CODE (DECL_TEMPLATE_RESULT (olddecl)) == TYPE_DECL\n \t      || TREE_CODE (DECL_TEMPLATE_RESULT (newdecl)) == TYPE_DECL)\n \t    {\n-\t      error (\"conflicting declaration of template %q+#D\", newdecl);\n-\t      inform (DECL_SOURCE_LOCATION (olddecl),\n+\t      error_at (newdecl_loc,\n+\t\t\t\"conflicting declaration of template %q#D\", newdecl);\n+\t      inform (olddecl_loc,\n \t\t      \"previous declaration %q#D\", olddecl);\n \t      return error_mark_node;\n \t    }\n@@ -1663,8 +1669,9 @@ next_arg:;\n                    // constraints.\n                    && equivalently_constrained (olddecl, newdecl))\n \t    {\n-\t      error (\"ambiguating new declaration %q+#D\", newdecl);\n-\t      inform (DECL_SOURCE_LOCATION (olddecl),\n+\t      error_at (newdecl_loc, \"ambiguating new declaration %q#D\",\n+\t\t\tnewdecl);\n+\t      inform (olddecl_loc,\n \t\t      \"old declaration %q#D\", olddecl);\n \t    }\n           else if (check_concept_refinement (olddecl, newdecl))\n@@ -1675,9 +1682,10 @@ next_arg:;\n \t{\n \t  if (DECL_EXTERN_C_P (newdecl) && DECL_EXTERN_C_P (olddecl))\n \t    {\n-\t      error (\"conflicting declaration of C function %q+#D\",\n-\t\t     newdecl);\n-\t      inform (DECL_SOURCE_LOCATION (olddecl),\n+\t      error_at (newdecl_loc,\n+\t\t\t\"conflicting declaration of C function %q#D\",\n+\t\t\tnewdecl);\n+\t      inform (olddecl_loc,\n \t\t      \"previous declaration %q#D\", olddecl);\n \t      return NULL_TREE;\n \t    }\n@@ -1691,8 +1699,9 @@ next_arg:;\n                    // And the same constraints.\n                    && equivalently_constrained (newdecl, olddecl))\n \t    {\n-\t      error (\"ambiguating new declaration of %q+#D\", newdecl);\n-\t      inform (DECL_SOURCE_LOCATION (olddecl),\n+\t      error_at (newdecl_loc,\n+\t\t\t\"ambiguating new declaration of %q#D\", newdecl);\n+\t      inform (olddecl_loc,\n \t\t      \"old declaration %q#D\", olddecl);\n               return error_mark_node;\n \t    }\n@@ -1701,8 +1710,8 @@ next_arg:;\n \t}\n       else\n \t{\n-\t  error (\"conflicting declaration %q+#D\", newdecl);\n-\t  inform (DECL_SOURCE_LOCATION (olddecl),\n+\t  error_at (newdecl_loc, \"conflicting declaration %q#D\", newdecl);\n+\t  inform (olddecl_loc,\n \t\t  \"previous declaration as %q#D\", olddecl);\n \t  return error_mark_node;\n \t}\n@@ -1757,9 +1766,9 @@ next_arg:;\n       const char *errmsg = redeclaration_error_message (newdecl, olddecl);\n       if (errmsg)\n \t{\n-\t  error_at (DECL_SOURCE_LOCATION (newdecl), errmsg, newdecl);\n+\t  error_at (newdecl_loc, errmsg, newdecl);\n \t  if (DECL_NAME (olddecl) != NULL_TREE)\n-\t    inform (DECL_SOURCE_LOCATION (olddecl),\n+\t    inform (olddecl_loc,\n \t\t    (DECL_INITIAL (olddecl) && namespace_bindings_p ())\n \t\t    ? G_(\"%q#D previously defined here\")\n \t\t    : G_(\"%q#D previously declared here\"), olddecl);\n@@ -1771,9 +1780,9 @@ next_arg:;\n \t       && prototype_p (TREE_TYPE (newdecl)))\n \t{\n \t  /* Prototype decl follows defn w/o prototype.  */\n-\t  if (warning_at (DECL_SOURCE_LOCATION (newdecl), 0,\n+\t  if (warning_at (newdecl_loc, 0,\n \t\t\t  \"prototype specified for %q#D\", newdecl))\n-\t    inform (DECL_SOURCE_LOCATION (olddecl),\n+\t    inform (olddecl_loc,\n \t\t    \"previous non-prototype definition here\");\n \t}\n       else if (VAR_OR_FUNCTION_DECL_P (olddecl)\n@@ -1812,9 +1821,10 @@ next_arg:;\n \t    }\n \t  else\n \t    {\n-\t      error (\"conflicting declaration of %q+#D with %qL linkage\",\n-\t\t     newdecl, DECL_LANGUAGE (newdecl));\n-\t      inform (DECL_SOURCE_LOCATION (olddecl),\n+\t      error_at (newdecl_loc,\n+\t\t\t\"conflicting declaration of %q#D with %qL linkage\",\n+\t\t\tnewdecl, DECL_LANGUAGE (newdecl));\n+\t      inform (olddecl_loc,\n \t\t      \"previous declaration with %qL linkage\",\n \t\t      DECL_LANGUAGE (olddecl));\n \t    }\n@@ -1848,18 +1858,19 @@ next_arg:;\n \t\t    if (simple_cst_equal (TREE_PURPOSE (t1),\n \t\t\t\t\t  TREE_PURPOSE (t2)) == 1)\n \t\t      {\n-\t\t\tif (permerror (input_location,\n+\t\t\tif (permerror (newdecl_loc,\n \t\t\t\t       \"default argument given for parameter \"\n \t\t\t\t       \"%d of %q#D\", i, newdecl))\n-\t\t\t  inform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t\t  inform (olddecl_loc,\n \t\t\t\t  \"previous specification in %q#D here\",\n \t\t\t\t  olddecl);\n \t\t      }\n \t\t    else\n \t\t      {\n-\t\t\terror (\"default argument given for parameter %d \"\n-\t\t\t       \"of %q#D\", i, newdecl);\n-\t\t\tinform (DECL_SOURCE_LOCATION (olddecl),\n+\t\t\terror_at (newdecl_loc,\n+\t\t\t\t  \"default argument given for parameter %d \"\n+\t\t\t\t  \"of %q#D\", i, newdecl);\n+\t\t\tinform (olddecl_loc,\n \t\t\t\t\"previous specification in %q#D here\",\n \t\t\t\tolddecl);\n \t\t      }\n@@ -1924,11 +1935,11 @@ next_arg:;\n \t  && (! DECL_TEMPLATE_SPECIALIZATION (newdecl)\n \t      || DECL_TEMPLATE_SPECIALIZATION (olddecl)))\n \t{\n-\t  if (warning_at (DECL_SOURCE_LOCATION (newdecl),\n+\t  if (warning_at (newdecl_loc,\n \t\t\t  OPT_Wredundant_decls,\n \t\t\t  \"redundant redeclaration of %qD in same scope\",\n \t\t\t  newdecl))\n-\t    inform (DECL_SOURCE_LOCATION (olddecl),\n+\t    inform (olddecl_loc,\n \t\t    \"previous declaration of %qD\", olddecl);\n \t}\n \n@@ -1937,8 +1948,8 @@ next_arg:;\n \t{\n \t  if (DECL_DELETED_FN (newdecl))\n \t    {\n-\t      error (\"deleted definition of %q+D\", newdecl);\n-\t      inform (DECL_SOURCE_LOCATION (olddecl),\n+\t      error_at (newdecl_loc, \"deleted definition of %qD\", newdecl);\n+\t      inform (olddecl_loc,\n \t\t      \"previous declaration of %qD\", olddecl);\n \t    }\n \t  DECL_DELETED_FN (newdecl) |= DECL_DELETED_FN (olddecl);\n@@ -2507,10 +2518,10 @@ next_arg:;\n       && DECL_VISIBILITY_SPECIFIED (newdecl)\n       && DECL_VISIBILITY (newdecl) != DECL_VISIBILITY (olddecl))\n     {\n-      if (warning_at (DECL_SOURCE_LOCATION (newdecl), OPT_Wattributes,\n+      if (warning_at (newdecl_loc, OPT_Wattributes,\n \t\t      \"%qD: visibility attribute ignored because it \"\n \t\t      \"conflicts with previous declaration\", newdecl))\n-\tinform (DECL_SOURCE_LOCATION (olddecl),\n+\tinform (olddecl_loc,\n \t\t\"previous declaration of %qD\", olddecl);\n     }\n   /* Choose the declaration which specified visibility.  */"}]}