{"sha": "eb74e79b1b2bc2d2d244c8c84a7c7ef293686546", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3NGU3OWIxYjJiYzJkMmQyNDRjOGM4NGE3YzdlZjI5MzY4NjU0Ng==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-05-10T07:23:30Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2009-05-10T07:23:30Z"}, "message": "re PR fortran/38863 (WHERE with multiple elemental defined assignments gives wrong answer)\n\n2009-05-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/38863\n\t* trans-expr.c (gfc_conv_operator_assign): Remove function.\n\t* trans.h : Remove prototype for gfc_conv_operator_assign.\n\t* trans-stmt.c (gfc_conv_elemental_dependencies): Initialize\n\tderivde types with intent(out).\n\t(gfc_trans_call): Add mask, count1 and invert arguments. Add\n\tcode to use mask for WHERE assignments.\n\t(gfc_trans_forall_1): Use new arguments for gfc_trans_call.\n\t(gfc_trans_where_assign): The gfc_symbol argument is replaced\n\tby the corresponding code. If this has a resolved_sym, then\n\tgfc_trans_call is called. The call to gfc_conv_operator_assign\n\tis removed.\n\t(gfc_trans_where_2): Change the last argument in the call to\n\tgfc_trans_where_assign.\n\t* trans-stmt.h : Modify prototype for gfc_trans_call.\n\t* trans.c (gfc_trans_code): Use new args for gfc_trans_call.\n\n2009-05-10  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/38863\n\t* gfortran.dg/dependency_24.f90: New test.\n\t* gfortran.dg/dependency_23.f90: Clean up module files.\n\nFrom-SVN: r147329", "tree": {"sha": "515858a20177d34953f913624da9d1ef39065fb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/515858a20177d34953f913624da9d1ef39065fb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/comments", "author": null, "committer": null, "parents": [{"sha": "a34dda5b51c5242cf014e0fa47e6a230c98aff06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a34dda5b51c5242cf014e0fa47e6a230c98aff06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a34dda5b51c5242cf014e0fa47e6a230c98aff06"}], "stats": {"total": 240, "additions": 174, "deletions": 66}, "files": [{"sha": "bf28737dbc15719f7e6c08c4c30d33844ab6effa", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=eb74e79b1b2bc2d2d244c8c84a7c7ef293686546", "patch": "@@ -1,3 +1,22 @@\n+2009-05-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/38863\n+\t* trans-expr.c (gfc_conv_operator_assign): Remove function.\n+\t* trans.h : Remove prototype for gfc_conv_operator_assign.\n+\t* trans-stmt.c (gfc_conv_elemental_dependencies): Initialize\n+\tderivde types with intent(out).\n+\t(gfc_trans_call): Add mask, count1 and invert arguments. Add\n+\tcode to use mask for WHERE assignments.\n+\t(gfc_trans_forall_1): Use new arguments for gfc_trans_call.\n+\t(gfc_trans_where_assign): The gfc_symbol argument is replaced\n+\tby the corresponding code. If this has a resolved_sym, then\n+\tgfc_trans_call is called. The call to gfc_conv_operator_assign\n+\tis removed.\n+\t(gfc_trans_where_2): Change the last argument in the call to\n+\tgfc_trans_where_assign.\n+\t* trans-stmt.h : Modify prototype for gfc_trans_call.\n+\t* trans.c (gfc_trans_code): Use new args for gfc_trans_call.\n+\n 2009-05-08  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/39876"}, {"sha": "14f64c96ab88a768f17475df685c3fa99ceb0bd9", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=eb74e79b1b2bc2d2d244c8c84a7c7ef293686546", "patch": "@@ -1529,48 +1529,6 @@ conv_function_val (gfc_se * se, gfc_symbol * sym, gfc_expr * expr)\n }\n \n \n-/* Translate the call for an elemental subroutine call used in an operator\n-   assignment.  This is a simplified version of gfc_conv_procedure_call.  */\n-\n-tree\n-gfc_conv_operator_assign (gfc_se *lse, gfc_se *rse, gfc_symbol *sym)\n-{\n-  tree args;\n-  tree tmp;\n-  gfc_se se;\n-  stmtblock_t block;\n-\n-  /* Only elemental subroutines with two arguments.  */\n-  gcc_assert (sym->attr.elemental && sym->attr.subroutine);\n-  gcc_assert (sym->formal->next->next == NULL);\n-\n-  gfc_init_block (&block);\n-\n-  gfc_add_block_to_block (&block, &lse->pre);\n-  gfc_add_block_to_block (&block, &rse->pre);\n-\n-  /* Build the argument list for the call, including hidden string lengths.  */\n-  args = gfc_chainon_list (NULL_TREE, gfc_build_addr_expr (NULL_TREE, lse->expr));\n-  args = gfc_chainon_list (args, gfc_build_addr_expr (NULL_TREE, rse->expr));\n-  if (lse->string_length != NULL_TREE)\n-    args = gfc_chainon_list (args, lse->string_length);\n-  if (rse->string_length != NULL_TREE)\n-    args = gfc_chainon_list (args, rse->string_length);    \n-\n-  /* Build the function call.  */\n-  gfc_init_se (&se, NULL);\n-  conv_function_val (&se, sym, NULL);\n-  tmp = TREE_TYPE (TREE_TYPE (TREE_TYPE (se.expr)));\n-  tmp = build_call_list (tmp, se.expr, args);\n-  gfc_add_expr_to_block (&block, tmp);\n-\n-  gfc_add_block_to_block (&block, &lse->post);\n-  gfc_add_block_to_block (&block, &rse->post);\n-\n-  return gfc_finish_block (&block);\n-}\n-\n-\n /* Initialize MAPPING.  */\n \n void"}, {"sha": "9bad071cd373750b2dcd1bfc83e29f11481d6d1b", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 45, "deletions": 16, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=eb74e79b1b2bc2d2d244c8c84a7c7ef293686546", "patch": "@@ -270,9 +270,11 @@ gfc_conv_elemental_dependencies (gfc_se * se, gfc_se * loopse,\n \t  gfc_conv_expr_descriptor (&parmse, e, gfc_walk_expr (e));\n \t  gfc_add_block_to_block (&se->pre, &parmse.pre);\n \n-\t  /* If we've got INTENT(INOUT), initialize the array temporary with\n-\t     a copy of the values.  */\n-\t  if (fsym->attr.intent == INTENT_INOUT)\n+\t  /* If we've got INTENT(INOUT) or a derived type with INTENT(OUT),\n+\t     initialize the array temporary with a copy of the values.  */\n+\t  if (fsym->attr.intent == INTENT_INOUT\n+\t\t|| (fsym->ts.type ==BT_DERIVED\n+\t\t      && fsym->attr.intent == INTENT_OUT))\n \t    initial = parmse.expr;\n \t  else\n \t    initial = NULL_TREE;\n@@ -332,12 +334,16 @@ gfc_conv_elemental_dependencies (gfc_se * se, gfc_se * loopse,\n /* Translate the CALL statement.  Builds a call to an F95 subroutine.  */\n \n tree\n-gfc_trans_call (gfc_code * code, bool dependency_check)\n+gfc_trans_call (gfc_code * code, bool dependency_check,\n+\t\ttree mask, tree count1, bool invert)\n {\n   gfc_se se;\n   gfc_ss * ss;\n   int has_alternate_specifier;\n   gfc_dep_check check_variable;\n+  tree index = NULL_TREE;\n+  tree maskexpr = NULL_TREE;\n+  tree tmp;\n \n   /* A CALL starts a new block because the actual arguments may have to\n      be evaluated first.  */\n@@ -429,10 +435,32 @@ gfc_trans_call (gfc_code * code, bool dependency_check)\n       gfc_start_scalarized_body (&loop, &body);\n       gfc_init_block (&block);\n \n+      if (mask && count1)\n+\t{\n+\t  /* Form the mask expression according to the mask.  */\n+\t  index = count1;\n+\t  maskexpr = gfc_build_array_ref (mask, index, NULL);\n+\t  if (invert)\n+\t    maskexpr = fold_build1 (TRUTH_NOT_EXPR, TREE_TYPE (maskexpr),\n+\t\t\t\t    maskexpr);\n+\t}\n+\n       /* Add the subroutine call to the block.  */\n-      gfc_conv_procedure_call (&loopse, code->resolved_sym, code->ext.actual,\n-\t\t\t      code->expr, NULL_TREE);\n-      gfc_add_expr_to_block (&loopse.pre, loopse.expr);\n+      gfc_conv_procedure_call (&loopse, code->resolved_sym,\n+\t\t\t       code->ext.actual, code->expr,\n+\t\t\t       NULL_TREE);\n+\n+      if (mask && count1)\n+\t{\n+\t  tmp = build3_v (COND_EXPR, maskexpr, loopse.expr,\n+\t\t\t  build_empty_stmt ());\n+\t  gfc_add_expr_to_block (&loopse.pre, tmp);\n+\t  tmp = fold_build2 (PLUS_EXPR, gfc_array_index_type,\n+\t\t\t     count1, gfc_index_one_node);\n+\t  gfc_add_modify (&loopse.pre, count1, tmp);\n+\t}\n+      else\n+\tgfc_add_expr_to_block (&loopse.pre, loopse.expr);\n \n       gfc_add_block_to_block (&block, &loopse.pre);\n       gfc_add_block_to_block (&block, &loopse.post);\n@@ -3028,7 +3056,7 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n \t/* Explicit subroutine calls are prevented by the frontend but interface\n \t   assignments can legitimately produce them.  */\n \tcase EXEC_ASSIGN_CALL:\n-\t  assign = gfc_trans_call (c, true);\n+\t  assign = gfc_trans_call (c, true, NULL_TREE, NULL_TREE, false);\n           tmp = gfc_trans_nested_forall_loop (nested_forall_info, assign, 1);\n           gfc_add_expr_to_block (&block, tmp);\n           break;\n@@ -3223,7 +3251,7 @@ static tree\n gfc_trans_where_assign (gfc_expr *expr1, gfc_expr *expr2,\n \t\t\ttree mask, bool invert,\n                         tree count1, tree count2,\n-\t\t\tgfc_symbol *sym)\n+\t\t\tgfc_code *cnext)\n {\n   gfc_se lse;\n   gfc_se rse;\n@@ -3237,6 +3265,10 @@ gfc_trans_where_assign (gfc_expr *expr1, gfc_expr *expr2,\n   stmtblock_t body;\n   tree index, maskexpr;\n \n+  /* A defined assignment. */  \n+  if (cnext && cnext->resolved_sym)\n+    return gfc_trans_call (cnext, true, mask, count1, invert);\n+\n #if 0\n   /* TODO: handle this special case.\n      Special case a single function returning an array.  */\n@@ -3338,11 +3370,8 @@ gfc_trans_where_assign (gfc_expr *expr1, gfc_expr *expr2,\n     maskexpr = fold_build1 (TRUTH_NOT_EXPR, TREE_TYPE (maskexpr), maskexpr);\n \n   /* Use the scalar assignment as is.  */\n-  if (sym == NULL)\n-    tmp = gfc_trans_scalar_assign (&lse, &rse, expr1->ts,\n-\t\t\t\t   loop.temp_ss != NULL, false);\n-  else\n-    tmp = gfc_conv_operator_assign (&lse, &rse, sym);\n+  tmp = gfc_trans_scalar_assign (&lse, &rse, expr1->ts,\n+\t\t\t\t loop.temp_ss != NULL, false);\n \n   tmp = build3_v (COND_EXPR, maskexpr, tmp, build_empty_stmt ());\n \n@@ -3609,7 +3638,7 @@ gfc_trans_where_2 (gfc_code * code, tree mask, bool invert,\n                       tmp = gfc_trans_where_assign (expr1, expr2,\n \t\t\t\t\t\t    cmask, invert,\n \t\t\t\t\t\t    count1, count2,\n-\t\t\t\t\t\t    cnext->resolved_sym);\n+\t\t\t\t\t\t    cnext);\n \n                       tmp = gfc_trans_nested_forall_loop (nested_forall_info,\n                                                           tmp, 1);\n@@ -3627,7 +3656,7 @@ gfc_trans_where_2 (gfc_code * code, tree mask, bool invert,\n                   tmp = gfc_trans_where_assign (expr1, expr2,\n \t\t\t\t\t\tcmask, invert,\n \t\t\t\t\t\tcount1, count2,\n-\t\t\t\t\t\tcnext->resolved_sym);\n+\t\t\t\t\t\tcnext);\n                   gfc_add_expr_to_block (block, tmp);\n \n                 }"}, {"sha": "0b167b9f6fe3b3afb35503591d73a9af1e68b3d8", "filename": "gcc/fortran/trans-stmt.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ffortran%2Ftrans-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ffortran%2Ftrans-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.h?ref=eb74e79b1b2bc2d2d244c8c84a7c7ef293686546", "patch": "@@ -40,7 +40,7 @@ tree gfc_trans_goto (gfc_code *);\n tree gfc_trans_entry (gfc_code *);\n tree gfc_trans_pause (gfc_code *);\n tree gfc_trans_stop (gfc_code *);\n-tree gfc_trans_call (gfc_code *, bool);\n+tree gfc_trans_call (gfc_code *, bool, tree, tree, bool);\n tree gfc_trans_return (gfc_code *);\n tree gfc_trans_if (gfc_code *);\n tree gfc_trans_arithmetic_if (gfc_code *);"}, {"sha": "28cb60ab2ef5372bbca3054ebd9242f90bc92bbb", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=eb74e79b1b2bc2d2d244c8c84a7c7ef293686546", "patch": "@@ -1111,16 +1111,19 @@ gfc_trans_code (gfc_code * code)\n \t    if (code->resolved_isym\n \t\t&& code->resolved_isym->id == GFC_ISYM_MVBITS)\n \t      is_mvbits = true;\n-\t    res = gfc_trans_call (code, is_mvbits);\n+\t    res = gfc_trans_call (code, is_mvbits, NULL_TREE,\n+\t\t\t\t  NULL_TREE, false);\n \t  }\n \t  break;\n \n \tcase EXEC_CALL_PPC:\n-\t  res = gfc_trans_call (code, false);\n+\t  res = gfc_trans_call (code, false, NULL_TREE,\n+\t\t\t\tNULL_TREE, false);\n \t  break;\n \n \tcase EXEC_ASSIGN_CALL:\n-\t  res = gfc_trans_call (code, true);\n+\t  res = gfc_trans_call (code, true, NULL_TREE,\n+\t\t\t\tNULL_TREE, false);\n \t  break;\n \n \tcase EXEC_RETURN:"}, {"sha": "4846af245fdb09a0345ee5cf4a0543b514b9a301", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=eb74e79b1b2bc2d2d244c8c84a7c7ef293686546", "patch": "@@ -310,9 +310,6 @@ void gfc_conv_intrinsic_function (gfc_se *, gfc_expr *);\n /* Does an intrinsic map directly to an external library call.  */\n int gfc_is_intrinsic_libcall (gfc_expr *);\n \n-/* Used to call the elemental subroutines used in operator assignments.  */\n-tree gfc_conv_operator_assign (gfc_se *, gfc_se *, gfc_symbol *);\n-\n /* Used to call ordinary functions/subroutines\n    and procedure pointer components.  */\n int gfc_conv_procedure_call (gfc_se *, gfc_symbol *, gfc_actual_arglist *,"}, {"sha": "f8d5d3af1196291603d03f85c1bc0af38c2ca94d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb74e79b1b2bc2d2d244c8c84a7c7ef293686546", "patch": "@@ -1,4 +1,10 @@\n-2009-04-10  David Billinghurst <billingd@gcc.gnu.org>\n+2009-05-10  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/38863\n+\t* gfortran.dg/dependency_24.f90: New test.\n+\t* gfortran.dg/dependency_23.f90: Clean up module files.\n+\n+2009-05-10  David Billinghurst <billingd@gcc.gnu.org>\n \n \tPR fortran/38956\n \t* gfortran.dg/chmod_1.f90: Don't run on *-*-cygwin*."}, {"sha": "447d626c533652b3c4d2fab284804e749014fdb3", "filename": "gcc/testsuite/gfortran.dg/dependency_23.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_23.f90?ref=eb74e79b1b2bc2d2d244c8c84a7c7ef293686546", "patch": "@@ -52,5 +52,6 @@ end module rg0045_stuff\n   use rg0045_stuff\n   call rg0045(1, 2, 3)\n end\n+! { dg-final { cleanup-modules \"rg0045_stuff\" } }\n \n "}, {"sha": "aa753a893bef9491783c20789e71f67851dc4d29", "filename": "gcc/testsuite/gfortran.dg/dependency_23.f90.rej", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_23.f90.rej", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_23.f90.rej", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_23.f90.rej?ref=eb74e79b1b2bc2d2d244c8c84a7c7ef293686546", "patch": "@@ -0,0 +1,14 @@\n+***************\n+*** 52,56 ****\n+    use rg0045_stuff\n+    call rg0045(1, 2, 3)\n+  end\n+  \n+  \n+--- 52,57 ----\n+    use rg0045_stuff\n+    call rg0045(1, 2, 3)\n+  end\n++ ! { dg-final { cleanup-modules \"rg0045_stuff\" } }\n+  \n+  "}, {"sha": "9645f207538f93ca92a2c9fb3bfe1f57857242a5", "filename": "gcc/testsuite/gfortran.dg/dependency_24.f90", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_24.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb74e79b1b2bc2d2d244c8c84a7c7ef293686546/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_24.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_24.f90?ref=eb74e79b1b2bc2d2d244c8c84a7c7ef293686546", "patch": "@@ -0,0 +1,81 @@\n+! { dg-do run }\n+! Check the fix for PR38863 comment #1, where defined assignment\n+! to derived types was not treating components correctly that were\n+! not set explicitly.\n+!\n+! Contributed by Mikael Morin  <mikael@gcc.gnu.org>\n+!\n+module m\n+  type t\n+    integer :: i,j\n+  end type t\n+  type ti\n+    integer :: i,j = 99\n+  end type ti\n+  interface assignment (=)\n+    module procedure i_to_t, i_to_ti\n+  end interface\n+contains \n+  elemental subroutine i_to_ti (p, q)\n+    type(ti), intent(out) :: p\n+    integer, intent(in)  :: q\n+    p%i = q\n+  end subroutine\n+  elemental subroutine i_to_t (p, q)\n+    type(t), intent(out) :: p\n+    integer, intent(in)  :: q\n+    p%i = q\n+  end subroutine\n+end module\n+\n+  use m\n+  call test_t  ! Check original problem\n+  call test_ti ! Default initializers were treated wrongly\n+contains\n+  subroutine test_t\n+    type(t), target :: a(3)\n+    type(t), target  :: b(3)\n+    type(t), dimension(:), pointer :: p\n+    logical :: l(3)\n+\n+    a%i = 1\n+    a%j = [101, 102, 103]\n+    b%i = 3\n+    b%j = 4\n+\n+    p => b\n+    l = .true.\n+\n+    where (l)\n+      a = p%i         ! Comment #1 of PR38863 concerned WHERE assignment\n+    end where\n+    if (any (a%j .ne. [101, 102, 103])) call abort\n+\n+    a = p%i           ! Ordinary assignment was wrong too.\n+    if (any (a%j .ne. [101, 102, 103])) call abort\n+  end subroutine\n+\n+  subroutine test_ti\n+    type(ti), target :: a(3)\n+    type(ti), target  :: b(3)\n+    type(ti), dimension(:), pointer :: p\n+    logical :: l(3)\n+\n+    a%i = 1\n+    a%j = [101, 102, 103]\n+    b%i = 3\n+    b%j = 4\n+\n+    p => b\n+    l = .true.\n+\n+    where (l)\n+      a = p%i\n+    end where\n+    if (any (a%j .ne. 99)) call abort\n+\n+    a = p%i\n+    if (any (a%j .ne. 99)) call abort\n+  end subroutine\n+end\n+! { dg-final { cleanup-modules \"m\" } }"}]}