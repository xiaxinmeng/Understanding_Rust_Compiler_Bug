{"sha": "28c7180f1ce824f720bfd80895c03c5a46269497", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhjNzE4MGYxY2U4MjRmNzIwYmZkODA4OTVjMDNjNWE0NjI2OTQ5Nw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2015-03-13T13:18:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-03-13T13:18:39Z"}, "message": "exp_util.ads, [...] (Force_Evaluation): Add Related_Id and Is_Low/High_Bound params.\n\n2015-03-13  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_util.ads, exp_util.adb (Force_Evaluation): Add Related_Id and\n\tIs_Low/High_Bound params.\n\t* sem_ch3.adb (Constrain_Index): Use new Force_Evaluation calling\n\tsequence to simplify generation of FIRST/LAST temps for bounds.\n\nFrom-SVN: r221418", "tree": {"sha": "a80299f647d0969da2d56e01adca47afb40dbeb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a80299f647d0969da2d56e01adca47afb40dbeb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28c7180f1ce824f720bfd80895c03c5a46269497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c7180f1ce824f720bfd80895c03c5a46269497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28c7180f1ce824f720bfd80895c03c5a46269497", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c7180f1ce824f720bfd80895c03c5a46269497/comments", "author": null, "committer": null, "parents": [{"sha": "e83a01c383f9375da2af8786ba9f467044268e83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83a01c383f9375da2af8786ba9f467044268e83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e83a01c383f9375da2af8786ba9f467044268e83"}], "stats": {"total": 136, "additions": 54, "deletions": 82}, "files": [{"sha": "d9b7325dc5ea2e86070a960c1a9399f60ce95c72", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c7180f1ce824f720bfd80895c03c5a46269497/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c7180f1ce824f720bfd80895c03c5a46269497/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=28c7180f1ce824f720bfd80895c03c5a46269497", "patch": "@@ -1,3 +1,10 @@\n+2015-03-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_util.ads, exp_util.adb (Force_Evaluation): Add Related_Id and\n+\tIs_Low/High_Bound params.\n+\t* sem_ch3.adb (Constrain_Index): Use new Force_Evaluation calling\n+\tsequence to simplify generation of FIRST/LAST temps for bounds.\n+\n 2015-03-12  Olivier Hainque  <hainque@adacore.com>\n \n \t* gcc-interface/trans.c (Attribute_to_gnu) <Code_Address case>:"}, {"sha": "bc58efebbd515a7b4bafe9273ba0c9a5ffc02cbd", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c7180f1ce824f720bfd80895c03c5a46269497/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c7180f1ce824f720bfd80895c03c5a46269497/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=28c7180f1ce824f720bfd80895c03c5a46269497", "patch": "@@ -2996,9 +2996,22 @@ package body Exp_Util is\n    -- Force_Evaluation --\n    ----------------------\n \n-   procedure Force_Evaluation (Exp : Node_Id; Name_Req : Boolean := False) is\n+   procedure Force_Evaluation\n+     (Exp           : Node_Id;\n+      Name_Req      : Boolean   := False;\n+      Related_Id    : Entity_Id := Empty;\n+      Is_Low_Bound  : Boolean   := False;\n+      Is_High_Bound : Boolean   := False)\n+   is\n    begin\n-      Remove_Side_Effects (Exp, Name_Req, Variable_Ref => True);\n+      Remove_Side_Effects\n+        (Exp           => Exp,\n+         Name_Req      => Name_Req,\n+         Variable_Ref  => True,\n+         Renaming_Req  => False,\n+         Related_Id    => Related_Id,\n+         Is_Low_Bound  => Is_Low_Bound,\n+         Is_High_Bound => Is_High_Bound);\n    end Force_Evaluation;\n \n    ---------------------------------"}, {"sha": "1e5aec1584d0299ced646ac3fc5a67b04232064a", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c7180f1ce824f720bfd80895c03c5a46269497/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c7180f1ce824f720bfd80895c03c5a46269497/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=28c7180f1ce824f720bfd80895c03c5a46269497", "patch": "@@ -520,15 +520,26 @@ package Exp_Util is\n    --  like a potential bug ???\n \n    procedure Force_Evaluation\n-     (Exp      : Node_Id;\n-      Name_Req : Boolean := False);\n+     (Exp           : Node_Id;\n+      Name_Req      : Boolean   := False;\n+      Related_Id    : Entity_Id := Empty;\n+      Is_Low_Bound  : Boolean   := False;\n+      Is_High_Bound : Boolean   := False);\n    --  Force the evaluation of the expression right away. Similar behavior\n    --  to Remove_Side_Effects when Variable_Ref is set to TRUE. That is to\n-   --  say, it removes the side-effects and captures the values of the\n+   --  say, it removes the side effects and captures the values of the\n    --  variables. Remove_Side_Effects guarantees that multiple evaluations\n    --  of the same expression won't generate multiple side effects, whereas\n    --  Force_Evaluation further guarantees that all evaluations will yield\n    --  the same result.\n+   --\n+   --  Related_Id denotes the entity of the context where Expr appears. Flags\n+   --  Is_Low_Bound and Is_High_Bound specify whether the expression to check\n+   --  is the low or the high bound of a range. These three optional arguments\n+   --  signal Remove_Side_Effects to create an external symbol of the form\n+   --  Chars (Related_Id)_FIRST/_LAST. If Related_Id is set, then exactly one\n+   --  of the Is_xxx_Bound flags must be set. For use of these parameters see\n+   --  the warning in the body of Sem_Ch3.Process_Range_Expr_In_Decl.\n \n    function Fully_Qualified_Name_String\n      (E          : Entity_Id;"}, {"sha": "3ec9ab523aa5608e572ed1ce97a8b2d8ae7068a4", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 18, "deletions": 77, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c7180f1ce824f720bfd80895c03c5a46269497/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c7180f1ce824f720bfd80895c03c5a46269497/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=28c7180f1ce824f720bfd80895c03c5a46269497", "patch": "@@ -8053,9 +8053,9 @@ package body Sem_Ch3 is\n                while Present (C) loop\n                   Expr := Node (C);\n \n-                  --  It is safe here to call New_Copy_Tree since\n-                  --  Force_Evaluation was called on each constraint in\n-                  --  Build_Discriminant_Constraints.\n+                  --  It is safe here to call New_Copy_Tree since we called\n+                  --  Force_Evaluation on each constraint previously\n+                  --  in Build_Discriminant_Constraints.\n \n                   Append (New_Copy_Tree (Expr), To => Constr_List);\n \n@@ -13220,8 +13220,10 @@ package body Sem_Ch3 is\n          --  supposed to occur, e.g. on default parameters of a call.\n \n          if Expander_Active or GNATprove_Mode then\n-            Force_Evaluation (Low_Bound (R));\n-            Force_Evaluation (High_Bound (R));\n+            Force_Evaluation\n+              (Low_Bound (R),  Related_Id => Related_Id, Is_Low_Bound => True);\n+            Force_Evaluation\n+              (High_Bound (R), Related_Id => Related_Id, Is_Low_Bound => True);\n          end if;\n \n       elsif Nkind (S) = N_Discriminant_Association then\n@@ -20171,80 +20173,19 @@ package body Sem_Ch3 is\n \n             if Expander_Active or GNATprove_Mode then\n \n-               --  If no subtype name, then just call Force_Evaluation to\n-               --  create declarations as needed to deal with side effects.\n-               --  Also ignore calls from within a record type, where we\n-               --  have possible scoping issues.\n-\n-               if No (Subtyp) or else Is_Record_Type (Current_Scope) then\n-                  Force_Evaluation (Lo);\n-                  Force_Evaluation (Hi);\n-\n-               --  If a subtype is given, then we capture the bounds if they\n-               --  are not known at compile time, using constant identifiers\n-               --  xxx_FIRST and xxx_LAST where xxx is the name of the subtype.\n+               --  Call Force_Evaluation to create declarations as needed to\n+               --  deal with side effects, and also create typ_FIRST/LAST\n+               --  entities for bounds if we have a subtype name.\n \n                --  Note: we do this transformation even if expansion is not\n-               --  active, and in particular we do it in GNATprove_Mode since\n-               --  the transformation is in general required to ensure that the\n-               --  resulting tree has proper Ada semantics.\n-\n-               --  Historical note: We used to just do Force_Evaluation calls\n-               --  in all cases, but it is better to capture the bounds with\n-               --  proper non-serialized names, since these will be accessed\n-               --  from other units, and hence may be public, and also we can\n-               --  then expand 'First and 'Last references to be references to\n-               --  these special names.\n-\n-               else\n-                  if not Compile_Time_Known_Value (Lo)\n-\n-                    --  No need to capture bounds if they already are\n-                    --  references to constants.\n-\n-                    and then not (Is_Entity_Name (Lo)\n-                                   and then Is_Constant_Object (Entity (Lo)))\n-                  then\n-                     declare\n-                        Loc : constant Source_Ptr := Sloc (Lo);\n-                        Lov : constant Entity_Id  :=\n-                          Make_Defining_Identifier (Loc,\n-                            Chars =>\n-                              New_External_Name (Chars (Subtyp), \"_FIRST\"));\n-                     begin\n-                        Insert_Action (R,\n-                          Make_Object_Declaration (Loc,\n-                            Defining_Identifier => Lov,\n-                            Object_Definition   =>\n-                              New_Occurrence_Of (Base_Type (T), Loc),\n-                            Constant_Present    => True,\n-                            Expression          => Relocate_Node (Lo)));\n-                        Rewrite (Lo, New_Occurrence_Of (Lov, Loc));\n-                     end;\n-                  end if;\n-\n-                  if not Compile_Time_Known_Value (Hi)\n-                    and then not (Is_Entity_Name (Hi)\n-                                  and then Is_Constant_Object (Entity (Hi)))\n-                  then\n-                     declare\n-                        Loc : constant Source_Ptr := Sloc (Hi);\n-                        Hiv : constant Entity_Id  :=\n-                          Make_Defining_Identifier (Loc,\n-                            Chars =>\n-                              New_External_Name (Chars (Subtyp), \"_LAST\"));\n-                     begin\n-                        Insert_Action (R,\n-                          Make_Object_Declaration (Loc,\n-                            Defining_Identifier => Hiv,\n-                            Object_Definition   =>\n-                              New_Occurrence_Of (Base_Type (T), Loc),\n-                            Constant_Present    => True,\n-                            Expression          => Relocate_Node (Hi)));\n-                        Rewrite (Hi, New_Occurrence_Of (Hiv, Loc));\n-                     end;\n-                  end if;\n-               end if;\n+               --  active if we are in GNATprove_Mode since the transformation\n+               --  is in general required to ensure that the resulting tree has\n+               --  proper Ada semantics.\n+\n+               Force_Evaluation\n+                 (Lo, Related_Id => Subtyp, Is_Low_Bound  => True);\n+               Force_Evaluation\n+                 (Hi, Related_Id => Subtyp, Is_High_Bound => True);\n             end if;\n \n             --  We use a flag here instead of suppressing checks on the"}]}