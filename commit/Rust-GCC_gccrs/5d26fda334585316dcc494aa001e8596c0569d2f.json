{"sha": "5d26fda334585316dcc494aa001e8596c0569d2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQyNmZkYTMzNDU4NTMxNmRjYzQ5NGFhMDAxZTg1OTZjMDU2OWQyZg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-11-22T14:14:35Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-11-22T14:14:35Z"}, "message": "trans-expr.c (gfc_caf_get_image_index): Fix image calculation.\n\ngcc/fortran/\n2014-11-22  Tobias Burnus  <burnus@net-b.de>\n\n        * trans-expr.c (gfc_caf_get_image_index): Fix image calculation.\n\ngcc/testsuite/\n2014-11-22  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/coarray/cosubscript_1.f90: New.\n\nFrom-SVN: r217966", "tree": {"sha": "fec7e87fce4a4cbc48f926ffe296f743f8fa41ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fec7e87fce4a4cbc48f926ffe296f743f8fa41ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d26fda334585316dcc494aa001e8596c0569d2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d26fda334585316dcc494aa001e8596c0569d2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d26fda334585316dcc494aa001e8596c0569d2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d26fda334585316dcc494aa001e8596c0569d2f/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19f51f28fcb611671a103412b53c9fd04b1f4848", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19f51f28fcb611671a103412b53c9fd04b1f4848", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19f51f28fcb611671a103412b53c9fd04b1f4848"}], "stats": {"total": 92, "additions": 85, "deletions": 7}, "files": [{"sha": "db650e3f90c3c78fb43ce87f186b097bd0b3d607", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d26fda334585316dcc494aa001e8596c0569d2f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d26fda334585316dcc494aa001e8596c0569d2f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5d26fda334585316dcc494aa001e8596c0569d2f", "patch": "@@ -1,3 +1,7 @@\n+2014-11-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* trans-expr.c (gfc_caf_get_image_index): Fix image calculation.\n+\n 2014-11-15  Tobias Burnus  <burnus@net-b.de>\n \n \t* error.c (gfc_fatal_error_1): Renamed from gfc_fatal_error."}, {"sha": "af7e8cf3c8c0b139b3408b7f411c0d3142139964", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d26fda334585316dcc494aa001e8596c0569d2f/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d26fda334585316dcc494aa001e8596c0569d2f/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=5d26fda334585316dcc494aa001e8596c0569d2f", "patch": "@@ -1518,8 +1518,8 @@ gfc_get_caf_token_offset (tree *token, tree *offset, tree caf_decl, tree se_expr\n \n \n /* Convert the coindex of a coarray into an image index; the result is\n-   image_num =  (idx(1)-lcobound(1)+1) + (idx(2)-lcobound(2)+1)*extent(1)\n-              + (idx(3)-lcobound(3)+1)*extent(2) + ...  */\n+   image_num =  (idx(1)-lcobound(1)+1) + (idx(2)-lcobound(2))*extent(1)\n+              + (idx(3)-lcobound(3))*extend(1)*extent(2) + ...  */\n \n tree\n gfc_caf_get_image_index (stmtblock_t *block, gfc_expr *e, tree desc)\n@@ -1553,8 +1553,10 @@ gfc_caf_get_image_index (stmtblock_t *block, gfc_expr *e, tree desc)\n \tif (i < ref->u.ar.dimen + ref->u.ar.codimen - 1)\n \t  {\n \t    ubound = gfc_conv_descriptor_ubound_get (desc, gfc_rank_cst[i]);\n-\t    extent = gfc_conv_array_extent_dim (lbound, ubound, NULL);\n-\t    extent = fold_convert (integer_type_node, extent);\n+\t    tmp = gfc_conv_array_extent_dim (lbound, ubound, NULL);\n+\t    tmp = fold_convert (integer_type_node, tmp);\n+\t    extent = fold_build2_loc (input_location, MULT_EXPR,\n+\t\t\t\t      integer_type_node, extent, tmp);\n \t  }\n       }\n   else\n@@ -1575,10 +1577,12 @@ gfc_caf_get_image_index (stmtblock_t *block, gfc_expr *e, tree desc)\n \t  {\n \t    ubound = GFC_TYPE_ARRAY_UBOUND (TREE_TYPE (desc), i);\n \t    ubound = fold_convert (integer_type_node, ubound);\n-\t    extent = fold_build2_loc (input_location, MINUS_EXPR,\n+\t    tmp = fold_build2_loc (input_location, MINUS_EXPR,\n \t\t\t\t      integer_type_node, ubound, lbound);\n-\t    extent = fold_build2_loc (input_location, PLUS_EXPR, integer_type_node,\n-\t\t\t\t      extent, integer_one_node);\n+\t    tmp = fold_build2_loc (input_location, PLUS_EXPR, integer_type_node,\n+\t\t\t\t   tmp, integer_one_node);\n+\t    extent = fold_build2_loc (input_location, MULT_EXPR,\n+\t\t\t\t      integer_type_node, extent, tmp);\n \t  }\n       }\n   img_idx = fold_build2_loc (input_location, PLUS_EXPR, integer_type_node,"}, {"sha": "e30e0ff5e14910afd35a73ba4298ead109197350", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d26fda334585316dcc494aa001e8596c0569d2f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d26fda334585316dcc494aa001e8596c0569d2f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d26fda334585316dcc494aa001e8596c0569d2f", "patch": "@@ -1,3 +1,7 @@\n+2014-11-22  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray/cosubscript_1.f90: New.\n+\n 2014-11-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/pack11.ads: New test."}, {"sha": "20ee454450f2f10f7eaac6fcf3e8b82a51120031", "filename": "gcc/testsuite/gfortran.dg/coarray/cosubscript_1.f90", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d26fda334585316dcc494aa001e8596c0569d2f/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcosubscript_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d26fda334585316dcc494aa001e8596c0569d2f/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcosubscript_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcosubscript_1.f90?ref=5d26fda334585316dcc494aa001e8596c0569d2f", "patch": "@@ -0,0 +1,66 @@\n+! { dg-do run }\n+!\n+! From the HPCTools Group of University of Houston\n+!\n+! For a coindexed object, its cosubscript list determines the image\n+! index in the same way that a subscript list determines the subscript\n+! order value for an array element\n+\n+! Run at least with 3 images for the normal checking code\n+! Modified to also accept a single or two images\n+program cosubscript_test\n+  implicit none\n+  \n+  integer, parameter :: X = 3, Y = 2\n+  integer, parameter :: P = 1, Q = -1\n+  integer :: me\n+  integer :: i,j,k\n+  \n+  integer :: scalar[0:P, -1:Q, *]\n+  \n+  integer :: dim3_max, counter\n+  logical :: is_err\n+  \n+  is_err = .false.\n+  me = this_image()\n+  scalar   = me\n+  dim3_max = num_images() / ( (P+1)*(Q+2) )\n+  \n+  sync all\n+\n+  if (num_images() == 1) then\n+    k = 1\n+    j = -1\n+    i = 0\n+    if (scalar[i,j,k] /= this_image()) call abort\n+    stop \"OK\"\n+  else if (num_images() == 2) then\n+    k = 1\n+    j = -1\n+    counter = 0\n+    do i = 0,P\n+      counter = counter+1\n+      if (counter /= scalar[i,j,k]) call abort()\n+    end do\n+    stop \"OK\"\n+  end if\n+\n+  ! ******* SCALAR ***********\n+  counter = 0\n+  do k = 1, dim3_max\n+     do j = -1,Q\n+        do i = 0,P\n+           counter = counter+1\n+           if (counter /= scalar[i,j,k]) then\n+              print * , \"Error in cosubscript translation scalar\"\n+              print * , \"[\", i,\",\",j,\",\",k,\"] = \",scalar[i,j,k],\"/=\",counter\n+              is_err = .true.\n+           end if\n+        end do\n+     end do\n+  end do\n+  \n+  if (is_err) then\n+    call abort()\n+  end if\n+end program cosubscript_test"}]}