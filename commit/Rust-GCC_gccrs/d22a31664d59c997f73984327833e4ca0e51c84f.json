{"sha": "d22a31664d59c997f73984327833e4ca0e51c84f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIyYTMxNjY0ZDU5Yzk5N2Y3Mzk4NDMyNzgzM2U0Y2EwZTUxYzg0Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-04-30T13:10:54Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-04-30T13:10:54Z"}, "message": "PR libstdc++/30449 (equal)\n\n2007-04-30  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/30449 (equal)\n\t* include/bits/stl_algobase.h (struct __niter_base): Add.\n\t(copy(_II, _II, _OI), copy_backward(_BI1, _BI1, _BI2),\n\tfill(_ForwardIterator, _ForwardIterator, const _Tp&),\n\tfill_n(_OI, _Size, const _Tp&), equal(_II1, _II1, _II2)):\n\tUse it.\n\t(struct __copy_normal, __copy_backward_normal,\n\tstruct __fill_normal, struct __fill_n_normal): Remove.\n\t(struct __equal, struct __equal_aux): Add.\n\t* include/bits/stl_iterator.h: Add _Iterator_type typedef.\n\n\t* include/bits/stl_algobase.h (__fill_aux(wchar_t*,\n\twchar_t*, wchar_t), __fill_n_aux(wchar_t*, _Size, wchar_t)):\n\tRemove.\n\n\t* testsuite/23_containers/requirements/sequences/dr438/vector/\n\tconstructor_1_neg.cc: Adjust dg-error line number.\n\t* testsuite/23_containers/requirements/sequences/dr438/vector/\n\tconstructor_2_neg.cc: Likewise.\n\nFrom-SVN: r124295", "tree": {"sha": "9c57e2261e2c10196b1c42a6b0d19e2d7f45da39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c57e2261e2c10196b1c42a6b0d19e2d7f45da39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d22a31664d59c997f73984327833e4ca0e51c84f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d22a31664d59c997f73984327833e4ca0e51c84f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d22a31664d59c997f73984327833e4ca0e51c84f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d22a31664d59c997f73984327833e4ca0e51c84f/comments", "author": null, "committer": null, "parents": [{"sha": "6a7508ec12df68051366e3305c02c5940db2df75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a7508ec12df68051366e3305c02c5940db2df75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a7508ec12df68051366e3305c02c5940db2df75"}], "stats": {"total": 297, "additions": 123, "deletions": 174}, "files": [{"sha": "f094251003cb5c09133ec68de3ba9b85079383b4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d22a31664d59c997f73984327833e4ca0e51c84f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d22a31664d59c997f73984327833e4ca0e51c84f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d22a31664d59c997f73984327833e4ca0e51c84f", "patch": "@@ -1,3 +1,25 @@\n+2007-04-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/30449 (equal)\n+\t* include/bits/stl_algobase.h (struct __niter_base): Add.\n+\t(copy(_II, _II, _OI), copy_backward(_BI1, _BI1, _BI2),\n+\tfill(_ForwardIterator, _ForwardIterator, const _Tp&),\n+\tfill_n(_OI, _Size, const _Tp&), equal(_II1, _II1, _II2)):\n+\tUse it.\n+\t(struct __copy_normal, __copy_backward_normal,\n+\tstruct __fill_normal, struct __fill_n_normal): Remove.\n+\t(struct __equal, struct __equal_aux): Add.\n+\t* include/bits/stl_iterator.h: Add _Iterator_type typedef.\n+\n+\t* include/bits/stl_algobase.h (__fill_aux(wchar_t*,\n+\twchar_t*, wchar_t), __fill_n_aux(wchar_t*, _Size, wchar_t)):\n+\tRemove.\n+\n+\t* testsuite/23_containers/requirements/sequences/dr438/vector/\n+\tconstructor_1_neg.cc: Adjust dg-error line number.\n+\t* testsuite/23_containers/requirements/sequences/dr438/vector/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2007-04-30  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/type_traits (is_pod): Use __is_pod."}, {"sha": "6be1eb123e1fa57596b5781b76a5dff57faf5b59", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 96, "deletions": 171, "changes": 267, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d22a31664d59c997f73984327833e4ca0e51c84f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d22a31664d59c997f73984327833e4ca0e51c84f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=d22a31664d59c997f73984327833e4ca0e51c84f", "patch": "@@ -64,7 +64,6 @@\n \n #include <bits/c++config.h>\n #include <cstring>\n-#include <cwchar>\n #include <cstddef>\n #include <bits/functexcept.h>\n #include <bits/stl_pair.h>\n@@ -161,9 +160,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t_ReferenceType1;\n       typedef typename iterator_traits<_ForwardIterator2>::reference\n \t_ReferenceType2;\n-      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value &&\n-\t__are_same<_ValueType1 &, _ReferenceType1>::__value &&\n-\t__are_same<_ValueType2 &, _ReferenceType2>::__value>::\n+      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value\n+\t&& __are_same<_ValueType1&, _ReferenceType1>::__value\n+\t&& __are_same<_ValueType2&, _ReferenceType2>::__value>::\n \titer_swap(__a, __b);\n     }\n \n@@ -285,6 +284,26 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __a;\n     }\n \n+\n+  // If _Iterator is a __normal_iterator return its base (a plain pointer,\n+  // normally) otherwise return it untouched.  See copy, fill, ... \n+  template<typename _Iterator,\n+\t   bool _BoolType = __is_normal_iterator<_Iterator>::__value>\n+    struct __niter_base\n+    {\n+      static const _Iterator&\n+      __b(const _Iterator& __it)\n+      { return __it; }\n+    };\n+\n+  template<typename _Iterator>\n+    struct __niter_base<_Iterator, true>\n+    {\n+      static const typename _Iterator::_Iterator_type&\n+      __b(const _Iterator& __it)\n+      { return __it.base(); }\n+    };\n+\n   // All of these auxiliary structs serve two purposes.  (1) Replace\n   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,\n   // because the input and output ranges are permitted to overlap.)\n@@ -378,43 +397,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     __copy_aux(istreambuf_iterator<_CharT, char_traits<_CharT> >,\n \t       istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);\n \n-  template<bool, bool>\n-    struct __copy_normal\n-    {\n-      template<typename _II, typename _OI>\n-        static _OI\n-        __copy_n(_II __first, _II __last, _OI __result)\n-        { return std::__copy_aux(__first, __last, __result); }\n-    };\n-\n-  template<>\n-    struct __copy_normal<true, false>\n-    {\n-      template<typename _II, typename _OI>\n-        static _OI\n-        __copy_n(_II __first, _II __last, _OI __result)\n-        { return std::__copy_aux(__first.base(), __last.base(), __result); }\n-    };\n-\n-  template<>\n-    struct __copy_normal<false, true>\n-    {\n-      template<typename _II, typename _OI>\n-        static _OI\n-        __copy_n(_II __first, _II __last, _OI __result)\n-        { return _OI(std::__copy_aux(__first, __last, __result.base())); }\n-    };\n-\n-  template<>\n-    struct __copy_normal<true, true>\n-    {\n-      template<typename _II, typename _OI>\n-        static _OI\n-        __copy_n(_II __first, _II __last, _OI __result)\n-        { return _OI(std::__copy_aux(__first.base(), __last.base(),\n-\t\t\t\t     __result.base())); }\n-    };\n-\n   /**\n    *  @brief Copies the range [first,last) into result.\n    *  @param  first  An input iterator.\n@@ -431,23 +413,22 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  Note that the end of the output range is permitted to be contained\n    *  within [first,last).\n   */\n-  template<typename _InputIterator, typename _OutputIterator>\n-    inline _OutputIterator\n-    copy(_InputIterator __first, _InputIterator __last,\n-\t _OutputIterator __result)\n+  template<typename _II, typename _OI>\n+    inline _OI\n+    copy(_II __first, _II __last, _OI __result)\n     {\n       // concept requirements\n-      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n-      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,\n-\t    typename iterator_traits<_InputIterator>::value_type>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_II>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OI,\n+\t    typename iterator_traits<_II>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-       const bool __in = __is_normal_iterator<_InputIterator>::__value;\n-       const bool __out = __is_normal_iterator<_OutputIterator>::__value;\n-       return std::__copy_normal<__in, __out>::__copy_n(__first, __last,\n-\t\t\t\t\t\t\t__result);\n+      return _OI(std::__copy_aux(__niter_base<_II>::__b(__first),\n+\t\t\t\t __niter_base<_II>::__b(__last),\n+\t\t\t\t __niter_base<_OI>::__b(__result)));\n     }\n \n+\n   template<bool, typename>\n     struct __copy_backward\n     {\n@@ -505,45 +486,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t\t\t\t __result);\n     }\n \n-  template<bool, bool>\n-    struct __copy_backward_normal\n-    {\n-      template<typename _BI1, typename _BI2>\n-        static _BI2\n-        __copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)\n-        { return std::__copy_backward_aux(__first, __last, __result); }\n-    };\n-\n-  template<>\n-    struct __copy_backward_normal<true, false>\n-    {\n-      template<typename _BI1, typename _BI2>\n-        static _BI2\n-        __copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)\n-        { return std::__copy_backward_aux(__first.base(), __last.base(),\n-\t\t\t\t\t  __result); }\n-    };\n-\n-  template<>\n-    struct __copy_backward_normal<false, true>\n-    {\n-      template<typename _BI1, typename _BI2>\n-        static _BI2\n-        __copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)\n-        { return _BI2(std::__copy_backward_aux(__first, __last,\n-\t\t\t\t\t       __result.base())); }\n-    };\n-\n-  template<>\n-    struct __copy_backward_normal<true, true>\n-    {\n-      template<typename _BI1, typename _BI2>\n-        static _BI2\n-        __copy_b_n(_BI1 __first, _BI1 __last, _BI2 __result)\n-        { return _BI2(std::__copy_backward_aux(__first.base(), __last.base(),\n-\t\t\t\t\t       __result.base())); }\n-    };\n-\n   /**\n    *  @brief Copies the range [first,last) into result.\n    *  @param  first  A bidirectional iterator.\n@@ -573,11 +515,9 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    typename iterator_traits<_BI2>::value_type>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      const bool __bi1 = __is_normal_iterator<_BI1>::__value;\n-      const bool __bi2 = __is_normal_iterator<_BI2>::__value;\n-      return std::__copy_backward_normal<__bi1, __bi2>::__copy_b_n(__first,\n-\t\t\t\t\t\t\t\t   __last,\n-\t\t\t\t\t\t\t\t   __result);\n+      return _BI2(std::__copy_backward_aux(__niter_base<_BI1>::__b(__first),\n+\t\t\t\t\t   __niter_base<_BI1>::__b(__last),\n+\t\t\t\t\t   __niter_base<_BI2>::__b(__result)));\n     }\n \n \n@@ -617,7 +557,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       std::__fill<__scalar>::fill(__first, __last, __value);\n     }\n \n-  // Specialization: for char types we can use memset (wmemset).\n+  // Specialization: for char types we can use memset.\n   inline void\n   __fill_aux(unsigned char* __first, unsigned char* __last, unsigned char __c)\n   { std::memset(__first, __c, __last - __first); }\n@@ -630,32 +570,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   __fill_aux(char* __first, char* __last, char __c)\n   { std::memset(__first, static_cast<unsigned char>(__c), __last - __first); }\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  inline void\n-  __fill_aux(wchar_t* __first, wchar_t* __last, wchar_t __c)\n-  { std::wmemset(__first, __c, __last - __first); }\n-#endif\n-\n-  template<bool>\n-    struct __fill_normal\n-    {\n-      template<typename _ForwardIterator, typename _Tp>\n-        static void\n-        __fill_n(_ForwardIterator __first, _ForwardIterator __last,\n-\t\t const _Tp& __value)\n-        { std::__fill_aux(__first, __last, __value); }\n-    };\n-\n-  template<>\n-    struct __fill_normal<true>\n-    {\n-      template<typename _ForwardIterator, typename _Tp>\n-        static void\n-        __fill_n(_ForwardIterator __first, _ForwardIterator __last,\n-\t\t const _Tp& __value)\n-        { std::__fill_aux(__first.base(), __last.base(), __value); }\n-    };\n-\n   /**\n    *  @brief Fills the range [first,last) with copies of value.\n    *  @param  first  A forward iterator.\n@@ -676,8 +590,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t  _ForwardIterator>)\n       __glibcxx_requires_valid_range(__first, __last);\n \n-      const bool __fi = __is_normal_iterator<_ForwardIterator>::__value;\n-      std::__fill_normal<__fi>::__fill_n(__first, __last, __value);\n+      std::__fill_aux(__niter_base<_ForwardIterator>::__b(__first),\n+\t\t      __niter_base<_ForwardIterator>::__b(__last), __value);\n     }\n \n \n@@ -740,34 +654,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __first + __n;\n     }\n \n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template<typename _Size>\n-    inline wchar_t*\n-    __fill_n_aux(wchar_t* __first, _Size __n, wchar_t __c)\n-    {\n-      std::__fill_aux(__first, __first + __n, __c);\n-      return __first + __n;\n-    }\n-#endif\n-\n-  template<bool>\n-    struct __fill_n_normal\n-    {\n-      template<typename _OI, typename _Size, typename _Tp>\n-        static _OI\n-        __fill_n_n(_OI __first, _Size __n, const _Tp& __value)\n-        { return std::__fill_n_aux(__first, __n, __value); }\n-    };\n-\n-  template<>\n-    struct __fill_n_normal<true>\n-    {\n-      template<typename _OI, typename _Size, typename _Tp>\n-        static _OI\n-        __fill_n_n(_OI __first, _Size __n, const _Tp& __value)\n-        { return _OI(std::__fill_n_aux(__first.base(), __n, __value)); }\n-    };\n-\n   /**\n    *  @brief Fills the range [first,first+n) with copies of value.\n    *  @param  first  An output iterator.\n@@ -779,15 +665,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  types filling contiguous areas of memory, this becomes an inline call\n    *  to @c memset or @ wmemset.\n   */\n-  template<typename _OutputIterator, typename _Size, typename _Tp>\n-    inline _OutputIterator\n-    fill_n(_OutputIterator __first, _Size __n, const _Tp& __value)\n+  template<typename _OI, typename _Size, typename _Tp>\n+    inline _OI\n+    fill_n(_OI __first, _Size __n, const _Tp& __value)\n     {\n       // concept requirements\n-      __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator, _Tp>)\n+      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)\n \n-      const bool __oi = __is_normal_iterator<_OutputIterator>::__value;\n-      return std::__fill_n_normal<__oi>::__fill_n_n(__first, __n, __value);\n+      return _OI(std::__fill_n_aux(__niter_base<_OI>::__b(__first), __n,\n+\t\t\t\t   __value));\n     }\n \n   /**\n@@ -856,6 +742,47 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return pair<_InputIterator1, _InputIterator2>(__first1, __first2);\n     }\n \n+\n+  template<bool _BoolType>\n+    struct __equal\n+    {\n+      template<typename _II1, typename _II2>\n+        static bool\n+        equal(_II1 __first1, _II1 __last1, _II2 __first2)\n+        {\n+\t  for (; __first1 != __last1; ++__first1, ++__first2)\n+\t    if (!(*__first1 == *__first2))\n+\t      return false;\n+\t  return true;\n+\t}\n+    };\n+\n+  template<>\n+    struct __equal<true>\n+    {\n+      template<typename _Tp>\n+        static bool\n+        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)\n+        {\n+\t  return !std::memcmp(__first1, __first2, sizeof(_Tp)\n+\t\t\t      * (__last1 - __first1));\n+\t}\n+    };\n+\n+  template<typename _II1, typename _II2>\n+    inline bool\n+    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)\n+    {\n+      typedef typename iterator_traits<_II1>::value_type _ValueType1;\n+      typedef typename iterator_traits<_II2>::value_type _ValueType2;\n+      const bool __simple = (__is_integer<_ValueType1>::__value\n+\t                     && __is_pointer<_II1>::__value\n+\t                     && __is_pointer<_II2>::__value\n+\t\t\t     && __are_same<_ValueType1, _ValueType2>::__value);\n+\n+      return std::__equal<__simple>::equal(__first1, __last1, __first2);\n+    }\n+\n   /**\n    *  @brief Tests a range for element-wise equality.\n    *  @param  first1  An input iterator.\n@@ -867,23 +794,21 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  false depending on whether all of the corresponding elements of the\n    *  ranges are equal.\n   */\n-  template<typename _InputIterator1, typename _InputIterator2>\n+  template<typename _II1, typename _II2>\n     inline bool\n-    equal(_InputIterator1 __first1, _InputIterator1 __last1,\n-\t  _InputIterator2 __first2)\n+    equal(_II1 __first1, _II1 __last1, _II2 __first2)\n     {\n       // concept requirements\n-      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)\n-      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_II1>)\n+      __glibcxx_function_requires(_InputIteratorConcept<_II2>)\n       __glibcxx_function_requires(_EqualOpConcept<\n-\t    typename iterator_traits<_InputIterator1>::value_type,\n-\t    typename iterator_traits<_InputIterator2>::value_type>)\n+\t    typename iterator_traits<_II1>::value_type,\n+\t    typename iterator_traits<_II2>::value_type>)\n       __glibcxx_requires_valid_range(__first1, __last1);\n-      \n-      for (; __first1 != __last1; ++__first1, ++__first2)\n-\tif (!(*__first1 == *__first2))\n-\t  return false;\n-      return true;\n+\n+      return std::__equal_aux(__niter_base<_II1>::__b(__first1),\n+\t\t\t      __niter_base<_II1>::__b(__last1),\n+\t\t\t      __niter_base<_II2>::__b(__first2));\n     }\n \n   /**"}, {"sha": "06aa105ece4b1577ee911edab0e502136a41f137", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d22a31664d59c997f73984327833e4ca0e51c84f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d22a31664d59c997f73984327833e4ca0e51c84f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=d22a31664d59c997f73984327833e4ca0e51c84f", "patch": "@@ -1,6 +1,6 @@\n // Iterators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -647,6 +647,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       typedef typename iterator_traits<_Iterator>::reference reference;\n       typedef typename iterator_traits<_Iterator>::pointer   pointer;\n \n+      typedef _Iterator _Iterator_type;\n+\n       __normal_iterator() : _M_current(_Iterator()) { }\n \n       explicit"}, {"sha": "b850c71cf84cbc1bdf6092a7f0c1294fd70557bc", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/vector/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d22a31664d59c997f73984327833e4ca0e51c84f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d22a31664d59c997f73984327833e4ca0e51c84f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fconstructor_1_neg.cc?ref=d22a31664d59c997f73984327833e4ca0e51c84f", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no match\" \"\" { target *-*-* } 706 }\n+// { dg-error \"no match\" \"\" { target *-*-* } 620 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}, {"sha": "194da7342a4ccb9a522089c992c1c8ef50649db6", "filename": "libstdc++-v3/testsuite/23_containers/requirements/sequences/dr438/vector/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d22a31664d59c997f73984327833e4ca0e51c84f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d22a31664d59c997f73984327833e4ca0e51c84f/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Frequirements%2Fsequences%2Fdr438%2Fvector%2Fconstructor_2_neg.cc?ref=d22a31664d59c997f73984327833e4ca0e51c84f", "patch": "@@ -19,7 +19,7 @@\n // USA.\n \n // { dg-do compile }\n-// { dg-error \"no match\" \"\" { target *-*-* } 706 }\n+// { dg-error \"no match\" \"\" { target *-*-* } 620 }\n // { dg-excess-errors \"\" }\n \n #include <vector>"}]}