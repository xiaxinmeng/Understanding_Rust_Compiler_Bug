{"sha": "2566855a60b790dd23a7375319e7dc0ec7886cee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU2Njg1NWE2MGI3OTBkZDIzYTczNzUzMTllN2RjMGVjNzg4NmNlZQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2008-03-31T17:03:09Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2008-03-31T17:03:09Z"}, "message": "utils2.c (find_common_type): Document assumption on t1/t2 vs lhs/rhs.\n\n2008-03-31  Olivier Hainque  <hainque@adacore.com>\n            Eric Botcazou  <botcazou@adacore.com>\n\n        ada/\n        * utils2.c (find_common_type): Document assumption on t1/t2 vs\n        lhs/rhs. Force use of lhs type if smaller, whatever the modes.\n\n        testsuite/\n        * gnat.dg/assign_from_packed.adb: New testcase.\n\n\nCo-Authored-By: Eric Botcazou <ebotcazou@adacore.com>\n\nFrom-SVN: r133757", "tree": {"sha": "3ffa54d3a68db4107cd0f29aba899b64d8d7f49a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ffa54d3a68db4107cd0f29aba899b64d8d7f49a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2566855a60b790dd23a7375319e7dc0ec7886cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2566855a60b790dd23a7375319e7dc0ec7886cee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2566855a60b790dd23a7375319e7dc0ec7886cee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2566855a60b790dd23a7375319e7dc0ec7886cee/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66f91b93db67ccea9e4d0ec803492e2dbd03974c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66f91b93db67ccea9e4d0ec803492e2dbd03974c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66f91b93db67ccea9e4d0ec803492e2dbd03974c"}], "stats": {"total": 100, "additions": 80, "deletions": 20}, "files": [{"sha": "d10a213bb8169a38d0449ef8ac4b3343cc1cfb6f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2566855a60b790dd23a7375319e7dc0ec7886cee/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2566855a60b790dd23a7375319e7dc0ec7886cee/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2566855a60b790dd23a7375319e7dc0ec7886cee", "patch": "@@ -1,3 +1,9 @@\n+2008-03-31  Olivier Hainque  <hainque@adacore.com>\n+            Eric Botcazou  <botcazou@adacore.com>\n+\n+\t* utils2.c (find_common_type): Document assumption on t1/t2 vs\n+\tlhs/rhs. Force use of lhs type if smaller, whatever the modes.\n+\n 2008-03-30  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* a-textio.ads, a-witeio.ads, a-ztexio.ads, ali.ads,"}, {"sha": "e9908676b441ce1594ca20f19448e44f51c250b6", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 36, "deletions": 20, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2566855a60b790dd23a7375319e7dc0ec7886cee/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2566855a60b790dd23a7375319e7dc0ec7886cee/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=2566855a60b790dd23a7375319e7dc0ec7886cee", "patch": "@@ -228,37 +228,53 @@ known_alignment (tree exp)\n   return MAX (type_alignment, this_alignment);\n }\n \f\n-/* We have a comparison or assignment operation on two types, T1 and T2,\n-   which are both either array types or both record types.\n-   Return the type that both operands should be converted to, if any.\n+/* We have a comparison or assignment operation on two types, T1 and T2, which\n+   are either both array types or both record types.  T1 is assumed to be for\n+   the left hand side operand, and T2 for the right hand side.  Return the\n+   type that both operands should be converted to for the operation, if any.\n    Otherwise return zero.  */\n \n static tree\n find_common_type (tree t1, tree t2)\n {\n-  /* If either type is non-BLKmode, use it.  Note that we know that we will\n-     not have any alignment problems since if we did the non-BLKmode\n-     type could not have been used.  */\n+  /* ??? As of today, various constructs lead here with types of different\n+     sizes even when both constants (e.g. tagged types, packable vs regular\n+     component types, padded vs unpadded types, ...).  While some of these\n+     would better be handled upstream (types should be made consistent before\n+     calling into build_binary_op), some others are really expected and we\n+     have to be careful.  */\n+     \n+  /* We must prevent writing more than what the target may hold if this is for\n+     an assignment and the case of tagged types is handled in build_binary_op\n+     so use the lhs type if it is known to be smaller, or of constant size and\n+     the rhs type is not, whatever the modes.  We also force t1 in case of\n+     constant size equality to minimize occurrences of view conversions on the\n+     lhs of assignments.  */\n+  if (TREE_CONSTANT (TYPE_SIZE (t1))\n+      && (!TREE_CONSTANT (TYPE_SIZE (t2))\n+          || !tree_int_cst_lt (TYPE_SIZE (t2), TYPE_SIZE (t1))))\n+    return t1;\n+\n+  /* Otherwise, if the lhs type is non-BLKmode, use it.  Note that we know\n+     that we will not have any alignment problems since, if we did, the\n+     non-BLKmode type could not have been used.  */\n   if (TYPE_MODE (t1) != BLKmode)\n     return t1;\n-  else if (TYPE_MODE (t2) != BLKmode)\n-    return t2;\n \n-  /* If both types have constant size, use the smaller one.  Keep returning\n-     T1 if we have a tie, to be consistent with the other cases.  */\n-  if (TREE_CONSTANT (TYPE_SIZE (t1)) && TREE_CONSTANT (TYPE_SIZE (t2)))\n-    return tree_int_cst_lt (TYPE_SIZE (t2), TYPE_SIZE (t1)) ? t2 : t1;\n+  /* If the rhs type is of constant size, use it whatever the modes.  At\n+     this point it is known to be smaller, or of constant size and the\n+     lhs type is not.  */\n+  if (TREE_CONSTANT (TYPE_SIZE (t2)))\n+    return t2;\n \n-  /* Otherwise, if either type has a constant size, use it.  */\n-  else if (TREE_CONSTANT (TYPE_SIZE (t1)))\n-    return t1;\n-  else if (TREE_CONSTANT (TYPE_SIZE (t2)))\n+  /* Otherwise, if the rhs type is non-BLKmode, use it.  */\n+  if (TYPE_MODE (t2) != BLKmode)\n     return t2;\n \n-  /* In this case, both types have variable size.  It's probably\n-     best to leave the \"type mismatch\" because changing it could\n-     case a bad self-referential reference.  */\n-  return 0;\n+  /* In this case, both types have variable size and BLKmode.  It's\n+     probably best to leave the \"type mismatch\" because changing it\n+     could cause a bad self-referential reference.  */\n+  return NULL_TREE;\n }\n \f\n /* See if EXP contains a SAVE_EXPR in a position where we would"}, {"sha": "2dde540514ce4addadfcaa86bde7e9d397253955", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2566855a60b790dd23a7375319e7dc0ec7886cee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2566855a60b790dd23a7375319e7dc0ec7886cee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2566855a60b790dd23a7375319e7dc0ec7886cee", "patch": "@@ -1,3 +1,8 @@\n+2008-03-31  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gnat.dg/assign_from_packed_pixels.ads: Support for ...\n+\t* gnat.dg/assign_from_packed.adb: New testcase.\n+\n 2008-03-31  Zdenek Dvorak  <ook@ucw.cz>\n \n \tPR rtl-optimization/35729"}, {"sha": "24399a0117ea809460dfabbb2ea47e1d81750a78", "filename": "gcc/testsuite/gnat.dg/assign_from_packed.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2566855a60b790dd23a7375319e7dc0ec7886cee/gcc%2Ftestsuite%2Fgnat.dg%2Fassign_from_packed.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2566855a60b790dd23a7375319e7dc0ec7886cee/gcc%2Ftestsuite%2Fgnat.dg%2Fassign_from_packed.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fassign_from_packed.adb?ref=2566855a60b790dd23a7375319e7dc0ec7886cee", "patch": "@@ -0,0 +1,15 @@\n+-- { dg-do run }\n+\n+with assign_from_packed_pixels;\n+use assign_from_packed_pixels;\n+\n+procedure assign_from_packed is\n+\n+   A : Integer := Minus_One;\n+   Pos : Position;\n+begin\n+   Pos := Pix.Pos;\n+   if A /= Minus_One then\n+      raise Program_Error;\n+   end if;\n+end;"}, {"sha": "66ade8a84c40b957756a914069fff8b1be03c703", "filename": "gcc/testsuite/gnat.dg/assign_from_packed_pixels.ads", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2566855a60b790dd23a7375319e7dc0ec7886cee/gcc%2Ftestsuite%2Fgnat.dg%2Fassign_from_packed_pixels.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2566855a60b790dd23a7375319e7dc0ec7886cee/gcc%2Ftestsuite%2Fgnat.dg%2Fassign_from_packed_pixels.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fassign_from_packed_pixels.ads?ref=2566855a60b790dd23a7375319e7dc0ec7886cee", "patch": "@@ -0,0 +1,18 @@\n+\n+package Assign_From_Packed_Pixels is\n+\n+   type U16 is mod 2 ** 16;\n+\n+   type Position is record\n+      X, Y, Z : U16;\n+   end record;\n+   for Position'Size use 48;\n+\n+   type Pixel is record\n+      Pos : Position;\n+   end record;\n+   pragma Pack (Pixel);\n+\n+   Minus_One : Integer := -1;\n+   Pix : Pixel := (Pos => (X => 0, Y => 0, Z => 0));\n+end;"}]}