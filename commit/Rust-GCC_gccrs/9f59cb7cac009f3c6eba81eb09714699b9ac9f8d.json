{"sha": "9f59cb7cac009f3c6eba81eb09714699b9ac9f8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY1OWNiN2NhYzAwOWYzYzZlYmE4MWViMDk3MTQ2OTliOWFjOWY4ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-20T16:02:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-20T16:02:06Z"}, "message": "c-family: Fix PR94272 -fcompare-debug issue even for C [PR99230]\n\nThe following testcase results in -fcompare-debug failure.\nThe problem is the similar like in PR94272\nhttps://gcc.gnu.org/pipermail/gcc-patches/2020-March/542562.html\nWhen genericizing, with -g0 we have just a TREE_SIDE_EFFECTS DO_STMT\nin a branch of if, while with -g we have that wrapped into\nTREE_SIDE_EFFECTS STATEMENT_LIST containing DEBUG_BEGIN_STMT and that\nDO_STMT.\nThe do loop is empty with 0 condition, so c_genericize_control_stmt\nturns it into an empty statement (without TREE_SIDE_EFFECTS).\nFor -g0 that means that suddenly the if branch doesn't have side effects\nand is expanded differently.  But with -g we still have TREE_SIDE_EFFECTS\nSTATEMENT_LIST containing DEBUG_BEGIN_STMT and non-TREE_SIDE_EFFECTS stmt.\nThe following patch fixes that by detecting this case and removing\nTREE_SIDE_EFFECTS.\n\nAnd, so that we don't duplicate the same code, changes the C++ FE to\njust call the c_genericize_control_stmt function that can now handle it.\n\n2021-03-20  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/99230\n\t* c-gimplify.c (c_genericize_control_stmt): Handle STATEMENT_LIST.\n\n\t* cp-gimplify.c (cp_genericize_r) <case STATEMENT_LIST>: Remove\n\tspecial code, instead call c_genericize_control_stmt.\n\n\t* gcc.dg/pr99230.c: New test.", "tree": {"sha": "b61259c848056657ae08f8fa9c2e4dee87cc4ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b61259c848056657ae08f8fa9c2e4dee87cc4ef2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f59cb7cac009f3c6eba81eb09714699b9ac9f8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f59cb7cac009f3c6eba81eb09714699b9ac9f8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f59cb7cac009f3c6eba81eb09714699b9ac9f8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f59cb7cac009f3c6eba81eb09714699b9ac9f8d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c2f08475a13e8e77a9f4b1866d45b1eceaad168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c2f08475a13e8e77a9f4b1866d45b1eceaad168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c2f08475a13e8e77a9f4b1866d45b1eceaad168"}], "stats": {"total": 99, "additions": 70, "deletions": 29}, "files": [{"sha": "39c969d8f40d28e175edc9f3ce2d9e96411a5f88", "filename": "gcc/c-family/c-gimplify.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f59cb7cac009f3c6eba81eb09714699b9ac9f8d/gcc%2Fc-family%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f59cb7cac009f3c6eba81eb09714699b9ac9f8d/gcc%2Fc-family%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.c?ref=9f59cb7cac009f3c6eba81eb09714699b9ac9f8d", "patch": "@@ -497,6 +497,35 @@ c_genericize_control_stmt (tree *stmt_p, int *walk_subtrees, void *data,\n       genericize_omp_for_stmt (stmt_p, walk_subtrees, data, func, lh);\n       break;\n \n+    case STATEMENT_LIST:\n+      if (TREE_SIDE_EFFECTS (stmt))\n+\t{\n+\t  tree_stmt_iterator i;\n+\t  int nondebug_stmts = 0;\n+\t  bool clear_side_effects = true;\n+\t  /* Genericization can clear TREE_SIDE_EFFECTS, e.g. when\n+\t     transforming an IF_STMT into COND_EXPR.  If such stmt\n+\t     appears in a STATEMENT_LIST that contains only that\n+\t     stmt and some DEBUG_BEGIN_STMTs, without -g where the\n+\t     STATEMENT_LIST wouldn't be present at all the resulting\n+\t     expression wouldn't have TREE_SIDE_EFFECTS set, so make sure\n+\t     to clear it even on the STATEMENT_LIST in such cases.  */\n+\t  for (i = tsi_start (stmt); !tsi_end_p (i); tsi_next (&i))\n+\t    {\n+\t      tree t = tsi_stmt (i);\n+\t      if (TREE_CODE (t) != DEBUG_BEGIN_STMT && nondebug_stmts < 2)\n+\t\tnondebug_stmts++;\n+\t      walk_tree_1 (tsi_stmt_ptr (i), func, data, NULL, lh);\n+\t      if (TREE_CODE (t) != DEBUG_BEGIN_STMT\n+\t\t  && (nondebug_stmts > 1 || TREE_SIDE_EFFECTS (tsi_stmt (i))))\n+\t\tclear_side_effects = false;\n+\t    }\n+\t  if (clear_side_effects)\n+\t    TREE_SIDE_EFFECTS (stmt) = 0;\n+\t  *walk_subtrees = 0;\n+\t}\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "4baa3368f7a992402a931cc583878fd17bccac37", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f59cb7cac009f3c6eba81eb09714699b9ac9f8d/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f59cb7cac009f3c6eba81eb09714699b9ac9f8d/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=9f59cb7cac009f3c6eba81eb09714699b9ac9f8d", "patch": "@@ -1464,35 +1464,6 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n       walk_subtrees = 0;\n       break;\n \n-    case STATEMENT_LIST:\n-      if (TREE_SIDE_EFFECTS (stmt))\n-\t{\n-\t  tree_stmt_iterator i;\n-\t  int nondebug_stmts = 0;\n-\t  bool clear_side_effects = true;\n-\t  /* Genericization can clear TREE_SIDE_EFFECTS, e.g. when\n-\t     transforming an IF_STMT into COND_EXPR.  If such stmt\n-\t     appears in a STATEMENT_LIST that contains only that\n-\t     stmt and some DEBUG_BEGIN_STMTs, without -g where the\n-\t     STATEMENT_LIST wouldn't be present at all the resulting\n-\t     expression wouldn't have TREE_SIDE_EFFECTS set, so make sure\n-\t     to clear it even on the STATEMENT_LIST in such cases.  */\n-\t  for (i = tsi_start (stmt); !tsi_end_p (i); tsi_next (&i))\n-\t    {\n-\t      tree t = tsi_stmt (i);\n-\t      if (TREE_CODE (t) != DEBUG_BEGIN_STMT && nondebug_stmts < 2)\n-\t\tnondebug_stmts++;\n-\t      cp_walk_tree (tsi_stmt_ptr (i), cp_genericize_r, data, NULL);\n-\t      if (TREE_CODE (t) != DEBUG_BEGIN_STMT\n-\t\t  && (nondebug_stmts > 1 || TREE_SIDE_EFFECTS (tsi_stmt (i))))\n-\t\tclear_side_effects = false;\n-\t    }\n-\t  if (clear_side_effects)\n-\t    TREE_SIDE_EFFECTS (stmt) = 0;\n-\t  *walk_subtrees = 0;\n-\t}\n-      break;\n-\n     case OMP_DISTRIBUTE:\n       /* Need to explicitly instantiate copy ctors on class iterators of\n \t composite distribute parallel for.  */\n@@ -1566,6 +1537,7 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n     case OMP_SIMD:\n     case OMP_LOOP:\n     case OACC_LOOP:\n+    case STATEMENT_LIST:\n       /* These cases are handled by shared code.  */\n       c_genericize_control_stmt (stmt_p, walk_subtrees, data,\n \t\t\t\t cp_genericize_r, cp_walk_subtrees);"}, {"sha": "eb3f982c2adb65e6f0b5088bb205a71826cd4b83", "filename": "gcc/testsuite/gcc.dg/pr99230.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f59cb7cac009f3c6eba81eb09714699b9ac9f8d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99230.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f59cb7cac009f3c6eba81eb09714699b9ac9f8d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99230.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99230.c?ref=9f59cb7cac009f3c6eba81eb09714699b9ac9f8d", "patch": "@@ -0,0 +1,40 @@\n+/* PR debug/99230 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 --param logical-op-non-short-circuit=0 -fcompare-debug --param=jump-table-max-growth-ratio-for-speed=5000\" } */\n+\n+extern void fn2 (void);\n+extern void fn3 (int);\n+int a, b;\n+void\n+fn1 (void)\n+{\n+  int c;\n+  short d;\n+  switch (a) {\n+  case 22000:\n+    fn2 ();\n+  case 22300:\n+    b = 0;\n+  case 22600:\n+  case 22601:\n+  case 22900:\n+    fn3 (1);\n+  case 20100:\n+    fn3 (2);\n+  case 20200:\n+    fn3 (3);\n+  case 20300:\n+    fn3 (4);\n+  case 20400:\n+    fn3 (5);\n+  case 20310:\n+    fn3 (4);\n+  case 20410:\n+    fn3 (5);\n+  }\n+  if (d || c) {\n+    do\n+      ;\n+    while (0);\n+  }\n+}"}]}