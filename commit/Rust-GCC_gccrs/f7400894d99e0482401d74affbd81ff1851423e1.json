{"sha": "f7400894d99e0482401d74affbd81ff1851423e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc0MDA4OTRkOTllMDQ4MjQwMWQ3NGFmZmJkODFmZjE4NTE0MjNlMQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-06-28T05:39:40Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-28T05:39:40Z"}, "message": "explow.c (find_next_ref): Remove.\n\n\t* explow.c (find_next_ref): Remove.\n\t* rtl.h: Remove the prototype for find_next_ref.\n\nFrom-SVN: r68628", "tree": {"sha": "ab3aaccd5999e927c043fd89ca44ebc01fac2de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab3aaccd5999e927c043fd89ca44ebc01fac2de6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7400894d99e0482401d74affbd81ff1851423e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7400894d99e0482401d74affbd81ff1851423e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7400894d99e0482401d74affbd81ff1851423e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7400894d99e0482401d74affbd81ff1851423e1/comments", "author": null, "committer": null, "parents": [{"sha": "92fee0d0c1ca5bbd12221a0ecb19886325623d9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92fee0d0c1ca5bbd12221a0ecb19886325623d9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92fee0d0c1ca5bbd12221a0ecb19886325623d9d"}], "stats": {"total": 52, "additions": 5, "deletions": 47}, "files": [{"sha": "747bf5dd311c8cd2a0b828d3f0b388c93519e92d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7400894d99e0482401d74affbd81ff1851423e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7400894d99e0482401d74affbd81ff1851423e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7400894d99e0482401d74affbd81ff1851423e1", "patch": "@@ -1,3 +1,8 @@\n+2003-06-28  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* explow.c (find_next_ref): Remove.\n+\t* rtl.h: Remove the prototype for find_next_ref.\n+\n 2003-06-27  Roger Sayle  <roger@eyesopen.com>\n \n \t* config/alpha/alpha.md (anonymous define_split): Adjust emit_note"}, {"sha": "9568afc340ea3cb2d9342413a9177688d387ffed", "filename": "gcc/explow.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7400894d99e0482401d74affbd81ff1851423e1/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7400894d99e0482401d74affbd81ff1851423e1/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=f7400894d99e0482401d74affbd81ff1851423e1", "patch": "@@ -241,51 +241,6 @@ eliminate_constant_term (x, constptr)\n   return x;\n }\n \n-/* Returns the insn that next references REG after INSN, or 0\n-   if REG is clobbered before next referenced or we cannot find\n-   an insn that references REG in a straight-line piece of code.  */\n-\n-rtx\n-find_next_ref (reg, insn)\n-     rtx reg;\n-     rtx insn;\n-{\n-  rtx next;\n-\n-  for (insn = NEXT_INSN (insn); insn; insn = next)\n-    {\n-      next = NEXT_INSN (insn);\n-      if (GET_CODE (insn) == NOTE)\n-\tcontinue;\n-      if (GET_CODE (insn) == CODE_LABEL\n-\t  || GET_CODE (insn) == BARRIER)\n-\treturn 0;\n-      if (GET_CODE (insn) == INSN\n-\t  || GET_CODE (insn) == JUMP_INSN\n-\t  || GET_CODE (insn) == CALL_INSN)\n-\t{\n-\t  if (reg_set_p (reg, insn))\n-\t    return 0;\n-\t  if (reg_mentioned_p (reg, PATTERN (insn)))\n-\t    return insn;\n-\t  if (GET_CODE (insn) == JUMP_INSN)\n-\t    {\n-\t      if (any_uncondjump_p (insn))\n-\t\tnext = JUMP_LABEL (insn);\n-\t      else\n-\t\treturn 0;\n-\t    }\n-\t  if (GET_CODE (insn) == CALL_INSN\n-\t      && REGNO (reg) < FIRST_PSEUDO_REGISTER\n-\t      && call_used_regs[REGNO (reg)])\n-\t    return 0;\n-\t}\n-      else\n-\tabort ();\n-    }\n-  return 0;\n-}\n-\n /* Return an rtx for the size in bytes of the value of EXP.  */\n \n rtx"}, {"sha": "6255639bdad170d53855b6434d96a71e9d2ac69a", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7400894d99e0482401d74affbd81ff1851423e1/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7400894d99e0482401d74affbd81ff1851423e1/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=f7400894d99e0482401d74affbd81ff1851423e1", "patch": "@@ -1948,8 +1948,6 @@ extern rtx gen_lowpart_SUBREG PARAMS ((enum machine_mode, rtx));\n /* REGNUM never really appearing in the INSN stream.  */\n #define INVALID_REGNUM\t\t\t(~(unsigned int) 0)\n \n-extern rtx find_next_ref\t\tPARAMS ((rtx, rtx));\n-\n extern rtx output_constant_def\t\tPARAMS ((tree, int));\n \n /* Called from integrate.c when a deferred constant is inlined.  */"}]}