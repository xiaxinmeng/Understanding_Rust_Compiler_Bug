{"sha": "fb1259001c2554bfc622bd31c9e07f05a7f2588b", "node_id": "C_kwDOANBUbNoAKGZiMTI1OTAwMWMyNTU0YmZjNjIyYmQzMWM5ZTA3ZjA1YTdmMjU4OGI", "commit": {"author": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2023-05-30T16:16:30Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-05-30T17:03:48Z"}, "message": "gccrs: Fix cast site to not miss type-unifications\n\nWhen attempting casts we can try a type coercion first, this is a\nTryCoercion which will return a result. In the event this is ok we need to\nperform a true coercion so that we don't leave missing infeence variable's\nununified.\n\nFixes #2195\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-casts.cc (TypeCastRules::check): do coercion\n\t(TypeCastRules::emit_cast_error): clang-format\n\ngcc/testsuite/ChangeLog:\n\n\t* rust/compile/issue-2195.rs: New test.\n\nSigned-off-by: Philip Herron <herron.philip@googlemail.com>", "tree": {"sha": "8194e19ad021d479c6a706383402d6dccd3f7db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8194e19ad021d479c6a706383402d6dccd3f7db3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb1259001c2554bfc622bd31c9e07f05a7f2588b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb1259001c2554bfc622bd31c9e07f05a7f2588b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb1259001c2554bfc622bd31c9e07f05a7f2588b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb1259001c2554bfc622bd31c9e07f05a7f2588b/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc2cac14138c5276562e8df83c01646e99a117ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2cac14138c5276562e8df83c01646e99a117ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc2cac14138c5276562e8df83c01646e99a117ff"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "95db478ec5eb7f397394e34a1c65c3db22100687", "filename": "gcc/rust/typecheck/rust-casts.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb1259001c2554bfc622bd31c9e07f05a7f2588b/gcc%2Frust%2Ftypecheck%2Frust-casts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb1259001c2554bfc622bd31c9e07f05a7f2588b/gcc%2Frust%2Ftypecheck%2Frust-casts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-casts.cc?ref=fb1259001c2554bfc622bd31c9e07f05a7f2588b", "patch": "@@ -42,7 +42,12 @@ TypeCastRules::check ()\n     = TypeCoercionRules::TryCoerce (from.get_ty (), to.get_ty (), locus,\n \t\t\t\t    true /*allow-autoderef*/);\n   if (!possible_coercion.is_error ())\n-    return possible_coercion;\n+    {\n+      // given the attempt was ok we need to ensure we perform it so that any\n+      // inference variables are unified correctly\n+      return TypeCoercionRules::Coerce (from.get_ty (), to.get_ty (), locus,\n+\t\t\t\t\ttrue /*allow-autoderef*/);\n+    }\n \n   // try the simple cast rules\n   auto simple_cast = cast_rules ();\n@@ -303,4 +308,4 @@ TypeCastRules::emit_cast_error () const\n }\n \n } // namespace Resolver\n-} // namespace Rust\n\\ No newline at end of file\n+} // namespace Rust"}, {"sha": "c955df4f1c6b67a4884201f4739a229f77ab6c81", "filename": "gcc/testsuite/rust/compile/issue-2195.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb1259001c2554bfc622bd31c9e07f05a7f2588b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2195.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb1259001c2554bfc622bd31c9e07f05a7f2588b/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2195.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-2195.rs?ref=fb1259001c2554bfc622bd31c9e07f05a7f2588b", "patch": "@@ -0,0 +1,8 @@\n+struct A<T> {\n+    // { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }\n+    f: *const T,\n+}\n+\n+pub fn cast<T>(a: A<T>) {\n+    let z = a.f as *const ();\n+}"}]}