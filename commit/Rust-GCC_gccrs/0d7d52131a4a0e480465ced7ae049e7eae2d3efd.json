{"sha": "0d7d52131a4a0e480465ced7ae049e7eae2d3efd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ3ZDUyMTMxYTRhMGU0ODA0NjVjZWQ3YWUwNDllN2VhZTJkM2VmZA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2020-09-09T09:02:01Z"}, "committer": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2020-09-09T09:02:01Z"}, "message": "config: Sync largefile.m4 from binutils-gdb\n\nThe following patch improves handling of largefile support with procfs\non 32-bit Solaris.  It has already been approved and installed for\nbinutils-gdb in the thread starting at\n\n\t[PATCH] Unify Solaris procfs and largefile handling\n        https://sourceware.org/pipermail/gdb-patches/2020-June/169977.html\n\nI'm syncing the config/largefile.m4 part to gcc now which is the master\nfor config.  Since ACX_LARGEFILE isn't used anywhere in the gcc tree,\nI'm installing it as obvious.\n\n2020-09-09  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n\n\tconfig:\n\t* largefile.m4: Sync from binutils-gdb.", "tree": {"sha": "8e9d52e70c50513d23130bd18e4f8cd4fbca3ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e9d52e70c50513d23130bd18e4f8cd4fbca3ae0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d7d52131a4a0e480465ced7ae049e7eae2d3efd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d7d52131a4a0e480465ced7ae049e7eae2d3efd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d7d52131a4a0e480465ced7ae049e7eae2d3efd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d7d52131a4a0e480465ced7ae049e7eae2d3efd/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb51be60c8e7b6978f817f44d5df4759f2faf425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb51be60c8e7b6978f817f44d5df4759f2faf425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb51be60c8e7b6978f817f44d5df4759f2faf425"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "937596334cdf4e02fc20891b4d32a542bde07ea1", "filename": "config/largefile.m4", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7d52131a4a0e480465ced7ae049e7eae2d3efd/config%2Flargefile.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7d52131a4a0e480465ced7ae049e7eae2d3efd/config%2Flargefile.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Flargefile.m4?ref=0d7d52131a4a0e480465ced7ae049e7eae2d3efd", "patch": "@@ -1,5 +1,5 @@\n # This macro wraps AC_SYS_LARGEFILE with one exception for Solaris.\n-# PR 9992/binutils: We have to replicate everywhere the behaviour of\n+# PR binutils/9992: We have to replicate everywhere the behaviour of\n # bfd's configure script so that all the directories agree on the size\n # of structures used to describe files.\n \n@@ -16,17 +16,38 @@ AC_REQUIRE([AC_CANONICAL_TARGET])\n AC_PLUGINS\n \n case \"${host}\" in\n-changequote(,)dnl\n-  sparc-*-solaris*|i[3-7]86-*-solaris*)\n-changequote([,])dnl\n-    # On native 32bit sparc and ia32 solaris, large-file and procfs support\n-    # are mutually exclusive; and without procfs support, the bfd/ elf module\n-    # cannot provide certain routines such as elfcore_write_prpsinfo\n-    # or elfcore_write_prstatus.  So unless the user explicitly requested\n-    # large-file support through the --enable-largefile switch, disable\n-    # large-file support in favor of procfs support.\n-    test \"${target}\" = \"${host}\" -a \"x$plugins\" = xno \\\n-      && : ${enable_largefile=\"no\"}\n+  sparc-*-solaris*|i?86-*-solaris*)\n+    # On native 32-bit Solaris/SPARC and x86, large-file and procfs support\n+    # were mutually exclusive until Solaris 11.3.  Without procfs support,\n+    # the bfd/ elf module cannot provide certain routines such as\n+    # elfcore_write_prpsinfo or elfcore_write_prstatus.  So unless the user\n+    # explicitly requested large-file support through the\n+    # --enable-largefile switch, disable large-file support in favor of\n+    # procfs support.\n+    #\n+    # Check if <sys/procfs.h> is incompatible with large-file support.\n+    AC_TRY_COMPILE([#define _FILE_OFFSET_BITS 64\n+#define _STRUCTURED_PROC 1\n+#include <sys/procfs.h>], , acx_cv_procfs_lfs=yes, acx_cv_procfs_lfs=no)\n+    #\n+    # Forcefully disable large-file support only if necessary, gdb is in\n+    # tree and enabled.\n+    if test \"${target}\" = \"${host}\" -a \"$acx_cv_procfs_lfs\" = no \\\n+         -a -d $srcdir/../gdb -a \"$enable_gdb\" != no; then\n+      : ${enable_largefile=\"no\"}\n+      if test \"$plugins\" = yes; then\n+\tAC_MSG_WARN([\n+plugin support disabled; require large-file support which is incompatible with GDB.])\n+\tplugins=no\n+      fi\n+    fi\n+    #\n+    # Explicitly undef _FILE_OFFSET_BITS if enable_largefile=no for the\n+    # benefit of g++ 9+ which predefines it on Solaris.\n+    if test \"$enable_largefile\" = no; then\n+      LARGEFILE_CPPFLAGS=\"-U_FILE_OFFSET_BITS\"\n+      AC_SUBST(LARGEFILE_CPPFLAGS)\n+    fi\n     ;;\n esac\n "}]}