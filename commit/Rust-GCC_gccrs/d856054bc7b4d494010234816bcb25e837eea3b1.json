{"sha": "d856054bc7b4d494010234816bcb25e837eea3b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg1NjA1NGJjN2I0ZDQ5NDAxMDIzNDgxNmJjYjI1ZTgzN2VlYTNiMQ==", "commit": {"author": {"name": "Ilya Verbin", "email": "ilya.verbin@intel.com", "date": "2014-10-19T19:40:59Z"}, "committer": {"name": "Ilya Verbin", "email": "iverbin@gcc.gnu.org", "date": "2014-10-19T19:40:59Z"}, "message": "Set SECTION_EXCLUDE flag for LTO sections.\n\ngcc/\n\t* configure: Regenerate.\n\t* configure.ac: Move the test for section attribute specifier \"e\" in GAS\n\tout to all i[34567]86-*-* | x86_64-*-* targets and add --fatal-warnings.\n\t* langhooks.c (lhd_begin_section): Set SECTION_EXCLUDE flag.\n\t* varasm.c (default_elf_asm_named_section): Guard SECTION_EXCLUDE with\n\tifdef HAVE_GAS_SECTION_EXCLUDE.\n\nFrom-SVN: r216442", "tree": {"sha": "b1a71a512384885501a7bb4ae73a119c424e9965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1a71a512384885501a7bb4ae73a119c424e9965"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d856054bc7b4d494010234816bcb25e837eea3b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d856054bc7b4d494010234816bcb25e837eea3b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d856054bc7b4d494010234816bcb25e837eea3b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d856054bc7b4d494010234816bcb25e837eea3b1/comments", "author": null, "committer": null, "parents": [{"sha": "e80f9fef341bdd66fff59e18df3044f5fe2e5166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e80f9fef341bdd66fff59e18df3044f5fe2e5166", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e80f9fef341bdd66fff59e18df3044f5fe2e5166"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "ca2cb0c01cd6bf2af629d98684be727d36eb8106", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d856054bc7b4d494010234816bcb25e837eea3b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d856054bc7b4d494010234816bcb25e837eea3b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d856054bc7b4d494010234816bcb25e837eea3b1", "patch": "@@ -1,3 +1,12 @@\n+2014-10-19  Ilya Verbin  <ilya.verbin@intel.com>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac: Move the test for section attribute specifier \"e\" in GAS\n+\tout to all i[34567]86-*-* | x86_64-*-* targets and add --fatal-warnings.\n+\t* langhooks.c (lhd_begin_section): Set SECTION_EXCLUDE flag.\n+\t* varasm.c (default_elf_asm_named_section): Guard SECTION_EXCLUDE with\n+\tifdef HAVE_GAS_SECTION_EXCLUDE.\n+\n 2014-10-19  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* doc/md.texi (RTL Template) [match_scratch]: Correct equivalent"}, {"sha": "16f128f6a3131136b897112fff2ae223eae6a3d1", "filename": "gcc/configure", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d856054bc7b4d494010234816bcb25e837eea3b1/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d856054bc7b4d494010234816bcb25e837eea3b1/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=d856054bc7b4d494010234816bcb25e837eea3b1", "patch": "@@ -24676,9 +24676,12 @@ $as_echo \"$as_me: WARNING: LTO for $target requires binutils >= 2.20.1, but vers\n \t      ;;\n \t  esac\n \tfi\n-\t# Test if the assembler supports the section flag 'e' for specifying\n-\t# an excluded section.\n-\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for .section with e\" >&5\n+\t;;\n+    esac\n+\n+    # Test if the assembler supports the section flag 'e' for specifying\n+    # an excluded section.\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for .section with e\" >&5\n $as_echo_n \"checking assembler for .section with e... \" >&6; }\n if test \"${gcc_cv_as_section_has_e+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n@@ -24691,7 +24694,7 @@ fi\n   elif test x$gcc_cv_as != x; then\n     $as_echo '.section foo1,\"e\"\n .byte 0,0,0,0' > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags --fatal-warnings -o conftest.o conftest.s >&5'\n   { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n   (eval $ac_try) 2>&5\n   ac_status=$?\n@@ -24714,8 +24717,6 @@ cat >>confdefs.h <<_ACEOF\n #define HAVE_GAS_SECTION_EXCLUDE `if test $gcc_cv_as_section_has_e = yes; then echo 1; else echo 0; fi`\n _ACEOF\n \n-\t;;\n-    esac\n \n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for filds and fists mnemonics\" >&5\n $as_echo_n \"checking assembler for filds and fists mnemonics... \" >&6; }"}, {"sha": "35ce9eeb45ace52ff3182e97a0308687d85a5dcd", "filename": "gcc/configure.ac", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d856054bc7b4d494010234816bcb25e837eea3b1/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d856054bc7b4d494010234816bcb25e837eea3b1/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=d856054bc7b4d494010234816bcb25e837eea3b1", "patch": "@@ -3799,18 +3799,19 @@ foo:\tnop\n \t      ;;\n \t  esac\n \tfi\n-\t# Test if the assembler supports the section flag 'e' for specifying\n-\t# an excluded section.\n-\tgcc_GAS_CHECK_FEATURE([.section with e], gcc_cv_as_section_has_e,\n-\t  [2,22,51],,\n-[.section foo1,\"e\"\n-.byte 0,0,0,0])\n-\tAC_DEFINE_UNQUOTED(HAVE_GAS_SECTION_EXCLUDE,\n-\t  [`if test $gcc_cv_as_section_has_e = yes; then echo 1; else echo 0; fi`],\n-          [Define if your assembler supports specifying the section flag e.])\n \t;;\n     esac\n \n+    # Test if the assembler supports the section flag 'e' for specifying\n+    # an excluded section.\n+    gcc_GAS_CHECK_FEATURE([.section with e], gcc_cv_as_section_has_e,\n+      [2,22,51], [--fatal-warnings],\n+[.section foo1,\"e\"\n+.byte 0,0,0,0])\n+    AC_DEFINE_UNQUOTED(HAVE_GAS_SECTION_EXCLUDE,\n+      [`if test $gcc_cv_as_section_has_e = yes; then echo 1; else echo 0; fi`],\n+      [Define if your assembler supports specifying the section flag e.])\n+\n     gcc_GAS_CHECK_FEATURE([filds and fists mnemonics],\n        gcc_cv_as_ix86_filds,,,\n        [filds mem; fists mem],,"}, {"sha": "4bdeaa066f848e8c99dfc065959bfc09afdbe950", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d856054bc7b4d494010234816bcb25e837eea3b1/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d856054bc7b4d494010234816bcb25e837eea3b1/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=d856054bc7b4d494010234816bcb25e837eea3b1", "patch": "@@ -660,7 +660,7 @@ lhd_begin_section (const char *name)\n     saved_section = text_section;\n \n   /* Create a new section and switch to it.  */\n-  section = get_section (name, SECTION_DEBUG, NULL);\n+  section = get_section (name, SECTION_DEBUG | SECTION_EXCLUDE, NULL);\n   switch_to_section (section);\n }\n "}, {"sha": "1aad9d5a000c7ae14b7f517682d297fafcd4ea2f", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d856054bc7b4d494010234816bcb25e837eea3b1/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d856054bc7b4d494010234816bcb25e837eea3b1/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=d856054bc7b4d494010234816bcb25e837eea3b1", "patch": "@@ -6144,8 +6144,10 @@ default_elf_asm_named_section (const char *name, unsigned int flags,\n \n   if (!(flags & SECTION_DEBUG))\n     *f++ = 'a';\n+#if defined (HAVE_GAS_SECTION_EXCLUDE) && HAVE_GAS_SECTION_EXCLUDE == 1\n   if (flags & SECTION_EXCLUDE)\n     *f++ = 'e';\n+#endif\n   if (flags & SECTION_WRITE)\n     *f++ = 'w';\n   if (flags & SECTION_CODE)"}]}