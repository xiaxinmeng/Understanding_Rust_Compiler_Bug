{"sha": "3fd156b1bb5bb993e1b614008ac1a0eff58a6953", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZkMTU2YjFiYjViYjk5M2UxYjYxNDAwOGFjMWEwZWZmNThhNjk1Mw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-12-14T21:57:07Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-12-14T21:57:07Z"}, "message": "[PR c++/87814] undefer deferred noexcept on tsubst if request\n\ntsubst_expr and tsubst_copy_and_build are not expected to handle\nDEFERRED_NOEXCEPT exprs, but if tsubst_exception_specification takes a\nDEFERRED_NOEXCEPT expr with !defer_ok, it just passes the expr on for\ntsubst_copy_and_build to barf.\n\nThis patch arranges for tsubst_exception_specification to combine the\nincoming args with those already stored in a DEFERRED_NOEXCEPT, and\nthen substitute them into the pattern, when retaining a deferred\nnoexcept is unacceptable.\n\n\nfor  gcc/cp/ChangeLog\n\n\tPR c++/87814\n\t* pt.c (tsubst_exception_specification): Handle\n\tDEFERRED_NOEXCEPT with !defer_ok.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR c++/87814\n\t* g++.dg/cpp1z/pr87814.C: New.\n\nFrom-SVN: r267155", "tree": {"sha": "77e52e3c3d115cf199ba4a84a4a0df5ca0f31dbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77e52e3c3d115cf199ba4a84a4a0df5ca0f31dbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fd156b1bb5bb993e1b614008ac1a0eff58a6953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd156b1bb5bb993e1b614008ac1a0eff58a6953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd156b1bb5bb993e1b614008ac1a0eff58a6953", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd156b1bb5bb993e1b614008ac1a0eff58a6953/comments", "author": null, "committer": null, "parents": [{"sha": "06553c89f521477d6c3ec4023d5162f90c57111d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06553c89f521477d6c3ec4023d5162f90c57111d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06553c89f521477d6c3ec4023d5162f90c57111d"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "2dfb1fed6130c5826b02b481fa4e68bfa011e7d1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd156b1bb5bb993e1b614008ac1a0eff58a6953/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd156b1bb5bb993e1b614008ac1a0eff58a6953/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3fd156b1bb5bb993e1b614008ac1a0eff58a6953", "patch": "@@ -1,3 +1,9 @@\n+2018-12-14  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/87814\n+\t* pt.c (tsubst_exception_specification): Handle\n+\tDEFERRED_NOEXCEPT with !defer_ok.\n+\n 2018-12-14  Jason Merrill <jason@redhat.com>\n \n \tPR c++/86823"}, {"sha": "20f0d16efe107ebad7c57c22b7d38cd36e2c88ff", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd156b1bb5bb993e1b614008ac1a0eff58a6953/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd156b1bb5bb993e1b614008ac1a0eff58a6953/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=3fd156b1bb5bb993e1b614008ac1a0eff58a6953", "patch": "@@ -14151,9 +14151,17 @@ tsubst_exception_specification (tree fntype,\n \t    }\n \t}\n       else\n-\tnew_specs = tsubst_copy_and_build\n-\t  (expr, args, complain, in_decl, /*function_p=*/false,\n-\t   /*integral_constant_expression_p=*/true);\n+\t{\n+\t  if (DEFERRED_NOEXCEPT_SPEC_P (specs))\n+\t    {\n+\t      args = add_to_template_args (DEFERRED_NOEXCEPT_ARGS (expr),\n+\t\t\t\t\t   args);\n+\t      expr = DEFERRED_NOEXCEPT_PATTERN (expr);\n+\t    }\n+\t  new_specs = tsubst_copy_and_build\n+\t    (expr, args, complain, in_decl, /*function_p=*/false,\n+\t     /*integral_constant_expression_p=*/true);\n+\t}\n       new_specs = build_noexcept_spec (new_specs, complain);\n     }\n   else if (specs)"}, {"sha": "9c24e473e5fe7da36477e3ffe4c4b34bf6f8c612", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd156b1bb5bb993e1b614008ac1a0eff58a6953/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd156b1bb5bb993e1b614008ac1a0eff58a6953/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3fd156b1bb5bb993e1b614008ac1a0eff58a6953", "patch": "@@ -1,3 +1,8 @@\n+2018-12-14  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/87814\n+\t* g++.dg/cpp1z/pr87814.C: New.\n+\n 2018-12-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/cf_check-1.c: New test."}, {"sha": "37034bb58cd6e2693a941491d72db34045419fea", "filename": "gcc/testsuite/g++.dg/cpp1z/pr87814.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd156b1bb5bb993e1b614008ac1a0eff58a6953/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fpr87814.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd156b1bb5bb993e1b614008ac1a0eff58a6953/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fpr87814.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fpr87814.C?ref=3fd156b1bb5bb993e1b614008ac1a0eff58a6953", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile { target c++17 } }\n+\n+template<class Element>\n+struct box {\n+    template<class E>\n+    constexpr box(E && e)\n+        noexcept(noexcept(Element(e)))\n+    {}\n+};\n+\n+template<class... Ts>\n+struct compressed_tuple_ : box<Ts> ... {\n+    template<typename... Args>\n+    constexpr compressed_tuple_(Args &&... args)\n+        noexcept((noexcept(box<Ts>(args)) && ...))\n+      : box<Ts>(args)...\n+    {}\n+};\n+\n+struct adaptor_cursor : compressed_tuple_<int*> {\n+    using compressed_tuple_::compressed_tuple_;\n+};\n+\n+int main() {\n+    (void)noexcept(adaptor_cursor{(int*)0});\n+}"}]}