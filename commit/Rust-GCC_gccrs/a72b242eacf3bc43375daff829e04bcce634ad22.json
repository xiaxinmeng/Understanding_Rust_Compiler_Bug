{"sha": "a72b242eacf3bc43375daff829e04bcce634ad22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcyYjI0MmVhY2YzYmM0MzM3NWRhZmY4MjllMDRiY2NlNjM0YWQyMg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2017-02-16T22:56:51Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-02-16T22:56:51Z"}, "message": "re PR rtl-optimization/79286 (ira and lra wrong code at -O2 and -Os on i686-linux)\n\n2017-02-16  Alan Modra  <amodra@gmail.com>\n\n\tPR rtl-optimization/79286\n\t* ira.c (def_dominates_uses): New function.\n\t(update_equiv_regs): Don't create an equivalence for insns that\n\tmay trap where the register def does not dominate the use.\n\n\t* gcc.c-torture/execute/pr79286.c: New.\n\nFrom-SVN: r245521", "tree": {"sha": "8292f5e8b39f99c7703446eee1a6e3e17e09c454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8292f5e8b39f99c7703446eee1a6e3e17e09c454"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a72b242eacf3bc43375daff829e04bcce634ad22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a72b242eacf3bc43375daff829e04bcce634ad22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a72b242eacf3bc43375daff829e04bcce634ad22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a72b242eacf3bc43375daff829e04bcce634ad22/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b9ad3606debd14bd1e57306358f4fcab2c2b1db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b9ad3606debd14bd1e57306358f4fcab2c2b1db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b9ad3606debd14bd1e57306358f4fcab2c2b1db"}], "stats": {"total": 82, "additions": 80, "deletions": 2}, "files": [{"sha": "5a96b4ac8c7284096d93ba0103cdf2a78c39c907", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72b242eacf3bc43375daff829e04bcce634ad22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72b242eacf3bc43375daff829e04bcce634ad22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a72b242eacf3bc43375daff829e04bcce634ad22", "patch": "@@ -1,3 +1,10 @@\n+2017-02-16  Alan Modra  <amodra@gmail.com>\n+\n+\tPR rtl-optimization/79286\n+\t* ira.c (def_dominates_uses): New function.\n+\t(update_equiv_regs): Don't create an equivalence for insns that\n+\tmay trap where the register def does not dominate the use.\n+\n 2017-02-16  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/78127"}, {"sha": "6fb8aaffdcce3917749b052c4ed6ea638dcb8112", "filename": "gcc/ira.c", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72b242eacf3bc43375daff829e04bcce634ad22/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72b242eacf3bc43375daff829e04bcce634ad22/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=a72b242eacf3bc43375daff829e04bcce634ad22", "patch": "@@ -3300,6 +3300,49 @@ adjust_cleared_regs (rtx loc, const_rtx old_rtx ATTRIBUTE_UNUSED, void *data)\n   return NULL_RTX;\n }\n \n+/* Given register REGNO is set only once, return true if the defining\n+   insn dominates all uses.  */\n+\n+static bool\n+def_dominates_uses (int regno)\n+{\n+  df_ref def = DF_REG_DEF_CHAIN (regno);\n+\n+  struct df_insn_info *def_info = DF_REF_INSN_INFO (def);\n+  /* If this is an artificial def (eh handler regs, hard frame pointer\n+     for non-local goto, regs defined on function entry) then def_info\n+     is NULL and the reg is always live before any use.  We might\n+     reasonably return true in that case, but since the only call\n+     of this function is currently here in ira.c when we are looking\n+     at a defining insn we can't have an artificial def as that would\n+     bump DF_REG_DEF_COUNT.  */\n+  gcc_assert (DF_REG_DEF_COUNT (regno) == 1 && def_info != NULL);\n+\n+  rtx_insn *def_insn = DF_REF_INSN (def);\n+  basic_block def_bb = BLOCK_FOR_INSN (def_insn);\n+\n+  for (df_ref use = DF_REG_USE_CHAIN (regno);\n+       use;\n+       use = DF_REF_NEXT_REG (use))\n+    {\n+      struct df_insn_info *use_info = DF_REF_INSN_INFO (use);\n+      /* Only check real uses, not artificial ones.  */\n+      if (use_info)\n+\t{\n+\t  rtx_insn *use_insn = DF_REF_INSN (use);\n+\t  if (!DEBUG_INSN_P (use_insn))\n+\t    {\n+\t      basic_block use_bb = BLOCK_FOR_INSN (use_insn);\n+\t      if (use_bb != def_bb\n+\t\t  ? !dominated_by_p (CDI_DOMINATORS, use_bb, def_bb)\n+\t\t  : DF_INSN_INFO_LUID (use_info) < DF_INSN_INFO_LUID (def_info))\n+\t\treturn false;\n+\t    }\n+\t}\n+    }\n+  return true;\n+}\n+\n /* Find registers that are equivalent to a single value throughout the\n    compilation (either because they can be referenced in memory or are\n    set once from a single constant).  Lower their priority for a\n@@ -3498,9 +3541,18 @@ update_equiv_regs (void)\n \t    = gen_rtx_INSN_LIST (VOIDmode, insn, reg_equiv[regno].init_insns);\n \n \t  /* If this register is known to be equal to a constant, record that\n-\t     it is always equivalent to the constant.  */\n+\t     it is always equivalent to the constant.\n+\t     Note that it is possible to have a register use before\n+\t     the def in loops (see gcc.c-torture/execute/pr79286.c)\n+\t     where the reg is undefined on first use.  If the def insn\n+\t     won't trap we can use it as an equivalence, effectively\n+\t     choosing the \"undefined\" value for the reg to be the\n+\t     same as the value set by the def.  */\n \t  if (DF_REG_DEF_COUNT (regno) == 1\n-\t      && note && ! rtx_varies_p (XEXP (note, 0), 0))\n+\t      && note\n+\t      && !rtx_varies_p (XEXP (note, 0), 0)\n+\t      && (!may_trap_p (XEXP (note, 0))\n+\t\t  || def_dominates_uses (regno)))\n \t    {\n \t      rtx note_value = XEXP (note, 0);\n \t      remove_note (insn, note);"}, {"sha": "f7b64e30c2d78202730317e9cac9ee5832ad5178", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72b242eacf3bc43375daff829e04bcce634ad22/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72b242eacf3bc43375daff829e04bcce634ad22/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a72b242eacf3bc43375daff829e04bcce634ad22", "patch": "@@ -1,3 +1,7 @@\n+2017-02-16  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.c-torture/execute/pr79286.c: New.\n+\n 2017-02-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/79512"}, {"sha": "e6d0e935a87b9f7b35772eb081049682812d6643", "filename": "gcc/testsuite/gcc.c-torture/execute/pr79286.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a72b242eacf3bc43375daff829e04bcce634ad22/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr79286.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a72b242eacf3bc43375daff829e04bcce634ad22/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr79286.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr79286.c?ref=a72b242eacf3bc43375daff829e04bcce634ad22", "patch": "@@ -0,0 +1,15 @@\n+int a = 0, c = 0;\n+static int d[][8] = {};\n+\n+int main ()\n+{\n+  int e;\n+  for (int b = 0; b < 4; b++)\n+    {\n+      __builtin_printf (\"%d\\n\", b, e);\n+      while (a && c++)\n+\te = d[300000000000000000][0];\n+    }\n+\n+  return 0;\n+}"}]}