{"sha": "9306cccbb5efd2422becd7ed19f0a7b1495083a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMwNmNjY2JiNWVmZDI0MjJiZWNkN2VkMTlmMGE3YjE0OTUwODNhNA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-11-24T23:18:56Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-11-24T23:18:56Z"}, "message": "re PR c++/17473 (typedef redefinition in struct is accepted)\n\n\tPR c++/17473\n\t* name-lookup.c (supplement_binding): Do not allow typedefs to be\n\tredefined in class scope.\n\n\tPR c++/18285\n\t* parser.c (cp_parser_set_decl_type_spec): Do not try to allow\n\tredefinitions of builtin types other that \"bool\" or \"wchar_t\".\n\n\tPR c++/17473\n\t* g++.dg/tc1/dr56.C: Remove.\n\t* g++.dg/template/typedef1.C: Add dg-error markers.\n\t* g++.old-deja/g++.other/typedef7.C: Likewise.\n\n\tPR c++/18285\n\t* g++.dg/parse/typedef7.C: New test.\n\nFrom-SVN: r91254", "tree": {"sha": "7bd32435b2f1333c420ff72df6fdec41c7172c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bd32435b2f1333c420ff72df6fdec41c7172c72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9306cccbb5efd2422becd7ed19f0a7b1495083a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9306cccbb5efd2422becd7ed19f0a7b1495083a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9306cccbb5efd2422becd7ed19f0a7b1495083a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9306cccbb5efd2422becd7ed19f0a7b1495083a4/comments", "author": null, "committer": null, "parents": [{"sha": "b7392506fd325139bb42e2593e1bcd2515072d3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7392506fd325139bb42e2593e1bcd2515072d3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7392506fd325139bb42e2593e1bcd2515072d3a"}], "stats": {"total": 68, "additions": 44, "deletions": 24}, "files": [{"sha": "ecc122e3363b30279784f1a0e9e6eabab57261b3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9306cccbb5efd2422becd7ed19f0a7b1495083a4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9306cccbb5efd2422becd7ed19f0a7b1495083a4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9306cccbb5efd2422becd7ed19f0a7b1495083a4", "patch": "@@ -1,3 +1,13 @@\n+2004-11-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/17473\n+\t* name-lookup.c (supplement_binding): Do not allow typedefs to be\n+\tredefined in class scope.\n+\n+\tPR c++/18285\n+\t* parser.c (cp_parser_set_decl_type_spec): Do not try to allow\n+\tredefinitions of builtin types other that \"bool\" or \"wchar_t\".\n+\n 2004-11-24  Steven Bosscher  <stevenb@suse.de>\n \n \t* decl.c (cxx_init_decl_processing): Don't clear"}, {"sha": "29b93ffe921c2899ae3dd727ccc42ade54a6220e", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9306cccbb5efd2422becd7ed19f0a7b1495083a4/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9306cccbb5efd2422becd7ed19f0a7b1495083a4/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=9306cccbb5efd2422becd7ed19f0a7b1495083a4", "patch": "@@ -531,19 +531,24 @@ supplement_binding (cxx_binding *binding, tree decl)\n   else if (TREE_CODE (bval) == TYPE_DECL\n \t   && TREE_CODE (decl) == TYPE_DECL\n \t   && DECL_NAME (decl) == DECL_NAME (bval)\n+\t   && binding->scope->kind != sk_class\n \t   && (same_type_p (TREE_TYPE (decl), TREE_TYPE (bval))\n \t       /* If either type involves template parameters, we must\n \t\t  wait until instantiation.  */\n \t       || uses_template_parms (TREE_TYPE (decl))\n \t       || uses_template_parms (TREE_TYPE (bval))))\n     /* We have two typedef-names, both naming the same type to have\n-       the same name.  This is OK because of:\n+       the same name.  In general, this is OK because of:\n \n          [dcl.typedef]\n \n \t In a given scope, a typedef specifier can be used to redefine\n \t the name of any type declared in that scope to refer to the\n-\t type to which it already refers.  */\n+\t type to which it already refers.  \n+\n+       However, in class scopes, this rule does not apply due to the\n+       stricter language in [class.mem] prohibiting redeclarations of\n+       members.  */\n     ok = false;\n   /* There can be two block-scope declarations of the same variable,\n      so long as they are `extern' declarations.  However, there cannot"}, {"sha": "1a9786845c49673757a741eb20f253088c608938", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9306cccbb5efd2422becd7ed19f0a7b1495083a4/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9306cccbb5efd2422becd7ed19f0a7b1495083a4/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9306cccbb5efd2422becd7ed19f0a7b1495083a4", "patch": "@@ -15343,12 +15343,14 @@ cp_parser_set_decl_spec_type (cp_decl_specifier_seq *decl_specs,\n {\n   decl_specs->any_specifiers_p = true;\n \n-  /* If the user tries to redeclare a built-in type (with, for example,\n-     in \"typedef int wchar_t;\") we remember that this is what\n+  /* If the user tries to redeclare bool or wchar_t (with, for\n+     example, in \"typedef int wchar_t;\") we remember that this is what\n      happened.  In system headers, we ignore these declarations so\n      that G++ can work with system headers that are not C++-safe.  */\n   if (decl_specs->specs[(int) ds_typedef]\n       && !user_defined_p\n+      && (type_spec == boolean_type_node\n+\t  || type_spec == wchar_type_node)\n       && (decl_specs->type\n \t  || decl_specs->specs[(int) ds_long]\n \t  || decl_specs->specs[(int) ds_short]"}, {"sha": "19579e98da100f551a81aad98ed3cea19d25b729", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9306cccbb5efd2422becd7ed19f0a7b1495083a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9306cccbb5efd2422becd7ed19f0a7b1495083a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9306cccbb5efd2422becd7ed19f0a7b1495083a4", "patch": "@@ -1,3 +1,13 @@\n+2004-11-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/17473\n+\t* g++.dg/tc1/dr56.C: Remove.\n+\t* g++.dg/template/typedef1.C: Add dg-error markers.\n+\t* g++.old-deja/g++.other/typedef7.C: Likewise.\n+\n+\tPR c++/18285\n+\t* g++.dg/parse/typedef7.C: New test.\n+\n 2004-11-24  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gcc.c-torture/execute/20041124-1.c: New test."}, {"sha": "126fb7ed85064872d4fb62179841ed904021cc3f", "filename": "gcc/testsuite/g++.dg/parse/typedef7.C", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9306cccbb5efd2422becd7ed19f0a7b1495083a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9306cccbb5efd2422becd7ed19f0a7b1495083a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftypedef7.C?ref=9306cccbb5efd2422becd7ed19f0a7b1495083a4", "patch": "@@ -0,0 +1,2 @@\n+// PR c++/18285\n+typedef void int char void double X; // { dg-error \"\" } "}, {"sha": "a5caea82655ec65d711a9e3a3c02a7d64214af43", "filename": "gcc/testsuite/g++.dg/tc1/dr56.C", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7392506fd325139bb42e2593e1bcd2515072d3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7392506fd325139bb42e2593e1bcd2515072d3a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftc1%2Fdr56.C?ref=b7392506fd325139bb42e2593e1bcd2515072d3a", "patch": "@@ -1,12 +0,0 @@\n-// { dg-do compile }\n-// Origin: Giovanni Bajo <giovannibajo at gcc dot gnu dot org>\n-// DR56: Redeclaring typedefs within classes \n-\n-class X { \n-  typedef int I; \n-  typedef int I;  // { dg-error \"\" \"Cannot redeclare a typedef in a class scope\" { xfail *-*-* } }\n-};\n-\n-// In non-class scope, they are allowed.\n-typedef int A;\n-typedef int A;"}, {"sha": "75b00e0fb2a68c8fcf3d65a06ff25ed07f950b00", "filename": "gcc/testsuite/g++.dg/template/typedef1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9306cccbb5efd2422becd7ed19f0a7b1495083a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9306cccbb5efd2422becd7ed19f0a7b1495083a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef1.C?ref=9306cccbb5efd2422becd7ed19f0a7b1495083a4", "patch": "@@ -12,10 +12,10 @@ template <typename T> struct A\n \n template <typename T> struct B\n {\n-  typedef int xxx;\n-  typedef T xxx;\n-  typedef typename A<T>::type xxx;\n-  typedef A<int>::type xxx;\n+  typedef int xxx; // { dg-error \"\" }\n+  typedef T xxx; // { dg-error \"\" }\n+  typedef typename A<T>::type xxx; // { dg-error \"\" }\n+  typedef A<int>::type xxx; // { dg-error \"\" }\n };\n \n B<int> good;"}, {"sha": "42cf4f1c5e23a55901da6c1bc5d2b7806a8a85e2", "filename": "gcc/testsuite/g++.old-deja/g++.other/typedef7.C", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9306cccbb5efd2422becd7ed19f0a7b1495083a4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypedef7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9306cccbb5efd2422becd7ed19f0a7b1495083a4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypedef7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ftypedef7.C?ref=9306cccbb5efd2422becd7ed19f0a7b1495083a4", "patch": "@@ -4,14 +4,17 @@\n typedef int I;\n typedef int I;\n \n+// DR56 makes clear that duplicate typedefs in class scopes are\n+// invalid.\n+\n struct A {\n-  typedef int I;\n-  typedef int I;\n+  typedef int I; // { dg-error \"\" }\n+  typedef int I; // { dg-error \"\" }\n };\n \n template <class T>\n struct S {\n-  typedef int I;\n-  typedef int I;\n+  typedef int I;  // { dg-error \"\" }\n+  typedef int I;  // { dg-error \"\" }\n };\n "}]}