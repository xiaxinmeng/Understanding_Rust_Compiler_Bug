{"sha": "3b8318052298eb22355dad37ff842d871c409b3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I4MzE4MDUyMjk4ZWIyMjM1NWRhZDM3ZmY4NDJkODcxYzQwOWIzZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-02-08T18:31:36Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-02-08T18:31:36Z"}, "message": "re PR target/22209 (libgfortran unresolvable symbols on irix6.5)\n\n\n\tPR target/22209\n\t* config/mips/mips.h (MIN_UNITS_PER_WORD): Don't define for libgcc.\n\t* config/mips/_tilib.c: Remove.\n\t* config/fixtfdi.c: New libgcc source file.\n\t* config/fixunstfdi.c: New source file.\n\t* config/floatditf.c: New source file.\n\t* config/floatunditf.c: New souce file.\n\t* config/mips/t-iris6 (LIB2FUNCS_EXTRA): Include the new source\n\tfiles above instead of config/mips/_tilib.c.\n\t* config/mips/t-linux64 (LIB2FUNCS_EXTRA): Likewise.\n\nFrom-SVN: r110760", "tree": {"sha": "bebfda43f375ce069f89e1dac6ba8ece0221d385", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bebfda43f375ce069f89e1dac6ba8ece0221d385"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b8318052298eb22355dad37ff842d871c409b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8318052298eb22355dad37ff842d871c409b3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b8318052298eb22355dad37ff842d871c409b3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8318052298eb22355dad37ff842d871c409b3d/comments", "author": null, "committer": null, "parents": [{"sha": "855dd2bcff9e32e053bf66e336405ded26e9c927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855dd2bcff9e32e053bf66e336405ded26e9c927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/855dd2bcff9e32e053bf66e336405ded26e9c927"}], "stats": {"total": 280, "additions": 120, "deletions": 160}, "files": [{"sha": "719437489de9ab7aad425cb1153de78140f7a015", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8318052298eb22355dad37ff842d871c409b3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8318052298eb22355dad37ff842d871c409b3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b8318052298eb22355dad37ff842d871c409b3d", "patch": "@@ -1,3 +1,16 @@\n+2006-02-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR target/22209\n+\t* config/mips/mips.h (MIN_UNITS_PER_WORD): Don't define for libgcc.\n+\t* config/mips/_tilib.c: Remove.\n+\t* config/fixtfdi.c: New libgcc source file.\n+\t* config/fixunstfdi.c: New source file.\n+\t* config/floatditf.c: New source file.\n+\t* config/floatunditf.c: New souce file.\n+\t* config/mips/t-iris6 (LIB2FUNCS_EXTRA): Include the new source\n+\tfiles above instead of config/mips/_tilib.c.\n+\t* config/mips/t-linux64 (LIB2FUNCS_EXTRA): Likewise.\n+\n 2006-02-08  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/26169"}, {"sha": "9fa13c248479c9e9977d2bbccc572c5aa5c0d0b7", "filename": "gcc/config/fixtfdi.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8318052298eb22355dad37ff842d871c409b3d/gcc%2Fconfig%2Ffixtfdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8318052298eb22355dad37ff842d871c409b3d/gcc%2Fconfig%2Ffixtfdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffixtfdi.c?ref=3b8318052298eb22355dad37ff842d871c409b3d", "patch": "@@ -0,0 +1,18 @@\n+/* Public domain.  */\n+#if __LDBL_MANT_DIG__ == 106\n+typedef int DItype __attribute__ ((mode (DI)));\n+typedef float TFtype __attribute__ ((mode (TF)));\n+\n+DItype __fixtfdi (TFtype);\n+DItype __fixunstfdi (TFtype);\n+\n+\n+DItype\n+__fixtfdi (TFtype x)\n+{\n+  if (x < 0)\n+    return - __fixunstfdi (-x);\n+  return __fixunstfdi (x);\n+}\n+\n+#endif"}, {"sha": "ed81366dcfa47561c8c837ef8bd6bf173372a10c", "filename": "gcc/config/fixunstfdi.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8318052298eb22355dad37ff842d871c409b3d/gcc%2Fconfig%2Ffixunstfdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8318052298eb22355dad37ff842d871c409b3d/gcc%2Fconfig%2Ffixunstfdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffixunstfdi.c?ref=3b8318052298eb22355dad37ff842d871c409b3d", "patch": "@@ -0,0 +1,35 @@\n+/* Public domain.  */\n+#if __LDBL_MANT_DIG__ == 106\n+typedef int DItype __attribute__ ((mode (DI)));\n+typedef int SItype __attribute__ ((mode (SI)));\n+typedef unsigned int UDItype __attribute__ ((mode (DI)));\n+typedef unsigned int USItype __attribute__ ((mode (SI)));\n+typedef float TFtype __attribute__ ((mode (TF)));\n+\n+DItype __fixunstfdi (TFtype);\n+\n+DItype\n+__fixunstfdi (TFtype a)\n+{\n+  if (a < 0)\n+    return 0;\n+\n+  /* Compute high word of result, as a flonum.  */\n+  const TFtype b = (a / (((UDItype) 1) << (sizeof (SItype) * 8)));\n+  /* Convert that to fixed (but not to DItype!),\n+     and shift it into the high word.  */\n+  UDItype v = (USItype) b;\n+  v <<= (sizeof (SItype) * 8);\n+  /* Remove high part from the TFtype, leaving the low part as flonum.  */\n+  a -= (TFtype) v;\n+  /* Convert that to fixed (but not to DItype!) and add it in.\n+     Sometimes A comes out negative.  This is significant, since\n+     A has more bits than a long int does.  */\n+  if (a < 0)\n+    v -= (USItype) (-a);\n+  else\n+    v += (USItype) a;\n+  return v;\n+}\n+\n+#endif"}, {"sha": "7656f2db37fe08f7dd0ed5f24de876cc18eab3df", "filename": "gcc/config/floatditf.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8318052298eb22355dad37ff842d871c409b3d/gcc%2Fconfig%2Ffloatditf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8318052298eb22355dad37ff842d871c409b3d/gcc%2Fconfig%2Ffloatditf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffloatditf.c?ref=3b8318052298eb22355dad37ff842d871c409b3d", "patch": "@@ -0,0 +1,25 @@\n+/* Public domain.  */\n+#if __LDBL_MANT_DIG__ == 106\n+typedef int DItype __attribute__ ((mode (DI)));\n+typedef int SItype __attribute__ ((mode (SI)));\n+typedef unsigned int UDItype __attribute__ ((mode (DI)));\n+typedef unsigned int USItype __attribute__ ((mode (SI)));\n+typedef float DFtype __attribute__ ((mode (DF)));\n+typedef float TFtype __attribute__ ((mode (TF)));\n+\n+TFtype __floatditf (UDItype);\n+\n+TFtype\n+__floatditf (UDItype u)\n+{\n+  DFtype dh, dl;\n+\n+  dh = (SItype) (u >> (sizeof (SItype) * 8));\n+  dh *= 2.0 * (((UDItype) 1) << ((sizeof (SItype) * 8) - 1));\n+  dl = (USItype) (u & ((((UDItype) 1) << (sizeof (SItype) * 8)) - 1));\n+\n+  return (TFtype) dh + (TFtype) dl;\n+}\n+\n+#endif\n+"}, {"sha": "27fa058e79c523348b8731030f6e8b6c7cde30b9", "filename": "gcc/config/floatunditf.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8318052298eb22355dad37ff842d871c409b3d/gcc%2Fconfig%2Ffloatunditf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8318052298eb22355dad37ff842d871c409b3d/gcc%2Fconfig%2Ffloatunditf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffloatunditf.c?ref=3b8318052298eb22355dad37ff842d871c409b3d", "patch": "@@ -0,0 +1,25 @@\n+/* Public domain.  */\n+#if __LDBL_MANT_DIG__ == 106\n+typedef int DItype __attribute__ ((mode (DI)));\n+typedef int SItype __attribute__ ((mode (SI)));\n+typedef unsigned int UDItype __attribute__ ((mode (DI)));\n+typedef unsigned int USItype __attribute__ ((mode (SI)));\n+typedef float DFtype __attribute__ ((mode (DF)));\n+typedef float TFtype __attribute__ ((mode (TF)));\n+\n+TFtype __floatunditf (UDItype);\n+\n+TFtype\n+__floatunditf (UDItype u)\n+{\n+  DFtype dh, dl;\n+\n+  dh = (USItype) (u >> (sizeof (SItype) * 8));\n+  dh *= 2.0 * (((UDItype) 1) << ((sizeof (SItype) * 8) - 1));\n+  dl = (USItype) (u & ((((UDItype) 1) << (sizeof (SItype) * 8)) - 1));\n+\n+  return (TFtype) dh + (TFtype) dl;\n+}\n+\n+#endif\n+"}, {"sha": "8e5e1ef15e78da4561b45783535dde779ee8fd1b", "filename": "gcc/config/mips/_tilib.c", "status": "removed", "additions": 0, "deletions": 158, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855dd2bcff9e32e053bf66e336405ded26e9c927/gcc%2Fconfig%2Fmips%2F_tilib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855dd2bcff9e32e053bf66e336405ded26e9c927/gcc%2Fconfig%2Fmips%2F_tilib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F_tilib.c?ref=855dd2bcff9e32e053bf66e336405ded26e9c927", "patch": "@@ -1,158 +0,0 @@\n-/* A few TImode functions needed for TFmode emulated arithmetic.\n-   Copyright 2002, 2003 Free Software Foundation, Inc.\n-   Contributed by Alexandre Oliva <aoliva@redhat.com>\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 2, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING.  If not, write to\n-the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n-Boston, MA 02110-1301, USA.  */\n-\n-\n-#include \"tconfig.h\"\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n-\n-#if _MIPS_SIM == _ABIN32 || _MIPS_SIM == _ABI64\n-\n-typedef int TItype __attribute__ ((mode (TI)));\n-typedef int DItype __attribute__ ((mode (DI)));\n-typedef int SItype __attribute__ ((mode (SI)));\n-\n-typedef unsigned int UDItype __attribute__ ((mode (DI)));\n-\n-typedef union\n-{\n-  struct TIstruct {\n-#if LIBGCC2_WORDS_BIG_ENDIAN\n-    DItype high, low;\n-#else\n-    DItype low, high;\n-#endif\n-  } s;\n-  TItype ll;\n-} TIunion;\n-\n-TItype __negti2 (TItype);\n-TItype __ashlti3 (TItype, int);\n-#if 0\n-TItype __ashrti3 (TItype, int);\n-#endif\n-TItype __lshrti3 (TItype, int);\n-\n-TItype\n-__negti2 (TItype u)\n-{\n-  TIunion w;\n-  TIunion uu;\n-\n-  uu.ll = u;\n-\n-  w.s.low = -uu.s.low;\n-  w.s.high = -uu.s.high - ((UDItype) w.s.low > 0);\n-\n-  return w.ll;\n-}\n-\n-TItype\n-__ashlti3 (TItype u, int b)\n-{\n-  TIunion w;\n-  int bm;\n-  TIunion uu;\n-\n-  if (b == 0)\n-    return u;\n-\n-  uu.ll = u;\n-\n-  bm = (sizeof (DItype) * BITS_PER_UNIT) - b;\n-  if (bm <= 0)\n-    {\n-      w.s.low = 0;\n-      w.s.high = (UDItype) uu.s.low << -bm;\n-    }\n-  else\n-    {\n-      UDItype carries = (UDItype) uu.s.low >> bm;\n-\n-      w.s.low = (UDItype) uu.s.low << b;\n-      w.s.high = ((UDItype) uu.s.high << b) | carries;\n-    }\n-\n-  return w.ll;\n-}\n-\n-#if 0\n-TItype\n-__ashrti3 (TItype u, int b)\n-{\n-  TIunion w;\n-  int bm;\n-  TIunion uu;\n-\n-  if (b == 0)\n-    return u;\n-\n-  uu.ll = u;\n-\n-  bm = (sizeof (DItype) * BITS_PER_UNIT) - b;\n-  if (bm <= 0)\n-    {\n-      /* w.s.high = 1..1 or 0..0 */\n-      w.s.high = uu.s.high >> (sizeof (DItype) * BITS_PER_UNIT - 1);\n-      w.s.low = uu.s.high >> -bm;\n-    }\n-  else\n-    {\n-      UDItype carries = (UDItype) uu.s.high << bm;\n-\n-      w.s.high = uu.s.high >> b;\n-      w.s.low = ((UDItype) uu.s.low >> b) | carries;\n-    }\n-\n-  return w.ll;\n-}\n-#endif\n-\n-TItype\n-__lshrti3 (TItype u, int b)\n-{\n-  TIunion w;\n-  int bm;\n-  TIunion uu;\n-\n-  if (b == 0)\n-    return u;\n-\n-  uu.ll = u;\n-\n-  bm = (sizeof (DItype) * BITS_PER_UNIT) - b;\n-  if (bm <= 0)\n-    {\n-      w.s.high = 0;\n-      w.s.low = (UDItype) uu.s.high >> -bm;\n-    }\n-  else\n-    {\n-      UDItype carries = (UDItype) uu.s.high << bm;\n-\n-      w.s.high = (UDItype) uu.s.high >> b;\n-      w.s.low = ((UDItype) uu.s.low >> b) | carries;\n-    }\n-\n-  return w.ll;\n-}\n-\n-#endif /* N32 or N64 */"}, {"sha": "8ebb3c58e2bf71f517be48d027e779ab5797e5a4", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8318052298eb22355dad37ff842d871c409b3d/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8318052298eb22355dad37ff842d871c409b3d/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=3b8318052298eb22355dad37ff842d871c409b3d", "patch": "@@ -975,7 +975,9 @@ extern const struct mips_rtx_cost_data *mips_cost;\n \n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD (TARGET_64BIT ? 8 : 4)\n+#ifndef IN_LIBGCC2\n #define MIN_UNITS_PER_WORD 4\n+#endif\n \n /* For MIPS, width of a floating point register.  */\n #define UNITS_PER_FPREG (TARGET_FLOAT64 ? 8 : 4)"}, {"sha": "0ddf33915938b7d6c6580109cbe7198143e72114", "filename": "gcc/config/mips/t-iris6", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8318052298eb22355dad37ff842d871c409b3d/gcc%2Fconfig%2Fmips%2Ft-iris6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8318052298eb22355dad37ff842d871c409b3d/gcc%2Fconfig%2Fmips%2Ft-iris6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-iris6?ref=3b8318052298eb22355dad37ff842d871c409b3d", "patch": "@@ -6,7 +6,7 @@ MULTILIB_OSDIRNAMES=../lib32 ../lib ../lib64\n LIBGCC = stmp-multilib\n INSTALL_LIBGCC = install-multilib\n \n-LIB2FUNCS_EXTRA = $(srcdir)/config/mips/_tilib.c\n+LIB2FUNCS_EXTRA = $(srcdir)/config/fixtfdi.c $(srcdir)/config/fixunstfdi.c $(srcdir)/config/floatditf.c $(srcdir)/config/floatunditf.c\n \n TPBIT = tp-bit.c\n "}, {"sha": "c96d5ed581fd86a854459d50bf7636b90c8dfc93", "filename": "gcc/config/mips/t-linux64", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8318052298eb22355dad37ff842d871c409b3d/gcc%2Fconfig%2Fmips%2Ft-linux64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8318052298eb22355dad37ff842d871c409b3d/gcc%2Fconfig%2Fmips%2Ft-linux64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Ft-linux64?ref=3b8318052298eb22355dad37ff842d871c409b3d", "patch": "@@ -4,7 +4,7 @@ MULTILIB_OSDIRNAMES = ../lib32 ../lib ../lib64\n \n EXTRA_MULTILIB_PARTS=crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\n \n-LIB2FUNCS_EXTRA = $(srcdir)/config/mips/_tilib.c\n+LIB2FUNCS_EXTRA = $(srcdir)/config/fixtfdi.c $(srcdir)/config/fixunstfdi.c $(srcdir)/config/floatditf.c $(srcdir)/config/floatunditf.c\n \n TPBIT = tp-bit.c\n "}]}