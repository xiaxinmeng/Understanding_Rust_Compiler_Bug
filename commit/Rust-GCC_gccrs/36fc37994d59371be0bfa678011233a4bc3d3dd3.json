{"sha": "36fc37994d59371be0bfa678011233a4bc3d3dd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZmYzM3OTk0ZDU5MzcxYmUwYmZhNjc4MDExMjMzYTRiYzNkM2RkMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2011-07-13T11:17:00Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-07-13T11:17:00Z"}, "message": "tree-vect-loop-manip.c (vect_create_cond_for_alias_checks): Tighten overlap check.\n\ngcc/\n\t* tree-vect-loop-manip.c (vect_create_cond_for_alias_checks): Tighten\n\toverlap check.\n\nFrom-SVN: r176229", "tree": {"sha": "699e63cbd2652ee1d4962771d677ca361f4833ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/699e63cbd2652ee1d4962771d677ca361f4833ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36fc37994d59371be0bfa678011233a4bc3d3dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36fc37994d59371be0bfa678011233a4bc3d3dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36fc37994d59371be0bfa678011233a4bc3d3dd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36fc37994d59371be0bfa678011233a4bc3d3dd3/comments", "author": null, "committer": null, "parents": [{"sha": "953d0c90a2f0a98b6d860ecfbf1bc5672653a588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/953d0c90a2f0a98b6d860ecfbf1bc5672653a588", "html_url": "https://github.com/Rust-GCC/gccrs/commit/953d0c90a2f0a98b6d860ecfbf1bc5672653a588"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "cddbb717107c7db2f41d714a60c500671ca3d187", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fc37994d59371be0bfa678011233a4bc3d3dd3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fc37994d59371be0bfa678011233a4bc3d3dd3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36fc37994d59371be0bfa678011233a4bc3d3dd3", "patch": "@@ -1,3 +1,8 @@\n+2011-07-13  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* tree-vect-loop-manip.c (vect_create_cond_for_alias_checks): Tighten\n+\toverlap check.\n+\n 2011-07-13  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree.h (categorize_ctor_elements): Remove comment.  Fix long line."}, {"sha": "b8d67804f77ecda6ea6d6c56d511c9aea5a01fd3", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36fc37994d59371be0bfa678011233a4bc3d3dd3/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36fc37994d59371be0bfa678011233a4bc3d3dd3/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=36fc37994d59371be0bfa678011233a4bc3d3dd3", "patch": "@@ -2409,13 +2409,13 @@ vect_create_cond_for_alias_checks (loop_vec_info loop_vinfo,\n   tree part_cond_expr, length_factor;\n \n   /* Create expression\n-     ((store_ptr_0 + store_segment_length_0) < load_ptr_0)\n-     || (load_ptr_0 + load_segment_length_0) < store_ptr_0))\n+     ((store_ptr_0 + store_segment_length_0) <= load_ptr_0)\n+     || (load_ptr_0 + load_segment_length_0) <= store_ptr_0))\n      &&\n      ...\n      &&\n-     ((store_ptr_n + store_segment_length_n) < load_ptr_n)\n-     || (load_ptr_n + load_segment_length_n) < store_ptr_n))  */\n+     ((store_ptr_n + store_segment_length_n) <= load_ptr_n)\n+     || (load_ptr_n + load_segment_length_n) <= store_ptr_n))  */\n \n   if (VEC_empty (ddr_p, may_alias_ddrs))\n     return;\n@@ -2484,8 +2484,8 @@ vect_create_cond_for_alias_checks (loop_vec_info loop_vinfo,\n \n       part_cond_expr =\n       \tfold_build2 (TRUTH_OR_EXPR, boolean_type_node,\n-\t  fold_build2 (LT_EXPR, boolean_type_node, seg_a_max, seg_b_min),\n-\t  fold_build2 (LT_EXPR, boolean_type_node, seg_b_max, seg_a_min));\n+\t  fold_build2 (LE_EXPR, boolean_type_node, seg_a_max, seg_b_min),\n+\t  fold_build2 (LE_EXPR, boolean_type_node, seg_b_max, seg_a_min));\n \n       if (*cond_expr)\n \t*cond_expr = fold_build2 (TRUTH_AND_EXPR, boolean_type_node,"}]}