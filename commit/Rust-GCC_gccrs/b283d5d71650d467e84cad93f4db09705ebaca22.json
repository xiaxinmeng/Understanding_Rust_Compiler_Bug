{"sha": "b283d5d71650d467e84cad93f4db09705ebaca22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI4M2Q1ZDcxNjUwZDQ2N2U4NGNhZDkzZjRkYjA5NzA1ZWJhY2EyMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-05-16T20:59:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-05-16T20:59:39Z"}, "message": "revert\n\nFrom-SVN: r26955", "tree": {"sha": "9ef35a043e0dd7a20c0d18e873cc588e8f8dbf4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ef35a043e0dd7a20c0d18e873cc588e8f8dbf4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b283d5d71650d467e84cad93f4db09705ebaca22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b283d5d71650d467e84cad93f4db09705ebaca22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b283d5d71650d467e84cad93f4db09705ebaca22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b283d5d71650d467e84cad93f4db09705ebaca22/comments", "author": null, "committer": null, "parents": [{"sha": "b5f2178755b6b5aa3349509700f1945861bfd158", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f2178755b6b5aa3349509700f1945861bfd158", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5f2178755b6b5aa3349509700f1945861bfd158"}], "stats": {"total": 1517, "additions": 752, "deletions": 765}, "files": [{"sha": "6f1ac55818ab07fa797d278a5409761c7ae8844c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b283d5d71650d467e84cad93f4db09705ebaca22/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b283d5d71650d467e84cad93f4db09705ebaca22/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b283d5d71650d467e84cad93f4db09705ebaca22", "patch": "@@ -1,11 +1,5 @@\n 1999-05-16  Jason Merrill  <jason@yorick.cygnus.com>\n \n-\t* parse.y (direct_new_declarator): Make the first one a\n-\tnonmomentary_expr, too.\n-\t* init.c (build_new): suspend_momentary while we're calculating\n-\tthe size.\n-\t(build_new_1): Likewise.  Don't copy size.\n-\n \t* decl2.c (finish_objects): Don't use .?tors.* if we don't have\n \tASM_OUTPUT_CONSTRUCTOR.\n "}, {"sha": "7fb203007dea9bc2ee6a41272339b376fac3e902", "filename": "gcc/cp/init.c", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b283d5d71650d467e84cad93f4db09705ebaca22/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b283d5d71650d467e84cad93f4db09705ebaca22/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b283d5d71650d467e84cad93f4db09705ebaca22", "patch": "@@ -1893,7 +1893,6 @@ build_new (placement, decl, init, use_global_new)\n   tree type, rval;\n   tree nelts = NULL_TREE, t;\n   int has_array = 0;\n-  int momentary;\n \n   tree pending_sizes = NULL_TREE;\n \n@@ -1953,9 +1952,6 @@ build_new (placement, decl, init, use_global_new)\n \t\t      == NULL_TREE)\n \t\t    pedwarn (\"size in array new must have integral type\");\n \n-\t\t  /* The size must live long so it can be used in a\n-\t\t     cleanup.  */\n-\t\t  momentary = suspend_momentary ();\n \t\t  this_nelts = save_expr (cp_convert (sizetype, this_nelts));\n \t\t  absdcl = TREE_OPERAND (absdcl, 0);\n \t          if (this_nelts == integer_zero_node)\n@@ -1965,7 +1961,6 @@ build_new (placement, decl, init, use_global_new)\n \t\t    }\n \t\t  else\n \t\t    nelts = build_binary_op (MULT_EXPR, nelts, this_nelts);\n-\t\t  resume_momentary (momentary);\n \t\t}\n \t    }\n \t  else\n@@ -2051,9 +2046,7 @@ build_new (placement, decl, init, use_global_new)\n      both new int and new int[10] return an int*.  5.3.4.  */\n   if (TREE_CODE (type) == ARRAY_TYPE && has_array == 0)\n     {\n-      momentary = suspend_momentary ();\n       nelts = array_type_nelts_top (type);\n-      resume_momentary (momentary);\n       has_array = 1;\n       type = TREE_TYPE (type);\n     }\n@@ -2134,7 +2127,6 @@ build_new_1 (exp)\n   int use_cookie, nothrow, check_new;\n   int use_global_new;\n   int use_java_new = 0;\n-  int susp = 0;\n \n   placement = TREE_OPERAND (exp, 0);\n   type = TREE_OPERAND (exp, 1);\n@@ -2164,13 +2156,11 @@ build_new_1 (exp)\n   if (!complete_type_or_else (true_type, exp))\n     return error_mark_node;\n \n-  susp = suspend_momentary ();\n   if (has_array)\n     size = fold (build_binary_op (MULT_EXPR, size_in_bytes (true_type),\n \t\t\t\t  nelts));\n   else\n     size = size_in_bytes (type);\n-  resume_momentary (susp);\n \n   if (TREE_CODE (true_type) == VOID_TYPE)\n     {\n@@ -2210,9 +2200,7 @@ build_new_1 (exp)\n     {\n       tree extra = BI_header_size;\n \n-      susp = suspend_momentary ();\n       size = size_binop (PLUS_EXPR, size, extra);\n-      resume_momentary (susp);\n     }\n \n   if (has_array)\n@@ -2255,6 +2243,8 @@ build_new_1 (exp)\n     }\n   else\n     {\n+      int susp = 0;\n+\n       if (flag_exceptions)\n \t/* We will use RVAL when generating an exception handler for\n \t   this new-expression, so we must save it.  */\n@@ -2427,7 +2417,7 @@ build_new_1 (exp)\n \t  int flags = LOOKUP_NORMAL | (use_global_new * LOOKUP_GLOBAL);\n \n \t  /* All cleanups must last longer than normal.  */\n-\t  susp = suspend_momentary ();\n+\t  int yes = suspend_momentary ();\n \n \t  if (placement)\n \t    {\n@@ -2439,9 +2429,12 @@ build_new_1 (exp)\n \t      fn = TREE_OPERAND (fn, 0);\n \t    }\n \n+\t  /* Copy size to the saveable obstack.  */\n+\t  size = mapcar (size, permanent_p);\n+\n \t  cleanup = build_op_delete_call (dcode, alloc_node, size, flags, fn);\n \n-\t  resume_momentary (susp);\n+\t  resume_momentary (yes);\n \n \t  /* Ack!  First we allocate the memory.  Then we set our sentry\n \t     variable to true, and expand a cleanup that deletes the memory\n@@ -2455,11 +2448,11 @@ build_new_1 (exp)\n \t      begin = get_target_expr (boolean_true_node);\n \t      sentry = TREE_OPERAND (begin, 0);\n \n-\t      susp = suspend_momentary ();\n+\t      yes = suspend_momentary ();\n \t      TREE_OPERAND (begin, 2)\n \t\t= build (COND_EXPR, void_type_node, sentry,\n \t\t\t cleanup, void_zero_node);\n-\t      resume_momentary (susp);\n+\t      resume_momentary (yes);\n \n \t      rval = get_target_expr (rval);\n "}, {"sha": "f5285b3a885558fe35a01634ac68c2bb1c88d828", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 742, "deletions": 742, "changes": 1484, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b283d5d71650d467e84cad93f4db09705ebaca22/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b283d5d71650d467e84cad93f4db09705ebaca22/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=b283d5d71650d467e84cad93f4db09705ebaca22"}, {"sha": "677730ca33641040940f8441f15f799a18426944", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b283d5d71650d467e84cad93f4db09705ebaca22/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b283d5d71650d467e84cad93f4db09705ebaca22/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=b283d5d71650d467e84cad93f4db09705ebaca22", "patch": "@@ -3123,7 +3123,7 @@ new_declarator:\n \n /* ANSI direct-new-declarator (5.3.4) */\n direct_new_declarator:\n-\t  '[' nonmomentary_expr ']'\n+\t  '[' expr ']'\n \t\t{ $$ = build_parse_node (ARRAY_REF, NULL_TREE, $2); }\n \t| direct_new_declarator '[' nonmomentary_expr ']'\n \t\t{ $$ = build_parse_node (ARRAY_REF, $$, $3); }"}]}