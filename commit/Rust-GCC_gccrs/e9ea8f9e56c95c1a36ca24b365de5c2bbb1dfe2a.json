{"sha": "e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTllYThmOWU1NmM5NWMxYTM2Y2EyNGIzNjVkZTVjMmJiYjFkZmUyYQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2015-11-12T11:35:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T11:35:30Z"}, "message": "sem_ch10.adb, atree.adb: Minor reformatting.\n\n2015-11-12  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch10.adb, atree.adb: Minor reformatting.\n\n2015-11-12  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_elab.adb (Check_A_Call): Add new variable\n\tIs_DIC_Proc. Report elaboration issue in SPARK concerning calls\n\tto source subprograms or nontrivial Default_Initial_Condition\n\tprocedures. Add specialized error message to avoid outputting\n\tthe internal name of the Default_Initial_Condition procedure.\n\t* sem_util.ads, sem_util.adb\n\t(Is_Non_Trivial_Default_Init_Cond_Procedure): New routine.\n\nFrom-SVN: r230237", "tree": {"sha": "ed13011c5cbac7b87777b7a2d7abcf64c0efd4f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed13011c5cbac7b87777b7a2d7abcf64c0efd4f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8a0183fdf2e1282bcbe6a7a035def0330e599b71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0183fdf2e1282bcbe6a7a035def0330e599b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a0183fdf2e1282bcbe6a7a035def0330e599b71"}], "stats": {"total": 105, "additions": 94, "deletions": 11}, "files": [{"sha": "66cde7f47bdd54f490bd8b57a018a2026ee2c8de", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a", "patch": "@@ -1,3 +1,17 @@\n+2015-11-12  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch10.adb, atree.adb: Minor reformatting.\n+\n+2015-11-12  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_elab.adb (Check_A_Call): Add new variable\n+\tIs_DIC_Proc. Report elaboration issue in SPARK concerning calls\n+\tto source subprograms or nontrivial Default_Initial_Condition\n+\tprocedures. Add specialized error message to avoid outputting\n+\tthe internal name of the Default_Initial_Condition procedure.\n+\t* sem_util.ads, sem_util.adb\n+\t(Is_Non_Trivial_Default_Init_Cond_Procedure): New routine.\n+\n 2015-11-12  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* contracts.adb (Analyze_Entry_Or_Subprogram_Body_Contract):"}, {"sha": "1afaca6908d71d93e4e7383b4ac39453c2833760", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a", "patch": "@@ -794,7 +794,7 @@ package body Atree is\n    ------------------------\n \n    function Copy_Separate_Tree (Source : Node_Id) return Node_Id is\n-      New_Id  : Node_Id;\n+      New_Id : Node_Id;\n \n       function Copy_Entity (E : Entity_Id) return Entity_Id;\n       --  Copy Entity, copying only the Ekind and Chars fields\n@@ -803,8 +803,8 @@ package body Atree is\n       --  Copy list\n \n       function Possible_Copy (Field : Union_Id) return Union_Id;\n-      --  Given a field, returns a copy of the node or list if its parent\n-      --  is the current source node, and otherwise returns the input\n+      --  Given a field, returns a copy of the node or list if its parent is\n+      --  the current source node, and otherwise returns the input.\n \n       -----------------\n       -- Copy_Entity --\n@@ -871,8 +871,7 @@ package body Atree is\n \n       begin\n          if Field in Node_Range then\n-            New_N :=\n-              Union_Id (Copy_Separate_Tree (Node_Id (Field)));\n+            New_N := Union_Id (Copy_Separate_Tree (Node_Id (Field)));\n \n             if Parent (Node_Id (Field)) = Source then\n                Set_Parent (Node_Id (New_N), New_Id);"}, {"sha": "6ff5f9ebfbc406623a067f2b5c72303bac57eeae", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a", "patch": "@@ -1877,9 +1877,8 @@ package body Sem_Ch10 is\n                   --  the extended main unit.\n \n                   if Generate_SCO\n-                    and then\n-                      In_Extended_Main_Source_Unit\n-                        (Cunit_Entity (Current_Sem_Unit))\n+                    and then In_Extended_Main_Source_Unit\n+                               (Cunit_Entity (Current_Sem_Unit))\n                   then\n                      SCO_Record_Raw (Unum);\n                   end if;"}, {"sha": "bab845d359e36c3743ddb8aee9af6c2ff3530368", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a", "patch": "@@ -597,6 +597,11 @@ package body Sem_Elab is\n       --  non-visible unit. This is the scope that is to be investigated to\n       --  see whether an elaboration check is required.\n \n+      Is_DIC_Proc : Boolean := False;\n+      --  Flag set when the call denotes the Default_Initial_Condition\n+      --  procedure of a private type which wraps a non-trivila assertion\n+      --  expression.\n+\n       Issue_In_SPARK : Boolean;\n       --  Flag set when a source entity is called during elaboration in SPARK\n \n@@ -966,7 +971,16 @@ package body Sem_Elab is\n          return;\n       end if;\n \n-      Issue_In_SPARK := SPARK_Mode = On and Comes_From_Source (Ent);\n+      Is_DIC_Proc := Is_Non_Trivial_Default_Init_Cond_Procedure (Ent);\n+\n+      --  Elaboration issues in SPARK are reported only for source constructs\n+      --  and for non-trivial Default_Initial_Condition procedures. The latter\n+      --  must be checked because the default initialization of an object of a\n+      --  private type triggers the evaluation of the Default_Initial_Condition\n+      --  expression which in turn may have side effects.\n+\n+      Issue_In_SPARK :=\n+        SPARK_Mode = On and (Comes_From_Source (Ent) or Is_DIC_Proc);\n \n       --  Now check if an Elaborate_All (or dynamic check) is needed\n \n@@ -1016,7 +1030,20 @@ package body Sem_Elab is\n                   Ent);\n \n             elsif Issue_In_SPARK then\n-               Error_Msg_NE (\"call to & during elaboration in SPARK\", N, Ent);\n+\n+               --  Emit a specialized error message when the elaboration of an\n+               --  object of a private type evaluates the expression of pragma\n+               --  Default_Initial_Condition. This prevents the internal name\n+               --  of the procedure from appearing in the error message.\n+\n+               if Is_DIC_Proc then\n+                  Error_Msg_N\n+                    (\"call to Default_Initial_Condition during elaboration in \"\n+                     & \"SPARK\", N);\n+               else\n+                  Error_Msg_NE\n+                    (\"call to & during elaboration in SPARK\", N, Ent);\n+               end if;\n \n             else\n                Elab_Warning"}, {"sha": "f9206ac6c7326d9bc73499a6bf2c157732b5da4e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a", "patch": "@@ -12362,12 +12362,50 @@ package body Sem_Util is\n       end if;\n    end Is_Local_Variable_Reference;\n \n+   ------------------------------------------------\n+   -- Is_Non_Trivial_Default_Init_Cond_Procedure --\n+   ------------------------------------------------\n+\n+   function Is_Non_Trivial_Default_Init_Cond_Procedure\n+     (Id : Entity_Id) return Boolean\n+   is\n+      Body_Decl : Node_Id;\n+      Stmt : Node_Id;\n+\n+   begin\n+      if Ekind (Id) = E_Procedure\n+        and then Is_Default_Init_Cond_Procedure (Id)\n+      then\n+         Body_Decl :=\n+           Unit_Declaration_Node\n+             (Corresponding_Body (Unit_Declaration_Node (Id)));\n+\n+         --  The body of the Default_Initial_Condition procedure must contain\n+         --  at least one statement, otherwise the generation of the subprogram\n+         --  body failed.\n+\n+         pragma Assert (Present (Handled_Statement_Sequence (Body_Decl)));\n+\n+         --  To qualify as non-trivial, the first statement of the procedure\n+         --  must be a check in the form of an if statement. If the original\n+         --  Default_Initial_Condition expression was folded, then the first\n+         --  statement is not a check.\n+\n+         Stmt := First (Statements (Handled_Statement_Sequence (Body_Decl)));\n+\n+         return\n+           Nkind (Stmt) = N_If_Statement\n+             and then Nkind (Original_Node (Stmt)) = N_Pragma;\n+      end if;\n+\n+      return False;\n+   end Is_Non_Trivial_Default_Init_Cond_Procedure;\n+\n    -------------------------\n    -- Is_Object_Reference --\n    -------------------------\n \n    function Is_Object_Reference (N : Node_Id) return Boolean is\n-\n       function Is_Internally_Generated_Renaming (N : Node_Id) return Boolean;\n       --  Determine whether N is the name of an internally-generated renaming\n "}, {"sha": "1aa29e65958c9b86acd7f1d01e60a50673f3b8bc", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=e9ea8f9e56c95c1a36ca24b365de5c2bbb1dfe2a", "patch": "@@ -1433,6 +1433,12 @@ package Sem_Util is\n    --  parameter of the current enclosing subprogram.\n    --  Why are OUT parameters not considered here ???\n \n+   function Is_Non_Trivial_Default_Init_Cond_Procedure\n+     (Id : Entity_Id) return Boolean;\n+   --  Determine whether entity Id denotes the procedure which verifies the\n+   --  assertion expression of pragma Default_Initial_Condition and if it does,\n+   --  the encapsulated expression is non-trivial.\n+\n    function Is_Object_Reference (N : Node_Id) return Boolean;\n    --  Determines if the tree referenced by N represents an object. Both\n    --  variable and constant objects return True (compare Is_Variable)."}]}