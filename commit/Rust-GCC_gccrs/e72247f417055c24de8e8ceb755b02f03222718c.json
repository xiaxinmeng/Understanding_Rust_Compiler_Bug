{"sha": "e72247f417055c24de8e8ceb755b02f03222718c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcyMjQ3ZjQxNzA1NWMyNGRlOGU4Y2ViNzU1YjAyZjAzMjIyNzE4Yw==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-02-23T02:07:21Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-02-23T02:07:21Z"}, "message": "[multiple changes]\n\n2002-02-23  David Edelsohn  <edelsohn@gnu.org>\n\n        * config/rs6000/rs6000.md (load_toc_aix_{si,di}): Use\n        gpc_reg_operand constraint.\n\n2002-02-23  Alan Modra  <amodra@bigpond.net.au>\n\n        * config/rs6000/rs6000.c (num_insns_constant): Fix formatting.\n        Simplify comparison of `low'.\n        (add_operand): Fix formatting.\n        (non_add_cint_operand): Use CONST_OK_FOR_LETTER_P.\n        (rs6000_stack_info): Remove redundant test setting push_p.\n        (output_toc): Fix formatting.\n        * config/rs6000/rs6000.md (boolsi3, boolcsi3 splitters): Use\n        cc_reg_not_cr0_operand constraint.\n        (booldi3, boolcdi3 splitters): Same.\n\nFrom-SVN: r49983", "tree": {"sha": "7eef9dddc59e81b19c96b68790976e3ecc85b3bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eef9dddc59e81b19c96b68790976e3ecc85b3bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e72247f417055c24de8e8ceb755b02f03222718c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e72247f417055c24de8e8ceb755b02f03222718c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e72247f417055c24de8e8ceb755b02f03222718c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e72247f417055c24de8e8ceb755b02f03222718c/comments", "author": null, "committer": null, "parents": [{"sha": "a5c305316d63340f74915b65a580ffc030f2a221", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5c305316d63340f74915b65a580ffc030f2a221", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5c305316d63340f74915b65a580ffc030f2a221"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "218f8116e83eb326d33ff91a604b60c279341c14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72247f417055c24de8e8ceb755b02f03222718c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72247f417055c24de8e8ceb755b02f03222718c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e72247f417055c24de8e8ceb755b02f03222718c", "patch": "@@ -1,3 +1,20 @@\n+2002-02-23  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (load_toc_aix_{si,di}): Use\n+\tgpc_reg_operand constraint.\n+\n+2002-02-23  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/rs6000.c (num_insns_constant): Fix formatting.\n+\tSimplify comparison of `low'.\n+\t(add_operand): Fix formatting.\n+\t(non_add_cint_operand): Use CONST_OK_FOR_LETTER_P.\n+\t(rs6000_stack_info): Remove redundant test setting push_p.\n+\t(output_toc): Fix formatting.\n+\t* config/rs6000/rs6000.md (boolsi3, boolcsi3 splitters): Use\n+\tcc_reg_not_cr0_operand constraint.\n+\t(booldi3, boolcdi3 splitters): Same.\n+\n 2002-02-23  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/altivec.h: Add extra level of parentheses on casts."}, {"sha": "863126ef72f46b0b293c7961f66eb24df1f9257e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72247f417055c24de8e8ceb755b02f03222718c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72247f417055c24de8e8ceb755b02f03222718c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e72247f417055c24de8e8ceb755b02f03222718c", "patch": "@@ -1080,7 +1080,7 @@ num_insns_constant (op, mode)\n \n       REAL_VALUE_FROM_CONST_DOUBLE (rv, op);\n       REAL_VALUE_TO_TARGET_SINGLE (rv, l);\n-      return num_insns_constant_wide ((HOST_WIDE_INT)l);\n+      return num_insns_constant_wide ((HOST_WIDE_INT) l);\n     }\n \n   else if (GET_CODE (op) == CONST_DOUBLE)\n@@ -1110,10 +1110,10 @@ num_insns_constant (op, mode)\n \n       else\n \t{\n-\t  if (high == 0 && (low & 0x80000000) == 0)\n+\t  if (high == 0 && low >= 0)\n \t    return num_insns_constant_wide (low);\n \n-\t  else if (high == -1 && (low & 0x80000000) != 0)\n+\t  else if (high == -1 && low < 0)\n \t    return num_insns_constant_wide (low);\n \n \t  else if (mask64_operand (op, mode))\n@@ -1312,8 +1312,8 @@ add_operand (op, mode)\n     enum machine_mode mode;\n {\n   if (GET_CODE (op) == CONST_INT)\n-    return (CONST_OK_FOR_LETTER_P (INTVAL(op), 'I')\n-\t    || CONST_OK_FOR_LETTER_P (INTVAL(op), 'L'));\n+    return (CONST_OK_FOR_LETTER_P (INTVAL (op), 'I')\n+\t    || CONST_OK_FOR_LETTER_P (INTVAL (op), 'L'));\n \n   return gpc_reg_operand (op, mode);\n }\n@@ -1326,8 +1326,8 @@ non_add_cint_operand (op, mode)\n      enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == CONST_INT\n-\t  && (unsigned HOST_WIDE_INT) (INTVAL (op) + 0x8000) >= 0x10000\n-\t  && ! CONST_OK_FOR_LETTER_P (INTVAL (op), 'L'));\n+\t  && !CONST_OK_FOR_LETTER_P (INTVAL (op), 'I')\n+\t  && !CONST_OK_FOR_LETTER_P (INTVAL (op), 'L'));\n }\n \n /* Return 1 if the operand is a non-special register or a constant that\n@@ -7878,8 +7878,7 @@ rs6000_stack_info ()\n     info_ptr->push_p = 1;\n \n   else if (abi == ABI_V4)\n-    info_ptr->push_p = (total_raw_size > info_ptr->fixed_size\n-\t\t\t|| info_ptr->calls_p);\n+    info_ptr->push_p = total_raw_size > info_ptr->fixed_size;\n \n   else\n     info_ptr->push_p = (frame_pointer_needed\n@@ -10210,7 +10209,7 @@ output_toc (file, x, labelno, mode)\n \t  if (TARGET_MINIMAL_TOC)\n \t    fputs (DOUBLE_INT_ASM_OP, file);\n \t  else\n-\t    fprintf (file, \"\\t.tc ID_%lx_%lx[TC],\", (long)high, (long)low);\n+\t    fprintf (file, \"\\t.tc ID_%lx_%lx[TC],\", (long) high, (long) low);\n \t  fprintf (file, \"0x%lx%08lx\\n\", (long) high, (long) low);\n \t  return;\n \t}\n@@ -10222,7 +10221,7 @@ output_toc (file, x, labelno, mode)\n \t\tfputs (\"\\t.long \", file);\n \t      else\n \t\tfprintf (file, \"\\t.tc ID_%lx_%lx[TC],\",\n-\t\t\t (long)high, (long)low);\n+\t\t\t (long) high, (long) low);\n \t      fprintf (file, \"0x%lx,0x%lx\\n\", (long) high, (long) low);\n \t    }\n \t  else"}, {"sha": "c83a4dbf683bb23905a86a011baf899789fb2a29", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e72247f417055c24de8e8ceb755b02f03222718c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e72247f417055c24de8e8ceb755b02f03222718c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e72247f417055c24de8e8ceb755b02f03222718c", "patch": "@@ -2982,7 +2982,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC (match_operator:SI 4 \"boolean_operator\"\n \t [(match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t  (match_operand:SI 2 \"gpc_reg_operand\" \"\")])\n@@ -3070,7 +3070,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC (match_operator:SI 4 \"boolean_operator\"\n \t [(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n \t  (match_operand:SI 2 \"gpc_reg_operand\" \"\")])\n@@ -3136,7 +3136,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC (match_operator:SI 4 \"boolean_operator\"\n \t [(not:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n \t  (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"\"))])\n@@ -7295,7 +7295,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC (match_operator:DI 4 \"boolean_operator\"\n \t [(match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t  (match_operand:DI 2 \"gpc_reg_operand\" \"\")])\n@@ -7395,7 +7395,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC (match_operator:DI 4 \"boolean_operator\"\n \t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))\n \t  (match_operand:DI 2 \"gpc_reg_operand\" \"\")])\n@@ -7461,7 +7461,7 @@\n    (set_attr \"length\" \"4,8\")])\n \n (define_split\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"\")\n+  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n \t(compare:CC (match_operator:DI 4 \"boolean_operator\"\n \t [(not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\"))\n \t  (not:DI (match_operand:DI 2 \"gpc_reg_operand\" \"\"))])\n@@ -9544,7 +9544,7 @@\n ;; Code to initialize the TOC register...\n \n (define_insn \"load_toc_aix_si\"\n-  [(parallel [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+  [(parallel [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t\t   (unspec:SI [(const_int 0)] 7))\n \t      (use (reg:SI 2))])]\n   \"DEFAULT_ABI == ABI_AIX && TARGET_32BIT\"\n@@ -9559,7 +9559,7 @@\n   [(set_attr \"type\" \"load\")])\n \n (define_insn \"load_toc_aix_di\"\n-  [(parallel [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(parallel [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t\t   (unspec:DI [(const_int 0)] 7))\n \t      (use (reg:DI 2))])]\n   \"DEFAULT_ABI == ABI_AIX && TARGET_64BIT\""}]}