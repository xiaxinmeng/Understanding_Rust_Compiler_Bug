{"sha": "2168bfb81448ae1bfa4351760a23d4ec051c2a00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE2OGJmYjgxNDQ4YWUxYmZhNDM1MTc2MGEyM2Q0ZWMwNTFjMmEwMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-06-24T21:32:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-06-26T04:13:46Z"}, "message": "c++: constexpr aggr init of empty class [PR101040]\n\nThis is basically the aggregate initializer version of PR97566; as in that\nbug, we are trying to initialize empty field 'obj' in 'single' when there's\nno CONSTRUCTOR entry for the 'single' base class subobject of 'derived'.  As\nwith that bug, the fix is to stop trying to add entries for empty fields,\nthis time in cxx_eval_bare_aggregate.\n\nThe change to the other function isn't necessary for this version of\nthe patch, but seems worthwhile for robustness anyway.\n\n\tPR c++/101040\n\tPR c++/97566\n\ngcc/cp/ChangeLog:\n\n\t* class.c (is_empty_field): Handle null argument.\n\t* constexpr.c (cxx_eval_bare_aggregate): Discard initializer\n\tfor empty field.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/no_unique_address13.C: New test.", "tree": {"sha": "d6d80b172fe5d8f0bf40c1332b30470439d2f28b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6d80b172fe5d8f0bf40c1332b30470439d2f28b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2168bfb81448ae1bfa4351760a23d4ec051c2a00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2168bfb81448ae1bfa4351760a23d4ec051c2a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2168bfb81448ae1bfa4351760a23d4ec051c2a00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2168bfb81448ae1bfa4351760a23d4ec051c2a00/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2afe882858699bb6c13f8502f4f6e862a126d4ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2afe882858699bb6c13f8502f4f6e862a126d4ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2afe882858699bb6c13f8502f4f6e862a126d4ef"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "33093e1e1ef7e8fc60432d6a0814e85306ca1b20", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168bfb81448ae1bfa4351760a23d4ec051c2a00/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168bfb81448ae1bfa4351760a23d4ec051c2a00/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=2168bfb81448ae1bfa4351760a23d4ec051c2a00", "patch": "@@ -4220,7 +4220,7 @@ field_poverlapping_p (tree decl)\n bool\n is_empty_field (tree decl)\n {\n-  if (TREE_CODE (decl) != FIELD_DECL)\n+  if (!decl || TREE_CODE (decl) != FIELD_DECL)\n     return false;\n \n   bool r = (is_empty_class (TREE_TYPE (decl))"}, {"sha": "4cd9db33a1af4d7b943bc41adfc1ed68f291fd1c", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168bfb81448ae1bfa4351760a23d4ec051c2a00/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168bfb81448ae1bfa4351760a23d4ec051c2a00/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=2168bfb81448ae1bfa4351760a23d4ec051c2a00", "patch": "@@ -4449,7 +4449,12 @@ cxx_eval_bare_aggregate (const constexpr_ctx *ctx, tree t,\n   FOR_EACH_CONSTRUCTOR_ELT (v, i, index, value)\n     {\n       tree orig_value = value;\n-      init_subob_ctx (ctx, new_ctx, index, value);\n+      /* Like in cxx_eval_store_expression, omit entries for empty fields.  */\n+      bool no_slot = TREE_CODE (type) == RECORD_TYPE && is_empty_field (index);\n+      if (no_slot)\n+\tnew_ctx = *ctx;\n+      else\n+\tinit_subob_ctx (ctx, new_ctx, index, value);\n       int pos_hint = -1;\n       if (new_ctx.ctor != ctx->ctor)\n \t{\n@@ -4495,6 +4500,8 @@ cxx_eval_bare_aggregate (const constexpr_ctx *ctx, tree t,\n \t  gcc_assert (is_empty_class (TREE_TYPE (TREE_TYPE (index))));\n \t  changed = true;\n \t}\n+      else if (no_slot)\n+\tchanged = true;\n       else\n \t{\n \t  if (TREE_CODE (type) == UNION_TYPE"}, {"sha": "66b83d681375f5fa99f7b3d38630fd2626610824", "filename": "gcc/testsuite/g++.dg/cpp2a/no_unique_address13.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168bfb81448ae1bfa4351760a23d4ec051c2a00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168bfb81448ae1bfa4351760a23d4ec051c2a00/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address13.C?ref=2168bfb81448ae1bfa4351760a23d4ec051c2a00", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/101040\n+// { dg-do compile { target c++11 } }\n+\n+// This class has to be empty.\n+struct empty\n+{};\n+\n+// This class has to be empty.\n+struct single\n+{\n+    // This member has to be no_unique_address.\n+    [[no_unique_address]] empty obj;\n+};\n+\n+// This class has to be empty and derived from single.\n+struct derived : single\n+{\n+    // This constructor has to be constexpr and take a forwarding reference.\n+    template <typename Arg>\n+    constexpr derived(Arg&& arg) : single{arg}\n+    {}\n+};\n+\n+auto obj = derived{empty{}};"}]}