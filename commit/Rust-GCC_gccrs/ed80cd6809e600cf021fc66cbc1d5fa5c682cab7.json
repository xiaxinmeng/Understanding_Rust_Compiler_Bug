{"sha": "ed80cd6809e600cf021fc66cbc1d5fa5c682cab7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ4MGNkNjgwOWU2MDBjZjAyMWZjNjZjYmMxZDVmYTVjNjgyY2FiNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-10-01T06:01:47Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-10-01T06:01:47Z"}, "message": "dwarf2out.c (expand_builtin_init_dwarf_reg_sizes): Honor DWARF_ALT_FRAME_RETURN_COLUMN.\n\n        * dwarf2out.c (expand_builtin_init_dwarf_reg_sizes): Honor\n        DWARF_ALT_FRAME_RETURN_COLUMN.\n        * unwind-dw2.c (dwarf_reg_size_table): Expand by one.\n        (_Unwind_GetGR, _Unwind_SetGR): Validate lookup column.\n        (uw_frame_state_for): Return end-of-stack for null return address.\n        * doc/tm.texi (DWARF_ALT_FRAME_RETURN_COLUMN): Add.\n\n        * config/alpha/alpha.c (alpha_sa_mask): Add r31 for eh_return.\n        (alpha_expand_prologue): Store a zero for it.\n        (alpha_expand_epilogue): Don't reload it.\n        * config/alpha/alpha.h (DWARF_ALT_FRAME_RETURN_COLUMN): New.\n        * config/alpha/linux.h (MD_FALLBACK_FRAME_STATE_FOR): Use column 64\n        for the sigframe return address.\n\nFrom-SVN: r71967", "tree": {"sha": "20abd603a5bcb42f4ffe7929126e0ebc032fc438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20abd603a5bcb42f4ffe7929126e0ebc032fc438"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7/comments", "author": null, "committer": null, "parents": [{"sha": "6ab7003d15f074b44f4a521a7ac46b9759492f86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab7003d15f074b44f4a521a7ac46b9759492f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ab7003d15f074b44f4a521a7ac46b9759492f86"}], "stats": {"total": 104, "additions": 88, "deletions": 16}, "files": [{"sha": "e2b09d7819f7c650927ca1d0a92afb0655126e14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed80cd6809e600cf021fc66cbc1d5fa5c682cab7", "patch": "@@ -1,3 +1,19 @@\n+2003-09-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarf2out.c (expand_builtin_init_dwarf_reg_sizes): Honor\n+\tDWARF_ALT_FRAME_RETURN_COLUMN.\n+\t* unwind-dw2.c (dwarf_reg_size_table): Expand by one.\n+\t(_Unwind_GetGR, _Unwind_SetGR): Validate lookup column.\n+\t(uw_frame_state_for): Return end-of-stack for null return address.\n+\t* doc/tm.texi (DWARF_ALT_FRAME_RETURN_COLUMN): Add.\n+\n+\t* config/alpha/alpha.c (alpha_sa_mask): Add r31 for eh_return.\n+\t(alpha_expand_prologue): Store a zero for it.\n+\t(alpha_expand_epilogue): Don't reload it.\n+\t* config/alpha/alpha.h (DWARF_ALT_FRAME_RETURN_COLUMN): New.\n+\t* config/alpha/linux.h (MD_FALLBACK_FRAME_STATE_FOR): Use column 64\n+\tfor the sigframe return address.\n+\n 2003-09-30  Kelley Cook  <kelleycoook@wideopenwest.com>\n \n \t* sdbout.c: Convert to ISO C90 prototypes."}, {"sha": "ad6b61977e295cb165c140d119e791f42d64ea33", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 39, "deletions": 11, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=ed80cd6809e600cf021fc66cbc1d5fa5c682cab7", "patch": "@@ -6700,13 +6700,20 @@ alpha_sa_mask (unsigned long *imaskP, unsigned long *fmaskP)\n \n   /* We need to restore these for the handler.  */\n   if (current_function_calls_eh_return)\n-    for (i = 0; ; ++i)\n-      {\n-\tunsigned regno = EH_RETURN_DATA_REGNO (i);\n-\tif (regno == INVALID_REGNUM)\n-\t  break;\n-\timask |= 1UL << regno;\n-      }\n+    {\n+      for (i = 0; ; ++i)\n+\t{\n+\t  unsigned regno = EH_RETURN_DATA_REGNO (i);\n+\t  if (regno == INVALID_REGNUM)\n+\t    break;\n+\t  imask |= 1UL << regno;\n+\t}\n+\n+      /* Glibc likes to use $31 as an unwind stopper for crt0.  To\n+\t avoid hackery in unwind-dw2.c, we need to actively store a\n+\t zero in the prologue of _Unwind_RaiseException et al.  */\n+      imask |= 1UL << 31;\n+    }\n      \n   /* If any register spilled, then spill the return address also.  */\n   /* ??? This is required by the Digital stack unwind specification\n@@ -7168,7 +7175,7 @@ alpha_expand_prologue (void)\n \t}\n \n       /* Now save any other registers required to be saved.  */\n-      for (i = 0; i < 32; i++)\n+      for (i = 0; i < 31; i++)\n \tif (imask & (1UL << i))\n \t  {\n \t    mem = gen_rtx_MEM (DImode, plus_constant (sa_reg, reg_offset));\n@@ -7177,7 +7184,25 @@ alpha_expand_prologue (void)\n \t    reg_offset += 8;\n \t  }\n \n-      for (i = 0; i < 32; i++)\n+      /* Store a zero if requested for unwinding.  */\n+      if (imask & (1UL << 31))\n+\t{\n+\t  rtx insn, t;\n+\n+\t  mem = gen_rtx_MEM (DImode, plus_constant (sa_reg, reg_offset));\n+\t  set_mem_alias_set (mem, alpha_sr_alias_set);\n+\t  insn = emit_move_insn (mem, const0_rtx);\n+\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t  t = gen_rtx_REG (Pmode, 31);\n+\t  t = gen_rtx_SET (VOIDmode, mem, t);\n+\t  t = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR, t, REG_NOTES (insn));\n+\t  REG_NOTES (insn) = t;\n+\n+\t  reg_offset += 8;\n+\t}\n+\n+      for (i = 0; i < 31; i++)\n \tif (fmask & (1UL << i))\n \t  {\n \t    mem = gen_rtx_MEM (DFmode, plus_constant (sa_reg, reg_offset));\n@@ -7588,7 +7613,7 @@ alpha_expand_epilogue (void)\n       reg_offset += 8;\n       imask &= ~(1UL << REG_RA);\n \n-      for (i = 0; i < 32; ++i)\n+      for (i = 0; i < 31; ++i)\n \tif (imask & (1UL << i))\n \t  {\n \t    if (i == HARD_FRAME_POINTER_REGNUM && fp_is_frame_pointer)\n@@ -7602,7 +7627,10 @@ alpha_expand_epilogue (void)\n \t    reg_offset += 8;\n \t  }\n \n-      for (i = 0; i < 32; ++i)\n+      if (imask & (1UL << 31))\n+\treg_offset += 8;\n+\n+      for (i = 0; i < 31; ++i)\n \tif (fmask & (1UL << i))\n \t  {\n \t    mem = gen_rtx_MEM (DFmode, plus_constant(sa_reg, reg_offset));"}, {"sha": "5faadfbdbf04ae1f89bfc5bbd33b9e36d2769dac", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=ed80cd6809e600cf021fc66cbc1d5fa5c682cab7", "patch": "@@ -1208,6 +1208,7 @@ do {\t\t\t\t\t\t\\\n /* Before the prologue, RA lives in $26.  */\n #define INCOMING_RETURN_ADDR_RTX  gen_rtx_REG (Pmode, 26)\n #define DWARF_FRAME_RETURN_COLUMN DWARF_FRAME_REGNUM (26)\n+#define DWARF_ALT_FRAME_RETURN_COLUMN DWARF_FRAME_REGNUM (64)\n \n /* Describe how we implement __builtin_eh_return.  */\n #define EH_RETURN_DATA_REGNO(N)\t((N) < 4 ? (N) + 16 : INVALID_REGNUM)"}, {"sha": "2c9cc8ea6a1a51c4fec01c06b03f453ca99b9234", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=ed80cd6809e600cf021fc66cbc1d5fa5c682cab7", "patch": "@@ -85,6 +85,8 @@ Boston, MA 02111-1307, USA.  */\n     if (pc_[0] != 0x47fe0410\t\t/* mov $30,$16 */\t\t\\\n         || pc_[2] != 0x00000083\t\t/* callsys */)\t\t\t\\\n       break;\t\t\t\t\t\t\t\t\\\n+    if ((CONTEXT)->cfa == 0)\t\t\t\t\t\t\\\n+      break;\t\t\t\t\t\t\t\t\\\n     if (pc_[1] == 0x201f0067)\t\t/* lda $0,NR_sigreturn */\t\\\n       sc_ = (CONTEXT)->cfa;\t\t\t\t\t\t\\\n     else if (pc_[1] == 0x201f015f)\t/* lda $0,NR_rt_sigreturn */\t\\\n@@ -113,8 +115,8 @@ Boston, MA 02111-1307, USA.  */\n \t(FS)->regs.reg[i_+32].loc.offset\t\t\t\t\\\n \t  = (long)&sc_->sc_fpregs[i_] - new_cfa_;\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n-    (FS)->regs.reg[31].how = REG_SAVED_OFFSET;\t\t\t\t\\\n-    (FS)->regs.reg[31].loc.offset = (long)&sc_->sc_pc - new_cfa_;\t\\\n-    (FS)->retaddr_column = 31;\t\t\t\t\t\t\\\n+    (FS)->regs.reg[64].how = REG_SAVED_OFFSET;\t\t\t\t\\\n+    (FS)->regs.reg[64].loc.offset = (long)&sc_->sc_pc - new_cfa_;\t\\\n+    (FS)->retaddr_column = 64;\t\t\t\t\t\t\\\n     goto SUCCESS;\t\t\t\t\t\t\t\\\n   } while (0)"}, {"sha": "1e9a45c75869aa8146e0b105e01bcd5c38a1be26", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=ed80cd6809e600cf021fc66cbc1d5fa5c682cab7", "patch": "@@ -2904,6 +2904,14 @@ If this RTL is a @code{REG}, you should also define\n @code{DWARF_FRAME_RETURN_COLUMN} to @code{DWARF_FRAME_REGNUM (REGNO)}.\n @end defmac\n \n+@defmac DWARF_ALT_FRAME_RETURN_COLUMN\n+A C expression whose value is an integer giving a DWARF 2 column \n+number that may be used as an alternate return column.  This should\n+be defined only if @code{DWARF_FRAME_RETURN_COLUMN} is set to a \n+general register, but an alternate column needs to be used for\n+signal frames.\n+@end defmac\n+\n @defmac INCOMING_FRAME_SP_OFFSET\n A C expression whose value is an integer giving the offset, in bytes,\n from the value of the stack pointer register to the top of the stack"}, {"sha": "9a23c76b79eef71e7ab6b3b2fb3ee79028e2c348", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ed80cd6809e600cf021fc66cbc1d5fa5c682cab7", "patch": "@@ -482,10 +482,20 @@ expand_builtin_init_dwarf_reg_sizes (tree address)\n \n \temit_move_insn (adjust_address (mem, mode, offset), GEN_INT (size));\n       }\n+\n+#ifdef DWARF_ALT_FRAME_RETURN_COLUMN\n+  if (! wrote_return_column)\n+    abort ();\n+  i = DWARF_ALT_FRAME_RETURN_COLUMN;\n+  wrote_return_column = false;\n+#else\n+  i = DWARF_FRAME_RETURN_COLUMN;\n+#endif\n+\n   if (! wrote_return_column)\n     {\n       enum machine_mode save_mode = Pmode;\n-      HOST_WIDE_INT offset = DWARF_FRAME_RETURN_COLUMN * GET_MODE_SIZE (mode);\n+      HOST_WIDE_INT offset = i * GET_MODE_SIZE (mode);\n       HOST_WIDE_INT size = GET_MODE_SIZE (save_mode);\n       emit_move_insn (adjust_address (mem, mode, offset), GEN_INT (size));\n     }"}, {"sha": "09396c807546b0a1e642e4a1cb369eaf19732c24", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed80cd6809e600cf021fc66cbc1d5fa5c682cab7/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=ed80cd6809e600cf021fc66cbc1d5fa5c682cab7", "patch": "@@ -82,7 +82,7 @@ struct _Unwind_Context\n };\n \n /* Byte size of every register managed by these routines.  */\n-static unsigned char dwarf_reg_size_table[DWARF_FRAME_REGISTERS];\n+static unsigned char dwarf_reg_size_table[DWARF_FRAME_REGISTERS+1];\n \n \f\n /* The result of interpreting the frame unwind info for a frame.\n@@ -186,6 +186,8 @@ _Unwind_GetGR (struct _Unwind_Context *context, int index)\n   void *ptr;\n \n   index = DWARF_REG_TO_UNWIND_COLUMN (index);\n+  if (index >= sizeof(dwarf_reg_size_table))\n+    abort ();\n   size = dwarf_reg_size_table[index];\n   ptr = context->reg[index];\n \n@@ -222,6 +224,8 @@ _Unwind_SetGR (struct _Unwind_Context *context, int index, _Unwind_Word val)\n   void *ptr;\n \n   index = DWARF_REG_TO_UNWIND_COLUMN (index);\n+  if (index >= sizeof(dwarf_reg_size_table))\n+    abort ();\n   size = dwarf_reg_size_table[index];\n   ptr = context->reg[index];\n \n@@ -1002,6 +1006,9 @@ uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n   context->args_size = 0;\n   context->lsda = 0;\n \n+  if (context->ra == 0)\n+    return _URC_END_OF_STACK;\n+\n   fde = _Unwind_Find_FDE (context->ra - 1, &context->bases);\n   if (fde == NULL)\n     {"}]}