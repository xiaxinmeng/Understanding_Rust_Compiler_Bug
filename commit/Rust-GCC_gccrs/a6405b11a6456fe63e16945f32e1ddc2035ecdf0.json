{"sha": "a6405b11a6456fe63e16945f32e1ddc2035ecdf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY0MDViMTFhNjQ1NmZlNjNlMTY5NDVmMzJlMWRkYzIwMzVlY2RmMA==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2018-09-03T16:51:24Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2018-09-03T16:51:24Z"}, "message": "introduce gcc_stablesort\n\n\t* sort.cc (struct sort_ctx): New field 'nlim'.  Use it...\n\t(mergesort): ... here as maximum count for using netsort.\n\t(gcc_qsort): Set nlim to 3 if stable sort is requested.\n\t(gcc_stablesort): New.\n\t* system.h (gcc_stablesort): Declare.\n\nFrom-SVN: r264066", "tree": {"sha": "5757fd55f33239602823d6e5a3826392f65fb9c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5757fd55f33239602823d6e5a3826392f65fb9c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6405b11a6456fe63e16945f32e1ddc2035ecdf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6405b11a6456fe63e16945f32e1ddc2035ecdf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6405b11a6456fe63e16945f32e1ddc2035ecdf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6405b11a6456fe63e16945f32e1ddc2035ecdf0/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71acd8b9d9d8c9437bfffa51f1b56f93cfbc20e9"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "99c5ca75fa18b84fb9f66536a5aadb63cef9a1ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6405b11a6456fe63e16945f32e1ddc2035ecdf0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6405b11a6456fe63e16945f32e1ddc2035ecdf0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6405b11a6456fe63e16945f32e1ddc2035ecdf0", "patch": "@@ -1,3 +1,11 @@\n+2018-09-03  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* sort.cc (struct sort_ctx): New field 'nlim'.  Use it...\n+\t(mergesort): ... here as maximum count for using netsort.\n+\t(gcc_qsort): Set nlim to 3 if stable sort is requested.\n+\t(gcc_stablesort): New.\n+\t* system.h (gcc_stablesort): Declare.\n+\n 2018-09-03  Alexander Monakov  <amonakov@ispras.ru>\n \n \t* sort.cc (gcc_qsort) [CHECKING_P]: Call qsort_chk."}, {"sha": "b3be1eac72bfb07b11b3c8fffeb3cfc645eea445", "filename": "gcc/sort.cc", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6405b11a6456fe63e16945f32e1ddc2035ecdf0/gcc%2Fsort.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6405b11a6456fe63e16945f32e1ddc2035ecdf0/gcc%2Fsort.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsort.cc?ref=a6405b11a6456fe63e16945f32e1ddc2035ecdf0", "patch": "@@ -55,6 +55,7 @@ struct sort_ctx\n   char   *out; // output buffer\n   size_t n;    // number of elements\n   size_t size; // element size\n+  size_t nlim; // limit for network sort\n };\n \n /* Helper for netsort. Permute, possibly in-place, 2 or 3 elements,\n@@ -178,7 +179,7 @@ do {                                  \\\n static void\n mergesort (char *in, sort_ctx *c, size_t n, char *out, char *tmp)\n {\n-  if (likely (n <= 5))\n+  if (likely (n <= c->nlim))\n     {\n       c->out = out;\n       c->n = n;\n@@ -221,8 +222,12 @@ gcc_qsort (void *vbase, size_t n, size_t size, cmp_fn *cmp)\n {\n   if (n < 2)\n     return;\n+  size_t nlim = 5;\n+  bool stable = (ssize_t) size < 0;\n+  if (stable)\n+    nlim = 3, size = ~size;\n   char *base = (char *)vbase;\n-  sort_ctx c = {cmp, base, n, size};\n+  sort_ctx c = {cmp, base, n, size, nlim};\n   long long scratch[32];\n   size_t bufsz = (n / 2) * size;\n   void *buf = bufsz <= sizeof scratch ? scratch : xmalloc (bufsz);\n@@ -233,3 +238,9 @@ gcc_qsort (void *vbase, size_t n, size_t size, cmp_fn *cmp)\n   qsort_chk (vbase, n, size, cmp);\n #endif\n }\n+\n+void\n+gcc_stablesort (void *vbase, size_t n, size_t size, cmp_fn *cmp)\n+{\n+  gcc_qsort (vbase, n, ~size, cmp);\n+}"}, {"sha": "100feb567c9854508c2d1d15b8164ba33964681b", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6405b11a6456fe63e16945f32e1ddc2035ecdf0/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6405b11a6456fe63e16945f32e1ddc2035ecdf0/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=a6405b11a6456fe63e16945f32e1ddc2035ecdf0", "patch": "@@ -1202,6 +1202,8 @@ helper_const_non_const_cast (const char *p)\n    corresponding to vec::qsort (cmp): they use C qsort internally anyway.  */\n void qsort_chk (void *, size_t, size_t, int (*)(const void *, const void *));\n void gcc_qsort (void *, size_t, size_t, int (*)(const void *, const void *));\n+void gcc_stablesort (void *, size_t, size_t,\n+\t\t     int (*)(const void *, const void *));\n #define PP_5th(a1, a2, a3, a4, a5, ...) a5\n #undef qsort\n #define qsort(...) PP_5th (__VA_ARGS__, gcc_qsort, 3, 2, qsort, 0) (__VA_ARGS__)"}]}