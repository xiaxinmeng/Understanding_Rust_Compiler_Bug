{"sha": "b658669de074fae705630470d21fa3d95fbc731f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY1ODY2OWRlMDc0ZmFlNzA1NjMwNDcwZDIxZmEzZDk1ZmJjNzMxZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-09-27T15:14:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-09-27T15:14:24Z"}, "message": "Define 3-argument overloads of std::hypot for C++17 (P0030R1)\n\n\t* doc/xml/manual/status_cxx2017.xml: Update status.\n\t* include/c_global/cmath (hypot): Add three-dimensional overloads.\n\t* testsuite/26_numerics/headers/cmath/hypot.cc: New.\n\nFrom-SVN: r240547", "tree": {"sha": "745f18511e18a17827acf72d43f7cd40ee459159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/745f18511e18a17827acf72d43f7cd40ee459159"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b658669de074fae705630470d21fa3d95fbc731f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b658669de074fae705630470d21fa3d95fbc731f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b658669de074fae705630470d21fa3d95fbc731f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b658669de074fae705630470d21fa3d95fbc731f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cb14750e7723c50011c6c9c73dca6e8608486e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb14750e7723c50011c6c9c73dca6e8608486e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cb14750e7723c50011c6c9c73dca6e8608486e5"}], "stats": {"total": 187, "additions": 185, "deletions": 2}, "files": [{"sha": "417deb815d00b28bf0cdfad865c7627f72ec0c66", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b658669de074fae705630470d21fa3d95fbc731f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b658669de074fae705630470d21fa3d95fbc731f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b658669de074fae705630470d21fa3d95fbc731f", "patch": "@@ -1,3 +1,9 @@\n+2016-09-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/status_cxx2017.xml: Update status.\n+\t* include/c_global/cmath (hypot): Add three-dimensional overloads.\n+\t* testsuite/26_numerics/headers/cmath/hypot.cc: New.\n+\n 2016-09-26  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR libstdc++/77727"}, {"sha": "4ead6b996c41e5f681f4fe03a07790ac0d0ffb04", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2017.xml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b658669de074fae705630470d21fa3d95fbc731f/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b658669de074fae705630470d21fa3d95fbc731f/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml?ref=b658669de074fae705630470d21fa3d95fbc731f", "patch": "@@ -633,14 +633,13 @@ Feature-testing recommendations for C++</link>.\n     </row>\n \n     <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n       <entry> Proposal to Introduce a 3-Argument Overload to <code>std::hypot</code> </entry>\n       <entry>\n \t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0030r1.pdf\">\n \tP0030R1\n \t</link>\n       </entry>\n-      <entry align=\"center\"> No </entry>\n+      <entry align=\"center\"> 7 </entry>\n       <entry><code> __cpp_lib_hypot >= 201603 </code></entry>\n     </row>\n "}, {"sha": "fffa0e7743541e085232698b79e9e61642b7acd2", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b658669de074fae705630470d21fa3d95fbc731f/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b658669de074fae705630470d21fa3d95fbc731f/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=b658669de074fae705630470d21fa3d95fbc731f", "patch": "@@ -1455,6 +1455,46 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return hypot(__type(__x), __type(__y));\n     }\n \n+#if __cplusplus > 201402L\n+#define __cpp_lib_hypot 201603\n+  // [c.math.hypot3], three-dimensional hypotenuse\n+\n+  template<typename _Tp>\n+    inline _Tp\n+    __hypot3(_Tp __x, _Tp __y, _Tp __z)\n+    {\n+      __x = std::abs(__x);\n+      __y = std::abs(__y);\n+      __z = std::abs(__z);\n+      if (_Tp __a = __x < __y ? __y < __z ? __z : __y : __x < __z ? __z : __x)\n+\treturn __a * std::sqrt((__x / __a) * (__x / __a)\n+\t\t\t       + (__y / __a) * (__y / __a)\n+\t\t\t       + (__z / __a) * (__z / __a));\n+      else\n+\treturn {};\n+    }\n+\n+  inline float\n+  hypot(float __x, float __y, float __z)\n+  { return std::__hypot3<float>(__x, __y, __z); }\n+\n+  inline double\n+  hypot(double __x, double __y, double __z)\n+  { return std::__hypot3<double>(__x, __y, __z); }\n+\n+  inline long double\n+  hypot(long double __x, long double __y, long double __z)\n+  { return std::__hypot3<long double>(__x, __y, __z); }\n+\n+  template<typename _Tp, typename _Up, typename _Vp>\n+    typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type\n+    hypot(_Tp __x, _Up __y, _Vp __z)\n+    {\n+      using __type = typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type;\n+      return std::__hypot3<__type>(__x, __y, __z);\n+    }\n+#endif // C++17\n+\n #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO\n   constexpr int\n   ilogb(float __x)"}, {"sha": "ec7429134caba0db28930f2f8df86a821f9ea00c", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/hypot.cc", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b658669de074fae705630470d21fa3d95fbc731f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fhypot.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b658669de074fae705630470d21fa3d95fbc731f/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fhypot.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Fhypot.cc?ref=b658669de074fae705630470d21fa3d95fbc731f", "patch": "@@ -0,0 +1,138 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++1z } }\n+\n+#include <cmath>\n+#include <type_traits>\n+#if defined(__TEST_DEBUG)\n+#include <iostream>\n+#define VERIFY(A) \\\n+if (!(A)) \\\n+  { \\\n+    std::cout << \"line \" << __LINE__ \\\n+      << \"  max_abs_frac = \" << max_abs_frac \\\n+      << \"  tolerance = \" << toler \\\n+      << std::endl; \\\n+  }\n+#else\n+#include <testsuite_hooks.h>\n+#endif\n+\n+using std::is_same_v;\n+static_assert(is_same_v<double, decltype(std::hypot(0.0, 0.0, 0.0))>);\n+static_assert(is_same_v<double, decltype(std::hypot(0.0f, 0.0, 0.0))>);\n+static_assert(is_same_v<double, decltype(std::hypot(0.0, 0.0f, 0.0))>);\n+static_assert(is_same_v<double, decltype(std::hypot(0.0, 0.0, 0.0f))>);\n+static_assert(is_same_v<double, decltype(std::hypot(0.0f, 0.0f, 0.0))>);\n+static_assert(is_same_v<double, decltype(std::hypot(0.0f, 0.0, 0))>);\n+static_assert(is_same_v<long double, decltype(std::hypot(0.0f, 0.0, 0.0l))>);\n+static_assert(is_same_v<long double, decltype(std::hypot(0, 0.0, 0.0l))>);\n+\n+template<typename T> struct testcase_hypot { T x, y, z, f0; };\n+\n+template<typename Tp, unsigned int Num>\n+  void\n+  test(const testcase_hypot<Tp> (&data)[Num], Tp toler)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    const Tp eps = std::numeric_limits<Tp>::epsilon();\n+    Tp max_abs_diff = -Tp(1);\n+    Tp max_abs_frac = -Tp(1);\n+    unsigned int num_datum = Num;\n+    for (unsigned int i = 0; i < num_datum; ++i)\n+      {\n+\tconst Tp f = std::hypot(data[i].x, data[i].y, data[i].z);\n+\tconst Tp f0 = data[i].f0;\n+\tconst Tp diff = f - f0;\n+\tif (std::abs(diff) > max_abs_diff)\n+\t  max_abs_diff = std::abs(diff);\n+\tif (std::abs(f0) > Tp(10) * eps && std::abs(f) > Tp(10) * eps)\n+\t  {\n+\t    const Tp frac = diff / f0;\n+\t    if (std::abs(frac) > max_abs_frac)\n+\t      max_abs_frac = std::abs(frac);\n+\t  }\n+      }\n+    VERIFY(max_abs_frac < toler);\n+  }\n+\n+const testcase_hypot<double> data1[] = {\n+  { 0.0, 0.0, 0.0, 0.0 },\n+  { 0.0, 1.0, 1.0, std::sqrt(2.0) },\n+  { 1.0, 1.0, 1.0, std::sqrt(3.0) },\n+  { 1.0, 2.0, 2.0, 3.0 },\n+  { 2.0, 3.0, 6.0, 7.0 },\n+  { 1.0, 4.0, 8.0, 9.0 },\n+  { 4.0, 4.0, 7.0, 9.0 },\n+  { 12.0, 16.0, 21.0, 29.0 },\n+  { 1e8, 1., 1e-8, 1e8 },\n+  { 1., 1e8, 1e-8, 1e8 },\n+  { 1e-8, 1., 1e8, 1e8 },\n+  { 1e-2, 1e-4, 1e-4, 0.01000099995 },\n+  { 214748364., 214748364., 214748364., 371955077.2902952 }\n+};\n+const double toler1 = 1e-12;\n+\n+const testcase_hypot<float> data2[] = {\n+  { 0.0f, 0.0f, 0.0f, 0.0f },\n+  { 0.0f, 1.0f, 1.0f, std::sqrt(2.0f) },\n+  { 1.0f, 1.0f, 1.0f, std::sqrt(3.0f) },\n+  { 1.0f, 2.0f, 2.0f, 3.0f },\n+  { 2.0f, 3.0f, 6.0f, 7.0f },\n+  { 1.0f, 4.0f, 8.0f, 9.0f },\n+  { 4.0f, 4.0f, 7.0f, 9.0f },\n+  { 12.0f, 16.0f, 21.0f, 29.0f },\n+  { 1e8f, 1.f, 1e-8f, 1e8f },\n+  { 1.f, 1e8f, 1e-8f, 1e8f },\n+  { 1e-8f, 1.f, 1e8f, 1e8f },\n+  { 1e-2f, 1e-4f, 1e-4f, 0.010001f },\n+  { 214748364.f, 214748364.f, 214748364.f, 371955072.f }\n+};\n+const float toler2 = 1e-7f;\n+\n+const testcase_hypot<long double> data3[] = {\n+  { 0.0l, 0.0l, 0.0l, 0.0l },\n+  { 0.0l, 1.0l, 1.0l, std::sqrt(2.0l) },\n+  { 1.0l, 1.0l, 1.0l, std::sqrt(3.0l) },\n+  { 1.0l, 2.0l, 2.0l, 3.0l },\n+  { 2.0l, 3.0l, 6.0l, 7.0l },\n+  { 1.0l, 4.0l, 8.0l, 9.0l },\n+  { 4.0l, 4.0l, 7.0l, 9.0l },\n+  { 12.0l, 16.0l, 21.0l, 29.0l },\n+  { 1e8l, 1.l, 1e-8l, 1e8l },\n+  { 1.l, 1e8l, 1e-8l, 1e8l },\n+  { 1e-8l, 1.l, 1e8l, 1e8l },\n+  { 1e-2l, 1e-4l, 1e-4l, 0.010000999950004999375l },\n+  { 2147483647.l, 2147483647.l, 2147483647.l, 3719550785.027307813987l }\n+};\n+const long double toler3 = 1e-16l;\n+\n+void\n+test01()\n+{\n+  test(data1, toler1);\n+  test(data2, toler2);\n+  test(data3, toler3);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}