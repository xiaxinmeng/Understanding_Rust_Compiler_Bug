{"sha": "c879b92c30d088ff01eb0c3e912eb8a01f9fc6e3", "node_id": "C_kwDOANBUbNoAKGM4NzliOTJjMzBkMDg4ZmYwMWViMGMzZTkxMmViOGEwMWY5ZmM2ZTM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-14T09:47:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-14T09:47:38Z"}, "message": "c++: Reject __builtin_clear_padding on non-trivially-copyable types with one exception [PR102586]\n\nAs mentioned by Jason in the PR, non-trivially-copyable types (or non-POD\nfor purposes of layout?) types can be base classes of derived classes in\nwhich the padding in those non-trivially-copyable types can be reused for\nsome real data members or even the layout can change and data members can\nbe moved to other positions.\n__builtin_clear_padding is right now used for multiple purposes,\nin <atomic> where it isn't used yet but was planned as the main spot\nit can be used for trivially copyable types only, ditto for std::bit_cast\nwhere we also use it.  It is used for OpenMP long double atomics too but\nlong double is trivially copyable, and lastly for -ftrivial-auto-var-init=.\n\nThe following patch restricts the builtin to pointers to trivially-copyable\ntypes, with the exception when it is called directly on an address of a\nvariable, in that case already the FE can verify it is the complete object\ntype and so it is safe to clear all the paddings in it.\n\n2022-03-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/102586\ngcc/\n\t* doc/extend.texi (__builtin_clear_padding): Clearify that for C++\n\targument type should be pointer to trivially-copyable type unless it\n\tis address of a variable or parameter.\ngcc/cp/\n\t* call.cc (build_cxx_call): Diagnose __builtin_clear_padding where\n\tfirst argument's type is pointer to non-trivially-copyable type unless\n\tit is address of a variable or parameter.\ngcc/testsuite/\n\t* g++.dg/cpp2a/builtin-clear-padding1.C: New test.", "tree": {"sha": "46d4451b5c6b4cc2d64f0558b14dc39f08595762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46d4451b5c6b4cc2d64f0558b14dc39f08595762"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c879b92c30d088ff01eb0c3e912eb8a01f9fc6e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c879b92c30d088ff01eb0c3e912eb8a01f9fc6e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c879b92c30d088ff01eb0c3e912eb8a01f9fc6e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c879b92c30d088ff01eb0c3e912eb8a01f9fc6e3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a010954cc190e942994ed5d56fba503851b20b9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a010954cc190e942994ed5d56fba503851b20b9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a010954cc190e942994ed5d56fba503851b20b9a"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "23d3fc496b8222323ada1eb02794b2906b59f770", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c879b92c30d088ff01eb0c3e912eb8a01f9fc6e3/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c879b92c30d088ff01eb0c3e912eb8a01f9fc6e3/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=c879b92c30d088ff01eb0c3e912eb8a01f9fc6e3", "patch": "@@ -10409,6 +10409,27 @@ build_cxx_call (tree fn, int nargs, tree *argarray,\n       if (!check_builtin_function_arguments (EXPR_LOCATION (fn), vNULL, fndecl,\n \t\t\t\t\t     orig_fndecl, nargs, argarray))\n \treturn error_mark_node;\n+      else if (fndecl_built_in_p (fndecl, BUILT_IN_CLEAR_PADDING))\n+\t{\n+\t  tree arg0 = argarray[0];\n+\t  STRIP_NOPS (arg0);\n+\t  if (TREE_CODE (arg0) == ADDR_EXPR\n+\t      && DECL_P (TREE_OPERAND (arg0, 0))\n+\t      && same_type_ignoring_top_level_qualifiers_p\n+\t\t\t(TREE_TYPE (TREE_TYPE (argarray[0])),\n+\t\t\t TREE_TYPE (TREE_TYPE (arg0))))\n+\t    /* For __builtin_clear_padding (&var) we know the type\n+\t       is for a complete object, so there is no risk in clearing\n+\t       padding that is reused in some derived class member.  */;\n+\t  else if (!trivially_copyable_p (TREE_TYPE (TREE_TYPE (argarray[0]))))\n+\t    {\n+\t      error_at (EXPR_LOC_OR_LOC (argarray[0], input_location),\n+\t\t\t\"argument %u in call to function %qE \"\n+\t\t\t\"has pointer to a non-trivially-copyable type (%qT)\",\n+\t\t\t1, fndecl, TREE_TYPE (argarray[0]));\n+\t      return error_mark_node;\n+\t    }\n+\t}\n     }\n \n   if (VOID_TYPE_P (TREE_TYPE (fn)))"}, {"sha": "a4a25e869284086279ed032c94ba89af27dfa314", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c879b92c30d088ff01eb0c3e912eb8a01f9fc6e3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c879b92c30d088ff01eb0c3e912eb8a01f9fc6e3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c879b92c30d088ff01eb0c3e912eb8a01f9fc6e3", "patch": "@@ -13993,6 +13993,11 @@ bits that are padding bits for all the union members.\n This built-in-function is useful if the padding bits of an object might\n have intederminate values and the object representation needs to be\n bitwise compared to some other object, for example for atomic operations.\n+\n+For C++, @var{ptr} argument type should be pointer to trivially-copyable\n+type, unless the argument is address of a variable or parameter, because\n+otherwise it isn't known if the type isn't just a base class whose padding\n+bits are reused or laid out differently in a derived class.\n @end deftypefn\n \n @deftypefn {Built-in Function} @var{type} __builtin_bit_cast (@var{type}, @var{arg})"}, {"sha": "7b1282e7798e04e4f867f03e8e5efe3461351fc4", "filename": "gcc/testsuite/g++.dg/cpp2a/builtin-clear-padding1.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c879b92c30d088ff01eb0c3e912eb8a01f9fc6e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbuiltin-clear-padding1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c879b92c30d088ff01eb0c3e912eb8a01f9fc6e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbuiltin-clear-padding1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbuiltin-clear-padding1.C?ref=c879b92c30d088ff01eb0c3e912eb8a01f9fc6e3", "patch": "@@ -0,0 +1,50 @@\n+// PR tree-optimization/102586\n+// { dg-do compile }\n+// { dg-options \"-Wno-inaccessible-base\" }\n+\n+struct C0 {};\n+struct C1 {};\n+struct C2 : C1, virtual C0 {};\n+struct C3 : virtual C2, C1 {};\n+struct C4 : virtual C3, C1 {};\n+struct C5 : C4 {};\n+struct C6 { char c; };\n+struct C7 : virtual C6, virtual C3, C1 {};\n+struct C8 : C7 {};\n+\n+void\n+foo (C0 *c0, C1 *c1, C2 *c2, C3 *c3, C4 *c4, C5 *c5, C6 *c6, C7 *c7, C8 *c8)\n+{\n+  __builtin_clear_padding (c0);\n+  __builtin_clear_padding (c1);\n+  __builtin_clear_padding (c2);\t// { dg-error \"argument 1 in call to function '__builtin_clear_padding' has pointer to a non-trivially-copyable type \\\\\\('C2\\\\\\*'\\\\\\)\" }\n+  __builtin_clear_padding (c3);\t// { dg-error \"argument 1 in call to function '__builtin_clear_padding' has pointer to a non-trivially-copyable type \\\\\\('C3\\\\\\*'\\\\\\)\" }\n+  __builtin_clear_padding (c4);\t// { dg-error \"argument 1 in call to function '__builtin_clear_padding' has pointer to a non-trivially-copyable type \\\\\\('C4\\\\\\*'\\\\\\)\" }\n+  __builtin_clear_padding (c5);\t// { dg-error \"argument 1 in call to function '__builtin_clear_padding' has pointer to a non-trivially-copyable type \\\\\\('C5\\\\\\*'\\\\\\)\" }\n+  __builtin_clear_padding (c6);\n+  __builtin_clear_padding (c7);\t// { dg-error \"argument 1 in call to function '__builtin_clear_padding' has pointer to a non-trivially-copyable type \\\\\\('C7\\\\\\*'\\\\\\)\" }\n+  __builtin_clear_padding (c8);\t// { dg-error \"argument 1 in call to function '__builtin_clear_padding' has pointer to a non-trivially-copyable type \\\\\\('C8\\\\\\*'\\\\\\)\" }\n+}\n+\n+void\n+bar ()\n+{\n+  C0 c0;\n+  C1 c1;\n+  C2 c2;\n+  C3 c3;\n+  C4 c4;\n+  C5 c5;\n+  C6 c6;\n+  C7 c7;\n+  C8 c8;\n+  __builtin_clear_padding (&c0);\n+  __builtin_clear_padding (&c1);\n+  __builtin_clear_padding (&c2);\n+  __builtin_clear_padding (&c3);\n+  __builtin_clear_padding (&c4);\n+//  __builtin_clear_padding (&c5);\n+  __builtin_clear_padding (&c6);\n+  __builtin_clear_padding (&c7);\n+  __builtin_clear_padding (&c8);\n+}"}]}