{"sha": "30da2906ac521749aef8260fc1d942e62073f19d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBkYTI5MDZhYzUyMTc0OWFlZjgyNjBmYzFkOTQyZTYyMDczZjE5ZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-04-30T15:36:17Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-01T20:32:23Z"}, "message": "c++: Parenthesized-init of aggregates accepts invalid code [PR94885]\n\nHere we have (conceptually *) something like\n\n  struct B { };\n  struct D : B { };\n  D(0); // invalid\n\nand in C++20 the ()-initialization has created a { 0 } constructor that\nit tries to initialize an object of type D with.  We should reject\ninitializing an object of type B from 0, but we wrongly accept it because\nprocess_init_constructor_record skips initializers for empty bases/fields:\n       if (DECL_SIZE (field) && integer_zerop (DECL_SIZE (field))\n           && !TREE_SIDE_EFFECTS (next))\n         /* Don't add trivial initialization of an empty base/field to the\n            constructor, as they might not be ordered the way the back-end\n            expects.  */\n         continue;\nbut here 'next' was error_mark_node, returned by massage_elt_init, so we\nwound up with { } which would validly value-initialize the object.\n\n[*] Usually digest_init in build_new_method_call_1 would detect this,\nbut in this case the instance is is_dummy_object and we don't call\ndigest just yet.\n\n\tPR c++/94885\n\t* typeck2.c (process_init_constructor_record): Return PICFLAG_ERRONEOUS\n\tif an initializer element was erroneous.\n\n\t* g++.dg/cpp2a/paren-init26.C: New test.", "tree": {"sha": "ee4e6c68c78be8a57c3ce437992da983e533f6df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee4e6c68c78be8a57c3ce437992da983e533f6df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30da2906ac521749aef8260fc1d942e62073f19d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30da2906ac521749aef8260fc1d942e62073f19d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30da2906ac521749aef8260fc1d942e62073f19d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30da2906ac521749aef8260fc1d942e62073f19d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13ec6724cd543fed0211aa60a7f963ad40a2b5b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13ec6724cd543fed0211aa60a7f963ad40a2b5b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13ec6724cd543fed0211aa60a7f963ad40a2b5b2"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "0b6b0ee2f5ff816321690b2816795afdd9a4c5e2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30da2906ac521749aef8260fc1d942e62073f19d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30da2906ac521749aef8260fc1d942e62073f19d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=30da2906ac521749aef8260fc1d942e62073f19d", "patch": "@@ -1,3 +1,9 @@\n+2020-05-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94885\n+\t* typeck2.c (process_init_constructor_record): Return PICFLAG_ERRONEOUS\n+\tif an initializer element was erroneous.\n+\n 2020-05-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/90479"}, {"sha": "9e5d145a6cd6bf5451773272bd8353d563cdeedc", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30da2906ac521749aef8260fc1d942e62073f19d/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30da2906ac521749aef8260fc1d942e62073f19d/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=30da2906ac521749aef8260fc1d942e62073f19d", "patch": "@@ -1661,7 +1661,11 @@ process_init_constructor_record (tree type, tree init, int nested, int flags,\n \t      ++idx;\n \t    }\n \t}\n-      if (next)\n+      if (next == error_mark_node)\n+\t/* We skip initializers for empty bases/fields, so skipping an invalid\n+\t   one could make us accept invalid code.  */\n+\treturn PICFLAG_ERRONEOUS;\n+      else if (next)\n \t/* Already handled above.  */;\n       else if (DECL_INITIAL (field))\n \t{"}, {"sha": "997ef8d091c8f6f788da000fb82a175c4f815c09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30da2906ac521749aef8260fc1d942e62073f19d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30da2906ac521749aef8260fc1d942e62073f19d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30da2906ac521749aef8260fc1d942e62073f19d", "patch": "@@ -1,3 +1,8 @@\n+2020-05-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94885\n+\t* g++.dg/cpp2a/paren-init26.C: New test.\n+\n 2020-05-01  Andreas Tobler  <andreast@gcc.gnu.org>\n \n \t* gcc.dg/asan/pr87930.c: Enable on x86_64 FreeBSD."}, {"sha": "0b98ebf43bb65ba094cb232a73778eb85fb93851", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init26.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30da2906ac521749aef8260fc1d942e62073f19d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30da2906ac521749aef8260fc1d942e62073f19d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init26.C?ref=30da2906ac521749aef8260fc1d942e62073f19d", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/94885 - paren-init of aggregates accepts invalid code.\n+// { dg-do compile { target c++2a } }\n+\n+template <typename T, typename = decltype(T(0))> // { dg-error \"could not convert\" }\n+void foo();\n+\n+struct base {};\n+struct derived : base {};\n+\n+void\n+bar()\n+{\n+  foo<derived>(); // { dg-error \"no matching function\" }\n+}"}]}