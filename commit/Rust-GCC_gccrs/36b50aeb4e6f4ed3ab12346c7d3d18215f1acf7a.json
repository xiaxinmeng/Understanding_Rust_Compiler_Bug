{"sha": "36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZiNTBhZWI0ZTZmNGVkM2FiMTIzNDZjN2QzZDE4MjE1ZjFhY2Y3YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-03-13T09:11:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-03-13T09:11:46Z"}, "message": "re PR sanitizer/80953 (Support libsanitizer on Solaris)\n\n\tPR sanitizer/80953\n\tMerge from LLVM revision 355978\n\t* sanitizer_common/sanitizer_allocator_primary32.h\n\t(class SizeClassAllocator32): Assert that kSpaceSize is power of 2 if\n\tSANITIZER_SIGN_EXTENDED_ADDRESSES is set.\n\t(PointerIsMine): Deal with SANITIZER_SIGN_EXTENDED_ADDRESSES.\n\t(ComputeRegionId): Likewise.\n\t* sanitizer_common/sanitizer_linux.cc (GetMaxVirtualAddress): Return\n\tappropriate value for SPARC 64-bit.\n\t* sanitizer_common/sanitizer_platform.h (SANITIZER_MMAP_RANGE_SIZE):\n\tDefine for SPARC.\n\t(SANITIZER_SIGN_EXTENDED_ADDRESSES): Define to 1 for SPARC 64-bit.\n\nFrom-SVN: r269639", "tree": {"sha": "3d779a999394813083c48c558bb4269c859204b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d779a999394813083c48c558bb4269c859204b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a/comments", "author": null, "committer": null, "parents": [{"sha": "017abbe3620072dbb527c31d83c6529f9ec128bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/017abbe3620072dbb527c31d83c6529f9ec128bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/017abbe3620072dbb527c31d83c6529f9ec128bb"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "65df77e742f195b17fe605a966e649ae8291a392", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a", "patch": "@@ -1,3 +1,18 @@\n+2019-03-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR sanitizer/80953\n+\tMerge from LLVM revision 355978\n+\t* sanitizer_common/sanitizer_allocator_primary32.h\n+\t(class SizeClassAllocator32): Assert that kSpaceSize is power of 2 if\n+\tSANITIZER_SIGN_EXTENDED_ADDRESSES is set.\n+\t(PointerIsMine): Deal with SANITIZER_SIGN_EXTENDED_ADDRESSES.\n+\t(ComputeRegionId): Likewise.\n+\t* sanitizer_common/sanitizer_linux.cc (GetMaxVirtualAddress): Return\n+\tappropriate value for SPARC 64-bit.\n+\t* sanitizer_common/sanitizer_platform.h (SANITIZER_MMAP_RANGE_SIZE):\n+\tDefine for SPARC.\n+\t(SANITIZER_SIGN_EXTENDED_ADDRESSES): Define to 1 for SPARC 64-bit.\n+\n 2019-03-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR sanitizer/80953"}, {"sha": "de16cf2915113df9592ef1411b3dbd8491555733", "filename": "libsanitizer/sanitizer_common/sanitizer_allocator_primary32.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a/libsanitizer%2Fsanitizer_common%2Fsanitizer_allocator_primary32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a/libsanitizer%2Fsanitizer_common%2Fsanitizer_allocator_primary32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_allocator_primary32.h?ref=36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a", "patch": "@@ -54,6 +54,9 @@ class SizeClassAllocator32 {\n   typedef typename Params::ByteMap ByteMap;\n   typedef typename Params::MapUnmapCallback MapUnmapCallback;\n \n+  COMPILER_CHECK(!SANITIZER_SIGN_EXTENDED_ADDRESSES ||\n+                 (kSpaceSize & (kSpaceSize - 1)) == 0);\n+\n   static const bool kRandomShuffleChunks = Params::kFlags &\n       SizeClassAllocator32FlagMasks::kRandomShuffleChunks;\n   static const bool kUseSeparateSizeClassForBatch = Params::kFlags &\n@@ -175,6 +178,8 @@ class SizeClassAllocator32 {\n \n   bool PointerIsMine(const void *p) {\n     uptr mem = reinterpret_cast<uptr>(p);\n+    if (SANITIZER_SIGN_EXTENDED_ADDRESSES)\n+      mem &= (kSpaceSize - 1);\n     if (mem < kSpaceBeg || mem >= kSpaceBeg + kSpaceSize)\n       return false;\n     return GetSizeClass(p) != 0;\n@@ -267,6 +272,8 @@ class SizeClassAllocator32 {\n   COMPILER_CHECK(sizeof(SizeClassInfo) % kCacheLineSize == 0);\n \n   uptr ComputeRegionId(uptr mem) {\n+    if (SANITIZER_SIGN_EXTENDED_ADDRESSES)\n+      mem &= (kSpaceSize - 1);\n     const uptr res = mem >> kRegionSizeLog;\n     CHECK_LT(res, kNumPossibleRegions);\n     return res;"}, {"sha": "dc1e98496799184b91d38dab0938603f411dd6e6", "filename": "libsanitizer/sanitizer_common/sanitizer_linux.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_linux.cc?ref=36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a", "patch": "@@ -1064,6 +1064,8 @@ uptr GetMaxVirtualAddress() {\n   return (1ULL << 40) - 1;  // 0x000000ffffffffffUL;\n # elif defined(__s390x__)\n   return (1ULL << 53) - 1;  // 0x001fffffffffffffUL;\n+# elif defined(__sparc__)\n+  return ~(uptr)0;\n # else\n   return (1ULL << 47) - 1;  // 0x00007fffffffffffUL;\n # endif"}, {"sha": "cc72d528713857fd14c2e0813936c82e7523ae40", "filename": "libsanitizer/sanitizer_common/sanitizer_platform.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform.h?ref=36b50aeb4e6f4ed3ab12346c7d3d18215f1acf7a", "patch": "@@ -239,10 +239,21 @@\n # else\n #  define SANITIZER_MMAP_RANGE_SIZE FIRST_32_SECOND_64(1ULL << 32, 1ULL << 48)\n # endif\n+#elif defined(__sparc__)\n+# define SANITIZER_MMAP_RANGE_SIZE FIRST_32_SECOND_64(1ULL << 32, 1ULL << 52)\n #else\n # define SANITIZER_MMAP_RANGE_SIZE FIRST_32_SECOND_64(1ULL << 32, 1ULL << 47)\n #endif\n \n+// Whether the addresses are sign-extended from the VMA range to the word.\n+// The SPARC64 Linux port implements this to split the VMA space into two\n+// non-contiguous halves with a huge hole in the middle.\n+#if defined(__sparc__) && SANITIZER_WORDSIZE == 64\n+# define SANITIZER_SIGN_EXTENDED_ADDRESSES 1\n+#else\n+# define SANITIZER_SIGN_EXTENDED_ADDRESSES 0\n+#endif\n+\n // The AArch64 linux port uses the canonical syscall set as mandated by\n // the upstream linux community for all new ports. Other ports may still\n // use legacy syscalls."}]}