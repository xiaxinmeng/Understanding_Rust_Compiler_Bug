{"sha": "d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdjZjNkYzdkMDNmOTFlYThjYTdmNmZiNjIyNmE0MGM4NGNjNzhlMA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2016-01-20T14:19:41Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2016-01-20T14:19:41Z"}, "message": "[ARM target attributes] Fix effective_target tests\n\n2016-01-20  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* doc/sourcebuild.texi (arm_crypto_pragma_ok): Document new entry.\n\t(arm_fp_ok): Likewise.\n\t(arm_fp): Likewise.\n\t(arm_crypto): Likewise.\n\n\tgcc/testsuite/\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_fp_ok_nocache): New.\n\t(check_effective_target_arm_fp_ok): New.\n\t(add_options_for_arm_fp): New.\n\t(check_effective_target_arm_crypto_ok_nocache): Require\n\ttarget_arm_v8_neon_ok instead of arm32.\n\t(check_effective_target_arm_crypto_pragma_ok_nocache): New.\n\t(check_effective_target_arm_crypto_pragma_ok): New.\n\t(add_options_for_arm_vfp): New.\n\t* gcc.target/arm/attr-crypto.c: Use arm_crypto_pragma_ok effective\n\ttarget. Do not force -mfloat-abi=softfp, use arm_fp_ok effective\n\ttarget instead. Force initial fpu to vfp.\n\t* gcc.target/arm/attr-neon-builtin-fail.c: Do not force\n\t-mfloat-abi=softfp, use arm_fp_ok effective target instead.\n\t* gcc.target/arm/attr-neon-fp16.c: Likewise. Remove arm_neon_ok\n\tdependency.\n\t* gcc.target/arm/attr-neon2.c: Do not force -mfloat-abi=softfp,\n\tuse arm_vfp effective target instead. Force initial fpu to vfp.\n\t* gcc.target/arm/attr-neon3.c: Likewise.\n\t* gcc.target/arm/cmp-2.c: Use arm_fp_ok effective target instead of\n\tarm_vfp_ok.\n\t* gcc.target/arm/unsigned-float.c: Likewise.\n\t* gcc.target/arm/vfp-1.c: Likewise.\n\t* gcc.target/arm/vfp-ldmdbd.c: Likewise.\n\t* gcc.target/arm/vfp-ldmdbs.c: Likewise.\n\t* gcc.target/arm/vfp-ldmiad.c: Likewise.\n\t* gcc.target/arm/vfp-ldmias.c: Likewise.\n\t* gcc.target/arm/vfp-stmdbd.c: Likewise.\n\t* gcc.target/arm/vfp-stmdbs.c: Likewise.\n\t* gcc.target/arm/vfp-stmiad.c: Likewise.\n\t* gcc.target/arm/vfp-stmias.c: Likewise.\n\t* gcc.target/arm/vnmul-1.c: Likewise.\n\t* gcc.target/arm/vnmul-2.c: Likewise.\n\t* gcc.target/arm/vnmul-3.c: Likewise.\n\t* gcc.target/arm/vnmul-4.c: Likewise.\n\nFrom-SVN: r232616", "tree": {"sha": "fee14787bcb96f55cfe3b633adada0e0ba894477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fee14787bcb96f55cfe3b633adada0e0ba894477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/comments", "author": null, "committer": null, "parents": [{"sha": "b03c990f38a21b0d0eb58c0ab186eb90df19962a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03c990f38a21b0d0eb58c0ab186eb90df19962a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b03c990f38a21b0d0eb58c0ab186eb90df19962a"}], "stats": {"total": 280, "additions": 236, "deletions": 44}, "files": [{"sha": "308c90631b957111f72f58174bb2e40a0cf9fa8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,3 +1,10 @@\n+2016-01-20  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* doc/sourcebuild.texi (arm_crypto_pragma_ok): Document new entry.\n+\t(arm_fp_ok): Likewise.\n+\t(arm_fp): Likewise.\n+\t(arm_crypto): Likewise.\n+\n 2016-01-20  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \t    Richard Biener  <rguenther@suse.de>\n "}, {"sha": "036dcd62da49a62257fec57dd99946c9134ee1d6", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1511,9 +1511,21 @@ Target generates decimal floating point instructions with current options.\n @item arm32\n ARM target generates 32-bit code.\n \n+@item arm_crypto_pragma_ok\n+@anchor{arm_crypto_pragma_ok}\n+ARM target supports pragma target @code{fpu=crypto-neon-fp-armv8}.\n+This may need @code{-mfpu=crypto-neon-fp-armv8} or equivalent options.\n+Some multilibs may be incompatible with these options.\n+\n @item arm_eabi\n ARM target adheres to the ABI for the ARM Architecture.\n \n+@item arm_fp_ok\n+@anchor{arm_fp_ok}\n+ARM target defines @code{__ARM_FP} using @code{-mfloat-abi=softfp} or\n+equivalent options.  Some multilibs may be incompatible with these\n+options.\n+\n @item arm_hf_eabi\n ARM target adheres to the VFP and Advanced SIMD Register Arguments\n variant of the ABI for the ARM Architecture (as selected with\n@@ -2047,6 +2059,17 @@ The supported values of @var{feature} for directive @code{dg-add-options}\n are:\n \n @table @code\n+@item arm_crypto_pragma\n+Crypto extension pragma support.  Only ARM targets support this\n+feature, and only then in certain modes; see the\n+@ref{arm_crypto_pragma_ok,,arm_crypto_pragma_ok effective target\n+keyword}.\n+\n+@item arm_fp\n+@code{__ARM_FP} definition.  Only ARM targets support this feature, and only then\n+in certain modes; see the @ref{arm_fp_ok,,arm_fp_ok effective target\n+keyword}.\n+\n @item arm_neon\n NEON support.  Only ARM targets support this feature, and only then\n in certain modes; see the @ref{arm_neon_ok,,arm_neon_ok effective target"}, {"sha": "9f4bcdd02d734e82434b4dd5b9a48eeef0d264f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,3 +1,41 @@\n+2016-01-20  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_fp_ok_nocache): New.\n+\t(check_effective_target_arm_fp_ok): New.\n+\t(add_options_for_arm_fp): New.\n+\t(check_effective_target_arm_crypto_ok_nocache): Require\n+\ttarget_arm_v8_neon_ok instead of arm32.\n+\t(check_effective_target_arm_crypto_pragma_ok_nocache): New.\n+\t(check_effective_target_arm_crypto_pragma_ok): New.\n+\t(add_options_for_arm_vfp): New.\n+\t* gcc.target/arm/attr-crypto.c: Use arm_crypto_pragma_ok effective\n+\ttarget. Do not force -mfloat-abi=softfp, use arm_fp_ok effective\n+\ttarget instead. Force initial fpu to vfp.\n+\t* gcc.target/arm/attr-neon-builtin-fail.c: Do not force\n+\t-mfloat-abi=softfp, use arm_fp_ok effective target instead.\n+\t* gcc.target/arm/attr-neon-fp16.c: Likewise. Remove arm_neon_ok\n+\tdependency.\n+\t* gcc.target/arm/attr-neon2.c: Do not force -mfloat-abi=softfp,\n+\tuse arm_vfp effective target instead. Force initial fpu to vfp.\n+\t* gcc.target/arm/attr-neon3.c: Likewise.\n+\t* gcc.target/arm/cmp-2.c: Use arm_fp_ok effective target instead of\n+\tarm_vfp_ok.\n+\t* gcc.target/arm/unsigned-float.c: Likewise.\n+\t* gcc.target/arm/vfp-1.c: Likewise.\n+\t* gcc.target/arm/vfp-ldmdbd.c: Likewise.\n+\t* gcc.target/arm/vfp-ldmdbs.c: Likewise.\n+\t* gcc.target/arm/vfp-ldmiad.c: Likewise.\n+\t* gcc.target/arm/vfp-ldmias.c: Likewise.\n+\t* gcc.target/arm/vfp-stmdbd.c: Likewise.\n+\t* gcc.target/arm/vfp-stmdbs.c: Likewise.\n+\t* gcc.target/arm/vfp-stmiad.c: Likewise.\n+\t* gcc.target/arm/vfp-stmias.c: Likewise.\n+\t* gcc.target/arm/vnmul-1.c: Likewise.\n+\t* gcc.target/arm/vnmul-2.c: Likewise.\n+\t* gcc.target/arm/vnmul-3.c: Likewise.\n+\t* gcc.target/arm/vnmul-4.c: Likewise.\n+\n 2016-01-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR testsuite/69366"}, {"sha": "3b4b7c5eda6229187bd26cd38a816827c2baa5cc", "filename": "gcc/testsuite/gcc.target/arm/attr-crypto.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-crypto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-crypto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-crypto.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,6 +1,14 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_crypto_ok } */\n-/* { dg-options \"-O2 -mfloat-abi=softfp\" } */\n+/* Make sure we can force fpu=vfp before switching using the\n+   pragma.  */\n+/* { dg-require-effective-target arm_fp_ok } */\n+/* { dg-require-effective-target arm_crypto_pragma_ok } */\n+/* { dg-options \"-O2 -march=armv8-a\" } */\n+/* { dg-add-options arm_fp } */\n+\n+/* Reset fpu to a value compatible with the next pragmas.  */\n+#pragma GCC target (\"fpu=vfp\")\n+#pragma GCC push_options\n \n #pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n \n@@ -28,7 +36,7 @@ foo (void)\n   return res[0];\n }\n \n-#pragma GCC reset_options\n+#pragma GCC pop_options\n \n /* Check that the FP version is correctly reset.  */\n "}, {"sha": "05dc579f25d0169b918ee775d8df36fae4f9de47", "filename": "gcc/testsuite/gcc.target/arm/attr-neon-builtin-fail.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon-builtin-fail.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon-builtin-fail.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon-builtin-fail.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,7 +1,9 @@\n /* Check that calling a neon builtin from a function compiled with vfp fails.  */\n /* { dg-do compile } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-O2 -mfloat-abi=softfp\" } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_fp } */\n \n #include <arm_neon.h>\n \n@@ -12,6 +14,5 @@ foo (uint8x16_t *p)\n   *p = vmovq_n_u8 (3); /* { dg-message \"called from here\" } */\n }\n \n-/* { dg-error \"inlining failed in call to always_inline\" \"\" { target *-*-* } 0 }\n- */\n+/* { dg-error \"inlining failed in call to always_inline\" \"\" { target *-*-* } 0 } */\n "}, {"sha": "984992f2ab06969969f5e7699d7af7fed356705a", "filename": "gcc/testsuite/gcc.target/arm/attr-neon-fp16.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon-fp16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon-fp16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon-fp16.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-mfp16-format=ieee -mfloat-abi=softfp\" } */\n+/* { dg-require-effective-target arm_fp_ok } */\n+/* { dg-options \"-mfp16-format=ieee\" } */\n+/* { dg-add-options arm_fp } */\n \n #include \"arm_neon.h\"\n "}, {"sha": "29668256cf5bd64a7fbc36e24de6e44661fce14d", "filename": "gcc/testsuite/gcc.target/arm/attr-neon2.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon2.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,6 +1,12 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target arm_neon_ok } */\n-/* { dg-options \"-O2 -mfloat-abi=softfp -mfpu=vfp\" } */\n+/* { dg-require-effective-target arm_fp_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_fp } */\n+\n+/* Reset fpu to a value compatible with the next pragmas.  */\n+#pragma GCC target (\"fpu=vfp\")\n+#pragma GCC push_options\n \n #pragma GCC target (\"fpu=neon\")\n #include <arm_neon.h>\n@@ -12,7 +18,7 @@ my (int8x8_t __a, int8x8_t __b)\n   return __a + __b;\n }\n \n-#pragma GCC reset_options\n+#pragma GCC pop_options\n \n /* Check that command line option is restored.  */\n int8x8_t "}, {"sha": "17e429ad73934c2b829d3cefd6a89ebd52052978", "filename": "gcc/testsuite/gcc.target/arm/attr-neon3.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fattr-neon3.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,6 +1,12 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target arm_crypto_ok } */\n-/* { dg-options \"-O2 -mfloat-abi=softfp -mfpu=vfp\" } */\n+/* { dg-require-effective-target arm_fp_ok } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_fp } */\n+\n+/* Reset fpu to a value compatible with the next pragmas.  */\n+#pragma GCC target (\"fpu=vfp\")\n+#pragma GCC push_options\n \n #include <arm_neon.h>\n "}, {"sha": "70e45091c0c5530760bb0d1e4b91f58249afca57", "filename": "gcc/testsuite/gcc.target/arm/cmp-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmp-2.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n-/* { dg-options \"-O -mfpu=vfp -mfloat-abi=softfp\" } */\n+/* { dg-options \"-O\" } */\n+/* { dg-add-options arm_fp } */\n /* { dg-final { scan-assembler-not \"\\tbl\\t\" } } */\n /* { dg-final { scan-assembler-not \"__aeabi\" } } */\n int x, y;"}, {"sha": "e1cda0ce9e29c529d7591e2b008c9528a593e65e", "filename": "gcc/testsuite/gcc.target/arm/unsigned-float.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Funsigned-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Funsigned-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Funsigned-float.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,8 +1,9 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n /* { dg-options \"-march=armv7-a -O1\" } */\n-/* { dg-additional-options \"-mfloat-abi=softfp\" { target { ! { arm_hf_eabi } } } } */\n+/* { dg-add-options arm_fp } */\n+\n \n #include <stdint.h>\n "}, {"sha": "7add1b869ea98cf6c71e7955c69441c0895d4fbc", "filename": "gcc/testsuite/gcc.target/arm/vfp-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-1.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mfpu=vfp -mfloat-abi=softfp -ffp-contract=off\" } */\n-/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n+/* { dg-options \"-O2 -ffp-contract=off\" } */\n+/* { dg-add-options arm_fp } */\n /* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n \n extern float fabsf (float);"}, {"sha": "3489a2a9e2557bcb319b9a2deb8614f7856cd340", "filename": "gcc/testsuite/gcc.target/arm/vfp-ldmdbd.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmdbd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmdbd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmdbd.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n-/* { dg-options \"-O2 -mfpu=vfp -mfloat-abi=softfp\" } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_fp } */\n \n extern void bar (double);\n "}, {"sha": "8fda4059c3b4b8dd1b651d8bafdf093a5d585628", "filename": "gcc/testsuite/gcc.target/arm/vfp-ldmdbs.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmdbs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmdbs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmdbs.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n-/* { dg-options \"-O2 -mfpu=vfp -mfloat-abi=softfp\" } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_fp } */\n \n extern void bar (float);\n "}, {"sha": "422e3ed602b025eb5b6985784814931cc5331ea1", "filename": "gcc/testsuite/gcc.target/arm/vfp-ldmiad.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmiad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmiad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmiad.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n-/* { dg-options \"-O2 -mfpu=vfp -mfloat-abi=softfp\" } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_fp } */\n \n extern void bar (double);\n "}, {"sha": "31d2ee175779549960b1fbb7c02e561a4b00da86", "filename": "gcc/testsuite/gcc.target/arm/vfp-ldmias.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-ldmias.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n-/* { dg-options \"-O2 -mfpu=vfp -mfloat-abi=softfp\" } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_fp } */\n \n extern void bar (float);\n "}, {"sha": "686fe86392b4e41d85cb3c98b1f30e57e6e9f61e", "filename": "gcc/testsuite/gcc.target/arm/vfp-stmdbd.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmdbd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmdbd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmdbd.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n-/* { dg-options \"-O2 -mfpu=vfp -mfloat-abi=softfp\" } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_fp } */\n \n void\n foo (double *p, double a, double b, int n)"}, {"sha": "dbb30ecd6bc8e4610f4b6252b8aa7f1b703fc235", "filename": "gcc/testsuite/gcc.target/arm/vfp-stmdbs.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmdbs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmdbs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmdbs.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n-/* { dg-options \"-O2 -mfpu=vfp -mfloat-abi=softfp\" } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_fp } */\n \n void\n foo (float *p, float a, float b, int n)"}, {"sha": "665fa7a124b9b035dfb9106fc30fb15e3ecbcaad", "filename": "gcc/testsuite/gcc.target/arm/vfp-stmiad.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmiad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmiad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmiad.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n-/* { dg-options \"-O2 -mfpu=vfp -mfloat-abi=softfp\" } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_fp } */\n \n void\n foo (double *p, double a, double b, int n)"}, {"sha": "90940e5c8fe760d0cad910d3a7cdb0544c8ba749", "filename": "gcc/testsuite/gcc.target/arm/vfp-stmias.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvfp-stmias.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n-/* { dg-options \"-O2 -mfpu=vfp -mfloat-abi=softfp\" } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-add-options arm_fp } */\n \n void\n foo (float *p, float a, float b, int n)"}, {"sha": "fd00388a5392e53b60f6781136263a2e2f9ca190", "filename": "gcc/testsuite/gcc.target/arm/vnmul-1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvnmul-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvnmul-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvnmul-1.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n-/* { dg-options \"-O2 -fno-rounding-math -mfpu=vfp -mfloat-abi=hard\" } */\n+/* { dg-options \"-O2 -fno-rounding-math\" } */\n+/* { dg-add-options arm_fp } */\n \n double\n foo_d (double a, double b)"}, {"sha": "c299ec115f5aaaff082b79d5d81b2aa8e7939db4", "filename": "gcc/testsuite/gcc.target/arm/vnmul-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvnmul-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvnmul-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvnmul-2.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n-/* { dg-options \"-O2 -frounding-math -mfpu=vfp -mfloat-abi=hard\" } */\n+/* { dg-options \"-O2 -frounding-math\" } */\n+/* { dg-add-options arm_fp } */\n \n double\n foo_d (double a, double b)"}, {"sha": "44c1967ee7b291076b773dede0b08302263425a8", "filename": "gcc/testsuite/gcc.target/arm/vnmul-3.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvnmul-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvnmul-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvnmul-3.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n-/* { dg-options \"-O2 -fno-rounding-math -mfpu=vfp -mfloat-abi=hard\" } */\n+/* { dg-options \"-O2 -fno-rounding-math\" } */\n+/* { dg-add-options arm_fp } */\n \n double\n foo_d (double a, double b)"}, {"sha": "dd9cab3c727a4e85ace1714af19b540bb752dfc6", "filename": "gcc/testsuite/gcc.target/arm/vnmul-4.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvnmul-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvnmul-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fvnmul-4.c?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -1,7 +1,8 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target arm_vfp_ok } */\n+/* { dg-require-effective-target arm_fp_ok } */\n /* { dg-skip-if \"need fp instructions\" { *-*-* } { \"-mfloat-abi=soft\" } { \"\" } } */\n-/* { dg-options \"-O2 -frounding-math -mfpu=vfp -mfloat-abi=hard\" } */\n+/* { dg-options \"-O2 -frounding-math\" } */\n+/* { dg-add-options arm_fp } */\n \n double\n foo_d (double a, double b)"}, {"sha": "dceabb5c5fe3fbaa24cf815b78b270e04274a5f8", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 90, "deletions": 3, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=d7cf3dc7d03f91ea8ca7f6fb6226a40c84cc78e0", "patch": "@@ -2744,6 +2744,47 @@ proc check_effective_target_arm_hard_vfp_ok { } {\n     }\n }\n \n+# Return 1 if this is an ARM target defining __ARM_FP. We may need\n+# -mfloat-abi=softfp or equivalent options.  Some multilibs may be\n+# incompatible with these options.  Also set et_arm_fp_flags to the\n+# best options to add.\n+\n+proc check_effective_target_arm_fp_ok_nocache { } {\n+    global et_arm_fp_flags\n+    set et_arm_fp_flags \"\"\n+    if { [check_effective_target_arm32] } {\n+\tforeach flags {\"\" \"-mfloat-abi=softfp\" \"-mfloat-abi=hard\"} {\n+\t    if { [check_no_compiler_messages_nocache arm_fp_ok object {\n+\t\t#ifndef __ARM_FP\n+\t\t#error __ARM_FP not defined\n+\t\t#endif\n+\t    } \"$flags\"] } {\n+\t\tset et_arm_fp_flags $flags\n+\t\treturn 1\n+\t    }\n+\t}\n+    }\n+\n+    return 0\n+}\n+\n+proc check_effective_target_arm_fp_ok { } {\n+    return [check_cached_effective_target arm_fp_ok \\\n+\t\tcheck_effective_target_arm_fp_ok_nocache]\n+}\n+\n+# Add the options needed to define __ARM_FP.  We need either\n+# -mfloat-abi=softfp or -mfloat-abi=hard, but if one is already\n+# specified by the multilib, use it.\n+\n+proc add_options_for_arm_fp { flags } {\n+    if { ! [check_effective_target_arm_fp_ok] } {\n+\treturn \"$flags\"\n+    }\n+    global et_arm_fp_flags\n+    return \"$flags $et_arm_fp_flags\"\n+}\n+\n # Return 1 if this is an ARM target that supports DSP multiply with\n # current multilib flags.\n \n@@ -2776,7 +2817,7 @@ proc check_effective_target_arm_unaligned { } {\n proc check_effective_target_arm_crypto_ok_nocache { } {\n     global et_arm_crypto_flags\n     set et_arm_crypto_flags \"\"\n-    if { [check_effective_target_arm32] } {\n+    if { [check_effective_target_arm_v8_neon_ok] } {\n \tforeach flags {\"\" \"-mfloat-abi=softfp\" \"-mfpu=crypto-neon-fp-armv8\" \"-mfpu=crypto-neon-fp-armv8 -mfloat-abi=softfp\"} {\n \t    if { [check_no_compiler_messages_nocache arm_crypto_ok object {\n \t\t#include \"arm_neon.h\"\n@@ -2811,6 +2852,52 @@ proc add_options_for_arm_crypto { flags } {\n     return \"$flags $et_arm_crypto_flags\"\n }\n \n+# Return 1 if this is an ARM target supporting pragma target\n+# fpu=crypto-neon-fp-armv8, possibly needing -mfloat-abi=softfp or\n+# equivalent options.  Some multilibs may be incompatible with these\n+# options.  Also set et_arm_crypto_pragma_flags to the best options to\n+# add.\n+\n+proc check_effective_target_arm_crypto_pragma_ok_nocache { } {\n+    global et_arm_crypto_pragma_flags\n+    set et_arm_crypto_pragma_flags \"\"\n+    if { [check_effective_target_arm_v8_neon_ok] } {\n+\tforeach flags {\"\" \"-mfloat-abi=softfp\" \"-mfpu=crypto-neon-fp-armv8\" \"-mfpu=crypto-neon-fp-armv8 -mfloat-abi=softfp\"} {\n+\t    if { [check_no_compiler_messages_nocache arm_crypto_pragmaok object {\n+\t\t#pragma GCC target (\"fpu=crypto-neon-fp-armv8\")\n+\t\t#include \"arm_neon.h\"\n+\t\tuint8x16_t\n+\t\tfoo (uint8x16_t a, uint8x16_t b)\n+\t\t{\n+\t          return vaeseq_u8 (a, b);\n+\t\t}\n+\t    } \"[add_options_for_arm_v8_neon \"\"] $flags\"] } {\n+\t\tset et_arm_crypto_pragma_flags \"[add_options_for_arm_v8_neon \"\"] $flags\"\n+\t\treturn 1\n+\t    }\n+\t}\n+    }\n+\n+    return 0\n+}\n+\n+# Return 1 if this is an ARM target supporting pragma target\n+# -mfpu=crypto-neon-fp-armv8.\n+\n+proc check_effective_target_arm_crypto_pragma_ok { } {\n+    return [check_cached_effective_target arm_crypto_pragma_ok \\\n+\t\tcheck_effective_target_arm_crypto_pragma_ok_nocache]\n+}\n+\n+# Add options for crypto extensions pragma.\n+proc add_options_for_arm_crypto_pragma { flags } {\n+    if { ! [check_effective_target_arm_crypto_pragma_ok] } {\n+        return \"$flags\"\n+    }\n+    global et_arm_crypto_pragma_flags\n+    return \"$flags $et_arm_crypto_pragma_flags\"\n+}\n+\n # Add the options needed for NEON.  We need either -mfloat-abi=softfp\n # or -mfloat-abi=hard, but if one is already specified by the\n # multilib, use it.  Similarly, if a -mfpu option already enables\n@@ -2931,8 +3018,8 @@ proc check_effective_target_arm_crc_ok { } {\n \n # Return 1 if this is an ARM target supporting -mfpu=neon-fp16\n # -mfloat-abi=softfp or equivalent options.  Some multilibs may be\n-# incompatible with these options.  Also set et_arm_neon_flags to the\n-# best options to add.\n+# incompatible with these options.  Also set et_arm_neon_fp16_flags to\n+# the best options to add.\n \n proc check_effective_target_arm_neon_fp16_ok_nocache { } {\n     global et_arm_neon_fp16_flags"}]}