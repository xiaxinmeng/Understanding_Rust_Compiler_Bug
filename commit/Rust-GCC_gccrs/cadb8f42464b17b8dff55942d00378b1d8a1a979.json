{"sha": "cadb8f42464b17b8dff55942d00378b1d8a1a979", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FkYjhmNDI0NjRiMTdiOGRmZjU1OTQyZDAwMzc4YjFkOGExYTk3OQ==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2009-04-11T16:44:37Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2009-04-11T16:44:37Z"}, "message": "re PR fortran/37746 (bounds check of string dummy arguments)\n\n2009-04-11  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/37746\n\t* gfortran.h (struct gfc_charlen): New field `passed_length' to store\n\tthe actual passed string length for dummy arguments.\n\t* trans-decl.c (gfc_create_string_length): Formatting fixes and added\n\tassertion, moved a local variable into the innermost block it is needed.\n\t(create_function_arglist): Removed TODO about the check being\n\timplemented and initialize cl->passed_length here.\n\t(add_argument_checking): New method.\n\t(gfc_generate_function_code): Call the argument checking method.\n\n2009-04-11  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/37746\n\t* gfortran.dg/bounds_check_strlen_1.f90: New test.\n\t* gfortran.dg/bounds_check_strlen_2.f90: New test.\n\t* gfortran.dg/bounds_check_strlen_3.f90: New test.\n\t* gfortran.dg/bounds_check_strlen_4.f90: New test.\n\t* gfortran.dg/bounds_check_strlen_5.f90: New test.\n\t* gfortran.dg/bounds_check_strlen_6.f90: New test.\n\t* gfortran.dg/bounds_check_strlen_7.f90: New test.\n\t* gfortran.fortran-torture/execute/intrinsic_index.f90: Fix wrong\n\texpected string length that failed with -fbounds-check now.\n\t* gfortran.fortran-torture/execute/intrinsic_trim.f90: Ditto.\n\nFrom-SVN: r145958", "tree": {"sha": "d9c8e4e6f33f22a9ccaeca5a72eb199f6b40e246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9c8e4e6f33f22a9ccaeca5a72eb199f6b40e246"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cadb8f42464b17b8dff55942d00378b1d8a1a979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cadb8f42464b17b8dff55942d00378b1d8a1a979", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cadb8f42464b17b8dff55942d00378b1d8a1a979", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cadb8f42464b17b8dff55942d00378b1d8a1a979/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d1e49db44333c8a937beebeb21e3c33be60ec162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e49db44333c8a937beebeb21e3c33be60ec162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1e49db44333c8a937beebeb21e3c33be60ec162"}], "stats": {"total": 330, "additions": 324, "deletions": 6}, "files": [{"sha": "ef53e2391a8b528bd4ae705cb4d724841858ef0a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cadb8f42464b17b8dff55942d00378b1d8a1a979", "patch": "@@ -1,3 +1,15 @@\n+2009-04-11  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/37746\n+\t* gfortran.h (struct gfc_charlen): New field `passed_length' to store\n+\tthe actual passed string length for dummy arguments.\n+\t* trans-decl.c (gfc_create_string_length): Formatting fixes and added\n+\tassertion, moved a local variable into the innermost block it is needed.\n+\t(create_function_arglist): Removed TODO about the check being\n+\timplemented and initialize cl->passed_length here.\n+\t(add_argument_checking): New method.\n+\t(gfc_generate_function_code): Call the argument checking method.\n+\n 2009-04-11  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/39692"}, {"sha": "48853e497c534559735da6be76c218273708f465", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=cadb8f42464b17b8dff55942d00378b1d8a1a979", "patch": "@@ -794,6 +794,7 @@ typedef struct gfc_charlen\n   struct gfc_charlen *next;\n   bool length_from_typespec; /* Length from explicit array ctor typespec?  */\n   tree backend_decl;\n+  tree passed_length; /* Length argument explicitelly passed.  */\n \n   int resolved;\n }"}, {"sha": "5fe658ecfe71a7878299110c7fb7ac9d6a3d0415", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 92, "deletions": 4, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=cadb8f42464b17b8dff55942d00378b1d8a1a979", "patch": "@@ -877,13 +877,12 @@ gfc_build_dummy_array_decl (gfc_symbol * sym, tree dummy)\n static tree\n gfc_create_string_length (gfc_symbol * sym)\n {\n-  tree length;\n-\n   gcc_assert (sym->ts.cl);\n   gfc_conv_const_charlen (sym->ts.cl);\n-  \n+\n   if (sym->ts.cl->backend_decl == NULL_TREE)\n     {\n+      tree length;\n       char name[GFC_MAX_MANGLED_SYMBOL_LEN + 2];\n \n       /* Also prefix the mangled name.  */\n@@ -895,9 +894,11 @@ gfc_create_string_length (gfc_symbol * sym)\n       TREE_USED (length) = 1;\n       if (sym->ns->proc_name->tlink != NULL)\n \tgfc_defer_symbol_init (sym);\n+\n       sym->ts.cl->backend_decl = length;\n     }\n \n+  gcc_assert (sym->ts.cl->backend_decl != NULL_TREE);\n   return sym->ts.cl->backend_decl;\n }\n \n@@ -1646,7 +1647,8 @@ create_function_arglist (gfc_symbol * sym)\n \t  TREE_READONLY (length) = 1;\n \t  gfc_finish_decl (length);\n \n-\t  /* TODO: Check string lengths when -fbounds-check.  */\n+\t  /* Remember the passed value.  */\n+\t  f->sym->ts.cl->passed_length = length;\n \n \t  /* Use the passed value for assumed length variables.  */\n \t  if (!f->sym->ts.cl->length)\n@@ -3704,6 +3706,86 @@ gfc_trans_entry_master_switch (gfc_entry_list * el)\n }\n \n \n+/* Add code to string lengths of actual arguments passed to a function against\n+   the expected lengths of the dummy arguments.  */\n+\n+static void\n+add_argument_checking (stmtblock_t *block, gfc_symbol *sym)\n+{\n+  gfc_formal_arglist *formal;\n+\n+  for (formal = sym->formal; formal; formal = formal->next)\n+    if (formal->sym && formal->sym->ts.type == BT_CHARACTER)\n+      {\n+\tenum tree_code comparison;\n+\ttree cond;\n+\ttree argname;\n+\tgfc_symbol *fsym;\n+\tgfc_charlen *cl;\n+\tconst char *message;\n+\n+\tfsym = formal->sym;\n+\tcl = fsym->ts.cl;\n+\n+\tgcc_assert (cl);\n+\tgcc_assert (cl->passed_length != NULL_TREE);\n+\tgcc_assert (cl->backend_decl != NULL_TREE);\n+\n+\t/* For POINTER, ALLOCATABLE and assumed-shape dummy arguments, the\n+\t   string lengths must match exactly.  Otherwise, it is only required\n+\t   that the actual string length is *at least* the expected one.  */\n+\tif (fsym->attr.pointer || fsym->attr.allocatable\n+\t    || (fsym->as && fsym->as->type == AS_ASSUMED_SHAPE))\n+\t  {\n+\t    comparison = NE_EXPR;\n+\t    message = _(\"Actual string length does not match the declared one\"\n+\t\t\t\" for dummy argument '%s' (%ld/%ld)\");\n+\t  }\n+\telse\n+\t  {\n+\t    comparison = LT_EXPR;\n+\t    message = _(\"Actual string length is shorter than the declared one\"\n+\t\t\t\" for dummy argument '%s' (%ld/%ld)\");\n+\t  }\n+\n+\t/* Build the condition.  For optional arguments, an actual length\n+\t   of 0 is also acceptable if the associated string is NULL, which\n+\t   means the argument was not passed.  */\n+\tcond = fold_build2 (comparison, boolean_type_node,\n+\t\t\t    cl->passed_length, cl->backend_decl);\n+\tif (fsym->attr.optional)\n+\t  {\n+\t    tree not_absent;\n+\t    tree not_0length;\n+\t    tree absent_failed;\n+\n+\t    not_0length = fold_build2 (NE_EXPR, boolean_type_node,\n+\t\t\t\t       cl->passed_length,\n+\t\t\t\t       fold_convert (gfc_charlen_type_node,\n+\t\t\t\t\t\t     integer_zero_node));\n+\t    not_absent = fold_build2 (NE_EXPR, boolean_type_node,\n+\t\t\t\t      fsym->backend_decl, null_pointer_node);\n+\n+\t    absent_failed = fold_build2 (TRUTH_OR_EXPR, boolean_type_node,\n+\t\t\t\t\t not_0length, not_absent);\n+\n+\t    cond = fold_build2 (TRUTH_AND_EXPR, boolean_type_node,\n+\t\t\t\tcond, absent_failed);\n+\t  }\n+\n+\t/* Build the runtime check.  */\n+\targname = gfc_build_cstring_const (fsym->name);\n+\targname = gfc_build_addr_expr (pchar_type_node, argname);\n+\tgfc_trans_runtime_check (true, false, cond, block, &fsym->declared_at,\n+\t\t\t\t message, argname,\n+\t\t\t\t fold_convert (long_integer_type_node,\n+\t\t\t\t\t       cl->passed_length),\n+\t\t\t\t fold_convert (long_integer_type_node,\n+\t\t\t\t\t       cl->backend_decl));\n+      }\n+}\n+\n+\n /* Generate code for a function.  */\n \n void\n@@ -3920,6 +4002,12 @@ gfc_generate_function_code (gfc_namespace * ns)\n       gfc_add_expr_to_block (&body, tmp);\n     }\n \n+  /* If bounds-checking is enabled, generate code to check passed in actual\n+     arguments against the expected dummy argument attributes (e.g. string\n+     lengths).  */\n+  if (flag_bounds_check)\n+    add_argument_checking (&body, sym);\n+\n   tmp = gfc_trans_code (ns->code);\n   gfc_add_expr_to_block (&body, tmp);\n "}, {"sha": "28fa637a6e4c297dd61907b62bdd14f7e3221c87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cadb8f42464b17b8dff55942d00378b1d8a1a979", "patch": "@@ -1,3 +1,17 @@\n+2009-04-11  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/37746\n+\t* gfortran.dg/bounds_check_strlen_1.f90: New test.\n+\t* gfortran.dg/bounds_check_strlen_2.f90: New test.\n+\t* gfortran.dg/bounds_check_strlen_3.f90: New test.\n+\t* gfortran.dg/bounds_check_strlen_4.f90: New test.\n+\t* gfortran.dg/bounds_check_strlen_5.f90: New test.\n+\t* gfortran.dg/bounds_check_strlen_6.f90: New test.\n+\t* gfortran.dg/bounds_check_strlen_7.f90: New test.\n+\t* gfortran.fortran-torture/execute/intrinsic_index.f90: Fix wrong\n+\texpected string length that failed with -fbounds-check now.\n+\t* gfortran.fortran-torture/execute/intrinsic_trim.f90: Ditto.\n+\n 2009-04-11  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/39692"}, {"sha": "44673024b825eb6776a4e0f8fc54c69d7a45ee91", "filename": "gcc/testsuite/gfortran.dg/bounds_check_strlen_1.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_1.f90?ref=cadb8f42464b17b8dff55942d00378b1d8a1a979", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! { dg-shouldfail \"Character length mismatch\" }\n+\n+! PR fortran/37746\n+! Test bounds-checking for string length of dummy arguments.\n+\n+SUBROUTINE test (str)\n+  IMPLICIT NONE\n+  CHARACTER(len=5) :: str\n+END SUBROUTINE test\n+\n+PROGRAM main\n+  IMPLICIT NONE\n+  CALL test ('abc') ! String is too short.\n+END PROGRAM main\n+\n+! { dg-output \"shorter than the declared one for dummy argument 'str' \\\\(3/5\\\\)\" }"}, {"sha": "7ecce2a71d49ae1257ec51598238f5af3f251fb5", "filename": "gcc/testsuite/gfortran.dg/bounds_check_strlen_2.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_2.f90?ref=cadb8f42464b17b8dff55942d00378b1d8a1a979", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! { dg-shouldfail \"Character length mismatch\" }\n+\n+! PR fortran/37746\n+! Test bounds-checking for string length of dummy arguments.\n+\n+MODULE m\n+\n+CONTAINS\n+\n+  SUBROUTINE test (str, n)\n+    IMPLICIT NONE\n+    CHARACTER(len=n) :: str\n+    INTEGER :: n\n+  END SUBROUTINE test\n+\n+  SUBROUTINE test2 (str)\n+    IMPLICIT NONE\n+    CHARACTER(len=*) :: str\n+    CALL test (str, 5) ! Expected length of str is 5.\n+  END SUBROUTINE test2\n+\n+END MODULE m\n+\n+PROGRAM main\n+  USE m\n+  IMPLICIT NONE\n+  CALL test2 ('abc') ! String is too short.\n+END PROGRAM main\n+\n+! { dg-output \"shorter than the declared one for dummy argument 'str' \\\\(3/5\\\\)\" }\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "69be0884c3b717406b5d8ad49f91e962436755c9", "filename": "gcc/testsuite/gfortran.dg/bounds_check_strlen_3.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_3.f90?ref=cadb8f42464b17b8dff55942d00378b1d8a1a979", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! { dg-shouldfail \"Character length mismatch\" }\n+\n+! PR fortran/37746\n+! Test bounds-checking for string length of dummy arguments.\n+\n+MODULE m\n+\n+CONTAINS\n+\n+  SUBROUTINE test (str)\n+    IMPLICIT NONE\n+    CHARACTER(len=5), POINTER :: str\n+  END SUBROUTINE test\n+\n+  SUBROUTINE test2 (n)\n+    IMPLICIT NONE\n+    INTEGER :: n\n+    CHARACTER(len=n), POINTER :: str\n+    CALL test (str)\n+  END SUBROUTINE test2\n+\n+END MODULE m\n+\n+PROGRAM main\n+  USE m\n+  IMPLICIT NONE\n+  CALL test2 (7) ! Too long.\n+END PROGRAM main\n+\n+! { dg-output \"does not match the declared one for dummy argument 'str' \\\\(7/5\\\\)\" }\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "db8ce3c3b11872cad890b10df5c0290f29f3d5af", "filename": "gcc/testsuite/gfortran.dg/bounds_check_strlen_4.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_4.f90?ref=cadb8f42464b17b8dff55942d00378b1d8a1a979", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! { dg-shouldfail \"Character length mismatch\" }\n+\n+! PR fortran/37746\n+! Test bounds-checking for string length of dummy arguments.\n+\n+MODULE m\n+\n+CONTAINS\n+\n+  SUBROUTINE test (str)\n+    IMPLICIT NONE\n+    CHARACTER(len=5), ALLOCATABLE :: str(:)\n+  END SUBROUTINE test\n+\n+  SUBROUTINE test2 (n)\n+    IMPLICIT NONE\n+    INTEGER :: n\n+    CHARACTER(len=n), ALLOCATABLE :: str(:)\n+    CALL test (str)\n+  END SUBROUTINE test2\n+\n+END MODULE m\n+\n+PROGRAM main\n+  USE m\n+  IMPLICIT NONE\n+  CALL test2 (7) ! Too long.\n+END PROGRAM main\n+\n+! { dg-output \"does not match the declared one for dummy argument 'str' \\\\(7/5\\\\)\" }\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "36fda721f3036d0c1d99fdc142d51a64a6afc337", "filename": "gcc/testsuite/gfortran.dg/bounds_check_strlen_5.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_5.f90?ref=cadb8f42464b17b8dff55942d00378b1d8a1a979", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! { dg-shouldfail \"Character length mismatch\" }\n+\n+! PR fortran/37746\n+! Test bounds-checking for string length of dummy arguments.\n+\n+MODULE m\n+\n+CONTAINS\n+\n+  SUBROUTINE test (str)\n+    IMPLICIT NONE\n+    CHARACTER(len=5) :: str(:) ! Assumed shape.\n+  END SUBROUTINE test\n+\n+  SUBROUTINE test2 (n)\n+    IMPLICIT NONE\n+    INTEGER :: n\n+    CHARACTER(len=n) :: str(2)\n+    CALL test (str)\n+  END SUBROUTINE test2\n+\n+END MODULE m\n+\n+PROGRAM main\n+  USE m\n+  IMPLICIT NONE\n+  CALL test2 (7) ! Too long.\n+END PROGRAM main\n+\n+! { dg-output \"does not match the declared one for dummy argument 'str' \\\\(7/5\\\\)\" }\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "550cca8431f46dbb6b679b73ccd08ebc715f6af2", "filename": "gcc/testsuite/gfortran.dg/bounds_check_strlen_6.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_6.f90?ref=cadb8f42464b17b8dff55942d00378b1d8a1a979", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+\n+! PR fortran/37746\n+! Ensure that too long or matching string lengths don't trigger the runtime\n+! error for matching string lengths, if the dummy argument is neither\n+! POINTER nor ALLOCATABLE or assumed-shape.\n+! Also check that absent OPTIONAL arguments don't trigger the check.\n+\n+MODULE m\n+CONTAINS\n+\n+  SUBROUTINE test (str, opt)\n+    IMPLICIT NONE\n+    CHARACTER(len=5) :: str\n+    CHARACTER(len=5), OPTIONAL :: opt\n+  END SUBROUTINE test\n+\n+END MODULE m\n+\n+PROGRAM main\n+  USE m\n+  IMPLICIT NONE\n+  CALL test ('abcde')  ! String length matches.\n+  CALL test ('abcdef') ! String too long, is ok.\n+END PROGRAM main\n+\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "9f08ba1ca8f42a8f347d900c9bf8c7ed15d43285", "filename": "gcc/testsuite/gfortran.dg/bounds_check_strlen_7.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_strlen_7.f90?ref=cadb8f42464b17b8dff55942d00378b1d8a1a979", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! { dg-shouldfail \"Character length mismatch\" }\n+\n+! PR fortran/37746\n+! Test bounds-checking for string length of dummy arguments.\n+\n+MODULE m\n+CONTAINS\n+\n+  SUBROUTINE test (opt)\n+    IMPLICIT NONE\n+    CHARACTER(len=5), OPTIONAL :: opt\n+  END SUBROUTINE test\n+\n+END MODULE m\n+\n+PROGRAM main\n+  USE m\n+  IMPLICIT NONE\n+  CALL test ('') ! 0 length, but not absent argument.\n+END PROGRAM main\n+\n+! { dg-output \"shorter than the declared one for dummy argument 'opt' \\\\(0/5\\\\)\" }\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "76f0aae532a22b0ec7b8729c27d4eeacb32ecb0b", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/intrinsic_index.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_index.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_index.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_index.f90?ref=cadb8f42464b17b8dff55942d00378b1d8a1a979", "patch": "@@ -8,7 +8,7 @@ program test\n end\n \n function w(str)\n-  character(len=8) str\n+  character(len=7) str\n   integer w\n   w = index(str, \"R\")\n end"}, {"sha": "d57610cca5214637e2a8b8d6b16b49df218f0e59", "filename": "gcc/testsuite/gfortran.fortran-torture/execute/intrinsic_trim.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_trim.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cadb8f42464b17b8dff55942d00378b1d8a1a979/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_trim.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fexecute%2Fintrinsic_trim.f90?ref=cadb8f42464b17b8dff55942d00378b1d8a1a979", "patch": "@@ -3,7 +3,7 @@ program intrinsic_trim\n   character(len=8) a\n   character(len=4) b,work\n   a='1234    '\n-  b=work(9,a)\n+  b=work(8,a)\n   if (llt(b,\"1234\")) call abort()\n   a='     '\n   b=trim(a)"}]}