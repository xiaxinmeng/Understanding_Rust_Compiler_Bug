{"sha": "0ee55ad88a745b42dc1466c5ae6360f83ba3c628", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVlNTVhZDg4YTc0NWI0MmRjMTQ2NmM1YWU2MzYwZjgzYmEzYzYyOA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-10-05T13:09:48Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-10-05T13:09:48Z"}, "message": "c-pretty-print.c: Fix comment formatting.\n\n\t* c-pretty-print.c: Fix comment formatting.\n\t* cfglayout.c: Likewise.\n\t* cfgloopanal.c: Likewise.\n\t* cppcharset.c: Likewise.\n\t* dbxout.c: Likewise.\n\t* ggc-page.c: Likewise.\n\t* ggc.h: Likewise.\n\t* target.h: Likewise.\n\nFrom-SVN: r72110", "tree": {"sha": "e7252e6b30d0314c0a91a10384c241b692dfaf01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7252e6b30d0314c0a91a10384c241b692dfaf01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ee55ad88a745b42dc1466c5ae6360f83ba3c628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee55ad88a745b42dc1466c5ae6360f83ba3c628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ee55ad88a745b42dc1466c5ae6360f83ba3c628", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/comments", "author": null, "committer": null, "parents": [{"sha": "35222de242df6eb8698fda53c711915914639f68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35222de242df6eb8698fda53c711915914639f68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35222de242df6eb8698fda53c711915914639f68"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "3bdbbe50845272cc342bcd5e12e1f751322efcce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ee55ad88a745b42dc1466c5ae6360f83ba3c628", "patch": "@@ -1,3 +1,14 @@\n+2003-10-05  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-pretty-print.c: Fix comment formatting.\n+\t* cfglayout.c: Likewise.\n+\t* cfgloopanal.c: Likewise.\n+\t* cppcharset.c: Likewise.\n+\t* dbxout.c: Likewise.\n+\t* ggc-page.c: Likewise.\n+\t* ggc.h: Likewise.\n+\t* target.h: Likewise.\n+\n 2003-10-04  Kelley Cook  <kelleycook@wideopenwest.com>\n \n \t* gengtype-lex.l: Recognize typedef of functions without PARAMS macro."}, {"sha": "9297712e2ac9f3763c2d4f28017dda1b876dbc21", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=0ee55ad88a745b42dc1466c5ae6360f83ba3c628", "patch": "@@ -81,7 +81,7 @@ static void pp_c_assignment_expression (c_pretty_printer *, tree);\n /* declarations.  */\n \n \f\n-/* Helper functions. */\n+/* Helper functions.  */\n \n void\n pp_c_whitespace (c_pretty_printer *pp)\n@@ -223,7 +223,7 @@ pp_c_pointer (c_pretty_printer *pp, tree t)\n   switch (TREE_CODE (t))\n     {\n     case POINTER_TYPE:\n-      /* It is easier to handle C++ reference types here. */\n+      /* It is easier to handle C++ reference types here.  */\n     case REFERENCE_TYPE:\n       if (TREE_CODE (TREE_TYPE (t)) == POINTER_TYPE)\n         pp_c_pointer (pp, TREE_TYPE (t));"}, {"sha": "7c7600af9ae0f124e8bb86e16dac94d8a9b8f0da", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=0ee55ad88a745b42dc1466c5ae6360f83ba3c628", "patch": "@@ -423,7 +423,7 @@ insn_scope (rtx insn)\n      the first valid instruction in the function and when that first\n      insn is part of an inlined function then the low_pc of that\n      inlined function is messed up.  Likewise for the epilogue and\n-     the last valid instruction. */\n+     the last valid instruction.  */\n   if (loc == prologue_locator || loc == epilogue_locator)\n     return DECL_INITIAL (cfun->decl);\n "}, {"sha": "60c78eaa77a8dc08cedd83868f036cf3e94a1701", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=0ee55ad88a745b42dc1466c5ae6360f83ba3c628", "patch": "@@ -992,7 +992,7 @@ mark_irreducible_loops (struct loops *loops)\n       }\n \n   /* Compute dfs numbering, starting from loop headers, and mark found\n-     loops.*/\n+     loops.  */\n   tick = 0;\n   for (i = 0; i < last_basic_block + loops->num; i++)\n     {"}, {"sha": "6794cfe52ba289399fdc9da8c0d806718ab1ed67", "filename": "gcc/cppcharset.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2Fcppcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2Fcppcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppcharset.c?ref=0ee55ad88a745b42dc1466c5ae6360f83ba3c628", "patch": "@@ -93,7 +93,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n /* This structure is used for a resizable string buffer throughout.  */\n /* Don't call it strbuf, as that conflicts with unistd.h on systems\n-   such as DYNIX/ptx where unistd.h includes stropts.h. */\n+   such as DYNIX/ptx where unistd.h includes stropts.h.  */\n struct _cpp_strbuf\n {\n   uchar *text;"}, {"sha": "84700b447f6d5f4abbf8c3ebb8594039e3f4e259", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=0ee55ad88a745b42dc1466c5ae6360f83ba3c628", "patch": "@@ -541,7 +541,7 @@ dbxout_init (const char *input_file_name)\n   dbxout_typedefs (syms);\n }\n \n-/* Output any typedef names for types described by TYPE_DECLs in SYMS. */\n+/* Output any typedef names for types described by TYPE_DECLs in SYMS.  */\n \n static void\n dbxout_typedefs (tree syms)"}, {"sha": "ed164e9a66d99ebe5884face3bd77b0cb66126f4", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=0ee55ad88a745b42dc1466c5ae6360f83ba3c628", "patch": "@@ -1984,7 +1984,7 @@ ggc_pch_write_object (struct ggc_pch_data *d ATTRIBUTE_UNUSED,\n     fatal_error (\"can't write PCH file: %m\");\n \n   /* If SIZE is not the same as OBJECT_SIZE(order), then we need to pad the\n-     object out to OBJECT_SIZE(order).  This happens for strings. */\n+     object out to OBJECT_SIZE(order).  This happens for strings.  */\n \n   if (size != OBJECT_SIZE (order))\n     {\n@@ -1994,15 +1994,15 @@ ggc_pch_write_object (struct ggc_pch_data *d ATTRIBUTE_UNUSED,\n          than most padding requests as the source for our null bytes.  This\n          permits us to do the padding with fwrite() rather than fseek(), and\n          limits the chance the the OS may try to flush any outstanding\n-         writes. */\n+         writes.  */\n       if (padding <= sizeof(emptyBytes))\n         {\n           if (fwrite (emptyBytes, 1, padding, f) != padding)\n             fatal_error (\"can't write PCH file\");\n         }\n       else\n         {\n-          /* Larger than our buffer?  Just default to fseek. */\n+          /* Larger than our buffer?  Just default to fseek.  */\n           if (fseek (f, padding, SEEK_CUR) != 0)\n             fatal_error (\"can't write PCH file\");\n         }"}, {"sha": "0e2a63e940d44523e45090ac4d1a069176eff0b9", "filename": "gcc/ggc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=0ee55ad88a745b42dc1466c5ae6360f83ba3c628", "patch": "@@ -63,7 +63,7 @@ extern void gt_pch_note_reorder (void *, void *, gt_handle_reorder);\n typedef void (*gt_pointer_walker) (void *);\n \n /* Structures for the easy way to mark roots.\n-   In an array, terminated by having base == NULL.*/\n+   In an array, terminated by having base == NULL.  */\n struct ggc_root_tab {\n   void *base;\n   size_t nelt;"}, {"sha": "15d723334b85457130fb158a2734b62d9a56ba70", "filename": "gcc/target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee55ad88a745b42dc1466c5ae6360f83ba3c628/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=0ee55ad88a745b42dc1466c5ae6360f83ba3c628", "patch": "@@ -407,7 +407,7 @@ struct gcc_target\n \t\t\t\t    tree type, int *pretend_arg_size, int second_time);\n     bool (*strict_argument_naming) (CUMULATIVE_ARGS *ca);\n     /* Returns true if we should use SETUP_INCOMING_VARARGS and/or\n-       STRICT_ARGUMENT_NAMING. */\n+       STRICT_ARGUMENT_NAMING.  */\n     bool (*pretend_outgoing_varargs_named) (CUMULATIVE_ARGS *ca);\n   } calls;\n };"}]}