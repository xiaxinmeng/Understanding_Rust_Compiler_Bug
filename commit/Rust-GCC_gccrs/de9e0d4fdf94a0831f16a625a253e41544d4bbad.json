{"sha": "de9e0d4fdf94a0831f16a625a253e41544d4bbad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU5ZTBkNGZkZjk0YTA4MzFmMTZhNjI1YTI1M2U0MTU0NGQ0YmJhZA==", "commit": {"author": {"name": "Roland McGrath", "email": "roland@gcc.gnu.org", "date": "1993-03-06T08:19:15Z"}, "committer": {"name": "Roland McGrath", "email": "roland@gcc.gnu.org", "date": "1993-03-06T08:19:15Z"}, "message": "Initial revision\n\nFrom-SVN: r3667", "tree": {"sha": "2720807bfab57938e96a7892a8189e564445a11d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2720807bfab57938e96a7892a8189e564445a11d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de9e0d4fdf94a0831f16a625a253e41544d4bbad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de9e0d4fdf94a0831f16a625a253e41544d4bbad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de9e0d4fdf94a0831f16a625a253e41544d4bbad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de9e0d4fdf94a0831f16a625a253e41544d4bbad/comments", "author": null, "committer": null, "parents": [{"sha": "143d1a495dc194101fd93a38da4d5178734d1ddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/143d1a495dc194101fd93a38da4d5178734d1ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/143d1a495dc194101fd93a38da4d5178734d1ddf"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "18053ece8354fd4eef0e47a47fd9401e612fe841", "filename": "gcc/config/i386/svr3gas.h", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de9e0d4fdf94a0831f16a625a253e41544d4bbad/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de9e0d4fdf94a0831f16a625a253e41544d4bbad/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsvr3gas.h?ref=de9e0d4fdf94a0831f16a625a253e41544d4bbad", "patch": "@@ -0,0 +1,79 @@\n+/* Definitions for Intel 386 running system V, using gas.\n+   Copyright (C) 1992 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"gas.h\"\n+\n+/* Add stuff that normally comes from i386v.h */\n+\n+/* longjmp may fail to restore the registers if called from the same\n+   function that called setjmp.  To compensate, the compiler avoids\n+   putting variables in registers in functions that use both setjmp\n+   and longjmp.  */\n+\n+#define NON_SAVING_SETJMP \\\n+  (current_function_calls_setjmp && current_function_calls_longjmp)\n+\n+/* longjmp may fail to restore the stack pointer if the saved frame\n+   pointer is the same as the caller's frame pointer.  Requiring a frame\n+   pointer in any function that calls setjmp or longjmp avoids this\n+   problem, unless setjmp and longjmp are called from the same function.\n+   Since a frame pointer will be required in such a function, it is OK\n+   that the stack pointer is not restored.  */\n+\n+#undef FRAME_POINTER_REQUIRED\n+#define FRAME_POINTER_REQUIRED \\\n+  (current_function_calls_setjmp || current_function_calls_longjmp)\n+\n+/* Modify ASM_OUTPUT_LOCAL slightly to test -msvr3-shlib, adapted to gas  */\n+#undef ASM_OUTPUT_LOCAL\n+#define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    int align = exact_log2 (ROUNDED);\t\t\t\\\n+    if (align > 2) align = 2;\t\t\t\t\\\n+    if (TARGET_SVR3_SHLIB)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tdata_section ();\t\t\t\t\\\n+\tASM_OUTPUT_ALIGN ((FILE), align == -1 ? 2 : align); \\\n+\tASM_OUTPUT_LABEL ((FILE), (NAME));\t\t\\\n+\tfprintf ((FILE), \"\\t.set .,.+%u\\n\", (ROUNDED));\t\\\n+      }\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\tfputs (\".lcomm \", (FILE));\t\t\t\\\n+\tassemble_name ((FILE), (NAME));\t\t\t\\\n+\tfprintf ((FILE), \",%u\\n\", (ROUNDED));\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* Add stuff that normally comes from i386v.h via svr3.h */\n+\n+/* Define the actual types of some ANSI-mandated types.  These\n+   definitions should work for most SVR3 systems.  */\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"long int\"\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE BITS_PER_WORD"}]}