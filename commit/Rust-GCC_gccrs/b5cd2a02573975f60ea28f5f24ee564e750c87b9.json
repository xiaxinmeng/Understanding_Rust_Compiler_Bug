{"sha": "b5cd2a02573975f60ea28f5f24ee564e750c87b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVjZDJhMDI1NzM5NzVmNjBlYTI4ZjVmMjRlZTU2NGU3NTBjODdiOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-01-06T11:39:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-01-06T11:39:41Z"}, "message": "re PR debug/59350 (ICE: in vt_expand_var_loc_chain, at var-tracking.c:8212)\n\n\tPR debug/59350\n\tPR debug/59510\n\t* var-tracking.c (add_stores): Preserve the value of the source even if\n\twe don't record the store.\n\nFrom-SVN: r206356", "tree": {"sha": "e57506ad36440ad7f660454e126f1e278aca85eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e57506ad36440ad7f660454e126f1e278aca85eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5cd2a02573975f60ea28f5f24ee564e750c87b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5cd2a02573975f60ea28f5f24ee564e750c87b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5cd2a02573975f60ea28f5f24ee564e750c87b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5cd2a02573975f60ea28f5f24ee564e750c87b9/comments", "author": null, "committer": null, "parents": [{"sha": "04ba12ef8d883480ed9a178cef4e1e36be919c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ba12ef8d883480ed9a178cef4e1e36be919c54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04ba12ef8d883480ed9a178cef4e1e36be919c54"}], "stats": {"total": 150, "additions": 141, "deletions": 9}, "files": [{"sha": "a810fa22c22b8c62a91a1c0a3824bb6eacda49dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cd2a02573975f60ea28f5f24ee564e750c87b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cd2a02573975f60ea28f5f24ee564e750c87b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5cd2a02573975f60ea28f5f24ee564e750c87b9", "patch": "@@ -1,3 +1,10 @@\n+2014-01-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR debug/59350\n+\tPR debug/59510\n+\t* var-tracking.c (add_stores): Preserve the value of the source even if\n+\twe don't record the store.\n+\n 2014-01-06  Terry Guo  <terry.guo@arm.com>\n \n \t* config.gcc (arm*-*-*): Check --with-arch against arm-arches.def."}, {"sha": "e2b84c5278fd8beab86845edf4b7ed3e6b9ebe07", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cd2a02573975f60ea28f5f24ee564e750c87b9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cd2a02573975f60ea28f5f24ee564e750c87b9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b5cd2a02573975f60ea28f5f24ee564e750c87b9", "patch": "@@ -1,3 +1,9 @@\n+2014-01-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/pr59350.c: Tweak.\n+\t* gcc.dg/pr59350-2.c: New test.\n+\t* g++.dg/pr59510.C: Likewise.\n+\n 2014-01-06  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/59023"}, {"sha": "dcdf860dcf7309f937113508e898ddb21ce85b4b", "filename": "gcc/testsuite/g++.dg/pr59510.C", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cd2a02573975f60ea28f5f24ee564e750c87b9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr59510.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cd2a02573975f60ea28f5f24ee564e750c87b9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr59510.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr59510.C?ref=b5cd2a02573975f60ea28f5f24ee564e750c87b9", "patch": "@@ -0,0 +1,82 @@\n+// PR debug/59510\n+// { dg-do compile }\n+// { dg-options \"-O2 -g --param=large-stack-frame-growth=1\" }\n+\n+template <typename _Iterator>\n+struct _Iter_base\n+{\n+  typedef _Iterator iterator_type;\n+};\n+template <typename _CharT>\n+struct basic_ostream;\n+template <typename _CharT>\n+struct basic_ostringstream;\n+template <typename _CharT>\n+struct ostreambuf_iterator;\n+typedef basic_ostringstream <char>ostringstream;\n+template <typename _Iterator> struct _Miter_base : _Iter_base <_Iterator>\n+{\n+};\n+template <typename _Iterator>\n+typename _Miter_base <_Iterator>::iterator_type __miter_base (_Iterator);\n+template <typename _CharT>\n+ostreambuf_iterator <_CharT>\n+__copy_move_a2 (ostreambuf_iterator <_CharT>);\n+template <typename _II, typename _OI>\n+_OI copy (_II __first, _II __last, _OI __result)\n+{\n+  __copy_move_a2 <false> (__first, __miter_base (__last), __result);\n+}\n+struct ios_base {\n+  struct _Words {\n+    int *_M_pword;\n+    long _M_iword;\n+  };\n+  _Words _M_local_word[8];\n+};\n+template <typename _CharT>\n+struct basic_streambuf\n+{\n+  typedef _CharT char_type;\n+  int sputn (char_type *, int);\n+};\n+template <typename _CharT>\n+struct ostreambuf_iterator\n+{\n+  typedef basic_streambuf <_CharT> streambuf_type;\n+  typedef basic_ostream <_CharT> ostream_type;\n+  streambuf_type *_M_sbuf;\n+  bool _M_failed;\n+  ostreambuf_iterator (ostream_type __s) : _M_sbuf (__s.rdbuf ()), _M_failed () {}\n+  void _M_put (_CharT * __ws, int __len)\n+  {\n+    if (_M_failed && _M_sbuf->sputn (__ws, __len) != __len) _M_failed = true;\n+  }\n+};\n+template <bool, typename _CharT>\n+void __copy_move_a2 (_CharT * __first,_CharT * __last,ostreambuf_iterator <_CharT> __result)\n+{\n+  int __num = __last - __first;\n+  __result._M_put (__first, __num);\n+}\n+template <typename _CharT>\n+struct basic_ios : ios_base\n+{\n+  basic_streambuf <_CharT> *rdbuf ();\n+};\n+template <typename _CharT>\n+struct basic_ostream : public basic_ios <_CharT>\n+{\n+};\n+template <typename _CharT>\n+struct basic_ostringstream : public basic_ostream <_CharT>\n+{\n+};\n+void\n+test01 () {\n+  char data1[] = \"foo\";\n+  char *beg1 = data1;\n+  ostringstream oss1;\n+  ostreambuf_iterator <char> out1 (oss1);\n+  out1 = copy (beg1, beg1, out1);\n+}"}, {"sha": "2fea85fcf71951651bdcc96a7e00aba9f6721041", "filename": "gcc/testsuite/gcc.dg/pr59350-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cd2a02573975f60ea28f5f24ee564e750c87b9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59350-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cd2a02573975f60ea28f5f24ee564e750c87b9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59350-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59350-2.c?ref=b5cd2a02573975f60ea28f5f24ee564e750c87b9", "patch": "@@ -0,0 +1,29 @@\n+/* PR debug/59350 */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O -g \" } */\n+\n+typedef struct\n+{\n+  void *v;\n+  int len;\n+  int sign;\n+} ZVALUE;\n+\n+extern int pred (ZVALUE);\n+\n+static unsigned long\n+small_factor (ZVALUE z)\n+{\n+  if (z.len > 0)\n+    return 0;\n+\n+  return pred (z) ? -1 : 0;\n+}\n+\n+unsigned long\n+zfactor (ZVALUE z)\n+{\n+  z.sign = 0;\n+  return small_factor (z);\n+}"}, {"sha": "fa632454ae1e86df77bda7b213b37a92545012c0", "filename": "gcc/testsuite/gcc.dg/pr59350.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cd2a02573975f60ea28f5f24ee564e750c87b9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59350.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cd2a02573975f60ea28f5f24ee564e750c87b9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59350.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr59350.c?ref=b5cd2a02573975f60ea28f5f24ee564e750c87b9", "patch": "@@ -1,4 +1,4 @@\n-/* PR rtl-optimization/59350 */\n+/* PR debug/59350 */\n /* Testcase by Ryan Mansfield <rmansfield@qnx.com> */\n \n /* { dg-do compile } */"}, {"sha": "cfa785079f64a386be4de274679c56fdaf2cd958", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5cd2a02573975f60ea28f5f24ee564e750c87b9/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5cd2a02573975f60ea28f5f24ee564e750c87b9/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=b5cd2a02573975f60ea28f5f24ee564e750c87b9", "patch": "@@ -5930,6 +5930,13 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n   if (type != MO_VAL_SET)\n     goto log_and_return;\n \n+  v = find_use_val (oloc, mode, cui);\n+\n+  if (!v)\n+    goto log_and_return;\n+\n+  resolve = preserve = !cselib_preserved_value_p (v);\n+\n   /* We cannot track values for multiple-part variables, so we track only\n      locations for tracked parameters passed either by invisible reference\n      or directly in multiple locations.  */\n@@ -5943,14 +5950,15 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n \t   && XEXP (DECL_INCOMING_RTL (REG_EXPR (loc)), 0) != arg_pointer_rtx)\n           || (GET_CODE (DECL_INCOMING_RTL (REG_EXPR (loc))) == PARALLEL\n \t      && XVECLEN (DECL_INCOMING_RTL (REG_EXPR (loc)), 0) > 1)))\n-    goto log_and_return;\n-\n-  v = find_use_val (oloc, mode, cui);\n-\n-  if (!v)\n-    goto log_and_return;\n-\n-  resolve = preserve = !cselib_preserved_value_p (v);\n+    {\n+      /* Although we don't use the value here, it could be used later by the\n+\t mere virtue of its existence as the operand of the reverse operation\n+\t that gave rise to it (typically extension/truncation).  Make sure it\n+\t is preserved as required by vt_expand_var_loc_chain.  */\n+      if (preserve)\n+\tpreserve_value (v);\n+      goto log_and_return;\n+    }\n \n   if (loc == stack_pointer_rtx\n       && hard_frame_pointer_adjustment != -1"}]}