{"sha": "bbea461bd91a323cd5e4d537c7362abc7fe591e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJlYTQ2MWJkOTFhMzIzY2Q1ZTRkNTM3YzczNjJhYmM3ZmU1OTFlMg==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2006-12-14T12:11:38Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2006-12-14T12:11:38Z"}, "message": "spu.c (TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD): Defined.\n\n        * spu.c (TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD): Defined.\n        (spu_init_builtins): Mark the SPU_MASK_FOR_LOAD builtin decl as read\n        only.\n        (spu_expand_builtin_1): Handle the SPU_MASK_FOR_LOAD builtin.\n        (spu_builtin_mask_for_load): New.\n        * spu-builtins.def (SPU_MASK_FOR_LOAD): Define new builtin.\n        * spu.md (UNSPEC_SPU_REALIGN_LOAD, UNSPEC_SPU_MASK_FOR_LOAD):New.\n        (vec_realign_load_<mode>, spu_lvsr): New.\n\n\nCo-Authored-By: Trevor Smigiel <Trevor_Smigiel@playstation.sony.com>\n\nFrom-SVN: r119857", "tree": {"sha": "01256dac1bd1ac71523dfbd3c0306557336e2f1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01256dac1bd1ac71523dfbd3c0306557336e2f1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbea461bd91a323cd5e4d537c7362abc7fe591e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbea461bd91a323cd5e4d537c7362abc7fe591e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbea461bd91a323cd5e4d537c7362abc7fe591e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbea461bd91a323cd5e4d537c7362abc7fe591e2/comments", "author": null, "committer": null, "parents": [{"sha": "f4f7486bcfbf8ccde6d3214e6b37a17ad771f198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4f7486bcfbf8ccde6d3214e6b37a17ad771f198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4f7486bcfbf8ccde6d3214e6b37a17ad771f198"}], "stats": {"total": 112, "additions": 110, "deletions": 2}, "files": [{"sha": "e768519e5c24115122a22d1188e027d7507d8ef1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbea461bd91a323cd5e4d537c7362abc7fe591e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbea461bd91a323cd5e4d537c7362abc7fe591e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbea461bd91a323cd5e4d537c7362abc7fe591e2", "patch": "@@ -1,3 +1,15 @@\n+2006-12-14  Dorit Nuzman  <dorit@il.ibm.com>\n+\t    Trevor Smigiel  <trevor_smigiel@playstation.sony.com>\n+\n+\t* spu.c (TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD): Defined.\n+\t(spu_init_builtins): Mark the SPU_MASK_FOR_LOAD builtin decl as read \n+\tonly.   \n+\t(spu_expand_builtin_1): Handle the SPU_MASK_FOR_LOAD builtin.\n+\t(spu_builtin_mask_for_load): New.\n+\t* spu-builtins.def (SPU_MASK_FOR_LOAD): Define new builtin.\n+\t* spu.md (UNSPEC_SPU_REALIGN_LOAD, UNSPEC_SPU_MASK_FOR_LOAD):New.\n+\t(vec_realign_load_<mode>, spu_lvsr): New.\n+\n 2006-12-13  Ian Lance Taylor  <iant@google.com>\n \n \tPR c++/19564"}, {"sha": "c8b7851ab67540fa6255e090aefc894331adfe78", "filename": "gcc/config/spu/spu-builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbea461bd91a323cd5e4d537c7362abc7fe591e2/gcc%2Fconfig%2Fspu%2Fspu-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbea461bd91a323cd5e4d537c7362abc7fe591e2/gcc%2Fconfig%2Fspu%2Fspu-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-builtins.def?ref=bbea461bd91a323cd5e4d537c7362abc7fe591e2", "patch": "@@ -246,6 +246,7 @@ DEF_BUILTIN (SPU_CMPABSEQ,   CODE_FOR_cmeq_v4sf,      \"spu_cmpabseq\",   B_INSN,\n DEF_BUILTIN (SPU_CMPABSGT,   CODE_FOR_cmgt_v4sf,      \"spu_cmpabsgt\",   B_INSN,     _A3(SPU_BTI_UV4SI,    SPU_BTI_V4SF,   SPU_BTI_V4SF))\n DEF_BUILTIN (SPU_IDISABLE,   CODE_FOR_spu_idisable,   \"spu_idisable\",   B_INSN,     _A1(SPU_BTI_VOID))\n DEF_BUILTIN (SPU_IENABLE,    CODE_FOR_spu_ienable,    \"spu_ienable\",    B_INSN,     _A1(SPU_BTI_VOID))\n+DEF_BUILTIN (SPU_MASK_FOR_LOAD,    CODE_FOR_spu_lvsr, \"spu_lvsr\",       B_INSN,     _A2(SPU_BTI_V16QI, SPU_BTI_PTR))\n \n /* definitions to support overloaded generic builtin functions:  */\n "}, {"sha": "83bfdc8f1f8c04e414d814effd09c43f27045c39", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbea461bd91a323cd5e4d537c7362abc7fe591e2/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbea461bd91a323cd5e4d537c7362abc7fe591e2/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=bbea461bd91a323cd5e4d537c7362abc7fe591e2", "patch": "@@ -130,6 +130,7 @@ static void spu_init_libfuncs (void);\n static bool spu_return_in_memory (tree type, tree fntype);\n static void fix_range (const char *);\n static void spu_encode_section_info (tree, rtx, int);\n+static tree spu_builtin_mask_for_load (void);\n \n extern const char *reg_names[];\n rtx spu_compare_op0, spu_compare_op1;\n@@ -248,6 +249,9 @@ const struct attribute_spec spu_attribute_table[];\n #undef  TARGET_ENCODE_SECTION_INFO\n #define TARGET_ENCODE_SECTION_INFO spu_encode_section_info\n \n+#undef TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD\n+#define TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD spu_builtin_mask_for_load\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Sometimes certain combinations of command options do not make sense\n@@ -4288,6 +4292,8 @@ spu_init_builtins (void)\n       d->fndecl =\n \tadd_builtin_function (name, p, END_BUILTINS + i, BUILT_IN_MD,\n \t\t\t      NULL, NULL_TREE);\n+      if (d->fcode == SPU_MASK_FOR_LOAD)\n+\tTREE_READONLY (d->fndecl) = 1;\t\n     }\n }\n \n@@ -4843,6 +4849,31 @@ spu_expand_builtin_1 (struct spu_builtin_description *d,\n       i++;\n     }\n \n+  if (d->fcode == SPU_MASK_FOR_LOAD)\n+    {\n+      enum machine_mode mode = insn_data[icode].operand[1].mode;\n+      tree arg;\n+      rtx addr, op, pat;\n+\n+      /* get addr */\n+      arg = TREE_VALUE (arglist);\n+      gcc_assert (TREE_CODE (TREE_TYPE (arg)) == POINTER_TYPE);\n+      op = expand_expr (arg, NULL_RTX, Pmode, EXPAND_NORMAL);\n+      addr = memory_address (mode, op);\n+\n+      /* negate addr */\n+      op = gen_reg_rtx (GET_MODE (addr));\n+      emit_insn (gen_rtx_SET (VOIDmode, op,\n+                 gen_rtx_NEG (GET_MODE (addr), addr)));\n+      op = gen_rtx_MEM (mode, op);\n+\n+      pat = GEN_FCN (icode) (target, op);\n+      if (!pat) \n+        return 0;\n+      emit_insn (pat);\n+      return target;\n+    }   \n+\n   /* Ignore align_hint, but still expand it's args in case they have\n      side effects. */\n   if (icode == CODE_FOR_spu_align_hint)\n@@ -4962,3 +4993,11 @@ spu_expand_builtin (tree exp,\n   abort ();\n }\n \n+/* Implement targetm.vectorize.builtin_mask_for_load.  */\n+static tree\n+spu_builtin_mask_for_load (void)\n+{\n+  struct spu_builtin_description *d = &spu_builtins[SPU_MASK_FOR_LOAD];\n+  gcc_assert (d);\n+  return d->fndecl;\n+}"}, {"sha": "60f00fb6cdab2d0ea52c00391ec0faa6c2e7d398", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbea461bd91a323cd5e4d537c7362abc7fe591e2/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbea461bd91a323cd5e4d537c7362abc7fe591e2/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=bbea461bd91a323cd5e4d537c7362abc7fe591e2", "patch": "@@ -142,7 +142,10 @@\n  (UNSPEC_MTSPR          45)\n  (UNSPEC_RDCH           46)\n  (UNSPEC_RCHCNT         47)\n- (UNSPEC_WRCH           48)])\n+ (UNSPEC_WRCH           48)\n+ (UNSPEC_SPU_REALIGN_LOAD 49)\n+ (UNSPEC_SPU_MASK_FOR_LOAD 50)\n+])\n \n (include \"predicates.md\")\n (include \"constraints.md\")\n@@ -3374,3 +3377,53 @@ selb\\t%0,%4,%0,%3\"\n   emit_insn (gen_selb (operands[0], operands[1], operands[2], mask));\n   DONE;\n }\") \n+\n+(define_expand \"vec_realign_load_<mode>\"\n+  [(set (match_operand:ALL 0 \"register_operand\" \"=r\")\n+\t(unspec:ALL [(match_operand:ALL 1 \"register_operand\" \"r\")\n+\t\t     (match_operand:ALL 2 \"register_operand\" \"r\")\n+\t\t     (match_operand:TI 3 \"register_operand\" \"r\")] UNSPEC_SPU_REALIGN_LOAD))]\n+  \"\"\n+  \"\n+{\n+  emit_insn (gen_shufb (operands[0], operands[1], operands[2], operands[3])); \n+  DONE;\n+}\")\n+\n+(define_expand \"spu_lvsr\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"\")\n+        (unspec:V16QI [(match_operand 1 \"memory_operand\" \"\")] UNSPEC_SPU_MASK_FOR_LOAD))]\n+  \"\"\n+  \"\n+{ \n+  rtx addr;\n+  rtx offset = gen_reg_rtx (V8HImode);\n+  rtx addr_bits = gen_reg_rtx (SImode);\n+  rtx addr_bits_vec = gen_reg_rtx (V8HImode);\n+  rtx splatqi = gen_reg_rtx (TImode);\n+  rtx result = gen_reg_rtx (V8HImode);\n+  unsigned char arr[16] = {\n+    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, \n+    0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F};\n+  unsigned char arr2[16] = {\n+    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, \n+    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03};\n+\n+  emit_move_insn (offset, array_to_constant (V8HImode, arr));\n+  emit_move_insn (splatqi, array_to_constant (TImode, arr2));\n+\n+  gcc_assert (GET_CODE (operands[1]) == MEM);\n+  addr = force_reg (Pmode, XEXP (operands[1], 0));\n+  emit_insn (gen_andsi3 (addr_bits, addr, GEN_INT (0xF))); \n+  emit_insn (gen_shufb (addr_bits_vec, addr_bits, addr_bits, splatqi));\n+\n+  /* offset - (addr & 0xF) \n+     It is safe to use a single sfh, because each byte of offset is > 15 and\n+     each byte of addr is <= 15. */\n+  emit_insn (gen_subv8hi3 (result, offset, addr_bits_vec));\n+\n+  result = simplify_gen_subreg (V16QImode, result, V8HImode, 0);\n+  emit_move_insn (operands[0], result);\n+\n+  DONE;\n+}\")"}, {"sha": "7ca23956e6bb68f98a63ba8f3d960fbc499a819e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbea461bd91a323cd5e4d537c7362abc7fe591e2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbea461bd91a323cd5e4d537c7362abc7fe591e2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bbea461bd91a323cd5e4d537c7362abc7fe591e2", "patch": "@@ -1,3 +1,7 @@\n+2006-12-14  Dorit Nuzman  <dorit@il.ibm.com>\n+ \n+\t* lib/target-supports.exp (vect_no_align): Remove spu.\n+\n 2006-12-13  Ian Lance Taylor  <iant@google.com>\n \n \tPR c++/19564"}, {"sha": "0346d2c37829bec9510b67d96c313088cc85871d", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbea461bd91a323cd5e4d537c7362abc7fe591e2/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbea461bd91a323cd5e4d537c7362abc7fe591e2/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=bbea461bd91a323cd5e4d537c7362abc7fe591e2", "patch": "@@ -1789,7 +1789,6 @@ proc check_effective_target_vect_no_align { } {\n     } else {\n \tset et_vect_no_align_saved 0\n \tif { [istarget mipsisa64*-*-*]\n-\t     || [istarget spu-*-*]\n \t     || [istarget sparc*-*-*]\n \t     || [istarget ia64-*-*] } {\n \t    set et_vect_no_align_saved 1"}]}