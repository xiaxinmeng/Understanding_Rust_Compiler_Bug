{"sha": "a1ecc5600464f6a62faab246d522b6328badda90", "node_id": "C_kwDOANBUbNoAKGExZWNjNTYwMDQ2NGY2YTYyZmFhYjI0NmQ1MjJiNjMyOGJhZGRhOTA", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-11-23T13:58:09Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-11-28T01:02:51Z"}, "message": "Fix incorrect _mm_cvtsbh_ss.\n\nAfter supporting real __bf16, the implementation of _mm_cvtsbh_ss went\nwrong.\n\nThe patch add a builtin to generate pslld for the intrinsic, also\nextendbfsf2 is supported with pslld when !HONOR_NANS (BFmode).\n\ntruncsfbf2 is supported with vcvtneps2bf16 when\n!HONOR_NANS (BFmode) && flag_unsafe_math_optimizations.\n\ngcc/ChangeLog:\n\n\tPR target/107748\n\t* config/i386/avx512bf16intrin.h (_mm_cvtsbh_ss): Refined.\n\t* config/i386/i386-builtin-types.def (FLOAT_FTYPE_BFLOAT16):\n\tNew function type.\n\t* config/i386/i386-builtin.def (BDESC): New builtin.\n\t* config/i386/i386-expand.cc (ix86_expand_args_builtin):\n\tHandle the builtin.\n\t* config/i386/i386.md (extendbfsf2): New expander.\n\t(extendbfsf2_1): New define_insn.\n\t(truncsfbf2): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512bf16-cvtsbh2ss-1.c: Scan pslld.\n\t* gcc.target/i386/extendbfsf.c: New test.", "tree": {"sha": "0a9e0bae6c2827b439590d8b1353d89f3c4a2334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a9e0bae6c2827b439590d8b1353d89f3c4a2334"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1ecc5600464f6a62faab246d522b6328badda90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ecc5600464f6a62faab246d522b6328badda90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1ecc5600464f6a62faab246d522b6328badda90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ecc5600464f6a62faab246d522b6328badda90/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14d11df96336e9d06a4c8108b61815ad94866519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14d11df96336e9d06a4c8108b61815ad94866519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14d11df96336e9d06a4c8108b61815ad94866519"}], "stats": {"total": 67, "additions": 61, "deletions": 6}, "files": [{"sha": "75378af558456a10d0458f16d3e0d2c3994124c1", "filename": "gcc/config/i386/avx512bf16intrin.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ecc5600464f6a62faab246d522b6328badda90/gcc%2Fconfig%2Fi386%2Favx512bf16intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ecc5600464f6a62faab246d522b6328badda90/gcc%2Fconfig%2Fi386%2Favx512bf16intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bf16intrin.h?ref=a1ecc5600464f6a62faab246d522b6328badda90", "patch": "@@ -46,9 +46,7 @@ extern __inline float\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_cvtsbh_ss (__bf16 __A)\n {\n-  union{ float a; unsigned int b;} __tmp;\n-  __tmp.b = ((unsigned int)(__A)) << 16;\n-  return __tmp.a;\n+  return __builtin_ia32_cvtbf2sf (__A);\n }\n \n /* vcvtne2ps2bf16 */"}, {"sha": "65fe070e37f6a902deb87a6e4f253614a672b8c9", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ecc5600464f6a62faab246d522b6328badda90/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ecc5600464f6a62faab246d522b6328badda90/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=a1ecc5600464f6a62faab246d522b6328badda90", "patch": "@@ -1281,6 +1281,7 @@ DEF_FUNCTION_TYPE (V4SI, V4SI, V4SI, UHI)\n DEF_FUNCTION_TYPE (V8SI, V8SI, V8SI, UHI)\n \n # BF16 builtins\n+DEF_FUNCTION_TYPE (FLOAT, BFLOAT16)\n DEF_FUNCTION_TYPE (V32BF, V16SF, V16SF)\n DEF_FUNCTION_TYPE (V32BF, V16SF, V16SF, V32BF, USI)\n DEF_FUNCTION_TYPE (V32BF, V16SF, V16SF, USI)"}, {"sha": "d85b1753039c3b4c0794695c6bde66c3669fe1c3", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ecc5600464f6a62faab246d522b6328badda90/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ecc5600464f6a62faab246d522b6328badda90/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=a1ecc5600464f6a62faab246d522b6328badda90", "patch": "@@ -2838,6 +2838,8 @@ BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v8sf_maskz, \"__\n BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v4sf, \"__builtin_ia32_dpbf16ps_v4sf\", IX86_BUILTIN_DPBF16PS_V4SF, UNKNOWN, (int) V4SF_FTYPE_V4SF_V8BF_V8BF)\n BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v4sf_mask, \"__builtin_ia32_dpbf16ps_v4sf_mask\", IX86_BUILTIN_DPBF16PS_V4SF_MASK, UNKNOWN, (int) V4SF_FTYPE_V4SF_V8BF_V8BF_UQI)\n BDESC (0, OPTION_MASK_ISA2_AVX512BF16, CODE_FOR_avx512f_dpbf16ps_v4sf_maskz, \"__builtin_ia32_dpbf16ps_v4sf_maskz\", IX86_BUILTIN_DPBF16PS_V4SF_MASKZ, UNKNOWN, (int) V4SF_FTYPE_V4SF_V8BF_V8BF_UQI)\n+BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_extendbfsf2_1, \"__builtin_ia32_cvtbf2sf\", IX86_BUILTIN_CVTBF2SF, UNKNOWN, (int) FLOAT_FTYPE_BFLOAT16)\n+\n \n /* AVX512FP16.  */\n BDESC (OPTION_MASK_ISA_AVX512VL, OPTION_MASK_ISA2_AVX512FP16, CODE_FOR_addv8hf3_mask, \"__builtin_ia32_addph128_mask\", IX86_BUILTIN_ADDPH128_MASK, UNKNOWN, (int) V8HF_FTYPE_V8HF_V8HF_V8HF_UQI)"}, {"sha": "d26e7e41445d2f4efcadaaf88c380a45c5eb5b13", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ecc5600464f6a62faab246d522b6328badda90/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ecc5600464f6a62faab246d522b6328badda90/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=a1ecc5600464f6a62faab246d522b6328badda90", "patch": "@@ -10423,6 +10423,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       return ix86_expand_sse_ptest (d, exp, target);\n     case FLOAT128_FTYPE_FLOAT128:\n     case FLOAT_FTYPE_FLOAT:\n+    case FLOAT_FTYPE_BFLOAT16:\n     case INT_FTYPE_INT:\n     case UINT_FTYPE_UINT:\n     case UINT16_FTYPE_UINT16:"}, {"sha": "9451883396c1f04f120fe2053963bfe69840fd57", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ecc5600464f6a62faab246d522b6328badda90/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ecc5600464f6a62faab246d522b6328badda90/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a1ecc5600464f6a62faab246d522b6328badda90", "patch": "@@ -130,6 +130,7 @@\n   ;; For AVX/AVX512F support\n   UNSPEC_SCALEF\n   UNSPEC_PCMP\n+  UNSPEC_CVTBFSF\n \n   ;; Generic math support\n   UNSPEC_IEEE_MIN\t; not commutative\n@@ -4961,6 +4962,31 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_expand \"extendbfsf2\"\n+  [(set (match_operand:SF 0 \"register_operand\")\n+\t(unspec:SF\n+\t  [(match_operand:BF 1 \"register_operand\")]\n+\t UNSPEC_CVTBFSF))]\n+ \"TARGET_SSE2 && !HONOR_NANS (BFmode)\")\n+\n+;; Don't use float_extend since psrlld doesn't raise\n+;; exceptions and turn a sNaN into a qNaN.\n+(define_insn \"extendbfsf2_1\"\n+  [(set (match_operand:SF 0 \"register_operand\"   \"=x,Yw\")\n+\t(unspec:SF\n+\t  [(match_operand:BF 1 \"register_operand\" \" 0,Yw\")]\n+\t  UNSPEC_CVTBFSF))]\n+ \"TARGET_SSE2\"\n+ \"@\n+  pslld\\t{$16, %0|%0, 16}\n+  vpslld\\t{$16, %1, %0|%0, %1, 16}\"\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sseishft\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"mode\" \"TI\")\n+   (set_attr \"memory\" \"none\")])\n \n (define_expand \"extend<mode>xf2\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\")\n@@ -5177,7 +5203,19 @@\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"HF\")])\n-\f\n+\n+(define_insn \"truncsfbf2\"\n+  [(set (match_operand:BF 0 \"register_operand\" \"=x, v\")\n+\t(float_truncate:BF\n+\t  (match_operand:SF 1 \"register_operand\" \"x,v\")))]\n+  \"((TARGET_AVX512BF16 && TARGET_AVX512VL) || TARGET_AVXNECONVERT)\n+   && !HONOR_NANS (BFmode) && flag_unsafe_math_optimizations\"\n+  \"@\n+  %{vex%} vcvtneps2bf16\\t{%1, %0|%0, %1}\n+  vcvtneps2bf16\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"isa\" \"avxneconvert,avx512bf16vl\")\n+   (set_attr \"prefix\" \"vex,evex\")])\n+\n ;; Signed conversion to DImode.\n \n (define_expand \"fix_truncxfdi2\""}, {"sha": "edf30b583b96274eae489be1f8bce9b85c7d5d4f", "filename": "gcc/testsuite/gcc.target/i386/avx512bf16-cvtsbh2ss-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ecc5600464f6a62faab246d522b6328badda90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-cvtsbh2ss-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ecc5600464f6a62faab246d522b6328badda90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-cvtsbh2ss-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bf16-cvtsbh2ss-1.c?ref=a1ecc5600464f6a62faab246d522b6328badda90", "patch": "@@ -1,8 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512bf16 -O2\" } */\n /* { dg-additional-options \"-fno-PIE -mfpmath=sse\" { target ia32 } } */\n-/* { dg-final { scan-assembler-times \"sall\\[ \\\\t\\]+\\[^\\{\\n\\]*16\" 1 } } */\n-/* { dg-final { scan-assembler-times \"movl\" 1 } } */\n+/* { dg-final { scan-assembler-times \"pslld\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "a38fa68bdc9e4a3e534e8634df22ecdf7d67ff68", "filename": "gcc/testsuite/gcc.target/i386/extendbfsf.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1ecc5600464f6a62faab246d522b6328badda90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextendbfsf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1ecc5600464f6a62faab246d522b6328badda90/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextendbfsf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextendbfsf.c?ref=a1ecc5600464f6a62faab246d522b6328badda90", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bf16 -mavx512vl -O2 -ffast-math\" } */\n+/* { dg-final { scan-assembler-times \"pslld\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vcvtneps2bf16\" 1 } } */\n+\n+float\n+extendsfbf (__bf16 a)\n+{\n+  return a;\n+}\n+\n+__bf16\n+truncsfbf (float a)\n+{\n+  return a;\n+}"}]}