{"sha": "70659ac0df5a495767794a02c1935f7f56e7fc6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA2NTlhYzBkZjVhNDk1NzY3Nzk0YTAyYzE5MzVmN2Y1NmU3ZmM2ZQ==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1994-02-24T01:05:58Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1994-02-24T01:05:58Z"}, "message": "29th Cygnus<->FSF merge.  Includes cp-* --> cp/* relocation.\n\nFrom-SVN: r6614", "tree": {"sha": "5c47404a9233d592d0e7e75452d327e1f1db8b08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c47404a9233d592d0e7e75452d327e1f1db8b08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70659ac0df5a495767794a02c1935f7f56e7fc6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70659ac0df5a495767794a02c1935f7f56e7fc6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70659ac0df5a495767794a02c1935f7f56e7fc6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70659ac0df5a495767794a02c1935f7f56e7fc6e/comments", "author": null, "committer": null, "parents": [{"sha": "8d08fdba598cf87c3794df53beae1026345ebb02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d08fdba598cf87c3794df53beae1026345ebb02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d08fdba598cf87c3794df53beae1026345ebb02"}], "stats": {"total": 193, "additions": 137, "deletions": 56}, "files": [{"sha": "672e6d266c517692c9bd5418586249c3ab0e9bf0", "filename": "gcc/Makefile.in", "status": "modified", "additions": 137, "deletions": 56, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70659ac0df5a495767794a02c1935f7f56e7fc6e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70659ac0df5a495767794a02c1935f7f56e7fc6e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=70659ac0df5a495767794a02c1935f7f56e7fc6e", "patch": "@@ -65,6 +65,34 @@ INSTALL_DATA = $(INSTALL)\n SYMLINK = ln -s\n MAKEINFO = makeinfo\n TEXI2DVI = texi2dvi\n+MAKEOVERRIDES=\n+\n+FLAGS_TO_PASS = \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"AR_FOR_TARGET=$(AR_FOR_TARGET)\" \\\n+\t\"AS_FOR_TARGET=$(AS_FOR_TARGET)\" \\\n+\t\"BISON=$(BISON)\" \\\n+\t\"CC=$(CC)\" \\\n+\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n+\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CXX_FOR_BUILD=$(CXX_FOR_BUILD)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CXX_FOR_TARGET=$(CXX_FOR_TARGET)\" \\\n+\t\"GCC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LEX=$(LEX)\" \\\n+\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n+\t\"MALLOC=$(MALLOC)\" \\\n+\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n+\t\"OBSTACK=$(OBSTACK)\" \\\n+\t\"RANLIB_FOR_TARGET=$(RANLIB_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"USE_ALLOCA=$(USE_ALLOCA)\" \\\n+\t\"YACC=$(BISON)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"tooldir=$(tooldir)\" \n \n # Define this as & to perform parallel make on a Sequent.\n # Note that this has some bugs, and it seems currently necessary \n@@ -403,14 +431,6 @@ C_OBJS = c-parse.o c-lang.o c-lex.o c-pragma.o \\\n OBJC_OBJS = objc-parse.o objc-act.o c-lex.o c-pragma.o \\\n    c-decl.o c-typeck.o c-convert.o c-aux-info.o c-common.o c-iterate.o\n \n-# Language-specific object files for C++.\n-CPLUS_OBJS = cp-parse.o cp-decl.o cp-decl2.o \\\n-   cp-typeck.o cp-type2.o cp-tree.o cp-ptree.o \\\n-   cp-cvt.o cp-search.o cp-lex.o cp-gc.o cp-call.o \\\n-   cp-class.o cp-init.o cp-method.o cp-except.o \\\n-   cp-expr.o cp-pt.o cp-edsel.o cp-xref.o \\\n-   $(CPLUS_INPUT) cp-spew.o c-common.o cp-error.o cp-errfn.o\n-\n # Files specific to the C interpreter bytecode compiler(s).\n BC_OBJS = bc-emit.o bc-optab.o\n \n@@ -479,7 +499,6 @@ USER_H = va-alpha.h va-h8300.h va-i860.h va-i960.h va-mips.h va-m88k.h \\\n CONFIG_H =\n RTL_H = rtl.h rtl.def machmode.h machmode.def\n TREE_H = tree.h real.h tree.def machmode.h machmode.def\n-CPLUS_TREE_H = $(TREE_H) cp-tree.h cp-tree.def\n BYTECODE_H = bytecode.h bc-emit.h bc-optab.h\n \f\n # Avoid a lot of time thinking about remaking Makefile.in and *.def.\n@@ -489,6 +508,8 @@ Makefile: $(srcdir)/Makefile.in $(srcdir)/configure $(srcdir)/version.c \\\n    $(srcdir)/config/$(xmake_file) $(srcdir)/config/$(tmake_file)\n \t$(SHELL) config.status\n \n+SUBDIRS = ch cp\n+\n all.internal: start.encap rest.encap\n # This is what to compile if making a cross-compiler.\n # Note that we can compile enquire using the cross-compiler just build,\n@@ -570,8 +591,18 @@ g++-cross: $(srcdir)/g++.c\n cc1: $(P) $(C_OBJS) $(OBJS) $(BC_OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cc1 $(C_OBJS) $(OBJS) $(BC_OBJS) $(LIBS)\n \n-cc1plus: $(P) $(CPLUS_OBJS) $(OBJS) $(BC_OBJS) $(LIBDEPS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cc1plus $(CPLUS_OBJS) $(BC_OBJS) $(OBJS) $(LIBS)\n+CXX_SRCS= $(srcdir)/cp/call.c $(srcdir)/cp/decl2.c \\\n+ $(srcdir)/cp/except.c $(srcdir)/cp/input.c $(srcdir)/cp/pt.c \\\n+ $(srcdir)/cp/spew.c $(srcdir)/cp/xref.c $(srcdir)/cp/class.c \\\n+ $(srcdir)/cp/edsel.c $(srcdir)/cp/expr.c $(srcdir)/cp/lex.c \\\n+ $(srcdir)/cp/ptree.c $(srcdir)/cp/tree.c $(srcdir)/cp/cvt.c \\\n+ $(srcdir)/cp/errfn.c $(srcdir)/cp/gc.c $(srcdir)/cp/method.c \\\n+ $(srcdir)/cp/search.c $(srcdir)/cp/typeck.c $(srcdir)/cp/decl.c \\\n+ $(srcdir)/cp/error.c $(srcdir)/cp/init.c $(srcdir)/cp/parse.y \\\n+ $(srcdir)/cp/sig.c $(srcdir)/cp/typeck2.c\n+\n+cc1plus: $(P) $(CXX_SRCS) $(OBJS) $(BC_OBJS) $(LIBDEPS) c-common.o\n+\tcd cp; $(MAKE) $(FLAGS_TO_PASS) ../cc1plus\n \n cc1obj: $(P) $(OBJC_OBJS) $(OBJS) $(BC_OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o cc1obj $(OBJC_OBJS) $(OBJS) $(BC_OBJS) $(LIBS)\n@@ -830,43 +861,6 @@ c-iterate.o: c-iterate.c $(CONFIG_H) $(TREE_H) $(RTL_H) c-tree.h flags.h\n \n # C++ language specific files.\n \n-cp-parse.o : $(srcdir)/cp-parse.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h cp-lex.h\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-  `echo $(srcdir)/cp-parse.c | sed 's,^\\./,,'`\n-\n-$(srcdir)/cp-parse.c $(srcdir)/cp-parse.h : $(srcdir)/cp-parse.y\n-\t@echo expect 27 shift/reduce conflicts and 14 reduce/reduce conflicts\n-\tcd $(srcdir); $(BISON) $(BISONFLAGS) -d -o cp-parse.c cp-parse.y\n-\tcd $(srcdir); grep '^#define[ \t]*YYEMPTY' cp-parse.c >>cp-parse.h\n-\n-cp-spew.o : cp-spew.c $(CONFIG_H) $(CPLUS_TREE_H) \\\n-   $(srcdir)/cp-parse.h flags.h cp-lex.h\n-cp-lex.o : cp-lex.c $(CONFIG_H) $(CPLUS_TREE_H) \\\n-   $(srcdir)/cp-parse.h $(srcdir)/cp-input.c flags.h cp-hash.h cp-lex.h\n-cp-decl.o : cp-decl.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h \\\n-  cp-lex.h cp-decl.h stack.h\n-cp-decl2.o : cp-decl2.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h \\\n-  cp-lex.h cp-decl.h\n-cp-type2.o : cp-type2.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n-cp-typeck.o : cp-typeck.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h $(RTL_H)\n-cp-class.o : cp-class.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n-cp-call.o : cp-call.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n-cp-init.o : cp-init.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h $(RTL_H)\n-cp-method.o : cp-method.c $(CONFIG_H) $(CPLUS_TREE_H)\n-cp-cvt.o : cp-cvt.c $(CONFIG_H) $(CPLUS_TREE_H)\n-cp-search.o : cp-search.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h flags.h\n-cp-tree.o : cp-tree.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n-cp-ptree.o : cp-ptree.c $(CONFIG_H) $(CPLUS_TREE_H)\n-cp-gc.o : cp-gc.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h\n-cp-except.o : cp-except.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h $(RTL_H)\n-cp-expr.o : cp-expr.c $(CONFIG_H) $(CPLUS_TREE_H) $(RTL_H) flags.h \\\n-  expr.h insn-codes.h\n-cp-edsel.o : cp-edsel.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h flags.h\n-cp-xref.o : cp-xref.c $(CONFIG_H) $(CPLUS_TREE_H) input.h\n-cp-pt.o : cp-pt.c $(CONFIG_H) $(CPLUS_TREE_H) cp-decl.h cp-parse.h\n-cp-error.o : cp-error.c $(CONFIG_H) $(CPLUS_TREE_H)\n-cp-errfn.o : cp-errfn.c $(CONFIG_H) $(CPLUS_TREE_H)\n-\n g++.o : g++.c $(CONFIG_H) gvarargs.h\n \n # To make a configuration always use collect2, set USE_COLLECT2 to ld.\n@@ -1667,6 +1661,13 @@ mostlyclean: bytecode.mostlyclean\n \t  cd objc; $(MAKE) -f $$srcdir1/objc/Makefile mostlyclean; \\\n \telse true; fi\n \t-rm -f libobjc.a\n+# Clean the language subdirs.\n+\tsrcdir1=`cd $(srcdir); pwd`; \\\n+        for dir in $(SUBDIRS); do \\\n+          if [ -d $$dir ] ; then \\\n+\t    (cd $$dir; $(MAKE) -f $$srcdir1/$$dir/Makefile.in $@) ; \\\n+          fi ; \\\n+        done\n # Delete the temporary source copies for cross compilation.\n \t-rm -f $(HOST_PREFIX_1)rtl.c $(HOST_PREFIX_1)rtlanal.c\n \t-rm -f $(HOST_PREFIX_1)alloca.c $(HOST_PREFIX_1)malloc.c\n@@ -1707,6 +1708,13 @@ clean: mostlyclean bytecode.clean\n \t-if [ -f md.pre-cpp ]; then \\\n \t  rm -f md ; \\\n \tfi\n+# Clean the language subdirs.\n+\tsrcdir1=`cd $(srcdir); pwd`; \\\n+        for dir in $(SUBDIRS); do \\\n+          if [ -d $$dir ] ; then \\\n+\t    (cd $$dir; $(MAKE) -f $$srcdir1/$$dir/Makefile.in $@) ; \\\n+          fi ; \\\n+        done\n # Delete the include directory.\n \t-rm -rf stmp-* include objc-headers\n \n@@ -1716,8 +1724,14 @@ distclean: clean bytecode.distclean\n \t-rm -f tm.h aux-output.c config.h config.status tconfig.h hconfig.h\n \t-rm -f md md.pre-cpp\n \t-rm -f Makefile *.oaux\n+# Clean the language subdirs.\n+\tsrcdir1=`cd $(srcdir); pwd`; \\\n+        for dir in $(SUBDIRS); do \\\n+          if [ -d $$dir ] ; then \\\n+\t    (cd $$dir; $(MAKE) -f $$srcdir1/$$dir/Makefile.in $@) ; \\\n+          fi ; \\\n+        done\n \t-rm -fr stage1 stage2 stage3 stage4\n-\t-rm -f cp-parse.output\n \t-rm -f objc-parse.output\n \t-rm -f c-parse.output\n \n@@ -1735,18 +1749,31 @@ extraclean: distclean\n \t-rm -f *lose config/*lose config/*/*lose\n \t-rm -f *.s *.s[0-9] *.i install1.texi config/ChangeLog\n \t-rm -f djefoo\n+# Clean the language subdirs.\n+\tsrcdir1=`cd $(srcdir); pwd`; \\\n+        for dir in $(SUBDIRS); do \\\n+          if [ -d $$dir ] ; then \\\n+\t    (cd $$dir; $(MAKE) -f $$srcdir1/$$dir/Makefile.in $@) ; \\\n+          fi ; \\\n+        done\n \n # Get rid of every file that's generated from some other file.\n # Most of these files ARE PRESENT in the GCC distribution.\n realclean: distclean bytecode.realclean\n \t-rm -f c-parse.y objc-parse.y\n-\t-rm -f cp-parse.c cp-parse.h cp-parse.output\n \t-rm -f objc-parse.c objc-parse.output\n \t-rm -f c-parse.c c-parse.h c-parse.output\n \t-rm -f cexp.c cexp.output TAGS \n \t-rm -f cpp.info* cpp.??s cpp.*aux\n \t-rm -f gcc.info* gcc.??s gcc.*aux\n \t-rm -f gplus.info* gplus.??s gplus.*aux\n+# Clean the language subdirs.\n+\tsrcdir1=`cd $(srcdir); pwd`; \\\n+        for dir in $(SUBDIRS); do \\\n+          if [ -d $$dir ] ; then \\\n+\t    (cd $$dir; $(MAKE) -f $$srcdir1/$$dir/Makefile.in $@) ; \\\n+          fi ; \\\n+        done\n \f\n # Entry points `install' and `uninstall'.\n # Also use `install-collect2' to install collect2 when the config files don't.\n@@ -2021,6 +2048,7 @@ distdir: doc $(srcdir)/INSTALL c-parse.y objc-parse.y cp-parse.y \\\n \t-rm -rf gcc-$(version) tmp\t\n # Put all the files in a temporary subdirectory\n # which has the name that we want to have in the tar file.\n+# ??? Do we need to handle the language subdirs here?\n \tmkdir tmp\n \tmkdir tmp/config\n \tmkdir tmp/objc\n@@ -2054,6 +2082,7 @@ distdir: doc $(srcdir)/INSTALL c-parse.y objc-parse.y cp-parse.y \\\n # make diff oldversion=M.N \n # creates a diff file between an older distribution and this one.\n # The -P option assumes this is GNU diff.\n+# ??? cp-parse.c needs renaming or some such.\n diff:\n \tdiff -rc2P -x c-parse.y -x c-parse.c -x c-parse.h -x objc-parse.y \\\n \t  -x cp-parse.c -x cp-parse.h -x cexp.c -x bi-parser.c \\\n@@ -2091,37 +2120,57 @@ bootstrap: force\n # To prevent `make install' from compiling alloca.o and then relinking cc1\n # because alloca.o is newer, we permit these recursive makes to compile\n # alloca.o.  Then cc1 is newer, so it won't have to be relinked.\n-\t$(MAKE) CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n+\tcwd=`pwd` ; $(MAKE) CC=\"$$cwd/stage1/xgcc -B$$cwd/stage1/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n \t$(MAKE) stage2\n-\t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n+\tcwd=`pwd` ; $(MAKE) CC=\"$$cwd/stage2/xgcc -B$$cwd/stage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n \n bootstrap2: force\n-\t$(MAKE) CC=\"stage1/xgcc -Bstage1/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n+\tcwd=`pwd` ; $(MAKE) CC=\"$$cwd/stage1/xgcc -B$$cwd/stage1/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n \t$(MAKE) stage2\n-\t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n+\tcwd=`pwd` ; $(MAKE) CC=\"$$cwd/stage2/xgcc -B$$cwd/stage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n \n bootstrap3: force\n-\t$(MAKE) CC=\"stage2/xgcc -Bstage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n+\tcwd=`pwd` ; $(MAKE) CC=\"$$cwd/stage2/xgcc -B$$cwd/stage2/\" CFLAGS=\"$(BOOT_CFLAGS)\" LDFLAGS=\"$(BOOT_LDFLAGS)\" libdir=$(libdir) LANGUAGES=\"$(LANGUAGES)\"\n \n # Compare the object files in the current directory with those in the\n # stage2 directory.\n \n # ./ avoids bug in some versions of tail.\n+# ??? The test \"-f $$dir/decl.o\" needs to be changed.\n compare: force\n \tfor file in *.o; do \\\n \t  tail +16c ./$$file > tmp-foo1; \\\n \t  tail +16c stage2/$$file > tmp-foo2 2>/dev/null \\\n \t    && (cmp tmp-foo1 tmp-foo2 || echo $$file differs); \\\n \tdone\n+\tfor dir in $(SUBDIRS); do \\\n+\t  if [ -f $$dir/decl.o ] ; then \\\n+\t    for file in $$dir/*.o; do \\\n+\t      tail +16c ./$$file > tmp-foo1; \\\n+\t      tail +16c stage2/$$file > tmp-foo2 2>/dev/null \\\n+\t        && (cmp tmp-foo1 tmp-foo2 || echo $$file differs); \\\n+\t    done \\\n+\t  fi \\\n+\tdone\n \t-rm -f tmp-foo*\n \n # Similar, but compare with stage3 directory\n+# ??? The test \"-f $$dir/decl.o\" needs to be changed.\n compare3: force\n \tfor file in *.o; do \\\n-\t  tail +16c $$file > tmp-foo1; \\\n+\t  tail +16c ./$$file > tmp-foo1; \\\n \t  tail +16c stage3/$$file > tmp-foo2 2>/dev/null \\\n \t    && (cmp tmp-foo1 tmp-foo2 || echo $$file differs); \\\n \tdone\n+\tfor dir in $(SUBDIRS); do \\\n+\t  if [ -f $$dir/decl.o ] ; then \\\n+\t    for file in $$dir/*.o; do \\\n+\t      tail +16c ./$$file > tmp-foo1; \\\n+\t      tail +16c stage3/$$file > tmp-foo2 2>/dev/null \\\n+\t        && (cmp tmp-foo1 tmp-foo2 || echo $$file differs); \\\n+\t    done \\\n+\t  fi \\\n+\tdone\n \t-rm -f tmp-foo*\n \n # Compare the object files in the current directory with those in the\n@@ -2143,27 +2192,43 @@ gnucompare3: force\n stage1: force\n \t-if [ -d stage1 ] ; then true ; else mkdir stage1 ; fi\n \t-mv $(STAGESTUFF) stage1\n+\t-for dir in $(SUBDIRS); do \\\n+\t   if [ -d stage1/$$dir ] ; then true ; else mkdir stage1/$$dir ; fi ; \\\n+\t   mv $$dir/*.o stage1/$$dir; \\\n+\t done\n \t-rm -f stage1/libgcc.a\n \t-cp libgcc.a stage1\n \t-if $(RANLIB_TEST) ; then $(RANLIB) stage1/libgcc.a; else true; fi\n \n stage2: force\n \t-if [ -d stage2 ] ; then true ; else mkdir stage2 ; fi\n \t-mv $(STAGESTUFF) stage2\n+\t-for dir in $(SUBDIRS); do \\\n+\t   if [ -d stage2/$$dir ] ; then true ; else mkdir stage2/$$dir ; fi ; \\\n+\t   mv $$dir/*.o stage2/$$dir; \\\n+\t done\n \t-rm -f stage2/libgcc.a\n \t-cp libgcc.a stage2\n \t-if $(RANLIB_TEST) ; then $(RANLIB) stage2/libgcc.a; else true; fi\n \n stage3: force\n \t-if [ -d stage3 ] ; then true ; else mkdir stage3 ; fi\n \t-mv $(STAGESTUFF) stage3\n+\t-for dir in $(SUBDIRS); do \\\n+\t   if [ -d stage3/$$dir ] ; then true ; else mkdir stage3/$$dir ; fi ; \\\n+\t   mv $$dir/*.o stage3/$$dir; \\\n+\t done\n \t-rm -f stage3/libgcc.a\n \t-cp libgcc.a stage3\n \t-if $(RANLIB_TEST) ; then $(RANLIB) stage3/libgcc.a; else true; fi\n \n stage4: force\n \t-if [ -d stage4 ] ; then true ; else mkdir stage4 ; fi\n \t-mv $(STAGESTUFF) stage4\n+\t-for dir in $(SUBDIRS); do \\\n+\t   if [ -d stage4/$$dir ] ; then true ; else mkdir stage4/$$dir ; fi ; \\\n+\t   mv $$dir/*.o stage4/$$dir; \\\n+\t done\n \t-rm -f stage4/libgcc.a\n \t-cp libgcc.a stage4\n \t-if $(RANLIB_TEST) ; then $(RANLIB) stage4/libgcc.a; else true; fi\n@@ -2174,27 +2239,43 @@ stage4: force\n risky-stage1: force\n \t-if [ -d stage1 ] ; then true ; else mkdir stage1 ; fi\n \t-mv $(GCC_PARTS) stage1\n+\t-for dir in $(SUBDIRS); do \\\n+\t   if [ -d stage1/$$dir ] ; then true ; else mkdir stage1/$$dir ; fi ; \\\n+\t   mv $$dir/*.o stage1/$$dir; \\\n+\t done\n \t-rm -f stage1/libgcc.a\n \t-cp libgcc.a stage1 && $(RANLIB) stage1/libgcc.a\n \t-make clean\n \n risky-stage2: force\n \t-if [ -d stage2 ] ; then true ; else mkdir stage2 ; fi\n \t-mv $(GCC_PARTS) stage2\n+\t-for dir in $(SUBDIRS); do \\\n+\t   if [ -d stage2/$$dir ] ; then true ; else mkdir stage2/$$dir ; fi ; \\\n+\t   mv $$dir/*.o stage2/$$dir; \\\n+\t done\n \t-rm -f stage2/libgcc.a\n \t-cp libgcc.a stage2 && $(RANLIB) stage2/libgcc.a\n \t-make clean\n \n risky-stage3: force\n \t-if [ -d stage3 ] ; then true ; else mkdir stage3 ; fi\n \t-mv $(GCC_PARTS) stage3\n+\t-for dir in $(SUBDIRS); do \\\n+\t   if [ -d stage3/$$dir ] ; then true ; else mkdir stage3/$$dir ; fi ; \\\n+\t   mv $$dir/*.o stage3/$$dir; \\\n+\t done\n \t-rm -f stage3/libgcc.a\n \t-cp libgcc.a stage3 && $(RANLIB) stage3/libgcc.a\n \t-make clean\n \n risky-stage4: force\n \t-if [ -d stage4 ] ; then true ; else mkdir stage4 ; fi\n \t-mv $(GCC_PARTS) stage4\n+\t-for dir in $(SUBDIRS); do \\\n+\t   if [ -d stage4/$$dir ] ; then true ; else mkdir stage4/$$dir ; fi ; \\\n+\t   mv $$dir/*.o stage4/$$dir; \\\n+\t done\n \t-rm -f stage4/libgcc.a\n \t-cp libgcc.a stage4 && $(RANLIB) stage4/libgcc.a\n \t-make clean"}]}