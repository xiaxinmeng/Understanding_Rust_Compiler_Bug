{"sha": "a6c550f98551764dab0f1d5492c993fa94426688", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZjNTUwZjk4NTUxNzY0ZGFiMGYxZDU0OTJjOTkzZmE5NDQyNjY4OA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2006-02-20T13:38:01Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2006-02-20T13:38:01Z"}, "message": "tree.h (struct tree_memory_tag): Add is_used_alone member.\n\n2006-02-20  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree.h (struct tree_memory_tag): Add is_used_alone member.\n\t(TMT_USED_ALONE): New macro.\n\t* tree-pass.h (PROP_tmt_usage): New property.\n\t(TODO_update_tmt_usage): New todo.\n\t* tree-ssa-alias.c (updating_used_alone): New variable.\n\t(recalculate_used_alone): New function.\t  \n\t(compute_may_aliases): Set updating_used_alone, call\n\trecalculate_used_alone. \n\t* tree-sra.c (pass_sra): Note that this pass destroys\n\tPROP_tmt_usage, and add TODO_update_tmt_usage.\n\t* tree-ssa-forwprop.c (pass_forwprop): Ditto.\n\t* tree-flow.h (updating_used_alone): Prototype.\n\t(recalculate_used_alone): Ditto.\n\t* passes.c (execute_todo): Add code to set updating_used_alone,\n\tand call recalculate.\n\t* tree-ssa-operands.c (add_virtual_operand): Only append bare def\n\tfor clobber if used alone, and add assert to verify used_alone\n\tstatus.\n\nFrom-SVN: r111300", "tree": {"sha": "16d20e32d96535b3c2b5c91db8c2382c5b3fb541", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16d20e32d96535b3c2b5c91db8c2382c5b3fb541"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6c550f98551764dab0f1d5492c993fa94426688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6c550f98551764dab0f1d5492c993fa94426688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6c550f98551764dab0f1d5492c993fa94426688", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6c550f98551764dab0f1d5492c993fa94426688/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf9d76188a45f75f60b307b8a776279d6ad5e630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9d76188a45f75f60b307b8a776279d6ad5e630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf9d76188a45f75f60b307b8a776279d6ad5e630"}], "stats": {"total": 160, "additions": 150, "deletions": 10}, "files": [{"sha": "c811f20832333fea25a1b5d795bfd830776f3ec0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6c550f98551764dab0f1d5492c993fa94426688", "patch": "@@ -1,3 +1,24 @@\n+2006-02-20  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree.h (struct tree_memory_tag): Add is_used_alone member.\n+\t(TMT_USED_ALONE): New macro.\n+\t* tree-pass.h (PROP_tmt_usage): New property.\n+\t(TODO_update_tmt_usage): New todo.\n+\t* tree-ssa-alias.c (updating_used_alone): New variable.\n+\t(recalculate_used_alone): New function.\t  \n+\t(compute_may_aliases): Set updating_used_alone, call\n+\trecalculate_used_alone. \n+\t* tree-sra.c (pass_sra): Note that this pass destroys\n+\tPROP_tmt_usage, and add TODO_update_tmt_usage.\n+\t* tree-ssa-forwprop.c (pass_forwprop): Ditto.\n+\t* tree-flow.h (updating_used_alone): Prototype.\n+\t(recalculate_used_alone): Ditto.\n+\t* passes.c (execute_todo): Add code to set updating_used_alone,\n+\tand call recalculate.\n+\t* tree-ssa-operands.c (add_virtual_operand): Only append bare def\n+\tfor clobber if used alone, and add assert to verify used_alone\n+\tstatus.\n+\t\n 2006-02-20  Angel Nunez Mencias  <anunez@de.ibm.com>\n \n \t* config/s390/s390.c (legitimize_pic_address): Assertions checking"}, {"sha": "43efc7f88f04a2e8ca335f1f7c140028ee97e781", "filename": "gcc/passes.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=a6c550f98551764dab0f1d5492c993fa94426688", "patch": "@@ -718,8 +718,12 @@ execute_todo (unsigned int flags)\n   flags &= ~last_verified;\n   if (!flags)\n     return;\n+  \n+  /* Always recalculate TMT usage before doing anything else.  */\n+  if (flags & TODO_update_tmt_usage)\n+    recalculate_used_alone ();\n \n-  /* Always cleanup the CFG before doing anything else.  */\n+  /* Always cleanup the CFG before trying to update SSA .  */\n   if (flags & TODO_cleanup_cfg)\n     {\n       if (current_loops)\n@@ -822,6 +826,9 @@ execute_one_pass (struct tree_opt_pass *pass)\n   gcc_assert ((curr_properties & pass->properties_required)\n \t      == pass->properties_required);\n \n+  if (pass->properties_destroyed & PROP_tmt_usage)\n+    updating_used_alone = true;\n+\n   /* If a dump file name is present, open it if enabled.  */\n   if (pass->static_pass_number != -1)\n     {\n@@ -888,6 +895,9 @@ execute_one_pass (struct tree_opt_pass *pass)\n       dump_file = NULL;\n     }\n \n+  if (pass->properties_destroyed & PROP_tmt_usage)\n+    updating_used_alone = false;\n+\n   return true;\n }\n "}, {"sha": "5f4bd5ead6fab733221308f7634c68fe59583b2d", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=a6c550f98551764dab0f1d5492c993fa94426688", "patch": "@@ -938,4 +938,6 @@ void delete_alias_heapvars (void);\n \n void swap_tree_operands (tree, tree *, tree *);\n \n+extern void recalculate_used_alone (void);\n+extern bool updating_used_alone;\n #endif /* _TREE_FLOW_H  */"}, {"sha": "658b6241c7e490a0953d5b57afea9c2f98739946", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=a6c550f98551764dab0f1d5492c993fa94426688", "patch": "@@ -152,6 +152,8 @@ struct dump_file_info\n #define PROP_rtl\t\t(1 << 8)\n #define PROP_alias\t\t(1 << 9)\n #define PROP_gimple_lomp\t(1 << 10)\t/* lowered OpenMP directives */\n+#define PROP_tmt_usage          (1 << 11)       /* which TMT's are\n+\t\t\t\t\t\t   used alone.  */\n \n #define PROP_trees \\\n   (PROP_gimple_any | PROP_gimple_lcf | PROP_gimple_leh | PROP_gimple_lomp)\n@@ -212,6 +214,10 @@ struct dump_file_info\n    for the passes that are handed to register_dump_files.  */\n #define TODO_set_props\t\t\t(1 << 12)\n \n+/* Set by passes that may make TMT's that were previously never used\n+   in statements, used.  */\n+#define TODO_update_tmt_usage           (1 << 13)\n+\n #define TODO_update_ssa_any\t\t\\\n     (TODO_update_ssa\t\t\t\\\n      | TODO_update_ssa_no_phi\t\t\\"}, {"sha": "6d1a1781c1cd9efdb34fe033a079a23e45f9f4c8", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=a6c550f98551764dab0f1d5492c993fa94426688", "patch": "@@ -2223,9 +2223,10 @@ struct tree_opt_pass pass_sra =\n   TV_TREE_SRA,\t\t\t\t/* tv_id */\n   PROP_cfg | PROP_ssa | PROP_alias,\t/* properties_required */\n   0,\t\t\t\t\t/* properties_provided */\n-  0,\t\t\t\t\t/* properties_destroyed */\n+  PROP_tmt_usage,\t\t        /* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_update_ssa\n-    | TODO_ggc_collect | TODO_verify_ssa,  /* todo_flags_finish */\n+  TODO_update_tmt_usage | TODO_dump_func /* todo_flags_finish */\n+  | TODO_update_ssa\n+  | TODO_ggc_collect | TODO_verify_ssa,\n   0\t\t\t\t\t/* letter */\n };"}, {"sha": "a32c8439657584b4caca43baa67ecd3b545eec65", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 80, "deletions": 1, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=a6c550f98551764dab0f1d5492c993fa94426688", "patch": "@@ -392,6 +392,12 @@ set_initial_properties (struct alias_info *ai)\n     }\n }\n \n+/* This variable is set to true if we are updating the used alone\n+   information for TMT's, or are in a pass that is going to break it\n+   temporarily.  */\n+\n+bool updating_used_alone;\n+\n /* Compute which variables need to be marked call clobbered because\n    their tag is call clobbered, and which tags need to be marked\n    global because they contain global variables.  */\n@@ -417,6 +423,76 @@ compute_call_clobbered (struct alias_info *ai)\n   compute_tag_properties ();\n }\n \n+\n+/* Recalculate the used_alone information for TMT's . */\n+void \n+recalculate_used_alone (void)\n+{\n+  VEC (tree, heap) *calls = NULL;\n+  block_stmt_iterator bsi;\n+  basic_block bb;\n+  tree stmt;\n+  size_t i;\n+  referenced_var_iterator rvi;\n+  tree var;\n+  \n+  /* First, reset all the TMT used alone bits to zero.  */\n+  updating_used_alone = true;\n+  FOR_EACH_REFERENCED_VAR (var, rvi)\n+    if (TREE_CODE (var) == TYPE_MEMORY_TAG)\n+      TMT_USED_ALONE (var) = 0;\n+\n+  /* Walk all the statements.\n+     Calls get put into a list of statements to update, since we will\n+     need to update operands on them if we make any changes.\n+     If we see a bare use of a TMT anywhere in a real virtual use or virtual\n+     def, mark the TMT as used alone, and for renaming.  */\n+     \n+     \n+  FOR_EACH_BB (bb)\n+    {\n+      for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n+\t{\n+\t  stmt = bsi_stmt (bsi);\n+\t  if (TREE_CODE (stmt) == CALL_EXPR\n+\t      || (TREE_CODE (stmt) == MODIFY_EXPR \n+\t\t  && TREE_CODE (TREE_OPERAND (stmt, 1)) == CALL_EXPR))\n+\t    VEC_safe_push (tree, heap, calls, stmt);\n+\t  else\n+\t    {\n+\t      ssa_op_iter iter;\n+\t      \n+\t      FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, \n+\t\t\t\t\t SSA_OP_VUSE | SSA_OP_VIRTUAL_DEFS)\n+\t\t{\n+\t\t  tree svar = var;\n+\t\t  \n+\t\t  if(TREE_CODE (var) == SSA_NAME)\n+\t\t    svar = SSA_NAME_VAR (var);\n+\t\t  \n+\t\t  if (TREE_CODE (svar) == TYPE_MEMORY_TAG)\n+\t\t    {\n+\t\t      if (!TMT_USED_ALONE (svar))\n+\t\t\t{\n+\t\t\t  TMT_USED_ALONE (svar) = true;\n+\t\t\t  mark_sym_for_renaming (svar);\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t    }\t           \n+\t}\n+    }\n+  \n+  /* Update the operands on all the calls we saw.  */\n+  if (calls)\n+    {\n+      for (i = 0; VEC_iterate (tree, calls, i, stmt); i++)\n+\tupdate_stmt (stmt);\n+    }\n+  VEC_free (tree, heap, calls);\n+  updating_used_alone = false;\n+}\n+\n /* Compute may-alias information for every variable referenced in function\n    FNDECL.\n \n@@ -585,6 +661,7 @@ compute_may_aliases (void)\n   /* Deallocate memory used by aliasing data structures.  */\n   delete_alias_info (ai);\n \n+  updating_used_alone = true;\n   {\n     block_stmt_iterator bsi;\n     basic_block bb;\n@@ -596,9 +673,11 @@ compute_may_aliases (void)\n           }\n       }\n   }\n-\n+  recalculate_used_alone ();\n+  updating_used_alone = false;\n }\n \n+\n struct tree_opt_pass pass_may_alias = \n {\n   \"alias\",\t\t\t\t/* name */"}, {"sha": "bcd4a13a4e30e6ff2639ce81e07fd7732a6950ed", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=a6c550f98551764dab0f1d5492c993fa94426688", "patch": "@@ -1011,9 +1011,10 @@ struct tree_opt_pass pass_forwprop = {\n   PROP_cfg | PROP_ssa\n     | PROP_alias,\t\t/* properties_required */\n   0,\t\t\t\t/* properties_provided */\n-  0,\t\t\t\t/* properties_destroyed */\n+  PROP_tmt_usage,\t\t/* properties_destroyed */\n   0,\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_ggc_collect\t/* todo_flags_finish */\n+  TODO_update_tmt_usage |TODO_dump_func /* todo_flags_finish */\n+  | TODO_ggc_collect\n   | TODO_update_ssa | TODO_verify_ssa,\n   0\t\t\t\t\t/* letter */\n };"}, {"sha": "de578a74df15e1a5bcc69cb87e9bdb92bccc8853", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=a6c550f98551764dab0f1d5492c993fa94426688", "patch": "@@ -1844,11 +1844,26 @@ add_virtual_operand (tree var, stmt_ann_t s_ann, int flags,\n \t     \n \t     It is also necessary to add bare defs on clobbers for\n \t     TMT's, so that bare TMT uses caused by pruning all the\n-\t     aliases will link up properly with calls.   */\n+\t     aliases will link up properly with calls.   In order to\n+\t     keep the number of these bare defs we add down to the\n+\t     minimum necessary, we keep track of which TMT's were used\n+\t     alone in statement defs or vuses.  */\n+\n \t  if (v_ann->is_aliased\n \t      || none_added\n-\t      || (TREE_CODE (var) == TYPE_MEMORY_TAG && for_clobber))\n-\t    append_v_may_def (var);\n+\t      || (TREE_CODE (var) == TYPE_MEMORY_TAG && for_clobber\n+\t\t  && TMT_USED_ALONE (var)))\n+\t    {\n+\t      /* Every bare tmt def we add should have TMT_USED_ALONE\n+\t\t set on it, or else we will get the wrong answer on\n+\t\t clobbers.  */\n+\n+\t      if (none_added && !updating_used_alone && aliases_computed_p\n+\t\t  && TREE_CODE (var) == TYPE_MEMORY_TAG)\n+\t\tgcc_assert (TMT_USED_ALONE (var));\n+\n+\t      append_v_may_def (var);\n+\t    }\n \t}\n       else\n \t{"}, {"sha": "61a1d470f44fdca214af66b617c70a13233ec355", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6c550f98551764dab0f1d5492c993fa94426688/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a6c550f98551764dab0f1d5492c993fa94426688", "patch": "@@ -2310,10 +2310,15 @@ struct tree_memory_tag GTY(())\n {\n   struct tree_decl_minimal common;\n   unsigned int is_global:1;\n+  unsigned int is_used_alone:1;\n };\n \n #define MTAG_GLOBAL(NODE) (TREE_MEMORY_TAG_CHECK (NODE)->mtag.is_global)\n \n+/* This flag is true if a TMT is used as the vdef or vuse operand directly,\n+   because the access had all of the TMT's aliases pruned from it.  */\n+#define TMT_USED_ALONE(NODE) (TYPE_MEMORY_TAG_CHECK (NODE)->mtag.is_used_alone)\n+\n struct tree_struct_field_tag GTY(())\n {\n   struct tree_memory_tag common;"}]}