{"sha": "652469d0ab4d7fdf2fb72e4a4d8268275d2db1c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUyNDY5ZDBhYjRkN2ZkZjJmYjcyZTRhNGQ4MjY4Mjc1ZDJkYjFjMA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-10-17T07:00:06Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-10-17T07:00:06Z"}, "message": "decl.c (WINT_TYPE): Define.\n\n\t* decl.c (WINT_TYPE): Define.\n\t(init_decl_processing): Create types unsigned_ptrdiff_type_node,\n\tc_size_type_node, signed_size_type_node and wint_type_node.\n\nFrom-SVN: r36898", "tree": {"sha": "5c68b5ac8e40628ced4d113f5e849177158d9d78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c68b5ac8e40628ced4d113f5e849177158d9d78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/652469d0ab4d7fdf2fb72e4a4d8268275d2db1c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/652469d0ab4d7fdf2fb72e4a4d8268275d2db1c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/652469d0ab4d7fdf2fb72e4a4d8268275d2db1c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/652469d0ab4d7fdf2fb72e4a4d8268275d2db1c0/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74ff46299b5d4b97dc736fc77fb3a2618c119e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74ff46299b5d4b97dc736fc77fb3a2618c119e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74ff46299b5d4b97dc736fc77fb3a2618c119e85"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "1c61ab2393cf1479d0c51d5dd5f40aa3bbcbeeb2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/652469d0ab4d7fdf2fb72e4a4d8268275d2db1c0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/652469d0ab4d7fdf2fb72e4a4d8268275d2db1c0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=652469d0ab4d7fdf2fb72e4a4d8268275d2db1c0", "patch": "@@ -1,3 +1,9 @@\n+2000-10-17  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* decl.c (WINT_TYPE): Define.\n+\t(init_decl_processing): Create types unsigned_ptrdiff_type_node,\n+\tc_size_type_node, signed_size_type_node and wint_type_node.\n+\n 2000-10-17  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* decl2.c (warn_missing_format_attribute): New variable."}, {"sha": "8e7443f09be2ee02f681d01249d2501210574bd3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/652469d0ab4d7fdf2fb72e4a4d8268275d2db1c0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/652469d0ab4d7fdf2fb72e4a4d8268275d2db1c0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=652469d0ab4d7fdf2fb72e4a4d8268275d2db1c0", "patch": "@@ -79,6 +79,10 @@ extern int (*valid_lang_attribute) PARAMS ((tree, tree, tree, tree));\n #define WCHAR_TYPE \"int\"\n #endif\n \n+#ifndef WINT_TYPE\n+#define WINT_TYPE \"unsigned int\"\n+#endif\n+\n #ifndef INTMAX_TYPE\n #define INTMAX_TYPE ((INT_TYPE_SIZE == LONG_LONG_TYPE_SIZE)\t\\\n \t\t     ? \"int\"\t\t\t\t\t\\\n@@ -6385,6 +6389,7 @@ init_decl_processing ()\n \n   ptrdiff_type_node\n     = TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (PTRDIFF_TYPE)));\n+  unsigned_ptrdiff_type_node = unsigned_type (ptrdiff_type_node);\n \n   /* Define both `signed char' and `unsigned char'.  */\n   record_builtin_type (RID_MAX, \"signed char\", signed_char_type_node);\n@@ -6393,8 +6398,10 @@ init_decl_processing ()\n   /* `unsigned long' is the standard type for sizeof.\n      Note that stddef.h uses `unsigned long',\n      and this must agree, even if long and int are the same size.  */\n-  set_sizetype\n-    (TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (SIZE_TYPE))));\n+  c_size_type_node =\n+    TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (SIZE_TYPE)));\n+  signed_size_type_node = signed_type (c_size_type_node);\n+  set_sizetype (c_size_type_node);\n \n   /* Create the widest literal types. */\n   widest_integer_literal_type_node = make_signed_type (HOST_BITS_PER_WIDE_INT * 2);\n@@ -6554,6 +6561,9 @@ init_decl_processing ()\n   wchar_array_type_node\n     = build_array_type (wchar_type_node, array_domain_type);\n \n+  wint_type_node =\n+    TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (WINT_TYPE)));\n+\n   intmax_type_node =\n     TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (INTMAX_TYPE)));\n   uintmax_type_node ="}]}