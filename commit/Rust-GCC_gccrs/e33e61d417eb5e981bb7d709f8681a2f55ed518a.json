{"sha": "e33e61d417eb5e981bb7d709f8681a2f55ed518a", "node_id": "C_kwDOANBUbNoAKGUzM2U2MWQ0MTdlYjVlOTgxYmI3ZDcwOWY4NjgxYTJmNTVlZDUxOGE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-06T08:08:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-06T08:55:31Z"}, "message": "tree-optimization/106841 - gather and hybrid SLP\n\nHybrid SLP detection currently fails to consider a not direct\noffset operand of a scatter/gather operation.  The following fixes\nthis.\n\n\tPR tree-optimization/106841\n\t* tree-vect-slp.cc (vect_detect_hybrid_slp): Also process\n\tscatter/gather offset.\n\n\t* g++.dg/vect/pr106841.cc: New testcase.", "tree": {"sha": "3462e78621e87530ab283e01fc61fc0fb67fca38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3462e78621e87530ab283e01fc61fc0fb67fca38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e33e61d417eb5e981bb7d709f8681a2f55ed518a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33e61d417eb5e981bb7d709f8681a2f55ed518a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e33e61d417eb5e981bb7d709f8681a2f55ed518a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33e61d417eb5e981bb7d709f8681a2f55ed518a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6582c662ca0da05c74fa3183e1bc2cadcb21424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6582c662ca0da05c74fa3183e1bc2cadcb21424", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6582c662ca0da05c74fa3183e1bc2cadcb21424"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "7458bc15a25d49f69c6e7a92b5f1bdf447d8c318", "filename": "gcc/testsuite/g++.dg/vect/pr106841.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33e61d417eb5e981bb7d709f8681a2f55ed518a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr106841.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33e61d417eb5e981bb7d709f8681a2f55ed518a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr106841.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr106841.cc?ref=e33e61d417eb5e981bb7d709f8681a2f55ed518a", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-O3 -ffast-math\" }\n+// { dg-additional-options \"-march=bdver2\" { target x86_64-*-* } }\n+\n+struct R3 {\n+  double z;\n+  R3(R3 A, R3 B) : z(B.z - A.z) {}\n+  double norme() { return z; }\n+};\n+struct TBoundaryEdge {\n+  int *vertices[2];\n+  int &operator[](int i) { return *vertices[i]; }\n+};\n+struct Mesh {\n+  int vertices;\n+  TBoundaryEdge *bedges;\n+  int operator()(int &vv) { return &vv - &vertices; }\n+  TBoundaryEdge be(int i) { return bedges[i]; }\n+};\n+template <typename Data> struct GenericElement {\n+  typedef typename Data::V Vertex;\n+  static const int nv = Data::NbOfVertices;\n+  Vertex *vertices[nv];\n+  double mes;\n+  void set(int *iv, Vertex *v0) {\n+    for (int i = 0; i < nv; ++i)\n+      vertices[i] = v0 + iv[i];\n+    mes = Data::mesure(vertices);\n+  }\n+};\n+struct DataSeg3 {\n+  static const int NbOfVertices = 2;\n+  typedef R3 V;\n+  static double mesure(V *pv[]) { return R3(*pv[0], *pv[1]).norme(); }\n+};\n+struct MeshS {\n+  MeshS();\n+};\n+template <class> struct Movemesh_Op { void foo(Mesh, DataSeg3::V *) const; };\n+template <> void Movemesh_Op<int>::foo(Mesh pTh, DataSeg3::V *v0) const {\n+  GenericElement<DataSeg3> *bS = new GenericElement<DataSeg3>[8];\n+  for (int ibe = 0; ibe < 8; ibe++) {\n+    TBoundaryEdge K(pTh.be(ibe));\n+    int iv[2];\n+    for (int i = 0; i < 2; i++) {\n+      int &__trans_tmp_2 = K[i];\n+      iv[i] = pTh(__trans_tmp_2);\n+    }\n+    bS[ibe].set(iv, v0);\n+  }\n+  MeshS T_Th;\n+}"}, {"sha": "3fa2dc96dda6c07f49f19c6e2ca6a1d62248a261", "filename": "gcc/tree-vect-slp.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e33e61d417eb5e981bb7d709f8681a2f55ed518a/gcc%2Ftree-vect-slp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e33e61d417eb5e981bb7d709f8681a2f55ed518a/gcc%2Ftree-vect-slp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.cc?ref=e33e61d417eb5e981bb7d709f8681a2f55ed518a", "patch": "@@ -5799,6 +5799,15 @@ vect_detect_hybrid_slp (loop_vec_info loop_vinfo)\n \t to use walk_gimple_op.  */\n       wi.is_lhs = 0;\n       walk_gimple_op (stmt_info->stmt, vect_detect_hybrid_slp, &wi);\n+      /* For gather/scatter make sure to walk the offset operand, that\n+\t can be a scaling and conversion away.  */\n+      gather_scatter_info gs_info;\n+      if (STMT_VINFO_GATHER_SCATTER_P (stmt_info)\n+\t  && vect_check_gather_scatter (stmt_info, loop_vinfo, &gs_info))\n+\t{\n+\t  int dummy;\n+\t  vect_detect_hybrid_slp (&gs_info.offset, &dummy, &wi);\n+\t}\n     }\n }\n "}]}