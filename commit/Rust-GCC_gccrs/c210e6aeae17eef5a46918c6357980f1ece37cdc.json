{"sha": "c210e6aeae17eef5a46918c6357980f1ece37cdc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIxMGU2YWVhZTE3ZWVmNWE0NjkxOGM2MzU3OTgwZjFlY2UzN2NkYw==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-04-29T10:06:54Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1995-04-29T10:06:54Z"}, "message": "(divsi3, udivsi3, modsi3, umodsi3): Simplify.\n\n(ashlsi3): Clean up indentation and commentary.\n\nFrom-SVN: r9541", "tree": {"sha": "26a1c188ea93335781cc0c9406581b05f3961fba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26a1c188ea93335781cc0c9406581b05f3961fba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c210e6aeae17eef5a46918c6357980f1ece37cdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c210e6aeae17eef5a46918c6357980f1ece37cdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c210e6aeae17eef5a46918c6357980f1ece37cdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c210e6aeae17eef5a46918c6357980f1ece37cdc/comments", "author": null, "committer": null, "parents": [{"sha": "1c1f2d29a05680416a17b64a9ee231e0e3ba2846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c1f2d29a05680416a17b64a9ee231e0e3ba2846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c1f2d29a05680416a17b64a9ee231e0e3ba2846"}], "stats": {"total": 92, "additions": 15, "deletions": 77}, "files": [{"sha": "0643e10c2e4b53bc77c866676fd566a3681a7d8f", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 15, "deletions": 77, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c210e6aeae17eef5a46918c6357980f1ece37cdc/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c210e6aeae17eef5a46918c6357980f1ece37cdc/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=c210e6aeae17eef5a46918c6357980f1ece37cdc", "patch": "@@ -2587,30 +2587,14 @@\n   \"\"\n   \"\n {\n-  operands[3] = gen_reg_rtx(SImode);\n-  if (!(GET_CODE (operands[2]) == CONST_INT && emit_hpdiv_const(operands, 0)))\n-    {\n-      emit_move_insn (gen_rtx (REG, SImode, 26), operands[1]);\n-      emit_move_insn (gen_rtx (REG, SImode, 25), operands[2]);\n-      emit\n-\t(gen_rtx\n-\t (PARALLEL, VOIDmode,\n-\t  gen_rtvec (5, gen_rtx (SET, VOIDmode, gen_rtx (REG, SImode, 29),\n-\t\t\t\t gen_rtx (DIV, SImode,\n-\t\t\t\t\t  gen_rtx (REG, SImode, 26),\n-\t\t\t\t\t  gen_rtx (REG, SImode, 25))),\n-\t\t     gen_rtx (CLOBBER, VOIDmode, operands[3]),\n-\t\t     gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 26)),\n-\t\t     gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 25)),\n-\t\t     gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 31)))));\n-      emit_move_insn (operands[0], gen_rtx (REG, SImode, 29));\n-    }\n-  DONE;\n+  operands[3] = gen_reg_rtx (SImode);\n+  if (GET_CODE (operands[2]) == CONST_INT && emit_hpdiv_const (operands, 0))\n+    DONE;\n }\")\n \n (define_insn \"\"\n   [(set (reg:SI 29)\n-    (div:SI (reg:SI 26) (match_operand:SI 0 \"div_operand\" \"\")))\n+\t(div:SI (reg:SI 26) (match_operand:SI 0 \"div_operand\" \"\")))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=a\"))\n    (clobber (reg:SI 26))\n    (clobber (reg:SI 25))\n@@ -2639,30 +2623,14 @@\n   \"\"\n   \"\n {\n-  operands[3] = gen_reg_rtx(SImode);\n-  if (!(GET_CODE (operands[2]) == CONST_INT && emit_hpdiv_const(operands, 1)))\n-    {\n-      emit_move_insn (gen_rtx (REG, SImode, 26), operands[1]);\n-      emit_move_insn (gen_rtx (REG, SImode, 25), operands[2]);\n-      emit\n-\t(gen_rtx\n-\t (PARALLEL, VOIDmode,\n-\t  gen_rtvec (5, gen_rtx (SET, VOIDmode, gen_rtx (REG, SImode, 29),\n-\t\t\t\t gen_rtx (UDIV, SImode,\n-\t\t\t\t\t  gen_rtx (REG, SImode, 26),\n-\t\t\t\t\t  gen_rtx (REG, SImode, 25))),\n-\t\t     gen_rtx (CLOBBER, VOIDmode, operands[3]),\n-\t\t     gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 26)),\n-\t\t     gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 25)),\n-\t\t     gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 31)))));\n-      emit_move_insn (operands[0], gen_rtx (REG, SImode, 29));\n-    }\n-  DONE;\n+  operands[3] = gen_reg_rtx (SImode);\n+  if (GET_CODE (operands[2]) == CONST_INT && emit_hpdiv_const (operands, 1))\n+    DONE;\n }\")\n \n (define_insn \"\"\n   [(set (reg:SI 29)\n-    (udiv:SI (reg:SI 26) (match_operand:SI 0 \"div_operand\" \"\")))\n+\t(udiv:SI (reg:SI 26) (match_operand:SI 0 \"div_operand\" \"\")))\n    (clobber (match_operand:SI 1 \"register_operand\" \"=a\"))\n    (clobber (reg:SI 26))\n    (clobber (reg:SI 25))\n@@ -2691,22 +2659,7 @@\n   \"\"\n   \"\n {\n-  operands[3] = gen_reg_rtx(SImode);\n-  emit_move_insn (gen_rtx (REG, SImode, 26), operands[1]);\n-  emit_move_insn (gen_rtx (REG, SImode, 25), operands[2]);\n-  emit\n-    (gen_rtx\n-     (PARALLEL, VOIDmode,\n-      gen_rtvec (5, gen_rtx (SET, VOIDmode, gen_rtx (REG, SImode, 29),\n-\t\t\t     gen_rtx (MOD, SImode,\n-\t\t\t\t      gen_rtx (REG, SImode, 26),\n-\t\t\t\t      gen_rtx (REG, SImode, 25))),\n-\t\t gen_rtx (CLOBBER, VOIDmode, operands[3]),\n-\t\t gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 26)),\n-\t\t gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 25)),\n-\t\t gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 31)))));\n-  emit_move_insn (operands[0], gen_rtx (REG, SImode, 29));\n-  DONE;\n+  operands[3] = gen_reg_rtx (SImode);\n }\")\n \n (define_insn \"\"\n@@ -2739,22 +2692,7 @@\n   \"\"\n   \"\n {\n-  operands[3] = gen_reg_rtx(SImode);\n-  emit_move_insn (gen_rtx (REG, SImode, 26), operands[1]);\n-  emit_move_insn (gen_rtx (REG, SImode, 25), operands[2]);\n-  emit\n-    (gen_rtx\n-     (PARALLEL, VOIDmode,\n-      gen_rtvec (5, gen_rtx (SET, VOIDmode, gen_rtx (REG, SImode, 29),\n-\t\t\t     gen_rtx (UMOD, SImode,\n-\t\t\t\t      gen_rtx (REG, SImode, 26),\n-\t\t\t\t      gen_rtx (REG, SImode, 25))),\n-\t\t gen_rtx (CLOBBER, VOIDmode, operands[3]),\n-\t\t gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 26)),\n-\t\t gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 25)),\n-\t\t gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, SImode, 31)))));\n-  emit_move_insn (operands[0], gen_rtx (REG, SImode, 29));\n-  DONE;\n+  operands[3] = gen_reg_rtx (SImode);\n }\")\n \n (define_insn \"\"\n@@ -3142,14 +3080,14 @@\n     {\n       rtx temp = gen_reg_rtx (SImode);\n       emit_insn (gen_subsi3 (temp, GEN_INT (31), operands[2]));\n-\tif (GET_CODE (operands[1]) == CONST_INT)\n-\t  emit_insn (gen_zvdep_imm (operands[0], operands[1], temp));\n-\telse\n-\t  emit_insn (gen_zvdep32 (operands[0], operands[1], temp));\n+      if (GET_CODE (operands[1]) == CONST_INT)\n+\temit_insn (gen_zvdep_imm (operands[0], operands[1], temp));\n+      else\n+\temit_insn (gen_zvdep32 (operands[0], operands[1], temp));\n       DONE;\n     }\n   /* Make sure both inputs are not constants,\n-     the recognizer can't handle that.  */\n+     there are no patterns for that.  */\n   operands[1] = force_reg (SImode, operands[1]);\n }\")\n "}]}