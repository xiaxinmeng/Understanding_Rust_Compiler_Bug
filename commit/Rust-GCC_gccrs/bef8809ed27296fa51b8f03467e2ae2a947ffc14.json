{"sha": "bef8809ed27296fa51b8f03467e2ae2a947ffc14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVmODgwOWVkMjcyOTZmYTUxYjhmMDM0NjdlMmFlMmE5NDdmZmMxNA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2005-01-26T00:07:08Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2005-01-26T00:07:08Z"}, "message": "frv.c (frv_legitimize_tls_address): New.\n\n\t* config/frv/frv.c (frv_legitimize_tls_address): New.\n\t(TARGET_HAVE_TLS): Define.\n\t(FRV_SYMBOL_REF_TLS_P): Define.\n\t(frv_override_options): Handle new register classes.\n\t(frv_legitimate_address_p): Reject tls addresses.\n\t(frv_legitimize_address): Handle TLS addresses.\n\t(gen_inlined_tls_plt): New.\n\t(gen_tlsmoff): New.\n\t(frv_legitimize_tls_address): New.\n\t(unspec_got_name): Add TLS entries.\n\t(got12_operand): Add R_FRV_TLSMOFF12 case.\n\t(frv_emit_move): Fixup TLS addresses.\n\t(frv_emit_movsi): Legitimize TLS addresses.\n\n\t* config/frv/frv.h (MASK_BIG_TLS): New.\n\t(TARGET_BIG_TLS): New.\n\t(HAVE_AS_TLS): Define.\n\t(TARGET_SWITCHES): Add -mTLS and -mtls options.\n\t(enum reg_class): Add GR8_REGS, GR9_REGS, GR89_REGS.\n\t(REG_CLASS_NAMES): Same.\n\t(REG_CLASS_CONTENTS): Same.\n\t(CONSTRAINT_LEN): New.\n\t(REG_CLASS_FROM_CONSTRAINT): New.\n\t(PREDICATE_CODES): Add symbolic_operand.\n\n\t* config/frv/frv.md (define_constants): Add UNSPEC_GETTLSOFF,\n\tUNSPEC_TLS_LOAD_GOTTLSOFF12, UNSPEC_TLS_INDIRECT_CALL,\n\tUNSPEC_TLS_TLSDESC_LDD, UNSPEC_TLS_TLSDESC_LDD_AUX,\n\tUNSPEC_TLS_TLSOFF_LD, UNSPEC_TLS_LDDI, UNSPEC_TLSOFF_HILO,\n\tR_FRV_GOTTLSOFF_HI, R_FRV_GOTTLSOFF_LO, R_FRV_TLSMOFFHI,\n\tR_FRV_TLSMOFFLO, R_FRV_TLSMOFF12, R_FRV_TLSDESCHI,\n\tR_FRV_TLSDESCLO, R_FRV_GOTTLSDESCHI, R_FRV_GOTTLSDESCLO, GR8_REG,\n\tGR9_REG, GR14_REG, LRREG.\n\t(type): Add load_or_call attribute.\n\t(\"load_or_call\"): New reservation.\n\t(\"call_gettlsoff\"): New.\n\t(\"tls_indirect_call\"): New.\n\t(\"tls_load_gottlsoff12\"): New.\n\t(\"tlsoff_hilo\"): New.\n\t(\"tls_tlsdesc_ldd\"): New.\n\t(\"tls_tlsoff_ld\"): New.\n\t(\"tls_lddi\"): New.\n\n\t* config/frv/frv-protos.h (symbolic_operand): Protoize.\n\n        * config/frv/frv.h (ASM_OUTPUT_DWARF_DTPREL): Define.\n        * config/frv/frv-protos.h (frv_output_dwarf_dtprel): Declare.\n        * config/frv/frv.c (TLS_BIAS): Define.\n        (frv_output_dwarf_dtprel): New.\n\nFrom-SVN: r94237", "tree": {"sha": "ebb18462d718659ec4d73acecc8727e06a61549d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebb18462d718659ec4d73acecc8727e06a61549d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bef8809ed27296fa51b8f03467e2ae2a947ffc14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef8809ed27296fa51b8f03467e2ae2a947ffc14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bef8809ed27296fa51b8f03467e2ae2a947ffc14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bef8809ed27296fa51b8f03467e2ae2a947ffc14/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7f7b3348c3abeddc55d218e7b555751b26f7957", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7f7b3348c3abeddc55d218e7b555751b26f7957", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7f7b3348c3abeddc55d218e7b555751b26f7957"}], "stats": {"total": 489, "additions": 481, "deletions": 8}, "files": [{"sha": "35199402c5c1ac89a00ad10bef67655fdd4462c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef8809ed27296fa51b8f03467e2ae2a947ffc14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef8809ed27296fa51b8f03467e2ae2a947ffc14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bef8809ed27296fa51b8f03467e2ae2a947ffc14", "patch": "@@ -1,3 +1,57 @@\n+2005-01-25  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/frv/frv.c (frv_legitimize_tls_address): New.\n+\t(TARGET_HAVE_TLS): Define.\n+\t(FRV_SYMBOL_REF_TLS_P): Define.\n+\t(frv_override_options): Handle new register classes.\n+\t(frv_legitimate_address_p): Reject tls addresses.\n+\t(frv_legitimize_address): Handle TLS addresses.\n+\t(gen_inlined_tls_plt): New.\n+\t(gen_tlsmoff): New.\n+\t(frv_legitimize_tls_address): New.\n+\t(unspec_got_name): Add TLS entries.\n+\t(got12_operand): Add R_FRV_TLSMOFF12 case.\n+\t(frv_emit_move): Fixup TLS addresses.\n+\t(frv_emit_movsi): Legitimize TLS addresses.\n+\n+\t* config/frv/frv.h (MASK_BIG_TLS): New.\n+\t(TARGET_BIG_TLS): New.\n+\t(HAVE_AS_TLS): Define.\n+\t(TARGET_SWITCHES): Add -mTLS and -mtls options.\n+\t(enum reg_class): Add GR8_REGS, GR9_REGS, GR89_REGS.\n+\t(REG_CLASS_NAMES): Same.\n+\t(REG_CLASS_CONTENTS): Same.\n+\t(CONSTRAINT_LEN): New.\n+\t(REG_CLASS_FROM_CONSTRAINT): New.\n+\t(PREDICATE_CODES): Add symbolic_operand.\n+\n+\t* config/frv/frv.md (define_constants): Add UNSPEC_GETTLSOFF,\n+\tUNSPEC_TLS_LOAD_GOTTLSOFF12, UNSPEC_TLS_INDIRECT_CALL,\n+\tUNSPEC_TLS_TLSDESC_LDD, UNSPEC_TLS_TLSDESC_LDD_AUX,\n+\tUNSPEC_TLS_TLSOFF_LD, UNSPEC_TLS_LDDI, UNSPEC_TLSOFF_HILO,\n+\tR_FRV_GOTTLSOFF_HI, R_FRV_GOTTLSOFF_LO, R_FRV_TLSMOFFHI,\n+\tR_FRV_TLSMOFFLO, R_FRV_TLSMOFF12, R_FRV_TLSDESCHI,\n+\tR_FRV_TLSDESCLO, R_FRV_GOTTLSDESCHI, R_FRV_GOTTLSDESCLO, GR8_REG,\n+\tGR9_REG, GR14_REG, LRREG.\n+\t(type): Add load_or_call attribute.\n+\t(\"load_or_call\"): New reservation.\n+\t(\"call_gettlsoff\"): New.\n+\t(\"tls_indirect_call\"): New.\n+\t(\"tls_load_gottlsoff12\"): New.\n+\t(\"tlsoff_hilo\"): New.\n+\t(\"tls_tlsdesc_ldd\"): New.\n+\t(\"tls_tlsoff_ld\"): New.\n+\t(\"tls_lddi\"): New.\n+\n+\t* config/frv/frv-protos.h (symbolic_operand): Protoize.\n+\n+\t2005-01-25  Alexandre Oliva  <aoliva@redhat.com>\n+\n+        * config/frv/frv.h (ASM_OUTPUT_DWARF_DTPREL): Define.\n+        * config/frv/frv-protos.h (frv_output_dwarf_dtprel): Declare.\n+        * config/frv/frv.c (TLS_BIAS): Define.\n+        (frv_output_dwarf_dtprel): New.\n+\n 2005-01-26  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/19579"}, {"sha": "534188eade13cfdd5885554b32aeaebb88fe15dd", "filename": "gcc/config/frv/frv-protos.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef8809ed27296fa51b8f03467e2ae2a947ffc14/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef8809ed27296fa51b8f03467e2ae2a947ffc14/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv-protos.h?ref=bef8809ed27296fa51b8f03467e2ae2a947ffc14", "patch": "@@ -1,5 +1,6 @@\n /* Frv prototypes.\n-   Copyright (C) 1999, 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2003, 2004, 2005 Free Software Foundation,\n+   Inc.\n    Contributed by Red Hat, Inc.\n \n This file is part of GCC.\n@@ -200,6 +201,7 @@ extern int small_data_register_operand\t(rtx, enum machine_mode);\n extern int small_data_symbolic_operand\t(rtx, enum machine_mode);\n extern int upper_int16_operand\t\t(rtx, enum machine_mode);\n extern int uint16_operand\t\t(rtx, enum machine_mode);\n+extern int symbolic_operand\t\t(rtx, enum machine_mode);\n extern int relational_operator\t\t(rtx, enum machine_mode);\n extern int signed_relational_operator\t(rtx, enum machine_mode);\n extern int unsigned_relational_operator\t(rtx, enum machine_mode);\n@@ -221,5 +223,6 @@ extern int accg_operand\t\t\t(rtx, enum machine_mode);\n extern rtx frv_matching_accg_for_acc\t(rtx);\n extern void frv_expand_fdpic_call\t(rtx *, bool, bool);\n extern rtx frv_gen_GPsym2reg\t\t(rtx, rtx);\n+extern void frv_output_dwarf_dtprel\t(FILE *, int, rtx);\n #endif\n "}, {"sha": "5dd280bf32b643ffdcc0c31931d31edd00056742", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 255, "deletions": 3, "changes": 258, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef8809ed27296fa51b8f03467e2ae2a947ffc14/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef8809ed27296fa51b8f03467e2ae2a947ffc14/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=bef8809ed27296fa51b8f03467e2ae2a947ffc14", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003, 2004\n+/* Copyright (C) 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005\n    Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc.\n \n@@ -303,6 +303,7 @@ static rtx frv_read_iacc_argument\t\t(enum machine_mode, tree *);\n static int frv_check_constant_argument\t\t(enum insn_code, int, rtx);\n static rtx frv_legitimize_target\t\t(enum insn_code, rtx);\n static rtx frv_legitimize_argument\t\t(enum insn_code, int, rtx);\n+static rtx frv_legitimize_tls_address\t\t(rtx, enum tls_model);\n static rtx frv_expand_set_builtin\t\t(enum insn_code, tree, rtx);\n static rtx frv_expand_unop_builtin\t\t(enum insn_code, tree, rtx);\n static rtx frv_expand_binop_builtin\t\t(enum insn_code, tree, rtx);\n@@ -414,6 +415,9 @@ static int frv_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM frv_cannot_force_const_mem\n \n+#undef TARGET_HAVE_TLS\n+#define TARGET_HAVE_TLS HAVE_AS_TLS\n+\n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX frv_struct_value_rtx\n #undef TARGET_MUST_PASS_IN_STACK\n@@ -431,6 +435,10 @@ static int frv_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n #define TARGET_MACHINE_DEPENDENT_REORG frv_reorg\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n+\n+#define FRV_SYMBOL_REF_TLS_P(RTX) \\\n+  (GET_CODE (RTX) == SYMBOL_REF && SYMBOL_REF_TLS_MODEL (RTX) != 0)\n+\n \f\n /* Any function call that satisfies the machine-independent\n    requirements is eligible on FR-V.  */\n@@ -640,7 +648,20 @@ frv_override_options (void)\n       if (GPR_P (regno))\n \t{\n \t  int gpr_reg = regno - GPR_FIRST;\n-\t  if ((gpr_reg & 3) == 0)\n+\n+\t  if (gpr_reg == GR8_REG)\n+\t    class = GR8_REGS;\n+\n+\t  else if (gpr_reg == GR9_REG)\n+\t    class = GR9_REGS;\n+\n+\t  else if (gpr_reg == GR14_REG)\n+\t    class = FDPIC_FPTR_REGS;\n+\n+\t  else if (gpr_reg == FDPIC_REGNO)\n+\t    class = FDPIC_REGS;\n+\n+\t  else if ((gpr_reg & 3) == 0)\n \t    class = QUAD_REGS;\n \n \t  else if ((gpr_reg & 1) == 0)\n@@ -3304,6 +3325,9 @@ frv_legitimate_address_p (enum machine_mode mode,\n   HOST_WIDE_INT value;\n   unsigned regno0;\n \n+  if (FRV_SYMBOL_REF_TLS_P (x))\n+    return 0;\n+\n   switch (GET_CODE (x))\n     {\n     default:\n@@ -3421,11 +3445,178 @@ frv_legitimate_address_p (enum machine_mode mode,\n   return ret;\n }\n \n+/* Given an ADDR, generate code to inline the PLT.  */\n+static rtx\n+gen_inlined_tls_plt (rtx addr)\n+{\n+  rtx mem, retval, dest;\n+  rtx picreg = get_hard_reg_initial_val (Pmode, FDPIC_REG);\n+\n+\n+  dest = gen_reg_rtx (DImode);\n+\n+  if (flag_pic == 1)\n+    {\n+      /*\n+\t-fpic version:\n+\n+\tlddi.p  @(gr15, #gottlsdesc12(ADDR)), gr8\n+\tcalll    #gettlsoff(ADDR)@(gr8, gr0)\n+      */\n+      emit_insn (gen_tls_lddi (dest, addr, picreg));\n+    }\n+  else\n+    {\n+      /*\n+\t-fPIC version:\n+\n+\tsethi.p #gottlsdeschi(ADDR), gr8\n+\tsetlo   #gottlsdesclo(ADDR), gr8\n+\tldd     #tlsdesc(ADDR)@(gr15, gr8), gr8\n+\tcalll   #gettlsoff(ADDR)@(gr8, gr0)\n+      */\n+      rtx reguse = gen_reg_rtx (Pmode);\n+      emit_insn (gen_tlsoff_hilo (reguse, addr, GEN_INT (R_FRV_GOTTLSDESCHI)));\n+      emit_insn (gen_tls_tlsdesc_ldd (dest, picreg, reguse, addr));\n+    }\n+\n+  retval = gen_reg_rtx (Pmode);\n+  emit_insn (gen_tls_indirect_call (retval, addr, dest, gen_reg_rtx (Pmode),\n+\t\t\t\t    picreg));\n+  return retval;\n+}\n+\n+/* Emit a TLSMOFF or TLSMOFF12 offset, depending on -mTLS.  Returns\n+   the destination address.  */\n+static rtx\n+gen_tlsmoff (rtx addr, rtx reg)\n+{\n+  rtx dest = gen_reg_rtx (Pmode);\n+\n+  if (TARGET_BIG_TLS)\n+    {\n+      /* sethi.p #tlsmoffhi(x), grA\n+\t setlo   #tlsmofflo(x), grA\n+      */\n+      dest = gen_reg_rtx (Pmode);\n+      emit_insn (gen_tlsoff_hilo (dest, addr,\n+\t\t\t\t  GEN_INT (R_FRV_TLSMOFFHI)));\n+      dest = gen_rtx_PLUS (Pmode, dest, reg);\n+    }\n+  else\n+    {\n+      /* addi grB, #tlsmoff12(x), grC\n+\t   -or-\n+\t ld/st @(grB, #tlsmoff12(x)), grC\n+      */\n+      dest = gen_reg_rtx (Pmode);\n+      emit_insn (gen_symGOTOFF2reg_i (dest, addr, reg,\n+\t\t\t\t      GEN_INT (R_FRV_TLSMOFF12)));\n+    }\n+  return dest;\n+}\n+\n+/* Generate code for a TLS address.  */\n+static rtx\n+frv_legitimize_tls_address (rtx addr, enum tls_model model)\n+{\n+  rtx dest, tp = gen_rtx_REG (Pmode, 29);\n+  rtx picreg = get_hard_reg_initial_val (Pmode, 15);\n+\n+  switch (model)\n+    {\n+    case TLS_MODEL_INITIAL_EXEC:\n+      if (flag_pic == 1)\n+\t{\n+\t  /* -fpic version.\n+\t     ldi @(gr15, #gottlsoff12(x)), gr5\n+\t   */\n+\t  dest = gen_reg_rtx (Pmode);\n+\t  emit_insn (gen_tls_load_gottlsoff12 (dest, addr, picreg));\n+\t  dest = gen_rtx_PLUS (Pmode, tp, dest);\n+\t}\n+      else\n+\t{\n+\t  /* -fPIC or anything else.\n+\n+\t    sethi.p #gottlsoffhi(x), gr14\n+\t    setlo   #gottlsofflo(x), gr14\n+\t    ld      #tlsoff(x)@(gr15, gr14), gr9\n+\t  */\n+\t  rtx tmp = gen_reg_rtx (Pmode);\n+\t  dest = gen_reg_rtx (Pmode);\n+\t  emit_insn (gen_tlsoff_hilo (tmp, addr,\n+\t\t\t\t      GEN_INT (R_FRV_GOTTLSOFF_HI)));\n+\n+\t  emit_insn (gen_tls_tlsoff_ld (dest, picreg, tmp, addr));\n+\t  dest = gen_rtx_PLUS (Pmode, tp, dest);\n+\t}\n+      break;\n+    case TLS_MODEL_LOCAL_DYNAMIC:\n+      {\n+\trtx reg, retval;\n+\n+\tif (TARGET_INLINE_PLT)\n+\t  retval = gen_inlined_tls_plt (GEN_INT (0));\n+\telse\n+\t  {\n+\t    /* call #gettlsoff(0) */\n+\t    retval = gen_reg_rtx (Pmode);\n+\t    emit_insn (gen_call_gettlsoff (retval, GEN_INT (0), picreg));\n+\t  }\n+\n+\treg = gen_reg_rtx (Pmode);\n+\temit_insn (gen_rtx_SET (VOIDmode, reg,\n+\t\t\t\tgen_rtx_PLUS (Pmode,\n+\t\t\t\t\t      retval, tp)));\n+\n+\tdest = gen_tlsmoff (addr, reg);\n+\n+\t/*\n+\tdest = gen_reg_rtx (Pmode);\n+\temit_insn (gen_tlsoff_hilo (dest, addr,\n+\t\t\t\t    GEN_INT (R_FRV_TLSMOFFHI)));\n+\tdest = gen_rtx_PLUS (Pmode, dest, reg);\n+\t*/\n+\tbreak;\n+      }\n+    case TLS_MODEL_LOCAL_EXEC:\n+      dest = gen_tlsmoff (addr, gen_rtx_REG (Pmode, 29));\n+      break;\n+    case TLS_MODEL_GLOBAL_DYNAMIC:\n+      {\n+\trtx retval;\n+\n+\tif (TARGET_INLINE_PLT)\n+\t  retval = gen_inlined_tls_plt (addr);\n+\telse\n+\t  {\n+\t    /* call #gettlsoff(x) */\n+\t    retval = gen_reg_rtx (Pmode);\n+\t    emit_insn (gen_call_gettlsoff (retval, addr, picreg));\n+\t  }\n+\tdest = gen_rtx_PLUS (Pmode, retval, tp);\n+\tbreak;\n+      }\n+    default:\n+      abort ();\n+    }\n+\n+  return dest;\n+}\n+\n rtx\n-frv_legitimize_address (rtx x ATTRIBUTE_UNUSED,\n+frv_legitimize_address (rtx x,\n \t\t\trtx oldx ATTRIBUTE_UNUSED,\n \t\t\tenum machine_mode mode ATTRIBUTE_UNUSED)\n {\n+  if (GET_CODE (x) == SYMBOL_REF)\n+    {\n+      enum tls_model model = SYMBOL_REF_TLS_MODEL (x);\n+      if (model != 0)\n+        return frv_legitimize_tls_address (x, model);\n+    }\n+\n   return NULL_RTX;\n }\n \f\n@@ -3501,6 +3692,15 @@ unspec_got_name (int i)\n     case R_FRV_GPREL12: return \"gprel12\";\n     case R_FRV_GPRELHI: return \"gprelhi\";\n     case R_FRV_GPRELLO: return \"gprello\";\n+    case R_FRV_GOTTLSOFF_HI: return \"gottlsoffhi\";\n+    case R_FRV_GOTTLSOFF_LO: return \"gottlsofflo\";\n+    case R_FRV_TLSMOFFHI: return \"tlsmoffhi\";\n+    case R_FRV_TLSMOFFLO: return \"tlsmofflo\";\n+    case R_FRV_TLSMOFF12: return \"tlsmoff12\";\n+    case R_FRV_TLSDESCHI: return \"tlsdeschi\";\n+    case R_FRV_TLSDESCLO: return \"tlsdesclo\";\n+    case R_FRV_GOTTLSDESCHI: return \"gottlsdeschi\";\n+    case R_FRV_GOTTLSDESCLO: return \"gottlsdesclo\";\n     default: abort ();\n     }\n }\n@@ -4617,6 +4817,7 @@ got12_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n       case R_FRV_FUNCDESC_GOT12:\n       case R_FRV_FUNCDESC_GOTOFF12:\n       case R_FRV_GPREL12:\n+      case R_FRV_TLSMOFF12:\n \treturn true;\n       }\n   return false;\n@@ -4790,6 +4991,24 @@ sibcall_operand (rtx op, enum machine_mode mode)\n   return gpr_or_int12_operand (op, mode);\n }\n \n+/* Returns 1 if OP is either a SYMBOL_REF or a constant.  */\n+int\n+symbolic_operand (register rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+{\n+  enum rtx_code c = GET_CODE (op);\n+\n+  if (c == CONST)\n+    {\n+      /* Allow (const:SI (plus:SI (symbol_ref) (const_int))).  */\n+      return GET_MODE (op) == SImode\n+\t&& GET_CODE (XEXP (op, 0)) == PLUS\n+\t&& GET_CODE (XEXP (XEXP (op, 0), 0)) == SYMBOL_REF\n+\t&& GET_CODE (XEXP (XEXP (op, 0), 1)) == CONST_INT;\n+    }\n+\n+  return c == SYMBOL_REF || c == CONST_INT;\n+}\n+\n /* Return true if operator is a kind of relational operator.  */\n \n int\n@@ -5181,6 +5400,13 @@ direct_return_p (void)\n void\n frv_emit_move (enum machine_mode mode, rtx dest, rtx src)\n {\n+  if (GET_CODE (src) == SYMBOL_REF)\n+    {\n+      enum tls_model model = SYMBOL_REF_TLS_MODEL (src);\n+      if (model != 0)\n+\tsrc = frv_legitimize_tls_address (src, model);\n+    }\n+\n   switch (mode)\n     {\n     case SImode:\n@@ -5314,6 +5540,15 @@ frv_emit_movsi (rtx dest, rtx src)\n     handle_sym:\n       if (TARGET_FDPIC)\n \t{\n+\t  enum tls_model model = SYMBOL_REF_TLS_MODEL (sym);\n+\n+\t  if (model != 0)\n+\t    {\n+\t      src = frv_legitimize_tls_address (src, model);\n+\t      emit_move_insn (dest, src);\n+\t      return TRUE;\n+\t    }\n+\n \t  if (SYMBOL_REF_FUNCTION_P (sym))\n \t    {\n \t      if (frv_local_funcdesc_p (sym))\n@@ -10327,4 +10562,21 @@ frv_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n   return gen_rtx_REG (Pmode, FRV_STRUCT_VALUE_REGNUM);\n }\n \n+#define TLS_BIAS (2048 - 16)\n+\n+/* This is called from dwarf2out.c via ASM_OUTPUT_DWARF_DTPREL.\n+   We need to emit DTP-relative relocations.  */\n+\n+void\n+frv_output_dwarf_dtprel (FILE *file, int size, rtx x)\n+{\n+  if (size != 4)\n+    abort ();\n+  fputs (\"\\t.picptr\\ttlsmoff(\", file);\n+  /* We want the unbiased TLS offset, so add the bias to the\n+     expression, such that the implicit biasing cancels out.  */\n+  output_addr_const (file, plus_constant (x, TLS_BIAS));\n+  fputs (\")\", file);\n+}\n+\n #include \"gt-frv.h\""}, {"sha": "0636fff3664c20440ba2cd7a391d68890f566a3d", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef8809ed27296fa51b8f03467e2ae2a947ffc14/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef8809ed27296fa51b8f03467e2ae2a947ffc14/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=bef8809ed27296fa51b8f03467e2ae2a947ffc14", "patch": "@@ -1,5 +1,5 @@\n /* Target macros for the FRV port of GCC.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005\n    Free Software Foundation, Inc.\n    Contributed by Red Hat Inc.\n \n@@ -309,6 +309,7 @@ extern int target_flags;\n #define MASK_LONG_CALLS\t     0x00000800 /* Use indirect calls */\n #define MASK_ALIGN_LABELS    0x00001000 /* Optimize label alignments */\n #define MASK_LINKED_FP\t     0x00002000 /* Follow ABI linkage requirements.  */\n+#define MASK_BIG_TLS         0x00008000 /* Assume a big TLS segment */\n \n \t\t\t \t\t/* put debug masks up high */\n #define MASK_DEBUG_ARG\t     0x40000000\t/* debug argument handling */\n@@ -353,6 +354,7 @@ extern int target_flags;\n #define TARGET_NO_NESTED_CE\t((target_flags & MASK_NO_NESTED_CE) != 0)\n #define TARGET_FDPIC\t        ((target_flags & MASK_FDPIC) != 0)\n #define TARGET_INLINE_PLT\t((target_flags & MASK_INLINE_PLT) != 0)\n+#define TARGET_BIG_TLS\t\t((target_flags & MASK_BIG_TLS) != 0)\n #define TARGET_GPREL_RO\t\t((target_flags & MASK_GPREL_RO) != 0)\n #define TARGET_PACK\t\t((target_flags & MASK_PACK) != 0)\n #define TARGET_LONG_CALLS\t((target_flags & MASK_LONG_CALLS) != 0)\n@@ -414,6 +416,10 @@ extern int target_flags;\n   (frv_cpu_type == FRV_CPU_FR405\t\t\t\t\\\n    || frv_cpu_type == FRV_CPU_FR450)\n \n+#ifndef HAVE_AS_TLS\n+#define HAVE_AS_TLS 0\n+#endif\n+\n /* This macro defines names of command options to set and clear bits in\n    `target_flags'.  Its definition is an initializer with a subgrouping for\n    each command option.\n@@ -494,6 +500,8 @@ extern int target_flags;\n  { \"no-fdpic\",\t         -MASK_FDPIC,\t\t\"Disable file descriptor PIC mode\" }, \\\n  { \"inline-plt\",\t  MASK_INLINE_PLT,\t\"Enable inlining of PLT in function calls\" }, \\\n  { \"no-inline-plt\",\t -MASK_INLINE_PLT,\t\"Disable inlining of PLT in function calls\" }, \\\n+ { \"TLS\",\t\t  MASK_BIG_TLS,         \"Assume a large TLS segment\" }, \\\n+ { \"tls\",                -MASK_BIG_TLS,\t\t\"Do not assume a large TLS segment\" }, \\\n  { \"gprel-ro\",\t\t  MASK_GPREL_RO,\t\"Enable use of GPREL for read-only data in FDPIC\" }, \\\n  { \"no-gprel-ro\",\t -MASK_GPREL_RO,\t\"Disable use of GPREL for read-only data in FDPIC\" }, \\\n  { \"tomcat-stats\",\t  0, \t\t\t\"Cause gas to print tomcat statistics\" }, \\\n@@ -1267,6 +1275,9 @@ enum reg_class\n   CR_REGS,\n   LCR_REG,\n   LR_REG,\n+  GR8_REGS,\n+  GR9_REGS,\n+  GR89_REGS,\n   FDPIC_REGS,\n   FDPIC_FPTR_REGS,\n   FDPIC_CALL_REGS,\n@@ -1304,6 +1315,9 @@ enum reg_class\n    \"CR_REGS\",\t\t\t\t\t\t\t\t\\\n    \"LCR_REG\",\t\t\t\t\t\t\t\t\\\n    \"LR_REG\",\t\t\t\t\t\t\t\t\\\n+   \"GR8_REGS\",                                                          \\\n+   \"GR9_REGS\",                                                          \\\n+   \"GR89_REGS\",                                                         \\\n    \"FDPIC_REGS\",\t\t\t\t\t\t\t\\\n    \"FDPIC_FPTR_REGS\",\t\t\t\t\t\t\t\\\n    \"FDPIC_CALL_REGS\",\t\t\t\t\t\t\t\\\n@@ -1342,6 +1356,9 @@ enum reg_class\n   { 0x00000000,0x00000000,0x00000000,0x00000000,0x0000ff00,0x0}, /* CR_REGS  */\\\n   { 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x400}, /* LCR_REGS */\\\n   { 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x200}, /* LR_REGS  */\\\n+  { 0x00000100,0x00000000,0x00000000,0x00000000,0x00000000,0x0}, /* GR8_REGS */\\\n+  { 0x00000200,0x00000000,0x00000000,0x00000000,0x00000000,0x0}, /* GR9_REGS */\\\n+  { 0x00000300,0x00000000,0x00000000,0x00000000,0x00000000,0x0}, /* GR89_REGS */\\\n   { 0x00008000,0x00000000,0x00000000,0x00000000,0x00000000,0x0}, /* FDPIC_REGS */\\\n   { 0x00004000,0x00000000,0x00000000,0x00000000,0x00000000,0x0}, /* FDPIC_FPTR_REGS */\\\n   { 0x0000c000,0x00000000,0x00000000,0x00000000,0x00000000,0x0}, /* FDPIC_CALL_REGS */\\\n@@ -1581,6 +1598,17 @@ extern enum reg_class reg_class_from_letter[];\n    : (C) == 'U' ? EXTRA_CONSTRAINT_FOR_U (VALUE)\t\t\t\\\n    : 0)\n \n+#define CONSTRAINT_LEN(C, STR) \\\n+  ((C) == 'D' ? 3 : DEFAULT_CONSTRAINT_LEN ((C), (STR)))\n+\n+#define REG_CLASS_FROM_CONSTRAINT(C, STR) \\\n+  (((C) == 'D' && (STR)[1] == '8' && (STR)[2] == '9') ? GR89_REGS : \\\n+   ((C) == 'D' && (STR)[1] == '0' && (STR)[2] == '9') ? GR9_REGS : \\\n+   ((C) == 'D' && (STR)[1] == '0' && (STR)[2] == '8') ? GR8_REGS : \\\n+   ((C) == 'D' && (STR)[1] == '1' && (STR)[2] == '4') ? FDPIC_FPTR_REGS : \\\n+   ((C) == 'D' && (STR)[1] == '1' && (STR)[2] == '5') ? FDPIC_REGS : \\\n+   REG_CLASS_FROM_LETTER ((C)))\n+\n \f\n /* Basic Stack Layout.  */\n \n@@ -2578,6 +2606,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n   assemble_name (STREAM, LABEL);\t\t\t\t\t\\\n } while (0)\n \n+#if HAVE_AS_TLS\n+/* Emit a dtp-relative reference to a TLS variable.  */\n+\n+#define ASM_OUTPUT_DWARF_DTPREL(FILE, SIZE, X) \\\n+  frv_output_dwarf_dtprel ((FILE), (SIZE), (X))\n+#endif\n+\n /* Whether to emit the gas specific dwarf2 line number support.  */\n #define DWARF2_ASM_LINE_DEBUG_INFO (TARGET_DEBUG_LOC)\n \f\n@@ -3025,6 +3060,7 @@ do {                                                                    \\\n \t\t\t\t\t  CONST }}, \t\t\t\\\n   { \"upper_int16_operand\",\t\t{ CONST_INT }},\t\t\t\\\n   { \"uint16_operand\",\t\t\t{ CONST_INT }},\t\t\t\\\n+  { \"symbolic_operand\",                 { SYMBOL_REF, CONST_INT }},     \\\n   { \"relational_operator\",\t\t{ EQ, NE, LE, LT, GE, GT,\t\\\n \t\t\t\t\t  LEU, LTU, GEU, GTU }},\t\\\n   { \"integer_relational_operator\",\t{ EQ, NE, LE, LT, GE, GT,\t\\"}, {"sha": "bab77557273c06af7dceec5193f164685c6d55dc", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 131, "deletions": 3, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bef8809ed27296fa51b8f03467e2ae2a947ffc14/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bef8809ed27296fa51b8f03467e2ae2a947ffc14/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=bef8809ed27296fa51b8f03467e2ae2a947ffc14", "patch": "@@ -1,5 +1,6 @@\n ;; Frv Machine Description\n-;; Copyright (C) 1999, 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n+;; Copyright (C) 1999, 2000, 2001, 2003, 2004, 2005 Free Software Foundation,\n+;; Inc.\n ;; Contributed by Red Hat, Inc.\n \n ;; This file is part of GCC.\n@@ -41,6 +42,15 @@\n    (UNSPEC_GOT\t\t\t7)\n    (UNSPEC_LDD\t\t\t8)\n \n+   (UNSPEC_GETTLSOFF\t\t\t200)\n+   (UNSPEC_TLS_LOAD_GOTTLSOFF12\t\t201)\n+   (UNSPEC_TLS_INDIRECT_CALL\t\t202)\n+   (UNSPEC_TLS_TLSDESC_LDD\t\t203)\n+   (UNSPEC_TLS_TLSDESC_LDD_AUX\t\t204)\n+   (UNSPEC_TLS_TLSOFF_LD\t\t205)\n+   (UNSPEC_TLS_LDDI\t\t\t206)\n+   (UNSPEC_TLSOFF_HILO\t\t\t207)\n+\n    (R_FRV_GOT12\t\t\t11)\n    (R_FRV_GOTHI\t\t\t12)\n    (R_FRV_GOTLO\t\t\t13)\n@@ -58,7 +68,21 @@\n    (R_FRV_GPREL12\t\t25)\n    (R_FRV_GPRELHI\t\t26)\n    (R_FRV_GPRELLO\t\t27)\n-\n+   (R_FRV_GOTTLSOFF_HI\t\t28)\n+   (R_FRV_GOTTLSOFF_LO\t\t29)\n+   (R_FRV_TLSMOFFHI\t\t30)\n+   (R_FRV_TLSMOFFLO           \t31)\n+   (R_FRV_TLSMOFF12           \t32)\n+   (R_FRV_TLSDESCHI           \t33)\n+   (R_FRV_TLSDESCLO           \t34)\n+   (R_FRV_GOTTLSDESCHI\t\t35)\n+   (R_FRV_GOTTLSDESCLO\t\t36)\n+\n+   (GR8_REG\t\t\t8)\n+   (GR9_REG\t\t\t9)\n+   (GR14_REG\t\t\t14)\n+   ;; LR_REG conflicts with definition in frv.h\n+   (LRREG                       169)\n    (FDPIC_REG\t\t\t15)\n    ])\n \n@@ -330,7 +354,7 @@\n ;; Instruction type\n ;; \"unknown\" must come last.\n (define_attr \"type\"\n-  \"int,sethi,setlo,mul,div,gload,gstore,fload,fstore,movfg,movgf,macc,scan,cut,branch,jump,jumpl,call,spr,trap,fnop,fsconv,fsadd,fscmp,fsmul,fsmadd,fsdiv,sqrt_single,fdconv,fdadd,fdcmp,fdmul,fdmadd,fddiv,sqrt_double,mnop,mlogic,maveh,msath,maddh,mqaddh,mpackh,munpackh,mdpackh,mbhconv,mrot,mshift,mexpdhw,mexpdhd,mwcut,mmulh,mmulxh,mmach,mmrdh,mqmulh,mqmulxh,mqmach,mcpx,mqcpx,mcut,mclracc,mclracca,mdunpackh,mbhconve,mrdacc,mwtacc,maddacc,mdaddacc,mabsh,mdrot,mcpl,mdcut,mqsath,mqlimh,mqshift,mset,ccr,multi,unknown\"\n+  \"int,sethi,setlo,mul,div,gload,gstore,fload,fstore,movfg,movgf,macc,scan,cut,branch,jump,jumpl,call,spr,trap,fnop,fsconv,fsadd,fscmp,fsmul,fsmadd,fsdiv,sqrt_single,fdconv,fdadd,fdcmp,fdmul,fdmadd,fddiv,sqrt_double,mnop,mlogic,maveh,msath,maddh,mqaddh,mpackh,munpackh,mdpackh,mbhconv,mrot,mshift,mexpdhw,mexpdhd,mwcut,mmulh,mmulxh,mmach,mmrdh,mqmulh,mqmulxh,mqmach,mcpx,mqcpx,mcut,mclracc,mclracca,mdunpackh,mbhconve,mrdacc,mwtacc,maddacc,mdaddacc,mabsh,mdrot,mcpl,mdcut,mqsath,mqlimh,mqshift,mset,ccr,multi,load_or_call,unknown\"\n   (const_string \"unknown\"))\n \n (define_attr \"acc_group\" \"none,even,odd\"\n@@ -529,6 +553,11 @@\n   (eq_attr \"type\" \"trap,spr,unknown,multi\")\n   \"c + control\")\n \n+;; Reservation for relaxable calls to gettlsoff.\n+(define_insn_reservation \"load_or_call\" 3\n+  (eq_attr \"type\" \"load_or_call\")\n+  \"c + control\")\n+\n ;; ::::::::::::::::::::\n ;; ::\n ;; :: Generic/FR500 scheduler description\n@@ -8134,3 +8163,102 @@\n   \"TARGET_FR500_FR550_BUILTINS\"\n   \"nop.p\\\\n\\\\tnldub @(%0, gr0), gr0\"\n   [(set_attr \"length\" \"8\")])\n+\n+;; TLS patterns\n+\n+(define_insn \"call_gettlsoff\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=D09\")\n+\t(unspec:SI\n+\t [(match_operand:SI 1 \"symbolic_operand\" \"\")]\n+\t UNSPEC_GETTLSOFF))\n+   (clobber (reg:SI GR8_REG))\n+   (clobber (reg:SI LRREG))\n+   (use (match_operand:SI 2 \"register_operand\" \"D15\"))]\n+  \"HAVE_AS_TLS\"\n+  \"call #gettlsoff(%a1)\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"load_or_call\")])\n+\n+;; Reads GR8 and GR9.\n+;; Clobbers GR8.\n+;; Modifies GR9.\n+(define_insn \"tls_indirect_call\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=D09\")\n+\t(unspec:SI\n+\t [(match_operand:SI 1 \"symbolic_operand\" \"\")\n+\t  (match_operand:DI 2 \"register_operand\" \"D89\")]\n+\t UNSPEC_TLS_INDIRECT_CALL))\n+   (clobber (match_operand:SI 3 \"register_operand\" \"=D08\"))\n+   (clobber (reg:SI LRREG))\n+   ;; If there was a way to represent the fact that we don't need GR9\n+   ;; or GR15 to be set before this instruction (it could be in\n+   ;; parallel), we could use it here.  This change wouldn't apply to\n+   ;; call_gettlsoff, thought, since the linker may turn the latter\n+   ;; into ldi @(gr15,offset),gr9.\n+   (use (match_operand:SI 4 \"register_operand\" \"D15\"))]\n+  \"HAVE_AS_TLS\"\n+  \"calll #gettlsoff(%a1)@(%2,gr0)\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"jumpl\")])\n+\n+(define_insn \"tls_load_gottlsoff12\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI\n+\t [(match_operand:SI 1 \"symbolic_operand\" \"\")\n+\t  (match_operand:SI 2 \"register_operand\" \"r\")]\n+\t UNSPEC_TLS_LOAD_GOTTLSOFF12))]\n+  \"HAVE_AS_TLS\"\n+  \"ldi @(%2, #gottlsoff12(%1)), %0\"\n+  [(set_attr \"length\" \"4\")])\n+\n+(define_expand \"tlsoff_hilo\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(high:SI (const:SI (unspec:SI\n+\t\t\t    [(match_operand:SI 1 \"symbolic_operand\" \"\")\n+\t\t\t     (match_operand:SI 2 \"immediate_operand\" \"n\")]\n+\t\t\t    UNSPEC_GOT))))\n+   (set (match_dup 0)\n+\t(lo_sum:SI (match_dup 0)\n+\t\t   (const:SI (unspec:SI [(match_dup 1)\n+\t\t\t\t\t (match_dup 3)] UNSPEC_GOT))))]\n+  \"\"\n+  \"\n+{\n+  operands[3] = GEN_INT (INTVAL (operands[2]) + 1);\n+}\")\n+\n+;; Just like movdi_ldd, but with relaxation annotations.\n+(define_insn \"tls_tlsdesc_ldd\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec:DI [(mem:DI (unspec:SI\n+\t\t\t     [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t      (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t      (match_operand:SI 3 \"symbolic_operand\" \"\")]\n+\t\t\t     UNSPEC_TLS_TLSDESC_LDD_AUX))]\n+\t\t   UNSPEC_TLS_TLSDESC_LDD))]\n+  \"\"\n+  \"ldd #tlsdesc(%a3)@(%1,%2), %0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"gload\")])\n+\n+(define_insn \"tls_tlsoff_ld\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(mem:SI (unspec:SI\n+\t\t [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t  (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t  (match_operand:SI 3 \"symbolic_operand\" \"\")]\n+\t\t UNSPEC_TLS_TLSOFF_LD)))]\n+  \"\"\n+  \"ld #tlsoff(%a3)@(%1,%2), %0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"gload\")])\n+\n+(define_insn \"tls_lddi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:SI 1 \"symbolic_operand\" \"\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \"d\")]\n+\t\t   UNSPEC_TLS_LDDI))]\n+  \"\"\n+  \"lddi @(%2, #gottlsdesc12(%a1)), %0\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"gload\")])"}]}