{"sha": "f418bc3cd173bc4e679469928d4d96ffcc05fc7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQxOGJjM2NkMTczYmM0ZTY3OTQ2OTkyOGQ0ZDk2ZmZjYzA1ZmM3ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-04T10:40:42Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-04T10:53:21Z"}, "message": "Fix libiberty link failures in LTO mode for MinGW\n\nThe test for the presence of variables (really symbols) does not work\nwhen you add -Ox -flto to CFLAGS:\n\n  for v in $vars; do\n    AC_MSG_CHECKING([for $v])\n    AC_CACHE_VAL(libiberty_cv_var_$v,\n      [AC_LINK_IFELSE([AC_LANG_PROGRAM([[int *p;]],[[extern int $v [];\n                                         p = $v;]])],\n                      [eval \"libiberty_cv_var_$v=yes\"],\n                      [eval \"libiberty_cv_var_$v=no\"])])\n    if eval \"test \\\"`echo '$libiberty_cv_var_'$v`\\\" = yes\"; then\n      AC_MSG_RESULT(yes)\n      AC_DEFINE_UNQUOTED($n)\n    else\n      AC_MSG_RESULT(no)\n    fi\n  done\n\nbecause the assignment to 'p' is optimized away by LTO.  This is visible\non MinGW platforms in the form of a link failure for sys_siglist.\n\nThere is another link failures for stpcpy: the symbol is both referenced\nby libiberty's pex-win32.c and provided by libiberty's stpcpy.c, so it\nneeds to have a linkage to be resolved in LTO mode.\n\nlibiberty/\n\t* configure.ac: Make test for variables more robust.\n\t* configure: Regenerate.\ngcc/\n\t* builtins.c (builtin_with_linkage_p): Return true for stp[n]cpy.\n\t* symtab.c (symtab_node::output_to_lto_symbol_table_p): Tidy up.", "tree": {"sha": "9883221a26c13694cf41f221dddf3f4ac2fc9acc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9883221a26c13694cf41f221dddf3f4ac2fc9acc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f418bc3cd173bc4e679469928d4d96ffcc05fc7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f418bc3cd173bc4e679469928d4d96ffcc05fc7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f418bc3cd173bc4e679469928d4d96ffcc05fc7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f418bc3cd173bc4e679469928d4d96ffcc05fc7e/comments", "author": null, "committer": null, "parents": [{"sha": "1b0f570009825ce53a3967ea9a92b1961b7c122b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b0f570009825ce53a3967ea9a92b1961b7c122b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b0f570009825ce53a3967ea9a92b1961b7c122b"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "0db4090c434eeeb371d980d15d8eda72a8aa4a8b", "filename": "gcc/builtins.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f418bc3cd173bc4e679469928d4d96ffcc05fc7e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f418bc3cd173bc4e679469928d4d96ffcc05fc7e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f418bc3cd173bc4e679469928d4d96ffcc05fc7e", "patch": "@@ -14480,8 +14480,8 @@ target_char_cst_p (tree t, char *p)\n }\n \n /* Return true if the builtin DECL is implemented in a standard library.\n-   Otherwise returns false which doesn't guarantee it is not (thus the list of\n-   handled builtins below may be incomplete).  */\n+   Otherwise return false which doesn't guarantee it is not (thus the list\n+   of handled builtins below may be incomplete).  */\n \n bool\n builtin_with_linkage_p (tree decl)\n@@ -14560,6 +14560,14 @@ builtin_with_linkage_p (tree decl)\n       CASE_FLT_FN (BUILT_IN_TRUNC):\n       CASE_FLT_FN_FLOATN_NX (BUILT_IN_TRUNC):\n \treturn true;\n+\n+      case BUILT_IN_STPCPY:\n+      case BUILT_IN_STPNCPY:\n+\t/* stpcpy is both referenced in libiberty's pex-win32.c and provided\n+\t   by libiberty's stpcpy.c for MinGW targets so we need to return true\n+\t   in order to be able to build libiberty in LTO mode for them.  */\n+\treturn true;\n+\n       default:\n \tbreak;\n     }"}, {"sha": "8c4cb70b015469633971f25d8cf5d81711eee264", "filename": "gcc/symtab.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f418bc3cd173bc4e679469928d4d96ffcc05fc7e/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f418bc3cd173bc4e679469928d4d96ffcc05fc7e/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=f418bc3cd173bc4e679469928d4d96ffcc05fc7e", "patch": "@@ -2526,10 +2526,7 @@ symtab_node::output_to_lto_symbol_table_p (void)\n \t in libraries so make sure to output references into the symbol table to\n \t make those libraries referenced.  Note this is incomplete handling for\n \t now and only covers math functions.  */\n-      if (builtin_with_linkage_p (decl))\n-\treturn true;\n-      else\n-\treturn false;\n+      return builtin_with_linkage_p (decl);\n     }\n \n   /* We have real symbol that should be in symbol table.  However try to trim"}, {"sha": "57498d8575505ed5308e74f8bc6686d55cedfb14", "filename": "libiberty/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f418bc3cd173bc4e679469928d4d96ffcc05fc7e/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f418bc3cd173bc4e679469928d4d96ffcc05fc7e/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=f418bc3cd173bc4e679469928d4d96ffcc05fc7e", "patch": "@@ -7049,11 +7049,11 @@ else\n fi\n cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n-int *p;\n+extern int $v [];\n int\n main ()\n {\n-extern int $v []; p = $v;\n+if ($v [0]) return 1;\n   ;\n   return 0;\n }"}, {"sha": "3c03f24d3680a1bd6088271b62d6367f72e9516c", "filename": "libiberty/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f418bc3cd173bc4e679469928d4d96ffcc05fc7e/libiberty%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f418bc3cd173bc4e679469928d4d96ffcc05fc7e/libiberty%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.ac?ref=f418bc3cd173bc4e679469928d4d96ffcc05fc7e", "patch": "@@ -665,7 +665,7 @@ if test -z \"${setobjs}\"; then\n   for v in $vars; do\n     AC_MSG_CHECKING([for $v])\n     AC_CACHE_VAL(libiberty_cv_var_$v,\n-      [AC_LINK_IFELSE([AC_LANG_PROGRAM([[int *p;]],[[extern int $v []; p = $v;]])],\n+      [AC_LINK_IFELSE([AC_LANG_PROGRAM([[extern int $v [];]],[[if ($v [0]) return 1;]])],\n \t\t      [eval \"libiberty_cv_var_$v=yes\"],\n \t\t      [eval \"libiberty_cv_var_$v=no\"])])\n     if eval \"test \\\"`echo '$libiberty_cv_var_'$v`\\\" = yes\"; then"}]}