{"sha": "159ffebb20c4da2ec07506d57d0243c4e5e7b43f", "node_id": "C_kwDOANBUbNoAKDE1OWZmZWJiMjBjNGRhMmVjMDc1MDZkNTdkMDI0M2M0ZTVlN2I0M2Y", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-22T11:04:24Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-22T13:36:44Z"}, "message": "privacy: visibility: Add remaining visitors for simple items", "tree": {"sha": "ed9ae876dec5307da72be2a0327c95b32e86f23e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed9ae876dec5307da72be2a0327c95b32e86f23e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/159ffebb20c4da2ec07506d57d0243c4e5e7b43f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/159ffebb20c4da2ec07506d57d0243c4e5e7b43f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/159ffebb20c4da2ec07506d57d0243c4e5e7b43f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/159ffebb20c4da2ec07506d57d0243c4e5e7b43f/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4337aea3be387921ee60520d2188906d8762367b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4337aea3be387921ee60520d2188906d8762367b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4337aea3be387921ee60520d2188906d8762367b"}], "stats": {"total": 66, "additions": 59, "deletions": 7}, "files": [{"sha": "b3dc025319fcb02b3d95890bc3203cc24c1ca0c4", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159ffebb20c4da2ec07506d57d0243c4e5e7b43f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159ffebb20c4da2ec07506d57d0243c4e5e7b43f/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=159ffebb20c4da2ec07506d57d0243c4e5e7b43f", "patch": "@@ -633,6 +633,7 @@ class VisItem : public Item\n   virtual void accept_vis (HIRVisItemVisitor &vis) = 0;\n \n   Visibility &get_visibility () { return visibility; }\n+  const Visibility &get_visibility () const { return visibility; }\n \n   std::string as_string () const override;\n };"}, {"sha": "8f5aebadf44a483a296acd84aaa7329a8cae9ac0", "filename": "gcc/rust/privacy/rust-visibility-resolver.cc", "status": "modified", "additions": 50, "deletions": 7, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159ffebb20c4da2ec07506d57d0243c4e5e7b43f/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159ffebb20c4da2ec07506d57d0243c4e5e7b43f/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc?ref=159ffebb20c4da2ec07506d57d0243c4e5e7b43f", "patch": "@@ -64,6 +64,16 @@ VisibilityResolver::resolve_visibility (const HIR::Visibility &visibility,\n     }\n }\n \n+void\n+VisibilityResolver::resolve_and_update (const HIR::VisItem *item)\n+{\n+  ModuleVisibility module_vis;\n+  if (!resolve_visibility (item->get_visibility (), module_vis))\n+    return; // we will already have emitted errors\n+\n+  mappings.insert_visibility (item->get_mappings ().get_defid (), module_vis);\n+}\n+\n DefId\n VisibilityResolver::peek_module ()\n {\n@@ -101,19 +111,27 @@ VisibilityResolver::visit (HIR::UseDeclaration &use_decl)\n \n void\n VisibilityResolver::visit (HIR::Function &func)\n-{}\n+{\n+  resolve_and_update (&func);\n+}\n \n void\n VisibilityResolver::visit (HIR::TypeAlias &type_alias)\n-{}\n+{\n+  resolve_and_update (&type_alias);\n+}\n \n void\n VisibilityResolver::visit (HIR::StructStruct &struct_item)\n-{}\n+{\n+  resolve_and_update (&struct_item);\n+}\n \n void\n VisibilityResolver::visit (HIR::TupleStruct &tuple_struct)\n-{}\n+{\n+  resolve_and_update (&tuple_struct);\n+}\n \n void\n VisibilityResolver::visit (HIR::Enum &enum_item)\n@@ -133,11 +151,15 @@ VisibilityResolver::visit (HIR::Union &union_item)\n \n void\n VisibilityResolver::visit (HIR::ConstantItem &const_item)\n-{}\n+{\n+  resolve_and_update (&const_item);\n+}\n \n void\n VisibilityResolver::visit (HIR::StaticItem &static_item)\n-{}\n+{\n+  resolve_and_update (&static_item);\n+}\n \n void\n VisibilityResolver::visit (HIR::Trait &trait)\n@@ -153,7 +175,28 @@ VisibilityResolver::visit (HIR::Trait &trait)\n \n void\n VisibilityResolver::visit (HIR::ImplBlock &impl)\n-{}\n+{\n+  for (auto &item : impl.get_impl_items ())\n+    {\n+      HIR::VisItem *vis_item;\n+      switch (item->get_impl_item_type ())\n+\t{\n+\tcase HIR::ImplItem::FUNCTION:\n+\t  vis_item = static_cast<HIR::Function *> (item.get ());\n+\t  break;\n+\tcase HIR::ImplItem::TYPE_ALIAS:\n+\t  vis_item = static_cast<HIR::TypeAlias *> (item.get ());\n+\t  break;\n+\tcase HIR::ImplItem::CONSTANT:\n+\t  vis_item = static_cast<HIR::ConstantItem *> (item.get ());\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t  return;\n+\t}\n+      vis_item->accept_vis (*this);\n+    }\n+}\n \n void\n VisibilityResolver::visit (HIR::ExternBlock &block)"}, {"sha": "16fb42fa0b429a6f17c6abf5d881ec8c0f5dd83c", "filename": "gcc/rust/privacy/rust-visibility-resolver.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/159ffebb20c4da2ec07506d57d0243c4e5e7b43f/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/159ffebb20c4da2ec07506d57d0243c4e5e7b43f/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h?ref=159ffebb20c4da2ec07506d57d0243c4e5e7b43f", "patch": "@@ -52,6 +52,14 @@ class VisibilityResolver : public HIR::HIRVisItemVisitor\n   bool resolve_visibility (const HIR::Visibility &visibility,\n \t\t\t   ModuleVisibility &to_resolve);\n \n+  /**\n+   * Resolve the visibility of an item and updates it. This is useful for\n+   * vis-items who need to be resolved but do not care about their module\n+   * visibility - const items, static items, etc. For items with an impact on\n+   * their children (enums, traits), this cannot be used\n+   */\n+  void resolve_and_update (const HIR::VisItem *item);\n+\n   /**\n    * Get the DefId of the parent module we are currently visiting.\n    *"}]}