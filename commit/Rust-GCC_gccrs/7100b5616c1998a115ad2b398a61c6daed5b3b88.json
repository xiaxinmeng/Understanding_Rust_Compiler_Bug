{"sha": "7100b5616c1998a115ad2b398a61c6daed5b3b88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEwMGI1NjE2YzE5OThhMTE1YWQyYjM5OGE2MWM2ZGFlZDViM2I4OA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-11-20T18:02:36Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-11-20T18:02:36Z"}, "message": "[multiple changes]\n\n2012-11-20  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/i386.md (fix_trunc<MODEF:mode><SWI48:mode>_sse): Macroize\n\tinsn from fix_trunc<mode>{si,di}_sse using SWI48 mode iterator.\n\t(peephole2 to avoid vector decoded forms): Macroize peephole2\n\tusing MODEF mode iterator.  Use SWI48 mode iterator instead of SWI48x.\n\n2012-11-20  Uros Bizjak  <ubizjak@gmail.com>\n\n\tPR target/19398\n\t* config/i386/i386.md\n\t(peephole2 to shorten x87->SSE reload sequences): Remove peephole2.\n\t* config/i386/i386.h (enum ix86_tune_indices)\n\t<IX86_TUNE_SHORTEN_X87_SSE>: Remove.\n\t* config/i386/i386.h (initial_ix86_tune_features): Update.\n\n2012-11-20  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/19398\n\t* lra-constraints.c (process_alt_operands): Discourage reloads\n\tthrough secodnary memory.\n\ntestsuite/ChangeLog:\n\n2012-11-20  Uros Bizjak  <ubizjak@gmail.com>\n\n\tPR target/19398\n\t* gcc.target/i386/pr19398.c: New test.\n\nFrom-SVN: r193671", "tree": {"sha": "34852e73dd7aac72581066d216146b17d51f6061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34852e73dd7aac72581066d216146b17d51f6061"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7100b5616c1998a115ad2b398a61c6daed5b3b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7100b5616c1998a115ad2b398a61c6daed5b3b88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7100b5616c1998a115ad2b398a61c6daed5b3b88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7100b5616c1998a115ad2b398a61c6daed5b3b88/comments", "author": null, "committer": null, "parents": [{"sha": "b20ade36e40a97f2836926dd95cbb5a7d087f58f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20ade36e40a97f2836926dd95cbb5a7d087f58f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20ade36e40a97f2836926dd95cbb5a7d087f58f"}], "stats": {"total": 119, "additions": 68, "deletions": 51}, "files": [{"sha": "cc6441c657bd338de1cbfa900dd0680aff0b81a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7100b5616c1998a115ad2b398a61c6daed5b3b88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7100b5616c1998a115ad2b398a61c6daed5b3b88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7100b5616c1998a115ad2b398a61c6daed5b3b88", "patch": "@@ -1,3 +1,25 @@\n+2012-11-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (fix_trunc<MODEF:mode><SWI48:mode>_sse): Macroize\n+\tinsn from fix_trunc<mode>{si,di}_sse using SWI48 mode iterator.\n+\t(peephole2 to avoid vector decoded forms): Macroize peephole2\n+\tusing MODEF mode iterator.  Use SWI48 mode iterator instead of SWI48x.\n+\n+2012-11-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/19398\n+\t* config/i386/i386.md\n+\t(peephole2 to shorten x87->SSE reload sequences): Remove peephole2.\n+\t* config/i386/i386.h (enum ix86_tune_indices)\n+\t<IX86_TUNE_SHORTEN_X87_SSE>: Remove.\n+\t* config/i386/i386.h (initial_ix86_tune_features): Update.\n+\n+2012-11-20  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/19398\n+\t* lra-constraints.c (process_alt_operands): Discourage reloads\n+\tthrough secodnary memory.\n+\n 2012-11-20  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/rs6000.md (largetoc_low): Revert.\n@@ -48,8 +70,7 @@\n \t(v850_function_arg_advance): Likewise.\n \t(v850_print_operand): Handle CONST_INT and CONST_DOUBLE.\n \t(compute_register_save_size): Use df_regs_ever_live_p.\n-\t(increment_stack): Mark prologue adjustments as being frame\n-\trelated.\n+\t(increment_stack): Mark prologue adjustments as being frame related.\n \t(expand_prologue): Handle pretend args.  Mark insns generated as\n \tbeing frame related.\n \t(expand_epilogue): Likewise."}, {"sha": "fc757718d18199c297bdfba9f2568422fc130d25", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7100b5616c1998a115ad2b398a61c6daed5b3b88/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7100b5616c1998a115ad2b398a61c6daed5b3b88/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7100b5616c1998a115ad2b398a61c6daed5b3b88", "patch": "@@ -1855,9 +1855,6 @@ static unsigned int initial_ix86_tune_features[X86_TUNE_LAST] = {\n   /* X86_TUNE_EXT_80387_CONSTANTS */\n   m_PPRO | m_P4_NOCONA | m_CORE2I7 | m_ATOM | m_K6_GEODE | m_ATHLON_K8 | m_GENERIC,\n \n-  /* X86_TUNE_SHORTEN_X87_SSE */\n-  ~m_K8,\n-\n   /* X86_TUNE_AVOID_VECTOR_DECODE */\n   m_CORE2I7_64 | m_K8 | m_GENERIC64,\n "}, {"sha": "ef626835f4aa463db7218536c4e859b9f828860e", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7100b5616c1998a115ad2b398a61c6daed5b3b88/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7100b5616c1998a115ad2b398a61c6daed5b3b88/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=7100b5616c1998a115ad2b398a61c6daed5b3b88", "patch": "@@ -314,7 +314,6 @@ enum ix86_tune_indices {\n   X86_TUNE_PAD_RETURNS,\n   X86_TUNE_PAD_SHORT_FUNCTION,\n   X86_TUNE_EXT_80387_CONSTANTS,\n-  X86_TUNE_SHORTEN_X87_SSE,\n   X86_TUNE_AVOID_VECTOR_DECODE,\n   X86_TUNE_PROMOTE_HIMODE_IMUL,\n   X86_TUNE_SLOW_IMUL_IMM32_MEM,\n@@ -408,7 +407,6 @@ extern unsigned char ix86_tune_features[X86_TUNE_LAST];\n \tix86_tune_features[X86_TUNE_PAD_SHORT_FUNCTION]\n #define TARGET_EXT_80387_CONSTANTS \\\n \tix86_tune_features[X86_TUNE_EXT_80387_CONSTANTS]\n-#define TARGET_SHORTEN_X87_SSE\tix86_tune_features[X86_TUNE_SHORTEN_X87_SSE]\n #define TARGET_AVOID_VECTOR_DECODE \\\n \tix86_tune_features[X86_TUNE_AVOID_VECTOR_DECODE]\n #define TARGET_TUNE_PROMOTE_HIMODE_IMUL \\"}, {"sha": "05449ba3c60c4271804b1bdee996e048159497cc", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 18, "deletions": 44, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7100b5616c1998a115ad2b398a61c6daed5b3b88/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7100b5616c1998a115ad2b398a61c6daed5b3b88/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7100b5616c1998a115ad2b398a61c6daed5b3b88", "patch": "@@ -4465,60 +4465,34 @@\n   \"operands[2] = gen_reg_rtx (SImode);\")\n \n ;; When SSE is available, it is always faster to use it!\n-(define_insn \"fix_trunc<mode>di_sse\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(fix:DI (match_operand:MODEF 1 \"nonimmediate_operand\" \"x,m\")))]\n-  \"TARGET_64BIT && SSE_FLOAT_MODE_P (<MODE>mode)\n+(define_insn \"fix_trunc<MODEF:mode><SWI48:mode>_sse\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r,r\")\n+\t(fix:SWI48 (match_operand:MODEF 1 \"nonimmediate_operand\" \"x,m\")))]\n+  \"SSE_FLOAT_MODE_P (<MODEF:MODE>mode)\n    && (!TARGET_FISTTP || TARGET_SSE_MATH)\"\n-  \"%vcvtt<ssemodesuffix>2si{q}\\t{%1, %0|%0, %1}\"\n+  \"%vcvtt<MODEF:ssemodesuffix>2si<SWI48:rex64suffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"prefix_rex\" \"1\")\n-   (set_attr \"mode\" \"<MODE>\")\n-   (set_attr \"athlon_decode\" \"double,vector\")\n-   (set_attr \"amdfam10_decode\" \"double,double\")\n-   (set_attr \"bdver1_decode\" \"double,double\")])\n-\n-(define_insn \"fix_trunc<mode>si_sse\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(fix:SI (match_operand:MODEF 1 \"nonimmediate_operand\" \"x,m\")))]\n-  \"SSE_FLOAT_MODE_P (<MODE>mode)\n-   && (!TARGET_FISTTP || TARGET_SSE_MATH)\"\n-  \"%vcvtt<ssemodesuffix>2si\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"sseicvt\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"<MODE>\")\n+   (set (attr \"prefix_rex\")\n+\t(if_then_else\n+\t  (match_test \"<SWI48:MODE>mode == DImode\")\n+\t  (const_string \"1\")\n+\t  (const_string \"*\")))\n+   (set_attr \"mode\" \"<MODEF:MODE>\")\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"amdfam10_decode\" \"double,double\")\n    (set_attr \"bdver1_decode\" \"double,double\")])\n \n-;; Shorten x87->SSE reload sequences of fix_trunc?f?i_sse patterns.\n-(define_peephole2\n-  [(set (match_operand:MODEF 0 \"register_operand\")\n-\t(match_operand:MODEF 1 \"memory_operand\"))\n-   (set (match_operand:SWI48x 2 \"register_operand\")\n-\t(fix:SWI48x (match_dup 0)))]\n-  \"TARGET_SHORTEN_X87_SSE\n-   && !(TARGET_AVOID_VECTOR_DECODE && optimize_insn_for_speed_p ())\n-   && peep2_reg_dead_p (2, operands[0])\"\n-  [(set (match_dup 2) (fix:SWI48x (match_dup 1)))])\n-\n ;; Avoid vector decoded forms of the instruction.\n (define_peephole2\n-  [(match_scratch:DF 2 \"x\")\n-   (set (match_operand:SWI48x 0 \"register_operand\")\n-\t(fix:SWI48x (match_operand:DF 1 \"memory_operand\")))]\n-  \"TARGET_SSE2 && TARGET_AVOID_VECTOR_DECODE && optimize_insn_for_speed_p ()\"\n-  [(set (match_dup 2) (match_dup 1))\n-   (set (match_dup 0) (fix:SWI48x (match_dup 2)))])\n-\n-(define_peephole2\n-  [(match_scratch:SF 2 \"x\")\n-   (set (match_operand:SWI48x 0 \"register_operand\")\n-\t(fix:SWI48x (match_operand:SF 1 \"memory_operand\")))]\n-  \"TARGET_AVOID_VECTOR_DECODE && optimize_insn_for_speed_p ()\"\n+  [(match_scratch:MODEF 2 \"x\")\n+   (set (match_operand:SWI48 0 \"register_operand\")\n+\t(fix:SWI48 (match_operand:MODEF 1 \"memory_operand\")))]\n+  \"TARGET_AVOID_VECTOR_DECODE\n+   && SSE_FLOAT_MODE_P (<MODEF:MODE>mode)\n+   && optimize_insn_for_speed_p ()\"\n   [(set (match_dup 2) (match_dup 1))\n-   (set (match_dup 0) (fix:SWI48x (match_dup 2)))])\n+   (set (match_dup 0) (fix:SWI48 (match_dup 2)))])\n \n (define_insn_and_split \"fix_trunc<mode>_fisttp_i387_1\"\n   [(set (match_operand:SWI248x 0 \"nonimmediate_operand\")"}, {"sha": "9df7b97a34e0f8874ca7123deb3dbfd1aa334b77", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7100b5616c1998a115ad2b398a61c6daed5b3b88/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7100b5616c1998a115ad2b398a61c6daed5b3b88/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=7100b5616c1998a115ad2b398a61c6daed5b3b88", "patch": "@@ -1942,6 +1942,19 @@ process_alt_operands (int only_alternative)\n \t      if (no_regs_p && REG_P (op))\n \t\treject++;\n \n+#ifdef SECONDARY_MEMORY_NEEDED\n+\t      /* If reload requires moving value through secondary\n+\t\t memory, it will need one more insn at least.  */\n+\t      if (this_alternative != NO_REGS \n+\t\t  && REG_P (op) && (cl = get_reg_class (REGNO (op))) != NO_REGS\n+\t\t  && ((curr_static_id->operand[nop].type != OP_OUT\n+\t\t       && SECONDARY_MEMORY_NEEDED (cl, this_alternative,\n+\t\t\t\t\t\t   GET_MODE (op)))\n+\t\t      || (curr_static_id->operand[nop].type != OP_IN\n+\t\t\t  && SECONDARY_MEMORY_NEEDED (this_alternative, cl,\n+\t\t\t\t\t\t      GET_MODE (op)))))\n+\t\tlosers++;\n+#endif\n \t      /* Input reloads can be inherited more often than output\n \t\t reloads can be removed, so penalize output\n \t\t reloads.  */"}, {"sha": "0cff70940d632975589b68e2ca2a5e5a3ebca4d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7100b5616c1998a115ad2b398a61c6daed5b3b88/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7100b5616c1998a115ad2b398a61c6daed5b3b88/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7100b5616c1998a115ad2b398a61c6daed5b3b88", "patch": "@@ -1,3 +1,8 @@\n+2012-11-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/19398\n+\t* gcc.target/i386/pr19398.c: New test.\n+\n 2012-11-20  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/55260"}, {"sha": "60931c0a0a4c0644aafdb518fcb639d053b4c00d", "filename": "gcc/testsuite/gcc.target/i386/pr19398.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7100b5616c1998a115ad2b398a61c6daed5b3b88/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr19398.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7100b5616c1998a115ad2b398a61c6daed5b3b88/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr19398.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr19398.c?ref=7100b5616c1998a115ad2b398a61c6daed5b3b88", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -msse -mno-sse3 -mfpmath=387\" } */\n+\n+int test (float a)\n+{\n+  return (a * a);\n+}\n+\n+/* { dg-final { scan-assembler-not \"cvttss2si\\[^\\\\n\\]*%xmm\" } } */"}]}