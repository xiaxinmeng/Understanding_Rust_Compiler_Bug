{"sha": "2dd36f90d8c4f5b86667cbb11c86f6c790bd784b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRkMzZmOTBkOGM0ZjViODY2NjdjYmIxMWM4NmY2Yzc5MGJkNzg0Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-05-22T21:35:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-05-22T21:35:56Z"}, "message": "combine.c (force_to_mode): Use gen_int_mode.\n\n\t* combine.c (force_to_mode): Use gen_int_mode.\n\tDon't clear CONST_INT bits outside of mode.\n\n\t* gcc.dg/20020517-1.c: New test.\n\nFrom-SVN: r53750", "tree": {"sha": "e05ee0481059f4da0672ae7d17beae7bf07054ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e05ee0481059f4da0672ae7d17beae7bf07054ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dd36f90d8c4f5b86667cbb11c86f6c790bd784b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd36f90d8c4f5b86667cbb11c86f6c790bd784b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dd36f90d8c4f5b86667cbb11c86f6c790bd784b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd36f90d8c4f5b86667cbb11c86f6c790bd784b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8dc02d7f198b65e706ea797104df528f5c17e67a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc02d7f198b65e706ea797104df528f5c17e67a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc02d7f198b65e706ea797104df528f5c17e67a"}], "stats": {"total": 58, "additions": 38, "deletions": 20}, "files": [{"sha": "4c9bcc7c5b0071ec3339bfe8c864122f4599ce06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd36f90d8c4f5b86667cbb11c86f6c790bd784b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd36f90d8c4f5b86667cbb11c86f6c790bd784b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2dd36f90d8c4f5b86667cbb11c86f6c790bd784b", "patch": "@@ -1,3 +1,8 @@\n+2002-05-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* combine.c (force_to_mode): Use gen_int_mode.\n+\tDon't clear CONST_INT bits outside of mode.\n+\n 2002-05-22  Richard Henderson  <rth@redhat.com>\n \n \t* fixinc/inclhack.def (thread_keyword): Match __thread as last arg."}, {"sha": "f90460db4796d4c9f20b3c6cc9f40acc58ff9f81", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd36f90d8c4f5b86667cbb11c86f6c790bd784b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd36f90d8c4f5b86667cbb11c86f6c790bd784b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=2dd36f90d8c4f5b86667cbb11c86f6c790bd784b", "patch": "@@ -6703,18 +6703,7 @@ force_to_mode (x, mode, mask, reg, just_select)\n   /* If X is a CONST_INT, return a new one.  Do this here since the\n      test below will fail.  */\n   if (GET_CODE (x) == CONST_INT)\n-    {\n-      HOST_WIDE_INT cval = INTVAL (x) & mask;\n-      int width = GET_MODE_BITSIZE (mode);\n-\n-      /* If MODE is narrower that HOST_WIDE_INT and CVAL is a negative\n-\t number, sign extend it.  */\n-      if (width > 0 && width < HOST_BITS_PER_WIDE_INT\n-\t  && (cval & ((HOST_WIDE_INT) 1 << (width - 1))) != 0)\n-\tcval |= (HOST_WIDE_INT) -1 << width;\n-\n-      return GEN_INT (cval);\n-    }\n+    return gen_int_mode (INTVAL (x) & mask, mode);\n \n   /* If X is narrower than MODE and we want all the bits in X's mode, just\n      get X in the proper mode.  */\n@@ -6920,14 +6909,6 @@ force_to_mode (x, mode, mask, reg, just_select)\n \t\t\t\t     force_to_mode (XEXP (x, 1), mode, mask,\n \t\t\t\t\t\t    reg, next_select));\n \n-      /* If OP1 is a CONST_INT and X is an IOR or XOR, clear bits outside\n-\t MASK since OP1 might have been sign-extended but we never want\n-\t to turn on extra bits, since combine might have previously relied\n-\t on them being off.  */\n-      if (GET_CODE (op1) == CONST_INT && (code == IOR || code == XOR)\n-\t  && (INTVAL (op1) & mask) != 0)\n-\top1 = GEN_INT (INTVAL (op1) & mask);\n-\n       if (op_mode != GET_MODE (x) || op0 != XEXP (x, 0) || op1 != XEXP (x, 1))\n \tx = gen_binary (code, op_mode, op0, op1);\n       break;"}, {"sha": "eb4547125cadfa465f446789fc821ec3da3da33a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd36f90d8c4f5b86667cbb11c86f6c790bd784b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd36f90d8c4f5b86667cbb11c86f6c790bd784b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2dd36f90d8c4f5b86667cbb11c86f6c790bd784b", "patch": "@@ -1,3 +1,7 @@\n+2002-05-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/20020517-1.c: New test.\n+\n 2002-05-21  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/tls/tls.exp, gcc.dg/tls/trivial.c, gcc.dg/tls/diag-1.c,"}, {"sha": "04386d821ec27b243a89fe825fe5bcbda0370138", "filename": "gcc/testsuite/gcc.dg/20020517-1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd36f90d8c4f5b86667cbb11c86f6c790bd784b/gcc%2Ftestsuite%2Fgcc.dg%2F20020517-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd36f90d8c4f5b86667cbb11c86f6c790bd784b/gcc%2Ftestsuite%2Fgcc.dg%2F20020517-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020517-1.c?ref=2dd36f90d8c4f5b86667cbb11c86f6c790bd784b", "patch": "@@ -0,0 +1,28 @@\n+/* This testcase caused ICE in do_SUBST on IA-32, because 0xf6 constant\n+   was not sign-extended for QImode.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -mcpu=i686\" { target i?86-*-* } } */\n+\n+#include <limits.h>\n+\n+void abort (void);\n+void exit (int);\n+\n+void foo (void)\n+{\n+  int i;\n+  char *p;\n+\n+  p = (char *) &i;\n+  *p = -10;\n+  if (* (unsigned char *) p != 0x100 - 10)\n+    abort ();\n+}\n+\n+int main (void)\n+{\n+  if (UCHAR_MAX == 255)\n+    foo ();\n+  exit (0);\n+}"}]}