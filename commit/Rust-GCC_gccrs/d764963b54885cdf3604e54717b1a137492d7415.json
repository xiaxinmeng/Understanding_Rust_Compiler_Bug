{"sha": "d764963b54885cdf3604e54717b1a137492d7415", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc2NDk2M2I1NDg4NWNkZjM2MDRlNTQ3MTdiMWExMzc0OTJkNzQxNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-07-10T10:38:30Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-07-10T10:38:30Z"}, "message": "re PR middle-end/53590 (compiler fails to generate SIMD instruction for FP division)\n\n\tPR middle-end/53590\n\t* function.c (allocate_struct_function): Revert r188667 change.\n\n\t* gimple-low.c (lower_builtin_setjmp): Use properly-typed constant.\n\nFrom-SVN: r212424", "tree": {"sha": "82d9408541093ea1d1f5bd1bb4c82743eac57876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82d9408541093ea1d1f5bd1bb4c82743eac57876"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d764963b54885cdf3604e54717b1a137492d7415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d764963b54885cdf3604e54717b1a137492d7415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d764963b54885cdf3604e54717b1a137492d7415", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d764963b54885cdf3604e54717b1a137492d7415/comments", "author": null, "committer": null, "parents": [{"sha": "56710419ba3361dca740bfa1dc29be0d959246de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56710419ba3361dca740bfa1dc29be0d959246de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56710419ba3361dca740bfa1dc29be0d959246de"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "075aa789171f86a7ec7a2126c88f20cd3ab110b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d764963b54885cdf3604e54717b1a137492d7415/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d764963b54885cdf3604e54717b1a137492d7415/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d764963b54885cdf3604e54717b1a137492d7415", "patch": "@@ -1,3 +1,10 @@\n+2014-07-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/53590\n+\t* function.c (allocate_struct_function): Revert r188667 change.\n+\n+\t* gimple-low.c (lower_builtin_setjmp): Use properly-typed constant.\n+\n 2014-07-10  Tom G. Christensen  <tgc@jupiterrise.com>\n \n \t* doc/install.texi: Remove links to defunct package providers for"}, {"sha": "922ef3d7b2fe5b3872953a97994682a2bae8e9e7", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d764963b54885cdf3604e54717b1a137492d7415/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d764963b54885cdf3604e54717b1a137492d7415/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=d764963b54885cdf3604e54717b1a137492d7415", "patch": "@@ -4549,6 +4549,7 @@ allocate_struct_function (tree fndecl, bool abstract_p)\n       /* ??? This could be set on a per-function basis by the front-end\n          but is this worth the hassle?  */\n       cfun->can_throw_non_call_exceptions = flag_non_call_exceptions;\n+      cfun->can_delete_dead_exceptions = flag_delete_dead_exceptions;\n     }\n }\n "}, {"sha": "c8a6e6b57fbe50a8e9cb8dd4fe1b2848ee05704c", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d764963b54885cdf3604e54717b1a137492d7415/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d764963b54885cdf3604e54717b1a137492d7415/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=d764963b54885cdf3604e54717b1a137492d7415", "patch": "@@ -720,7 +720,7 @@ lower_builtin_setjmp (gimple_stmt_iterator *gsi)\n      these builtins are modelled as non-local label jumps to the label\n      that is passed to these two builtins, so pretend we have a non-local\n      label during GIMPLE passes too.  See PR60003.  */ \n-  cfun->has_nonlocal_label = true;\n+  cfun->has_nonlocal_label = 1;\n \n   /* NEXT_LABEL is the label __builtin_longjmp will jump to.  Its address is\n      passed to both __builtin_setjmp_setup and __builtin_setjmp_receiver.  */"}, {"sha": "054497b27a93c3d31bfb44f276abb25ab48da805", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d764963b54885cdf3604e54717b1a137492d7415/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d764963b54885cdf3604e54717b1a137492d7415/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d764963b54885cdf3604e54717b1a137492d7415", "patch": "@@ -1,3 +1,7 @@\n+2014-07-10  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt39.adb: New test.\n+\n 2014-07-10  Yuri Rumyantsev  <ysrumyan@gmail.com>\n \n \tPR tree-optimization/61742"}, {"sha": "a00cac75fb54b783928ca2e628228e484bffdb6e", "filename": "gcc/testsuite/gnat.dg/opt39.adb", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d764963b54885cdf3604e54717b1a137492d7415/gcc%2Ftestsuite%2Fgnat.dg%2Fopt39.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d764963b54885cdf3604e54717b1a137492d7415/gcc%2Ftestsuite%2Fgnat.dg%2Fopt39.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt39.adb?ref=d764963b54885cdf3604e54717b1a137492d7415", "patch": "@@ -0,0 +1,31 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2 -fno-inline -fdump-tree-optimized\" }\n+\n+procedure Opt39 (I : Integer) is\n+\n+  type Rec is record\n+    I1 : Integer;\n+    I2 : Integer;\n+    I3 : Integer;\n+    I4 : Integer;\n+    I5 : Integer;\n+  end record;\n+\n+  procedure Set (A : access Rec; I : Integer) is\n+    Tmp : Rec := A.all;\n+  begin\n+    Tmp.I1 := I;\n+    A.all := Tmp;\n+  end;\n+\n+  R : aliased Rec;\n+\n+begin\n+  Set (R'Access, I);\n+  if R.I1 /= I then\n+    raise Program_Error;\n+  end if;\n+end;\n+\n+-- { dg-final { scan-tree-dump-times \"MEM\" 1 \"optimized\" } }\n+-- { dg-final { cleanup-tree-dump \"optimized\" } }"}]}