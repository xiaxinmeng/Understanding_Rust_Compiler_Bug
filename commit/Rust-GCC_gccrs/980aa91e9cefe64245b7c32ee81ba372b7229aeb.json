{"sha": "980aa91e9cefe64245b7c32ee81ba372b7229aeb", "node_id": "C_kwDOANBUbNoAKDk4MGFhOTFlOWNlZmU2NDI0NWI3YzMyZWU4MWJhMzcyYjcyMjlhZWI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-21T08:29:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-21T14:01:28Z"}, "message": "libstdc++: Update <memory> synopsis test for C++11 and later\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/20_util/headers/memory/synopsis.cc: Add declarations\n\tfrom C++11 and later.", "tree": {"sha": "c1b431c8e7321ba87d9497c8db0de55c642e56df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1b431c8e7321ba87d9497c8db0de55c642e56df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/980aa91e9cefe64245b7c32ee81ba372b7229aeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980aa91e9cefe64245b7c32ee81ba372b7229aeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/980aa91e9cefe64245b7c32ee81ba372b7229aeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980aa91e9cefe64245b7c32ee81ba372b7229aeb/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc829c7613ddf562d1aecaf22eda965e87108ac8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc829c7613ddf562d1aecaf22eda965e87108ac8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc829c7613ddf562d1aecaf22eda965e87108ac8"}], "stats": {"total": 66, "additions": 59, "deletions": 7}, "files": [{"sha": "15437c72ee0471f75dfd587bfb829d4437407917", "filename": "libstdc++-v3/testsuite/20_util/headers/memory/synopsis.cc", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980aa91e9cefe64245b7c32ee81ba372b7229aeb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980aa91e9cefe64245b7c32ee81ba372b7229aeb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Fsynopsis.cc?ref=980aa91e9cefe64245b7c32ee81ba372b7229aeb", "patch": "@@ -26,20 +26,35 @@\n # define NOTHROW\n #endif\n \n-namespace std {\n+namespace std\n+{\n+#if __cplusplus >= 201103L\n+  template<class Ptr> struct pointer_traits;\n+  template<class T> struct pointer_traits<T*>;\n+\n+  void* align(size_t alignment, size_t size, void*& ptr, size_t& space);\n+\n+  struct allocator_arg_t;\n+  extern const allocator_arg_t allocator_arg;\n+\n+  template<class T, class Alloc> struct uses_allocator;\n+\n+  template<class Alloc> struct allocator_traits;\n+#endif // C++11\n+\n+#if __STDC_HOSTED__\n   //  lib.default.allocator, the default allocator:\n   template <class T> class allocator;\n+#if __cplusplus >= 202002L\n+  template <class T, class U>\n+  constexpr bool operator==(const allocator<T>&, const allocator<U>&) throw();\n+#else\n   template <> class allocator<void>;\n   template <class T, class U>\n-#if __cplusplus > 201703L\n-  constexpr\n-#endif\n   bool operator==(const allocator<T>&, const allocator<U>&) throw();\n   template <class T, class U>\n-#if __cplusplus > 201703L\n-  constexpr\n-#endif\n   bool operator!=(const allocator<T>&, const allocator<U>&) throw();\n+#endif\n \n   //  lib.storage.iterator, raw storage iterator:\n   template <class OutputIterator, class T> class raw_storage_iterator;\n@@ -49,18 +64,55 @@ namespace std {\n   pair<T*,ptrdiff_t> get_temporary_buffer(ptrdiff_t n) NOTHROW;\n   template <class T>\n   void return_temporary_buffer(T* p);\n+#endif // HOSTED\n \n   //  lib.specialized.algorithms, specialized algorithms:\n+#if __cplusplus >= 201703L\n+  template <class T> constexpr T* addressof(T&) noexcept;\n+#elif __cplusplus >= 201402L\n+  template <class T> T* addressof(T&) noexcept;\n+#endif\n   template <class InputIterator, class ForwardIterator>\n   ForwardIterator\n   uninitialized_copy(InputIterator first, InputIterator last,\n \t\t     ForwardIterator result);\n+#if __cplusplus >= 201103L\n+  template <class InputIterator, class Size, class ForwardIterator>\n+  ForwardIterator\n+  uninitialized_copy_n(InputIterator first, Size n, ForwardIterator result);\n+#endif\n   template <class ForwardIterator, class T>\n   void uninitialized_fill(ForwardIterator first, ForwardIterator last,\n \t\t\t  const T& x);\n   template <class ForwardIterator, class Size, class T>\n   void uninitialized_fill_n(ForwardIterator first, Size n, const T& x);\n \n+#if __cplusplus >= 201103L\n+  template<class T> class default_delete;\n+  template<class T> class default_delete<T[]>;\n+  template<class T, class D> class unique_ptr;\n+  template<class T, class D> class unique_ptr<T[], D>;\n+  template<class T, class D>\n+    void swap(unique_ptr<T, D>&, unique_ptr<T, D>&) noexcept;\n+#if __cplusplus >= 201402L\n+  template<class T, class... Args> unique_ptr<T> make_unique(Args&&...);\n+#endif\n+\n+  class bad_weak_ptr;\n+  template<class T> class shared_ptr;\n+  template<class T, class... Args> shared_ptr<T> make_shared(Args&&... args);\n+  template<class T, class A, class... Args>\n+  shared_ptr<T> allocate_shared(const A& a, Args&&... args);\n+  template<class T> void swap(shared_ptr<T>&, shared_ptr<T>&) noexcept;\n+  template<class T> class weak_ptr;\n+  template<class T> void swap(weak_ptr<T>&, weak_ptr<T>&) noexcept;\n+  template<class T> class owner_less;\n+  template<class T> class enable_shared_from_this;\n+\n+  template<class T, class D> struct hash<unique_ptr<T, D>>;\n+  template<class T> struct hash<shared_ptr<T>>;\n+#endif\n+\n   //  lib.auto.ptr, pointers:\n   template<class X> class auto_ptr;\n }"}]}