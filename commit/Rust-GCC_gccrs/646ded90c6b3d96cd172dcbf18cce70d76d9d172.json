{"sha": "646ded90c6b3d96cd172dcbf18cce70d76d9d172", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ2ZGVkOTBjNmIzZDk2Y2QxNzJkY2JmMThjY2U3MGQ3NmQ5ZDE3Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-10-08T22:38:45Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-10-08T22:38:45Z"}, "message": "i386.md (movsi_xor): Export.\n\n        * i386.md (movsi_xor): Export.\n        (setcc peep2): Use it when available; add an alternative to\n        match zero_extendhisi2_and.\n\nFrom-SVN: r46107", "tree": {"sha": "bdab30ca4adce12216ae9924a740d74b2e862df7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdab30ca4adce12216ae9924a740d74b2e862df7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/646ded90c6b3d96cd172dcbf18cce70d76d9d172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646ded90c6b3d96cd172dcbf18cce70d76d9d172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/646ded90c6b3d96cd172dcbf18cce70d76d9d172", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646ded90c6b3d96cd172dcbf18cce70d76d9d172/comments", "author": null, "committer": null, "parents": [{"sha": "e052f1a966427305f58c5c580b94e1e5a012bb51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e052f1a966427305f58c5c580b94e1e5a012bb51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e052f1a966427305f58c5c580b94e1e5a012bb51"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "bc49dc67e1413aa74d5b42f8646c8fe3378e08ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646ded90c6b3d96cd172dcbf18cce70d76d9d172/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646ded90c6b3d96cd172dcbf18cce70d76d9d172/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=646ded90c6b3d96cd172dcbf18cce70d76d9d172", "patch": "@@ -1,3 +1,9 @@\n+2001-10-08  Richard Henderson  <rth@redhat.com>\n+\n+        * i386.md (movsi_xor): Export.\n+        (setcc peep2): Use it when available; add an alternative to\n+\tmatch zero_extendhisi2_and.\n+\n 2001-10-08  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* romp-protos.h (romp_initialize_trampoline): New function."}, {"sha": "63fefc88bee73f4e9ea99554d5a8416223b7c1e0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646ded90c6b3d96cd172dcbf18cce70d76d9d172/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646ded90c6b3d96cd172dcbf18cce70d76d9d172/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=646ded90c6b3d96cd172dcbf18cce70d76d9d172", "patch": "@@ -1711,7 +1711,7 @@\n   [(set_attr \"type\" \"pop\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*movsi_xor\"\n+(define_insn \"movsi_xor\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operand:SI 1 \"const0_operand\" \"i\"))\n    (clobber (reg:CC 17))]\n@@ -13126,14 +13126,45 @@\n \t  [(reg 17) (const_int 0)]))\n    (set (match_operand 3 \"q_regs_operand\" \"\")\n \t(zero_extend (match_dup 1)))]\n-  \"peep2_reg_dead_p (3, operands[1])\n+  \"(peep2_reg_dead_p (3, operands[1])\n+    || operands_match_p (operands[1], operands[3]))\n    && ! reg_overlap_mentioned_p (operands[3], operands[0])\"\n-  [(set (match_dup 3) (const_int 0))\n-   (set (match_dup 4) (match_dup 0))\n+  [(set (match_dup 4) (match_dup 0))\n+   (set (strict_low_part (match_dup 5))\n+\t(match_dup 2))]\n+{\n+  operands[4] = gen_rtx_REG (GET_MODE (operands[0]), 17);\n+  operands[5] = gen_rtx_REG (QImode, REGNO (operands[3]));\n+  if (HAVE_movsi_xor)\n+    emit_insn (gen_movsi_xor (operands[3], const0_rtx));\n+  else\n+    emit_insn (gen_movsi (operands[3], const0_rtx));\n+})\n+\n+;; Similar, but match zero_extendhisi2_and, which adds a clobber.\n+\n+(define_peephole2\n+  [(set (reg 17) (match_operand 0 \"\" \"\"))\n+   (set (match_operand:QI 1 \"register_operand\" \"\")\n+\t(match_operator:QI 2 \"ix86_comparison_operator\"\n+\t  [(reg 17) (const_int 0)]))\n+   (parallel [(set (match_operand 3 \"q_regs_operand\" \"\")\n+\t\t   (zero_extend (match_dup 1)))\n+\t      (clobber (reg:CC 17))])]\n+  \"(peep2_reg_dead_p (3, operands[1])\n+    || operands_match_p (operands[1], operands[3]))\n+   && ! reg_overlap_mentioned_p (operands[3], operands[0])\"\n+  [(set (match_dup 4) (match_dup 0))\n    (set (strict_low_part (match_dup 5))\n \t(match_dup 2))]\n-  \"operands[4] = gen_rtx_REG (GET_MODE (operands[0]), 17);\n-   operands[5] = gen_rtx_REG (QImode, REGNO (operands[3]));\")\n+{\n+  operands[4] = gen_rtx_REG (GET_MODE (operands[0]), 17);\n+  operands[5] = gen_rtx_REG (QImode, REGNO (operands[3]));\n+  if (HAVE_movsi_xor)\n+    emit_insn (gen_movsi_xor (operands[3], const0_rtx));\n+  else\n+    emit_insn (gen_movsi (operands[3], const0_rtx));\n+})\n \f\n ;; Call instructions.\n "}]}