{"sha": "ccc4ae070d86aebd022b7609c8477bd46a7695c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NjNGFlMDcwZDg2YWViZDAyMmI3NjA5Yzg0NzdiZDQ2YTc2OTVjNw==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@issan.cs.uni-dortmund.de", "date": "1999-05-08T01:34:55Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-05-08T01:34:55Z"}, "message": "reload1.c (gen_mode_int): New function.\n\n        * reload1.c (gen_mode_int): New function.\n        (reload_cse_move2add): Use it to generate the new constants.\n\nFrom-SVN: r26834", "tree": {"sha": "68b9ea358e14d47ebe5bf789990ddda92faa07d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68b9ea358e14d47ebe5bf789990ddda92faa07d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccc4ae070d86aebd022b7609c8477bd46a7695c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccc4ae070d86aebd022b7609c8477bd46a7695c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccc4ae070d86aebd022b7609c8477bd46a7695c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccc4ae070d86aebd022b7609c8477bd46a7695c7/comments", "author": null, "committer": null, "parents": [{"sha": "e9996db7413238dcd6a71b110d0e7ed30d6d4207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9996db7413238dcd6a71b110d0e7ed30d6d4207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9996db7413238dcd6a71b110d0e7ed30d6d4207"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "1f5eda9c25f5b7a151f1f95f7bd0c239c5f084e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccc4ae070d86aebd022b7609c8477bd46a7695c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccc4ae070d86aebd022b7609c8477bd46a7695c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ccc4ae070d86aebd022b7609c8477bd46a7695c7", "patch": "@@ -1,3 +1,8 @@\n+Sat May  8 01:34:19 1999  Andreas Schwab  <schwab@issan.cs.uni-dortmund.de>\n+\n+\t* reload1.c (gen_mode_int): New function.\n+\t(reload_cse_move2add): Use it to generate the new constants.\n+\n Sat May  8 01:25:09 1999  Andreas Schwab  <schwab@issan.cs.uni-dortmund.de>\n \n \t* varasm.c (output_constant): Do nothing if -fsyntax-only."}, {"sha": "f16ed109875142d92d8dc774b379fbd8065e52b0", "filename": "gcc/reload1.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccc4ae070d86aebd022b7609c8477bd46a7695c7/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccc4ae070d86aebd022b7609c8477bd46a7695c7/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=ccc4ae070d86aebd022b7609c8477bd46a7695c7", "patch": "@@ -9962,6 +9962,24 @@ static enum machine_mode reg_mode[FIRST_PSEUDO_REGISTER];\n    reload_cse_move2add and move2add_note_store.  */\n static int move2add_luid;\n \n+/* Generate a CONST_INT and force it in the range of MODE.  */\n+static rtx\n+gen_mode_int (mode, value)\n+     enum machine_mode mode;\n+     HOST_WIDE_INT value;\n+{\n+  HOST_WIDE_INT cval = value & GET_MODE_MASK (mode);\n+  int width = GET_MODE_BITSIZE (mode);\n+\n+  /* If MODE is narrower than HOST_WIDE_INT and CVAL is a negative number,\n+     sign extend it.  */\n+  if (width > 0 && width < HOST_BITS_PER_WIDE_INT\n+      && (cval & ((HOST_WIDE_INT) 1 << (width - 1))) != 0)\n+    cval |= (HOST_WIDE_INT) -1 << width;\n+\n+  return GEN_INT (cval);\n+}\n+\n static void\n reload_cse_move2add (first)\n      rtx first;\n@@ -10013,8 +10031,9 @@ reload_cse_move2add (first)\n \t      if (GET_CODE (src) == CONST_INT && reg_base_reg[regno] < 0)\n \t\t{\n \t\t  int success = 0;\n-\t\t  rtx new_src = GEN_INT (INTVAL (src)\n-\t\t\t\t\t - INTVAL (reg_offset[regno]));\n+\t\t  rtx new_src\n+\t\t    = gen_mode_int (GET_MODE (reg),\n+\t\t\t\t    INTVAL (src) - INTVAL (reg_offset[regno]));\n \t\t  /* (set (reg) (plus (reg) (const_int 0))) is not canonical;\n \t\t     use (set (reg) (reg)) instead.\n \t\t     We don't delete this insn, nor do we convert it into a\n@@ -10059,8 +10078,10 @@ reload_cse_move2add (first)\n \t\t      && GET_CODE (XEXP (SET_SRC (set), 1)) == CONST_INT)\n \t\t    {\n \t\t      rtx src3 = XEXP (SET_SRC (set), 1);\n-\t\t      rtx new_src = GEN_INT (INTVAL (src3)\n-\t\t\t\t\t     - INTVAL (reg_offset[regno]));\n+\t\t      rtx new_src\n+\t\t\t= gen_mode_int (GET_MODE (reg),\n+\t\t\t\t\tINTVAL (src3)\n+\t\t\t\t\t- INTVAL (reg_offset[regno]));\n \t\t      int success = 0;\n \n \t\t      if (new_src == const0_rtx)"}]}