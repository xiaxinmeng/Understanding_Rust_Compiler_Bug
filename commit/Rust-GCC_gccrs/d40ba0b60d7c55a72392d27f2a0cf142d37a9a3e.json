{"sha": "d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQwYmEwYjYwZDdjNTVhNzIzOTJkMjdmMmEwY2YxNDJkMzdhOWEzZQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2008-12-01T12:08:51Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2008-12-01T12:08:51Z"}, "message": "stormy16.md (CARRY_REG): New constant.\n\n* config/stormy16/stormy16.md (CARRY_REG): New constant.\n  Replace uses of the \"y\" register class with direct references to\n  the CARRY_REG register.\n  * config/stormy16/stormy16.c: Replace clobbers of a BImode scratch\n  register with clobbers of the carry register.\n  (xstormy16_secondary_reload_class): Do not return CARRY_REGS.\n  (xstormy16_split_cbranch): Remove redundant carry parameter.\n  (xstormy16_expand_arith): Likewise.\n  * config/stormy16/stormy16.h (enum reg_class): Remove CARRY_REGS.\n  (IRA_COVER_CLASSES, REG_CLASS_NAMES, REG_CLASS_CONTENTS,\n  REGNO_REG_CLASS, REG_CLASS_FROM_LETTER): Likewise.\n  (CARRY_REGNUM): Define.\n  * config/stormy16/stormy16-protos.h (xstormy16_split_cbranch):\n  Update prototype.\n  (xstormy16_expand_arith): Likewise.\n\nFrom-SVN: r142309", "tree": {"sha": "210c4d24581135a0ad4ac80a4247d40ea320026f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/210c4d24581135a0ad4ac80a4247d40ea320026f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8ddcbf9c9ccb37a62a542e07c92540180d6d7c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8ddcbf9c9ccb37a62a542e07c92540180d6d7c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8ddcbf9c9ccb37a62a542e07c92540180d6d7c6"}], "stats": {"total": 256, "additions": 130, "deletions": 126}, "files": [{"sha": "1bc19eb3df944ee71fa7b166c35ffc2d730ccbac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e", "patch": "@@ -1,3 +1,21 @@\n+2008-12-01  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/stormy16/stormy16.md (CARRY_REG): New constant.\n+\tReplace uses of the \"y\" register class with direct references to\n+\tthe CARRY_REG register.\n+\t* config/stormy16/stormy16.c: Replace clobbers of a BImode scratch\n+\tregister with clobbers of the carry register.\n+\t(xstormy16_secondary_reload_class): Do not return CARRY_REGS.\n+\t(xstormy16_split_cbranch): Remove redundant carry parameter.\n+\t(xstormy16_expand_arith): Likewise.\n+\t* config/stormy16/stormy16.h (enum reg_class): Remove CARRY_REGS.\n+\t(IRA_COVER_CLASSES, REG_CLASS_NAMES, REG_CLASS_CONTENTS,\n+\tREGNO_REG_CLASS, REG_CLASS_FROM_LETTER): Likewise.\n+\t(CARRY_REGNUM): Define.\n+\t* config/stormy16/stormy16-protos.h (xstormy16_split_cbranch):\n+\tUpdate prototype.\n+\t(xstormy16_expand_arith): Likewise.\n+\n 2008-12-01  Chen Liqin  <liqin.chen@sunplusct.com>\n \n \t* config/score/score.h (IRA_COVER_CLASSES): Define."}, {"sha": "ff9f4d484a58a83ee063f57fa54678c0613a1834", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e", "patch": "@@ -64,7 +64,7 @@ extern void xstormy16_expand_andqi3 (rtx *);\n #endif\n \n #if defined (HAVE_MACHINE_MODES) && defined (RTX_CODE)\n-extern void xstormy16_split_cbranch (enum machine_mode, rtx, rtx, rtx, rtx);\n+extern void xstormy16_split_cbranch (enum machine_mode, rtx, rtx, rtx);\n extern int  short_memory_operand (rtx, enum machine_mode);\n extern int  nonimmediate_nonstack_operand (rtx, enum machine_mode);\n extern enum reg_class xstormy16_secondary_reload_class \n@@ -74,7 +74,7 @@ extern int xstormy16_legitimate_address_p (enum machine_mode, rtx, int);\n extern void xstormy16_split_move (enum machine_mode, rtx, rtx);\n extern void xstormy16_expand_move (enum machine_mode, rtx, rtx);\n extern void xstormy16_expand_arith (enum machine_mode, enum rtx_code, \n-\t\t\t\t    rtx, rtx, rtx, rtx);\n+\t\t\t\t    rtx, rtx, rtx);\n extern const char * xstormy16_output_shift (enum machine_mode, enum rtx_code, \n \t\t\t\t\t    rtx, rtx, rtx);\n extern int  xstormy16_below100_symbol (rtx, enum machine_mode);"}, {"sha": "713ae40a6829f66824d362008e4810cf8bab556d", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e", "patch": "@@ -214,7 +214,7 @@ xstormy16_emit_cbranch (enum rtx_code code, rtx loc)\n \t\t\tgen_rtx_IF_THEN_ELSE (VOIDmode, condition_rtx,\n \t\t\t\t\t      loc_ref, pc_rtx));\n \n-  cy_clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_SCRATCH (BImode));\n+  cy_clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, 16));\n \n   if (mode == HImode)\n     vec = gen_rtvec (2, branch, cy_clobber);\n@@ -240,15 +240,15 @@ xstormy16_emit_cbranch (enum rtx_code code, rtx loc)\n \n void\n xstormy16_split_cbranch (enum machine_mode mode, rtx label, rtx comparison,\n-\t\t\t rtx dest, rtx carry)\n+\t\t\t rtx dest)\n {\n   rtx op0 = XEXP (comparison, 0);\n   rtx op1 = XEXP (comparison, 1);\n   rtx seq, last_insn;\n   rtx compare;\n   \n   start_sequence ();\n-  xstormy16_expand_arith (mode, COMPARE, dest, op0, op1, carry);\n+  xstormy16_expand_arith (mode, COMPARE, dest, op0, op1);\n   seq = get_insns ();\n   end_sequence ();\n \n@@ -474,11 +474,6 @@ xstormy16_secondary_reload_class (enum reg_class rclass,\n       && ! reg_class_subset_p (rclass, EIGHT_REGS))\n     return EIGHT_REGS;\n \n-  /* When reloading a PLUS, the carry register will be required\n-     unless the inc or dec instructions can be used.  */\n-  if (xstormy16_carry_plus_operand (x, mode))\n-    return CARRY_REGS;\n-\n   return NO_REGS;\n }\n \n@@ -978,7 +973,7 @@ struct xstormy16_stack_layout\n #define REG_NEEDS_SAVE(REGNUM, IFUN)\t\t\t\t\t\\\n   ((df_regs_ever_live_p (REGNUM) && ! call_used_regs[REGNUM])\t\t\\\n    || (IFUN && ! fixed_regs[REGNUM] && call_used_regs[REGNUM]\t\t\\\n-       && (REGNO_REG_CLASS (REGNUM) != CARRY_REGS)\t\t\t\\\n+       && (REGNUM != CARRY_REGNUM)\t\t\t\t\t\\\n        && (df_regs_ever_live_p (REGNUM) || ! current_function_is_leaf)))\n \n /* Compute the stack layout.  */\n@@ -1967,13 +1962,12 @@ xstormy16_expand_call (rtx retval, rtx dest, rtx counter)\n \n    (set DEST (CODE:MODE SRC0 SRC1))\n    \n-   using CARRY as a temporary.  When CODE is COMPARE, a branch\n-   template is generated (this saves duplicating code in\n-   xstormy16_split_cbranch).  */\n+   When CODE is COMPARE, a branch template is generated\n+   (this saves duplicating code in xstormy16_split_cbranch).  */\n \n void \n xstormy16_expand_arith (enum machine_mode mode, enum rtx_code code,\n-\t\t\trtx dest, rtx src0, rtx src1, rtx carry)\n+\t\t\trtx dest, rtx src0, rtx src1)\n {\n   int num_words = GET_MODE_BITSIZE (mode) / BITS_PER_WORD;\n   int i;\n@@ -2000,9 +1994,9 @@ xstormy16_expand_arith (enum machine_mode mode, enum rtx_code code,\n \t    continue;\n \t  \n \t  if (firstloop)\n-\t    insn = gen_addchi4 (w_dest, w_src0, w_src1, carry);\n+\t    insn = gen_addchi4 (w_dest, w_src0, w_src1);\n \t  else\n-\t    insn = gen_addchi5 (w_dest, w_src0, w_src1, carry, carry);\n+\t    insn = gen_addchi5 (w_dest, w_src0, w_src1);\n \t  break;\n \n \tcase NEG:\n@@ -2013,10 +2007,10 @@ xstormy16_expand_arith (enum machine_mode mode, enum rtx_code code,\n \t      rtx branch, sub, clobber, sub_1;\n \t      \n \t      sub_1 = gen_rtx_MINUS (HImode, w_src0, \n-\t\t\t\t     gen_rtx_ZERO_EXTEND (HImode, carry));\n+\t\t\t\t     gen_rtx_ZERO_EXTEND (HImode, gen_rtx_REG (BImode, 16)));\n \t      sub = gen_rtx_SET (VOIDmode, w_dest,\n \t\t\t\t gen_rtx_MINUS (HImode, sub_1, w_src1));\n-\t      clobber = gen_rtx_CLOBBER (VOIDmode, carry);\n+\t      clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, 16));\n \t      branch = gen_rtx_SET (VOIDmode, pc_rtx,\n \t\t\t\t    gen_rtx_IF_THEN_ELSE (VOIDmode,\n \t\t\t\t\t\t\t  gen_rtx_EQ (HImode,\n@@ -2032,9 +2026,9 @@ xstormy16_expand_arith (enum machine_mode mode, enum rtx_code code,\n \t\t   && GET_CODE (w_src1) == CONST_INT && INTVAL (w_src1) == 0)\n \t    continue;\n \t  else if (firstloop)\n-\t    insn = gen_subchi4 (w_dest, w_src0, w_src1, carry);\n+\t    insn = gen_subchi4 (w_dest, w_src0, w_src1);\n \t  else\n-\t    insn = gen_subchi5 (w_dest, w_src0, w_src1, carry, carry);\n+\t    insn = gen_subchi5 (w_dest, w_src0, w_src1);\n \t  break;\n \n \tcase IOR:"}, {"sha": "973726ebae5f0c4bfb7a674e218a90690bb8ac0d", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e", "patch": "@@ -191,7 +191,6 @@ enum reg_class\n   R8_REGS,\n   ICALL_REGS,\n   GENERAL_REGS,\n-  CARRY_REGS,\n   ALL_REGS,\n   LIM_REG_CLASSES\n };\n@@ -200,7 +199,7 @@ enum reg_class\n \n #define IRA_COVER_CLASSES\t\t\t\\\n {\t\t\t\t\t\t\\\n-  GENERAL_REGS, CARRY_REGS, LIM_REG_CLASSES\t\\\n+  GENERAL_REGS, LIM_REG_CLASSES\t\\\n }\n \n #define REG_CLASS_NAMES\t\t\t\t\\\n@@ -214,7 +213,6 @@ enum reg_class\n   \"R8_REGS\",\t\t\t\t\t\\\n   \"ICALL_REGS\",\t\t\t\t\t\\\n   \"GENERAL_REGS\",\t\t\t\t\\\n-  \"CARRY_REGS\",\t\t\t\t\t\\\n   \"ALL_REGS\"\t\t\t\t\t\\\n }\n \n@@ -229,17 +227,15 @@ enum reg_class\n   { 0x00100 },\t\t\t\t\t\\\n   { 0x00300 },\t\t\t\t\t\\\n   { 0x6FFFF },\t\t\t\t\t\\\n-  { 0x10000 },\t\t\t\t\t\\\n   { (1 << FIRST_PSEUDO_REGISTER) - 1 }\t\t\\\n }\n \n #define REGNO_REG_CLASS(REGNO) \t\t\t\\\n-  ((REGNO) == 0   ? R0_REGS\t\t\t\\\n-   : (REGNO) == 1 ? R1_REGS\t\t\t\\\n-   : (REGNO) == 2 ? R2_REGS\t\t\t\\\n-   : (REGNO) < 8  ? EIGHT_REGS\t\t\t\\\n-   : (REGNO) == 8 ? R8_REGS\t\t\t\\\n-   : (REGNO) == 16 ? CARRY_REGS\t\t\t\\\n+  (  (REGNO) ==  0 ? R0_REGS\t\t\t\\\n+   : (REGNO) ==  1 ? R1_REGS\t\t\t\\\n+   : (REGNO) ==  2 ? R2_REGS\t\t\t\\\n+   : (REGNO) <   8 ? EIGHT_REGS\t\t\t\\\n+   : (REGNO) ==  8 ? R8_REGS\t\t\t\\\n    : (REGNO) <= 18 ? GENERAL_REGS\t\t\\\n    : ALL_REGS)\n \n@@ -264,7 +260,6 @@ enum reg_class\n   : (CHAR) == 'd' ? R8_REGS\t\t\t\\\n   : (CHAR) == 'e' ? EIGHT_REGS\t\t\t\\\n   : (CHAR) == 't' ? TWO_REGS\t\t\t\\\n-  : (CHAR) == 'y' ? CARRY_REGS\t\t\t\\\n   : (CHAR) == 'z' ? ICALL_REGS\t\t\t\\\n   : NO_REGS)\n \n@@ -362,15 +357,12 @@ enum reg_class\n \f\n /* Register That Address the Stack Frame.  */\n \n-#define STACK_POINTER_REGNUM 15\n-\n-#define FRAME_POINTER_REGNUM 17\n-\n+#define STATIC_CHAIN_REGNUM\t 1\n #define HARD_FRAME_POINTER_REGNUM 13\n-\n-#define ARG_POINTER_REGNUM 18\n-\n-#define STATIC_CHAIN_REGNUM 1\n+#define STACK_POINTER_REGNUM\t15\n+#define CARRY_REGNUM\t\t16\n+#define FRAME_POINTER_REGNUM\t17\n+#define ARG_POINTER_REGNUM\t18\n \n \f\n /* Eliminating the Frame Pointer and the Arg Pointer */"}, {"sha": "c16a8c3422c42ff9207c218be87c9284bd8b2d79", "filename": "gcc/config/stormy16/stormy16.md", "status": "modified", "additions": 86, "deletions": 86, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e/gcc%2Fconfig%2Fstormy16%2Fstormy16.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.md?ref=d40ba0b60d7c55a72392d27f2a0cf142d37a9a3e", "patch": "@@ -28,7 +28,6 @@\n ;; d  $8\n ;; e  $0..$7\n ;; t  $0..$1\n-;; y  Carry\n ;; z  $8..$9\n ;; I  0..3\n ;; J  2**N mask\n@@ -45,6 +44,13 @@\n ;; U  -inf..1 or 16..inf\n ;; Z  0\n \n+(define_constants\n+  [\n+    (CARRY_REG 16)\n+  ]\n+)\n+\n+\n \f\n ;; ::::::::::::::::::::\n ;; ::\n@@ -313,7 +319,7 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r,r,T,T,r,r,r\")\n \t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0,0,0,0,0,0\")\n \t\t (match_operand:HI 2 \"xs_hi_nonmemory_operand\" \"O,P,Z,L,M,Ir,N,i\")))\n-   (clobber (match_scratch:BI 3 \"=X,X,X,y,y,y,y,y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"@\n    inc %0,%o2\n@@ -326,27 +332,27 @@\n    add %0,%2\"\n   [(set_attr \"length\" \"2,2,0,2,2,2,2,4\")])\n \n-; Reload can generate addition operations.  The SECONDARY_RELOAD_CLASS\n-; macro causes it to allocate the carry register; this pattern\n-; shows it how to place the register in RTL to make the addition work.\n-(define_expand \"reload_inhi\"\n-  [(parallel [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t\t   (match_operand:HI 1 \"xstormy16_carry_plus_operand\" \"\"))\n-\t      (clobber (match_operand:BI 2 \"\" \"=&y\"))])]\n-  \"\"\n-  \"if (! rtx_equal_p (operands[0], XEXP (operands[1], 0)))\n-    {\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0], XEXP (operands[1], 0)));\n-      operands[1] = gen_rtx_PLUS (GET_MODE (operands[1]), operands[0],\n-\t\t\t\t  XEXP (operands[1], 1));\n-    }\n- \")\n+;; ; Reload can generate addition operations.  The SECONDARY_RELOAD_CLASS\n+;; ; macro causes it to allocate the carry register; this pattern\n+;; ; shows it how to place the register in RTL to make the addition work.\n+;; (define_expand \"reload_inhi\"\n+;;   [(parallel [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+;; \t\t   (match_operand:HI 1 \"xstormy16_carry_plus_operand\" \"\"))\n+;; \t      (clobber (reg:BI CARRY_REG))])]\n+;;   \"\"\n+;;   \"if (! rtx_equal_p (operands[0], XEXP (operands[1], 0)))\n+;;     {\n+;;       emit_insn (gen_rtx_SET (VOIDmode, operands[0], XEXP (operands[1], 0)));\n+;;       operands[1] = gen_rtx_PLUS (GET_MODE (operands[1]), operands[0],\n+;; \t\t\t\t  XEXP (operands[1], 1));\n+;;     }\n+;;  \")\n \n (define_insn \"addchi4\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=T,r,r\")\n \t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0\")\n \t\t (match_operand:HI 2 \"xs_hi_nonmemory_operand\" \"L,Ir,i\")))\n-   (set (match_operand:BI 3 \"register_operand\" \"=y,y,y\")\n+   (set (reg:BI CARRY_REG)\n         (truncate:BI (lshiftrt:SI (plus:SI (zero_extend:SI (match_dup 1))\n \t\t\t\t\t   (zero_extend:SI (match_dup 2)))\n \t\t\t\t  (const_int 16))))]\n@@ -360,14 +366,12 @@\n (define_insn \"addchi5\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=T,r,r\")\n \t(plus:HI (plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0\")\n-\t\t\t  (zero_extend:HI (match_operand:BI 3 \n-\t\t\t\t\t\t\t    \"register_operand\"\n-\t\t\t\t\t\t\t    \"y,y,y\")))\n+\t\t\t  (zero_extend:HI (reg:BI CARRY_REG)))\n \t\t (match_operand:HI 2 \"xs_hi_nonmemory_operand\" \"L,Ir,i\")))\n-   (set (match_operand:BI 4 \"register_operand\" \"=y,y,y\") \n+   (set (reg:BI CARRY_REG) \n         (truncate:BI (lshiftrt:SI (plus:SI (plus:SI \n \t\t\t\t\t    (zero_extend:SI (match_dup 1))\n-\t\t\t\t\t    (zero_extend:SI (match_dup 3)))\n+\t\t\t\t\t    (zero_extend:SI (reg:BI CARRY_REG)))\n \t\t\t\t\t   (zero_extend:SI (match_dup 2)))\n \t\t\t\t  (const_int 16))))]\n   \"\"\n@@ -387,7 +391,7 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r,T,T,r,r,r\")\n \t(minus:HI (match_operand:HI 1 \"register_operand\" \"0,0,0,0,0,0,0\")\n \t\t  (match_operand:HI 2 \"xs_hi_nonmemory_operand\" \"O,P,L,M,rI,M,i\")))\n-   (clobber (match_scratch:BI 3 \"=X,X,&y,&y,&y,&y,&y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"@\n    dec %0,%o2\n@@ -403,7 +407,7 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=T,r,r\")\n \t(minus:HI (match_operand:HI 1 \"register_operand\" \"0,0,0\")\n \t\t  (match_operand:HI 2 \"xs_hi_nonmemory_operand\" \"L,Ir,i\")))\n-   (set (match_operand:BI 3 \"register_operand\" \"=y,y,y\") \n+   (set (reg:BI CARRY_REG) \n         (truncate:BI (lshiftrt:SI (minus:SI (zero_extend:SI (match_dup 1))\n \t\t\t\t\t    (zero_extend:SI (match_dup 2)))\n \t\t\t\t  (const_int 16))))]\n@@ -417,14 +421,12 @@\n (define_insn \"subchi5\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=T,r,r\")\n \t(minus:HI (minus:HI (match_operand:HI 1 \"register_operand\" \"0,0,0\")\n-\t\t\t  (zero_extend:HI (match_operand:BI 3 \n-\t\t\t\t\t\t\t    \"register_operand\"\n-\t\t\t\t\t\t\t    \"y,y,y\")))\n+\t\t\t  (zero_extend:HI (reg:BI CARRY_REG))) \n \t\t (match_operand:HI 2 \"xs_hi_nonmemory_operand\" \"L,Ir,i\")))\n-   (set (match_operand:BI 4 \"register_operand\" \"=y,y,y\") \n+   (set (reg:BI CARRY_REG) \n         (truncate:BI (lshiftrt:SI (minus:SI (minus:SI \n \t\t\t\t\t     (zero_extend:SI (match_dup 1))\n-\t\t\t\t\t     (zero_extend:SI (match_dup 3)))\n+\t\t\t\t\t     (zero_extend:SI (reg:BI CARRY_REG)))\n \t\t\t\t\t    (zero_extend:SI (match_dup 2)))\n \t\t\t\t  (const_int 16))))]\n   \"\"\n@@ -511,7 +513,7 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n \t(not:HI (match_operand:HI 1 \"register_operand\" \"\")))\n    (parallel [(set (match_dup 0) (plus:HI (match_dup 0) (const_int 1)))\n-\t      (clobber (match_scratch:BI 3 \"\"))])]\n+\t      (clobber (reg:BI CARRY_REG))])]\n   \"\"\n   \"\")\n \n@@ -527,7 +529,7 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(ashift:HI (match_operand:HI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:HI 2 \"nonmemory_operand\" \"ri\")))\n-   (clobber (match_scratch:BI 3 \"=y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"shl %0,%2\")\n \n@@ -536,7 +538,7 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(ashiftrt:HI (match_operand:HI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:HI 2 \"nonmemory_operand\" \"ri\")))\n-   (clobber (match_scratch:BI 3 \"=y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"asr %0,%2\")\n \n@@ -545,7 +547,7 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"0\")\n \t\t     (match_operand:HI 2 \"nonmemory_operand\" \"ri\")))\n-   (clobber (match_scratch:BI 3 \"=y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"shr %0,%2\")\n \n@@ -647,47 +649,46 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0\")\n \t\t (match_operand:SI 2 \"nonmemory_operand\" \"ri\")))\n-   (clobber (match_scratch:BI 3 \"=y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"#\"\n   \"reload_completed\"\n   [(pc)]\n   \"{ xstormy16_expand_arith (SImode, PLUS, operands[0], operands[1],\n-\t\t\t    operands[2], operands[3]); DONE; } \"\n+\t\t\t    operands[2]); DONE; } \"\n   [(set_attr \"length\" \"4\")])\n \n ;; Subtraction\n (define_insn_and_split \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t (match_operand:SI 2 \"nonmemory_operand\" \"ri\")))\n-   (clobber (match_scratch:BI 3 \"=y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"#\"\n   \"reload_completed\"\n   [(pc)]\n   \"{ xstormy16_expand_arith (SImode, MINUS, operands[0], operands[1],\n-\t\t\t    operands[2], operands[3]); DONE; } \"\n+\t\t\t    operands[2]); DONE; } \"\n   [(set_attr \"length\" \"4\")])\n \n (define_expand \"negsi2\"\n   [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (neg:SI (match_operand:SI 1 \"register_operand\" \"\")))\n-\t      (clobber (match_scratch:BI 2 \"\"))])]\n+\t      (clobber (reg:BI CARRY_REG))])]\n   \"\"\n-  \"{ operands[2] = gen_reg_rtx (HImode);\n-     operands[3] = gen_reg_rtx (BImode); }\")\n+  \"{ operands[2] = gen_reg_rtx (HImode); }\")\n \n (define_insn_and_split \"*negsi2_internal\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n \t(neg:SI (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (clobber (match_scratch:BI 2 \"=y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"#\"\n   \"reload_completed\"\n   [(pc)]\n   \"{ xstormy16_expand_arith (SImode, NEG, operands[0], operands[0],\n-\t\t\t    operands[1], operands[2]); DONE; }\")\n+\t\t\t    operands[1]); DONE; }\")\n \n ;; ::::::::::::::::::::\n ;; ::\n@@ -700,44 +701,47 @@\n   [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (ashift:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t\t      (match_operand:SI 2 \"const_int_operand\" \"\")))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (match_dup 4))])]\n+\t      (clobber (reg:BI CARRY_REG))\n+\t      (clobber (match_dup 3))])]\n   \"\"\n-  \" if (! const_int_operand (operands[2], SImode)) FAIL;\n-  operands[3] = gen_reg_rtx (BImode); operands[4] = gen_reg_rtx (HImode); \")\n+  \" if (! const_int_operand (operands[2], SImode))\n+      FAIL;\n+   operands[3] = gen_reg_rtx (HImode); \")\n \n ;; Arithmetic Shift Right\n (define_expand \"ashrsi3\"\n   [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t\t        (match_operand:SI 2 \"const_int_operand\" \"\")))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (match_dup 4))])]\n+\t      (clobber (reg:BI CARRY_REG))\n+\t      (clobber (match_dup 3))])]\n   \"\"\n-  \" if (! const_int_operand (operands[2], SImode)) FAIL;\n-  operands[3] = gen_reg_rtx (BImode); operands[4] = gen_reg_rtx (HImode); \")\n+  \" if (! const_int_operand (operands[2], SImode))\n+      FAIL;\n+  operands[3] = gen_reg_rtx (HImode); \")\n \n ;; Logical Shift Right\n (define_expand \"lshrsi3\"\n   [(parallel [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t\t        (match_operand:SI 2 \"const_int_operand\" \"\")))\n-\t      (clobber (match_dup 3))\n-\t      (clobber (match_dup 4))])]\n+\t      (clobber (reg:BI CARRY_REG))\n+\t      (clobber (match_dup 3))])]\n   \"\"\n-  \" if (! const_int_operand (operands[2], SImode)) FAIL;\n-  operands[3] = gen_reg_rtx (BImode); operands[4] = gen_reg_rtx (HImode); \")\n+  \" if (! const_int_operand (operands[2], SImode))\n+      FAIL;\n+   operands[3] = gen_reg_rtx (HImode); \")\n \n (define_insn \"*shiftsi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(match_operator:SI 5 \"shift_operator\"\n+\t(match_operator:SI 4 \"shift_operator\"\n \t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n \t  (match_operand:SI 2 \"const_int_operand\" \"U,n\")]))\n-   (clobber (match_operand:BI 3 \"register_operand\" \"=y,y\"))\n-   (clobber (match_operand:HI 4 \"\" \"=X,r\"))]\n+   (clobber (reg:BI CARRY_REG))\n+   (clobber (match_operand:HI 3 \"\" \"=X,r\"))]\n   \"\"\n-  \"* return xstormy16_output_shift (SImode, GET_CODE (operands[5]), \n-\t\t\t\t   operands[0], operands[2], operands[4]);\"\n+  \"* return xstormy16_output_shift (SImode, GET_CODE (operands[4]), \n+\t\t\t\t    operands[0], operands[2], operands[3]);\"\n   [(set_attr \"length\" \"6,10\")\n    (set_attr \"psw_operand\" \"clobber,clobber\")])\n \n@@ -845,7 +849,7 @@\n \t\t\t\t\t\t      \"r,L,e\")])\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (clobber (match_operand:BI 4 \"\" \"=&y,&y,&y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"*\n {\n@@ -863,7 +867,7 @@\n \t\t\t\t\t\t\t \"r,L,e\")])\n \t\t      (pc)\n \t\t      (label_ref (match_operand 0 \"\" \"\"))))\n-   (clobber (match_operand:BI 4 \"\" \"=&y,&y,&y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"*\n {\n@@ -898,35 +902,31 @@\n \t\t\t\t\t\t\t \"ri\")])\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (clobber (match_operand:SI 5 \"register_operand\" \"=2\"))\n-   (clobber (match_operand:BI 4 \"\" \"=&y\"))]\n+   (clobber (match_operand:SI 4 \"register_operand\" \"=2\"))\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"#\"\n   \"reload_completed\"\n   [(pc)]\n-  \"{ xstormy16_split_cbranch (SImode, operands[0], operands[1], operands[2],\n-\t\t\t     operands[4]); DONE; }\"\n+  \"{ xstormy16_split_cbranch (SImode, operands[0], operands[1], operands[2]); DONE; }\"\n   [(set_attr \"length\" \"8\")])\n \n (define_insn \"*ineqbranch_1\"\n   [(set (pc)\n-\t(if_then_else (match_operator:HI 5 \"xstormy16_ineqsi_operator\"\n-\t\t       [(minus:HI (match_operand:HI 1 \"register_operand\" \n-\t\t\t\t\t\t    \"T,r,r\")\n-\t\t\t   (zero_extend:HI (match_operand:BI 4\n-\t\t\t\t\t\t\t     \"register_operand\"\n-\t\t\t\t\t\t\t     \"y,y,y\")))\n+\t(if_then_else (match_operator:HI 4 \"xstormy16_ineqsi_operator\"\n+\t\t       [(minus:HI (match_operand:HI 1 \"register_operand\" \"T,r,r\")\n+\t\t\t   (zero_extend:HI (reg:BI CARRY_REG)))\n \t\t\t(match_operand:HI 3 \"nonmemory_operand\" \"L,Ir,i\")])\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n    (set (match_operand:HI 2 \"register_operand\" \"=1,1,1\")\n-\t(minus:HI (minus:HI (match_dup 1) (zero_extend:HI (match_dup 4)))\n+\t(minus:HI (minus:HI (match_dup 1) (zero_extend:HI (reg:BI CARRY_REG)))\n \t\t  (match_dup 3)))\n-   (clobber (match_operand:BI 6 \"\" \"=y,y,y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"*\n {\n-  return xstormy16_output_cbranch_si (operands[5], \\\"%l0\\\", 0, insn);\n+  return xstormy16_output_cbranch_si (operands[4], \\\"%l0\\\", 0, insn);\n }\"\n   [(set_attr \"branch_class\" \"bcc8p2,bcc8p2,bcc8p4\")\n    (set_attr \"psw_operand\" \"2,2,2\")])\n@@ -1026,7 +1026,7 @@\n ;; Indirect jump through a register\n (define_expand \"indirect_jump\"\n   [(set (match_dup 1) (const_int 0))\n-   (parallel [(set (pc) (match_operand:HI 0 \"register_operand\" \"r\"))\n+   (parallel [(set (pc) (match_operand:HI 0 \"register_operand\" \"\"))\n \t      (use (match_dup 1))])]\n   \"\"\n   \"operands[1] = gen_reg_rtx (HImode);\")\n@@ -1231,7 +1231,7 @@\n \t\t\t     (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (clobber (match_operand:BI 3 \"\" \"=y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"bn %1,%B2,%l0\"\n   [(set_attr \"length\" \"4\")\n@@ -1247,7 +1247,7 @@\n \t\t       (match_operand:HI 3 \"immediate_operand\" \"i\"))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (clobber (match_operand:BI 4 \"\" \"=y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"bn %1,%B2,%l0\"\n   [(set_attr \"length\" \"4\")\n@@ -1260,7 +1260,7 @@\n \t\t\t     (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (clobber (match_operand:BI 3 \"\" \"=y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"bn %1,%B2,%l0\"\n   [(set_attr \"length\" \"4\")\n@@ -1274,7 +1274,7 @@\n \t\t\t      (const_int 1))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (clobber (match_operand:BI 2 \"\" \"=y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"bn %1,#7,%l0\"\n   [(set_attr \"length\" \"4\")\n@@ -1286,7 +1286,7 @@\n \t\t\t     (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (clobber (match_operand:BI 2 \"\" \"=y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"bn %1,#7,%l0\"\n   [(set_attr \"length\" \"4\")\n@@ -1299,7 +1299,7 @@\n \t\t\t     (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (clobber (match_operand:BI 3 \"\" \"=y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"bp %1,%B2,%l0\"\n   [(set_attr \"length\" \"4\")\n@@ -1312,7 +1312,7 @@\n \t\t\t\t       (match_operand:HI 2 \"immediate_operand\" \"i\"))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (clobber (match_operand:BI 3 \"\" \"=y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"bp %1,%b2,%l0\"\n   [(set_attr \"length\" \"4\")\n@@ -1325,7 +1325,7 @@\n \t\t\t     (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (clobber (match_operand:BI 3 \"\" \"=y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"bp %1,%B2,%l0\"\n   [(set_attr \"length\" \"4\")\n@@ -1337,7 +1337,7 @@\n \t\t\t\t   (const_int 7))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (clobber (match_operand:BI 2 \"\" \"=y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"bp %1,#7,%l0\"\n   [(set_attr \"length\" \"4\")\n@@ -1349,7 +1349,7 @@\n \t\t\t     (const_int 0))\n \t\t      (label_ref (match_operand 0 \"\" \"\"))\n \t\t      (pc)))\n-   (clobber (match_operand:BI 2 \"\" \"=y\"))]\n+   (clobber (reg:BI CARRY_REG))]\n   \"\"\n   \"bp %1,#7,%l0\"\n   [(set_attr \"length\" \"4\")"}]}