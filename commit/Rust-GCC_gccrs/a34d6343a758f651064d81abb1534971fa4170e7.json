{"sha": "a34d6343a758f651064d81abb1534971fa4170e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM0ZDYzNDNhNzU4ZjY1MTA2NGQ4MWFiYjE1MzQ5NzFmYTQxNzBlNw==", "commit": {"author": {"name": "Thomas Rodgers", "email": "trodgers@redhat.com", "date": "2019-04-19T22:44:11Z"}, "committer": {"name": "Thomas Rodgers", "email": "rodgertq@gcc.gnu.org", "date": "2019-04-19T22:44:11Z"}, "message": "Improve implementation of parallel equal()\n\n\t* include/pstl/algorithm_impl.h\n\t(__internal::__brick_equal): use \"4 iterator\" version of\n\tstd::equal().\n\t(__internal::__brick_equal): use simd for random access\n\titerators on unsequenced execution policies.\n\t(__internal::__pattern_equal): add \"4 iterator\" version\n\t(__internal::__pattern_equal): dispatch to simd __brick_equal\n\tfor vector-only execution policies.\n\t(__internal::__pattern_equal): dispatch to __parallel_or for\n\tparallel execution policies.\n\t* include/pstl/glue_algorithm_impl.h\n\t(std::equal): dispatch to \"4 iterator\" version of\n\t__internal::__pattern_equal().\n\nFrom-SVN: r270463", "tree": {"sha": "ea92d5ec05b6f7ef385ba805218fe1e2d941f2a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea92d5ec05b6f7ef385ba805218fe1e2d941f2a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a34d6343a758f651064d81abb1534971fa4170e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a34d6343a758f651064d81abb1534971fa4170e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a34d6343a758f651064d81abb1534971fa4170e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a34d6343a758f651064d81abb1534971fa4170e7/comments", "author": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "53db57ccaf3081bf8981f5d4d821a02429414145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53db57ccaf3081bf8981f5d4d821a02429414145", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53db57ccaf3081bf8981f5d4d821a02429414145"}], "stats": {"total": 76, "additions": 75, "deletions": 1}, "files": [{"sha": "ce726599d0e46781b46c066f0fe4f4566c7d2094", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a34d6343a758f651064d81abb1534971fa4170e7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a34d6343a758f651064d81abb1534971fa4170e7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a34d6343a758f651064d81abb1534971fa4170e7", "patch": "@@ -1,3 +1,20 @@\n+2019-04-19  Thomas Rodgers <trodgers@redhat.com>\n+\t\n+\tImprove implementation of parallel equal()\n+\t* include/pstl/algorithm_impl.h\n+\t(__internal::__brick_equal): use \"4 iterator\" version of\n+\tstd::equal().\n+\t(__internal::__brick_equal): use simd for random access\n+\titerators on unsequenced execution policies.\n+\t(__internal::__pattern_equal): add \"4 iterator\" version\n+\t(__internal::__pattern_equal): dispatch to simd __brick_equal\n+\tfor vector-only execution policies.\n+\t(__internal::__pattern_equal): dispatch to __parallel_or for\n+\tparallel execution policies.\n+\t* include/pstl/glue_algorithm_impl.h\n+\t(std::equal): dispatch to \"4 iterator\" version of\n+\t__internal::__pattern_equal().\n+\t\n 2019-04-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/90105"}, {"sha": "511e688c3f6c2c1b745dd39c9ad178f75e609fd3", "filename": "libstdc++-v3/include/pstl/algorithm_impl.h", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a34d6343a758f651064d81abb1534971fa4170e7/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a34d6343a758f651064d81abb1534971fa4170e7/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Falgorithm_impl.h?ref=a34d6343a758f651064d81abb1534971fa4170e7", "patch": "@@ -404,6 +404,63 @@ __pattern_walk3(_ExecutionPolicy&& __exec, _RandomAccessIterator1 __first1, _Ran\n // equal\n //------------------------------------------------------------------------\n \n+template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>\n+bool\n+__brick_equal(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,\n+              _ForwardIterator2 __last2, _BinaryPredicate __p, /* IsVector = */ std::false_type) noexcept\n+{\n+    return std::equal(__first1, __last1, __first2, __last2, __p);\n+}\n+\n+template <class _RandomAccessIterator1, class _RandomAccessIterator2, class _BinaryPredicate>\n+bool\n+__brick_equal(_RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1, _RandomAccessIterator2 __first2,\n+              _RandomAccessIterator2 __last2, _BinaryPredicate __p, /* is_vector = */ std::true_type) noexcept\n+{\n+    if (__last1 - __first1 != __last2 - __first2)\n+        return false;\n+\n+    return __unseq_backend::__simd_first(__first1, __last1 - __first1, __first2,\n+                                         __internal::__not_pred<_BinaryPredicate>(__p))\n+               .first == __last1;\n+}\n+\n+template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate,\n+          class _IsVector>\n+bool\n+__pattern_equal(_ExecutionPolicy&&, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,\n+                _ForwardIterator2 __last2, _BinaryPredicate __p, _IsVector __is_vector, /* is_parallel = */\n+                std::false_type) noexcept\n+{\n+    return __internal::__brick_equal(__first1, __last1, __first2, __last2, __p, __is_vector);\n+}\n+\n+#if _PSTL_USE_PAR_POLICIES\n+template <class _ExecutionPolicy, class _RandomAccessIterator1, class _RandomAccessIterator2, class _BinaryPredicate,\n+          class _IsVector>\n+bool\n+__pattern_equal(_ExecutionPolicy&& __exec, _RandomAccessIterator1 __first1, _RandomAccessIterator1 __last1,\n+                _RandomAccessIterator2 __first2, _RandomAccessIterator2 __last2, _BinaryPredicate __p,\n+                _IsVector __is_vector, /*is_parallel=*/std::true_type)\n+{\n+    if (__last1 - __first1 != __last2 - __first2)\n+        return false;\n+\n+    return __internal::__except_handler([&]() {\n+        return !__internal::__parallel_or(\n+            std::forward<_ExecutionPolicy>(__exec), __first1, __last1,\n+            [__first1, __first2, __p, __is_vector](_RandomAccessIterator1 __i, _RandomAccessIterator1 __j) {\n+                return !__internal::__brick_equal(__i, __j, __first2 + (__i - __first1), __first2 + (__j - __first1),\n+                                                  __p, __is_vector);\n+            });\n+    });\n+}\n+#endif\n+\n+//------------------------------------------------------------------------\n+// equal version for sequences with equal length\n+//------------------------------------------------------------------------\n+\n template <class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>\n bool\n __brick_equal(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _BinaryPredicate __p,"}, {"sha": "db5ef2b76f5f2ef44bd9d9ad90f908ec0342685d", "filename": "libstdc++-v3/include/pstl/glue_algorithm_impl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a34d6343a758f651064d81abb1534971fa4170e7/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_algorithm_impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a34d6343a758f651064d81abb1534971fa4170e7/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_algorithm_impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fpstl%2Fglue_algorithm_impl.h?ref=a34d6343a758f651064d81abb1534971fa4170e7", "patch": "@@ -757,7 +757,7 @@ __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>\n equal(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,\n       _ForwardIterator2 __last2)\n {\n-    return equal(std::forward<_ExecutionPolicy>(__exec), __first1, __last1, __first2,\n+    return equal(std::forward<_ExecutionPolicy>(__exec), __first1, __last1, __first2, __last2,\n                  __pstl::__internal::__pstl_equal());\n }\n "}]}