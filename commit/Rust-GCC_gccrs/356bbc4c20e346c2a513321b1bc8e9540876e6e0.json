{"sha": "356bbc4c20e346c2a513321b1bc8e9540876e6e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU2YmJjNGMyMGUzNDZjMmE1MTMzMjFiMWJjOGU5NTQwODc2ZTZlMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-09-25T08:12:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-09-25T08:12:49Z"}, "message": "re PR tree-optimization/63341 (Vectorization miscompilation with -mcpu=power7)\n\n\tPR tree-optimization/63341\n\t* tree-vectorizer.h (vect_create_data_ref_ptr,\n\tvect_create_addr_base_for_vector_ref): Add another tree argument\n\tdefaulting to NULL_TREE.\n\t* tree-vect-data-refs.c (vect_create_data_ref_ptr): Add byte_offset\n\targument, pass it down to vect_create_addr_base_for_vector_ref.\n\t(vect_create_addr_base_for_vector_ref): Add byte_offset argument,\n\tadd that to base_offset too if non-NULL.\n\t* tree-vect-stmts.c (vectorizable_load): Add byte_offset variable,\n\tfor dr_explicit_realign_optimized set it to vector byte size\n\t- 1 instead of setting offset, pass byte_offset down to\n\tvect_create_data_ref_ptr.\n\n\t* gcc.dg/vect/pr63341-1.c: New test.\n\t* gcc.dg/vect/pr63341-2.c: New test.\n\nFrom-SVN: r215583", "tree": {"sha": "d0ec2703a583c945535d901182f41b61cf38fdc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0ec2703a583c945535d901182f41b61cf38fdc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/356bbc4c20e346c2a513321b1bc8e9540876e6e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/356bbc4c20e346c2a513321b1bc8e9540876e6e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/356bbc4c20e346c2a513321b1bc8e9540876e6e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/356bbc4c20e346c2a513321b1bc8e9540876e6e0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abdc17f81403fa566c44812777296c6d825c3e65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abdc17f81403fa566c44812777296c6d825c3e65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abdc17f81403fa566c44812777296c6d825c3e65"}], "stats": {"total": 123, "additions": 115, "deletions": 8}, "files": [{"sha": "d1ae0a428e65bc588c2f85dfc259f72be279f013", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356bbc4c20e346c2a513321b1bc8e9540876e6e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356bbc4c20e346c2a513321b1bc8e9540876e6e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=356bbc4c20e346c2a513321b1bc8e9540876e6e0", "patch": "@@ -1,3 +1,18 @@\n+2014-09-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/63341\n+\t* tree-vectorizer.h (vect_create_data_ref_ptr,\n+\tvect_create_addr_base_for_vector_ref): Add another tree argument\n+\tdefaulting to NULL_TREE.\n+\t* tree-vect-data-refs.c (vect_create_data_ref_ptr): Add byte_offset\n+\targument, pass it down to vect_create_addr_base_for_vector_ref.\n+\t(vect_create_addr_base_for_vector_ref): Add byte_offset argument,\n+\tadd that to base_offset too if non-NULL.\n+\t* tree-vect-stmts.c (vectorizable_load): Add byte_offset variable,\n+\tfor dr_explicit_realign_optimized set it to vector byte size\n+\t- 1 instead of setting offset, pass byte_offset down to\n+\tvect_create_data_ref_ptr.\n+\n 2014-09-24  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-devirt.c (possible_polymorphic_call_targets): Remove"}, {"sha": "f1806f64503ec4b770579d5cd3c22762d9ad6491", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356bbc4c20e346c2a513321b1bc8e9540876e6e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356bbc4c20e346c2a513321b1bc8e9540876e6e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=356bbc4c20e346c2a513321b1bc8e9540876e6e0", "patch": "@@ -1,5 +1,9 @@\n 2014-09-25  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/63341\n+\t* gcc.dg/vect/pr63341-1.c: New test.\n+\t* gcc.dg/vect/pr63341-2.c: New test.\n+\n \tPR c++/63249\n \t* g++.dg/gomp/pr63249.C: New test.\n \t* c-c++-common/gomp/pr63249.c: New test."}, {"sha": "4aece7bbd24743f2224dd28bd723e9acc44c8a27", "filename": "gcc/testsuite/gcc.dg/vect/pr63341-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356bbc4c20e346c2a513321b1bc8e9540876e6e0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr63341-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356bbc4c20e346c2a513321b1bc8e9540876e6e0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr63341-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr63341-1.c?ref=356bbc4c20e346c2a513321b1bc8e9540876e6e0", "patch": "@@ -0,0 +1,32 @@\n+/* PR tree-optimization/63341 */\n+/* { dg-do run } */\n+\n+#include \"tree-vect.h\"\n+\n+typedef union U { unsigned short s; unsigned char c; } __attribute__((packed)) U;\n+struct S { char e __attribute__((aligned (64))); U s[32]; };\n+struct S t = {0, {{1}, {2}, {3}, {4}, {5}, {6}, {7}, {8},\n+\t\t  {9}, {10}, {11}, {12}, {13}, {14}, {15}, {16},\n+\t\t  {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24},\n+\t\t  {25}, {26}, {27}, {28}, {29}, {30}, {31}, {32}}};\n+unsigned short d[32] = { 1 };\n+\n+__attribute__((noinline, noclone)) void\n+foo ()\n+{\n+  int i;\n+  for (i = 0; i < 32; i++)\n+    d[i] = t.s[i].s;\n+  if (__builtin_memcmp (d, t.s, sizeof d))\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  check_vect ();\n+  foo ();\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "4e7d2bb1f5a1697eb8fe9fffc80b2cca8cd8c20e", "filename": "gcc/testsuite/gcc.dg/vect/pr63341-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356bbc4c20e346c2a513321b1bc8e9540876e6e0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr63341-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356bbc4c20e346c2a513321b1bc8e9540876e6e0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr63341-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr63341-2.c?ref=356bbc4c20e346c2a513321b1bc8e9540876e6e0", "patch": "@@ -0,0 +1,35 @@\n+/* PR tree-optimization/63341 */\n+/* { dg-do run } */\n+\n+#include \"tree-vect.h\"\n+\n+typedef union U { unsigned short s; unsigned char c; } __attribute__((packed)) U;\n+struct S { char e __attribute__((aligned (64))); U s[32]; };\n+struct S t = {0, {{0x5010}, {0x5111}, {0x5212}, {0x5313}, {0x5414}, {0x5515}, {0x5616}, {0x5717},\n+\t\t  {0x5818}, {0x5919}, {0x5a1a}, {0x5b1b}, {0x5c1c}, {0x5d1d}, {0x5e1e}, {0x5f1f},\n+\t\t  {0x6020}, {0x6121}, {0x6222}, {0x6323}, {0x6424}, {0x6525}, {0x6626}, {0x6727},\n+\t\t  {0x6828}, {0x6929}, {0x6a2a}, {0x6b2b}, {0x6c2c}, {0x6d2d}, {0x6e2e}, {0x6f2f}}};\n+unsigned short d[32] = { 1 };\n+\n+__attribute__((noinline, noclone)) void\n+foo ()\n+{\n+  int i;\n+  for (i = 0; i < 32; i++)\n+    d[i] = t.s[i].s + 4;\n+  for (i = 0; i < 32; i++)\n+    if (d[i] != t.s[i].s + 4)\n+      abort ();\n+    else\n+      asm volatile (\"\" : : : \"memory\");\n+}\n+\n+int\n+main ()\n+{\n+  check_vect ();\n+  foo ();\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "b56348a794368d0fe0b9af1e64baaf00466e59ee", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356bbc4c20e346c2a513321b1bc8e9540876e6e0/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356bbc4c20e346c2a513321b1bc8e9540876e6e0/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=356bbc4c20e346c2a513321b1bc8e9540876e6e0", "patch": "@@ -3860,6 +3860,9 @@ vect_get_new_vect_var (tree type, enum vect_var_kind var_kind, const char *name)\n \t    is as follows:\n \t    if LOOP=i_loop:\t&in\t\t(relative to i_loop)\n \t    if LOOP=j_loop: \t&in+i*2B\t(relative to j_loop)\n+   BYTE_OFFSET: Optional, defaulted to NULL.  If supplied, it is added to the\n+\t    initial address.  Unlike OFFSET, which is number of elements to\n+\t    be added, BYTE_OFFSET is measured in bytes.\n \n    Output:\n    1. Return an SSA_NAME whose value is the address of the memory location of\n@@ -3873,7 +3876,8 @@ tree\n vect_create_addr_base_for_vector_ref (gimple stmt,\n \t\t\t\t      gimple_seq *new_stmt_list,\n \t\t\t\t      tree offset,\n-\t\t\t\t      struct loop *loop)\n+\t\t\t\t      struct loop *loop,\n+\t\t\t\t      tree byte_offset)\n {\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n   struct data_reference *dr = STMT_VINFO_DATA_REF (stmt_info);\n@@ -3926,6 +3930,12 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n       base_offset = fold_build2 (PLUS_EXPR, sizetype,\n \t\t\t\t base_offset, offset);\n     }\n+  if (byte_offset)\n+    {\n+      byte_offset = fold_convert (sizetype, byte_offset);\n+      base_offset = fold_build2 (PLUS_EXPR, sizetype,\n+\t\t\t\t base_offset, byte_offset);\n+    }\n \n   /* base + base_offset */\n   if (loop_vinfo)\n@@ -3983,6 +3993,10 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n    5. BSI: location where the new stmts are to be placed if there is no loop\n    6. ONLY_INIT: indicate if ap is to be updated in the loop, or remain\n         pointing to the initial address.\n+   7. BYTE_OFFSET (optional, defaults to NULL): a byte offset to be added\n+\tto the initial address accessed by the data-ref in STMT.  This is\n+\tsimilar to OFFSET, but OFFSET is counted in elements, while BYTE_OFFSET\n+\tin bytes.\n \n    Output:\n    1. Declare a new ptr to vector_type, and have it point to the base of the\n@@ -3996,6 +4010,8 @@ vect_create_addr_base_for_vector_ref (gimple stmt,\n          initial_address = &a[init];\n       if OFFSET is supplied:\n          initial_address = &a[init + OFFSET];\n+      if BYTE_OFFSET is supplied:\n+\t initial_address = &a[init] + BYTE_OFFSET;\n \n       Return the initial_address in INITIAL_ADDRESS.\n \n@@ -4013,7 +4029,7 @@ tree\n vect_create_data_ref_ptr (gimple stmt, tree aggr_type, struct loop *at_loop,\n \t\t\t  tree offset, tree *initial_address,\n \t\t\t  gimple_stmt_iterator *gsi, gimple *ptr_incr,\n-\t\t\t  bool only_init, bool *inv_p)\n+\t\t\t  bool only_init, bool *inv_p, tree byte_offset)\n {\n   const char *base_name;\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n@@ -4156,10 +4172,10 @@ vect_create_data_ref_ptr (gimple stmt, tree aggr_type, struct loop *at_loop,\n   /* (2) Calculate the initial address of the aggregate-pointer, and set\n      the aggregate-pointer to point to it before the loop.  */\n \n-  /* Create: (&(base[init_val+offset]) in the loop preheader.  */\n+  /* Create: (&(base[init_val+offset]+byte_offset) in the loop preheader.  */\n \n   new_temp = vect_create_addr_base_for_vector_ref (stmt, &new_stmt_list,\n-                                                   offset, loop);\n+\t\t\t\t\t\t   offset, loop, byte_offset);\n   if (new_stmt_list)\n     {\n       if (pe)"}, {"sha": "350557c4f5637de54f29cba846ff270699f1f534", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356bbc4c20e346c2a513321b1bc8e9540876e6e0/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356bbc4c20e346c2a513321b1bc8e9540876e6e0/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=356bbc4c20e346c2a513321b1bc8e9540876e6e0", "patch": "@@ -5600,6 +5600,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   int i, j, group_size, group_gap;\n   tree msq = NULL_TREE, lsq;\n   tree offset = NULL_TREE;\n+  tree byte_offset = NULL_TREE;\n   tree realignment_token = NULL_TREE;\n   gimple phi = NULL;\n   vec<tree> dr_chain = vNULL;\n@@ -6261,7 +6262,8 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n       if (alignment_support_scheme == dr_explicit_realign_optimized)\n \t{\n \t  phi = SSA_NAME_DEF_STMT (msq);\n-\t  offset = size_int (TYPE_VECTOR_SUBPARTS (vectype) - 1);\n+\t  byte_offset = size_binop (MINUS_EXPR, TYPE_SIZE_UNIT (vectype),\n+\t\t\t\t    size_one_node);\n \t}\n     }\n   else\n@@ -6302,7 +6304,8 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t    dataref_ptr\n \t      = vect_create_data_ref_ptr (first_stmt, aggr_type, at_loop,\n \t\t\t\t\t  offset, &dummy, gsi, &ptr_incr,\n-\t\t\t\t\t  simd_lane_access_p, &inv_p);\n+\t\t\t\t\t  simd_lane_access_p, &inv_p,\n+\t\t\t\t\t  byte_offset);\n \t}\n       else if (dataref_offset)\n \tdataref_offset = int_const_binop (PLUS_EXPR, dataref_offset,"}, {"sha": "93aa73e59c6079dc95288979e15c1d47725391b7", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/356bbc4c20e346c2a513321b1bc8e9540876e6e0/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/356bbc4c20e346c2a513321b1bc8e9540876e6e0/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=356bbc4c20e346c2a513321b1bc8e9540876e6e0", "patch": "@@ -1061,7 +1061,8 @@ extern bool vect_analyze_data_refs (loop_vec_info, bb_vec_info, int *,\n \t\t\t\t    unsigned *);\n extern tree vect_create_data_ref_ptr (gimple, tree, struct loop *, tree,\n \t\t\t\t      tree *, gimple_stmt_iterator *,\n-\t\t\t\t      gimple *, bool, bool *);\n+\t\t\t\t      gimple *, bool, bool *,\n+\t\t\t\t      tree = NULL_TREE);\n extern tree bump_vector_ptr (tree, gimple, gimple_stmt_iterator *, gimple, tree);\n extern tree vect_create_destination_var (tree, tree);\n extern bool vect_grouped_store_supported (tree, unsigned HOST_WIDE_INT);\n@@ -1078,7 +1079,8 @@ extern void vect_transform_grouped_load (gimple, vec<tree> , int,\n extern void vect_record_grouped_load_vectors (gimple, vec<tree> );\n extern tree vect_get_new_vect_var (tree, enum vect_var_kind, const char *);\n extern tree vect_create_addr_base_for_vector_ref (gimple, gimple_seq *,\n-                                                  tree, struct loop *);\n+\t\t\t\t\t\t  tree, struct loop *,\n+\t\t\t\t\t\t  tree = NULL_TREE);\n \n /* In tree-vect-loop.c.  */\n /* FORNOW: Used in tree-parloops.c.  */"}]}