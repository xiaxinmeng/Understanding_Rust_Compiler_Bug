{"sha": "c1f1978f30b4fcbe066850db22a6213c4b3bd779", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFmMTk3OGYzMGI0ZmNiZTA2Njg1MGRiMjJhNjIxM2M0YjNiZDc3OQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2003-05-13T18:41:27Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2003-05-13T18:41:27Z"}, "message": "(jump): Use emit_jump_insn.\n\nFrom-SVN: r66772", "tree": {"sha": "bfd5d87656d95bd59bbcd37f9a21b912f9469a56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfd5d87656d95bd59bbcd37f9a21b912f9469a56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1f1978f30b4fcbe066850db22a6213c4b3bd779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1f1978f30b4fcbe066850db22a6213c4b3bd779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1f1978f30b4fcbe066850db22a6213c4b3bd779", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1f1978f30b4fcbe066850db22a6213c4b3bd779/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7641be90af423161897bcb7e1c41b6a74670ae91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7641be90af423161897bcb7e1c41b6a74670ae91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7641be90af423161897bcb7e1c41b6a74670ae91"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "9f3a51f3c89e8c59536439e6a52009a24ab898c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1f1978f30b4fcbe066850db22a6213c4b3bd779/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1f1978f30b4fcbe066850db22a6213c4b3bd779/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1f1978f30b4fcbe066850db22a6213c4b3bd779", "patch": "@@ -1,3 +1,7 @@\n+2003-05-13  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/mcore/mcore.md (jump): Use emit_jump_insn.\n+\n 2003-05-13  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.h (ASM_OUTPUT_SPECIAL_POOL_ENTRY): Second"}, {"sha": "6d39db9e7bb9ceb46ff41dc0c2df7ba0805726df", "filename": "gcc/config/mcore/mcore.md", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1f1978f30b4fcbe066850db22a6213c4b3bd779/gcc%2Fconfig%2Fmcore%2Fmcore.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1f1978f30b4fcbe066850db22a6213c4b3bd779/gcc%2Fconfig%2Fmcore%2Fmcore.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.md?ref=c1f1978f30b4fcbe066850db22a6213c4b3bd779", "patch": "@@ -1896,7 +1896,7 @@\n  \"\"\n  \"\n {\n-  emit_insn (gen_jump_real (operand0));\n+  emit_jump_insn (gen_jump_real (operand0));\n   DONE;\n }\n \")\n@@ -3462,26 +3462,28 @@\n \n   /* for small constant growth, we unroll the code */\n   if (GET_CODE (operands[1]) == CONST_INT\n-      && INTVAL (operands[1]) < 8*STACK_UNITS_MAXSTEP)\n+      && INTVAL (operands[1]) < 8 * STACK_UNITS_MAXSTEP)\n     {\n       int left = INTVAL(operands[1]);\n \n       /* if it's a long way, get close enough for a last shot */\n       if (left >= STACK_UNITS_MAXSTEP)\n \t{\n \t  rtx tmp = gen_reg_rtx (Pmode);\n-\t  emit_insn (gen_movsi (tmp, GEN_INT(STACK_UNITS_MAXSTEP)));\n+\t  emit_insn (gen_movsi (tmp, GEN_INT (STACK_UNITS_MAXSTEP)));\n \t  do\n \t    {\n-\t    rtx memref = gen_rtx (MEM, SImode, stack_pointer_rtx);\n-\t    MEM_VOLATILE_P (memref) = 1;\n-\t    emit_insn(gen_subsi3 (stack_pointer_rtx, stack_pointer_rtx, tmp));\n-\t    emit_insn(gen_movsi (memref, stack_pointer_rtx));\n-\t    left -= STACK_UNITS_MAXSTEP;\n-\t  } while (left > STACK_UNITS_MAXSTEP);\n+\t      rtx memref = gen_rtx (MEM, SImode, stack_pointer_rtx);\n+\n+              MEM_VOLATILE_P (memref) = 1;\n+\t      emit_insn (gen_subsi3 (stack_pointer_rtx, stack_pointer_rtx, tmp));\n+\t      emit_insn (gen_movsi (memref, stack_pointer_rtx));\n+\t      left -= STACK_UNITS_MAXSTEP;\n+\t    }\n+\t  while (left > STACK_UNITS_MAXSTEP);\n \t}\n       /* performs the final adjustment */\n-      emit_insn(gen_addsi3(stack_pointer_rtx,stack_pointer_rtx,GEN_INT(-left)));\n+      emit_insn (gen_addsi3 (stack_pointer_rtx,stack_pointer_rtx,GEN_INT(-left)));\n ;;      emit_move_insn (operands[0], virtual_stack_dynamic_rtx);\n       DONE;\n     }\n@@ -3494,8 +3496,8 @@\n       rtx memref;\n \n #if 1\n-      emit_insn(gen_movsi(tmp, operands[1]));\n-      emit_insn(gen_movsi(step, GEN_INT(STACK_UNITS_MAXSTEP)));\n+      emit_insn (gen_movsi (tmp, operands[1]));\n+      emit_insn (gen_movsi (step, GEN_INT(STACK_UNITS_MAXSTEP)));\n \n       if (GET_CODE (operands[1]) != CONST_INT)\n \t{\n@@ -3522,14 +3524,14 @@\n \temit_label (out_label);\n \n       /* bump the residual */\n-      emit_insn(gen_subsi3(stack_pointer_rtx, stack_pointer_rtx, tmp));\n+      emit_insn (gen_subsi3 (stack_pointer_rtx, stack_pointer_rtx, tmp));\n ;;      emit_move_insn (operands[0], virtual_stack_dynamic_rtx);\n       DONE;\n #else\n       /* simple one-shot -- ensure register and do a subtract.\n        * this does NOT comply with the ABI. */\n-      emit_insn(gen_movsi(tmp, operands[1]));\n-      emit_insn(gen_subsi3(stack_pointer_rtx, stack_pointer_rtx, tmp));\n+      emit_insn (gen_movsi (tmp, operands[1]));\n+      emit_insn (gen_subsi3 (stack_pointer_rtx, stack_pointer_rtx, tmp));\n ;;      emit_move_insn (operands[0], virtual_stack_dynamic_rtx);\n       DONE;\n #endif"}]}