{"sha": "acfc4f0a8577fa8bc082519fd76a29bf299ba50c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNmYzRmMGE4NTc3ZmE4YmMwODI1MTlmZDc2YTI5YmYyOTliYTUwYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-03-05T17:31:20Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-03-05T17:31:20Z"}, "message": "tree-ssa-threadupdate.c (rediscover_loops_after_threading): Remove.\n\n\t* tree-ssa-threadupdate.c (rediscover_loops_after_threading):\n\tRemove.\n\t* basic-block.h: Remove the extern for\n\trediscover_loops_after_threading.\n\nFrom-SVN: r111734", "tree": {"sha": "4cc6ccda026cab0a381afaf3bb26c16e4881416d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cc6ccda026cab0a381afaf3bb26c16e4881416d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acfc4f0a8577fa8bc082519fd76a29bf299ba50c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acfc4f0a8577fa8bc082519fd76a29bf299ba50c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acfc4f0a8577fa8bc082519fd76a29bf299ba50c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acfc4f0a8577fa8bc082519fd76a29bf299ba50c/comments", "author": null, "committer": null, "parents": [{"sha": "d42ee77ad0a9a063839860c32eda232884def053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d42ee77ad0a9a063839860c32eda232884def053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d42ee77ad0a9a063839860c32eda232884def053"}], "stats": {"total": 38, "additions": 7, "deletions": 31}, "files": [{"sha": "332499b6c0d9aec162b94d9867991b97305bc68c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfc4f0a8577fa8bc082519fd76a29bf299ba50c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfc4f0a8577fa8bc082519fd76a29bf299ba50c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=acfc4f0a8577fa8bc082519fd76a29bf299ba50c", "patch": "@@ -1,3 +1,10 @@\n+2006-03-05  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* tree-ssa-threadupdate.c (rediscover_loops_after_threading):\n+\tRemove.\n+\t* basic-block.h: Remove the extern for\n+\trediscover_loops_after_threading.\n+\n 2006-03-05  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* recog.c (volatile_mem_p, validate_change_maybe_volatile):"}, {"sha": "a07a517d39e00e032101518b5baccea7b4fa9c2f", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfc4f0a8577fa8bc082519fd76a29bf299ba50c/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfc4f0a8577fa8bc082519fd76a29bf299ba50c/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=acfc4f0a8577fa8bc082519fd76a29bf299ba50c", "patch": "@@ -414,10 +414,6 @@ struct control_flow_graph GTY(())\n #define BASIC_BLOCK(N)\t\t(VEC_index (basic_block, basic_block_info, (N)))\n #define SET_BASIC_BLOCK(N,BB)\t(VEC_replace (basic_block, basic_block_info, (N), (BB)))\n \n-/* TRUE if we should re-run loop discovery after threading jumps, FALSE\n-   otherwise.  */\n-extern bool rediscover_loops_after_threading;\n-\n /* For iterating over basic blocks.  */\n #define FOR_BB_BETWEEN(BB, FROM, TO, DIR) \\\n   for (BB = FROM; BB != TO; BB = BB->DIR)"}, {"sha": "444bbb72aeae7daed916ed524ae79e904df14f03", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acfc4f0a8577fa8bc082519fd76a29bf299ba50c/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acfc4f0a8577fa8bc082519fd76a29bf299ba50c/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=acfc4f0a8577fa8bc082519fd76a29bf299ba50c", "patch": "@@ -131,8 +131,6 @@ struct redirection_data\n /* Main data structure to hold information for duplicates of BB.  */\n static htab_t redirection_data;\n \n-bool rediscover_loops_after_threading;\n-\n /* Data structure of information to pass to hash table traversal routines.  */\n struct local_info\n {\n@@ -735,30 +733,6 @@ thread_block (basic_block bb)\n \t  update_bb_profile_for_threading (e->dest, EDGE_FREQUENCY (e),\n \t\t\t\t\t   e->count, e->aux);\n \n-\t  /* If we thread to a loop exit edge, then we will need to \n-\t     rediscover the loop exit edges.  While it may seem that\n-\t     the new edge is a loop exit edge, that is not the case.\n-\t     Consider threading the edge (5,6) to E in the CFG on the\n-\t     left which creates the CFG on the right:\n-\n-\n-                      0<--+            0<---+\n-                     / \\  |           / \\   |\n-                    1   2 |          1   2  |\n-                   / \\  | |         / \\  |  |\n-                  3   4 | |        3   4 6--+\n-                   \\ /  | |         \\ /\n-                    5   | |          5\n-                     \\ /  |          |\n-                      6---+          E\n-                      |\n-                      E\n-\n-\t     After threading, the edge (0, 1)  is the loop exit edge and\n-\t     the nodes 0, 2, 6 are the only nodes in the loop.  */\n-\t  if (e2->flags & EDGE_LOOP_EXIT)\n-\t    rediscover_loops_after_threading = true;\n-\n \t  /* Insert the outgoing edge into the hash table if it is not\n \t     already in the hash table.  */\n \t  lookup_redirection_data (e2, e, INSERT);\n@@ -859,7 +833,6 @@ thread_through_all_blocks (void)\n     return false;\n \n   threaded_blocks = BITMAP_ALLOC (NULL);\n-  rediscover_loops_after_threading = false;\n   memset (&thread_stats, 0, sizeof (thread_stats));\n \n   mark_threaded_blocks (threaded_blocks);"}]}