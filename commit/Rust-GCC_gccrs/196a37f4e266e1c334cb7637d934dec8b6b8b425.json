{"sha": "196a37f4e266e1c334cb7637d934dec8b6b8b425", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk2YTM3ZjRlMjY2ZTFjMzM0Y2I3NjM3ZDkzNGRlYzhiNmI4YjQyNQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2000-12-14T07:42:39Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-12-14T07:42:39Z"}, "message": "gcc.c (cpp_options): Update to use '&'.\n\n       * gcc.c (cpp_options): Update to use '&'.\n       (struct switchstr): Change type of validated to save space.\n       New member 'ordering'.\n       (handle_braces, validate_switches): Update to handle '&'.\n\nFrom-SVN: r38244", "tree": {"sha": "a7adf5ab11cb914e2fdad63d7fde98f42dd5a661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7adf5ab11cb914e2fdad63d7fde98f42dd5a661"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/196a37f4e266e1c334cb7637d934dec8b6b8b425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/196a37f4e266e1c334cb7637d934dec8b6b8b425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/196a37f4e266e1c334cb7637d934dec8b6b8b425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/196a37f4e266e1c334cb7637d934dec8b6b8b425/comments", "author": null, "committer": null, "parents": [{"sha": "d9ab8adb37794252f225f068ebd1b050a351bb46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ab8adb37794252f225f068ebd1b050a351bb46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9ab8adb37794252f225f068ebd1b050a351bb46"}], "stats": {"total": 68, "additions": 50, "deletions": 18}, "files": [{"sha": "42f674380ce5c2d925bd352703d6c049aa79f2e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/196a37f4e266e1c334cb7637d934dec8b6b8b425/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/196a37f4e266e1c334cb7637d934dec8b6b8b425/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=196a37f4e266e1c334cb7637d934dec8b6b8b425", "patch": "@@ -1,3 +1,10 @@\n+2000-12-14  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+       * gcc.c (cpp_options): Update to use '&'.\n+       (struct switchstr): Change type of validated to save space.\n+       New member 'ordering'.\n+       (handle_braces, validate_switches): Update to handle '&'.       \n+\n 2000-12-13  Laurynas Biveinis  <lauras@softhome.net>\n \n         * fixinc/inclhack.def: skip stdio_va_list fix if __DJ_va_list"}, {"sha": "98b144064dafa0c33f3a116ba49a617059927813", "filename": "gcc/gcc.c", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/196a37f4e266e1c334cb7637d934dec8b6b8b425/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/196a37f4e266e1c334cb7637d934dec8b6b8b425/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=196a37f4e266e1c334cb7637d934dec8b6b8b425", "patch": "@@ -387,11 +387,15 @@ or with constant text in a single argument.\n \tIf that switch was not specified, this substitutes nothing.\n \tHere S is a metasyntactic variable.\n  %{S*}  substitutes all the switches specified to CC whose names start\n-\twith -S.  This is used for -o, -D, -I, etc; switches that take\n+\twith -S.  This is used for -o, -I, etc; switches that take\n \targuments.  CC considers `-o foo' as being one switch whose\n \tname starts with `o'.  %{o*} would substitute this text,\n \tincluding the space; thus, two arguments would be generated.\n  %{^S*} likewise, but don't put a blank between a switch and any args.\n+ %{S*&T*} likewise, but preserve order of S and T options (the order\n+ \tof S and T in the spec is not significant).  Can be any number\n+ \tof ampersand-separated variables; for each the wild card is\n+ \toptional.  Useful for CPP as %{D*&U*&A*}.\n  %{S*:X} substitutes X if one or more switches whose names start with -S are\n \tspecified to CC.  Note that the tail part of the -S option\n \t(i.e. the part matched by the `*') will be substituted for each\n@@ -579,7 +583,7 @@ static const char *trad_capable_cpp =\n static const char *cpp_options =\n \"%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n  %{std*} %{nostdinc*}\\\n- %{C} %{v} %{A*} %{I*} %{P} %{$} %I\\\n+ %{C} %{v} %{I*} %{P} %{$} %I\\\n  %{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG}\\\n  %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3}\\\n  %{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n@@ -591,7 +595,7 @@ static const char *cpp_options =\n  %{fshow-column} %{fno-show-column}\\\n  %{fleading-underscore} %{fno-leading-underscore}\\\n  %{ftabstop=*}\\\n- %{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{U*} %{D*} %{i*} %Z %i\\\n+ %{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*&U*&A*} %{i*} %Z %i\\\n  %{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}}\";\n \n /* NB: This is shared amongst all front-ends.  */\n@@ -2655,7 +2659,8 @@ struct switchstr\n   const char *part1;\n   const char **args;\n   int live_cond;\n-  int validated;\n+  unsigned char validated;\n+  unsigned char ordering;\n };\n \n static struct switchstr *switches;\n@@ -4715,6 +4720,7 @@ handle_braces (p)\n   int suffix;\n   int include_blanks = 1;\n   int elide_switch = 0;\n+  int ordered = 0;\n \n   if (*p == '^')\n     {\n@@ -4765,16 +4771,17 @@ handle_braces (p)\n       abort ();\n     }\n \n+ next_ampersand:\n   filter = p;\n-  while (*p != ':' && *p != '}' && *p != '|')\n+  while (*p != ':' && *p != '}' && *p != '|' && *p != '&')\n     p++;\n \n-  if (*p == '|' && pipe_p)\n+  if (*p == '|' && (pipe_p || ordered))\n     abort ();\n \n   if (!body)\n     {\n-      if (*p != '}')\n+      if (*p != '}' && *p != '&')\n \t{\n \t  register int count = 1;\n \t  register const char *q = p;\n@@ -4812,22 +4819,22 @@ handle_braces (p)\n \t  && do_spec_1 (save_string (body, endbody-body-1), 0, NULL_PTR) < 0)\n \treturn 0;\n     }\n-  else if (p[-1] == '*' && p[0] == '}')\n+  else if (p[-1] == '*' && (p[0] == '}' || p[0] == '&'))\n     {\n       /* Substitute all matching switches as separate args.  */\n       register int i;\n-      --p;\n+\n       for (i = 0; i < n_switches; i++)\n-\tif (!strncmp (switches[i].part1, filter, p - filter)\n-\t    && check_live_switch (i, p - filter))\n+\tif (!strncmp (switches[i].part1, filter, p - 1 - filter)\n+\t    && check_live_switch (i, p - 1 - filter))\n \t  {\n \t    if (elide_switch)\n \t      {\n \t\tswitches[i].live_cond = SWITCH_IGNORE;\n \t\tswitches[i].validated = 1;\n \t      }\n \t    else\n-\t      give_switch (i, 0, include_blanks);\n+\t      ordered = 1, switches[i].ordering = 1;\n \t  }\n     }\n   else\n@@ -4918,10 +4925,10 @@ handle_braces (p)\n \t      switches[i].live_cond = SWITCH_IGNORE;\n \t      switches[i].validated = 1;\n \t    }\n+\t  else if (ordered || *p == '&')\n+\t    ordered = 1, switches[i].ordering = 1;\n \t  else if (*p == '}')\n-\t    {\n-\t      give_switch (i, 0, include_blanks);\n-\t    }\n+\t    give_switch (i, 0, include_blanks);\n \t  else\n \t    /* Even if many alternatives are matched, only output once.  */\n \t    true_once = 1;\n@@ -4939,8 +4946,26 @@ handle_braces (p)\n   if (*p++ == '|')\n     goto next_member;\n \n+  if (p[-1] == '&')\n+    {\n+      body = 0;\n+      goto next_ampersand;\n+    }\n+\n+  if (ordered)\n+    {\n+      int i;\n+      /* Doing this set of switches later preserves their command-line\n+\t ordering.  This is needed for e.g. -U, -D and -A.  */\n+      for (i = 0; i < n_switches; i++)\n+\tif (switches[i].ordering == 1)\n+\t  {\n+\t    switches[i].ordering = 0;\n+\t    give_switch (i, 0, include_blanks);\n+\t  }\n+    }\n   /* Process the spec just once, regardless of match count.  */\n-  if (true_once)\n+  else if (true_once)\n     {\n       if (do_spec_1 (save_string (body, endbody - body - 1),\n \t\t     0, NULL_PTR) < 0)\n@@ -5950,7 +5975,7 @@ validate_switches (start)\n     suffix = 1, ++p;\n \n   filter = p;\n-  while (*p != ':' && *p != '}' && *p != '|')\n+  while (*p != ':' && *p != '}' && *p != '|' && *p != '&')\n     p++;\n \n   if (suffix)\n@@ -5973,7 +5998,7 @@ validate_switches (start)\n \t}\n     }\n \n-  if (*p++ == '|')\n+  if (*p++ == '|' || p[-1] == '&')\n     goto next_member;\n }\n \f"}]}