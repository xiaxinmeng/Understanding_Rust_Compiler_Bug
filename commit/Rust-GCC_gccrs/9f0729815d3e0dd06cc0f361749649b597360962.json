{"sha": "9f0729815d3e0dd06cc0f361749649b597360962", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYwNzI5ODE1ZDNlMGRkMDZjYzBmMzYxNzQ5NjQ5YjU5NzM2MDk2Mg==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1993-03-26T11:26:22Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1993-03-26T11:26:22Z"}, "message": "> (untyped_call, blockage): New patterns.\n\nFrom-SVN: r3883", "tree": {"sha": "add67cca4af8abf30808d04d1025405503febb68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/add67cca4af8abf30808d04d1025405503febb68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f0729815d3e0dd06cc0f361749649b597360962", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0729815d3e0dd06cc0f361749649b597360962", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f0729815d3e0dd06cc0f361749649b597360962", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0729815d3e0dd06cc0f361749649b597360962/comments", "author": null, "committer": null, "parents": [{"sha": "8abded10788a3d5d66c8f09c94358ab1c5d4b159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8abded10788a3d5d66c8f09c94358ab1c5d4b159", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8abded10788a3d5d66c8f09c94358ab1c5d4b159"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "8601d8c662fcf5b86699bc6e789e658f75c16e4b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0729815d3e0dd06cc0f361749649b597360962/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0729815d3e0dd06cc0f361749649b597360962/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=9f0729815d3e0dd06cc0f361749649b597360962", "patch": "@@ -1158,6 +1158,43 @@\n   return (arm_output_asm_insn (\\\"bl\\\\t%a1\\\", operands));\n \")\n \n+;; Call subroutine returning any type.\n+\n+(define_expand \"untyped_call\"\n+  [(parallel [(call (match_operand 0 \"\" \"\")\n+\t\t    (const_int 0))\n+\t      (match_operand 1 \"\" \"\")\n+\t      (match_operand 2 \"\" \"\")])]\n+  \"\"\n+  \"\n+{\n+  int i;\n+\n+  emit_call_insn (gen_call (operands[0], const0_rtx, NULL, const0_rtx));\n+\n+  for (i = 0; i < XVECLEN (operands[2], 0); i++)\n+    {\n+      rtx set = XVECEXP (operands[2], 0, i);\n+      emit_move_insn (SET_DEST (set), SET_SRC (set));\n+    }\n+\n+  /* The optimizer does not know that the call sets the function value\n+     registers we stored in the result block.  We avoid problems by\n+     claiming that all hard registers are used and clobbered at this\n+     point.  */\n+  emit_insn (gen_blockage ());\n+\n+  DONE;\n+}\")\n+\n+;; UNSPEC_VOLATILE is considered to use and clobber all hard registers and\n+;; all of memory.  This blocks insns from being moved across this point.\n+\n+(define_insn \"blockage\"\n+  [(unspec_volatile [(const_int 0)] 0)]\n+  \"\"\n+  \"\")\n+\n (define_insn \"tablejump\"\n   [(set (pc)\n \t(match_operand:SI 0 \"register_operand\" \"r\"))"}]}