{"sha": "8cbc2ea849c913adff595a88334d6fc75172221c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNiYzJlYTg0OWM5MTNhZGZmNTk1YTg4MzM0ZDZmYzc1MTcyMjIxYw==", "commit": {"author": {"name": "Greta Yorsh", "email": "greta.yorsh@arm.com", "date": "2013-01-29T18:39:43Z"}, "committer": {"name": "Greta Yorsh", "email": "gretay@gcc.gnu.org", "date": "2013-01-29T18:39:43Z"}, "message": "arm-protos.h (arm_mac_accumulator_is_result): New declaration.\n\n2013-01-29  Greta Yorsh  <Greta.Yorsh@arm.com>\n\n        * config/arm/arm-protos.h (arm_mac_accumulator_is_result): New\n        declaration.\n        * config/arm/arm.c (arm_mac_accumulator_is_result): New function.\n        * config/arm/cortex-a7.md: New bypasses using\n        arm_mac_accumulator_is_result.\n\nFrom-SVN: r195553", "tree": {"sha": "25ac4c0c62938b185230ab636503df43f102733b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25ac4c0c62938b185230ab636503df43f102733b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cbc2ea849c913adff595a88334d6fc75172221c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cbc2ea849c913adff595a88334d6fc75172221c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cbc2ea849c913adff595a88334d6fc75172221c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cbc2ea849c913adff595a88334d6fc75172221c/comments", "author": null, "committer": null, "parents": [{"sha": "697a3325ef0aab758d95216c5aea3e6b1bf8d6fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697a3325ef0aab758d95216c5aea3e6b1bf8d6fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697a3325ef0aab758d95216c5aea3e6b1bf8d6fe"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "a40f35c9298eb762bae84a75fa8e0e4ea76b9f43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cbc2ea849c913adff595a88334d6fc75172221c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cbc2ea849c913adff595a88334d6fc75172221c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8cbc2ea849c913adff595a88334d6fc75172221c", "patch": "@@ -1,3 +1,11 @@\n+2013-01-29  Greta Yorsh  <Greta.Yorsh@arm.com>\n+\n+        * config/arm/arm-protos.h (arm_mac_accumulator_is_result): New\n+        declaration.\n+        * config/arm/arm.c (arm_mac_accumulator_is_result): New function.\n+        * config/arm/cortex-a7.md: New bypasses using\n+        arm_mac_accumulator_is_result.\n+\n 2013-01-29  Greta Yorsh  <Greta.Yorsh@arm.com>\n \n         * config/arm/cortex-a7.md (cortex_a7_neon_mul):  New reservation."}, {"sha": "e9f74dc17a2c64b4cc457efba26bc6cba867ca4f", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cbc2ea849c913adff595a88334d6fc75172221c/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cbc2ea849c913adff595a88334d6fc75172221c/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=8cbc2ea849c913adff595a88334d6fc75172221c", "patch": "@@ -101,6 +101,7 @@ extern int arm_early_load_addr_dep (rtx, rtx);\n extern int arm_no_early_alu_shift_dep (rtx, rtx);\n extern int arm_no_early_alu_shift_value_dep (rtx, rtx);\n extern int arm_no_early_mul_dep (rtx, rtx);\n+extern int arm_mac_accumulator_is_result (rtx, rtx);\n extern int arm_mac_accumulator_is_mul_result (rtx, rtx);\n \n extern int tls_mentioned_p (rtx);"}, {"sha": "0aa24b1796b7df6bfd0f1ddcec521ad532905344", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cbc2ea849c913adff595a88334d6fc75172221c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cbc2ea849c913adff595a88334d6fc75172221c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8cbc2ea849c913adff595a88334d6fc75172221c", "patch": "@@ -24608,6 +24608,62 @@ arm_cxx_guard_type (void)\n   return TARGET_AAPCS_BASED ? integer_type_node : long_long_integer_type_node;\n }\n \n+/* Return non-zero iff the consumer (a multiply-accumulate or a\n+   multiple-subtract instruction) has an accumulator dependency on the\n+   result of the producer and no other dependency on that result.  It\n+   does not check if the producer is multiply-accumulate instruction.  */\n+int\n+arm_mac_accumulator_is_result (rtx producer, rtx consumer)\n+{\n+  rtx result;\n+  rtx op0, op1, acc;\n+\n+  producer = PATTERN (producer);\n+  consumer = PATTERN (consumer);\n+\n+  if (GET_CODE (producer) == COND_EXEC)\n+    producer = COND_EXEC_CODE (producer);\n+  if (GET_CODE (consumer) == COND_EXEC)\n+    consumer = COND_EXEC_CODE (consumer);\n+\n+  if (GET_CODE (producer) != SET)\n+    return 0;\n+\n+  result = XEXP (producer, 0);\n+\n+  if (GET_CODE (consumer) != SET)\n+    return 0;\n+\n+  /* Check that the consumer is of the form\n+     (set (...) (plus (mult ...) (...)))\n+     or\n+     (set (...) (minus (...) (mult ...))).  */\n+  if (GET_CODE (XEXP (consumer, 1)) == PLUS)\n+    {\n+      if (GET_CODE (XEXP (XEXP (consumer, 1), 0)) != MULT)\n+        return 0;\n+\n+      op0 = XEXP (XEXP (XEXP (consumer, 1), 0), 0);\n+      op1 = XEXP (XEXP (XEXP (consumer, 1), 0), 1);\n+      acc = XEXP (XEXP (consumer, 1), 1);\n+    }\n+  else if (GET_CODE (XEXP (consumer, 1)) == MINUS)\n+    {\n+      if (GET_CODE (XEXP (XEXP (consumer, 1), 1)) != MULT)\n+        return 0;\n+\n+      op0 = XEXP (XEXP (XEXP (consumer, 1), 1), 0);\n+      op1 = XEXP (XEXP (XEXP (consumer, 1), 1), 1);\n+      acc = XEXP (XEXP (consumer, 1), 0);\n+    }\n+  else\n+    return 0;\n+\n+  return (reg_overlap_mentioned_p (result, acc)\n+          && !reg_overlap_mentioned_p (result, op0)\n+          && !reg_overlap_mentioned_p (result, op1));\n+}\n+\n /* Return non-zero if the consumer (a multiply-accumulate instruction)\n    has an accumulator dependency on the result of the producer (a\n    multiplication instruction) and no other dependency on that result.  */"}, {"sha": "a8d4432e508b64f31a1c63e06035087bdd7dfb8a", "filename": "gcc/config/arm/cortex-a7.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cbc2ea849c913adff595a88334d6fc75172221c/gcc%2Fconfig%2Farm%2Fcortex-a7.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cbc2ea849c913adff595a88334d6fc75172221c/gcc%2Fconfig%2Farm%2Fcortex-a7.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a7.md?ref=8cbc2ea849c913adff595a88334d6fc75172221c", "patch": "@@ -137,6 +137,12 @@\n             (eq_attr \"neon_type\" \"none\")))\n   \"cortex_a7_both\")\n \n+;; Forward the result of a multiply operation to the accumulator \n+;; of the following multiply and accumulate instruction.\n+(define_bypass 1 \"cortex_a7_mul\"\n+                 \"cortex_a7_mul\"\n+                 \"arm_mac_accumulator_is_result\")\n+\n ;; The latency depends on the operands, so we use an estimate here.\n (define_insn_reservation \"cortex_a7_idiv\" 5\n   (and (eq_attr \"tune\" \"cortexa7\")\n@@ -264,6 +270,10 @@\n                  neon_fp_vmla_qqq_scalar\"))\n   \"cortex_a7_both+cortex_a7_fpmul_pipe\")\n \n+(define_bypass 4 \"cortex_a7_fpmacs,cortex_a7_neon_mla\"\n+                 \"cortex_a7_fpmacs,cortex_a7_neon_mla\"\n+                 \"arm_mac_accumulator_is_result\")\n+\n ;; Non-multiply instructions can issue between two cycles of a\n ;; double-precision multiply. \n \n@@ -285,6 +295,10 @@\n             (eq_attr \"neon_type\" \"none\")))\n   \"cortex_a7_ex1+cortex_a7_fpmul_pipe, cortex_a7_fpmul_pipe*4\")\n \n+(define_bypass 7 \"cortex_a7_fpmacd\"\n+                 \"cortex_a7_fpmacd,cortex_a7_fpfmad\"\n+                 \"arm_mac_accumulator_is_result\")\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;; Floating-point divide/square root instructions.\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}]}