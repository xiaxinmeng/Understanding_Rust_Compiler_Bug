{"sha": "0d24670707462cb06ac0037607ef9df9e733dc44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQyNDY3MDcwNzQ2MmNiMDZhYzAwMzc2MDdlZjlkZjllNzMzZGM0NA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-04-10T12:47:58Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-04-10T12:47:58Z"}, "message": "2009-04-10  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR  c++/20118\ncp/\n\t* parser.c (cp_parser_check_template_parameters): Take a\n\tcp_declarator parameter.\n\t(cp_parser_elaborated_type_specifier): Update to\n\tcp_parser_check_template_parameters.\n\t(cp_parser_class_head): Likewise.\n\t(cp_parser_check_declarator_template_parameters): Likewise.\n\t(cp_parser_check_template_parameters): Handle first the non-error\n\tconditions. Give more accurate diagnostics if a declarator is\n\tgiven. \ntestsuite/\n\t* g++.dg/parse/pr20118.C: New.\n\t* g++.dg/template/spec16.C: Update.\n\nFrom-SVN: r145892", "tree": {"sha": "106b3d4ce9f0c88a2a149ad06bdea8346dc81d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/106b3d4ce9f0c88a2a149ad06bdea8346dc81d58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d24670707462cb06ac0037607ef9df9e733dc44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d24670707462cb06ac0037607ef9df9e733dc44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d24670707462cb06ac0037607ef9df9e733dc44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d24670707462cb06ac0037607ef9df9e733dc44/comments", "author": null, "committer": null, "parents": [{"sha": "62298c61227b5a420f278002fe04c6897529ad59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62298c61227b5a420f278002fe04c6897529ad59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62298c61227b5a420f278002fe04c6897529ad59"}], "stats": {"total": 76, "additions": 57, "deletions": 19}, "files": [{"sha": "847b4850462567a619976891730b5f4c437e078f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d24670707462cb06ac0037607ef9df9e733dc44/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d24670707462cb06ac0037607ef9df9e733dc44/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0d24670707462cb06ac0037607ef9df9e733dc44", "patch": "@@ -1,3 +1,16 @@\n+2009-04-10  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR  c++/20118\n+\t* parser.c (cp_parser_check_template_parameters): Take a\n+\tcp_declarator parameter.\n+\t(cp_parser_elaborated_type_specifier): Update to\n+\tcp_parser_check_template_parameters.\n+\t(cp_parser_class_head): Likewise.\n+\t(cp_parser_check_declarator_template_parameters): Likewise.\n+\t(cp_parser_check_template_parameters): Handle first the non-error\n+\tconditions. Give more accurate diagnostics if a declarator is\n+\tgiven. \n+\n 2009-04-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/25185"}, {"sha": "68c0ef4ea87981fa19e231e986ec0fc4d047eb4f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d24670707462cb06ac0037607ef9df9e733dc44/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d24670707462cb06ac0037607ef9df9e733dc44/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=0d24670707462cb06ac0037607ef9df9e733dc44", "patch": "@@ -1913,7 +1913,7 @@ static tree cp_parser_maybe_treat_template_as_class\n static bool cp_parser_check_declarator_template_parameters\n   (cp_parser *, cp_declarator *, location_t);\n static bool cp_parser_check_template_parameters\n-  (cp_parser *, unsigned, location_t);\n+  (cp_parser *, unsigned, location_t, cp_declarator *);\n static tree cp_parser_simple_cast_expression\n   (cp_parser *);\n static tree cp_parser_global_scope_opt\n@@ -11765,7 +11765,8 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \t     there were no qualifying templates.  */\n \t  if (!cp_parser_check_template_parameters (parser,\n \t\t\t\t\t\t    /*num_templates=*/0,\n-\t\t\t\t\t\t    token->location))\n+\t\t\t\t\t\t    token->location,\n+\t\t\t\t\t\t    /*declarator=*/NULL))\n \t    return error_mark_node;\n \t  type = xref_tag (tag_type, identifier, ts, template_p);\n \t}\n@@ -15402,7 +15403,8 @@ cp_parser_class_head (cp_parser* parser,\n   /* Make sure that the right number of template parameters were\n      present.  */\n   if (!cp_parser_check_template_parameters (parser, num_templates,\n-\t\t\t\t\t    type_start_token->location))\n+\t\t\t\t\t    type_start_token->location,\n+\t\t\t\t\t    /*declarator=*/NULL))\n     {\n       /* If something went wrong, there is no point in even trying to\n \t process the class-definition.  */\n@@ -17311,9 +17313,9 @@ cp_parser_check_declarator_template_parameters (cp_parser* parser,\n \t   additional level of template parameters.  */\n \t++num_templates;\n \n-      return cp_parser_check_template_parameters (parser,\n-\t\t\t\t\t\t  num_templates,\n-\t\t\t\t\t\t  declarator_location);\n+      return cp_parser_check_template_parameters \n+\t(parser, num_templates, declarator_location, declarator);\n+\n \n     case cdk_function:\n     case cdk_array:\n@@ -17334,30 +17336,38 @@ cp_parser_check_declarator_template_parameters (cp_parser* parser,\n \n /* NUM_TEMPLATES were used in the current declaration.  If that is\n    invalid, return FALSE and issue an error messages.  Otherwise,\n-   return TRUE.  */\n+   return TRUE.  If DECLARATOR is non-NULL, then we are checking a\n+   declarator and we can print more accurate diagnostics.  */\n \n static bool\n cp_parser_check_template_parameters (cp_parser* parser,\n \t\t\t\t     unsigned num_templates,\n-\t\t\t\t     location_t location)\n+\t\t\t\t     location_t location,\n+\t\t\t\t     cp_declarator *declarator)\n {\n+  /* If there are the same number of template classes and parameter\n+     lists, that's OK.  */\n+  if (parser->num_template_parameter_lists == num_templates)\n+    return true;\n+  /* If there are more, but only one more, then we are referring to a\n+     member template.  That's OK too.  */\n+  if (parser->num_template_parameter_lists == num_templates + 1)\n+    return true;\n   /* If there are more template classes than parameter lists, we have\n      something like:\n \n        template <class T> void S<T>::R<T>::f ();  */\n   if (parser->num_template_parameter_lists < num_templates)\n     {\n-      error (\"%Htoo few template-parameter-lists\", &location);\n+      if (declarator)\n+\terror_at (location, \"specializing member %<%T::%E%> \"\n+\t\t  \"requires %<template<>%> syntax\", \n+\t\t  declarator->u.id.qualifying_scope,\n+\t\t  declarator->u.id.unqualified_name);\n+      else \n+\terror_at (location, \"too few template-parameter-lists\");\n       return false;\n     }\n-  /* If there are the same number of template classes and parameter\n-     lists, that's OK.  */\n-  if (parser->num_template_parameter_lists == num_templates)\n-    return true;\n-  /* If there are more, but only one more, then we are referring to a\n-     member template.  That's OK too.  */\n-  if (parser->num_template_parameter_lists == num_templates + 1)\n-      return true;\n   /* Otherwise, there are too many template parameter lists.  We have\n      something like:\n "}, {"sha": "d83fb5e3950adc349dee9e1df8b6ea8f5a79618c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d24670707462cb06ac0037607ef9df9e733dc44/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d24670707462cb06ac0037607ef9df9e733dc44/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d24670707462cb06ac0037607ef9df9e733dc44", "patch": "@@ -1,3 +1,9 @@\n+2009-04-10  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR  c++/20118\n+\t* g++.dg/parse/pr20118.C: New.\n+\t* g++.dg/template/spec16.C: Update.\n+\n 2009-04-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR testsuite/35621\n@@ -678,7 +684,7 @@\n \t* gfortran.dg/typebound_proc_11.f03: New test.\n \t* gfortran.dg/abstract_type_5.f03: New test.\n \n-2008-03-29  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n+2008-03-29  Tobias Schl\u00fcter  <tobi@gcc.gnu.org>\n \n \tPR fortran/38507\n \t* gfortran.dg/do_4.f: New."}, {"sha": "94e000a6f6886f2e23078d923a31f06107e6f8fa", "filename": "gcc/testsuite/g++.dg/parse/pr20118.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d24670707462cb06ac0037607ef9df9e733dc44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr20118.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d24670707462cb06ac0037607ef9df9e733dc44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr20118.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr20118.C?ref=0d24670707462cb06ac0037607ef9df9e733dc44", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile }\n+// { dg-options \"-fshow-column\" } \n+template<typename t>struct foo {\n+  static const int i; };\n+\n+const int foo<bool>::i = 5; // { dg-error \"11:specializing member .foo<bool>::i. requires .template<>. syntax\" }\n+\n+int main() { return 0; }\n+"}, {"sha": "c872052a8649302c45f3a02d625ded0d938e7672", "filename": "gcc/testsuite/g++.dg/template/spec16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d24670707462cb06ac0037607ef9df9e733dc44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d24670707462cb06ac0037607ef9df9e733dc44/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec16.C?ref=0d24670707462cb06ac0037607ef9df9e733dc44", "patch": "@@ -7,5 +7,5 @@ struct A {\n   template<int M> void B () ; \n }; \n \n-void A<0>::B<0>() {    // { dg-error \"parameter-lists\" }\n+void A<0>::B<0>() {    // { dg-error \"specializing member 'A<0>::B<0>' requires 'template<>' syntax\" }\n } "}]}