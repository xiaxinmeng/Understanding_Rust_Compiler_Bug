{"sha": "b25021611e702a13cc4db4c213fba0072043cdc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI1MDIxNjExZTcwMmExM2NjNGRiNGMyMTNmYmEwMDcyMDQzY2RjMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T12:40:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-11T12:40:12Z"}, "message": "[multiple changes]\n\n2013-04-11  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb, sem_util.adb, sem_res.adb, exp_ch4.adb: Minor\n\treformatting.\n\n2013-04-11  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_util.ads (Fully_Qualified_Name_String): Document that the\n\tconstructed literal is the entity name in all upper case.\n\nFrom-SVN: r197777", "tree": {"sha": "dd4bf6210302e059cffcb44a7c0edabc1f8002d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd4bf6210302e059cffcb44a7c0edabc1f8002d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b25021611e702a13cc4db4c213fba0072043cdc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25021611e702a13cc4db4c213fba0072043cdc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b25021611e702a13cc4db4c213fba0072043cdc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25021611e702a13cc4db4c213fba0072043cdc3/comments", "author": null, "committer": null, "parents": [{"sha": "83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83851b239b0dd1af4fe3ba4c8d0ce7b74c82803d"}], "stats": {"total": 99, "additions": 59, "deletions": 40}, "files": [{"sha": "7962be4b724dcf2cf8c46bef826a69a63e33e528", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25021611e702a13cc4db4c213fba0072043cdc3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25021611e702a13cc4db4c213fba0072043cdc3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b25021611e702a13cc4db4c213fba0072043cdc3", "patch": "@@ -1,3 +1,13 @@\n+2013-04-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb, sem_util.adb, sem_res.adb, exp_ch4.adb: Minor\n+\treformatting.\n+\n+2013-04-11  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_util.ads (Fully_Qualified_Name_String): Document that the\n+\tconstructed literal is the entity name in all upper case.\n+\n 2013-04-11  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_util.adb (Set_Entity_With_Style_Check): Fix logic of"}, {"sha": "be5d17f296023ffffa65cd92c5952caee604f899", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25021611e702a13cc4db4c213fba0072043cdc3/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25021611e702a13cc4db4c213fba0072043cdc3/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=b25021611e702a13cc4db4c213fba0072043cdc3", "patch": "@@ -10054,9 +10054,10 @@ package body Exp_Ch4 is\n \n    begin\n       --  First remove check marks put by the semantic analysis on the type\n-      --  conversion between array types. The front end expands these checks\n-      --  explicitly, so they should not be set in the tree passed to the back\n-      --  end.\n+      --  conversion between array types. We need these checks, and they will\n+      --  be generated by this expansion routine, but we do not depend on these\n+      --  flags being set, and since we do intend to expand the checks in the\n+      --  front end, we don't want them on the tree passed to the back end.\n \n       if Is_Array_Type (Target_Type) then\n          if Is_Constrained (Target_Type) then"}, {"sha": "67982c2c96884aff283a1dc442f8459df79328ff", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25021611e702a13cc4db4c213fba0072043cdc3/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25021611e702a13cc4db4c213fba0072043cdc3/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=b25021611e702a13cc4db4c213fba0072043cdc3", "patch": "@@ -440,7 +440,8 @@ package Exp_Util is\n \n    function Fully_Qualified_Name_String (E : Entity_Id) return String_Id;\n    --  Generates the string literal corresponding to the fully qualified name\n-   --  of entity E with an ASCII.NUL appended at the end of the name.\n+   --  of entity E, in all upper case, with an ASCII.NUL appended at the end\n+   --  of the name.\n \n    procedure Generate_Poll_Call (N : Node_Id);\n    --  If polling is active, then a call to the Poll routine is built,"}, {"sha": "94ea59efa0a80c653e8fb334ab4bf12345420139", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 37, "deletions": 31, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25021611e702a13cc4db4c213fba0072043cdc3/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25021611e702a13cc4db4c213fba0072043cdc3/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=b25021611e702a13cc4db4c213fba0072043cdc3", "patch": "@@ -6722,20 +6722,21 @@ package body Sem_Prag is\n \n          --  pragma Abstract_State (ABSTRACT_STATE_LIST)\n \n-         --  ABSTRACT_STATE_LIST        ::=\n+         --  ABSTRACT_STATE_LIST ::=\n          --    null\n-         --    | STATE_NAME_WITH_PROPERTIES {, STATE_NAME_WITH_PROPERTIES}\n+         --  | STATE_NAME_WITH_PROPERTIES {, STATE_NAME_WITH_PROPERTIES}\n \n          --  STATE_NAME_WITH_PROPERTIES ::=\n          --    STATE_NAME\n-         --    | (STATE_NAME with PROPERTY_LIST)\n+         --  | (STATE_NAME with PROPERTY_LIST)\n \n-         --  PROPERTY_LIST              ::= PROPERTY {, PROPERTY}\n-         --  PROPERTY                   ::= SIMPLE_PROPERTY\n-         --                               | NAME_VALUE_PROPERTY\n-         --  SIMPLE_PROPERTY            ::= IDENTIFIER\n-         --  NAME_VALUE_PROPERTY        ::= IDENTIFIER => EXPRESSION\n-         --  STATE_NAME                 ::= DEFINING_IDENTIFIER\n+         --  PROPERTY_LIST ::= PROPERTY {, PROPERTY}\n+         --  PROPERTY      ::= SIMPLE_PROPERTY | NAME_VALUE_PROPERTY\n+\n+         --  SIMPLE_PROPERTY      ::= IDENTIFIER\n+         --  NAME_VALUE_PROPERTY  ::= IDENTIFIER => EXPRESSION\n+\n+         --  STATE_NAME ::= DEFINING_IDENTIFIER\n \n          when Pragma_Abstract_State => Abstract_State : declare\n             Pack_Id : Entity_Id;\n@@ -8878,17 +8879,18 @@ package body Sem_Prag is\n \n          --  pragma Depends (DEPENDENCY_RELATION);\n \n-         --  DEPENDENCY_RELATION ::= null\n-         --                        | DEPENDENCY_CLAUSE {, DEPENDENCY_CLAUSE}\n-         --  DEPENDENCY_CLAUSE   ::= OUTPUT_LIST =>[+] INPUT_LIST\n-         --  OUTPUT_LIST         ::= null\n-         --                        | OUTPUT\n-         --                        | (OUTPUT {, OUTPUT})\n-         --  INPUT_LIST          ::= null\n-         --                        | INPUT\n-         --                        | (INPUT {, INPUT})\n-         --  OUTPUT              ::= NAME | FUNCTION_RESULT\n-         --  INPUT               ::= NAME\n+         --  DEPENDENCY_RELATION ::=\n+         --    null\n+         --  | DEPENDENCY_CLAUSE {, DEPENDENCY_CLAUSE}\n+\n+         --  DEPENDENCY_CLAUSE ::= OUTPUT_LIST =>[+] INPUT_LIST\n+\n+         --  OUTPUT_LIST ::= null | OUTPUT | (OUTPUT {, OUTPUT})\n+\n+         --  INPUT_LIST ::= null | INPUT | (INPUT {, INPUT})\n+\n+         --  OUTPUT ::= NAME | FUNCTION_RESULT\n+         --  INPUT  ::= NAME\n \n          --  where FUNCTION_RESULT is a function Result attribute_reference\n \n@@ -8918,6 +8920,7 @@ package body Sem_Prag is\n             function Entity_Of (N : Node_Id) return Entity_Id;\n             --  Return the entity of N or Empty. If N is a renaming, find the\n             --  entity of the root renamed object.\n+            --  Surely this should not be buried here??? exp_util???\n \n             procedure Normalize_Clause (Clause : Node_Id);\n             --  Remove a self-dependency \"+\" from the input list of a clause.\n@@ -9204,12 +9207,13 @@ package body Sem_Prag is\n             ---------------\n \n             function Entity_Of (N : Node_Id) return Entity_Id is\n-               Id : Entity_Id := Entity (N);\n+               Id : Entity_Id;\n \n             begin\n                --  Follow a possible chain of renamings to reach the root\n                --  renamed object.\n \n+               Id := Entity (N);\n                while Present (Renamed_Object (Id)) loop\n                   if Is_Entity_Name (Renamed_Object (Id)) then\n                      Id := Entity (Renamed_Object (Id));\n@@ -9279,6 +9283,7 @@ package body Sem_Prag is\n                        (List : List_Id;\n                         Id   : Entity_Id) return Boolean;\n                      --  Determine whether List contains element Id\n+                     --  Surely this should not be buried here??? exp_Util???\n \n                      --------------\n                      -- Contains --\n@@ -10764,14 +10769,16 @@ package body Sem_Prag is\n \n          --  pragma Global (GLOBAL_SPECIFICATION)\n \n-         --  GLOBAL_SPECIFICATION ::= null\n-         --                         | GLOBAL_LIST\n-         --                         | MODED_GLOBAL_LIST {, MODED_GLOBAL_LIST}\n-         --  MODED_GLOBAL_LIST    ::= MODE_SELECTOR => GLOBAL_LIST\n-         --  MODE_SELECTOR        ::= Input | Output | In_Out | Contract_In\n-         --  GLOBAL_LIST          ::= GLOBAL_ITEM\n-         --                         | (GLOBAL_ITEM {, GLOBAL_ITEM})\n-         --  GLOBAL_ITEM          ::= NAME\n+         --  GLOBAL_SPECIFICATION ::=\n+         --    null\n+         --  | GLOBAL_LIST\n+         --  | MODED_GLOBAL_LIST {, MODED_GLOBAL_LIST}\n+\n+         --  MODED_GLOBAL_LIST ::= MODE_SELECTOR => GLOBAL_LIST\n+\n+         --  MODE_SELECTOR ::= Input | Output | In_Out | Contract_In\n+         --  GLOBAL_LIST   ::= GLOBAL_ITEM | (GLOBAL_ITEM {, GLOBAL_ITEM})\n+         --  GLOBAL_ITEM   ::= NAME\n \n          when Pragma_Global => Global : declare\n             Subp_Id : Entity_Id;\n@@ -10780,12 +10787,11 @@ package body Sem_Prag is\n             --  A list containing the entities of all the items processed so\n             --  far. It plays a role in detecting distinct entities.\n \n-            --  Flags used to verify the consistency of modes\n-\n             Contract_Seen : Boolean := False;\n             In_Out_Seen   : Boolean := False;\n             Input_Seen    : Boolean := False;\n             Output_Seen   : Boolean := False;\n+            --  Flags used to verify the consistency of modes\n \n             procedure Analyze_Global_List\n               (List        : Node_Id;"}, {"sha": "c93b7528b156149b5b5d457c4be349bfa0f4ac21", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25021611e702a13cc4db4c213fba0072043cdc3/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25021611e702a13cc4db4c213fba0072043cdc3/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=b25021611e702a13cc4db4c213fba0072043cdc3", "patch": "@@ -10920,9 +10920,9 @@ package body Sem_Res is\n          else\n             return Conversion_Check\n                     (Is_Numeric_Type (Opnd_Type)\n-                       or else\n-                         (Present (Inc_Ancestor)\n-                           and then Is_Numeric_Type (Inc_Ancestor)),\n+                      or else\n+                        (Present (Inc_Ancestor)\n+                          and then Is_Numeric_Type (Inc_Ancestor)),\n                      \"illegal operand for numeric conversion\");\n          end if;\n \n@@ -10936,6 +10936,7 @@ package body Sem_Res is\n             Conversion_Error_N\n               (\"illegal operand for array conversion\", Operand);\n             return False;\n+\n          else\n             return Valid_Array_Conversion;\n          end if;"}, {"sha": "1be6c84da4467a1ee1f9022b9d171339808b6ce6", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b25021611e702a13cc4db4c213fba0072043cdc3/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b25021611e702a13cc4db4c213fba0072043cdc3/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=b25021611e702a13cc4db4c213fba0072043cdc3", "patch": "@@ -13421,8 +13421,8 @@ package body Sem_Util is\n          if (Is_Implementation_Defined (Val)\n                or else\n              Is_Implementation_Defined (Scope (Val)))\n-              and then not (Ekind_In (Val, E_Package, E_Generic_Package)\n-                              and then Is_Library_Level_Entity (Val))\n+           and then not (Ekind_In (Val, E_Package, E_Generic_Package)\n+                          and then Is_Library_Level_Entity (Val))\n          then\n             Check_Restriction (No_Implementation_Identifiers, N);\n          end if;"}]}