{"sha": "75933b07b7a2b35b731e4f66e69eb800a824595e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU5MzNiMDdiN2EyYjM1YjczMWU0ZjY2ZTY5ZWI4MDBhODI0NTk1ZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-05-13T18:16:37Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-05-13T18:16:37Z"}, "message": "re PR fortran/48972 (OPEN with Unicode file name)\n\n2011-05-12  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/48972\n        * io.c (resolve_tag_format, resolve_tag): Make sure\n        that the string is of default kind.\n        (gfc_resolve_inquire): Also resolve decimal tag.\n\n2011-05-12  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/48972\n        * gfortran.dg/io_constraints_8.f90: New.\n        * gfortran.dg/io_constraints_9.f90: New.\n\nFrom-SVN: r173736", "tree": {"sha": "2e15441bbc737144da8857227539ad282963537b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e15441bbc737144da8857227539ad282963537b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75933b07b7a2b35b731e4f66e69eb800a824595e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75933b07b7a2b35b731e4f66e69eb800a824595e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75933b07b7a2b35b731e4f66e69eb800a824595e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75933b07b7a2b35b731e4f66e69eb800a824595e/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f47a24e79fbd0b73f65444c8c39d783e36f3a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f47a24e79fbd0b73f65444c8c39d783e36f3a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f47a24e79fbd0b73f65444c8c39d783e36f3a28"}], "stats": {"total": 114, "additions": 111, "deletions": 3}, "files": [{"sha": "73a39d910355b4f77948a1ce7cd1340c94ccf2e4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75933b07b7a2b35b731e4f66e69eb800a824595e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75933b07b7a2b35b731e4f66e69eb800a824595e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=75933b07b7a2b35b731e4f66e69eb800a824595e", "patch": "@@ -1,3 +1,10 @@\n+2011-05-13  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48972\n+\t* io.c (resolve_tag_format, resolve_tag): Make sure\n+\tthat the string is of default kind.\n+\t(gfc_resolve_inquire): Also resolve decimal tag.\n+\n 2011-05-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48972"}, {"sha": "c2d46afdd66298b8f05ff805ed9e64da439af8ef", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75933b07b7a2b35b731e4f66e69eb800a824595e/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75933b07b7a2b35b731e4f66e69eb800a824595e/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=75933b07b7a2b35b731e4f66e69eb800a824595e", "patch": "@@ -1394,10 +1394,12 @@ resolve_tag_format (const gfc_expr *e)\n \t  || e->symtree->n.sym->as == NULL\n \t  || e->symtree->n.sym->as->rank == 0))\n     {\n-      if (e->ts.type != BT_CHARACTER && e->ts.type != BT_INTEGER)\n+      if ((e->ts.type != BT_CHARACTER\n+\t   || e->ts.kind != gfc_default_character_kind)\n+\t  && e->ts.type != BT_INTEGER)\n \t{\n-\t  gfc_error (\"FORMAT tag at %L must be of type CHARACTER or INTEGER\",\n-\t\t     &e->where);\n+\t  gfc_error (\"FORMAT tag at %L must be of type default-kind CHARACTER \"\n+\t\t     \"or of INTEGER\", &e->where);\n \t  return FAILURE;\n \t}\n       else if (e->ts.type == BT_INTEGER && e->expr_type == EXPR_VARIABLE)\n@@ -1478,6 +1480,13 @@ resolve_tag (const io_tag *tag, gfc_expr *e)\n       return FAILURE;\n     }\n \n+  if (e->ts.type == BT_CHARACTER && e->ts.kind != gfc_default_character_kind)\n+    {\n+      gfc_error (\"%s tag at %L must be a character string of default kind\",\n+\t\t tag->name, &e->where);\n+      return FAILURE;\n+    }\n+\n   if (e->rank != 0)\n     {\n       gfc_error (\"%s tag at %L must be scalar\", tag->name, &e->where);\n@@ -4059,6 +4068,7 @@ gfc_resolve_inquire (gfc_inquire *inquire)\n   INQUIRE_RESOLVE_TAG (&tag_s_round, inquire->round);\n   INQUIRE_RESOLVE_TAG (&tag_pending, inquire->pending);\n   INQUIRE_RESOLVE_TAG (&tag_size, inquire->size);\n+  INQUIRE_RESOLVE_TAG (&tag_s_decimal, inquire->decimal);\n #undef INQUIRE_RESOLVE_TAG\n \n   if (gfc_reference_st_label (inquire->err, ST_LABEL_TARGET) == FAILURE)"}, {"sha": "8ef95d148e0f8b31f2e12038d358eea9ea4e95ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75933b07b7a2b35b731e4f66e69eb800a824595e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75933b07b7a2b35b731e4f66e69eb800a824595e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75933b07b7a2b35b731e4f66e69eb800a824595e", "patch": "@@ -1,3 +1,9 @@\n+2011-05-13  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/48972\n+\t* gfortran.dg/io_constraints_8.f90: New.\n+\t* gfortran.dg/io_constraints_9.f90: New.\n+\n 2011-05-13  Martin Thuresson  <martint@google.com>\n \n \tPR gcov-profile/47793"}, {"sha": "81cece430ed594601e1521150cbe6d91792db18e", "filename": "gcc/testsuite/gfortran.dg/io_constraints_8.f90", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75933b07b7a2b35b731e4f66e69eb800a824595e/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75933b07b7a2b35b731e4f66e69eb800a824595e/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_8.f90?ref=75933b07b7a2b35b731e4f66e69eb800a824595e", "patch": "@@ -0,0 +1,72 @@\n+! { dg-do compile }\n+! { dg-options \"-fmax-errors=100 -Wall\" }\n+!\n+! PR fortran/48972\n+!\n+!\n+! All string arguments to I/O statements shall\n+! be of default-character type. (Except for the\n+! internal unit.)\n+!\n+\n+character(len=30, kind=4) :: str1\n+integer :: i\n+\n+OPEN(99, access=4_'direct')     ! { dg-error \"must be a character string of default kind\" }\n+OPEN(99, action=4_'read')       ! { dg-error \"must be a character string of default kind\" }\n+OPEN(99, asynchronous=4_'no')   ! { dg-error \"must be a character string of default kind\" })\n+OPEN(99, blank=4_'null')        ! { dg-error \"must be a character string of default kind\" }\n+OPEN(99, decimal=4_'comma')     ! { dg-error \"must be a character string of default kind\" }\n+OPEN(99, delim=4_'quote')       ! { dg-error \"must be a character string of default kind\" }\n+OPEN(99, encoding=4_'default')  ! { dg-error \"must be a character string of default kind\" }\n+OPEN(99, file=4_'Test.dat')     ! { dg-error \"must be a character string of default kind\" }\n+OPEN(99, form=4_'formatted')    ! { dg-error \"must be a character string of default kind\" }\n+OPEN(99, pad=4_'yes')           ! { dg-error \"must be a character string of default kind\" }\n+OPEN(99, position=4_'asis')     ! { dg-error \"must be a character string of default kind\" }\n+OPEN(99, round=4_'down')        ! { dg-error \"must be a character string of default kind\" }\n+OPEN(99, sign=4_'plus')         ! { dg-error \"must be a character string of default kind\" }\n+OPEN(99, status=4_'old')        ! { dg-error \"must be a character string of default kind\" }\n+OPEN(99, IOSTAT=i, iomsg=str1)  ! { dg-error \"must be a character string of default kind\" }\n+\n+close(99, iostat=i, iomsg=str1) ! { dg-error \"must be a character string of default kind\" }\n+close(99, status=4_'delete')    ! { dg-error \"must be a character string of default kind\" }\n+\n+write(99, '(a)', advance=4_'no')! { dg-error \"must be a character string of default kind\" }\n+read (99, *, blank=4_'null')    ! { dg-error \"must be a character string of default kind\" }\n+write(99, *, decimal=4_'comma') ! { dg-error \"must be a character string of default kind\" }\n+write(99, *, delim=4_'quote')   ! { dg-error \"must be a character string of default kind\" }\n+read (99, *, pad=4_'yes')       ! { dg-error \"must be a character string of default kind\" }\n+write(99, *, round=4_'down')    ! { dg-error \"must be a character string of default kind\" }\n+write(99, *, sign=4_'plus')     ! { dg-error \"must be a character string of default kind\" }\n+\n+wait(99, iostat=i, iomsg=str1)  ! { dg-error \"must be a character string of default kind\" }\n+\n+endfile  (99, iostat=i, iomsg=str1)  ! { dg-error \"must be a character string of default kind\" }\n+backspace(99, iostat=i, iomsg=str1)  ! { dg-error \"must be a character string of default kind\" }\n+rewind   (99, iostat=i, iomsg=str1)  ! { dg-error \"must be a character string of default kind\" }\n+flush    (99, iostat=i, iomsg=str1)  ! { dg-error \"must be a character string of default kind\" }\n+\n+inquire (file=str1)               ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,access=str1)          ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,action=str1)          ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,asynchronous=str1)    ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,blank=str1)           ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,decimal=str1)         ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,delim=str1)           ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,direct=str1)          ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,encoding=str1)        ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,form=str1)            ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,formatted=str1)       ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,iomsg=str1, iostat=i) ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,name=str1)            ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,pad=str1)             ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,position=str1)        ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,read=str1)            ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,readwrite=str1)       ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,round=str1)           ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,sequential=str1)      ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,sign=str1)            ! { dg-error \"must be a character string of default kind\" }\n+!inquire (99,stream=str1)  ! Fails due to PR 48976\n+inquire (99,unformatted=str1)     ! { dg-error \"must be a character string of default kind\" }\n+inquire (99,write=str1)           ! { dg-error \"must be a character string of default kind\" }\n+end"}, {"sha": "9d8df88efc2d9bfa150778fe0f624622e1e67d97", "filename": "gcc/testsuite/gfortran.dg/io_constraints_9.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75933b07b7a2b35b731e4f66e69eb800a824595e/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75933b07b7a2b35b731e4f66e69eb800a824595e/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fio_constraints_9.f90?ref=75933b07b7a2b35b731e4f66e69eb800a824595e", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+!\n+! PR fortran/48972\n+!\n+! All string arguments to I/O statements shall\n+! be of default-character type. (Except for the\n+! internal unit.)\n+!\n+character(len=20, kind=4) :: str1\n+\n+write(99, str1) 'a'  ! { dg-error \"must be of type default-kind CHARACTER\" }\n+read(99, fmt=str1)   ! { dg-error \"must be of type default-kind CHARACTER\" }\n+end"}]}