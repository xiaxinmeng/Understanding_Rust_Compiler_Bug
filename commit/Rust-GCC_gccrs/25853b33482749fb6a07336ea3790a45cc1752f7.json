{"sha": "25853b33482749fb6a07336ea3790a45cc1752f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU4NTNiMzM0ODI3NDlmYjZhMDczMzZlYTM3OTBhNDVjYzE3NTJmNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-06-26T07:19:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-06-26T07:19:37Z"}, "message": "re PR tree-optimization/80928 (SLP vectorization does not handle induction in outer loop vectorization)\n\n2017-06-26  Richard Biener  <rguenther@suse.de>\n\n        PR tree-optimization/80928\n\t* cfghooks.c (duplicate_block): Do not copy BB_DUPLICATED flag.\n\t(copy_bbs): Set BB_DUPLICATED flag early.\n\t(execute_on_growing_pred): Do not execute for BB_DUPLICATED\n\tmarked blocks.\n\t(execute_on_shrinking_pred): Likewise.\n\t* tree-ssa.c (ssa_redirect_edge): Do not look for PHI args in\n\tBB_DUPLICATED blocks.\n\t* tree-ssa-phionlycoprop.c (eliminate_degenerate_phis_1): Properly\n\titerate over all PHIs considering removal of *gsi.\n\nFrom-SVN: r249638", "tree": {"sha": "fb16b8aa818baf168138b04424264d43e2164300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb16b8aa818baf168138b04424264d43e2164300"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25853b33482749fb6a07336ea3790a45cc1752f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25853b33482749fb6a07336ea3790a45cc1752f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25853b33482749fb6a07336ea3790a45cc1752f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25853b33482749fb6a07336ea3790a45cc1752f7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ddc36d5a1def2504956a9b40f31f09c5873e6349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc36d5a1def2504956a9b40f31f09c5873e6349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc36d5a1def2504956a9b40f31f09c5873e6349"}], "stats": {"total": 66, "additions": 45, "deletions": 21}, "files": [{"sha": "eb945484a55dcbaf471d6ab149dd081921e96a62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25853b33482749fb6a07336ea3790a45cc1752f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25853b33482749fb6a07336ea3790a45cc1752f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25853b33482749fb6a07336ea3790a45cc1752f7", "patch": "@@ -1,3 +1,16 @@\n+2017-06-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/80928\n+\t* cfghooks.c (duplicate_block): Do not copy BB_DUPLICATED flag.\n+\t(copy_bbs): Set BB_DUPLICATED flag early.\n+\t(execute_on_growing_pred): Do not execute for BB_DUPLICATED\n+\tmarked blocks.\n+\t(execute_on_shrinking_pred): Likewise.\n+\t* tree-ssa.c (ssa_redirect_edge): Do not look for PHI args in\n+\tBB_DUPLICATED blocks.\n+\t* tree-ssa-phionlycoprop.c (eliminate_degenerate_phis_1): Properly\n+\titerate over all PHIs considering removal of *gsi.\n+\n 2017-06-23  Jim Wilson  <jim.wilson@linaro.org>\n \n \t* doc/invoke.texi (AArch64 Options, -mtune): Re-add falkor and"}, {"sha": "bcda422d89a2120ab129e5d1af94dd8c10f5f143", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25853b33482749fb6a07336ea3790a45cc1752f7/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25853b33482749fb6a07336ea3790a45cc1752f7/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=25853b33482749fb6a07336ea3790a45cc1752f7", "patch": "@@ -1087,7 +1087,7 @@ duplicate_block (basic_block bb, edge e, basic_block after)\n   if (after)\n     move_block_after (new_bb, after);\n \n-  new_bb->flags = bb->flags;\n+  new_bb->flags = (bb->flags & ~BB_DUPLICATED);\n   FOR_EACH_EDGE (s, ei, bb->succs)\n     {\n       /* Since we are creating edges from a new block to successors\n@@ -1207,7 +1207,8 @@ flow_call_edges_add (sbitmap blocks)\n void\n execute_on_growing_pred (edge e)\n {\n-  if (cfg_hooks->execute_on_growing_pred)\n+  if (! (e->dest->flags & BB_DUPLICATED)\n+      && cfg_hooks->execute_on_growing_pred)\n     cfg_hooks->execute_on_growing_pred (e);\n }\n \n@@ -1217,7 +1218,8 @@ execute_on_growing_pred (edge e)\n void\n execute_on_shrinking_pred (edge e)\n {\n-  if (cfg_hooks->execute_on_shrinking_pred)\n+  if (! (e->dest->flags & BB_DUPLICATED)\n+      && cfg_hooks->execute_on_shrinking_pred)\n     cfg_hooks->execute_on_shrinking_pred (e);\n }\n \n@@ -1353,14 +1355,19 @@ copy_bbs (basic_block *bbs, unsigned n, basic_block *new_bbs,\n   basic_block bb, new_bb, dom_bb;\n   edge e;\n \n+  /* Mark the blocks to be copied.  This is used by edge creation hooks\n+     to decide whether to reallocate PHI nodes capacity to avoid reallocating\n+     PHIs in the set of source BBs.  */\n+  for (i = 0; i < n; i++)\n+    bbs[i]->flags |= BB_DUPLICATED;\n+\n   /* Duplicate bbs, update dominators, assign bbs to loops.  */\n   for (i = 0; i < n; i++)\n     {\n       /* Duplicate.  */\n       bb = bbs[i];\n       new_bb = new_bbs[i] = duplicate_block (bb, NULL, after);\n       after = new_bb;\n-      bb->flags |= BB_DUPLICATED;\n       if (bb->loop_father)\n \t{\n \t  /* Possibly set loop header.  */"}, {"sha": "9fa427ff2f71e906df048fa4642da431f408cce2", "filename": "gcc/tree-ssa-phionlycprop.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25853b33482749fb6a07336ea3790a45cc1752f7/gcc%2Ftree-ssa-phionlycprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25853b33482749fb6a07336ea3790a45cc1752f7/gcc%2Ftree-ssa-phionlycprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phionlycprop.c?ref=25853b33482749fb6a07336ea3790a45cc1752f7", "patch": "@@ -420,10 +420,11 @@ eliminate_degenerate_phis_1 (basic_block bb, bitmap interesting_names,\n   basic_block son;\n   bool cfg_altered = false;\n \n-  for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+  for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi);)\n     {\n       gphi *phi = gsi.phi ();\n-\n+      /* We might end up removing PHI so advance the iterator now.  */\n+      gsi_next (&gsi);\n       cfg_altered |= eliminate_const_or_copy (phi, interesting_names,\n \t\t\t\t\t      need_eh_cleanup);\n     }"}, {"sha": "fa8f81e9a1a14fda0d76bd1cc39b81d242e1a311", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25853b33482749fb6a07336ea3790a45cc1752f7/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25853b33482749fb6a07336ea3790a45cc1752f7/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=25853b33482749fb6a07336ea3790a45cc1752f7", "patch": "@@ -142,21 +142,24 @@ ssa_redirect_edge (edge e, basic_block dest)\n \n   redirect_edge_var_map_clear (e);\n \n-  /* Remove the appropriate PHI arguments in E's destination block.  */\n-  for (gsi = gsi_start_phis (e->dest); !gsi_end_p (gsi); gsi_next (&gsi))\n-    {\n-      tree def;\n-      source_location locus ;\n-\n-      phi = gsi.phi ();\n-      def = gimple_phi_arg_def (phi, e->dest_idx);\n-      locus = gimple_phi_arg_location (phi, e->dest_idx);\n-\n-      if (def == NULL_TREE)\n-\tcontinue;\n-\n-      redirect_edge_var_map_add (e, gimple_phi_result (phi), def, locus);\n-    }\n+  /* Remove the appropriate PHI arguments in E's destination block.\n+     If we are redirecting a copied edge the destination has not\n+     got PHI argument space reserved nor an interesting argument.  */\n+  if (! (e->dest->flags & BB_DUPLICATED))\n+    for (gsi = gsi_start_phis (e->dest); !gsi_end_p (gsi); gsi_next (&gsi))\n+      {\n+\ttree def;\n+\tsource_location locus ;\n+\n+\tphi = gsi.phi ();\n+\tdef = gimple_phi_arg_def (phi, e->dest_idx);\n+\tlocus = gimple_phi_arg_location (phi, e->dest_idx);\n+\n+\tif (def == NULL_TREE)\n+\t  continue;\n+\n+\tredirect_edge_var_map_add (e, gimple_phi_result (phi), def, locus);\n+      }\n \n   e = redirect_edge_succ_nodup (e, dest);\n "}]}