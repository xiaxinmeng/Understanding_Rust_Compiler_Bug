{"sha": "287cc750b0887e86cb309d976b17c7ee95f7ad48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg3Y2M3NTBiMDg4N2U4NmNiMzA5ZDk3NmIxN2M3ZWU5NWY3YWQ0OA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-10-19T08:04:39Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-11-17T03:29:46Z"}, "message": "Support variable index vec_set.\n\ngcc/ChangeLog:\n\n\tPR target/97194\n\t* config/i386/i386-expand.c (ix86_expand_vector_set_var): New function.\n\t* config/i386/i386-protos.h (ix86_expand_vector_set_var): New Decl.\n\t* config/i386/predicates.md (vec_setm_operand): New predicate,\n\ttrue for const_int_operand or register_operand under TARGET_AVX2.\n\t* config/i386/sse.md (vec_set<mode>): Support both constant\n\tand variable index vec_set.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx2-vec-set-1.c: New test.\n\t* gcc.target/i386/avx2-vec-set-2.c: New test.\n\t* gcc.target/i386/avx512bw-vec-set-1.c: New test.\n\t* gcc.target/i386/avx512bw-vec-set-2.c: New test.\n\t* gcc.target/i386/avx512f-vec-set-2.c: New test.\n\t* gcc.target/i386/avx512vl-vec-set-2.c: New test.", "tree": {"sha": "2b74f2bd1f6298cde8fb19861b048764c0067bad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b74f2bd1f6298cde8fb19861b048764c0067bad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/287cc750b0887e86cb309d976b17c7ee95f7ad48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/287cc750b0887e86cb309d976b17c7ee95f7ad48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/287cc750b0887e86cb309d976b17c7ee95f7ad48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/287cc750b0887e86cb309d976b17c7ee95f7ad48/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3072125a40ccfc139a92d44fb3911a8a7186b025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3072125a40ccfc139a92d44fb3911a8a7186b025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3072125a40ccfc139a92d44fb3911a8a7186b025"}], "stats": {"total": 382, "additions": 379, "deletions": 3}, "files": [{"sha": "73e3358b290b4de960515f804c3676950ad5e0f7", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=287cc750b0887e86cb309d976b17c7ee95f7ad48", "patch": "@@ -14564,6 +14564,112 @@ ix86_expand_vector_init (bool mmx_ok, rtx target, rtx vals)\n   ix86_expand_vector_init_general (mmx_ok, mode, target, vals);\n }\n \n+/* Implemented as\n+   V setg (V v, int idx, T val)\n+   {\n+     V idxv = (V){idx, idx, idx, idx, idx, idx, idx, idx};\n+     V valv = (V){val, val, val, val, val, val, val, val};\n+     V mask = ((V){0, 1, 2, 3, 4, 5, 6, 7} == idxv);\n+     v = (v & ~mask) | (valv & mask);\n+     return v;\n+   }.  */\n+void\n+ix86_expand_vector_set_var (rtx target, rtx val, rtx idx)\n+{\n+  rtx vec[64];\n+  machine_mode mode = GET_MODE (target);\n+  machine_mode cmp_mode = mode;\n+  int n_elts = GET_MODE_NUNITS (mode);\n+  rtx valv,idxv,constv,idx_tmp;\n+  bool ok = false;\n+\n+  /* 512-bits vector byte/word broadcast and comparison only available\n+     under TARGET_AVX512BW, break 512-bits vector into two 256-bits vector\n+     when without TARGET_AVX512BW.  */\n+  if ((mode == V32HImode || mode == V64QImode) && !TARGET_AVX512BW)\n+    {\n+      gcc_assert (TARGET_AVX512F);\n+      rtx vhi, vlo, idx_hi;\n+      machine_mode half_mode;\n+      rtx (*extract_hi)(rtx, rtx);\n+      rtx (*extract_lo)(rtx, rtx);\n+\n+      if (mode == V32HImode)\n+\t{\n+\t  half_mode = V16HImode;\n+\t  extract_hi = gen_vec_extract_hi_v32hi;\n+\t  extract_lo = gen_vec_extract_lo_v32hi;\n+\t}\n+      else\n+\t{\n+\t  half_mode = V32QImode;\n+\t  extract_hi = gen_vec_extract_hi_v64qi;\n+\t  extract_lo = gen_vec_extract_lo_v64qi;\n+\t}\n+\n+      vhi = gen_reg_rtx (half_mode);\n+      vlo = gen_reg_rtx (half_mode);\n+      idx_hi = gen_reg_rtx (GET_MODE (idx));\n+      emit_insn (extract_hi (vhi, target));\n+      emit_insn (extract_lo (vlo, target));\n+      vec[0] = idx_hi;\n+      vec[1] = idx;\n+      vec[2] = GEN_INT (n_elts/2);\n+      ix86_expand_binary_operator (MINUS, GET_MODE (idx), vec);\n+      ix86_expand_vector_set_var (vhi, val, idx_hi);\n+      ix86_expand_vector_set_var (vlo, val, idx);\n+      emit_insn (gen_rtx_SET (target, gen_rtx_VEC_CONCAT (mode, vlo, vhi)));\n+      return;\n+    }\n+\n+  if (FLOAT_MODE_P (GET_MODE_INNER (mode)))\n+    {\n+      switch (mode)\n+\t{\n+\tcase E_V2DFmode:\n+\t  cmp_mode = V2DImode;\n+\t  break;\n+\tcase E_V4DFmode:\n+\t  cmp_mode = V4DImode;\n+\t  break;\n+\tcase E_V8DFmode:\n+\t  cmp_mode = V8DImode;\n+\t  break;\n+\tcase E_V4SFmode:\n+\t  cmp_mode = V4SImode;\n+\t  break;\n+\tcase E_V8SFmode:\n+\t  cmp_mode = V8SImode;\n+\t  break;\n+\tcase E_V16SFmode:\n+\t  cmp_mode = V16SImode;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n+\n+  for (int i = 0; i != n_elts; i++)\n+    vec[i] = GEN_INT (i);\n+  constv = gen_rtx_CONST_VECTOR (cmp_mode, gen_rtvec_v (n_elts, vec));\n+  valv = gen_reg_rtx (mode);\n+  idxv = gen_reg_rtx (cmp_mode);\n+  idx_tmp = convert_to_mode (GET_MODE_INNER (cmp_mode), idx, 1);\n+\n+  ok = ix86_expand_vector_init_duplicate (false, mode, valv, val);\n+  gcc_assert (ok);\n+  ok = ix86_expand_vector_init_duplicate (false, cmp_mode, idxv, idx_tmp);\n+  gcc_assert (ok);\n+  vec[0] = target;\n+  vec[1] = valv;\n+  vec[2] = target;\n+  vec[3] = gen_rtx_EQ (mode, idxv, constv);\n+  vec[4] = idxv;\n+  vec[5] = constv;\n+  ok = ix86_expand_int_vcond (vec);\n+  gcc_assert (ok);\n+}\n+\n void\n ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n {"}, {"sha": "65347a59b79ff3312675a5018227886011d7710c", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=287cc750b0887e86cb309d976b17c7ee95f7ad48", "patch": "@@ -245,6 +245,7 @@ extern rtx ix86_rewrite_tls_address (rtx);\n \n extern void ix86_expand_vector_init (bool, rtx, rtx);\n extern void ix86_expand_vector_set (bool, rtx, rtx, int);\n+extern void ix86_expand_vector_set_var (rtx, rtx, rtx);\n extern void ix86_expand_vector_extract (bool, rtx, rtx, int);\n extern void ix86_expand_reduc (rtx (*)(rtx, rtx, rtx), rtx, rtx);\n "}, {"sha": "be5aaa4d76fe12e38867120e7e541c2a8e529f94", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=287cc750b0887e86cb309d976b17c7ee95f7ad48", "patch": "@@ -1023,6 +1023,12 @@\n   return op == const1_rtx || op == constm1_rtx;\n })\n \n+;; True for registers, or const_int_operand, used to vec_setm expander.\n+(define_predicate \"vec_setm_operand\"\n+  (ior (and (match_operand 0 \"register_operand\")\n+\t    (match_test \"TARGET_AVX2\"))\n+       (match_code \"const_int\")))\n+\n ;; True for registers, or 1 or -1.  Used to optimize double-word shifts.\n (define_predicate \"reg_or_pm1_operand\"\n   (ior (match_operand 0 \"register_operand\")"}, {"sha": "1193680956195208d52c6a638e3de06fc7ff3336", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=287cc750b0887e86cb309d976b17c7ee95f7ad48", "patch": "@@ -8098,11 +8098,14 @@\n (define_expand \"vec_set<mode>\"\n   [(match_operand:V 0 \"register_operand\")\n    (match_operand:<ssescalarmode> 1 \"register_operand\")\n-   (match_operand 2 \"const_int_operand\")]\n+   (match_operand 2 \"vec_setm_operand\")]\n   \"TARGET_SSE\"\n {\n-  ix86_expand_vector_set (false, operands[0], operands[1],\n-\t\t\t  INTVAL (operands[2]));\n+  if (CONST_INT_P (operands[2]))\n+    ix86_expand_vector_set (false, operands[0], operands[1],\n+\t\t\t    INTVAL (operands[2]));\n+  else\n+    ix86_expand_vector_set_var (operands[0], operands[1], operands[2]);\n   DONE;\n })\n "}, {"sha": "4c16ec5dfc45c4bc1dee6eb4588a3cbe8b0a9649", "filename": "gcc/testsuite/gcc.target/i386/avx2-vec-set-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vec-set-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vec-set-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vec-set-1.c?ref=287cc750b0887e86cb309d976b17c7ee95f7ad48", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx2 -O2 -mno-avx512f\" } */\n+/* { dg-final { scan-assembler-times {(?n)vpcmpeq[bwdq]} 12 } } */\n+/* { dg-final { scan-assembler-times {(?n)vp?blendv} 12 } } */\n+\n+typedef char v32qi __attribute__ ((vector_size (32)));\n+typedef char v16qi __attribute__ ((vector_size (16)));\n+\n+typedef short v16hi __attribute__ ((vector_size (32)));\n+typedef short v8hi __attribute__ ((vector_size (16)));\n+\n+typedef int v8si __attribute__ ((vector_size (32)));\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+typedef long long v4di __attribute__ ((vector_size (32)));\n+typedef long long v2di __attribute__ ((vector_size (16)));\n+\n+typedef float v8sf __attribute__ ((vector_size (32)));\n+typedef float v4sf __attribute__ ((vector_size (16)));\n+\n+typedef double v4df __attribute__ ((vector_size (32)));\n+typedef double v2df __attribute__ ((vector_size (16)));\n+\n+#define FOO(VTYPE, TYPE)\t\t\t\\\n+  VTYPE\t\t\t\t\t\t\\\n+  __attribute__ ((noipa))\t\t\t\\\n+  foo_##VTYPE (VTYPE a, TYPE b, unsigned int c)\t\\\n+  {\t\t\t\t\t\t\\\n+    a[c] = b;\t\t\t\t\t\\\n+    return a;\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\\\n+\n+FOO (v16qi, char);\n+FOO (v32qi, char);\n+\n+FOO (v8hi, short);\n+FOO (v16hi, short);\n+\n+FOO (v4si, int);\n+FOO (v8si, int);\n+\n+FOO (v2di, long long);\n+FOO (v4di, long long);\n+\n+FOO (v4sf, float);\n+FOO (v8sf, float);\n+\n+FOO (v2df, double);\n+FOO (v4df, double);"}, {"sha": "9086ef406f1b6773e708371d4316f943ecbce499", "filename": "gcc/testsuite/gcc.target/i386/avx2-vec-set-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vec-set-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vec-set-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx2-vec-set-2.c?ref=287cc750b0887e86cb309d976b17c7ee95f7ad48", "patch": "@@ -0,0 +1,50 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx2 } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+\n+#ifndef CHECK\n+#define CHECK \"avx2-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx2_test\n+#endif\n+\n+#include CHECK\n+\n+#include \"avx2-vec-set-1.c\"\n+\n+#define CALC_TEST(vtype, type, N, idx)\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    int i,val = idx * idx - idx * 3 + 16;\t\t\t\\\n+    type res[N],exp[N];\t\t\t\t\t\t\\\n+    vtype resv;\t\t\t\t\t\t\t\\\n+    for (i = 0; i < N; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tres[i] = i * i - i * 3 + 15;\t\t\t\t\\\n+\texp[i] = res[i];\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    exp[idx] = val;\t\t\t\t\t\t\\\n+    resv = foo_##vtype (*(vtype *)&res[0], val, idx);\t\t\\\n+    for (i = 0; i < N; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tif (resv[i] != exp[i])\t\t\t\t\t\\\n+\t  abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+static void\n+TEST (void)\n+{\n+  CALC_TEST (v32qi, char, 32, 17);\n+  CALC_TEST (v16qi, char, 16, 5);\n+  CALC_TEST (v16hi, short, 16, 9);\n+  CALC_TEST (v8hi, short, 8, 6);\n+  CALC_TEST (v8si, int, 8, 3);\n+  CALC_TEST (v4si, int, 4, 2);\n+  CALC_TEST (v4di, long long, 4, 1);\n+  CALC_TEST (v2di, long long, 2, 0);\n+}"}, {"sha": "5cfbc85732e17e0b3c1f47b295e18803cfef844f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vec-set-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vec-set-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vec-set-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vec-set-1.c?ref=287cc750b0887e86cb309d976b17c7ee95f7ad48", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times {(?n)(?:vp?broadcast|vmovddup)} 36 } } */\n+/* { dg-final { scan-assembler-times {(?n)vpcmp[bwdq][ \\t]+\\$0} 18 } } */\n+\n+typedef char v64qi __attribute__ ((vector_size (64)));\n+typedef short v32hi __attribute__ ((vector_size (64)));\n+typedef int v16si __attribute__ ((vector_size (64)));\n+typedef long long v8di __attribute__ ((vector_size (64)));\n+typedef float v16sf __attribute__ ((vector_size (64)));\n+typedef double v8df __attribute__ ((vector_size (64)));\n+\n+#include \"avx2-vec-set-1.c\"\n+\n+FOO (v64qi, char);\n+FOO (v32hi, short);\n+FOO (v16si, int);\n+FOO (v8di, long long);\n+FOO (v16sf, float);\n+FOO (v8df, double);"}, {"sha": "22e64183ebd751b3bef61323cce90ea4581ffbc5", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vec-set-2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vec-set-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vec-set-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vec-set-2.c?ref=287cc750b0887e86cb309d976b17c7ee95f7ad48", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-options \"-O2 -mavx512bw\" } */\n+\n+\n+#ifndef CHECK\n+#define CHECK \"avx512f-check.h\"\n+#endif\n+\n+#define AVX512BW\n+\n+#include CHECK\n+\n+#include \"avx512bw-vec-set-1.c\"\n+\n+#define CALC_TEST(vtype, type, N, idx)\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    int i,val = idx * idx - idx * 3 + 16;\t\t\t\\\n+    type res[N],exp[N];\t\t\t\t\t\t\\\n+    vtype resv;\t\t\t\t\t\t\t\\\n+    for (i = 0; i < N; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tres[i] = i * i - i * 3 + 15;\t\t\t\t\\\n+\texp[i] = res[i];\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    exp[idx] = val;\t\t\t\t\t\t\\\n+    resv = foo_##vtype (*(vtype *)&res[0], val, idx);\t\t\\\n+    for (i = 0; i < N; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tif (resv[i] != exp[i])\t\t\t\t\t\\\n+\t  abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+static void\n+test_512 (void)\n+{\n+  CALC_TEST (v64qi, char, 64, 50);\n+  CALC_TEST (v32hi, short, 32, 30);\n+  CALC_TEST (v16si, int, 16, 15);\n+  CALC_TEST (v8di, long long, 8, 7);\n+}"}, {"sha": "8f2aa03ec1137671f33c6f86519d8575109445e4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vec-set-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vec-set-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vec-set-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vec-set-2.c?ref=287cc750b0887e86cb309d976b17c7ee95f7ad48", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-options \"-O2 -mavx512f -mno-avx512bw\" } */\n+\n+\n+#ifndef CHECK\n+#define CHECK \"avx512f-check.h\"\n+#endif\n+\n+#define AVX512F\n+\n+#include CHECK\n+\n+#include \"avx512bw-vec-set-1.c\"\n+\n+#define CALC_TEST(vtype, type, N, idx)\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    int i,val = idx * idx - idx * 3 + 16;\t\t\t\\\n+    type res[N],exp[N];\t\t\t\t\t\t\\\n+    vtype resv;\t\t\t\t\t\t\t\\\n+    for (i = 0; i < N; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tres[i] = i * i - i * 3 + 15;\t\t\t\t\\\n+\texp[i] = res[i];\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    exp[idx] = val;\t\t\t\t\t\t\\\n+    resv = foo_##vtype (*(vtype *)&res[0], val, idx);\t\t\\\n+    for (i = 0; i < N; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tif (resv[i] != exp[i])\t\t\t\t\t\\\n+\t  abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+static void\n+test_512 (void)\n+{\n+  CALC_TEST (v64qi, char, 64, 50);\n+  CALC_TEST (v32hi, short, 32, 30);\n+}"}, {"sha": "4f327427a647157dd780a6d8aae67bf6717545df", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vec-set-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vec-set-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287cc750b0887e86cb309d976b17c7ee95f7ad48/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vec-set-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vec-set-2.c?ref=287cc750b0887e86cb309d976b17c7ee95f7ad48", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx512bw } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+\n+\n+#ifndef CHECK\n+#define CHECK \"avx512f-check.h\"\n+#endif\n+\n+#define AVX512VL\n+#define AVX512BW\n+\n+#include CHECK\n+\n+#include \"avx512bw-vec-set-1.c\"\n+\n+#define CALC_TEST(vtype, type, N, idx)\t\t\t\t\\\n+do\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    int i,val = idx * idx - idx * 3 + 16;\t\t\t\\\n+    type res[N],exp[N];\t\t\t\t\t\t\\\n+    vtype resv;\t\t\t\t\t\t\t\\\n+    for (i = 0; i < N; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tres[i] = i * i - i * 3 + 15;\t\t\t\t\\\n+\texp[i] = res[i];\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    exp[idx] = val;\t\t\t\t\t\t\\\n+    resv = foo_##vtype (*(vtype *)&res[0], val, idx);\t\t\\\n+    for (i = 0; i < N; i++)\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tif (resv[i] != exp[i])\t\t\t\t\t\\\n+\t  abort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\\\n+while (0)\n+\n+static void\n+test_256 (void)\n+{\n+  CALC_TEST (v32qi, char, 32, 17);\n+  CALC_TEST (v16hi, short, 16, 9);\n+  CALC_TEST (v8si, int, 8, 3);\n+  CALC_TEST (v4di, long long, 4, 1);\n+}\n+\n+static void\n+test_128 (void)\n+{\n+  CALC_TEST (v16qi, char, 16, 5);\n+  CALC_TEST (v8hi, short, 8, 6);\n+  CALC_TEST (v4si, int, 4, 2);\n+  CALC_TEST (v2di, long long, 2, 0);\n+}"}]}