{"sha": "d01ce591e584a8d0f79e54c346b76210b606b4cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAxY2U1OTFlNTg0YThkMGY3OWU1NGMzNDZiNzYyMTBiNjA2YjRjYw==", "commit": {"author": {"name": "Alex Samuel", "email": "samuel@codesourcery.com", "date": "2000-08-25T22:52:25Z"}, "committer": {"name": "Alex Samuel", "email": "samuel@gcc.gnu.org", "date": "2000-08-25T22:52:25Z"}, "message": "cp-demangle.c (result_add_separated_char): Change parameter to int.\n\n\t* cp-demangle.c (result_add_separated_char): Change parameter to\n\tint.\n\t(substitution_add): Don't check for duplicates.  Check if\n\tpreviously allocated size is zero.\n\t(demangle_name): Remove duplicate check for std substitution.\n\tClear template flag appropriately.\n\t(demangle_prefix): Remove argument to demangle_substitution.\n\tDon't check that template flag is already set.\n\t(demangle_operator_name): Add pt operator.\n\t(demangle_type): Don't treat r as built-in type.  Remove argument\n\tto demangle_substitution.  Fix substitution candidate mechanics.\n\tHandle <template-template-parm>s.  Improve comments.\n\t(demangle_template_param): Don't handle template arg lists here.\n\t(demangle_substitution): Remove parameter.\n\t(print_usage): Remove extra fprintf option.\n\nFrom-SVN: r35995", "tree": {"sha": "6a8541a80609e44094193aaa91a70b662b021fac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a8541a80609e44094193aaa91a70b662b021fac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d01ce591e584a8d0f79e54c346b76210b606b4cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d01ce591e584a8d0f79e54c346b76210b606b4cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d01ce591e584a8d0f79e54c346b76210b606b4cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d01ce591e584a8d0f79e54c346b76210b606b4cc/comments", "author": null, "committer": null, "parents": [{"sha": "26a110f54219a3a8489617500d9a1470f68aa396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26a110f54219a3a8489617500d9a1470f68aa396", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26a110f54219a3a8489617500d9a1470f68aa396"}], "stats": {"total": 144, "additions": 85, "deletions": 59}, "files": [{"sha": "3f3e89e778d1f159c8550e666f57b75fc4077fbc", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d01ce591e584a8d0f79e54c346b76210b606b4cc/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d01ce591e584a8d0f79e54c346b76210b606b4cc/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=d01ce591e584a8d0f79e54c346b76210b606b4cc", "patch": "@@ -1,3 +1,21 @@\n+2000-08-25  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* cp-demangle.c (result_add_separated_char): Change parameter to\n+\tint.\n+\t(substitution_add): Don't check for duplicates.  Check if\n+\tpreviously allocated size is zero.\n+\t(demangle_name): Remove duplicate check for std substitution.\n+\tClear template flag appropriately.\n+\t(demangle_prefix): Remove argument to demangle_substitution.\n+\tDon't check that template flag is already set.\n+\t(demangle_operator_name): Add pt operator.\n+\t(demangle_type): Don't treat r as built-in type.  Remove argument\n+\tto demangle_substitution.  Fix substitution candidate mechanics.\n+\tHandle <template-template-parm>s.  Improve comments.\n+\t(demangle_template_param): Don't handle template arg lists here. \n+\t(demangle_substitution): Remove parameter.\n+\t(print_usage): Remove extra fprintf option.\n+\n 2000-08-24  Greg McGary  <greg@mcgary.org>\n \n \t* libiberty/random.c (end_ptr): Revert previous change."}, {"sha": "c0d27bdea36b8a42dda69e44d74a61d3c9e963b8", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 67, "deletions": 59, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d01ce591e584a8d0f79e54c346b76210b606b4cc/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d01ce591e584a8d0f79e54c346b76210b606b4cc/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=d01ce591e584a8d0f79e54c346b76210b606b4cc", "patch": "@@ -21,7 +21,8 @@\n    the IA64 / g++ standard C++ ABI.  Use the cp_demangle function to\n    demangle a mangled name, or compile with the preprocessor macro\n    STANDALONE_DEMANGLER defined to create a demangling filter\n-   executable.  */\n+   executable (functionally similar to c++filt, but includes this\n+   demangler only).  */\n \n #ifdef HAVE_CONFIG_H\n #include \"config.h\"\n@@ -197,7 +198,7 @@ static string_list_t string_list_new\n static void string_list_delete\n   PARAMS ((string_list_t));\n static status_t result_add_separated_char\n-  PARAMS ((demangling_t, char));\n+  PARAMS ((demangling_t, int));\n static status_t result_push\n   PARAMS ((demangling_t));\n static string_list_t result_pop\n@@ -391,7 +392,7 @@ string_list_delete (node)\n static status_t\n result_add_separated_char (dm, character)\n      demangling_t dm;\n-     char character;\n+     int character;\n {\n   dyn_string_t s = &dm->result->string;\n \n@@ -487,23 +488,14 @@ substitution_add (dm, start_position, template_p, template_parm_number)\n       return STATUS_ALLOCATION_FAILED;\n     }\n \n-  /* Check whether SUBSTITUTION already occurs.  */\n-  for (i = 0; i < dm->num_substitutions; ++i)\n-    if (dyn_string_eq (dm->substitutions[i].text, substitution)\n-\t&& dm->substitutions[i].template_parm_number == template_parm_number)\n-      /* Found SUBSTITUTION already present.  */\n-      {\n-\t/* Callers expect this function to take ownership of\n-\t   SUBSTITUTION, so delete it.  */\n-\tdyn_string_delete (substitution);\n-\treturn STATUS_OK;\n-      }\n-\n   /* If there's no room for the new entry, grow the array.  */\n   if (dm->substitutions_allocated == dm->num_substitutions)\n     {\n       size_t new_array_size;\n-      dm->substitutions_allocated *= 2;\n+      if (dm->substitutions_allocated > 0)\n+\tdm->substitutions_allocated *= 2;\n+      else\n+\tdm->substitutions_allocated = 2;\n       new_array_size = \n \tsizeof (struct substitution_def) * dm->substitutions_allocated;\n \n@@ -518,10 +510,10 @@ substitution_add (dm, start_position, template_p, template_parm_number)\n     }\n \n   /* Add the substitution to the array.  */\n+  i = dm->num_substitutions++;\n   dm->substitutions[i].text = substitution;\n   dm->substitutions[i].template_p = template_p;\n   dm->substitutions[i].template_parm_number = template_parm_number;\n-  ++dm->num_substitutions;\n \n #ifdef CP_DEMANGLE_DEBUG\n   substitutions_print (dm, stderr);\n@@ -853,7 +845,7 @@ static status_t demangle_scope_expression\n static status_t demangle_expr_primary\n   PARAMS ((demangling_t));\n static status_t demangle_substitution\n-  PARAMS ((demangling_t, int *, int *));\n+  PARAMS ((demangling_t, int *));\n static status_t demangle_local_name\n   PARAMS ((demangling_t));\n static status_t demangle_discriminator \n@@ -980,7 +972,6 @@ demangle_name (dm, template_p)\n      demangling_t dm;\n      int *template_p;\n {\n-  int special_std_substitution;\n   int start = substitution_start (dm);\n \n   DEMANGLE_TRACE (\"name\", dm);\n@@ -1008,16 +999,7 @@ demangle_name (dm, template_p)\n \t}\n       else\n \t{\n-\t  RETURN_IF_ERROR (demangle_substitution (dm, template_p,\n-\t\t\t\t\t\t  &special_std_substitution));\n-\t  if (special_std_substitution)\n-\t    {\n-\t      /* This was the magic `std::' substitution.  We can have\n-\t\t a <nested-name> or one of the unscoped names\n-\t\t following.  */\n-\t      RETURN_IF_ERROR (result_append (dm, \"::\"));\n-\t      RETURN_IF_ERROR (demangle_name (dm, template_p));\n-\t    }\n+\t  RETURN_IF_ERROR (demangle_substitution (dm, template_p));\n \t}\n       /* Check if a template argument list immediately follows.\n \t If so, then we just demangled an <unqualified-template-name>.  */\n@@ -1026,7 +1008,11 @@ demangle_name (dm, template_p)\n \t  RETURN_IF_ERROR (substitution_add (dm, start, 0, \n \t\t\t\t\t     NOT_TEMPLATE_PARM));\n \t  RETURN_IF_ERROR (demangle_template_args (dm));\n+\t  *template_p = 1;\n \t}\n+      else\n+\t*template_p = 0;\n+\n       break;\n \n     default:\n@@ -1127,7 +1113,6 @@ demangle_prefix (dm, template_p)\n   while (1)\n     {\n       char peek;\n-      int unused;\n \n       if (end_of_name_p (dm))\n \treturn \"Unexpected end of name in <compound-name>.\";\n@@ -1157,8 +1142,7 @@ demangle_prefix (dm, template_p)\n \t  if (peek == 'S')\n \t    /* The substitution determines whether this is a\n \t       template-id.  */\n-\t    RETURN_IF_ERROR (demangle_substitution (dm, template_p, \n-\t\t\t\t\t\t    &unused));\n+\t    RETURN_IF_ERROR (demangle_substitution (dm, template_p));\n \t  else\n \t    {\n \t      /* It's just a name.  Remember whether it's a\n@@ -1176,11 +1160,6 @@ demangle_prefix (dm, template_p)\n \tRETURN_IF_ERROR (demangle_local_name (dm));\n       else if (peek == 'I')\n \t{\n-\t  /* If the template flag is already set, this is the second\n-             set of template args in a row.  Something is wrong with\n-             the mangled name.  */\n-\t  if (*template_p) \n-\t    return \"Unexpected second consecutive template args in <prefix>.\";\n \t  /* The template name is a substitution candidate.  */\n \t  RETURN_IF_ERROR (substitution_add (dm, start, 0, NOT_TEMPLATE_PARM));\n \t  RETURN_IF_ERROR (demangle_template_args (dm));\n@@ -1492,6 +1471,7 @@ demangle_operator_name (dm, short_name, num_args)\n     { \"pm\", \"->*\"      , 2 },\n     { \"pp\", \"++\"       , 1 },\n     { \"ps\", \"+\"        , 1 },\n+    { \"pt\", \"->\"       , 2 },\n     { \"qu\", \"?\"        , 3 },\n     { \"rM\", \"%=\"       , 2 },\n     { \"rS\", \">>=\"      , 2 },\n@@ -1966,6 +1946,7 @@ demangle_type_ptr (dm)\n \t   ::= <array-type>\n \t   ::= <pointer-to-member-type>\n \t   ::= <template-param>\n+\t   ::= <template-template-param> <template-args>\n            ::= <CV-qualifiers> <type>\n \t   ::= P <type>   # pointer-to\n \t   ::= R <type>   # reference-to\n@@ -1982,28 +1963,37 @@ demangle_type (dm)\n   char peek = peek_char (dm);\n   char peek_next;\n   int template_p = 0;\n-  int special_std_substitution;\n-  int is_builtin_type = 0;\n   template_arg_list_t old_arg_list = current_template_arg_list (dm);\n   int template_parm = NOT_TEMPLATE_PARM;\n \n+  /* A <type> can be a <substitution>; therefore, this <type> is a\n+     substitution candidate unless a special condition holds (see\n+     below).  */\n+  int is_substitution_candidate = 1;\n+\n   DEMANGLE_TRACE (\"type\", dm);\n \n   /* A <class-enum-type> can start with a digit (a <source-name>), an\n      N (a <nested-name>), or a Z (a <local-name>).  */\n   if (IS_DIGIT ((unsigned char) peek) || peek == 'N' || peek == 'Z')\n     RETURN_IF_ERROR (demangle_class_enum_type (dm, &template_p));\n-  else if (peek >= 'a' && peek <= 'z')\n+  /* Lower-case letters begin <builtin-type>s, except for `r', which\n+     denotes restrict.  */\n+  else if (peek >= 'a' && peek <= 'z' && peek != 'r')\n     {\n       RETURN_IF_ERROR (demangle_builtin_type (dm));\n-      is_builtin_type = 1;\n+      /* Built-in types are not substitution candidates.  */\n+      is_substitution_candidate = 0;\n     }\n   else\n     switch (peek)\n       {\n       case 'r':\n       case 'V':\n       case 'K':\n+\t/* CV-qualifiers (including restrict).  We have to demangle\n+\t   them off to the side, since C++ syntax puts them in a funny\n+\t   place for qualified pointer and reference types.  */\n \t{\n \t  status_t status;\n \t  dyn_string_t cv_qualifiers = dyn_string_new (24);\n@@ -2046,7 +2036,29 @@ demangle_type (dm)\n \tbreak;\n \n       case 'T':\n+\t/* It's either a <template-param> or a\n+\t   <template-template-param>.  In either case, demangle the\n+\t   `T' token first.  */\n \tRETURN_IF_ERROR (demangle_template_param (dm, &template_parm));\n+\n+\t/* Check for a template argument list; if one is found, it's a\n+\t     <template-template-param> ::= <template-param>\n+                                       ::= <substitution>  */\n+\tif (peek_char (dm) == 'I')\n+\t  {\n+\t    /* Add a substitution candidate.  The template parameter\n+\t       `T' token is a substitution candidate by itself,\n+\t       without the template argument list.  */\n+\t    RETURN_IF_ERROR (substitution_add (dm, start, template_p, \n+\t\t\t\t\t       template_parm));\n+\n+\t    /* Now demangle the template argument list.  */\n+\t    RETURN_IF_ERROR (demangle_template_args (dm));\n+\t    /* The entire type, including the template template\n+\t       parameter and its argument list, will be added as a\n+\t       substitution candidate below.  */\n+\t  }\n+\n \tbreak;\n \n       case 'S':\n@@ -2057,18 +2069,24 @@ demangle_type (dm)\n \tpeek_next = peek_char_next (dm);\n \tif (IS_DIGIT (peek_next) || peek_next == '_')\n \t  {\n-\t    RETURN_IF_ERROR (\n-              demangle_substitution (dm, &template_p,\n-\t\t\t\t     &special_std_substitution));\n+\t    RETURN_IF_ERROR (demangle_substitution (dm, &template_p));\n \t    \n \t    /* The substituted name may have been a template name.\n \t       Check if template arguments follow, and if so, demangle\n \t       them.  */\n \t    if (peek_char (dm) == 'I')\n \t      RETURN_IF_ERROR (demangle_template_args (dm));\n+\n+\t    /* A substitution token is not itself a substitution\n+\t       candidate.  */\n+\t    is_substitution_candidate = 0;\n \t  }\n \telse\n+\t  /* While the special substitution token itself is not a\n+\t     substitution candidate, the <class-enum-type> is, so\n+\t     don't clear is_substitution_candidate.  */\n \t  demangle_class_enum_type (dm, &template_p);\n+\n \tbreak;\n \n       case 'P':\n@@ -2103,11 +2121,10 @@ demangle_type (dm)\n \treturn \"Unexpected character in <type>.\";\n       }\n \n-  /* Unqualified builin types are not substitution candidates.  */\n-  if (!is_builtin_type)\n+  if (is_substitution_candidate)\n     /* Add a new substitution for the type. If this type was a\n        <template-param>, pass its index since from the point of\n-       substitutions, a <template-param> token is a substitution\n+       substitutions; a <template-param> token is a substitution\n        candidate distinct from the type that is substituted for it.  */\n     RETURN_IF_ERROR (substitution_add (dm, start, template_p, template_parm));\n \n@@ -2457,9 +2474,6 @@ demangle_template_param (dm, template_parm_number)\n     return \"Template parameter number out of bounds.\";\n   RETURN_IF_ERROR (result_append_string (dm, (dyn_string_t) arg));\n \n-  if (peek_char (dm) == 'I')\n-    RETURN_IF_ERROR (demangle_template_args (dm));\n-\n   *template_parm_number = parm_number;\n   return STATUS_OK;\n }\n@@ -2795,10 +2809,7 @@ demangle_expr_primary (dm)\n }\n \n /* Demangles and emits a <substitution>.  Sets *TEMPLATE_P to non-zero\n-   if the substitution is the name of a template, zero otherwise.  If\n-   the substitution token is St, which corresponds to the `::std::'\n-   namespace and can appear in a non-nested name, sets\n-   *SPECIAL_STD_SUBSTITUTION to non-zero; zero otherwise.  \n+   if the substitution is the name of a template, zero otherwise. \n \n      <substitution> ::= S <seq-id> _\n                     ::= S_\n@@ -2818,10 +2829,9 @@ demangle_expr_primary (dm)\n */\n \n static status_t\n-demangle_substitution (dm, template_p, special_std_substitution)\n+demangle_substitution (dm, template_p)\n      demangling_t dm;\n      int *template_p;\n-     int *special_std_substitution;\n {\n   int seq_id;\n   int peek;\n@@ -2830,7 +2840,6 @@ demangle_substitution (dm, template_p, special_std_substitution)\n   DEMANGLE_TRACE (\"substitution\", dm);\n \n   RETURN_IF_ERROR (demangle_char (dm, 'S'));\n-  *special_std_substitution = 0;\n \n   /* Scan the substitution sequence index.  A missing number denotes\n      the first index.  */\n@@ -2851,7 +2860,6 @@ demangle_substitution (dm, template_p, special_std_substitution)\n \t{\n \tcase 't':\n \t  RETURN_IF_ERROR (result_append (dm, \"std\"));\n-\t  *special_std_substitution = 1;\n \t  break;\n \n \tcase 'a':\n@@ -3302,7 +3310,7 @@ print_usage (fp, exit_value)\n      int exit_value;\n {\n   fprintf (fp, \"Usage: %s [options] [names ...]\\n\", program_name);\n-  fprintf (fp, \"Options:\\n\", program_name);\n+  fprintf (fp, \"Options:\\n\");\n   fprintf (fp, \"  -h,--help       Display this message.\\n\");\n   fprintf (fp, \"  -s,--strict     Demangle standard names only.\\n\");\n   fprintf (fp, \"  -v,--verbose    Produce verbose demanglings.\\n\");"}]}