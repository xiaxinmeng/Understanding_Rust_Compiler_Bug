{"sha": "cdd17d6e9956853892e4c097cc33afc2156df69e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RkMTdkNmU5OTU2ODUzODkyZTRjMDk3Y2MzM2FmYzIxNTZkZjY5ZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-06-14T19:38:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-06-14T19:38:30Z"}, "message": "Fix libstdc++ testsuite failures with -D_GLIBCXX_USE_CXX11_ABI=0\n\n\t* doc/xml/manual/test.xml: Correct instructions on running tests.\n\t* testsuite/21_strings/basic_string/cons/char/deduction.cc: Adjust to\n\tpass when -D_GLIBCXX_USE_CXX11_ABI=0 added to RUNTESTFLAGS.\n\t* testsuite/21_strings/basic_string/cons/wchar_t/deduction.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_ios/copyfmt/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_ios/exceptions/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/\n\texceptions_failbit.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n\texceptions_failbit.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/char/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/basic_istream/sentry/char/12297.cc: Likewise.\n\t* testsuite/27_io/basic_istream/sentry/wchar_t/12297.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n\texceptions_null.cc: Likewise.\n\t* testsuite/27_io/ios_base/storage/2.cc: Likewise.\n\nFrom-SVN: r249206", "tree": {"sha": "9dd093a8714a77cd2da1b8da47f96a2354503708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dd093a8714a77cd2da1b8da47f96a2354503708"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdd17d6e9956853892e4c097cc33afc2156df69e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd17d6e9956853892e4c097cc33afc2156df69e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd17d6e9956853892e4c097cc33afc2156df69e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd17d6e9956853892e4c097cc33afc2156df69e/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be75f645e6d1ef22806a0193abecd56a215e6594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be75f645e6d1ef22806a0193abecd56a215e6594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be75f645e6d1ef22806a0193abecd56a215e6594"}], "stats": {"total": 230, "additions": 151, "deletions": 79}, "files": [{"sha": "8820d9d03d7db425e46226172267ef0ad6801a3e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cdd17d6e9956853892e4c097cc33afc2156df69e", "patch": "@@ -1,3 +1,28 @@\n+2017-06-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/test.xml: Correct instructions on running tests.\n+\t* testsuite/21_strings/basic_string/cons/char/deduction.cc: Adjust to\n+\tpass when -D_GLIBCXX_USE_CXX11_ABI=0 added to RUNTESTFLAGS.\n+\t* testsuite/21_strings/basic_string/cons/wchar_t/deduction.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_ios/copyfmt/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ios/exceptions/char/1.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/\n+\texceptions_failbit.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/\n+\texceptions_failbit.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/char/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_other/wchar_t/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/sentry/char/12297.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/sentry/wchar_t/12297.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/basic_ostream/inserters_other/wchar_t/\n+\texceptions_null.cc: Likewise.\n+\t* testsuite/27_io/ios_base/storage/2.cc: Likewise.\n+\n 2017-06-12  Pedro Alves  <palves@redhat.com>\n \n \t* doc/xml/manual/status_cxx2017.xml: Update C++17 constexpr"}, {"sha": "154b74cbf9f0d26356cb6990e5f89f10921a6509", "filename": "libstdc++-v3/doc/xml/manual/test.xml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Ftest.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Ftest.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Ftest.xml?ref=cdd17d6e9956853892e4c097cc33afc2156df69e", "patch": "@@ -569,15 +569,15 @@ cat 27_io/objects/char/3_xin.in | a.out</programlisting>\n       For example, to run the tests with\n       <option>-O1 -D_GLIBCXX_ASSERTIONS</option>\n       you could use:\n-<programlisting>    make RUNTESTFLAGS=--target_board=unix/-O1/-D_GLIBCXX_ASSERTIONS</programlisting>\n+<programlisting>    make check RUNTESTFLAGS=--target_board=unix/-O1/-D_GLIBCXX_ASSERTIONS</programlisting>\n     </para>\n \n     <para>\n       The <option>--target_board</option> option can also be used to run the\n       tests multiple times in different variations. For example, to run the\n       entire testsuite three times using <option>-O3</option> but with\n       different <option>-std</option> options:\n-<programlisting>    make 'RUNTESTFLAGS=--target_board=unix/-O3\\\"{-std=gnu++98,-std=gnu++11,-std=gnu++14}\\\"'</programlisting>\n+<programlisting>    make check 'RUNTESTFLAGS=--target_board=unix/-O3\\\"{-std=gnu++98,-std=gnu++11,-std=gnu++14}\\\"'</programlisting>\n       N.B. that set of variations could also be written as\n       <literal>unix/-O3\\\"{-std=gnu++98,-std=gnu++11,}\\\"</literal> so that\n       the third variation would use the default for <option>-std</option>"}, {"sha": "205714a7f5f4a6908547cf3d8fa072f365ae5a16", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/deduction.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fdeduction.cc?ref=cdd17d6e9956853892e4c097cc33afc2156df69e", "patch": "@@ -50,11 +50,13 @@ test01()\n   const std::basic_string s4 = s3;\n   check_type<const std::string>(s4);\n \n+#if _GLIBCXX_USE_CXX11_ABI\n   std::basic_string s5(s0, a);\n   check_type<std::string>(s5);\n \n   std::basic_string s6(std::move(s0), a);\n   check_type<std::string>(s6);\n+#endif\n \n   std::basic_string s7(s0, 0, 0);\n   check_type<std::string>(s7);"}, {"sha": "23ae07c6634c63d11af532be875470acd75daf03", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/deduction.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fdeduction.cc?ref=cdd17d6e9956853892e4c097cc33afc2156df69e", "patch": "@@ -46,11 +46,13 @@ test01()\n   const std::basic_string s4 = s2;\n   check_type<const std::wstring>(s4);\n \n+#if _GLIBCXX_USE_CXX11_ABI\n   std::basic_string s5(s0, a);\n   check_type<std::wstring>(s5);\n \n   std::basic_string s6(std::move(s0), a);\n   check_type<std::wstring>(s6);\n+#endif\n \n   std::basic_string s7(s0, 0, 0);\n   check_type<std::wstring>(s7);"}, {"sha": "840017e4e850034c73d69defca22efe05d5d184d", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/copyfmt/char/1.cc", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fcopyfmt%2Fchar%2F1.cc?ref=cdd17d6e9956853892e4c097cc33afc2156df69e", "patch": "@@ -17,9 +17,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// The library throws the new definition of std::ios::failure\n-// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=1\" }\n-\n // 27.4.4.2 basic_ios member functions\n \n // NB: Don't include any other headers in this file.\n@@ -36,29 +33,36 @@ void test02()\n   // basic_ios& copyfmt(const basic_ios& rhs)\n   {\n     std::ios ios_01(0);\n-    std::ios ios_02(0);  \n+    std::ios ios_02(0);\n     ios_01.exceptions(std::ios_base::eofbit);\n     ios_02.exceptions(std::ios_base::eofbit);\n-    \n+\n     try {\n-    ios_01.copyfmt(ios_02);\n-    }\t\t \n+      ios_01.copyfmt(ios_02);\n+    }\n     catch(...) {\n       VERIFY( false );\n     }\n   }\n \n   {\n+    // The library throws the new definition of std::ios::failure\n+#if _GLIBCXX_USE_CXX11_ABI\n+    typedef std::ios_base::failure exception_type;\n+#else\n+    typedef std::exception exception_type;\n+#endif\n+\n     std::ios ios_01(0);\n-    std::ios ios_02(0);  \n+    std::ios ios_02(0);\n     ios_01.clear(std::ios_base::eofbit);\n     ios_02.exceptions(std::ios_base::eofbit);\n \n     try {\n       ios_01.copyfmt(ios_02);\n       VERIFY( false );\n-    }\t\t \n-    catch(std::ios_base::failure& fail) {\n+    }\n+    catch(exception_type&) {\n       VERIFY( true );\n     }\n     catch(...) {\n@@ -67,7 +71,7 @@ void test02()\n   }\n }\n \n-int main() \n+int main()\n {\n   test02();\n   return 0;"}, {"sha": "152e783640a7f73b41c7f394cba3906a67f5f9ee", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/exceptions/char/1.cc", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fexceptions%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fexceptions%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fexceptions%2Fchar%2F1.cc?ref=cdd17d6e9956853892e4c097cc33afc2156df69e", "patch": "@@ -17,9 +17,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// The library throws the new definition of std::ios::failure\n-// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=1\" }\n-\n // 27.4.4.2 basic_ios member functions\n \n // NB: Don't include any other headers in this file.\n@@ -44,7 +41,7 @@ void test01()\n     std::ios ios_01(0);\n     try {\n       ios_01.exceptions(std::ios_base::eofbit);\n-    }\t\t \n+    }\n     catch(...) {\n       VERIFY( false );\n     }\n@@ -53,13 +50,20 @@ void test01()\n   }\n \n   {\n+    // The library throws the new definition of std::ios::failure\n+#if _GLIBCXX_USE_CXX11_ABI\n+    typedef std::ios_base::failure exception_type;\n+#else\n+    typedef std::exception exception_type;\n+#endif\n+\n     std::ios ios_01(0);\n     ios_01.clear(std::ios_base::eofbit);\n     try {\n       ios_01.exceptions(std::ios_base::eofbit);\n       VERIFY( false );\n-    }\t\t \n-    catch(std::ios_base::failure& fail) {\n+    }\n+    catch(exception_type&) {\n       iostate02 = ios_01.exceptions();\n       VERIFY( static_cast<bool>(iostate02 & std::ios_base::eofbit) );\n     }\n@@ -69,7 +73,7 @@ void test01()\n   }\n }\n \n-int main() \n+int main()\n {\n   test01();\n   return 0;"}, {"sha": "5fa3f1f34a044b4d09e2ee62e53a2c4ecb4b24cb", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/exceptions_failbit.cc", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2Fexceptions_failbit.cc?ref=cdd17d6e9956853892e4c097cc33afc2156df69e", "patch": "@@ -15,9 +15,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// The library throws the new definition of std::ios::failure\n-// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=1\" }\n-\n #include <sstream>\n #include <testsuite_hooks.h>\n \n@@ -29,20 +26,27 @@ void test_failbit()\n \n   istringstream stream(\"jaylib - champion sound\");\n   stream.exceptions(ios_base::failbit);\n-  \n+\n+  // The library throws the new definition of std::ios::failure\n+#if _GLIBCXX_USE_CXX11_ABI\n+    typedef std::ios_base::failure exception_type;\n+#else\n+    typedef std::exception exception_type;\n+#endif\n+\n   try\n     {\n       T i;\n       stream >> i;\n       VERIFY( false );\n     }\n-  catch (const ios_base::failure&)\n-    { \n+  catch (const exception_type&)\n+    {\n       // stream should set failbit and throw ios_base::failure.\n       VERIFY( stream.fail() );\n       VERIFY( !stream.bad() );\n       VERIFY( !stream.eof() );\n-    }  \n+    }\n   catch(...)\n     { VERIFY( false ); }\n }"}, {"sha": "4ff48f7371277e009d2ce0cc17d208dc69a0925d", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/exceptions_failbit.cc", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_failbit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_failbit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2Fexceptions_failbit.cc?ref=cdd17d6e9956853892e4c097cc33afc2156df69e", "patch": "@@ -15,9 +15,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// The library throws the new definition of std::ios::failure\n-// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=1\" }\n-\n #include <sstream>\n #include <testsuite_hooks.h>\n \n@@ -29,20 +26,27 @@ void test_failbit()\n \n   wistringstream stream(L\"jaylib - champion sound\");\n   stream.exceptions(ios_base::failbit);\n-  \n+\n+  // The library throws the new definition of std::ios::failure\n+#if _GLIBCXX_USE_CXX11_ABI\n+    typedef std::ios_base::failure exception_type;\n+#else\n+    typedef std::exception exception_type;\n+#endif\n+\n   try\n     {\n       T i;\n       stream >> i;\n       VERIFY( false );\n     }\n-  catch (const ios_base::failure&)\n-    { \n+  catch (const exception_type&)\n+    {\n       // stream should set failbit and throw ios_base::failure.\n       VERIFY( stream.fail() );\n       VERIFY( !stream.bad() );\n       VERIFY( !stream.eof() );\n-    }  \n+    }\n   catch(...)\n     { VERIFY( false ); }\n }"}, {"sha": "088aaa428082d858ce7442b541c795f7fb3862df", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/char/exceptions_null.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fchar%2Fexceptions_null.cc?ref=cdd17d6e9956853892e4c097cc33afc2156df69e", "patch": "@@ -15,9 +15,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// The library throws the new definition of std::ios::failure\n-// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=1\" }\n-\n #include <istream>\n #include <ostream>\n #include <streambuf>\n@@ -38,12 +35,19 @@ void test4()\n   istringstream stream;\n   stream.exceptions(ios_base::failbit);\n \n+  // The library throws the new definition of std::ios::failure\n+#if _GLIBCXX_USE_CXX11_ABI\n+    typedef std::ios_base::failure exception_type;\n+#else\n+    typedef std::exception exception_type;\n+#endif\n+\n   try\n     {\n       stream >> static_cast<streambuf*>(0);\n       VERIFY(false);\n     }\n-  catch (ios_base::failure&)\n+  catch (exception_type&)\n     {\n     }\n "}, {"sha": "fd6322b4cdba3511a1873f86f347e7d3a8cf0a0c", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_other/wchar_t/exceptions_null.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_other%2Fwchar_t%2Fexceptions_null.cc?ref=cdd17d6e9956853892e4c097cc33afc2156df69e", "patch": "@@ -15,9 +15,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// The library throws the new definition of std::ios::failure\n-// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=1\" }\n-\n #include <istream>\n #include <ostream>\n #include <streambuf>\n@@ -38,12 +35,19 @@ void test4()\n   wistringstream stream;\n   stream.exceptions(ios_base::failbit);\n \n+  // The library throws the new definition of std::ios::failure\n+#if _GLIBCXX_USE_CXX11_ABI\n+    typedef std::ios_base::failure exception_type;\n+#else\n+    typedef std::exception exception_type;\n+#endif\n+\n   try\n     {\n       stream >> static_cast<wstreambuf*>(0);\n       VERIFY( false );\n     }\n-  catch (ios_base::failure&)\n+  catch (exception_type&)\n     {\n     }\n "}, {"sha": "0900a70d148a167ac5112c864ea87de159afd26f", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/sentry/char/12297.cc", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F12297.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F12297.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fchar%2F12297.cc?ref=cdd17d6e9956853892e4c097cc33afc2156df69e", "patch": "@@ -15,12 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n // 27.6.1.1.2 class basic_istream::sentry\n \n-// The library throws the new definition of std::ios::failure\n-// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=1\" }\n-\n #include <sstream>\n #include <testsuite_hooks.h>\n \n@@ -29,16 +25,23 @@ int main()\n   using namespace std;\n   istringstream stream;\n   stream.exceptions(ios_base::eofbit);\n-  \n+\n+  // The library throws the new definition of std::ios::failure\n+#if _GLIBCXX_USE_CXX11_ABI\n+    typedef std::ios_base::failure exception_type;\n+#else\n+    typedef std::exception exception_type;\n+#endif\n+\n   try\n     {\n       istream::sentry sentry(stream, false);\n       VERIFY( false );\n     }\n-  catch (ios_base::failure&)\n+  catch (exception_type&)\n     {\n       VERIFY( stream.rdstate() == (ios_base::eofbit | ios_base::failbit) );\n     }\n-  \n+\n   return 0;\n }"}, {"sha": "e72fe1a03a05eb8e2a0580a35829c835fe6c29b7", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/sentry/wchar_t/12297.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fwchar_t%2F12297.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fwchar_t%2F12297.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fsentry%2Fwchar_t%2F12297.cc?ref=cdd17d6e9956853892e4c097cc33afc2156df69e", "patch": "@@ -15,9 +15,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// The library throws the new definition of std::ios::failure\n-// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=1\" }\n-\n // 27.6.1.1.2 class basic_istream::sentry\n \n #include <sstream>\n@@ -28,16 +25,23 @@ int main()\n   using namespace std;\n   wistringstream stream;\n   stream.exceptions(ios_base::eofbit);\n-  \n+\n+  // The library throws the new definition of std::ios::failure\n+#if _GLIBCXX_USE_CXX11_ABI\n+    typedef std::ios_base::failure exception_type;\n+#else\n+    typedef std::exception exception_type;\n+#endif\n+\n   try\n     {\n       wistream::sentry sentry(stream, false);\n       VERIFY( false );\n     }\n-  catch (ios_base::failure&)\n+  catch (exception_type&)\n     {\n       VERIFY( stream.rdstate() == (ios_base::eofbit | ios_base::failbit) );\n     }\n-  \n+\n   return 0;\n }"}, {"sha": "9a7bd06f21a3d86ff069da5c36601a794981365b", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/exceptions_null.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2Fexceptions_null.cc?ref=cdd17d6e9956853892e4c097cc33afc2156df69e", "patch": "@@ -15,9 +15,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// The library throws the new definition of std::ios::failure\n-// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=1\" }\n-\n #include <istream>\n #include <ostream>\n #include <streambuf>\n@@ -39,13 +36,20 @@ void test3()\n \n   ostringstream stream;\n   stream.exceptions(ios_base::badbit);\n-\t\n+\n+  // The library throws the new definition of std::ios::failure\n+#if _GLIBCXX_USE_CXX11_ABI\n+    typedef std::ios_base::failure exception_type;\n+#else\n+    typedef std::exception exception_type;\n+#endif\n+\n   try\n     {\n       stream << static_cast<streambuf*>(0);\n       VERIFY( false );\n     }\n-  catch (ios_base::failure&)\n+  catch (exception_type&)\n     {\n     }\n "}, {"sha": "fcfb37d2dacfb33db50ce0ade12a0f136fd4f9af", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/wchar_t/exceptions_null.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fwchar_t%2Fexceptions_null.cc?ref=cdd17d6e9956853892e4c097cc33afc2156df69e", "patch": "@@ -15,9 +15,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// The library throws the new definition of std::ios::failure\n-// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=1\" }\n-\n #include <istream>\n #include <ostream>\n #include <streambuf>\n@@ -39,13 +36,20 @@ void test3()\n \n   wostringstream stream;\n   stream.exceptions(ios_base::badbit);\n-\t\n+\n+  // The library throws the new definition of std::ios::failure\n+#if _GLIBCXX_USE_CXX11_ABI\n+    typedef std::ios_base::failure exception_type;\n+#else\n+    typedef std::exception exception_type;\n+#endif\n+\n   try\n     {\n       stream << static_cast<wstreambuf*>(0);\n       VERIFY( false );\n     }\n-  catch (ios_base::failure&)\n+  catch (exception_type&)\n     {\n     }\n "}, {"sha": "8fa306f61a2f1c24980a2dedfefb9c9270d2d4f5", "filename": "libstdc++-v3/testsuite/27_io/ios_base/storage/2.cc", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd17d6e9956853892e4c097cc33afc2156df69e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F2.cc?ref=cdd17d6e9956853892e4c097cc33afc2156df69e", "patch": "@@ -26,10 +26,7 @@\n // Skip test at -m64 on Darwin because RLIMITS are not being honored.\n // Radar 6467883: 10.4/10.5 setrlimits are not honored by memory allocators\n // Radar 6467884: 10.X systems are not robust when paging space is exceeded\n-// { dg-skip-if \"\" { *-*-darwin* && lp64 } { \"*\" } { \"\" } } \n-\n-// The library throws the new definition of std::ios::failure\n-// { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=1\" }\n+// { dg-skip-if \"\" { *-*-darwin* && lp64 } { \"*\" } { \"\" } }\n \n #include <sstream>\n #include <iostream>\n@@ -52,12 +49,19 @@ void test02()\n   // pword\n   ios.pword(1) = v;\n   VERIFY( ios.pword(1) == v );\n-  \n-  try \n+\n+  // The library throws the new definition of std::ios::failure\n+#if _GLIBCXX_USE_CXX11_ABI\n+    typedef std::ios_base::failure exception_type;\n+#else\n+    typedef std::exception exception_type;\n+#endif\n+\n+  try\n     {\n       v = ios.pword(max);\n     }\n-  catch(std::ios_base::failure& obj)\n+  catch(exception_type&)\n     {\n       // Ok.\n       VERIFY( ios.bad() );\n@@ -69,14 +73,14 @@ void test02()\n   VERIFY( v == 0 );\n \n   VERIFY( ios.pword(1) == v );\n-  \n+\n   // max is different code path from max-1\n   v = &test;\n   try\n     {\n       v = ios.pword(std::numeric_limits<int>::max());\n     }\n-  catch(std::ios_base::failure& obj)\n+  catch(exception_type&)\n     {\n       // Ok.\n       VERIFY( ios.bad() );\n@@ -90,12 +94,12 @@ void test02()\n   // iword\n   ios.iword(1) = 1;\n   VERIFY( ios.iword(1) == 1 );\n-  \n-  try \n+\n+  try\n     {\n       l = ios.iword(max);\n     }\n-  catch(std::ios_base::failure& obj)\n+  catch(exception_type&)\n     {\n       // Ok.\n       VERIFY( ios.bad() );\n@@ -110,11 +114,11 @@ void test02()\n \n   // max is different code path from max-1\n   l = 1;\n-  try \n+  try\n     {\n       l = ios.iword(std::numeric_limits<int>::max());\n     }\n-  catch(std::ios_base::failure& obj)\n+  catch(exception_type&)\n     {\n       // Ok.\n       VERIFY( ios.bad() );"}]}