{"sha": "f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY4Mzk2YTFlMGZmZmExYjE1YjhjNWI3MzJjZDRmODNjMWI2YjI0Yg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-06-12T08:43:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-06-12T08:43:55Z"}, "message": "emit-rtl.c (set_mem_attributes_minus_bitpos): Remove dead code.\n\n2012-06-12  Richard Guenther  <rguenther@suse.de>\n\n\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Remove dead code.\n\t* alias.c (ao_ref_from_mem): MEM_EXPR is conservative, MEM_OFFSET\n\tand MEM_SIZE only refines it.  Reflect that and be less conservative\n\tif either of the latter is not known.\n\nFrom-SVN: r188429", "tree": {"sha": "011d7419e5eca6bff61d2f8643f8a7fad5e60297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/011d7419e5eca6bff61d2f8643f8a7fad5e60297"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "891ca07d493c51f468710ba0f4af74bbe5e09fdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891ca07d493c51f468710ba0f4af74bbe5e09fdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/891ca07d493c51f468710ba0f4af74bbe5e09fdd"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "152d47860f70b0f04b1469ee3c2948ef41f2d18f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b", "patch": "@@ -1,3 +1,10 @@\n+2012-06-12  Richard Guenther  <rguenther@suse.de>\n+\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Remove dead code.\n+\t* alias.c (ao_ref_from_mem): MEM_EXPR is conservative, MEM_OFFSET\n+\tand MEM_SIZE only refines it.  Reflect that and be less conservative\n+\tif either of the latter is not known.\n+\n 2012-06-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/53589"}, {"sha": "fbc4e1031d9be907a9875325cc3df108cafc90a1", "filename": "gcc/alias.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b", "patch": "@@ -326,17 +326,11 @@ ao_ref_from_mem (ao_ref *ref, const_rtx mem)\n \n   ref->ref_alias_set = MEM_ALIAS_SET (mem);\n \n-  /* If MEM_OFFSET or MEM_SIZE are unknown we have to punt.\n-     Keep points-to related information though.  */\n+  /* If MEM_OFFSET or MEM_SIZE are unknown what we got from MEM_EXPR\n+     is conservative, so trust it.  */\n   if (!MEM_OFFSET_KNOWN_P (mem)\n       || !MEM_SIZE_KNOWN_P (mem))\n-    {\n-      ref->ref = NULL_TREE;\n-      ref->offset = 0;\n-      ref->size = -1;\n-      ref->max_size = -1;\n-      return true;\n-    }\n+    return true;\n \n   /* If the base decl is a parameter we can have negative MEM_OFFSET in\n      case of promoted subregs on bigendian targets.  Trust the MEM_EXPR\n@@ -345,6 +339,9 @@ ao_ref_from_mem (ao_ref *ref, const_rtx mem)\n       && (MEM_SIZE (mem) + MEM_OFFSET (mem)) * BITS_PER_UNIT == ref->size)\n     return true;\n \n+  /* Otherwise continue and refine size and offset we got from analyzing\n+     MEM_EXPR by using MEM_SIZE and MEM_OFFSET.  */\n+\n   ref->offset += MEM_OFFSET (mem) * BITS_PER_UNIT;\n   ref->size = MEM_SIZE (mem) * BITS_PER_UNIT;\n "}, {"sha": "09be139dbd3f5208c774caabd073b8ae2332fd13", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=f68396a1e0fffa1b15b8c5b732cd4f83c1b6b24b", "patch": "@@ -1838,15 +1838,6 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t      /* ??? Any reason the field size would be different than\n \t\t the size we got from the type?  */\n \t    }\n-\n-\t  /* If this is an indirect reference, record it.  */\n-\t  else if (TREE_CODE (t) == MEM_REF)\n-\t    {\n-\t      attrs.expr = t;\n-\t      attrs.offset_known_p = true;\n-\t      attrs.offset = 0;\n-\t      apply_bitpos = bitpos;\n-\t    }\n \t}\n \n       /* If this is an indirect reference, record it.  */"}]}