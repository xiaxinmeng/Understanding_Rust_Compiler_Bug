{"sha": "8d54f0f03b4dca70d5de602cc72155c74479b6b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ1NGYwZjAzYjRkY2E3MGQ1ZGU2MDJjYzcyMTU1Yzc0NDc5YjZiNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-24T01:43:49Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-24T01:43:49Z"}, "message": "ir.texi: Improve documentation for TARGET_EXPRs.\n\n\t* ir.texi: Improve documentation for TARGET_EXPRs.  Discuss\n\tSTMT_IS_FULL_EXPR_P.\n\nFrom-SVN: r29647", "tree": {"sha": "314de92967ee4099f64688b2b1f2d3feb6eb2785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/314de92967ee4099f64688b2b1f2d3feb6eb2785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d54f0f03b4dca70d5de602cc72155c74479b6b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d54f0f03b4dca70d5de602cc72155c74479b6b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d54f0f03b4dca70d5de602cc72155c74479b6b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d54f0f03b4dca70d5de602cc72155c74479b6b7/comments", "author": null, "committer": null, "parents": [{"sha": "914653a2a71c580d57010e189205a7deb6422125", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/914653a2a71c580d57010e189205a7deb6422125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/914653a2a71c580d57010e189205a7deb6422125"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "216ecd01f2bf832ee0a21ff631d0e66df681dca1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d54f0f03b4dca70d5de602cc72155c74479b6b7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d54f0f03b4dca70d5de602cc72155c74479b6b7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8d54f0f03b4dca70d5de602cc72155c74479b6b7", "patch": "@@ -1,5 +1,8 @@\n 1999-09-23  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* ir.texi: Improve documentation for TARGET_EXPRs.  Discuss\n+\tSTMT_IS_FULL_EXPR_P.\n+\n \t* cp-tree.h (language_function): Add cannot_inline.\n \t* decl.c (start_function): Restore current_function_cannot_inline\n \tfrom the saved value."}, {"sha": "e2b58e9e19b03a31cf58a6c08e4e02abc5da5cef", "filename": "gcc/cp/ir.texi", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d54f0f03b4dca70d5de602cc72155c74479b6b7/gcc%2Fcp%2Fir.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d54f0f03b4dca70d5de602cc72155c74479b6b7/gcc%2Fcp%2Fir.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fir.texi?ref=8d54f0f03b4dca70d5de602cc72155c74479b6b7", "patch": "@@ -1104,6 +1104,15 @@ as if it were a statement, they do not allow the use of\n Statements do not contain information about\n the file from which they came; that information is implicit in the\n @code{FUNCTION_DECL} from which the statements originate.\n+\n+@item STMT_IS_FULL_EXPR_P\n+In C++, statements normally constitute ``full expressions''; temporaries\n+created during a statement are destroyed when the statement is complete.\n+However, G++ sometimes represents expressions by statements; these\n+statements will not have @code{STMT_IS_FULL_EXPR_P} set.  Temporaries\n+created during such statements should be destroyed when the innermost\n+enclosing statement with @code{STMT_IS_FULL_EXPR_P} set is exited.\n+\n @end ftable\n \n Here is the list of the various statement nodes, and the macros used to\n@@ -1789,9 +1798,20 @@ is a @code{VAR_DECL} for the temporary variable.  The second operand is\n the initializer for the temporary.  The initializer is evaluated, and\n copied (bitwise) into the temporary.\n \n-FIXME: Discuss cleanups for the variable.\n-FIXME: Discuss the situation where the value is actually written into a\n-different variable.\n+The third operand to the @code{TARGET_EXPR}, if present, is a\n+cleanup-expression (i.e., destructor call) for the temporary.  If this\n+expression is not copied into some other location (i.e., if it is not\n+the right-hand side of an assignment, or the second operand to a\n+comma-expression which is itself the right-hand side of an assignment,\n+etc.), then this expression must be executed when the statement\n+containing this expression is complete.  These cleanups must always be\n+executed in the order opposite to that in which they were encountered.\n+Note that if a temporary is created on one branch of a conditional\n+operator (i.e., in the second or third operand to a @code{COND_EXPR}),\n+the cleanup must be run only if that branch is actually executed.\n+\n+See @code{STMT_IS_FULL_EXPR_P} for more information about running these\n+cleanups.\n \n @item AGGR_INIT_EXPR\n An @code{AGGR_INIT_EXPR} represents the initialization as the return"}]}