{"sha": "593570593e0401d2c8cb34ced3efd0cd50e2638e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkzNTcwNTkzZTA0MDFkMmM4Y2IzNGNlZDNlZmQwY2Q1MGUyNjM4ZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-11-27T19:57:45Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-11-27T19:57:45Z"}, "message": "compiler: pass a Location to import_expression\n    \n    Separate the Location that import_expression uses when creating a new\n    Expression from the Location used to report an error.  This is a step\n    toward importing expressions for inlined functions.  This is a pure\n    refactoring that does not affect compiler behavior.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/150064\n\nFrom-SVN: r266525", "tree": {"sha": "109a9c14cba0febe54dba78fdd2da46e4427cea9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/109a9c14cba0febe54dba78fdd2da46e4427cea9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/593570593e0401d2c8cb34ced3efd0cd50e2638e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/593570593e0401d2c8cb34ced3efd0cd50e2638e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/593570593e0401d2c8cb34ced3efd0cd50e2638e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/593570593e0401d2c8cb34ced3efd0cd50e2638e/comments", "author": null, "committer": null, "parents": [{"sha": "98f33efc5a533f66abfb0e263be60e719baf5879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f33efc5a533f66abfb0e263be60e719baf5879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98f33efc5a533f66abfb0e263be60e719baf5879"}], "stats": {"total": 109, "additions": 57, "deletions": 52}, "files": [{"sha": "71c7fcff227dbee47ac1b52926db47e8b38b4f21", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593570593e0401d2c8cb34ced3efd0cd50e2638e/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593570593e0401d2c8cb34ced3efd0cd50e2638e/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=593570593e0401d2c8cb34ced3efd0cd50e2638e", "patch": "@@ -1,4 +1,4 @@\n-db5240278b3b62a919dd88f857e718a66be50346\n+75d48ff977a2865d12b03857362ea48016a4b885\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "391eb663be45e4ba4a57b65dc92de03608d66984", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593570593e0401d2c8cb34ced3efd0cd50e2638e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593570593e0401d2c8cb34ced3efd0cd50e2638e/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=593570593e0401d2c8cb34ced3efd0cd50e2638e", "patch": "@@ -1583,7 +1583,7 @@ class Boolean_expression : public Expression\n   { }\n \n   static Expression*\n-  do_import(Import*);\n+  do_import(Import*, Location);\n \n  protected:\n   bool\n@@ -1649,17 +1649,17 @@ Boolean_expression::do_determine_type(const Type_context* context)\n // Import a boolean constant.\n \n Expression*\n-Boolean_expression::do_import(Import* imp)\n+Boolean_expression::do_import(Import* imp, Location loc)\n {\n   if (imp->peek_char() == 't')\n     {\n       imp->require_c_string(\"true\");\n-      return Expression::make_boolean(true, imp->location());\n+      return Expression::make_boolean(true, loc);\n     }\n   else\n     {\n       imp->require_c_string(\"false\");\n-      return Expression::make_boolean(false, imp->location());\n+      return Expression::make_boolean(false, loc);\n     }\n }\n \n@@ -1768,7 +1768,7 @@ String_expression::do_export(Export_function_body* efb) const\n // Import a string expression.\n \n Expression*\n-String_expression::do_import(Import* imp)\n+String_expression::do_import(Import* imp, Location loc)\n {\n   imp->require_c_string(\"\\\"\");\n   std::string val;\n@@ -1800,11 +1800,11 @@ String_expression::do_import(Import* imp)\n \t  else\n \t    {\n \t      go_error_at(imp->location(), \"bad string constant\");\n-\t      return Expression::make_error(imp->location());\n+\t      return Expression::make_error(loc);\n \t    }\n \t}\n     }\n-  return Expression::make_string(val, imp->location());\n+  return Expression::make_string(val, loc);\n }\n \n // Ast dump for string expression.\n@@ -1944,7 +1944,7 @@ class Integer_expression : public Expression\n   { mpz_init_set(this->val_, *val); }\n \n   static Expression*\n-  do_import(Import*);\n+  do_import(Import*, Location);\n \n   // Write VAL to string dump.\n   static void\n@@ -2151,7 +2151,7 @@ Integer_expression::do_export(Export_function_body* efb) const\n // all these types because they all start with digits.\n \n Expression*\n-Integer_expression::do_import(Import* imp)\n+Integer_expression::do_import(Import* imp, Location loc)\n {\n   std::string num = imp->read_identifier();\n   imp->require_c_string(\" \");\n@@ -2169,7 +2169,7 @@ Integer_expression::do_import(Import* imp)\n \t{\n \t  go_error_at(imp->location(), \"bad number in import data: %qs\",\n \t\t      num.c_str());\n-\t  return Expression::make_error(imp->location());\n+\t  return Expression::make_error(loc);\n \t}\n       if (pos == std::string::npos)\n \tmpfr_set_ui(real, 0, GMP_RNDN);\n@@ -2180,7 +2180,7 @@ Integer_expression::do_import(Import* imp)\n \t    {\n \t      go_error_at(imp->location(), \"bad number in import data: %qs\",\n \t\t\t  real_str.c_str());\n-\t      return Expression::make_error(imp->location());\n+\t      return Expression::make_error(loc);\n \t    }\n \t}\n \n@@ -2195,14 +2195,14 @@ Integer_expression::do_import(Import* imp)\n \t{\n \t  go_error_at(imp->location(), \"bad number in import data: %qs\",\n \t\t      imag_str.c_str());\n-\t  return Expression::make_error(imp->location());\n+\t  return Expression::make_error(loc);\n \t}\n       mpc_t cval;\n       mpc_init2(cval, mpc_precision);\n       mpc_set_fr_fr(cval, real, imag, MPC_RNDNN);\n       mpfr_clear(real);\n       mpfr_clear(imag);\n-      Expression* ret = Expression::make_complex(&cval, NULL, imp->location());\n+      Expression* ret = Expression::make_complex(&cval, NULL, loc);\n       mpc_clear(cval);\n       return ret;\n     }\n@@ -2218,13 +2218,13 @@ Integer_expression::do_import(Import* imp)\n \t{\n \t  go_error_at(imp->location(), \"bad number in import data: %qs\",\n \t\t      num.c_str());\n-\t  return Expression::make_error(imp->location());\n+\t  return Expression::make_error(loc);\n \t}\n       Expression* ret;\n       if (is_character_constant)\n-\tret = Expression::make_character(&val, NULL, imp->location());\n+\tret = Expression::make_character(&val, NULL, loc);\n       else\n-\tret = Expression::make_integer_z(&val, NULL, imp->location());\n+\tret = Expression::make_integer_z(&val, NULL, loc);\n       mpz_clear(val);\n       return ret;\n     }\n@@ -2235,9 +2235,9 @@ Integer_expression::do_import(Import* imp)\n \t{\n \t  go_error_at(imp->location(), \"bad number in import data: %qs\",\n \t\t      num.c_str());\n-\t  return Expression::make_error(imp->location());\n+\t  return Expression::make_error(loc);\n \t}\n-      Expression* ret = Expression::make_float(&val, NULL, imp->location());\n+      Expression* ret = Expression::make_float(&val, NULL, loc);\n       mpfr_clear(val);\n       return ret;\n     }\n@@ -3133,7 +3133,7 @@ class Nil_expression : public Expression\n   { }\n \n   static Expression*\n-  do_import(Import*);\n+  do_import(Import*, Location);\n \n  protected:\n   bool\n@@ -3172,10 +3172,10 @@ class Nil_expression : public Expression\n // Import a nil expression.\n \n Expression*\n-Nil_expression::do_import(Import* imp)\n+Nil_expression::do_import(Import* imp, Location loc)\n {\n   imp->require_c_string(\"nil\");\n-  return Expression::make_nil(imp->location());\n+  return Expression::make_nil(loc);\n }\n \n // Make a nil expression.\n@@ -3623,14 +3623,14 @@ Type_conversion_expression::do_export(Export_function_body* efb) const\n // Import a type conversion or a struct construction.\n \n Expression*\n-Type_conversion_expression::do_import(Import* imp)\n+Type_conversion_expression::do_import(Import* imp, Location loc)\n {\n   imp->require_c_string(\"convert(\");\n   Type* type = imp->read_type();\n   imp->require_c_string(\", \");\n-  Expression* val = Expression::import_expression(imp);\n+  Expression* val = Expression::import_expression(imp, loc);\n   imp->require_c_string(\")\");\n-  return Expression::make_cast(type, val, imp->location());\n+  return Expression::make_cast(type, val, loc);\n }\n \n // Dump ast representation for a type conversion expression.\n@@ -4634,7 +4634,7 @@ Unary_expression::do_export(Export_function_body* efb) const\n // Import a unary expression.\n \n Expression*\n-Unary_expression::do_import(Import* imp)\n+Unary_expression::do_import(Import* imp, Location loc)\n {\n   Operator op;\n   switch (imp->get_char())\n@@ -4655,8 +4655,8 @@ Unary_expression::do_import(Import* imp)\n       go_unreachable();\n     }\n   imp->require_c_string(\" \");\n-  Expression* expr = Expression::import_expression(imp);\n-  return Expression::make_unary(op, expr, imp->location());\n+  Expression* expr = Expression::import_expression(imp, loc);\n+  return Expression::make_unary(op, expr, loc);\n }\n \n // Dump ast representation of an unary expression.\n@@ -6403,11 +6403,11 @@ Binary_expression::do_export(Export_function_body* efb) const\n // Import a binary expression.\n \n Expression*\n-Binary_expression::do_import(Import* imp)\n+Binary_expression::do_import(Import* imp, Location loc)\n {\n   imp->require_c_string(\"(\");\n \n-  Expression* left = Expression::import_expression(imp);\n+  Expression* left = Expression::import_expression(imp, loc);\n \n   Operator op;\n   if (imp->match_c_string(\" || \"))\n@@ -6508,14 +6508,14 @@ Binary_expression::do_import(Import* imp)\n   else\n     {\n       go_error_at(imp->location(), \"unrecognized binary operator\");\n-      return Expression::make_error(imp->location());\n+      return Expression::make_error(loc);\n     }\n \n-  Expression* right = Expression::import_expression(imp);\n+  Expression* right = Expression::import_expression(imp, loc);\n \n   imp->require_c_string(\")\");\n \n-  return Expression::make_binary(op, left, right, imp->location());\n+  return Expression::make_binary(op, left, right, loc);\n }\n \n // Dump ast representation of a binary expression.\n@@ -16138,33 +16138,33 @@ Expression::make_backend(Bexpression* bexpr, Type* type, Location location)\n // various class definitions.\n \n Expression*\n-Expression::import_expression(Import* imp)\n+Expression::import_expression(Import* imp, Location loc)\n {\n   int c = imp->peek_char();\n   if (imp->match_c_string(\"- \")\n       || imp->match_c_string(\"! \")\n       || imp->match_c_string(\"^ \"))\n-    return Unary_expression::do_import(imp);\n+    return Unary_expression::do_import(imp, loc);\n   else if (c == '(')\n-    return Binary_expression::do_import(imp);\n+    return Binary_expression::do_import(imp, loc);\n   else if (imp->match_c_string(\"true\")\n \t   || imp->match_c_string(\"false\"))\n-    return Boolean_expression::do_import(imp);\n+    return Boolean_expression::do_import(imp, loc);\n   else if (c == '\"')\n-    return String_expression::do_import(imp);\n+    return String_expression::do_import(imp, loc);\n   else if (c == '-' || (c >= '0' && c <= '9'))\n     {\n       // This handles integers, floats and complex constants.\n-      return Integer_expression::do_import(imp);\n+      return Integer_expression::do_import(imp, loc);\n     }\n   else if (imp->match_c_string(\"nil\"))\n-    return Nil_expression::do_import(imp);\n+    return Nil_expression::do_import(imp, loc);\n   else if (imp->match_c_string(\"convert\"))\n-    return Type_conversion_expression::do_import(imp);\n+    return Type_conversion_expression::do_import(imp, loc);\n   else\n     {\n       go_error_at(imp->location(), \"import error: expected expression\");\n-      return Expression::make_error(imp->location());\n+      return Expression::make_error(loc);\n     }\n }\n "}, {"sha": "3641b03239e500f6377502ef911fa56f6744cdb0", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593570593e0401d2c8cb34ced3efd0cd50e2638e/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593570593e0401d2c8cb34ced3efd0cd50e2638e/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=593570593e0401d2c8cb34ced3efd0cd50e2638e", "patch": "@@ -1014,9 +1014,11 @@ class Expression\n   export_expression(Export_function_body* efb) const\n   { this->do_export(efb); }\n \n-  // Import an expression.\n+  // Import an expression.  The location should be used for the\n+  // returned expression.  Errors should be reported using the\n+  // Import's location method.\n   static Expression*\n-  import_expression(Import*);\n+  import_expression(Import*, Location);\n \n   // Return an expression which checks that VAL, of arbitrary integer type,\n   // is non-negative and is not more than the maximum integer value.\n@@ -1565,7 +1567,7 @@ class String_expression : public Expression\n   { return this->val_; }\n \n   static Expression*\n-  do_import(Import*);\n+  do_import(Import*, Location);\n \n  protected:\n   bool\n@@ -1644,7 +1646,7 @@ class Type_conversion_expression : public Expression\n \n   // Import a type conversion expression.\n   static Expression*\n-  do_import(Import*);\n+  do_import(Import*, Location);\n \n  protected:\n   int\n@@ -1815,7 +1817,7 @@ class Unary_expression : public Expression\n \t\tLocation, Numeric_constant* nc, bool *issued_error);\n \n   static Expression*\n-  do_import(Import*);\n+  do_import(Import*, Location);\n \n   // Declare that this deref does or does not require an explicit nil check.\n   void\n@@ -1964,7 +1966,7 @@ class Binary_expression : public Expression\n \t\t   bool* result);\n \n   static Expression*\n-  do_import(Import*);\n+  do_import(Import*, Location);\n \n   // Report an error if OP can not be applied to TYPE.  Return whether\n   // it can.  OTYPE is the type of the other operand."}, {"sha": "79d92e559d82688d1325de109134952a4af1f527", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593570593e0401d2c8cb34ced3efd0cd50e2638e/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593570593e0401d2c8cb34ced3efd0cd50e2638e/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=593570593e0401d2c8cb34ced3efd0cd50e2638e", "patch": "@@ -7631,7 +7631,7 @@ Named_constant::import_const(Import* imp, std::string* pname, Type** ptype,\n       imp->require_c_string(\" \");\n     }\n   imp->require_c_string(\"= \");\n-  *pexpr = Expression::import_expression(imp);\n+  *pexpr = Expression::import_expression(imp, imp->location());\n   imp->require_semicolon_if_old_version();\n   imp->require_c_string(\"\\n\");\n }"}, {"sha": "3b5c68a3f6cc9a37addb33fedc0c7b0be97011e9", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593570593e0401d2c8cb34ced3efd0cd50e2638e/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593570593e0401d2c8cb34ced3efd0cd50e2638e/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=593570593e0401d2c8cb34ced3efd0cd50e2638e", "patch": "@@ -338,7 +338,9 @@ class Statement\n   export_statement(Export_function_body* efb)\n   { this->do_export_statement(efb); }\n \n-  // Read a statement from export data.\n+  // Read a statement from export data.  The location should be used\n+  // for the returned statement.  Errors should be reported using the\n+  // Import_function_body's location method.\n   static Statement*\n   import_statement(Import_function_body*, Location);\n "}, {"sha": "38c7f1723355ddd548c60b0198a470b308a92e51", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/593570593e0401d2c8cb34ced3efd0cd50e2638e/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/593570593e0401d2c8cb34ced3efd0cd50e2638e/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=593570593e0401d2c8cb34ced3efd0cd50e2638e", "patch": "@@ -6606,7 +6606,8 @@ Struct_type::do_import(Import* imp)\n \t  if (imp->peek_char() == ' ')\n \t    {\n \t      imp->advance(1);\n-\t      Expression* expr = Expression::import_expression(imp);\n+\t      Expression* expr = Expression::import_expression(imp,\n+\t\t\t\t\t\t\t       imp->location());\n \t      String_expression* sexpr = expr->string_expression();\n \t      go_assert(sexpr != NULL);\n \t      sf.set_tag(sexpr->val());\n@@ -7568,7 +7569,7 @@ Array_type::do_import(Import* imp)\n   if (imp->peek_char() == ']')\n     length = NULL;\n   else\n-    length = Expression::import_expression(imp);\n+    length = Expression::import_expression(imp, imp->location());\n   imp->require_c_string(\"] \");\n   Type* element_type = imp->read_type();\n   return Type::make_array_type(element_type, length);"}]}