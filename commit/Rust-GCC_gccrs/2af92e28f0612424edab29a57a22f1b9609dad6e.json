{"sha": "2af92e28f0612424edab29a57a22f1b9609dad6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFmOTJlMjhmMDYxMjQyNGVkYWIyOWE1N2EyMmYxYjk2MDlkYWQ2ZQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-08-20T11:02:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-20T11:02:51Z"}, "message": "sem_aggr.adb, [...] (Valid_Ancestor): Resolve confusion between partial and full views of an ancestor of the context...\n\n2008-08-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aggr.adb, sem_type.adb, exp_ch9.ads, einfo.ads,\n\texp_ch6.adb, exp_aggr.adb (Valid_Ancestor): Resolve\n\tconfusion between partial and full views of an ancestor of the context\n\ttype when the parent is a private extension declared in a parent unit,\n\tand full views are available for the context type.\n\nFrom-SVN: r139269", "tree": {"sha": "c7e676ade7a5304276c3b334bd132222b6b62905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7e676ade7a5304276c3b334bd132222b6b62905"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2af92e28f0612424edab29a57a22f1b9609dad6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af92e28f0612424edab29a57a22f1b9609dad6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2af92e28f0612424edab29a57a22f1b9609dad6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af92e28f0612424edab29a57a22f1b9609dad6e/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e60703f413e6c124eeb17d751dc9a9bdd89443e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e60703f413e6c124eeb17d751dc9a9bdd89443e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e60703f413e6c124eeb17d751dc9a9bdd89443e"}], "stats": {"total": 62, "additions": 47, "deletions": 15}, "files": [{"sha": "2161e87cde3a1772455ef263f846c953c58753ab", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af92e28f0612424edab29a57a22f1b9609dad6e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af92e28f0612424edab29a57a22f1b9609dad6e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2af92e28f0612424edab29a57a22f1b9609dad6e", "patch": "@@ -1,3 +1,11 @@\n+2008-08-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb, sem_type.adb, exp_ch9.ads, einfo.ads,\n+\texp_ch6.adb, exp_aggr.adb (Valid_Ancestor): Resolve\n+\tconfusion between partial and full views of an ancestor of the context\n+\ttype when the parent is a private extension declared in a parent unit,\n+\tand full views are available for the context type.\n+\n 2008-08-18  Samuel Tardieu  <sam@rfc1149.net>\n             Robert Dewar  <dewar@adacore.com>\n "}, {"sha": "a70587471495fc1bb069112bbaacac95202f7e3b", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af92e28f0612424edab29a57a22f1b9609dad6e/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af92e28f0612424edab29a57a22f1b9609dad6e/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=2af92e28f0612424edab29a57a22f1b9609dad6e", "patch": "@@ -5016,6 +5016,7 @@ package Einfo is\n    --    Generic_Renamings                   (Elist23)  (for an instance)\n    --    Inner_Instances                     (Elist23)  (generic function only)\n    --    Protection_Object                   (Node23)   (for concurrent kind)\n+   --    Spec_PPC_List                       (Node24)\n    --    Interface_Alias                     (Node25)\n    --    Overridden_Operation                (Node26)\n    --    Wrapped_Entity                      (Node27)   (non-generic case only)"}, {"sha": "8a59879b0e073ae292c9801d5e5b19240d03bc1f", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af92e28f0612424edab29a57a22f1b9609dad6e/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af92e28f0612424edab29a57a22f1b9609dad6e/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=2af92e28f0612424edab29a57a22f1b9609dad6e", "patch": "@@ -2547,9 +2547,13 @@ package body Exp_Aggr is\n             --  in the limited case, the ancestor part must be either a\n             --  function call (possibly qualified, or wrapped in an unchecked\n             --  conversion) or aggregate (definitely qualified).\n+            --  The ancestor part can also be a function call (that may be\n+            --  transformed into an explicit dereference) or a qualification\n+            --  of one such.\n \n             elsif Is_Limited_Type (Etype (A))\n               and then Nkind (Unqualify (A)) /= N_Function_Call --  aggregate?\n+              and then Nkind (Unqualify (A)) /= N_Explicit_Dereference\n               and then\n                 (Nkind (Unqualify (A)) /= N_Unchecked_Type_Conversion\n                    or else"}, {"sha": "faefb52c6f4697c392fcf04d63a92874056ddbbb", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af92e28f0612424edab29a57a22f1b9609dad6e/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af92e28f0612424edab29a57a22f1b9609dad6e/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=2af92e28f0612424edab29a57a22f1b9609dad6e", "patch": "@@ -4394,6 +4394,14 @@ package body Exp_Ch6 is\n       Prot_Id   : Entity_Id;\n \n    begin\n+      --  If the subprogram is a function with an anonymous access\n+      --  to protected subprogram, it must be expanded to create\n+      --  its equivalent type.\n+\n+      --  if Ekind (Typ) = E_Anonymous_Access_Protected_Subprogram_Type then\n+      --     Expand_Access_Protected_Subprogram_Type (N, Typ);\n+      --  end if;\n+\n       --  Deal with case of protected subprogram. Do not generate protected\n       --  operation if operation is flagged as eliminated.\n "}, {"sha": "3ec61125a3fc737b27e69ef3ff8d40d7cf148c17", "filename": "gcc/ada/exp_ch9.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af92e28f0612424edab29a57a22f1b9609dad6e/gcc%2Fada%2Fexp_ch9.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af92e28f0612424edab29a57a22f1b9609dad6e/gcc%2Fada%2Fexp_ch9.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.ads?ref=2af92e28f0612424edab29a57a22f1b9609dad6e", "patch": "@@ -203,7 +203,9 @@ package Exp_Ch9 is\n    --  routine to make sure Complete_Master is called on exit).\n \n    procedure Expand_Access_Protected_Subprogram_Type (N : Node_Id);\n-   --  Build Equivalent_Type for an Access_to_protected_Subprogram\n+   --  Build Equivalent_Type for an Access_To_Protected_Subprogram.\n+   --  Equivalent_Type is a record type with two components: a pointer\n+   --  to the protected object, and a pointer to the operation itself.\n \n    procedure Expand_Accept_Declarations (N : Node_Id; Ent : Entity_Id);\n    --  Expand declarations required for accept statement. See bodies of"}, {"sha": "13ab96c6c638346f722102bf3e2bcfb4b3e05747", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af92e28f0612424edab29a57a22f1b9609dad6e/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af92e28f0612424edab29a57a22f1b9609dad6e/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=2af92e28f0612424edab29a57a22f1b9609dad6e", "patch": "@@ -2155,20 +2155,31 @@ package body Sem_Aggr is\n \n       begin\n          Imm_Type := Base_Type (Typ);\n-         while Is_Derived_Type (Imm_Type)\n-           and then Etype (Imm_Type) /= Base_Type (A_Type)\n-         loop\n-            Imm_Type := Etype (Base_Type (Imm_Type));\n+         while Is_Derived_Type (Imm_Type) loop\n+            if Etype (Imm_Type) = Base_Type (A_Type) then\n+               return True;\n+\n+            --  The base type of the parent type may appear as  a private\n+            --  extension if it is declared as such in a parent unit of\n+            --  the current one. For consistency of the subsequent analysis\n+            --  use the partial view for the ancestor part.\n+\n+            elsif Is_Private_Type (Etype (Imm_Type))\n+              and then Present (Full_View (Etype (Imm_Type)))\n+              and then Base_Type (A_Type) = Full_View (Etype (Imm_Type))\n+            then\n+               A_Type := Etype (Imm_Type);\n+               return True;\n+\n+            else\n+               Imm_Type := Etype (Base_Type (Imm_Type));\n+            end if;\n          end loop;\n \n-         if not Is_Derived_Type (Base_Type (Typ))\n-           or else Etype (Imm_Type) /= Base_Type (A_Type)\n-         then\n-            Error_Msg_NE (\"expect ancestor type of &\", A, Typ);\n-            return False;\n-         else\n-            return True;\n-         end if;\n+         --  If previous loop did not find a proper ancestor, report error.\n+\n+         Error_Msg_NE (\"expect ancestor type of &\", A, Typ);\n+         return False;\n       end Valid_Ancestor_Type;\n \n    --  Start of processing for Resolve_Extension_Aggregate"}, {"sha": "b8dca3bf9ff199b36e826bd5aa29049a4c4d06aa", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af92e28f0612424edab29a57a22f1b9609dad6e/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af92e28f0612424edab29a57a22f1b9609dad6e/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=2af92e28f0612424edab29a57a22f1b9609dad6e", "patch": "@@ -884,8 +884,6 @@ package body Sem_Type is\n       then\n          return True;\n \n-      --  An aggregate is compatible with an array or record type\n-\n       elsif T2 = Any_Composite\n         and then Ekind (T1) in E_Array_Type .. E_Record_Subtype\n       then"}]}