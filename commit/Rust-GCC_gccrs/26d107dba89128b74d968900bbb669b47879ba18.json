{"sha": "26d107dba89128b74d968900bbb669b47879ba18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZkMTA3ZGJhODkxMjhiNzRkOTY4OTAwYmJiNjY5YjQ3ODc5YmExOA==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2004-01-20T02:34:23Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2004-01-20T02:34:23Z"}, "message": "re PR rtl-optimization/13567 ([sh] miscompiling calls.c)\n\n\tPR optimization/13567\n\t* cse.c (cse_basic_block): Call cse_insn with a non-null\n\tlibcall_insn for the last SET insn of a no-confilict block.\n\nFrom-SVN: r76195", "tree": {"sha": "333f34d67e325259f0ce4e6af2fd6b39e16501d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/333f34d67e325259f0ce4e6af2fd6b39e16501d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26d107dba89128b74d968900bbb669b47879ba18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d107dba89128b74d968900bbb669b47879ba18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d107dba89128b74d968900bbb669b47879ba18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d107dba89128b74d968900bbb669b47879ba18/comments", "author": null, "committer": null, "parents": [{"sha": "9dfcd6092ef71da399221e59d535c5b893390243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dfcd6092ef71da399221e59d535c5b893390243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dfcd6092ef71da399221e59d535c5b893390243"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "b12049bf885b3800d810ea88a771864b3e5f4e96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d107dba89128b74d968900bbb669b47879ba18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d107dba89128b74d968900bbb669b47879ba18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26d107dba89128b74d968900bbb669b47879ba18", "patch": "@@ -1,3 +1,9 @@\n+2004-01-20  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR optimization/13567\n+\t* cse.c (cse_basic_block): Call cse_insn with a non-null\n+\tlibcall_insn for the last SET insn of a no-confilict block.\n+\n 2004-01-20  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* Makefile.in (target_noncanonical, program_transform_name): Use "}, {"sha": "9c6dfcffe1b1b62c2481f35183fa4b4592a5eb4a", "filename": "gcc/cse.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d107dba89128b74d968900bbb669b47879ba18/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d107dba89128b74d968900bbb669b47879ba18/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=26d107dba89128b74d968900bbb669b47879ba18", "patch": "@@ -1,6 +1,6 @@\n /* Common subexpression elimination for GNU compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998\n-   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -7108,6 +7108,7 @@ cse_basic_block (rtx from, rtx to, struct branch_path *next_branch,\n   int to_usage = 0;\n   rtx libcall_insn = NULL_RTX;\n   int num_insns = 0;\n+  int no_conflict = 0;\n \n   /* This array is undefined before max_reg, so only allocate\n      the space actually needed and adjust the start.  */\n@@ -7187,11 +7188,26 @@ cse_basic_block (rtx from, rtx to, struct branch_path *next_branch,\n \t      if ((p = find_reg_note (insn, REG_LIBCALL, NULL_RTX)))\n \t\tlibcall_insn = XEXP (p, 0);\n \t      else if (find_reg_note (insn, REG_RETVAL, NULL_RTX))\n-\t\tlibcall_insn = 0;\n+\t\t{\n+\t\t  /* Keep libcall_insn for the last SET insn of a no-conflict\n+\t\t     block to prevent changing the destination.  */\n+\t\t  if (! no_conflict)\n+\t\t    libcall_insn = 0;\n+\t\t  else\n+\t\t    no_conflict = -1;\n+\t\t}\n+\t      else if (find_reg_note (insn, REG_NO_CONFLICT, NULL_RTX))\n+\t\tno_conflict = 1;\n \t    }\n \n \t  cse_insn (insn, libcall_insn);\n \n+\t  if (no_conflict == -1)\n+\t    {\n+\t      libcall_insn = 0;\n+\t      no_conflict = 0;\n+\t    }\n+\t    \n \t  /* If we haven't already found an insn where we added a LABEL_REF,\n \t     check this one.  */\n \t  if (GET_CODE (insn) == INSN && ! recorded_label_ref"}]}