{"sha": "e3d62871c36f7209a18a20e52b245672a45bf81b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNkNjI4NzFjMzZmNzIwOWExOGEyMGU1MmIyNDU2NzJhNDViZjgxYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-06-22T22:06:56Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-06-22T22:06:56Z"}, "message": "re PR target/67400 (-fno-plt doesn't work with function pointers)\n\n\tPR target/67400\n\t* config/i386/i386-protos.h (ix86_force_load_from_GOT_p): New.\n\t* config/i386/i386.c (ix86_force_load_from_GOT_p): New function.\n\t(ix86_legitimate_constant_p): Do not allow UNSPEC_GOTPCREL if\n\tix86_force_load_from_GOT_p returns true.\n\t(ix86_legitimate_address_p): Allow UNSPEC_GOTPCREL if\n\tix86_force_load_from_GOT_p returns true.\n\t(ix86_print_operand_address_as): Support UNSPEC_GOTPCREL if\n\tix86_force_load_from_GOT_p returns true.\n\t(ix86_expand_move): Load the external function address via the\n\tGOT slot if ix86_force_load_from_GOT_p returns true.\n\t* config/i386/predicates.md (x86_64_immediate_operand): Return\n\tfalse for SYMBOL_REFs where ix86_force_load_from_GOT_p returns true.\n\t(x86_64_zext_immediate_operand): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/67400\n        * gcc.target/i386/pr67400-1.c: New test.\n        * gcc.target/i386/pr67400-2.c: Likewise.\n        * gcc.target/i386/pr67400-3.c: Likewise.\n        * gcc.target/i386/pr67400-4.c: Likewise.\n        * gcc.target/i386/pr67400-5.c: Likewise.\n        * gcc.target/i386/pr67400-6.c: Likewise.\n        * gcc.target/i386/pr67400-7.c: Likewise.\n\nFrom-SVN: r237720", "tree": {"sha": "218b567e6839bc92c4214e608198c378c7df8cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/218b567e6839bc92c4214e608198c378c7df8cd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3d62871c36f7209a18a20e52b245672a45bf81b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3d62871c36f7209a18a20e52b245672a45bf81b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3d62871c36f7209a18a20e52b245672a45bf81b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3d62871c36f7209a18a20e52b245672a45bf81b/comments", "author": null, "committer": null, "parents": [{"sha": "37c467c0a543e4df3c09da8e327cccbda9e45477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37c467c0a543e4df3c09da8e327cccbda9e45477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37c467c0a543e4df3c09da8e327cccbda9e45477"}], "stats": {"total": 198, "additions": 189, "deletions": 9}, "files": [{"sha": "c9d1a16180673b649b7d302f227c63079eeca730", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3d62871c36f7209a18a20e52b245672a45bf81b", "patch": "@@ -1,3 +1,21 @@\n+2016-06-23  Uros Bizjak  <ubizjak@gmail.com>\n+\t    H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/67400\n+\t* config/i386/i386-protos.h (ix86_force_load_from_GOT_p): New.\n+\t* config/i386/i386.c (ix86_force_load_from_GOT_p): New function.\n+\t(ix86_legitimate_constant_p): Do not allow UNSPEC_GOTPCREL if\n+\tix86_force_load_from_GOT_p returns true.\n+\t(ix86_legitimate_address_p): Allow UNSPEC_GOTPCREL if\n+\tix86_force_load_from_GOT_p returns true.\n+\t(ix86_print_operand_address_as): Support UNSPEC_GOTPCREL if\n+\tix86_force_load_from_GOT_p returns true.\n+\t(ix86_expand_move): Load the external function address via the\n+\tGOT slot if ix86_force_load_from_GOT_p returns true.\n+\t* config/i386/predicates.md (x86_64_immediate_operand): Return\n+\tfalse for SYMBOL_REFs where ix86_force_load_from_GOT_p returns true.\n+\t(x86_64_zext_immediate_operand): Ditto.\n+\n 2016-06-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_expand_move): Simplify SYMBOL_REF handling."}, {"sha": "81301612ee0ada4e67cfbbb4477194c0fd92ae27", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=e3d62871c36f7209a18a20e52b245672a45bf81b", "patch": "@@ -70,6 +70,7 @@ extern bool ix86_expand_set_or_movmem (rtx, rtx, rtx, rtx, rtx, rtx,\n extern bool constant_address_p (rtx);\n extern bool legitimate_pic_operand_p (rtx);\n extern bool legitimate_pic_address_disp_p (rtx);\n+extern bool ix86_force_load_from_GOT_p (rtx);\n extern void print_reg (rtx, int, FILE*);\n extern void ix86_print_operand (FILE *, rtx, int);\n "}, {"sha": "9c7b015e9c8f99ea066046bb9e232b7539eca579", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e3d62871c36f7209a18a20e52b245672a45bf81b", "patch": "@@ -15120,6 +15120,19 @@ darwin_local_data_pic (rtx disp)\n \t  && XINT (disp, 1) == UNSPEC_MACHOPIC_OFFSET);\n }\n \n+/* True if operand X should be loaded from GOT.  */\n+\n+bool\n+ix86_force_load_from_GOT_p (rtx x)\n+{\n+  return (TARGET_64BIT && !TARGET_PECOFF && !TARGET_MACHO\n+\t  && !flag_plt && !flag_pic\n+\t  && ix86_cmodel != CM_LARGE\n+\t  && GET_CODE (x) == SYMBOL_REF\n+\t  && SYMBOL_REF_FUNCTION_P (x)\n+\t  && !SYMBOL_REF_LOCAL_P (x));\n+}\n+\n /* Determine if a given RTX is a valid constant.  We already know this\n    satisfies CONSTANT_P.  */\n \n@@ -15188,6 +15201,12 @@ ix86_legitimate_constant_p (machine_mode mode, rtx x)\n       if (MACHO_DYNAMIC_NO_PIC_P)\n \treturn machopic_symbol_defined_p (x);\n #endif\n+\n+      /* External function address should be loaded\n+\t via the GOT slot to avoid PLT.  */\n+      if (ix86_force_load_from_GOT_p (x))\n+\treturn false;\n+\n       break;\n \n     CASE_CONST_SCALAR_INT:\n@@ -15596,6 +15615,9 @@ ix86_legitimate_address_p (machine_mode, rtx addr, bool strict)\n \t    return false;\n \n \t  case UNSPEC_GOTPCREL:\n+\t    if (ix86_force_load_from_GOT_p (XVECEXP (XEXP (disp, 0), 0, 0)))\n+\t      goto is_legitimate_pic;\n+\t    /* FALLTHRU */\n \t  case UNSPEC_PCREL:\n \t    gcc_assert (flag_pic);\n \t    goto is_legitimate_pic;\n@@ -18169,6 +18191,12 @@ ix86_print_operand_address_as (FILE *file, rtx addr,\n \t    fputs (\"ds:\", file);\n \t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (disp));\n \t}\n+      /* Load the external function address via the GOT slot to avoid PLT.  */\n+      else if (GET_CODE (disp) == CONST\n+\t       && GET_CODE (XEXP (disp, 0)) == UNSPEC\n+\t       && XINT (XEXP (disp, 0), 1) == UNSPEC_GOTPCREL\n+\t       && ix86_force_load_from_GOT_p (XVECEXP (XEXP (disp, 0), 0, 0)))\n+\toutput_pic_addr_const (file, disp, 0);\n       else if (flag_pic)\n \toutput_pic_addr_const (file, disp, 0);\n       else\n@@ -19417,6 +19445,15 @@ ix86_expand_move (machine_mode mode, rtx operands[])\n \n       if (model)\n \top1 = legitimize_tls_address (op1, model, true);\n+      else if (ix86_force_load_from_GOT_p (op1))\n+\t{\n+\t  /* Load the external function address via GOT slot to avoid PLT.  */\n+\t  op1 = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op1),\n+\t\t\t\tUNSPEC_GOTPCREL);\n+\t  op1 = gen_rtx_CONST (Pmode, op1);\n+\t  op1 = gen_const_mem (Pmode, op1);\n+\t  set_mem_alias_set (op1, ix86_GOT_alias_set ());\n+\t}\n       else\n \t{\n \t  tmp = legitimize_pe_coff_symbol (op1, addend != NULL_RTX);"}, {"sha": "2c4cfe68bad076613c84264812468d40efff16c4", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=e3d62871c36f7209a18a20e52b245672a45bf81b", "patch": "@@ -160,13 +160,18 @@\n         return trunc_int_for_mode (val, SImode) == val;\n       }\n     case SYMBOL_REF:\n+      /* TLS symbols are not constant.  */\n+      if (SYMBOL_REF_TLS_MODEL (op))\n+\treturn false;\n+\n+      /* Load the external function address via the GOT slot.  */\n+      if (ix86_force_load_from_GOT_p (op))\n+\treturn false;\n+\n       /* For certain code models, the symbolic references are known to fit.\n \t in CM_SMALL_PIC model we know it fits if it is local to the shared\n \t library.  Don't count TLS SYMBOL_REFs here, since they should fit\n \t only if inside of UNSPEC handled below.  */\n-      /* TLS symbols are not constant.  */\n-      if (SYMBOL_REF_TLS_MODEL (op))\n-\treturn false;\n       return (ix86_cmodel == CM_SMALL || ix86_cmodel == CM_KERNEL\n \t      || (ix86_cmodel == CM_MEDIUM && !SYMBOL_REF_FAR_ADDR_P (op)));\n \n@@ -207,6 +212,11 @@\n \t      /* TLS symbols are not constant.  */\n \t      if (SYMBOL_REF_TLS_MODEL (op1))\n \t\treturn false;\n+\n+\t      /* Load the external function address via the GOT slot.  */\n+\t      if (ix86_force_load_from_GOT_p (op1))\n+\t        return false;\n+\n \t      /* For CM_SMALL assume that latest object is 16MB before\n \t\t end of 31bits boundary.  We may also accept pretty\n \t\t large negative constants knowing that all objects are\n@@ -273,10 +283,15 @@\n       return !(INTVAL (op) & ~(HOST_WIDE_INT) 0xffffffff);\n \n     case SYMBOL_REF:\n-      /* For certain code models, the symbolic references are known to fit.  */\n       /* TLS symbols are not constant.  */\n       if (SYMBOL_REF_TLS_MODEL (op))\n \treturn false;\n+\n+      /* Load the external function address via the GOT slot.  */\n+      if (ix86_force_load_from_GOT_p (op))\n+\treturn false;\n+\n+     /* For certain code models, the symbolic references are known to fit.  */\n       return (ix86_cmodel == CM_SMALL\n \t      || (ix86_cmodel == CM_MEDIUM\n \t\t  && !SYMBOL_REF_FAR_ADDR_P (op)));\n@@ -301,6 +316,11 @@\n \t      /* TLS symbols are not constant.  */\n \t      if (SYMBOL_REF_TLS_MODEL (op1))\n \t\treturn false;\n+\n+\t      /* Load the external function address via the GOT slot.  */\n+\t      if (ix86_force_load_from_GOT_p (op1))\n+\t        return false;\n+\n \t      /* For small code model we may accept pretty large positive\n \t\t offsets, since one bit is available for free.  Negative\n \t\t offsets are limited by the size of NULL pointer area"}, {"sha": "a323e0127e91482377dea6d750877e10bec04b45", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3d62871c36f7209a18a20e52b245672a45bf81b", "patch": "@@ -1,3 +1,14 @@\n+2016-06-23  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/67400\n+        * gcc.target/i386/pr67400-1.c: New test.\n+        * gcc.target/i386/pr67400-2.c: Likewise.\n+        * gcc.target/i386/pr67400-3.c: Likewise.\n+        * gcc.target/i386/pr67400-4.c: Likewise.\n+        * gcc.target/i386/pr67400-5.c: Likewise.\n+        * gcc.target/i386/pr67400-6.c: Likewise.\n+        * gcc.target/i386/pr67400-7.c: Likewise.\n+\n 2016-06-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-c++-common/missing-header-1.c: New test case.\n@@ -355,7 +366,7 @@\n \n 2016-06-15  Uros Bizjak  <ubizjak@gmail.com>\n \n-        * gcc.dg/torture/float128-nan.c: Include stdint.h to define uint64_t.\n+\t* gcc.dg/torture/float128-nan.c: Include stdint.h to define uint64_t.\n \n 2016-06-15  Alan Hayward  <alan.hayward@arm.com>\n \n@@ -394,10 +405,10 @@\n \n 2016-06-14  Uros Bizjak  <ubizjak@gmail.com>\n \n-        * gcc.target/i386/float128-3.c: New test.\n-        * gcc.target/i386/quad-sse4.c: Ditto.\n-        * gcc.target/i386/quad-sse.c: Use -msse instead of -msse2.\n-        Update scan strings.\n+\t* gcc.target/i386/float128-3.c: New test.\n+\t* gcc.target/i386/quad-sse4.c: Ditto.\n+\t* gcc.target/i386/quad-sse.c: Use -msse instead of -msse2.\n+\tUpdate scan strings.\n \n 2016-06-14  Richard Biener  <rguenther@suse.de>\n "}, {"sha": "18b3790c03310ec37791727636e38c90f58cad12", "filename": "gcc/testsuite/gcc.target/i386/pr67400-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-1.c?ref=e3d62871c36f7209a18a20e52b245672a45bf81b", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n+\n+extern void bar (void);\n+\n+void *\n+foo (void)\n+{\n+  return &bar;\n+}\n+\n+/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" } } */\n+/* { dg-final { scan-assembler-not \"\\(mov|lea\\)\\(l|q\\)\\[ \\t\\]*\\(\\\\\\$|\\)bar,\" } } */"}, {"sha": "8f61c3f91ea03436992d007cfe5832776cc70f80", "filename": "gcc/testsuite/gcc.target/i386/pr67400-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-2.c?ref=e3d62871c36f7209a18a20e52b245672a45bf81b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n+\n+extern void bar (void);\n+extern void *p;\n+\n+void\n+foo (void)\n+{\n+  p = &bar;\n+}\n+\n+/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" } } */"}, {"sha": "40d3521066807b3690bc27521c4a97a52c81ead9", "filename": "gcc/testsuite/gcc.target/i386/pr67400-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-3.c?ref=e3d62871c36f7209a18a20e52b245672a45bf81b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n+\n+static void\n+bar (void)\n+{\n+}\n+\n+void *\n+foo (void)\n+{\n+  return &bar;\n+}\n+\n+/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" } } */"}, {"sha": "a329bbf4bf1e8277775a40f44371f65d04964fc5", "filename": "gcc/testsuite/gcc.target/i386/pr67400-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-4.c?ref=e3d62871c36f7209a18a20e52b245672a45bf81b", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n+\n+extern void bar (void) __attribute__ ((visibility (\"hidden\")));\n+\n+void *\n+foo (void)\n+{\n+  return &bar;\n+}\n+\n+/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" } } */"}, {"sha": "2d26a686d3a8ecabfeae3440cb7ac85b5bdd6a45", "filename": "gcc/testsuite/gcc.target/i386/pr67400-5.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-5.c?ref=e3d62871c36f7209a18a20e52b245672a45bf81b", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n+\n+extern void foo (void);\n+extern void bar (int, int, int, int, int, int, void *);\n+\n+void\n+x (void)\n+{\n+  bar (1, 2, 3, 4, 5, 6, foo);\n+}"}, {"sha": "bb766cd243f15f646cf1f54d8653801a1e1753fe", "filename": "gcc/testsuite/gcc.target/i386/pr67400-6.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-6.c?ref=e3d62871c36f7209a18a20e52b245672a45bf81b", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n+\n+extern int bar (void);\n+\n+int\n+check (void *p)\n+{\n+  return p != &bar;\n+}\n+\n+/* { dg-final { scan-assembler \"cmp\\(l|q\\)\\[ \\t\\]*.*bar@GOTPCREL\" } } */\n+/* { dg-final { scan-assembler-not \"mov\\(l|q\\)\\[ \\t\\]*\\\\\\$bar,\" } } */"}, {"sha": "32ae85f232823aa60f59b61db17a05517e0e821f", "filename": "gcc/testsuite/gcc.target/i386/pr67400-7.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d62871c36f7209a18a20e52b245672a45bf81b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr67400-7.c?ref=e3d62871c36f7209a18a20e52b245672a45bf81b", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { *-*-linux* && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -fno-pic -fno-plt\" } */\n+\n+extern void bar (void);\n+\n+void *\n+foo (void)\n+{\n+  return &bar+1;\n+}\n+\n+/* { dg-final { scan-assembler \"mov\\(l|q\\)\\[ \\t\\]*bar@GOTPCREL\" } } */\n+/* { dg-final { scan-assembler-not \"\\(mov|lea\\)\\(l|q\\)\\[ \\t\\]*\\(\\\\\\$|\\)bar,\" } } */"}]}