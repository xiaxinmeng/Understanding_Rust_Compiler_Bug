{"sha": "5929c659186adc165b6cc32aab2890a1629d667a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkyOWM2NTkxODZhZGMxNjViNmNjMzJhYWIyODkwYTE2MjlkNjY3YQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-26T09:48:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-26T09:48:32Z"}, "message": "alloc-pool.h (base_pool_allocator): Use placement new.\n\n2015-10-26  Richard Biener  <rguenther@suse.de>\n\n\t* alloc-pool.h (base_pool_allocator): Use placement new.\n\t(base_pool_allocator::remove): Likewise.  Compute size outside of\n\tflag_checking.\n\nFrom-SVN: r229312", "tree": {"sha": "da1ddcce6fe1aa85899bd7530b15d97fae837e40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da1ddcce6fe1aa85899bd7530b15d97fae837e40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5929c659186adc165b6cc32aab2890a1629d667a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5929c659186adc165b6cc32aab2890a1629d667a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5929c659186adc165b6cc32aab2890a1629d667a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5929c659186adc165b6cc32aab2890a1629d667a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "543a9bcd216d9a9fb377b7f84766cdcc858c21c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/543a9bcd216d9a9fb377b7f84766cdcc858c21c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/543a9bcd216d9a9fb377b7f84766cdcc858c21c0"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "cf6e87fb1abedf23b479fe9a8035a19ea37acf46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5929c659186adc165b6cc32aab2890a1629d667a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5929c659186adc165b6cc32aab2890a1629d667a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5929c659186adc165b6cc32aab2890a1629d667a", "patch": "@@ -1,3 +1,9 @@\n+2015-10-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* alloc-pool.h (base_pool_allocator): Use placement new.\n+\t(base_pool_allocator::remove): Likewise.  Compute size outside of\n+\tflag_checking.\n+\n 2015-10-26  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* builtins.c (do_real_to_int_conversion): New function."}, {"sha": "0dc05cdb7196b13f8ff9eae54ccb03c414718091", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5929c659186adc165b6cc32aab2890a1629d667a/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5929c659186adc165b6cc32aab2890a1629d667a/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=5929c659186adc165b6cc32aab2890a1629d667a", "patch": "@@ -363,7 +363,7 @@ base_pool_allocator <TBlockAllocator>::allocate ()\n \n \t  /* Make the block.  */\n \t  block = reinterpret_cast<char *> (TBlockAllocator::allocate ());\n-\t  block_header = (allocation_pool_list*) block;\n+\t  block_header = new (block) allocation_pool_list;\n \t  block += align_eight (sizeof (allocation_pool_list));\n \n \t  /* Throw it on the block list.  */\n@@ -414,6 +414,8 @@ template <typename TBlockAllocator>\n inline void\n base_pool_allocator <TBlockAllocator>::remove (void *object)\n {\n+  int size = m_elt_size - offsetof (allocation_object, u.data);\n+\n   if (flag_checking)\n     {\n       gcc_assert (m_initialized);\n@@ -423,14 +425,13 @@ base_pool_allocator <TBlockAllocator>::remove (void *object)\n \t      /* Check whether the PTR was allocated from POOL.  */\n \t      && m_id == allocation_object::get_instance (object)->id);\n \n-      int size = m_elt_size - offsetof (allocation_object, u.data);\n       memset (object, 0xaf, size);\n     }\n \n   /* Mark the element to be free.  */\n   allocation_object::get_instance (object)->id = 0;\n \n-  allocation_pool_list *header = (allocation_pool_list*) object;\n+  allocation_pool_list *header = new (object) allocation_pool_list;\n   header->next = m_returned_free_list;\n   m_returned_free_list = header;\n   VALGRIND_DISCARD (VALGRIND_MAKE_MEM_NOACCESS (object, size));"}]}