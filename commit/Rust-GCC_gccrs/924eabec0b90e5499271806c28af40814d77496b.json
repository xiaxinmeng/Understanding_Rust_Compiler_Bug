{"sha": "924eabec0b90e5499271806c28af40814d77496b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI0ZWFiZWMwYjkwZTU0OTkyNzE4MDZjMjhhZjQwODE0ZDc3NDk2Yg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-12-21T13:28:26Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-12-21T13:28:26Z"}, "message": "i376.md (UNSPEC_MS_TO_SYSV_CALL): New constant.\n\n\n\t* i376.md (UNSPEC_MS_TO_SYSV_CALL): New constant.\n\t(call_1_rex64_ms_sysv, call_value_0_rex64_ms_sysv,\n\tcall_value_1_rex64_ms_sysv): New patterns.\n\t* i386.c (function_arg_ms_64): Pass magical value of -2 as callarg.\n\t(ix86_expand_call): Emit extra clobbers for ms->sysv ABI calls.\n\nCo-Authored-By: Kai Tietz <kai.tietz@onevision.com>\n\nFrom-SVN: r142859", "tree": {"sha": "d5bde29db18ca4850d6b93694db130e4e61f45fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5bde29db18ca4850d6b93694db130e4e61f45fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/924eabec0b90e5499271806c28af40814d77496b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/924eabec0b90e5499271806c28af40814d77496b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/924eabec0b90e5499271806c28af40814d77496b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/924eabec0b90e5499271806c28af40814d77496b/comments", "author": null, "committer": null, "parents": [{"sha": "76a4a1bd8db1311ffd020b5c7b900fc762b9684a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a4a1bd8db1311ffd020b5c7b900fc762b9684a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76a4a1bd8db1311ffd020b5c7b900fc762b9684a"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "17054a96d0bd3815587c5a9dd5da8e316a558b24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924eabec0b90e5499271806c28af40814d77496b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924eabec0b90e5499271806c28af40814d77496b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=924eabec0b90e5499271806c28af40814d77496b", "patch": "@@ -1,3 +1,12 @@\n+2008-12-21  Jan Hubicka  <jh@suse.cz>\n+\t    Kai Tietz <kai.tietz@onevision.com>\n+\n+\t* i376.md (UNSPEC_MS_TO_SYSV_CALL): New constant.\n+\t(call_1_rex64_ms_sysv, call_value_0_rex64_ms_sysv,\n+\tcall_value_1_rex64_ms_sysv): New patterns.\n+\t* i386.c (function_arg_ms_64): Pass magical value of -2 as callarg.\n+\t(ix86_expand_call): Emit extra clobbers for ms->sysv ABI calls.\n+\n 2008-12-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.c (alpha_pad_noreturn): New static function."}, {"sha": "bae3f42657ad818cd614113c8d566270cb3dc646", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924eabec0b90e5499271806c28af40814d77496b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924eabec0b90e5499271806c28af40814d77496b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=924eabec0b90e5499271806c28af40814d77496b", "patch": "@@ -5690,9 +5690,10 @@ function_arg_ms_64 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n {\n   unsigned int regno;\n \n-  /* Avoid the AL settings for the Unix64 ABI.  */\n+  /* We need to add clobber for MS_ABI->SYSV ABI calls in expand_call.\n+     We use value of -2 to specify that current function call is MSABI.  */\n   if (mode == VOIDmode)\n-    return constm1_rtx;\n+    return GEN_INT (-2);\n \n   /* If we've run out of registers, it goes on the stack.  */\n   if (cum->nregs == 0)\n@@ -18095,11 +18096,16 @@ construct_plt_address (rtx symbol)\n \n void\n ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n-\t\t  rtx callarg2 ATTRIBUTE_UNUSED,\n+\t\t  rtx callarg2,\n \t\t  rtx pop, int sibcall)\n {\n   rtx use = NULL, call;\n+  enum calling_abi function_call_abi;\n \n+  if (callarg2 && INTVAL (callarg2) == -2)\n+    function_call_abi = MS_ABI;\n+  else\n+    function_call_abi = SYSV_ABI;\n   if (pop == const0_rtx)\n     pop = NULL;\n   gcc_assert (!TARGET_64BIT || !pop);\n@@ -18155,6 +18161,18 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n       pop = gen_rtx_PLUS (Pmode, stack_pointer_rtx, pop);\n       pop = gen_rtx_SET (VOIDmode, stack_pointer_rtx, pop);\n       call = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, call, pop));\n+      gcc_assert (ix86_cfun_abi () != MS_ABI || function_call_abi != SYSV_ABI);\n+    }\n+  /* We need to represent that SI and DI registers are clobbered by SYSV calls.\n+     */\n+  if (ix86_cfun_abi () == MS_ABI && function_call_abi == SYSV_ABI)\n+    {\n+      rtx clobber1 = gen_rtx_CLOBBER (DImode, gen_rtx_REG (DImode, SI_REG));\n+      rtx clobber2 = gen_rtx_CLOBBER (DImode, gen_rtx_REG (DImode, DI_REG));\n+      rtx unspec = gen_rtx_UNSPEC (VOIDmode, gen_rtvec (1, const0_rtx),\n+      \t\t\t\t   UNSPEC_MS_TO_SYSV_CALL);\n+      call = gen_rtx_PARALLEL (VOIDmode,\n+      \t\t\t       gen_rtvec (4, call, unspec, clobber1, clobber2));\n     }\n \n   call = emit_call_insn (call);"}, {"sha": "c7223899b4b3e28e5de86c47d524f16a82ef9323", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/924eabec0b90e5499271806c28af40814d77496b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/924eabec0b90e5499271806c28af40814d77496b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=924eabec0b90e5499271806c28af40814d77496b", "patch": "@@ -105,6 +105,7 @@\n    (UNSPEC_LFENCE\t\t45)\n    (UNSPEC_PSADBW\t\t46)\n    (UNSPEC_LDDQU\t\t47)\n+   (UNSPEC_MS_TO_SYSV_CALL\t48)\n \n    ; Generic math support\n    (UNSPEC_COPYSIGN\t\t50)\n@@ -15039,6 +15040,20 @@\n }\n   [(set_attr \"type\" \"call\")])\n \n+(define_insn \"*call_1_rex64_ms_sysv\"\n+  [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rsm\"))\n+\t (match_operand 1 \"\" \"\"))\n+   (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n+   (clobber (reg:DI SI_REG))\n+   (clobber (reg:DI DI_REG))]\n+  \"!SIBLING_CALL_P (insn) && TARGET_64BIT\"\n+{\n+  if (constant_call_address_operand (operands[0], Pmode))\n+    return \"call\\t%P0\";\n+  return \"call\\t%A0\";\n+}\n+  [(set_attr \"type\" \"call\")])\n+\n (define_insn \"*call_1_rex64_large\"\n   [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rm\"))\n \t (match_operand 1 \"\" \"\"))]\n@@ -21361,6 +21376,22 @@\n }\n   [(set_attr \"type\" \"callv\")])\n \n+(define_insn \"*call_value_0_rex64_ms_sysv\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:QI (match_operand:DI 1 \"constant_call_address_operand\" \"\"))\n+\t      (match_operand:DI 2 \"const_int_operand\" \"\")))\n+   (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n+   (clobber (reg:DI SI_REG))\n+   (clobber (reg:DI DI_REG))]\n+  \"!SIBLING_CALL_P (insn) && TARGET_64BIT\"\n+{\n+  if (SIBLING_CALL_P (insn))\n+    return \"jmp\\t%P1\";\n+  else\n+    return \"call\\t%P1\";\n+}\n+  [(set_attr \"type\" \"callv\")])\n+\n (define_insn \"*call_value_1\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:QI (match_operand:SI 1 \"call_insn_operand\" \"rsm\"))\n@@ -21398,6 +21429,21 @@\n }\n   [(set_attr \"type\" \"callv\")])\n \n+(define_insn \"*call_value_1_rex64_ms_sysv\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rsm\"))\n+\t      (match_operand:DI 2 \"\" \"\")))\n+   (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)\n+   (clobber (reg:DI SI_REG))\n+   (clobber (reg:DI DI_REG))]\n+  \"!SIBLING_CALL_P (insn) && TARGET_64BIT\"\n+{\n+  if (constant_call_address_operand (operands[1], Pmode))\n+    return \"call\\t%P1\";\n+  return \"call\\t%A1\";\n+}\n+  [(set_attr \"type\" \"callv\")])\n+\n (define_insn \"*call_value_1_rex64_large\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rm\"))"}]}