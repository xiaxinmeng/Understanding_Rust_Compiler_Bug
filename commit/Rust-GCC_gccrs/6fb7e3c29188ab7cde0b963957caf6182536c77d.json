{"sha": "6fb7e3c29188ab7cde0b963957caf6182536c77d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZiN2UzYzI5MTg4YWI3Y2RlMGI5NjM5NTdjYWY2MTgyNTM2Yzc3ZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-16T15:00:12Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-10-29T19:50:52Z"}, "message": "c++: Deducing type from initializer_list<auto> [PR93107]\n\nIn this testcase we weren't able to deduce b's type:\n\n  template<typename T> void Task() { }\n  auto b = { &Task<int> };\n\nbecause resolve_nondeduced_context doesn't iterate on the {}'s elements.\nSo make sure to look into {} too.  We don't need to handle nested {}\nhere.\n\nWe could either tweak resolve_nondeduced_context to handle CONSTRUCTORs\nor add a _ctor version, but then resolve_nondeduced_context_or_error\nwould need some changes too -- it'd have to check the result of a call\nto r_n_c for each element.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/93107\n\t* pt.c (do_auto_deduction): Call resolve_nondeduced_context for\n\tthe elements of a { } list.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/93107\n\t* g++.dg/cpp0x/initlist-deduce3.C: New test.", "tree": {"sha": "919de9b3602f3975a2f28e0e6bb7c1a5a73aa003", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/919de9b3602f3975a2f28e0e6bb7c1a5a73aa003"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fb7e3c29188ab7cde0b963957caf6182536c77d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb7e3c29188ab7cde0b963957caf6182536c77d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fb7e3c29188ab7cde0b963957caf6182536c77d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb7e3c29188ab7cde0b963957caf6182536c77d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79991e2348a864ace6ea2bf108a7502862f1129f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79991e2348a864ace6ea2bf108a7502862f1129f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79991e2348a864ace6ea2bf108a7502862f1129f"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "b569644514c7d3fce96338e515796749cccc368a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb7e3c29188ab7cde0b963957caf6182536c77d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb7e3c29188ab7cde0b963957caf6182536c77d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6fb7e3c29188ab7cde0b963957caf6182536c77d", "patch": "@@ -29241,7 +29241,13 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n   if (type == error_mark_node)\n     return error_mark_node;\n \n-  init = resolve_nondeduced_context (init, complain);\n+  if (BRACE_ENCLOSED_INITIALIZER_P (init))\n+    /* We don't recurse here because we can't deduce from a nested\n+       initializer_list.  */\n+    for (constructor_elt &elt : *CONSTRUCTOR_ELTS (init))\n+      elt.value = resolve_nondeduced_context (elt.value, complain);\n+  else\n+    init = resolve_nondeduced_context (init, complain);\n \n   if (context == adc_decomp_type\n       && auto_node == type"}, {"sha": "b8417d7bf0c1daa50d030b23ec4284df89c3bcf1", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-deduce3.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fb7e3c29188ab7cde0b963957caf6182536c77d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-deduce3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fb7e3c29188ab7cde0b963957caf6182536c77d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-deduce3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-deduce3.C?ref=6fb7e3c29188ab7cde0b963957caf6182536c77d", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/93107\n+// { dg-do compile { target c++11 } }\n+\n+using size_t = decltype(sizeof 0);\n+\n+namespace std {\n+  template<typename T> struct initializer_list {\n+    const T *ptr;\n+    size_t n;\n+    initializer_list(const T*, size_t);\n+  };\n+}\n+\n+template<typename T>\n+void Task() {}\n+\n+auto a = &Task<int>;\n+auto b = { &Task<int> };\n+auto e{ &Task<int> };\n+auto f = { &Task<int>, &Task<int> };\n+std::initializer_list<void(*)()> c = { &Task<int> };\n+auto d = { static_cast<void(*)()>(&Task<int>) };"}]}