{"sha": "dae840fcd34ceaac186cc603e4458aeb43d4063b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFlODQwZmNkMzRjZWFhYzE4NmNjNjAzZTQ0NThhZWI0M2Q0MDYzYg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2012-06-15T13:32:09Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2012-06-15T13:32:09Z"}, "message": "arm.md (addsf3, adddf3): Use s_register_operand.\n\n\t* arm.md (addsf3, adddf3): Use s_register_operand.\n\t(subsf3, subdf3): Likewise.\n\t(mulsf3, muldf3): Likewise.\n\t(difsf3, divdf3): Likewise.\n\t(movsfcc, movdfcc): Likewise.\n\t* predicates.md (f_register_operand): Delete.\n\t(arm_float_rhs_operand): Delete.\n\t(arm_float_add_operand): Delete.\n\t(arm_float_compare_operand): Use s_register_operand when\n\tthere's no VFP.\n\t(cirrus_register_operand): Delete.\n\t(cirrus_fp_register): Delete.\n\t(cirrus_shift_const): Delete.\n\t(cmpdi_operand): Remove Maverick support.\n\t* constraints.md (f, v, H): Delete constraints.\n\t(G): Update documentation.\n\t* arm.c (fp_consts_inited): Convert to bool.\n\t(strings_fp): Delete.\n\t(values_fp): Delete.\n\t(value_fp0): New variable.\n\t(init_fp_table): Simplify logic.\n\t(arm_const_double_rtx): Likewise.\n\t(fp_immediate_constant): Likewise.\n\t(fp_const_from_val): Likewise.\n\t(neg_const_double_rtx_ok_for_fpa): Delete.\n\t* doc/md.texi (ARM constraints): Update documentation.\n\nFrom-SVN: r188662", "tree": {"sha": "6d5e72466a9fd821a0853ef2af969d63ebdda3c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d5e72466a9fd821a0853ef2af969d63ebdda3c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dae840fcd34ceaac186cc603e4458aeb43d4063b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dae840fcd34ceaac186cc603e4458aeb43d4063b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dae840fcd34ceaac186cc603e4458aeb43d4063b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dae840fcd34ceaac186cc603e4458aeb43d4063b/comments", "author": null, "committer": null, "parents": [{"sha": "3ebde0e9e3028aded82176416029ef79e0423082", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebde0e9e3028aded82176416029ef79e0423082", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ebde0e9e3028aded82176416029ef79e0423082"}], "stats": {"total": 218, "additions": 65, "deletions": 153}, "files": [{"sha": "452ed40a0d7483aa32c8f9f85726bc844077d143", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae840fcd34ceaac186cc603e4458aeb43d4063b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae840fcd34ceaac186cc603e4458aeb43d4063b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dae840fcd34ceaac186cc603e4458aeb43d4063b", "patch": "@@ -1,3 +1,32 @@\n+2012-06-15  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.md (addsf3, adddf3): Use s_register_operand.\n+\t(subsf3, subdf3): Likewise.\n+\t(mulsf3, muldf3): Likewise.\n+\t(difsf3, divdf3): Likewise.\n+\t(movsfcc, movdfcc): Likewise.\n+\t* predicates.md (f_register_operand): Delete.\n+\t(arm_float_rhs_operand): Delete.\n+\t(arm_float_add_operand): Delete.\n+\t(arm_float_compare_operand): Use s_register_operand when\n+\tthere's no VFP.\n+\t(cirrus_register_operand): Delete.\n+\t(cirrus_fp_register): Delete.\n+\t(cirrus_shift_const): Delete.\n+\t(cmpdi_operand): Remove Maverick support.\n+\t* constraints.md (f, v, H): Delete constraints.\n+\t(G): Update documentation.\n+\t* arm.c (fp_consts_inited): Convert to bool.\n+\t(strings_fp): Delete.\n+\t(values_fp): Delete.\n+\t(value_fp0): New variable.\n+\t(init_fp_table): Simplify logic.\n+\t(arm_const_double_rtx): Likewise.\n+\t(fp_immediate_constant): Likewise.\n+\t(fp_const_from_val): Likewise.\n+\t(neg_const_double_rtx_ok_for_fpa): Delete.\n+\t* doc/md.texi (ARM constraints): Update documentation.\n+\n 2012-06-15  Ulrich Weigand  <ulrich.weigand@linaro.org>\n \n \tPR tree-optimization/53636"}, {"sha": "bce62bbd8ad5bb03830fccd8b0d0617e49155324", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 11, "deletions": 55, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae840fcd34ceaac186cc603e4458aeb43d4063b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae840fcd34ceaac186cc603e4458aeb43d4063b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=dae840fcd34ceaac186cc603e4458aeb43d4063b", "patch": "@@ -8676,33 +8676,18 @@ arm_cortex_a5_branch_cost (bool speed_p, bool predictable_p)\n   return speed_p ? 0 : arm_default_branch_cost (speed_p, predictable_p);\n }\n \n-static int fp_consts_inited = 0;\n+static bool fp_consts_inited = false;\n \n-/* Only zero is valid for VFP.  Other values are also valid for FPA.  */\n-static const char * const strings_fp[8] =\n-{\n-  \"0\",   \"1\",   \"2\",   \"3\",\n-  \"4\",   \"5\",   \"0.5\", \"10\"\n-};\n-\n-static REAL_VALUE_TYPE values_fp[8];\n+static REAL_VALUE_TYPE value_fp0;\n \n static void\n init_fp_table (void)\n {\n-  int i;\n   REAL_VALUE_TYPE r;\n \n-  if (TARGET_VFP)\n-    fp_consts_inited = 1;\n-  else\n-    fp_consts_inited = 8;\n-\n-  for (i = 0; i < fp_consts_inited; i++)\n-    {\n-      r = REAL_VALUE_ATOF (strings_fp[i], DFmode);\n-      values_fp[i] = r;\n-    }\n+  r = REAL_VALUE_ATOF (\"0\", DFmode);\n+  value_fp0 = r;\n+  fp_consts_inited = true;\n }\n \n /* Return TRUE if rtx X is a valid immediate FP constant.  */\n@@ -8719,36 +8704,12 @@ arm_const_double_rtx (rtx x)\n   if (REAL_VALUE_MINUS_ZERO (r))\n     return 0;\n \n-  for (i = 0; i < fp_consts_inited; i++)\n-    if (REAL_VALUES_EQUAL (r, values_fp[i]))\n-      return 1;\n-\n-  return 0;\n-}\n-\n-/* Return TRUE if rtx X is a valid immediate FPA constant.  */\n-int\n-neg_const_double_rtx_ok_for_fpa (rtx x)\n-{\n-  REAL_VALUE_TYPE r;\n-  int i;\n-\n-  if (!fp_consts_inited)\n-    init_fp_table ();\n-\n-  REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-  r = real_value_negate (&r);\n-  if (REAL_VALUE_MINUS_ZERO (r))\n-    return 0;\n-\n-  for (i = 0; i < 8; i++)\n-    if (REAL_VALUES_EQUAL (r, values_fp[i]))\n-      return 1;\n+  if (REAL_VALUES_EQUAL (r, value_fp0))\n+    return 1;\n \n   return 0;\n }\n \n-\n /* VFPv3 has a fairly wide range of representable immediates, formed from\n    \"quarter-precision\" floating-point values. These can be evaluated using this\n    formula (with ^ for exponentiation):\n@@ -13715,11 +13676,9 @@ fp_immediate_constant (rtx x)\n     init_fp_table ();\n \n   REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n-  for (i = 0; i < 8; i++)\n-    if (REAL_VALUES_EQUAL (r, values_fp[i]))\n-      return strings_fp[i];\n \n-  gcc_unreachable ();\n+  gcc_assert (REAL_VALUES_EQUAL (r, value_fp0));\n+  return \"0\";\n }\n \n /* As for fp_immediate_constant, but value is passed directly, not in rtx.  */\n@@ -13731,11 +13690,8 @@ fp_const_from_val (REAL_VALUE_TYPE *r)\n   if (!fp_consts_inited)\n     init_fp_table ();\n \n-  for (i = 0; i < 8; i++)\n-    if (REAL_VALUES_EQUAL (*r, values_fp[i]))\n-      return strings_fp[i];\n-\n-  gcc_unreachable ();\n+  gcc_assert (REAL_VALUES_EQUAL (*r, value_fp0));\n+  return \"0\";\n }\n \n /* Output the operands of a LDM/STM instruction to STREAM."}, {"sha": "dfa0ace544794e631229106299dcf14a71b28a39", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae840fcd34ceaac186cc603e4458aeb43d4063b/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae840fcd34ceaac186cc603e4458aeb43d4063b/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=dae840fcd34ceaac186cc603e4458aeb43d4063b", "patch": "@@ -1060,15 +1060,15 @@\n (define_expand \"addsf3\"\n   [(set (match_operand:SF          0 \"s_register_operand\" \"\")\n \t(plus:SF (match_operand:SF 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:SF 2 \"arm_float_add_operand\" \"\")))]\n+\t\t (match_operand:SF 2 \"s_register_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\n \")\n \n (define_expand \"adddf3\"\n   [(set (match_operand:DF          0 \"s_register_operand\" \"\")\n \t(plus:DF (match_operand:DF 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:DF 2 \"arm_float_add_operand\" \"\")))]\n+\t\t (match_operand:DF 2 \"s_register_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"\n \")\n@@ -1291,16 +1291,16 @@\n \n (define_expand \"subsf3\"\n   [(set (match_operand:SF           0 \"s_register_operand\" \"\")\n-\t(minus:SF (match_operand:SF 1 \"arm_float_rhs_operand\" \"\")\n-\t\t  (match_operand:SF 2 \"arm_float_rhs_operand\" \"\")))]\n+\t(minus:SF (match_operand:SF 1 \"s_register_operand\" \"\")\n+\t\t  (match_operand:SF 2 \"s_register_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\n \")\n \n (define_expand \"subdf3\"\n   [(set (match_operand:DF           0 \"s_register_operand\" \"\")\n-\t(minus:DF (match_operand:DF 1 \"arm_float_rhs_operand\" \"\")\n-\t\t  (match_operand:DF 2 \"arm_float_rhs_operand\" \"\")))]\n+\t(minus:DF (match_operand:DF 1 \"s_register_operand\" \"\")\n+\t\t  (match_operand:DF 2 \"s_register_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"\n \")\n@@ -1898,15 +1898,15 @@\n (define_expand \"mulsf3\"\n   [(set (match_operand:SF          0 \"s_register_operand\" \"\")\n \t(mult:SF (match_operand:SF 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:SF 2 \"arm_float_rhs_operand\" \"\")))]\n+\t\t (match_operand:SF 2 \"s_register_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\n \")\n \n (define_expand \"muldf3\"\n   [(set (match_operand:DF          0 \"s_register_operand\" \"\")\n \t(mult:DF (match_operand:DF 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:DF 2 \"arm_float_rhs_operand\" \"\")))]\n+\t\t (match_operand:DF 2 \"s_register_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"\n \")\n@@ -1915,15 +1915,15 @@\n \n (define_expand \"divsf3\"\n   [(set (match_operand:SF 0 \"s_register_operand\" \"\")\n-\t(div:SF (match_operand:SF 1 \"arm_float_rhs_operand\" \"\")\n-\t\t(match_operand:SF 2 \"arm_float_rhs_operand\" \"\")))]\n+\t(div:SF (match_operand:SF 1 \"s_register_operand\" \"\")\n+\t\t(match_operand:SF 2 \"s_register_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP\"\n   \"\")\n \n (define_expand \"divdf3\"\n   [(set (match_operand:DF 0 \"s_register_operand\" \"\")\n-\t(div:DF (match_operand:DF 1 \"arm_float_rhs_operand\" \"\")\n-\t\t(match_operand:DF 2 \"arm_float_rhs_operand\" \"\")))]\n+\t(div:DF (match_operand:DF 1 \"s_register_operand\" \"\")\n+\t\t(match_operand:DF 2 \"s_register_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP_DOUBLE\"\n   \"\")\n \f\n@@ -8037,7 +8037,7 @@\n   [(set (match_operand:SF 0 \"s_register_operand\" \"\")\n \t(if_then_else:SF (match_operand 1 \"expandable_comparison_operator\" \"\")\n \t\t\t (match_operand:SF 2 \"s_register_operand\" \"\")\n-\t\t\t (match_operand:SF 3 \"arm_float_add_operand\" \"\")))]\n+\t\t\t (match_operand:SF 3 \"s_register_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\n   {\n@@ -8059,7 +8059,7 @@\n   [(set (match_operand:DF 0 \"s_register_operand\" \"\")\n \t(if_then_else:DF (match_operand 1 \"expandable_comparison_operator\" \"\")\n \t\t\t (match_operand:DF 2 \"s_register_operand\" \"\")\n-\t\t\t (match_operand:DF 3 \"arm_float_add_operand\" \"\")))]\n+\t\t\t (match_operand:DF 3 \"s_register_operand\" \"\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP_DOUBLE\"\n   \"\n   {"}, {"sha": "c1d881e5e8637f881deb1bc78c817c7f7005d802", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae840fcd34ceaac186cc603e4458aeb43d4063b/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae840fcd34ceaac186cc603e4458aeb43d4063b/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=dae840fcd34ceaac186cc603e4458aeb43d4063b", "patch": "@@ -19,14 +19,16 @@\n ;; <http://www.gnu.org/licenses/>.\n \n ;; The following register constraints have been used:\n-;; - in ARM/Thumb-2 state: f, t, v, w, x, y, z\n+;; - in ARM/Thumb-2 state: t, w, x, y, z\n ;; - in Thumb state: h, b\n ;; - in both states: l, c, k\n ;; In ARM state, 'l' is an alias for 'r'\n+;; 'f' and 'v' were previously used for FPA and MAVERICK registers.\n \n ;; The following normal constraints have been used:\n-;; in ARM/Thumb-2 state: G, H, I, j, J, K, L, M\n+;; in ARM/Thumb-2 state: G, I, j, J, K, L, M\n ;; in Thumb-1 state: I, J, K, L, M, N, O\n+;; 'H' was previously used for FPA.\n \n ;; The following multi-letter normal constraints have been used:\n ;; in ARM/Thumb-2 state: Da, Db, Dc, Dn, Dl, DL, Dv, Dy, Di, Dt, Dz\n@@ -39,15 +41,9 @@\n ;; in Thumb state: Uu, Uw\n \n \n-(define_register_constraint \"f\" \"TARGET_ARM ? FPA_REGS : NO_REGS\"\n- \"Legacy FPA registers @code{f0}-@code{f7}.\")\n-\n (define_register_constraint \"t\" \"TARGET_32BIT ? VFP_LO_REGS : NO_REGS\"\n  \"The VFP registers @code{s0}-@code{s31}.\")\n \n-(define_register_constraint \"v\" \"TARGET_ARM ? CIRRUS_REGS : NO_REGS\"\n- \"The Cirrus Maverick co-processor registers.\")\n-\n (define_register_constraint \"w\"\n   \"TARGET_32BIT ? (TARGET_VFPD32 ? VFP_REGS : VFP_LO_REGS) : NO_REGS\"\n  \"The VFP registers @code{d0}-@code{d15}, or @code{d0}-@code{d31} for VFPv3.\")\n@@ -213,15 +209,10 @@\n        (match_test \"TARGET_THUMB2 && ival >= 0 && ival <= 255\")))\n \n (define_constraint \"G\"\n- \"In ARM/Thumb-2 state a valid FPA immediate constant.\"\n+ \"In ARM/Thumb-2 state the floating-point constant 0.\"\n  (and (match_code \"const_double\")\n       (match_test \"TARGET_32BIT && arm_const_double_rtx (op)\")))\n \n-(define_constraint \"H\"\n- \"In ARM/Thumb-2 state a valid FPA immediate constant when negated.\"\n- (and (match_code \"const_double\")\n-      (match_test \"TARGET_32BIT && neg_const_double_rtx_ok_for_fpa (op)\")))\n-\n (define_constraint \"Dz\"\n  \"@internal\n   In ARM/Thumb-2 state a vector of constant zeros.\""}, {"sha": "355b77281f54ea50b01a6d9cfb006ff08659e62e", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 4, "deletions": 60, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae840fcd34ceaac186cc603e4458aeb43d4063b/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae840fcd34ceaac186cc603e4458aeb43d4063b/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=dae840fcd34ceaac186cc603e4458aeb43d4063b", "patch": "@@ -60,19 +60,6 @@\n \t      || REGNO (op) >= FIRST_PSEUDO_REGISTER));\n })\n \n-(define_predicate \"f_register_operand\"\n-  (match_code \"reg,subreg\")\n-{\n-  if (GET_CODE (op) == SUBREG)\n-    op = SUBREG_REG (op);\n-\n-  /* We don't consider registers whose class is NO_REGS\n-     to be a register operand.  */\n-  return (GET_CODE (op) == REG\n-\t  && (REGNO (op) >= FIRST_PSEUDO_REGISTER\n-\t      || REGNO_REG_CLASS (REGNO (op)) == FPA_REGS));\n-})\n-\n (define_predicate \"vfp_register_operand\"\n   (match_code \"reg,subreg\")\n {\n@@ -189,18 +176,6 @@\n \t\t\t || (GET_CODE (op) == REG\n \t\t\t     && REGNO (op) >= FIRST_PSEUDO_REGISTER)))\")))\n \n-;; True for valid operands for the rhs of an floating point insns.\n-;;   Allows regs or certain consts on FPA, just regs for everything else.\n-(define_predicate \"arm_float_rhs_operand\"\n-  (ior (match_operand 0 \"s_register_operand\")\n-       (and (match_code \"const_double\")\n-\t    (match_test \"TARGET_FPA && arm_const_double_rtx (op)\"))))\n-\n-(define_predicate \"arm_float_add_operand\"\n-  (ior (match_operand 0 \"arm_float_rhs_operand\")\n-       (and (match_code \"const_double\")\n-\t    (match_test \"TARGET_FPA && neg_const_double_rtx_ok_for_fpa (op)\"))))\n-\n (define_predicate \"vfp_compare_operand\"\n   (ior (match_operand 0 \"s_register_operand\")\n        (and (match_code \"const_double\")\n@@ -209,7 +184,7 @@\n (define_predicate \"arm_float_compare_operand\"\n   (if_then_else (match_test \"TARGET_VFP\")\n \t\t(match_operand 0 \"vfp_compare_operand\")\n-\t\t(match_operand 0 \"arm_float_rhs_operand\")))\n+\t\t(match_operand 0 \"s_register_operand\")))\n \n ;; True for valid index operands.\n (define_predicate \"index_operand\"\n@@ -464,36 +439,8 @@\n \n ;;-------------------------------------------------------------------------\n ;;\n-;; MAVERICK predicates\n-;;\n-\n-(define_predicate \"cirrus_register_operand\"\n-  (match_code \"reg,subreg\")\n-{\n-  if (GET_CODE (op) == SUBREG)\n-    op = SUBREG_REG (op);\n-\n-  return (GET_CODE (op) == REG\n-\t  && (REGNO_REG_CLASS (REGNO (op)) == CIRRUS_REGS\n-\t      || REGNO_REG_CLASS (REGNO (op)) == GENERAL_REGS));\n-})\n-\n-(define_predicate \"cirrus_fp_register\"\n-  (match_code \"reg,subreg\")\n-{\n-  if (GET_CODE (op) == SUBREG)\n-    op = SUBREG_REG (op);\n-\n-  return (GET_CODE (op) == REG\n-\t  && (REGNO (op) >= FIRST_PSEUDO_REGISTER\n-\t      || REGNO_REG_CLASS (REGNO (op)) == CIRRUS_REGS));\n-})\n-\n-(define_predicate \"cirrus_shift_const\"\n-  (and (match_code \"const_int\")\n-       (match_test \"((unsigned HOST_WIDE_INT) INTVAL (op)) < 64\")))\n-\n ;; iWMMXt predicates\n+;;\n \n (define_predicate \"imm_or_reg_operand\"\n   (ior (match_operand 0 \"immediate_operand\")\n@@ -563,11 +510,8 @@\n ;; Predicates for named expanders that overlap multiple ISAs.\n \n (define_predicate \"cmpdi_operand\"\n-  (if_then_else (match_test \"TARGET_HARD_FLOAT && TARGET_MAVERICK\")\n-\t\t(and (match_test \"TARGET_ARM\")\n-\t\t     (match_operand 0 \"cirrus_fp_register\"))\n-\t\t(and (match_test \"TARGET_32BIT\")\n-\t\t     (match_operand 0 \"arm_di_operand\"))))\n+  (and (match_test \"TARGET_32BIT\")\n+       (match_operand 0 \"arm_di_operand\")))\n \n ;; True if the operand is memory reference suitable for a ldrex/strex.\n (define_predicate \"arm_sync_memory_operand\""}, {"sha": "50fa2f9d2a5c14b333432789f62ecf818ea29798", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dae840fcd34ceaac186cc603e4458aeb43d4063b/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dae840fcd34ceaac186cc603e4458aeb43d4063b/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=dae840fcd34ceaac186cc603e4458aeb43d4063b", "patch": "@@ -1653,21 +1653,13 @@ table heading for each architecture is the definitive reference for\n the meanings of that architecture's constraints.\n \n @table @emph\n-@item ARM family---@file{config/arm/arm.h}\n+@item ARM family---@file{config/arm/constraints.md}\n @table @code\n-@item f\n-Floating-point register\n-\n @item w\n VFP floating-point register\n \n-@item F\n-One of the floating-point constants 0.0, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0\n-or 10.0\n-\n @item G\n-Floating-point constant that would satisfy the constraint @samp{F} if it\n-were negated\n+The floating-point constant 0.0\n \n @item I\n Integer that is valid as an immediate operand in a data processing"}]}