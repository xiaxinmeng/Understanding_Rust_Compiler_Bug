{"sha": "4711983f43bd4f40e5b58f288afcd3ad844e241b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcxMTk4M2Y0M2JkNGY0MGU1YjU4ZjI4OGFmY2QzYWQ4NDRlMjQxYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-09-10T19:17:24Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-09-10T19:17:24Z"}, "message": "Stop reload1.c warning from breaking bootstrap\n\nSome host-target combinations get bogus warnings about orig_dup\nbeing used uninitialized.  I tried to coerce the current uninit\npass to handle this case, but the patch I ended up with only worked\nby accident because of the strange way in which the pass handles\nlimit cases.  (If we have more than MAX_NUM_CHAINS chains, it silently\ndrops the excess chains and continues regardless, so it's quite easy\nto come up with cases where the predicates for either the definition\nor the use consider an arbitrary subset of the actual conditions.)\n\nFor now this patch turns -Wmaybe-uninitialized into a warning for\nthe affacted function.  It will be a warning even if someone turns\noff warnings on the command line, but I don't think that's important.\n\nBootstrapped and regression-tested on x86_64-linux-gnu.  Also tested\nwith a cross-compiler to sparc-linux-gnu (which also triggered the\nwarning for me).\n\ngcc/\n\t* reload1.c (elimination_costs_in_insn): Locally turn\n\t-Wmaybe-uninitialized into a warning.\n\nFrom-SVN: r227658", "tree": {"sha": "8f54e2e1ba1c7ef0538e010751160b6e6f90dc77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f54e2e1ba1c7ef0538e010751160b6e6f90dc77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4711983f43bd4f40e5b58f288afcd3ad844e241b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4711983f43bd4f40e5b58f288afcd3ad844e241b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4711983f43bd4f40e5b58f288afcd3ad844e241b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4711983f43bd4f40e5b58f288afcd3ad844e241b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec23e5b3950ab5a907aecdb0860340b86702ed13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec23e5b3950ab5a907aecdb0860340b86702ed13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec23e5b3950ab5a907aecdb0860340b86702ed13"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "a9a6fbd77b83df4ef2b1aabcaefc3215a8ec8469", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4711983f43bd4f40e5b58f288afcd3ad844e241b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4711983f43bd4f40e5b58f288afcd3ad844e241b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4711983f43bd4f40e5b58f288afcd3ad844e241b", "patch": "@@ -1,3 +1,8 @@\n+2015-09-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* reload1.c (elimination_costs_in_insn): Locally turn\n+\t-Wmaybe-uninitialized into a warning.\n+\n 2015-09-10  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* shrink-wrap.c (requires_stack_frame_p): Make static."}, {"sha": "c7cc37bc94f1467c9ca7b3baebe12bbd9cd810d6", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4711983f43bd4f40e5b58f288afcd3ad844e241b/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4711983f43bd4f40e5b58f288afcd3ad844e241b/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=4711983f43bd4f40e5b58f288afcd3ad844e241b", "patch": "@@ -3636,6 +3636,8 @@ eliminate_regs_in_insn (rtx_insn *insn, int replace)\n    eliminations in its operands and record cases where eliminating a reg with\n    an invariant equivalence would add extra cost.  */\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic warning \"-Wmaybe-uninitialized\"\n static void\n elimination_costs_in_insn (rtx_insn *insn)\n {\n@@ -3785,6 +3787,7 @@ elimination_costs_in_insn (rtx_insn *insn)\n \n   return;\n }\n+#pragma GCC diagnostic pop\n \n /* Loop through all elimination pairs.\n    Recalculate the number not at initial offset."}]}