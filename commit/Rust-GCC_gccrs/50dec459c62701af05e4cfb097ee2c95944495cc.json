{"sha": "50dec459c62701af05e4cfb097ee2c95944495cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBkZWM0NTljNjI3MDFhZjA1ZTRjZmIwOTdlZTJjOTU5NDQ0OTVjYw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2017-11-20T13:26:39Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2017-11-20T13:26:39Z"}, "message": "VRP: x+1 and -x cannot be INT_MIN\n\n2017-11-20  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* vr-values.c (extract_range_from_binary_expr): Use a full range\n\tfor VR_VARYING.\n\ngcc/testsuite/\n\tPR testsuite/82951\n\t* gcc.c-torture/execute/20040409-1.c: Move invalid tests...\n\t* gcc.c-torture/execute/20040409-1w.c: ... here with -fwrapv.\n\t* gcc.c-torture/execute/20040409-2.c: Move invalid tests...\n\t* gcc.c-torture/execute/20040409-2w.c: ... here with -fwrapv.\n\t* gcc.c-torture/execute/20040409-3.c: Move invalid tests...\n\t* gcc.c-torture/execute/20040409-3w.c: ... here with -fwrapv.\n\t* gcc.dg/tree-ssa/cmpmul-1.c: Tweak condition.\n\t* gcc.dg/tree-ssa/vrp118.c: New file.\n\nFrom-SVN: r254954", "tree": {"sha": "c2030da4e2fde65a2785961d95230a9465028600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2030da4e2fde65a2785961d95230a9465028600"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50dec459c62701af05e4cfb097ee2c95944495cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50dec459c62701af05e4cfb097ee2c95944495cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50dec459c62701af05e4cfb097ee2c95944495cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50dec459c62701af05e4cfb097ee2c95944495cc/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9aab553436aa25a1306cdd03c0fae107828e8725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aab553436aa25a1306cdd03c0fae107828e8725", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aab553436aa25a1306cdd03c0fae107828e8725"}], "stats": {"total": 404, "additions": 279, "deletions": 125}, "files": [{"sha": "11e515ef84df907cd37eaf2dfaf580a9979a7e83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50dec459c62701af05e4cfb097ee2c95944495cc", "patch": "@@ -1,3 +1,8 @@\n+2017-11-20  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* vr-values.c (extract_range_from_binary_expr): Use a full range\n+\tfor VR_VARYING.\n+\n 2017-11-20  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \t* config/arm/arm.md (R4_REGNUM): Define constant."}, {"sha": "35fd8dfe0a9b4d4be03300aa91d4aa71ffefd1d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50dec459c62701af05e4cfb097ee2c95944495cc", "patch": "@@ -1,3 +1,15 @@\n+2017-11-20  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR testsuite/82951\n+\t* gcc.c-torture/execute/20040409-1.c: Move invalid tests...\n+\t* gcc.c-torture/execute/20040409-1w.c: ... here with -fwrapv.\n+\t* gcc.c-torture/execute/20040409-2.c: Move invalid tests...\n+\t* gcc.c-torture/execute/20040409-2w.c: ... here with -fwrapv.\n+\t* gcc.c-torture/execute/20040409-3.c: Move invalid tests...\n+\t* gcc.c-torture/execute/20040409-3w.c: ... here with -fwrapv.\n+\t* gcc.dg/tree-ssa/cmpmul-1.c: Tweak condition.\n+\t* gcc.dg/tree-ssa/vrp118.c: New file.\n+\n 2017-11-20  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* g++.dg/pr82836.C: Require int128, __float128 support."}, {"sha": "d9649ab5a19f6713a24691ceb01fefca3d66ae2f", "filename": "gcc/testsuite/gcc.c-torture/execute/20040409-1.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-1.c?ref=50dec459c62701af05e4cfb097ee2c95944495cc", "patch": "@@ -12,21 +12,11 @@ unsigned int test1u(unsigned int x)\n   return x ^ (unsigned int)INT_MIN;\n }\n \n-int test2(int x)\n-{\n-  return x + INT_MIN;\n-}\n-\n unsigned int test2u(unsigned int x)\n {\n   return x + (unsigned int)INT_MIN;\n }\n \n-int test3(int x)\n-{\n-  return x - INT_MIN;\n-}\n-\n unsigned int test3u(unsigned int x)\n {\n   return x - (unsigned int)INT_MIN;\n@@ -44,24 +34,12 @@ unsigned int test4u(unsigned int x)\n   return x ^ y;\n }\n \n-int test5(int x)\n-{\n-  int y = INT_MIN;\n-  return x + y;\n-}\n-\n unsigned int test5u(unsigned int x)\n {\n   unsigned int y = (unsigned int)INT_MIN;\n   return x + y;\n }\n \n-int test6(int x)\n-{\n-  int y = INT_MIN;\n-  return x - y;\n-}\n-\n unsigned int test6u(unsigned int x)\n {\n   unsigned int y = (unsigned int)INT_MIN;\n@@ -74,16 +52,8 @@ void test(int a, int b)\n {\n   if (test1(a) != b)\n     abort();\n-  if (test2(a) != b)\n-    abort();\n-  if (test3(a) != b)\n-    abort();\n   if (test4(a) != b)\n     abort();\n-  if (test5(a) != b)\n-    abort();\n-  if (test6(a) != b)\n-    abort();\n }\n \n void testu(unsigned int a, unsigned int b)"}, {"sha": "bd0157dd8f09f46361bc6c069983c4a863be7e87", "filename": "gcc/testsuite/gcc.c-torture/execute/20040409-1w.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-1w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-1w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-1w.c?ref=50dec459c62701af05e4cfb097ee2c95944495cc", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-additional-options \"-fwrapv\" } */\n+\n+#include <limits.h>\n+\n+extern void abort ();\n+\n+int test2(int x)\n+{\n+  return x + INT_MIN;\n+}\n+\n+int test3(int x)\n+{\n+  return x - INT_MIN;\n+}\n+\n+int test5(int x)\n+{\n+  int y = INT_MIN;\n+  return x + y;\n+}\n+\n+int test6(int x)\n+{\n+  int y = INT_MIN;\n+  return x - y;\n+}\n+\n+\n+\n+void test(int a, int b)\n+{\n+  if (test2(a) != b)\n+    abort();\n+  if (test3(a) != b)\n+    abort();\n+  if (test5(a) != b)\n+    abort();\n+  if (test6(a) != b)\n+    abort();\n+}\n+\n+\n+int main()\n+{\n+#if INT_MAX == 2147483647\n+  test(0x00000000,0x80000000);\n+  test(0x80000000,0x00000000);\n+  test(0x12345678,0x92345678);\n+  test(0x92345678,0x12345678);\n+  test(0x7fffffff,0xffffffff);\n+  test(0xffffffff,0x7fffffff);\n+#endif\n+\n+#if INT_MAX == 32767\n+  test(0x0000,0x8000);\n+  test(0x8000,0x0000);\n+  test(0x1234,0x9234);\n+  test(0x9234,0x1234);\n+  test(0x7fff,0xffff);\n+  test(0xffff,0x7fff);\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "c04c7be373963b96d548497d9244a727c67cc19a", "filename": "gcc/testsuite/gcc.c-torture/execute/20040409-2.c", "status": "modified", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-2.c?ref=50dec459c62701af05e4cfb097ee2c95944495cc", "patch": "@@ -22,41 +22,21 @@ unsigned int test2u(unsigned int x)\n   return (x ^ 0x1234) ^ (unsigned int)INT_MIN;\n }\n \n-int test3(int x)\n-{\n-  return (x + INT_MIN) ^ 0x1234;\n-}\n-\n unsigned int test3u(unsigned int x)\n {\n   return (x + (unsigned int)INT_MIN) ^ 0x1234;\n }\n \n-int test4(int x)\n-{\n-  return (x ^ 0x1234) + INT_MIN;\n-}\n-\n unsigned int test4u(unsigned int x)\n {\n   return (x ^ 0x1234) + (unsigned int)INT_MIN;\n }\n \n-int test5(int x)\n-{\n-  return (x - INT_MIN) ^ 0x1234;\n-}\n-\n unsigned int test5u(unsigned int x)\n {\n   return (x - (unsigned int)INT_MIN) ^ 0x1234;\n }\n \n-int test6(int x)\n-{\n-  return (x ^ 0x1234) - INT_MIN;\n-}\n-\n unsigned int test6u(unsigned int x)\n {\n   return (x ^ 0x1234) - (unsigned int)INT_MIN;\n@@ -90,55 +70,27 @@ unsigned int test8u(unsigned int x)\n   return (x ^ y) ^ z;\n }\n \n-int test9(int x)\n-{\n-  int y = INT_MIN;\n-  int z = 0x1234;\n-  return (x + y) ^ z;\n-}\n-\n unsigned int test9u(unsigned int x)\n {\n   unsigned int y = (unsigned int)INT_MIN;\n   unsigned int z = 0x1234;\n   return (x + y) ^ z;\n }\n \n-int test10(int x)\n-{\n-  int y = 0x1234;\n-  int z = INT_MIN;\n-  return (x ^ y) + z;\n-}\n-\n unsigned int test10u(unsigned int x)\n {\n   unsigned int y = 0x1234;\n   unsigned int z = (unsigned int)INT_MIN;\n   return (x ^ y) + z;\n }\n \n-int test11(int x)\n-{\n-  int y = INT_MIN;\n-  int z = 0x1234;\n-  return (x - y) ^ z;\n-}\n-\n unsigned int test11u(unsigned int x)\n {\n   unsigned int y = (unsigned int)INT_MIN;\n   unsigned int z = 0x1234;\n   return (x - y) ^ z;\n }\n \n-int test12(int x)\n-{\n-  int y = 0x1234;\n-  int z = INT_MIN;\n-  return (x ^ y) - z;\n-}\n-\n unsigned int test12u(unsigned int x)\n {\n   unsigned int y = 0x1234;\n@@ -153,26 +105,10 @@ void test(int a, int b)\n     abort();\n   if (test2(a) != b)\n     abort();\n-  if (test3(a) != b)\n-    abort();\n-  if (test4(a) != b)\n-    abort();\n-  if (test5(a) != b)\n-    abort();\n-  if (test6(a) != b)\n-    abort();\n   if (test7(a) != b)\n     abort();\n   if (test8(a) != b)\n     abort();\n-  if (test9(a) != b)\n-    abort();\n-  if (test10(a) != b)\n-    abort();\n-  if (test11(a) != b)\n-    abort();\n-  if (test12(a) != b)\n-    abort();\n }\n \n void testu(unsigned int a, unsigned int b)"}, {"sha": "f6c5f2c45d95a4ee82ebd7e05cefd4f0c1ea7ba9", "filename": "gcc/testsuite/gcc.c-torture/execute/20040409-2w.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-2w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-2w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-2w.c?ref=50dec459c62701af05e4cfb097ee2c95944495cc", "patch": "@@ -0,0 +1,99 @@\n+/* { dg-additional-options \"-fwrapv\" } */\n+\n+#include <limits.h>\n+\n+extern void abort ();\n+\n+int test3(int x)\n+{\n+  return (x + INT_MIN) ^ 0x1234;\n+}\n+\n+int test4(int x)\n+{\n+  return (x ^ 0x1234) + INT_MIN;\n+}\n+\n+int test5(int x)\n+{\n+  return (x - INT_MIN) ^ 0x1234;\n+}\n+\n+int test6(int x)\n+{\n+  return (x ^ 0x1234) - INT_MIN;\n+}\n+\n+int test9(int x)\n+{\n+  int y = INT_MIN;\n+  int z = 0x1234;\n+  return (x + y) ^ z;\n+}\n+\n+int test10(int x)\n+{\n+  int y = 0x1234;\n+  int z = INT_MIN;\n+  return (x ^ y) + z;\n+}\n+\n+int test11(int x)\n+{\n+  int y = INT_MIN;\n+  int z = 0x1234;\n+  return (x - y) ^ z;\n+}\n+\n+int test12(int x)\n+{\n+  int y = 0x1234;\n+  int z = INT_MIN;\n+  return (x ^ y) - z;\n+}\n+\n+\n+void test(int a, int b)\n+{\n+  if (test3(a) != b)\n+    abort();\n+  if (test4(a) != b)\n+    abort();\n+  if (test5(a) != b)\n+    abort();\n+  if (test6(a) != b)\n+    abort();\n+  if (test9(a) != b)\n+    abort();\n+  if (test10(a) != b)\n+    abort();\n+  if (test11(a) != b)\n+    abort();\n+  if (test12(a) != b)\n+    abort();\n+}\n+\n+\n+int main()\n+{\n+#if INT_MAX == 2147483647\n+  test(0x00000000,0x80001234);\n+  test(0x00001234,0x80000000);\n+  test(0x80000000,0x00001234);\n+  test(0x80001234,0x00000000);\n+  test(0x7fffffff,0xffffedcb);\n+  test(0xffffffff,0x7fffedcb);\n+#endif\n+\n+#if INT_MAX == 32767\n+  test(0x0000,0x9234);\n+  test(0x1234,0x8000);\n+  test(0x8000,0x1234);\n+  test(0x9234,0x0000);\n+  test(0x7fff,0xedcb);\n+  test(0xffff,0x6dcb);\n+#endif\n+\n+  return 0;\n+}\n+"}, {"sha": "279cab1803b65ffb8bab282869c0d289f422add2", "filename": "gcc/testsuite/gcc.c-torture/execute/20040409-3.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-3.c?ref=50dec459c62701af05e4cfb097ee2c95944495cc", "patch": "@@ -12,21 +12,11 @@ unsigned int test1u(unsigned int x)\n   return ~(x ^ (unsigned int)INT_MIN);\n }\n \n-int test2(int x)\n-{\n-  return ~(x + INT_MIN);\n-}\n-\n unsigned int test2u(unsigned int x)\n {\n   return ~(x + (unsigned int)INT_MIN);\n }\n \n-int test3(int x)\n-{\n-  return ~(x - INT_MIN);\n-}\n-\n unsigned int test3u(unsigned int x)\n {\n   return ~(x - (unsigned int)INT_MIN);\n@@ -44,24 +34,12 @@ unsigned int test4u(unsigned int x)\n   return ~(x ^ y);\n }\n \n-int test5(int x)\n-{\n-  int y = INT_MIN;\n-  return ~(x + y);\n-}\n-\n unsigned int test5u(unsigned int x)\n {\n   unsigned int y = (unsigned int)INT_MIN;\n   return ~(x + y);\n }\n \n-int test6(int x)\n-{\n-  int y = INT_MIN;\n-  return ~(x - y);\n-}\n-\n unsigned int test6u(unsigned int x)\n {\n   unsigned int y = (unsigned int)INT_MIN;\n@@ -74,16 +52,8 @@ void test(int a, int b)\n {\n   if (test1(a) != b)\n     abort();\n-  if (test2(a) != b)\n-    abort();\n-  if (test3(a) != b)\n-    abort();\n   if (test4(a) != b)\n     abort();\n-  if (test5(a) != b)\n-    abort();\n-  if (test6(a) != b)\n-    abort();\n }\n \n void testu(unsigned int a, unsigned int b)"}, {"sha": "3a1883d51d59a322e3441b7ea38dae8319e816ce", "filename": "gcc/testsuite/gcc.c-torture/execute/20040409-3w.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-3w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-3w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20040409-3w.c?ref=50dec459c62701af05e4cfb097ee2c95944495cc", "patch": "@@ -0,0 +1,65 @@\n+/* { dg-additional-options \"-fwrapv\" } */\n+\n+#include <limits.h>\n+\n+extern void abort ();\n+\n+int test2(int x)\n+{\n+  return ~(x + INT_MIN);\n+}\n+\n+int test3(int x)\n+{\n+  return ~(x - INT_MIN);\n+}\n+\n+int test5(int x)\n+{\n+  int y = INT_MIN;\n+  return ~(x + y);\n+}\n+\n+int test6(int x)\n+{\n+  int y = INT_MIN;\n+  return ~(x - y);\n+}\n+\n+\n+void test(int a, int b)\n+{\n+  if (test2(a) != b)\n+    abort();\n+  if (test3(a) != b)\n+    abort();\n+  if (test5(a) != b)\n+    abort();\n+  if (test6(a) != b)\n+    abort();\n+}\n+\n+\n+int main()\n+{\n+#if INT_MAX == 2147483647\n+  test(0x00000000,0x7fffffff);\n+  test(0x80000000,0xffffffff);\n+  test(0x12345678,0x6dcba987);\n+  test(0x92345678,0xedcba987);\n+  test(0x7fffffff,0x00000000);\n+  test(0xffffffff,0x80000000);\n+#endif\n+\n+#if INT_MAX == 32767\n+  test(0x0000,0x7fff);\n+  test(0x8000,0xffff);\n+  test(0x1234,0x6dcb);\n+  test(0x9234,0xedcb);\n+  test(0x7fff,0x0000);\n+  test(0xffff,0x8000);\n+#endif\n+\n+  return 0;\n+}\n+"}, {"sha": "1fa7f3ee15e3a33f8184f792317242b2ebcf94a0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/cmpmul-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcmpmul-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcmpmul-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcmpmul-1.c?ref=50dec459c62701af05e4cfb097ee2c95944495cc", "patch": "@@ -2,7 +2,7 @@\n /* { dg-options \"-O2 -fdump-tree-optimized-raw\" } */\n \n int f(int a, int b, int c){\n-  c |= 1; // c cannot be 0\n+  if (c == 0) __builtin_unreachable();\n   a *= c;\n   b *= c;\n   return a == b;"}, {"sha": "8c4cc367dbf7ad21a4b24a19d5c9f59b4ff5e56e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp118.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp118.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp118.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp118.c?ref=50dec459c62701af05e4cfb097ee2c95944495cc", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+void eliminate_me();\n+void f(int x,int y){\n+    if (y <= 0)\n+      __builtin_unreachable();\n+    x += y;\n+    if (x == -__INT_MAX__ - 1)\n+      eliminate_me ();\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"eliminate_me\" \"optimized\" } } */"}, {"sha": "2d1186198f7f1d1d7a8af017208a4426d32a7aa8", "filename": "gcc/vr-values.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50dec459c62701af05e4cfb097ee2c95944495cc/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=50dec459c62701af05e4cfb097ee2c95944495cc", "patch": "@@ -771,6 +771,25 @@ vr_values::extract_range_from_binary_expr (value_range *vr,\n   else\n     set_value_range_to_varying (&vr1);\n \n+  /* If one argument is varying, we can sometimes still deduce a\n+     range for the output: any + [3, +INF] is in [MIN+3, +INF].  */\n+  if (INTEGRAL_TYPE_P (TREE_TYPE (op0))\n+      && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (op0)))\n+    {\n+      if (vr0.type == VR_VARYING && vr1.type != VR_VARYING)\n+\t{\n+\t  vr0.type = VR_RANGE;\n+\t  vr0.min = vrp_val_min (expr_type);\n+\t  vr0.max = vrp_val_max (expr_type);\n+\t}\n+      else if (vr1.type == VR_VARYING && vr0.type != VR_VARYING)\n+\t{\n+\t  vr1.type = VR_RANGE;\n+\t  vr1.min = vrp_val_min (expr_type);\n+\t  vr1.max = vrp_val_max (expr_type);\n+\t}\n+    }\n+\n   extract_range_from_binary_expr_1 (vr, code, expr_type, &vr0, &vr1);\n \n   /* Try harder for PLUS and MINUS if the range of one operand is symbolic"}]}