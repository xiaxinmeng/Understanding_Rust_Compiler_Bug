{"sha": "30d3ba5142311df568e8f62a374d83d0bdab42bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBkM2JhNTE0MjMxMWRmNTY4ZThmNjJhMzc0ZDgzZDBiZGFiNDJiZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-05-23T00:42:03Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2019-05-23T00:42:03Z"}, "message": "Bulletproof -fdiagnostics-format=json against bad locations (PR c++/90462)\n\nPR c++/90462 reports an ICE with -fdiagnostics-format=json when\nattempting to serialize a malformed location to JSON.\n\nThe compound location_t in question has meaningful \"caret\" and \"start\"\nlocations, but has UNKNOWN_LOCATION for its \"finish\" location,\nleading to a NULL pointer dereference when attempting to build a JSON\nstring for the filename.\n\nThis patch bulletproofs the JSON output so that attempts to write\na JSON object for a location with a NULL file will lead to an object\nwith no \"file\" key, and attempts to write a compound location with\nUNKNOWN_LOCATION for its start or finish will lead to the corresponding\nJSON child object being omitted.\n\nThis patch also adds a json::object::get member function, for self-testing\nthe above.\n\ngcc/ChangeLog:\n\tPR c++/90462\n\t* diagnostic-format-json.cc: Include \"selftest.h\".\n\t(json_from_expanded_location): Only add \"file\" key for non-NULL\n\tfile strings.\n\t(json_from_location_range): Don't add \"start\" and \"finish\"\n\tchildren if they are UNKNOWN_LOCATION.\n\t(selftest::test_unknown_location): New selftest.\n\t(selftest::test_bad_endpoints): New selftest.\n\t(selftest::diagnostic_format_json_cc_tests): New function.\n\t* json.cc (json::object::get): New function.\n\t(selftest::test_object_get): New selftest.\n\t(selftest::json_cc_tests): Call it.\n\t* json.h (json::object::get): New decl.\n\t* selftest-run-tests.c (selftest::run_tests): Call\n\tselftest::diagnostic_format_json_cc_tests.\n\t* selftest.h (selftest::diagnostic_format_json_cc_tests): New\n\tdecl.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/90462\n\t* g++.dg/pr90462.C: New test.\n\nFrom-SVN: r271535", "tree": {"sha": "94063ddaab8d31b6e0f1b5ab9eb9870683948b21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94063ddaab8d31b6e0f1b5ab9eb9870683948b21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30d3ba5142311df568e8f62a374d83d0bdab42bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d3ba5142311df568e8f62a374d83d0bdab42bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d3ba5142311df568e8f62a374d83d0bdab42bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d3ba5142311df568e8f62a374d83d0bdab42bf/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf9219c7420320986f9bcd956b04b95a51ebac49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9219c7420320986f9bcd956b04b95a51ebac49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf9219c7420320986f9bcd956b04b95a51ebac49"}], "stats": {"total": 166, "additions": 163, "deletions": 3}, "files": [{"sha": "9f0f8893022a073ad1340a5594b72a8525e10899", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d3ba5142311df568e8f62a374d83d0bdab42bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d3ba5142311df568e8f62a374d83d0bdab42bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30d3ba5142311df568e8f62a374d83d0bdab42bf", "patch": "@@ -1,3 +1,23 @@\n+2019-05-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/90462\n+\t* diagnostic-format-json.cc: Include \"selftest.h\".\n+\t(json_from_expanded_location): Only add \"file\" key for non-NULL\n+\tfile strings.\n+\t(json_from_location_range): Don't add \"start\" and \"finish\"\n+\tchildren if they are UNKNOWN_LOCATION.\n+\t(selftest::test_unknown_location): New selftest.\n+\t(selftest::test_bad_endpoints): New selftest.\n+\t(selftest::diagnostic_format_json_cc_tests): New function.\n+\t* json.cc (json::object::get): New function.\n+\t(selftest::test_object_get): New selftest.\n+\t(selftest::json_cc_tests): Call it.\n+\t* json.h (json::object::get): New decl.\n+\t* selftest-run-tests.c (selftest::run_tests): Call\n+\tselftest::diagnostic_format_json_cc_tests.\n+\t* selftest.h (selftest::diagnostic_format_json_cc_tests): New\n+\tdecl.\n+\n 2019-05-22  Kwok Cheung Yeung  <kcy@codesourcery.com>\n             Andrew Stubbs  <amd@codesourcery.com>\n "}, {"sha": "53c3b630b1cda0e6ab5b130501beb6319b34a234", "filename": "gcc/diagnostic-format-json.cc", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d3ba5142311df568e8f62a374d83d0bdab42bf/gcc%2Fdiagnostic-format-json.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d3ba5142311df568e8f62a374d83d0bdab42bf/gcc%2Fdiagnostic-format-json.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-format-json.cc?ref=30d3ba5142311df568e8f62a374d83d0bdab42bf", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"coretypes.h\"\n #include \"diagnostic.h\"\n #include \"json.h\"\n+#include \"selftest.h\"\n \n /* The top-level JSON array of pending diagnostics.  */\n \n@@ -45,7 +46,8 @@ json_from_expanded_location (location_t loc)\n {\n   expanded_location exploc = expand_location (loc);\n   json::object *result = new json::object ();\n-  result->set (\"file\", new json::string (exploc.file));\n+  if (exploc.file)\n+    result->set (\"file\", new json::string (exploc.file));\n   result->set (\"line\", new json::number (exploc.line));\n   result->set (\"column\", new json::number (exploc.column));\n   return result;\n@@ -66,9 +68,11 @@ json_from_location_range (const location_range *loc_range, unsigned range_idx)\n \n   json::object *result = new json::object ();\n   result->set (\"caret\", json_from_expanded_location (caret_loc));\n-  if (start_loc != caret_loc)\n+  if (start_loc != caret_loc\n+      && start_loc != UNKNOWN_LOCATION)\n     result->set (\"start\", json_from_expanded_location (start_loc));\n-  if (finish_loc != caret_loc)\n+  if (finish_loc != caret_loc\n+      && finish_loc != UNKNOWN_LOCATION)\n     result->set (\"finish\", json_from_expanded_location (finish_loc));\n \n   if (loc_range->m_label)\n@@ -262,3 +266,53 @@ diagnostic_output_format_init (diagnostic_context *context,\n       break;\n     }\n }\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* We shouldn't call json_from_expanded_location on UNKNOWN_LOCATION,\n+   but verify that we handle this gracefully.  */\n+\n+static void\n+test_unknown_location ()\n+{\n+  delete json_from_expanded_location (UNKNOWN_LOCATION);\n+}\n+\n+/* Verify that we gracefully handle attempts to serialize bad\n+   compound locations.  */\n+\n+static void\n+test_bad_endpoints ()\n+{\n+  location_t bad_endpoints\n+    = make_location (BUILTINS_LOCATION,\n+\t\t     UNKNOWN_LOCATION, UNKNOWN_LOCATION);\n+\n+  location_range loc_range;\n+  loc_range.m_loc = bad_endpoints;\n+  loc_range.m_range_display_kind = SHOW_RANGE_WITH_CARET;\n+  loc_range.m_label = NULL;\n+\n+  json::object *obj = json_from_location_range (&loc_range, 0);\n+  /* We should have a \"caret\" value, but no \"start\" or \"finish\" values.  */\n+  ASSERT_TRUE (obj != NULL);\n+  ASSERT_TRUE (obj->get (\"caret\") != NULL);\n+  ASSERT_TRUE (obj->get (\"start\") == NULL);\n+  ASSERT_TRUE (obj->get (\"finish\") == NULL);\n+  delete obj;\n+}\n+\n+/* Run all of the selftests within this file.  */\n+\n+void\n+diagnostic_format_json_cc_tests ()\n+{\n+  test_unknown_location ();\n+  test_bad_endpoints ();\n+}\n+\n+} // namespace selftest\n+\n+#endif /* #if CHECKING_P */"}, {"sha": "512e2e513b91393637098e9f3ffade35bcd27d7f", "filename": "gcc/json.cc", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d3ba5142311df568e8f62a374d83d0bdab42bf/gcc%2Fjson.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d3ba5142311df568e8f62a374d83d0bdab42bf/gcc%2Fjson.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjson.cc?ref=30d3ba5142311df568e8f62a374d83d0bdab42bf", "patch": "@@ -99,6 +99,22 @@ object::set (const char *key, value *v)\n     m_map.put (xstrdup (key), v);\n }\n \n+/* Get the json::value * for KEY.\n+\n+   The object retains ownership of the value.  */\n+\n+value *\n+object::get (const char *key) const\n+{\n+  gcc_assert (key);\n+\n+  value **ptr = const_cast <map_t &> (m_map).get (key);\n+  if (ptr)\n+    return *ptr;\n+  else\n+    return NULL;\n+}\n+\n /* class json::array, a subclass of json::value, representing\n    an ordered collection of values.  */\n \n@@ -240,6 +256,18 @@ assert_print_eq (const json::value &jv, const char *expected_json)\n   ASSERT_STREQ (expected_json, pp_formatted_text (&pp));\n }\n \n+/* Verify that object::get works as expected.  */\n+\n+static void\n+test_object_get ()\n+{\n+  object obj;\n+  value *val = new json::string (\"value\");\n+  obj.set (\"foo\", val);\n+  ASSERT_EQ (obj.get (\"foo\"), val);\n+  ASSERT_EQ (obj.get (\"not-present\"), NULL);\n+}\n+\n /* Verify that JSON objects are written correctly.  We can't test more than\n    one key/value pair, as we don't impose a guaranteed ordering.  */\n \n@@ -306,6 +334,7 @@ test_writing_literals ()\n void\n json_cc_tests ()\n {\n+  test_object_get ();\n   test_writing_objects ();\n   test_writing_arrays ();\n   test_writing_numbers ();"}, {"sha": "d8a690ede5cf8e94b51c5e842bcbf24497dd20a9", "filename": "gcc/json.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d3ba5142311df568e8f62a374d83d0bdab42bf/gcc%2Fjson.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d3ba5142311df568e8f62a374d83d0bdab42bf/gcc%2Fjson.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjson.h?ref=30d3ba5142311df568e8f62a374d83d0bdab42bf", "patch": "@@ -90,6 +90,7 @@ class object : public value\n   void print (pretty_printer *pp) const FINAL OVERRIDE;\n \n   void set (const char *key, value *v);\n+  value *get (const char *key) const;\n \n  private:\n   typedef hash_map <char *, value *,"}, {"sha": "6ed7d82beeb76080348033dad5264f695a02f360", "filename": "gcc/selftest-run-tests.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d3ba5142311df568e8f62a374d83d0bdab42bf/gcc%2Fselftest-run-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d3ba5142311df568e8f62a374d83d0bdab42bf/gcc%2Fselftest-run-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-run-tests.c?ref=30d3ba5142311df568e8f62a374d83d0bdab42bf", "patch": "@@ -90,6 +90,7 @@ selftest::run_tests ()\n      rely on.  */\n   diagnostic_show_locus_c_tests ();\n   diagnostic_c_tests ();\n+  diagnostic_format_json_cc_tests ();\n   edit_context_c_tests ();\n   fold_const_c_tests ();\n   spellcheck_c_tests ();"}, {"sha": "d278f0a2900fd172fa582cbe0cf9ee77d8a91421", "filename": "gcc/selftest.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d3ba5142311df568e8f62a374d83d0bdab42bf/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d3ba5142311df568e8f62a374d83d0bdab42bf/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=30d3ba5142311df568e8f62a374d83d0bdab42bf", "patch": "@@ -218,6 +218,7 @@ extern void bitmap_c_tests ();\n extern void cgraph_c_tests ();\n extern void convert_c_tests ();\n extern void diagnostic_c_tests ();\n+extern void diagnostic_format_json_cc_tests ();\n extern void diagnostic_show_locus_c_tests ();\n extern void dumpfile_c_tests ();\n extern void edit_context_c_tests ();"}, {"sha": "788f3e012aca5ddb28d4733c09858e33810dbb92", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d3ba5142311df568e8f62a374d83d0bdab42bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d3ba5142311df568e8f62a374d83d0bdab42bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30d3ba5142311df568e8f62a374d83d0bdab42bf", "patch": "@@ -1,3 +1,8 @@\n+2019-05-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/90462\n+\t* g++.dg/pr90462.C: New test.\n+\n 2019-05-22  Marek Polacek  <polacek@redhat.com>\n \n \t* g++.dg/cpp1y/udlit-char-template-neg.C: Expect the error on a"}, {"sha": "2585ba0dcdba69b67b60ee2c496863435ce9060d", "filename": "gcc/testsuite/g++.dg/pr90462.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d3ba5142311df568e8f62a374d83d0bdab42bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90462.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d3ba5142311df568e8f62a374d83d0bdab42bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90462.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr90462.C?ref=30d3ba5142311df568e8f62a374d83d0bdab42bf", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-options \"-Wdeprecated-copy -fdiagnostics-format=json\" } */\n+\n+template <class> class b;\n+struct B {\n+  typedef b<char> *c;\n+};\n+class d {\n+public:\n+  B::c operator->();\n+};\n+template <class> struct e;\n+class f {\n+  typedef int g;\n+};\n+template <class, class> class h;\n+template <class i> class b {\n+public:\n+  i j;\n+  i k;\n+  int l;\n+  void assign() {\n+    int m;\n+    h<i, int> n(&m);\n+    n.o(&j, &k, l);\n+  }\n+};\n+template <class i, class> class s : f { s &p(const i *, const i *, g); };\n+template <class i, class t> s<i, t> &s<i, t>::p(const i *, const i *, g) {\n+  d q;\n+  q->assign();\n+}\n+struct G {\n+  G();\n+  G(int);\n+  G(G &);\n+};\n+template <class i, class> class h {\n+public:\n+  h(int *);\n+  void o(const i *, const i *, unsigned);\n+  i r();\n+};\n+template <class i, class t> void h<i, t>::o(const i *, const i *, unsigned) {\n+  G a;\n+  a = r();\n+}\n+template s<char, e<char>> &s<char, e<char>>::p(const char *, const char *, g);\n+\n+/* { dg-regexp \".*\" } */"}]}