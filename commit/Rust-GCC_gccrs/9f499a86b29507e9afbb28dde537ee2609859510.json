{"sha": "9f499a86b29507e9afbb28dde537ee2609859510", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY0OTlhODZiMjk1MDdlOWFmYmIyOGRkZTUzN2VlMjYwOTg1OTUxMA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-29T11:22:47Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-29T13:49:19Z"}, "message": "aarch64: Re-implement vabal_high* intrinsics using builtins\n\nThis patch reimplements the vabal_high* intrinsics using RTL builtins.\nIt's straightforward, defining new unspecs and a new pattern.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd-builtins.def (sabal2): Define\n\tbuiltin.\n\t(uabal2): Likewise.\n\t* config/aarch64/aarch64-simd.md (aarch64_<sur>abal2<mode>): New\n\tpattern.\n\t* config/aarch64/aarch64.md (unspec): Add UNSPEC_SABAL2 and\n\tUNSPEC_UABAL2.\n\t* config/aarch64/arm_neon.h (vabal_high_s8): Reimplement using\n\tbuiltin.\n\t(vabal_high_s16): Likewise.\n\t(vabal_high_s32): Likewise.\n\t(vabal_high_u8): Likewise.\n\t(vabal_high_u16): Likewise.\n\t(vabal_high_u32): Likewise.\n\t* config/aarch64/iterators.md (ABAL2): New mode iterator.\n\t(sur): Handle UNSPEC_SABAL2, UNSPEC_UABAL2.", "tree": {"sha": "cd29f3a2739b495170f7228a2c84da332388c68f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd29f3a2739b495170f7228a2c84da332388c68f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f499a86b29507e9afbb28dde537ee2609859510", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f499a86b29507e9afbb28dde537ee2609859510", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f499a86b29507e9afbb28dde537ee2609859510", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f499a86b29507e9afbb28dde537ee2609859510/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5e0d1f1d2c430515eb727c4464d1f51b20d4c9c"}], "stats": {"total": 63, "additions": 27, "deletions": 36}, "files": [{"sha": "f3aace3857749ad0e621ff2dea370bd481c2ea28", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f499a86b29507e9afbb28dde537ee2609859510/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f499a86b29507e9afbb28dde537ee2609859510/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=9f499a86b29507e9afbb28dde537ee2609859510", "patch": "@@ -168,6 +168,10 @@\n   BUILTIN_VD_BHSI (TERNOP, sabal, 0, NONE)\n   BUILTIN_VD_BHSI (TERNOPU, uabal, 0, NONE)\n \n+  /* Implemented by aarch64_<sur>abal2<mode>.  */\n+  BUILTIN_VQW (TERNOP, sabal2, 0, NONE)\n+  BUILTIN_VQW (TERNOPU, uabal2, 0, NONE)\n+\n   /* Implemented by aarch64_<sur><addsub>hn<mode>.  */\n   BUILTIN_VQN (BINOP, addhn, 0, NONE)\n   BUILTIN_VQN (BINOP, subhn, 0, NONE)"}, {"sha": "98d510b6eb684244a56d569531595d8d3ec2ffb4", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f499a86b29507e9afbb28dde537ee2609859510/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f499a86b29507e9afbb28dde537ee2609859510/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=9f499a86b29507e9afbb28dde537ee2609859510", "patch": "@@ -839,6 +839,17 @@\n   [(set_attr \"type\" \"neon_arith_acc<q>\")]\n )\n \n+(define_insn \"aarch64_<sur>abal2<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VWIDE> [(match_operand:VQW 2 \"register_operand\" \"w\")\n+\t\t\t  (match_operand:VQW 3 \"register_operand\" \"w\")\n+\t\t\t (match_operand:<VWIDE> 1 \"register_operand\" \"0\")]\n+\tABAL2))]\n+  \"TARGET_SIMD\"\n+  \"<sur>abal2\\t%0.<Vwtype>, %2.<Vtype>, %3.<Vtype>\"\n+  [(set_attr \"type\" \"neon_arith_acc<q>\")]\n+)\n+\n (define_insn \"aarch64_<sur>adalp<mode>\"\n   [(set (match_operand:<VDBLW> 0 \"register_operand\" \"=w\")\n \t(unspec:<VDBLW> [(match_operand:VDQV_S 2 \"register_operand\" \"w\")"}, {"sha": "16753c0d932bdf29d0f272ff6452eae2d5394663", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f499a86b29507e9afbb28dde537ee2609859510/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f499a86b29507e9afbb28dde537ee2609859510/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=9f499a86b29507e9afbb28dde537ee2609859510", "patch": "@@ -197,6 +197,7 @@\n     UNSPEC_REV\n     UNSPEC_RBIT\n     UNSPEC_SABAL\n+    UNSPEC_SABAL2\n     UNSPEC_SABDL2\n     UNSPEC_SADALP\n     UNSPEC_SCVTF\n@@ -218,6 +219,7 @@\n     UNSPEC_TLSLE32\n     UNSPEC_TLSLE48\n     UNSPEC_UABAL\n+    UNSPEC_UABAL2\n     UNSPEC_UABDL2\n     UNSPEC_UADALP\n     UNSPEC_UCVTF"}, {"sha": "66feec3cce0c60a471fc8133afe83b2e2717ebb8", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 6, "deletions": 36, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f499a86b29507e9afbb28dde537ee2609859510/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f499a86b29507e9afbb28dde537ee2609859510/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=9f499a86b29507e9afbb28dde537ee2609859510", "patch": "@@ -6663,72 +6663,42 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabal_high_s8 (int16x8_t __a, int8x16_t __b, int8x16_t __c)\n {\n-  int16x8_t __result;\n-  __asm__ (\"sabal2 %0.8h,%2.16b,%3.16b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabal2v16qi (__a, __b, __c);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabal_high_s16 (int32x4_t __a, int16x8_t __b, int16x8_t __c)\n {\n-  int32x4_t __result;\n-  __asm__ (\"sabal2 %0.4s,%2.8h,%3.8h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabal2v8hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabal_high_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c)\n {\n-  int64x2_t __result;\n-  __asm__ (\"sabal2 %0.2d,%2.4s,%3.4s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabal2v4si (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabal_high_u8 (uint16x8_t __a, uint8x16_t __b, uint8x16_t __c)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"uabal2 %0.8h,%2.16b,%3.16b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabal2v16qi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabal_high_u16 (uint32x4_t __a, uint16x8_t __b, uint16x8_t __c)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"uabal2 %0.4s,%2.8h,%3.8h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabal2v8hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabal_high_u32 (uint64x2_t __a, uint32x4_t __b, uint32x4_t __c)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"uabal2 %0.2d,%2.4s,%3.4s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabal2v4si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline int16x8_t"}, {"sha": "d57ec8479bc21f6526fb7242cd334ef172b0b240", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f499a86b29507e9afbb28dde537ee2609859510/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f499a86b29507e9afbb28dde537ee2609859510/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=9f499a86b29507e9afbb28dde537ee2609859510", "patch": "@@ -2189,6 +2189,9 @@\n ;; The unspec codes for the SABAL, UABAL AdvancedSIMD instructions.\n (define_int_iterator ABAL [UNSPEC_SABAL UNSPEC_UABAL])\n \n+;; The unspec codes for the SABAL2, UABAL2 AdvancedSIMD instructions.\n+(define_int_iterator ABAL2 [UNSPEC_SABAL2 UNSPEC_UABAL2])\n+\n ;; The unspec codes for the SABDL2, UABDL2 AdvancedSIMD instructions.\n (define_int_iterator ABDL2 [UNSPEC_SABDL2 UNSPEC_UABDL2])\n \n@@ -2975,6 +2978,7 @@\n \t\t      (UNSPEC_SHSUB \"s\") (UNSPEC_UHSUB \"u\")\n \t\t      (UNSPEC_ADDHN \"\") (UNSPEC_RADDHN \"r\")\n \t\t      (UNSPEC_SABAL \"s\") (UNSPEC_UABAL \"u\")\n+\t\t      (UNSPEC_SABAL2 \"s\") (UNSPEC_UABAL2 \"u\")\n \t\t      (UNSPEC_SABDL2 \"s\") (UNSPEC_UABDL2 \"u\")\n \t\t      (UNSPEC_SADALP \"s\") (UNSPEC_UADALP \"u\")\n \t\t      (UNSPEC_SUBHN \"\") (UNSPEC_RSUBHN \"r\")"}]}