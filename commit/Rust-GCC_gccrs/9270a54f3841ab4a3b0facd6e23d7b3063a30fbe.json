{"sha": "9270a54f3841ab4a3b0facd6e23d7b3063a30fbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI3MGE1NGYzODQxYWI0YTNiMGZhY2Q2ZTIzZDdiMzA2M2EzMGZiZQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-01T06:50:06Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-01T06:50:06Z"}, "message": "re PR target/63986 ([SH] gcc.target/sh/pr51244-15.c failures)\n\ngcc/\n\tPR target/63986\n\tPR target/51244\n\t* config/sh/sh.c (sh_unspec_insn_p,\n\tsh_insn_operands_modified_between_p): New functions.\n\t(sh_split_movrt_negc_to_movt_xor): Do not delete insn if its operands\n\tare modified or if it has side effects, may trap or is volatile.\n\nFrom-SVN: r218200", "tree": {"sha": "0957f6d2755068f1e1ddc55033246c83b34176e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0957f6d2755068f1e1ddc55033246c83b34176e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9270a54f3841ab4a3b0facd6e23d7b3063a30fbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9270a54f3841ab4a3b0facd6e23d7b3063a30fbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9270a54f3841ab4a3b0facd6e23d7b3063a30fbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9270a54f3841ab4a3b0facd6e23d7b3063a30fbe/comments", "author": null, "committer": null, "parents": [{"sha": "975fbd84776bc813d2c6cc020682b1e692400d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975fbd84776bc813d2c6cc020682b1e692400d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/975fbd84776bc813d2c6cc020682b1e692400d38"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "a428bf067328ea93d3c472027e817d9fabb84a58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9270a54f3841ab4a3b0facd6e23d7b3063a30fbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9270a54f3841ab4a3b0facd6e23d7b3063a30fbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9270a54f3841ab4a3b0facd6e23d7b3063a30fbe", "patch": "@@ -1,3 +1,12 @@\n+2014-12-01  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/63986\n+\tPR target/51244\n+\t* config/sh/sh.c (sh_unspec_insn_p,\n+\tsh_insn_operands_modified_between_p): New functions.\n+\t(sh_split_movrt_negc_to_movt_xor): Do not delete insn if its operands\n+\tare modified or if it has side effects, may trap or is volatile.\n+\n 2014-11-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gimple-expr.h (create_tmp_var_raw, create_tmp_var,"}, {"sha": "4012c9a4f2428845dce40f4062621123a34087b0", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9270a54f3841ab4a3b0facd6e23d7b3063a30fbe/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9270a54f3841ab4a3b0facd6e23d7b3063a30fbe/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=9270a54f3841ab4a3b0facd6e23d7b3063a30fbe", "patch": "@@ -13503,6 +13503,47 @@ sh_find_equiv_gbr_addr (rtx_insn* insn, rtx mem)\n   Manual insn combine support code.\n */\n \n+/* Return true if the specified insn contains any UNSPECs or\n+   UNSPEC_VOLATILEs.  */\n+static bool\n+sh_unspec_insn_p (rtx_insn* insn)\n+{\n+  bool result = false;\n+\n+  struct note_uses_func\n+  {\n+    static void\n+    func (rtx* x, void* data)\n+    {\n+      if (GET_CODE (*x) == UNSPEC || GET_CODE (*x) == UNSPEC_VOLATILE)\n+\t*(static_cast<bool*> (data)) = true;\n+    }\n+  };\n+\n+  note_uses (&PATTERN (insn), note_uses_func::func, &result);\n+  return result;\n+}\n+\n+/* Return true if the register operands of the specified insn are modified\n+   between the specified from and to insns (exclusive of those two).  */\n+static bool\n+sh_insn_operands_modified_between_p (rtx_insn* operands_insn,\n+\t\t\t\t     const rtx_insn* from,\n+\t\t\t\t     const rtx_insn* to)\n+{\n+  /*  FIXME: Return true for multiple sets for now.  */\n+  rtx s = single_set (operands_insn);\n+  if (s == NULL_RTX)\n+    return true;\n+\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (i, array, SET_SRC (s), ALL)\n+    if ((REG_P (*i) || SUBREG_P (*i)) && reg_set_between_p (*i, from, to))\n+      return true;\n+\n+  return false;\n+}\n+\n /* Given an op rtx and an insn, try to find out whether the result of the\n    specified op consists only of logical operations on T bit stores.  */\n bool\n@@ -13598,7 +13639,14 @@ sh_split_movrt_negc_to_movt_xor (rtx_insn* curr_insn, rtx operands[])\n \n   if (t_before_negc.set_rtx != NULL_RTX && t_after_negc.set_rtx != NULL_RTX\n       && rtx_equal_p (t_before_negc.set_rtx, t_after_negc.set_rtx)\n-      && !reg_used_between_p (get_t_reg_rtx (), curr_insn, t_after_negc.insn))\n+      && !reg_used_between_p (get_t_reg_rtx (), curr_insn, t_after_negc.insn)\n+      && !sh_insn_operands_modified_between_p (t_before_negc.insn,\n+\t\t\t\t\t       t_before_negc.insn,\n+\t\t\t\t\t       t_after_negc.insn)\n+      && !sh_unspec_insn_p (t_after_negc.insn)\n+      && !volatile_insn_p (PATTERN (t_after_negc.insn))\n+      && !side_effects_p (PATTERN (t_after_negc.insn))\n+      && !may_trap_or_fault_p (PATTERN (t_after_negc.insn)))\n     {\n       emit_insn (gen_movrt_xor (operands[0], get_t_reg_rtx ()));\n       set_insn_deleted (t_after_negc.insn);"}]}