{"sha": "05ef889761d0e3abce59f40c9cfc85fc9488e83c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVlZjg4OTc2MWQwZTNhYmNlNTlmNDBjOWNmYzg1ZmM5NDg4ZTgzYw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1997-09-15T21:37:39Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-15T21:37:39Z"}, "message": "cse.c (simplify_relational_operation): If MODE specifies a mode wider than HOST_WIDE_INT...\n\n        * cse.c (simplify_relational_operation): If MODE specifies a\n        mode wider than HOST_WIDE_INT, then the high word of a CONST_INT\n        is derived from the sign bit of the low word.\n\nBrought over from r5900 branch.\n\nFrom-SVN: r15454", "tree": {"sha": "8bb90a6d765737a0a23f49ddac65c8f397847b6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bb90a6d765737a0a23f49ddac65c8f397847b6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05ef889761d0e3abce59f40c9cfc85fc9488e83c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ef889761d0e3abce59f40c9cfc85fc9488e83c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05ef889761d0e3abce59f40c9cfc85fc9488e83c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ef889761d0e3abce59f40c9cfc85fc9488e83c/comments", "author": null, "committer": null, "parents": [{"sha": "dcb9d1f061945e878590b71a063f9a80f7f0d326", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb9d1f061945e878590b71a063f9a80f7f0d326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcb9d1f061945e878590b71a063f9a80f7f0d326"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "f3b148c10caa7827d272293dc2084e8b8c7a4baa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ef889761d0e3abce59f40c9cfc85fc9488e83c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ef889761d0e3abce59f40c9cfc85fc9488e83c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05ef889761d0e3abce59f40c9cfc85fc9488e83c", "patch": "@@ -1,3 +1,9 @@\n+Mon Sep 15 15:39:26 1997  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* cse.c (simplify_relational_operation): If MODE specifies a\n+\tmode wider than HOST_WIDE_INT, then the high word of a CONST_INT\n+\tis derived from the sign bit of the low word.\n+\n 1997-09-15  Brendan Kehoe  <brendan@cygnus.com>\n \n \t* except.c (find_exception_handler_labels): Use xmalloc instead of"}, {"sha": "9bcdcc3675e409a77fe8eef01cf4a5844edae09f", "filename": "gcc/cse.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ef889761d0e3abce59f40c9cfc85fc9488e83c/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ef889761d0e3abce59f40c9cfc85fc9488e83c/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=05ef889761d0e3abce59f40c9cfc85fc9488e83c", "patch": "@@ -4482,7 +4482,14 @@ simplify_relational_operation (code, mode, op0, op1)\n       else\n \t{\n \t  l0u = l0s = INTVAL (op0);\n-\t  h0u = 0, h0s = l0s < 0 ? -1 : 0;\n+\t  h0s = l0s < 0 ? -1 : 0;\n+\t  /* If WIDTH is nonzero and larger than HOST_BITS_PER_WIDE_INT,\n+\t     then the high word is derived from the sign bit of the low\n+\t     word, else the high word is zero.  */\n+\t  if (width != 0 && width > HOST_BITS_PER_WIDE_INT)\n+\t    h0u = l0s < 0 ? -1 : 0;\n+\t  else\n+\t    h0u = 0;\n \t}\n \t  \n       if (GET_CODE (op1) == CONST_DOUBLE)\n@@ -4493,7 +4500,14 @@ simplify_relational_operation (code, mode, op0, op1)\n       else\n \t{\n \t  l1u = l1s = INTVAL (op1);\n-\t  h1u = 0, h1s = l1s < 0 ? -1 : 0;\n+\t  h1s = l1s < 0 ? -1 : 0;\n+\t  /* If WIDTH is nonzero and larger than HOST_BITS_PER_WIDE_INT,\n+\t     then the high word is derived from the sign bit of the low\n+\t     word, else the high word is zero.  */\n+\t  if (width != 0 && width > HOST_BITS_PER_WIDE_INT)\n+\t    h1u = l1s < 0 ? -1 : 0;\n+\t  else\n+\t    h1u = 0;\n \t}\n \n       /* If WIDTH is nonzero and smaller than HOST_BITS_PER_WIDE_INT,"}]}