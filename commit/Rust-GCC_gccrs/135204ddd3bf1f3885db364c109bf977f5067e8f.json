{"sha": "135204ddd3bf1f3885db364c109bf977f5067e8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM1MjA0ZGRkM2JmMWYzODg1ZGIzNjRjMTA5YmY5NzdmNTA2N2U4Zg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2013-02-19T00:04:49Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2013-02-19T00:04:49Z"}, "message": "re PR target/52555 (ICE unrecognizable insn with -ffast-math and __attribute__((optimize(xx))))\n\n\tPR target/52555\n\t* genopinit.c (raw_optab_handler): Use this_fn_optabs.\n\t(swap_optab_enable): Same.\n\t(init_all_optabs): Use argument instead of global.\n\t* tree.h (struct tree_optimization_option): New field\n\ttarget_optabs.\n\t* expr.h (init_all_optabs): Add argument to prototype.\n\t(TREE_OPTIMIZATION_OPTABS): New.\n\t(save_optabs_if_changed): Protoize.\n\t* optabs.h: Declare this_fn_optabs.\n\t* optabs.c (save_optabs_if_changed): New.\n\tDeclare this_fn_optabs.\n\t(init_optabs): Add argument to init_all_optabs() call.\n\t* function.c (invoke_set_current_function_hook): Handle per\n\tfunction optabs.\n\t* function.h (struct function): New field optabs.\n\t* config/mips/mips.c (mips_set_mips16_mode): Handle when\n\toptimization_current_node has changed.\n\t* target-globals.h (save_target_globals_default_opts): Protoize.\n\t* target-globals.c (save_target_globals_default_opts): New.\nc-family/\n\t* c-common.c (handle_optimize_attribute): Call\n\tsave_optabs_if_changed.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r196129", "tree": {"sha": "7a29bd18e10dbd4f5b64765ae5b8f07a5bda81db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a29bd18e10dbd4f5b64765ae5b8f07a5bda81db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/135204ddd3bf1f3885db364c109bf977f5067e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135204ddd3bf1f3885db364c109bf977f5067e8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/135204ddd3bf1f3885db364c109bf977f5067e8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/135204ddd3bf1f3885db364c109bf977f5067e8f/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6007d99f88822a517d15c6e56dcbfa66e8b5dec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6007d99f88822a517d15c6e56dcbfa66e8b5dec"}], "stats": {"total": 156, "additions": 148, "deletions": 8}, "files": [{"sha": "83a466e9a397c4aadba16d8c732164a61906ff1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=135204ddd3bf1f3885db364c109bf977f5067e8f", "patch": "@@ -1,3 +1,27 @@\n+2013-02-15  Aldy Hernandez  <aldyh@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/52555\n+\t* genopinit.c (raw_optab_handler): Use this_fn_optabs.\n+\t(swap_optab_enable): Same.\n+\t(init_all_optabs): Use argument instead of global.\n+\t* tree.h (struct tree_optimization_option): New field\n+\ttarget_optabs.\n+\t* expr.h (init_all_optabs): Add argument to prototype.\n+\t(TREE_OPTIMIZATION_OPTABS): New.\n+\t(save_optabs_if_changed): Protoize.\n+\t* optabs.h: Declare this_fn_optabs.\n+\t* optabs.c (save_optabs_if_changed): New.\n+\tDeclare this_fn_optabs.\n+\t(init_optabs): Add argument to init_all_optabs() call.\n+\t* function.c (invoke_set_current_function_hook): Handle per\n+\tfunction optabs.\n+\t* function.h (struct function): New field optabs.\n+\t* config/mips/mips.c (mips_set_mips16_mode): Handle when\n+\toptimization_current_node has changed.\n+\t* target-globals.h (save_target_globals_default_opts): Protoize.\n+\t* target-globals.c (save_target_globals_default_opts): New.\n+\n 2013-02-18  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/56347"}, {"sha": "afa9cd7a39a5cf3462a13d5a0a1fb789c09387a3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=135204ddd3bf1f3885db364c109bf977f5067e8f", "patch": "@@ -1,3 +1,9 @@\n+2013-02-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR target/52555\n+\t* c-common.c (handle_optimize_attribute): Call\n+\tsave_optabs_if_changed.\n+\n 2013-02-18  Jakub Jelinek  <jakub@redhat.com>\n \t    Steven Bosscher  <steven@gcc.gnu.org>\n "}, {"sha": "a1d47a68045bacbe9944dc26e6e4a2c56eef6e4f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=135204ddd3bf1f3885db364c109bf977f5067e8f", "patch": "@@ -8925,6 +8925,8 @@ handle_optimize_attribute (tree *node, tree name, tree args,\n       DECL_FUNCTION_SPECIFIC_OPTIMIZATION (*node)\n \t= build_optimization_node ();\n \n+      save_optabs_if_changed (*node);\n+\n       /* Restore current options.  */\n       cl_optimization_restore (&global_options, &cur_opts);\n     }"}, {"sha": "252e828480e44ec239b053cff83a6af7a1107f4d", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=135204ddd3bf1f3885db364c109bf977f5067e8f", "patch": "@@ -16313,7 +16313,7 @@ mips_set_mips16_mode (int mips16_p)\n   if (mips16_p)\n     {\n       if (!mips16_globals)\n-\tmips16_globals = save_target_globals ();\n+\tmips16_globals = save_target_globals_default_opts ();\n       else\n \trestore_target_globals (mips16_globals);\n     }"}, {"sha": "15fcb471d8d5836d7e2c96e6c4dbbfcdded16b38", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=135204ddd3bf1f3885db364c109bf977f5067e8f", "patch": "@@ -718,7 +718,7 @@ extern bool split_comparison (enum rtx_code, enum machine_mode,\n /* Call this once to initialize the contents of the optabs\n    appropriately for the current target machine.  */\n extern void init_optabs (void);\n-extern void init_all_optabs (void);\n+extern void init_all_optabs (struct target_optabs *);\n \n /* Call this to initialize an optab function entry.  */\n extern rtx init_one_libfunc (const char *);"}, {"sha": "1b41cf2cb34cc0dee3478873bf8298b8ca1e320c", "filename": "gcc/function.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=135204ddd3bf1f3885db364c109bf977f5067e8f", "patch": "@@ -4400,6 +4400,26 @@ invoke_set_current_function_hook (tree fndecl)\n \t}\n \n       targetm.set_current_function (fndecl);\n+\n+      if (opts == optimization_default_node)\n+\tthis_fn_optabs = this_target_optabs;\n+      else\n+\t{\n+\t  struct function *fn = DECL_STRUCT_FUNCTION (fndecl);\n+\t  if (fn->optabs == NULL)\n+\t    {\n+\t      if (this_target_optabs == &default_target_optabs)\n+\t\tfn->optabs = TREE_OPTIMIZATION_OPTABS (opts);\n+\t      else\n+\t\t{\n+\t\t  fn->optabs = (unsigned char *)\n+\t\t    ggc_alloc_atomic (sizeof (struct target_optabs));\n+\t\t  init_all_optabs ((struct target_optabs *) fn->optabs);\n+\t\t}\n+\t    }\n+\t  this_fn_optabs = fn->optabs ? (struct target_optabs *) fn->optabs\n+\t                              : this_target_optabs;\n+\t}\n     }\n }\n "}, {"sha": "53e28b768c0b061cbbcdcc779eaa070730deb4cf", "filename": "gcc/function.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=135204ddd3bf1f3885db364c109bf977f5067e8f", "patch": "@@ -580,6 +580,9 @@ struct GTY(()) function {\n      a string describing the reason for failure.  */\n   const char * GTY((skip)) cannot_be_copied_reason;\n \n+  /* Optabs for this function.  This is of type `struct target_optabs *'.  */\n+  unsigned char *GTY ((atomic)) optabs;\n+\n   /* Collected bit flags.  */\n \n   /* Number of units of general registers that need saving in stdarg"}, {"sha": "fb8071765dde413910c817a0ce87d6b8fd1ff927", "filename": "gcc/genopinit.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=135204ddd3bf1f3885db364c109bf977f5067e8f", "patch": "@@ -422,8 +422,8 @@ main (int argc, char **argv)\n     fprintf (s_file, \"  { %#08x, CODE_FOR_%s },\\n\", p->sort_num, p->name);\n   fprintf (s_file, \"};\\n\\n\");\n \n-  fprintf (s_file, \"void\\ninit_all_optabs (void)\\n{\\n\");\n-  fprintf (s_file, \"  bool *ena = this_target_optabs->pat_enable;\\n\");\n+  fprintf (s_file, \"void\\ninit_all_optabs (struct target_optabs *optabs)\\n{\\n\");\n+  fprintf (s_file, \"  bool *ena = optabs->pat_enable;\\n\");\n   for (i = 0; patterns.iterate (i, &p); ++i)\n     fprintf (s_file, \"  ena[%u] = HAVE_%s;\\n\", i, p->name);\n   fprintf (s_file, \"}\\n\\n\");\n@@ -456,7 +456,7 @@ main (int argc, char **argv)\n \t   \"raw_optab_handler (unsigned scode)\\n\"\n \t   \"{\\n\"\n \t   \"  int i = lookup_handler (scode);\\n\"\n-\t   \"  return (i >= 0 && this_target_optabs->pat_enable[i]\\n\"\n+\t   \"  return (i >= 0 && this_fn_optabs->pat_enable[i]\\n\"\n \t   \"          ? pats[i].icode : CODE_FOR_nothing);\\n\"\n \t   \"}\\n\\n\");\n \n@@ -468,8 +468,8 @@ main (int argc, char **argv)\n \t   \"  int i = lookup_handler (scode);\\n\"\n \t   \"  if (i >= 0)\\n\"\n \t   \"    {\\n\"\n-\t   \"      bool ret = this_target_optabs->pat_enable[i];\\n\"\n-\t   \"      this_target_optabs->pat_enable[i] = set;\\n\"\n+\t   \"      bool ret = this_fn_optabs->pat_enable[i];\\n\"\n+\t   \"      this_fn_optabs->pat_enable[i] = set;\\n\"\n \t   \"      return ret;\\n\"\n \t   \"    }\\n\"\n \t   \"  else\\n\""}, {"sha": "c5778d1928bfc98048504c79a6a6ec239b0c02d5", "filename": "gcc/optabs.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=135204ddd3bf1f3885db364c109bf977f5067e8f", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n \n struct target_optabs default_target_optabs;\n struct target_libfuncs default_target_libfuncs;\n+struct target_optabs *this_fn_optabs = &default_target_optabs;\n #if SWITCHABLE_TARGET\n struct target_optabs *this_target_optabs = &default_target_optabs;\n struct target_libfuncs *this_target_libfuncs = &default_target_libfuncs;\n@@ -6150,7 +6151,7 @@ init_optabs (void)\n     libfunc_hash = htab_create_ggc (10, hash_libfunc, eq_libfunc, NULL);\n \n   /* Fill in the optabs with the insns we support.  */\n-  init_all_optabs ();\n+  init_all_optabs (this_fn_optabs);\n \n   /* The ffs function operates on `int'.  Fall back on it if we do not\n      have a libgcc2 function for that width.  */\n@@ -6207,6 +6208,38 @@ init_optabs (void)\n   targetm.init_libfuncs ();\n }\n \n+/* Recompute the optabs and save them if they have changed.  */\n+\n+void\n+save_optabs_if_changed (tree fndecl)\n+{\n+  /* ?? If this fails, we should temporarily restore the default\n+     target first (set_cfun (NULL) ??), do the rest of this function,\n+     and then restore it.  */\n+  gcc_assert (this_target_optabs == &default_target_optabs);\n+\n+  struct target_optabs *tmp_optabs = (struct target_optabs *)\n+    ggc_alloc_atomic (sizeof (struct target_optabs));\n+  tree optnode = DECL_FUNCTION_SPECIFIC_OPTIMIZATION (fndecl);\n+\n+  /* Generate a new set of optabs into tmp_optabs.  */\n+  init_all_optabs (tmp_optabs);\n+\n+  /* If the optabs changed, record it.  */\n+  if (memcmp (tmp_optabs, this_target_optabs, sizeof (struct target_optabs)))\n+    {\n+      if (TREE_OPTIMIZATION_OPTABS (optnode))\n+\tggc_free (TREE_OPTIMIZATION_OPTABS (optnode));\n+\n+      TREE_OPTIMIZATION_OPTABS (optnode) = (unsigned char *) tmp_optabs;\n+    }\n+  else\n+    {\n+      TREE_OPTIMIZATION_OPTABS (optnode) = NULL;\n+      ggc_free (tmp_optabs);\n+    }\n+}\n+\n /* A helper function for init_sync_libfuncs.  Using the basename BASE,\n    install libfuncs into TAB for BASE_N for 1 <= N <= MAX.  */\n "}, {"sha": "4de4409342de199bd2cc058ed9c1ad946729b354", "filename": "gcc/optabs.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=135204ddd3bf1f3885db364c109bf977f5067e8f", "patch": "@@ -76,6 +76,7 @@ struct target_optabs {\n };\n \n extern struct target_optabs default_target_optabs;\n+extern struct target_optabs *this_fn_optabs;\n #if SWITCHABLE_TARGET\n extern struct target_optabs *this_target_optabs;\n #else"}, {"sha": "d72495da26d284a59038a6a8d8bab21cd3ba51f3", "filename": "gcc/target-globals.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Ftarget-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Ftarget-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.c?ref=135204ddd3bf1f3885db364c109bf977f5067e8f", "patch": "@@ -91,4 +91,33 @@ save_target_globals (void)\n   return g;\n }\n \n+/* Like save_target_globals() above, but set *this_target_optabs\n+   correctly when a previous function has changed\n+   *this_target_optabs.  */\n+\n+struct target_globals *\n+save_target_globals_default_opts ()\n+{\n+  struct target_globals *globals;\n+\n+  if (optimization_current_node != optimization_default_node)\n+    {\n+      tree opts = optimization_current_node;\n+      /* Temporarily switch to the default optimization node, so that\n+\t *this_target_optabs is set to the default, not reflecting\n+\t whatever a previous function used for the optimize\n+\t attribute.  */\n+      optimization_current_node = optimization_default_node;\n+      cl_optimization_restore\n+\t(&global_options,\n+\t TREE_OPTIMIZATION (optimization_default_node));\n+      globals = save_target_globals ();\n+      optimization_current_node = opts;\n+      cl_optimization_restore (&global_options,\n+\t\t\t       TREE_OPTIMIZATION (opts));\n+      return globals;\n+    }\n+  return save_target_globals ();\n+}\n+\n #endif"}, {"sha": "04eba530abe4ffb81dbb3f4421f42d5b997007c2", "filename": "gcc/target-globals.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Ftarget-globals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Ftarget-globals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.h?ref=135204ddd3bf1f3885db364c109bf977f5067e8f", "patch": "@@ -60,6 +60,7 @@ struct GTY(()) target_globals {\n extern struct target_globals default_target_globals;\n \n extern struct target_globals *save_target_globals (void);\n+extern struct target_globals *save_target_globals_default_opts (void);\n \n static inline void\n restore_target_globals (struct target_globals *g)"}, {"sha": "701683488df991cc6303eec17a81a577eafa0a21", "filename": "gcc/testsuite/gcc.c-torture/compile/pr52555.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr52555.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr52555.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr52555.c?ref=135204ddd3bf1f3885db364c109bf977f5067e8f", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-options \"-ffast-math\" } */\n+\n+float farg;\n+unsigned val;\n+\n+void __attribute__((optimize(\"O\")))\n+test()\n+{\n+  val = __builtin_ceilf(farg);\n+}"}, {"sha": "740d43827127172d9599120eab680001494ca8c2", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/135204ddd3bf1f3885db364c109bf977f5067e8f/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=135204ddd3bf1f3885db364c109bf977f5067e8f", "patch": "@@ -3586,14 +3586,25 @@ struct GTY(()) tree_optimization_option {\n \n   /* The optimization options used by the user.  */\n   struct cl_optimization opts;\n+\n+  /* Target optabs for this set of optimization options.  This is of\n+     type `struct target_optabs *'.  */\n+  unsigned char *GTY ((atomic)) target_optabs;\n };\n \n #define TREE_OPTIMIZATION(NODE) \\\n   (&OPTIMIZATION_NODE_CHECK (NODE)->optimization.opts)\n \n+#define TREE_OPTIMIZATION_OPTABS(NODE) \\\n+  (OPTIMIZATION_NODE_CHECK (NODE)->optimization.target_optabs)\n+\n /* Return a tree node that encapsulates the current optimization options.  */\n extern tree build_optimization_node (void);\n \n+/* Save a new set of target_optabs in a TREE_OPTIMIZATION node if the\n+   current set of optabs has changed.  */\n+extern void save_optabs_if_changed (tree);\n+\n /* Target options used by a function.  */\n \n struct GTY(()) tree_target_option {"}]}