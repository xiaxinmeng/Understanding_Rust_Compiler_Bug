{"sha": "effa55410383b2a76aee22e37c86c5d11e95aad9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZmYTU1NDEwMzgzYjJhNzZhZWUyMmUzN2M4NmM1ZDExZTk1YWFkOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-09-18T16:31:07Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-09-18T16:31:07Z"}, "message": "c-common.c (format_char_info): Add 'W' flag to comment.\n\n\t* c-common.c (format_char_info): Add 'W' flag to comment.\n\t(print_char_table, scan_char_table): Use it.\n\t(check_format_info): Use the 'W' flag to determine whether a\n\tformat argument is written into.\n\nFrom-SVN: r36492", "tree": {"sha": "a4b4934fb4b6f3d2e9a66dd7bc5aa58ea1a6e9de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4b4934fb4b6f3d2e9a66dd7bc5aa58ea1a6e9de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/effa55410383b2a76aee22e37c86c5d11e95aad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/effa55410383b2a76aee22e37c86c5d11e95aad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/effa55410383b2a76aee22e37c86c5d11e95aad9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/effa55410383b2a76aee22e37c86c5d11e95aad9/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65661a727497d251cb3e39cb9bf8ec46b6b8292a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65661a727497d251cb3e39cb9bf8ec46b6b8292a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65661a727497d251cb3e39cb9bf8ec46b6b8292a"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "faaf564c2eec02ec9261a9e0dbad4de81842f54f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/effa55410383b2a76aee22e37c86c5d11e95aad9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/effa55410383b2a76aee22e37c86c5d11e95aad9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=effa55410383b2a76aee22e37c86c5d11e95aad9", "patch": "@@ -1,3 +1,10 @@\n+2000-09-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (format_char_info): Add 'W' flag to comment.\n+\t(print_char_table, scan_char_table): Use it.\n+\t(check_format_info): Use the 'W' flag to determine whether a\n+\tformat argument is written into.\n+\n 2000-09-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-common.c (check_format_types): Reorganise and clean up,"}, {"sha": "7cdde8bd684bdbd9e7786717d5ee172d31a8f2e5", "filename": "gcc/c-common.c", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/effa55410383b2a76aee22e37c86c5d11e95aad9/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/effa55410383b2a76aee22e37c86c5d11e95aad9/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=effa55410383b2a76aee22e37c86c5d11e95aad9", "patch": "@@ -1299,8 +1299,9 @@ typedef struct\n      \"a\" allocation extension (not applicable in C99 mode), \"*\" for\n      scanf suppression, \"2\" for strftime two digit year formats, \"3\"\n      for strftime formats giving two digit years in some locales, \"E\"\n-     and \"O\" for those strftime modifiers, and \"o\" if use of strftime \"O\"\n-     is a GNU extension beyond C99.  */\n+     and \"O\" for those strftime modifiers, \"o\" if use of strftime \"O\"\n+     is a GNU extension beyond C99, and \"W\" if the argument is a\n+     pointer which is dereferenced and written into.  */\n   const char *flag_chars;\n } format_char_info;\n \n@@ -1444,7 +1445,7 @@ static const format_char_info print_char_table[] =\n   { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T94_WI,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-w\"       },\n   { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wpc\"     },\n   { \"p\",   1, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"-wc\"      },\n-  { \"n\",   1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"\"         },\n+  { \"n\",   1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"W\"        },\n   /* C99 conversion specifiers.  */\n   { \"F\",   0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#'\" },\n   { \"aA\",  0, STD_C99, { T99_D,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"-wp0 +#\"  },\n@@ -1459,19 +1460,19 @@ static const format_char_info print_char_table[] =\n static const format_char_info scan_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n-  { \"di\",    1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, \"*w\"   },\n-  { \"ouxX\",  1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"*w\"   },\n-  { \"efgEG\", 1, STD_C89, { T89_F,   BADLEN,  BADLEN,  T89_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"*w\"   },\n-  { \"c\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*cw\"  },\n-  { \"s\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*acw\" },\n-  { \"[\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*acw\" },\n-  { \"p\",     2, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*w\"   },\n-  { \"n\",     1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"\"     },\n+  { \"di\",    1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  TEX_LL,  T99_SST, T99_PD,  T99_IM  }, \"*wW\"   },\n+  { \"ouxX\",  1, STD_C89, { T89_UI,  T99_UC,  T89_US,  T89_UL,  T99_ULL, TEX_ULL, T99_ST,  T99_UPD, T99_UIM }, \"*wW\"   },\n+  { \"efgEG\", 1, STD_C89, { T89_F,   BADLEN,  BADLEN,  T89_D,   BADLEN,  T89_LD,  BADLEN,  BADLEN,  BADLEN  }, \"*wW\"   },\n+  { \"c\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*cwW\"  },\n+  { \"s\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*acwW\" },\n+  { \"[\",     1, STD_C89, { T89_C,   BADLEN,  BADLEN,  T94_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*acwW\" },\n+  { \"p\",     2, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*wW\"   },\n+  { \"n\",     1, STD_C89, { T89_I,   T99_SC,  T89_S,   T89_L,   T99_LL,  BADLEN,  T99_SST, T99_PD,  T99_IM  }, \"W\"     },\n   /* C99 conversion specifiers.  */\n-  { \"FaA\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"*w\"   },\n+  { \"FaA\",   1, STD_C99, { T99_F,   BADLEN,  BADLEN,  T99_D,   BADLEN,  T99_LD,  BADLEN,  BADLEN,  BADLEN  }, \"*wW\"   },\n   /* X/Open conversion specifiers.  */\n-  { \"C\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*w\"   },\n-  { \"S\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*aw\"  },\n+  { \"C\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*wW\"   },\n+  { \"S\",     1, STD_EXT, { TEX_W,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"*awW\"  },\n   { NULL, 0, 0, NOLENGTHS, NULL }\n };\n \n@@ -2482,9 +2483,7 @@ check_format_info (info, params)\n \t  if (index (fci->flag_chars, 'c') != 0)\n \t    main_wanted_type.char_lenient_flag = 1;\n \t  main_wanted_type.writing_in_flag = 0;\n-\t  if (info->format_type == scanf_format_type\n-\t       || (info->format_type == printf_format_type\n-\t\t   && format_char == 'n'))\n+\t  if (index (fci->flag_chars, 'W') != 0)\n \t    main_wanted_type.writing_in_flag = 1;\n \t  main_wanted_type.name = NULL;\n \t  main_wanted_type.param = cur_param;"}]}