{"sha": "d4a0780073bfaf96d72427d5138b74ef257ed625", "node_id": "C_kwDOANBUbNoAKGQ0YTA3ODAwNzNiZmFmOTZkNzI0MjdkNTEzOGI3NGVmMjU3ZWQ2MjU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-06-17T06:39:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-17T06:39:03Z"}, "message": "Merge #1308\n\n1308: Fix formatting error on 32-bits targets r=CohenArthur a=dkm\n\nPrinting size_t as [unsigned] long (%ld or %lu) raises warnings on 32-bits\r\ntargets. As the GCC pretty printer doesn't have the equivalent of libc's %z/%zu,\r\nfix all formats to use unsigned long and cast values.\r\n\r\nrefs #1229\r\n\r\nSigned-off-by: Marc Poulhi\u00e8s <dkm@kataplop.net>\r\nCo-authored-by: Rainer Orth <ro@gcc.gnu.org>\n\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>", "tree": {"sha": "6aeab1fc00657b83bb17c94e3317fcaf9aa7c88f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6aeab1fc00657b83bb17c94e3317fcaf9aa7c88f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4a0780073bfaf96d72427d5138b74ef257ed625", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJirCGHCRBK7hj4Ov3rIwAAGxUIADwnBlve0GTkUqRtWf0yjhnw\nlEaVvi4uzKGhMFSp/O6ZCGrpcgiD4tA9xa7SRko1u9HHnJceqHNcL9oBcGn93kJH\nmG8Ik613Cvq8pcx71svAn6sI3JDrcr+dHaxm5SNjRspozxxq9G2Scr1c0GLQD9YO\n8ew5TcA0FwlkAB++/1qarsOQE04rInSTQbYLNPp+3GshHfnZspzW2wJk3hIRQLLd\nsXjlM3+JhLBpLLLOvqSgvvAL+ubuF6NhybFFwqPPgGqSR2BfSW6lguuqdt9IB06C\nKs42mY0maUsR6+7NPjRRroeiIcBe0f8HIOlsfSf8bS+H0U1Viw5k/xN02UQQuLc=\n=yKZd\n-----END PGP SIGNATURE-----\n", "payload": "tree 6aeab1fc00657b83bb17c94e3317fcaf9aa7c88f\nparent 08e407e977e78bfebb2faa71be377c58369b8b0d\nparent 29f57496698d2098d48b9fff7807f22dadc10e6b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1655447943 +0000\ncommitter GitHub <noreply@github.com> 1655447943 +0000\n\nMerge #1308\n\n1308: Fix formatting error on 32-bits targets r=CohenArthur a=dkm\n\nPrinting size_t as [unsigned] long (%ld or %lu) raises warnings on 32-bits\r\ntargets. As the GCC pretty printer doesn't have the equivalent of libc's %z/%zu,\r\nfix all formats to use unsigned long and cast values.\r\n\r\nrefs #1229\r\n\r\nSigned-off-by: Marc Poulhi\u00e8s <dkm@kataplop.net>\r\nCo-authored-by: Rainer Orth <ro@gcc.gnu.org>\n\nCo-authored-by: Marc Poulhi\u00e8s <dkm@kataplop.net>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a0780073bfaf96d72427d5138b74ef257ed625", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4a0780073bfaf96d72427d5138b74ef257ed625", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a0780073bfaf96d72427d5138b74ef257ed625/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08e407e977e78bfebb2faa71be377c58369b8b0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08e407e977e78bfebb2faa71be377c58369b8b0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08e407e977e78bfebb2faa71be377c58369b8b0d"}, {"sha": "29f57496698d2098d48b9fff7807f22dadc10e6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f57496698d2098d48b9fff7807f22dadc10e6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f57496698d2098d48b9fff7807f22dadc10e6b"}], "stats": {"total": 71, "additions": 41, "deletions": 30}, "files": [{"sha": "1219e11c7b4bda5a0f7f62e619b60ce25afe4e2b", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a0780073bfaf96d72427d5138b74ef257ed625/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a0780073bfaf96d72427d5138b74ef257ed625/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=d4a0780073bfaf96d72427d5138b74ef257ed625", "patch": "@@ -707,10 +707,12 @@ MacroExpander::match_repetition (Parser<MacroInvocLexer> &parser,\n     rust_error_at (rep.get_match_locus (),\n \t\t   \"invalid amount of matches for macro invocation. Expected \"\n \t\t   \"between %s and %s, got %lu\",\n-\t\t   lo_str.c_str (), hi_str.c_str (), match_amount);\n+\t\t   lo_str.c_str (), hi_str.c_str (),\n+\t\t   (unsigned long) match_amount);\n \n   rust_debug_loc (rep.get_match_locus (), \"%s matched %lu times\",\n-\t\t  res ? \"successfully\" : \"unsuccessfully\", match_amount);\n+\t\t  res ? \"successfully\" : \"unsuccessfully\",\n+\t\t  (unsigned long) match_amount);\n \n   // We have to handle zero fragments differently: They will not have been\n   // \"matched\" but they are still valid and should be inserted as a special"}, {"sha": "6f16214a2d8fa9126bb4d24036b02a82a1cf6c5f", "filename": "gcc/rust/expand/rust-macro-substitute-ctx.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a0780073bfaf96d72427d5138b74ef257ed625/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a0780073bfaf96d72427d5138b74ef257ed625/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-substitute-ctx.cc?ref=d4a0780073bfaf96d72427d5138b74ef257ed625", "patch": "@@ -87,8 +87,9 @@ SubstituteCtx::check_repetition_amount (size_t pattern_start,\n \t\t      rust_error_at (\n \t\t\tfrag_token->get_locus (),\n \t\t\t\"different amount of matches used in merged \"\n-\t\t\t\"repetitions: expected %ld, got %ld\",\n-\t\t\texpected_repetition_amount, repeat_amount);\n+\t\t\t\"repetitions: expected %lu, got %lu\",\n+\t\t\t(unsigned long) expected_repetition_amount,\n+\t\t\t(unsigned long) repeat_amount);\n \t\t      is_valid = false;\n \t\t    }\n \t\t}\n@@ -110,7 +111,7 @@ SubstituteCtx::substitute_repetition (\n   if (!check_repetition_amount (pattern_start, pattern_end, repeat_amount))\n     return {};\n \n-  rust_debug (\"repetition amount to use: %lu\", repeat_amount);\n+  rust_debug (\"repetition amount to use: %lu\", (unsigned long) repeat_amount);\n   std::vector<std::unique_ptr<AST::Token>> expanded;\n   std::vector<std::unique_ptr<AST::Token>> new_macro;\n "}, {"sha": "13921e70b6c13fe771dfd92b03b61a00b3558172", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a0780073bfaf96d72427d5138b74ef257ed625/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a0780073bfaf96d72427d5138b74ef257ed625/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=d4a0780073bfaf96d72427d5138b74ef257ed625", "patch": "@@ -1573,7 +1573,7 @@ Lexer::parse_partial_unicode_escape ()\n       rust_error_at (get_current_location (),\n \t\t     \"unicode escape should be between 1 and 6 hex \"\n \t\t     \"characters; it is %lu\",\n-\t\t     num_str.length ());\n+\t\t     (unsigned long) num_str.length ());\n       // return false;\n       return std::make_pair (Codepoint (0), additional_length_offset);\n     }"}, {"sha": "f9850e80b31e3ab4c6121a7129c548a03a1d59b7", "filename": "gcc/rust/lint/rust-lint-marklive.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a0780073bfaf96d72427d5138b74ef257ed625/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a0780073bfaf96d72427d5138b74ef257ed625/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.cc?ref=d4a0780073bfaf96d72427d5138b74ef257ed625", "patch": "@@ -235,8 +235,8 @@ MarkLive::visit (HIR::FieldAccessExpr &expr)\n   if (index >= variant->num_fields ())\n     {\n       rust_error_at (expr.get_receiver_expr ()->get_locus (),\n-\t\t     \"cannot access struct %s by index: %ld\",\n-\t\t     adt->get_name ().c_str (), index);\n+\t\t     \"cannot access struct %s by index: %lu\",\n+\t\t     adt->get_name ().c_str (), (unsigned long) index);\n       return;\n     }\n "}, {"sha": "3c429d47a96324707676053aeece7a0a6a03c381", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a0780073bfaf96d72427d5138b74ef257ed625/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a0780073bfaf96d72427d5138b74ef257ed625/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=d4a0780073bfaf96d72427d5138b74ef257ed625", "patch": "@@ -98,8 +98,8 @@ validate_crate_name (const std::string &crate_name, Error &error)\n     }\n   if (crate_name.length () > kMaxNameLength)\n     {\n-      error = Error (Location (), \"crate name cannot exceed %ld characters\",\n-\t\t     kMaxNameLength);\n+      error = Error (Location (), \"crate name cannot exceed %lu characters\",\n+\t\t     (unsigned long) kMaxNameLength);\n       return false;\n     }\n   for (auto &c : crate_name)"}, {"sha": "df312af6dab3e277ecc5a02117e40b4c352df350", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a0780073bfaf96d72427d5138b74ef257ed625/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a0780073bfaf96d72427d5138b74ef257ed625/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc?ref=d4a0780073bfaf96d72427d5138b74ef257ed625", "patch": "@@ -87,11 +87,12 @@ TypeCheckPattern::visit (HIR::TupleStructPattern &pattern)\n \n \tif (items_no_range.get_patterns ().size () != variant->num_fields ())\n \t  {\n-\t    rust_error_at (pattern.get_locus (),\n-\t\t\t   \"this pattern has %lu fields but the corresponding \"\n-\t\t\t   \"tuple variant has %lu field\",\n-\t\t\t   items_no_range.get_patterns ().size (),\n-\t\t\t   variant->num_fields ());\n+\t    rust_error_at (\n+\t      pattern.get_locus (),\n+\t      \"this pattern has %lu fields but the corresponding \"\n+\t      \"tuple variant has %lu field\",\n+\t      (unsigned long) items_no_range.get_patterns ().size (),\n+\t      (unsigned long) variant->num_fields ());\n \t    // we continue on to try and setup the types as best we can for\n \t    // type checking\n \t  }"}, {"sha": "60407a70b150223a4c1397f58f0a65d01ca837a9", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a0780073bfaf96d72427d5138b74ef257ed625/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a0780073bfaf96d72427d5138b74ef257ed625/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=d4a0780073bfaf96d72427d5138b74ef257ed625", "patch": "@@ -678,7 +678,8 @@ SubstitutionRef::get_mappings_from_generic_args (HIR::GenericArgs &args)\n       rust_error_at (\n \tr,\n \t\"generic item takes at most %lu type arguments but %lu were supplied\",\n-\tsubstitutions.size (), args.get_type_args ().size ());\n+\t(unsigned long) substitutions.size (),\n+\t(unsigned long) args.get_type_args ().size ());\n       return SubstitutionArgumentMappings::error ();\n     }\n \n@@ -690,7 +691,8 @@ SubstitutionRef::get_mappings_from_generic_args (HIR::GenericArgs &args)\n       rust_error_at (\n \tr,\n \t\"generic item takes at least %lu type arguments but %lu were supplied\",\n-\t(min_required_substitutions () - offs), args.get_type_args ().size ());\n+\t(unsigned long) (min_required_substitutions () - offs),\n+\t(unsigned long) args.get_type_args ().size ());\n       return SubstitutionArgumentMappings::error ();\n     }\n \n@@ -3223,7 +3225,8 @@ TypeCheckCallExpr::visit (ADTType &type)\n     {\n       rust_error_at (call.get_locus (),\n \t\t     \"unexpected number of arguments %lu expected %lu\",\n-\t\t     call.num_params (), variant.num_fields ());\n+\t\t     (unsigned long) call.num_params (),\n+\t\t     (unsigned long) variant.num_fields ());\n       return;\n     }\n \n@@ -3254,8 +3257,8 @@ TypeCheckCallExpr::visit (ADTType &type)\n   if (i != call.num_params ())\n     {\n       rust_error_at (call.get_locus (),\n-\t\t     \"unexpected number of arguments %lu expected %lu\", i,\n-\t\t     call.num_params ());\n+\t\t     \"unexpected number of arguments %lu expected %lu\",\n+\t\t     (unsigned long) i, (unsigned long) call.num_params ());\n       return;\n     }\n \n@@ -3274,15 +3277,17 @@ TypeCheckCallExpr::visit (FnType &type)\n \t    {\n \t      rust_error_at (call.get_locus (),\n \t\t\t     \"unexpected number of arguments %lu expected %lu\",\n-\t\t\t     call.num_params (), type.num_params ());\n+\t\t\t     (unsigned long) call.num_params (),\n+\t\t\t     (unsigned long) type.num_params ());\n \t      return;\n \t    }\n \t}\n       else\n \t{\n \t  rust_error_at (call.get_locus (),\n \t\t\t \"unexpected number of arguments %lu expected %lu\",\n-\t\t\t call.num_params (), type.num_params ());\n+\t\t\t (unsigned long) call.num_params (),\n+\t\t\t (unsigned long) type.num_params ());\n \t  return;\n \t}\n     }\n@@ -3322,8 +3327,8 @@ TypeCheckCallExpr::visit (FnType &type)\n   if (i < call.num_params ())\n     {\n       rust_error_at (call.get_locus (),\n-\t\t     \"unexpected number of arguments %lu expected %lu\", i,\n-\t\t     call.num_params ());\n+\t\t     \"unexpected number of arguments %lu expected %lu\",\n+\t\t     (unsigned long) i, (unsigned long) call.num_params ());\n       return;\n     }\n \n@@ -3338,7 +3343,8 @@ TypeCheckCallExpr::visit (FnPtr &type)\n     {\n       rust_error_at (call.get_locus (),\n \t\t     \"unexpected number of arguments %lu expected %lu\",\n-\t\t     call.num_params (), type.num_params ());\n+\t\t     (unsigned long) call.num_params (),\n+\t\t     (unsigned long) type.num_params ());\n       return;\n     }\n \n@@ -3372,8 +3378,8 @@ TypeCheckCallExpr::visit (FnPtr &type)\n   if (i != call.num_params ())\n     {\n       rust_error_at (call.get_locus (),\n-\t\t     \"unexpected number of arguments %lu expected %lu\", i,\n-\t\t     call.num_params ());\n+\t\t     \"unexpected number of arguments %lu expected %lu\",\n+\t\t     (unsigned long) i, (unsigned long) call.num_params ());\n       return;\n     }\n \n@@ -3393,7 +3399,8 @@ TypeCheckMethodCallExpr::visit (FnType &type)\n     {\n       rust_error_at (call.get_locus (),\n \t\t     \"unexpected number of arguments %lu expected %lu\",\n-\t\t     call.num_params (), type.num_params ());\n+\t\t     (unsigned long) call.num_params (),\n+\t\t     (unsigned long) type.num_params ());\n       return;\n     }\n \n@@ -3427,8 +3434,8 @@ TypeCheckMethodCallExpr::visit (FnType &type)\n   if (i != num_args_to_call)\n     {\n       rust_error_at (call.get_locus (),\n-\t\t     \"unexpected number of arguments %lu expected %lu\", i,\n-\t\t     call.num_params ());\n+\t\t     \"unexpected number of arguments %lu expected %lu\",\n+\t\t     (unsigned long) i, (unsigned long) call.num_params ());\n       return;\n     }\n "}]}