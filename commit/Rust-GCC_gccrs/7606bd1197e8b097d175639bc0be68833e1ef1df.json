{"sha": "7606bd1197e8b097d175639bc0be68833e1ef1df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYwNmJkMTE5N2U4YjA5N2QxNzU2MzliYzBiZTY4ODMzZTFlZjFkZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-11-08T16:07:32Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-11-08T16:07:32Z"}, "message": "stl_tree.h (_Rb_tree<>::_M_erase_aux): Add.\n\n2010-11-08  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_tree.h (_Rb_tree<>::_M_erase_aux): Add.\n\t(_Rb_tree<>::erase(iterator)): Fix in C++0x mode to take\n\tconst_iterator; remove redundant overload in C++03 mode.\n\t(_Rb_tree<>::erase(iterator, iterator)): Likewise.\n\t* include/bits/stl_map.h (map<>::erase): Adjust.\n\t(map<>::insert): Fix signature in C++0x mode.\n\t* include/bits/stl_set.h (set<>::erase): Likewise.\n\t(set<>::insert): Likewise.\n\t* include/bits/stl_multimap.h (multimap<>::erase): Likewise.\n\t(multimap<>::insert): Likewise.\n\t* include/bits/stl_multiset.h (multiset<>::erase): Likewise.\n\t(multiset<>::insert): Fix signature in C++0x mode.\n\t* include/profile/set.h: Adjust.\n\t* include/profile/multiset.h: Likewise.\n\t* include/profile/map.h: Likewise.\n\t* include/profile/multimap.h: Likewise.\n\t* testsuite/util/exception/safety.h (erase_base, insert_base):\n\tUpdate.\n\nFrom-SVN: r166438", "tree": {"sha": "aab9c7af7885b649144d762d73e89592cb94b93a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aab9c7af7885b649144d762d73e89592cb94b93a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7606bd1197e8b097d175639bc0be68833e1ef1df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7606bd1197e8b097d175639bc0be68833e1ef1df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7606bd1197e8b097d175639bc0be68833e1ef1df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7606bd1197e8b097d175639bc0be68833e1ef1df/comments", "author": null, "committer": null, "parents": [{"sha": "7876e2b5f44e8d961d43f9e0e2b007efebd1d955", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7876e2b5f44e8d961d43f9e0e2b007efebd1d955", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7876e2b5f44e8d961d43f9e0e2b007efebd1d955"}], "stats": {"total": 573, "additions": 222, "deletions": 351}, "files": [{"sha": "fa9f25e03c8d2ae1b2c2174f60cc7b4b98fe8db3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7606bd1197e8b097d175639bc0be68833e1ef1df", "patch": "@@ -1,3 +1,24 @@\n+2010-11-08  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_tree.h (_Rb_tree<>::_M_erase_aux): Add.\n+\t(_Rb_tree<>::erase(iterator)): Fix in C++0x mode to take\n+\tconst_iterator; remove redundant overload in C++03 mode.\n+\t(_Rb_tree<>::erase(iterator, iterator)): Likewise.\n+\t* include/bits/stl_map.h (map<>::erase): Adjust.\n+\t(map<>::insert): Fix signature in C++0x mode.\n+\t* include/bits/stl_set.h (set<>::erase): Likewise.\n+\t(set<>::insert): Likewise.\n+\t* include/bits/stl_multimap.h (multimap<>::erase): Likewise.\n+\t(multimap<>::insert): Likewise.\n+\t* include/bits/stl_multiset.h (multiset<>::erase): Likewise.\n+\t(multiset<>::insert): Fix signature in C++0x mode.\n+\t* include/profile/set.h: Adjust.\n+\t* include/profile/multiset.h: Likewise.\n+\t* include/profile/map.h: Likewise.\n+\t* include/profile/multimap.h: Likewise.\n+\t* testsuite/util/exception/safety.h (erase_base, insert_base):\n+\tUpdate.\n+\n 2010-11-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/profile/unordered_map (unordered_map<>::operator[](_Key&&)):"}, {"sha": "9614a12f10675b4079d8a52d1dbe0f632cbc71bb", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=7606bd1197e8b097d175639bc0be68833e1ef1df", "patch": "@@ -510,7 +510,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        */\n       void\n       insert(std::initializer_list<value_type> __list)\n-      { insert (__list.begin(), __list.end()); }\n+      { insert(__list.begin(), __list.end()); }\n #endif\n \n       /**\n@@ -537,7 +537,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  Insertion requires logarithmic time (if the hint is not taken).\n        */\n       iterator\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      insert(const_iterator __position, const value_type& __x)\n+#else\n       insert(iterator __position, const value_type& __x)\n+#endif\n       { return _M_t._M_insert_unique_(__position, __x); }\n \n       /**\n@@ -570,7 +574,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  the pointer is the user's responsibility.\n        */\n       iterator\n-      erase(iterator __position)\n+      erase(const_iterator __position)\n       { return _M_t.erase(__position); }\n #else\n       /**\n@@ -619,7 +623,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  in any way.  Managing the pointer is the user's responsibility.\n        */\n       iterator\n-      erase(iterator __first, iterator __last)\n+      erase(const_iterator __first, const_iterator __last)\n       { return _M_t.erase(__first, __last); }\n #else\n       /**"}, {"sha": "1a01ffecb6a1e415bdbd2ec8d0018682826259ad", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=7606bd1197e8b097d175639bc0be68833e1ef1df", "patch": "@@ -459,7 +459,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  Insertion requires logarithmic time (if the hint is not taken).\n        */\n       iterator\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      insert(const_iterator __position, const value_type& __x)\n+#else\n       insert(iterator __position, const value_type& __x)\n+#endif\n       { return _M_t._M_insert_equal_(__position, __x); }\n \n       /**\n@@ -506,7 +510,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  responsibility.\n        */\n       iterator\n-      erase(iterator __position)\n+      erase(const_iterator __position)\n       { return _M_t.erase(__position); }\n #else\n       /**\n@@ -552,10 +556,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  This function erases a sequence of elements from a %multimap.\n        *  Note that this function only erases the elements, and that if\n        *  the elements themselves are pointers, the pointed-to memory is not\n-       *  touched in any way.  Managing the pointer is the user's responsibility.\n+       *  touched in any way.  Managing the pointer is the user's\n+       *  responsibility.\n        */\n       iterator\n-      erase(iterator __first, iterator __last)\n+      erase(const_iterator __first, const_iterator __last)\n       { return _M_t.erase(__first, __last); }\n #else\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -569,7 +574,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  This function erases a sequence of elements from a %multimap.\n        *  Note that this function only erases the elements, and that if\n        *  the elements themselves are pointers, the pointed-to memory is not\n-       *  touched in any way.  Managing the pointer is the user's responsibility.\n+       *  touched in any way.  Managing the pointer is the user's\n+       *  responsibility.\n        */\n       void\n       erase(iterator __first, iterator __last)"}, {"sha": "20d7f5078995f328f02fb33ea497d4431686baf8", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=7606bd1197e8b097d175639bc0be68833e1ef1df", "patch": "@@ -417,7 +417,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  Insertion requires logarithmic time (if the hint is not taken).\n        */\n       iterator\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      insert(const_iterator __position, const value_type& __x)\n+#else\n       insert(iterator __position, const value_type& __x)\n+#endif\n       { return _M_t._M_insert_equal_(__position, __x); }\n \n       /**\n@@ -463,7 +467,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  responsibility.\n        */\n       iterator\n-      erase(iterator __position)\n+      erase(const_iterator __position)\n       { return _M_t.erase(__position); }\n #else\n       /**\n@@ -509,10 +513,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  This function erases a sequence of elements from a %multiset.\n        *  Note that this function only erases the elements, and that if\n        *  the elements themselves are pointers, the pointed-to memory is not\n-       *  touched in any way.  Managing the pointer is the user's responsibility.\n+       *  touched in any way.  Managing the pointer is the user's\n+       *  responsibility.\n        */\n       iterator\n-      erase(iterator __first, iterator __last)\n+      erase(const_iterator __first, const_iterator __last)\n       { return _M_t.erase(__first, __last); }\n #else\n       /**\n@@ -524,7 +529,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  This function erases a sequence of elements from a %multiset.\n        *  Note that this function only erases the elements, and that if\n        *  the elements themselves are pointers, the pointed-to memory is not\n-       *  touched in any way.  Managing the pointer is the user's responsibility.\n+       *  touched in any way.  Managing the pointer is the user's\n+       *  responsibility.\n        */\n       void\n       erase(iterator __first, iterator __last)"}, {"sha": "211b67e196006784ce19f7233b45a6e6d29e6cdc", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=7606bd1197e8b097d175639bc0be68833e1ef1df", "patch": "@@ -429,7 +429,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  Insertion requires logarithmic time (if the hint is not taken).\n        */\n       iterator\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      insert(const_iterator __position, const value_type& __x)\n+#else\n       insert(iterator __position, const value_type& __x)\n+#endif\n       { return _M_t._M_insert_unique_(__position, __x); }\n \n       /**\n@@ -472,10 +476,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  This function erases an element, pointed to by the given iterator,\n        *  from a %set.  Note that this function only erases the element, and\n        *  that if the element is itself a pointer, the pointed-to memory is not\n-       *  touched in any way.  Managing the pointer is the user's responsibility.\n+       *  touched in any way.  Managing the pointer is the user's\n+       *  responsibility.\n        */\n       iterator\n-      erase(iterator __position)\n+      erase(const_iterator __position)\n       { return _M_t.erase(__position); }\n #else\n       /**\n@@ -485,7 +490,8 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  This function erases an element, pointed to by the given iterator,\n        *  from a %set.  Note that this function only erases the element, and\n        *  that if the element is itself a pointer, the pointed-to memory is not\n-       *  touched in any way.  Managing the pointer is the user's responsibility.\n+       *  touched in any way.  Managing the pointer is the user's\n+       *  responsibility.\n        */\n       void\n       erase(iterator __position)\n@@ -523,7 +529,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n        *  in any way.  Managing the pointer is the user's responsibility.\n        */\n       iterator\n-      erase(iterator __first, iterator __last)\n+      erase(const_iterator __first, const_iterator __last)\n       { return _M_t.erase(__first, __last); }\n #else\n       /**"}, {"sha": "b85398de3f3ebc0f28c0891d2d7de3860fa356a2", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 35, "deletions": 140, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=7606bd1197e8b097d175639bc0be68833e1ef1df", "patch": "@@ -702,22 +702,30 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n         void\n         _M_insert_equal(_InputIterator __first, _InputIterator __last);\n \n+    private:\n+      void\n+      _M_erase_aux(const_iterator __position);\n+\n+      void\n+      _M_erase_aux(const_iterator __first, const_iterator __last);\n+\n+    public:\n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 130. Associative erase should return an iterator.\n       iterator\n-      erase(iterator __position);\n-\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // DR 130. Associative erase should return an iterator.\n-      const_iterator\n-      erase(const_iterator __position);\n+      erase(const_iterator __position)\n+      {\n+\tconst_iterator __result = __position;\n+\t++__result;\n+\t_M_erase_aux(__position);\n+\treturn iterator(static_cast<_Link_type>\n+\t\t\t(const_cast<_Base_ptr>(__result._M_node)));\n+      }\n #else\n       void\n-      erase(iterator __position);\n-\n-      void\n-      erase(const_iterator __position);\n+      erase(const_iterator __position)\n+      { _M_erase_aux(__position); }\n #endif\n       size_type\n       erase(const key_type& __x);\n@@ -726,18 +734,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // DR 130. Associative erase should return an iterator.\n       iterator\n-      erase(iterator __first, iterator __last);\n-\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // DR 130. Associative erase should return an iterator.\n-      const_iterator\n-      erase(const_iterator __first, const_iterator __last);\n+      erase(const_iterator __first, const_iterator __last)\n+      {\n+\t_M_erase_aux(__first, __last);\n+\treturn iterator(static_cast<_Link_type>\n+\t\t\t(const_cast<_Base_ptr>(__last._M_node)));\n+      }\n #else\n       void\n-      erase(iterator __first, iterator __last);\n-\n-      void\n-      erase(const_iterator __first, const_iterator __last);\n+      erase(const_iterator __first, const_iterator __last)\n+      { _M_erase_aux(__first, __last); }\n #endif\n       void\n       erase(const key_type* __first, const key_type* __last);\n@@ -1353,64 +1359,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  _M_insert_equal_(end(), *__first);\n       }\n \n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  // DR 130. Associative erase should return an iterator.\n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n-    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n-    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    erase(iterator __position)\n-    {\n-      iterator __result = __position;\n-      ++__result;\n-      _Link_type __y =\n-\tstatic_cast<_Link_type>(_Rb_tree_rebalance_for_erase\n-\t\t\t\t(__position._M_node,\n-\t\t\t\t this->_M_impl._M_header));\n-      _M_destroy_node(__y);\n-      --_M_impl._M_node_count;\n-      return __result;\n-    }\n-\n-  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  // DR 130. Associative erase should return an iterator.\n-  template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n-    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator\n-    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    erase(const_iterator __position)\n-    {\n-      const_iterator __result = __position;\n-      ++__result;\n-      _Link_type __y =\n-\tstatic_cast<_Link_type>(_Rb_tree_rebalance_for_erase\n-\t\t\t\t(const_cast<_Base_ptr>(__position._M_node),\n-\t\t\t\t this->_M_impl._M_header));\n-      _M_destroy_node(__y);\n-      --_M_impl._M_node_count;\n-      return __result;\n-    }\n-#else\n-  template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n-    inline void\n-    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    erase(iterator __position)\n-    {\n-      _Link_type __y =\n-\tstatic_cast<_Link_type>(_Rb_tree_rebalance_for_erase\n-\t\t\t\t(__position._M_node,\n-\t\t\t\t this->_M_impl._M_header));\n-      _M_destroy_node(__y);\n-      --_M_impl._M_node_count;\n-    }\n-\n-  template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n-    inline void\n+    void\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    erase(const_iterator __position)\n+    _M_erase_aux(const_iterator __position)\n     {\n       _Link_type __y =\n \tstatic_cast<_Link_type>(_Rb_tree_rebalance_for_erase\n@@ -1419,68 +1372,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       _M_destroy_node(__y);\n       --_M_impl._M_node_count;\n     }\n-#endif\n-\n-  template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n-    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type\n-    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    erase(const _Key& __x)\n-    {\n-      pair<iterator, iterator> __p = equal_range(__x);\n-      const size_type __old_size = size();\n-      erase(__p.first, __p.second);\n-      return __old_size - size();\n-    }\n-\n-#ifdef __GXX_EXPERIMENTAL_CXX0X__\n-  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  // DR 130. Associative erase should return an iterator.\n-  template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n-    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n-    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    erase(iterator __first, iterator __last)\n-    {\n-      if (__first == begin() && __last == end())\n-        {\n-\t  clear();\n-\t  return end();\n-        }\n-      else\n-        {\n-\t  while (__first != __last)\n-\t    erase(__first++);\n-\t  return __last;\n-        }\n-    }\n \n-  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  // DR 130. Associative erase should return an iterator.\n-  template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n-    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator\n-    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    erase(const_iterator __first, const_iterator __last)\n-    {\n-      if (__first == begin() && __last == end())\n-        {\n-\t  clear();\n-\t  return end();\n-        }\n-      else\n-        {\n-\t  while (__first != __last)\n-\t    erase(__first++);\n-\t  return __last;\n-        }\n-    }\n-#else\n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n     void\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    erase(iterator __first, iterator __last)\n+    _M_erase_aux(const_iterator __first, const_iterator __last)\n     {\n       if (__first == begin() && __last == end())\n \tclear();\n@@ -1491,17 +1388,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>\n-    void\n+    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n-    erase(const_iterator __first, const_iterator __last)\n+    erase(const _Key& __x)\n     {\n-      if (__first == begin() && __last == end())\n-\tclear();\n-      else\n-\twhile (__first != __last)\n-\t  erase(__first++);\n+      pair<iterator, iterator> __p = equal_range(__x);\n+      const size_type __old_size = size();\n+      erase(__p.first, __p.second);\n+      return __old_size - size();\n     }\n-#endif\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc>"}, {"sha": "5bc9ab9f81b178a02f301ca8615f7a6714f062d1", "filename": "libstdc++-v3/include/profile/map.h", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h?ref=7606bd1197e8b097d175639bc0be68833e1ef1df", "patch": "@@ -251,17 +251,22 @@ namespace __profile\n         size_type size_before = size();\n         _Base::insert(__list); \n         __profcxx_map_to_unordered_map_insert(this, size_before, \n-                                                size() - size_before);\n+\t\t\t\t\t      size() - size_before);\n       }\n #endif\n \n       iterator\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      insert(const_iterator __position, const value_type& __x)\n+#else\n       insert(iterator __position, const value_type& __x)\n+#endif\n       {\n         size_type size_before = size();\n-\treturn iterator(_Base::insert(__position, __x));\n+\titerator __i = iterator(_Base::insert(__position, __x));\n         __profcxx_map_to_unordered_map_insert(this, size_before, \n-                                                size() - size_before);\n+\t\t\t\t\t      size() - size_before);\n+\treturn __i;\n       }\n \n       template<typename _InputIterator>\n@@ -276,7 +281,7 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n-      erase(iterator __position)\n+      erase(const_iterator __position)\n       {\n \titerator __i = _Base::erase(__position);\n         __profcxx_map_to_unordered_map_erase(this, size(), 1);\n@@ -306,31 +311,18 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n-      erase(iterator __first, iterator __last)\n-      {\n-\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t// 151. can't currently clear() empty container\n-\twhile (__first != __last)\n-\t  this->erase(__first++);\n-\treturn __last;\n-      }\n+      erase(const_iterator __first, const_iterator __last)\n+      { return iterator(_Base::erase(__first, __last)); }\n #else\n       void\n       erase(iterator __first, iterator __last)\n-      {\n-\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t// 151. can't currently clear() empty container\n-\twhile (__first != __last)\n-\t  this->erase(__first++);\n-      }\n+      { _Base::erase(__first, __last); }\n #endif\n \n       void\n \n       swap(map& __x)\n-      {\n-\t_Base::swap(__x);\n-      }\n+      { _Base::swap(__x); }\n \n       void\n       clear()"}, {"sha": "6fe7f5bc0d92c7dfd8e38125fe78cc822b342eca", "filename": "libstdc++-v3/include/profile/multimap.h", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h?ref=7606bd1197e8b097d175639bc0be68833e1ef1df", "patch": "@@ -192,22 +192,22 @@ namespace __profile\n #endif\n \n       iterator\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      insert(const_iterator __position, const value_type& __x)\n+#else\n       insert(iterator __position, const value_type& __x)\n-      {\n-\treturn iterator(_Base::insert(__position, __x));\n-      }\n+#endif\n+      { return iterator(_Base::insert(__position, __x)); }\n \n       template<typename _InputIterator>\n         void\n         insert(_InputIterator __first, _InputIterator __last)\n-        {\n-\t  _Base::insert(__first, __last);\n-\t}\n+        { _Base::insert(__first, __last); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n-      erase(iterator __position)\n-      { return _Base::erase(__position); }\n+      erase(const_iterator __position)\n+      { return iterator(_Base::erase(__position)); }\n #else\n       void\n       erase(iterator __position)\n@@ -230,30 +230,17 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n-      erase(iterator __first, iterator __last)\n-      {\n-\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t// 151. can't currently clear() empty container\n-\twhile (__first != __last)\n-\t  this->erase(__first++);\n-\treturn __last;\n-      }\n+      erase(const_iterator __first, const_iterator __last)\n+      { return iterator(_Base::erase(__first, __last)); }\n #else\n       void\n       erase(iterator __first, iterator __last)\n-      {\n-\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t// 151. can't currently clear() empty container\n-\twhile (__first != __last)\n-\t  this->erase(__first++);\n-      }\n+      { _Base::erase(__first, __last); }\n #endif\n \n       void\n       swap(multimap& __x)\n-      {\n-\t_Base::swap(__x);\n-      }\n+      { _Base::swap(__x); }\n \n       void\n       clear()"}, {"sha": "d66fa0cd97cbe487b22126b02c3cf599880c0a2c", "filename": "libstdc++-v3/include/profile/multiset.h", "status": "modified", "additions": 14, "deletions": 27, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h?ref=7606bd1197e8b097d175639bc0be68833e1ef1df", "patch": "@@ -184,17 +184,17 @@ namespace __profile\n       { return iterator(_Base::insert(__x)); }\n \n       iterator\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      insert(const_iterator __position, const value_type& __x)\n+#else\n       insert(iterator __position, const value_type& __x)\n-      {\n-\treturn iterator(_Base::insert(__position, __x));\n-      }\n+#endif\n+      { return iterator(_Base::insert(__position, __x)); }\n \n       template<typename _InputIterator>\n-      void\n-      insert(_InputIterator __first, _InputIterator __last)\n-      {\n-\t_Base::insert(__first, __last);\n-      }\n+        void\n+        insert(_InputIterator __first, _InputIterator __last)\n+        { _Base::insert(__first, __last); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       void\n@@ -204,8 +204,8 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n-      erase(iterator __position)\n-      { return _Base::erase(__position); }\n+      erase(const_iterator __position)\n+      { return iterator(_Base::erase(__position)); }\n #else\n       void\n       erase(iterator __position)\n@@ -228,30 +228,17 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n-      erase(iterator __first, iterator __last)\n-      {\n-\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t// 151. can't currently clear() empty container\n-\twhile (__first != __last)\n-\t  this->erase(__first++);\n-\treturn __last;\n-      }\n+      erase(const_iterator __first, const_iterator __last)\n+      { return iterator(_Base::erase(__first, __last)); }\n #else\n       void\n       erase(iterator __first, iterator __last)\n-      {\n-\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t// 151. can't currently clear() empty container\n-\twhile (__first != __last)\n-\t  this->erase(__first++);\n-      }\n+      { _Base::erase(__first, __last); }\n #endif\n \n       void\n       swap(multiset& __x)\n-      {\n-\t_Base::swap(__x);\n-      }\n+      { _Base::swap(__x); }\n \n       void\n       clear()"}, {"sha": "f6941ebbee914829ec9fbf44ceea999d4682c842", "filename": "libstdc++-v3/include/profile/set.h", "status": "modified", "additions": 12, "deletions": 25, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h?ref=7606bd1197e8b097d175639bc0be68833e1ef1df", "patch": "@@ -189,17 +189,17 @@ namespace __profile\n       }\n \n       iterator\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      insert(const_iterator __position, const value_type& __x)\n+#else\n       insert(iterator __position, const value_type& __x)\n-      {\n-\treturn iterator(_Base::insert(__position, __x));\n-      }\n+#endif\n+      { return iterator(_Base::insert(__position, __x)); }\n \n       template <typename _InputIterator>\n         void\n         insert(_InputIterator __first, _InputIterator __last)\n-        {\n-\t  _Base::insert(__first, __last);\n-\t}\n+        { _Base::insert(__first, __last); }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       void\n@@ -209,8 +209,8 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n-      erase(iterator __position)\n-      { return _Base::erase(__position); }\n+      erase(const_iterator __position)\n+      { return iterator(_Base::erase(__position)); }\n #else\n       void\n       erase(iterator __position)\n@@ -232,30 +232,17 @@ namespace __profile\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       iterator\n-      erase(iterator __first, iterator __last)\n-      {\n-\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t// 151. can't currently clear() empty container\n-\twhile (__first != __last)\n-\t  this->erase(__first++);\n-\treturn __last;\n-      }\n+      erase(const_iterator __first, const_iterator __last)\n+      { return iterator(_Base::erase(__first, __last)); }\n #else\n       void\n       erase(iterator __first, iterator __last)\n-      {\n-\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t// 151. can't currently clear() empty container\n-\twhile (__first != __last)\n-\t  this->erase(__first++);\n-      }\n+      { _Base::erase(__first, __last); }\n #endif\n \n       void\n       swap(set& __x)\n-      {\n-\t_Base::swap(__x);\n-      }\n+      { _Base::swap(__x); }\n \n       void\n       clear()"}, {"sha": "9468bffd8d583f1a3aca7a10dcf435e68f467219", "filename": "libstdc++-v3/testsuite/util/exception/safety.h", "status": "modified", "additions": 78, "deletions": 98, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606bd1197e8b097d175639bc0be68833e1ef1df/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h?ref=7606bd1197e8b097d175639bc0be68833e1ef1df", "patch": "@@ -251,91 +251,93 @@ namespace __gnu_test\n       struct erase_base\n       {\n \ttypedef typename _Tp::iterator \t\t\titerator;\n+\ttypedef typename _Tp::const_iterator\t\tconst_iterator;\n \n-\titerator (_Tp::* _F_erase_point)(iterator);\n-\titerator (_Tp::* _F_erase_range)(iterator, iterator);\n+\titerator (_Tp::* _F_erase_point)(const_iterator);\n+\titerator (_Tp::* _F_erase_range)(const_iterator, const_iterator);\n \n \terase_base()\n \t: _F_erase_point(&_Tp::erase), _F_erase_range(&_Tp::erase) { }\n       };\n \n-    // Specialization, as forward_list has erase_after.\n-    template<typename _Tp1, typename _Tp2>\n-      struct erase_base<std::forward_list<_Tp1, _Tp2>>\n+    // Specializations, old C++03 signatures.\n+    template<typename _Tp1, typename _Tp2, typename _Tp3>\n+      struct erase_base<std::basic_string<_Tp1, _Tp2, _Tp3>>\n       {\n-\ttypedef std::forward_list<_Tp1, _Tp2> \t\tcontainer_type;\n+\ttypedef std::basic_string<_Tp1, _Tp2, _Tp3>     container_type;\n \ttypedef typename container_type::iterator \titerator;\n-\ttypedef typename container_type::const_iterator const_iterator;\n \n-\titerator (container_type::* _F_erase_point)(const_iterator);\n-\titerator (container_type::* _F_erase_range)(const_iterator,\n-\t\t\t\t\t\t    const_iterator);\n+\titerator (container_type::* _F_erase_point)(iterator);\n+\titerator (container_type::* _F_erase_range)(iterator, iterator);\n \n \terase_base()\n-\t: _F_erase_point(&container_type::erase_after),\n-\t  _F_erase_range(&container_type::erase_after) { }\n+\t: _F_erase_point(&container_type::erase),\n+\t  _F_erase_range(&container_type::erase) { }\n       };\n \n-    // Specializations for the unordered containers.\n     template<typename _Tp1, typename _Tp2, typename _Tp3,\n-\t     typename _Tp4, typename _Tp5>\n-      struct erase_base<std::unordered_map<_Tp1, _Tp2, _Tp3, _Tp4, _Tp5>>\n+\t     template <typename, typename, typename> class _Tp4>\n+      struct erase_base<__gnu_cxx::__versa_string<_Tp1, _Tp2, _Tp3, _Tp4>>\n       {\n-\ttypedef std::unordered_map<_Tp1, _Tp2, _Tp3, _Tp4, _Tp5>\n+\ttypedef __gnu_cxx::__versa_string<_Tp1, _Tp2, _Tp3, _Tp4>\n \t                                                container_type;\n \ttypedef typename container_type::iterator \titerator;\n-\ttypedef typename container_type::const_iterator const_iterator;\n \n-\titerator (container_type::* _F_erase_point)(const_iterator);\n-\titerator (container_type::* _F_erase_range)(const_iterator,\n-\t\t\t\t\t\t    const_iterator);\n+\titerator (container_type::* _F_erase_point)(iterator);\n+\titerator (container_type::* _F_erase_range)(iterator, iterator);\n \n \terase_base()\n \t: _F_erase_point(&container_type::erase),\n \t  _F_erase_range(&container_type::erase) { }\n       };\n \n-    template<typename _Tp1, typename _Tp2, typename _Tp3,\n-\t     typename _Tp4, typename _Tp5>\n-      struct erase_base<std::unordered_multimap<_Tp1, _Tp2, _Tp3,\n-\t\t\t\t\t\t_Tp4, _Tp5>>\n+    template<typename _Tp1, typename _Tp2>\n+      struct erase_base<std::deque<_Tp1, _Tp2>>\n       {\n-\ttypedef std::unordered_multimap<_Tp1, _Tp2, _Tp3, _Tp4, _Tp5>\n-\t                                                container_type;\n+\ttypedef std::deque<_Tp1, _Tp2> \t\t        container_type;\n \ttypedef typename container_type::iterator \titerator;\n-\ttypedef typename container_type::const_iterator const_iterator;\n \n-\titerator (container_type::* _F_erase_point)(const_iterator);\n-\titerator (container_type::* _F_erase_range)(const_iterator,\n-\t\t\t\t\t\t    const_iterator);\n+\titerator (container_type::* _F_erase_point)(iterator);\n+\titerator (container_type::* _F_erase_range)(iterator, iterator);\n+\n+\terase_base()\n+\t: _F_erase_point(&container_type::erase),\n+\t  _F_erase_range(&container_type::erase) { }\n+      };\n+\n+    template<typename _Tp1, typename _Tp2>\n+      struct erase_base<std::list<_Tp1, _Tp2>>\n+      {\n+\ttypedef std::list<_Tp1, _Tp2> \t\t        container_type;\n+\ttypedef typename container_type::iterator \titerator;\n+\n+\titerator (container_type::* _F_erase_point)(iterator);\n+\titerator (container_type::* _F_erase_range)(iterator, iterator);\n \n \terase_base()\n \t: _F_erase_point(&container_type::erase),\n \t  _F_erase_range(&container_type::erase) { }\n       };\n \n-    template<typename _Tp1, typename _Tp2, typename _Tp3, typename _Tp4>\n-      struct erase_base<std::unordered_set<_Tp1, _Tp2, _Tp3, _Tp4>>\n+    template<typename _Tp1, typename _Tp2>\n+      struct erase_base<std::vector<_Tp1, _Tp2>>\n       {\n-\ttypedef std::unordered_set<_Tp1, _Tp2, _Tp3, _Tp4>\n-\t                                                container_type;\n+\ttypedef std::vector<_Tp1, _Tp2>\t\t        container_type;\n \ttypedef typename container_type::iterator \titerator;\n-\ttypedef typename container_type::const_iterator const_iterator;\n \n-\titerator (container_type::* _F_erase_point)(const_iterator);\n-\titerator (container_type::* _F_erase_range)(const_iterator,\n-\t\t\t\t\t\t    const_iterator);\n+\titerator (container_type::* _F_erase_point)(iterator);\n+\titerator (container_type::* _F_erase_range)(iterator, iterator);\n \n \terase_base()\n \t: _F_erase_point(&container_type::erase),\n \t  _F_erase_range(&container_type::erase) { }\n       };\n \n-    template<typename _Tp1, typename _Tp2, typename _Tp3, typename _Tp4>\n-      struct erase_base<std::unordered_multiset<_Tp1, _Tp2, _Tp3, _Tp4>>\n+    // Specialization, as forward_list has erase_after.\n+    template<typename _Tp1, typename _Tp2>\n+      struct erase_base<std::forward_list<_Tp1, _Tp2>>\n       {\n-\ttypedef std::unordered_multiset<_Tp1, _Tp2, _Tp3, _Tp4>\n-\t                                                container_type;\n+\ttypedef std::forward_list<_Tp1, _Tp2> \t\tcontainer_type;\n \ttypedef typename container_type::iterator \titerator;\n \ttypedef typename container_type::const_iterator const_iterator;\n \n@@ -344,8 +346,8 @@ namespace __gnu_test\n \t\t\t\t\t\t    const_iterator);\n \n \terase_base()\n-\t: _F_erase_point(&container_type::erase),\n-\t  _F_erase_range(&container_type::erase) { }\n+\t: _F_erase_point(&container_type::erase_after),\n+\t  _F_erase_range(&container_type::erase_after) { }\n       };\n \n     template<typename _Tp,\n@@ -633,117 +635,95 @@ namespace __gnu_test\n       struct insert_base\n       {\n \ttypedef typename _Tp::iterator \t\t\titerator;\n+\ttypedef typename _Tp::const_iterator    \tconst_iterator;\n \ttypedef typename _Tp::value_type \t\tvalue_type;\n \n-\titerator (_Tp::* _F_insert_point)(iterator, const value_type&);\n+\titerator (_Tp::* _F_insert_point)(const_iterator, const value_type&);\n \n \tinsert_base() : _F_insert_point(&_Tp::insert) { }\n       };\n \n-    // Specialization, as string insertion has a different signature.\n-    template<typename _Tp1, typename _Tp2, typename _Tp3>\n-      struct insert_base<std::basic_string<_Tp1, _Tp2, _Tp3>>\n+    // Specializations, old C++03 signatures.\n+    template<typename _Tp1, typename _Tp2>\n+      struct insert_base<std::deque<_Tp1, _Tp2>>\n       {\n-\ttypedef std::basic_string<_Tp1, _Tp2, _Tp3> \tcontainer_type;\n+\ttypedef std::deque<_Tp1, _Tp2> \t                container_type;\n \ttypedef typename container_type::iterator \titerator;\n \ttypedef typename container_type::value_type \tvalue_type;\n \n-\titerator (container_type::* _F_insert_point)(iterator, value_type);\n+\titerator (container_type::* _F_insert_point)(iterator,\n+\t\t\t\t\t\t     const value_type&);\n \n \tinsert_base() : _F_insert_point(&container_type::insert) { }\n       };\n \n-    template<typename _Tp1, typename _Tp2, typename _Tp3,\n-\t     template <typename, typename, typename> class _Tp4>\n-      struct insert_base<__gnu_cxx::__versa_string<_Tp1, _Tp2, _Tp3, _Tp4>>\n+    template<typename _Tp1, typename _Tp2>\n+      struct insert_base<std::list<_Tp1, _Tp2>>\n       {\n-\ttypedef __gnu_cxx::__versa_string<_Tp1, _Tp2, _Tp3, _Tp4>\n-\t                                                container_type;\n+\ttypedef std::list<_Tp1, _Tp2>    \t        container_type;\n \ttypedef typename container_type::iterator \titerator;\n \ttypedef typename container_type::value_type \tvalue_type;\n \n-\titerator (container_type::* _F_insert_point)(iterator, value_type);\n+\titerator (container_type::* _F_insert_point)(iterator,\n+\t\t\t\t\t\t     const value_type&);\n \n \tinsert_base() : _F_insert_point(&container_type::insert) { }\n       };\n \n-    // Specialization, as forward_list insertion has a different signature.\n     template<typename _Tp1, typename _Tp2>\n-      struct insert_base<std::forward_list<_Tp1, _Tp2>>\n+      struct insert_base<std::vector<_Tp1, _Tp2>>\n       {\n-\ttypedef std::forward_list<_Tp1, _Tp2> container_type;\n+\ttypedef std::vector<_Tp1, _Tp2> \t        container_type;\n \ttypedef typename container_type::iterator \titerator;\n-\ttypedef typename container_type::const_iterator const_iterator;\n \ttypedef typename container_type::value_type \tvalue_type;\n \n-\titerator (container_type::* _F_insert_point)(const_iterator,\n-\t\t\t\t\t\t     const value_type&);\n-\n-\tinsert_base() : _F_insert_point(&container_type::insert_after) { }\n-      };\n-\n-    // Likewise for the unordered containers.\n-    template<typename _Tp1, typename _Tp2, typename _Tp3,\n-\t     typename _Tp4, typename _Tp5>\n-      struct insert_base<std::unordered_map<_Tp1, _Tp2, _Tp3, _Tp4, _Tp5>>\n-      {\n-\ttypedef std::unordered_map<_Tp1, _Tp2, _Tp3, _Tp4, _Tp5>\n-\t                                                container_type;\n-\ttypedef typename container_type::iterator \titerator;\n-\ttypedef typename container_type::const_iterator const_iterator;\n-\ttypedef typename container_type::value_type \tvalue_type;\n-\n-\titerator (container_type::* _F_insert_point)(const_iterator,\n+\titerator (container_type::* _F_insert_point)(iterator,\n \t\t\t\t\t\t     const value_type&);\n \n \tinsert_base() : _F_insert_point(&container_type::insert) { }\n       };\n \n-    template<typename _Tp1, typename _Tp2, typename _Tp3,\n-\t     typename _Tp4, typename _Tp5>\n-      struct insert_base<std::unordered_multimap<_Tp1, _Tp2, _Tp3,\n-\t\t\t\t\t\t _Tp4, _Tp5>>\n+    // Specialization, as string insertion has a different signature.\n+    template<typename _Tp1, typename _Tp2, typename _Tp3>\n+      struct insert_base<std::basic_string<_Tp1, _Tp2, _Tp3>>\n       {\n-\ttypedef std::unordered_multimap<_Tp1, _Tp2, _Tp3, _Tp4, _Tp5>\n-\t                                                container_type;\n+\ttypedef std::basic_string<_Tp1, _Tp2, _Tp3> \tcontainer_type;\n \ttypedef typename container_type::iterator \titerator;\n-\ttypedef typename container_type::const_iterator const_iterator;\n \ttypedef typename container_type::value_type \tvalue_type;\n \n-\titerator (container_type::* _F_insert_point)(const_iterator,\n-\t\t\t\t\t\t     const value_type&);\n+\titerator (container_type::* _F_insert_point)(iterator, value_type);\n \n \tinsert_base() : _F_insert_point(&container_type::insert) { }\n       };\n \n-    template<typename _Tp1, typename _Tp2, typename _Tp3, typename _Tp4>\n-      struct insert_base<std::unordered_set<_Tp1, _Tp2, _Tp3, _Tp4>>\n+    // Likewise for __versa_string.\n+    template<typename _Tp1, typename _Tp2, typename _Tp3,\n+\t     template <typename, typename, typename> class _Tp4>\n+      struct insert_base<__gnu_cxx::__versa_string<_Tp1, _Tp2, _Tp3, _Tp4>>\n       {\n-\ttypedef std::unordered_set<_Tp1, _Tp2, _Tp3, _Tp4>\n+\ttypedef __gnu_cxx::__versa_string<_Tp1, _Tp2, _Tp3, _Tp4>\n \t                                                container_type;\n \ttypedef typename container_type::iterator \titerator;\n-\ttypedef typename container_type::const_iterator const_iterator;\n \ttypedef typename container_type::value_type \tvalue_type;\n \n-\titerator (container_type::* _F_insert_point)(const_iterator,\n-\t\t\t\t\t\t     const value_type&);\n+\titerator (container_type::* _F_insert_point)(iterator, value_type);\n \n \tinsert_base() : _F_insert_point(&container_type::insert) { }\n       };\n \n-    template<typename _Tp1, typename _Tp2, typename _Tp3, typename _Tp4>\n-      struct insert_base<std::unordered_multiset<_Tp1, _Tp2, _Tp3, _Tp4>>\n+    // Specialization, as forward_list has insert_after.\n+    template<typename _Tp1, typename _Tp2>\n+      struct insert_base<std::forward_list<_Tp1, _Tp2>>\n       {\n-\ttypedef std::unordered_multiset<_Tp1, _Tp2, _Tp3, _Tp4>\n-\t                                                container_type;\n+\ttypedef std::forward_list<_Tp1, _Tp2> container_type;\n \ttypedef typename container_type::iterator \titerator;\n \ttypedef typename container_type::const_iterator const_iterator;\n \ttypedef typename container_type::value_type \tvalue_type;\n \n \titerator (container_type::* _F_insert_point)(const_iterator,\n \t\t\t\t\t\t     const value_type&);\n \n-\tinsert_base() : _F_insert_point(&container_type::insert) { }\n+\tinsert_base() : _F_insert_point(&container_type::insert_after) { }\n       };\n \n     template<typename _Tp,"}]}