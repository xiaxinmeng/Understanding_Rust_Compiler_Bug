{"sha": "3cd9342634e38100a9fa6a4bec4d958ca3a4ab60", "node_id": "C_kwDOANBUbNoAKDNjZDkzNDI2MzRlMzgxMDBhOWZhNmE0YmVjNGQ5NThjYTNhNGFiNjA", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-07-28T10:04:28Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-08-12T15:04:34Z"}, "message": "Disable 'TARGET_RUST_CPU_INFO', 'TARGET_RUST_OS_INFO'\n\nThis finishes the revert of all the target hook info work.\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "5e3aaa4f5fecf3606a03c1e8239d657aeafb3f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e3aaa4f5fecf3606a03c1e8239d657aeafb3f26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cd9342634e38100a9fa6a4bec4d958ca3a4ab60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd9342634e38100a9fa6a4bec4d958ca3a4ab60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd9342634e38100a9fa6a4bec4d958ca3a4ab60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd9342634e38100a9fa6a4bec4d958ca3a4ab60/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c8ebf66965509008329b6e0425ffda407265263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c8ebf66965509008329b6e0425ffda407265263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c8ebf66965509008329b6e0425ffda407265263"}], "stats": {"total": 404, "additions": 3, "deletions": 401}, "files": [{"sha": "38b45823a78b706da7d8b88ac2cc7b902c3b87d1", "filename": "gcc/rust/rust-lang.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd9342634e38100a9fa6a4bec4d958ca3a4ab60/gcc%2Frust%2Frust-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd9342634e38100a9fa6a4bec4d958ca3a4ab60/gcc%2Frust%2Frust-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-lang.cc?ref=3cd9342634e38100a9fa6a4bec4d958ca3a4ab60", "patch": "@@ -104,6 +104,8 @@ struct GTY (()) language_function\n void\n rust_add_target_info (const char *key, const char *value)\n {\n+  sorry (\"TODO\");\n+\n   Rust::Session::get_instance ().options.target_data.insert_key_value_pair (\n     key, value);\n }"}, {"sha": "6d7f1a85f199a4b17a530b87b9c45660dc809b83", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 1, "deletions": 242, "changes": 243, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd9342634e38100a9fa6a4bec4d958ca3a4ab60/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd9342634e38100a9fa6a4bec4d958ca3a4ab60/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=3cd9342634e38100a9fa6a4bec4d958ca3a4ab60", "patch": "@@ -41,8 +41,8 @@\n \n #include \"diagnostic.h\"\n #include \"input.h\"\n-#include \"rust-target.h\"\n #include \"selftest.h\"\n+#include \"target.h\"\n \n extern bool\n saw_errors (void);\n@@ -131,256 +131,15 @@ validate_crate_name (const std::string &crate_name, Error &error)\n   return true;\n }\n \n-// Implicitly enable a target_feature (and recursively enable dependencies).\n-void\n-Session::implicitly_enable_feature (std::string feature_name)\n-{\n-  // TODO: is this really required since features added would be complete via\n-  // target spec?\n-\n-  if (!options.target_data.has_key_value_pair (\"target_feature\", feature_name))\n-    {\n-      // if feature has dependencies, enable them\n-      if (feature_name == \"aes\")\n-\t{\n-\t  implicitly_enable_feature (\"sse2\");\n-\t}\n-      else if (feature_name == \"avx\")\n-\t{\n-\t  implicitly_enable_feature (\"sse4.2\");\n-\t}\n-      else if (feature_name == \"avx2\")\n-\t{\n-\t  implicitly_enable_feature (\"avx\");\n-\t}\n-      else if (feature_name == \"fma\")\n-\t{\n-\t  implicitly_enable_feature (\"avx\");\n-\t}\n-      else if (feature_name == \"pclmulqdq\")\n-\t{\n-\t  implicitly_enable_feature (\"sse2\");\n-\t}\n-      else if (feature_name == \"sha\")\n-\t{\n-\t  implicitly_enable_feature (\"sse2\");\n-\t}\n-      else if (feature_name == \"sse2\")\n-\t{\n-\t  implicitly_enable_feature (\"sse\");\n-\t}\n-      else if (feature_name == \"sse3\")\n-\t{\n-\t  implicitly_enable_feature (\"sse2\");\n-\t}\n-      else if (feature_name == \"sse4.1\")\n-\t{\n-\t  implicitly_enable_feature (\"sse3\");\n-\t}\n-      else if (feature_name == \"sse4.2\")\n-\t{\n-\t  implicitly_enable_feature (\"sse4.1\");\n-\t}\n-      else if (feature_name == \"ssse3\")\n-\t{\n-\t  implicitly_enable_feature (\"sse3\");\n-\t}\n-\n-      options.target_data.insert_key_value_pair (\"target_feature\",\n-\t\t\t\t\t\t std::move (feature_name));\n-    }\n-}\n-\n-// Meant to enable all target features. As this will be done by target hook,\n-// this method's deprecated.\n-void\n-Session::enable_features ()\n-{\n-  bool has_target_crt_static = false;\n-\n-  rust_debug (\n-    \"ERROR: Somewhere in call chain Session::enable_features is called.\");\n-\n-  if (has_target_crt_static)\n-    {\n-      // enable \"crt-static\" attribute\n-    }\n-\n-  /* TODO: do this via target hook. have one for each target that implicitly\n-   * enables the\n-   * features for that platform. Would probably have to make custom target hook.\n-   */\n-\n-  /*\n-  if (target == \"x86\" || target == \"x86_64\") {\n-      if (TARGET_AES) {\n-\t  // enable aes, implicitly enable sse2\n-\t  implicitly_enable_feature(\"aes\");\n-      }\n-\n-      if (TARGET_AVX) {\n-\t  // enable avx, implicitly enable sse4.2\n-\t  implicitly_enable_feature(\"sse4.2\");\n-      }\n-\n-      if (TARGET_AVX2) {\n-\t  // enable avx2, implicitly enable avx\n-\t  implicitly_enable_feature(\"avx\");\n-      }\n-\n-      if (TARGET_BMI) {\n-\t  // enable bmi1\n-\t  implicitly_enable_feature(\"bmi1\");\n-      }\n-\n-      if (TARGET_BMI2) {\n-\t  // enable bmi2\n-\t  implicitly_enable_feature(\"bmi2\");\n-      }\n-\n-      if (TARGET_FMA) {\n-\t  // enable fma, implicitly enable avx\n-\t  implicitly_enable_feature(\"fma\");\n-      }\n-\n-      if (TARGET_FXSR) {\n-\t  // enable fxsr\n-\t  implicitly_enable_feature(\"fxsr\");\n-      }\n-\n-      if (TARGET_LZCNT) {\n-\t  // enable lzcnt\n-\t  implicitly_enable_feature(\"lzcnt\");\n-      }\n-\n-      if (TARGET_VPCLMULQDQ) {\n-\t  // enable pclmulqdq, implicitly enable sse2\n-\t  implicitly_enable_feature(\"pclmulqdq\");\n-      }\n-\n-      if (TARGET_POPCNT) {\n-\t  // enable popcnt\n-\t  implicitly_enable_feature(\"popcnt\");\n-      }\n-\n-      if (TARGET_RDRND) {\n-\t  // enable rdrand\n-\t  implicitly_enable_feature(\"rdrand\");\n-      }\n-\n-      if (TARGET_RDSEED) {\n-\t  // enable rdseed\n-\t  implicitly_enable_feature(\"rdseed\");\n-      }\n-\n-      if (TARGET_SHA) {\n-\t  // enable sha, implicitly enable sse2\n-\t  implicitly_enable_feature(\"sha\");\n-      }\n-\n-      if (TARGET_SSE) {\n-\t  // enable sse\n-\t  implicitly_enable_feature(\"sse\");\n-      }\n-\n-      if (TARGET_SSE2) {\n-\t  // enable sse2, implicitly enable sse\n-\t  implicitly_enable_feature(\"sse2\");\n-      }\n-\n-      if (TARGET_SSE3) {\n-\t  // enable sse3, implicitly enable sse2\n-\t  implicitly_enable_feature(\"sse3\");\n-      }\n-\n-      if (TARGET_SSE4_1) {\n-\t  // enable sse4.1, implicitly enable sse3\n-\t  implicitly_enable_feature(\"sse4.1\");\n-      }\n-\n-      if (TARGET_SSE4_2) {\n-\t  // enable sse4.2, implicitly enable sse4.1\n-\t  implicitly_enable_feature(\"sse4.2\");\n-      }\n-\n-      if (TARGET_SSSE3) {\n-\t  // enable ssse3, implicitly enable sse3\n-\t  implicitly_enable_feature(\"ssse3\");\n-      }\n-\n-      if (TARGET_XSAVE) {\n-\t  // enable xsave\n-\t  implicitly_enable_feature(\"xsave\");\n-      }\n-\n-      if (TARGET_XSAVEC) {\n-\t  // enable xsavec\n-\t  implicitly_enable_feature(\"xsavec\");\n-      }\n-\n-      if (TARGET_XSAVEOPT) {\n-\t  // enable xsaveopt\n-\t  implicitly_enable_feature(\"xsaveopt\");\n-      }\n-\n-      if (TARGET_XSAVES) {\n-\t  // enable xsaves\n-\t  implicitly_enable_feature(\"xsaves\");\n-      }\n-  }\n-  options.target_data.features.shrink_to_fit();\n-  std::sort(options.target_data.features.begin(),\n-  options.target_data.features.end());*/\n-}\n-\n void\n Session::init ()\n {\n-#ifndef TARGET_RUST_OS_INFO\n-#define TARGET_RUST_OS_INFO()\n-#endif\n-//#define builtin_rust_info(KEY, VALUE) rust_add_target_info (KEY, VALUE)\n-// might as well use c++ stuff\n-#define builtin_rust_info(KEY, VALUE)                                          \\\n-  options.target_data.insert_key_value_pair (KEY, VALUE)\n-\n-  // initialise target hooks\n-  // targetrustm.rust_cpu_info();\n-  // targetrustm.rust_os_info();\n-  // ok, that's not working too well TODO - see if can salvage old\n-  // implementation\n-  TARGET_RUST_CPU_INFO ();\n-  TARGET_RUST_OS_INFO ();\n-\n-  /* note that due to issues with gcc targets, some implementations of those two\n-   * macros above (TARGET_RUST_CPU_INFO and TARGET_RUST_OS_INFO) are not\n-   * function calls, but actually inline substitutions. As such, they can't be\n-   * stored with a function pointer in a \"real\" target hook.\n-   * At least, that's my current understanding of it. */\n-\n-#undef builtin_rust_info\n-\n-  // target-independent values that should exist in all targets\n   options.target_data.insert_key_value_pair (\"target_pointer_width\",\n \t\t\t\t\t     std::to_string (POINTER_SIZE));\n   options.target_data.insert_key_value_pair (\"target_endian\", BYTES_BIG_ENDIAN\n \t\t\t\t\t\t\t\t? \"big\"\n \t\t\t\t\t\t\t\t: \"little\");\n \n-  // TODO: find min atomic width and max atomic width\n-  // from it, add atomic-related stuff for sizes 8, 16, 32, 64, and 128 (if\n-  // inside bounds) in rustc, min atomic width is a known quantity (or 8 if not\n-  // known), and max is also a known quantity (or is pointer size if not known)\n-  // TODO: add atomic pointer if some criteria is satisfied\n-\n-  // TODO: find whether target has \"atomic cas\"\n-\n-  // add debug_assertions if enabled and proc_macro if crate type has it or\n-  // whatever\n-\n-  // derived values from hook\n-  options.target_data.init_derived_values ();\n-\n   // setup singleton linemap\n   linemap = rust_get_linemap ();\n "}, {"sha": "99dd107239b163bbf9e3c5f95ad08d5218c8d72c", "filename": "gcc/rust/rust-session-manager.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd9342634e38100a9fa6a4bec4d958ca3a4ab60/gcc%2Frust%2Frust-session-manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd9342634e38100a9fa6a4bec4d958ca3a4ab60/gcc%2Frust%2Frust-session-manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.h?ref=3cd9342634e38100a9fa6a4bec4d958ca3a4ab60", "patch": "@@ -325,9 +325,6 @@ struct Session\n   void dump_hir_pretty (HIR::Crate &crate) const;\n   void dump_type_resolution (HIR::Crate &crate) const;\n \n-  void implicitly_enable_feature (std::string feature_name);\n-  void enable_features ();\n-\n   // pipeline stages - TODO maybe move?\n   /* Register plugins pipeline stage. TODO maybe move to another object?\n    * Currently dummy stage. In future will handle attribute injection"}, {"sha": "94c3f9f9a23fc1ff71a502a4ef3904a5a50d6938", "filename": "gcc/rust/rust-target-def.h", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Frust%2Frust-target-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Frust%2Frust-target-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-target-def.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -1,20 +0,0 @@\n-/* rust-target-def.h -- Default initializers for Rust target hooks.\n-   Copyright (C) 2020-2022 Free Software Foundation, Inc.\n-\n-   This program is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 3, or (at your option) any\n-   later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-#include \"rust/rust-target-hooks-def.h\"\n-#include \"tree.h\"\n-#include \"hooks.h\""}, {"sha": "6d1ccaf8ad14ea3d4a326e4ca1c101e364c4617d", "filename": "gcc/rust/rust-target.def", "status": "removed", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Frust%2Frust-target.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Frust%2Frust-target.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-target.def?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -1,89 +0,0 @@\n-/* rust-target.def -- Target hook definitions for the Rust front end.\n-   Copyright (C) 2020-2022 Free Software Foundation, Inc.\n-\n-   This program is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 3, or (at your option) any\n-   later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-/* See target-hooks-macros.h for details of macros that should be\n-   provided by the including file, and how to use them here.  */\n-\n-#include \"target-hooks-macros.h\"\n-\n-#undef HOOK_TYPE\n-#define HOOK_TYPE \"Rust Target Hook\"\n-\n-HOOK_VECTOR (TARGETRUSTM_INITIALIZER, gcc_targetrustm)\n-\n-#undef HOOK_PREFIX\n-#define HOOK_PREFIX \"TARGET_\"\n-\n-/* Environmental CPU info and features (e.g. endianness, pointer size) relating to the target CPU.  */\n-DEFHOOK\n-(rust_cpu_info,\n- \"Declare all environmental CPU info and features relating to the target CPU\\n\\\n-using the function @code{rust_add_target_info}, which takes a string representing\\n\\\n-the feature key and a string representing the feature value.  Configuration pairs\\n\\\n-predefined by this hook apply to all files that are being compiled.\",\n- void, (void),\n- hook_void_void)\n-\n-// TODO: remove: format of DEFHOOK is return type, (param types), default value for function that it translates to\n-\n-/* Environmental OS info relating to the target OS.  */\n-DEFHOOK\n-(/*d_os_versions*/rust_os_info,\n- \"Similar to @code{TARGET_RUST_CPU_INFO}, but is used for configuration info\\n\\\n-relating to the target operating system.\",\n- void, (void),\n- hook_void_void)\n-\n-/* The sizeof CRITICAL_SECTION or pthread_mutex_t.  */\n-/*DEFHOOK\n-(d_critsec_size,\n- \"Returns the size of the data structure used by the target operating system\\n\\\n-for critical sections and monitors.  For example, on Microsoft Windows this\\n\\\n-would return the @code{sizeof(CRITICAL_SECTION)}, while other platforms that\\n\\\n-implement pthreads would return @code{sizeof(pthread_mutex_t)}.\",\n- unsigned, (void),\n- hook_uint_void_0)*/\n-\n- /* TODO: add more if required. Possible ones include static C runtime, target_env\n-  * or vendor (if not covered by OS), and flags from the driver that may or may not\n-  * require a target hook (might instead require a different type of hook) like \n-  * test, debug_assertions, and proc_macro. */\n-\n- /* TODO: rustc target support by tier:\n-  *   Tier 1 (definitely work):\n-  *   -  i686-pc-windows-gnu\n-  *   -  i686-pc-windows-msvc\n-  *   -  i686-unknown-linux-gnu\n-  *   -  x86_64-apple-darwin\n-  *   -  x86_64-pc-windows-gnu\n-  *   -  x86_64-pc-windows-msvc\n-  *   -  x86_64-unknown-linux-gnu\n-  *   - Basically, 32-bit and 64-bit x86 for windows (MinGW and MSVC), gnu/linux, and osx\n-  *   Other tiers have too much crap, but basic breakdown is:\n-  *   Tier 2:\n-  *   -  archs: ARM64 (aarch64), ARMv7, ARMv6, asm.js, i586 (32-bit x86 without SSE), mips, \n-  *      mips64, powerpc, powerpc64, risc-v, s390x, sparc, webasm, netbsd, redox (does gcc have support?),\n-  *      cloudabi (never head of it; i imagine no gcc support)\n-  *   -  oses: ios, fuchsia, android, windows (msvc and mingw), gnu/linux, freebsd, netbsd\n-  *   Tier 2.5:\n-  *   - powerpc SPE linux, various cloudabi stuff, sparc\n-  *   Tier 3:\n-  *   - more obscure stuff like UWP support, vxworks, openbsd, dragonflybsd, haiku, bitrig, windows xp,\n-  *     cuda, hexagon, and combinations of them and earlier stuff */\n-\n-/* Close the 'struct gcc_targetrustm' definition.  */\n-HOOK_VECTOR_END (C90_EMPTY_HACK)"}, {"sha": "743ac518ebb5dca04ef4e3597284cd0c4d67cc29", "filename": "gcc/rust/rust-target.h", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Frust%2Frust-target.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c8ebf66965509008329b6e0425ffda407265263/gcc%2Frust%2Frust-target.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-target.h?ref=1c8ebf66965509008329b6e0425ffda407265263", "patch": "@@ -1,47 +0,0 @@\n-/* rust-target.h -- Data structure definitions for target-specific Rust\n-   behavior. Copyright (C) 2020-2022 Free Software Foundation, Inc.\n-\n-   This program is free software; you can redistribute it and/or modify it\n-   under the terms of the GNU General Public License as published by the\n-   Free Software Foundation; either version 3, or (at your option) any\n-   later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program; see the file COPYING3.  If not see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-#ifndef GCC_RUST_TARGET_H\n-#define GCC_RUST_TARGET_H\n-\n-#include \"target.h\"\n-#include \"tm.h\"\n-#include \"memmodel.h\"\n-#include \"tm_p.h\"\n-\n-// TODO: find out what this stuff actually does\n-#define DEFHOOKPOD(NAME, DOC, TYPE, INIT) TYPE NAME;\n-// #define DEFHOOK(NAME, DOC, TYPE, PARAMS, INIT) TYPE (*NAME) PARAMS;\n-#define DEFHOOK_UNDOC DEFHOOK\n-#define HOOKSTRUCT(FRAGMENT) FRAGMENT\n-\n-#include \"rust-target.def\"\n-\n-/* Each target can provide their own.  */\n-extern struct gcc_targetrustm targetrustm;\n-/* Some kind of structure to store all rust hook macros (like the\n- * TARGET_RUST_CPU_INFO). This is required to store the function pointers for\n- * the target hooks so that the frontend can call them\n- * and it calls the correct target-specific function.  */\n-\n-/* Used by target to add predefined version idenditiers.  */\n-// extern void d_add_builtin_version (const char *);\n-/* Used by target to add target-related info.  */\n-extern void\n-rust_add_target_info (const char *key, const char *value);\n-\n-#endif"}]}