{"sha": "ee18dc41035725910f2b6e6c4283f3547f362ae9", "node_id": "C_kwDOANBUbNoAKGVlMThkYzQxMDM1NzI1OTEwZjJiNmU2YzQyODNmMzU0N2YzNjJhZTk", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-05-10T15:52:29Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-05-10T15:52:29Z"}, "message": "c++: Remove SET_PACK_EXPANSION_PATTERN / SET_ARGUMENT_PACK_ARGS\n\nUnlike in C, in C++ the conditional operator yields an lvalue if both\nbranches are lvalues, so these setter macros are unnecessary; we can\njust assign to PACK_EXPANSION_PATTERN and ARGUMENT_PACK_ARGS directly.\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (instantiate_coro_traits): Adjust accordingly.\n\t* cp-tree.def: Remove mention of SET_PACK_EXPANSION_PATTERN.\n\t* cp-tree.h (SET_PACK_EXPANSION_PATTERN): Remove.\n\t(SET_ARGUMENT_PACK_ARGS): Remove.\n\t* module.cc (trees_in::tree_node): Adjust accordingly.\n\t* parser.cc (make_char_string_pack): Likewise.\n\t(make_string_pack): Likewise.\n\t* pt.cc (make_pack_expansion): Likewise.\n\t(template_parm_to_arg): Likewise.\n\t(coerce_template_parameter_pack): Likewise.\n\t(extract_fnparm_pack): Likewise.\n\t(extract_locals_r): Likewise.\n\t(make_argument_pack): Likewise.\n\t(tsubst_argument_pack): Likewise.\n\t(lookup_init_capture_pack): Likewise.\n\t(type_unification_real): Likewise.\n\t(unify_pack_expansion): Likewise.\n\t(tsubst_initializer_list): Likewise.", "tree": {"sha": "c6959dcee438f4b6606342f6667e04691ea4c651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6959dcee438f4b6606342f6667e04691ea4c651"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee18dc41035725910f2b6e6c4283f3547f362ae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee18dc41035725910f2b6e6c4283f3547f362ae9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee18dc41035725910f2b6e6c4283f3547f362ae9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee18dc41035725910f2b6e6c4283f3547f362ae9/comments", "author": null, "committer": null, "parents": [{"sha": "dc6c96f0707aba6c2c94f41f3ccd0713381e372c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6c96f0707aba6c2c94f41f3ccd0713381e372c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc6c96f0707aba6c2c94f41f3ccd0713381e372c"}], "stats": {"total": 58, "additions": 20, "deletions": 38}, "files": [{"sha": "edb3b706ddc515067907e625e75a740591366516", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee18dc41035725910f2b6e6c4283f3547f362ae9/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee18dc41035725910f2b6e6c4283f3547f362ae9/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=ee18dc41035725910f2b6e6c4283f3547f362ae9", "patch": "@@ -344,7 +344,7 @@ instantiate_coro_traits (tree fndecl, location_t kw)\n     }\n \n   tree argtypepack = cxx_make_type (TYPE_ARGUMENT_PACK);\n-  SET_ARGUMENT_PACK_ARGS (argtypepack, argtypes);\n+  ARGUMENT_PACK_ARGS (argtypepack) = argtypes;\n \n   tree targ = make_tree_vec (2);\n   TREE_VEC_ELT (targ, 0) = TREE_TYPE (functyp);"}, {"sha": "f9cbd339f19cd3987ba79d9b9540dfa16c7536a8", "filename": "gcc/cp/cp-tree.def", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee18dc41035725910f2b6e6c4283f3547f362ae9/gcc%2Fcp%2Fcp-tree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee18dc41035725910f2b6e6c4283f3547f362ae9/gcc%2Fcp%2Fcp-tree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.def?ref=ee18dc41035725910f2b6e6c4283f3547f362ae9", "patch": "@@ -386,8 +386,6 @@ DEFTREECODE (NONTYPE_ARGUMENT_PACK, \"nontype_argument_pack\", tcc_expression, 1)\n    the type or expression that we will substitute into with each\n    argument in an argument pack.\n \n-   SET_PACK_EXPANSION_PATTERN sets the expansion pattern.\n-\n    PACK_EXPANSION_PARAMETER_PACKS contains a TREE_LIST of the parameter\n    packs that are used in this pack expansion.\n "}, {"sha": "cfda8337ad8a0f210fd8b1cbe3f42bb8971cb72d", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee18dc41035725910f2b6e6c4283f3547f362ae9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee18dc41035725910f2b6e6c4283f3547f362ae9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ee18dc41035725910f2b6e6c4283f3547f362ae9", "patch": "@@ -3903,14 +3903,6 @@ struct GTY(()) lang_decl {\n   (TREE_CODE (PACK_EXPANSION_CHECK (NODE)) == TYPE_PACK_EXPANSION \\\n    ? TREE_TYPE (NODE) : TREE_OPERAND (NODE, 0))\n \n-/* Sets the type or expression pattern for a TYPE_PACK_EXPANSION or\n-   EXPR_PACK_EXPANSION.  */\n-#define SET_PACK_EXPANSION_PATTERN(NODE,VALUE)  \\\n-  if (TREE_CODE (PACK_EXPANSION_CHECK (NODE)) == TYPE_PACK_EXPANSION)  \\\n-    TREE_TYPE (NODE) = VALUE;                   \\\n-  else                                          \\\n-    TREE_OPERAND (NODE, 0) = VALUE\n-\n /* The list of parameter packs used in the PACK_EXPANSION_* node. The\n    TREE_VALUE of each TREE_LIST contains the parameter packs.  */\n #define PACK_EXPANSION_PARAMETER_PACKS(NODE)\t\t\\\n@@ -3963,14 +3955,6 @@ struct GTY(()) lang_decl {\n   (TREE_CODE (ARGUMENT_PACK_CHECK (NODE)) == TYPE_ARGUMENT_PACK \\\n    ? TREE_TYPE (NODE) : TREE_OPERAND (NODE, 0))\n \n-/* Set the arguments stored in an argument pack. VALUE must be a\n-   TREE_VEC.  */\n-#define SET_ARGUMENT_PACK_ARGS(NODE,VALUE)     \\\n-  if (TREE_CODE (ARGUMENT_PACK_CHECK (NODE)) == TYPE_ARGUMENT_PACK)  \\\n-    TREE_TYPE (NODE) = VALUE;                           \\\n-  else                                                  \\\n-    TREE_OPERAND (NODE, 0) = VALUE\n-\n /* Whether the argument pack is \"incomplete\", meaning that more\n    arguments can still be deduced. Incomplete argument packs are only\n    used when the user has provided an explicit template argument list"}, {"sha": "27b8f64ce753d2dc28b458850e1a11305d44baf5", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee18dc41035725910f2b6e6c4283f3547f362ae9/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee18dc41035725910f2b6e6c4283f3547f362ae9/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=ee18dc41035725910f2b6e6c4283f3547f362ae9", "patch": "@@ -9338,7 +9338,7 @@ trees_in::tree_node (bool is_use)\n \t    if (!get_overrun ())\n \t      {\n \t\ttree pack = cxx_make_type (TYPE_ARGUMENT_PACK);\n-\t\tSET_ARGUMENT_PACK_ARGS (pack, res);\n+\t\tARGUMENT_PACK_ARGS (pack) = res;\n \t\tres = pack;\n \t      }\n \t    break;\n@@ -9351,7 +9351,7 @@ trees_in::tree_node (bool is_use)\n \t\t{\n \t\t  tree expn = cxx_make_type (TYPE_PACK_EXPANSION);\n \t\t  SET_TYPE_STRUCTURAL_EQUALITY (expn);\n-\t\t  SET_PACK_EXPANSION_PATTERN (expn, res);\n+\t\t  PACK_EXPANSION_PATTERN (expn) = res;\n \t\t  PACK_EXPANSION_PARAMETER_PACKS (expn) = param_packs;\n \t\t  PACK_EXPANSION_LOCAL_P (expn) = local;\n \t\t  res = expn;"}, {"sha": "4ed9feaa427808cfed5563f83d219712b57f47b1", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee18dc41035725910f2b6e6c4283f3547f362ae9/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee18dc41035725910f2b6e6c4283f3547f362ae9/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=ee18dc41035725910f2b6e6c4283f3547f362ae9", "patch": "@@ -4649,7 +4649,7 @@ make_char_string_pack (tree value)\n     }\n \n   /* Build the argument packs.  */\n-  SET_ARGUMENT_PACK_ARGS (argpack, charvec);\n+  ARGUMENT_PACK_ARGS (argpack) = charvec;\n \n   TREE_VEC_ELT (argvec, 0) = argpack;\n \n@@ -4684,7 +4684,7 @@ make_string_pack (tree value)\n \t\t\t    double_int::from_buffer (str + i * sz, sz));\n \n   /* Build the argument packs.  */\n-  SET_ARGUMENT_PACK_ARGS (argpack, charvec);\n+  ARGUMENT_PACK_ARGS (argpack) = charvec;\n \n   TREE_VEC_ELT (argvec, 1) = argpack;\n "}, {"sha": "9932d861af6b51c4ea21f462871c22c31442135f", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee18dc41035725910f2b6e6c4283f3547f362ae9/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee18dc41035725910f2b6e6c4283f3547f362ae9/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=ee18dc41035725910f2b6e6c4283f3547f362ae9", "patch": "@@ -4219,7 +4219,7 @@ make_pack_expansion (tree arg, tsubst_flags_t complain)\n \n       /* Create the pack expansion type for the base type.  */\n       purpose = cxx_make_type (TYPE_PACK_EXPANSION);\n-      SET_PACK_EXPANSION_PATTERN (purpose, TREE_PURPOSE (arg));\n+      PACK_EXPANSION_PATTERN (purpose) = TREE_PURPOSE (arg);\n       PACK_EXPANSION_PARAMETER_PACKS (purpose) = parameter_packs;\n       PACK_EXPANSION_LOCAL_P (purpose) = at_function_scope_p ();\n \n@@ -4237,7 +4237,7 @@ make_pack_expansion (tree arg, tsubst_flags_t complain)\n   result = for_types\n      ? cxx_make_type (TYPE_PACK_EXPANSION)\n      : make_node (EXPR_PACK_EXPANSION);\n-  SET_PACK_EXPANSION_PATTERN (result, arg);\n+  PACK_EXPANSION_PATTERN (result) = arg;\n   if (TREE_CODE (result) == EXPR_PACK_EXPANSION)\n     {\n       /* Propagate type and const-expression information.  */\n@@ -4852,7 +4852,7 @@ template_parm_to_arg (tree t)\n \t  TREE_VEC_ELT (vec, 0) = make_pack_expansion (t);\n \n \t  t = cxx_make_type (TYPE_ARGUMENT_PACK);\n-\t  SET_ARGUMENT_PACK_ARGS (t, vec);\n+\t  ARGUMENT_PACK_ARGS (t) = vec;\n \t}\n     }\n   else\n@@ -4869,7 +4869,7 @@ template_parm_to_arg (tree t)\n \t  TREE_VEC_ELT (vec, 0) = make_pack_expansion (t);\n \n \t  t  = make_node (NONTYPE_ARGUMENT_PACK);\n-\t  SET_ARGUMENT_PACK_ARGS (t, vec);\n+\t  ARGUMENT_PACK_ARGS (t) = vec;\n \t}\n       else\n \tt = convert_from_reference (t);\n@@ -8718,7 +8718,7 @@ coerce_template_parameter_pack (tree parms,\n \t _DECL as a use rather than a declaration.  */\n       tree decl = TREE_VALUE (parm);\n       tree exp = cxx_make_type (TYPE_PACK_EXPANSION);\n-      SET_PACK_EXPANSION_PATTERN (exp, decl);\n+      PACK_EXPANSION_PATTERN (exp) = decl;\n       PACK_EXPANSION_PARAMETER_PACKS (exp) = packs;\n       SET_TYPE_STRUCTURAL_EQUALITY (exp);\n \n@@ -8818,7 +8818,7 @@ coerce_template_parameter_pack (tree parms,\n       TREE_CONSTANT (argument_pack) = 1;\n     }\n \n-  SET_ARGUMENT_PACK_ARGS (argument_pack, packed_args);\n+  ARGUMENT_PACK_ARGS (argument_pack) = packed_args;\n   if (CHECKING_P)\n     SET_NON_DEFAULT_TEMPLATE_ARGS_COUNT (packed_args,\n \t\t\t\t\t TREE_VEC_LENGTH (packed_args));\n@@ -12460,7 +12460,7 @@ extract_fnparm_pack (tree tmpl_parm, tree *spec_p)\n \t}\n \n       /* Build the argument packs.  */\n-      SET_ARGUMENT_PACK_ARGS (argpack, parmvec);\n+      ARGUMENT_PACK_ARGS (argpack) = parmvec;\n     }\n   *spec_p = spec_parm;\n \n@@ -13023,7 +13023,7 @@ extract_locals_r (tree *tp, int */*walk_subtrees*/, void *data_)\n \t\t\t{\n \t\t\t  spec = copy_node (spec);\n \t\t\t  args = copy_node (args);\n-\t\t\t  SET_ARGUMENT_PACK_ARGS (spec, args);\n+\t\t\t  ARGUMENT_PACK_ARGS (spec) = args;\n \t\t\t  register_local_specialization (spec, *tp);\n \t\t\t}\n \t\t      TREE_VEC_ELT (args, i) = carg;\n@@ -13410,7 +13410,7 @@ make_argument_pack (tree vec)\n       pack = make_node (NONTYPE_ARGUMENT_PACK);\n       TREE_CONSTANT (pack) = 1;\n     }\n-  SET_ARGUMENT_PACK_ARGS (pack, vec);\n+  ARGUMENT_PACK_ARGS (pack) = vec;\n   return pack;\n }\n \n@@ -13463,7 +13463,7 @@ tsubst_argument_pack (tree orig_arg, tree args, tsubst_flags_t complain,\n \t  TREE_CONSTANT (new_arg) = TREE_CONSTANT (orig_arg);\n \t}\n \n-      SET_ARGUMENT_PACK_ARGS (new_arg, pack_args);\n+      ARGUMENT_PACK_ARGS (new_arg) = pack_args;\n     }\n \n   return new_arg;\n@@ -18442,7 +18442,7 @@ lookup_init_capture_pack (tree decl)\n       len = TREE_VEC_LENGTH (fpack);\n       vec = make_tree_vec (len);\n       r = make_node (NONTYPE_ARGUMENT_PACK);\n-      SET_ARGUMENT_PACK_ARGS (r, vec);\n+      ARGUMENT_PACK_ARGS (r) = vec;\n     }\n   for (int i = 0; i < len; ++i)\n     {\n@@ -22911,7 +22911,7 @@ type_unification_real (tree tparms,\n \t      else\n \t\targ = cxx_make_type (TYPE_ARGUMENT_PACK);\n \n-\t      SET_ARGUMENT_PACK_ARGS (arg, make_tree_vec (0));\n+\t      ARGUMENT_PACK_ARGS (arg) = make_tree_vec (0);\n \n \t      TREE_VEC_ELT (targs, i) = arg;\n \t      continue;\n@@ -23771,7 +23771,7 @@ unify_pack_expansion (tree tparms, tree targs, tree packed_parms,\n           else\n \t    result = cxx_make_type (TYPE_ARGUMENT_PACK);\n \n-          SET_ARGUMENT_PACK_ARGS (result, new_args);\n+\t  ARGUMENT_PACK_ARGS (result) = new_args;\n \n           /* Note the deduced argument packs for this parameter\n              pack.  */\n@@ -23785,7 +23785,7 @@ unify_pack_expansion (tree tparms, tree targs, tree packed_parms,\n              now we have a complete set of arguments.  */\n           tree explicit_args = ARGUMENT_PACK_EXPLICIT_ARGS (old_pack);\n \n-          SET_ARGUMENT_PACK_ARGS (old_pack, new_args);\n+\t  ARGUMENT_PACK_ARGS (old_pack) = new_args;\n           ARGUMENT_PACK_INCOMPLETE_P (old_pack) = 1;\n           ARGUMENT_PACK_EXPLICIT_ARGS (old_pack) = explicit_args;\n         }\n@@ -26899,7 +26899,7 @@ tsubst_initializer_list (tree t, tree argvec)\n \t\t  else\n \t\t    {\n \t\t      value = expr;\n-\t\t      SET_PACK_EXPANSION_PATTERN (value, TREE_VALUE (arg));\n+\t\t      PACK_EXPANSION_PATTERN (value) = TREE_VALUE (arg);\n \t\t    }\n \t\t  expanded_exprs\n \t\t    = tsubst_pack_expansion (value, argvec,"}]}