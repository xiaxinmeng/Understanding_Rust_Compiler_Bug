{"sha": "d78006d9504c41f96a476457754563c2aa100b7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc4MDA2ZDk1MDRjNDFmOTZhNDc2NDU3NzU0NTYzYzJhYTEwMGI3YQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-08-04T10:10:28Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-08-04T10:10:28Z"}, "message": "[AArch64][7/14] Implement TARGET_SET_CURRENT_FUNCTION\n\n\t* config/aarch64/aarch64.h (SWITCHABLE_TARGET): Define.\n\t* config/aarch64/aarch64.c: Include target-globals.h\n\t(aarch64_previous_fndecl): New variable.\n\t(aarch64_set_current_function): New function.\n\t(TARGET_SET_CURRENT_FUNCTION): Define.\n\nFrom-SVN: r226559", "tree": {"sha": "cd17af4eb62c44430d0aeab907ce122744503788", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd17af4eb62c44430d0aeab907ce122744503788"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d78006d9504c41f96a476457754563c2aa100b7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78006d9504c41f96a476457754563c2aa100b7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d78006d9504c41f96a476457754563c2aa100b7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78006d9504c41f96a476457754563c2aa100b7a/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "361fb3ee79f07fcff6c34acd1ccde520f4935c7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/361fb3ee79f07fcff6c34acd1ccde520f4935c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/361fb3ee79f07fcff6c34acd1ccde520f4935c7e"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "cb019c9b7e94241987764e8a868651b208f706f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78006d9504c41f96a476457754563c2aa100b7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78006d9504c41f96a476457754563c2aa100b7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d78006d9504c41f96a476457754563c2aa100b7a", "patch": "@@ -1,3 +1,11 @@\n+2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.h (SWITCHABLE_TARGET): Define.\n+\t* config/aarch64/aarch64.c: Include target-globals.h\n+\t(aarch64_previous_fndecl): New variable.\n+\t(aarch64_set_current_function): New function.\n+\t(TARGET_SET_CURRENT_FUNCTION): Define.\n+\n 2015-08-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.opt (explicit_tune_core): New TargetVariable."}, {"sha": "d0d62e7b7f7b0f9dbcab842c05255648569325fa", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78006d9504c41f96a476457754563c2aa100b7a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78006d9504c41f96a476457754563c2aa100b7a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d78006d9504c41f96a476457754563c2aa100b7a", "patch": "@@ -73,6 +73,7 @@\n #include \"tm-constrs.h\"\n #include \"sched-int.h\"\n #include \"cortex-a57-fma-steering.h\"\n+#include \"target-globals.h\"\n \n /* This file should be included last.  */\n #include \"target-def.h\"\n@@ -7910,6 +7911,58 @@ aarch64_option_print (FILE *file, int indent, struct cl_target_option *ptr)\n   aarch64_print_extension (file, isa_flags);\n }\n \n+static GTY(()) tree aarch64_previous_fndecl;\n+\n+/* Implement TARGET_SET_CURRENT_FUNCTION.  Unpack the codegen decisions\n+   like tuning and ISA features from the DECL_FUNCTION_SPECIFIC_TARGET\n+   of the function, if such exists.  This function may be called multiple\n+   times on a single function so use aarch64_previous_fndecl to avoid\n+   setting up identical state.  */\n+\n+static void\n+aarch64_set_current_function (tree fndecl)\n+{\n+  tree old_tree = (aarch64_previous_fndecl\n+\t\t   ? DECL_FUNCTION_SPECIFIC_TARGET (aarch64_previous_fndecl)\n+\t\t   : NULL_TREE);\n+\n+  tree new_tree = (fndecl\n+\t\t   ? DECL_FUNCTION_SPECIFIC_TARGET (fndecl)\n+\t\t   : NULL_TREE);\n+\n+\n+  if (fndecl && fndecl != aarch64_previous_fndecl)\n+    {\n+      aarch64_previous_fndecl = fndecl;\n+      if (old_tree == new_tree)\n+\t;\n+\n+      else if (new_tree && new_tree != target_option_default_node)\n+\t{\n+\t  cl_target_option_restore (&global_options,\n+\t\t\t\t    TREE_TARGET_OPTION (new_tree));\n+\t  if (TREE_TARGET_GLOBALS (new_tree))\n+\t    restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n+\t  else\n+\t    TREE_TARGET_GLOBALS (new_tree)\n+\t      = save_target_globals_default_opts ();\n+\t}\n+\n+      else if (old_tree && old_tree != target_option_default_node)\n+\t{\n+\t  new_tree = target_option_current_node;\n+\t  cl_target_option_restore (&global_options,\n+\t\t\t\t    TREE_TARGET_OPTION (new_tree));\n+\t  if (TREE_TARGET_GLOBALS (new_tree))\n+\t    restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n+\t  else if (new_tree == target_option_default_node)\n+\t    restore_target_globals (&default_target_globals);\n+\t  else\n+\t    TREE_TARGET_GLOBALS (new_tree)\n+\t      = save_target_globals_default_opts ();\n+\t}\n+    }\n+}\n \n /* Return true if SYMBOL_REF X binds locally.  */\n \n@@ -12425,6 +12478,9 @@ aarch64_promoted_type (const_tree t)\n #undef TARGET_OPTION_PRINT\n #define TARGET_OPTION_PRINT aarch64_option_print\n \n+#undef TARGET_SET_CURRENT_FUNCTION\n+#define TARGET_SET_CURRENT_FUNCTION aarch64_set_current_function\n+\n #undef TARGET_PASS_BY_REFERENCE\n #define TARGET_PASS_BY_REFERENCE aarch64_pass_by_reference\n "}, {"sha": "41f50fed7d566e1aa09cd515a5dd220333b378a8", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78006d9504c41f96a476457754563c2aa100b7a/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78006d9504c41f96a476457754563c2aa100b7a/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=d78006d9504c41f96a476457754563c2aa100b7a", "patch": "@@ -919,6 +919,9 @@ do {\t\t\t\t\t\t\t\t\t     \\\n #define HARD_REGNO_CALL_PART_CLOBBERED(REGNO, MODE) \\\n \t\t(FP_REGNUM_P (REGNO) && GET_MODE_SIZE (MODE) > 8)\n \n+#undef SWITCHABLE_TARGET\n+#define SWITCHABLE_TARGET 1\n+\n /* Check TLS Descriptors mechanism is selected.  */\n #define TARGET_TLS_DESC (aarch64_tls_dialect == TLS_DESCRIPTORS)\n "}]}