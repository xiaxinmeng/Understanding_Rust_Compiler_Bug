{"sha": "07a434923a44d1a7aecb0859aa22f10e2e26656a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdhNDM0OTIzYTQ0ZDFhN2FlY2IwODU5YWEyMmYxMGUyZTI2NjU2YQ==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@debian.org", "date": "2004-07-25T18:10:05Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2004-07-25T18:10:05Z"}, "message": "* config.gcc (i[34567]86-*-solaris2*, sparc64-*-solaris2*)\n\t(sparc-*-solaris2*): Include sol2.o and sol2-protos.h.\n\t* config/sol2-c.c: Include \"tm.h\", \"tm_p.h\", \"toplev.h\",\n\t\"cpplib.h\", \"c-pragma.h\", \"c-common.h\".\n\t(solaris_pragma_align, solaris_pragma_init, solaris_pragma_fini)\n\t(solaris_register_pragmas): New functions.\n\t* config/sol2-protos.h: New file.\n\t* config/sol2.c: New file.\n\t* config/sol2.h (SOLARIS_ATTRIBUTE_TABLE, ASM_DECLARE_FUNCTION_SIZE)\n\t(REGISTER_TARGET_PRAGMAS): New macros.\n\t(solaris_pending_aligns, solaris_pending_inits)\n\t(solaris_pending_finis): New variables.\n\t* config/t-sol2 (sol2-c.o): Update dependencies.\n\t(sol2.o): New rule.\n\t* config/i386/i386.c (TARGET_INSERT_ATTRIBUTES): Define in terms of\n\tSUBTARGET_INSERT_ATTRIBUTES.\n\t(ix86_attribute_table): Include SUBTARGET_ATTRIBUTE_TABLE.\n\t* config/i386/sol2.h (SUBTARGET_INSERT_ATTRIBUTES)\n\t(SUBTARGET_ATTRIBUTE_TABLE, ASM_OUTPUT_CALL): Define.\n\t* config/sparc/elf.h (ASM_DECLARE_FUNCTION_SIZE): Redefine.\n\t* config/sparc/sp64-elf.h (ASM_DECLARE_FUNCTION_SIZE): Redefine.\n\t* config/sparc/sol2.h (SUBTARGET_INSERT_ATTRIBUTES)\n\t(SUBTARGET_ATTRIBUTE_TABLE, ASM_OUTPUT_CALL): Define.\n\t* config/sparc/sparc.c (sparc_attribute_table): New.\n\t(TARGET_INSERT_ATTRIBUTES): Define in terms of\n\tSUBTARGET_INSERT_ATTRIBUTES.\n\t(TARGET_ATTRIBUTE_TABLE): Define if SUBTARGET_ATTRIBUTE_TABLE\n\tis defined.\n\t* doc/extend.texi (Solaris Pragmas): New section.\n\nFrom-SVN: r85155", "tree": {"sha": "5dbc183c09eb1a427c54aa5aeaf22fabec0f77cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dbc183c09eb1a427c54aa5aeaf22fabec0f77cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07a434923a44d1a7aecb0859aa22f10e2e26656a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07a434923a44d1a7aecb0859aa22f10e2e26656a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07a434923a44d1a7aecb0859aa22f10e2e26656a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07a434923a44d1a7aecb0859aa22f10e2e26656a/comments", "author": null, "committer": null, "parents": [{"sha": "dfe79cab9b242337d696548f80b2bb9cb190b135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe79cab9b242337d696548f80b2bb9cb190b135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfe79cab9b242337d696548f80b2bb9cb190b135"}], "stats": {"total": 520, "additions": 517, "deletions": 3}, "files": [{"sha": "f4960dfe8ee24632a1947113dd35e03bca073218", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07a434923a44d1a7aecb0859aa22f10e2e26656a", "patch": "@@ -1,3 +1,35 @@\n+2004-07-25  Daniel Jacobowitz  <dan@debian.org>\n+\n+\t* config.gcc (i[34567]86-*-solaris2*, sparc64-*-solaris2*)\n+\t(sparc-*-solaris2*): Include sol2.o and sol2-protos.h.\n+\t* config/sol2-c.c: Include \"tm.h\", \"tm_p.h\", \"toplev.h\",\n+\t\"cpplib.h\", \"c-pragma.h\", \"c-common.h\".\n+\t(solaris_pragma_align, solaris_pragma_init, solaris_pragma_fini)\n+\t(solaris_register_pragmas): New functions.\n+\t* config/sol2-protos.h: New file.\n+\t* config/sol2.c: New file.\n+\t* config/sol2.h (SOLARIS_ATTRIBUTE_TABLE, ASM_DECLARE_FUNCTION_SIZE)\n+\t(REGISTER_TARGET_PRAGMAS): New macros.\n+\t(solaris_pending_aligns, solaris_pending_inits)\n+\t(solaris_pending_finis): New variables.\n+\t* config/t-sol2 (sol2-c.o): Update dependencies.\n+\t(sol2.o): New rule.\n+\t* config/i386/i386.c (TARGET_INSERT_ATTRIBUTES): Define in terms of\n+\tSUBTARGET_INSERT_ATTRIBUTES.\n+\t(ix86_attribute_table): Include SUBTARGET_ATTRIBUTE_TABLE.\n+\t* config/i386/sol2.h (SUBTARGET_INSERT_ATTRIBUTES)\n+\t(SUBTARGET_ATTRIBUTE_TABLE, ASM_OUTPUT_CALL): Define.\n+\t* config/sparc/elf.h (ASM_DECLARE_FUNCTION_SIZE): Redefine.\n+\t* config/sparc/sp64-elf.h (ASM_DECLARE_FUNCTION_SIZE): Redefine.\n+\t* config/sparc/sol2.h (SUBTARGET_INSERT_ATTRIBUTES)\n+\t(SUBTARGET_ATTRIBUTE_TABLE, ASM_OUTPUT_CALL): Define.\n+\t* config/sparc/sparc.c (sparc_attribute_table): New.\n+\t(TARGET_INSERT_ATTRIBUTES): Define in terms of\n+\tSUBTARGET_INSERT_ATTRIBUTES.\n+\t(TARGET_ATTRIBUTE_TABLE): Define if SUBTARGET_ATTRIBUTE_TABLE\n+\tis defined.\n+\t* doc/extend.texi (Solaris Pragmas): New section.\n+\n 2004-07-25  Bernardo Innocenti  <bernie@develer.com>\n \n \t* c-common.c: Rename all identifiers named `class' to `cl'."}, {"sha": "8fc8a99fbbc4322af5c89379c458c9f10ce11806", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=07a434923a44d1a7aecb0859aa22f10e2e26656a", "patch": "@@ -975,6 +975,8 @@ i[34567]86-*-solaris2*)\n \ttmake_file=\"t-sol2 i386/t-sol2 t-svr4\"\n \tc_target_objs=\"sol2-c.o\"\n \tcxx_target_objs=\"sol2-c.o\"\n+\textra_objs=\"sol2.o\"\n+\ttm_p_file=\"${tm_p_file} sol2-protos.h\"\n \tif test x$gnu_ld = xyes; then\n \t\ttmake_file=\"$tmake_file t-slibgcc-elf-ver\"\n \telse\n@@ -1861,6 +1863,8 @@ sparc64-*-solaris2* | sparcv9-*-solaris2*)\n \tfi\n \tc_target_objs=\"sol2-c.o\"\n \tcxx_target_objs=\"sol2-c.o\"\n+\textra_objs=\"sol2.o\"\n+\ttm_p_file=\"${tm_p_file} sol2-protos.h\"\n \textra_parts=\"crt1.o crti.o crtn.o gcrt1.o crtbegin.o crtend.o\"\n \tcase ${enable_threads}:${have_pthread_h}:${have_thread_h} in\n \t  no:*:*) ;;\n@@ -1900,6 +1904,8 @@ sparc-*-solaris2*)\n \tesac\n \tc_target_objs=\"sol2-c.o\"\n \tcxx_target_objs=\"sol2-c.o\"\n+\textra_objs=\"sol2.o\"\n+\ttm_p_file=\"${tm_p_file} sol2-protos.h\"\n \textra_parts=\"crt1.o crti.o crtn.o gcrt1.o gmon.o crtbegin.o crtend.o\"\n \tcase ${enable_threads}:${have_pthread_h}:${have_thread_h} in\n \t  no:*:*) ;;"}, {"sha": "8e5b75289ba4710c8d28a64a59f8cdcc79b135f2", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=07a434923a44d1a7aecb0859aa22f10e2e26656a", "patch": "@@ -1080,6 +1080,11 @@ static void init_ext_80387_constants (void);\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR ix86_gimplify_va_arg\n \n+#ifdef SUBTARGET_INSERT_ATTRIBUTES\n+#undef TARGET_INSERT_ATTRIBUTES\n+#define TARGET_INSERT_ATTRIBUTES SUBTARGET_INSERT_ATTRIBUTES\n+#endif\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n \f\n@@ -1611,6 +1616,9 @@ const struct attribute_spec ix86_attribute_table[] =\n #endif\n   { \"ms_struct\", 0, 0, false, false,  false, ix86_handle_struct_attribute },\n   { \"gcc_struct\", 0, 0, false, false,  false, ix86_handle_struct_attribute },\n+#ifdef SUBTARGET_ATTRIBUTE_TABLE\n+  SUBTARGET_ATTRIBUTE_TABLE,\n+#endif\n   { NULL,        0, 0, false, false, false, NULL }\n };\n "}, {"sha": "914926a59c2eea6e96f072eb6e44458ed91497ee", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=07a434923a44d1a7aecb0859aa22f10e2e26656a", "patch": "@@ -79,3 +79,12 @@ Boston, MA 02111-1307, USA.  */\n \tfprintf ((FILE), \"\\n\");\t\t\t\t\\\n       }\t\t\t\t\t\t\t\\\n   } while (0)\n+\n+/* Solaris-specific #pragmas are implemented on top of attributes.  Hook in\n+   the bits from config/sol2.c.  */\n+#define SUBTARGET_INSERT_ATTRIBUTES solaris_insert_attributes\n+#define SUBTARGET_ATTRIBUTE_TABLE SOLARIS_ATTRIBUTE_TABLE\n+\n+/* Output a simple call for .init/.fini.  */\n+#define ASM_OUTPUT_CALL(FILE, NAME)\t\t\t\\\n+  fprintf (FILE, \"\\tcall\\t%s\\n\", NAME)"}, {"sha": "ee017ebbd46a0487a8a73afab86248b1bd67ab0e", "filename": "gcc/config/sol2-c.c", "status": "modified", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fsol2-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fsol2-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-c.c?ref=07a434923a44d1a7aecb0859aa22f10e2e26656a", "patch": "@@ -23,10 +23,17 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tree.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"toplev.h\"\n \n #include \"c-format.h\"\n #include \"intl.h\"\n \n+#include \"cpplib.h\"\n+#include \"c-pragma.h\"\n+#include \"c-common.h\"\n+\n /* cmn_err only accepts \"l\" and \"ll\".  */\n static const format_length_info cmn_err_length_specs[] =\n {\n@@ -70,3 +77,195 @@ const format_kind_info solaris_format_types[] = {\n     &integer_type_node, &integer_type_node\n   }\n };\n+\n+/* Handle #pragma align ALIGNMENT (VAR [, VAR]...)  */\n+\n+static void\n+solaris_pragma_align (cpp_reader *pfile ATTRIBUTE_UNUSED)\n+{\n+  tree t, x;\n+  enum cpp_ttype ttype;\n+  HOST_WIDE_INT low;\n+\n+  if (c_lex (&x) != CPP_NUMBER\n+      || c_lex (&t) != CPP_OPEN_PAREN)\n+    {\n+      warning (\"malformed %<#pragma align%>, ignoring\");\n+      return;\n+    }\n+\n+  low = TREE_INT_CST_LOW (x);\n+  if (TREE_INT_CST_HIGH (x) != 0\n+      || (low != 1 && low != 2 && low != 4 && low != 8 && low != 16\n+\t  && low != 32 && low != 64 && low != 128))\n+    {\n+      warning (\"invalid alignment for %<#pragma align%>, ignoring\");\n+      return;\n+    }\n+\n+  ttype = c_lex (&t);\n+  if (ttype != CPP_NAME)\n+    {\n+      warning (\"malformed %<#pragma align%>, ignoring\");\n+      return;\n+    }\n+\n+  while (1)\n+    {\n+      tree decl = identifier_global_value (t);\n+      if (decl && TREE_CODE_CLASS (TREE_CODE (decl)) == 'd')\n+\twarning (\"%<#pragma align%> must appear before the declaration of \"\n+\t\t \"%D, ignoring\", decl);\n+      else\n+\tsolaris_pending_aligns = tree_cons (t, build_tree_list (NULL, x),\n+\t\t\t\t\t    solaris_pending_aligns);\n+\n+      ttype = c_lex (&t);\n+      if (ttype == CPP_COMMA)\n+\t{\n+\t  ttype = c_lex (&t);\n+\t  if (ttype != CPP_NAME)\n+\t    {\n+\t      warning (\"malformed %<#pragma align%>\");\n+\t      return;\n+\t    }\n+\t}\n+      else if (ttype == CPP_CLOSE_PAREN)\n+\t{\n+\t  if (c_lex (&t) != CPP_EOF)\n+\t    warning (\"junk at end of %<#pragma align%>\");\n+\t  return;\n+\t}\n+      else\n+\t{\n+\t  warning (\"malformed %<#pragma align%>\");\n+\t  return;\n+\t}\n+    }\n+}\n+\n+/* Handle #pragma init (function [, function]...)  */\n+\n+static void\n+solaris_pragma_init (cpp_reader *pfile ATTRIBUTE_UNUSED)\n+{\n+  tree t;\n+  enum cpp_ttype ttype;\n+\n+  if (c_lex (&t) != CPP_OPEN_PAREN)\n+    {\n+      warning (\"malformed %<#pragma init%>, ignoring\");\n+      return;\n+    }\n+\n+  ttype = c_lex (&t);\n+  if (ttype != CPP_NAME)\n+    {\n+      warning (\"malformed %<#pragma init%>, ignoring\");\n+      return;\n+    }\n+\n+  while (1)\n+    {\n+      tree decl = identifier_global_value (t);\n+      if (decl && TREE_CODE_CLASS (TREE_CODE (decl)) == 'd')\n+\t{\n+\t  tree init_list = build_tree_list (get_identifier (\"init\"),\n+\t\t\t\t\t    NULL);\n+\t  tree attrs = tree_cons (get_identifier (\"used\"), NULL, init_list);\n+\t  decl_attributes (&decl, attrs, 0);\n+\t}\n+      else\n+\tsolaris_pending_inits = tree_cons (t, NULL, solaris_pending_inits);\n+\n+      ttype = c_lex (&t);\n+      if (ttype == CPP_COMMA)\n+\t{\n+\t  ttype = c_lex (&t);\n+\t  if (ttype != CPP_NAME)\n+\t    {\n+\t      warning (\"malformed %<#pragma init%>\");\n+\t      return;\n+\t    }\n+\t}\n+      else if (ttype == CPP_CLOSE_PAREN)\n+\t{\n+\t  if (c_lex (&t) != CPP_EOF)\n+\t    warning (\"junk at end of %<#pragma init%>\");\n+\t  return;\n+\t}\n+      else\n+\t{\n+\t  warning (\"malformed %<#pragma init%>\");\n+\t  return;\n+\t}\n+    }\n+}\n+\n+/* Handle #pragma fini (function [, function]...)  */\n+\n+static void\n+solaris_pragma_fini (cpp_reader *pfile ATTRIBUTE_UNUSED)\n+{\n+  tree t;\n+  enum cpp_ttype ttype;\n+\n+  if (c_lex (&t) != CPP_OPEN_PAREN)\n+    {\n+      warning (\"malformed %<#pragma fini%>, ignoring\");\n+      return;\n+    }\n+\n+  ttype = c_lex (&t);\n+  if (ttype != CPP_NAME)\n+    {\n+      warning (\"malformed %<#pragma fini%>, ignoring\");\n+      return;\n+    }\n+\n+  while (1)\n+    {\n+      tree decl = identifier_global_value (t);\n+      if (decl && TREE_CODE_CLASS (TREE_CODE (decl)) == 'd')\n+\t{\n+\t  tree fini_list = build_tree_list (get_identifier (\"fini\"),\n+\t\t\t\t\t    NULL);\n+\t  tree attrs = tree_cons (get_identifier (\"used\"), NULL, fini_list);\n+\t  decl_attributes (&decl, attrs, 0);\n+\t}\n+      else\n+\tsolaris_pending_finis = tree_cons (t, NULL, solaris_pending_finis);\n+\n+      ttype = c_lex (&t);\n+      if (ttype == CPP_COMMA)\n+\t{\n+\t  ttype = c_lex (&t);\n+\t  if (ttype != CPP_NAME)\n+\t    {\n+\t      warning (\"malformed %<#pragma fini%>\");\n+\t      return;\n+\t    }\n+\t}\n+      else if (ttype == CPP_CLOSE_PAREN)\n+\t{\n+\t  if (c_lex (&t) != CPP_EOF)\n+\t    warning (\"junk at end of %<#pragma fini%>\");\n+\t  return;\n+\t}\n+      else\n+\t{\n+\t  warning (\"malformed %<#pragma fini%>\");\n+\t  return;\n+\t}\n+    }\n+}\n+\n+/* Register Solaris-specific #pragma directives.  */\n+\n+void\n+solaris_register_pragmas (void)\n+{\n+  c_register_pragma (0, \"align\", solaris_pragma_align);\n+  c_register_pragma (0, \"init\", solaris_pragma_init);\n+  c_register_pragma (0, \"fini\", solaris_pragma_fini);\n+}"}, {"sha": "9976467bd9b76dd7065030d6f9bc6d4934f6a6ce", "filename": "gcc/config/sol2-protos.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fsol2-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fsol2-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-protos.h?ref=07a434923a44d1a7aecb0859aa22f10e2e26656a", "patch": "@@ -0,0 +1,24 @@\n+/* Operating system specific prototypes to be used when targeting GCC for any\n+   Solaris 2 system.\n+   Copyright 2004 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+extern void solaris_insert_attributes (tree, tree *);\n+extern void solaris_register_pragmas (void);\n+extern void solaris_output_init_fini (FILE *, tree);"}, {"sha": "edf0eee3b413f6bd171bfc4e224781655faa1808", "filename": "gcc/config/sol2.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fsol2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fsol2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.c?ref=07a434923a44d1a7aecb0859aa22f10e2e26656a", "patch": "@@ -0,0 +1,119 @@\n+/* General Solaris system support.\n+   Copyright (C) 2004  Free Software Foundation, Inc.\n+   Contributed by CodeSourcery, LLC.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tree.h\"\n+#include \"tm.h\"\n+#include \"tm_p.h\"\n+#include \"toplev.h\"\n+#include \"ggc.h\"\n+\n+tree solaris_pending_aligns, solaris_pending_inits, solaris_pending_finis;\n+\n+/* Attach any pending attributes for DECL to the list in *ATTRIBUTES.\n+   Pending attributes come from #pragma or _Pragma, so this code is\n+   only useful in the C family front ends, but it is included in\n+   all languages to avoid changing the target machine initializer\n+   depending on the language.  */\n+\n+void\n+solaris_insert_attributes (tree decl, tree *attributes)\n+{\n+  tree *x, next;\n+\n+  if (solaris_pending_aligns != NULL && TREE_CODE (decl) == VAR_DECL)\n+    for (x = &solaris_pending_aligns; *x; x = &TREE_CHAIN (*x))\n+      {\n+\ttree name = TREE_PURPOSE (*x);\n+\ttree value = TREE_VALUE (*x);\n+\tif (DECL_NAME (decl) == name)\n+\t  {\n+\t    if (lookup_attribute (\"aligned\", DECL_ATTRIBUTES (decl))\n+\t\t|| lookup_attribute (\"aligned\", *attributes))\n+\t      warning (\"%Jignoring %<#pragma align%> for explicitly \"\n+\t\t       \"aligned %<%D%>\", decl, decl);\n+\t    else\n+\t      *attributes = tree_cons (get_identifier (\"aligned\"), value,\n+\t\t\t\t       *attributes);\n+\t    next = TREE_CHAIN (*x);\n+\t    ggc_free (*x);\n+\t    *x = next;\n+\t    break;\n+\t  }\n+      }\n+\n+  if (solaris_pending_inits != NULL && TREE_CODE (decl) == FUNCTION_DECL)\n+    for (x = &solaris_pending_inits; *x; x = &TREE_CHAIN (*x))\n+      {\n+\ttree name = TREE_PURPOSE (*x);\n+\tif (DECL_NAME (decl) == name)\n+\t  {\n+\t    *attributes = tree_cons (get_identifier (\"init\"), NULL,\n+\t\t\t\t     *attributes);\n+\t    *attributes = tree_cons (get_identifier (\"used\"), NULL,\n+\t\t\t\t     *attributes);\n+\t    next = TREE_CHAIN (*x);\n+\t    ggc_free (*x);\n+\t    *x = next;\n+\t    break;\n+\t  }\n+      }\n+\n+  if (solaris_pending_finis != NULL && TREE_CODE (decl) == FUNCTION_DECL)\n+    for (x = &solaris_pending_finis; *x; x = &TREE_CHAIN (*x))\n+      {\n+\ttree name = TREE_PURPOSE (*x);\n+\tif (DECL_NAME (decl) == name)\n+\t  {\n+\t    *attributes = tree_cons (get_identifier (\"fini\"), NULL,\n+\t\t\t\t     *attributes);\n+\t    *attributes = tree_cons (get_identifier (\"used\"), NULL,\n+\t\t\t\t     *attributes);\n+\t    next = TREE_CHAIN (*x);\n+\t    ggc_free (*x);\n+\t    *x = next;\n+\t    break;\n+\t  }\n+      }\n+}\n+\n+/* Output initializer or finalizer entries for DECL to FILE.  */\n+\n+void\n+solaris_output_init_fini (FILE *file, tree decl)\n+{\n+  if (lookup_attribute (\"init\", DECL_ATTRIBUTES (decl)))\n+    {\n+      fprintf (file, \"\\t.pushsection\\t\\\".init\\\"\\n\");\n+      ASM_OUTPUT_CALL (file, IDENTIFIER_POINTER (DECL_NAME (decl)));\n+      fprintf (file, \"\\t.popsection\\n\");\n+    }\n+\n+  if (lookup_attribute (\"fini\", DECL_ATTRIBUTES (decl)))\n+    {\n+      fprintf (file, \"\\t.pushsection\\t\\\".fini\\\"\\n\");\n+      ASM_OUTPUT_CALL (file, IDENTIFIER_POINTER (DECL_NAME (decl)));\n+      fprintf (file, \"\\t.popsection\\n\");\n+    }\n+}\n+"}, {"sha": "ddad7c1f05c4e95274767362bb2a6c7e956c19f1", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=07a434923a44d1a7aecb0859aa22f10e2e26656a", "patch": "@@ -1,6 +1,6 @@\n /* Operating system specific defines to be used when targeting GCC for any\n    Solaris 2 system.\n-   Copyright 2002, 2003 Free Software Foundation, Inc.\n+   Copyright 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -206,5 +206,31 @@ __enable_execute_stack (void *addr)\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n }\n \n+/* Support Solaris-specific format checking for cmn_err.  */\n #define TARGET_N_FORMAT_TYPES 1\n #define TARGET_FORMAT_TYPES solaris_format_types\n+\n+/* #pragma init and #pragma fini are implemented on top of init and\n+   fini attributes.  */\n+#define SOLARIS_ATTRIBUTE_TABLE\t\t\t\t\t\t\\\n+  { \"init\",      0, 0, true,  false,  false, NULL },\t\t\t\\\n+  { \"fini\",      0, 0, true,  false,  false, NULL }\n+\n+/* This is how to declare the size of a function.  For Solaris, we output\n+   any .init or .fini entries here.  */\n+#undef ASM_DECLARE_FUNCTION_SIZE\n+#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (!flag_inhibit_size_directive)\t\t\t\t\\\n+\tASM_OUTPUT_MEASURED_SIZE (FILE, FNAME);\t\t\t\\\n+      solaris_output_init_fini (FILE, DECL);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Register the Solaris-specific #pragma directives.  */\n+#define REGISTER_TARGET_PRAGMAS() solaris_register_pragmas ()\n+\n+extern GTY(()) tree solaris_pending_aligns;\n+extern GTY(()) tree solaris_pending_inits;\n+extern GTY(()) tree solaris_pending_finis;"}, {"sha": "80596f4d114935122a0a7d61383f30df89d16c2f", "filename": "gcc/config/sparc/elf.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fsparc%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fsparc%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Felf.h?ref=07a434923a44d1a7aecb0859aa22f10e2e26656a", "patch": "@@ -52,3 +52,13 @@ Boston, MA 02111-1307, USA.  */\n /* Don't include Solaris-specific format checks.  */\n #undef TARGET_N_FORMAT_TYPES\n #undef TARGET_FORMAT_TYPES\n+\n+/* Don't include Solaris-specific .init / .fini support.  */\n+#undef ASM_DECLARE_FUNCTION_SIZE\n+#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (!flag_inhibit_size_directive)\t\t\t\t\\\n+\tASM_OUTPUT_MEASURED_SIZE (FILE, FNAME);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)"}, {"sha": "a218ccdceae7d784e57f82e144fd1c6f1bfebf20", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=07a434923a44d1a7aecb0859aa22f10e2e26656a", "patch": "@@ -156,3 +156,12 @@ Boston, MA 02111-1307, USA.  */\n    sparc_override_options will disable V8+ if not generating V9 code.  */\n #undef TARGET_DEFAULT\n #define TARGET_DEFAULT (MASK_V8PLUS + MASK_FPU + MASK_LONG_DOUBLE_128)\n+\n+/* Solaris-specific #pragmas are implemented on top of attributes.  Hook in\n+   the bits from config/sol2.c.  */\n+#define SUBTARGET_INSERT_ATTRIBUTES solaris_insert_attributes\n+#define SUBTARGET_ATTRIBUTE_TABLE SOLARIS_ATTRIBUTE_TABLE\n+\n+/* Output a simple call for .init/.fini.  */\n+#define ASM_OUTPUT_CALL(FILE, NAME)\t\t\t\\\n+  fprintf (FILE, \"\\tcall\\t%s\\n\\t nop\\n\", NAME)"}, {"sha": "03a2409323ed7e0ff83bc5df4da7c185c4dbcfcd", "filename": "gcc/config/sparc/sp64-elf.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h?ref=07a434923a44d1a7aecb0859aa22f10e2e26656a", "patch": "@@ -126,3 +126,13 @@ crtbegin.o%s \\\n /* Don't include Solaris-specific format checks.  */\n #undef TARGET_N_FORMAT_TYPES\n #undef TARGET_FORMAT_TYPES\n+\n+/* Don't include Solaris-specific .init / .fini support.  */\n+#undef ASM_DECLARE_FUNCTION_SIZE\n+#define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (!flag_inhibit_size_directive)\t\t\t\t\\\n+\tASM_OUTPUT_MEASURED_SIZE (FILE, FNAME);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  while (0)"}, {"sha": "7db26cf6f511ac279eb5029629a935ba75cbcf70", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=07a434923a44d1a7aecb0859aa22f10e2e26656a", "patch": "@@ -334,6 +334,9 @@ static bool sparc_strict_argument_naming (CUMULATIVE_ARGS *);\n static tree sparc_gimplify_va_arg (tree, tree, tree *, tree *);\n static bool sparc_pass_by_reference (CUMULATIVE_ARGS *,\n \t\t\t\t     enum machine_mode, tree, bool);\n+#ifdef SUBTARGET_ATTRIBUTE_TABLE\n+const struct attribute_spec sparc_attribute_table[];\n+#endif\n \f\n /* Option handling.  */\n \n@@ -450,6 +453,16 @@ enum processor_type sparc_cpu;\n #undef TARGET_LATE_RTL_PROLOGUE_EPILOGUE\n #define TARGET_LATE_RTL_PROLOGUE_EPILOGUE true\n \n+#ifdef SUBTARGET_INSERT_ATTRIBUTES\n+#undef TARGET_INSERT_ATTRIBUTES\n+#define TARGET_INSERT_ATTRIBUTES SUBTARGET_INSERT_ATTRIBUTES\n+#endif\n+\n+#ifdef SUBTARGET_ATTRIBUTE_TABLE\n+#undef TARGET_ATTRIBUTE_TABLE\n+#define TARGET_ATTRIBUTE_TABLE sparc_attribute_table\n+#endif\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Validate and override various options, and do some machine dependent\n@@ -686,6 +699,16 @@ sparc_override_options (void)\n     };\n }\n \f\n+#ifdef SUBTARGET_ATTRIBUTE_TABLE\n+/* Table of valid machine attributes.  */\n+const struct attribute_spec sparc_attribute_table[] =\n+{\n+  /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n+  SUBTARGET_ATTRIBUTE_TABLE,\n+  { NULL,        0, 0, false, false, false, NULL }\n+};\n+#endif\n+\f\n /* Miscellaneous utilities.  */\n \n /* Nonzero if CODE, a comparison, is suitable for use in v9 conditional move"}, {"sha": "2339a0bc98f61452fc330930da0f1b18544348be", "filename": "gcc/config/t-sol2", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Ft-sol2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fconfig%2Ft-sol2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-sol2?ref=07a434923a44d1a7aecb0859aa22f10e2e26656a", "patch": "@@ -1,5 +1,12 @@\n-# Solaris-specific format checking\n+# Solaris-specific format checking and pragmas\n sol2-c.o: $(srcdir)/config/sol2-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-  tree.h c-format.h intl.h\n+  tree.h c-format.h intl.h $(CPPLIB_H) c-pragma.h $(TM_H) $(TM_P_H) \\\n+  toplev.h $(C_COMMON_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t  $(srcdir)/config/sol2-c.c\n+\n+# Solaris-specific attributes\n+sol2.o: $(srcdir)/config/sol2.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n+  tree.h $(TM_H) $(TM_P_H) toplev.h $(GGC_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t  $(srcdir)/config/sol2.c"}, {"sha": "291e4fd44c8768a0ce110a5aaf9fa2ff87f969f2", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07a434923a44d1a7aecb0859aa22f10e2e26656a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=07a434923a44d1a7aecb0859aa22f10e2e26656a", "patch": "@@ -6847,6 +6847,7 @@ for further explanation.\n * ARM Pragmas::\n * RS/6000 and PowerPC Pragmas::\n * Darwin Pragmas::\n+* Solaris Pragmas::\n * Symbol-Renaming Pragmas::\n @end menu\n \n@@ -6931,6 +6932,37 @@ that of the @code{unused} attribute, except that this pragma may appear\n anywhere within the variables' scopes.\n @end table\n \n+@node Solaris Pragmas\n+@subsection Solaris Pragmas\n+\n+The Solaris target supports @code{#pragma redefine_extname}\n+(@pxref{Symbol-Renaming Pragmas}).  It also supports additional\n+@code{#pragma} directives for compatibility with the system compiler.\n+\n+@table @code\n+@item align @var{alignment} (@var{variable} [, @var{variable}]...)\n+@cindex pragma, align\n+\n+Increase the minimum alignment of each @var{variable} to @var{alignment}.\n+This is the same as GCC's @code{aligned} attribute @pxref{Variable\n+Attributes}).\n+\n+@item fini (@var{function} [, @var{function}]...)\n+@cindex pragma, fini\n+\n+This pragma causes each listed @var{function} to be called after\n+main, or during shared module unloading, by adding a call to the\n+@code{.fini} section.\n+\n+@item init (@var{function} [, @var{function}]...)\n+@cindex pragma, init\n+\n+This pragma causes each listed @var{function} to be called during\n+initialization (before @code{main}) or during shared module loading, by\n+adding a call to the @code{.init} section.\n+\n+@end table\n+\n @node Symbol-Renaming Pragmas\n @subsection Symbol-Renaming Pragmas\n "}]}