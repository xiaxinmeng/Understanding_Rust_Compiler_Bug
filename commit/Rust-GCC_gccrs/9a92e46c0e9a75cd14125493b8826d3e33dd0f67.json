{"sha": "9a92e46c0e9a75cd14125493b8826d3e33dd0f67", "node_id": "C_kwDOANBUbNoAKDlhOTJlNDZjMGU5YTc1Y2QxNDEyNTQ5M2I4ODI2ZDNlMzNkZDBmNjc", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-02-02T13:21:51Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-02-02T15:05:39Z"}, "message": "lto: fix error handling for -Wl,-plugin-opt=debug\n\nWhen one uses something like: -Wl,-plugin-opt=debug,\nwe end up with lto1 WPA invocation that has 'debug'\non command line. We interpret that as input filename.\n\nThe patch moves resolution checking later so that we end up with\na reasonable error message:\n\nlto1: fatal error: open debug failed: No such file or directory\ncompilation terminated.\n\n\tPR lto/104333\n\ngcc/lto/ChangeLog:\n\n\t* lto-common.cc (read_cgraph_and_symbols): Move resolution\n\tchecking for number of files later and report a reasonable\n\terror message.\n\t* lto-object.cc (lto_obj_file_open): Make error fatal.", "tree": {"sha": "ff6f1b9ba6123c97b0ce0cb93a2280d44757e36c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff6f1b9ba6123c97b0ce0cb93a2280d44757e36c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a92e46c0e9a75cd14125493b8826d3e33dd0f67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a92e46c0e9a75cd14125493b8826d3e33dd0f67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a92e46c0e9a75cd14125493b8826d3e33dd0f67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a92e46c0e9a75cd14125493b8826d3e33dd0f67/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "302caa1faebf98e0d662a2e68ef171ea74115184", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/302caa1faebf98e0d662a2e68ef171ea74115184", "html_url": "https://github.com/Rust-GCC/gccrs/commit/302caa1faebf98e0d662a2e68ef171ea74115184"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "11fde671162885f265b8b6c9919ba61501e71aad", "filename": "gcc/lto/lto-common.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a92e46c0e9a75cd14125493b8826d3e33dd0f67/gcc%2Flto%2Flto-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a92e46c0e9a75cd14125493b8826d3e33dd0f67/gcc%2Flto%2Flto-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.cc?ref=9a92e46c0e9a75cd14125493b8826d3e33dd0f67", "patch": "@@ -2704,6 +2704,7 @@ read_cgraph_and_symbols (unsigned nfiles, const char **fnames)\n {\n   unsigned int i, last_file_ix;\n   FILE *resolution;\n+  unsigned resolution_objects = 0;\n   int count = 0;\n   struct lto_file_decl_data **decl_data;\n   symtab_node *snode;\n@@ -2726,18 +2727,14 @@ read_cgraph_and_symbols (unsigned nfiles, const char **fnames)\n   if (resolution_file_name)\n     {\n       int t;\n-      unsigned num_objects;\n \n       resolution = fopen (resolution_file_name, \"r\");\n       if (resolution == NULL)\n \tfatal_error (input_location,\n \t\t     \"could not open symbol resolution file: %m\");\n \n-      t = fscanf (resolution, \"%u\", &num_objects);\n+      t = fscanf (resolution, \"%u\", &resolution_objects);\n       gcc_assert (t == 1);\n-\n-      /* True, since the plugin splits the archives.  */\n-      gcc_assert (num_objects == nfiles);\n     }\n   symtab->state = LTO_STREAMING;\n \n@@ -2806,7 +2803,11 @@ read_cgraph_and_symbols (unsigned nfiles, const char **fnames)\n   lto_register_canonical_types_for_odr_types ();\n \n   if (resolution_file_name)\n-    fclose (resolution);\n+    {\n+      /* True, since the plugin splits the archives.  */\n+      gcc_assert (resolution_objects == nfiles);\n+      fclose (resolution);\n+    }\n \n   /* Show the LTO report before launching LTRANS.  */\n   if (flag_lto_report || (flag_wpa && flag_lto_report_wpa))"}, {"sha": "329bbc71fd60bb8b16a761d2b5b68ab054a692c2", "filename": "gcc/lto/lto-object.cc", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a92e46c0e9a75cd14125493b8826d3e33dd0f67/gcc%2Flto%2Flto-object.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a92e46c0e9a75cd14125493b8826d3e33dd0f67/gcc%2Flto%2Flto-object.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-object.cc?ref=9a92e46c0e9a75cd14125493b8826d3e33dd0f67", "patch": "@@ -103,10 +103,7 @@ lto_obj_file_open (const char *filename, bool writable)\n \t\t  : O_RDONLY | O_BINARY),\n \t\t 0666);\n   if (lo->fd == -1)\n-    {\n-      error (\"open %s failed: %s\", fname, xstrerror (errno));\n-      goto fail;\n-    }\n+    fatal_error (input_location, \"open %s failed: %s\", fname, xstrerror (errno));\n \n   if (!writable)\n     {\n@@ -146,13 +143,12 @@ lto_obj_file_open (const char *filename, bool writable)\n \n   return &lo->base;\n \n- fail_errmsg:\n+fail_errmsg:\n   if (err == 0)\n     error (\"%s: %s\", fname, errmsg);\n   else\n     error (\"%s: %s: %s\", fname, errmsg, xstrerror (err));\n \t\t\t\t\t \n- fail:\n   if (lo->fd != -1)\n     lto_obj_file_close ((lto_file *) lo);\n   free (lo);"}]}