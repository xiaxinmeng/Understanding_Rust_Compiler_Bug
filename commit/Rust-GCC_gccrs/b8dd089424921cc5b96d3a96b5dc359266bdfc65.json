{"sha": "b8dd089424921cc5b96d3a96b5dc359266bdfc65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhkZDA4OTQyNDkyMWNjNWI5NmQzYTk2YjVkYzM1OTI2NmJkZmM2NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-13T15:17:26Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-05-13T15:17:26Z"}, "message": "sse.md (<sse>_andnot<mode>3): Handle TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL.\n\n2012-05-13  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/sse.md (<sse>_andnot<mode>3): Handle\n\tTARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL.\n\t(<code><mode>3): Ditto.\n\t(*andnot<mode>3): Ditto.\n\t(*andnottf3): Ditto.\n\t(*<code><mode>3): Ditto.\n\t(<code>tf3): Ditto.\n\nFrom-SVN: r187438", "tree": {"sha": "6c26199d7fa62ba4c010013d7f1f7e9425efed1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c26199d7fa62ba4c010013d7f1f7e9425efed1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8dd089424921cc5b96d3a96b5dc359266bdfc65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8dd089424921cc5b96d3a96b5dc359266bdfc65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8dd089424921cc5b96d3a96b5dc359266bdfc65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8dd089424921cc5b96d3a96b5dc359266bdfc65/comments", "author": null, "committer": null, "parents": [{"sha": "71caddc5568f59a5990f39226f60979a7fe953ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71caddc5568f59a5990f39226f60979a7fe953ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71caddc5568f59a5990f39226f60979a7fe953ef"}], "stats": {"total": 257, "additions": 190, "deletions": 67}, "files": [{"sha": "5faf964cf65e14da22d3666f0781ab8783bc59f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dd089424921cc5b96d3a96b5dc359266bdfc65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dd089424921cc5b96d3a96b5dc359266bdfc65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8dd089424921cc5b96d3a96b5dc359266bdfc65", "patch": "@@ -1,3 +1,13 @@\n+2012-05-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (<sse>_andnot<mode>3): Handle\n+\tTARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL.\n+\t(<code><mode>3): Ditto.\n+\t(*andnot<mode>3): Ditto.\n+\t(*andnottf3): Ditto.\n+\t(*<code><mode>3): Ditto.\n+\t(<code>tf3): Ditto.\n+\n 2012-05-13  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* optc-gen.awk: Error instead of warning for conflicting help.\n@@ -85,8 +95,7 @@\n \n 2012-05-11  H.J. Lu  <hongjiu.lu@intel.com>\n \n-\t* config/i386/driver-i386.c (host_detect_local_cpu): Support\n-\tRTM.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Support RTM.\n \n 2012-05-11  Jan Hubicka  <jh@suse.cz>\n "}, {"sha": "151e651433e7c136fd2d0f855d241db93390f862", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 179, "deletions": 65, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8dd089424921cc5b96d3a96b5dc359266bdfc65/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8dd089424921cc5b96d3a96b5dc359266bdfc65/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b8dd089424921cc5b96d3a96b5dc359266bdfc65", "patch": "@@ -1600,29 +1600,46 @@\n   \"TARGET_SSE\"\n {\n   static char buf[32];\n-  const char *insn;\n-  const char *suffix\n-    = TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL ? \"ps\" : \"<ssemodesuffix>\";\n+  const char *ops;\n+  const char *suffix;\n+\n+  switch (get_attr_mode (insn))\n+    {\n+    case MODE_V8SF:\n+    case MODE_V4SF:\n+      suffix = \"ps\";\n+      break;\n+    default:\n+      suffix = \"<ssemodesuffix>\";\n+    }\n \n   switch (which_alternative)\n     {\n     case 0:\n-      insn = \"andn%s\\t{%%2, %%0|%%0, %%2}\";\n+      ops = \"andn%s\\t{%%2, %%0|%%0, %%2}\";\n       break;\n     case 1:\n-      insn = \"vandn%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      ops = \"vandn%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n       break;\n     default:\n       gcc_unreachable ();\n     }\n \n-  snprintf (buf, sizeof (buf), insn, suffix);\n+  snprintf (buf, sizeof (buf), ops, suffix);\n   return buf;\n }\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+   (set (attr \"mode\")\n+\t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"<ssePSmode>\")\n+\t       (match_test \"TARGET_AVX\")\n+\t\t (const_string \"<MODE>\")\n+\t       (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t (const_string \"V4SF\")\n+\t       ]\n+\t       (const_string \"<MODE>\")))])\n \n (define_expand \"<code><mode>3\"\n   [(set (match_operand:VF 0 \"register_operand\")\n@@ -1640,29 +1657,46 @@\n   \"TARGET_SSE && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n   static char buf[32];\n-  const char *insn;\n-  const char *suffix\n-    = TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL ? \"ps\" : \"<ssemodesuffix>\";\n+  const char *ops;\n+  const char *suffix;\n+\n+  switch (get_attr_mode (insn))\n+    {\n+    case MODE_V8SF:\n+    case MODE_V4SF:\n+      suffix = \"ps\";\n+      break;\n+    default:\n+      suffix = \"<ssemodesuffix>\";\n+    }\n \n   switch (which_alternative)\n     {\n     case 0:\n-      insn = \"<logic>%s\\t{%%2, %%0|%%0, %%2}\";\n+      ops = \"<logic>%s\\t{%%2, %%0|%%0, %%2}\";\n       break;\n     case 1:\n-      insn = \"v<logic>%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      ops = \"v<logic>%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n       break;\n     default:\n       gcc_unreachable ();\n     }\n \n-  snprintf (buf, sizeof (buf), insn, suffix);\n+  snprintf (buf, sizeof (buf), ops, suffix);\n   return buf;\n }\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n    (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+   (set (attr \"mode\")\n+\t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"<ssePSmode>\")\n+\t       (match_test \"TARGET_AVX\")\n+\t\t (const_string \"<MODE>\")\n+\t       (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t (const_string \"V4SF\")\n+\t       ]\n+\t       (const_string \"<MODE>\")))])\n \n (define_expand \"copysign<mode>3\"\n   [(set (match_dup 4)\n@@ -1696,29 +1730,84 @@\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n {\n   static char buf[32];\n-  const char *insn;\n+  const char *ops;\n   const char *suffix\n-    = TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL ? \"ps\" : \"<ssevecmodesuffix>\";\n+    = (get_attr_mode (insn) == MODE_V4SF) ? \"ps\" : \"<ssevecmodesuffix>\";\n+\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      ops = \"andn%s\\t{%%2, %%0|%%0, %%2}\";\n+      break;\n+    case 1:\n+      ops = \"vandn%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  snprintf (buf, sizeof (buf), ops, suffix);\n+  return buf;\n+}\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set (attr \"mode\")\n+\t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"V4SF\")\n+\t       (match_test \"TARGET_AVX\")\n+\t\t (const_string \"<ssevecmode>\")\n+\t       (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t (const_string \"V4SF\")\n+\t       ]\n+\t       (const_string \"<ssevecmode>\")))])\n+\n+(define_insn \"*andnottf3\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=x,x\")\n+\t(and:TF\n+\t  (not:TF (match_operand:TF 1 \"register_operand\" \"0,x\"))\n+\t  (match_operand:TF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+  \"TARGET_SSE\"\n+{\n+  static char buf[32];\n+  const char *ops;\n+  const char *tmp\n+    = (get_attr_mode (insn) == MODE_V4SF) ? \"andnps\" : \"pandn\";\n \n   switch (which_alternative)\n     {\n     case 0:\n-      insn = \"andn%s\\t{%%2, %%0|%%0, %%2}\";\n+      ops = \"%s\\t{%%2, %%0|%%0, %%2}\";\n       break;\n     case 1:\n-      insn = \"vandn%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      ops = \"v%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n       break;\n     default:\n       gcc_unreachable ();\n     }\n \n-  snprintf (buf, sizeof (buf), insn, suffix);\n+  snprintf (buf, sizeof (buf), ops, tmp);\n   return buf;\n }\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n+   (set (attr \"prefix_data16\")\n+     (if_then_else\n+       (and (eq_attr \"alternative\" \"0\")\n+\t    (eq_attr \"mode\" \"TI\"))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"<ssevecmode>\")])\n+   (set (attr \"mode\")\n+\t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"V4SF\")\n+\t       (match_test \"TARGET_AVX\")\n+\t\t (const_string \"TI\")\n+\t       (ior (not (match_test \"TARGET_SSE2\"))\n+\t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t\t (const_string \"V4SF\")\n+\t       ]\n+\t       (const_string \"TI\")))])\n \n (define_insn \"*<code><mode>3\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x\")\n@@ -1728,29 +1817,93 @@\n   \"SSE_FLOAT_MODE_P (<MODE>mode)\"\n {\n   static char buf[32];\n-  const char *insn;\n+  const char *ops;\n   const char *suffix\n-    = TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL ? \"ps\" : \"<ssevecmodesuffix>\";\n+    = (get_attr_mode (insn) == MODE_V4SF) ? \"ps\" : \"<ssevecmodesuffix>\";\n+\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      ops = \"<logic>%s\\t{%%2, %%0|%%0, %%2}\";\n+      break;\n+    case 1:\n+      ops = \"v<logic>%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  snprintf (buf, sizeof (buf), ops, suffix);\n+  return buf;\n+}\n+  [(set_attr \"isa\" \"noavx,avx\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"prefix\" \"orig,vex\")\n+   (set (attr \"mode\")\n+\t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"V4SF\")\n+\t       (match_test \"TARGET_AVX\")\n+\t\t (const_string \"<ssevecmode>\")\n+\t       (match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t (const_string \"V4SF\")\n+\t       ]\n+\t       (const_string \"<ssevecmode>\")))])\n+\n+(define_expand \"<code>tf3\"\n+  [(set (match_operand:TF 0 \"register_operand\")\n+\t(any_logic:TF\n+\t  (match_operand:TF 1 \"nonimmediate_operand\")\n+\t  (match_operand:TF 2 \"nonimmediate_operand\")))]\n+  \"TARGET_SSE\"\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, TFmode, operands);\")\n+\n+(define_insn \"*<code>tf3\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=x,x\")\n+\t(any_logic:TF\n+\t  (match_operand:TF 1 \"nonimmediate_operand\" \"%0,x\")\n+\t  (match_operand:TF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+  \"TARGET_SSE\n+   && ix86_binary_operator_ok (<CODE>, TFmode, operands)\"\n+{\n+  static char buf[32];\n+  const char *ops;\n+  const char *tmp\n+    = (get_attr_mode (insn) == MODE_V4SF) ? \"<logic>ps\" : \"p<logic>\";\n \n   switch (which_alternative)\n     {\n     case 0:\n-      insn = \"<logic>%s\\t{%%2, %%0|%%0, %%2}\";\n+      ops = \"%s\\t{%%2, %%0|%%0, %%2}\";\n       break;\n     case 1:\n-      insn = \"v<logic>%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n+      ops = \"v%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n       break;\n     default:\n       gcc_unreachable ();\n     }\n \n-  snprintf (buf, sizeof (buf), insn, suffix);\n+  snprintf (buf, sizeof (buf), ops, tmp);\n   return buf;\n }\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n+   (set (attr \"prefix_data16\")\n+     (if_then_else\n+       (and (eq_attr \"alternative\" \"0\")\n+\t    (eq_attr \"mode\" \"TI\"))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"<ssevecmode>\")])\n+   (set (attr \"mode\")\n+\t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t\t (const_string \"V4SF\")\n+\t       (match_test \"TARGET_AVX\")\n+\t\t (const_string \"TI\")\n+\t       (ior (not (match_test \"TARGET_SSE2\"))\n+\t\t    (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t\t (const_string \"V4SF\")\n+\t       ]\n+\t       (const_string \"TI\")))])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n@@ -6659,45 +6812,6 @@\n \t   ]\n \t   (const_string \"<sseinsnmode>\")))])\n \n-(define_insn \"*andnottf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=x,x\")\n-\t(and:TF\n-\t  (not:TF (match_operand:TF 1 \"register_operand\" \"0,x\"))\n-\t  (match_operand:TF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n-  \"TARGET_SSE2\"\n-  \"@\n-   pandn\\t{%2, %0|%0, %2}\n-   vpandn\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_expand \"<code>tf3\"\n-  [(set (match_operand:TF 0 \"register_operand\")\n-\t(any_logic:TF\n-\t  (match_operand:TF 1 \"nonimmediate_operand\")\n-\t  (match_operand:TF 2 \"nonimmediate_operand\")))]\n-  \"TARGET_SSE2\"\n-  \"ix86_fixup_binary_operands_no_copy (<CODE>, TFmode, operands);\")\n-\n-(define_insn \"*<code>tf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=x,x\")\n-\t(any_logic:TF\n-\t  (match_operand:TF 1 \"nonimmediate_operand\" \"%0,x\")\n-\t  (match_operand:TF 2 \"nonimmediate_operand\" \"xm,xm\")))]\n-  \"TARGET_SSE2\n-   && ix86_binary_operator_ok (<CODE>, TFmode, operands)\"\n-  \"@\n-   p<logic>\\t{%2, %0|%0, %2}\n-   vp<logic>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n ;; Parallel integral element swizzling"}]}