{"sha": "2a269bda9e7b8f9353699d0c965e7e9246500aa0", "node_id": "C_kwDOANBUbNoAKDJhMjY5YmRhOWU3YjhmOTM1MzY5OWQwYzk2NWU3ZTkyNDY1MDBhYTA", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-29T10:32:57Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-09-29T10:32:57Z"}, "message": "aarch64: Tweak handling of -mgeneral-regs-only\n\n-mgeneral-regs-only is effectively \"+nofp for the compiler without\nchanging the assembler's ISA flags\".  Currently that's implemented\nby making TARGET_FLOAT, TARGET_SIMD and TARGET_SVE depend on\n!TARGET_GENERAL_REGS_ONLY and then making any feature that needs FP\nregisters depend (directly or indirectly) on one of those three TARGET\nmacros.  The problem is that it's easy to forgot to do the last bit.\n\nThis patch instead represents the distinction between \"assemnbler\nISA flags\" and \"compiler ISA flags\" more directly, funnelling\nall updates through a new function that sets both sets of flags\ntogether.\n\ngcc/\n\t* config/aarch64/aarch64.opt (aarch64_asm_isa_flags): New variable.\n\t* config/aarch64/aarch64.h (aarch64_asm_isa_flags)\n\t(aarch64_isa_flags): Redefine as read-only macros.\n\t(TARGET_SIMD, TARGET_FLOAT, TARGET_SVE): Don't depend on\n\t!TARGET_GENERAL_REGS_ONLY.\n\t* common/config/aarch64/aarch64-common.cc\n\t(aarch64_set_asm_isa_flags): New function.\n\t(aarch64_handle_option): Call it when updating -mgeneral-regs.\n\t* config/aarch64/aarch64-protos.h (aarch64_simd_switcher): Replace\n\tm_old_isa_flags with m_old_asm_isa_flags.\n\t(aarch64_set_asm_isa_flags): Declare.\n\t* config/aarch64/aarch64-builtins.cc\n\t(aarch64_simd_switcher::aarch64_simd_switcher)\n\t(aarch64_simd_switcher::~aarch64_simd_switcher): Save and restore\n\taarch64_asm_isa_flags instead of aarch64_isa_flags.\n\t* config/aarch64/aarch64-sve-builtins.cc\n\t(check_required_extensions): Use aarch64_asm_isa_flags instead\n\tof aarch64_isa_flags.\n\t* config/aarch64/aarch64.cc (aarch64_set_asm_isa_flags): New function.\n\t(aarch64_override_options, aarch64_handle_attr_arch)\n\t(aarch64_handle_attr_cpu, aarch64_handle_attr_isa_flags): Use\n\taarch64_set_asm_isa_flags to set the ISA flags.\n\t(aarch64_option_print, aarch64_declare_function_name)\n\t(aarch64_start_file): Use aarch64_asm_isa_flags instead\n\tof aarch64_isa_flags.\n\t(aarch64_can_inline_p): Check aarch64_asm_isa_flags as well as\n\taarch64_isa_flags.", "tree": {"sha": "535c3839b27983c382ecaf009b88f4d013ca5180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/535c3839b27983c382ecaf009b88f4d013ca5180"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a269bda9e7b8f9353699d0c965e7e9246500aa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a269bda9e7b8f9353699d0c965e7e9246500aa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a269bda9e7b8f9353699d0c965e7e9246500aa0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a269bda9e7b8f9353699d0c965e7e9246500aa0/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb7f43b62a58a0f0326fd3060f0bd43e6f3ef971", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb7f43b62a58a0f0326fd3060f0bd43e6f3ef971", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb7f43b62a58a0f0326fd3060f0bd43e6f3ef971"}], "stats": {"total": 90, "additions": 68, "deletions": 22}, "files": [{"sha": "61007839d35b356270e8c17aed1b2d3b05dca8e9", "filename": "gcc/common/config/aarch64/aarch64-common.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a269bda9e7b8f9353699d0c965e7e9246500aa0/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a269bda9e7b8f9353699d0c965e7e9246500aa0/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.cc?ref=2a269bda9e7b8f9353699d0c965e7e9246500aa0", "patch": "@@ -64,6 +64,17 @@ static const struct default_options aarch_option_optimization_table[] =\n     { OPT_LEVELS_NONE, 0, NULL, 0 }\n   };\n \n+/* Set OPTS->x_aarch64_asm_isa_flags to FLAGS and update\n+   OPTS->x_aarch64_isa_flags accordingly.  */\n+void\n+aarch64_set_asm_isa_flags (gcc_options *opts, aarch64_feature_flags flags)\n+{\n+  opts->x_aarch64_asm_isa_flags = flags;\n+  opts->x_aarch64_isa_flags = flags;\n+  if (opts->x_target_flags & MASK_GENERAL_REGS_ONLY)\n+    opts->x_aarch64_isa_flags &= ~feature_deps::get_flags_off (AARCH64_FL_FP);\n+}\n+\n /* Implement TARGET_HANDLE_OPTION.\n    This function handles the target specific options for CPU/target selection.\n \n@@ -98,6 +109,7 @@ aarch64_handle_option (struct gcc_options *opts,\n \n     case OPT_mgeneral_regs_only:\n       opts->x_target_flags |= MASK_GENERAL_REGS_ONLY;\n+      aarch64_set_asm_isa_flags (opts, opts->x_aarch64_asm_isa_flags);\n       return true;\n \n     case OPT_mfix_cortex_a53_835769:"}, {"sha": "b533082592822b002561192246d5500f11ecfe4c", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a269bda9e7b8f9353699d0c965e7e9246500aa0/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a269bda9e7b8f9353699d0c965e7e9246500aa0/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=2a269bda9e7b8f9353699d0c965e7e9246500aa0", "patch": "@@ -1549,20 +1549,20 @@ aarch64_scalar_builtin_type_p (aarch64_simd_type t)\n /* Enable AARCH64_FL_* flags EXTRA_FLAGS on top of the base Advanced SIMD\n    set.  */\n aarch64_simd_switcher::aarch64_simd_switcher (unsigned int extra_flags)\n-  : m_old_isa_flags (aarch64_isa_flags),\n+  : m_old_asm_isa_flags (aarch64_asm_isa_flags),\n     m_old_general_regs_only (TARGET_GENERAL_REGS_ONLY)\n {\n   /* Changing the ISA flags should be enough here.  We shouldn't need to\n      pay the compile-time cost of a full target switch.  */\n-  aarch64_isa_flags = AARCH64_FL_FP | AARCH64_FL_SIMD | extra_flags;\n   global_options.x_target_flags &= ~MASK_GENERAL_REGS_ONLY;\n+  aarch64_set_asm_isa_flags (AARCH64_FL_FP | AARCH64_FL_SIMD | extra_flags);\n }\n \n aarch64_simd_switcher::~aarch64_simd_switcher ()\n {\n   if (m_old_general_regs_only)\n     global_options.x_target_flags |= MASK_GENERAL_REGS_ONLY;\n-  aarch64_isa_flags = m_old_isa_flags;\n+  aarch64_set_asm_isa_flags (m_old_asm_isa_flags);\n }\n \n /* Implement #pragma GCC aarch64 \"arm_neon.h\"."}, {"sha": "1a71f02284137c64e7115b26e6aa00447596f105", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a269bda9e7b8f9353699d0c965e7e9246500aa0/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a269bda9e7b8f9353699d0c965e7e9246500aa0/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=2a269bda9e7b8f9353699d0c965e7e9246500aa0", "patch": "@@ -747,7 +747,7 @@ class aarch64_simd_switcher\n   ~aarch64_simd_switcher ();\n \n private:\n-  unsigned long m_old_isa_flags;\n+  unsigned long m_old_asm_isa_flags;\n   bool m_old_general_regs_only;\n };\n \n@@ -1029,7 +1029,10 @@ extern bool aarch64_classify_address (struct aarch64_address_info *, rtx,\n \t\t\t\t      machine_mode, bool,\n \t\t\t\t      aarch64_addr_query_type = ADDR_QUERY_M);\n \n+void aarch64_set_asm_isa_flags (aarch64_feature_flags);\n+\n /* Defined in common/config/aarch64-common.cc.  */\n+void aarch64_set_asm_isa_flags (gcc_options *, aarch64_feature_flags);\n bool aarch64_handle_option (struct gcc_options *, struct gcc_options *,\n \t\t\t     const struct cl_decoded_option *, location_t);\n const char *aarch64_rewrite_selected_cpu (const char *name);"}, {"sha": "a70e3a6b47199c6e7f3ddc52b5f02ccc94f5e88e", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a269bda9e7b8f9353699d0c965e7e9246500aa0/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a269bda9e7b8f9353699d0c965e7e9246500aa0/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=2a269bda9e7b8f9353699d0c965e7e9246500aa0", "patch": "@@ -696,7 +696,7 @@ static bool\n check_required_extensions (location_t location, tree fndecl,\n \t\t\t   aarch64_feature_flags required_extensions)\n {\n-  auto missing_extensions = required_extensions & ~aarch64_isa_flags;\n+  auto missing_extensions = required_extensions & ~aarch64_asm_isa_flags;\n   if (missing_extensions == 0)\n     return check_required_registers (location, fndecl);\n "}, {"sha": "f095fc9cc532a571b03272a512a6634e081b25da", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a269bda9e7b8f9353699d0c965e7e9246500aa0/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a269bda9e7b8f9353699d0c965e7e9246500aa0/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=2a269bda9e7b8f9353699d0c965e7e9246500aa0", "patch": "@@ -18130,10 +18130,19 @@ aarch64_convert_sve_vector_bits (aarch64_sve_vector_bits_enum value)\n     return (int) value / 64;\n }\n \n+/* Set the global aarch64_asm_isa_flags to FLAGS and update\n+   aarch64_isa_flags accordingly.  */\n+\n+void\n+aarch64_set_asm_isa_flags (aarch64_feature_flags flags)\n+{\n+  aarch64_set_asm_isa_flags (&global_options, flags);\n+}\n+\n /* Implement TARGET_OPTION_OVERRIDE.  This is called once in the beginning\n    and is used to parse the -m{cpu,tune,arch} strings and setup the initial\n    tuning structs.  In particular it must set selected_tune and\n-   aarch64_isa_flags that define the available ISA features and tuning\n+   aarch64_asm_isa_flags that define the available ISA features and tuning\n    decisions.  It must also set selected_arch as this will be used to\n    output the .arch asm tags for each function.  */\n \n@@ -18142,7 +18151,7 @@ aarch64_override_options (void)\n {\n   aarch64_feature_flags cpu_isa = 0;\n   aarch64_feature_flags arch_isa = 0;\n-  aarch64_isa_flags = 0;\n+  aarch64_set_asm_isa_flags (0);\n \n   const struct processor *cpu = NULL;\n   const struct processor *arch = NULL;\n@@ -18182,25 +18191,25 @@ aarch64_override_options (void)\n \t}\n \n       selected_arch = arch->arch;\n-      aarch64_isa_flags = arch_isa;\n+      aarch64_set_asm_isa_flags (arch_isa);\n     }\n   else if (cpu)\n     {\n       selected_arch = cpu->arch;\n-      aarch64_isa_flags = cpu_isa;\n+      aarch64_set_asm_isa_flags (cpu_isa);\n     }\n   else if (arch)\n     {\n       cpu = &all_cores[arch->ident];\n       selected_arch = arch->arch;\n-      aarch64_isa_flags = arch_isa;\n+      aarch64_set_asm_isa_flags (arch_isa);\n     }\n   else\n     {\n       /* No -mcpu or -march specified, so use the default CPU.  */\n       cpu = &all_cores[TARGET_CPU_DEFAULT];\n       selected_arch = cpu->arch;\n-      aarch64_isa_flags = cpu->flags;\n+      aarch64_set_asm_isa_flags (cpu->flags);\n     }\n \n   selected_tune = tune ? tune->ident : cpu->ident;\n@@ -18342,7 +18351,7 @@ aarch64_option_print (FILE *file, int indent, struct cl_target_option *ptr)\n     = aarch64_get_tune_cpu (ptr->x_selected_tune);\n   const struct processor *arch = aarch64_get_arch (ptr->x_selected_arch);\n   std::string extension\n-    = aarch64_get_extension_string_for_isa_flags (ptr->x_aarch64_isa_flags,\n+    = aarch64_get_extension_string_for_isa_flags (ptr->x_aarch64_asm_isa_flags,\n \t\t\t\t\t\t  arch->flags);\n \n   fprintf (file, \"%*sselected tune = %s\\n\", indent, \"\", cpu->name);\n@@ -18450,13 +18459,15 @@ aarch64_handle_attr_arch (const char *str)\n {\n   const struct processor *tmp_arch = NULL;\n   std::string invalid_extension;\n+  aarch64_feature_flags tmp_flags;\n   enum aarch64_parse_opt_result parse_res\n-    = aarch64_parse_arch (str, &tmp_arch, &aarch64_isa_flags, &invalid_extension);\n+    = aarch64_parse_arch (str, &tmp_arch, &tmp_flags, &invalid_extension);\n \n   if (parse_res == AARCH64_PARSE_OK)\n     {\n       gcc_assert (tmp_arch);\n       selected_arch = tmp_arch->arch;\n+      aarch64_set_asm_isa_flags (tmp_flags);\n       return true;\n     }\n \n@@ -18488,14 +18499,16 @@ aarch64_handle_attr_cpu (const char *str)\n {\n   const struct processor *tmp_cpu = NULL;\n   std::string invalid_extension;\n+  aarch64_feature_flags tmp_flags;\n   enum aarch64_parse_opt_result parse_res\n-    = aarch64_parse_cpu (str, &tmp_cpu, &aarch64_isa_flags, &invalid_extension);\n+    = aarch64_parse_cpu (str, &tmp_cpu, &tmp_flags, &invalid_extension);\n \n   if (parse_res == AARCH64_PARSE_OK)\n     {\n       gcc_assert (tmp_cpu);\n       selected_tune = tmp_cpu->ident;\n       selected_arch = tmp_cpu->arch;\n+      aarch64_set_asm_isa_flags (tmp_flags);\n       return true;\n     }\n \n@@ -18589,7 +18602,7 @@ static bool\n aarch64_handle_attr_isa_flags (char *str)\n {\n   enum aarch64_parse_opt_result parse_res;\n-  auto isa_flags = aarch64_isa_flags;\n+  auto isa_flags = aarch64_asm_isa_flags;\n \n   /* We allow \"+nothing\" in the beginning to clear out all architectural\n      features if the user wants to handpick specific features.  */\n@@ -18604,7 +18617,7 @@ aarch64_handle_attr_isa_flags (char *str)\n \n   if (parse_res == AARCH64_PARSE_OK)\n     {\n-      aarch64_isa_flags = isa_flags;\n+      aarch64_set_asm_isa_flags (isa_flags);\n       return true;\n     }\n \n@@ -19014,8 +19027,12 @@ aarch64_can_inline_p (tree caller, tree callee)\n \t\t\t\t\t   : target_option_default_node);\n \n   /* Callee's ISA flags should be a subset of the caller's.  */\n+  if ((caller_opts->x_aarch64_asm_isa_flags\n+       & callee_opts->x_aarch64_asm_isa_flags)\n+      != callee_opts->x_aarch64_asm_isa_flags)\n+    return false;\n   if ((caller_opts->x_aarch64_isa_flags & callee_opts->x_aarch64_isa_flags)\n-       != callee_opts->x_aarch64_isa_flags)\n+      != callee_opts->x_aarch64_isa_flags)\n     return false;\n \n   /* Allow non-strict aligned functions inlining into strict\n@@ -22477,7 +22494,7 @@ aarch64_declare_function_name (FILE *stream, const char* name,\n   const struct processor *this_arch\n     = aarch64_get_arch (targ_options->x_selected_arch);\n \n-  auto isa_flags = targ_options->x_aarch64_isa_flags;\n+  auto isa_flags = targ_options->x_aarch64_asm_isa_flags;\n   std::string extension\n     = aarch64_get_extension_string_for_isa_flags (isa_flags,\n \t\t\t\t\t\t  this_arch->flags);\n@@ -22581,7 +22598,7 @@ aarch64_start_file (void)\n \n   const struct processor *default_arch\n     = aarch64_get_arch (default_options->x_selected_arch);\n-  auto default_isa_flags = default_options->x_aarch64_isa_flags;\n+  auto default_isa_flags = default_options->x_aarch64_asm_isa_flags;\n   std::string extension\n     = aarch64_get_extension_string_for_isa_flags (default_isa_flags,\n \t\t\t\t\t\t  default_arch->flags);"}, {"sha": "6ee63570551d73e188c7abe48e1d17632858d2be", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a269bda9e7b8f9353699d0c965e7e9246500aa0/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a269bda9e7b8f9353699d0c965e7e9246500aa0/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=2a269bda9e7b8f9353699d0c965e7e9246500aa0", "patch": "@@ -22,6 +22,17 @@\n #ifndef GCC_AARCH64_H\n #define GCC_AARCH64_H\n \n+/* Make these flags read-only so that all uses go via\n+   aarch64_set_asm_isa_flags.  */\n+#ifndef GENERATOR_FILE\n+#undef aarch64_asm_isa_flags\n+#define aarch64_asm_isa_flags \\\n+  ((aarch64_feature_flags) global_options.x_aarch64_asm_isa_flags)\n+#undef aarch64_isa_flags\n+#define aarch64_isa_flags \\\n+  ((aarch64_feature_flags) global_options.x_aarch64_isa_flags)\n+#endif\n+\n /* Target CPU builtins.  */\n #define TARGET_CPU_CPP_BUILTINS()\t\\\n   aarch64_cpu_cpp_builtins (pfile)\n@@ -51,8 +62,8 @@\n \n /* AdvSIMD is supported in the default configuration, unless disabled by\n    -mgeneral-regs-only or by the +nosimd extension.  */\n-#define TARGET_SIMD (!TARGET_GENERAL_REGS_ONLY && AARCH64_ISA_SIMD)\n-#define TARGET_FLOAT (!TARGET_GENERAL_REGS_ONLY && AARCH64_ISA_FP)\n+#define TARGET_SIMD (AARCH64_ISA_SIMD)\n+#define TARGET_FLOAT (AARCH64_ISA_FP)\n \n #define UNITS_PER_WORD\t\t8\n \n@@ -242,7 +253,7 @@ enum class aarch64_feature : unsigned char {\n #define TARGET_DOTPROD (TARGET_SIMD && AARCH64_ISA_DOTPROD)\n \n /* SVE instructions, enabled through +sve.  */\n-#define TARGET_SVE (!TARGET_GENERAL_REGS_ONLY && AARCH64_ISA_SVE)\n+#define TARGET_SVE (AARCH64_ISA_SVE)\n \n /* SVE2 instructions, enabled through +sve2.  */\n #define TARGET_SVE2 (TARGET_SVE && AARCH64_ISA_SVE2)"}, {"sha": "b89b20450710592101b93f4f3b5dc33d152d1eb6", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a269bda9e7b8f9353699d0c965e7e9246500aa0/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a269bda9e7b8f9353699d0c965e7e9246500aa0/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=2a269bda9e7b8f9353699d0c965e7e9246500aa0", "patch": "@@ -27,6 +27,9 @@ enum aarch64_processor selected_tune = aarch64_none\n TargetVariable\n enum aarch64_arch selected_arch = aarch64_no_arch\n \n+TargetVariable\n+aarch64_feature_flags aarch64_asm_isa_flags = 0\n+\n TargetVariable\n aarch64_feature_flags aarch64_isa_flags = 0\n "}]}