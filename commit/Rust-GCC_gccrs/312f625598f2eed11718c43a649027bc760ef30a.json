{"sha": "312f625598f2eed11718c43a649027bc760ef30a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEyZjYyNTU5OGYyZWVkMTE3MThjNDNhNjQ5MDI3YmM3NjBlZjMwYQ==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "1999-08-18T10:43:26Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "1999-08-18T10:43:26Z"}, "message": "cse.c (cse_insn): Call never_reached_warning when a jump is changed to be unconditional.\n\n* cse.c (cse_insn): Call never_reached_warning when a jump is\nchanged to be unconditional.\n* flags.h: Declare warn_notreached.\n* flow.c (delete_block): Call never_reached_warning when\na block is deleted.\n* jump.c (delete_barrier_successors): Call never_reached_warning\nwhen we delete everything after a BARRIER.\n(never_reached_warning): New function.\n* rtl.h: Declare never_reached_warning.\n* toplev.c (warn_notreached): New variable.\n(lang_independent_options): Set warn_notreached\nwhen -Wunreachable-code.\n(compile_file): We need line numbers for -Wunreachable-code.\n\nAlso modify documentation to suit.\n\nFrom-SVN: r28747", "tree": {"sha": "4fb0b080db23c76c2853dadb847aff9aa64d9dc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fb0b080db23c76c2853dadb847aff9aa64d9dc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/312f625598f2eed11718c43a649027bc760ef30a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312f625598f2eed11718c43a649027bc760ef30a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/312f625598f2eed11718c43a649027bc760ef30a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312f625598f2eed11718c43a649027bc760ef30a/comments", "author": null, "committer": null, "parents": [{"sha": "075ff1b238e01efca6c3a0dc6ddd82046fda4c5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/075ff1b238e01efca6c3a0dc6ddd82046fda4c5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/075ff1b238e01efca6c3a0dc6ddd82046fda4c5a"}], "stats": {"total": 115, "additions": 105, "deletions": 10}, "files": [{"sha": "0cdd854f91e6a5b11439245b7f14f8c8db3b5186", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312f625598f2eed11718c43a649027bc760ef30a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312f625598f2eed11718c43a649027bc760ef30a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=312f625598f2eed11718c43a649027bc760ef30a", "patch": "@@ -1,3 +1,19 @@\n+Sat Aug 14 00:54:57 1999  Geoffrey Keating  <geoffk@cygnus.com>\n+\n+\t* cse.c (cse_insn): Call never_reached_warning when a jump is\n+ \tchanged to be unconditional.\n+\t* flags.h: Declare warn_notreached.\n+\t* flow.c (delete_block): Call never_reached_warning when\n+\ta block is deleted.\n+\t* jump.c (delete_barrier_successors): Call never_reached_warning \n+\twhen we delete everything after a BARRIER.\n+\t(never_reached_warning): New function.\n+\t* rtl.h: Declare never_reached_warning.\n+\t* toplev.c (warn_notreached): New variable.\n+\t(lang_independent_options): Set warn_notreached\n+\twhen -Wunreachable-code.\n+\t(compile_file): We need line numbers for -Wunreachable-code.\n+\n Tue Aug 17 22:06:11 1999  Jan Hubicka  <hubicka@freesoft.cz>\n \n \t* haifa-sched.c (insn_unit): Fix typo on out of range test."}, {"sha": "f279cd152cc09434fd396cc54e9b1a206648d845", "filename": "gcc/cse.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312f625598f2eed11718c43a649027bc760ef30a/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312f625598f2eed11718c43a649027bc760ef30a/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=312f625598f2eed11718c43a649027bc760ef30a", "patch": "@@ -7419,6 +7419,8 @@ cse_insn (insn, libcall_insn)\n \t     not delete NOTEs except for NOTE_INSN_DELETED since later\n \t     phases assume these notes are retained.  */\n \n+\t  never_reached_warning (insn);\n+\n \t  p = insn;\n \n \t  while (NEXT_INSN (p) != 0"}, {"sha": "9871fb88b78aec3f207d5150a20be75a8aed2df7", "filename": "gcc/flags.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312f625598f2eed11718c43a649027bc760ef30a/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312f625598f2eed11718c43a649027bc760ef30a/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=312f625598f2eed11718c43a649027bc760ef30a", "patch": "@@ -79,6 +79,10 @@ extern int extra_warnings;\n \n extern int warn_unused;\n \n+/* Nonzero to warn about code which is never reached.  */\n+\n+extern int warn_notreached;\n+\n /* Nonzero means warn if inline function is too large.  */\n \n extern int warn_inline;"}, {"sha": "c38d0b3638bd9bca3c8531d4195ee2441057a15d", "filename": "gcc/flow.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312f625598f2eed11718c43a649027bc760ef30a/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312f625598f2eed11718c43a649027bc760ef30a/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=312f625598f2eed11718c43a649027bc760ef30a", "patch": "@@ -1682,6 +1682,8 @@ delete_block (b)\n \n   insn = b->head;\n   \n+  never_reached_warning (insn);\n+\n   if (GET_CODE (insn) == CODE_LABEL)\n     {\n       rtx x, *prev = &exception_handler_labels;"}, {"sha": "3494de492a296e224b07693320a50af5c7547543", "filename": "gcc/gcc.texi", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312f625598f2eed11718c43a649027bc760ef30a/gcc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312f625598f2eed11718c43a649027bc760ef30a/gcc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.texi?ref=312f625598f2eed11718c43a649027bc760ef30a", "patch": "@@ -1919,13 +1919,6 @@ Warning about assigning a signed value to an unsigned variable.\n Such assignments must be very common; warning about them would cause\n more annoyance than good.\n \n-@item\n-Warning about unreachable code.\n-\n-It's very common to have unreachable code in machine-generated\n-programs.  For example, this happens normally in some files of GNU C\n-itself.\n-\n @item\n Warning when a non-void function value is ignored.\n "}, {"sha": "7dadd3f8db9a2561343e7a14f26e5cc49d4f94e6", "filename": "gcc/invoke.texi", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312f625598f2eed11718c43a649027bc760ef30a/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312f625598f2eed11718c43a649027bc760ef30a/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=312f625598f2eed11718c43a649027bc760ef30a", "patch": "@@ -132,8 +132,8 @@ in the following sections.\n -Wparentheses -Wpointer-arith  -Wredundant-decls\n -Wreturn-type -Wshadow  -Wsign-compare  -Wstrict-prototypes  \n -Wswitch  -Wtraditional  \n--Wtrigraphs -Wundef  -Wuninitialized  -Wunused  -Wwrite-strings\n--Wunknown-pragmas\n+-Wtrigraphs -Wundef  -Wuninitialized  -Wunknown-pragmas -Wunreachable-code \n+-Wunused  -Wwrite-strings\n @end smallexample\n \n @item Debugging Options\n@@ -1766,6 +1766,27 @@ cases where multiple declaration is valid and changes nothing.\n @item -Wnested-externs\n Warn if an @code{extern} declaration is encountered within an function.\n \n+@item -Wunreachable-code\n+Warn if the compiler detects that code will never be executed.\n+\n+This option is intended to warn when the compiler detects that at\n+least a whole line of source code will never be executed, because\n+some condition is never satisfied or because it is after a\n+procedure that never returns.\n+\n+It is possible for this option to produce a warning even though there\n+are circumstances under which part of the affected line can be executed,\n+so care should be taken when removing apparently-unreachable code.\n+\n+For instance, when a function is inlined, a warning may mean that the\n+line is unreachable in only one inlined copy of the function.  \n+\n+This option is not made part of @samp{-Wall} because in a debugging\n+version of a program there is often substantial code which checks\n+correct functioning of the program and is, hopefully, unreachable\n+because the program does work.  Another common use of unreachable\n+code is to provide behaviour which is selectable at compile-time.\n+\n @item -Winline\n Warn if a function can not be inlined, and either it was declared as inline,\n or else the @samp{-finline-functions} option was given."}, {"sha": "6e63322b611e8e964d0da99c19db3bbb9ebe96e3", "filename": "gcc/jump.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312f625598f2eed11718c43a649027bc760ef30a/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312f625598f2eed11718c43a649027bc760ef30a/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=312f625598f2eed11718c43a649027bc760ef30a", "patch": "@@ -2149,6 +2149,9 @@ delete_barrier_successors (f)\n       if (GET_CODE (insn) == BARRIER)\n \t{\n \t  insn = NEXT_INSN (insn);\n+\n+\t  never_reached_warning (insn);\n+\n \t  while (insn != 0 && GET_CODE (insn) != CODE_LABEL)\n \t    {\n \t      if (GET_CODE (insn) == NOTE\n@@ -4245,6 +4248,52 @@ delete_for_peephole (from, to)\n      is also an unconditional jump in that case.  */\n }\n \f\n+/* We have determined that INSN is never reached, and are about to\n+   delete it.  Print a warning if the user asked for one.\n+\n+   To try to make this warning more useful, this should only be called\n+   once per basic block not reached, and it only warns when the basic\n+   block contains more than one line from the current function, and\n+   contains at least one operation.  CSE and inlining can duplicate insns,\n+   so it's possible to get spurious warnings from this.  */\n+\n+void\n+never_reached_warning (avoided_insn)\n+     rtx avoided_insn;\n+{\n+  rtx insn;\n+  rtx a_line_note = NULL;\n+  int two_avoided_lines = 0;\n+  int contains_insn = 0;\n+  \n+  if (! warn_notreached)\n+    return;\n+\n+  /* Scan forwards, looking at LINE_NUMBER notes, until\n+     we hit a LABEL or we run out of insns.  */\n+  \n+  for (insn = avoided_insn; insn != NULL; insn = NEXT_INSN (insn))\n+    {\n+       if (GET_CODE (insn) == CODE_LABEL)\n+\t break;\n+       else if (GET_CODE (insn) == NOTE\t\t/* A line number note? */ \n+\t\t&& NOTE_LINE_NUMBER (insn) >= 0)\n+\t{\n+\t  if (a_line_note == NULL)\n+\t    a_line_note = insn;\n+\t  else\n+\t    two_avoided_lines |= (NOTE_LINE_NUMBER (a_line_note)\n+\t\t\t\t  != NOTE_LINE_NUMBER (insn));\n+\t}\n+       else if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+\t contains_insn = 1;\n+    }\n+  if (two_avoided_lines && contains_insn)\n+    warning_with_file_and_line (NOTE_SOURCE_FILE (a_line_note),\n+\t\t\t\tNOTE_LINE_NUMBER (a_line_note),\n+\t\t\t\t\"will never be executed\");\n+}\n+\f\n /* Invert the condition of the jump JUMP, and make it jump\n    to label NLABEL instead of where it jumps now.  */\n "}, {"sha": "4f01212ff03ca2cd77c1dc8a50bf15baa67791de", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312f625598f2eed11718c43a649027bc760ef30a/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312f625598f2eed11718c43a649027bc760ef30a/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=312f625598f2eed11718c43a649027bc760ef30a", "patch": "@@ -1292,6 +1292,7 @@ extern int invert_exp\t\t\tPROTO ((rtx, rtx));\n extern int can_reverse_comparison_p\tPROTO ((rtx, rtx));\n extern void delete_for_peephole\t\tPROTO ((rtx, rtx));\n extern int condjump_in_parallel_p\tPROTO ((rtx));\n+extern void never_reached_warning\tPROTO ((rtx));\n \n /* Flags for jump_optimize() */\n #define JUMP_CROSS_JUMP\t\t1"}, {"sha": "5a727c65b94ea1f0d891a31097c549a52aaf5ddc", "filename": "gcc/toplev.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312f625598f2eed11718c43a649027bc760ef30a/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312f625598f2eed11718c43a649027bc760ef30a/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=312f625598f2eed11718c43a649027bc760ef30a", "patch": "@@ -1195,6 +1195,10 @@ int warnings_are_errors = 0;\n \n int warn_unused;\n \n+/* Nonzero to warn about code which is never reached.  */\n+\n+int warn_notreached;\n+\n /* Nonzero to warn about variables used before they are initialized.  */\n \n int warn_uninitialized;\n@@ -1253,6 +1257,8 @@ lang_independent_options W_options[] =\n    \"Warn about returning structures, unions or arrays\" },\n   {\"cast-align\", &warn_cast_align, 1,\n    \"Warn about pointer casts which increase alignment\" },\n+  {\"unreachable-code\", &warn_notreached, 1, \n+   \"Warn about code that will never be executed\" },\n   {\"uninitialized\", &warn_uninitialized, 1,\n    \"Warn about unitialized automatic variables\"},\n   {\"inline\", &warn_inline, 1,\n@@ -2944,7 +2950,8 @@ compile_file (name)\n   init_rtl ();\n   init_emit_once (debug_info_level == DINFO_LEVEL_NORMAL\n \t\t  || debug_info_level == DINFO_LEVEL_VERBOSE\n-\t\t  || flag_test_coverage);\n+\t\t  || flag_test_coverage\n+\t\t  || warn_notreached);\n   init_regs ();\n   init_decl_processing ();\n   init_optabs ();"}]}