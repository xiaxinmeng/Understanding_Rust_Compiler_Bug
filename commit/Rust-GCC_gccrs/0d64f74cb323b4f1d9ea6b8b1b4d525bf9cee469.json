{"sha": "0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ2NGY3NGNiMzIzYjRmMWQ5ZWE2YjhiMWI0ZDUyNWJmOWNlZTQ2OQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-11-17T23:58:35Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-11-17T23:58:35Z"}, "message": "Initial revision\n\nFrom-SVN: r8496", "tree": {"sha": "1c91fd30d64ff77ca2354dff679d291841e54db1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c91fd30d64ff77ca2354dff679d291841e54db1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/comments", "author": null, "committer": null, "parents": [{"sha": "75ec92347cb11e854c46a0c0df95acd3cefcf165", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ec92347cb11e854c46a0c0df95acd3cefcf165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75ec92347cb11e854c46a0c0df95acd3cefcf165"}], "stats": {"total": 3892, "additions": 3892, "deletions": 0}, "files": [{"sha": "bd54058e77e5aa42c264a2899e661d4e12fa89bd", "filename": "gcc/config/m68k/fpgnulib.c", "status": "added", "additions": 439, "deletions": 0, "changes": 439, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm68k%2Ffpgnulib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm68k%2Ffpgnulib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ffpgnulib.c?ref=0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469", "patch": "@@ -0,0 +1,439 @@\n+/* This is a stripped down version of floatlib.c.  It supplies only those\n+   functions which exist in libgcc, but for which there is not assembly\n+   language versions in m68k/lb1sf68.asm.\n+\n+   It also includes simplistic support for extended floats (by working in\n+   double precision).  You must compile this file again with -DEXTFLOAT\n+   to get this support.  */\n+\n+/*\n+** gnulib support for software floating point.\n+** Copyright (C) 1991 by Pipeline Associates, Inc.  All rights reserved.\n+** Permission is granted to do *anything* you want with this file,\n+** commercial or otherwise, provided this message remains intact.  So there!\n+** I would appreciate receiving any updates/patches/changes that anyone\n+** makes, and am willing to be the repository for said changes (am I\n+** making a big mistake?).\n+**\n+** Pat Wood\n+** Pipeline Associates, Inc.\n+** pipeline!phw@motown.com or\n+** sun!pipeline!phw or\n+** uunet!motown!pipeline!phw\n+**\n+** 05/01/91 -- V1.0 -- first release to gcc mailing lists\n+** 05/04/91 -- V1.1 -- added float and double prototypes and return values\n+**                  -- fixed problems with adding and subtracting zero\n+**                  -- fixed rounding in truncdfsf2\n+**                  -- fixed SWAP define and tested on 386\n+*/\n+\n+/*\n+** The following are routines that replace the gnulib soft floating point\n+** routines that are called automatically when -msoft-float is selected.\n+** The support single and double precision IEEE format, with provisions\n+** for byte-swapped machines (tested on 386).  Some of the double-precision\n+** routines work at full precision, but most of the hard ones simply punt\n+** and call the single precision routines, producing a loss of accuracy.\n+** long long support is not assumed or included.\n+** Overall accuracy is close to IEEE (actually 68882) for single-precision\n+** arithmetic.  I think there may still be a 1 in 1000 chance of a bit\n+** being rounded the wrong way during a multiply.  I'm not fussy enough to\n+** bother with it, but if anyone is, knock yourself out.\n+**\n+** Efficiency has only been addressed where it was obvious that something\n+** would make a big difference.  Anyone who wants to do this right for\n+** best speed should go in and rewrite in assembler.\n+**\n+** I have tested this only on a 68030 workstation and 386/ix integrated\n+** in with -msoft-float.\n+*/\n+\n+/* the following deal with IEEE single-precision numbers */\n+#define EXCESS\t\t126L\n+#define SIGNBIT\t\t0x80000000L\n+#define HIDDEN\t\t(1L << 23L)\n+#define SIGN(fp)\t((fp) & SIGNBIT)\n+#define EXP(fp)\t\t(((fp) >> 23L) & 0xFF)\n+#define MANT(fp)\t(((fp) & 0x7FFFFFL) | HIDDEN)\n+#define PACK(s,e,m)\t((s) | ((e) << 23L) | (m))\n+\n+/* the following deal with IEEE double-precision numbers */\n+#define EXCESSD\t\t1022\n+#define HIDDEND\t\t(1L << 20L)\n+#define EXPDBITS\t11\n+#define EXPDMASK\t0x7FF\n+#define EXPD(fp)\t(((fp.l.upper) >> 20L) & 0x7FFL)\n+#define SIGND(fp)\t((fp.l.upper) & SIGNBIT)\n+#define MANTD(fp)\t(((((fp.l.upper) & 0xFFFFF) | HIDDEND) << 10) | \\\n+\t\t\t\t(fp.l.lower >> 22))\n+#define MANTDMASK\t0xFFFFF /* mask of upper part */\n+\n+/* the following deal with IEEE extended-precision numbers */\n+#define EXCESSX\t\t16382\n+#define HIDDENX\t\t(1L << 31L)\n+#define EXPXBITS\t15\n+#define EXPXMASK\t0x7FFF\n+#define EXPX(fp)\t(((fp.l.upper) >> 16) & EXPXMASK)\n+#define SIGNX(fp)\t((fp.l.upper) & SIGNBIT)\n+#define MANTXMASK\t0x7FFFFFFF /* mask of upper part */\n+\n+union double_long \n+{\n+  double d;\n+  struct {\n+      long upper;\n+      unsigned long lower;\n+    } l;\n+};\n+\n+union float_long {\n+  float f;\n+  long l;\n+};\n+\n+union long_double_long\n+{\n+  long double ld;\n+  struct\n+    {\n+      long upper;\n+      unsigned long middle;\n+      unsigned long lower;\n+    } l;\n+};\n+\f\n+#ifndef EXTFLOAT\n+\n+/* convert int to double */\n+double\n+__floatsidf (int a1)\n+{\n+  long sign = 0, exp = 31 + EXCESSD;\n+  union double_long dl;\n+\n+  if (!a1)\n+    {\n+      dl.l.upper = dl.l.lower = 0;\n+      return dl.d;\n+    }\n+\n+  if (a1 < 0)\n+    {\n+      sign = SIGNBIT;\n+      a1 = -a1;\n+      if (a1 < 0)\n+\t{\n+\t  dl.l.upper = SIGNBIT | ((32 + EXCESSD) << 20L);\n+\t  dl.l.lower = 0;\n+\t  return dl.d;\n+        }\n+    }\n+\n+  while (a1 < 0x1000000)\n+    {\n+      a1 <<= 4;\n+      exp -= 4;\n+    }\n+\n+  while (a1 < 0x40000000)\n+    {\n+      a1 <<= 1;\n+      exp--;\n+    }\n+\n+  /* pack up and go home */\n+  dl.l.upper = sign;\n+  dl.l.upper |= exp << 20L;\n+  dl.l.upper |= (a1 >> 10L) & ~HIDDEND;\n+  dl.l.lower = a1 << 22L;\n+\n+  return dl.d;\n+}\n+\n+/* convert int to float */\n+float\n+__floatsisf (int l)\n+{\n+  double foo = __floatsidf (l);\n+  return foo;\n+}\n+\n+/* convert float to double */\n+double\n+__extendsfdf2 (float a1)\n+{\n+  register union float_long fl1;\n+  register union double_long dl;\n+  register long exp;\n+\n+  fl1.f = a1;\n+\n+  if (!fl1.l)\n+    {\n+      dl.l.upper = dl.l.lower = 0;\n+      return dl.d;\n+    }\n+\n+  dl.l.upper = SIGN (fl1.l);\n+  exp = EXP (fl1.l) - EXCESS + EXCESSD;\n+  dl.l.upper |= exp << 20;\n+  dl.l.upper |= (MANT (fl1.l) & ~HIDDEN) >> 3;\n+  dl.l.lower = MANT (fl1.l) << 29;\n+\t\n+  return dl.d;\n+}\n+\n+/* convert double to float */\n+float\n+__truncdfsf2 (double a1)\n+{\n+  register long exp;\n+  register long mant;\n+  register union float_long fl;\n+  register union double_long dl1;\n+\n+  dl1.d = a1;\n+\n+  if (!dl1.l.upper && !dl1.l.lower)\n+    return 0;\n+\n+  exp = EXPD (dl1) - EXCESSD + EXCESS;\n+\n+  /* shift double mantissa 6 bits so we can round */\n+  mant = MANTD (dl1) >> 6;\n+\n+  /* now round and shift down */\n+  mant += 1;\n+  mant >>= 1;\n+\n+  /* did the round overflow? */\n+  if (mant & 0xFF000000)\n+    {\n+      mant >>= 1;\n+      exp++;\n+    }\n+\n+  mant &= ~HIDDEN;\n+\n+  /* pack up and go home */\n+  fl.l = PACK (SIGND (dl1), exp, mant);\n+  return (fl.f);\n+}\n+\n+/* convert double to int */\n+int\n+__fixdfsi (double a1)\n+{\n+  register union double_long dl1;\n+  register long exp;\n+  register long l;\n+\n+  dl1.d = a1;\n+\n+  if (!dl1.l.upper && !dl1.l.lower) \n+    return 0;\n+\n+  exp = EXPD (dl1) - EXCESSD - 31;\n+  l = MANTD (dl1);\n+\n+  if (exp > 0) \n+    {\n+      /* Return largest integer.  */\n+      return SIGND (dl1) ? 0x80000000 : 0x7fffffff;\n+    }\n+\n+  /* shift down until exp = 0 or l = 0 */\n+  if (exp < 0 && exp > -32 && l) \n+    l >>= -exp;\n+\n+  return (SIGND (dl1) ? -l : l);\n+}\n+\n+/* convert float to int */\n+int\n+__fixsfsi (float a1)\n+{\n+  double foo = a1;\n+  return __fixdfsi (foo);\n+}\n+\f\n+#else /* EXTFLOAT */\n+\n+/* Primitive extended precision floating point support.\n+\n+   We assume all numbers are normalized, don't do any rounding, etc.  */\n+\n+/* Prototypes for the above in case we use them.  */\n+double __floatsidf (int);\n+float __floatsisf (int);\n+double __extendsfdf2 (float);\n+float __truncdfsf2 (double);\n+int __fixdfsi (double);\n+int __fixsfsi (float);\n+\n+/* convert double to long double */\n+long double\n+__extenddfxf2 (double d)\n+{\n+  register union double_long dl;\n+  register union long_double_long ldl;\n+  register long exp;\n+\n+  dl.d = d;\n+  /*printf (\"dfxf in: %g\\n\", d);*/\n+\n+  if (!dl.l.upper && !dl.l.lower)\n+    return 0;\n+\n+  ldl.l.upper = SIGND (dl);\n+  exp = EXPD (dl) - EXCESSD + EXCESSX;\n+  ldl.l.upper |= exp << 16;\n+  ldl.l.middle = HIDDENX;\n+  /* 31-20: # mantissa bits in ldl.l.middle - # mantissa bits in dl.l.upper */\n+  ldl.l.middle |= (dl.l.upper & MANTDMASK) << (31 - 20);\n+  /* 1+20: explicit-integer-bit + # mantissa bits in dl.l.upper */\n+  ldl.l.middle |= dl.l.lower >> (1 + 20);\n+  /* 32 - 21: # bits of dl.l.lower in ldl.l.middle */\n+  ldl.l.lower = dl.l.lower << (32 - 21);\n+\n+  /*printf (\"dfxf out: %s\\n\", dumpxf (ldl.ld));*/\n+  return ldl.ld;\n+}\n+\n+/* convert long double to double */\n+double\n+__truncxfdf2 (long double ld)\n+{\n+  register long exp;\n+  register union double_long dl;\n+  register union long_double_long ldl;\n+\n+  ldl.ld = ld;\n+  /*printf (\"xfdf in: %s\\n\", dumpxf (ld));*/\n+\n+  if (!ldl.l.upper && !ldl.l.middle && !ldl.l.lower)\n+    return 0;\n+\n+  exp = EXPX (ldl) - EXCESSX + EXCESSD;\n+  /* ??? quick and dirty: keep `exp' sane */\n+  if (exp >= EXPDMASK)\n+    exp = EXPDMASK - 1;\n+  dl.l.upper = SIGNX (ldl);\n+  dl.l.upper |= exp << (32 - (EXPDBITS + 1));\n+  /* +1-1: add one for sign bit, but take one off for explicit-integer-bit */\n+  dl.l.upper |= (ldl.l.middle & MANTXMASK) >> (EXPDBITS + 1 - 1);\n+  dl.l.lower = (ldl.l.middle & MANTXMASK) << (32 - (EXPDBITS + 1 - 1));\n+  dl.l.lower |= ldl.l.lower >> (EXPDBITS + 1 - 1);\n+\n+  /*printf (\"xfdf out: %g\\n\", dl.d);*/\n+  return dl.d;\n+}\n+\n+/* convert a float to a long double */\n+long double\n+__extendsfxf2 (float f)\n+{\n+  long double foo = __extenddfxf2 (__extendsfdf2 (f));\n+  return foo;\n+}\n+\n+/* convert a long double to a float */\n+float\n+__truncxfsf2 (long double ld)\n+{\n+  float foo = __truncdfsf2 (__truncxfdf2 (ld));\n+  return foo;\n+}\n+\n+/* convert an int to a long double */\n+long double\n+__floatsixf (int l)\n+{\n+  double foo = __floatsidf (l);\n+  return foo;\n+}\n+\n+/* convert a long double to an int */\n+int\n+__fixxfsi (long double ld)\n+{\n+  int foo = __fixdfsi ((double) ld);\n+  return foo;\n+}\n+\n+/* The remaining provide crude math support by working in double precision.  */\n+\n+long double\n+__addxf3 (long double x1, long double x2)\n+{\n+  return (double) x1 + (double) x2;\n+}\n+\n+long double\n+__subxf3 (long double x1, long double x2)\n+{\n+  return (double) x1 - (double) x2;\n+}\n+\n+long double\n+__mulxf3 (long double x1, long double x2)\n+{\n+  return (double) x1 * (double) x2;\n+}\n+\n+long double\n+__divxf3 (long double x1, long double x2)\n+{\n+  return (double) x1 / (double) x2;\n+}\n+\n+long double\n+__negxf2 (long double x1)\n+{\n+  return - (double) x1;\n+}\n+\n+long\n+__cmpxf2 (long double x1, long double x2)\n+{\n+  return __cmpdf2 ((double) x1, (double) x2);\n+}\n+\n+long\n+__eqxf2 (long double x1, long double x2)\n+{\n+  return __cmpdf2 ((double) x1, (double) x2);\n+}\n+\n+long\n+__nexf2 (long double x1, long double x2)\n+{\n+  return __cmpdf2 ((double) x1, (double) x2);\n+}\n+\n+long\n+__ltxf2 (long double x1, long double x2)\n+{\n+  return __cmpdf2 ((double) x1, (double) x2);\n+}\n+\n+long\n+__lexf2 (long double x1, long double x2)\n+{\n+  return __cmpdf2 ((double) x1, (double) x2);\n+}\n+\n+long\n+__gtxf2 (long double x1, long double x2)\n+{\n+  return __cmpdf2 ((double) x1, (double) x2);\n+}\n+\n+long\n+__gexf2 (long double x1, long double x2)\n+{\n+  return __cmpdf2 ((double) x1, (double) x2);\n+}\n+\n+#endif /* EXTFLOAT */"}, {"sha": "6e9124d165e10e6ae702438fd003da220231631f", "filename": "gcc/config/m68k/lb1sf68.asm", "status": "added", "additions": 3191, "deletions": 0, "changes": 3191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm?ref=0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469"}, {"sha": "8e3b66181f293dce3619ec438b175abca5001568", "filename": "gcc/config/m68k/m68k-aout.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm68k%2Fm68k-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm68k%2Fm68k-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-aout.h?ref=0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469", "patch": "@@ -0,0 +1,30 @@\n+/* Definitions of target machine for GNU compiler.  \"naked\" 68020,\n+   a.out object files and debugging, version.\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* This comment is here to see if it will keep Sun's cpp from dying.  */\n+\n+#include \"m68k/m68k-none.h\"\n+#include \"m68k/m68kemb.h\"\n+#include \"aoutos.h\"\n+\n+#define DBX_DEBUGGING_INFO\n+#undef SDB_DEBUGGING_INFO\n+\n+/* end of m68k-aout.h */"}, {"sha": "5e584681ce05138653733d1a790729615ef1e040", "filename": "gcc/config/m68k/m68k-none.h", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm68k%2Fm68k-none.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm68k%2Fm68k-none.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-none.h?ref=0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469", "patch": "@@ -0,0 +1,94 @@\n+/* Definitions of target machine for GNU compiler.  \"naked\" 68020.\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"m68k/m68k.h\"\n+\n+/* See m68k.h.  7 means 68020 with 68881.  */\n+\n+#ifndef TARGET_DEFAULT\n+#define TARGET_DEFAULT 7\n+#endif\n+\n+/* Names to predefine in the preprocessor for this target machine.\n+   Always define mc68000.  Other definitions depend on switches given\n+   to the compiler:\n+\n+   -m68000: define nothing else\n+   default, -m68020, -mc68020: define mc68020\n+   -m68030: define mc68030\n+   -m68040: define mc68040\n+   -m68020-40: define mc68020 mc68030 mc68040\n+   -m68302: define mc68302\n+   -m68332: define mc68332\n+   */\n+\n+#ifndef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dmc68000\"\n+#endif\n+\n+#ifndef CPP_SPEC\n+\n+#if TARGET_DEFAULT & 02\n+\n+/* -m68881 is the default */\n+#define CPP_SPEC \\\n+\"%{!mc68000:%{!m68000:%{!m68332:%{!msoft-float:%{mfpa:-D__HAVE_FPA__ }%{!mfpa:-D__HAVE_68881__ }}}}}\\\n+%{!ansi:%{m68010:-Dmc68010 }%{m68020:-Dmc68020 }%{mc68020:-Dmc68020 }%{m68030:-Dmc68030 }%{m68040:-Dmc68040 }%{m68020-40:-Dmc68020 -Dmc68030 -Dmc68040 }%{m68302:-Dmc68302 }%{m68332:-Dmc68332 }%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-Dmc68020 }}}}}}}}}}}\\\n+%{m68010:-D__mc68010__ -D__mc68010 }%{m68020:-D__mc68020__ -D__mc68020 }%{mc68020:-D__mc68020__ -D__mc68020 }%{m68030:-D__mc68030__ -D__mc68030 }%{m68040:-D__mc68040__ -D__mc68040 }%{m68020-40:-D__mc68020__ -D__mc68030__ -D__mc68040__ -D__mc68020 -D__mc68030 -D__mc68040 }%{m68302:-D__mc68302__ -D__mc68302 }%{m68332:-D__mc68332__ -D__mc68332 }%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-D__mc68020__ -D__mc68020 }}}}}}}}}}\"\n+\n+#else\n+#if TARGET_DEFAULT & 0100\n+\n+/* -mfpa is the default */\n+#define CPP_SPEC \\\n+\"%{!msoft-float:%{m68881:-D__HAVE_68881__ }%{!m68881:-D__HAVE_FPA__ }}\\\n+%{!ansi:%{m68010:-Dmc68010 }%{m68020:-Dmc68020 }%{mc68020:-Dmc68020 }%{m68030:-Dmc68030 }%{m68040:-Dmc68040 }%{m68020-40:-Dmc68020 -Dmc68030 -Dmc68040 }%{m68302:-Dmc68302 }%{m68332:-Dmc68332 }%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-Dmc68020 }}}}}}}}}}}\\\n+%{m68010:-D__mc68010__ -D__mc68010 }%{m68020:-D__mc68020__ -D__mc68020 }%{mc68020:-D__mc68020__ -D__mc68020 }%{m68030:-D__mc68030__ -D__mc68030 }%{m68040:-D__mc68040__ -D__mc68040 }%{m68020-40:-D__mc68020__ -D__mc68030__ -D__mc68040__ -D__mc68020 -D__mc68030 -D__mc68040 }%{m68302:-D__mc68302__ -D__mc68302 }%{m68332:-D__mc68332__ -D__mc68332 }%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-D__mc68020__ -D__mc68020 }}}}}}}}}}\"\n+\n+#else\n+\n+/* -msoft-float is the default */\n+#define CPP_SPEC \\\n+\"%{m68881:-D__HAVE_68881__ }%{mfpa:-D__HAVE_FPA__ }\\\n+%{!ansi:%{m68010:-Dmc68010 }%{m68020:-Dmc68020 }%{mc68020:-Dmc68020 }%{m68030:-Dmc68030 }%{m68040:-Dmc68040 }%{m68020-40:-Dmc68020 -Dmc68030 -Dmc68040 }%{m68302:-Dmc68302 }%{m68332:-Dmc68332 }%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-Dmc68020 }}}}}}}}}}}\\\n+%{m68010:-D__mc68010__ -D__mc68010 }%{m68020:-D__mc68020__ -D__mc68020 }%{mc68020:-D__mc68020__ -D__mc68020 }%{m68030:-D__mc68030__ -D__mc68030 }%{m68040:-D__mc68040__ -D__mc68040 }%{m68020-40:-D__mc68020__ -D__mc68030__ -D__mc68040__ -D__mc68020 -D__mc68030 -D__mc68040 }%{m68302:-D__mc68302__ -D__mc68302 }%{m68332:-D__mc68332__ -D__mc68332 }%{!mc68000:%{!m68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-D__mc68020__ -D__mc68020 }}}}}}}}}}\"\n+\n+#endif\n+#endif\n+\n+#endif\n+\n+/* Pass flags to gas indicating which type of processor we have.  */\n+\n+#ifndef ASM_SPEC\n+\n+#define ASM_SPEC \\\n+\"%{m68851}%{mno-68851}%{m68881}%{mno-68881}%{msoft-float:-mno-68881 }\\\n+%{m68000}%{mc68000}%{m68010}%{m68020}%{mc68020}%{m68030}%{m68040}%{m68020-40:-mc68040}%{m68302}%{m68332}%{!m68000:%{!mc68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-mc68020}}}}}}}}}}\"\n+\n+#endif\n+\n+#ifndef CC1_SPEC\n+\n+#define CC1_SPEC \\\n+ \"%{m68000:%{!m68881:-msoft-float }}%{m68302:-m68000}%{m68332:-m68020 -mnobitfield %{!m68881:-msoft-float}}%{!m68000:%{!mc68000:%{!m68010:%{!mc68020:%{!m68020:%{!m68030:%{!m68040:%{!m68020-40:%{!m68302:%{!m68332:-m68020}}}}}}}}}}\"\n+\n+#endif\n+\n+/* end of m68k-none.h */"}, {"sha": "7b7521ab2ee34d70ef89fd37473eb31d2641d300", "filename": "gcc/config/m68k/m68kemb.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm68k%2Fm68kemb.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm68k%2Fm68kemb.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kemb.h?ref=0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469", "patch": "@@ -0,0 +1,39 @@\n+/* Definitions of target machine for GNU compiler.  \"embedded\" 68XXX.\n+   This is meant to be included after m68k.h.\n+   Copyright (C) 1994 Free Software Foundation, Inc.  */\n+\n+#define PTRDIFF_TYPE \"long int\"\n+#define SIZE_TYPE \"long unsigned int\"\n+\n+/* In order for bitfields to work on a 68000, or with -mnobitfield, we must\n+   define either PCC_BITFIELD_TYPE_MATTERS or STRUCTURE_SIZE_BOUNDARY.\n+   Defining STRUCTURE_SIZE_BOUNDARY results in structure packing problems,\n+   so we define PCC_BITFIELD_TYPE_MATTERS.  */\n+#define PCC_BITFIELD_TYPE_MATTERS 1\n+\n+/* Undef PCC_STATIC_STRUCT_RETURN so that we get a re-entrant calling\n+   convention.  */\n+#undef PCC_STATIC_STRUCT_RETURN\n+\n+/* Don't default to pcc-struct-return, so that we can return small structures\n+   and unions in registers, which is slightly more efficient.  */\n+#define DEFAULT_PCC_STRUCT_RETURN 0\n+\n+/* Return floating point values in a fp register.  This make fp code a\n+   little bit faster.  It also makes -msoft-float code incompatible with\n+   -m68881 code, so people have to be careful not to mix the two.  */\n+#undef FUNCTION_VALUE\n+#define FUNCTION_VALUE(VALTYPE,FUNC) LIBCALL_VALUE (TYPE_MODE (VALTYPE))\n+\n+#undef LIBCALL_VALUE\n+#define LIBCALL_VALUE(MODE)                                                \\\n+ gen_rtx (REG, (MODE),                                                     \\\n+          ((TARGET_68881                                                   \\\n+            && ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode)) \\\n+           ? 16 : 0))\n+\n+#undef FUNCTION_VALUE_REGNO_P\n+#define FUNCTION_VALUE_REGNO_P(N) ((N) == 0 || (TARGET_68881 && (N) == 16))\n+\n+#undef NEEDS_UNTYPED_CALL\n+#define NEEDS_UNTYPED_CALL 1"}, {"sha": "732ad4d1632a02a1403982444793b9eb335b95dc", "filename": "gcc/config/m68k/t-m68kbare", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm68k%2Ft-m68kbare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm68k%2Ft-m68kbare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ft-m68kbare?ref=0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469", "patch": "@@ -0,0 +1,23 @@\n+CROSS_LIBGCC1 = libgcc1-asm.a\n+LIB1ASMSRC = m68k/lb1sf68.asm\n+LIB1ASMFUNCS = _mulsi3 _udivsi3 _umulsi3 _divsi3 _umodsi3 _modsi3 \\\n+   _double _float _floatex \\\n+   _eqdf2 _nedf2 _gtdf2 _gedf2 _ltdf2 _ledf2 \\\n+   _eqsf2 _nesf2 _gtsf2 _gesf2 _ltsf2 _lesf2\n+\n+# These are really part of libgcc1, but this will cause them to be\n+# built correctly, so...\n+LIB2FUNCS_EXTRA = fpgnulib.c xfgnulib.c\n+\n+fpgnulib.c: $(srcdir)/config/m68k/fpgnulib.c\n+\tcp $(srcdir)/config/m68k/fpgnulib.c fpgnulib.c\n+xfgnulib.c: $(srcdir)/config/m68k/fpgnulib.c\n+\techo '#define EXTFLOAT' > xfgnulib.c\n+\tcat $(srcdir)/config/m68k/fpgnulib.c >> xfgnulib.c\n+\n+MULTILIB_OPTIONS=m68000/m68020 m68881/msoft-float\n+MULTILIB_DIRNAMES=\n+MULTILIB_MATCHES=m68020=m68040 m68000=mc68000 m68020=mc68020\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib"}, {"sha": "e3cc87bca63b65f5f913aeaf21dbae404a7a9100", "filename": "gcc/config/m88k/m88k-aout.h", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm88k%2Fm88k-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm88k%2Fm88k-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k-aout.h?ref=0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469", "patch": "@@ -0,0 +1,31 @@\n+/* Definitions for \"naked\" Motorola 88k using a.out object format files\n+   and stabs debugging info.\n+\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#undef SDB_DEBUGGING_INFO\n+#define DBX_DEBUGGING_INFO\n+\n+#include \"m88k/m88k.h\"\n+#include \"aoutos.h\"\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dm88000 -Dm88k\"\n+\n+/* end of m88k-aout.h */"}, {"sha": "b86582a22b7a9963ec3bc1252da8d49aec63e08f", "filename": "gcc/config/m88k/m88k-coff.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm88k%2Fm88k-coff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm88k%2Fm88k-coff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k-coff.h?ref=0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469", "patch": "@@ -0,0 +1,33 @@\n+/* Definitions for \"naked\" Motorola 88k using coff object format files\n+   and coff debugging info.\n+\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"m88k/m88k.h\"\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dm88000 -Dm88k\"\n+\n+#undef DBX_DEBUGGING_INFO\n+#define SDB_DEBUGGING_INFO\n+\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE SDB_DEBUG\n+\n+/* end of m88k-coff.h */"}, {"sha": "a5e71ddf3fccb900d3c7258a546fc3107517bc1d", "filename": "gcc/config/m88k/t-bug", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm88k%2Ft-bug", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469/gcc%2Fconfig%2Fm88k%2Ft-bug", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Ft-bug?ref=0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469", "patch": "@@ -0,0 +1,12 @@\n+# Specify how to create the *.asm files\n+\n+MOVE_ASM = moveHI15x.asm moveQI16x.asm moveSI46x.asm moveSI64n.asm \\\n+\t   moveHI48x.asm moveSI45x.asm moveSI47x.asm moveSI96x.asm \\\n+\t   moveDI96x.asm\n+\n+$(MOVE_ASM): $(srcdir)/config/m88k/m88k-move.sh\n+\t$(srcdir)/config/m88k/m88k-move.sh\n+\n+LIB2FUNCS_EXTRA = $(MOVE_ASM)\n+LIBGCC1 = libgcc1.null\n+CROSS_LIBGCC1 = libgcc1.null"}]}