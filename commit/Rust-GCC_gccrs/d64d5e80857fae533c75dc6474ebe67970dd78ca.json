{"sha": "d64d5e80857fae533c75dc6474ebe67970dd78ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY0ZDVlODA4NTdmYWU1MzNjNzVkYzY0NzRlYmU2Nzk3MGRkNzhjYQ==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@debian.org", "date": "2004-08-20T16:53:49Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2004-08-20T16:53:49Z"}, "message": "regrename.c (kill_value_one_regno): Renamed from kill_value_regno.\n\n\t* regrename.c (kill_value_one_regno): Renamed from kill_value_regno.\n\t(kill_value_regno): New function, derived from kill_value.\n\t(kill_value): Update.\n\t(copyprop_hardreg_forward_1): Update call to kill_value_regno.\n\nFrom-SVN: r86332", "tree": {"sha": "41df9f07c283c3818b38dd40a4cc059bc62bd5c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41df9f07c283c3818b38dd40a4cc059bc62bd5c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d64d5e80857fae533c75dc6474ebe67970dd78ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d64d5e80857fae533c75dc6474ebe67970dd78ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d64d5e80857fae533c75dc6474ebe67970dd78ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d64d5e80857fae533c75dc6474ebe67970dd78ca/comments", "author": null, "committer": null, "parents": [{"sha": "af75a7ea828d60f103de52f79e2d3f78e315d519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af75a7ea828d60f103de52f79e2d3f78e315d519", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af75a7ea828d60f103de52f79e2d3f78e315d519"}], "stats": {"total": 74, "additions": 49, "deletions": 25}, "files": [{"sha": "cd2748451c78a053d835416c398f1bc068986fd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64d5e80857fae533c75dc6474ebe67970dd78ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64d5e80857fae533c75dc6474ebe67970dd78ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d64d5e80857fae533c75dc6474ebe67970dd78ca", "patch": "@@ -1,3 +1,10 @@\n+2004-08-20  Daniel Jacobowitz  <dan@debian.org>\n+\n+\t* regrename.c (kill_value_one_regno): Renamed from kill_value_regno.\n+\t(kill_value_regno): New function, derived from kill_value.\n+\t(kill_value): Update.\n+\t(copyprop_hardreg_forward_1): Update call to kill_value_regno.\n+\n 2004-08-20  Daniel Berlin  <dberlin@dberlin.org>\n \t\n \tFix PR tree-optimization/17111"}, {"sha": "9350b197d234e4d14ae87d02051ab862972ffebd", "filename": "gcc/regrename.c", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d64d5e80857fae533c75dc6474ebe67970dd78ca/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d64d5e80857fae533c75dc6474ebe67970dd78ca/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=d64d5e80857fae533c75dc6474ebe67970dd78ca", "patch": "@@ -1010,7 +1010,8 @@ struct value_data\n   unsigned int max_value_regs;\n };\n \n-static void kill_value_regno (unsigned, struct value_data *);\n+static void kill_value_one_regno (unsigned, struct value_data *);\n+static void kill_value_regno (unsigned, unsigned, struct value_data *);\n static void kill_value (rtx, struct value_data *);\n static void set_value_regno (unsigned, enum machine_mode, struct value_data *);\n static void init_value_data (struct value_data *);\n@@ -1035,11 +1036,13 @@ extern void debug_value_data (struct value_data *);\n static void validate_value_data (struct value_data *);\n #endif\n \n-/* Kill register REGNO.  This involves removing it from any value lists,\n-   and resetting the value mode to VOIDmode.  */\n+/* Kill register REGNO.  This involves removing it from any value\n+   lists, and resetting the value mode to VOIDmode.  This is only a\n+   helper function; it does not handle any hard registers overlapping\n+   with REGNO.  */\n \n static void\n-kill_value_regno (unsigned int regno, struct value_data *vd)\n+kill_value_one_regno (unsigned int regno, struct value_data *vd)\n {\n   unsigned int i, next;\n \n@@ -1066,7 +1069,39 @@ kill_value_regno (unsigned int regno, struct value_data *vd)\n #endif\n }\n \n-/* Kill X.  This is a convenience function for kill_value_regno\n+/* Kill the value in register REGNO for NREGS, and any other registers\n+   whose values overlap.  */\n+\n+static void\n+kill_value_regno (regno, nregs, vd)\n+     unsigned int regno;\n+     unsigned int nregs;\n+     struct value_data *vd;\n+{\n+  unsigned int j;\n+\n+  /* Kill the value we're told to kill.  */\n+  for (j = 0; j < nregs; ++j)\n+    kill_value_one_regno (regno + j, vd);\n+\n+  /* Kill everything that overlapped what we're told to kill.  */\n+  if (regno < vd->max_value_regs)\n+    j = 0;\n+  else\n+    j = regno - vd->max_value_regs;\n+  for (; j < regno; ++j)\n+    {\n+      unsigned int i, n;\n+      if (vd->e[j].mode == VOIDmode)\n+\tcontinue;\n+      n = hard_regno_nregs[j][vd->e[j].mode];\n+      if (j + n > regno)\n+\tfor (i = 0; i < n; ++i)\n+\t  kill_value_one_regno (j + i, vd);\n+    }\n+}\n+\n+/* Kill X.  This is a convenience function wrapping kill_value_regno\n    so that we mind the mode the register is in.  */\n \n static void\n@@ -1084,26 +1119,8 @@ kill_value (rtx x, struct value_data *vd)\n     {\n       unsigned int regno = REGNO (x);\n       unsigned int n = hard_regno_nregs[regno][GET_MODE (x)];\n-      unsigned int i, j;\n-\n-      /* Kill the value we're told to kill.  */\n-      for (i = 0; i < n; ++i)\n-\tkill_value_regno (regno + i, vd);\n \n-      /* Kill everything that overlapped what we're told to kill.  */\n-      if (regno < vd->max_value_regs)\n-\tj = 0;\n-      else\n-\tj = regno - vd->max_value_regs;\n-      for (; j < regno; ++j)\n-\t{\n-\t  if (vd->e[j].mode == VOIDmode)\n-\t    continue;\n-\t  n = hard_regno_nregs[j][vd->e[j].mode];\n-\t  if (j + n > regno)\n-\t    for (i = 0; i < n; ++i)\n-\t      kill_value_regno (j + i, vd);\n-\t}\n+      kill_value_regno (regno, n, vd);\n     }\n }\n \n@@ -1703,7 +1720,7 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n       if (CALL_P (insn))\n \tfor (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n \t  if (TEST_HARD_REG_BIT (regs_invalidated_by_call, i))\n-\t    kill_value_regno (i, vd);\n+\t    kill_value_regno (i, 1, vd);\n \n       /* Notice stores.  */\n       note_stores (PATTERN (insn), kill_set_value, vd);"}]}