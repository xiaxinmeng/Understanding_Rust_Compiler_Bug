{"sha": "2a1211e51ba34fb4549c9f718c025474f0ff5ed6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmExMjExZTUxYmEzNGZiNDU0OWM5ZjcxOGMwMjU0NzRmMGZmNWVkNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:13:03Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:13:03Z"}, "message": "ia64-protos.h (ia64_initialize_trampoline): Remove.\n\n        * config/ia64/ia64-protos.h (ia64_initialize_trampoline): Remove.\n        * config/ia64/ia64.c (TARGET_TRAMPOLINE_INIT): New.\n        (ia64_trampoline_init): Rename from ia64_initialize_trampoline;\n        make static; adjust for hook parameters.\n        * config/ia64/ia64.h (INITIALIZE_TRAMPOLINE): Remove.\n\nFrom-SVN: r151994", "tree": {"sha": "45335fac6cc69e15db7c1adcaaeb6c4cfb1cc4b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45335fac6cc69e15db7c1adcaaeb6c4cfb1cc4b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a1211e51ba34fb4549c9f718c025474f0ff5ed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1211e51ba34fb4549c9f718c025474f0ff5ed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a1211e51ba34fb4549c9f718c025474f0ff5ed6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1211e51ba34fb4549c9f718c025474f0ff5ed6/comments", "author": null, "committer": null, "parents": [{"sha": "9f6ef043a88259c0973738e090e9c64fac961dcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6ef043a88259c0973738e090e9c64fac961dcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f6ef043a88259c0973738e090e9c64fac961dcf"}], "stats": {"total": 90, "additions": 48, "deletions": 42}, "files": [{"sha": "95bbe79ae66544dcc827a10bb26a79eb1ca7a266", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1211e51ba34fb4549c9f718c025474f0ff5ed6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1211e51ba34fb4549c9f718c025474f0ff5ed6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a1211e51ba34fb4549c9f718c025474f0ff5ed6", "patch": "@@ -108,6 +108,12 @@\n \t* config/h8300/h8300.h (INITIALIZE_TRAMPOLINE): Move code\n \tto h8300_trampoline_init and adjust for hook parameters.\n \n+\t* config/ia64/ia64-protos.h (ia64_initialize_trampoline): Remove.\n+\t* config/ia64/ia64.c (TARGET_TRAMPOLINE_INIT): New.\n+\t(ia64_trampoline_init): Rename from ia64_initialize_trampoline;\n+\tmake static; adjust for hook parameters.\n+\t* config/ia64/ia64.h (INITIALIZE_TRAMPOLINE): Remove.\n+\n 2009-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (bdesc_2arg): Fix CODE_FOR_vector_gt* codes"}, {"sha": "3c6a153498e9a316d3aedc220dba8094fdc86819", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1211e51ba34fb4549c9f718c025474f0ff5ed6/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1211e51ba34fb4549c9f718c025474f0ff5ed6/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=2a1211e51ba34fb4549c9f718c025474f0ff5ed6", "patch": "@@ -54,7 +54,6 @@ extern int ia64_direct_return (void);\n extern bool ia64_expand_load_address (rtx, rtx);\n extern int ia64_hard_regno_rename_ok (int, int);\n \n-extern void ia64_initialize_trampoline (rtx, rtx, rtx);\n extern void ia64_print_operand_address (FILE *, rtx);\n extern void ia64_print_operand (FILE *, rtx, int);\n extern enum reg_class ia64_preferred_reload_class (rtx, enum reg_class);"}, {"sha": "75c8f0ee6c4638e355a5b603d0a0e654e1047cf9", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1211e51ba34fb4549c9f718c025474f0ff5ed6/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1211e51ba34fb4549c9f718c025474f0ff5ed6/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=2a1211e51ba34fb4549c9f718c025474f0ff5ed6", "patch": "@@ -302,6 +302,7 @@ static enum machine_mode ia64_promote_function_mode (const_tree,\n \t\t\t\t\t\t     int *,\n \t\t\t\t\t\t     const_tree,\n \t\t\t\t\t\t     int);\n+static void ia64_trampoline_init (rtx, tree, rtx);\n \f\n /* Table of valid machine attributes.  */\n static const struct attribute_spec ia64_attribute_table[] =\n@@ -532,6 +533,9 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE ia64_can_eliminate\n \n+#undef TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT ia64_trampoline_init\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n typedef enum\n@@ -3945,10 +3949,35 @@ ia64_dbx_register_number (int regno)\n     return regno;\n }\n \n-void\n-ia64_initialize_trampoline (rtx addr, rtx fnaddr, rtx static_chain)\n+/* Implement TARGET_TRAMPOLINE_INIT.\n+\n+   The trampoline should set the static chain pointer to value placed\n+   into the trampoline and should branch to the specified routine.\n+   To make the normal indirect-subroutine calling convention work,\n+   the trampoline must look like a function descriptor; the first\n+   word being the target address and the second being the target's\n+   global pointer.\n+\n+   We abuse the concept of a global pointer by arranging for it\n+   to point to the data we need to load.  The complete trampoline\n+   has the following form:\n+\n+\t\t+-------------------+ \\\n+\tTRAMP:\t| __ia64_trampoline | |\n+\t\t+-------------------+  > fake function descriptor\n+\t\t| TRAMP+16          | |\n+\t\t+-------------------+ /\n+\t\t| target descriptor |\n+\t\t+-------------------+\n+\t\t| static link\t    |\n+\t\t+-------------------+\n+*/\n+\n+static void\n+ia64_trampoline_init (rtx m_tramp, tree fndecl, rtx static_chain)\n {\n-  rtx addr_reg, tramp, eight = GEN_INT (8);\n+  rtx fnaddr = XEXP (DECL_RTL (fndecl), 0);\n+  rtx addr, addr_reg, tramp, eight = GEN_INT (8);\n \n   /* The Intel assembler requires that the global __ia64_trampoline symbol\n      be declared explicitly */\n@@ -3965,13 +3994,13 @@ ia64_initialize_trampoline (rtx addr, rtx fnaddr, rtx static_chain)\n     }\n \n   /* Make sure addresses are Pmode even if we are in ILP32 mode. */\n-  addr = convert_memory_address (Pmode, addr);\n+  addr = convert_memory_address (Pmode, XEXP (m_tramp, 0));\n   fnaddr = convert_memory_address (Pmode, fnaddr);\n   static_chain = convert_memory_address (Pmode, static_chain);\n \n   /* Load up our iterator.  */\n-  addr_reg = gen_reg_rtx (Pmode);\n-  emit_move_insn (addr_reg, addr);\n+  addr_reg = copy_to_reg (addr);\n+  m_tramp = adjust_automodify_address (m_tramp, Pmode, addr_reg, 0);\n \n   /* The first two words are the fake descriptor:\n      __ia64_trampoline, ADDR+16.  */\n@@ -3989,19 +4018,21 @@ ia64_initialize_trampoline (rtx addr, rtx fnaddr, rtx static_chain)\n       emit_move_insn (reg, gen_rtx_MEM (Pmode, reg));\n       tramp = reg;\n    }\n-  emit_move_insn (gen_rtx_MEM (Pmode, addr_reg), tramp);\n+  emit_move_insn (m_tramp, tramp);\n   emit_insn (gen_adddi3 (addr_reg, addr_reg, eight));\n+  m_tramp = adjust_automodify_address (m_tramp, VOIDmode, NULL, 8);\n \n-  emit_move_insn (gen_rtx_MEM (Pmode, addr_reg),\n-\t\t  copy_to_reg (plus_constant (addr, 16)));\n+  emit_move_insn (m_tramp, force_reg (Pmode, plus_constant (addr, 16)));\n   emit_insn (gen_adddi3 (addr_reg, addr_reg, eight));\n+  m_tramp = adjust_automodify_address (m_tramp, VOIDmode, NULL, 8);\n \n   /* The third word is the target descriptor.  */\n-  emit_move_insn (gen_rtx_MEM (Pmode, addr_reg), fnaddr);\n+  emit_move_insn (m_tramp, force_reg (Pmode, fnaddr));\n   emit_insn (gen_adddi3 (addr_reg, addr_reg, eight));\n+  m_tramp = adjust_automodify_address (m_tramp, VOIDmode, NULL, 8);\n \n   /* The fourth word is the static chain.  */\n-  emit_move_insn (gen_rtx_MEM (Pmode, addr_reg), static_chain);\n+  emit_move_insn (m_tramp, static_chain);\n }\n \f\n /* Do any needed setup for a variadic function.  CUM has not been updated"}, {"sha": "53bbda2b1ede8a9a965cf41d533c2f4408bafa2f", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1211e51ba34fb4549c9f718c025474f0ff5ed6/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1211e51ba34fb4549c9f718c025474f0ff5ed6/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=2a1211e51ba34fb4549c9f718c025474f0ff5ed6", "patch": "@@ -1247,43 +1247,13 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define STACK_SAVEAREA_MODE(LEVEL) \\\n   ((LEVEL) == SAVE_NONLOCAL ? OImode : Pmode)\n \n-/* Output assembler code for a block containing the constant parts of\n-   a trampoline, leaving space for the variable parts.\n-\n-   The trampoline should set the static chain pointer to value placed\n-   into the trampoline and should branch to the specified routine.\n-   To make the normal indirect-subroutine calling convention work,\n-   the trampoline must look like a function descriptor; the first\n-   word being the target address and the second being the target's\n-   global pointer.\n-\n-   We abuse the concept of a global pointer by arranging for it\n-   to point to the data we need to load.  The complete trampoline\n-   has the following form:\n-\n-\t\t+-------------------+ \\\n-\tTRAMP:\t| __ia64_trampoline | |\n-\t\t+-------------------+  > fake function descriptor\n-\t\t| TRAMP+16          | |\n-\t\t+-------------------+ /\n-\t\t| target descriptor |\n-\t\t+-------------------+\n-\t\t| static link\t    |\n-\t\t+-------------------+\n-*/\n-\n /* A C expression for the size in bytes of the trampoline, as an integer.  */\n \n #define TRAMPOLINE_SIZE\t\t32\n \n /* Alignment required for trampolines, in bits.  */\n \n #define TRAMPOLINE_ALIGNMENT\t64\n-\n-/* A C statement to initialize the variable parts of a trampoline.  */\n-\n-#define INITIALIZE_TRAMPOLINE(ADDR, FNADDR, STATIC_CHAIN) \\\n-  ia64_initialize_trampoline((ADDR), (FNADDR), (STATIC_CHAIN))\n \f\n /* Addressing Modes */\n "}]}