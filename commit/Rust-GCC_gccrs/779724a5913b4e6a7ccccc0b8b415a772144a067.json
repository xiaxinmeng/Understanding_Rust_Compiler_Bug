{"sha": "779724a5913b4e6a7ccccc0b8b415a772144a067", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc5NzI0YTU5MTNiNGU2YTdjY2NjYzBiOGI0MTVhNzcyMTQ0YTA2Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-05T16:46:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-05T16:46:48Z"}, "message": "Add a gimple_move_vops helper function\n\nI needed to add another instance of this idiom, so thought it'd\nbe worth having a helper function.\n\n2019-08-05  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* gimple.h (gimple_move_vops): Declare.\n\t* gimple.c (gimple_move_vops): New function\n\t* gimple-fold.c (replace_call_with_call_and_fold)\n\t(gimple_fold_builtin_memory_op, gimple_fold_builtin_memset)\n\t(gimple_fold_builtin_stpcpy, fold_builtin_atomic_compare_exchange)\n\t(gimple_fold_call): Use it.\n\t* ipa-param-manipulation.c (ipa_modify_call_arguments): Likewise.\n\t* tree-call-cdce.c (use_internal_fn): Likewise.\n\t* tree-if-conv.c (predicate_load_or_store): Likewise.\n\t* tree-ssa-ccp.c (optimize_atomic_bit_test_and): Likewise.\n\t* tree-ssa-math-opts.c (pass_cse_reciprocals::execute): Likewise.\n\t* tree-ssa-propagate.c (finish_update_gimple_call): Likewise.\n\t(update_call_from_tree): Likewise.\n\t* tree-vect-stmts.c (vectorizable_load): Likewise.\n\t* tree-vectorizer.c (adjust_simduid_builtins): Likewise.\n\nFrom-SVN: r274117", "tree": {"sha": "1409cb8368cb4219160ec5c673f1c7bd93e5c214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1409cb8368cb4219160ec5c673f1c7bd93e5c214"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/779724a5913b4e6a7ccccc0b8b415a772144a067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/779724a5913b4e6a7ccccc0b8b415a772144a067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/779724a5913b4e6a7ccccc0b8b415a772144a067", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/779724a5913b4e6a7ccccc0b8b415a772144a067/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09eff11aa4a1df86a5f6c5ac8e035e8de0039dba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09eff11aa4a1df86a5f6c5ac8e035e8de0039dba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09eff11aa4a1df86a5f6c5ac8e035e8de0039dba"}], "stats": {"total": 118, "additions": 48, "deletions": 70}, "files": [{"sha": "3d3a2fad9040a826241e437b525b0ec6351c7910", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=779724a5913b4e6a7ccccc0b8b415a772144a067", "patch": "@@ -1,3 +1,21 @@\n+2019-08-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gimple.h (gimple_move_vops): Declare.\n+\t* gimple.c (gimple_move_vops): New function\n+\t* gimple-fold.c (replace_call_with_call_and_fold)\n+\t(gimple_fold_builtin_memory_op, gimple_fold_builtin_memset)\n+\t(gimple_fold_builtin_stpcpy, fold_builtin_atomic_compare_exchange)\n+\t(gimple_fold_call): Use it.\n+\t* ipa-param-manipulation.c (ipa_modify_call_arguments): Likewise.\n+\t* tree-call-cdce.c (use_internal_fn): Likewise.\n+\t* tree-if-conv.c (predicate_load_or_store): Likewise.\n+\t* tree-ssa-ccp.c (optimize_atomic_bit_test_and): Likewise.\n+\t* tree-ssa-math-opts.c (pass_cse_reciprocals::execute): Likewise.\n+\t* tree-ssa-propagate.c (finish_update_gimple_call): Likewise.\n+\t(update_call_from_tree): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_load): Likewise.\n+\t* tree-vectorizer.c (adjust_simduid_builtins): Likewise.\n+\n 2019-08-05  Martin Liska  <mliska@suse.cz>\n \n \tPR c++/91334"}, {"sha": "c3128e75d8bae103fb169562e048cf19716221c9", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=779724a5913b4e6a7ccccc0b8b415a772144a067", "patch": "@@ -641,14 +641,7 @@ replace_call_with_call_and_fold (gimple_stmt_iterator *gsi, gimple *repl)\n   gimple *stmt = gsi_stmt (*gsi);\n   gimple_call_set_lhs (repl, gimple_call_lhs (stmt));\n   gimple_set_location (repl, gimple_location (stmt));\n-  if (gimple_vdef (stmt)\n-      && TREE_CODE (gimple_vdef (stmt)) == SSA_NAME)\n-    {\n-      gimple_set_vdef (repl, gimple_vdef (stmt));\n-      SSA_NAME_DEF_STMT (gimple_vdef (repl)) = repl;\n-    }\n-  if (gimple_vuse (stmt))\n-    gimple_set_vuse (repl, gimple_vuse (stmt));\n+  gimple_move_vops (repl, stmt);\n   gsi_replace (gsi, repl, false);\n   fold_stmt (gsi);\n }\n@@ -832,11 +825,7 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \t\t\t= gimple_build_assign (fold_build2 (MEM_REF, desttype,\n \t\t\t\t\t\t\t    dest, off0),\n \t\t\t\t\t       srcmem);\n-\t\t      gimple_set_vuse (new_stmt, gimple_vuse (stmt));\n-\t\t      gimple_set_vdef (new_stmt, gimple_vdef (stmt));\n-\t\t      if (gimple_vdef (new_stmt)\n-\t\t\t  && TREE_CODE (gimple_vdef (new_stmt)) == SSA_NAME)\n-\t\t\tSSA_NAME_DEF_STMT (gimple_vdef (new_stmt)) = new_stmt;\n+\t\t      gimple_move_vops (new_stmt, stmt);\n \t\t      if (!lhs)\n \t\t\t{\n \t\t\t  gsi_replace (gsi, new_stmt, false);\n@@ -1097,11 +1086,7 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n \t= gimple_build_assign (fold_build2 (MEM_REF, desttype, dest, off0),\n \t\t\t       fold_build2 (MEM_REF, srctype, src, off0));\n set_vop_and_replace:\n-      gimple_set_vuse (new_stmt, gimple_vuse (stmt));\n-      gimple_set_vdef (new_stmt, gimple_vdef (stmt));\n-      if (gimple_vdef (new_stmt)\n-\t  && TREE_CODE (gimple_vdef (new_stmt)) == SSA_NAME)\n-\tSSA_NAME_DEF_STMT (gimple_vdef (new_stmt)) = new_stmt;\n+      gimple_move_vops (new_stmt, stmt);\n       if (!lhs)\n \t{\n \t  gsi_replace (gsi, new_stmt, false);\n@@ -1273,13 +1258,7 @@ gimple_fold_builtin_memset (gimple_stmt_iterator *gsi, tree c, tree len)\n \n   var = fold_build2 (MEM_REF, etype, dest, build_int_cst (ptr_type_node, 0));\n   gimple *store = gimple_build_assign (var, build_int_cst_type (etype, cval));\n-  gimple_set_vuse (store, gimple_vuse (stmt));\n-  tree vdef = gimple_vdef (stmt);\n-  if (vdef && TREE_CODE (vdef) == SSA_NAME)\n-    {\n-      gimple_set_vdef (store, gimple_vdef (stmt));\n-      SSA_NAME_DEF_STMT (gimple_vdef (stmt)) = store;\n-    }\n+  gimple_move_vops (store, stmt);\n   gsi_insert_before (gsi, store, GSI_SAME_STMT);\n   if (gimple_call_lhs (stmt))\n     {\n@@ -2982,11 +2961,7 @@ gimple_fold_builtin_stpcpy (gimple_stmt_iterator *gsi)\n \t\t\ttem, build_int_cst (size_type_node, 1));\n   gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n   gcall *repl = gimple_build_call (fn, 3, dest, src, lenp1);\n-  gimple_set_vuse (repl, gimple_vuse (stmt));\n-  gimple_set_vdef (repl, gimple_vdef (stmt));\n-  if (gimple_vdef (repl)\n-      && TREE_CODE (gimple_vdef (repl)) == SSA_NAME)\n-    SSA_NAME_DEF_STMT (gimple_vdef (repl)) = repl;\n+  gimple_move_vops (repl, stmt);\n   gsi_insert_before (gsi, repl, GSI_SAME_STMT);\n   /* Replace the result with dest + len.  */\n   stmts = NULL;\n@@ -4134,9 +4109,7 @@ fold_builtin_atomic_compare_exchange (gimple_stmt_iterator *gsi)\n \t\t\t\t  gimple_call_arg (stmt, 5));\n   tree lhs = make_ssa_name (ctype);\n   gimple_call_set_lhs (g, lhs);\n-  gimple_set_vdef (g, gimple_vdef (stmt));\n-  gimple_set_vuse (g, gimple_vuse (stmt));\n-  SSA_NAME_DEF_STMT (gimple_vdef (g)) = g;\n+  gimple_move_vops (g, stmt);\n   tree oldlhs = gimple_call_lhs (stmt);\n   if (stmt_can_throw_internal (cfun, stmt))\n     {\n@@ -4315,8 +4288,7 @@ gimple_fold_call (gimple_stmt_iterator *gsi, bool inplace)\n \t\t      SSA_NAME_DEF_STMT (lhs) = gimple_build_nop ();\n \t\t      set_ssa_default_def (cfun, var, lhs);\n \t\t    }\n-\t\t  gimple_set_vuse (new_stmt, gimple_vuse (stmt));\n-\t\t  gimple_set_vdef (new_stmt, gimple_vdef (stmt));\n+\t\t  gimple_move_vops (new_stmt, stmt);\n \t\t  gsi_replace (gsi, new_stmt, false);\n \t\t  return true;\n \t\t}"}, {"sha": "633ef512a199644ab1789525f5e3763b58ca6a83", "filename": "gcc/gimple.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=779724a5913b4e6a7ccccc0b8b415a772144a067", "patch": "@@ -2057,6 +2057,18 @@ gimple_copy (gimple *stmt)\n   return copy;\n }\n \n+/* Move OLD_STMT's vuse and vdef operands to NEW_STMT, on the assumption\n+   that OLD_STMT is about to be removed.  */\n+\n+void\n+gimple_move_vops (gimple *new_stmt, gimple *old_stmt)\n+{\n+  tree vdef = gimple_vdef (old_stmt);\n+  gimple_set_vuse (new_stmt, gimple_vuse (old_stmt));\n+  gimple_set_vdef (new_stmt, vdef);\n+  if (vdef && TREE_CODE (vdef) == SSA_NAME)\n+    SSA_NAME_DEF_STMT (vdef) = new_stmt;\n+}\n \n /* Return true if statement S has side-effects.  We consider a\n    statement to have side effects if:"}, {"sha": "55f5d0d33d979d790d508bc14ac5d54063b06f94", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=779724a5913b4e6a7ccccc0b8b415a772144a067", "patch": "@@ -1532,6 +1532,7 @@ void gimple_assign_set_rhs_with_ops (gimple_stmt_iterator *, enum tree_code,\n tree gimple_get_lhs (const gimple *);\n void gimple_set_lhs (gimple *, tree);\n gimple *gimple_copy (gimple *);\n+void gimple_move_vops (gimple *, gimple *);\n bool gimple_has_side_effects (const gimple *);\n bool gimple_could_trap_p_1 (gimple *, bool, bool);\n bool gimple_could_trap_p (gimple *);"}, {"sha": "11908d31a566945f621949ea53f9cd448db63be2", "filename": "gcc/ipa-param-manipulation.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Fipa-param-manipulation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Fipa-param-manipulation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-param-manipulation.c?ref=779724a5913b4e6a7ccccc0b8b415a772144a067", "patch": "@@ -452,14 +452,7 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gcall *stmt,\n   gimple_call_set_chain (new_stmt, gimple_call_chain (stmt));\n   gimple_call_copy_flags (new_stmt, stmt);\n   if (gimple_in_ssa_p (cfun))\n-    {\n-      gimple_set_vuse (new_stmt, gimple_vuse (stmt));\n-      if (gimple_vdef (stmt))\n-\t{\n-\t  gimple_set_vdef (new_stmt, gimple_vdef (stmt));\n-\t  SSA_NAME_DEF_STMT (gimple_vdef (new_stmt)) = new_stmt;\n-\t}\n-    }\n+    gimple_move_vops (new_stmt, stmt);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {"}, {"sha": "57eed67b0f6a66561a3ad143d994a5c9f4a458ca", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=779724a5913b4e6a7ccccc0b8b415a772144a067", "patch": "@@ -1118,9 +1118,7 @@ use_internal_fn (gcall *call)\n \t{\n \t  gimple_stmt_iterator gsi = gsi_for_stmt (call);\n \t  gcall *new_call = gimple_build_call_internal (IFN_SET_EDOM, 0);\n-\t  gimple_set_vuse (new_call, gimple_vuse (call));\n-\t  gimple_set_vdef (new_call, gimple_vdef (call));\n-\t  SSA_NAME_DEF_STMT (gimple_vdef (new_call)) = new_call;\n+\t  gimple_move_vops (new_call, call);\n \t  gimple_set_location (new_call, gimple_location (call));\n \t  gsi_replace (&gsi, new_call, false);\n \t  call = new_call;"}, {"sha": "da67e39e03af23506d873b592e7afb43df96ae60", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=779724a5913b4e6a7ccccc0b8b415a772144a067", "patch": "@@ -2141,9 +2141,7 @@ predicate_load_or_store (gimple_stmt_iterator *gsi, gassign *stmt, tree mask)\n       new_stmt\n \t= gimple_build_call_internal (IFN_MASK_STORE, 4, addr, ptr,\n \t\t\t\t      mask, rhs);\n-      gimple_set_vuse (new_stmt, gimple_vuse (stmt));\n-      gimple_set_vdef (new_stmt, gimple_vdef (stmt));\n-      SSA_NAME_DEF_STMT (gimple_vdef (new_stmt)) = new_stmt;\n+      gimple_move_vops (new_stmt, stmt);\n     }\n   gimple_call_set_nothrow (new_stmt, true);\n   return new_stmt;"}, {"sha": "f25e6c8c9a99aa13f68a3fd32b0f99dfa5bdc4d1", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=779724a5913b4e6a7ccccc0b8b415a772144a067", "patch": "@@ -2962,12 +2962,10 @@ optimize_atomic_bit_test_and (gimple_stmt_iterator *gsip,\n \t\t\t\t    bit, flag);\n   gimple_call_set_lhs (g, new_lhs);\n   gimple_set_location (g, gimple_location (call));\n-  gimple_set_vuse (g, gimple_vuse (call));\n-  gimple_set_vdef (g, gimple_vdef (call));\n+  gimple_move_vops (g, call);\n   bool throws = stmt_can_throw_internal (cfun, call);\n   gimple_call_set_nothrow (as_a <gcall *> (g),\n \t\t\t   gimple_call_nothrow_p (as_a <gcall *> (call)));\n-  SSA_NAME_DEF_STMT (gimple_vdef (call)) = g;\n   gimple_stmt_iterator gsi = *gsip;\n   gsi_insert_after (&gsi, g, GSI_NEW_STMT);\n   edge e = NULL;"}, {"sha": "5fea155b71ba0d18fd28ebd4f365764b6aa5f5e8", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=779724a5913b4e6a7ccccc0b8b415a772144a067", "patch": "@@ -1040,14 +1040,9 @@ pass_cse_reciprocals::execute (function *fun)\n \t\t      else\n \t\t\tstmt2 = gimple_build_call_internal_vec (ifn, args);\n \t\t      gimple_call_set_lhs (stmt2, arg1);\n-\t\t      if (gimple_vdef (call))\n-\t\t\t{\n-\t\t\t  gimple_set_vdef (stmt2, gimple_vdef (call));\n-\t\t\t  SSA_NAME_DEF_STMT (gimple_vdef (stmt2)) = stmt2;\n-\t\t\t}\n+\t\t      gimple_move_vops (stmt2, call);\n \t\t      gimple_call_set_nothrow (stmt2,\n \t\t\t\t\t       gimple_call_nothrow_p (call));\n-\t\t      gimple_set_vuse (stmt2, gimple_vuse (call));\n \t\t      gimple_stmt_iterator gsi2 = gsi_for_stmt (call);\n \t\t      gsi_replace (&gsi2, stmt2, true);\n \t\t    }"}, {"sha": "0862f83e9a19f1318996e58e05e9981be713e5aa", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=779724a5913b4e6a7ccccc0b8b415a772144a067", "patch": "@@ -625,8 +625,7 @@ finish_update_gimple_call (gimple_stmt_iterator *si_p, gimple *new_stmt,\n {\n   gimple_call_set_lhs (new_stmt, gimple_call_lhs (stmt));\n   move_ssa_defining_stmt_for_defs (new_stmt, stmt);\n-  gimple_set_vuse (new_stmt, gimple_vuse (stmt));\n-  gimple_set_vdef (new_stmt, gimple_vdef (stmt));\n+  gimple_move_vops (new_stmt, stmt);\n   gimple_set_location (new_stmt, gimple_location (stmt));\n   if (gimple_block (new_stmt) == NULL_TREE)\n     gimple_set_block (new_stmt, gimple_block (stmt));\n@@ -706,8 +705,7 @@ update_call_from_tree (gimple_stmt_iterator *si_p, tree expr)\n           STRIP_USELESS_TYPE_CONVERSION (expr);\n           new_stmt = gimple_build_assign (lhs, expr);\n           move_ssa_defining_stmt_for_defs (new_stmt, stmt);\n-\t  gimple_set_vuse (new_stmt, gimple_vuse (stmt));\n-\t  gimple_set_vdef (new_stmt, gimple_vdef (stmt));\n+\t  gimple_move_vops (new_stmt, stmt);\n         }\n       else if (!TREE_SIDE_EFFECTS (expr))\n         {\n@@ -732,8 +730,7 @@ update_call_from_tree (gimple_stmt_iterator *si_p, tree expr)\n \t  else\n \t    lhs = create_tmp_var (TREE_TYPE (expr));\n           new_stmt = gimple_build_assign (lhs, expr);\n-\t  gimple_set_vuse (new_stmt, gimple_vuse (stmt));\n-\t  gimple_set_vdef (new_stmt, gimple_vdef (stmt));\n+\t  gimple_move_vops (new_stmt, stmt);\n           move_ssa_defining_stmt_for_defs (new_stmt, stmt);\n         }\n       gimple_set_location (new_stmt, gimple_location (stmt));"}, {"sha": "1e2dfe5d22dc6715ba0ca633f6ef98ca4abbc797", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=779724a5913b4e6a7ccccc0b8b415a772144a067", "patch": "@@ -9510,8 +9510,7 @@ vectorizable_load (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t    new_stmt = gimple_build_assign (vec_dest, data_ref);\n \t\t    new_temp = make_ssa_name (vec_dest, new_stmt);\n \t\t    gimple_assign_set_lhs (new_stmt, new_temp);\n-\t\t    gimple_set_vdef (new_stmt, gimple_vdef (stmt_info->stmt));\n-\t\t    gimple_set_vuse (new_stmt, gimple_vuse (stmt_info->stmt));\n+\t\t    gimple_move_vops (new_stmt, stmt_info->stmt);\n \t\t    vect_finish_stmt_generation (stmt_info, new_stmt, gsi);\n \t\t    msq = new_temp;\n "}, {"sha": "dc1815247441768eeca60cc2a147e3050f1b1e0d", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/779724a5913b4e6a7ccccc0b8b415a772144a067/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=779724a5913b4e6a7ccccc0b8b415a772144a067", "patch": "@@ -289,10 +289,7 @@ adjust_simduid_builtins (hash_table<simduid_to_vf> *htab)\n \t\t       : BUILT_IN_GOMP_ORDERED_END);\n \t\t  gimple *g\n \t\t    = gimple_build_call (builtin_decl_explicit (bcode), 0);\n-\t\t  tree vdef = gimple_vdef (stmt);\n-\t\t  gimple_set_vdef (g, vdef);\n-\t\t  SSA_NAME_DEF_STMT (vdef) = g;\n-\t\t  gimple_set_vuse (g, gimple_vuse (stmt));\n+\t\t  gimple_move_vops (g, stmt);\n \t\t  gsi_replace (&i, g, true);\n \t\t  continue;\n \t\t}"}]}