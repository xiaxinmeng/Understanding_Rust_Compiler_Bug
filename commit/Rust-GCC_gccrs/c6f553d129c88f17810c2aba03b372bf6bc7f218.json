{"sha": "c6f553d129c88f17810c2aba03b372bf6bc7f218", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZmNTUzZDEyOWM4OGYxNzgxMGMyYWJhMDNiMzcyYmY2YmM3ZjIxOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-07-05T10:40:47Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-07-05T10:40:47Z"}, "message": "Repair damage on weak-impared targets caused by my previous patch.\n\n\t* cp-tree.h (import_export_tinfo): Add parameter.\n\t* decl2.c (import_export_tinfo): Add parameter, post adjust\n\tDECL_COMDAT.\n\t* rtti.c (emit_tinfo_decl): DECL_COMDAT is (nearly) always setup by\n\timport_export_tinfo.\n\nFrom-SVN: r55257", "tree": {"sha": "dfa8376cd1e966f5df13720d8cb28f93025f434c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfa8376cd1e966f5df13720d8cb28f93025f434c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6f553d129c88f17810c2aba03b372bf6bc7f218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6f553d129c88f17810c2aba03b372bf6bc7f218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6f553d129c88f17810c2aba03b372bf6bc7f218", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6f553d129c88f17810c2aba03b372bf6bc7f218/comments", "author": null, "committer": null, "parents": [{"sha": "3aa0aa29662c812dc5dc22d0c4879bb1df91c2b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aa0aa29662c812dc5dc22d0c4879bb1df91c2b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aa0aa29662c812dc5dc22d0c4879bb1df91c2b8"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "a29f9baac8143c8351609ed6b6123a865ba639e8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f553d129c88f17810c2aba03b372bf6bc7f218/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f553d129c88f17810c2aba03b372bf6bc7f218/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c6f553d129c88f17810c2aba03b372bf6bc7f218", "patch": "@@ -1,3 +1,12 @@\n+2002-07-05  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tRepair damage on weak-impared targets caused by my previous patch.\n+\t* cp-tree.h (import_export_tinfo): Add parameter.\n+\t* decl2.c (import_export_tinfo): Add parameter, post adjust\n+\tDECL_COMDAT.\n+\t* rtti.c (emit_tinfo_decl): DECL_COMDAT is (nearly) always setup by\n+\timport_export_tinfo.\n+\n 2002-07-03  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/6944"}, {"sha": "6ce769db74c1053e6f3e22b87276e8de8bd37a79", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f553d129c88f17810c2aba03b372bf6bc7f218/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f553d129c88f17810c2aba03b372bf6bc7f218/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c6f553d129c88f17810c2aba03b372bf6bc7f218", "patch": "@@ -3935,7 +3935,7 @@ extern tree coerce_delete_type\t\t\tPARAMS ((tree));\n extern void comdat_linkage\t\t\tPARAMS ((tree));\n extern void import_export_vtable\t\tPARAMS ((tree, tree, int));\n extern void import_export_decl\t\t\tPARAMS ((tree));\n-extern void import_export_tinfo\t\t\tPARAMS ((tree, tree));\n+extern void import_export_tinfo\t\t\tPARAMS ((tree, tree, int));\n extern tree build_cleanup\t\t\tPARAMS ((tree));\n extern void finish_file\t\t\t\tPARAMS ((void));\n extern tree reparse_absdcl_as_expr\t\tPARAMS ((tree, tree));"}, {"sha": "7099fc25d9567989ba5b35b32d78953688bfbf3b", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f553d129c88f17810c2aba03b372bf6bc7f218/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f553d129c88f17810c2aba03b372bf6bc7f218/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=c6f553d129c88f17810c2aba03b372bf6bc7f218", "patch": "@@ -2516,12 +2516,14 @@ import_export_decl (decl)\n }\n \n /* Here, we only decide whether or not the tinfo node should be\n-   emitted with the vtable.  */\n+   emitted with the vtable.  IS_IN_LIBRARY is non-zero iff the\n+   typeinfo for TYPE should be in the runtime library.  */\n \n void\n-import_export_tinfo (decl, type)\n+import_export_tinfo (decl, type, is_in_library)\n      tree decl;\n      tree type;\n+     int is_in_library;\n {\n   if (DECL_INTERFACE_KNOWN (decl))\n     return;\n@@ -2544,6 +2546,13 @@ import_export_tinfo (decl, type)\n       DECL_NOT_REALLY_EXTERN (decl) = 1;\n       DECL_COMDAT (decl) = 1;\n     }\n+\n+  /* Now override some cases. */\n+  if (flag_weak)\n+    DECL_COMDAT (decl) = 1;\n+  else if (is_in_library)\n+    DECL_COMDAT (decl) = 0;\n+  \n   DECL_INTERFACE_KNOWN (decl) = 1;\n }\n "}, {"sha": "676725027cdb957e6ba62d84f43b148c1e0280b0", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6f553d129c88f17810c2aba03b372bf6bc7f218/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6f553d129c88f17810c2aba03b372bf6bc7f218/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=c6f553d129c88f17810c2aba03b372bf6bc7f218", "patch": "@@ -1439,26 +1439,28 @@ emit_tinfo_decl (decl_ptr, data)\n   tree decl = *decl_ptr;\n   tree type = TREE_TYPE (DECL_NAME (decl));\n   int non_public;\n+  int in_library = typeinfo_in_lib_p (type);\n   tree var_desc, var_init;\n   \n-  import_export_tinfo (decl, type);\n+  import_export_tinfo (decl, type, in_library);\n   if (DECL_REALLY_EXTERN (decl) || !DECL_NEEDED_P (decl))\n     return 0;\n \n-  if (!doing_runtime && typeinfo_in_lib_p (type))\n+  if (!doing_runtime && in_library)\n     return 0;\n \n   non_public = 0;\n   var_desc = get_pseudo_ti_desc (type);\n   var_init = get_pseudo_ti_init (type, var_desc, &non_public);\n+  \n   DECL_EXTERNAL (decl) = 0;\n   TREE_PUBLIC (decl) = !non_public;\n-  if (!non_public\n-      && (flag_weak || (DECL_COMDAT (decl) && !typeinfo_in_lib_p (type))))\n-    comdat_linkage (decl);\n-  \n+  if (non_public)\n+    DECL_COMDAT (decl) = 0;\n+\n   DECL_INITIAL (decl) = var_init;\n   cp_finish_decl (decl, var_init, NULL_TREE, 0);\n+  /* cp_finish_decl will have dealt with linkage. */\n   \n   /* Say we've dealt with it.  */\n   TREE_TYPE (DECL_NAME (decl)) = NULL_TREE;"}]}