{"sha": "129c14bd4c1b3a043bc2bb2c80b1c2030ea72713", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI5YzE0YmQ0YzFiM2EwNDNiYzJiYjJjODBiMWMyMDMwZWE3MjcxMw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-11-18T17:14:40Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-11-18T17:14:40Z"}, "message": "re PR fortran/31608 (wrong types in character array/scalar binop)\n\n2007-11-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31608\n\t* trans-array.c (gfc_conv_expr_descriptor): Remove exception\n\tfor indirect references in the call to gfc_trans_scalar_assign.\n\t* trans-expr.c (gfc_conv_string_parameter): Instead of asserting\n\tthat the expression is not an indirect reference, cast it to a\n\tpointer type of the length given by se->string_length.\n\n2007-11-18  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/31608\n\t* gfortran.dg/char_cast_2.f90: New test based on achar_4.f90.\n\nFrom-SVN: r130271", "tree": {"sha": "742fad5e58bb710c4972a11291e8b6bfb579fe21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/742fad5e58bb710c4972a11291e8b6bfb579fe21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/129c14bd4c1b3a043bc2bb2c80b1c2030ea72713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129c14bd4c1b3a043bc2bb2c80b1c2030ea72713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/129c14bd4c1b3a043bc2bb2c80b1c2030ea72713", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129c14bd4c1b3a043bc2bb2c80b1c2030ea72713/comments", "author": null, "committer": null, "parents": [{"sha": "b5bf3e4d2eb38960cc2c6ac3b4b6dda7fe27fd43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5bf3e4d2eb38960cc2c6ac3b4b6dda7fe27fd43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5bf3e4d2eb38960cc2c6ac3b4b6dda7fe27fd43"}], "stats": {"total": 64, "additions": 53, "deletions": 11}, "files": [{"sha": "0155ed1e5b59a895fc09e24e6bc311f825c239f6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129c14bd4c1b3a043bc2bb2c80b1c2030ea72713/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129c14bd4c1b3a043bc2bb2c80b1c2030ea72713/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=129c14bd4c1b3a043bc2bb2c80b1c2030ea72713", "patch": "@@ -1,3 +1,12 @@\n+2007-11-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31608\n+\t* trans-array.c (gfc_conv_expr_descriptor): Remove exception\n+\tfor indirect references in the call to gfc_trans_scalar_assign.\n+\t* trans-expr.c (gfc_conv_string_parameter): Instead of asserting\n+\tthat the expression is not an indirect reference, cast it to a\n+\tpointer type of the length given by se->string_length.\n+\n 2007-11-18  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34137"}, {"sha": "315279a3cdc43dc3df81e56de1f43af954df2275", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129c14bd4c1b3a043bc2bb2c80b1c2030ea72713/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129c14bd4c1b3a043bc2bb2c80b1c2030ea72713/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=129c14bd4c1b3a043bc2bb2c80b1c2030ea72713", "patch": "@@ -4734,15 +4734,10 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n       gfc_add_block_to_block (&block, &rse.pre);\n       gfc_add_block_to_block (&block, &lse.pre);\n \n-      if (TREE_CODE (rse.expr) != INDIRECT_REF)\n-\t{\n-\t  lse.string_length = rse.string_length;\n-\t  tmp = gfc_trans_scalar_assign (&lse, &rse, expr->ts, true,\n-\t\t\t\t  expr->expr_type == EXPR_VARIABLE);\n-\t  gfc_add_expr_to_block (&block, tmp);\n-\t}\n-      else\n-\tgfc_add_modify_expr (&block, lse.expr, rse.expr);\n+      lse.string_length = rse.string_length;\n+      tmp = gfc_trans_scalar_assign (&lse, &rse, expr->ts, true,\n+\t\t\t\t     expr->expr_type == EXPR_VARIABLE);\n+      gfc_add_expr_to_block (&block, tmp);\n \n       /* Finish the copying loops.  */\n       gfc_trans_scalarizing_loops (&loop, &block);"}, {"sha": "ec5a73a92adf8211a217f92af3a0f5aa6aeddc7d", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129c14bd4c1b3a043bc2bb2c80b1c2030ea72713/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129c14bd4c1b3a043bc2bb2c80b1c2030ea72713/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=129c14bd4c1b3a043bc2bb2c80b1c2030ea72713", "patch": "@@ -3597,8 +3597,15 @@ gfc_conv_string_parameter (gfc_se * se)\n   type = TREE_TYPE (se->expr);\n   if (TYPE_STRING_FLAG (type))\n     {\n-      gcc_assert (TREE_CODE (se->expr) != INDIRECT_REF);\n-      se->expr = gfc_build_addr_expr (pchar_type_node, se->expr);\n+      if (TREE_CODE (se->expr) != INDIRECT_REF)\n+        se->expr = gfc_build_addr_expr (pchar_type_node, se->expr);\n+      else\n+\t{\n+\t  type = gfc_get_character_type_len (gfc_default_character_kind,\n+\t\t\t\t\t     se->string_length);\n+\t  type = build_pointer_type (type);\n+\t  se->expr = gfc_build_addr_expr (type, se->expr);\n+\t}\n     }\n \n   gcc_assert (POINTER_TYPE_P (TREE_TYPE (se->expr)));"}, {"sha": "6d3bd10edf090598ef1b5a4c7b93849e201b9b32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129c14bd4c1b3a043bc2bb2c80b1c2030ea72713/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129c14bd4c1b3a043bc2bb2c80b1c2030ea72713/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=129c14bd4c1b3a043bc2bb2c80b1c2030ea72713", "patch": "@@ -1,3 +1,8 @@\n+2007-11-18  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/31608\n+\t* gfortran.dg/char_cast_2.f90: New test based on achar_4.f90.\n+\n 2007-11-18  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34137"}, {"sha": "39566dac5e659c048a3819fab270ed4ee7fd3c86", "filename": "gcc/testsuite/gfortran.dg/char_cast_2.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129c14bd4c1b3a043bc2bb2c80b1c2030ea72713/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_cast_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129c14bd4c1b3a043bc2bb2c80b1c2030ea72713/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_cast_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_cast_2.f90?ref=129c14bd4c1b3a043bc2bb2c80b1c2030ea72713", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+! This is the same as achar_4.f90 but checks that the result of the 'merge'\n+! reference is correctly cast.\n+!\n+! The code comes from http://www.star.le.ac.uk/~cgp/fortran.html (by Clive Page)\n+! Reported by Thomas Koenig <tkoenig@gcc.gnu.org>\n+!\n+  if (any (Up (\"AbCdEfGhIjKlM\") .ne. (/\"ABCDEFGHIJKLM\"/))) call abort ()\n+contains\n+  Character (len=20) Function Up (string)\n+    Character(len=*) string\n+    Up =                                                                &\n+     transfer(merge(achar(iachar(transfer(string,\"x\",len(string)))-     &\n+     (ichar('a')-ichar('A')) ),                                         &\n+     transfer(string,\"x\",len(string)) ,                                 &\n+     transfer(string,\"x\",len(string)) >= \"a\" .and.                      &\n+     transfer(string,\"x\",len(string)) <= \"z\"), repeat(\"x\", len(string)))\n+    return\n+  end function Up\n+end\n+! The sign that all is well is that [S.5][1] appears five times.\n+! Platform dependent variations are [S$5][1], [__S_5][1], [S___5][1]\n+! so we count the occurrences of 5][1].\n+! { dg-final { scan-tree-dump-times \"5\\\\\\]\\\\\\[1\\\\\\]\" 5 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}