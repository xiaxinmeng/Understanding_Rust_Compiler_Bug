{"sha": "c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdlMzBjZjJkMWRlNmJkZjI2N2NmYzA4MjhhYmVjZWNkN2FjOWIwMw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2007-12-15T21:31:18Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2007-12-15T21:31:18Z"}, "message": "peep2-xsrand.c, [...]: Drop redundant target-specifier.\n\n\t* gcc.target/cris/peep2-xsrand.c, gcc.target/cris/asmreg-1.c,\n\tgcc.target/cris/peep2-andu1.c, gcc.target/cris/peep2-xsrand2.c,\n\tgcc.target/cris/20011127-1.c: Drop redundant target-specifier.\n\t* gcc.target/cris/peep2-andu2.c: Ditto.  Make dg-do assemble and\n\tadd -save-temps.\n\t* gcc.target/cris/torture/cris-torture.exp,\n\tgcc.target/cris/cris.exp: Run for crisv32-*-* too.\n\t* gcc.target/cris/builtin_ctz_v3.c,\n\tgcc.target/cris/builtin_ctz_v8.c,\n\tgcc.target/cris/builtin_clz_v0.c,\n\tgcc.target/cris/builtin_clz_v3.c,\n\tgcc.target/cris/builtin_bswap_v3.c,\n\tgcc.target/cris/builtin_bswap_v8.c, gcc.dg/sibcall-4.c,\n\tgcc.dg/pr19340.c, gcc.dg/20020919-1.c, gcc.dg/pr31866.c,\n\tgcc.dg/torture/cris-asm-mof-1.c, gcc.dg/torture/cris-volatile-1.c,\n\tgcc.dg/weak/typeof-2.c, gcc.dg/tree-ssa/loop-1.c,\n\tgcc.dg/tree-ssa/20040204-1.c, gcc.dg/sibcall-3.c,\n\tlib/target-supports.exp: Adjust for crisv32-*-*.\n\nFrom-SVN: r130962", "tree": {"sha": "63aaa3210ceb2654f62b104865fabfbe4c5463f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63aaa3210ceb2654f62b104865fabfbe4c5463f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2e51f7753a42eeaf663d006bdd312bf75d225db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2e51f7753a42eeaf663d006bdd312bf75d225db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2e51f7753a42eeaf663d006bdd312bf75d225db"}], "stats": {"total": 87, "additions": 55, "deletions": 32}, "files": [{"sha": "3ceb531d389ca9910d6feb8fefe6489387f1ec47", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -1,3 +1,24 @@\n+2007-12-15  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.target/cris/peep2-xsrand.c, gcc.target/cris/asmreg-1.c,\n+\tgcc.target/cris/peep2-andu1.c, gcc.target/cris/peep2-xsrand2.c,\n+\tgcc.target/cris/20011127-1.c: Drop redundant target-specifier.\n+\t* gcc.target/cris/peep2-andu2.c: Ditto.  Make dg-do assemble and\n+\tadd -save-temps.\n+\t* gcc.target/cris/torture/cris-torture.exp,\n+\tgcc.target/cris/cris.exp: Run for crisv32-*-* too.\n+\t* gcc.target/cris/builtin_ctz_v3.c,\n+\tgcc.target/cris/builtin_ctz_v8.c,\n+\tgcc.target/cris/builtin_clz_v0.c,\n+\tgcc.target/cris/builtin_clz_v3.c,\n+\tgcc.target/cris/builtin_bswap_v3.c,\n+\tgcc.target/cris/builtin_bswap_v8.c, gcc.dg/sibcall-4.c,\n+\tgcc.dg/pr19340.c, gcc.dg/20020919-1.c, gcc.dg/pr31866.c,\n+\tgcc.dg/torture/cris-asm-mof-1.c, gcc.dg/torture/cris-volatile-1.c,\n+\tgcc.dg/weak/typeof-2.c, gcc.dg/tree-ssa/loop-1.c,\n+\tgcc.dg/tree-ssa/20040204-1.c, gcc.dg/sibcall-3.c,\n+\tlib/target-supports.exp: Adjust for crisv32-*-*.\n+\n 2007-12-15  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* gcc.dg/debug/const-3.c: New."}, {"sha": "de58b0c91f5ae3bc2a891bfaa115d7322f73a3f4", "filename": "gcc/testsuite/gcc.dg/20020919-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2F20020919-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2F20020919-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020919-1.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -8,7 +8,7 @@\n    You must be this tall ---> fit two long longs in asm-declared registers\n    to enter this amusement.  */\n \n-/* { dg-do compile { target alpha-*-* cris-*-* i?86-*-* mmix-*-* powerpc*-*-* rs6000-*-* x86_64-*-* } } */\n+/* { dg-do compile { target alpha-*-* cris-*-* crisv32-*-* i?86-*-* mmix-*-* powerpc*-*-* rs6000-*-* x86_64-*-* } } */\n /* { dg-options \"-O2\" } */\n \n /* Constructed examples; input/output (same register), output, input, and"}, {"sha": "a5ff410ff4828ac752a9d30454558bc1bf761f54", "filename": "gcc/testsuite/gcc.dg/pr19340.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19340.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19340.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr19340.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O1 -fschedule-insns2 -fsched2-use-traces\" } */\n-/* { dg-skip-if \"No scheduling\" { mmix-*-* cris-*-* fido-*-* m68k-*-* m32c-*-* } { \"*\" } { \"\" } } */\n+/* { dg-skip-if \"No scheduling\" { mmix-*-* cris-*-* crisv32-*-* fido-*-* m68k-*-* m32c-*-* } { \"*\" } { \"\" } } */\n \n extern double f (double x);\n "}, {"sha": "f1afd93031872add532c2554136decdf996a28df", "filename": "gcc/testsuite/gcc.dg/pr31866.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31866.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31866.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31866.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -1,5 +1,5 @@\n /* PR tree-optimization/31866 */\n-/* { dg-do compile { target alpha-*-* cris-*-* i?86-*-* mmix-*-* powerpc*-*-* rs6000-*-* x86_64-*-* } } */\n+/* { dg-do compile { target alpha-*-* cris-*-* crisv32-*-* i?86-*-* mmix-*-* powerpc*-*-* rs6000-*-* x86_64-*-* } } */\n /* { dg-options \"-O2\" } */\n \n #if defined (__alpha__)"}, {"sha": "d351d4f74d18f2265ccccb4920e65b438c7536f0", "filename": "gcc/testsuite/gcc.dg/sibcall-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-3.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -5,7 +5,7 @@\n    Copyright (C) 2002 Free Software Foundation Inc.\n    Contributed by Hans-Peter Nilsson  <hp@bitrange.com>  */\n \n-/* { dg-do run { xfail arc-*-* avr-*-* c4x-*-* cris-*-* h8300-*-* hppa*64*-*-* m32r-*-* m68hc1?-*-* mcore-*-* mn10300-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa-*-* } } */\n+/* { dg-do run { xfail arc-*-* avr-*-* c4x-*-* cris-*-* crisv32-*-* h8300-*-* hppa*64*-*-* m32r-*-* m68hc1?-*-* mcore-*-* mn10300-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa-*-* } } */\n /* -mlongcall disables sibcall patterns.  */\n /* { dg-skip-if \"\" { powerpc*-*-* } { \"-mlongcall\" } { \"\" } } */\n /* { dg-options \"-O2 -foptimize-sibling-calls\" } */"}, {"sha": "daba88b76ccdd61b276bd011877a36b9dcf503e8", "filename": "gcc/testsuite/gcc.dg/sibcall-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-4.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -5,7 +5,7 @@\n    Copyright (C) 2002 Free Software Foundation Inc.\n    Contributed by Hans-Peter Nilsson  <hp@bitrange.com>  */\n \n-/* { dg-do run { xfail arc-*-* avr-*-* c4x-*-* cris-*-* h8300-*-* hppa*64*-*-* m32r-*-* m68hc1?-*-* mcore-*-* mn10300-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa-*-* } } */\n+/* { dg-do run { xfail arc-*-* avr-*-* c4x-*-* cris-*-* crisv32-*-* h8300-*-* hppa*64*-*-* m32r-*-* m68hc1?-*-* mcore-*-* mn10300-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa-*-* } } */\n /* -mlongcall disables sibcall patterns.  */\n /* { dg-skip-if \"\" { powerpc*-*-* } { \"-mlongcall\" } { \"\" } } */\n /* { dg-options \"-O2 -foptimize-sibling-calls\" } */"}, {"sha": "5ebde5ed5440ea1b3d4f30d24ba35c3f82d811f2", "filename": "gcc/testsuite/gcc.dg/torture/cris-asm-mof-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcris-asm-mof-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcris-asm-mof-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcris-asm-mof-1.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do compile { target cris-*-* } } */\n-/* { dg-skip-if \"\" { cris-*-* } { \"-march*\" } { \"\" } } */\n+/* { dg-do compile { target cris-*-* crisv32-*-* } } */\n+/* { dg-skip-if \"\" { cris*-*-* } { \"-march*\" } { \"\" } } */\n /* { dg-options \"-O2 -march=v10\" } */\n /* { dg-final { scan-assembler \"in-asm: .mof\" } } */\n /* { dg-final { scan-assembler \"out-asm: .mof\" } } */"}, {"sha": "6b19852c27485402f2115a48629e6729036af8dd", "filename": "gcc/testsuite/gcc.dg/torture/cris-volatile-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcris-volatile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcris-volatile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcris-volatile-1.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -2,7 +2,7 @@\n    Check that size-optimizations for move insns (specifically peephole\n    optimizations) aren't applied to volatile objects in the CRIS port.\n    Origin: Hans-Peter Nilsson.  */\n-/* { dg-do compile { target cris-*-* } } */\n+/* { dg-do compile { target cris-*-* crisv32-*-* } } */\n /* { dg-final { scan-assembler-not {movu\\...\\[} } } */\n /* { dg-final { scan-assembler-not {move\\.[^d].\\[} } } */\n /* { dg-final { scan-assembler-not {and\\.[^d].\\[} } } */"}, {"sha": "28cdfd2318177de8eb46d9f5c6d34f3c91d10567", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040204-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -33,5 +33,5 @@ void test55 (int x, int y)\n    that the && should be emitted (based on BRANCH_COST).  Fix this\n    by teaching dom to look through && and register all components\n    as true.  */\n-/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" { xfail { ! \"powerpc*-*-* cris-*-* mmix-*-* mips*-*-*\" } } } } */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" { xfail { ! \"powerpc*-*-* cris-*-* crisv32-*-* mmix-*-* mips*-*-*\" } } } } */\n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "751e3e89027cde2cad716e450b1b5e5f5beafb8a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -39,7 +39,7 @@ void xxx(void)\n /* CRIS keeps the address in a register.  */\n /* m68k sometimes puts the address in a register, depending on CPU and PIC.  */\n \n-/* { dg-final { scan-assembler-times \"foo\" 5 { xfail hppa*-*-* ia64*-*-* sh*-*-* cris-*-* fido-*-* m68k-*-* } } } */\n+/* { dg-final { scan-assembler-times \"foo\" 5 { xfail hppa*-*-* ia64*-*-* sh*-*-* cris-*-* crisv32-*-* fido-*-* m68k-*-* } } } */\n /* { dg-final { scan-assembler-times \"foo,%r\" 5 { target hppa*-*-* } } } */\n /* { dg-final { scan-assembler-times \"= foo\"  5 { target ia64*-*-* } } } */\n /* { dg-final { scan-assembler-times \"jsr|bsrf|blink\\ttr?,r18\"  5 { target sh*-*-* } } } */"}, {"sha": "5d97dc5c240e6912d9548e9839fbab3c2c306f42", "filename": "gcc/testsuite/gcc.dg/weak/typeof-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Ftypeof-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Ftypeof-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Ftypeof-2.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -39,6 +39,7 @@ int bar3 (int x)\n // { dg-final { if [string match s390*-*-* $target_triplet ] {return} } }\n // Likewise for CRIS targets.\n // { dg-final { if [string match cris-*-* $target_triplet ] {return} } }\n+// { dg-final { if [string match crisv32-*-* $target_triplet ] {return} } }\n // Likewise for m68k targets.\n // { dg-final { if [string match fido-*-* $target_triplet ] {return} } }\n // { dg-final { if [string match m68k-*-* $target_triplet ] {return} } }"}, {"sha": "0e448f8b0b8467e9fb48e9a80d0e0dbbd0348fe6", "filename": "gcc/testsuite/gcc.target/cris/20011127-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2F20011127-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2F20011127-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2F20011127-1.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -3,9 +3,9 @@\n \n    Making sure that invalid asm operand modifiers don't cause an ICE.  */\n \n-/* { dg-do compile { target cris-*-* } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n-/* { dg-message \"reg:SI|const_double:DF\" \"prune debug_rtx output\" { target cris-*-* } 0 } */\n+/* { dg-message \"reg:SI|const_double:DF\" \"prune debug_rtx output\" { target *-*-* } 0 } */\n \n void\n foo (void)"}, {"sha": "f430fafbeea20f025fd54a6c7be370f86d29b671", "filename": "gcc/testsuite/gcc.target/cris/asmreg-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fasmreg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fasmreg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fasmreg-1.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target cris-*-* } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n /* { dg-final { scan-assembler \"\\\\\\.ifnc \\\\\\$r9-\\\\\\$r10-\\\\\\$r11-\\\\\\$r12\" } } */\n "}, {"sha": "1230d4b596d4a6962b686d4bd1dcb8ffb7acf854", "filename": "gcc/testsuite/gcc.target/cris/builtin_bswap_v3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_bswap_v3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_bswap_v3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_bswap_v3.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -1,7 +1,7 @@\n /* Check that we don't use the swap insn for bswap by checking assembler \n    output.  The swap instruction was added in v8.  */\n /* { dg-do compile } */\n-/* { dg-skip-if \"\" { \"cris-*-elf\" } { \"-march*\" } { \"\" } } */\n+/* { dg-skip-if \"\" { \"cris*-*-elf\" } { \"-march*\" } { \"\" } } */\n /* { dg-options \"-O2 -march=v3\" } */\n /* { dg-final { scan-assembler-not \"\\[ \\t\\]swapwb\\[ \\t\\]\" } } */\n "}, {"sha": "b7a8d268401e18bb7281fe60e43dcfa0705ef3f6", "filename": "gcc/testsuite/gcc.target/cris/builtin_bswap_v8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_bswap_v8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_bswap_v8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_bswap_v8.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -1,7 +1,7 @@\n /* Check that we use the swap insn for bswap by checking assembler\n    output.  The swap instruction was added in v8.  */\n /* { dg-do compile } */\n-/* { dg-skip-if \"\" { \"cris-*-elf\" } { \"-march*\" } { \"\" } } */\n+/* { dg-skip-if \"\" { \"cris*-*-elf\" } { \"-march*\" } { \"\" } } */\n /* { dg-options \"-O2 -march=v8\" } */\n /* { dg-final { scan-assembler \"\\[ \\t\\]swapwb\\[ \\t\\]\" } } */\n "}, {"sha": "318402faa37f286a1a8746207768e638ae261a5c", "filename": "gcc/testsuite/gcc.target/cris/builtin_clz_v0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_clz_v0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_clz_v0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_clz_v0.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -1,7 +1,7 @@\n /* Check that we don't use the lz insn for clz by checking assembler output.\n    The lz insn was implemented in CRIS v3 (ETRAX 4).  */\n /* { dg-do compile } */\n-/* { dg-skip-if \"\" { \"cris-*-elf\" } { \"-march*\" } { \"\" } } */\n+/* { dg-skip-if \"\" { \"cris*-*-elf\" } { \"-march*\" } { \"\" } } */\n /* { dg-options \"-O2 -march=v0\" } */\n /* { dg-final { scan-assembler-not \"\\[ \\t\\]lz\\[ \\t\\]\" } } */\n "}, {"sha": "ecf0390487f30f4708028b92c99aa79c41164987", "filename": "gcc/testsuite/gcc.target/cris/builtin_clz_v3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_clz_v3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_clz_v3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_clz_v3.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -1,7 +1,7 @@\n /* Check that we use the lz insn for clz by checking assembler output.\n    The lz insn was implemented in CRIS v3 (ETRAX 4).  */\n /* { dg-do compile } */\n-/* { dg-skip-if \"\" { \"cris-*-elf\" } { \"-march*\" } { \"\" } } */\n+/* { dg-skip-if \"\" { \"cris*-*-elf\" } { \"-march*\" } { \"\" } } */\n /* { dg-options \"-O2 -march=v3\" } */\n /* { dg-final { scan-assembler \"\\[ \\t\\]lz\\[ \\t\\]\" } } */\n "}, {"sha": "8971a47a0b7b90a72ab138d14cd1f25a4e3aaee4", "filename": "gcc/testsuite/gcc.target/cris/builtin_ctz_v3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_ctz_v3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_ctz_v3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_ctz_v3.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -1,7 +1,7 @@\n /* Check that we don't use the swap insn for ctz by checking\n    assembler output.  The swap instruction was implemented in v8.  */\n /* { dg-do compile } */\n-/* { dg-skip-if \"\" { \"cris-*-elf\" } { \"-march*\" } { \"\" } } */\n+/* { dg-skip-if \"\" { \"cris*-*-elf\" } { \"-march*\" } { \"\" } } */\n /* { dg-options \"-O2 -march=v3\" } */\n /* { dg-final { scan-assembler-not \"\\[ \\t\\]swapwbr\\[ \\t\\]\" } } */\n "}, {"sha": "853b1740aac7db4412dfffefe34e0782757686ec", "filename": "gcc/testsuite/gcc.target/cris/builtin_ctz_v8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_ctz_v8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_ctz_v8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fbuiltin_ctz_v8.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -1,7 +1,7 @@\n /* Check that we use the swap insn for ctz by checking assembler output.\n    The swap instruction was implemented in v8.  */\n /* { dg-do compile } */\n-/* { dg-skip-if \"\" { \"cris-*-elf\" } { \"-march*\" } { \"\" } } */\n+/* { dg-skip-if \"\" { \"cris*-*-elf\" } { \"-march*\" } { \"\" } } */\n /* { dg-options \"-O2 -march=v8\" } */\n /* { dg-final { scan-assembler \"\\[ \\t\\]swapwbr\\[ \\t\\]\" } } */\n "}, {"sha": "769052a285205b438bb672e53842a010acc125ac", "filename": "gcc/testsuite/gcc.target/cris/cris.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fcris.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fcris.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fcris.exp?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -18,7 +18,7 @@\n # looping over tests.\n \n # Exit immediately if this isn't a CRIS target.\n-if ![istarget cris-*-*] then {\n+if { ![istarget cris-*-*] && ![istarget crisv32-*-*] } then {\n   return\n }\n "}, {"sha": "3b54c32958608ac056014b910e53568561bf72fe", "filename": "gcc/testsuite/gcc.target/cris/peep2-andu1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpeep2-andu1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpeep2-andu1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpeep2-andu1.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target cris-*-* } } */\n+/* { dg-do compile } */\n /* { dg-final { scan-assembler-not \"and.d \" } } */\n /* { dg-final { scan-assembler-not \"move.d \" } } */\n /* { dg-final { scan-assembler \"cLear.b\" } } */"}, {"sha": "55f638cdb5f735cd77d389e06ee5114e992bd706", "filename": "gcc/testsuite/gcc.target/cris/peep2-andu2.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpeep2-andu2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpeep2-andu2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpeep2-andu2.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -1,11 +1,11 @@\n-/* { dg-do compile { target cris-*-* } } */\n-/* { dg-final { scan-assembler \"movu.w \\\\\\$r10,\\\\\\$r\" } } */\n-/* { dg-final { scan-assembler \"and.w 2047,\\\\\\$r\" } } */\n-/* { dg-final { scan-assembler-not \"move.d \\\\\\$r10,\\\\\\$r\" } } */\n-/* { dg-final { scan-assembler \"movu.b \\\\\\$r10,\\\\\\$r\" } } */\n-/* { dg-final { scan-assembler \"and.b 95,\\\\\\$r\" } } */\n-/* { dg-final { scan-assembler \"andq -2,\\\\\\$r\" } } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-do assemble } */\n+/* { dg-final { scan-assembler \"movu.w \\\\\\$r10,\\\\\\$\" } } */\n+/* { dg-final { scan-assembler \"and.w 2047,\\\\\\$\" } } */\n+/* { dg-final { scan-assembler-not \"move.d \\\\\\$r10,\\\\\\$\" } } */\n+/* { dg-final { scan-assembler \"movu.b \\\\\\$r10,\\\\\\$\" } } */\n+/* { dg-final { scan-assembler \"and.b 95,\\\\\\$\" } } */\n+/* { dg-final { scan-assembler \"andq -2,\\\\\\$\" } } */\n+/* { dg-options \"-O2 -save-temps\" } */\n \n /* Test the \"andu\" peephole2 trivially, register operand.  */\n "}, {"sha": "df0e76886b47d89968d03cdf07badec067c31c97", "filename": "gcc/testsuite/gcc.target/cris/peep2-xsrand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpeep2-xsrand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpeep2-xsrand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpeep2-xsrand.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target cris-*-* } } */\n+/* { dg-do compile } */\n /* { dg-final { scan-assembler \"and.w \" } } */\n /* { dg-final { scan-assembler \"and.b \" } } */\n /* { dg-final { scan-assembler-not \"and.d\" } } */"}, {"sha": "5d6ca788d73a4151e336157c912b557ee154f244", "filename": "gcc/testsuite/gcc.target/cris/peep2-xsrand2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpeep2-xsrand2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpeep2-xsrand2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpeep2-xsrand2.c?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target cris-*-* } } */\n+/* { dg-do compile } */\n /* { dg-final { scan-assembler \"and.w -137,\" } } */\n /* { dg-final { scan-assembler \"and.b -64,\" } } */\n /* { dg-final { scan-assembler \"and.w -139,\" } } */"}, {"sha": "a0b294fcde83eb2d47eed54db18db111d65af26e", "filename": "gcc/testsuite/gcc.target/cris/torture/cris-torture.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Ftorture%2Fcris-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Ftorture%2Fcris-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Ftorture%2Fcris-torture.exp?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -18,7 +18,7 @@\n # optimization options.\n \n # Exit immediately if this isn't a CRIS target.\n-if ![istarget cris-*-*] then {\n+if { ![istarget cris-*-*] && ![istarget crisv32-*-*] } then {\n   return\n }\n "}, {"sha": "aaa3b5beb1d991421a91cf33704acec41255cafb", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7e30cf2d1de6bdf267cfc0828abececd7ac9b03/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=c7e30cf2d1de6bdf267cfc0828abececd7ac9b03", "patch": "@@ -421,6 +421,7 @@ proc check_profiling_available { test_what } {\n \t     || [istarget strongarm*-*-elf]\n \t     || [istarget xscale*-*-elf]\n \t     || [istarget cris-*-*]\n+\t     || [istarget crisv32-*-*]\n \t     || [istarget fido-*-elf]\n \t     || [istarget h8300-*-*]\n \t     || [istarget m32c-*-elf]"}]}