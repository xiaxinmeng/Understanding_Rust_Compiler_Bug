{"sha": "ec74725ce3ed5c96783b76992940d99563c82a47", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM3NDcyNWNlM2VkNWM5Njc4M2I3Njk5Mjk0MGQ5OTU2M2M4MmE0Nw==", "commit": {"author": {"name": "Jim Wilson", "email": "jimw@sifive.com", "date": "2018-06-06T19:08:36Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2018-06-06T19:08:36Z"}, "message": "RISC-V: Add interrupt attribute modes.\n\n\tgcc/\n\t* config/riscv/riscv.c (enum riscv_privilege_levels): New.\n\t(struct machine_function): New field interrupt_mode.\n\t(riscv_handle_type_attribute): New function.  Add forward declaration.\n\t(riscv_attribute_table) <interrupt>: Use riscv_handle_type_attribute.\n\t(riscv_expand_epilogue): Check interrupt_mode field.\n\t(riscv_set_current_function): Check interrupt attribute args and\n\tset interrupt_mode field.\n\t* config/riscv/riscv.md (UNSPECV_SRET, UNSPECV_URET): New.\n\t(riscv_sret, riscv_uret): New.\n\t* doc/extend.texi (RISC-V Function Attributes) <interrupt>: Document\n\tnew arguments to interrupt attribute.\n\n\tgcc/testsuite/\n\t* gcc.target/riscv/interrupt-5.c (sub3): Add new test.\n\t* gcc.target/riscv/interrupt-mmode.c: New.\n\t* gcc.target/riscv/interrupt-smode.c: New.\n\t* gcc.target/riscv/interrupt-umode.c: New.\n\nFrom-SVN: r261244", "tree": {"sha": "655961162cdfc53ad9be35b0f98b4fa69610333d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/655961162cdfc53ad9be35b0f98b4fa69610333d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec74725ce3ed5c96783b76992940d99563c82a47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec74725ce3ed5c96783b76992940d99563c82a47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec74725ce3ed5c96783b76992940d99563c82a47", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec74725ce3ed5c96783b76992940d99563c82a47/comments", "author": null, "committer": null, "parents": [{"sha": "1b58c736db9d28975f596f5175c9f9470723c166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b58c736db9d28975f596f5175c9f9470723c166", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b58c736db9d28975f596f5175c9f9470723c166"}], "stats": {"total": 155, "additions": 152, "deletions": 3}, "files": [{"sha": "bf56e891c77174b0c85024746014e02c4e1bc6e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec74725ce3ed5c96783b76992940d99563c82a47", "patch": "@@ -1,3 +1,17 @@\n+2018-06-06  Jim Wilson  <jimw@sifive.com>\n+\n+\t* config/riscv/riscv.c (enum riscv_privilege_levels): New.\n+\t(struct machine_function): New field interrupt_mode.\n+\t(riscv_handle_type_attribute): New function.  Add forward declaration.\n+\t(riscv_attribute_table) <interrupt>: Use riscv_handle_type_attribute.\n+\t(riscv_expand_epilogue): Check interrupt_mode field.\n+\t(riscv_set_current_function): Check interrupt attribute args and\n+\tset interrupt_mode field.\n+\t* config/riscv/riscv.md (UNSPECV_SRET, UNSPECV_URET): New.\n+\t(riscv_sret, riscv_uret): New.\n+\t* doc/extend.texi (RISC-V Function Attributes) <interrupt>: Document\n+\tnew arguments to interrupt attribute.\n+\n 2018-06-06  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR target/63177"}, {"sha": "2709ebdd7975292b388e36360a185baa98ced002", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 79, "deletions": 3, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=ec74725ce3ed5c96783b76992940d99563c82a47", "patch": "@@ -122,6 +122,10 @@ struct GTY(())  riscv_frame_info {\n   HOST_WIDE_INT arg_pointer_offset;\n };\n \n+enum riscv_privilege_levels {\n+  USER_MODE, SUPERVISOR_MODE, MACHINE_MODE\n+};\n+\n struct GTY(())  machine_function {\n   /* The number of extra stack bytes taken up by register varargs.\n      This area is allocated by the callee at the very top of the frame.  */\n@@ -132,6 +136,8 @@ struct GTY(())  machine_function {\n \n   /* True if current function is an interrupt function.  */\n   bool interrupt_handler_p;\n+  /* For an interrupt handler, indicates the privilege level.  */\n+  enum riscv_privilege_levels interrupt_mode;\n \n   /* True if attributes on current function have been checked.  */\n   bool attributes_checked_p;\n@@ -282,6 +288,7 @@ static const struct riscv_tune_info optimize_size_tune_info = {\n };\n \n static tree riscv_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n+static tree riscv_handle_type_attribute (tree *, tree, tree, int, bool *);\n \n /* Defining target-specific uses of __attribute__.  */\n static const struct attribute_spec riscv_attribute_table[] =\n@@ -294,7 +301,8 @@ static const struct attribute_spec riscv_attribute_table[] =\n   { \"naked\",\t0,  0, true, false, false, false,\n     riscv_handle_fndecl_attribute, NULL },\n   /* This attribute generates prologue/epilogue for interrupt handlers.  */\n-  { \"interrupt\", 0, 0, false, true, true, false, NULL, NULL },\n+  { \"interrupt\", 0, 1, false, true, true, false,\n+    riscv_handle_type_attribute, NULL },\n \n   /* The last attribute spec is set to be NULL.  */\n   { NULL,\t0,  0, false, false, false, false, NULL, NULL }\n@@ -2721,6 +2729,47 @@ riscv_handle_fndecl_attribute (tree *node, tree name,\n   return NULL_TREE;\n }\n \n+/* Verify type based attributes.  NODE is the what the attribute is being\n+   applied to.  NAME is the attribute name.  ARGS are the attribute args.\n+   FLAGS gives info about the context.  NO_ADD_ATTRS should be set to true if\n+   the attribute should be ignored.  */\n+\n+static tree\n+riscv_handle_type_attribute (tree *node ATTRIBUTE_UNUSED, tree name, tree args,\n+\t\t\t     int flags ATTRIBUTE_UNUSED, bool *no_add_attrs)\n+{\n+  /* Check for an argument.  */\n+  if (is_attribute_p (\"interrupt\", name))\n+    {\n+      if (args)\n+\t{\n+\t  tree cst = TREE_VALUE (args);\n+\t  const char *string;\n+\n+\t  if (TREE_CODE (cst) != STRING_CST)\n+\t    {\n+\t      warning (OPT_Wattributes,\n+\t\t       \"%qE attribute requires a string argument\",\n+\t\t       name);\n+\t      *no_add_attrs = true;\n+\t      return NULL_TREE;\n+\t    }\n+\n+\t  string = TREE_STRING_POINTER (cst);\n+\t  if (strcmp (string, \"user\") && strcmp (string, \"supervisor\")\n+\t      && strcmp (string, \"machine\"))\n+\t    {\n+\t      warning (OPT_Wattributes,\n+\t\t       \"argument to %qE attribute is not \\\"user\\\", \\\"supervisor\\\", or \\\"machine\\\"\",\n+\t\t       name);\n+\t      *no_add_attrs = true;\n+\t    }\n+\t}\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Return true if function TYPE is an interrupt function.  */\n static bool\n riscv_interrupt_type_p (tree type)\n@@ -3932,7 +3981,16 @@ riscv_expand_epilogue (int style)\n \n   /* Return from interrupt.  */\n   if (cfun->machine->interrupt_handler_p)\n-    emit_insn (gen_riscv_mret ());\n+    {\n+      enum riscv_privilege_levels mode = cfun->machine->interrupt_mode;\n+\n+      if (mode == MACHINE_MODE)\n+\temit_insn (gen_riscv_mret ());\n+      else if (mode == SUPERVISOR_MODE)\n+\temit_insn (gen_riscv_sret ());\n+      else\n+\temit_insn (gen_riscv_uret ());\n+    }\n   else if (style != SIBCALL_RETURN)\n     emit_jump_insn (gen_simple_return_internal (ra));\n }\n@@ -4494,14 +4552,32 @@ riscv_set_current_function (tree decl)\n \n   if (cfun->machine->interrupt_handler_p)\n     {\n-      tree args = TYPE_ARG_TYPES (TREE_TYPE (decl));\n       tree ret = TREE_TYPE (TREE_TYPE (decl));\n+      tree args = TYPE_ARG_TYPES (TREE_TYPE (decl));\n+      tree attr_args\n+\t= TREE_VALUE (lookup_attribute (\"interrupt\",\n+\t\t\t\t\tTYPE_ATTRIBUTES (TREE_TYPE (decl))));\n \n       if (TREE_CODE (ret) != VOID_TYPE)\n \terror (\"%qs function cannot return a value\", \"interrupt\");\n \n       if (args && TREE_CODE (TREE_VALUE (args)) != VOID_TYPE)\n \terror (\"%qs function cannot have arguments\", \"interrupt\");\n+\n+      if (attr_args && TREE_CODE (TREE_VALUE (attr_args)) != VOID_TYPE)\n+\t{\n+\t  const char *string = TREE_STRING_POINTER (TREE_VALUE (attr_args));\n+\n+\t  if (!strcmp (string, \"user\"))\n+\t    cfun->machine->interrupt_mode = USER_MODE;\n+\t  else if (!strcmp (string, \"supervisor\"))\n+\t    cfun->machine->interrupt_mode = SUPERVISOR_MODE;\n+\t  else /* Must be \"machine\".  */\n+\t    cfun->machine->interrupt_mode = MACHINE_MODE;\n+\t}\n+      else\n+\t/* Interrupt attributes are machine mode by default.  */\n+\tcfun->machine->interrupt_mode = MACHINE_MODE;\n     }\n \n   /* Don't print the above diagnostics more than once.  */"}, {"sha": "a5940dcc4253edfdca937d786700cf2e86b99763", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=ec74725ce3ed5c96783b76992940d99563c82a47", "patch": "@@ -58,6 +58,8 @@\n \n   ;; Interrupt handler instructions.\n   UNSPECV_MRET\n+  UNSPECV_SRET\n+  UNSPECV_URET\n \n   ;; Blockage and synchronization.\n   UNSPECV_BLOCKAGE\n@@ -2298,6 +2300,16 @@\n   \"\"\n   \"mret\")\n \n+(define_insn \"riscv_sret\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_SRET)]\n+  \"\"\n+  \"sret\")\n+\n+(define_insn \"riscv_uret\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_URET)]\n+  \"\"\n+  \"uret\")\n+\n (define_insn \"stack_tie<mode>\"\n   [(set (mem:BLK (scratch))\n \t(unspec:BLK [(match_operand:X 0 \"register_operand\" \"r\")"}, {"sha": "0c1c1b1dc169e8b6c406d34ee77adad8e25a6d3b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ec74725ce3ed5c96783b76992940d99563c82a47", "patch": "@@ -5147,6 +5147,17 @@ depended upon to work reliably and are not supported.\n Use this attribute to indicate that the specified function is an interrupt\n handler.  The compiler generates function entry and exit sequences suitable\n for use in an interrupt handler when this attribute is present.\n+\n+You can specify the kind of interrupt to be handled by adding an optional\n+parameter to the interrupt attribute like this:\n+\n+@smallexample\n+void f (void) __attribute__ ((interrupt (\"user\")));\n+@end smallexample\n+\n+Permissible values for this parameter are @code{user}, @code{supervisor},\n+and @code{machine}.  If there is no parameter, then it defaults to\n+@code{machine}.\n @end table\n \n @node RL78 Function Attributes"}, {"sha": "aa24adfbbd6054f20eb812dc3698146fc011ec0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec74725ce3ed5c96783b76992940d99563c82a47", "patch": "@@ -1,3 +1,10 @@\n+2018-06-06  Jim Wilson  <jimw@sifive.com>\n+\n+\t* gcc.target/riscv/interrupt-5.c (sub3): Add new test.\n+\t* gcc.target/riscv/interrupt-mmode.c: New.\n+\t* gcc.target/riscv/interrupt-smode.c: New.\n+\t* gcc.target/riscv/interrupt-umode.c: New.\n+\n 2018-06-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/85977"}, {"sha": "324954eb1dd3ac956a206b0c65fcf350e6acf7ac", "filename": "gcc/testsuite/gcc.target/riscv/interrupt-5.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Finterrupt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Finterrupt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Finterrupt-5.c?ref=ec74725ce3ed5c96783b76992940d99563c82a47", "patch": "@@ -14,3 +14,8 @@ void __attribute__ ((interrupt, naked))\n sub2 (void)\n { /* { dg-error \"are mutually exclusive\" } */\n }\n+\n+void __attribute__ ((interrupt (\"hypervisor\")))\n+sub3 (void)\n+{ /* { dg-warning \"argument to\" } */\n+}"}, {"sha": "fd7a7a17e17561caea2a216a3a02812d0f2513b3", "filename": "gcc/testsuite/gcc.target/riscv/interrupt-mmode.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Finterrupt-mmode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Finterrupt-mmode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Finterrupt-mmode.c?ref=ec74725ce3ed5c96783b76992940d99563c82a47", "patch": "@@ -0,0 +1,8 @@\n+/* Verify the return instruction is mret.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+void __attribute__ ((interrupt (\"machine\")))\n+foo (void)\n+{\n+}\n+/* { dg-final { scan-assembler \"mret\" } } */"}, {"sha": "2f696d30b0250149cef124d5043f528b3941ca64", "filename": "gcc/testsuite/gcc.target/riscv/interrupt-smode.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Finterrupt-smode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Finterrupt-smode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Finterrupt-smode.c?ref=ec74725ce3ed5c96783b76992940d99563c82a47", "patch": "@@ -0,0 +1,8 @@\n+/* Verify the return instruction is mret.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+void __attribute__ ((interrupt (\"supervisor\")))\n+foo (void)\n+{\n+}\n+/* { dg-final { scan-assembler \"sret\" } } */"}, {"sha": "cd120e489ca0f740d3dbfe7acbc2d501a0cb4085", "filename": "gcc/testsuite/gcc.target/riscv/interrupt-umode.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Finterrupt-umode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec74725ce3ed5c96783b76992940d99563c82a47/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Finterrupt-umode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Finterrupt-umode.c?ref=ec74725ce3ed5c96783b76992940d99563c82a47", "patch": "@@ -0,0 +1,8 @@\n+/* Verify the return instruction is mret.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+void __attribute__ ((interrupt (\"user\")))\n+foo (void)\n+{\n+}\n+/* { dg-final { scan-assembler \"uret\" } } */"}]}