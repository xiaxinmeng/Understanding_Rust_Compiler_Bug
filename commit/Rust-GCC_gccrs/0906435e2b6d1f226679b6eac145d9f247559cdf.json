{"sha": "0906435e2b6d1f226679b6eac145d9f247559cdf", "node_id": "C_kwDOANBUbNoAKDA5MDY0MzVlMmI2ZDFmMjI2Njc5YjZlYWMxNDVkOWYyNDc1NTljZGY", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-10T06:53:44Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T10:31:44Z"}, "message": "RISC-V: Add vnclip C++ API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vnclip_vv-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vv-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vv-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vv_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vv_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vv_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vv_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vv_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vv_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vv_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vv_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vv_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vv_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vv_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vv_tumu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vx-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vx-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vx-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vx_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vx_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vx_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vx_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vx_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vx_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vx_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vx_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vx_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vx_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vx_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclip_vx_tumu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vv-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vv-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vv-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vv_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vv_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vv_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vv_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vv_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vv_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vv_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vv_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vv_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vv_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vv_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vv_tumu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vx-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vx-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vx-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vx_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vx_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vx_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vx_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vx_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vx_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vx_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vx_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vx_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vx_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vx_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vnclipu_vx_tumu-3.C: New test.", "tree": {"sha": "16784a617f5f3bafc9fdeb979248dfc4bdd9da5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16784a617f5f3bafc9fdeb979248dfc4bdd9da5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0906435e2b6d1f226679b6eac145d9f247559cdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0906435e2b6d1f226679b6eac145d9f247559cdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0906435e2b6d1f226679b6eac145d9f247559cdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0906435e2b6d1f226679b6eac145d9f247559cdf/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7302972bcd59be0308f8f765463153331a9e4775", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7302972bcd59be0308f8f765463153331a9e4775", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7302972bcd59be0308f8f765463153331a9e4775"}], "stats": {"total": 7920, "additions": 7920, "deletions": 0}, "files": [{"sha": "2c58ecb19be423ff917f1265012125f5e18d6463", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vv-1.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip(vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip(vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip(vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip(vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip(vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip(vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip(vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip(vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip(vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip(vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip(vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip(vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip(vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip(vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip(vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnclip(vbool64_t mask,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip(vbool32_t mask,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip(vbool16_t mask,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip(vbool8_t mask,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip(vbool4_t mask,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip(vbool2_t mask,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip(vbool64_t mask,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip(vbool32_t mask,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip(vbool16_t mask,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip(vbool8_t mask,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip(vbool4_t mask,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip(vbool64_t mask,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip(vbool32_t mask,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip(vbool16_t mask,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip(vbool8_t mask,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "06a73adfc6ae49d611b0e5448975c06a6ee0e4d6", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vv-2.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip(vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip(vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip(vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip(vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip(vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip(vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip(vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip(vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip(vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip(vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip(vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip(vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip(vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip(vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip(vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnclip(vbool64_t mask,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip(vbool32_t mask,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip(vbool16_t mask,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip(vbool8_t mask,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip(vbool4_t mask,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip(vbool2_t mask,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip(vbool64_t mask,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip(vbool32_t mask,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip(vbool16_t mask,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip(vbool8_t mask,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip(vbool4_t mask,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip(vbool64_t mask,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip(vbool32_t mask,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip(vbool16_t mask,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip(vbool8_t mask,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1abfe22560daefc752bf2e8528eb6865521f3e90", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vv-3.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip(vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip(vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip(vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip(vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip(vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip(vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip(vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip(vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip(vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip(vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip(vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip(vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip(vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip(vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip(vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnclip(vbool64_t mask,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip(vbool32_t mask,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip(vbool16_t mask,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip(vbool8_t mask,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip(vbool4_t mask,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip(vbool2_t mask,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip(vbool64_t mask,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip(vbool32_t mask,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip(vbool16_t mask,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip(vbool8_t mask,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip(vbool4_t mask,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip(vbool64_t mask,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip(vbool32_t mask,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip(vbool16_t mask,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip(vbool8_t mask,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "8e9371e4184004dbc0d14f7ea010885232b63eec", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vv_mu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_mu-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_mu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_mu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_mu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_mu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_mu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_mu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_mu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_mu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_mu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_mu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_mu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_mu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_mu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_mu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_mu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "5cd6cf8c4d34de7df3093b3ab2b7e7520db1d5ea", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vv_mu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_mu-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_mu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_mu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_mu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_mu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_mu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_mu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_mu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_mu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_mu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_mu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_mu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_mu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_mu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_mu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_mu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "7d75c63e429d288d001ed1e9af2b9e063b863c51", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vv_mu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_mu-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_mu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_mu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_mu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_mu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_mu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_mu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_mu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_mu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_mu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_mu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_mu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_mu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_mu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_mu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_mu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1a9e434af87f0a5b2adc935ecebfc147990323b8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vv_tu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tu-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tu(vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tu(vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tu(vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tu(vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tu(vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tu(vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tu(vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tu(vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tu(vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tu(vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tu(vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tu(vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tu(vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tu(vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tu(vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "6f25e11f7e375f08f41be21eadcbb99db1bf4f7e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vv_tu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tu-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tu(vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tu(vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tu(vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tu(vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tu(vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tu(vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tu(vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tu(vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tu(vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tu(vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tu(vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tu(vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tu(vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tu(vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tu(vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "714e06292aa03fed2c841e386094c2021130baf7", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vv_tu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tu-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tu(vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tu(vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tu(vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tu(vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tu(vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tu(vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tu(vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tu(vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tu(vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tu(vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tu(vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tu(vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tu(vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tu(vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tu(vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "1a9d37af7e652286577e3bf1b5a972e891a76577", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vv_tum-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tum-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tum(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tum(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tum(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tum(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tum(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tum(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tum(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tum(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tum(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tum(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tum(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tum(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tum(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tum(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tum(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "63bfef2d0dc06dc1242b411a550a5ff58312f32f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vv_tum-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tum-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tum(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tum(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tum(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tum(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tum(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tum(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tum(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tum(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tum(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tum(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tum(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tum(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tum(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tum(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tum(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "2442bdc8eb07758b80ac873f77deb8730c417c3b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vv_tum-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tum-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tum(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tum(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tum(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tum(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tum(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tum(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tum(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tum(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tum(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tum(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tum(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tum(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tum(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tum(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tum(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "7a0e435f3cfeba7433d04884f80adbbb63b70dcc", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vv_tumu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tumu-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tumu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tumu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tumu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tumu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tumu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tumu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tumu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tumu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tumu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tumu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tumu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tumu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tumu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tumu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tumu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1d2d0f770b512cf401fdad083bae883108239253", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vv_tumu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tumu-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tumu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tumu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tumu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tumu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tumu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tumu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tumu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tumu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tumu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tumu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tumu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tumu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tumu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tumu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tumu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "16e52a5c9c444cabb049e1d42f6e329b7e5a16f1", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vv_tumu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vv_tumu-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tumu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tumu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tumu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tumu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tumu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tumu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tumu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tumu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tumu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tumu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tumu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tumu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tumu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tumu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tumu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "c734c9f25731435e2095b6329e2d1e5e728a3fd8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vx-1.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip(vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip(vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip(vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip(vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip(vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip(vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip(vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip(vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip(vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip(vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip(vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip(vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip(vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip(vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip(vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnclip(vbool64_t mask,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip(vbool32_t mask,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip(vbool16_t mask,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip(vbool8_t mask,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip(vbool4_t mask,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip(vbool2_t mask,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip(vbool64_t mask,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip(vbool32_t mask,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip(vbool16_t mask,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip(vbool8_t mask,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip(vbool4_t mask,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip(vbool64_t mask,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip(vbool32_t mask,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip(vbool16_t mask,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip(vbool8_t mask,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "b6f36e944f019c9652570c774b95d36e8ff78aaf", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vx-2.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip(vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip(vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip(vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip(vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip(vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip(vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip(vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip(vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip(vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip(vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip(vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip(vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip(vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip(vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip(vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnclip(vbool64_t mask,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip(vbool32_t mask,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip(vbool16_t mask,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip(vbool8_t mask,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip(vbool4_t mask,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip(vbool2_t mask,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip(vbool64_t mask,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip(vbool32_t mask,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip(vbool16_t mask,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip(vbool8_t mask,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip(vbool4_t mask,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip(vbool64_t mask,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip(vbool32_t mask,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip(vbool16_t mask,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip(vbool8_t mask,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1147371a38ce1083e42f15d6d5c242832517940e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vx-3.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip(vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip(vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip(vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip(vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip(vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip(vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip(vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip(vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip(vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip(vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip(vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip(vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip(vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip(vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip(vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(op1,shift,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vnclip(vbool64_t mask,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip(vbool32_t mask,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip(vbool16_t mask,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip(vbool8_t mask,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip(vbool4_t mask,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip(vbool2_t mask,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip(vbool64_t mask,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip(vbool32_t mask,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip(vbool16_t mask,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip(vbool8_t mask,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip(vbool4_t mask,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip(vbool64_t mask,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip(vbool32_t mask,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip(vbool16_t mask,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip(vbool8_t mask,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip(mask,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "6489fe02e65c33a616244bb0eaba3efd3bb07e49", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vx_mu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_mu-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_mu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_mu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_mu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_mu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_mu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_mu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_mu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_mu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_mu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_mu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_mu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_mu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_mu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_mu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_mu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "3013f77a9498936d9703391c70bc0c8aec015b72", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vx_mu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_mu-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_mu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_mu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_mu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_mu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_mu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_mu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_mu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_mu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_mu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_mu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_mu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_mu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_mu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_mu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_mu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "e218c71ead8d46a844f8f13398372c8460599f59", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vx_mu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_mu-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_mu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_mu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_mu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_mu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_mu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_mu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_mu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_mu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_mu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_mu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_mu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_mu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_mu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_mu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_mu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "0cbf6b5215d78c76b0970a500b78c8999447b1a1", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vx_tu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tu-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tu(vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tu(vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tu(vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tu(vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tu(vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tu(vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tu(vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tu(vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tu(vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tu(vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tu(vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tu(vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tu(vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tu(vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tu(vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "2817d42d4b9167b1c981b15182715e3ea8420873", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vx_tu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tu-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tu(vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tu(vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tu(vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tu(vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tu(vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tu(vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tu(vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tu(vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tu(vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tu(vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tu(vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tu(vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tu(vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tu(vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tu(vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "8ee4d5c7814ca6525d3d0e325cff771a423d73ad", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vx_tu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tu-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tu(vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tu(vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tu(vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tu(vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tu(vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tu(vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tu(vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tu(vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tu(vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tu(vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tu(vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tu(vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tu(vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tu(vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tu(vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tu(merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "a40bb5d95f984985b2a556563ed02185b8c2ca06", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vx_tum-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tum-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tum(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tum(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tum(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tum(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tum(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tum(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tum(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tum(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tum(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tum(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tum(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tum(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tum(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tum(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tum(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "d390f209b7332374adee22f6c468002d508a6b17", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vx_tum-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tum-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tum(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tum(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tum(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tum(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tum(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tum(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tum(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tum(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tum(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tum(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tum(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tum(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tum(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tum(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tum(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "1a699d42394e8ff0d54e5ea8e4f4fe59cadbd0e2", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vx_tum-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tum-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tum(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tum(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tum(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tum(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tum(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tum(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tum(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tum(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tum(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tum(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tum(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tum(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tum(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tum(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tum(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "fcda2b00a0352424abbb73412deef410eea73238", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vx_tumu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tumu-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tumu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tumu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tumu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tumu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tumu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tumu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tumu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tumu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tumu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tumu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tumu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tumu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tumu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tumu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tumu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "587e7e67964ef694bab397ddfbf7aa6c7b61f0f0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vx_tumu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tumu-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tumu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tumu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tumu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tumu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tumu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tumu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tumu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tumu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tumu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tumu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tumu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tumu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tumu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tumu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tumu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "3f56064d946bf5bc17f289e848f1b415b2c2f636", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclip_vx_tumu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclip_vx_tumu-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vnclip_tumu(vbool64_t mask,vint8mf8_t merge,vint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vnclip_tumu(vbool32_t mask,vint8mf4_t merge,vint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vnclip_tumu(vbool16_t mask,vint8mf2_t merge,vint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vnclip_tumu(vbool8_t mask,vint8m1_t merge,vint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vnclip_tumu(vbool4_t mask,vint8m2_t merge,vint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vnclip_tumu(vbool2_t mask,vint8m4_t merge,vint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vnclip_tumu(vbool64_t mask,vint16mf4_t merge,vint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vnclip_tumu(vbool32_t mask,vint16mf2_t merge,vint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vnclip_tumu(vbool16_t mask,vint16m1_t merge,vint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vnclip_tumu(vbool8_t mask,vint16m2_t merge,vint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vnclip_tumu(vbool4_t mask,vint16m4_t merge,vint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vnclip_tumu(vbool64_t mask,vint32mf2_t merge,vint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vnclip_tumu(vbool32_t mask,vint32m1_t merge,vint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vnclip_tumu(vbool16_t mask,vint32m2_t merge,vint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vnclip_tumu(vbool8_t mask,vint32m4_t merge,vint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclip_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnclip\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "30298fb30f3a893d419d0c560f7830a8e69bf0dc", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vv-1.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu(vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu(vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu(vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu(vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu(vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu(vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu(vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu(vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu(vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu(vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu(vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu(vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu(vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu(vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu(vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnclipu(vbool64_t mask,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu(vbool32_t mask,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu(vbool16_t mask,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu(vbool8_t mask,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu(vbool4_t mask,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu(vbool2_t mask,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu(vbool64_t mask,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu(vbool32_t mask,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu(vbool16_t mask,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu(vbool8_t mask,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu(vbool4_t mask,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu(vbool64_t mask,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu(vbool32_t mask,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu(vbool16_t mask,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu(vbool8_t mask,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "03d00d2f72cd52cabaf0bbdec8c563ec38360fbd", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vv-2.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu(vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu(vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu(vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu(vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu(vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu(vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu(vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu(vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu(vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu(vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu(vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu(vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu(vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu(vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu(vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnclipu(vbool64_t mask,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu(vbool32_t mask,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu(vbool16_t mask,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu(vbool8_t mask,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu(vbool4_t mask,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu(vbool2_t mask,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu(vbool64_t mask,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu(vbool32_t mask,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu(vbool16_t mask,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu(vbool8_t mask,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu(vbool4_t mask,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu(vbool64_t mask,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu(vbool32_t mask,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu(vbool16_t mask,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu(vbool8_t mask,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "4bb2c26b461f5ae40f9634d43b975f4a3c73394f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vv-3.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu(vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu(vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu(vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu(vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu(vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu(vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu(vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu(vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu(vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu(vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu(vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu(vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu(vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu(vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu(vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnclipu(vbool64_t mask,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu(vbool32_t mask,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu(vbool16_t mask,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu(vbool8_t mask,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu(vbool4_t mask,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu(vbool2_t mask,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu(vbool64_t mask,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu(vbool32_t mask,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu(vbool16_t mask,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu(vbool8_t mask,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu(vbool4_t mask,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu(vbool64_t mask,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu(vbool32_t mask,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu(vbool16_t mask,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu(vbool8_t mask,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "b21aca86b94bb934052a8cc2ad062a22bbf07802", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vv_mu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_mu-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_mu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_mu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_mu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_mu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_mu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_mu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_mu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_mu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_mu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_mu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_mu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_mu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_mu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_mu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_mu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "05a5a49002e86fb34b6c21ad78170e328bccf37d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vv_mu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_mu-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_mu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_mu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_mu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_mu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_mu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_mu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_mu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_mu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_mu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_mu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_mu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_mu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_mu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_mu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_mu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "276bad5e7a2542f275b1808be9960e41e851ef5a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vv_mu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_mu-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_mu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_mu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_mu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_mu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_mu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_mu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_mu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_mu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_mu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_mu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_mu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_mu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_mu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_mu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_mu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "38776eb647564e809ed77019dbf591513983a56f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vv_tu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tu-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tu(vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tu(vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tu(vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tu(vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tu(vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tu(vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tu(vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tu(vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tu(vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tu(vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tu(vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tu(vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tu(vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tu(vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tu(vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "5d8290060cf7b23910e4e519d507ad799775fbac", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vv_tu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tu-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tu(vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tu(vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tu(vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tu(vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tu(vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tu(vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tu(vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tu(vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tu(vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tu(vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tu(vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tu(vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tu(vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tu(vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tu(vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "605b1ce535d4490324bb63ed8aa7f236e9643051", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vv_tu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tu-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tu(vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tu(vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tu(vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tu(vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tu(vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tu(vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tu(vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tu(vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tu(vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tu(vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tu(vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tu(vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tu(vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tu(vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tu(vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 1 } } */"}, {"sha": "9c287f621e76491a73fbc53e066616245a0068da", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vv_tum-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tum-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tum(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tum(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tum(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tum(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tum(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tum(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tum(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tum(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tum(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tum(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tum(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tum(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tum(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tum(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tum(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "679a7833801d0a11762bd3109a443d5208ca7014", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vv_tum-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tum-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tum(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tum(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tum(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tum(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tum(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tum(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tum(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tum(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tum(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tum(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tum(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tum(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tum(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tum(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tum(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "31bb2762ed06803e6646a959afe4066f17abc0a5", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vv_tum-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tum-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tum(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tum(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tum(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tum(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tum(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tum(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tum(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tum(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tum(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tum(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tum(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tum(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tum(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tum(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tum(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "6ee4d3669ba2dbe47aa6417a099624e0899b806d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vv_tumu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tumu-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tumu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tumu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tumu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "4280d18d6e59f3ffcb993b7fe321b1de021f373d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vv_tumu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tumu-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tumu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tumu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tumu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "ebb20f5f3407d2dd54d6afdbdd2641d727dd9c07", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vv_tumu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vv_tumu-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,vuint8mf8_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,vuint8mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,vuint8mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,vuint8m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tumu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,vuint8m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tumu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,vuint8m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,vuint16mf4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,vuint16mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,vuint16m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,vuint16m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tumu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,vuint16m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,vuint32mf2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,vuint32m1_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,vuint32m2_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,vuint32m4_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "5ba9250e3793573a71a38cc9a083f2a811d1509a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vx-1.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu(vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu(vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu(vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu(vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu(vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu(vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu(vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu(vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu(vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu(vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu(vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu(vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu(vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu(vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu(vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnclipu(vbool64_t mask,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu(vbool32_t mask,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu(vbool16_t mask,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu(vbool8_t mask,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu(vbool4_t mask,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu(vbool2_t mask,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu(vbool64_t mask,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu(vbool32_t mask,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu(vbool16_t mask,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu(vbool8_t mask,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu(vbool4_t mask,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu(vbool64_t mask,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu(vbool32_t mask,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu(vbool16_t mask,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu(vbool8_t mask,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "fb3971b2c0db3c9d6a5d4ea6b378aceab6a35bd8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vx-2.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu(vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu(vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu(vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu(vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu(vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu(vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu(vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu(vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu(vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu(vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu(vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu(vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu(vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu(vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu(vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnclipu(vbool64_t mask,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu(vbool32_t mask,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu(vbool16_t mask,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu(vbool8_t mask,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu(vbool4_t mask,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu(vbool2_t mask,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu(vbool64_t mask,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu(vbool32_t mask,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu(vbool16_t mask,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu(vbool8_t mask,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu(vbool4_t mask,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu(vbool64_t mask,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu(vbool32_t mask,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu(vbool16_t mask,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu(vbool8_t mask,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "bb27942d6e97ec9bb360bfa5fb2b8dd845195d32", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vx-3.C", "status": "added", "additions": 216, "deletions": 0, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,216 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu(vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu(vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu(vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu(vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu(vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu(vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu(vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu(vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu(vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu(vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu(vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu(vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu(vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu(vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu(vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(op1,shift,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vnclipu(vbool64_t mask,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu(vbool32_t mask,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu(vbool16_t mask,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu(vbool8_t mask,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu(vbool4_t mask,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu(vbool2_t mask,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu(vbool64_t mask,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu(vbool32_t mask,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu(vbool16_t mask,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu(vbool8_t mask,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu(vbool4_t mask,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu(vbool64_t mask,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu(vbool32_t mask,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu(vbool16_t mask,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu(vbool8_t mask,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu(mask,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "03382f84e3200227a7cd204d818319d14ad6db0b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vx_mu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_mu-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_mu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_mu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_mu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_mu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_mu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_mu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_mu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_mu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_mu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_mu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_mu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_mu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_mu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_mu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_mu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "35161b6a112578ecd42ff74794c37207dd6a8542", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vx_mu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_mu-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_mu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_mu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_mu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_mu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_mu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_mu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_mu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_mu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_mu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_mu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_mu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_mu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_mu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_mu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_mu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "48c42cd084333d670e1cd98a95b0e38a298279c0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vx_mu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_mu-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_mu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_mu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_mu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_mu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_mu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_mu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_mu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_mu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_mu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_mu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_mu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_mu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_mu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_mu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_mu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_mu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "af6fcbe570407ea65cf283eff809d597821537d1", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vx_tu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tu-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tu(vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tu(vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tu(vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tu(vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tu(vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tu(vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tu(vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tu(vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tu(vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tu(vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tu(vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tu(vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tu(vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tu(vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tu(vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "df52f5d6a0120052ea4c1d129d6648d3fc3ee3b9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vx_tu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tu-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tu(vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tu(vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tu(vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tu(vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tu(vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tu(vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tu(vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tu(vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tu(vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tu(vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tu(vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tu(vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tu(vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tu(vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tu(vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "0256e1e54f98c2859a07fc6294a5c957ca07c29b", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vx_tu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tu-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tu(vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tu(vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tu(vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tu(vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tu(vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tu(vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tu(vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tu(vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tu(vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tu(vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tu(vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tu(vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tu(vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tu(vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tu(vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tu(merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 1 } } */"}, {"sha": "968249c02b02cd2f9c617c1669640803055b8970", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vx_tum-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tum-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tum(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tum(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tum(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tum(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tum(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tum(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tum(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tum(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tum(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tum(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tum(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tum(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tum(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tum(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tum(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "b92ea88db3853aea364566423263864f5f1af2be", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vx_tum-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tum-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tum(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tum(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tum(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tum(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tum(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tum(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tum(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tum(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tum(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tum(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tum(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tum(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tum(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tum(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tum(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "a589067c10a5dfaa7c4b2f62f3be96d1e5f4630a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vx_tum-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tum-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tum(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tum(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tum(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tum(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tum(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tum(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tum(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tum(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tum(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tum(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tum(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tum(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tum(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tum(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tum(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tum(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "ac72282995997590b121fa4e7b91fc3cefa3c3dd", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vx_tumu-1.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tumu-1.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tumu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tumu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tumu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "beae8ad5b3b47fa6b672c13be105898937db517a", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vx_tumu-2.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tumu-2.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tumu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tumu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tumu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}, {"sha": "7dd7ff05d1a3e8535b332e7d3bf51aaedf9cd187", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vnclipu_vx_tumu-3.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0906435e2b6d1f226679b6eac145d9f247559cdf/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvnclipu_vx_tumu-3.C?ref=0906435e2b6d1f226679b6eac145d9f247559cdf", "patch": "@@ -0,0 +1,111 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vuint8mf8_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint8mf8_t merge,vuint16mf4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint8mf4_t merge,vuint16mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint8mf2_t merge,vuint16m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint8m1_t merge,vuint16m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vnclipu_tumu(vbool4_t mask,vuint8m2_t merge,vuint16m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vnclipu_tumu(vbool2_t mask,vuint8m4_t merge,vuint16m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint16mf4_t merge,vuint32mf2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint16mf2_t merge,vuint32m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint16m1_t merge,vuint32m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint16m2_t merge,vuint32m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vnclipu_tumu(vbool4_t mask,vuint16m4_t merge,vuint32m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vnclipu_tumu(vbool64_t mask,vuint32mf2_t merge,vuint64m1_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vnclipu_tumu(vbool32_t mask,vuint32m1_t merge,vuint64m2_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vnclipu_tumu(vbool16_t mask,vuint32m2_t merge,vuint64m4_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vnclipu_tumu(vbool8_t mask,vuint32m4_t merge,vuint64m8_t op1,size_t shift,size_t vl)\n+{\n+    return __riscv_vnclipu_tumu(mask,merge,op1,shift,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vnclipu\\.wx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 1 } } */"}]}