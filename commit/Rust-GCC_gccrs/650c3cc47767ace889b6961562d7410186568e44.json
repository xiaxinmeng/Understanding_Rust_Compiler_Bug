{"sha": "650c3cc47767ace889b6961562d7410186568e44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUwYzNjYzQ3NzY3YWNlODg5YjY5NjE1NjJkNzQxMDE4NjU2OGU0NA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-06-19T13:42:22Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-06-19T13:42:22Z"}, "message": "2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h\n\t(_ARM_FPSCR): Add FZ field.\n\t(clean_results): Force FZ=1 on AArch64.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrecpe.c: New file.\n\nFrom-SVN: r224650", "tree": {"sha": "a467aec5a5afb0c746fc4d6a98b8faf091a49573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a467aec5a5afb0c746fc4d6a98b8faf091a49573"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/650c3cc47767ace889b6961562d7410186568e44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650c3cc47767ace889b6961562d7410186568e44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/650c3cc47767ace889b6961562d7410186568e44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650c3cc47767ace889b6961562d7410186568e44/comments", "author": null, "committer": null, "parents": [{"sha": "f6abd7f1b3550b0f958afcc867f4cdc7bc6b27ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6abd7f1b3550b0f958afcc867f4cdc7bc6b27ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6abd7f1b3550b0f958afcc867f4cdc7bc6b27ae"}], "stats": {"total": 180, "additions": 174, "deletions": 6}, "files": [{"sha": "9764d6da08bf3697555c57c7564a5f78e88e488c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650c3cc47767ace889b6961562d7410186568e44/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650c3cc47767ace889b6961562d7410186568e44/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=650c3cc47767ace889b6961562d7410186568e44", "patch": "@@ -1,3 +1,10 @@\n+2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h\n+\t(_ARM_FPSCR): Add FZ field.\n+\t(clean_results): Force FZ=1 on AArch64.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrecpe.c: New file.\n+\n 2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/pr62308.c: New test."}, {"sha": "4e728d5572c8e669bf6e175a07b6575cb6baf66d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650c3cc47767ace889b6961562d7410186568e44/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650c3cc47767ace889b6961562d7410186568e44/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Farm-neon-ref.h?ref=650c3cc47767ace889b6961562d7410186568e44", "patch": "@@ -235,7 +235,8 @@ extern ARRAY(expected, hfloat, 64, 2);\n \n typedef union {\n   struct {\n-    int _xxx:25;\n+    int _xxx:24;\n+    unsigned int FZ:1;\n     unsigned int DN:1;\n     unsigned int AHP:1;\n     unsigned int QC:1;\n@@ -258,7 +259,8 @@ typedef union {\n     unsigned int QC:1;\n     unsigned int AHP:1;\n     unsigned int DN:1;\n-    int _dnm:25;\n+    unsigned int FZ:1;\n+    int _dnm:24;\n   } b;\n   unsigned int word;\n } _ARM_FPSCR;\n@@ -395,10 +397,15 @@ static void clean_results (void)\n #if defined(__aarch64__)\n   /* On AArch64, make sure to return DefaultNaN to have the same\n      results as on AArch32.  */\n-  _ARM_FPSCR _afpscr_for_dn;\n-  asm volatile (\"mrs %0,fpcr\" : \"=r\" (_afpscr_for_dn));\n-  _afpscr_for_dn.b.DN = 1;\n-  asm volatile (\"msr fpcr,%0\" : : \"r\" (_afpscr_for_dn));\n+  _ARM_FPSCR _afpscr;\n+  asm volatile (\"mrs %0,fpcr\" : \"=r\" (_afpscr));\n+  _afpscr.b.DN = 1;\n+\n+  /* On AArch64, make sure to flush to zero by default, as on\n+     AArch32. */\n+  _afpscr.b.FZ = 1;\n+\n+  asm volatile (\"msr fpcr,%0\" : : \"r\" (_afpscr));\n #endif\n }\n "}, {"sha": "55b45b7a3b97926a64fa0547a98cf7c622961760", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrecpe.c", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/650c3cc47767ace889b6961562d7410186568e44/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecpe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/650c3cc47767ace889b6961562d7410186568e44/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecpe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrecpe.c?ref=650c3cc47767ace889b6961562d7410186568e44", "patch": "@@ -0,0 +1,154 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+#include <math.h>\n+\n+/* Expected results with positive input.  */\n+VECT_VAR_DECL(expected_positive,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_positive,uint,32,4) [] = { 0xbf000000, 0xbf000000,\n+\t\t\t\t\t\t  0xbf000000, 0xbf000000 };\n+VECT_VAR_DECL(expected_positive,hfloat,32,2) [] = { 0x3f068000, 0x3f068000 };\n+VECT_VAR_DECL(expected_positive,hfloat,32,4) [] = { 0x3c030000, 0x3c030000,\n+\t\t\t\t\t\t    0x3c030000, 0x3c030000 };\n+\n+/* Expected results with negative input.  */\n+VECT_VAR_DECL(expected_negative,uint,32,2) [] = { 0x80000000, 0x80000000 };\n+VECT_VAR_DECL(expected_negative,uint,32,4) [] = { 0xee800000, 0xee800000,\n+\t\t\t\t\t\t  0xee800000, 0xee800000 };\n+VECT_VAR_DECL(expected_negative,hfloat,32,2) [] = { 0xbdcc8000, 0xbdcc8000 };\n+VECT_VAR_DECL(expected_negative,hfloat,32,4) [] = { 0xbc030000, 0xbc030000,\n+\t\t\t\t\t\t    0xbc030000, 0xbc030000 };\n+\n+/* Expected results with FP special values (NaN, infinity).  */\n+VECT_VAR_DECL(expected_fp1,hfloat,32,2) [] = { 0x7fc00000, 0x7fc00000 };\n+VECT_VAR_DECL(expected_fp1,hfloat,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+/* Expected results with FP special values (zero, large value).  */\n+VECT_VAR_DECL(expected_fp2,hfloat,32,2) [] = { 0x7f800000, 0x7f800000 };\n+VECT_VAR_DECL(expected_fp2,hfloat,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+/* Expected results with FP special values (-0, -infinity).  */\n+VECT_VAR_DECL(expected_fp3,hfloat,32,2) [] = { 0xff800000, 0xff800000 };\n+VECT_VAR_DECL(expected_fp3,hfloat,32,4) [] = { 0x80000000, 0x80000000,\n+\t\t\t\t\t       0x80000000, 0x80000000 };\n+\n+/* Expected results with FP special large negative value.  */\n+VECT_VAR_DECL(expected_fp4,hfloat,32,2) [] = { 0x80000000, 0x80000000 };\n+\n+#define TEST_MSG \"VRECPE/VRECPEQ\"\n+void exec_vrecpe(void)\n+{\n+  int i;\n+\n+  /* Basic test: y=vrecpe(x), then store the result.  */\n+#define TEST_VRECPE(Q, T1, T2, W, N)\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\\\n+    vrecpe##Q##_##T2##W(VECT_VAR(vector, T1, W, N));\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N),\t\t\\\n+\t\t    VECT_VAR(vector_res, T1, W, N))\n+\n+  /* No need for 64 bits variants.  */\n+  DECL_VARIABLE(vector, uint, 32, 2);\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector, float, 32, 2);\n+  DECL_VARIABLE(vector, float, 32, 4);\n+\n+  DECL_VARIABLE(vector_res, uint, 32, 2);\n+  DECL_VARIABLE(vector_res, uint, 32, 4);\n+  DECL_VARIABLE(vector_res, float, 32, 2);\n+  DECL_VARIABLE(vector_res, float, 32, 4);\n+\n+  clean_results ();\n+\n+  /* Choose init value arbitrarily, positive.  */\n+  VDUP(vector, , uint, u, 32, 2, 0x12345678);\n+  VDUP(vector, , float, f, 32, 2, 1.9f);\n+  VDUP(vector, q, uint, u, 32, 4, 0xABCDEF10);\n+  VDUP(vector, q, float, f, 32, 4, 125.0f);\n+\n+  /* Apply the operator.  */\n+  TEST_VRECPE(, uint, u, 32, 2);\n+  TEST_VRECPE(, float, f, 32, 2);\n+  TEST_VRECPE(q, uint, u, 32, 4);\n+  TEST_VRECPE(q, float, f, 32, 4);\n+\n+#define CMT \" (positive input)\"\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_positive, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_positive, CMT);\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_positive, CMT);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_positive, CMT);\n+\n+  /* Choose init value arbitrarily,negative.  */\n+  VDUP(vector, , uint, u, 32, 2, 0xFFFFFFFF);\n+  VDUP(vector, , float, f, 32, 2, -10.0f);\n+  VDUP(vector, q, uint, u, 32, 4, 0x89081234);\n+  VDUP(vector, q, float, f, 32, 4, -125.0f);\n+\n+  /* Apply the operator.  */\n+  TEST_VRECPE(, uint, u, 32, 2);\n+  TEST_VRECPE(, float, f, 32, 2);\n+  TEST_VRECPE(q, uint, u, 32, 4);\n+  TEST_VRECPE(q, float, f, 32, 4);\n+\n+#undef CMT\n+#define CMT \" (negative input)\"\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_negative, CMT);\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected_negative, CMT);\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_negative, CMT);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_negative, CMT);\n+\n+  /* Test FP variants with special input values (NaN, infinity).  */\n+  VDUP(vector, , float, f, 32, 2, NAN);\n+  VDUP(vector, q, float, f, 32, 4, HUGE_VALF);\n+\n+  /* Apply the operator.  */\n+  TEST_VRECPE(, float, f, 32, 2);\n+  TEST_VRECPE(q, float, f, 32, 4);\n+\n+#undef CMT\n+#define CMT \" FP special (NaN, infinity)\"\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp1, CMT);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp1, CMT);\n+\n+  /* Test FP variants with special input values (zero, large value).  */\n+  VDUP(vector, , float, f, 32, 2, 0.0f);\n+  VDUP(vector, q, float, f, 32, 4, 8.97229e37f /*9.0e37f*/);\n+\n+  /* Apply the operator.  */\n+  TEST_VRECPE(, float, f, 32, 2);\n+  TEST_VRECPE(q, float, f, 32, 4);\n+\n+#undef CMT\n+#define CMT \" FP special (zero, large value)\"\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp2, CMT);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp2, CMT);\n+\n+  /* Test FP variants with special input values (-0, -infinity).  */\n+  VDUP(vector, , float, f, 32, 2, -0.0f);\n+  VDUP(vector, q, float, f, 32, 4, -HUGE_VALF);\n+\n+  /* Apply the operator.  */\n+  TEST_VRECPE(, float, f, 32, 2);\n+  TEST_VRECPE(q, float, f, 32, 4);\n+\n+#undef CMT\n+#define CMT \" FP special (-0, -infinity)\"\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp3, CMT);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_fp3, CMT);\n+\n+  /* Test FP variants with special input values (large negative value).  */\n+  VDUP(vector, , float, f, 32, 2, -9.0e37f);\n+\n+  /* Apply the operator.  */\n+  TEST_VRECPE(, float, f, 32, 2);\n+\n+#undef CMT\n+#define CMT \" FP special (large negative value)\"\n+  CHECK_FP(TEST_MSG, float, 32, 2, PRIx32, expected_fp4, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vrecpe ();\n+  return 0;\n+}"}]}