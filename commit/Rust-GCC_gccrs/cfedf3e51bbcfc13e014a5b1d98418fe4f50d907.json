{"sha": "cfedf3e51bbcfc13e014a5b1d98418fe4f50d907", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZlZGYzZTUxYmJjZmMxM2UwMTRhNWIxZDk4NDE4ZmU0ZjUwZDkwNw==", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2019-12-13T09:04:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-13T09:04:38Z"}, "message": "[Ada] Implement AI12-0109 (prohibit some \"early\" derivations)\n\n2019-12-13  Steve Baird  <baird@adacore.com>\n\ngcc/ada/\n\n\t* einfo.ads: Correct comment for Derived_Type_Link to reflect\n\tthat fact that this function is now used for more than just\n\tgeneration of warnings.\n\t* sem_ch3.adb (Build_Derived_Type): Do not call\n\tSet_Derived_Type_Link if the derived type and the parent type\n\tare in different compilation units. Such a derivation cannot be\n\ta problematic \"early\" derivation (identifying these is what the\n\tDerived_Type_Link attribute is used for) and we don't like\n\tinter-unit references that go in the opposite direction of\n\tsemantic dependencies.\n\t* sem_ch13.adb (Is_Type_Related_Rep_Item): A new function,\n\tanalogous to the existing function Is_Operational_Item.\n\t(Rep_Item_Too_Late): Generate a hard error (with same text as\n\tthe warning that was previously being generated) if the\n\tAI12-0109 legality rule is violated.\n\nFrom-SVN: r279355", "tree": {"sha": "6fc4cb3aad05c1d410c763da1bce66640c1caf4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fc4cb3aad05c1d410c763da1bce66640c1caf4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfedf3e51bbcfc13e014a5b1d98418fe4f50d907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfedf3e51bbcfc13e014a5b1d98418fe4f50d907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfedf3e51bbcfc13e014a5b1d98418fe4f50d907", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfedf3e51bbcfc13e014a5b1d98418fe4f50d907/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "63e21a7237fac8dfedda51cc7f4089e8c07a25e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63e21a7237fac8dfedda51cc7f4089e8c07a25e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63e21a7237fac8dfedda51cc7f4089e8c07a25e9"}], "stats": {"total": 154, "additions": 129, "deletions": 25}, "files": [{"sha": "69176db196a4d9d117e84e790a939be98866b243", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfedf3e51bbcfc13e014a5b1d98418fe4f50d907/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfedf3e51bbcfc13e014a5b1d98418fe4f50d907/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cfedf3e51bbcfc13e014a5b1d98418fe4f50d907", "patch": "@@ -1,3 +1,21 @@\n+2019-12-13  Steve Baird  <baird@adacore.com>\n+\n+\t* einfo.ads: Correct comment for Derived_Type_Link to reflect\n+\tthat fact that this function is now used for more than just\n+\tgeneration of warnings.\n+\t* sem_ch3.adb (Build_Derived_Type): Do not call\n+\tSet_Derived_Type_Link if the derived type and the parent type\n+\tare in different compilation units. Such a derivation cannot be\n+\ta problematic \"early\" derivation (identifying these is what the\n+\tDerived_Type_Link attribute is used for) and we don't like\n+\tinter-unit references that go in the opposite direction of\n+\tsemantic dependencies.\n+\t* sem_ch13.adb (Is_Type_Related_Rep_Item): A new function,\n+\tanalogous to the existing function Is_Operational_Item.\n+\t(Rep_Item_Too_Late): Generate a hard error (with same text as\n+\tthe warning that was previously being generated) if the\n+\tAI12-0109 legality rule is violated.\n+\n 2019-12-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* doc/gnat_rm/implementation_defined_pragmas.rst: Minor tweak to"}, {"sha": "0aa7e00e899220d51c026697d70d788422cabe58", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfedf3e51bbcfc13e014a5b1d98418fe4f50d907/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfedf3e51bbcfc13e014a5b1d98418fe4f50d907/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=cfedf3e51bbcfc13e014a5b1d98418fe4f50d907", "patch": "@@ -929,12 +929,12 @@ package Einfo is\n --\n --       In this case, if primitive operations have been declared for R, at\n --       the point of declaration of G, then the Derived_Type_Link of R is set\n---       to point to the entity for G. This is used to generate warnings for\n---       rep clauses that appear later on for R, which might result in an\n---       unexpected implicit conversion operation.\n+--       to point to the entity for G. This is used to generate warnings and\n+--       errors for rep clauses that appear later on for R, which might result\n+--       in an unexpected (or illegal) implicit conversion operation.\n --\n --       Note: if there is more than one such derived type, the link will point\n---       to the last one (this is only used in generating warning messages).\n+--       to the last one.\n \n --    Designated_Type (synthesized)\n --       Applies to access types. Returns the designated type. Differs from"}, {"sha": "b2b9efa2978e4a8b055f80a48894d648ad8277a9", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 96, "deletions": 18, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfedf3e51bbcfc13e014a5b1d98418fe4f50d907/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfedf3e51bbcfc13e014a5b1d98418fe4f50d907/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=cfedf3e51bbcfc13e014a5b1d98418fe4f50d907", "patch": "@@ -154,6 +154,10 @@ package body Sem_Ch13 is\n    --  that do not specify a representation characteristic are operational\n    --  attributes.\n \n+   function Is_Type_Related_Rep_Item (N : Node_Id) return Boolean;\n+   --  Returns True for a representation clause/pragma that specifies a\n+   --  type-related representation (as opposed to operational) aspect.\n+\n    function Is_Predicate_Static\n      (Expr : Node_Id;\n       Nam  : Name_Id) return Boolean;\n@@ -12282,6 +12286,59 @@ package body Sem_Ch13 is\n       end if;\n    end Is_Predicate_Static;\n \n+   ------------------------------\n+   -- Is_Type_Related_Rep_Item --\n+   ------------------------------\n+\n+   function Is_Type_Related_Rep_Item (N : Node_Id) return Boolean is\n+   begin\n+      case Nkind (N) is\n+         when N_Attribute_Definition_Clause =>\n+            declare\n+               Id : constant Attribute_Id := Get_Attribute_Id (Chars (N));\n+               --  See AARM 13.1(8.f-8.x) list items that end in \"clause\"\n+               --  ???: include any GNAT-defined attributes here?\n+            begin\n+               return    Id = Attribute_Component_Size\n+                 or else Id = Attribute_Bit_Order\n+                 or else Id = Attribute_Storage_Pool\n+                 or else Id = Attribute_Stream_Size\n+                 or else Id = Attribute_Machine_Radix;\n+            end;\n+\n+         when N_Pragma =>\n+            case Get_Pragma_Id (N) is\n+               --  See AARM 13.1(8.f-8.x) list items that start with \"pragma\"\n+               --  ???: include any GNAT-defined pragmas here?\n+               when Pragma_Pack\n+                  | Pragma_Import\n+                  | Pragma_Export\n+                  | Pragma_Convention\n+                  | Pragma_Atomic\n+                  | Pragma_Independent\n+                  | Pragma_Volatile\n+                  | Pragma_Atomic_Components\n+                  | Pragma_Independent_Components\n+                  | Pragma_Volatile_Components\n+                  | Pragma_Discard_Names\n+               =>\n+                  return True;\n+               when others =>\n+                  null;\n+            end case;\n+\n+         when N_Enumeration_Representation_Clause\n+            | N_Record_Representation_Clause\n+         =>\n+            return True;\n+\n+         when others =>\n+            null;\n+      end case;\n+\n+      return False;\n+   end Is_Type_Related_Rep_Item;\n+\n    ---------------------\n    -- Kill_Rep_Clause --\n    ---------------------\n@@ -12964,7 +13021,7 @@ package body Sem_Ch13 is\n       end if;\n \n       --  No error, but one more warning to consider. The RM (surprisingly)\n-      --  allows this pattern:\n+      --  allows this pattern in some cases:\n \n       --    type S is ...\n       --    primitive operations for S\n@@ -12973,34 +13030,55 @@ package body Sem_Ch13 is\n \n       --  Meaning that calls on the primitive operations of S for values of\n       --  type R may require possibly expensive implicit conversion operations.\n-      --  This is not an error, but is worth a warning.\n+      --  So even when this is not an error, it is still worth a warning.\n \n       if not Relaxed_RM_Semantics and then Is_Type (T) then\n          declare\n             DTL : constant Entity_Id := Derived_Type_Link (Base_Type (T));\n \n          begin\n             if Present (DTL)\n-              and then Has_Primitive_Operations (Base_Type (T))\n \n-              --  For now, do not generate this warning for the case of aspect\n-              --  specification using Ada 2012 syntax, since we get wrong\n-              --  messages we do not understand. The whole business of derived\n-              --  types and rep items seems a bit confused when aspects are\n-              --  used, since the aspects are not evaluated till freeze time.\n+              --  For now, do not generate this warning for the case of\n+              --  aspect specification using Ada 2012 syntax, since we get\n+              --  wrong messages we do not understand. The whole business\n+              --  of derived types and rep items seems a bit confused when\n+              --  aspects are used, since the aspects are not evaluated\n+              --  till freeze time. However, AI12-0109 confirms (in an AARM\n+              --  ramification) that inheritance in this case is required\n+              --  to work.\n \n               and then not From_Aspect_Specification (N)\n             then\n-               Error_Msg_Sloc := Sloc (DTL);\n-               Error_Msg_N\n-                 (\"representation item for& appears after derived type \"\n-                  & \"declaration#??\", N);\n-               Error_Msg_NE\n-                 (\"\\may result in implicit conversions for primitive \"\n-                  & \"operations of&??\", N, T);\n-               Error_Msg_NE\n-                 (\"\\to change representations when called with arguments \"\n-                  & \"of type&??\", N, DTL);\n+               if Is_By_Reference_Type (T)\n+                 and then not Is_Tagged_Type (T)\n+                 and then Is_Type_Related_Rep_Item (N)\n+                 and then (Ada_Version >= Ada_2012\n+                            or else Has_Primitive_Operations (Base_Type (T)))\n+               then\n+                  --  Treat as hard error (AI12-0109, binding interpretation).\n+                  --  Implementing a change of representation is not really\n+                  --  an option in the case of a by-reference type, so we\n+                  --  take this path for all Ada dialects if primitive\n+                  --  operations are present.\n+                  Error_Msg_Sloc := Sloc (DTL);\n+                  Error_Msg_N\n+                    (\"representation item for& appears after derived type \"\n+                     & \"declaration#\", N);\n+\n+               elsif Has_Primitive_Operations (Base_Type (T)) then\n+                  Error_Msg_Sloc := Sloc (DTL);\n+\n+                  Error_Msg_N\n+                    (\"representation item for& appears after derived type \"\n+                     & \"declaration#??\", N);\n+                  Error_Msg_NE\n+                    (\"\\may result in implicit conversions for primitive \"\n+                     & \"operations of&??\", N, T);\n+                  Error_Msg_NE\n+                    (\"\\to change representations when called with arguments \"\n+                     & \"of type&??\", N, DTL);\n+               end if;\n             end if;\n          end;\n       end if;"}, {"sha": "9554c3334f6e85d9d1bf0a04374be2caa07dfbe8", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfedf3e51bbcfc13e014a5b1d98418fe4f50d907/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfedf3e51bbcfc13e014a5b1d98418fe4f50d907/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=cfedf3e51bbcfc13e014a5b1d98418fe4f50d907", "patch": "@@ -9741,9 +9741,17 @@ package body Sem_Ch3 is\n            (Derived_Type, No_Tagged_Streams_Pragma (Parent_Type));\n       end if;\n \n-      --  If the parent has primitive routines, set the derived type link\n-\n-      if Has_Primitive_Operations (Parent_Type) then\n+      --  If the parent has primitive routines and may have not-seen-yet aspect\n+      --  specifications (e.g., a Pack pragma), then set the derived type link\n+      --  in order to later diagnose \"early derivation\" issues. If in different\n+      --  compilation units, then \"early derivation\" cannot be an issue (and we\n+      --  don't like interunit references that go in the opposite direction of\n+      --  semantic dependencies).\n+\n+      if Has_Primitive_Operations (Parent_Type)\n+         and then Enclosing_Comp_Unit_Node (Parent_Type) =\n+           Enclosing_Comp_Unit_Node (Derived_Type)\n+      then\n          Set_Derived_Type_Link (Parent_Base, Derived_Type);\n       end if;\n "}]}