{"sha": "2498a6abcc83bcad1d33249f9a15b32daade2595", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ5OGE2YWJjYzgzYmNhZDFkMzMyNDlmOWExNWIzMmRhYWRlMjU5NQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2019-01-03T15:08:25Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2019-01-03T15:08:25Z"}, "message": "[nvptx] Factor out populate_offload_attrs\n\nFactor out populate_offload_attrs from nvptx_reorg.\n\n2019-01-03  Tom de Vries  <tdevries@suse.de>\n\n\t* config/nvptx/nvptx.c (struct offload_attrs): New.\n\t(populate_offload_attrs): New function.  Factor mask extraction out of\n\tnvptx_reorg.  Add extraction of dimensions.\n\t(nvptx_reorg): Use populate_offload_attrs.\n\nFrom-SVN: r267557", "tree": {"sha": "a02974b3531102b38cb1fd6946dd9484cf4ec424", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a02974b3531102b38cb1fd6946dd9484cf4ec424"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2498a6abcc83bcad1d33249f9a15b32daade2595", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2498a6abcc83bcad1d33249f9a15b32daade2595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2498a6abcc83bcad1d33249f9a15b32daade2595", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2498a6abcc83bcad1d33249f9a15b32daade2595/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b1716079db6646bd77967bb383d2da1e375694f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1716079db6646bd77967bb383d2da1e375694f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b1716079db6646bd77967bb383d2da1e375694f"}], "stats": {"total": 70, "additions": 57, "deletions": 13}, "files": [{"sha": "1b57031801ba30137323aa84bd32f7beabe35102", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2498a6abcc83bcad1d33249f9a15b32daade2595/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2498a6abcc83bcad1d33249f9a15b32daade2595/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2498a6abcc83bcad1d33249f9a15b32daade2595", "patch": "@@ -1,3 +1,10 @@\n+2019-01-03  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.c (struct offload_attrs): New.\n+\t(populate_offload_attrs): New function.  Factor mask extraction out of\n+\tnvptx_reorg.  Add extraction of dimensions.\n+\t(nvptx_reorg): Use populate_offload_attrs.\n+\n 2019-01-03  Tom de Vries  <tdevries@suse.de>\n \n \t* config/nvptx/nvptx.c (nvptx_goacc_validate_dims_1): Add early-out"}, {"sha": "15425337939088444e042ea5907cdd4fe0f22fe4", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 50, "deletions": 13, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2498a6abcc83bcad1d33249f9a15b32daade2595/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2498a6abcc83bcad1d33249f9a15b32daade2595/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=2498a6abcc83bcad1d33249f9a15b32daade2595", "patch": "@@ -2873,6 +2873,16 @@ nvptx_reorg_uniform_simt ()\n     }\n }\n \n+/* Offloading function attributes.  */\n+\n+struct offload_attrs\n+{\n+  unsigned mask;\n+  int num_gangs;\n+  int num_workers;\n+  int vector_length;\n+};\n+\n /* Loop structure of the function.  The entire function is described as\n    a NULL loop.  */\n \n@@ -4576,6 +4586,41 @@ nvptx_neuter_pars (parallel *par, unsigned modes, unsigned outer)\n     nvptx_neuter_pars (par->next, modes, outer);\n }\n \n+static void\n+populate_offload_attrs (offload_attrs *oa)\n+{\n+  tree attr = oacc_get_fn_attrib (current_function_decl);\n+  tree dims = TREE_VALUE (attr);\n+  unsigned ix;\n+\n+  oa->mask = 0;\n+\n+  for (ix = 0; ix != GOMP_DIM_MAX; ix++, dims = TREE_CHAIN (dims))\n+    {\n+      tree t = TREE_VALUE (dims);\n+      int size = (t == NULL_TREE) ? -1 : TREE_INT_CST_LOW (t);\n+      tree allowed = TREE_PURPOSE (dims);\n+\n+      if (size != 1 && !(allowed && integer_zerop (allowed)))\n+\toa->mask |= GOMP_DIM_MASK (ix);\n+\n+      switch (ix)\n+\t{\n+\tcase GOMP_DIM_GANG:\n+\t  oa->num_gangs = size;\n+\t  break;\n+\n+\tcase GOMP_DIM_WORKER:\n+\t  oa->num_workers = size;\n+\t  break;\n+\n+\tcase GOMP_DIM_VECTOR:\n+\t  oa->vector_length = size;\n+\t  break;\n+\t}\n+    }\n+}\n+\n #if WORKAROUND_PTXJIT_BUG_2\n /* Variant of pc_set that only requires JUMP_P (INSN) if STRICT.  This variant\n    is needed in the nvptx target because the branches generated for\n@@ -4757,27 +4802,19 @@ nvptx_reorg (void)\n     {\n       /* If we determined this mask before RTL expansion, we could\n \t elide emission of some levels of forks and joins.  */\n-      unsigned mask = 0;\n-      tree dims = TREE_VALUE (attr);\n-      unsigned ix;\n+      offload_attrs oa;\n \n-      for (ix = 0; ix != GOMP_DIM_MAX; ix++, dims = TREE_CHAIN (dims))\n-\t{\n-\t  int size = TREE_INT_CST_LOW (TREE_VALUE (dims));\n-\t  tree allowed = TREE_PURPOSE (dims);\n+      populate_offload_attrs (&oa);\n \n-\t  if (size != 1 && !(allowed && integer_zerop (allowed)))\n-\t    mask |= GOMP_DIM_MASK (ix);\n-\t}\n       /* If there is worker neutering, there must be vector\n \t neutering.  Otherwise the hardware will fail.  */\n-      gcc_assert (!(mask & GOMP_DIM_MASK (GOMP_DIM_WORKER))\n-\t\t  || (mask & GOMP_DIM_MASK (GOMP_DIM_VECTOR)));\n+      gcc_assert (!(oa.mask & GOMP_DIM_MASK (GOMP_DIM_WORKER))\n+\t\t  || (oa.mask & GOMP_DIM_MASK (GOMP_DIM_VECTOR)));\n \n       /* Discover & process partitioned regions.  */\n       parallel *pars = nvptx_discover_pars (&bb_insn_map);\n       nvptx_process_pars (pars);\n-      nvptx_neuter_pars (pars, mask, 0);\n+      nvptx_neuter_pars (pars, oa.mask, 0);\n       delete pars;\n     }\n "}]}