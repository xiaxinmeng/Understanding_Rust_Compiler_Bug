{"sha": "e159c0aa10e50c292a534535c73f38d22b6129a8", "node_id": "C_kwDOANBUbNoAKGUxNTljMGFhMTBlNTBjMjkyYTUzNDUzNWM3M2YzOGQyMmI2MTI5YTg", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-09-28T15:13:26Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-09-28T15:13:26Z"}, "message": "aarch64: Add command-line support for Armv8.7-a\n\nThis patch adds support for -march=armv8.7-a in GCC.\nIt adds the +ls64 extension that's included in this architecture revision.\nCurrently this is just the command-line option and +ls64 allows the relevant instructions\nto be used in inline assembly. The ACLE defines some intrinsics for them but those can be\nadded separately later (together with the appropriate __ARM_FEATURE_* predefine).\n\n2021-09-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/aarch64/aarch64.h (AARCH64_FL_LS64): Define\n\t(AARCH64_FL_V8_7): Likewise.\n\t(AARCH64_FL_FOR_ARCH8_7): Likewise.\n\t* config/aarch64/aarch64-arches.def (armv8.7-a): Define.\n\t* config/aarch64/aarch64-option-extensions.def (ls64): Define.\n\t* doc/invoke.texi: Document the above.", "tree": {"sha": "3e2373c9a6a2923d39dacd0cbb92e6cd93cf5430", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e2373c9a6a2923d39dacd0cbb92e6cd93cf5430"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e159c0aa10e50c292a534535c73f38d22b6129a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e159c0aa10e50c292a534535c73f38d22b6129a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e159c0aa10e50c292a534535c73f38d22b6129a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e159c0aa10e50c292a534535c73f38d22b6129a8/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0400ca17f361dcc7f8230bb69a25de22497c73c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0400ca17f361dcc7f8230bb69a25de22497c73c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0400ca17f361dcc7f8230bb69a25de22497c73c3"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "91410e36fae51a5c096f717fff81ac3110a20a5c", "filename": "gcc/config/aarch64/aarch64-arches.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e159c0aa10e50c292a534535c73f38d22b6129a8/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e159c0aa10e50c292a534535c73f38d22b6129a8/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-arches.def?ref=e159c0aa10e50c292a534535c73f38d22b6129a8", "patch": "@@ -37,6 +37,7 @@ AARCH64_ARCH(\"armv8.3-a\",     generic,\t     8_3A,\t8,  AARCH64_FL_FOR_ARCH8_3)\n AARCH64_ARCH(\"armv8.4-a\",     generic,\t     8_4A,\t8,  AARCH64_FL_FOR_ARCH8_4)\n AARCH64_ARCH(\"armv8.5-a\",     generic,\t     8_5A,\t8,  AARCH64_FL_FOR_ARCH8_5)\n AARCH64_ARCH(\"armv8.6-a\",     generic,\t     8_6A,\t8,  AARCH64_FL_FOR_ARCH8_6)\n+AARCH64_ARCH(\"armv8.7-a\",     generic,       8_7A,      8,  AARCH64_FL_FOR_ARCH8_7)\n AARCH64_ARCH(\"armv8-r\",       generic,\t     8R  ,\t8,  AARCH64_FL_FOR_ARCH8_R)\n \n #undef AARCH64_ARCH"}, {"sha": "b61f1df9019e655503f03c9a5aa4ecffa658d0fd", "filename": "gcc/config/aarch64/aarch64-option-extensions.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e159c0aa10e50c292a534535c73f38d22b6129a8/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e159c0aa10e50c292a534535c73f38d22b6129a8/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-option-extensions.def?ref=e159c0aa10e50c292a534535c73f38d22b6129a8", "patch": "@@ -232,4 +232,7 @@ AARCH64_OPT_EXTENSION(\"flagm\", AARCH64_FL_FLAGM, 0, 0, false, \"flagm\")\n /* Enabling/Disabling \"pauth\" only changes \"pauth\".  */\n AARCH64_OPT_EXTENSION(\"pauth\", AARCH64_FL_PAUTH, 0, 0, false, \"paca pacg\")\n \n+/* Enabling/Disabling \"ls64\" only changes \"ls64\".  */\n+AARCH64_OPT_EXTENSION(\"ls64\", AARCH64_FL_LS64, 0, 0, false, \"\")\n+\n #undef AARCH64_OPT_EXTENSION"}, {"sha": "0c172c7bf6c0693336e215d20c99291ecba39e99", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e159c0aa10e50c292a534535c73f38d22b6129a8/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e159c0aa10e50c292a534535c73f38d22b6129a8/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=e159c0aa10e50c292a534535c73f38d22b6129a8", "patch": "@@ -231,6 +231,12 @@ extern unsigned aarch64_architecture_version;\n /* Pointer Authentication (PAUTH) extension.  */\n #define AARCH64_FL_PAUTH      (1ULL << 40)\n \n+/* 64-byte atomic load/store extensions.  */\n+#define AARCH64_FL_LS64      (1ULL << 41)\n+\n+/* Armv8.7-a architecture extensions.  */\n+#define AARCH64_FL_V8_7       (1ULL << 42)\n+\n /* Has FP and SIMD.  */\n #define AARCH64_FL_FPSIMD     (AARCH64_FL_FP | AARCH64_FL_SIMD)\n \n@@ -255,6 +261,9 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_FL_FOR_ARCH8_6\t\t\t\\\n   (AARCH64_FL_FOR_ARCH8_5 | AARCH64_FL_V8_6 | AARCH64_FL_FPSIMD \\\n    | AARCH64_FL_I8MM | AARCH64_FL_BF16)\n+#define AARCH64_FL_FOR_ARCH8_7\t\t\t\\\n+  (AARCH64_FL_FOR_ARCH8_6 | AARCH64_FL_V8_7 | AARCH64_FL_LS64)\n+\n #define AARCH64_FL_FOR_ARCH8_R     \\\n   (AARCH64_FL_FOR_ARCH8_4 | AARCH64_FL_V8_R)\n "}, {"sha": "5b0161669721842c8a9e76667076cfab9e4cff40", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e159c0aa10e50c292a534535c73f38d22b6129a8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e159c0aa10e50c292a534535c73f38d22b6129a8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e159c0aa10e50c292a534535c73f38d22b6129a8", "patch": "@@ -18570,6 +18570,7 @@ and the features that they enable by default:\n @item @samp{armv8.4-a} @tab Armv8.4-A @tab @samp{armv8.3-a}, @samp{+flagm}, @samp{+fp16fml}, @samp{+dotprod}\n @item @samp{armv8.5-a} @tab Armv8.5-A @tab @samp{armv8.4-a}, @samp{+sb}, @samp{+ssbs}, @samp{+predres}\n @item @samp{armv8.6-a} @tab Armv8.6-A @tab @samp{armv8.5-a}, @samp{+bf16}, @samp{+i8mm}\n+@item @samp{armv8.7-a} @tab Armv8.7-a @tab @samp{armv8.6-a}, @samp{+ls64}\n @item @samp{armv8-r} @tab Armv8-R @tab @samp{armv8-r}\n @end multitable\n \n@@ -18856,6 +18857,9 @@ Enable brain half-precision floating-point instructions.  This also enables\n Advanced SIMD and floating-point instructions.  This option is enabled by\n default for @option{-march=armv8.6-a}.  Use of this option with architectures\n prior to Armv8.2-A is not supported.\n+@item ls64\n+Enable the 64-byte atomic load and store instructions for accelerators.\n+This option is enabled by default for @option{-march=armv8.7-a}.\n @item flagm\n Enable the Flag Manipulation instructions Extension.\n @item pauth"}]}