{"sha": "a4219ac7406c41efb439fa8690b634291f7a9d53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQyMTlhYzc0MDZjNDFlZmI0MzlmYTg2OTBiNjM0MjkxZjdhOWQ1Mw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-29T04:26:19Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-06-29T04:26:19Z"}, "message": "(initializer_constant_valid_p): Allow CONVERT_EXPR if its operand is ok.\n\n(build_c_cast): For cast to union, make a CONSTRUCTOR.\n\nFrom-SVN: r1331", "tree": {"sha": "aea9455e16ba3df621ae61e3b6e94c2172a2c8ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aea9455e16ba3df621ae61e3b6e94c2172a2c8ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4219ac7406c41efb439fa8690b634291f7a9d53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4219ac7406c41efb439fa8690b634291f7a9d53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4219ac7406c41efb439fa8690b634291f7a9d53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4219ac7406c41efb439fa8690b634291f7a9d53/comments", "author": null, "committer": null, "parents": [{"sha": "fc54f375900259ca0c837741911e72233188b555", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc54f375900259ca0c837741911e72233188b555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc54f375900259ca0c837741911e72233188b555"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "4db8fbd700787eb938d91b0723a616d177c6cb9c", "filename": "gcc/c-decl.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4219ac7406c41efb439fa8690b634291f7a9d53/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4219ac7406c41efb439fa8690b634291f7a9d53/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=a4219ac7406c41efb439fa8690b634291f7a9d53", "patch": "@@ -1227,6 +1227,23 @@ duplicate_decls (newdecl, olddecl)\n \t  TREE_THIS_VOLATILE (newdecl) |= TREE_THIS_VOLATILE (olddecl);\n \t}\n     }\n+  /* Permit char *foo () to match void *foo (...) if not pedantic.  */\n+  else if (!types_match\n+\t   && TREE_CODE (olddecl) == FUNCTION_DECL\n+\t   && TREE_CODE (newdecl) == FUNCTION_DECL\n+\t   && TREE_CODE (TREE_TYPE (olddecl)) == POINTER_TYPE\n+\t   && TREE_CODE (TREE_TYPE (newdecl)) == POINTER_TYPE\n+\t   && ((TREE_TYPE (TREE_TYPE (newdecl)) == void_type_node\n+\t\t&& TYPE_ARG_TYPES (TREE_TYPE (olddecl)) == 0\n+\t\t&& TREE_TYPE (TREE_TYPE (olddecl)) == char_type_node)\n+\t       ||\n+\t       (TREE_TYPE (TREE_TYPE (newdecl)) == char_type_node\n+\t\t&& TYPE_ARG_TYPES (TREE_TYPE (newdecl)) == 0\n+\t\t&& TREE_TYPE (TREE_TYPE (olddecl)) == void_type_node)))\n+    {\n+      if (pedantic)\n+\tpedwarn_with_decl (newdecl, \"conflicting types for `%s'\");\n+    }\n   else if (!types_match\n \t   /* Permit char *foo (int, ...); followed by char *foo ();\n \t      if not pedantic.  */"}]}