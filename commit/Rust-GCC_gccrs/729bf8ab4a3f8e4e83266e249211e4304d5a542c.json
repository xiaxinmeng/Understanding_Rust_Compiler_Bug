{"sha": "729bf8ab4a3f8e4e83266e249211e4304d5a542c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI5YmY4YWI0YTNmOGU0ZTgzMjY2ZTI0OTIxMWU0MzA0ZDVhNTQyYw==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2003-11-12T02:10:12Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2003-11-12T02:10:12Z"}, "message": "function.c (purge_addressof_1): Add libcall check.\n\n2003-11-11  Eric Christopher  <echristo@redhat.com>\n\n\t* function.c (purge_addressof_1): Add libcall check.\n\tRemove test for cached replacements on fallback case.\n\tSimplify mode comparisons. Add libcall test for\n\tparadoxical subregs.\n\nFrom-SVN: r73479", "tree": {"sha": "6386e5e6e67b165b8b733166df3eb5f0a3e1cc54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6386e5e6e67b165b8b733166df3eb5f0a3e1cc54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/729bf8ab4a3f8e4e83266e249211e4304d5a542c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729bf8ab4a3f8e4e83266e249211e4304d5a542c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/729bf8ab4a3f8e4e83266e249211e4304d5a542c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729bf8ab4a3f8e4e83266e249211e4304d5a542c/comments", "author": null, "committer": null, "parents": [{"sha": "f24f58310584ba860fb7f7b47390f8afe6b9db03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f24f58310584ba860fb7f7b47390f8afe6b9db03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f24f58310584ba860fb7f7b47390f8afe6b9db03"}], "stats": {"total": 60, "additions": 34, "deletions": 26}, "files": [{"sha": "f04aff9802a19643ca269a9b057a985eaae859e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729bf8ab4a3f8e4e83266e249211e4304d5a542c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729bf8ab4a3f8e4e83266e249211e4304d5a542c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=729bf8ab4a3f8e4e83266e249211e4304d5a542c", "patch": "@@ -1,3 +1,10 @@\n+2003-11-11  Eric Christopher  <echristo@redhat.com>\n+\n+\t* function.c (purge_addressof_1): Add libcall check.\n+\tRemove test for cached replacements on fallback case.\n+\tSimplify mode comparisons. Add libcall test for\n+\tparadoxical subregs.\n+\n 2003-11-11  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/t-h8300: Fix an obsolete comment.\n@@ -46,7 +53,7 @@\n \tanything other than VISIBILITY_DEFAULT and VISIBILITY_HIDDEN.\n \t* config/darwin.h (TARGET_ASM_ASSEMBLE_VISIBILITY): Use\n \tdarwin_assemble_visibility instead of default.\n-\t\n+\n 2003-11-10  Waldek Hebisch  <hebisch@math.uni.wroc.pl>\n \n \tPR target/12865\n@@ -186,10 +193,10 @@\n \t(decl_visibility): Remove declaration.\n \t* varasm.c (maybe_assemble_visibility): Use DECL_VISIBILITY\n \tinstead of decl_visibility.\n-\t(default_binds_local_p_1):  Use DECL_VISIBILITY\tinstead of \n+\t(default_binds_local_p_1):  Use DECL_VISIBILITY\tinstead of\n \tdecl_visibility.\n \t(decl_visibility): Remove.\n-\t\n+\n 2003-11-06  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (s390_emit_epilogue): Recognize more cases"}, {"sha": "ef1afaaa35ad6b7d985096907c6e393f9cea0c3e", "filename": "gcc/function.c", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729bf8ab4a3f8e4e83266e249211e4304d5a542c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729bf8ab4a3f8e4e83266e249211e4304d5a542c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=729bf8ab4a3f8e4e83266e249211e4304d5a542c", "patch": "@@ -2929,6 +2929,7 @@ purge_addressof_1 (rtx *loc, rtx insn, int force, int store, int may_postpone,\n   int i, j;\n   const char *fmt;\n   bool result = true;\n+  bool libcall = false;\n \n   /* Re-start here to avoid recursion in common cases.  */\n  restart:\n@@ -2937,6 +2938,10 @@ purge_addressof_1 (rtx *loc, rtx insn, int force, int store, int may_postpone,\n   if (x == 0)\n     return true;\n \n+  /* Is this a libcall?  */\n+  if (!insn)\n+    libcall = REG_NOTE_KIND (*loc) == REG_RETVAL;\n+\n   code = GET_CODE (x);\n \n   /* If we don't return in any of the cases below, we will recurse inside\n@@ -3070,31 +3075,27 @@ purge_addressof_1 (rtx *loc, rtx insn, int force, int store, int may_postpone,\n \t\t which can be succinctly described with a simple SUBREG.\n \t\t Note that removing the REG_EQUAL note is not an option\n \t\t on the last insn of a libcall, so we must do a replacement.  */\n-\t      if (! purge_addressof_replacements\n-\t\t  && ! purge_bitfield_addressof_replacements)\n-\t\t{\n-\t\t  /* In compile/990107-1.c:7 compiled at -O1 -m1 for sh-elf,\n-\t\t     we got\n-\t\t     (mem:DI (addressof:SI (reg/v:DF 160) 159 0x401c8510)\n-\t\t      [0 S8 A32]), which can be expressed with a simple\n-\t\t     same-size subreg  */\n-\t\t  if ((GET_MODE_SIZE (GET_MODE (x))\n-\t\t       == GET_MODE_SIZE (GET_MODE (sub)))\n-\t\t      /* Again, invalid pointer casts (as in\n-\t\t\t compile/990203-1.c) can require paradoxical\n-\t\t\t subregs.  */\n-\t\t      || (GET_MODE_SIZE (GET_MODE (x)) > UNITS_PER_WORD\n-\t\t\t  && (GET_MODE_SIZE (GET_MODE (x))\n-\t\t\t      > GET_MODE_SIZE (GET_MODE (sub))))\n-\t\t      || (GET_MODE_SIZE (GET_MODE (x))\n-\t\t\t  < GET_MODE_SIZE (GET_MODE (sub))))\n \n-\t\t    {\n-\t\t      *loc = gen_rtx_SUBREG (GET_MODE (x), sub, 0);\n-\t\t      return true;\n-\t\t    }\n-\t\t  /* ??? Are there other cases we should handle?  */\n+\t      /* In compile/990107-1.c:7 compiled at -O1 -m1 for sh-elf,\n+\t\t we got\n+\t\t (mem:DI (addressof:SI (reg/v:DF 160) 159 0x401c8510)\n+\t\t [0 S8 A32]), which can be expressed with a simple\n+\t\t same-size subreg  */\n+\t      if ((GET_MODE_SIZE (GET_MODE (x))\n+\t\t   <= GET_MODE_SIZE (GET_MODE (sub)))\n+\t\t  /* Again, invalid pointer casts (as in\n+\t\t     compile/990203-1.c) can require paradoxical\n+\t\t     subregs.  */\n+\t\t  || (GET_MODE_SIZE (GET_MODE (x)) > UNITS_PER_WORD\n+\t\t      && (GET_MODE_SIZE (GET_MODE (x))\n+\t\t\t  > GET_MODE_SIZE (GET_MODE (sub)))\n+\t\t      && libcall))\n+\t\t{\n+\t\t  *loc = gen_rtx_SUBREG (GET_MODE (x), sub, 0);\n+\t\t  return true;\n \t\t}\n+\t      /* ??? Are there other cases we should handle?  */\n+\n \t      /* Sometimes we may not be able to find the replacement.  For\n \t\t example when the original insn was a MEM in a wider mode,\n \t\t and the note is part of a sign extension of a narrowed"}]}