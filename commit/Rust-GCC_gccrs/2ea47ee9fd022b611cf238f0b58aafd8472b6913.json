{"sha": "2ea47ee9fd022b611cf238f0b58aafd8472b6913", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVhNDdlZTlmZDAyMmI2MTFjZjIzOGYwYjU4YWFmZDg0NzJiNjkxMw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-12-31T14:59:46Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-12-31T14:59:46Z"}, "message": "re PR fortran/82995 (Segmentation fault passing optional argument to intrinsic sum function)\n\n2018-12-31  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/82995\n\t* trans-expr.c (gfc_conv_procedure_call):  Pass NULL pointer\n\tfor missing optional dummy arguments for library routines.\n\t* trans-intinsic.c (conv_mask_condition): New function.\n\t(gfc_conv_intrinsic_arith): Detect and handle optional mask.\n\t(gfc_conv_intrinsic_minmaxloc): Likewise.\n\t(gfc_conv_intrinsic_findloc): Likewise.\n\t(gfc_conv_intrinsic_minmaxval): Likewise.\n\t(gfc_inline_intrinsic_function_p): Do not inline for rank > 1 if\n\tan optional mask is present.\n\n2018-12-31  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/82995\n        * m4/ifindloc0.m4: Handle case of absend optional argument, passed\n\tas a NULL pointer.  Correct allocation of retarray->base_addr.\n        * m4/ifindloc1.m4: Likewise.\n        * m4/ifindloc2.m4: Handle case of absend optional argument, passed\n\tas a NULL pointer.\n        * m4/iforeach-s.m4: Likewise.\n        * m4/iforeach-s2.m4: Likewise.\n        * m4/iforeach.m4: Likewise.\n        * m4/ifunction-s.m4: Likewise.\n        * m4/ifunction-s2.m4: Likewise.\n        * m4/ifunction.m4: Likewise.\n        * generated/findloc0_c16.c: Regenerated.\n        * generated/findloc0_c4.c: Regenerated.\n        * generated/findloc0_c8.c: Regenerated.\n        * generated/findloc0_i1.c: Regenerated.\n        * generated/findloc0_i16.c: Regenerated.\n        * generated/findloc0_i2.c: Regenerated.\n        * generated/findloc0_i4.c: Regenerated.\n        * generated/findloc0_i8.c: Regenerated.\n        * generated/findloc0_r16.c: Regenerated.\n        * generated/findloc0_r4.c: Regenerated.\n        * generated/findloc0_r8.c: Regenerated.\n        * generated/findloc0_s1.c: Regenerated.\n        * generated/findloc0_s4.c: Regenerated.\n        * generated/findloc1_c16.c: Regenerated.\n        * generated/findloc1_c4.c: Regenerated.\n        * generated/findloc1_c8.c: Regenerated.\n        * generated/findloc1_i1.c: Regenerated.\n        * generated/findloc1_i16.c: Regenerated.\n        * generated/findloc1_i2.c: Regenerated.\n        * generated/findloc1_i4.c: Regenerated.\n        * generated/findloc1_i8.c: Regenerated.\n        * generated/findloc1_r16.c: Regenerated.\n        * generated/findloc1_r4.c: Regenerated.\n        * generated/findloc1_r8.c: Regenerated.\n        * generated/findloc1_s1.c: Regenerated.\n        * generated/findloc1_s4.c: Regenerated.\n        * generated/findloc2_s1.c: Regenerated.\n        * generated/findloc2_s4.c: Regenerated.\n        * generated/iall_i1.c: Regenerated.\n        * generated/iall_i16.c: Regenerated.\n        * generated/iall_i2.c: Regenerated.\n        * generated/iall_i4.c: Regenerated.\n        * generated/iall_i8.c: Regenerated.\n        * generated/iany_i1.c: Regenerated.\n        * generated/iany_i16.c: Regenerated.\n        * generated/iany_i2.c: Regenerated.\n        * generated/iany_i4.c: Regenerated.\n        * generated/iany_i8.c: Regenerated.\n        * generated/iparity_i1.c: Regenerated.\n        * generated/iparity_i16.c: Regenerated.\n        * generated/iparity_i2.c: Regenerated.\n        * generated/iparity_i4.c: Regenerated.\n        * generated/iparity_i8.c: Regenerated.\n        * generated/maxloc0_16_i1.c: Regenerated.\n        * generated/maxloc0_16_i16.c: Regenerated.\n        * generated/maxloc0_16_i2.c: Regenerated.\n        * generated/maxloc0_16_i4.c: Regenerated.\n        * generated/maxloc0_16_i8.c: Regenerated.\n        * generated/maxloc0_16_r10.c: Regenerated.\n        * generated/maxloc0_16_r16.c: Regenerated.\n        * generated/maxloc0_16_r4.c: Regenerated.\n        * generated/maxloc0_16_r8.c: Regenerated.\n        * generated/maxloc0_16_s1.c: Regenerated.\n        * generated/maxloc0_16_s4.c: Regenerated.\n        * generated/maxloc0_4_i1.c: Regenerated.\n        * generated/maxloc0_4_i16.c: Regenerated.\n        * generated/maxloc0_4_i2.c: Regenerated.\n        * generated/maxloc0_4_i4.c: Regenerated.\n        * generated/maxloc0_4_i8.c: Regenerated.\n        * generated/maxloc0_4_r10.c: Regenerated.\n        * generated/maxloc0_4_r16.c: Regenerated.\n        * generated/maxloc0_4_r4.c: Regenerated.\n        * generated/maxloc0_4_r8.c: Regenerated.\n        * generated/maxloc0_4_s1.c: Regenerated.\n        * generated/maxloc0_4_s4.c: Regenerated.\n        * generated/maxloc0_8_i1.c: Regenerated.\n        * generated/maxloc0_8_i16.c: Regenerated.\n        * generated/maxloc0_8_i2.c: Regenerated.\n        * generated/maxloc0_8_i4.c: Regenerated.\n        * generated/maxloc0_8_i8.c: Regenerated.\n        * generated/maxloc0_8_r10.c: Regenerated.\n        * generated/maxloc0_8_r16.c: Regenerated.\n        * generated/maxloc0_8_r4.c: Regenerated.\n        * generated/maxloc0_8_r8.c: Regenerated.\n        * generated/maxloc0_8_s1.c: Regenerated.\n        * generated/maxloc0_8_s4.c: Regenerated.\n        * generated/maxloc1_16_i1.c: Regenerated.\n        * generated/maxloc1_16_i16.c: Regenerated.\n        * generated/maxloc1_16_i2.c: Regenerated.\n        * generated/maxloc1_16_i4.c: Regenerated.\n        * generated/maxloc1_16_i8.c: Regenerated.\n        * generated/maxloc1_16_r10.c: Regenerated.\n        * generated/maxloc1_16_r16.c: Regenerated.\n        * generated/maxloc1_16_r4.c: Regenerated.\n        * generated/maxloc1_16_r8.c: Regenerated.\n        * generated/maxloc1_16_s1.c: Regenerated.\n        * generated/maxloc1_16_s4.c: Regenerated.\n        * generated/maxloc1_4_i1.c: Regenerated.\n        * generated/maxloc1_4_i16.c: Regenerated.\n        * generated/maxloc1_4_i2.c: Regenerated.\n        * generated/maxloc1_4_i4.c: Regenerated.\n        * generated/maxloc1_4_i8.c: Regenerated.\n        * generated/maxloc1_4_r10.c: Regenerated.\n        * generated/maxloc1_4_r16.c: Regenerated.\n        * generated/maxloc1_4_r4.c: Regenerated.\n        * generated/maxloc1_4_r8.c: Regenerated.\n        * generated/maxloc1_4_s1.c: Regenerated.\n        * generated/maxloc1_4_s4.c: Regenerated.\n        * generated/maxloc1_8_i1.c: Regenerated.\n        * generated/maxloc1_8_i16.c: Regenerated.\n        * generated/maxloc1_8_i2.c: Regenerated.\n        * generated/maxloc1_8_i4.c: Regenerated.\n        * generated/maxloc1_8_i8.c: Regenerated.\n        * generated/maxloc1_8_r10.c: Regenerated.\n        * generated/maxloc1_8_r16.c: Regenerated.\n        * generated/maxloc1_8_r4.c: Regenerated.\n        * generated/maxloc1_8_r8.c: Regenerated.\n        * generated/maxloc1_8_s1.c: Regenerated.\n        * generated/maxloc1_8_s4.c: Regenerated.\n        * generated/maxval0_s1.c: Regenerated.\n        * generated/maxval0_s4.c: Regenerated.\n        * generated/maxval1_s1.c: Regenerated.\n        * generated/maxval1_s4.c: Regenerated.\n        * generated/maxval_i1.c: Regenerated.\n        * generated/maxval_i16.c: Regenerated.\n        * generated/maxval_i2.c: Regenerated.\n        * generated/maxval_i4.c: Regenerated.\n        * generated/maxval_i8.c: Regenerated.\n        * generated/maxval_r10.c: Regenerated.\n        * generated/maxval_r16.c: Regenerated.\n        * generated/maxval_r4.c: Regenerated.\n        * generated/maxval_r8.c: Regenerated.\n        * generated/minloc0_16_i1.c: Regenerated.\n        * generated/minloc0_16_i16.c: Regenerated.\n        * generated/minloc0_16_i2.c: Regenerated.\n        * generated/minloc0_16_i4.c: Regenerated.\n        * generated/minloc0_16_i8.c: Regenerated.\n        * generated/minloc0_16_r10.c: Regenerated.\n        * generated/minloc0_16_r16.c: Regenerated.\n        * generated/minloc0_16_r4.c: Regenerated.\n        * generated/minloc0_16_r8.c: Regenerated.\n        * generated/minloc0_16_s1.c: Regenerated.\n        * generated/minloc0_16_s4.c: Regenerated.\n        * generated/minloc0_4_i1.c: Regenerated.\n        * generated/minloc0_4_i16.c: Regenerated.\n        * generated/minloc0_4_i2.c: Regenerated.\n        * generated/minloc0_4_i4.c: Regenerated.\n        * generated/minloc0_4_i8.c: Regenerated.\n        * generated/minloc0_4_r10.c: Regenerated.\n        * generated/minloc0_4_r16.c: Regenerated.\n        * generated/minloc0_4_r4.c: Regenerated.\n        * generated/minloc0_4_r8.c: Regenerated.\n        * generated/minloc0_4_s1.c: Regenerated.\n        * generated/minloc0_4_s4.c: Regenerated.\n        * generated/minloc0_8_i1.c: Regenerated.\n        * generated/minloc0_8_i16.c: Regenerated.\n        * generated/minloc0_8_i2.c: Regenerated.\n        * generated/minloc0_8_i4.c: Regenerated.\n        * generated/minloc0_8_i8.c: Regenerated.\n        * generated/minloc0_8_r10.c: Regenerated.\n        * generated/minloc0_8_r16.c: Regenerated.\n        * generated/minloc0_8_r4.c: Regenerated.\n        * generated/minloc0_8_r8.c: Regenerated.\n        * generated/minloc0_8_s1.c: Regenerated.\n        * generated/minloc0_8_s4.c: Regenerated.\n        * generated/minloc1_16_i1.c: Regenerated.\n        * generated/minloc1_16_i16.c: Regenerated.\n        * generated/minloc1_16_i2.c: Regenerated.\n        * generated/minloc1_16_i4.c: Regenerated.\n        * generated/minloc1_16_i8.c: Regenerated.\n        * generated/minloc1_16_r10.c: Regenerated.\n        * generated/minloc1_16_r16.c: Regenerated.\n        * generated/minloc1_16_r4.c: Regenerated.\n        * generated/minloc1_16_r8.c: Regenerated.\n        * generated/minloc1_16_s1.c: Regenerated.\n        * generated/minloc1_16_s4.c: Regenerated.\n        * generated/minloc1_4_i1.c: Regenerated.\n        * generated/minloc1_4_i16.c: Regenerated.\n        * generated/minloc1_4_i2.c: Regenerated.\n        * generated/minloc1_4_i4.c: Regenerated.\n        * generated/minloc1_4_i8.c: Regenerated.\n        * generated/minloc1_4_r10.c: Regenerated.\n        * generated/minloc1_4_r16.c: Regenerated.\n        * generated/minloc1_4_r4.c: Regenerated.\n        * generated/minloc1_4_r8.c: Regenerated.\n        * generated/minloc1_4_s1.c: Regenerated.\n        * generated/minloc1_4_s4.c: Regenerated.\n        * generated/minloc1_8_i1.c: Regenerated.\n        * generated/minloc1_8_i16.c: Regenerated.\n        * generated/minloc1_8_i2.c: Regenerated.\n        * generated/minloc1_8_i4.c: Regenerated.\n        * generated/minloc1_8_i8.c: Regenerated.\n        * generated/minloc1_8_r10.c: Regenerated.\n        * generated/minloc1_8_r16.c: Regenerated.\n        * generated/minloc1_8_r4.c: Regenerated.\n        * generated/minloc1_8_r8.c: Regenerated.\n        * generated/minloc1_8_s1.c: Regenerated.\n        * generated/minloc1_8_s4.c: Regenerated.\n        * generated/minval0_s1.c: Regenerated.\n        * generated/minval0_s4.c: Regenerated.\n        * generated/minval1_s1.c: Regenerated.\n        * generated/minval1_s4.c: Regenerated.\n        * generated/minval_i1.c: Regenerated.\n        * generated/minval_i16.c: Regenerated.\n        * generated/minval_i2.c: Regenerated.\n        * generated/minval_i4.c: Regenerated.\n        * generated/minval_i8.c: Regenerated.\n        * generated/minval_r10.c: Regenerated.\n        * generated/minval_r16.c: Regenerated.\n        * generated/minval_r4.c: Regenerated.\n        * generated/minval_r8.c: Regenerated.\n        * generated/product_c10.c: Regenerated.\n        * generated/product_c16.c: Regenerated.\n        * generated/product_c4.c: Regenerated.\n        * generated/product_c8.c: Regenerated.\n        * generated/product_i1.c: Regenerated.\n        * generated/product_i16.c: Regenerated.\n        * generated/product_i2.c: Regenerated.\n        * generated/product_i4.c: Regenerated.\n        * generated/product_i8.c: Regenerated.\n        * generated/product_r10.c: Regenerated.\n        * generated/product_r16.c: Regenerated.\n        * generated/product_r4.c: Regenerated.\n        * generated/product_r8.c: Regenerated.\n        * generated/sum_c10.c: Regenerated.\n        * generated/sum_c16.c: Regenerated.\n        * generated/sum_c4.c: Regenerated.\n        * generated/sum_c8.c: Regenerated.\n        * generated/sum_i1.c: Regenerated.\n        * generated/sum_i16.c: Regenerated.\n        * generated/sum_i2.c: Regenerated.\n        * generated/sum_i4.c: Regenerated.\n        * generated/sum_i8.c: Regenerated.\n        * generated/sum_r10.c: Regenerated.\n        * generated/sum_r16.c: Regenerated.\n        * generated/sum_r4.c: Regenerated.\n        * generated/sum_r8.c: Regenerated.\n\n2018-12-31  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/82995\n\t* gfortran.dg/optional_absent_4.f90: New test.\n\t* gfortran.dg/optional_absent_5.f90: New test.\n\nFrom-SVN: r267487", "tree": {"sha": "824955b15d51902f297b77d070bd8eb211c3d4d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/824955b15d51902f297b77d070bd8eb211c3d4d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ea47ee9fd022b611cf238f0b58aafd8472b6913", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea47ee9fd022b611cf238f0b58aafd8472b6913", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ea47ee9fd022b611cf238f0b58aafd8472b6913", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea47ee9fd022b611cf238f0b58aafd8472b6913/comments", "author": null, "committer": null, "parents": [{"sha": "4d73e47bf8dbe9829a5d3bec2a5d5df4c62ec11f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d73e47bf8dbe9829a5d3bec2a5d5df4c62ec11f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d73e47bf8dbe9829a5d3bec2a5d5df4c62ec11f"}], "stats": {"total": 3189, "additions": 2829, "deletions": 360}, "files": [{"sha": "044636519883315686b5df626954fa03bc62925c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -1,3 +1,16 @@\n+2018-12-31  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/82995\n+\t* trans-expr.c (gfc_conv_procedure_call):  Pass NULL pointer\n+\tfor missing optional dummy arguments for library routines.\n+\t* trans-intinsic.c (conv_mask_condition): New function.\n+\t(gfc_conv_intrinsic_arith): Detect and handle optional mask.\n+\t(gfc_conv_intrinsic_minmaxloc): Likewise.\n+\t(gfc_conv_intrinsic_findloc): Likewise.\n+\t(gfc_conv_intrinsic_minmaxval): Likewise.\n+\t(gfc_inline_intrinsic_function_p): Do not inline for rank > 1 if\n+\tan optional mask is present.\n+\n 2018-12-29  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* expr.c (external_spec_function): Add ieee_support_subnormal to list"}, {"sha": "d0a24fb7c821b4eb8005645f2909ea7dd0ee02e1", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -5760,17 +5760,21 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t     array-descriptor actual to array-descriptor dummy, see\n \t     PR 41911 for why a check has to be inserted.\n \t     fsym == NULL is checked as intrinsics required the descriptor\n-\t     but do not always set fsym.  */\n+\t     but do not always set fsym.  \n+\t     Also, it is necessary to pass a NULL pointer to library routines\n+\t     which usually ignore optional arguments, so they can handle\n+\t     these themselves.  */\n \t  if (e->expr_type == EXPR_VARIABLE\n \t      && e->symtree->n.sym->attr.optional\n-\t      && ((e->rank != 0 && elemental_proc)\n-\t\t  || e->representation.length || e->ts.type == BT_CHARACTER\n-\t\t  || (e->rank != 0\n-\t\t      && (fsym == NULL\n-\t\t\t  || (fsym-> as\n-\t\t\t      && (fsym->as->type == AS_ASSUMED_SHAPE\n-\t\t\t\t  || fsym->as->type == AS_ASSUMED_RANK\n-\t\t\t      \t  || fsym->as->type == AS_DEFERRED))))))\n+\t      && (((e->rank != 0 && elemental_proc)\n+\t\t   || e->representation.length || e->ts.type == BT_CHARACTER\n+\t\t   || (e->rank != 0\n+\t\t       && (fsym == NULL\n+\t\t\t   || (fsym->as\n+\t\t\t       && (fsym->as->type == AS_ASSUMED_SHAPE\n+\t\t\t\t   || fsym->as->type == AS_ASSUMED_RANK\n+\t\t\t\t   || fsym->as->type == AS_DEFERRED)))))\n+\t\t  || se->ignore_optional))\n \t    gfc_conv_missing_dummy (&parmse, e, fsym ? fsym->ts : e->ts,\n \t\t\t\t    e->representation.length);\n \t}"}, {"sha": "473334efd6414e6a3b9c97eaa3299e63ffa612e2", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 149, "deletions": 30, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -4359,6 +4359,28 @@ enter_nested_loop (gfc_se *se)\n   return se->ss->loop;\n }\n \n+/* Build the condition for a mask, which may be optional.  */\n+\n+static tree\n+conv_mask_condition (gfc_se *maskse, gfc_expr *maskexpr,\n+\t\t\t bool optional_mask)\n+{\n+  tree present;\n+  tree type;\n+\n+  if (optional_mask)\n+    {\n+      type = TREE_TYPE (maskse->expr);\n+      present = gfc_conv_expr_present (maskexpr->symtree->n.sym);\n+      present = convert (type, present);\n+      present = fold_build1_loc (input_location, TRUTH_NOT_EXPR, type,\n+\t\t\t\t present);\n+      return fold_build2_loc (input_location, TRUTH_ORIF_EXPR,\n+\t\t\t      type, present, maskse->expr);\n+    }\n+  else\n+    return maskse->expr;\n+}\n \n /* Inline implementation of the sum and product intrinsics.  */\n static void\n@@ -4380,6 +4402,7 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n   gfc_se *parent_se;\n   gfc_expr *arrayexpr;\n   gfc_expr *maskexpr;\n+  bool optional_mask;\n \n   if (expr->rank > 0)\n     {\n@@ -4419,13 +4442,19 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n   arrayexpr = arg_array->expr;\n \n   if (op == NE_EXPR || norm2)\n-    /* PARITY and NORM2.  */\n-    maskexpr = NULL;\n+    {\n+      /* PARITY and NORM2.  */\n+      maskexpr = NULL;\n+      optional_mask = false;\n+    }\n   else\n     {\n       arg_mask  = arg_array->next->next;\n       gcc_assert (arg_mask != NULL);\n       maskexpr = arg_mask->expr;\n+      optional_mask = maskexpr && maskexpr->expr_type == EXPR_VARIABLE\n+\t&& maskexpr->symtree->n.sym->attr.dummy\n+\t&& maskexpr->symtree->n.sym->attr.optional;\n     }\n \n   if (expr->rank == 0)\n@@ -4444,17 +4473,22 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n \n       /* Initialize the scalarizer.  */\n       gfc_init_loopinfo (&loop);\n-      gfc_add_ss_to_loop (&loop, arrayss);\n+\n+      /* We add the mask first because the number of iterations is\n+\t taken from the last ss, and this breaks if an absent\n+\t optional argument is used for mask.  */\n+\n       if (maskexpr && maskexpr->rank > 0)\n \tgfc_add_ss_to_loop (&loop, maskss);\n+      gfc_add_ss_to_loop (&loop, arrayss);\n \n       /* Initialize the loop.  */\n       gfc_conv_ss_startstride (&loop);\n       gfc_conv_loop_setup (&loop, &expr->where);\n \n-      gfc_mark_ss_chain_used (arrayss, 1);\n       if (maskexpr && maskexpr->rank > 0)\n \tgfc_mark_ss_chain_used (maskss, 1);\n+      gfc_mark_ss_chain_used (arrayss, 1);\n \n       ploop = &loop;\n     }\n@@ -4563,10 +4597,13 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n \n   if (maskexpr && maskexpr->rank > 0)\n     {\n-      /* We enclose the above in if (mask) {...} .  */\n-\n+      /* We enclose the above in if (mask) {...} .  If the mask is an\n+\t optional argument, generate\n+\t IF (.NOT. PRESENT(MASK) .OR. MASK(I)).  */\n+      tree ifmask;\n       tmp = gfc_finish_block (&block);\n-      tmp = build3_v (COND_EXPR, maskse.expr, tmp,\n+      ifmask = conv_mask_condition (&maskse, maskexpr, optional_mask);\n+      tmp = build3_v (COND_EXPR, ifmask, tmp,\n \t\t      build_empty_stmt (input_location));\n     }\n   else\n@@ -4591,10 +4628,13 @@ gfc_conv_intrinsic_arith (gfc_se * se, gfc_expr * expr, enum tree_code op,\n \t}\n       else\n \t{\n+\t  tree ifmask;\n+\n \t  gcc_assert (expr->rank == 0);\n \t  gfc_init_se (&maskse, NULL);\n \t  gfc_conv_expr_val (&maskse, maskexpr);\n-\t  tmp = build3_v (COND_EXPR, maskse.expr, tmp,\n+\t  ifmask = conv_mask_condition (&maskse, maskexpr, optional_mask);\n+\t  tmp = build3_v (COND_EXPR, ifmask, tmp,\n \t\t\t  build_empty_stmt (input_location));\n \t}\n \n@@ -4833,6 +4873,7 @@ gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, enum tree_code op)\n   gfc_se backse;\n   tree pos;\n   int n;\n+  bool optional_mask;\n \n   actual = expr->value.function.actual;\n \n@@ -4887,6 +4928,9 @@ gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, enum tree_code op)\n   actual = actual->next->next;\n   gcc_assert (actual);\n   maskexpr = actual->expr;\n+  optional_mask = maskexpr && maskexpr->expr_type == EXPR_VARIABLE\n+    && maskexpr->symtree->n.sym->attr.dummy\n+    && maskexpr->symtree->n.sym->attr.optional;\n   backexpr = actual->next->next->expr;\n   nonempty = NULL;\n   if (maskexpr && maskexpr->rank != 0)\n@@ -4939,10 +4983,16 @@ gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, enum tree_code op)\n \n   /* Initialize the scalarizer.  */\n   gfc_init_loopinfo (&loop);\n-  gfc_add_ss_to_loop (&loop, arrayss);\n+\n+  /* We add the mask first because the number of iterations is taken\n+     from the last ss, and this breaks if an absent optional argument\n+     is used for mask.  */\n+\n   if (maskss)\n     gfc_add_ss_to_loop (&loop, maskss);\n \n+  gfc_add_ss_to_loop (&loop, arrayss);\n+\n   /* Initialize the loop.  */\n   gfc_conv_ss_startstride (&loop);\n \n@@ -5103,10 +5153,14 @@ gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, enum tree_code op)\n \n   if (maskss)\n     {\n-      /* We enclose the above in if (mask) {...}.  */\n-      tmp = gfc_finish_block (&block);\n+      /* We enclose the above in if (mask) {...}.  If the mask is an\n+\t optional argument, generate IF (.NOT. PRESENT(MASK)\n+\t .OR. MASK(I)). */\n \n-      tmp = build3_v (COND_EXPR, maskse.expr, tmp,\n+      tree ifmask;\n+      ifmask = conv_mask_condition (&maskse, maskexpr, optional_mask);\n+      tmp = gfc_finish_block (&block);\n+      tmp = build3_v (COND_EXPR, ifmask, tmp,\n \t\t      build_empty_stmt (input_location));\n     }\n   else\n@@ -5197,10 +5251,14 @@ gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, enum tree_code op)\n \n       if (maskss)\n \t{\n-\t  /* We enclose the above in if (mask) {...}.  */\n-\t  tmp = gfc_finish_block (&block);\n+\t  /* We enclose the above in if (mask) {...}.  If the mask is\n+\t an optional argument, generate IF (.NOT. PRESENT(MASK)\n+\t .OR. MASK(I)).*/\n \n-\t  tmp = build3_v (COND_EXPR, maskse.expr, tmp,\n+\t  tree ifmask;\n+\t  ifmask = conv_mask_condition (&maskse, maskexpr, optional_mask);\n+\t  tmp = gfc_finish_block (&block);\n+\t  tmp = build3_v (COND_EXPR, ifmask, tmp,\n \t\t\t  build_empty_stmt (input_location));\n \t}\n       else\n@@ -5219,6 +5277,8 @@ gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, enum tree_code op)\n   /* For a scalar mask, enclose the loop in an if statement.  */\n   if (maskexpr && maskss == NULL)\n     {\n+      tree ifmask;\n+\n       gfc_init_se (&maskse, NULL);\n       gfc_conv_expr_val (&maskse, maskexpr);\n       gfc_init_block (&block);\n@@ -5232,8 +5292,8 @@ gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, enum tree_code op)\n       gfc_init_block (&elseblock);\n       gfc_add_modify (&elseblock, pos, gfc_index_zero_node);\n       elsetmp = gfc_finish_block (&elseblock);\n-\n-      tmp = build3_v (COND_EXPR, maskse.expr, tmp, elsetmp);\n+      ifmask = conv_mask_condition (&maskse, maskexpr, optional_mask);\n+      tmp = build3_v (COND_EXPR, ifmask, tmp, elsetmp);\n       gfc_add_expr_to_block (&block, tmp);\n       gfc_add_block_to_block (&se->pre, &block);\n     }\n@@ -5276,6 +5336,7 @@ gfc_conv_intrinsic_findloc (gfc_se *se, gfc_expr *expr)\n   gfc_expr *maskexpr;\n   tree offset;\n   int i;\n+  bool optional_mask;\n \n   array_arg = expr->value.function.actual;\n   value_arg = array_arg->next;\n@@ -5326,6 +5387,9 @@ gfc_conv_intrinsic_findloc (gfc_se *se, gfc_expr *expr)\n   offset = gfc_create_var (gfc_array_index_type, \"offset\");\n \n   maskexpr = mask_arg->expr;\n+  optional_mask = maskexpr && maskexpr->expr_type == EXPR_VARIABLE\n+    && maskexpr->symtree->n.sym->attr.dummy\n+    && maskexpr->symtree->n.sym->attr.optional;\n \n   /*  Generate two loops, one for BACK=.true. and one for BACK=.false.  */\n \n@@ -5347,9 +5411,14 @@ gfc_conv_intrinsic_findloc (gfc_se *se, gfc_expr *expr)\n       gfc_init_loopinfo (&loop);\n       exit_label = gfc_build_label_decl (NULL_TREE);\n       TREE_USED (exit_label) = 1;\n-      gfc_add_ss_to_loop (&loop, arrayss);\n+\n+      /* We add the mask first because the number of iterations is\n+\t taken from the last ss, and this breaks if an absent\n+\t optional argument is used for mask.  */\n+\n       if (maskss)\n \tgfc_add_ss_to_loop (&loop, maskss);\n+      gfc_add_ss_to_loop (&loop, arrayss);\n \n       /* Initialize the loop.  */\n       gfc_conv_ss_startstride (&loop);\n@@ -5412,8 +5481,16 @@ gfc_conv_intrinsic_findloc (gfc_se *se, gfc_expr *expr)\n \n       tmp = build3_v (COND_EXPR, tmp, found, build_empty_stmt (input_location));\n       if (maskss)\n-\ttmp = build3_v (COND_EXPR, maskse.expr, tmp,\n-\t\t\tbuild_empty_stmt (input_location));\n+\t{\n+\t  /* We enclose the above in if (mask) {...}.  If the mask is\n+\t     an optional argument, generate IF (.NOT. PRESENT(MASK)\n+\t     .OR. MASK(I)). */\n+\n+\t  tree ifmask;\n+\t  ifmask = conv_mask_condition (&maskse, maskexpr, optional_mask);\n+\t  tmp = build3_v (COND_EXPR, ifmask, tmp,\n+\t\t\t  build_empty_stmt (input_location));\n+\t}\n \n       gfc_add_expr_to_block (&body, tmp);\n       gfc_add_block_to_block (&body, &arrayse.post);\n@@ -5444,12 +5521,15 @@ gfc_conv_intrinsic_findloc (gfc_se *se, gfc_expr *expr)\n   /* For a scalar mask, enclose the loop in an if statement.  */\n   if (maskexpr && maskss == NULL)\n     {\n+      tree ifmask;\n       tree if_stmt;\n+\n       gfc_init_se (&maskse, NULL);\n       gfc_conv_expr_val (&maskse, maskexpr);\n       gfc_init_block (&block);\n       gfc_add_expr_to_block (&block, maskse.expr);\n-      if_stmt = build3_v (COND_EXPR, maskse.expr, tmp,\n+      ifmask = conv_mask_condition (&maskse, maskexpr, optional_mask);\n+      if_stmt = build3_v (COND_EXPR, ifmask, tmp,\n \t\t\t  build_empty_stmt (input_location));\n       gfc_add_expr_to_block (&block, if_stmt);\n       tmp = gfc_finish_block (&block);\n@@ -5576,6 +5656,7 @@ gfc_conv_intrinsic_minmaxval (gfc_se * se, gfc_expr * expr, enum tree_code op)\n   gfc_expr *arrayexpr;\n   gfc_expr *maskexpr;\n   int n;\n+  bool optional_mask;\n \n   if (se->ss)\n     {\n@@ -5665,6 +5746,9 @@ gfc_conv_intrinsic_minmaxval (gfc_se * se, gfc_expr * expr, enum tree_code op)\n   actual = actual->next->next;\n   gcc_assert (actual);\n   maskexpr = actual->expr;\n+  optional_mask = maskexpr && maskexpr->expr_type == EXPR_VARIABLE\n+    && maskexpr->symtree->n.sym->attr.dummy\n+    && maskexpr->symtree->n.sym->attr.optional;\n   nonempty = NULL;\n   if (maskexpr && maskexpr->rank != 0)\n     {\n@@ -5687,9 +5771,14 @@ gfc_conv_intrinsic_minmaxval (gfc_se * se, gfc_expr * expr, enum tree_code op)\n \n   /* Initialize the scalarizer.  */\n   gfc_init_loopinfo (&loop);\n-  gfc_add_ss_to_loop (&loop, arrayss);\n+\n+  /* We add the mask first because the number of iterations is taken\n+     from the last ss, and this breaks if an absent optional argument\n+     is used for mask.  */\n+\n   if (maskss)\n     gfc_add_ss_to_loop (&loop, maskss);\n+  gfc_add_ss_to_loop (&loop, arrayss);\n \n   /* Initialize the loop.  */\n   gfc_conv_ss_startstride (&loop);\n@@ -5832,9 +5921,15 @@ gfc_conv_intrinsic_minmaxval (gfc_se * se, gfc_expr * expr, enum tree_code op)\n \n   tmp = gfc_finish_block (&block);\n   if (maskss)\n-    /* We enclose the above in if (mask) {...}.  */\n-    tmp = build3_v (COND_EXPR, maskse.expr, tmp,\n-\t\t    build_empty_stmt (input_location));\n+    {\n+      /* We enclose the above in if (mask) {...}.  If the mask is an\n+\t optional argument, generate IF (.NOT. PRESENT(MASK)\n+\t .OR. MASK(I)).  */\n+      tree ifmask;\n+      ifmask = conv_mask_condition (&maskse, maskexpr, optional_mask);\n+      tmp = build3_v (COND_EXPR, ifmask, tmp,\n+\t\t      build_empty_stmt (input_location));\n+    }\n   gfc_add_expr_to_block (&body, tmp);\n \n   if (lab)\n@@ -5891,8 +5986,13 @@ gfc_conv_intrinsic_minmaxval (gfc_se * se, gfc_expr * expr, enum tree_code op)\n       tmp = gfc_finish_block (&block);\n       if (maskss)\n \t/* We enclose the above in if (mask) {...}.  */\n-\ttmp = build3_v (COND_EXPR, maskse.expr, tmp,\n-\t\t\tbuild_empty_stmt (input_location));\n+\t{\n+\t  tree ifmask;\n+\t  ifmask = conv_mask_condition (&maskse, maskexpr, optional_mask);\n+\t  tmp = build3_v (COND_EXPR, ifmask, tmp,\n+\t\t\t  build_empty_stmt (input_location));\n+\t}\n+\n       gfc_add_expr_to_block (&body, tmp);\n       /* Avoid initializing loopvar[0] again, it should be left where\n \t it finished by the first loop.  */\n@@ -5920,6 +6020,7 @@ gfc_conv_intrinsic_minmaxval (gfc_se * se, gfc_expr * expr, enum tree_code op)\n   if (maskexpr && maskss == NULL)\n     {\n       tree else_stmt;\n+      tree ifmask;\n \n       gfc_init_se (&maskse, NULL);\n       gfc_conv_expr_val (&maskse, maskexpr);\n@@ -5932,7 +6033,9 @@ gfc_conv_intrinsic_minmaxval (gfc_se * se, gfc_expr * expr, enum tree_code op)\n \telse_stmt = build2_v (MODIFY_EXPR, limit, huge_cst);\n       else\n \telse_stmt = build_empty_stmt (input_location);\n-      tmp = build3_v (COND_EXPR, maskse.expr, tmp, else_stmt);\n+\n+      ifmask = conv_mask_condition (&maskse, maskexpr, optional_mask);\n+      tmp = build3_v (COND_EXPR, ifmask, tmp, else_stmt);\n       gfc_add_expr_to_block (&block, tmp);\n       gfc_add_block_to_block (&se->pre, &block);\n     }\n@@ -10177,7 +10280,8 @@ gfc_walk_intrinsic_libfunc (gfc_ss * ss, gfc_expr * expr)\n bool\n gfc_inline_intrinsic_function_p (gfc_expr *expr)\n {\n-  gfc_actual_arglist *args;\n+  gfc_actual_arglist *args, *dim_arg, *mask_arg;\n+  gfc_expr *maskexpr;\n \n   if (!expr->value.function.isym)\n     return false;\n@@ -10191,10 +10295,25 @@ gfc_inline_intrinsic_function_p (gfc_expr *expr)\n \treturn false;\n \n       args = expr->value.function.actual;\n+      dim_arg = args->next;\n+\n       /* We need to be able to subset the SUM argument at compile-time.  */\n-      if (args->next->expr && args->next->expr->expr_type != EXPR_CONSTANT)\n+      if (dim_arg->expr && dim_arg->expr->expr_type != EXPR_CONSTANT)\n \treturn false;\n \n+      /* FIXME: If MASK is optional for a more than two-dimensional\n+\t argument, the scalarizer gets confused if the mask is\n+\t absent.  See PR 82995.  For now, fall back to the library\n+\t function.  */\n+\n+      mask_arg = dim_arg->next;\n+      maskexpr = mask_arg->expr;\n+\n+      if (expr->rank > 0 && maskexpr && maskexpr->expr_type == EXPR_VARIABLE\n+\t  && maskexpr->symtree->n.sym->attr.dummy\n+\t  && maskexpr->symtree->n.sym->attr.optional)\n+\treturn false;\n+\t  \n       return true;\n \n     case GFC_ISYM_TRANSPOSE:"}, {"sha": "c5ca8d97958a206a5f3ef8288040461e774b6f3e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -1,3 +1,9 @@\n+2018-12-31  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/82995\n+\t* gfortran.dg/optional_absent_4.f90: New test.\n+\t* gfortran.dg/optional_absent_5.f90: New test.\n+\n 2018-12-31  Martin Liska  <mliska@suse.cz>\n \n \t* g++.dg/tree-prof/devirt.C: Fix scan pattern and test options."}, {"sha": "76470bd46cd9acb71299f29d692b4d45154feda6", "filename": "gcc/testsuite/gfortran.dg/optional_absent_4.f90", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_4.f90?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -0,0 +1,96 @@\n+! { dg-do run }\n+! PR 82995 - segfault passing on an optional argument;\n+! this tests the inline versions.\n+module y\n+  implicit none\n+contains \n+\n+  function sum_1 (input, mask)\n+    logical, intent(in), optional :: mask(:)\n+    integer, intent(in) :: input(:)\n+    integer :: sum_1\n+    sum_1 = sum (input, mask)\n+  end function sum_1\n+\n+  function sum_2 (input, mask)\n+    logical, intent(in), optional :: mask\n+    integer, intent(in) :: input(:)\n+    integer :: sum_2\n+    sum_2 = sum(input, mask)\n+  end function sum_2\n+\n+  function sum_3 (input, mask)\n+    logical, intent(in), optional :: mask(:,:)\n+    integer, intent(in) :: input(:,:)\n+    integer :: sum_3\n+    sum_3 = sum (input, mask)\n+  end function sum_3\n+\n+  function minval_1 (input, mask)\n+    logical, intent(in), optional :: mask(:,:)\n+    real, intent(in) :: input(:,:)\n+    real :: minval_1\n+    minval_1 = minval (input, mask)\n+  end function minval_1\n+\n+  function maxval_1 (input, mask)\n+    logical, intent(in), optional :: mask\n+    real, intent(in) :: input(:,:)\n+    real :: maxval_1\n+    maxval_1 = maxval (input, mask)\n+  end function maxval_1\n+\n+  function maxloc_1 (input, mask)\n+    logical, intent(in), optional :: mask(:)\n+    real, intent(in) :: input(:)\n+    integer :: maxloc_1\n+\n+    maxloc_1 = maxloc(input, dim=1, mask=mask)\n+  end function maxloc_1\n+\n+  function findloc_1 (input, val, mask)\n+    logical, intent(in), optional :: mask (:)\n+    integer, intent(in) :: input(:)\n+    integer, intent(in) :: val\n+    integer :: findloc_1\n+\n+    findloc_1 = findloc(input, val, dim=1, mask=mask)\n+  end function findloc_1\n+\n+  function findloc_2 (input, val, mask)\n+    logical, intent(in), optional :: mask\n+    integer, intent(in) :: input(:)\n+    integer, intent(in) :: val\n+    integer :: findloc_2\n+\n+    findloc_2 = findloc(input, val, dim=1, mask=mask)\n+  end function findloc_2\n+\n+end module y\n+\n+program test_sum_1 \n+  use y\n+  implicit none \n+  integer :: input(5) = [1,2,4,8,16]\n+  integer :: i2(2,3) = reshape([1,2,4,8,16,32], [2,3])\n+  real :: r2(2,3) = reshape ([32.,16.,8.,4.,2.,1.], [2,3])\n+  real :: r1(6) = [2.,4.,8.,32.,1.,16.]\n+  integer :: res\n+  real :: rres\n+  res = sum_1(input) \n+  if (res /= 31) stop 1\n+  res = sum_2 (input)\n+  if (res /= 31) stop 2\n+  res = sum_3 (i2)\n+  if (res /= 63) stop 3\n+  rres = minval_1 (r2)\n+  if (rres /= 1.0) stop 4\n+  rres = maxval_1 (r2)\n+  if (rres /= 32.) stop 5\n+  res = maxloc_1 (r1)\n+  if (res /= 4) stop 6\n+  res = findloc_1 (input, 8)\n+  if (res /= 4) stop 7\n+  res = findloc_2 (input, 2)\n+  if (res /= 2) stop 8\n+end program test_sum_1"}, {"sha": "42f1a91bcb17fcdfdca2a47941518450dd51d771", "filename": "gcc/testsuite/gfortran.dg/optional_absent_5.f90", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Foptional_absent_5.f90?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -0,0 +1,144 @@\n+! { dg-do run }\n+! PR 82995 - segfault passing on an optional argument;\n+! this tests the library versions.\n+module z\n+  implicit none\n+contains\n+  subroutine sum_1 (input, res, mask)\n+    logical, intent(in), optional :: mask(:,:)\n+    integer, intent(in) :: input(:,:)\n+    integer, dimension(:), intent(out) :: res\n+    res = sum (input, dim=1, mask=mask)\n+  end subroutine sum_1\n+\n+  subroutine sum_2 (input, res, mask)\n+    logical, intent(in), optional :: mask\n+    integer, intent(in) :: input(:,:)\n+    integer, dimension(:), intent(out) :: res\n+    res = sum (input, dim=1, mask=mask)\n+  end subroutine sum_2\n+\n+  subroutine maxloc_1 (input, res, mask)\n+    logical, intent(in), optional :: mask(:,:)\n+    integer, intent(in) :: input(:,:)\n+    integer, dimension(:), intent(out) :: res\n+    res = maxloc (input, dim=1, mask=mask)\n+  end subroutine maxloc_1\n+\n+  subroutine minloc_1 (input, res, mask)\n+    logical, intent(in), optional :: mask\n+    integer, intent(in) :: input(:,:)\n+    integer, dimension(:), intent(out) :: res\n+    res = minloc (input, dim=1, mask=mask)\n+  end subroutine minloc_1\n+\n+  subroutine maxloc_2 (input, res, mask)\n+    logical, intent(in), optional :: mask(:,:)\n+    integer, intent(in) :: input(:,:)\n+    integer, dimension(:), intent(out) :: res\n+    integer :: n\n+    n = 1\n+    res = maxloc (input, dim=n, mask=mask)\n+  end subroutine maxloc_2\n+\n+  subroutine findloc_1 (input, val, res, mask)\n+    logical, intent(in), optional :: mask(:,:)\n+    integer, intent(in) :: input(:,:)\n+    integer, dimension(:), intent(out) :: res\n+    integer, intent(in) :: val\n+    res = findloc(input, val)\n+  end subroutine findloc_1\n+\n+  subroutine findloc_2 (input, val, res, mask)\n+    logical, intent(in), optional :: mask\n+    integer, intent(in) :: input(:,:)\n+    integer, dimension(:), intent(out) :: res\n+    integer, intent(in) :: val\n+    res = findloc(input, val)\n+  end subroutine findloc_2\n+\n+  subroutine findloc_3 (input, val, res, mask)\n+    logical, intent(in), optional :: mask(:,:)\n+    integer, intent(in) :: input(:,:)\n+    integer, dimension(:), intent(out) :: res\n+    integer, intent(in) :: val\n+    res = findloc(input, val, dim=1)\n+  end subroutine findloc_3\n+\n+  subroutine findloc_4 (input, val, res, mask)\n+    logical, intent(in), optional :: mask(:,:)\n+    integer, intent(in) :: input(:,:)\n+    integer, dimension(:), intent(out) :: res\n+    integer, intent(in) :: val\n+    integer :: n = 1\n+    res = findloc(input, val, dim=n)\n+  end subroutine findloc_4\n+\n+  subroutine maxval_1 (input, res, mask)\n+    logical, intent(in), optional :: mask\n+    integer, intent(in) :: input(:,:)\n+    integer, dimension(:), intent(out) :: res\n+    res = maxval (input, dim=1, mask=mask)\n+  end subroutine maxval_1\n+\n+  subroutine maxval_2 (input, res, mask)\n+    logical, intent(in), optional :: mask\n+    integer, intent(in) :: input(:,:)\n+    integer, dimension(:), intent(out) :: res\n+    integer :: n = 1\n+    res = maxval (input, dim=n, mask=mask)\n+  end subroutine maxval_2\n+\n+  subroutine minval_1 (input, res, mask)\n+    logical, intent(in), optional :: mask(:,:)\n+    integer, intent(in) :: input(:,:)\n+    integer, dimension(:), intent(out) :: res\n+    res = minval (input, dim=1, mask=mask)\n+  end subroutine minval_1\n+\n+  subroutine minval_2 (input, res, mask)\n+    logical, intent(in), optional :: mask(:,:)\n+    integer, intent(in) :: input(:,:)\n+    integer, dimension(:), intent(out) :: res\n+    integer :: n = 1\n+    res = minval (input, dim=n, mask=mask)\n+  end subroutine minval_2\n+\n+end module z\n+\n+program main\n+  use z\n+  implicit none\n+  integer :: i2(2,3) = reshape([1,2,4,8,16,32], [2,3])\n+  integer, dimension(3) :: res3\n+  integer, dimension(2) :: res2\n+  call sum_1 (i2, res3)\n+  if (any (res3 /= [3, 12, 48])) stop 1\n+  res3 = -2\n+  call sum_2 (i2, res3)\n+  if (any (res3 /= [3, 12, 48])) stop 2\n+  call maxloc_1 (i2, res3)\n+  if (any (res3 /= 2)) stop 3\n+  call minloc_1 (i2, res3)\n+  if (any (res3 /= 1)) stop 4\n+  call maxloc_2 (i2, res3)\n+  if (any (res3 /= 2)) stop 5\n+  call findloc_1 (i2, 4, res2)\n+  if (any(res2 /= [1,2])) stop 6\n+  res2 = -1234\n+  call findloc_2 (i2, 4, res2)\n+  if (any(res2 /= [1,2])) stop 7\n+  call findloc_3 (i2, 4, res3)\n+  if (any(res3 /= [0,1,0])) stop 8\n+  call findloc_4 (i2, 4, res3)\n+  if (any(res3 /= [0,1,0])) stop 9\n+  call maxval_1 (i2, res3)\n+  if (any (res3 /= [2,8,32])) stop 10\n+  call minval_1 (i2, res3)\n+  if (any (res3 /= [1,4,16])) stop 11\n+  call maxval_2 (i2, res3)\n+  if (any (res3 /= [2,8,32])) stop 12\n+  call minval_2 (i2, res3)\n+  if (any (res3 /= [1,4,16])) stop 13\n+\n+end program main"}, {"sha": "6df47da16d5f8e88e61f722e2f4c3b6c7f156eb2", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 243, "deletions": 1, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -1,3 +1,245 @@\n+2018-12-31  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/82995\n+        * m4/ifindloc0.m4: Handle case of absend optional argument, passed\n+\tas a NULL pointer.  Correct allocation of retarray->base_addr.\n+        * m4/ifindloc1.m4: Likewise.\n+        * m4/ifindloc2.m4: Handle case of absend optional argument, passed\n+\tas a NULL pointer.\n+        * m4/iforeach-s.m4: Likewise.\n+        * m4/iforeach-s2.m4: Likewise.\n+        * m4/iforeach.m4: Likewise.\n+        * m4/ifunction-s.m4: Likewise.\n+        * m4/ifunction-s2.m4: Likewise.\n+        * m4/ifunction.m4: Likewise.\n+        * generated/findloc0_c16.c: Regenerated.\n+        * generated/findloc0_c4.c: Regenerated.\n+        * generated/findloc0_c8.c: Regenerated.\n+        * generated/findloc0_i1.c: Regenerated.\n+        * generated/findloc0_i16.c: Regenerated.\n+        * generated/findloc0_i2.c: Regenerated.\n+        * generated/findloc0_i4.c: Regenerated.\n+        * generated/findloc0_i8.c: Regenerated.\n+        * generated/findloc0_r16.c: Regenerated.\n+        * generated/findloc0_r4.c: Regenerated.\n+        * generated/findloc0_r8.c: Regenerated.\n+        * generated/findloc0_s1.c: Regenerated.\n+        * generated/findloc0_s4.c: Regenerated.\n+        * generated/findloc1_c16.c: Regenerated.\n+        * generated/findloc1_c4.c: Regenerated.\n+        * generated/findloc1_c8.c: Regenerated.\n+        * generated/findloc1_i1.c: Regenerated.\n+        * generated/findloc1_i16.c: Regenerated.\n+        * generated/findloc1_i2.c: Regenerated.\n+        * generated/findloc1_i4.c: Regenerated.\n+        * generated/findloc1_i8.c: Regenerated.\n+        * generated/findloc1_r16.c: Regenerated.\n+        * generated/findloc1_r4.c: Regenerated.\n+        * generated/findloc1_r8.c: Regenerated.\n+        * generated/findloc1_s1.c: Regenerated.\n+        * generated/findloc1_s4.c: Regenerated.\n+        * generated/findloc2_s1.c: Regenerated.\n+        * generated/findloc2_s4.c: Regenerated.\n+        * generated/iall_i1.c: Regenerated.\n+        * generated/iall_i16.c: Regenerated.\n+        * generated/iall_i2.c: Regenerated.\n+        * generated/iall_i4.c: Regenerated.\n+        * generated/iall_i8.c: Regenerated.\n+        * generated/iany_i1.c: Regenerated.\n+        * generated/iany_i16.c: Regenerated.\n+        * generated/iany_i2.c: Regenerated.\n+        * generated/iany_i4.c: Regenerated.\n+        * generated/iany_i8.c: Regenerated.\n+        * generated/iparity_i1.c: Regenerated.\n+        * generated/iparity_i16.c: Regenerated.\n+        * generated/iparity_i2.c: Regenerated.\n+        * generated/iparity_i4.c: Regenerated.\n+        * generated/iparity_i8.c: Regenerated.\n+        * generated/maxloc0_16_i1.c: Regenerated.\n+        * generated/maxloc0_16_i16.c: Regenerated.\n+        * generated/maxloc0_16_i2.c: Regenerated.\n+        * generated/maxloc0_16_i4.c: Regenerated.\n+        * generated/maxloc0_16_i8.c: Regenerated.\n+        * generated/maxloc0_16_r10.c: Regenerated.\n+        * generated/maxloc0_16_r16.c: Regenerated.\n+        * generated/maxloc0_16_r4.c: Regenerated.\n+        * generated/maxloc0_16_r8.c: Regenerated.\n+        * generated/maxloc0_16_s1.c: Regenerated.\n+        * generated/maxloc0_16_s4.c: Regenerated.\n+        * generated/maxloc0_4_i1.c: Regenerated.\n+        * generated/maxloc0_4_i16.c: Regenerated.\n+        * generated/maxloc0_4_i2.c: Regenerated.\n+        * generated/maxloc0_4_i4.c: Regenerated.\n+        * generated/maxloc0_4_i8.c: Regenerated.\n+        * generated/maxloc0_4_r10.c: Regenerated.\n+        * generated/maxloc0_4_r16.c: Regenerated.\n+        * generated/maxloc0_4_r4.c: Regenerated.\n+        * generated/maxloc0_4_r8.c: Regenerated.\n+        * generated/maxloc0_4_s1.c: Regenerated.\n+        * generated/maxloc0_4_s4.c: Regenerated.\n+        * generated/maxloc0_8_i1.c: Regenerated.\n+        * generated/maxloc0_8_i16.c: Regenerated.\n+        * generated/maxloc0_8_i2.c: Regenerated.\n+        * generated/maxloc0_8_i4.c: Regenerated.\n+        * generated/maxloc0_8_i8.c: Regenerated.\n+        * generated/maxloc0_8_r10.c: Regenerated.\n+        * generated/maxloc0_8_r16.c: Regenerated.\n+        * generated/maxloc0_8_r4.c: Regenerated.\n+        * generated/maxloc0_8_r8.c: Regenerated.\n+        * generated/maxloc0_8_s1.c: Regenerated.\n+        * generated/maxloc0_8_s4.c: Regenerated.\n+        * generated/maxloc1_16_i1.c: Regenerated.\n+        * generated/maxloc1_16_i16.c: Regenerated.\n+        * generated/maxloc1_16_i2.c: Regenerated.\n+        * generated/maxloc1_16_i4.c: Regenerated.\n+        * generated/maxloc1_16_i8.c: Regenerated.\n+        * generated/maxloc1_16_r10.c: Regenerated.\n+        * generated/maxloc1_16_r16.c: Regenerated.\n+        * generated/maxloc1_16_r4.c: Regenerated.\n+        * generated/maxloc1_16_r8.c: Regenerated.\n+        * generated/maxloc1_16_s1.c: Regenerated.\n+        * generated/maxloc1_16_s4.c: Regenerated.\n+        * generated/maxloc1_4_i1.c: Regenerated.\n+        * generated/maxloc1_4_i16.c: Regenerated.\n+        * generated/maxloc1_4_i2.c: Regenerated.\n+        * generated/maxloc1_4_i4.c: Regenerated.\n+        * generated/maxloc1_4_i8.c: Regenerated.\n+        * generated/maxloc1_4_r10.c: Regenerated.\n+        * generated/maxloc1_4_r16.c: Regenerated.\n+        * generated/maxloc1_4_r4.c: Regenerated.\n+        * generated/maxloc1_4_r8.c: Regenerated.\n+        * generated/maxloc1_4_s1.c: Regenerated.\n+        * generated/maxloc1_4_s4.c: Regenerated.\n+        * generated/maxloc1_8_i1.c: Regenerated.\n+        * generated/maxloc1_8_i16.c: Regenerated.\n+        * generated/maxloc1_8_i2.c: Regenerated.\n+        * generated/maxloc1_8_i4.c: Regenerated.\n+        * generated/maxloc1_8_i8.c: Regenerated.\n+        * generated/maxloc1_8_r10.c: Regenerated.\n+        * generated/maxloc1_8_r16.c: Regenerated.\n+        * generated/maxloc1_8_r4.c: Regenerated.\n+        * generated/maxloc1_8_r8.c: Regenerated.\n+        * generated/maxloc1_8_s1.c: Regenerated.\n+        * generated/maxloc1_8_s4.c: Regenerated.\n+        * generated/maxval0_s1.c: Regenerated.\n+        * generated/maxval0_s4.c: Regenerated.\n+        * generated/maxval1_s1.c: Regenerated.\n+        * generated/maxval1_s4.c: Regenerated.\n+        * generated/maxval_i1.c: Regenerated.\n+        * generated/maxval_i16.c: Regenerated.\n+        * generated/maxval_i2.c: Regenerated.\n+        * generated/maxval_i4.c: Regenerated.\n+        * generated/maxval_i8.c: Regenerated.\n+        * generated/maxval_r10.c: Regenerated.\n+        * generated/maxval_r16.c: Regenerated.\n+        * generated/maxval_r4.c: Regenerated.\n+        * generated/maxval_r8.c: Regenerated.\n+        * generated/minloc0_16_i1.c: Regenerated.\n+        * generated/minloc0_16_i16.c: Regenerated.\n+        * generated/minloc0_16_i2.c: Regenerated.\n+        * generated/minloc0_16_i4.c: Regenerated.\n+        * generated/minloc0_16_i8.c: Regenerated.\n+        * generated/minloc0_16_r10.c: Regenerated.\n+        * generated/minloc0_16_r16.c: Regenerated.\n+        * generated/minloc0_16_r4.c: Regenerated.\n+        * generated/minloc0_16_r8.c: Regenerated.\n+        * generated/minloc0_16_s1.c: Regenerated.\n+        * generated/minloc0_16_s4.c: Regenerated.\n+        * generated/minloc0_4_i1.c: Regenerated.\n+        * generated/minloc0_4_i16.c: Regenerated.\n+        * generated/minloc0_4_i2.c: Regenerated.\n+        * generated/minloc0_4_i4.c: Regenerated.\n+        * generated/minloc0_4_i8.c: Regenerated.\n+        * generated/minloc0_4_r10.c: Regenerated.\n+        * generated/minloc0_4_r16.c: Regenerated.\n+        * generated/minloc0_4_r4.c: Regenerated.\n+        * generated/minloc0_4_r8.c: Regenerated.\n+        * generated/minloc0_4_s1.c: Regenerated.\n+        * generated/minloc0_4_s4.c: Regenerated.\n+        * generated/minloc0_8_i1.c: Regenerated.\n+        * generated/minloc0_8_i16.c: Regenerated.\n+        * generated/minloc0_8_i2.c: Regenerated.\n+        * generated/minloc0_8_i4.c: Regenerated.\n+        * generated/minloc0_8_i8.c: Regenerated.\n+        * generated/minloc0_8_r10.c: Regenerated.\n+        * generated/minloc0_8_r16.c: Regenerated.\n+        * generated/minloc0_8_r4.c: Regenerated.\n+        * generated/minloc0_8_r8.c: Regenerated.\n+        * generated/minloc0_8_s1.c: Regenerated.\n+        * generated/minloc0_8_s4.c: Regenerated.\n+        * generated/minloc1_16_i1.c: Regenerated.\n+        * generated/minloc1_16_i16.c: Regenerated.\n+        * generated/minloc1_16_i2.c: Regenerated.\n+        * generated/minloc1_16_i4.c: Regenerated.\n+        * generated/minloc1_16_i8.c: Regenerated.\n+        * generated/minloc1_16_r10.c: Regenerated.\n+        * generated/minloc1_16_r16.c: Regenerated.\n+        * generated/minloc1_16_r4.c: Regenerated.\n+        * generated/minloc1_16_r8.c: Regenerated.\n+        * generated/minloc1_16_s1.c: Regenerated.\n+        * generated/minloc1_16_s4.c: Regenerated.\n+        * generated/minloc1_4_i1.c: Regenerated.\n+        * generated/minloc1_4_i16.c: Regenerated.\n+        * generated/minloc1_4_i2.c: Regenerated.\n+        * generated/minloc1_4_i4.c: Regenerated.\n+        * generated/minloc1_4_i8.c: Regenerated.\n+        * generated/minloc1_4_r10.c: Regenerated.\n+        * generated/minloc1_4_r16.c: Regenerated.\n+        * generated/minloc1_4_r4.c: Regenerated.\n+        * generated/minloc1_4_r8.c: Regenerated.\n+        * generated/minloc1_4_s1.c: Regenerated.\n+        * generated/minloc1_4_s4.c: Regenerated.\n+        * generated/minloc1_8_i1.c: Regenerated.\n+        * generated/minloc1_8_i16.c: Regenerated.\n+        * generated/minloc1_8_i2.c: Regenerated.\n+        * generated/minloc1_8_i4.c: Regenerated.\n+        * generated/minloc1_8_i8.c: Regenerated.\n+        * generated/minloc1_8_r10.c: Regenerated.\n+        * generated/minloc1_8_r16.c: Regenerated.\n+        * generated/minloc1_8_r4.c: Regenerated.\n+        * generated/minloc1_8_r8.c: Regenerated.\n+        * generated/minloc1_8_s1.c: Regenerated.\n+        * generated/minloc1_8_s4.c: Regenerated.\n+        * generated/minval0_s1.c: Regenerated.\n+        * generated/minval0_s4.c: Regenerated.\n+        * generated/minval1_s1.c: Regenerated.\n+        * generated/minval1_s4.c: Regenerated.\n+        * generated/minval_i1.c: Regenerated.\n+        * generated/minval_i16.c: Regenerated.\n+        * generated/minval_i2.c: Regenerated.\n+        * generated/minval_i4.c: Regenerated.\n+        * generated/minval_i8.c: Regenerated.\n+        * generated/minval_r10.c: Regenerated.\n+        * generated/minval_r16.c: Regenerated.\n+        * generated/minval_r4.c: Regenerated.\n+        * generated/minval_r8.c: Regenerated.\n+        * generated/product_c10.c: Regenerated.\n+        * generated/product_c16.c: Regenerated.\n+        * generated/product_c4.c: Regenerated.\n+        * generated/product_c8.c: Regenerated.\n+        * generated/product_i1.c: Regenerated.\n+        * generated/product_i16.c: Regenerated.\n+        * generated/product_i2.c: Regenerated.\n+        * generated/product_i4.c: Regenerated.\n+        * generated/product_i8.c: Regenerated.\n+        * generated/product_r10.c: Regenerated.\n+        * generated/product_r16.c: Regenerated.\n+        * generated/product_r4.c: Regenerated.\n+        * generated/product_r8.c: Regenerated.\n+        * generated/sum_c10.c: Regenerated.\n+        * generated/sum_c16.c: Regenerated.\n+        * generated/sum_c4.c: Regenerated.\n+        * generated/sum_c8.c: Regenerated.\n+        * generated/sum_i1.c: Regenerated.\n+        * generated/sum_i16.c: Regenerated.\n+        * generated/sum_i2.c: Regenerated.\n+        * generated/sum_i4.c: Regenerated.\n+        * generated/sum_i8.c: Regenerated.\n+        * generated/sum_r10.c: Regenerated.\n+        * generated/sum_r16.c: Regenerated.\n+        * generated/sum_r4.c: Regenerated.\n+        * generated/sum_r8.c: Regenerated.\n+\n 2018-12-29  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* gfortran.map: Expose subnormal functions in dynamic library.\n@@ -7,7 +249,7 @@\n \t* ieee/ieee_features.F90:  Add IEEE_SUBNORMAL.\n \n 2018-12-29  Steven G. Kargl  <kargl@gcc.gnu.org>\n-      \n+\n \tPR fortran/88342\n \t* ieee/ieee_arithmetic.F90: Prevent exceptions in IEEE_VALUE if\n \t-ffpe-trap=invalid or -ffpe-trap=overflow is used."}, {"sha": "9bbed7baab964ef3432b3834810a87aaeafd560b", "filename": "libgfortran/generated/findloc0_c16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc0_c16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -57,7 +57,7 @@ findloc0_c16 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -196,7 +196,7 @@ mfindloc0_c16 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -342,7 +342,7 @@ sfindloc0_c16 (gfc_array_index_type * const restrict retarray,\n   index_type * restrict dest;\n   index_type n;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc0_c16 (retarray, array, value, back);\n       return;\n@@ -358,7 +358,7 @@ sfindloc0_c16 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "3a141781f603320cb440a24c037e3d81bfc79746", "filename": "libgfortran/generated/findloc0_c4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc0_c4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -57,7 +57,7 @@ findloc0_c4 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -196,7 +196,7 @@ mfindloc0_c4 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -342,7 +342,7 @@ sfindloc0_c4 (gfc_array_index_type * const restrict retarray,\n   index_type * restrict dest;\n   index_type n;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc0_c4 (retarray, array, value, back);\n       return;\n@@ -358,7 +358,7 @@ sfindloc0_c4 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "c67eba58c2f85156253275fc7d35789de2df056e", "filename": "libgfortran/generated/findloc0_c8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc0_c8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -57,7 +57,7 @@ findloc0_c8 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -196,7 +196,7 @@ mfindloc0_c8 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -342,7 +342,7 @@ sfindloc0_c8 (gfc_array_index_type * const restrict retarray,\n   index_type * restrict dest;\n   index_type n;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc0_c8 (retarray, array, value, back);\n       return;\n@@ -358,7 +358,7 @@ sfindloc0_c8 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "4a2193452e1a0277b050c3933beed13bd9e0c5fc", "filename": "libgfortran/generated/findloc0_i1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc0_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -57,7 +57,7 @@ findloc0_i1 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -196,7 +196,7 @@ mfindloc0_i1 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -342,7 +342,7 @@ sfindloc0_i1 (gfc_array_index_type * const restrict retarray,\n   index_type * restrict dest;\n   index_type n;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc0_i1 (retarray, array, value, back);\n       return;\n@@ -358,7 +358,7 @@ sfindloc0_i1 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "662df29c7e0d0b4b814d5b1ba67c4feb638dee10", "filename": "libgfortran/generated/findloc0_i16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc0_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -57,7 +57,7 @@ findloc0_i16 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -196,7 +196,7 @@ mfindloc0_i16 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -342,7 +342,7 @@ sfindloc0_i16 (gfc_array_index_type * const restrict retarray,\n   index_type * restrict dest;\n   index_type n;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc0_i16 (retarray, array, value, back);\n       return;\n@@ -358,7 +358,7 @@ sfindloc0_i16 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "273248cba792040abb9fa44bded08dcfcea04945", "filename": "libgfortran/generated/findloc0_i2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc0_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -57,7 +57,7 @@ findloc0_i2 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -196,7 +196,7 @@ mfindloc0_i2 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -342,7 +342,7 @@ sfindloc0_i2 (gfc_array_index_type * const restrict retarray,\n   index_type * restrict dest;\n   index_type n;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc0_i2 (retarray, array, value, back);\n       return;\n@@ -358,7 +358,7 @@ sfindloc0_i2 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "0eb611b5a4c8144397ce62d27e7a883df778b84d", "filename": "libgfortran/generated/findloc0_i4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc0_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -57,7 +57,7 @@ findloc0_i4 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -196,7 +196,7 @@ mfindloc0_i4 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -342,7 +342,7 @@ sfindloc0_i4 (gfc_array_index_type * const restrict retarray,\n   index_type * restrict dest;\n   index_type n;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc0_i4 (retarray, array, value, back);\n       return;\n@@ -358,7 +358,7 @@ sfindloc0_i4 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "ef48de04763b530b5b36ea1700b8f97618adb873", "filename": "libgfortran/generated/findloc0_i8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc0_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -57,7 +57,7 @@ findloc0_i8 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -196,7 +196,7 @@ mfindloc0_i8 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -342,7 +342,7 @@ sfindloc0_i8 (gfc_array_index_type * const restrict retarray,\n   index_type * restrict dest;\n   index_type n;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc0_i8 (retarray, array, value, back);\n       return;\n@@ -358,7 +358,7 @@ sfindloc0_i8 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "ca3c7509ed4b894b9c29c765b5d954082f884976", "filename": "libgfortran/generated/findloc0_r16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc0_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -57,7 +57,7 @@ findloc0_r16 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -196,7 +196,7 @@ mfindloc0_r16 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -342,7 +342,7 @@ sfindloc0_r16 (gfc_array_index_type * const restrict retarray,\n   index_type * restrict dest;\n   index_type n;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc0_r16 (retarray, array, value, back);\n       return;\n@@ -358,7 +358,7 @@ sfindloc0_r16 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "f1dd1c3df3bfe54a55e7c868895a8d8c5b793d25", "filename": "libgfortran/generated/findloc0_r4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc0_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -57,7 +57,7 @@ findloc0_r4 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -196,7 +196,7 @@ mfindloc0_r4 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -342,7 +342,7 @@ sfindloc0_r4 (gfc_array_index_type * const restrict retarray,\n   index_type * restrict dest;\n   index_type n;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc0_r4 (retarray, array, value, back);\n       return;\n@@ -358,7 +358,7 @@ sfindloc0_r4 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "31e39b033217397b5181d8c89e6f3b59958da18a", "filename": "libgfortran/generated/findloc0_r8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc0_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -57,7 +57,7 @@ findloc0_r8 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -196,7 +196,7 @@ mfindloc0_r8 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -342,7 +342,7 @@ sfindloc0_r8 (gfc_array_index_type * const restrict retarray,\n   index_type * restrict dest;\n   index_type n;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc0_r8 (retarray, array, value, back);\n       return;\n@@ -358,7 +358,7 @@ sfindloc0_r8 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "e42c44a1914e88cd7f986120f623d3796c216a03", "filename": "libgfortran/generated/findloc0_s1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc0_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -58,7 +58,7 @@ findloc0_s1 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mfindloc0_s1 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -347,7 +347,7 @@ sfindloc0_s1 (gfc_array_index_type * const restrict retarray,\n   index_type * restrict dest;\n   index_type n;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc0_s1 (retarray, array, value, back, len_array, len_value);\n       return;\n@@ -363,7 +363,7 @@ sfindloc0_s1 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "bdf71c56f4e776898174b95243a04a3453c3ee5e", "filename": "libgfortran/generated/findloc0_s4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc0_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc0_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -58,7 +58,7 @@ findloc0_s4 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -199,7 +199,7 @@ mfindloc0_s4 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -347,7 +347,7 @@ sfindloc0_s4 (gfc_array_index_type * const restrict retarray,\n   index_type * restrict dest;\n   index_type n;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc0_s4 (retarray, array, value, back, len_array, len_value);\n       return;\n@@ -363,7 +363,7 @@ sfindloc0_s4 (gfc_array_index_type * const restrict retarray,\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "448994e77ce0b64c01e2b166d5e9c5e37113dd77", "filename": "libgfortran/generated/findloc1_c16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc1_c16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -103,7 +103,7 @@ findloc1_c16 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -291,7 +291,7 @@ mfindloc1_c16 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -407,7 +407,7 @@ sfindloc1_c16 (gfc_array_index_type * const restrict retarray,\n   index_type dim;\n   bool continue_loop;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc1_c16 (retarray, array, value, pdim, back);\n       return;\n@@ -464,7 +464,7 @@ sfindloc1_c16 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "5f8828969e431438918e1c4117ea64c07f5b2b18", "filename": "libgfortran/generated/findloc1_c4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc1_c4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -103,7 +103,7 @@ findloc1_c4 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -291,7 +291,7 @@ mfindloc1_c4 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -407,7 +407,7 @@ sfindloc1_c4 (gfc_array_index_type * const restrict retarray,\n   index_type dim;\n   bool continue_loop;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc1_c4 (retarray, array, value, pdim, back);\n       return;\n@@ -464,7 +464,7 @@ sfindloc1_c4 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "062eadf763dd2845aff5e07f56a37413fc34cd12", "filename": "libgfortran/generated/findloc1_c8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc1_c8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -103,7 +103,7 @@ findloc1_c8 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -291,7 +291,7 @@ mfindloc1_c8 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -407,7 +407,7 @@ sfindloc1_c8 (gfc_array_index_type * const restrict retarray,\n   index_type dim;\n   bool continue_loop;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc1_c8 (retarray, array, value, pdim, back);\n       return;\n@@ -464,7 +464,7 @@ sfindloc1_c8 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "35c3d35fdf8226049d44d2b84507e995bea4a1f6", "filename": "libgfortran/generated/findloc1_i1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc1_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -103,7 +103,7 @@ findloc1_i1 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -291,7 +291,7 @@ mfindloc1_i1 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -407,7 +407,7 @@ sfindloc1_i1 (gfc_array_index_type * const restrict retarray,\n   index_type dim;\n   bool continue_loop;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc1_i1 (retarray, array, value, pdim, back);\n       return;\n@@ -464,7 +464,7 @@ sfindloc1_i1 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "1e3ecd7fbac276cc882c59e04b84e35040e6565a", "filename": "libgfortran/generated/findloc1_i16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc1_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -103,7 +103,7 @@ findloc1_i16 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -291,7 +291,7 @@ mfindloc1_i16 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -407,7 +407,7 @@ sfindloc1_i16 (gfc_array_index_type * const restrict retarray,\n   index_type dim;\n   bool continue_loop;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc1_i16 (retarray, array, value, pdim, back);\n       return;\n@@ -464,7 +464,7 @@ sfindloc1_i16 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "5ba8755f08def6e27149b87ece0383d28aec8252", "filename": "libgfortran/generated/findloc1_i2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc1_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -103,7 +103,7 @@ findloc1_i2 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -291,7 +291,7 @@ mfindloc1_i2 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -407,7 +407,7 @@ sfindloc1_i2 (gfc_array_index_type * const restrict retarray,\n   index_type dim;\n   bool continue_loop;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc1_i2 (retarray, array, value, pdim, back);\n       return;\n@@ -464,7 +464,7 @@ sfindloc1_i2 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "a62bb786e3b442b49b3a5b182e830487125a9cec", "filename": "libgfortran/generated/findloc1_i4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc1_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -103,7 +103,7 @@ findloc1_i4 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -291,7 +291,7 @@ mfindloc1_i4 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -407,7 +407,7 @@ sfindloc1_i4 (gfc_array_index_type * const restrict retarray,\n   index_type dim;\n   bool continue_loop;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc1_i4 (retarray, array, value, pdim, back);\n       return;\n@@ -464,7 +464,7 @@ sfindloc1_i4 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "e25cb2442584e301d39e795f753fbd43976a1aaf", "filename": "libgfortran/generated/findloc1_i8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc1_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -103,7 +103,7 @@ findloc1_i8 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -291,7 +291,7 @@ mfindloc1_i8 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -407,7 +407,7 @@ sfindloc1_i8 (gfc_array_index_type * const restrict retarray,\n   index_type dim;\n   bool continue_loop;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc1_i8 (retarray, array, value, pdim, back);\n       return;\n@@ -464,7 +464,7 @@ sfindloc1_i8 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "7fe92d36662570b797233f8899a88a2771fef3ae", "filename": "libgfortran/generated/findloc1_r16.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc1_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -103,7 +103,7 @@ findloc1_r16 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -291,7 +291,7 @@ mfindloc1_r16 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -407,7 +407,7 @@ sfindloc1_r16 (gfc_array_index_type * const restrict retarray,\n   index_type dim;\n   bool continue_loop;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc1_r16 (retarray, array, value, pdim, back);\n       return;\n@@ -464,7 +464,7 @@ sfindloc1_r16 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "29204a87ad2303bb5603476b685438941bca3f0b", "filename": "libgfortran/generated/findloc1_r4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc1_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -103,7 +103,7 @@ findloc1_r4 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -291,7 +291,7 @@ mfindloc1_r4 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -407,7 +407,7 @@ sfindloc1_r4 (gfc_array_index_type * const restrict retarray,\n   index_type dim;\n   bool continue_loop;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc1_r4 (retarray, array, value, pdim, back);\n       return;\n@@ -464,7 +464,7 @@ sfindloc1_r4 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "9c9c410a0aa8c8383b93e2d628513b0864bdd159", "filename": "libgfortran/generated/findloc1_r8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc1_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -103,7 +103,7 @@ findloc1_r8 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -291,7 +291,7 @@ mfindloc1_r8 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -407,7 +407,7 @@ sfindloc1_r8 (gfc_array_index_type * const restrict retarray,\n   index_type dim;\n   bool continue_loop;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc1_r8 (retarray, array, value, pdim, back);\n       return;\n@@ -464,7 +464,7 @@ sfindloc1_r8 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "f9a065b35cf992b7965e633e933ef005a9b7fc86", "filename": "libgfortran/generated/findloc1_s1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc1_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -105,7 +105,7 @@ findloc1_s1 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -293,7 +293,7 @@ mfindloc1_s1 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -409,7 +409,7 @@ sfindloc1_s1 (gfc_array_index_type * const restrict retarray,\n   index_type dim;\n   bool continue_loop;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc1_s1 (retarray, array, value, pdim, back, len_array, len_value);\n       return;\n@@ -466,7 +466,7 @@ sfindloc1_s1 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "1487d581567489cd3ff5db0d3200e6cbc826b1be", "filename": "libgfortran/generated/findloc1_s4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc1_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc1_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -105,7 +105,7 @@ findloc1_s4 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -293,7 +293,7 @@ mfindloc1_s4 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -409,7 +409,7 @@ sfindloc1_s4 (gfc_array_index_type * const restrict retarray,\n   index_type dim;\n   bool continue_loop;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc1_s4 (retarray, array, value, pdim, back, len_array, len_value);\n       return;\n@@ -466,7 +466,7 @@ sfindloc1_s4 (gfc_array_index_type * const restrict retarray,\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "9b894a858953c55b1a51aaf3c04197c7f5e73da7", "filename": "libgfortran/generated/findloc2_s1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc2_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc2_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc2_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -145,7 +145,7 @@ sfindloc2_s1 (gfc_array_s1 * const restrict array,\n \t\t\t   GFC_LOGICAL_4 back, gfc_charlen_type len_array,\n \t\t\t   gfc_charlen_type len_value)\n {\n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       return findloc2_s1 (array, value, back, len_array, len_value);\n     }"}, {"sha": "7042df5dfb3537338c1f503be85fb81ba69a482a", "filename": "libgfortran/generated/findloc2_s4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc2_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Ffindloc2_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Ffindloc2_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -145,7 +145,7 @@ sfindloc2_s4 (gfc_array_s4 * const restrict array,\n \t\t\t   GFC_LOGICAL_4 back, gfc_charlen_type len_array,\n \t\t\t   gfc_charlen_type len_value)\n {\n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       return findloc2_s4 (array, value, back, len_array, len_value);\n     }"}, {"sha": "90e9e8cbd4038cdc10d014bcd2afea332e30c9ba", "filename": "libgfortran/generated/iall_i1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiall_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiall_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiall_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ miall_i1 (gfc_array_i1 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      iall_i1 (retarray, array, pdim, back);\n+#else\n+      iall_i1 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ siall_i1 (gfc_array_i1 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       iall_i1 (retarray, array, pdim, back);"}, {"sha": "b87109e93aff32f3067c765c397a483d92ee03ef", "filename": "libgfortran/generated/iall_i16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiall_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiall_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiall_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ miall_i16 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      iall_i16 (retarray, array, pdim, back);\n+#else\n+      iall_i16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ siall_i16 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       iall_i16 (retarray, array, pdim, back);"}, {"sha": "7ac579a1110db39e1bcdb1c727b919d8a1e08992", "filename": "libgfortran/generated/iall_i2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiall_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiall_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiall_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ miall_i2 (gfc_array_i2 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      iall_i2 (retarray, array, pdim, back);\n+#else\n+      iall_i2 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ siall_i2 (gfc_array_i2 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       iall_i2 (retarray, array, pdim, back);"}, {"sha": "0ffe50aea9ca3d755ae44c8b8c26692576efed7a", "filename": "libgfortran/generated/iall_i4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiall_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiall_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiall_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ miall_i4 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      iall_i4 (retarray, array, pdim, back);\n+#else\n+      iall_i4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ siall_i4 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       iall_i4 (retarray, array, pdim, back);"}, {"sha": "c9d6688ad845a92672d63fb607ab3a7cac0afbde", "filename": "libgfortran/generated/iall_i8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiall_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiall_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiall_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ miall_i8 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      iall_i8 (retarray, array, pdim, back);\n+#else\n+      iall_i8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ siall_i8 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       iall_i8 (retarray, array, pdim, back);"}, {"sha": "bbc69543553033e9249478f0fba6e8db8ee3b385", "filename": "libgfortran/generated/iany_i1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiany_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiany_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiany_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ miany_i1 (gfc_array_i1 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      iany_i1 (retarray, array, pdim, back);\n+#else\n+      iany_i1 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ siany_i1 (gfc_array_i1 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       iany_i1 (retarray, array, pdim, back);"}, {"sha": "f3604825e9a88c481173f79ade134af4a56a2223", "filename": "libgfortran/generated/iany_i16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiany_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiany_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiany_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ miany_i16 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      iany_i16 (retarray, array, pdim, back);\n+#else\n+      iany_i16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ siany_i16 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       iany_i16 (retarray, array, pdim, back);"}, {"sha": "5c462cd25e08d85850ed2e6f979980656dfdc3be", "filename": "libgfortran/generated/iany_i2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiany_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiany_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiany_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ miany_i2 (gfc_array_i2 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      iany_i2 (retarray, array, pdim, back);\n+#else\n+      iany_i2 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ siany_i2 (gfc_array_i2 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       iany_i2 (retarray, array, pdim, back);"}, {"sha": "c0eff89fc142540411e4afec9f93f5cb624cfcad", "filename": "libgfortran/generated/iany_i4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiany_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiany_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiany_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ miany_i4 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      iany_i4 (retarray, array, pdim, back);\n+#else\n+      iany_i4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ siany_i4 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       iany_i4 (retarray, array, pdim, back);"}, {"sha": "6b8956d873e32b08f0c173989d766fe5a653e9f7", "filename": "libgfortran/generated/iany_i8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiany_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiany_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiany_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ miany_i8 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      iany_i8 (retarray, array, pdim, back);\n+#else\n+      iany_i8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ siany_i8 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       iany_i8 (retarray, array, pdim, back);"}, {"sha": "75db3e6d64b4066805e9c14a87480b232be36444", "filename": "libgfortran/generated/iparity_i1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiparity_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiparity_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiparity_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ miparity_i1 (gfc_array_i1 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      iparity_i1 (retarray, array, pdim, back);\n+#else\n+      iparity_i1 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ siparity_i1 (gfc_array_i1 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       iparity_i1 (retarray, array, pdim, back);"}, {"sha": "70593f6a8cc5bdaae6bd7c0ca6c3f3fcc227deeb", "filename": "libgfortran/generated/iparity_i16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiparity_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiparity_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiparity_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ miparity_i16 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      iparity_i16 (retarray, array, pdim, back);\n+#else\n+      iparity_i16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ siparity_i16 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       iparity_i16 (retarray, array, pdim, back);"}, {"sha": "3fd08846309d950292ce67968b7910ed6aee4447", "filename": "libgfortran/generated/iparity_i2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiparity_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiparity_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiparity_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ miparity_i2 (gfc_array_i2 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      iparity_i2 (retarray, array, pdim, back);\n+#else\n+      iparity_i2 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ siparity_i2 (gfc_array_i2 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       iparity_i2 (retarray, array, pdim, back);"}, {"sha": "0ce622b5ece54fa2ea11ea7541eb152825ce207e", "filename": "libgfortran/generated/iparity_i4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiparity_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiparity_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiparity_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ miparity_i4 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      iparity_i4 (retarray, array, pdim, back);\n+#else\n+      iparity_i4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ siparity_i4 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       iparity_i4 (retarray, array, pdim, back);"}, {"sha": "7511fa3dacf9f6af7d58848d20f015ea6629cb7c", "filename": "libgfortran/generated/iparity_i8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiparity_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fiparity_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiparity_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ miparity_i8 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      iparity_i8 (retarray, array, pdim, back);\n+#else\n+      iparity_i8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ siparity_i8 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       iparity_i8 (retarray, array, pdim, back);"}, {"sha": "f67c478ee4bce74bcfd8d3f9b2598dd94483363e", "filename": "libgfortran/generated/maxloc0_16_i1.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_16_i1 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_16_i1 (retarray, array, back);\n       return;"}, {"sha": "8de56ac65d019cf43882a64625d49b3e118db1fc", "filename": "libgfortran/generated/maxloc0_16_i16.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_16_i16 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_16_i16 (retarray, array, back);\n       return;"}, {"sha": "a084a8d71fbae4435ca8622f056069da84220eae", "filename": "libgfortran/generated/maxloc0_16_i2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_16_i2 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_16_i2 (retarray, array, back);\n       return;"}, {"sha": "730dc7bc3500037a1416b2bdce1947e45da5e8c0", "filename": "libgfortran/generated/maxloc0_16_i4.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_16_i4 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_16_i4 (retarray, array, back);\n       return;"}, {"sha": "5cdeae5dcb097cf9d17fb21e9bf1e406f510b61e", "filename": "libgfortran/generated/maxloc0_16_i8.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_16_i8 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_16_i8 (retarray, array, back);\n       return;"}, {"sha": "4804599366b8085cc291f5190bdae5c920134c95", "filename": "libgfortran/generated/maxloc0_16_r10.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_r10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_16_r10 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_16_r10 (retarray, array, back);\n       return;"}, {"sha": "2e94aca0a675acb19feb843afde7f7bee2e1a719", "filename": "libgfortran/generated/maxloc0_16_r16.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_16_r16 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_16_r16 (retarray, array, back);\n       return;"}, {"sha": "e4ecabbde32767a06a8bf32985f073365d7de309", "filename": "libgfortran/generated/maxloc0_16_r4.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_16_r4 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_16_r4 (retarray, array, back);\n       return;"}, {"sha": "1faa4bbcf0b22295d37567dc336306dd772f94c9", "filename": "libgfortran/generated/maxloc0_16_r8.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_16_r8 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_16_r8 (retarray, array, back);\n       return;"}, {"sha": "ee2a8b7666f4805adbb65c33330c2b764a749b02", "filename": "libgfortran/generated/maxloc0_16_s1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -174,6 +174,16 @@ mmaxloc0_16_s1 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG    \n+      maxloc0_16_s1 (retarray, array, back, len);\n+#else\n+      maxloc0_16_s1 (retarray, array, len);\n+#endif\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -304,7 +314,7 @@ smaxloc0_16_s1 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG    \n       maxloc0_16_s1 (retarray, array, back, len);"}, {"sha": "b26fb68c3e06a64e8beaeee8e6c12f4fb120210f", "filename": "libgfortran/generated/maxloc0_16_s4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_16_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_16_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -174,6 +174,16 @@ mmaxloc0_16_s4 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG    \n+      maxloc0_16_s4 (retarray, array, back, len);\n+#else\n+      maxloc0_16_s4 (retarray, array, len);\n+#endif\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -304,7 +314,7 @@ smaxloc0_16_s4 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG    \n       maxloc0_16_s4 (retarray, array, back, len);"}, {"sha": "2976ee854aeee4d4ac7d9204934f1145098e6815", "filename": "libgfortran/generated/maxloc0_4_i1.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_4_i1 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_4_i1 (retarray, array, back);\n       return;"}, {"sha": "00e6beda7aef7462d5d76b08d7015af51e9068d9", "filename": "libgfortran/generated/maxloc0_4_i16.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_4_i16 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_4_i16 (retarray, array, back);\n       return;"}, {"sha": "1c973a07d8851a1106fc0648f7ea8414e724eb58", "filename": "libgfortran/generated/maxloc0_4_i2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_4_i2 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_4_i2 (retarray, array, back);\n       return;"}, {"sha": "3c704dad1bc652c1cbdc510de2819ff9880c8767", "filename": "libgfortran/generated/maxloc0_4_i4.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_4_i4 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_4_i4 (retarray, array, back);\n       return;"}, {"sha": "a755d7ad78a57fca0eab7124bd9fd056597df738", "filename": "libgfortran/generated/maxloc0_4_i8.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_4_i8 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_4_i8 (retarray, array, back);\n       return;"}, {"sha": "c50d0f63be8eaec72458b136172b7b0cfe3dae1a", "filename": "libgfortran/generated/maxloc0_4_r10.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_4_r10 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_4_r10 (retarray, array, back);\n       return;"}, {"sha": "d990e7730bd91ffbb81e96feaa6399b0bbd71bd5", "filename": "libgfortran/generated/maxloc0_4_r16.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_4_r16 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_4_r16 (retarray, array, back);\n       return;"}, {"sha": "cfc3a879596ec7b23de39844db79daad55b45eb3", "filename": "libgfortran/generated/maxloc0_4_r4.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_4_r4 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_4_r4 (retarray, array, back);\n       return;"}, {"sha": "6d6fe5a95b6e2fdb94ebc2195f7d59e29bb62888", "filename": "libgfortran/generated/maxloc0_4_r8.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_4_r8 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_4_r8 (retarray, array, back);\n       return;"}, {"sha": "8533614dc107f4f227a7c40083be68285773d086", "filename": "libgfortran/generated/maxloc0_4_s1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -174,6 +174,16 @@ mmaxloc0_4_s1 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG    \n+      maxloc0_4_s1 (retarray, array, back, len);\n+#else\n+      maxloc0_4_s1 (retarray, array, len);\n+#endif\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -304,7 +314,7 @@ smaxloc0_4_s1 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG    \n       maxloc0_4_s1 (retarray, array, back, len);"}, {"sha": "22d58ff5791720f6b5ed036171f5f17a36984354", "filename": "libgfortran/generated/maxloc0_4_s4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_4_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_4_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -174,6 +174,16 @@ mmaxloc0_4_s4 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG    \n+      maxloc0_4_s4 (retarray, array, back, len);\n+#else\n+      maxloc0_4_s4 (retarray, array, len);\n+#endif\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -304,7 +314,7 @@ smaxloc0_4_s4 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG    \n       maxloc0_4_s4 (retarray, array, back, len);"}, {"sha": "509b7f86a9d6bb1f152acb4167515887a294dcbe", "filename": "libgfortran/generated/maxloc0_8_i1.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_8_i1 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_8_i1 (retarray, array, back);\n       return;"}, {"sha": "c23d40cf456b3c3f97b7f9cf5bcaebe13485b050", "filename": "libgfortran/generated/maxloc0_8_i16.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_8_i16 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_8_i16 (retarray, array, back);\n       return;"}, {"sha": "3335c155552e65a9322f0d52f27588f6ba21356c", "filename": "libgfortran/generated/maxloc0_8_i2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_8_i2 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_8_i2 (retarray, array, back);\n       return;"}, {"sha": "eb61197e72d731d6c4a1f91580b92f8637825b37", "filename": "libgfortran/generated/maxloc0_8_i4.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_8_i4 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_8_i4 (retarray, array, back);\n       return;"}, {"sha": "9e1abfbcb50d1a0327fca7d0623c80cb8f4fdf71", "filename": "libgfortran/generated/maxloc0_8_i8.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_8_i8 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_8_i8 (retarray, array, back);\n       return;"}, {"sha": "1073c8bb3f0a028fbcb69fde1b86d5d65b2112b7", "filename": "libgfortran/generated/maxloc0_8_r10.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_8_r10 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_8_r10 (retarray, array, back);\n       return;"}, {"sha": "c86257880b59d494fdb4bfa39459c45ce1e8bfa1", "filename": "libgfortran/generated/maxloc0_8_r16.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_8_r16 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_8_r16 (retarray, array, back);\n       return;"}, {"sha": "1a4671cc25f970a42522b28797ea51a687383861", "filename": "libgfortran/generated/maxloc0_8_r4.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_8_r4 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_8_r4 (retarray, array, back);\n       return;"}, {"sha": "49480c618fc643559b46222b4c6db68cae790d99", "filename": "libgfortran/generated/maxloc0_8_r8.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mmaxloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      maxloc0_8_r8 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -369,7 +376,7 @@ smaxloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxloc0_8_r8 (retarray, array, back);\n       return;"}, {"sha": "a36e1df7acc511355eec66fdb6cb3ad8f5f9bfbf", "filename": "libgfortran/generated/maxloc0_8_s1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -174,6 +174,16 @@ mmaxloc0_8_s1 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG    \n+      maxloc0_8_s1 (retarray, array, back, len);\n+#else\n+      maxloc0_8_s1 (retarray, array, len);\n+#endif\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -304,7 +314,7 @@ smaxloc0_8_s1 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG    \n       maxloc0_8_s1 (retarray, array, back, len);"}, {"sha": "fc28686976b38c020ba130321e2bb616f0e30312", "filename": "libgfortran/generated/maxloc0_8_s4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc0_8_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc0_8_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -174,6 +174,16 @@ mmaxloc0_8_s4 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG    \n+      maxloc0_8_s4 (retarray, array, back, len);\n+#else\n+      maxloc0_8_s4 (retarray, array, len);\n+#endif\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -304,7 +314,7 @@ smaxloc0_8_s4 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG    \n       maxloc0_8_s4 (retarray, array, back, len);"}, {"sha": "bea0f3a8e8cef0c6e0d9f8566f279058cfa4ce8b", "filename": "libgfortran/generated/maxloc1_16_i1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_16_i1 (retarray, array, pdim, back);\n+#else\n+      maxloc1_16_i1 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_16_i1 (retarray, array, pdim, back);"}, {"sha": "a51d7e2a9d20a9e8a86bae1ec4e2f8757b861c95", "filename": "libgfortran/generated/maxloc1_16_i16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_16_i16 (retarray, array, pdim, back);\n+#else\n+      maxloc1_16_i16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_16_i16 (retarray, array, pdim, back);"}, {"sha": "ccbc7c95695cd9150bfe896bce54abb1311d16ad", "filename": "libgfortran/generated/maxloc1_16_i2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_16_i2 (retarray, array, pdim, back);\n+#else\n+      maxloc1_16_i2 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_16_i2 (retarray, array, pdim, back);"}, {"sha": "f92d61f25f48a3d18f00287f1d9cadf5f36430b5", "filename": "libgfortran/generated/maxloc1_16_i4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_16_i4 (retarray, array, pdim, back);\n+#else\n+      maxloc1_16_i4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_16_i4 (retarray, array, pdim, back);"}, {"sha": "75525645bed2e53ea24017111e84f8d5d020cad7", "filename": "libgfortran/generated/maxloc1_16_i8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_16_i8 (retarray, array, pdim, back);\n+#else\n+      maxloc1_16_i8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_16_i8 (retarray, array, pdim, back);"}, {"sha": "dc5e27c46316da027a5530c0488b91748f448127", "filename": "libgfortran/generated/maxloc1_16_r10.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_16_r10 (retarray, array, pdim, back);\n+#else\n+      maxloc1_16_r10 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_16_r10 (retarray, array, pdim, back);"}, {"sha": "c562d18c3378abd51bd2379e0e238d58bd407ef7", "filename": "libgfortran/generated/maxloc1_16_r16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_16_r16 (retarray, array, pdim, back);\n+#else\n+      maxloc1_16_r16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_16_r16 (retarray, array, pdim, back);"}, {"sha": "4a48f722bd5a8674279d2831b815d8e1a86783a2", "filename": "libgfortran/generated/maxloc1_16_r4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_16_r4 (retarray, array, pdim, back);\n+#else\n+      maxloc1_16_r4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_16_r4 (retarray, array, pdim, back);"}, {"sha": "aca6cc64171fe90dc473890e94eae65ee9e672ec", "filename": "libgfortran/generated/maxloc1_16_r8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_16_r8 (retarray, array, pdim, back);\n+#else\n+      maxloc1_16_r8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_16_r8 (retarray, array, pdim, back);"}, {"sha": "edc19759a0058a28aba0969713e9d38e48a3a8a8", "filename": "libgfortran/generated/maxloc1_16_s1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -241,6 +241,16 @@ mmaxloc1_16_s1 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_16_s1 (retarray, array, pdim, back, string_len);\n+#else\n+      maxloc1_16_s1 (retarray, array, pdim, string_len);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -436,7 +446,7 @@ smaxloc1_16_s1 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_16_s1 (retarray, array, pdim, back, string_len);"}, {"sha": "0f94b7b61c1befee364fafe880b2a7ce140f5e5f", "filename": "libgfortran/generated/maxloc1_16_s4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_16_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -241,6 +241,16 @@ mmaxloc1_16_s4 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_16_s4 (retarray, array, pdim, back, string_len);\n+#else\n+      maxloc1_16_s4 (retarray, array, pdim, string_len);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -436,7 +446,7 @@ smaxloc1_16_s4 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_16_s4 (retarray, array, pdim, back, string_len);"}, {"sha": "ad953ac49a8b4e21907385939d32ab16c8b8e514", "filename": "libgfortran/generated/maxloc1_4_i1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_4_i1 (retarray, array, pdim, back);\n+#else\n+      maxloc1_4_i1 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_4_i1 (retarray, array, pdim, back);"}, {"sha": "6cbebebbc6852013e64ccb19bcdf9a30d5ff9479", "filename": "libgfortran/generated/maxloc1_4_i16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_4_i16 (retarray, array, pdim, back);\n+#else\n+      maxloc1_4_i16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_4_i16 (retarray, array, pdim, back);"}, {"sha": "70dedf76e8dd9da3061020d7f61db183997b1d55", "filename": "libgfortran/generated/maxloc1_4_i2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_4_i2 (retarray, array, pdim, back);\n+#else\n+      maxloc1_4_i2 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_4_i2 (retarray, array, pdim, back);"}, {"sha": "775ada997ceb399b229d6bd4e300d18f7bbdc48c", "filename": "libgfortran/generated/maxloc1_4_i4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_4_i4 (retarray, array, pdim, back);\n+#else\n+      maxloc1_4_i4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_4_i4 (retarray, array, pdim, back);"}, {"sha": "e9361fe2455613075efd77de94e5e468752d6d70", "filename": "libgfortran/generated/maxloc1_4_i8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_4_i8 (retarray, array, pdim, back);\n+#else\n+      maxloc1_4_i8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_4_i8 (retarray, array, pdim, back);"}, {"sha": "0ce1684640b51b98da5587dd51439e8bb15ee592", "filename": "libgfortran/generated/maxloc1_4_r10.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_4_r10 (retarray, array, pdim, back);\n+#else\n+      maxloc1_4_r10 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_4_r10 (retarray, array, pdim, back);"}, {"sha": "b96a7f6770a7d79514f30c7dcfe3fb814fcfe4cd", "filename": "libgfortran/generated/maxloc1_4_r16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_4_r16 (retarray, array, pdim, back);\n+#else\n+      maxloc1_4_r16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_4_r16 (retarray, array, pdim, back);"}, {"sha": "ff2e105ae1d98e795a5d3d204d3e2c45d54b460e", "filename": "libgfortran/generated/maxloc1_4_r4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_4_r4 (retarray, array, pdim, back);\n+#else\n+      maxloc1_4_r4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_4_r4 (retarray, array, pdim, back);"}, {"sha": "d6bbc47b8841eff9ea9bc97149521dd604613a95", "filename": "libgfortran/generated/maxloc1_4_r8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_4_r8 (retarray, array, pdim, back);\n+#else\n+      maxloc1_4_r8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_4_r8 (retarray, array, pdim, back);"}, {"sha": "944d7111ba2e0cdd4e980705d69ec7eca1fd0576", "filename": "libgfortran/generated/maxloc1_4_s1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -241,6 +241,16 @@ mmaxloc1_4_s1 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_4_s1 (retarray, array, pdim, back, string_len);\n+#else\n+      maxloc1_4_s1 (retarray, array, pdim, string_len);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -436,7 +446,7 @@ smaxloc1_4_s1 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_4_s1 (retarray, array, pdim, back, string_len);"}, {"sha": "8afa10cf4eb25de18306b4dab779c34b1b6e9e51", "filename": "libgfortran/generated/maxloc1_4_s4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_4_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -241,6 +241,16 @@ mmaxloc1_4_s4 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_4_s4 (retarray, array, pdim, back, string_len);\n+#else\n+      maxloc1_4_s4 (retarray, array, pdim, string_len);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -436,7 +446,7 @@ smaxloc1_4_s4 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_4_s4 (retarray, array, pdim, back, string_len);"}, {"sha": "bb6e1012dc688f1fc3f36a7b75573c4319049587", "filename": "libgfortran/generated/maxloc1_8_i1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_8_i1 (retarray, array, pdim, back);\n+#else\n+      maxloc1_8_i1 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_8_i1 (retarray, array, pdim, back);"}, {"sha": "a15ded8a928d6c4435fede24bd5048f7c026ebbb", "filename": "libgfortran/generated/maxloc1_8_i16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_8_i16 (retarray, array, pdim, back);\n+#else\n+      maxloc1_8_i16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_8_i16 (retarray, array, pdim, back);"}, {"sha": "7435c5e38bec5ee13e524bba4929d36dbdecdb84", "filename": "libgfortran/generated/maxloc1_8_i2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_8_i2 (retarray, array, pdim, back);\n+#else\n+      maxloc1_8_i2 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_8_i2 (retarray, array, pdim, back);"}, {"sha": "b921916bac59ba73d130755864a65a798d7d8c80", "filename": "libgfortran/generated/maxloc1_8_i4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_8_i4 (retarray, array, pdim, back);\n+#else\n+      maxloc1_8_i4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_8_i4 (retarray, array, pdim, back);"}, {"sha": "9cc0a8ef6f2250860b30227ac8091d467859a927", "filename": "libgfortran/generated/maxloc1_8_i8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_8_i8 (retarray, array, pdim, back);\n+#else\n+      maxloc1_8_i8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_8_i8 (retarray, array, pdim, back);"}, {"sha": "e0d44ab1c0304419c187749812786af6f15fa3a1", "filename": "libgfortran/generated/maxloc1_8_r10.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_8_r10 (retarray, array, pdim, back);\n+#else\n+      maxloc1_8_r10 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_8_r10 (retarray, array, pdim, back);"}, {"sha": "de3ed8f8dc6ca237cffe474f908f15ad358a8892", "filename": "libgfortran/generated/maxloc1_8_r16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_8_r16 (retarray, array, pdim, back);\n+#else\n+      maxloc1_8_r16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_8_r16 (retarray, array, pdim, back);"}, {"sha": "f876b2509f813422afe822baab1c7811a2397885", "filename": "libgfortran/generated/maxloc1_8_r4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_8_r4 (retarray, array, pdim, back);\n+#else\n+      maxloc1_8_r4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_8_r4 (retarray, array, pdim, back);"}, {"sha": "6d27c2d48ba327354903207ca2a127640f2a610a", "filename": "libgfortran/generated/maxloc1_8_r8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -248,6 +248,16 @@ mmaxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_8_r8 (retarray, array, pdim, back);\n+#else\n+      maxloc1_8_r8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -470,7 +480,7 @@ smaxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_8_r8 (retarray, array, pdim, back);"}, {"sha": "9f693366114b4a5faa52b82588a3be4f91400cab", "filename": "libgfortran/generated/maxloc1_8_s1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -241,6 +241,16 @@ mmaxloc1_8_s1 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_8_s1 (retarray, array, pdim, back, string_len);\n+#else\n+      maxloc1_8_s1 (retarray, array, pdim, string_len);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -436,7 +446,7 @@ smaxloc1_8_s1 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_8_s1 (retarray, array, pdim, back, string_len);"}, {"sha": "1b7bb79584e9f698b76988a31f2b7d28a8bb3ae0", "filename": "libgfortran/generated/maxloc1_8_s4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxloc1_8_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -241,6 +241,16 @@ mmaxloc1_8_s4 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxloc1_8_s4 (retarray, array, pdim, back, string_len);\n+#else\n+      maxloc1_8_s4 (retarray, array, pdim, string_len);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -436,7 +446,7 @@ smaxloc1_8_s4 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxloc1_8_s4 (retarray, array, pdim, back, string_len);"}, {"sha": "67dcbd014cf7de53cf519ebfb3025256a7a55258", "filename": "libgfortran/generated/maxval0_s1.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval0_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval0_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval0_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -150,6 +150,12 @@ mmaxval0_s1 (GFC_UINTEGER_1 * const restrict ret,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+      maxval0_s1 (ret, xlen, array, len);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -247,7 +253,7 @@ smaxval0_s1 (GFC_UINTEGER_1 * restrict ret,\n \tGFC_LOGICAL_4 *mask, gfc_charlen_type len)\n \t\n {\n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxval0_s1 (ret, xlen, array, len);\n       return;"}, {"sha": "e9d95368a674ea1a06515218c7a7a2c9f79596ad", "filename": "libgfortran/generated/maxval0_s4.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval0_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval0_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval0_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -150,6 +150,12 @@ mmaxval0_s4 (GFC_UINTEGER_4 * const restrict ret,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+      maxval0_s4 (ret, xlen, array, len);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -247,7 +253,7 @@ smaxval0_s4 (GFC_UINTEGER_4 * restrict ret,\n \tGFC_LOGICAL_4 *mask, gfc_charlen_type len)\n \t\n {\n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxval0_s4 (ret, xlen, array, len);\n       return;"}, {"sha": "15e6bc2bec22f346171bc021a8aeed4b65c6f70b", "filename": "libgfortran/generated/maxval1_s1.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval1_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval1_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval1_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -239,6 +239,12 @@ mmaxval1_s1 (gfc_array_s1 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+      maxval1_s1 (retarray, xlen, array, pdim, string_len);\n+      return;\n+    }\n+\n   assert (xlen == string_len);\n \n   dim = (*pdim) - 1;\n@@ -436,7 +442,7 @@ smaxval1_s1 (gfc_array_s1 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxval1_s1 (retarray, xlen, array, pdim, string_len);\n       return;"}, {"sha": "6021d40b0c86e4f3bde2877750670f49f8168ca1", "filename": "libgfortran/generated/maxval1_s4.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval1_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval1_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval1_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -239,6 +239,12 @@ mmaxval1_s4 (gfc_array_s4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+      maxval1_s4 (retarray, xlen, array, pdim, string_len);\n+      return;\n+    }\n+\n   assert (xlen == string_len);\n \n   dim = (*pdim) - 1;\n@@ -436,7 +442,7 @@ smaxval1_s4 (gfc_array_s4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       maxval1_s4 (retarray, xlen, array, pdim, string_len);\n       return;"}, {"sha": "9688eeae4136f70892884b866d38c22d034e924e", "filename": "libgfortran/generated/maxval_i1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mmaxval_i1 (gfc_array_i1 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxval_i1 (retarray, array, pdim, back);\n+#else\n+      maxval_i1 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ smaxval_i1 (gfc_array_i1 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxval_i1 (retarray, array, pdim, back);"}, {"sha": "5593189ac5f48c7a670b65d35ffebf376dd3a744", "filename": "libgfortran/generated/maxval_i16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mmaxval_i16 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxval_i16 (retarray, array, pdim, back);\n+#else\n+      maxval_i16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ smaxval_i16 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxval_i16 (retarray, array, pdim, back);"}, {"sha": "6f1663286c3d8775b17979c175747b7707f23a72", "filename": "libgfortran/generated/maxval_i2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mmaxval_i2 (gfc_array_i2 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxval_i2 (retarray, array, pdim, back);\n+#else\n+      maxval_i2 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ smaxval_i2 (gfc_array_i2 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxval_i2 (retarray, array, pdim, back);"}, {"sha": "7456c2c031b0194af5ef71d587553318fcb331e2", "filename": "libgfortran/generated/maxval_i4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mmaxval_i4 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxval_i4 (retarray, array, pdim, back);\n+#else\n+      maxval_i4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ smaxval_i4 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxval_i4 (retarray, array, pdim, back);"}, {"sha": "afa69d14e5e2f76203c702ea91ade0660025d80c", "filename": "libgfortran/generated/maxval_i8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mmaxval_i8 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxval_i8 (retarray, array, pdim, back);\n+#else\n+      maxval_i8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ smaxval_i8 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxval_i8 (retarray, array, pdim, back);"}, {"sha": "b10ce3b4c94ae33c433f2f6cb8d5f10b7f35a925", "filename": "libgfortran/generated/maxval_r10.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mmaxval_r10 (gfc_array_r10 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxval_r10 (retarray, array, pdim, back);\n+#else\n+      maxval_r10 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ smaxval_r10 (gfc_array_r10 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxval_r10 (retarray, array, pdim, back);"}, {"sha": "3645e1c21f298270110b7cc7de3a185959ed270b", "filename": "libgfortran/generated/maxval_r16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mmaxval_r16 (gfc_array_r16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxval_r16 (retarray, array, pdim, back);\n+#else\n+      maxval_r16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ smaxval_r16 (gfc_array_r16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxval_r16 (retarray, array, pdim, back);"}, {"sha": "1f0a70ef11057676a17dce851d4245f93e5c9e18", "filename": "libgfortran/generated/maxval_r4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mmaxval_r4 (gfc_array_r4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxval_r4 (retarray, array, pdim, back);\n+#else\n+      maxval_r4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ smaxval_r4 (gfc_array_r4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxval_r4 (retarray, array, pdim, back);"}, {"sha": "a4536ea8121c497f090bd7c942d1d358cfb57012", "filename": "libgfortran/generated/maxval_r8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fmaxval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mmaxval_r8 (gfc_array_r8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      maxval_r8 (retarray, array, pdim, back);\n+#else\n+      maxval_r8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ smaxval_r8 (gfc_array_r8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       maxval_r8 (retarray, array, pdim, back);"}, {"sha": "f3df7e657383f6a338dd026d0b955430fb7c8be8", "filename": "libgfortran/generated/minloc0_16_i1.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_16_i1 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_16_i1 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_16_i1 (retarray, array, back);\n       return;"}, {"sha": "01dd0a2a0f2b4ab904df9187efbe461bd6ce8138", "filename": "libgfortran/generated/minloc0_16_i16.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_16_i16 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_16_i16 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_16_i16 (retarray, array, back);\n       return;"}, {"sha": "95763d7564aef1352cdd95253cc6ec51a6cb3187", "filename": "libgfortran/generated/minloc0_16_i2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_16_i2 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_16_i2 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_16_i2 (retarray, array, back);\n       return;"}, {"sha": "1965ef5d091fa99b4c93278d8c21548eb611206a", "filename": "libgfortran/generated/minloc0_16_i4.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_16_i4 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_16_i4 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_16_i4 (retarray, array, back);\n       return;"}, {"sha": "a2ae359233306cea17c2aa4277967fea63cbd720", "filename": "libgfortran/generated/minloc0_16_i8.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_16_i8 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_16_i8 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_16_i8 (retarray, array, back);\n       return;"}, {"sha": "206cd32c6f5aaa6733271464d78d7bc480e18636", "filename": "libgfortran/generated/minloc0_16_r10.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_16_r10 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_16_r10 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_16_r10 (retarray, array, back);\n       return;"}, {"sha": "25559bbefadf32f69e0ce30bdf4403b0e6b948b1", "filename": "libgfortran/generated/minloc0_16_r16.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_16_r16 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_16_r16 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_16_r16 (retarray, array, back);\n       return;"}, {"sha": "90034daa426c1502c866e317f1dc42c5a5e9ac93", "filename": "libgfortran/generated/minloc0_16_r4.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_16_r4 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_16_r4 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_16_r4 (retarray, array, back);\n       return;"}, {"sha": "3dc777f6f647fd5ef88a1aa536a45ea7e7f464af", "filename": "libgfortran/generated/minloc0_16_r8.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_16_r8 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_16_r8 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_16_r8 (retarray, array, back);\n       return;"}, {"sha": "1b2ee301946bcd79760e32ca1d97b6fe82eefb92", "filename": "libgfortran/generated/minloc0_16_s1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -174,6 +174,16 @@ mminloc0_16_s1 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG    \n+      minloc0_16_s1 (retarray, array, back, len);\n+#else\n+      minloc0_16_s1 (retarray, array, len);\n+#endif\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -304,7 +314,7 @@ sminloc0_16_s1 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG    \n       minloc0_16_s1 (retarray, array, back, len);"}, {"sha": "63b91c8ee7bcce96c880c3c0705890834f07b316", "filename": "libgfortran/generated/minloc0_16_s4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_16_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_16_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -174,6 +174,16 @@ mminloc0_16_s4 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG    \n+      minloc0_16_s4 (retarray, array, back, len);\n+#else\n+      minloc0_16_s4 (retarray, array, len);\n+#endif\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -304,7 +314,7 @@ sminloc0_16_s4 (gfc_array_i16 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_16 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG    \n       minloc0_16_s4 (retarray, array, back, len);"}, {"sha": "0783f9eccea8dd3e7b4b520b2dcc86d73dc2df21", "filename": "libgfortran/generated/minloc0_4_i1.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_4_i1 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_4_i1 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_4_i1 (retarray, array, back);\n       return;"}, {"sha": "1388531892a2517d95dc7eb4de381ed709e17e05", "filename": "libgfortran/generated/minloc0_4_i16.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_4_i16 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_4_i16 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_4_i16 (retarray, array, back);\n       return;"}, {"sha": "23900f2c8a44f2727a9005ec88d5a912773e8f30", "filename": "libgfortran/generated/minloc0_4_i2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_4_i2 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_4_i2 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_4_i2 (retarray, array, back);\n       return;"}, {"sha": "7c65389eb80191dd263bfcf4e334ab4816b6cf0f", "filename": "libgfortran/generated/minloc0_4_i4.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_4_i4 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_4_i4 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_4_i4 (retarray, array, back);\n       return;"}, {"sha": "6af912e7f86908ce6179271985c0828d954e2313", "filename": "libgfortran/generated/minloc0_4_i8.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_4_i8 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_4_i8 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_4_i8 (retarray, array, back);\n       return;"}, {"sha": "f6351f8ad66edd11b90f3ed17c03028da0c132d4", "filename": "libgfortran/generated/minloc0_4_r10.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_4_r10 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_4_r10 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_4_r10 (retarray, array, back);\n       return;"}, {"sha": "7232cef9117f6b40056e20e25f14fbc04a21b2a0", "filename": "libgfortran/generated/minloc0_4_r16.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_4_r16 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_4_r16 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_4_r16 (retarray, array, back);\n       return;"}, {"sha": "52d04b4794aed0bbedf31ce42b19bf35e845f7b7", "filename": "libgfortran/generated/minloc0_4_r4.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_4_r4 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_4_r4 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_4_r4 (retarray, array, back);\n       return;"}, {"sha": "1a7f5cb02a0508d27ae3327fcda8ee6886ce8790", "filename": "libgfortran/generated/minloc0_4_r8.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_4_r8 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_4_r8 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_4_r8 (retarray, array, back);\n       return;"}, {"sha": "79e7e7da858a4e8925cf7dcfefa3e5fb946ff000", "filename": "libgfortran/generated/minloc0_4_s1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -174,6 +174,16 @@ mminloc0_4_s1 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG    \n+      minloc0_4_s1 (retarray, array, back, len);\n+#else\n+      minloc0_4_s1 (retarray, array, len);\n+#endif\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -304,7 +314,7 @@ sminloc0_4_s1 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG    \n       minloc0_4_s1 (retarray, array, back, len);"}, {"sha": "e1e0344cc05ecf5c7fb1baceb23ceb3735d34520", "filename": "libgfortran/generated/minloc0_4_s4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_4_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_4_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -174,6 +174,16 @@ mminloc0_4_s4 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG    \n+      minloc0_4_s4 (retarray, array, back, len);\n+#else\n+      minloc0_4_s4 (retarray, array, len);\n+#endif\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -304,7 +314,7 @@ sminloc0_4_s4 (gfc_array_i4 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_4 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG    \n       minloc0_4_s4 (retarray, array, back, len);"}, {"sha": "31525c333d7e526508793d1622502bc79fff0791", "filename": "libgfortran/generated/minloc0_8_i1.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_8_i1 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_8_i1 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_8_i1 (retarray, array, back);\n       return;"}, {"sha": "c17cfc0735bd7ddb071c365dee70f75a87bc5547", "filename": "libgfortran/generated/minloc0_8_i16.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_8_i16 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_8_i16 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_8_i16 (retarray, array, back);\n       return;"}, {"sha": "bb0ec3a176f1b7446529ea5c227e473ecd48c4b0", "filename": "libgfortran/generated/minloc0_8_i2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_8_i2 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_8_i2 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_8_i2 (retarray, array, back);\n       return;"}, {"sha": "fe4427f668dcf19c0e10832626594107b1a5ee76", "filename": "libgfortran/generated/minloc0_8_i4.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_8_i4 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_8_i4 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_8_i4 (retarray, array, back);\n       return;"}, {"sha": "ee61838a8462fa382fdcfa5dad4c27bd5c29f86b", "filename": "libgfortran/generated/minloc0_8_i8.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_8_i8 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_8_i8 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_8_i8 (retarray, array, back);\n       return;"}, {"sha": "07fdaf4b82af30675f13ad537837623b4d2af877", "filename": "libgfortran/generated/minloc0_8_r10.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_8_r10 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_8_r10 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_8_r10 (retarray, array, back);\n       return;"}, {"sha": "489cb3509b3355e6c42571c389076c3785ec3aad", "filename": "libgfortran/generated/minloc0_8_r16.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_8_r16 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_8_r16 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_8_r16 (retarray, array, back);\n       return;"}, {"sha": "781ebc17674cf29b29875bd52c8074630cc48274", "filename": "libgfortran/generated/minloc0_8_r4.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_8_r4 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_8_r4 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_8_r4 (retarray, array, back);\n       return;"}, {"sha": "823babd5bded6738a4603ab5e841b681396e213a", "filename": "libgfortran/generated/minloc0_8_r8.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -198,6 +198,13 @@ mminloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      minloc0_8_r8 (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -368,7 +375,7 @@ sminloc0_8_r8 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minloc0_8_r8 (retarray, array, back);\n       return;"}, {"sha": "0768abceb90e20b3ac57563c055b4301e6d887bb", "filename": "libgfortran/generated/minloc0_8_s1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -174,6 +174,16 @@ mminloc0_8_s1 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG    \n+      minloc0_8_s1 (retarray, array, back, len);\n+#else\n+      minloc0_8_s1 (retarray, array, len);\n+#endif\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -304,7 +314,7 @@ sminloc0_8_s1 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG    \n       minloc0_8_s1 (retarray, array, back, len);"}, {"sha": "6e49c1f94bb1593582400eda390622caf939e0ec", "filename": "libgfortran/generated/minloc0_8_s4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc0_8_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc0_8_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -174,6 +174,16 @@ mminloc0_8_s4 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG    \n+      minloc0_8_s4 (retarray, array, back, len);\n+#else\n+      minloc0_8_s4 (retarray, array, len);\n+#endif\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -304,7 +314,7 @@ sminloc0_8_s4 (gfc_array_i8 * const restrict retarray,\n   index_type n;\n   GFC_INTEGER_8 *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG    \n       minloc0_8_s4 (retarray, array, back, len);"}, {"sha": "796cc6802e32d4096bc68bf21b727c65c1d2c41a", "filename": "libgfortran/generated/minloc1_16_i1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_16_i1 (retarray, array, pdim, back);\n+#else\n+      minloc1_16_i1 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_16_i1 (retarray, array, pdim, back);"}, {"sha": "47daa2a2270e0d7e7d6f78ce2ded76911f9a5a2a", "filename": "libgfortran/generated/minloc1_16_i16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_16_i16 (retarray, array, pdim, back);\n+#else\n+      minloc1_16_i16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_16_i16 (retarray, array, pdim, back);"}, {"sha": "db7b2b257a53ca032df419aa392f01f98f248aa9", "filename": "libgfortran/generated/minloc1_16_i2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_16_i2 (retarray, array, pdim, back);\n+#else\n+      minloc1_16_i2 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_16_i2 (retarray, array, pdim, back);"}, {"sha": "7a5a69dc494530dff83250a9b98b2ebda5e7556e", "filename": "libgfortran/generated/minloc1_16_i4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_16_i4 (retarray, array, pdim, back);\n+#else\n+      minloc1_16_i4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_16_i4 (retarray, array, pdim, back);"}, {"sha": "270ee87736ea6e9f72b272ef0529e2a4c9afa4f0", "filename": "libgfortran/generated/minloc1_16_i8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_16_i8 (retarray, array, pdim, back);\n+#else\n+      minloc1_16_i8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_16_i8 (retarray, array, pdim, back);"}, {"sha": "e1b8900d8eca934f15aa09c222c206871c600888", "filename": "libgfortran/generated/minloc1_16_r10.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_16_r10 (retarray, array, pdim, back);\n+#else\n+      minloc1_16_r10 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_16_r10 (retarray, array, pdim, back);"}, {"sha": "813137c321b4c5d74b5d20a6e9b9ff106e45fe0a", "filename": "libgfortran/generated/minloc1_16_r16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_16_r16 (retarray, array, pdim, back);\n+#else\n+      minloc1_16_r16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_16_r16 (retarray, array, pdim, back);"}, {"sha": "c6909d6319cc3500c1f819e91faa3e3efd6c3d57", "filename": "libgfortran/generated/minloc1_16_r4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_16_r4 (retarray, array, pdim, back);\n+#else\n+      minloc1_16_r4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_16_r4 (retarray, array, pdim, back);"}, {"sha": "1b83991940ccd3ac3e039cd6d62f5afa68ed711c", "filename": "libgfortran/generated/minloc1_16_r8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_16_r8 (retarray, array, pdim, back);\n+#else\n+      minloc1_16_r8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_16_r8 (retarray, array, pdim, back);"}, {"sha": "990ead0dd59256497ec13a77f139860f591f61ff", "filename": "libgfortran/generated/minloc1_16_s1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -241,6 +241,16 @@ mminloc1_16_s1 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_16_s1 (retarray, array, pdim, back, string_len);\n+#else\n+      minloc1_16_s1 (retarray, array, pdim, string_len);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -436,7 +446,7 @@ sminloc1_16_s1 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_16_s1 (retarray, array, pdim, back, string_len);"}, {"sha": "c5a7e977bc198b42de04b76f0ac1bd722ff0e1aa", "filename": "libgfortran/generated/minloc1_16_s4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_16_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -241,6 +241,16 @@ mminloc1_16_s4 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_16_s4 (retarray, array, pdim, back, string_len);\n+#else\n+      minloc1_16_s4 (retarray, array, pdim, string_len);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -436,7 +446,7 @@ sminloc1_16_s4 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_16_s4 (retarray, array, pdim, back, string_len);"}, {"sha": "61ab0fa9b619fe58fb09585754f4182305d61c5a", "filename": "libgfortran/generated/minloc1_4_i1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_4_i1 (retarray, array, pdim, back);\n+#else\n+      minloc1_4_i1 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_4_i1 (retarray, array, pdim, back);"}, {"sha": "38b1141c5ce773559694d1d1a37de5c682d0b3a0", "filename": "libgfortran/generated/minloc1_4_i16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_4_i16 (retarray, array, pdim, back);\n+#else\n+      minloc1_4_i16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_4_i16 (retarray, array, pdim, back);"}, {"sha": "3bd83909f818bf97d9b6886c9ca9a4392734366f", "filename": "libgfortran/generated/minloc1_4_i2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_4_i2 (retarray, array, pdim, back);\n+#else\n+      minloc1_4_i2 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_4_i2 (retarray, array, pdim, back);"}, {"sha": "3e04578b8b680cdb4c93cf98ac03181aef12ef29", "filename": "libgfortran/generated/minloc1_4_i4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_4_i4 (retarray, array, pdim, back);\n+#else\n+      minloc1_4_i4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_4_i4 (retarray, array, pdim, back);"}, {"sha": "5c4921d9bd549dd809f12b1fd8304787fe5e290b", "filename": "libgfortran/generated/minloc1_4_i8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_4_i8 (retarray, array, pdim, back);\n+#else\n+      minloc1_4_i8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_4_i8 (retarray, array, pdim, back);"}, {"sha": "a1305ee36211f8acb275edf9ef3944019f91400f", "filename": "libgfortran/generated/minloc1_4_r10.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_4_r10 (retarray, array, pdim, back);\n+#else\n+      minloc1_4_r10 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_4_r10 (retarray, array, pdim, back);"}, {"sha": "914f3c523297b914180cba367527da5aa9c84f88", "filename": "libgfortran/generated/minloc1_4_r16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_4_r16 (retarray, array, pdim, back);\n+#else\n+      minloc1_4_r16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_4_r16 (retarray, array, pdim, back);"}, {"sha": "4b816d7828a00d187b83cecb808654cdf9141e6f", "filename": "libgfortran/generated/minloc1_4_r4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_4_r4 (retarray, array, pdim, back);\n+#else\n+      minloc1_4_r4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_4_r4 (retarray, array, pdim, back);"}, {"sha": "1da3aae901a8aebc82e83db65df988363c98785b", "filename": "libgfortran/generated/minloc1_4_r8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_4_r8 (retarray, array, pdim, back);\n+#else\n+      minloc1_4_r8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_4_r8 (retarray, array, pdim, back);"}, {"sha": "ce653008aeee682530e722ae0f6087ef891c84b4", "filename": "libgfortran/generated/minloc1_4_s1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -241,6 +241,16 @@ mminloc1_4_s1 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_4_s1 (retarray, array, pdim, back, string_len);\n+#else\n+      minloc1_4_s1 (retarray, array, pdim, string_len);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -436,7 +446,7 @@ sminloc1_4_s1 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_4_s1 (retarray, array, pdim, back, string_len);"}, {"sha": "ef418088854aa01510e2782e6e8cf19e29900591", "filename": "libgfortran/generated/minloc1_4_s4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_4_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -241,6 +241,16 @@ mminloc1_4_s4 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_4_s4 (retarray, array, pdim, back, string_len);\n+#else\n+      minloc1_4_s4 (retarray, array, pdim, string_len);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -436,7 +446,7 @@ sminloc1_4_s4 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_4_s4 (retarray, array, pdim, back, string_len);"}, {"sha": "fd8c89e9a71bf59057919fbcc9d6c0f4b1642652", "filename": "libgfortran/generated/minloc1_8_i1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_8_i1 (retarray, array, pdim, back);\n+#else\n+      minloc1_8_i1 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_8_i1 (retarray, array, pdim, back);"}, {"sha": "9b746c46b281abb646b50ca0bbf5a0b8b8d201e5", "filename": "libgfortran/generated/minloc1_8_i16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_8_i16 (retarray, array, pdim, back);\n+#else\n+      minloc1_8_i16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_8_i16 (retarray, array, pdim, back);"}, {"sha": "50b856907870eac590252905d9781f86abe3e908", "filename": "libgfortran/generated/minloc1_8_i2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_8_i2 (retarray, array, pdim, back);\n+#else\n+      minloc1_8_i2 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_8_i2 (retarray, array, pdim, back);"}, {"sha": "a92af86a4bf59a6df50631320b27d608c40034ee", "filename": "libgfortran/generated/minloc1_8_i4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_8_i4 (retarray, array, pdim, back);\n+#else\n+      minloc1_8_i4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_8_i4 (retarray, array, pdim, back);"}, {"sha": "9c7d926bb5d833d805be590907d9feccbf6e73dc", "filename": "libgfortran/generated/minloc1_8_i8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_8_i8 (retarray, array, pdim, back);\n+#else\n+      minloc1_8_i8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_8_i8 (retarray, array, pdim, back);"}, {"sha": "bb3098609b9dcc6c1f0a00f6d826b6982c0ddcaa", "filename": "libgfortran/generated/minloc1_8_r10.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_8_r10 (retarray, array, pdim, back);\n+#else\n+      minloc1_8_r10 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_8_r10 (retarray, array, pdim, back);"}, {"sha": "20ca3528b47d51e82c225fcf0e8605b919751809", "filename": "libgfortran/generated/minloc1_8_r16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_8_r16 (retarray, array, pdim, back);\n+#else\n+      minloc1_8_r16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_8_r16 (retarray, array, pdim, back);"}, {"sha": "eebb153602ae8ec3aacb557a2e805c5f68f938b4", "filename": "libgfortran/generated/minloc1_8_r4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_8_r4 (retarray, array, pdim, back);\n+#else\n+      minloc1_8_r4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_8_r4 (retarray, array, pdim, back);"}, {"sha": "58b3cda79f3e746150be5876836f2f84489d04c9", "filename": "libgfortran/generated/minloc1_8_r8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -258,6 +258,16 @@ mminloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_8_r8 (retarray, array, pdim, back);\n+#else\n+      minloc1_8_r8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -480,7 +490,7 @@ sminloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_8_r8 (retarray, array, pdim, back);"}, {"sha": "f53a5906150115119e6e000f934e4e859bd6c9eb", "filename": "libgfortran/generated/minloc1_8_s1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -241,6 +241,16 @@ mminloc1_8_s1 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_8_s1 (retarray, array, pdim, back, string_len);\n+#else\n+      minloc1_8_s1 (retarray, array, pdim, string_len);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -436,7 +446,7 @@ sminloc1_8_s1 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_8_s1 (retarray, array, pdim, back, string_len);"}, {"sha": "ff4ee8c0690be4dcbbe0cf9cf625eb462355bda3", "filename": "libgfortran/generated/minloc1_8_s4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminloc1_8_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -241,6 +241,16 @@ mminloc1_8_s4 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minloc1_8_s4 (retarray, array, pdim, back, string_len);\n+#else\n+      minloc1_8_s4 (retarray, array, pdim, string_len);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -436,7 +446,7 @@ sminloc1_8_s4 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minloc1_8_s4 (retarray, array, pdim, back, string_len);"}, {"sha": "4f1d57e318ac78be2e5021d17cbd8115ef0240ce", "filename": "libgfortran/generated/minval0_s1.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval0_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval0_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval0_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -150,6 +150,12 @@ mminval0_s1 (GFC_UINTEGER_1 * const restrict ret,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+      minval0_s1 (ret, xlen, array, len);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -247,7 +253,7 @@ sminval0_s1 (GFC_UINTEGER_1 * restrict ret,\n \tGFC_LOGICAL_4 *mask, gfc_charlen_type len)\n \t\n {\n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minval0_s1 (ret, xlen, array, len);\n       return;"}, {"sha": "7a516b14f8e4862d9ce7d39cf7d246ee8e1426b0", "filename": "libgfortran/generated/minval0_s4.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval0_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval0_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval0_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -150,6 +150,12 @@ mminval0_s4 (GFC_UINTEGER_4 * const restrict ret,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+      minval0_s4 (ret, xlen, array, len);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -247,7 +253,7 @@ sminval0_s4 (GFC_UINTEGER_4 * restrict ret,\n \tGFC_LOGICAL_4 *mask, gfc_charlen_type len)\n \t\n {\n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minval0_s4 (ret, xlen, array, len);\n       return;"}, {"sha": "20ffa2c303f4f224b86e98d70ee0b38824b0d2a7", "filename": "libgfortran/generated/minval1_s1.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval1_s1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval1_s1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval1_s1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -239,6 +239,12 @@ mminval1_s1 (gfc_array_s1 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+      minval1_s1 (retarray, xlen, array, pdim, string_len);\n+      return;\n+    }\n+\n   assert (xlen == string_len);\n \n   dim = (*pdim) - 1;\n@@ -436,7 +442,7 @@ sminval1_s1 (gfc_array_s1 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minval1_s1 (retarray, xlen, array, pdim, string_len);\n       return;"}, {"sha": "4e97192b61931ec3bc1e451ea3441672f9a2b064", "filename": "libgfortran/generated/minval1_s4.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval1_s4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval1_s4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval1_s4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -239,6 +239,12 @@ mminval1_s4 (gfc_array_s4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+      minval1_s4 (retarray, xlen, array, pdim, string_len);\n+      return;\n+    }\n+\n   assert (xlen == string_len);\n \n   dim = (*pdim) - 1;\n@@ -436,7 +442,7 @@ sminval1_s4 (gfc_array_s4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       minval1_s4 (retarray, xlen, array, pdim, string_len);\n       return;"}, {"sha": "a72d29dbb5df35f3c401be25dd75935ae1e636c1", "filename": "libgfortran/generated/minval_i1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mminval_i1 (gfc_array_i1 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minval_i1 (retarray, array, pdim, back);\n+#else\n+      minval_i1 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ sminval_i1 (gfc_array_i1 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minval_i1 (retarray, array, pdim, back);"}, {"sha": "e08b7eedbd07df051997bbaba30303842ed34433", "filename": "libgfortran/generated/minval_i16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mminval_i16 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minval_i16 (retarray, array, pdim, back);\n+#else\n+      minval_i16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ sminval_i16 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minval_i16 (retarray, array, pdim, back);"}, {"sha": "50961c0e08ec47287f6da979f6b7f1d00a4c2c6c", "filename": "libgfortran/generated/minval_i2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mminval_i2 (gfc_array_i2 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minval_i2 (retarray, array, pdim, back);\n+#else\n+      minval_i2 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ sminval_i2 (gfc_array_i2 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minval_i2 (retarray, array, pdim, back);"}, {"sha": "018fcc4f29fd1d8a075a0f48c175a8733baff93e", "filename": "libgfortran/generated/minval_i4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mminval_i4 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minval_i4 (retarray, array, pdim, back);\n+#else\n+      minval_i4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ sminval_i4 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minval_i4 (retarray, array, pdim, back);"}, {"sha": "4258efe644849abaa99368a069e64375efbaa0f1", "filename": "libgfortran/generated/minval_i8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mminval_i8 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minval_i8 (retarray, array, pdim, back);\n+#else\n+      minval_i8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ sminval_i8 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minval_i8 (retarray, array, pdim, back);"}, {"sha": "365503338c314c861f78d592c9f6692aae108427", "filename": "libgfortran/generated/minval_r10.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mminval_r10 (gfc_array_r10 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minval_r10 (retarray, array, pdim, back);\n+#else\n+      minval_r10 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ sminval_r10 (gfc_array_r10 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minval_r10 (retarray, array, pdim, back);"}, {"sha": "bb9a9950510b79a667d4ee0f39ff65da185dd584", "filename": "libgfortran/generated/minval_r16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mminval_r16 (gfc_array_r16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minval_r16 (retarray, array, pdim, back);\n+#else\n+      minval_r16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ sminval_r16 (gfc_array_r16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minval_r16 (retarray, array, pdim, back);"}, {"sha": "4ad8ecab3c8f608cd7e816aa8ae0429d523ad14a", "filename": "libgfortran/generated/minval_r4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mminval_r4 (gfc_array_r4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minval_r4 (retarray, array, pdim, back);\n+#else\n+      minval_r4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ sminval_r4 (gfc_array_r4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minval_r4 (retarray, array, pdim, back);"}, {"sha": "9d39bf61e36d31bcd32ebe062b381333f672a767", "filename": "libgfortran/generated/minval_r8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fminval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -234,6 +234,16 @@ mminval_r8 (gfc_array_r8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      minval_r8 (retarray, array, pdim, back);\n+#else\n+      minval_r8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -441,7 +451,7 @@ sminval_r8 (gfc_array_r8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       minval_r8 (retarray, array, pdim, back);"}, {"sha": "71a255a61c622d01e850ef34cb4824754b32304c", "filename": "libgfortran/generated/product_c10.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ mproduct_c10 (gfc_array_c10 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      product_c10 (retarray, array, pdim, back);\n+#else\n+      product_c10 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ sproduct_c10 (gfc_array_c10 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       product_c10 (retarray, array, pdim, back);"}, {"sha": "9cb59caf2147e781219d3904093a1a01f2c37d8f", "filename": "libgfortran/generated/product_c16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ mproduct_c16 (gfc_array_c16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      product_c16 (retarray, array, pdim, back);\n+#else\n+      product_c16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ sproduct_c16 (gfc_array_c16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       product_c16 (retarray, array, pdim, back);"}, {"sha": "bfcb6b71f4b53a1cc2d83d6de20d0077e356b0ca", "filename": "libgfortran/generated/product_c4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ mproduct_c4 (gfc_array_c4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      product_c4 (retarray, array, pdim, back);\n+#else\n+      product_c4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ sproduct_c4 (gfc_array_c4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       product_c4 (retarray, array, pdim, back);"}, {"sha": "705b13167ffc489a7fba18c57c7a1e0c20ee6b8f", "filename": "libgfortran/generated/product_c8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ mproduct_c8 (gfc_array_c8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      product_c8 (retarray, array, pdim, back);\n+#else\n+      product_c8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ sproduct_c8 (gfc_array_c8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       product_c8 (retarray, array, pdim, back);"}, {"sha": "0b406780ec7413826c15e3761723a2835c8a42bc", "filename": "libgfortran/generated/product_i1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ mproduct_i1 (gfc_array_i1 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      product_i1 (retarray, array, pdim, back);\n+#else\n+      product_i1 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ sproduct_i1 (gfc_array_i1 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       product_i1 (retarray, array, pdim, back);"}, {"sha": "6896a0ef0bee13e6692f35ef8c6ef3f58074686c", "filename": "libgfortran/generated/product_i16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ mproduct_i16 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      product_i16 (retarray, array, pdim, back);\n+#else\n+      product_i16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ sproduct_i16 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       product_i16 (retarray, array, pdim, back);"}, {"sha": "a6423da006d43751caeef8f7075fc93bde9d582d", "filename": "libgfortran/generated/product_i2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ mproduct_i2 (gfc_array_i2 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      product_i2 (retarray, array, pdim, back);\n+#else\n+      product_i2 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ sproduct_i2 (gfc_array_i2 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       product_i2 (retarray, array, pdim, back);"}, {"sha": "fd1919ce98179415d0392968949653df29dc77c9", "filename": "libgfortran/generated/product_i4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ mproduct_i4 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      product_i4 (retarray, array, pdim, back);\n+#else\n+      product_i4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ sproduct_i4 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       product_i4 (retarray, array, pdim, back);"}, {"sha": "5cfeabc05d844a0665b88073b9cec043030773b0", "filename": "libgfortran/generated/product_i8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ mproduct_i8 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      product_i8 (retarray, array, pdim, back);\n+#else\n+      product_i8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ sproduct_i8 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       product_i8 (retarray, array, pdim, back);"}, {"sha": "28f3072aa5c985b1a7d304f27ff588cd38cd5c3a", "filename": "libgfortran/generated/product_r10.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ mproduct_r10 (gfc_array_r10 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      product_r10 (retarray, array, pdim, back);\n+#else\n+      product_r10 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ sproduct_r10 (gfc_array_r10 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       product_r10 (retarray, array, pdim, back);"}, {"sha": "b10027f2baeea21ff4092fdd7a862825f313f66f", "filename": "libgfortran/generated/product_r16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ mproduct_r16 (gfc_array_r16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      product_r16 (retarray, array, pdim, back);\n+#else\n+      product_r16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ sproduct_r16 (gfc_array_r16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       product_r16 (retarray, array, pdim, back);"}, {"sha": "e09a43a0b2101ac55daf890e5048536a3d15b02f", "filename": "libgfortran/generated/product_r4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ mproduct_r4 (gfc_array_r4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      product_r4 (retarray, array, pdim, back);\n+#else\n+      product_r4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ sproduct_r4 (gfc_array_r4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       product_r4 (retarray, array, pdim, back);"}, {"sha": "20068edd3565086a3bad1a8de72b27d5f3025427", "filename": "libgfortran/generated/product_r8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fproduct_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ mproduct_r8 (gfc_array_r8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      product_r8 (retarray, array, pdim, back);\n+#else\n+      product_r8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ sproduct_r8 (gfc_array_r8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       product_r8 (retarray, array, pdim, back);"}, {"sha": "d7f1e73435a5e4ac6092869a3180d79d66c0d420", "filename": "libgfortran/generated/sum_c10.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ msum_c10 (gfc_array_c10 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      sum_c10 (retarray, array, pdim, back);\n+#else\n+      sum_c10 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ ssum_c10 (gfc_array_c10 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       sum_c10 (retarray, array, pdim, back);"}, {"sha": "d1414d31a6c3f85bfa6ad79496656b9949f9f483", "filename": "libgfortran/generated/sum_c16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ msum_c16 (gfc_array_c16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      sum_c16 (retarray, array, pdim, back);\n+#else\n+      sum_c16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ ssum_c16 (gfc_array_c16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       sum_c16 (retarray, array, pdim, back);"}, {"sha": "d15a717369928a6d4b28abf87ed8863464b0c2f3", "filename": "libgfortran/generated/sum_c4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ msum_c4 (gfc_array_c4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      sum_c4 (retarray, array, pdim, back);\n+#else\n+      sum_c4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ ssum_c4 (gfc_array_c4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       sum_c4 (retarray, array, pdim, back);"}, {"sha": "55454e06d622d88f6ae6172431ddcd529e5bfa8a", "filename": "libgfortran/generated/sum_c8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ msum_c8 (gfc_array_c8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      sum_c8 (retarray, array, pdim, back);\n+#else\n+      sum_c8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ ssum_c8 (gfc_array_c8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       sum_c8 (retarray, array, pdim, back);"}, {"sha": "4b6d277b835ba23695edcabe411030a76545aa99", "filename": "libgfortran/generated/sum_i1.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i1.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ msum_i1 (gfc_array_i1 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      sum_i1 (retarray, array, pdim, back);\n+#else\n+      sum_i1 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ ssum_i1 (gfc_array_i1 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       sum_i1 (retarray, array, pdim, back);"}, {"sha": "25bb2ad40912903c14bae9c5bb79aba15cecb8ba", "filename": "libgfortran/generated/sum_i16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ msum_i16 (gfc_array_i16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      sum_i16 (retarray, array, pdim, back);\n+#else\n+      sum_i16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ ssum_i16 (gfc_array_i16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       sum_i16 (retarray, array, pdim, back);"}, {"sha": "b6816d85fac34d1a335ba26250fd29de9b4bfda7", "filename": "libgfortran/generated/sum_i2.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i2.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ msum_i2 (gfc_array_i2 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      sum_i2 (retarray, array, pdim, back);\n+#else\n+      sum_i2 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ ssum_i2 (gfc_array_i2 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       sum_i2 (retarray, array, pdim, back);"}, {"sha": "63e807e87e7ecf82400f8d1cf3bdff2f0a45041c", "filename": "libgfortran/generated/sum_i4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ msum_i4 (gfc_array_i4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      sum_i4 (retarray, array, pdim, back);\n+#else\n+      sum_i4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ ssum_i4 (gfc_array_i4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       sum_i4 (retarray, array, pdim, back);"}, {"sha": "a4557f6918037a268f8095874500ce407987278e", "filename": "libgfortran/generated/sum_i8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ msum_i8 (gfc_array_i8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      sum_i8 (retarray, array, pdim, back);\n+#else\n+      sum_i8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ ssum_i8 (gfc_array_i8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       sum_i8 (retarray, array, pdim, back);"}, {"sha": "863bcb681d86ee79048a096ac0ae8cfbca9a7c71", "filename": "libgfortran/generated/sum_r10.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r10.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ msum_r10 (gfc_array_r10 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      sum_r10 (retarray, array, pdim, back);\n+#else\n+      sum_r10 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ ssum_r10 (gfc_array_r10 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       sum_r10 (retarray, array, pdim, back);"}, {"sha": "f7e98f3083f7a3fb96b2986e8d1df671fc67041c", "filename": "libgfortran/generated/sum_r16.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r16.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ msum_r16 (gfc_array_r16 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      sum_r16 (retarray, array, pdim, back);\n+#else\n+      sum_r16 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ ssum_r16 (gfc_array_r16 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       sum_r16 (retarray, array, pdim, back);"}, {"sha": "a45791037620dcfec548031267a72914de986c46", "filename": "libgfortran/generated/sum_r4.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r4.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ msum_r4 (gfc_array_r4 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      sum_r4 (retarray, array, pdim, back);\n+#else\n+      sum_r4 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ ssum_r4 (gfc_array_r4 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       sum_r4 (retarray, array, pdim, back);"}, {"sha": "4d1b5a0f9e86864f3eee17a5ca84bb7e68e8bc13", "filename": "libgfortran/generated/sum_r8.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fgenerated%2Fsum_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r8.c?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -220,6 +220,16 @@ msum_r8 (gfc_array_r8 * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      sum_r8 (retarray, array, pdim, back);\n+#else\n+      sum_r8 (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -399,7 +409,7 @@ ssum_r8 (gfc_array_r8 * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       sum_r8 (retarray, array, pdim, back);"}, {"sha": "75ec531620f3008d731d72759393e9008fab1edf", "filename": "libgfortran/m4/ifindloc0.m4", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fifindloc0.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fifindloc0.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fifindloc0.m4?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -48,7 +48,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -179,7 +179,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else\n     {\n@@ -317,7 +317,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n   index_type * restrict dest;\n   index_type n;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc0_'atype_code` (retarray, array, value, back'len_arg`);\n       return;\n@@ -333,7 +333,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n       GFC_DIMENSION_SET(retarray->dim[0], 0, rank-1, 1);\n       retarray->dtype.rank = 1;\n       retarray->offset = 0;\n-      retarray->base_addr = xmallocarray (rank, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (rank, sizeof (index_type));\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "f4a709931d98a3ac3075835c4afd0e40447d47b2", "filename": "libgfortran/m4/ifindloc1.m4", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fifindloc1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fifindloc1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fifindloc1.m4?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -95,7 +95,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -273,7 +273,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n@@ -379,7 +379,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n   index_type dim;\n   bool continue_loop;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       findloc1_'atype_code`'` (retarray, array, value, pdim, back'len_arg`'`);\n       return;\n@@ -436,7 +436,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n       alloc_size = GFC_DESCRIPTOR_STRIDE(retarray,rank-1) * extent[rank-1];\n \n-      retarray->base_addr = xmallocarray (alloc_size, sizeof (GFC_INTEGER_4));\n+      retarray->base_addr = xmallocarray (alloc_size, sizeof (index_type));\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */"}, {"sha": "d6d785112c28b032974ecb8b9fbaece2a758f430", "filename": "libgfortran/m4/ifindloc2.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fifindloc2.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fifindloc2.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fifindloc2.m4?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -117,7 +117,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n }\n 'header3`'`\n {\n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       return findloc2_'atype_code` (array, value, back, len_array, len_value);\n     }"}, {"sha": "b841d1519c5b9a99849f6958d7430c05ce0de9c4", "filename": "libgfortran/m4/iforeach-s.m4", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fiforeach-s.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fiforeach-s.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fiforeach-s.m4?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -135,6 +135,16 @@ m'name`'rtype_qual`_'atype_code` ('rtype` * const restrict retarray,\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG    \n+      name`'rtype_qual`_'atype_code (retarray, array, back, len);\n+#else\n+      name`'rtype_qual`_'atype_code (retarray, array, len);\n+#endif\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -261,7 +271,7 @@ void\n   index_type n;\n   'rtype_name *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG    \n       name`'rtype_qual`_'atype_code (retarray, array, back, len);"}, {"sha": "63fde458ef1ac32b455a6bf9f7606f79d3052bc3", "filename": "libgfortran/m4/iforeach-s2.m4", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fiforeach-s2.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fiforeach-s2.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fiforeach-s2.m4?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -116,6 +116,12 @@ void\n   index_type n;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+      name`'rtype_qual`_'atype_code (ret, xlen, array, len);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -213,7 +219,7 @@ void\n \tGFC_LOGICAL_4 *mask, gfc_charlen_type len)\n \t\n {\n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       name`'rtype_qual`_'atype_code (ret, xlen, array, len);\n       return;"}, {"sha": "ede4a7faf4aae159304fa74854d01cf468ed02bf", "filename": "libgfortran/m4/iforeach.m4", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fiforeach.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fiforeach.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fiforeach.m4?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -123,6 +123,13 @@ void\n   index_type n;\n   int mask_kind;\n \n+\n+  if (mask == NULL)\n+    {\n+      name`'rtype_qual`_'atype_code (retarray, array, back);\n+      return;\n+    }\n+\n   rank = GFC_DESCRIPTOR_RANK (array);\n   if (rank <= 0)\n     runtime_error (\"Rank of array needs to be > 0\");\n@@ -247,7 +254,7 @@ void\n   index_type n;\n   rtype_name *dest;\n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       name`'rtype_qual`_'atype_code (retarray, array, back);\n       return;"}, {"sha": "16615aa290fc93031e2bb783e22b5a510f99dca6", "filename": "libgfortran/m4/ifunction-s.m4", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fifunction-s.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fifunction-s.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fifunction-s.m4?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -222,6 +222,16 @@ m'name`'rtype_qual`_'atype_code` ('rtype` * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      name`'rtype_qual`_'atype_code (retarray, array, pdim, back, string_len);\n+#else\n+      name`'rtype_qual`_'atype_code (retarray, array, pdim, string_len);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -400,7 +410,7 @@ s'name`'rtype_qual`_'atype_code` ('rtype` * const restrict retarray,\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       name`'rtype_qual`_'atype_code (retarray, array, pdim, back, string_len);"}, {"sha": "4d31c208e05ecbe9b9240c45a73c37dbd0b389f8", "filename": "libgfortran/m4/ifunction-s2.m4", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fifunction-s2.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fifunction-s2.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fifunction-s2.m4?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -225,6 +225,12 @@ void\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+      name`'rtype_qual`_'atype_code (retarray, xlen, array, pdim, string_len);\n+      return;\n+    }\n+\n   assert (xlen == string_len);\n \n   dim = (*pdim) - 1;\n@@ -408,7 +414,7 @@ void\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n       name`'rtype_qual`_'atype_code (retarray, xlen, array, pdim, string_len);\n       return;"}, {"sha": "c64217ec5db9df03421446de8a8b3c1f99318a9c", "filename": "libgfortran/m4/ifunction.m4", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fifunction.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea47ee9fd022b611cf238f0b58aafd8472b6913/libgfortran%2Fm4%2Fifunction.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fifunction.m4?ref=2ea47ee9fd022b611cf238f0b58aafd8472b6913", "patch": "@@ -210,6 +210,16 @@ m'name`'rtype_qual`_'atype_code` ('rtype` * const restrict retarray,\n   index_type mdelta;\n   int mask_kind;\n \n+  if (mask == NULL)\n+    {\n+#ifdef HAVE_BACK_ARG\n+      name`'rtype_qual`_'atype_code (retarray, array, pdim, back);\n+#else\n+      name`'rtype_qual`_'atype_code (retarray, array, pdim);\n+#endif\n+      return;\n+    }\n+\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n@@ -388,7 +398,7 @@ void\n   index_type dim;\n \n \n-  if (*mask)\n+  if (mask == NULL || *mask)\n     {\n #ifdef HAVE_BACK_ARG\n       name`'rtype_qual`_'atype_code (retarray, array, pdim, back);"}]}