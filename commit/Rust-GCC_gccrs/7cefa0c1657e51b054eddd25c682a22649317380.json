{"sha": "7cefa0c1657e51b054eddd25c682a22649317380", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NlZmEwYzE2NTdlNTFiMDU0ZWRkZDI1YzY4MmEyMjY0OTMxNzM4MA==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-10-17T22:51:35Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-10-17T22:51:35Z"}, "message": "class.c (ident_subst): Always alloca buffer.\n\n\t* class.c (ident_subst): Always alloca buffer.\n\t* java-opcodes.h (LAST_AND_UNUSED_JAVA_OPCODE): Add this dummy\n\topcode after including javaop.def.\n\t* jcf-dump.c (CHECK_PC_IN_RANGE): Return 0 from the arm of the\n\tconditional expression that exits, to avoid warnings.\n\t* verify.c (CHECK_PC_IN_RANGE): Mark the __GNUC__ definition as\n\ta user of an extension.\n\t* win32-host.c: Move check down to have non-empty file when\n\tWIN32 is not defined.\n\n\t* Make-lang.in (java-warn): Add STRICT_WARN.\n\t(java/jcf-io.o-warn): Don't have Werror for this file.\n\t* jcf-io.c (caching_stat): Add FIXME for non-POSIX scandir use.\n\nFrom-SVN: r89184", "tree": {"sha": "b6b89504cc8a80078f7f29637752de51fc170101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6b89504cc8a80078f7f29637752de51fc170101"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cefa0c1657e51b054eddd25c682a22649317380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cefa0c1657e51b054eddd25c682a22649317380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cefa0c1657e51b054eddd25c682a22649317380", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cefa0c1657e51b054eddd25c682a22649317380/comments", "author": null, "committer": null, "parents": [{"sha": "7c672dfc01a1838168baf1a63d2ca0e303eb421c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c672dfc01a1838168baf1a63d2ca0e303eb421c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c672dfc01a1838168baf1a63d2ca0e303eb421c"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "37239af166d654ce4495f434443ebfd7d40d407a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cefa0c1657e51b054eddd25c682a22649317380/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cefa0c1657e51b054eddd25c682a22649317380/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=7cefa0c1657e51b054eddd25c682a22649317380", "patch": "@@ -1,3 +1,19 @@\n+2004-10-17  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* class.c (ident_subst): Always alloca buffer.\n+\t* java-opcodes.h (LAST_AND_UNUSED_JAVA_OPCODE): Add this dummy\n+\topcode after including javaop.def.\n+\t* jcf-dump.c (CHECK_PC_IN_RANGE): Return 0 from the arm of the\n+\tconditional expression that exits, to avoid warnings.\n+\t* verify.c (CHECK_PC_IN_RANGE): Mark the __GNUC__ definition as\n+\ta user of an extension.\n+\t* win32-host.c: Move check down to have non-empty file when\n+\tWIN32 is not defined.\n+\n+\t* Make-lang.in (java-warn): Add STRICT_WARN.\n+\t(java/jcf-io.o-warn): Don't have Werror for this file.\n+\t* jcf-io.c (caching_stat): Add FIXME for non-POSIX scandir use.\n+\n 2004-10-16  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* expr.c (expr_add_location): Move declaration to before all"}, {"sha": "347a93d4c2a2a30906c0ccb5b5d5ad0b166ff888", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cefa0c1657e51b054eddd25c682a22649317380/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cefa0c1657e51b054eddd25c682a22649317380/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=7cefa0c1657e51b054eddd25c682a22649317380", "patch": "@@ -118,11 +118,15 @@ JCFDUMP_OBJS = java/jcf-dump.o java/jcf-io.o java/jcf-depend.o java/jcf-path.o \\\n \n JVGENMAIN_OBJS = java/jvgenmain.o java/mangle_name.o errors.o intl.o\n \n-# Use loose warnings for this front end.\n-java-warn = $(WERROR)\n+# Use strict warnings for this front end.\n+java-warn = $(STRICT_WARN)\n+\n # String length warnings\n jvspec.o-warn = -Wno-error\n \n+# Use of non-standardized scandir\n+java/jcf-io.o-warn = -Wno-error\n+\n jc1$(exeext): $(JAVA_OBJS) $(BACKEND) $(LIBDEPS)\n \trm -f $@\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\"}, {"sha": "b90513f1acce433be5b0946077bfc88169fe8ce5", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cefa0c1657e51b054eddd25c682a22649317380/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cefa0c1657e51b054eddd25c682a22649317380/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=7cefa0c1657e51b054eddd25c682a22649317380", "patch": "@@ -268,11 +268,8 @@ ident_subst (const char* old_name,\n   int prefix_len = strlen (prefix);\n   int suffix_len = strlen (suffix);\n   int i = prefix_len + old_length + suffix_len + 1;\n-#ifdef __GNUC__\n-  char buffer[i];\n-#else\n   char *buffer = alloca (i);\n-#endif\n+\n   strcpy (buffer, prefix);\n   for (i = 0; i < old_length; i++)\n     {"}, {"sha": "12b3a72f77f5dae948f4b296bb1db0f132eda55b", "filename": "gcc/java/java-opcodes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cefa0c1657e51b054eddd25c682a22649317380/gcc%2Fjava%2Fjava-opcodes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cefa0c1657e51b054eddd25c682a22649317380/gcc%2Fjava%2Fjava-opcodes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-opcodes.h?ref=7cefa0c1657e51b054eddd25c682a22649317380", "patch": "@@ -2,4 +2,5 @@ enum java_opcode {\n #define JAVAOP(NAME, CODE, KIND, TYPE, VALUE) OPCODE_##NAME = CODE,\n #include \"javaop.def\"\n #undef JAVAOP\n+LAST_AND_UNUSED_JAVA_OPCODE\n };"}, {"sha": "5f25369e0ce82ac3ac6adaae3c757b1c05aede3f", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cefa0c1657e51b054eddd25c682a22649317380/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cefa0c1657e51b054eddd25c682a22649317380/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=7cefa0c1657e51b054eddd25c682a22649317380", "patch": "@@ -1181,7 +1181,7 @@ disassemble_method (JCF* jcf, const unsigned char *byte_ops, int len)\n #define VAR_INDEX_2 (saw_index = 1, IMMEDIATE_u2)\n \n #define CHECK_PC_IN_RANGE(PC) (PC < 0 || PC > len ? \\\n-  (fprintf(stderr, _(\"Bad byte codes.\\n\")), exit(-1)) : 1)\n+  (fprintf(stderr, _(\"Bad byte codes.\\n\")), exit(-1), 0) : 1)\n \n /* Print out operand (if not implied by the opcode) for PUSCH opcodes.\n    These all push a constant onto the opcode stack. */"}, {"sha": "e0ab03e14cf6d4dbd9ea5cb6f92cd09d1106eaaf", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cefa0c1657e51b054eddd25c682a22649317380/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cefa0c1657e51b054eddd25c682a22649317380/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=7cefa0c1657e51b054eddd25c682a22649317380", "patch": "@@ -376,7 +376,8 @@ caching_stat (char *filename, struct stat *buf)\n \t particular, the type of the function pointer passed as the\n \t third argument sometimes takes a \"const struct dirent *\"\n \t parameter, and sometimes just a \"struct dirent *\".  We cast\n-\t to (void *) so that either way it is quietly accepted.  */\n+\t to (void *) so that either way it is quietly accepted.\n+\t FIXME: scandir is not in POSIX.  */\n       dent->num_files = scandir (filename, &dent->files, \n \t\t\t\t (void *) java_or_class_file, \n \t\t\t\t alphasort);"}, {"sha": "aaf7e4df1f428b13dcd6a67c8a9364fcc01a04f6", "filename": "gcc/java/verify.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cefa0c1657e51b054eddd25c682a22649317380/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cefa0c1657e51b054eddd25c682a22649317380/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=7cefa0c1657e51b054eddd25c682a22649317380", "patch": "@@ -404,7 +404,8 @@ pop_argument_types (tree arg_types)\n             { oldpc = LABEL_PC (tmplab); goto verify_error; }} while (0)\n \n #ifdef __GNUC__\n-#define CHECK_PC_IN_RANGE(PC) ({if (PC < 0 || PC > length) goto bad_pc; (void)1;})\n+#define CHECK_PC_IN_RANGE(PC) __extension__ \\\n+  ({if (PC < 0 || PC > length) goto bad_pc; (void)1;})\n #else\n #define CHECK_PC_IN_RANGE(PC) (PC < 0 || PC > length ? (abort (), 0) : 1)\n #endif"}, {"sha": "a6e5309b105ece5bf902027c6583e5eaed1addcd", "filename": "gcc/java/win32-host.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cefa0c1657e51b054eddd25c682a22649317380/gcc%2Fjava%2Fwin32-host.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cefa0c1657e51b054eddd25c682a22649317380/gcc%2Fjava%2Fwin32-host.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fwin32-host.c?ref=7cefa0c1657e51b054eddd25c682a22649317380", "patch": "@@ -24,13 +24,14 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n /* Written by Mohan Embar <gnustuff@thisiscool.com>, March 2003. */\n \n-#ifdef WIN32\n \n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"jcf.h\"\n \n+#ifdef WIN32\n+\n #define WIN32_LEAN_AND_MEAN\n #include <windows.h>\n #undef WIN32_LEAN_AND_MEAN"}]}