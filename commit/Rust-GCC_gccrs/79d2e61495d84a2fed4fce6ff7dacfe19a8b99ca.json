{"sha": "79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlkMmU2MTQ5NWQ4NGEyZmVkNGZjZTZmZjdkYWNmZTE5YThiOTljYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-11-28T08:36:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-28T08:36:06Z"}, "message": "re PR tree-optimization/92691 (ICE in strlen_dom_walker::before_dom_children at gcc/tree-ssa-strlen.c:5177 since r274933)\n\n\tPR tree-optimization/92691\n\t* tree-ssa-strlen.c (handle_store): Clarify return value meaning\n\tin function comment.\n\t(strlen_check_and_optimize_call): Likewise.  For handle_printf_call\n\tcalls, return !handle_printf_call rather than always returning true.\n\t(check_and_optimize_stmt): Describe return value meaning in function\n\tcomment.  Formatting fix.\n\n\t* gcc.dg/tree-ssa/builtin-snprintf-10.c: New test.\n\nFrom-SVN: r278803", "tree": {"sha": "5a5df5a2b8c1b5daafe7aaef4120157ebbce57d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a5df5a2b8c1b5daafe7aaef4120157ebbce57d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99150b053e1840ffc47704a9188e26c889d07517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99150b053e1840ffc47704a9188e26c889d07517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99150b053e1840ffc47704a9188e26c889d07517"}], "stats": {"total": 95, "additions": 59, "deletions": 36}, "files": [{"sha": "7e032f7b579fc5775d7e64379f5b396c6199478a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca", "patch": "@@ -1,3 +1,13 @@\n+2019-11-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/92691\n+\t* tree-ssa-strlen.c (handle_store): Clarify return value meaning\n+\tin function comment.\n+\t(strlen_check_and_optimize_call): Likewise.  For handle_printf_call\n+\tcalls, return !handle_printf_call rather than always returning true.\n+\t(check_and_optimize_stmt): Describe return value meaning in function\n+\tcomment.  Formatting fix.\n+\n 2019-11-28  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* profile-count.c (profile_count::to_sreal_scale): Handle correctly"}, {"sha": "d5a06a161c41dde32faa0a2f873862067aabeb3a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca", "patch": "@@ -1,5 +1,8 @@\n 2019-11-28  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/92691\n+\t* gcc.dg/tree-ssa/builtin-snprintf-10.c: New test.\n+\n \tPR c++/92695\n \t* g++.dg/warn/inline3.C: New test.\n "}, {"sha": "07ee4e587a25dd7bd38b98f5bae461f9496c0f80", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-snprintf-10.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-10.c?ref=79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca", "patch": "@@ -0,0 +1,10 @@\n+/* PR tree-optimization/92691 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+void\n+foo (int x, char *y)\n+{\n+  if (x != 0)\n+    __builtin_snprintf (y, 0, \"foo\");\n+}"}, {"sha": "d46586a90e5337aec7fec0a2a5440b8f3c9e4f46", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=79d2e61495d84a2fed4fce6ff7dacfe19a8b99ca", "patch": "@@ -4300,7 +4300,8 @@ count_nonzero_bytes (tree exp, unsigned lenrange[3], bool *nulterm,\n /* Handle a single or multibyte store other than by a built-in function,\n    either via a single character assignment or by multi-byte assignment\n    either via MEM_REF or via a type other than char (such as in\n-   '*(int*)a = 12345').  Return true when handled.  */\n+   '*(int*)a = 12345').  Return true to let the caller advance *GSI to\n+   the next statement in the basic block and false otherwise.  */\n \n static bool\n handle_store (gimple_stmt_iterator *gsi, bool *zero_write, const vr_values *rvals)\n@@ -4728,8 +4729,8 @@ is_char_type (tree type)\n }\n \n /* Check the built-in call at GSI for validity and optimize it.\n-   Return true to let the caller advance *GSI to the statement\n-   in the CFG and false otherwise.  */\n+   Return true to let the caller advance *GSI to the next statement\n+   in the basic block and false otherwise.  */\n \n static bool\n strlen_check_and_optimize_call (gimple_stmt_iterator *gsi,\n@@ -4738,16 +4739,13 @@ strlen_check_and_optimize_call (gimple_stmt_iterator *gsi,\n {\n   gimple *stmt = gsi_stmt (*gsi);\n \n+  /* When not optimizing we must be checking printf calls which\n+     we do even for user-defined functions when they are declared\n+     with attribute format.  */\n   if (!flag_optimize_strlen\n       || !strlen_optimize\n       || !valid_builtin_call (stmt))\n-    {\n-      /* When not optimizing we must be checking printf calls which\n-\t we do even for user-defined functions when they are declared\n-\t with attribute format.  */\n-      handle_printf_call (gsi, rvals);\n-      return true;\n-    }\n+    return !handle_printf_call (gsi, rvals);\n \n   tree callee = gimple_call_fndecl (stmt);\n   switch (DECL_FUNCTION_CODE (callee))\n@@ -4806,7 +4804,8 @@ strlen_check_and_optimize_call (gimple_stmt_iterator *gsi,\n \treturn false;\n       break;\n     default:\n-      handle_printf_call (gsi, rvals);\n+      if (handle_printf_call (gsi, rvals))\n+\treturn false;\n       break;\n     }\n \n@@ -4932,7 +4931,8 @@ handle_integral_assign (gimple_stmt_iterator *gsi, bool *cleanup_eh)\n /* Attempt to check for validity of the performed access a single statement\n    at *GSI using string length knowledge, and to optimize it.\n    If the given basic block needs clean-up of EH, CLEANUP_EH is set to\n-   true.  */\n+   true.  Return true to let the caller advance *GSI to the next statement\n+   in the basic block and false otherwise.  */\n \n static bool\n check_and_optimize_stmt (gimple_stmt_iterator *gsi, bool *cleanup_eh,\n@@ -4973,32 +4973,32 @@ check_and_optimize_stmt (gimple_stmt_iterator *gsi, bool *cleanup_eh,\n \t/* Handle assignment to a character.  */\n \thandle_integral_assign (gsi, cleanup_eh);\n       else if (TREE_CODE (lhs) != SSA_NAME && !TREE_SIDE_EFFECTS (lhs))\n-      {\n-\ttree type = TREE_TYPE (lhs);\n-\tif (TREE_CODE (type) == ARRAY_TYPE)\n-\t  type = TREE_TYPE (type);\n+\t{\n+\t  tree type = TREE_TYPE (lhs);\n+\t  if (TREE_CODE (type) == ARRAY_TYPE)\n+\t    type = TREE_TYPE (type);\n \n-\tbool is_char_store = is_char_type (type);\n-\tif (!is_char_store && TREE_CODE (lhs) == MEM_REF)\n-\t  {\n-\t    /* To consider stores into char objects via integer types\n-\t       other than char but not those to non-character objects,\n-\t       determine the type of the destination rather than just\n-\t       the type of the access.  */\n-\t    tree ref = TREE_OPERAND (lhs, 0);\n-\t    type = TREE_TYPE (ref);\n-\t    if (TREE_CODE (type) == POINTER_TYPE)\n-\t      type = TREE_TYPE (type);\n-\t    if (TREE_CODE (type) == ARRAY_TYPE)\n-\t      type = TREE_TYPE (type);\n-\t    if (is_char_type (type))\n-\t      is_char_store = true;\n-\t  }\n+\t  bool is_char_store = is_char_type (type);\n+\t  if (!is_char_store && TREE_CODE (lhs) == MEM_REF)\n+\t    {\n+\t      /* To consider stores into char objects via integer types\n+\t\t other than char but not those to non-character objects,\n+\t\t determine the type of the destination rather than just\n+\t\t the type of the access.  */\n+\t      tree ref = TREE_OPERAND (lhs, 0);\n+\t      type = TREE_TYPE (ref);\n+\t      if (TREE_CODE (type) == POINTER_TYPE)\n+\t\ttype = TREE_TYPE (type);\n+\t      if (TREE_CODE (type) == ARRAY_TYPE)\n+\t\ttype = TREE_TYPE (type);\n+\t      if (is_char_type (type))\n+\t\tis_char_store = true;\n+\t    }\n \n-\t/* Handle a single or multibyte assignment.  */\n-\tif (is_char_store && !handle_store (gsi, &zero_write, rvals))\n-\t  return false;\n-      }\n+\t  /* Handle a single or multibyte assignment.  */\n+\t  if (is_char_store && !handle_store (gsi, &zero_write, rvals))\n+\t    return false;\n+\t}\n     }\n   else if (gcond *cond = dyn_cast<gcond *> (stmt))\n     {"}]}