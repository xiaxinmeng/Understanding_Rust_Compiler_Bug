{"sha": "56477c21e0535f02329ec21ee68f921b360f3a4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY0NzdjMjFlMDUzNWYwMjMyOWVjMjFlZTY4ZjkyMWIzNjBmM2E0Yw==", "commit": {"author": {"name": "Adrian Straetling", "email": "straetling@de.ibm.com", "date": "2005-12-14T16:08:57Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2005-12-14T16:08:57Z"}, "message": "s390.md (\"extend<mode>di2\", [...]): Merge.\n\n2005-12-14  Adrian Straetling  <straetling@de.ibm.com>\n\n\t* config/s390/s390.md (\"extend<mode>di2\", \"extend<mode>si2\"): Merge.\n\t(\"*extendqidi2_extimm\", \"*extendqisi2_extimm\"): Merge.\n\t(\"*extendqidi2\", \"*extendqisi2\") Merge.\n\t(\"*extendqidi2_short_displ\", \"*extendqisi2_short_displ\"): Merge.\n\t(\"zero_extendhidi2\", \"zero_extendqidi2\"): Merge.\n\t(\"*zero_extend<mode>di2_extimm\", \"*zero_extend<mode>si2_extimm\"): Merge.\n\tMove some patterns to retain partial ordering.\n\nFrom-SVN: r108515", "tree": {"sha": "c4c8dd56403d176650b1e576dc26d64f2549a44e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4c8dd56403d176650b1e576dc26d64f2549a44e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56477c21e0535f02329ec21ee68f921b360f3a4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56477c21e0535f02329ec21ee68f921b360f3a4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56477c21e0535f02329ec21ee68f921b360f3a4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56477c21e0535f02329ec21ee68f921b360f3a4c/comments", "author": null, "committer": null, "parents": [{"sha": "0101708cff1c9f2bc2a1ec468c2139ddddc60fd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0101708cff1c9f2bc2a1ec468c2139ddddc60fd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0101708cff1c9f2bc2a1ec468c2139ddddc60fd5"}], "stats": {"total": 213, "additions": 82, "deletions": 131}, "files": [{"sha": "68b77959044b0e70be9486795e05898ea9494545", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56477c21e0535f02329ec21ee68f921b360f3a4c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56477c21e0535f02329ec21ee68f921b360f3a4c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56477c21e0535f02329ec21ee68f921b360f3a4c", "patch": "@@ -1,3 +1,13 @@\n+2005-12-14  Adrian Straetling  <straetling@de.ibm.com>\n+\n+\t* config/s390/s390.md (\"extend<mode>di2\", \"extend<mode>si2\"): Merge.\n+\t(\"*extendqidi2_extimm\", \"*extendqisi2_extimm\"): Merge.\n+\t(\"*extendqidi2\", \"*extendqisi2\") Merge.\n+\t(\"*extendqidi2_short_displ\", \"*extendqisi2_short_displ\"): Merge.\n+\t(\"zero_extendhidi2\", \"zero_extendqidi2\"): Merge.\n+\t(\"*zero_extend<mode>di2_extimm\", \"*zero_extend<mode>si2_extimm\"): Merge.\n+\tMove some patterns to retain partial ordering.\n+\n 2005-12-14  Adrian Straetling  <straetling@de.ibm.com>\n \n \t* config/s390/s390.md (\"atype\", \"length\"): Rewrite."}, {"sha": "3c634b303cea4ce5f33c361c827656e5d8738f17", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 72, "deletions": 131, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56477c21e0535f02329ec21ee68f921b360f3a4c/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56477c21e0535f02329ec21ee68f921b360f3a4c/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=56477c21e0535f02329ec21ee68f921b360f3a4c", "patch": "@@ -2650,32 +2650,37 @@\n   [(set_attr \"op_type\" \"RRE,RXY\")])\n \n ;\n-; extend(hi|qi)di2 instruction pattern(s).\n+; extend(hi|qi)(si|di)2 instruction pattern(s).\n ;\n \n-(define_expand \"extend<mode>di2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (sign_extend:DI (match_operand:HQI 1 \"nonimmediate_operand\" \"\")))]\n+(define_expand \"extend<HQI:mode><DSI:mode>2\"\n+  [(set (match_operand:DSI 0 \"register_operand\" \"\")\n+        (sign_extend:DSI (match_operand:HQI 1 \"nonimmediate_operand\" \"\")))]\n   \"\"\n {\n-  if (!TARGET_64BIT)\n+  if (<DSI:MODE>mode == DImode && !TARGET_64BIT)\n     {\n       rtx tmp = gen_reg_rtx (SImode);\n-      emit_insn (gen_extend<mode>si2 (tmp, operands[1]));\n+      emit_insn (gen_extend<HQI:mode>si2 (tmp, operands[1]));\n       emit_insn (gen_extendsidi2 (operands[0], tmp));\n       DONE;\n     }\n   else if (!TARGET_EXTIMM)\n     {\n-      rtx bitcount = GEN_INT (GET_MODE_BITSIZE (DImode) - \n-\t\t\t      GET_MODE_BITSIZE (<MODE>mode));\n-      operands[1] = gen_lowpart (DImode, operands[1]);\n-      emit_insn (gen_ashldi3 (operands[0], operands[1], bitcount));\n-      emit_insn (gen_ashrdi3 (operands[0], operands[0], bitcount));\n+      rtx bitcount = GEN_INT (GET_MODE_BITSIZE (<DSI:MODE>mode) -\n+\t\t\t      GET_MODE_BITSIZE (<HQI:MODE>mode));\n+\n+      operands[1] = gen_lowpart (<DSI:MODE>mode, operands[1]);\n+      emit_insn (gen_ashl<DSI:mode>3 (operands[0], operands[1], bitcount));\n+      emit_insn (gen_ashr<DSI:mode>3 (operands[0], operands[0], bitcount));\n       DONE;\n     }\n })\n \n+;\n+; extendhidi2 instruction pattern(s).\n+;\n+\n (define_insn \"*extendhidi2_extimm\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n         (sign_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"d,m\")))]\n@@ -2692,60 +2697,10 @@\n   \"lgh\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXY\")])\n \n-(define_insn \"*extendqidi2_extimm\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (sign_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"d,m\")))]\n-  \"TARGET_64BIT && TARGET_EXTIMM\"\n-  \"@\n-   lgbr\\t%0,%1\n-   lgb\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RRE,RXY\")])\n-\n-(define_insn \"*extendqidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (sign_extend:DI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_64BIT && TARGET_LONG_DISPLACEMENT\"\n-  \"lgb\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RXY\")])\n-\n-(define_insn_and_split \"*extendqidi2_short_displ\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (sign_extend:DI (match_operand:QI 1 \"s_operand\" \"Q\")))\n-   (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_64BIT && !TARGET_LONG_DISPLACEMENT\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(parallel\n-    [(set (match_dup 0) (unspec:DI [(match_dup 1) (const_int 8)] UNSPEC_ICM))\n-     (clobber (reg:CC CC_REGNUM))])\n-   (parallel\n-    [(set (match_dup 0) (ashiftrt:DI (match_dup 0) (const_int 56)))\n-     (clobber (reg:CC CC_REGNUM))])]\n-{\n-  operands[1] = adjust_address (operands[1], BLKmode, 0);\n-  set_mem_size (operands[1], GEN_INT (GET_MODE_SIZE (QImode)));\n-})\n-\n ;\n-; extend(hi|qi)si2 instruction pattern(s).\n+; extendhisi2 instruction pattern(s).\n ;\n \n-(define_expand \"extend<mode>si2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-        (sign_extend:SI (match_operand:HQI 1 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n-{\n- if (!TARGET_EXTIMM)\n-   {\n-     rtx bitcount = GEN_INT (GET_MODE_BITSIZE(SImode) - \n-\t\t\t     GET_MODE_BITSIZE(<MODE>mode));\n-     operands[1] = gen_lowpart (SImode, operands[1]);\n-     emit_insn (gen_ashlsi3 (operands[0], operands[1], bitcount));\n-     emit_insn (gen_ashrsi3 (operands[0], operands[0], bitcount));\n-     DONE;\n-   }\n-})\n-\n (define_insn \"*extendhisi2_extimm\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n         (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"d,R,T\")))]\n@@ -2765,38 +2720,44 @@\n    lhy\\t%0,%1\"\n   [(set_attr \"op_type\" \"RX,RXY\")])\n \n-(define_insn \"*extendqisi2_extimm\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (sign_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"d,m\")))]\n+;\n+; extendqi(si|di)2 instruction pattern(s).\n+;\n+\n+(define_insn \"*extendqi<mode>2_extimm\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n+        (sign_extend:GPR (match_operand:QI 1 \"nonimmediate_operand\" \"d,m\")))]\n   \"TARGET_EXTIMM\"\n   \"@\n-   lbr\\t%0,%1\n-   lb\\t%0,%1\"\n+   l<g>br\\t%0,%1\n+   l<g>b\\t%0,%1\"\n   [(set_attr \"op_type\" \"RRE,RXY\")])\n \n-(define_insn \"*extendqisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (sign_extend:SI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_LONG_DISPLACEMENT && !TARGET_EXTIMM\"\n-  \"lb\\t%0,%1\"\n+(define_insn \"*extendqi<mode>2\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (sign_extend:GPR (match_operand:QI 1 \"memory_operand\" \"m\")))]\n+  \"!TARGET_EXTIMM && TARGET_LONG_DISPLACEMENT\"\n+  \"l<g>b\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXY\")])\n \n-(define_insn_and_split \"*extendqisi2_short_displ\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (sign_extend:SI (match_operand:QI 1 \"s_operand\" \"Q\")))\n+(define_insn_and_split \"*extendqi<mode>2_short_displ\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (sign_extend:GPR (match_operand:QI 1 \"s_operand\" \"Q\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"!TARGET_LONG_DISPLACEMENT\"\n+  \"!TARGET_EXTIMM && !TARGET_LONG_DISPLACEMENT\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel\n-    [(set (match_dup 0) (unspec:SI [(match_dup 1) (const_int 8)] UNSPEC_ICM))\n+    [(set (match_dup 0) (unspec:GPR [(match_dup 1) (const_int 8)] UNSPEC_ICM))\n      (clobber (reg:CC CC_REGNUM))])\n    (parallel\n-    [(set (match_dup 0) (ashiftrt:SI (match_dup 0) (const_int 24)))\n+    [(set (match_dup 0) (ashiftrt:GPR (match_dup 0) (match_dup 2)))\n      (clobber (reg:CC CC_REGNUM))])]\n {\n   operands[1] = adjust_address (operands[1], BLKmode, 0);\n   set_mem_size (operands[1], GEN_INT (GET_MODE_SIZE (QImode)));\n+  operands[2] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode)\n+\t\t\t - GET_MODE_BITSIZE (QImode));\n })\n \n ;\n@@ -2831,49 +2792,6 @@\n    llgf\\t%0,%1\"\n   [(set_attr \"op_type\" \"RRE,RXY\")])\n \n-;\n-; zero_extend(hi|qi)di2 instruction pattern(s).\n-;\n-\n-(define_expand \"zero_extend<mode>di2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (zero_extend:DI (match_operand:HQI 1 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n-{\n-  if (!TARGET_64BIT)\n-    {\n-      rtx tmp = gen_reg_rtx (SImode);\n-      emit_insn (gen_zero_extend<mode>si2 (tmp, operands[1]));\n-      emit_insn (gen_zero_extendsidi2 (operands[0], tmp));\n-      DONE;\n-    }\n-  else if (!TARGET_EXTIMM)\n-    {\n-      rtx bitcount = GEN_INT (GET_MODE_BITSIZE(DImode) - \n-\t\t\t      GET_MODE_BITSIZE(<MODE>mode));\n-      operands[1] = gen_lowpart (DImode, operands[1]);\n-      emit_insn (gen_ashldi3 (operands[0], operands[1], bitcount));\n-      emit_insn (gen_lshrdi3 (operands[0], operands[0], bitcount));\n-      DONE;\n-    }\n-})\n-\n-(define_insn \"*zero_extend<mode>di2_extimm\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (zero_extend:DI (match_operand:HQI 1 \"nonimmediate_operand\" \"d,m\")))]\n-  \"TARGET_64BIT && TARGET_EXTIMM\"\n-  \"@\n-   llg<hc>r\\t%0,%1\n-   llg<hc>\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RRE,RXY\")])\n-\n-(define_insn \"*zero_extend<mode>di2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n-        (zero_extend:DI (match_operand:HQI 1 \"memory_operand\" \"m\")))]\n-  \"TARGET_64BIT  && !TARGET_EXTIMM\"\n-  \"llg<hc>\\t%0,%1\"\n-  [(set_attr \"op_type\" \"RXY\")])\n-\n ;\n ; LLGT-type instructions (zero-extend from 31 bit to 64 bit).\n ;\n@@ -2931,9 +2849,32 @@\n   \"\")\n \n ;\n-; zero_extend(hi|qi)si2 instruction pattern(s).\n+; zero_extend(hi|qi)(si|di)2 instruction pattern(s).\n ;\n \n+(define_expand \"zero_extend<mode>di2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+        (zero_extend:DI (match_operand:HQI 1 \"nonimmediate_operand\" \"\")))]\n+  \"\"\n+{\n+  if (!TARGET_64BIT)\n+    {\n+      rtx tmp = gen_reg_rtx (SImode);\n+      emit_insn (gen_zero_extend<mode>si2 (tmp, operands[1]));\n+      emit_insn (gen_zero_extendsidi2 (operands[0], tmp));\n+      DONE;\n+    }\n+  else if (!TARGET_EXTIMM)\n+    {\n+      rtx bitcount = GEN_INT (GET_MODE_BITSIZE(DImode) - \n+\t\t\t      GET_MODE_BITSIZE(<MODE>mode));\n+      operands[1] = gen_lowpart (DImode, operands[1]);\n+      emit_insn (gen_ashldi3 (operands[0], operands[1], bitcount));\n+      emit_insn (gen_lshrdi3 (operands[0], operands[0], bitcount));\n+      DONE;\n+    }\n+})\n+\n (define_expand \"zero_extend<mode>si2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n         (zero_extend:SI (match_operand:HQI 1 \"nonimmediate_operand\" \"\")))]\n@@ -2945,21 +2886,21 @@\n       emit_insn (gen_andsi3 (operands[0], operands[1], \n                    GEN_INT ((1 << GET_MODE_BITSIZE(<MODE>mode)) - 1)));\n       DONE;\n-}\n+    }\n })\n \n-(define_insn \"*zero_extend<mode>si2_extimm\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (zero_extend:SI (match_operand:HQI 1 \"nonimmediate_operand\" \"d,m\")))]\n+(define_insn \"*zero_extend<HQI:mode><GPR:mode>2_extimm\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d,d\")\n+        (zero_extend:GPR (match_operand:HQI 1 \"nonimmediate_operand\" \"d,m\")))]\n   \"TARGET_EXTIMM\"\n   \"@\n-   ll<hc>r\\t%0,%1\n-   ll<hc>\\t%0,%1\"\n+   ll<g><hc>r\\t%0,%1\n+   ll<g><hc>\\t%0,%1\"\n   [(set_attr \"op_type\" \"RRE,RXY\")])\n \n-(define_insn \"*zero_extend<mode>si2_64\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n-        (zero_extend:SI (match_operand:HQI 1 \"memory_operand\" \"m\")))]\n+(define_insn \"*zero_extend<HQI:mode><GPR:mode>2\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=d\")\n+        (zero_extend:GPR (match_operand:HQI 1 \"memory_operand\" \"m\")))]\n   \"TARGET_ZARCH && !TARGET_EXTIMM\"\n   \"llg<hc>\\t%0,%1\"\n   [(set_attr \"op_type\" \"RXY\")])"}]}