{"sha": "04eccbbe3d9a4e9d2f8f43dba8ac4cb686029fb2", "node_id": "C_kwDOANBUbNoAKDA0ZWNjYmJlM2Q5YTRlOWQyZjhmNDNkYmE4YWM0Y2I2ODYwMjlmYjI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-24T08:54:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-24T08:54:44Z"}, "message": "bswap: Fix up symbolic merging for xor and plus [PR103376]\n\nOn Mon, Nov 22, 2021 at 08:39:42AM -0000, Roger Sayle wrote:\n> This patch implements PR tree-optimization/103345 to merge adjacent\n> loads when combined with addition or bitwise xor.  The current code\n> in gimple-ssa-store-merging.c's find_bswap_or_nop alreay handles ior,\n> so that all that's required is to treat PLUS_EXPR and BIT_XOR_EXPR in\n> the same way at BIT_IOR_EXPR.\n\nUnfortunately they aren't exactly the same.  They work the same if always\nat least one operand (or corresponding byte in it) is known to be 0,\n0 | 0 = 0 ^ 0 = 0 + 0 = 0.  But for | also x | x = x for any other x,\nso perform_symbolic_merge has been accepting either that at least one\nof the bytes is 0 or that both are the same, but that is wrong for ^\nand +.\n\nThe following patch fixes that by passing through the code of binary\noperation and allowing non-zero masked1 == masked2 through only\nfor BIT_IOR_EXPR.\n\nThinking more about it, perhaps we could do more for BIT_XOR_EXPR.\nWe could allow masked1 == masked2 case for it, but would need to\ndo something different than the\n  n->n = n1->n | n2->n;\nwe do on all the bytes together.\nIn particular, for masked1 == masked2 if masked1 != 0 (well, for 0\nboth variants are the same) and masked1 != 0xff we would need to\nclear corresponding n->n byte instead of setting it to the input\nas x ^ x = 0 (but if we don't know what x and y are, the result is\nalso don't know).  Now, for plus it is much harder, because not only\nfor non-zero operands we don't know what the result is, but it can\nmodify upper bytes as well.  So perhaps only if current's byte\nmasked1 && masked2 set the resulting byte to 0xff (unknown) iff\nthe byte above it is 0 and 0, and set that resulting byte to 0xff too.\nAlso, even for | we could instead of return NULL just set the resulting\nbyte to 0xff if it is different, perhaps it will be masked off later on.\n\n2021-11-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/103376\n\t* gimple-ssa-store-merging.c (perform_symbolic_merge): Add CODE\n\targument.  If CODE is not BIT_IOR_EXPR, ensure that one of masked1\n\tor masked2 is 0.\n\t(find_bswap_or_nop_1, find_bswap_or_nop,\n\timm_store_chain_info::try_coalesce_bswap): Adjust\n\tperform_symbolic_merge callers.\n\n\t* gcc.c-torture/execute/pr103376.c: New test.", "tree": {"sha": "d63f444c23fa2321f570484e1c3eb56ce159c16f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d63f444c23fa2321f570484e1c3eb56ce159c16f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04eccbbe3d9a4e9d2f8f43dba8ac4cb686029fb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04eccbbe3d9a4e9d2f8f43dba8ac4cb686029fb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04eccbbe3d9a4e9d2f8f43dba8ac4cb686029fb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04eccbbe3d9a4e9d2f8f43dba8ac4cb686029fb2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52554dde7bf625c66192504cef01890bacc79694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52554dde7bf625c66192504cef01890bacc79694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52554dde7bf625c66192504cef01890bacc79694"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "35df0fee9559225eec604884557bde4f880caeed", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eccbbe3d9a4e9d2f8f43dba8ac4cb686029fb2/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eccbbe3d9a4e9d2f8f43dba8ac4cb686029fb2/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=04eccbbe3d9a4e9d2f8f43dba8ac4cb686029fb2", "patch": "@@ -434,14 +434,14 @@ find_bswap_or_nop_load (gimple *stmt, tree ref, struct symbolic_number *n)\n   return true;\n }\n \n-/* Compute the symbolic number N representing the result of a bitwise OR on 2\n-   symbolic number N1 and N2 whose source statements are respectively\n-   SOURCE_STMT1 and SOURCE_STMT2.  */\n+/* Compute the symbolic number N representing the result of a bitwise OR,\n+   bitwise XOR or plus on 2 symbolic number N1 and N2 whose source statements\n+   are respectively SOURCE_STMT1 and SOURCE_STMT2.  CODE is the operation.  */\n \n gimple *\n perform_symbolic_merge (gimple *source_stmt1, struct symbolic_number *n1,\n \t\t\tgimple *source_stmt2, struct symbolic_number *n2,\n-\t\t\tstruct symbolic_number *n)\n+\t\t\tstruct symbolic_number *n, enum tree_code code)\n {\n   int i, size;\n   uint64_t mask;\n@@ -563,7 +563,9 @@ perform_symbolic_merge (gimple *source_stmt1, struct symbolic_number *n1,\n \n       masked1 = n1->n & mask;\n       masked2 = n2->n & mask;\n-      if (masked1 && masked2 && masked1 != masked2)\n+      /* For BIT_XOR_EXPR or PLUS_EXPR, at least one of masked1 and masked2\n+\t has to be 0, for BIT_IOR_EXPR x | x is still x.  */\n+      if (masked1 && masked2 && (code != BIT_IOR_EXPR || masked1 != masked2))\n \treturn NULL;\n     }\n   n->n = n1->n | n2->n;\n@@ -769,7 +771,8 @@ find_bswap_or_nop_1 (gimple *stmt, struct symbolic_number *n, int limit)\n \t    return NULL;\n \n \t  source_stmt\n-\t    = perform_symbolic_merge (source_stmt1, &n1, source_stmt2, &n2, n);\n+\t    = perform_symbolic_merge (source_stmt1, &n1, source_stmt2, &n2, n,\n+\t\t\t\t      code);\n \n \t  if (!source_stmt)\n \t    return NULL;\n@@ -943,7 +946,8 @@ find_bswap_or_nop (gimple *stmt, struct symbolic_number *n, bool *bswap,\n \t      else if (!do_shift_rotate (LSHIFT_EXPR, &n0, eltsz))\n \t\treturn NULL;\n \t      ins_stmt\n-\t\t= perform_symbolic_merge (ins_stmt, &n0, source_stmt, &n1, n);\n+\t\t= perform_symbolic_merge (ins_stmt, &n0, source_stmt, &n1, n,\n+\t\t\t\t\t  BIT_IOR_EXPR);\n \n \t      if (!ins_stmt)\n \t\treturn NULL;\n@@ -2881,7 +2885,7 @@ imm_store_chain_info::try_coalesce_bswap (merged_store_group *merged_store,\n \t  end = MAX (end, info->bitpos + info->bitsize);\n \n \t  ins_stmt = perform_symbolic_merge (ins_stmt, &n, info->ins_stmt,\n-\t\t\t\t\t     &this_n, &n);\n+\t\t\t\t\t     &this_n, &n, BIT_IOR_EXPR);\n \t  if (ins_stmt == NULL)\n \t    return false;\n \t}"}, {"sha": "22e2019105ac021e0078579130b8e164db2b2c41", "filename": "gcc/testsuite/gcc.c-torture/execute/pr103376.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04eccbbe3d9a4e9d2f8f43dba8ac4cb686029fb2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr103376.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04eccbbe3d9a4e9d2f8f43dba8ac4cb686029fb2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr103376.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr103376.c?ref=04eccbbe3d9a4e9d2f8f43dba8ac4cb686029fb2", "patch": "@@ -0,0 +1,29 @@\n+/* PR tree-optimization/103376 */\n+\n+long long a = 0x123456789abcdef0LL, f;\n+int b, c, *d;\n+\n+__attribute__((noipa)) void\n+foo (int x)\n+{\n+  asm volatile (\"\" : : \"r\" (x));\n+}\n+\n+int\n+main ()\n+{\n+  long long e;\n+  e = a;\n+  if (b)\n+    {\n+      foo (c);\n+      d = (int *) 0;\n+      while (*d)\n+\t;\n+    }\n+  f = a ^ e;\n+  asm volatile (\"\" : \"+m\" (f));\n+  if (f != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}