{"sha": "062ef2c8f95540fd997e57f6d8945d307ededc81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYyZWYyYzhmOTU1NDBmZDk5N2U1N2Y2ZDg5NDVkMzA3ZWRlZGM4MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-08-30T07:48:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-08-30T07:48:53Z"}, "message": "re PR tree-optimization/58223 (wrong code at -O3 on x86_64-linux-gnu)\n\n2013-08-30  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/58223\n\t* tree-loop-distribution.c (has_anti_dependence): Rename to ...\n\t(has_anti_or_output_dependence): ... this and adjust to also\n\tlook for output dependences.\n\t(mark_nodes_having_upstream_mem_writes): Adjust.\n\t(rdg_flag_uses): Likewise.\n\n\t* gcc.dg/torture/pr58223.c: New testcase.\n\t* gcc.dg/tree-ssa/ldist-16.c: Flip expected behavior.\n\nFrom-SVN: r202096", "tree": {"sha": "e253dd1559062674db97a0032cec9bd921b7d2a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e253dd1559062674db97a0032cec9bd921b7d2a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/062ef2c8f95540fd997e57f6d8945d307ededc81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062ef2c8f95540fd997e57f6d8945d307ededc81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/062ef2c8f95540fd997e57f6d8945d307ededc81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/062ef2c8f95540fd997e57f6d8945d307ededc81/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a764c608a4f0cb9eb7b6430a0ccf1aa36bbd53e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a764c608a4f0cb9eb7b6430a0ccf1aa36bbd53e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a764c608a4f0cb9eb7b6430a0ccf1aa36bbd53e"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "7a8782b0f13b292e2e392ac1e0a284ff87efafc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062ef2c8f95540fd997e57f6d8945d307ededc81/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062ef2c8f95540fd997e57f6d8945d307ededc81/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=062ef2c8f95540fd997e57f6d8945d307ededc81", "patch": "@@ -1,3 +1,12 @@\n+2013-08-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58223\n+\t* tree-loop-distribution.c (has_anti_dependence): Rename to ...\n+\t(has_anti_or_output_dependence): ... this and adjust to also\n+\tlook for output dependences.\n+\t(mark_nodes_having_upstream_mem_writes): Adjust.\n+\t(rdg_flag_uses): Likewise.\n+\n 2013-08-30  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58010"}, {"sha": "e6fa611cf502209980173e269e303c94c3f36bba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062ef2c8f95540fd997e57f6d8945d307ededc81/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062ef2c8f95540fd997e57f6d8945d307ededc81/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=062ef2c8f95540fd997e57f6d8945d307ededc81", "patch": "@@ -1,3 +1,9 @@\n+2013-08-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58223\n+\t* gcc.dg/torture/pr58223.c: New testcase.\n+\t* gcc.dg/tree-ssa/ldist-16.c: Flip expected behavior.\n+\n 2013-08-30  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58010"}, {"sha": "978084ad0dc2d18f01f12ea0cbfb08a31dbc4c63", "filename": "gcc/testsuite/gcc.dg/torture/pr58223.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062ef2c8f95540fd997e57f6d8945d307ededc81/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58223.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062ef2c8f95540fd997e57f6d8945d307ededc81/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58223.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58223.c?ref=062ef2c8f95540fd997e57f6d8945d307ededc81", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+\n+extern void abort (void);\n+int a[2], b;\n+\n+int main ()\n+{\n+  for (b = 0; b < 2; b++)\n+    {\n+      a[0] = 1;\n+      a[b] = 0;\n+    }\n+  if (a[0] != 1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "53a9fa4f9e3b1e54f795cff4dae271bfe79c80ad", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ldist-16.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062ef2c8f95540fd997e57f6d8945d307ededc81/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062ef2c8f95540fd997e57f6d8945d307ededc81/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-16.c?ref=062ef2c8f95540fd997e57f6d8945d307ededc81", "patch": "@@ -14,8 +14,8 @@ void foo (int n)\n     }\n }\n \n-/* We should apply loop distribution and generate a memset (0).  */\n+/* We should not apply loop distribution and not generate a memset (0).  */\n \n-/* { dg-final { scan-tree-dump \"distributed: split to 2\" \"ldist\" } } */\n-/* { dg-final { scan-tree-dump-times \"generated memset zero\" 1 \"ldist\" } } */\n+/* { dg-final { scan-tree-dump \"Loop 1 is the same\" \"ldist\" } } */\n+/* { dg-final { scan-tree-dump-times \"generated memset zero\" 0 \"ldist\" } } */\n /* { dg-final { cleanup-tree-dump \"ldist\" } } */"}, {"sha": "95c4d5f753a0c563f76c97e1573fa8f592c9fc52", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/062ef2c8f95540fd997e57f6d8945d307ededc81/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/062ef2c8f95540fd997e57f6d8945d307ededc81/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=062ef2c8f95540fd997e57f6d8945d307ededc81", "patch": "@@ -542,17 +542,19 @@ already_processed_vertex_p (bitmap processed, int v)\n \t  || !bitmap_bit_p (remaining_stmts, v));\n }\n \n-/* Returns NULL when there is no anti-dependence among the successors\n-   of vertex V, otherwise returns the edge with the anti-dep.  */\n+/* Returns NULL when there is no anti-dependence or output-dependence\n+   among the successors of vertex V, otherwise returns the edge with the\n+   dependency.  */\n \n static struct graph_edge *\n-has_anti_dependence (struct vertex *v)\n+has_anti_or_output_dependence (struct vertex *v)\n {\n   struct graph_edge *e;\n \n   if (v->succ)\n     for (e = v->succ; e; e = e->succ_next)\n-      if (RDGE_TYPE (e) == anti_dd)\n+      if (RDGE_TYPE (e) == anti_dd\n+\t  || RDGE_TYPE (e) == output_dd)\n \treturn e;\n \n   return NULL;\n@@ -604,11 +606,10 @@ mark_nodes_having_upstream_mem_writes (struct graph *rdg)\n \t\t|| predecessor_has_mem_write (rdg, &(rdg->vertices[x]))\n \t\t/* In anti dependences the read should occur before\n \t\t   the write, this is why both the read and the write\n-\t\t   should be placed in the same partition.  */\n-\t\t|| has_anti_dependence (&(rdg->vertices[x])))\n-\t      {\n-\t\tbitmap_set_bit (upstream_mem_writes, x);\n-\t      }\n+\t\t   should be placed in the same partition.  In output\n+\t\t   dependences the writes order need to be preserved.  */\n+\t\t|| has_anti_or_output_dependence (&(rdg->vertices[x])))\n+\t      bitmap_set_bit (upstream_mem_writes, x);\n \t  }\n \n \tnodes.release ();\n@@ -637,7 +638,7 @@ rdg_flag_uses (struct graph *rdg, int u, partition_t partition, bitmap loops,\n   use_operand_p use_p;\n   struct vertex *x = &(rdg->vertices[u]);\n   gimple stmt = RDGV_STMT (x);\n-  struct graph_edge *anti_dep = has_anti_dependence (x);\n+  struct graph_edge *anti_dep = has_anti_or_output_dependence (x);\n \n   /* Keep in the same partition the destination of an antidependence,\n      because this is a store to the exact same location.  Putting this"}]}