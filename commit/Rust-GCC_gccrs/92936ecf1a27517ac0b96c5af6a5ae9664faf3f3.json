{"sha": "92936ecf1a27517ac0b96c5af6a5ae9664faf3f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI5MzZlY2YxYTI3NTE3YWMwYjk2YzVhZjZhNWFlOTY2NGZhZjNmMw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-07-19T20:18:08Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-07-19T20:18:08Z"}, "message": "cpplib.h (TTYPE_TABLE): Move CPP_MIN and CPP_MAX into block of operators allowed in #if...\n\n\t* cpplib.h (TTYPE_TABLE): Move CPP_MIN and CPP_MAX into block\n\tof operators allowed in #if and having an _EQ variant.  Add\n\tCPP_MIN_EQ, CPP_MAX_EQ, and CPP_DEFINED.\n\t(cpp_token flags): Add NAMED_OP.\n\t(enum node_type): Add T_OPERATOR.\n\t(struct cpp_hashnode): Add code slot to value union.\n\t* cpphash.h (spec_nodes): Remove n_defined.\n\n\t* cpplex.c (lex_line): Convert T_OPERATOR nodes to their proper types.\n\t(spell_token, can_paste, maybe_paste_with_next): Handle named operators.\n\t(is_macro_disabled): Tweak error messages.\n\n\t* cpplib.c (get_define_node): Disallow all named operators as\n\tmacro names.  Tweak error messages.\n\t(_cpp_init_stacks): Don't set up spec_nodes->n_defined.\n\n\t* cppinit.c (builtin_array): Add entries for the named operators.\n\t* cppexp.c (lex): Check for CPP_DEFINED token.\n\t(priority table): Add entries for CPP_MIN and CPP_MAX.\n\t(_cpp_parse_expr): Handle CPP_MIN and CPP_MAX.\n\ntestsuite:\n\t* gcc.dg/cpp/directiv.c, gcc.dg/cpp/macsyntx.c,\n\tgcc.dg/cpp/undef1.c: Tweak error regexps.\n\nFrom-SVN: r35137", "tree": {"sha": "fb27fc4ef85133963af7127518d36e07b5e1d021", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb27fc4ef85133963af7127518d36e07b5e1d021"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/comments", "author": null, "committer": null, "parents": [{"sha": "b86db3ebc22f22aae3f7dddadc90c9b1841ebe1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b86db3ebc22f22aae3f7dddadc90c9b1841ebe1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b86db3ebc22f22aae3f7dddadc90c9b1841ebe1a"}], "stats": {"total": 405, "additions": 247, "deletions": 158}, "files": [{"sha": "54c2514c86e88027432bcb191c43746deaa51bfc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 52, "deletions": 27, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92936ecf1a27517ac0b96c5af6a5ae9664faf3f3", "patch": "@@ -1,3 +1,28 @@\n+2000-07-19  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\tImplement C++ named operators.\n+\n+\t* cpplib.h (TTYPE_TABLE): Move CPP_MIN and CPP_MAX into block\n+\tof operators allowed in #if and having an _EQ variant.  Add\n+\tCPP_MIN_EQ, CPP_MAX_EQ, and CPP_DEFINED.\n+\t(cpp_token flags): Add NAMED_OP.\n+\t(enum node_type): Add T_OPERATOR.\n+\t(struct cpp_hashnode): Add code slot to value union.\n+\t* cpphash.h (spec_nodes): Remove n_defined.\n+\n+\t* cpplex.c (lex_line): Convert T_OPERATOR nodes to their proper types.\n+\t(spell_token, can_paste, maybe_paste_with_next): Handle named operators.\n+\t(is_macro_disabled): Tweak error messages.\n+\n+\t* cpplib.c (get_define_node): Disallow all named operators as\n+\tmacro names.  Tweak error messages.\n+\t(_cpp_init_stacks): Don't set up spec_nodes->n_defined.\n+\n+\t* cppinit.c (builtin_array): Add entries for the named operators.\n+\t* cppexp.c (lex): Check for CPP_DEFINED token.\n+\t(priority table): Add entries for CPP_MIN and CPP_MAX.\n+\t(_cpp_parse_expr): Handle CPP_MIN and CPP_MAX.\n+\n 2000-07-19  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* gcse.c (INSN_CUID): If ENABLE_CHECKING, abort if the uid is\n@@ -24,7 +49,7 @@ Wed Jul 19 01:22:15 CEST 2000  Marc Espie  <espie@cvs.openbsd.org>\n 2000-07-18  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpplib.h (TTYPE_TABLE): Rearrange to use only two per-entry\n-          macros, not five.\n+\t  macros, not five.\n \n \t* cpphash.h (TOKEN_NAME): New macro.\n \t(_cpp_spell_operator): Deleted.\n@@ -38,7 +63,7 @@ Wed Jul 19 01:22:15 CEST 2000  Marc Espie  <espie@cvs.openbsd.org>\n \tUse TOKEN_NAME and/or TOKEN_SPELL, do not reference\n \ttoken_spellings directly.\n \t* cpplib.c: Use TOKEN_SPELL.\n-\t\n+\n \t* cpplex.c (_cpp_push_token): If the token being pushed back\n \tis the previous token in this context, just subtract one from\n \tcontext->posn.\n@@ -62,20 +87,20 @@ Wed Jul 19 01:22:15 CEST 2000  Marc Espie  <espie@cvs.openbsd.org>\n \n 2000-07-17  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n-        * diagnostic.h (report_diagnostic): Change prototype.\n-\n-        * diagnostic.c (output_do_verbatim, diagnostic_for_asm,\n-        diagnostic_for_decl):  Change prototype.\n-        (error_with_decl, warning_with_decl, pedwarn_with_decl, warning,\n-        error, warning, error_with_file_and_line,\n-        warning_with_file_and_line, pedwarn_with_file_and_line, fatal):\n-        Adjust call to report_diagnostic, diagnostic_for_decl.\n-        (error_for_asm, warning_for_asm): Adjust call to diagnostic_for_asm. \n-        (output_verbatim, verbatim): Adjust call to output_do_verbatim.\n-        \n-        * c-errors.c (pedwarn_c99): Adjust call to report_diagnostic. End\n-        varaible argument list.\n-\t\n+\t* diagnostic.h (report_diagnostic): Change prototype.\n+\n+\t* diagnostic.c (output_do_verbatim, diagnostic_for_asm,\n+\tdiagnostic_for_decl):  Change prototype.\n+\t(error_with_decl, warning_with_decl, pedwarn_with_decl, warning,\n+\terror, warning, error_with_file_and_line,\n+\twarning_with_file_and_line, pedwarn_with_file_and_line, fatal):\n+\tAdjust call to report_diagnostic, diagnostic_for_decl.\n+\t(error_for_asm, warning_for_asm): Adjust call to diagnostic_for_asm.\n+\t(output_verbatim, verbatim): Adjust call to output_do_verbatim.\n+\n+\t* c-errors.c (pedwarn_c99): Adjust call to report_diagnostic. End\n+\tvaraible argument list.\n+\n 2000-07-17  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpphash.c: Don't include hashtab.h.  Most macro-handling code\n@@ -87,7 +112,7 @@ Wed Jul 19 01:22:15 CEST 2000  Marc Espie  <espie@cvs.openbsd.org>\n \tVlad's expandable hash table.\n \t(cpp_lookup): Use new functions.\n \t(_cpp_init_macros, _cpp_cleanup_macros): Adjust for new\n-\timplementation. \n+\timplementation.\n \t* cppmacro.c: New file.\n \t* cppinit.c (dump_macros_helper): New.\n \t(cpp_finish): Iterate over the identifier table directly.\n@@ -112,7 +137,7 @@ Wed Jul 19 01:22:15 CEST 2000  Marc Espie  <espie@cvs.openbsd.org>\n 2000-07-17  Geoffrey Keating  <geoffk@cygnus.com>\n \n \t* configure: Regenerate.\n-\t\n+\n \t* extend.texi (Extended Asm): Mention that a memory clobber\n \tdoes not count as a side-effect.\n \n@@ -156,7 +181,7 @@ Mon Jul 17 23:43:26 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n 2000-07-17  Chandrakala Chavva   <cchavva@cygnus.com>\n \n-\t* loop.c (check_dbra_loop) : Return if more than one condition is \n+\t* loop.c (check_dbra_loop) : Return if more than one condition is\n \tpresent to control the loop.\n \n Mon Jul 17 08:26:35 2000  Clinton Popetz  <cpopetz@cygnus.com>\n@@ -284,22 +309,22 @@ Mon Jul 17 02:37:06 2000  Marc Espie <espie@openbsd.org>\n 2000-07-15  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* diagnostic.c (doing_line_wrapping, line_wrapper_printf, notice,\n-\tv_error_with_decl, v_warning_with_decl, v_pedwarn_with_decl): Remove. \n+\tv_error_with_decl, v_warning_with_decl, v_pedwarn_with_decl): Remove.\n \t(v_message_with_decl): Rename to ...\n \t(format_with_decl): ... this. Tweak\n \t(diagnostic_for_decl): New function.\n \t(fatal_io_error): Use verbatim in lieu of notice.\n \t(announce_function): Use verbatim.\n \t(default_print_error_function): Likewise.\n \t(error_with_decl, warning_with_decl, pedwarn_with_decl): Use new\n-\tinfratructure. \n+\tinfratructure.\n \n 2000-07-15  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* mips.c (function_arg_pass_by_reference): Don't do automatic\n \taggregate initialization.\n \t(machine_dependent_reorg): Initialize variable `mode'.\n-\t\n+\n \t* mips.md (absdi2): Change variable `regno1' to unsigned int.\n \t(reload_indi): Rename loword/hiword to lo_word/hi_word to avoid\n \tconflicts with sys/param.h macro of the same name.\n@@ -337,7 +362,7 @@ Fri Jul 14 18:13:53 2000  Mark P Mitchell  <mark@codesourcery.com>\n \n 2000-07-14  Jason Merrill  <jason@redhat.com>\n \n-\t* dwarf2out.c (dwarf2out_frame_debug_expr): If we store the CFA \n+\t* dwarf2out.c (dwarf2out_frame_debug_expr): If we store the CFA\n \tregister in the stack and later in another register, use the new\n \tregister.\n \n@@ -358,7 +383,7 @@ Fri Jul 14 10:25:53 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \n \t* .cvsignore: Add generated YACC files.\n \t* objc/.cvsignore: New file.\n-\t\n+\n 2000-07-14  Neil Booth  <NeilB@earthling.net>\n \n \t* cpplex.c (adjust_column): New funcion.\n@@ -421,14 +446,14 @@ Fri Jul 14 10:25:53 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \terror_with_file_and_line, warning_with_file_and_line, sorry,\n \terror_for_asm, warning_for_asm, fatal): Reimplement.\n \t(finish_diagnostic): Clear diagnostic info as well.\n-\t\n+\n 2000-07-13  Neil Booth  <NeilB@earthling.net>\n \n \t* c-common.h (flag_digraphs): New.\n \t* c-decl.c (c_decode_option): Set flag_digraphs as appropriate.\n \t* c-lex.c (yylex): Use flag_digraphs to decide whether to\n \thonour digraphs.\n-\t\n+\n 2000-07-13  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* gcc.c (do_spec_1): Add new %B operator.\n@@ -446,7 +471,7 @@ Fri Jul 14 10:25:53 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \tnamed specs.\n \t(C and assembly specs): Use the new named specs, as appropriate.\n \n-\t* objc/lang-specs.h: Use the new named specs.  \n+\t* objc/lang-specs.h: Use the new named specs.\n \tRemove unnecessary braces.\n \n 2000-07-12  Zack Weinberg  <zack@wolery.cumb.org>"}, {"sha": "e80f8e882e3cc56c74bf004eaeff34292bc98d93", "filename": "gcc/cppexp.c", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=92936ecf1a27517ac0b96c5af6a5ae9664faf3f3", "patch": "@@ -419,10 +419,10 @@ lex (pfile, skip_evaluation)\n       else\n \tSYNTAX_ERROR2 (\"invalid character '\\\\%03o' in #if\", tok->val.aux);\n \n-    case CPP_NAME:\n-      if (tok->val.node == pfile->spec_nodes->n_defined)\n-\treturn parse_defined (pfile);\n+    case CPP_DEFINED:\n+      return parse_defined (pfile);\n \n+    case CPP_NAME:\n       op.op = CPP_INT;\n       op.unsignedp = 0;\n       op.value = 0;\n@@ -648,12 +648,13 @@ be handled with operator-specific code.  */\n #define OR_PRIO             (8 << PRIO_SHIFT)\n #define XOR_PRIO            (9 << PRIO_SHIFT)\n #define AND_PRIO           (10 << PRIO_SHIFT)\n-#define EQUAL_PRIO         (11 << PRIO_SHIFT)\n-#define LESS_PRIO          (12 << PRIO_SHIFT)\n-#define SHIFT_PRIO         (13 << PRIO_SHIFT)\n-#define PLUS_PRIO          (14 << PRIO_SHIFT)\n-#define MUL_PRIO           (15 << PRIO_SHIFT)\n-#define UNARY_PRIO        ((16 << PRIO_SHIFT) | RIGHT_ASSOC | NO_L_OPERAND)\n+#define MINMAX_PRIO\t   (11 << PRIO_SHIFT)\n+#define EQUAL_PRIO         (12 << PRIO_SHIFT)\n+#define LESS_PRIO          (13 << PRIO_SHIFT)\n+#define SHIFT_PRIO         (14 << PRIO_SHIFT)\n+#define PLUS_PRIO          (15 << PRIO_SHIFT)\n+#define MUL_PRIO           (16 << PRIO_SHIFT)\n+#define UNARY_PRIO        ((17 << PRIO_SHIFT) | RIGHT_ASSOC | NO_L_OPERAND)\n \n /* Operator to priority map.  Must be in the same order as the first\n    N entries of enum cpp_ttype.  */\n@@ -674,6 +675,8 @@ op_to_prio[] =\n   /* XOR */\t\tXOR_PRIO,\n   /* RSHIFT */\t\tSHIFT_PRIO,\n   /* LSHIFT */\t\tSHIFT_PRIO,\n+  /* MIN */\t\tMINMAX_PRIO,\t/* C++ specific */\n+  /* MAX */\t\tMINMAX_PRIO,\t/* extensions */\n \n   /* COMPL */\t\tUNARY_PRIO,\n   /* AND_AND */\t\tANDAND_PRIO,\n@@ -700,6 +703,9 @@ op_to_prio[] =\n #define BITWISE(OP) \\\n   top->value = v1 OP v2; \\\n   top->unsignedp = unsigned1 | unsigned2;\n+#define MINMAX(OP) \\\n+  top->value = (v1 OP v2) ? v1 : v2; \\\n+  top->unsignedp = unsigned1 | unsigned2;\n #define UNARY(OP) \\\n   top->value = OP v2; \\\n   top->unsignedp = unsigned2; \\\n@@ -831,6 +837,8 @@ _cpp_parse_expr (pfile)\n \t    case CPP_OR:\t BITWISE(|);\tbreak;\n \t    case CPP_LSHIFT:\t SHIFT(left_shift, right_shift); break;\n \t    case CPP_RSHIFT:\t SHIFT(right_shift, left_shift); break;\n+\t    case CPP_MIN:\t MINMAX(<);\tbreak;\n+\t    case CPP_MAX:\t MINMAX(>);\tbreak;\n \n \t    case CPP_PLUS:\n \t      if (!(top->flags & HAVE_VALUE))"}, {"sha": "c6c3f0a0b65147120e3079916d602f72d0e913a5", "filename": "gcc/cpphash.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=92936ecf1a27517ac0b96c5af6a5ae9664faf3f3", "patch": "@@ -124,7 +124,6 @@ struct include_file\n struct spec_nodes\n {\n   cpp_hashnode *n_L;\t\t\t/* L\"str\" */\n-  cpp_hashnode *n_defined;\t\t/* #if defined */\n   cpp_hashnode *n__STRICT_ANSI__;\t/* STDC_0_IN_SYSTEM_HEADERS */\n   cpp_hashnode *n__CHAR_UNSIGNED__;\t/* plain char is unsigned */\n   cpp_hashnode *n__VA_ARGS__;\t\t/* C99 vararg macros */"}, {"sha": "5f5c6201423757f5c4d3df6dcc72392ccd215774", "filename": "gcc/cppinit.c", "status": "modified", "additions": 37, "deletions": 8, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=92936ecf1a27517ac0b96c5af6a5ae9664faf3f3", "patch": "@@ -491,26 +491,33 @@ cpp_cleanup (pfile)\n \n /* This structure defines one built-in macro.  A node of type TYPE will\n    be entered in the macro hash table under the name NAME, with value\n-   VALUE (if any).  Two values are not compile time constants, so we tag\n+   VALUE (if any).  If TYPE is T_OPERATOR, the CODE field is used instead.\n+\n+   Two values are not compile time constants, so we tag\n    them in the FLAGS field instead:\n    VERS\t\tvalue is the global version_string, quoted\n    ULP\t\tvalue is the global user_label_prefix\n+\n+   Also, macros with CPLUS set in the flags field are entered only for C++.\n  */\n \n struct builtin\n {\n   const U_CHAR *name;\n   const char *value;\n-  unsigned short type;\n+  unsigned char code;\n+  unsigned char type;\n   unsigned short flags;\n   unsigned int len;\n };\n-#define VERS 0x01\n-#define ULP  0x02\n-\n-#define B(n, t)       { U n, 0, t,       0, sizeof n - 1 }\n-#define C(n, v)       { U n, v, T_MACRO, 0, sizeof n - 1 }\n-#define X(n, f)       { U n, 0, T_MACRO, f, sizeof n - 1 }\n+#define VERS  0x01\n+#define ULP   0x02\n+#define CPLUS 0x04\n+\n+#define B(n, t)       { U n, 0, 0, t,          0, sizeof n - 1 }\n+#define C(n, v)       { U n, v, 0, T_MACRO,    0, sizeof n - 1 }\n+#define X(n, f)       { U n, 0, 0, T_MACRO,    f, sizeof n - 1 }\n+#define O(n, c, f)    { U n, 0, c, T_OPERATOR, f, sizeof n - 1 }\n static const struct builtin builtin_array[] =\n {\n   B(\"__TIME__\",\t\t T_TIME),\n@@ -534,6 +541,23 @@ static const struct builtin builtin_array[] =\n #ifndef NO_BUILTIN_WCHAR_TYPE\n   C(\"__WCHAR_TYPE__\",\t\tWCHAR_TYPE),\n #endif\n+\n+  /* Named operators known to the preprocessor.  These cannot be #defined\n+     and always have their stated meaning.  They are treated like normal\n+     string tokens except for the type code and the meaning.  Most of them\n+     are only for C++ (but see iso646.h).  */\n+  O(\"defined\",\tCPP_DEFINED, 0),\n+  O(\"and\",\tCPP_AND_AND, CPLUS),\n+  O(\"and_eq\",\tCPP_AND_EQ,  CPLUS),\n+  O(\"bitand\",\tCPP_AND,     CPLUS),\n+  O(\"bitor\",\tCPP_OR,      CPLUS),\n+  O(\"compl\",\tCPP_COMPL,   CPLUS),\n+  O(\"not\",\tCPP_NOT,     CPLUS),\n+  O(\"not_eq\",\tCPP_NOT_EQ,  CPLUS),\n+  O(\"or\",\tCPP_OR_OR,   CPLUS),\n+  O(\"or_eq\",\tCPP_OR_EQ,   CPLUS),\n+  O(\"xor\",\tCPP_XOR,     CPLUS),\n+  O(\"xor_eq\",\tCPP_XOR_EQ,  CPLUS),\n };\n #undef B\n #undef C\n@@ -550,6 +574,9 @@ initialize_builtins (pfile)\n   const struct builtin *b;\n   for(b = builtin_array; b < builtin_array_end; b++)\n     {\n+      if (b->flags & CPLUS && ! CPP_OPTION (pfile, cplusplus))\n+\tcontinue;\n+\n       if (b->type == T_MACRO)\n \t{\n \t  const char *val;\n@@ -578,6 +605,8 @@ initialize_builtins (pfile)\n \t{\n \t  cpp_hashnode *hp = cpp_lookup (pfile, b->name, b->len);\n \t  hp->type = b->type;\n+\t  if (b->type == T_OPERATOR)\n+\t    hp->value.code = b->code;\n \t}\n     }\n }"}, {"sha": "9c7a03c3e06fe50affe3d895aff7e17613fd5b31", "filename": "gcc/cpplex.c", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=92936ecf1a27517ac0b96c5af6a5ae9664faf3f3", "patch": "@@ -1460,6 +1460,13 @@ lex_line (pfile, list)\n \t    list->directive = _cpp_check_directive (pfile, cur_token,\n \t\t\t\t\t\t    !(list->tokens[0].flags\n \t\t\t\t\t\t      & PREV_WHITE));\n+\t  /* Convert named operators to their proper types.  */\n+\t  if (cur_token->val.node->type == T_OPERATOR)\n+\t    {\n+\t      cur_token->flags |= NAMED_OP;\n+\t      cur_token->type = cur_token->val.node->value.code;\n+\t    }\n+\n \t  cur_token++;\n \t  break;\n \n@@ -1860,8 +1867,8 @@ lex_line (pfile, list)\n       && cur_token > first + 1 && !CPP_OPTION (pfile, lang_asm))\n     {\n       if (first[1].type == CPP_NAME)\n-\tcpp_error (pfile, \"invalid preprocessing directive #%.*s\",\n-\t\t   (int) first[1].val.node->length, first[1].val.node->name);\n+\tcpp_error (pfile, \"invalid preprocessing directive #%s\",\n+\t\t   first[1].val.node->name);\n       else\n \tcpp_error (pfile, \"invalid preprocessing directive\");\n     }\n@@ -1954,6 +1961,8 @@ spell_token (pfile, token, buffer)\n \n \tif (token->flags & DIGRAPH)\n \t  spelling = digraph_spellings[token->type - CPP_FIRST_DIGRAPH];\n+\telse if (token->flags & NAMED_OP)\n+\t  goto spell_ident;\n \telse\n \t  spelling = TOKEN_NAME (token);\n \t\n@@ -1963,6 +1972,7 @@ spell_token (pfile, token, buffer)\n       break;\n \n     case SPELL_IDENT:\n+      spell_ident:\n       memcpy (buffer, token->val.node->name, token->val.node->length);\n       buffer += token->val.node->length;\n       break;\n@@ -2245,8 +2255,8 @@ is_macro_disabled (pfile, expansion, token)\n \t  _cpp_push_token (pfile, next);\n \t  if (CPP_WTRADITIONAL (pfile))\n \t    cpp_warning (pfile,\n-\t \"function macro %.*s must be used with arguments in traditional C\",\n-\t\t\t (int) token->val.node->length, token->val.node->name);\n+\t \"function macro %s must be used with arguments in traditional C\",\n+\t\t\t token->val.node->name);\n \t  return 1;\n \t}\n     }\n@@ -2379,8 +2389,7 @@ parse_args (pfile, hp, args)\n \n   if (token->type == CPP_EOF)\n     {\n-      cpp_error (pfile, \"unterminated invocation of macro \\\"%.*s\\\"\",\n-\t\t hp->length, hp->name);\n+      cpp_error(pfile, \"unterminated argument list for macro \\\"%s\\\"\", hp->name);\n       return 1;\n     }\n   else if (argc < macro->paramc)\n@@ -2401,19 +2410,15 @@ parse_args (pfile, hp, args)\n \t}\n       else\n \t{\n-\t  cpp_error (pfile,\n-\t\t     \"insufficient arguments in invocation of macro \\\"%.*s\\\"\",\n-\t\t     hp->length, hp->name);\n+\t  cpp_error (pfile, \"not enough arguments for macro \\\"%s\\\"\", hp->name);\n \t  return 1;\n \t}\n     }\n   /* An empty argument to an empty function-like macro is fine.  */\n   else if (argc > macro->paramc\n \t   && !(macro->paramc == 0 && argc == 1 && empty_argument (args, 0)))\n     {\n-      cpp_error (pfile,\n-\t\t \"too many arguments in invocation of macro \\\"%.*s\\\"\",\n-\t\t hp->length, hp->name);\n+      cpp_error (pfile, \"too many arguments for macro \\\"%s\\\"\", hp->name);\n       return 1;\n     }\n \n@@ -2583,6 +2588,12 @@ can_paste (pfile, token1, token2, digraph)\n   enum cpp_ttype a = token1->type, b = token2->type;\n   int cxx = CPP_OPTION (pfile, cplusplus);\n \n+  /* Treat named operators as if they were ordinary NAMEs.  */\n+  if (token1->flags & NAMED_OP)\n+    a = CPP_NAME;\n+  if (token2->flags & NAMED_OP)\n+    b = CPP_NAME;\n+\n   if (a <= CPP_LAST_EQ && b == CPP_EQ)\n     return a + (CPP_EQ_EQ - CPP_EQ);\n \n@@ -2756,6 +2767,12 @@ maybe_paste_with_next (pfile, token)\n \n \t  pasted->type = type;\n \t  pasted->flags = digraph ? DIGRAPH : 0;\n+\n+\t  if (type == CPP_NAME && pasted->val.node->type == T_OPERATOR)\n+\t    {\n+\t      pasted->type = pasted->val.node->value.code;\n+\t      pasted->flags |= NAMED_OP;\n+\t    }\n \t}\n \n       /* The pasted token gets the whitespace flags and position of the\n@@ -3101,11 +3118,11 @@ _cpp_get_token (pfile)\n \ttoken = maybe_paste_with_next (pfile, token);\n \n       /* If it isn't a macro, return it now.  */\n-      if (token->type != CPP_NAME\n-\t  || token->val.node->type == T_VOID)\n+      if (token->type != CPP_NAME || token->val.node->type == T_VOID)\n \treturn token;\n \n-      /* Is macro expansion disabled in general?  */\n+      /* Is macro expansion disabled in general, or are we in the\n+\t middle of a token paste?  */\n       if (pfile->no_expand_level == pfile->cur_context || pfile->paste_level)\n \treturn token;\n  "}, {"sha": "f39ff0e89d39fb14aa21dc62ccb0efb4fa46b471", "filename": "gcc/cpplib.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=92936ecf1a27517ac0b96c5af6a5ae9664faf3f3", "patch": "@@ -236,39 +236,42 @@ static cpp_hashnode *\n get_define_node (pfile)\n      cpp_reader *pfile;\n {\n-  cpp_hashnode *node;\n   const cpp_token *token;\n \n   /* Skip any -C comments.  */\n   while ((token = _cpp_get_token (pfile))->type == CPP_COMMENT)\n     ;\n \n+  /* The token immediately after #define must be an identifier.  That\n+     identifier is not allowed to be \"defined\".  See predefined macro\n+     names (6.10.8.4).  In C++, it is not allowed to be any of the\n+     <iso646.h> macro names (which are keywords in C++) either.  */\n+\n   if (token->type != CPP_NAME)\n     {\n-      cpp_error_with_line (pfile, token->line, token->col,\n+      if (token->type == CPP_DEFINED)\n+\tcpp_error_with_line (pfile, token->line, token->col,\n+\t\t\t     \"\\\"defined\\\" cannot be used as a macro name\");\n+      else if (token->flags & NAMED_OP)\n+\tcpp_error_with_line (pfile, token->line, token->col,\n+\t\t\t     \"\\\"%s\\\" cannot be used as a macro name in C++\",\n+\t\t\t     token->val.node->name);\n+      else\n+\tcpp_error_with_line (pfile, token->line, token->col,\n \t\t\t   \"macro names must be identifiers\");\n       return 0;\n     }\n \n-  /* That identifier is not allowed to be \"defined\".  See predefined\n-     macro names (6.10.8.4).  */\n-  node = token->val.node;\n-\n-  if (node == pfile->spec_nodes->n_defined)\n-    {\n-      cpp_error_with_line (pfile, pfile->token_list.line, token->col,\n-\t\t\t   \"\\\"defined\\\" is not a legal macro name\");\n-      return 0;\n-    }\n-\n   /* Check for poisoned identifiers now.  */\n-  if (node->type == T_POISON)\n+  if (token->val.node->type == T_POISON)\n     {\n-      cpp_error (pfile, \"attempt to use poisoned \\\"%s\\\"\", node->name);\n+      cpp_error_with_line (pfile, token->line, token->col,\n+\t\t\t   \"attempt to use poisoned \\\"%s\\\"\",\n+\t\t\t   token->val.node->name);\n       return 0;\n     }\n \n-  return node;\n+  return token->val.node;\n }\n \n /* Process a #define command.  */\n@@ -876,8 +879,8 @@ do_pragma_dependency (pfile)\n \t  _cpp_dump_list (pfile, &pfile->token_list, msg, 0);\n \t  limit = pfile->limit;\n \t  pfile->limit = text;\n+\t  /* There must be something non-whitespace after. */\n \t  while (*text == ' ')\n-\t    /* There must be something non-whitespace after. */\n \t    text++; \n \t  cpp_warning (pfile, \"%.*s\", (int)(limit - text), text);\n \t}\n@@ -915,8 +918,7 @@ detect_if_not_defined (pfile)\n     return 0;\n \n   token++;\n-  if (token->type != CPP_NAME\n-      || token->val.node != pfile->spec_nodes->n_defined)\n+  if (token->type != CPP_DEFINED)\n     return 0;\n \n   token++;\n@@ -1338,8 +1340,7 @@ do_assert (pfile)\n   return;\n \n  err:\n-  cpp_warning (pfile, \"\\\"%.*s\\\" re-asserted\",\n-\t       node->length - 1, node->name + 1);\n+  cpp_warning (pfile, \"\\\"%s\\\" re-asserted\", node->name + 1);\n   FREE_ANSWER (new_answer);\n }\n \n@@ -1535,7 +1536,6 @@ _cpp_init_stacks (pfile)\n   /* Perhaps not the ideal place to put this.  */\n   pfile->spec_nodes = s = xnew (struct spec_nodes);\n   s->n_L                = cpp_lookup (pfile, DSC(\"L\"));\n-  s->n_defined          = cpp_lookup (pfile, DSC(\"defined\"));\n   s->n__STRICT_ANSI__   = cpp_lookup (pfile, DSC(\"__STRICT_ANSI__\"));\n   s->n__CHAR_UNSIGNED__ = cpp_lookup (pfile, DSC(\"__CHAR_UNSIGNED__\"));\n   s->n__VA_ARGS__       = cpp_lookup (pfile, DSC(\"__VA_ARGS__\"));"}, {"sha": "4cec348811dc28487a6b98de4f5c8d90eb47be1c", "filename": "gcc/cpplib.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=92936ecf1a27517ac0b96c5af6a5ae9664faf3f3", "patch": "@@ -64,6 +64,8 @@ typedef struct cpp_hashnode cpp_hashnode;\n   OP(CPP_XOR,\t\t\"^\")\t\t\t\\\n   OP(CPP_RSHIFT,\t\">>\")\t\t\t\\\n   OP(CPP_LSHIFT,\t\"<<\")\t\t\t\\\n+  OP(CPP_MIN,\t\t\"<?\")\t/* extension */\t\\\n+  OP(CPP_MAX,\t\t\">?\")\t\t\t\\\n \\\n   OP(CPP_COMPL,\t\t\"~\")\t\t\t\\\n   OP(CPP_AND_AND,\t\"&&\")\t/* logical */\t\\\n@@ -88,6 +90,8 @@ typedef struct cpp_hashnode cpp_hashnode;\n   OP(CPP_XOR_EQ,\t\"^=\")\t\t\t\\\n   OP(CPP_RSHIFT_EQ,\t\">>=\")\t\t\t\\\n   OP(CPP_LSHIFT_EQ,\t\"<<=\")\t\t\t\\\n+  OP(CPP_MIN_EQ,\t\"<?=\")\t/* extension */\t\\\n+  OP(CPP_MAX_EQ,\t\">?=\")\t\t\t\\\n   /* Digraphs together, beginning with CPP_FIRST_DIGRAPH.  */\t\\\n   OP(CPP_HASH,\t\t\"#\")\t/* digraphs */\t\\\n   OP(CPP_PASTE,\t\t\"##\")\t\t\t\\\n@@ -106,8 +110,7 @@ typedef struct cpp_hashnode cpp_hashnode;\n   OP(CPP_SCOPE,\t\t\"::\")\t\t\t\\\n   OP(CPP_DEREF_STAR,\t\"->*\")\t\t\t\\\n   OP(CPP_DOT_STAR,\t\".*\")\t\t\t\\\n-  OP(CPP_MIN,\t\t\"<?\")\t/* extension */\t\\\n-  OP(CPP_MAX,\t\t\">?\")\t\t\t\\\n+  OP(CPP_DEFINED,\t\"defined\") /* #if */\t\\\n \\\n   TK(CPP_NAME,\t\tSPELL_IDENT)\t/* word */\t\t\t\\\n   TK(CPP_INT,\t\tSPELL_STRING)\t/* 23 */\t\t\t\\\n@@ -147,10 +150,11 @@ struct cpp_string\n /* Flags for the cpp_token structure.  */\n #define PREV_WHITE\t(1 << 0) /* If whitespace before this token.  */\n #define BOL\t\t(1 << 1) /* Beginning of logical line.  */\n-#define DIGRAPH         (1 << 2) /* If it was a digraph.  */\n+#define DIGRAPH\t\t(1 << 2) /* If it was a digraph.  */\n #define STRINGIFY_ARG\t(1 << 3) /* If macro argument to be stringified.  */\n #define PASTE_LEFT\t(1 << 4) /* If on LHS of a ## operator.  */\n #define PASTED\t\t(1 << 5) /* The result of a ## operator.  */\n+#define NAMED_OP\t(1 << 6) /* C++ named operators, also defined */\n \n /* A preprocessing token.  This has been carefully packed and should\n    occupy 16 bytes on 32-bit hosts and 24 bytes on 64-bit hosts.  */\n@@ -603,6 +607,7 @@ enum node_type\n   T_INCLUDE_LEVEL, /* `__INCLUDE_LEVEL__' */\n   T_TIME,\t   /* `__TIME__' */\n   T_STDC,\t   /* `__STDC__' */\n+  T_OPERATOR,\t   /* operator with a name; val.code is token type */\n   T_POISON,\t   /* poisoned identifier */\n   T_MACRO,\t   /* a macro, either object-like or function-like */\n   T_ASSERTION\t   /* predicate for #assert */\n@@ -624,6 +629,7 @@ struct cpp_hashnode\n   {\n     const cpp_toklist *expansion;\t/* a macro's replacement list.  */\n     struct answer *answers;\t\t/* answers to an assertion.  */\n+    enum cpp_ttype code;\t\t/* code for a named operator.  */\n   } value;\n \n   union tree_node *fe_value;\t\t/* front end value */"}, {"sha": "d6b01a6abb797e9284db42cd7849a18fef51dbee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 71, "deletions": 66, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92936ecf1a27517ac0b96c5af6a5ae9664faf3f3", "patch": "@@ -1,3 +1,8 @@\n+2000-07-19  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* gcc.dg/cpp/directiv.c, gcc.dg/cpp/macsyntx.c,\n+\tgcc.dg/cpp/undef1.c: Tweak error regexps.\n+\n 2000-07-18  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cpplex.c (_cpp_push_token): If the token being pushed back\n@@ -431,20 +436,20 @@ Thu Jun 29 09:42:40 2000  Jeffrey A Law  (law@cygnus.com)\n \t* lib/g++.exp (g++_include_flags): Tweak.\n \n 2000-06-27  H.J. Lu  <hjl@gnu.org>\n-            Loren J. Rittle  <ljrittle@acm.org>\n+\t    Loren J. Rittle  <ljrittle@acm.org>\n+\n+\t* lib/g++.exp (g++_include_flags): Override libgloss.exp\n+\tversion with one that knows about the new gcc tree structure.\n+\t(g++_link_flags): Same.\n \n-        * lib/g++.exp (g++_include_flags): Override libgloss.exp\n-        version with one that knows about the new gcc tree structure.\n-        (g++_link_flags): Same.\n-\t\n 2000-06-26  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* gcc.dg/20000419-1.c, gcc.dg/cpp-mi.c, gcc.dg/cpp-tradwarn1.c,\n \tgcc.dg/cpp-unc.c: Use \"target *-*-*\", not \"target native\", in\n \tcase we are cross-compiling.\n \n \t* g++.old-deja/Makefile.in, g++.old-deja/configure.in,\n-\tg++.old-deja/g++.niklas/Makefile.in,           \n+\tg++.old-deja/g++.niklas/Makefile.in,\n \tg++.old-deja/g++.niklas/configure.in,\n \tg++.old-deja/g++.other/Makefile.in,\n \tg++.old-deja/g++.other/configure.in,\n@@ -479,7 +484,7 @@ Thu Jun 29 09:42:40 2000  Jeffrey A Law  (law@cygnus.com)\n 2000-06-25  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* gcc.dg/20000625-1.c, gcc.dg/20000625-2.c, gcc.dg/cpp-mi3.c:\n-        New tests.\n+\tNew tests.\n \t* gcc.dg/cpp-mi3.def: New file.\n \n \t* gcc.dg/cpp-as1.c: Also test that macro expansion does not occur\n@@ -580,7 +585,7 @@ Fri Jun  9 21:54:28 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \n 2000-06-03  David Billinghurst  <David Billinghurst@riotinto.com.au>\n \n-        * g77.f-torture/compile/20000601-1.f:  New test.\n+\t* g77.f-torture/compile/20000601-1.f:  New test.\n \n 2000-06-03  Richard Henderson  <rth@cygnus.com>\n \n@@ -623,7 +628,7 @@ Fri Jun  9 21:54:28 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \t* g++.old-deja/g++.law/refs4.C: Likewise.\n \t* g++.old-deja/g++.law/temps4.C: Likewise.\n \t* g++.old-deja/g++.brendan/complex1.C: Don't assume argc is 1.\n-\t* gcc.c-torture/execute/20000112-1.c: Include string.h.\t\n+\t* gcc.c-torture/execute/20000112-1.c: Include string.h.\n \n 2000-05-27  Zack Weinberg  <zack@wolery.cumb.org>\n \n@@ -635,7 +640,7 @@ Fri Jun  9 21:54:28 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \tg++.mike/p9732b.C, g++.other/addrof1.C, g++.other/dyncast5.C,\n \tg++.other/init5.C, g++.other/init7.C, g++.other/union2.C,\n \tg++.pt/vbase1.C, g++.robertl/eb14.C, g++.robertl/eh990323-1.C,\n-\tg++.robertl/eh990323-2.C, g++.robertl/eh990323-3.C, \n+\tg++.robertl/eh990323-2.C, g++.robertl/eh990323-3.C,\n \tg++.robertl/eh990323-4.C, g++.robertl/eh990323-5.C,\n \tg++.robertl/ice990323-2.C: Prototype exit and/or abort.\n \n@@ -883,7 +888,7 @@ Wed Apr 12 10:25:08 2000  Jeffrey A Law  (law@cygnus.com)\n \t* g++.old-deja/g++.abi/cxa_vec.C: New test.\n \n 2000-04-08  Neil Booth  <NeilB@earthling.net>\n-\t\n+\n \t* gcc.dg/cpp-nullchar.c: Remove test as\n \tembedded nulls cause problems.\n \n@@ -892,7 +897,7 @@ Wed Apr 12 10:25:08 2000  Jeffrey A Law  (law@cygnus.com)\n \t* gcc.dg/compare2.c: New test.\n \n 2000-04-08  Neil Booth  <NeilB@earthling.net>\n-\t\n+\n \t* gcc.dg/cpp-nullchar.c: New test.\n \n 2000-04-07  Zack Weinberg  <zack@wolery.cumb.org>\n@@ -913,7 +918,7 @@ Wed Apr 12 10:25:08 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* cpp-ifparen.c, cpp-missingop.c, cpp-missingparen.c,\n \tcpp-shift.c, cpp-shortcircuit.c, cpp-unary.c:  Add FSF\n-\tcopyright.\t  \n+\tcopyright.\n \n Wed Apr  5 22:51:36 2000  Hans-Peter Nilsson  <hp@axis.com>\n \n@@ -1060,7 +1065,7 @@ Fri Mar 10 01:15:19 2000  Hans-Peter Nilsson  <hp@bitrange.com>\n \n 2000-03-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n-\t* g++.old-deja/g++.warn/impint2.C: New test.\t\n+\t* g++.old-deja/g++.warn/impint2.C: New test.\n \n Sun Mar  5 23:25:12 2000  Hans-Peter Nilsson  <hp@bitrange.com>\n \n@@ -1202,7 +1207,7 @@ Fri Feb 11 12:35:40 2000  Jeffrey A Law  (law@cygnus.com)\n \t* lib/g++.exp (g++init): Use g++, not xgcc, to invoke the C++\n \tcompiler.\n \t(tool_option_proc): Fix typo.\n-\t\n+\n 2000-01-24  Geoff Keating  <geoffk@cygnus.com>\n \n \t* gcc.dg/special/ecos.exp (gcsec-1.c): Check the version\n@@ -1391,7 +1396,7 @@ Wed Dec 29 20:54:46 1999  Greg McGary <gkm@eng.ascend.com>\n 1999-12-14  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* gcc.dg/991214-1.c: New test.\n-\t\n+\n Mon Dec 13 23:03:09 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* gcc.c-torture/compile/991213-3.c: New test.\n@@ -1489,18 +1494,18 @@ Fri Oct  8 18:46:11 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n 1999-11-05  Nick Clifton  <nickc@cygnus.com>\n \n-\t* lib/target-supports.exp: New file: Provide procs to test for \n+\t* lib/target-supports.exp: New file: Provide procs to test for\n \tfeatures supported by the target.\n \t(check_weak_available): Moved here from ecos.exp.\n \t(check_alias_available): New proc: Determine of the target\n \ttoolchain supports the alias attribute.\n-\t\n+\n \t* gcc.dg/special/ecos.exp: Move check_weak_available to\n-\ttarget-supports.exp. \n+\ttarget-supports.exp.\n \t(alias-1.c): Only perform the test if the target supports\n-\taliases. \n+\taliases.\n \t(wkali-1.c): Only perform the test if the target supports\n-\taliases. \n+\taliases.\n \n \t* gcc.dg/990506-0.c: Expect error messages from cross\n \ttargets as well as native targets.\n@@ -1847,7 +1852,7 @@ Sun Jul 25 21:41:37 1999  Jeffrey A Law  (law@cygnus.com)\n \n 1999-06-29  Nick Clifton  <nickc@cygnus.com>\n \n-\t* lib/file-format.exp: New file: Move definition of proc \n+\t* lib/file-format.exp: New file: Move definition of proc\n \tgcc_target_object_format to here from\n \tgcc.dg/special/ecos.exp.\n \n@@ -1856,7 +1861,7 @@ Sun Jul 25 21:41:37 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* gcc.dg/special/ecos.exp: Remove definition of proc\n \tgcc_target_object_format.\n-\t\n+\n Mon Jun 28 08:20:51 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* gcc.c-torture/execute/990628-1.c: New test.\n@@ -1921,7 +1926,7 @@ Thu May 27 02:18:51 1999  Joern Rennecke <amylaar@cygnus.com>\n 1999-05-25  Nick Clifton  <nickc@cygnus.com>\n \n \t* gcc.c-torture/execute/bf-sign-2.c: Explicitly declare signed\n-\tbitfields as signed. \n+\tbitfields as signed.\n \n 1999-05-25  Craig Burley  <craig@jcb-sc.com>\n \n@@ -2135,7 +2140,7 @@ Fri Mar 12 16:17:28 1999  Jim Wilson  <wilson@cygnus.com>\n \t* gcc.c-torture/execute/bf-sign-2.c (struct X): Add u15 field.\n \t(main): Add check for u15.  Conditionalize u31 check depending on\n \twhether ints are <32 bits or >=32 bits.\n-\t\n+\n 1999-03-08  Craig Burley  <craig@jcb-sc.com>\n \n \t* g77.f-torture/execute/19981119-0.f: Improve testiness.\n@@ -2265,14 +2270,14 @@ Mon Feb  8 21:42:57 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* g++.dg/special/ecos.exp: New driver for new tests with special\n \trequirements\n-\t\n+\n \t* g++.dg/special/conpr-1.C: New test\n \t* g++.dg/special/conpr-2.C: New test\n \t* g++.dg/special/conpr-2a.C: New test\n \t* g++.dg/special/conpr-3.C: New test\n \t* g++.dg/special/conpr-3a.C: New test\n \t* g++.dg/special/conpr-3b.C: New test\n-\t\n+\n \t* lib/g++-dg.exp: New driver file, based on lib/gcc-dg.exp to\n \tallow g++ to use the dg driver\n \n@@ -2291,7 +2296,7 @@ Sat Feb  6 18:00:38 1999  Jeffrey A Law  (law@cygnus.com)\n \tstructure S.\n \n \t* gcc.c-torture/execute/memcheck/blkarg.x: New file: Expected\n-\tfailure for all targets. \n+\tfailure for all targets.\n \n \t* gcc.c-torture/execute/memcheck/driver.c (main): Use exit or\n \tabort to terminate program execution.\n@@ -2482,7 +2487,7 @@ Sun Oct 11 05:04:28 1998  Ken Raeburn  <raeburn@cygnus.com>\n \n 1998-11-07  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n-\t* README: New file, general information about the testsuite and \n+\t* README: New file, general information about the testsuite and\n \tnew description of the various C++ test subdirectories.\n \t* README.g++: Eliminate obsolete information, update and move most\n \trelevant stuff to README.\n@@ -2688,7 +2693,7 @@ Thu Oct  1 17:15:26 1998  Nick Clifton  <nickc@cygnus.com>\n \n \t* gcc.c-torture/compile/981001-1.c: New test.\n \t* gcc.c-torture/execute/981001-1.c: New test.\n-\t\n+\n Thu Oct  1 19:05:20 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* gcc.c-torture/compile/981001-2.c: New test.\n@@ -2733,7 +2738,7 @@ Thu Oct  1 19:05:20 1998  Jeffrey A Law  (law@cygnus.com)\n \t* g++.old-deja/g++.other/static2.C: Invocation of static data\n  \tmember of type pointer-to-function denoted as non-static member.\n \n-\t* g++.old-deja/g++.other/typedef5.C: Add some more tests involving \n+\t* g++.old-deja/g++.other/typedef5.C: Add some more tests involving\n \tchecks involving function types and aliases.\n \n 1998-09-12  Alexandre Oliva  <oliva@dcc.unicamp.br>\n@@ -2839,7 +2844,7 @@ Fri Aug 21 03:14:04 1998  Jeffrey A Law  (law@cygnus.com)\n 1998-08-19  Mark Mitchell  <mark@markmitchell.com>\n \n \t* lib/old-dejagnu.exp (old-dejagnu): Remove sig6/sig11 handling\n-\tcode. \n+\tcode.\n \n 1998-08-09  Mark Mitchell  <mark@markmitchell.com>\n \n@@ -2937,19 +2942,19 @@ Mon Jul 13 22:26:37 1998  Jeffrey A Law  (law@cygnus.com)\n \t* g77.f-torture/execute/970816-3.f:  New test from Craig.\n \n Fri Jul 10 23:43:33 1998 Martin von Loewis <martin@mira.isdn.cs.tu-berlin.de>\n-\t\n+\n \t*  g++.other/singleton.C: Return error value instead of taking\n \tSIGSEGV.\n \n-Fri Jul 10 10:02:03 1998  Klaus-Georg Adams <Klaus-Georg.Adams@chemie.uni-karlsruhe.de> \n+Fri Jul 10 10:02:03 1998  Klaus-Georg Adams <Klaus-Georg.Adams@chemie.uni-karlsruhe.de>\n \n \t*  g++.other/singleton.C: New test.   Warning is under dispute.\n \tRuntime crash is not.\n \n Thu Jul  9 23:07:45 1998  Martin von Loewis <martin@mira.isdn.cs.tu-berlin.de>\n \n-\t* g++.ns/{alias2.C, alias5.C, koenig4.C, lookup3.C ns13.C, \n-\tns14.C, ns15.C, template3.C, undef1.C, using4.C, using5.C, \n+\t* g++.ns/{alias2.C, alias5.C, koenig4.C, lookup3.C ns13.C,\n+\tns14.C, ns15.C, template3.C, undef1.C, using4.C, using5.C,\n \tusing6.C, using7.C}:  New namespace tests.\n \n Thu Jul  9 22:44:49 1998  Alexandre Oliva   <oliva@dcc.unicamp.br>\n@@ -3031,10 +3036,10 @@ Fri Jun 19 23:26:12 1998  Bruno Haible <haible@ilog.fr>\n \t* g++.old-deja/g++.other/warn01.c: Likewise.\n \n Fri Jun 19 14:06:36 1998  Robert Lipe  <robertl@dgii.com>\n-\t\n+\n \t* gcc.dg/980414-1.c: Move comments outside of ASM to improve\n \tcompatibility with assmblers with a different comment character.\n-\tEliminate use of GAS-specific extensions. \n+\tEliminate use of GAS-specific extensions.\n \n Fri Jun 19 02:05:14 1998  Jeffrey A Law  (law@cygnus.com)\n \n@@ -3492,7 +3497,7 @@ Sun Feb 23 18:12:04 1997  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* lib/gcc.exp(gcc_init): Add args parameter (which will contain\n  \tthe name of the expect testcase file).\n-\t\n+\n \t* lib/g++.exp(g++_init): Ditto.\n \n Thu Feb 20 13:53:05 1997  Bob Manson  <manson@charmed.cygnus.com>\n@@ -3536,14 +3541,14 @@ Tue Feb 11 12:57:11 1997  Bob Manson  <manson@charmed.cygnus.com>\n Sat Feb  8 14:45:55 1997  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* g++.law/virtual1.exp: Don't use CXX_FLAGS.\n-\t\n+\n \t* lib/mike-g++.exp: Don't set the compiler to be tested here.\n \t* lib/g++.exp: Set it here instead. Also, allow use of the\n \t--tool_exec and --tool_opt options. Change CXX to\n \tGXX_UNDER_TEST.\n-\t\n+\n \t* g++.old-deja/old-deja.exp: Change CXX to GXX_UNDER_TEST.\n-\t\n+\n \t* lib/gcc.exp: Allow use of --tool_exec and --tool_opt.\n \n Fri Feb  7 12:55:45 1997  Bob Manson  <manson@charmed.cygnus.com>\n@@ -3566,7 +3571,7 @@ Tue Feb  4 12:51:09 1997  Bob Manson  <manson@charmed.cygnus.com>\n \n \t* lib/gcc.exp: Add gcc,stack_size target feature.\n \n-\t* lib/g++.exp(g++_target_compile): Add the include and link \n+\t* lib/g++.exp(g++_target_compile): Add the include and link\n \tpaths here, not in two other places. And, it's $options, not\n \toptions.\n \n@@ -3617,7 +3622,7 @@ Wed Jan 29 00:36:25 1997  Bob Manson  <manson@charmed.cygnus.com>\n \n \tg++.*/*: Pass any additional flags used to compile to postbase;\n \tdelete CXXFLAGS.\n-\t\n+\n \tgcc.c-torture/*: Remove calls to gcc_init and gcc_finish; this\n \tis now done by runtest.exp. Use gcc_target_compile instead of\n \tcompile.\n@@ -3634,7 +3639,7 @@ Wed Jan 29 00:36:25 1997  Bob Manson  <manson@charmed.cygnus.com>\n \tlib/mike-{gcc,g++}.exp: Ditto.\n \tlib/old-dejagnu.exp: Ditto.\n \tlib/plumhall.exp: Ditto.\n-\t\n+\n Wed Jan  8 14:43:07 1997  Jim Wilson  <wilson@cygnus.com>\n \n \t* lib/plumhall.exp (ph_make): Use CFLAGS and ANSICFLAGS when linking.\n@@ -3983,7 +3988,7 @@ Tue Sep 19 17:26:07 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \t* lib/mike-g++.exp (postbase): If we've built a libg++.so, then\n \tpass the runtime shared library options for Solaris, OSF/1, and\n \tIrix5, and link with -lcurses to avoid unresolved references.\n-\t\n+\n Wed Sep 13 15:28:10 1995  Brendan Kehoe  <brendan@lisa.cygnus.com>\n \n \t* lib/gcc.exp (gcc_init): Return if gcc_initialized is 1, so we\n@@ -4338,7 +4343,7 @@ Mon Jan  2 11:50:10 1995  Jeff Law  (law@snake.cs.utah.edu)\n \t* g++.law/{enum8.C, enum9.C, friend5.C}: Likewise.\n \t* g++.law/{nest2.C, nest3.C, nest4.C, nest5.C}: Likewise.\n \t* g++.law/{nest6.C, next7.C, operators30.C}: Likewise.\n-\t* g++.law/{operators31.C, operators32.C, \n+\t* g++.law/{operators31.C, operators32.C,\n \t* g++.law/{operators33.C, operators34.C}: Likewise.\n \t* g++.law/{pic1.C, refs2.C}: Likewise.\n \t* g++.law/{refs3.C, refs4.C, static-mem3.C}: Likewise.\n@@ -4355,7 +4360,7 @@ Mon Jan  2 11:50:10 1995  Jeff Law  (law@snake.cs.utah.edu)\n \t* g++.law/{nest3.exp, nest4.exp}: Likewise.\n \t* g++.law/{nest5.exp, nest6.exp, nest7.exp}: Likewise.\n \t* g++.law/{operators30.exp, operators31.exp}: Likewise.\n-\t* g++.law/{operators32.exp, operators33.exp}: Likewise. \n+\t* g++.law/{operators32.exp, operators33.exp}: Likewise.\n \t* g++.law/{operators34.exp}: Likewise.\n \t* g++.law/{pic1.exp, refs2.exp, refs3.exp refs4.exp}: Likewise.\n \t* g++.law/{static-mem3.exp, static-mem4.exp}: Likewise.\n@@ -4720,7 +4725,7 @@ Sun Aug 14 09:23:53 1994  Jeff Law  (law@snake.cs.utah.edu)\n \t* gcc.c-torture/noncompile/noncompile.exp (940712-1 test): No\n \tlonger expected to fail.\n \n-\t* gcc.c-torture/execute/strct-pack-3.c: Add missing argument to \n+\t* gcc.c-torture/execute/strct-pack-3.c: Add missing argument to\n \t\"f\" function call.\n \n \t* gcc.misc-tests/mg.exp: Call gcc_stat when finished.\n@@ -4779,29 +4784,29 @@ Sat May 21 10:39:38 1994  Bill Cox  (bill@rtl.cygnus.com)\n \n Thu May 19 18:00:03 1994  Bill Cox  (bill@rtl.cygnus.com)\n \n-\t* config/sim.exp, config/udi.exp, config/unix.exp, config/vx.exp, \n+\t* config/sim.exp, config/udi.exp, config/unix.exp, config/vx.exp,\n \t    g++.brendan/alignof.exp, g++.brendan/arm3.exp, g++.brendan/code-gen5.exp,\n \t    g++.brendan/crash29.exp, g++.brendan/crash5.exp, g++.brendan/cvt3.exp,\n \t    g++.brendan/delete1.exp, g++.brendan/nest12.exp, g++.brendan/nest13.exp,\n \t    g++.brendan/overload3.exp, g++.brendan/redecl1.exp, g++.brendan/visibility2.exp,\n \t    g++.jason/cond.exp, g++.jason/hmc1.exp, g++.jason/report.exp,\n-\t    g++.law/access1.exp, g++.law/access2.exp, g++.law/arg6.exp, \n-\t    g++.law/arg7.exp, g++.law/arg8.exp, g++.law/arm1.exp, \n+\t    g++.law/access1.exp, g++.law/access2.exp, g++.law/arg6.exp,\n+\t    g++.law/arg7.exp, g++.law/arg8.exp, g++.law/arm1.exp,\n \t    g++.law/arm10.exp, g++.law/arm4.exp, g++.law/arm5.exp,\n \t    g++.law/ctors15.exp, g++.law/ctors19.exp, g++.law/cvt1.exp,\n-\t    g++.law/cvt12.exp, g++.law/cvt13.exp, g++.law/cvt18.exp, \n-\t    g++.law/cvt22.exp, g++.law/cvt3.exp, g++.law/cvt5.exp, \n-\t    g++.law/cvt6.exp, g++.law/cvt8.exp, g++.law/dtors3.exp, \n+\t    g++.law/cvt12.exp, g++.law/cvt13.exp, g++.law/cvt18.exp,\n+\t    g++.law/cvt22.exp, g++.law/cvt3.exp, g++.law/cvt5.exp,\n+\t    g++.law/cvt6.exp, g++.law/cvt8.exp, g++.law/dtors3.exp,\n \t    g++.law/except1.exp, g++.law/except3.exp, g++.law/except4.exp,\n-\t    g++.law/except5.exp, g++.law/except6.exp, g++.law/init5.exp, \n+\t    g++.law/except5.exp, g++.law/except6.exp, g++.law/init5.exp,\n \t    g++.law/init8.exp, g++.law/inline4.exp, g++.law/memoized1.exp,\n \t    g++.law/missing1.exp, g++.law/operators14.exp, g++.law/operators18.exp,\n \t    g++.law/operators9.exp, g++.law/scope2.exp, g++.law/temps2.exp,\n-\t    g++.law/temps3.exp, g++.law/temps5.exp, g++.law/typeck2.exp, \n+\t    g++.law/temps3.exp, g++.law/temps5.exp, g++.law/typeck2.exp,\n \t    g++.mike/misc4.exp, g++.mike/misc6.exp, g++.niklas/t118.exp,\n \t    g++.niklas/t128.exp, g++.niklas/t138.exp, g++.niklas/t139.exp,\n \t    g++.niklas/t140.exp, g++.niklas/t141.exp, gcc.code_quality/code_quality.exp,\n-\t    gcc.compile/compile.exp, gcc.dje/dje.exp, gcc.execute/execute.exp, \n+\t    gcc.compile/compile.exp, gcc.dje/dje.exp, gcc.execute/execute.exp,\n \t    gcc.failure/failure.exp, gcc.ieee/ieee.exp, gcc.noncompile/noncompile.exp,\n \t    gcc.special/special.exp, gcc.unsorted/unsorted.exp, lib/c-torture.exp,\n \t    lib/chill.exp, lib/g++.exp, lib/gcc.exp, lib/mike-g++.exp, lib/mike-gcc.exp,\n@@ -4919,7 +4924,7 @@ Sun Dec 19 21:45:34 1993  Jeffrey A. Law  (law@snake.cs.utah.edu\n \n \t* g++.law: Add more tests derived from g++-bugs snapshots.\n \n-\t* g++.law/init11.{c,exp}: Delete test.  Brendan sez it's \n+\t* g++.law/init11.{c,exp}: Delete test.  Brendan sez it's\n \tequivalent to g++.law/init9.\n \n \t* lib/mike-gcc.exp (postbase): Delete the .o file after we've\n@@ -4937,7 +4942,7 @@ Fri Dec 17 10:18:16 1993  Jeffrey A. Law  (law@snake.cs.utah.edu)\n Wed Dec 15 20:36:40 1993  Rob Savoye  (rob@darkstar.cygnus.com)\n \n \t* lib/gcc.exp, lib/g++.exp: Use catch rather than exec to get the\n-\tversion number. \n+\tversion number.\n \n Sun Dec 12 21:10:04 1993  Jeffrey A. Law  (law@snake.cs.utah.edu)\n \n@@ -5056,10 +5061,10 @@ Tue Sep 14 19:23:58 1993  Jeffrey Wheat  (cassidy at deneb.cygnus.com)\n \t* chill.noncompile/noncompile.exp: rewrite, based on execute.exp\n \t* lib/chill.exp: major changes to diff proc and compile and link\n \t  procs. added chill_fail and chill_pass wrappers to pass and\n-\t  fail. added more comments, and handle error codes better. \n+\t  fail. added more comments, and handle error codes better.\n \t  Added a hack to capture stderr from exec, so noncompile tests\n \t  can work.\n-\t  \n+\n Sat Sep 11 15:30:10 1993  Jeffrey Wheat  (cassidy@cygnus.com)\n \n \t* chill.execute/execute.exp: rewrite of testsuite driver\n@@ -5116,8 +5121,8 @@ Tue Jul 27 10:08:08 PDT 1993  Jeff Wheat  (cassidy@cygnus.com)\n \t* Upgraded c-torture tests from 1.19 to 1.20\n \n \t* new files:\n-\t* gcc.compile: 930609-1.c 930611-1.c 930618-1.c 930621-1.c \n-\t* gcc.compile: 930623-1.c 930623-2.c \n+\t* gcc.compile: 930609-1.c 930611-1.c 930618-1.c 930621-1.c\n+\t* gcc.compile: 930623-1.c 930623-2.c\n \t* gcc.noncompile: 930622-1.c 930622-2.c\n \t* gcc.failure: 920411-1.c 920627-2.c\n \t* gcc.ieee: 920518-1.c 920810-1.c 930529-1.c\n@@ -5142,7 +5147,7 @@ Tue Jul 13 18:38:56 PDT 1993 Jeff Wheat  (cassidy@cygnus.com)\n Sat Jun 19 07:13:05 1993  Bill Cox  (bill@rtl.cygnus.com)\n \n     This should complete moving the CHILL test files.\n-\t* chill.noncompile(.cvsignore printf.grt \n+\t* chill.noncompile(.cvsignore printf.grt\n \t    in-printf.grt chprintf.grt chprintf.ch):\n \t    Added test-support files.\n \t  (Makefile): Modified further.\n@@ -5250,7 +5255,7 @@ Mon Apr 12 15:15:37 1993  Mike Werner  (mtw@deneb.cygnus.com)\n \t  Changed several of the test result messages to be more descriptive.\n \t* config/unix-g++.exp: Proc g++_load now actually works and\n \t  executes the tests passed to it and returns a usable return\n-\t  value. \n+\t  value.\n \n Sun Apr 11 17:22:37 1993  Rob Savoye  (rob at darkstar.cygnus.com)\n "}, {"sha": "718caa22174bebcff7940caeecc6d71f7533acf7", "filename": "gcc/testsuite/gcc.dg/cpp/directiv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirectiv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirectiv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fdirectiv.c?ref=92936ecf1a27517ac0b96c5af6a5ae9664faf3f3", "patch": "@@ -28,7 +28,7 @@ EMPTY #define bar\n /* Check that directives always start a line, even if in middle of\n    macro expansion.  */\n #define func(x) x\n-func (2\t\t\t\t/* { dg-error \"unterminated invocation\" }  */\n+func (2\t\t\t\t/* { dg-error \"unterminated argument\" }  */\n #define foobar\t\t\t/* { dg-error \"may not be used inside\" } */\n \n /* For tidiness, I think the directive should still be processed\n@@ -43,5 +43,5 @@ func (2\t\t\t\t/* { dg-error \"unterminated invocation\" }  */\n \n    Note that the #if is still treated as a conditional, so there\n    should be no errors about #endif without #if.  */\n-#if func (\t\t\t/* { dg-error \"unterminated invocation\" } */\n+#if func (\t\t\t/* { dg-error \"unterminated argument\" } */\n #endif"}, {"sha": "74b9403fc2bf12e234e5e593df2f7949a3b2ebcf", "filename": "gcc/testsuite/gcc.dg/cpp/macsyntx.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fmacsyntx.c?ref=92936ecf1a27517ac0b96c5af6a5ae9664faf3f3", "patch": "@@ -48,11 +48,11 @@ one()\t\t\t\t/* OK.  */\n one(ichi)\t\t\t/* OK.  */\n one(ichi\\\n , ni)\t\t\t\t/* { dg-error \"too many\" } */\n-two(ichi)\t\t\t/* { dg-error \"insufficient\" } */\n+two(ichi)\t\t\t/* { dg-error \"not enough\" } */\n var0()\t\t\t\t/* OK.  */\n var0(ichi)\t\t\t/* OK.  */\n-var1()\t\t\t\t/* { dg-error \"insufficient\" } */\n-var1(ichi)\t\t\t/* { dg-error \"insufficient\" } */\n+var1()\t\t\t\t/* { dg-error \"not enough\" } */\n+var1(ichi)\t\t\t/* { dg-error \"not enough\" } */\n var1(ichi, ni)\t\t\t/* OK.  */\n \n /* This tests two deprecated oddities of GNU rest args - omitting a\n@@ -70,4 +70,4 @@ rest(ichi)\t\t\t/* { dg-warning \"deprecated\" } */\n #define half_invocation do_nowt(2\n #define do_nowt(x) x\n half_invocation )\t\t/* OK.  */\n-do_nowt (half_invocation))\t/* { dg-error \"unterminated invocation\" } */\n+do_nowt (half_invocation))\t/* { dg-error \"unterminated argument\" } */"}, {"sha": "68118cff60cb1ec5ef9fe07814162e113d90576c", "filename": "gcc/testsuite/gcc.dg/cpp/undef1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fundef1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92936ecf1a27517ac0b96c5af6a5ae9664faf3f3/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fundef1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fundef1.c?ref=92936ecf1a27517ac0b96c5af6a5ae9664faf3f3", "patch": "@@ -9,6 +9,6 @@\n \n #define foo(bar) bar\n \n-foo( blah\t\t\t/* { dg-error \"unterminated invocation\" }  */\n+foo( blah\t\t\t/* { dg-error \"unterminated argument\" }  */\n #undef foo\t/* { dg-error \"may not be used inside\" \"foo(#undef foo)\" } */\n      blah )"}]}